/*
 * main.c
 *
 *  Created on: 2020 Jan 02 10:21:43
 *  Author: Baldo
 */

// status: 11.05.2022

#include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaration)
#include <math.h>
#include <stdio.h> //for printf
#include "rec_data_function.h"

//#######################
//FUNCTION DECLARATION
//########################
float readCurrent(uint8_t);
void Hall_init(void);
void HallSensor(void);
void Calculation(void);

//########################
//VARIABLE DECLARATION
//########################

// NEED to be set
//motor
#define MOTOR_NUM 1 // for trque dirction motro 1 differtn form rest so far
#define MOTOR_ON_ROVER 3// 0 front left 1 front right 2 back left 3 back right

//control type
uint8_t Torque_control = 1;
uint8_t Speed_control = 0; //if 0 is torque control if 1 is speed control
uint8_t CAN_control = 0; // id 1 CAN speed controll aktive


#define IQ_REF_MAX 5
#define CAN_NO_COM_TH 250
#define MAX_Speed_CAN 2
#define SPEED_LIMIT_CTRL_TO_ZERO 100 //omega_ele rad/s
#define TIME_OMEGA_0  5000 //time since last hall before omgea set to 0 in 100us

// Define often used vaules to decrease computational effort
#define PI 3.14159265
#define TwoThird 0.66666667
#define TwoPiThird 2.0943951
#define FourPiThird 4.1887902
#define Pi180 0.01745329

#define ANGLE_ONE_DEGREE (46603U)
//#define ANGLE_60_DEGREE	 (2796203U)
//#define ANGLE_180_DEGREE (8388608U)

//#define ANGLE_LSB (9455) // 2^24 corresponds to 360째. For a timer interrupt delta time of 100us and a desired velocity of 1Hz mech = 11Hz electrical --> the angle of 0.396째 in 100us requires this value

// Define Chip select Pins for Current measurement via SPI Interface
#define ChipSelect_U 0b110
#define ChipSelect_V 0b101
#define ChipSelect_W 0b011
#define J 0.0023064 //SK J = 1/2 * m_wheel * r_wheel^2 = 1/2*1.2kg*(62mm)^2
#define K_T 0.21 //SK torque constant in Nm/A
#define K_inv (15.7/1.732) // K_inv = V / m = V_DC / 2 * 2/sqrt(3) = V_DC/sqrt(3)
//#define Psi_p 0.0082  60/  (2 * PI) * 1.4142 // Psi_p = K_back_EMF = 0.0082 V / rpm_mech --> 60 to convert in sec and /2Pi to convert in rad, sqrt(2) for amplitude value
//#define Ls 0.00088 // Ls = Lm*1.1 = 0.8mH * 1.1 = 0.00088H
#define PPZ 11
#define WHEEL_R 0.0675 //0.135/2 straigt vaule other thing casued problems

float Current_U;
float Current_V;
float Current_W;

// Declaration of Lookup Table
int8_t lookup_table[] = {0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,-1,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,-1,0,0,1,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0};
//access via the index in the  form of the 6 bits (3 previous hall states and 3 actual  hall states)
//for each of the 2^6 possibilities of sequence of hall events  it has been thought about the waveforms and thus in which direction the motor has to turn!

volatile int8_t sector = 0;
volatile int8_t direction = 0;              // direction +1/-1 -> CW and CCW
volatile uint16_t enc_val = 0;          // old and new values of all Hall Sensors
volatile uint32_t time_since_A = 0;	// time between to edges Hall A
volatile uint32_t time_since_B = 0; // time between to edges Hall B
volatile uint32_t time_since_C = 0; // time between to edges Hall C
volatile uint32_t time_180deg = 1000;        // time which last triggered HAL sensor needed for 180째
volatile uint32_t time_180deg_cal = 1000;
volatile char last_Hall_trig;			//last triggered Hall Sensor A/B/C

float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60째
//volatile uint32_t TIME_OMEGA_0 = 50000; // t over this therschold assumed to be zero

float angle_phi = 0;
float ialpha,ibeta,iq,id,Valpha,Vbeta;

volatile float omega_ele_rads = 0; 	// electrical rad / sec //current real velocity calculated from angles from hall sensors and time between interrupts
volatile float omega_mech_rps = 0;	//SK	//mechanical rounds per second
volatile float omega_mech_rps_temp = 0; //SK	//since dividing through the incremental (counted up) value of time_180deg can lead to ridiculously high velocities a plausability check is performed before temp is stored to the value
//volatile float omega_ele_rads_ref = -2*69.11; //1*69.11; //SK		//target velocity electrical in rad/s --> 1 rpsmech = 2*pi*11 = 69.11 rad/s electrical --> will be received later

volatile float omega_ele_degs = 0;

// REF vaules given to PI controller
float speed_ref = 0.0; //meters per second
float omega_ele_rads_ref = 0.0; // electrical rad per second
float iq_ref = 0.0;
float T_ref = 0.0;
float Vd = 0;
float Vq = 0;

// CAN vars
int16_t Speeds_int16_r[4];
float CAN_speed_ref = 0.0;
uint8_t CAN_new_meassage = 0; // if 1 recived can data
uint8_t CAN_no_com_counter = 0;
// distacne vaule back over can
int distance_180deg_ele_count = 0;
float Speed_act = 0;
float distance = 0;

volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which is required from the SVM app

float angle_ab;
float angle_ab_rad;
float amplitude_ab;

float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I

//float amp_limit_SVM_app = 2500;  Bo

// scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
float scaling_factor = 135;
float amplitude_corrected;


// Counter for calculation function -> only use a multiple of the SVM Interrupt
volatile uint8_t count = 0;

// Angle correction factor to align Current to Hall Sensor vuales form 14/04
float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction

//################ PI
// PID Controller declaration for Id and Iq component
typedef struct{
	float P,I,D;
	float MaxLimit, MinLimit;
	float Output;
	float Deviation_old, Deviation_old2;
	float Output_z;
}PID_param;

//Vuales 14/04 mit maurzio
//PID_param omegaq = {.P = 0.004, .I = 0.004, .D = 0.0, .MaxLimit =  0.5, .MinLimit = -0.5, .Output = 0.0, .Deviation_old = 0.0, .Deviation_old2 = 0.0}; // limits of 2 are derived from T = K_t * I = 0.21 Nm/A * 2A = 1.47A --> 2A//PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output = 0.0, .Deviation_old = 0.0, .Deviation_old2 = 0.0}; // Voltage limit to 1/2 of DC link.
//PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output = 0.0, .Deviation_old = 0.0, .Deviation_old2 = 0.0}; // Voltage limit to 1/2 of DC link.
//PID_param Id_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output = 0.0, .Deviation_old = 0.0, .Deviation_old2 = 0.0};

PID_param Iq_param = {.P = 0.50, .I = 424.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output = 0.0, .Deviation_old = 0.0, .Deviation_old2 = 0.0}; // Voltage limit to 1/2 of DC link.
PID_param Id_param = {.P = 0.50, .I = 424.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output = 0.0, .Deviation_old = 0.0, .Deviation_old2 = 0.0};
PID_param T_param = {.P = 0.01, .I = 0.01, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Output = 0.0, .Deviation_old = 0.0, .Deviation_old2 = 0.0}; // limits of 2 are derived from T = K_t * I = 0.21 Nm/A * 2A = 1.47A --> 2A

// for motro 1
PID_param T_param_1 = {.P = 0.005, .I = 0.01, .D = 0.0, .MaxLimit =  1.5, .MinLimit = -1.5, .Output = 0.0, .Deviation_old = 0.0, .Deviation_old2 = 0.0};

float PID_Controller(float,float,PID_param *param);

uint8_t falg_speed_not_new = 0;
//########################
// MAIN
//########################

int main(void)
{
  DAVE_STATUS_t status;
  status = DAVE_Init();           /* Initialization of DAVE APPs  */

  Hall_init();

  if(status != DAVE_STATUS_SUCCESS)
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
  }

  //Initialization of CAN
  	CAN_NODE_STATUS_t init_status;
  	init_status = CAN_NODE_Init(&CAN_NODE_0);

  	if (init_status != CAN_NODE_STATUS_SUCCESS) {
  		XMC_DEBUG("CAN initialization failed\n");
  	}

  if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
	  while(1U)
	      {
		//  printf("MOTOR_ON_ROVER number false");
	      }
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
		  while(1U)
		    {
			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
			  {
				  count=0;
				  Calculation();

				  f_rec_data(omega_mech_rps	,T_ref,&T_ref,-0.15,-0.2,20,0.2);
			  }
		    }
  }
}


//########################
// INTERRUPTS
//########################

// CAN Communication
void CAN_RX_MO2_ISR(void){
		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder

		uint8_t data_r[8];
		 int i;
		 for(i = 0 ; i < 8 ; i ++){
			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
		 }

		 for(i = 0 ; i < 4 ; i ++){
			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
			 }

		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s

		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6

		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;

		CAN_new_meassage = 1;
		CAN_no_com_counter = 0;
}

//CAN RX reste distance
void CAN_RX_MO7_ISR(void){
	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder

	uint8_t data_r[4];
	 int i;
	 for(i = 0 ; i < 4 ; i ++){
		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
	 }

	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
}

void CAN_TX_ISR(void){
	int16_t Inverter_state[4] = {0};

	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID

	if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
	else Inverter_state[1] = 1;

	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion

	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
	if(MOTOR_NUM == 6) distance = -distance;
	Inverter_state[3] = distance * 1000; // to mm

	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
}

// 100us Timer for speed measurement
void TimeCounterISR(void){
	time_since_A ++;
	time_since_B ++;
	time_since_C ++;
}

// Hall Sensors
void HallSensor_A_ISR(void){
	HallSensor();
	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
	time_since_A = 0;						// measurement of speed -> time between change of Hall A
	last_Hall_trig = 'A';

	if(direction == 1 ) distance_180deg_ele_count ++;
	else if(direction == -1 ) distance_180deg_ele_count --;
}
void HallSensor_B_ISR(void){
	HallSensor();
	time_180deg = time_since_B;
	time_since_B = 0;
	last_Hall_trig = 'B';
}
void HallSensor_C_ISR(void){
	HallSensor();
	time_180deg = time_since_C;
	time_since_C = 0;
	last_Hall_trig = 'C';
}

/*
// Turn off driver at Overcurrent
void OverCurrent_U_ISR(void)
{
	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
}
void OverCurrent_V_ISR(void)
{
	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
}
void OverCurrent_W_ISR(void)
{
	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
}
*/

//ISR based on Timer_1 --> 100us time base
void ISR_INT1(void)
{
}

// ISR for Updating the SVM PWM -> 50us = 20kHz
void PeriodMatchInterruptHandler(void)
{
	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_DEGREE); // SK, 11.01.2019: outcommented to enable manual testing in ISR_INT1
	}
}

//########################
// FUNCTIONS
//########################

// Hall init -> readout of actual Hall pattern to determine the motor position
void Hall_init(void){

	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(&Hall_B_ISR)) << 1) | PIN_INTERRUPT_GetPinValue(&Hall_C_ISR));

	 if(Hall_Initial == 0b100){sector = 0;}
	 else if(Hall_Initial == 0b110){sector = 1;}
	 else if(Hall_Initial == 0b010){sector = 2;}
	 else if(Hall_Initial == 0b011){sector = 3;}
	 else if(Hall_Initial == 0b001){sector = 4;}
	 else if(Hall_Initial == 0b101){sector = 5;}
}

// Function to determine direction and current Sector
void HallSensor(void){
	enc_val = enc_val << 3; //shift old values and make space for new ones
	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(&Hall_B_ISR)) << 1) | PIN_INTERRUPT_GetPinValue(&Hall_C_ISR));
	enc_val = enc_val | Hall_status; //read Sensor values and store them
	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual and prev measurement

	if(Hall_status == 0b100){sector = 0;}
		 else if(Hall_status == 0b110){sector = 1;}
		 else if(Hall_status == 0b010){sector = 2;}
		 else if(Hall_status == 0b011){sector = 3;}
		 else if(Hall_status == 0b001){sector = 4;}
		 else if(Hall_status == 0b101){sector = 5;}

}
// Routine for calculation (sector, clark-Park trans.,...)

//5kHz loop since every 4th step of 50us --> 200us --> 5kHz
void Calculation(void){
		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
		// Actual time since last angle update via Hall Sensor
		uint32_t t;
		if(last_Hall_trig == 'A') t = time_since_A;
		else if(last_Hall_trig == 'B') t = time_since_B;
		else if(last_Hall_trig == 'C') t = time_since_C;
		time_180deg_cal = time_180deg;
		// not fixing sector for calc because if chainges better to do so

		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
		else if(time_180deg_cal < 2) time_180deg_cal = 2;

		if(t < TIME_OMEGA_0){
			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
			if(angle_in_sector > 60) angle_in_sector = 60;
		}
		else{
			angle_in_sector = 30; // standig still
		}

		// CW
		if(direction==1)
		{
			angle_phi = (sector*60.0)+angle_in_sector;
			angle_phi=angle_phi+offset_pos;
			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}

			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
		}
		// CCW
		else{
			angle_phi = (sector*60.0)-angle_in_sector;
			angle_phi = angle_phi+60.0;
			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
			angle_phi=angle_phi+offset_neg;
			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}

			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
		}

		falg_speed_not_new = 0;
		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large peaks due to small time_180deg --> caused problems
		{
			omega_mech_rps = omega_mech_rps_temp;
			falg_speed_not_new = 1;
		}

		if(t > TIME_OMEGA_0){
			omega_ele_rads = 0;
			omega_mech_rps = 0;
		} // set omega  to 0 if no more hall detected
		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s

		omega_ele_degs = omega_ele_rads / Pi180;

		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% duty

		// Current read out over SPI
		Current_U = readCurrent(ChipSelect_U);
		Current_V = readCurrent(ChipSelect_V);
		Current_W = readCurrent(ChipSelect_W);

		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of the time 0.09ms

		// conversion from rad/s to degree
		float angle_phi_rad = angle_phi*Pi180;

		// to decrease multiple calculations and computational effort
		float cos_phi = cosf(angle_phi_rad);
		float sin_phi = sinf(angle_phi_rad);

		// Clark-Park transformation (from U,V,W to dq)
		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-FourPiThird)*Current_W);
		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad-FourPiThird)*Current_W);

		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of the time

		if(CAN_control == 1){// can control

			if(CAN_new_meassage == 1){
				speed_ref = CAN_speed_ref;
				CAN_new_meassage = 0;
			}
			else{
				CAN_no_com_counter ++;
			}

			if(CAN_no_com_counter > CAN_NO_COM_TH){
				//CAN_new_meassage = 0;
				CAN_no_com_counter = CAN_NO_COM_TH;
				speed_ref = 0;
			}
		}

		omega_ele_rads_ref = ( speed_ref * PPZ ) / WHEEL_R;
		 /*
		if((omega_ele_rads_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rads < 200))){ // no contorl is standing stil
			T_ref = 0;
		}
		else{
			if(MOTOR_NUM == 1){
				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param_1); // outer control loop q for omega
			}
			else{
				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param);
			}
		}
		*/

		if (Speed_control == 1){ // 1 speed contola aktive 0 not aktive torqe contol aktive
			if(MOTOR_NUM == 1) {
				iq_ref =  T_ref / K_T; // dirction for motor 1
			}
			else{
				iq_ref = - T_ref / K_T;// dirction for motor not 1
			}
		}

		iq_ref = - T_ref / K_T;// dirction for motor 1

		//limit to IQ_REF_MAx limit
		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;

		if(Torque_control == 1){
			Vd = PID_Controller(0.0,id,&Id_param);
			Vq = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
		}

		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9ms

		// dq to alpha beta for voltage
		Valpha = Vd*cos_phi - Vq*sin_phi;
		Vbeta = Vd*sin_phi + Vq*cos_phi;

		// calc angle for SVM app
		angle_ab_rad = atanf(Vbeta/Valpha);
		angle_ab = angle_ab_rad/Pi180;

		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}

		// shortend to one line
		// amplitude calculation
		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);

		//K_inv = V/m --> m = V / K_inv
		modulation_index = amplitude_ab/K_inv;

		//scale maximum 1 to 10000 -->
		modulation_index_scaled = 10000*modulation_index;


		// shortened ca 4% improvemnt
		//modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;

		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the time

}

// PID Controller
float PID_Controller(float SetPoint,float ActValue,PID_param *param){

	float Deviation = SetPoint - ActValue;
	float temp1, temp2;

	 temp1 = param->P*Deviation;
	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;

	 if (temp2 >= param->MaxLimit){
		 temp2 = param->MaxLimit;
	 }
	 else if (temp2 < param->MinLimit){
		 temp2 = param->MinLimit;
	 }

	 param->Output_z = temp2 - temp1;

	 param->Output = temp2;

	return param->Output;

}


//Read Current  via SPI-Interface
float readCurrent(uint8_t ChipSelect){
	uint8_t ReadData[2];

	BUS_IO_Write(&SPI_ChipSelect, ChipSelect);
	SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2U);
	BUS_IO_Write(&SPI_ChipSelect, 0b111);
	ReadData[0] = ReadData[0] & 0X1F; 									//cutting away the 3 info bits
	uint16_t iCurrent = ReadData[0]<<8 | ReadData[1];					//combine Data

	// calculation of the current
	float fCurrent = ((float)iCurrent - 4096.0)/160.0;					// ATTENTION: value has to be divided by 160 for the 25A Sensor and 80 for the 50A Sensor

	return fCurrent;
}










