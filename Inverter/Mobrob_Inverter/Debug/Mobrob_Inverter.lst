
Mobrob_Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007a40  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  2 .ram_code     00000448  10000800  0c007a40  00010800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000404  20000000  0c007e88  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00002014  20000404  0c00828c  00018404  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  6 .debug_aranges 00001390  00000000  00000000  00018408  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000206be  00000000  00000000  00019798  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000041a8  00000000  00000000  00039e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009f46  00000000  00000000  0003dffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000052e4  00000000  00000000  00047f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000d055  00000000  00000000  0004d228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a6ca  00000000  00000000  0005a27d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001098  00000000  00000000  00064947  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000cd9  00000000  00000000  000659df  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 f5 42 00 08 b1 02 00 08     .........B......
 800005c:	91 42 00 08 21 43 00 08 00 00 00 00 00 00 00 00     .B..!C..........
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 f1 40 00 08 4d 43 00 08 b1 02 00 08     .....@..MC......
 800012c:	59 42 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     YB..............
 800013c:	59 43 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     YC..............
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 40 00 08 99 3f 00 08 b1 02 00 08     .....@...?......
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c007e88 	.word	0x0c007e88
 800024c:	20000000 	.word	0x20000000
 8000250:	00000404 	.word	0x00000404
 8000254:	0c00828c 	.word	0x0c00828c
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c007e88 	.word	0x0c007e88
 8000264:	10000c48 	.word	0x10000c48
 8000268:	00000000 	.word	0x00000000
 800026c:	0c007a40 	.word	0x0c007a40
 8000270:	10000800 	.word	0x10000800
 8000274:	00000448 	.word	0x00000448

08000278 <__copy_table_end__>:
 8000278:	20000404 	.word	0x20000404
 800027c:	00002010 	.word	0x00002010
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000c48 	.word	0x10000c48
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	080069b5 	.word	0x080069b5
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08003f2d 	.word	0x08003f2d

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f003 f987 	bl	80035d8 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f003 f9ef 	bl	80036ac <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f003 f9ce 	bl	8003698 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <XMC_ERU_Enable+0x20>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d103      	bne.n	80003c0 <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80003b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003bc:	f000 f976 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40044000 	.word	0x40044000

080003cc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	460b      	mov	r3, r1
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003da:	7afb      	ldrb	r3, [r7, #11]
 80003dc:	089b      	lsrs	r3, r3, #2
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	089b      	lsrs	r3, r3, #2
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	3204      	adds	r2, #4
 80003ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003f2:	7afb      	ldrb	r3, [r7, #11]
 80003f4:	f003 0303 	and.w	r3, r3, #3
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4619      	mov	r1, r3
 80003fc:	23f8      	movs	r3, #248	; 0xf8
 80003fe:	408b      	lsls	r3, r1
 8000400:	43db      	mvns	r3, r3
 8000402:	ea02 0103 	and.w	r1, r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	1d02      	adds	r2, r0, #4
 800040a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	4619      	mov	r1, r3
 8000418:	2303      	movs	r3, #3
 800041a:	408b      	lsls	r3, r1
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	4a3a      	ldr	r2, [pc, #232]	; (8000510 <XMC_GPIO_Init+0x144>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d003      	beq.n	8000434 <XMC_GPIO_Init+0x68>
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	4a39      	ldr	r2, [pc, #228]	; (8000514 <XMC_GPIO_Init+0x148>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d10a      	bne.n	800044a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000438:	7afb      	ldrb	r3, [r7, #11]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	43db      	mvns	r3, r3
 8000442:	401a      	ands	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	661a      	str	r2, [r3, #96]	; 0x60
 8000448:	e042      	b.n	80004d0 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	b25b      	sxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	da3c      	bge.n	80004d0 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	7afb      	ldrb	r3, [r7, #11]
 800045c:	409a      	lsls	r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000462:	7afb      	ldrb	r3, [r7, #11]
 8000464:	08db      	lsrs	r3, r3, #3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4618      	mov	r0, r3
 800046a:	7afb      	ldrb	r3, [r7, #11]
 800046c:	08db      	lsrs	r3, r3, #3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3210      	adds	r2, #16
 8000476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4619      	mov	r1, r3
 8000484:	2307      	movs	r3, #7
 8000486:	408b      	lsls	r3, r1
 8000488:	43db      	mvns	r3, r3
 800048a:	ea02 0103 	and.w	r1, r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f100 0210 	add.w	r2, r0, #16
 8000494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000498:	7afb      	ldrb	r3, [r7, #11]
 800049a:	08db      	lsrs	r3, r3, #3
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	08db      	lsrs	r3, r3, #3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3210      	adds	r2, #16
 80004ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	7a1b      	ldrb	r3, [r3, #8]
 80004b4:	4619      	mov	r1, r3
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	f003 0307 	and.w	r3, r3, #7
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	ea42 0103 	orr.w	r1, r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	f100 0210 	add.w	r2, r0, #16
 80004cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004d0:	7afb      	ldrb	r3, [r7, #11]
 80004d2:	089b      	lsrs	r3, r3, #2
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	7afb      	ldrb	r3, [r7, #11]
 80004da:	089b      	lsrs	r3, r3, #2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3204      	adds	r2, #4
 80004e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	7afb      	ldrb	r3, [r7, #11]
 80004f0:	f003 0303 	and.w	r3, r3, #3
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	ea42 0103 	orr.w	r1, r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	1d02      	adds	r2, r0, #4
 8000502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	48028e00 	.word	0x48028e00
 8000514:	48028f00 	.word	0x48028f00

08000518 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800051e:	681b      	ldr	r3, [r3, #0]
}
 8000520:	4618      	mov	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000ffc0 	.word	0x2000ffc0

08000530 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <XMC_SCU_GetMirrorStatus+0x14>)
 8000536:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800053a:	4618      	mov	r0, r3
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	50004000 	.word	0x50004000

08000548 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000550:	f7ff fec0 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <XMC_SCU_lDelay+0x3c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <XMC_SCU_lDelay+0x40>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	0c9a      	lsrs	r2, r3, #18
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	e003      	b.n	8000576 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800056e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3301      	adds	r3, #1
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	429a      	cmp	r2, r3
 800057c:	d3f7      	bcc.n	800056e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000ffc0 	.word	0x2000ffc0
 8000588:	431bde83 	.word	0x431bde83

0800058c <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000592:	685b      	ldr	r3, [r3, #4]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	50004074 	.word	0x50004074

080005a4 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80005ac:	4a03      	ldr	r2, [pc, #12]	; (80005bc <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	60d3      	str	r3, [r2, #12]
}
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	50004074 	.word	0x50004074

080005c0 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 f89b 	bl	8000704 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80005ce:	f000 fa2d 	bl	8000a2c <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	79db      	ldrb	r3, [r3, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d00a      	beq.n	80005f0 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005da:	f000 fa65 	bl	8000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005de:	bf00      	nop
 80005e0:	f000 fa50 	bl	8000a84 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005e4:	4603      	mov	r3, r0
 80005e6:	f083 0301 	eor.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f7      	bne.n	80005e0 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7a5b      	ldrb	r3, [r3, #9]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f8ff 	bl	80007f8 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005fa:	bf00      	nop
 80005fc:	f7ff ff98 	bl	8000530 <XMC_SCU_GetMirrorStatus>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1fa      	bne.n	80005fc <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	7a1b      	ldrb	r3, [r3, #8]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f9e8 	bl	80009e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7c1b      	ldrb	r3, [r3, #16]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f90d 	bl	8000834 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	7c5b      	ldrb	r3, [r3, #17]
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f930 	bl	8000884 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	7c9b      	ldrb	r3, [r3, #18]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f917 	bl	800085c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7cdb      	ldrb	r3, [r3, #19]
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f93a 	bl	80008ac <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	799b      	ldrb	r3, [r3, #6]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00a      	beq.n	8000656 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000640:	f000 fa6a 	bl	8000b18 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000644:	bf00      	nop
 8000646:	f000 fa8f 	bl	8000b68 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800064a:	4603      	mov	r3, r0
 800064c:	f083 0301 	eor.w	r3, r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f7      	bne.n	8000646 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	78db      	ldrb	r3, [r3, #3]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800065e:	f000 faa7 	bl	8000bb0 <XMC_SCU_CLOCK_DisableSystemPll>
 8000662:	e014      	b.n	800068e <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000664:	f000 fa94 	bl	8000b90 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	8899      	ldrh	r1, [r3, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000674:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800067a:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	4608      	mov	r0, r1
 8000684:	4611      	mov	r1, r2
 8000686:	462a      	mov	r2, r5
 8000688:	4623      	mov	r3, r4
 800068a:	f000 faa1 	bl	8000bd0 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000696:	d103      	bne.n	80006a0 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000698:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800069c:	f000 f832 	bl	8000704 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80006a0:	f7ff fe18 	bl	80002d4 <SystemCoreClockUpdate>
}
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bdb0      	pop	{r4, r5, r7, pc}
 80006aa:	bf00      	nop

080006ac <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	0f1b      	lsrs	r3, r3, #28
 80006b8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006c0:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006d0:	4413      	add	r3, r2
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	50004414 	.word	0x50004414

080006e4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006e8:	f7ff ff16 	bl	8000518 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006ec:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006f0:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	50004600 	.word	0x50004600

08000704 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800070c:	4906      	ldr	r1, [pc, #24]	; (8000728 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4313      	orrs	r3, r2
 800071a:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	50004600 	.word	0x50004600

0800072c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000734:	4906      	ldr	r1, [pc, #24]	; (8000750 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4313      	orrs	r3, r2
 8000742:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	50004600 	.word	0x50004600

08000754 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 800075c:	4906      	ldr	r1, [pc, #24]	; (8000778 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4313      	orrs	r3, r2
 800076a:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	50004600 	.word	0x50004600

0800077c <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d108      	bne.n	800079e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000796:	f023 0301 	bic.w	r3, r3, #1
 800079a:	60d3      	str	r3, [r2, #12]
 800079c:	e007      	b.n	80007ae <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800079e:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	60d3      	str	r3, [r2, #12]
  }
}
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	50004710 	.word	0x50004710

080007bc <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007c6:	bf00      	nop
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f8      	bne.n	80007c8 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007d6:	4907      	ldr	r1, [pc, #28]	; (80007f4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	50004000 	.word	0x50004000
 80007f4:	50004300 	.word	0x50004300

080007f8 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000802:	bf00      	nop
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000806:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1f8      	bne.n	8000804 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000812:	4907      	ldr	r1, [pc, #28]	; (8000830 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 800081c:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800081e:	4313      	orrs	r3, r2
 8000820:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	50004000 	.word	0x50004000
 8000830:	50004300 	.word	0x50004300

08000834 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800083c:	4906      	ldr	r1, [pc, #24]	; (8000858 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800084a:	4313      	orrs	r3, r2
 800084c:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	50004600 	.word	0x50004600

0800085c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000864:	4906      	ldr	r1, [pc, #24]	; (8000880 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000872:	4313      	orrs	r3, r2
 8000874:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	50004600 	.word	0x50004600

08000884 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800088c:	4906      	ldr	r1, [pc, #24]	; (80008a8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800089a:	4313      	orrs	r3, r2
 800089c:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	50004600 	.word	0x50004600

080008ac <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008b4:	4906      	ldr	r1, [pc, #24]	; (80008d0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008c2:	4313      	orrs	r3, r2
 80008c4:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	50004600 	.word	0x50004600

080008d4 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008dc:	4906      	ldr	r1, [pc, #24]	; (80008f8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008ea:	4313      	orrs	r3, r2
 80008ec:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	50004600 	.word	0x50004600

080008fc <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000904:	4906      	ldr	r1, [pc, #24]	; (8000920 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000912:	4313      	orrs	r3, r2
 8000914:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	50004600 	.word	0x50004600

08000924 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800092c:	4906      	ldr	r1, [pc, #24]	; (8000948 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800093a:	4313      	orrs	r3, r2
 800093c:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	50004600 	.word	0x50004600

0800094c <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	6053      	str	r3, [r2, #4]
}
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	50004600 	.word	0x50004600

0800096c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000976:	4a19      	ldr	r2, [pc, #100]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800098e:	4913      	ldr	r1, [pc, #76]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	3b01      	subs	r3, #1
 8000994:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3b01      	subs	r3, #1
 800099a:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800099c:	4313      	orrs	r3, r2
 800099e:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009a0:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009aa:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009ac:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f023 0310 	bic.w	r3, r3, #16
 80009b6:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80009b8:	4a08      	ldr	r2, [pc, #32]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c2:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009c4:	bf00      	nop
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f9      	beq.n	80009c6 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	50004710 	.word	0x50004710

080009e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009f4:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d10e      	bne.n	8000a1a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a06:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a08:	2064      	movs	r0, #100	; 0x64
 8000a0a:	f7ff fd9d 	bl	8000548 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a0e:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a18:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f7ff fd94 	bl	8000548 <XMC_SCU_lDelay>
}
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	50004710 	.word	0x50004710

08000a2c <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d109      	bne.n	8000a50 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a42:	bf00      	nop
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f9      	beq.n	8000a44 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00a      	beq.n	8000a72 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a62:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a64:	bf00      	nop
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1f9      	bne.n	8000a66 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	50004200 	.word	0x50004200
 8000a80:	50004400 	.word	0x50004400

08000a84 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bf0c      	ite	eq
 8000a94:	2301      	moveq	r3, #1
 8000a96:	2300      	movne	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	50004300 	.word	0x50004300

08000aa8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000aac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ab0:	f7ff fd78 	bl	80005a4 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000ab4:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000abe:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000ac0:	bf00      	nop
 8000ac2:	f7ff fd63 	bl	800058c <XMC_SCU_INTERUPT_GetEventStatus>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0f8      	beq.n	8000ac2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000ad0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ad4:	f7ff fd66 	bl	80005a4 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000ade:	bf00      	nop
 8000ae0:	f7ff fd54 	bl	800058c <XMC_SCU_INTERUPT_GetEventStatus>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0f8      	beq.n	8000ae0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000aee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000af2:	f7ff fd57 	bl	80005a4 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b02:	bf00      	nop
 8000b04:	f7ff fd42 	bl	800058c <XMC_SCU_INTERUPT_GetEventStatus>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f8      	beq.n	8000b04 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	50004300 	.word	0x50004300

08000b18 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b26:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b28:	4d0d      	ldr	r5, [pc, #52]	; (8000b60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b32:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b36:	f002 fdaf 	bl	8003698 <OSCHP_GetFrequency>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8000b42:	0d1b      	lsrs	r3, r3, #20
 8000b44:	3b01      	subs	r3, #1
 8000b46:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b48:	4323      	orrs	r3, r4
 8000b4a:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b4c:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b4e:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b56:	6053      	str	r3, [r2, #4]
}
 8000b58:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	50004710 	.word	0x50004710
 8000b60:	50004700 	.word	0x50004700
 8000b64:	6b5fca6b 	.word	0x6b5fca6b

08000b68 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b74:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b78:	bf0c      	ite	eq
 8000b7a:	2301      	moveq	r3, #1
 8000b7c:	2300      	movne	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	50004710 	.word	0x50004710

08000b90 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b94:	4a05      	ldr	r2, [pc, #20]	; (8000bac <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b9e:	f023 0302 	bic.w	r3, r3, #2
 8000ba2:	6053      	str	r3, [r2, #4]
}
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	50004710 	.word	0x50004710

08000bb0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bb4:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	6053      	str	r3, [r2, #4]
}
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	50004710 	.word	0x50004710

08000bd0 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60ba      	str	r2, [r7, #8]
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4603      	mov	r3, r0
 8000bdc:	81fb      	strh	r3, [r7, #14]
 8000bde:	460b      	mov	r3, r1
 8000be0:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000be2:	89fb      	ldrh	r3, [r7, #14]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fdc9 	bl	800077c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000bea:	7b7b      	ldrb	r3, [r7, #13]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	f040 8084 	bne.w	8000cfa <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000bf8:	f002 fd4e 	bl	8003698 <OSCHP_GetFrequency>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	4b4b      	ldr	r3, [pc, #300]	; (8000d2c <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000c00:	fba3 2302 	umull	r2, r3, r3, r2
 8000c04:	0c9b      	lsrs	r3, r3, #18
 8000c06:	059b      	lsls	r3, r3, #22
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e002      	b.n	8000c12 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c0c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c10:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	fb02 f203 	mul.w	r2, r2, r3
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c20:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	4a42      	ldr	r2, [pc, #264]	; (8000d30 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000c26:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	0d9b      	lsrs	r3, r3, #22
 8000c2e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c30:	4a40      	ldr	r2, [pc, #256]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c32:	4b40      	ldr	r3, [pc, #256]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c3c:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c3e:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c48:	493a      	ldr	r1, [pc, #232]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4a:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c50:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	3a01      	subs	r2, #1
 8000c56:	0212      	lsls	r2, r2, #8
 8000c58:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c60:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c6c:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c76:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c78:	4a2e      	ldr	r2, [pc, #184]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f023 0310 	bic.w	r3, r3, #16
 8000c82:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c84:	4a2b      	ldr	r2, [pc, #172]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c86:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c90:	bf00      	nop
 8000c92:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f9      	beq.n	8000c92 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c9e:	4a25      	ldr	r2, [pc, #148]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f023 0301 	bic.w	r3, r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000caa:	bf00      	nop
 8000cac:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1f9      	bne.n	8000cac <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	4a20      	ldr	r2, [pc, #128]	; (8000d3c <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc0:	095b      	lsrs	r3, r3, #5
 8000cc2:	0d9b      	lsrs	r3, r3, #22
 8000cc4:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cc6:	6a3a      	ldr	r2, [r7, #32]
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d202      	bcs.n	8000cd4 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000cce:	6938      	ldr	r0, [r7, #16]
 8000cd0:	f000 f838 	bl	8000d44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000cda:	fba2 2303 	umull	r2, r3, r2, r3
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	0d9b      	lsrs	r3, r3, #22
 8000ce2:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000ce4:	6a3a      	ldr	r2, [r7, #32]
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d202      	bcs.n	8000cf2 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000cec:	6938      	ldr	r0, [r7, #16]
 8000cee:	f000 f829 	bl	8000d44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000cf2:	6a38      	ldr	r0, [r7, #32]
 8000cf4:	f000 f826 	bl	8000d44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000cf8:	e015      	b.n	8000d26 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d04:	6a3b      	ldr	r3, [r7, #32]
 8000d06:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d0c:	4a09      	ldr	r2, [pc, #36]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d18:	bf00      	nop
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f9      	beq.n	8000d1a <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	aaaaaaab 	.word	0xaaaaaaab
 8000d34:	50004710 	.word	0x50004710
 8000d38:	f08080ff 	.word	0xf08080ff
 8000d3c:	88888889 	.word	0x88888889
 8000d40:	b60b60b7 	.word	0xb60b60b7

08000d44 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d60:	2032      	movs	r0, #50	; 0x32
 8000d62:	f7ff fbf1 	bl	8000548 <XMC_SCU_lDelay>
}
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	50004710 	.word	0x50004710

08000d70 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bf0c      	ite	eq
 8000d86:	2301      	moveq	r3, #1
 8000d88:	2300      	movne	r3, #0
 8000d8a:	b2db      	uxtb	r3, r3
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	4608      	mov	r0, r1
 8000da2:	4611      	mov	r1, r2
 8000da4:	461a      	mov	r2, r3
 8000da6:	4603      	mov	r3, r0
 8000da8:	70fb      	strb	r3, [r7, #3]
 8000daa:	460b      	mov	r3, r1
 8000dac:	70bb      	strb	r3, [r7, #2]
 8000dae:	4613      	mov	r3, r2
 8000db0:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000db2:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000db4:	78bb      	ldrb	r3, [r7, #2]
 8000db6:	041b      	lsls	r3, r3, #16
 8000db8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000dbc:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000dbe:	787b      	ldrb	r3, [r7, #1]
 8000dc0:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000dc2:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	601a      	str	r2, [r3, #0]
}
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	601a      	str	r2, [r3, #0]
}
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4293      	cmp	r3, r2
 8000e24:	bf38      	it	cc
 8000e26:	4613      	movcc	r3, r2
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4293      	cmp	r3, r2
 8000e44:	bf28      	it	cs
 8000e46:	4613      	movcs	r3, r2
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <XMC_CAN_NODE_NominalBitTimeConfigure>:
}

/* Baudrate Configuration */
void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b090      	sub	sp, #64	; 0x40
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t temp_brp = 12U ;
 8000e5e:	230c      	movs	r3, #12
 8000e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t temp_tseg1 = 12U;
 8000e62:	230c      	movs	r3, #12
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t best_brp = 0U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t best_tseg1 = 1U;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t best_tseg2 = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t best_tbaud = 0U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t best_error = 10000U;
 8000e76:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e80:	e067      	b.n	8000f52 <XMC_CAN_NODE_NominalBitTimeConfigure+0xfe>
  {

    uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	461a      	mov	r2, r3
 8000e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	613b      	str	r3, [r7, #16]
    uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t temp_baudrate;
    uint32_t error;

  if((temp_tbaud % 10U) > 5U)
 8000ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ea6:	4b5b      	ldr	r3, [pc, #364]	; (8001014 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000ea8:	fba3 2301 	umull	r2, r3, r3, r1
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	1aca      	subs	r2, r1, r3
 8000eb8:	2a05      	cmp	r2, #5
 8000eba:	d909      	bls.n	8000ed0 <XMC_CAN_NODE_NominalBitTimeConfigure+0x7c>
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	4a55      	ldr	r2, [pc, #340]	; (8001014 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  temp_tbaud++;
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	3301      	adds	r3, #1
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ece:	e005      	b.n	8000edc <XMC_CAN_NODE_NominalBitTimeConfigure+0x88>
  }
  else
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	4a50      	ldr	r2, [pc, #320]	; (8001014 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_tbaud > 0U)
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00a      	beq.n	8000ef8 <XMC_CAN_NODE_NominalBitTimeConfigure+0xa4>
  {
    temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 8000ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	461a      	mov	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	e007      	b.n	8000f08 <XMC_CAN_NODE_NominalBitTimeConfigure+0xb4>
  }
  else
  {
    temp_baudrate = f_quanta / 10U;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4a46      	ldr	r2, [pc, #280]	; (8001014 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c0>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	623b      	str	r3, [r7, #32]
  temp_tbaud = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_baudrate >= can_bit_time->baudrate)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d805      	bhi.n	8000f1e <XMC_CAN_NODE_NominalBitTimeConfigure+0xca>
  {
  error = temp_baudrate - can_bit_time->baudrate;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	6a3a      	ldr	r2, [r7, #32]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	e004      	b.n	8000f28 <XMC_CAN_NODE_NominalBitTimeConfigure+0xd4>
  }
  else
  {
  error = can_bit_time->baudrate - temp_baudrate;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	61fb      	str	r3, [r7, #28]
  }

  if ((temp_tbaud <= 20U) && (best_error > error))
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	2b14      	cmp	r3, #20
 8000f2c:	d80e      	bhi.n	8000f4c <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
 8000f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d90a      	bls.n	8000f4c <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
  {
    best_brp = temp_brp;
 8000f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
    best_tbaud = temp_tbaud;
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    best_error = (error);
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28

    if (error < 1000U)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f48:	d200      	bcs.n	8000f4c <XMC_CAN_NODE_NominalBitTimeConfigure+0xf8>
    {
      break;
 8000f4a:	e005      	b.n	8000f58 <XMC_CAN_NODE_NominalBitTimeConfigure+0x104>
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 8000f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f4e:	3301      	adds	r3, #1
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f54:	2b40      	cmp	r3, #64	; 0x40
 8000f56:	d994      	bls.n	8000e82 <XMC_CAN_NODE_NominalBitTimeConfigure+0x2e>
      break;
    }
   }
  }
  /* search for best sample point */
  best_error = 10000U;
 8000f58:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8000f5e:	2340      	movs	r3, #64	; 0x40
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f62:	e02e      	b.n	8000fc2 <XMC_CAN_NODE_NominalBitTimeConfigure+0x16e>
  {
    uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 8000f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f66:	3301      	adds	r3, #1
 8000f68:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f6c:	fb02 f203 	mul.w	r2, r2, r3
 8000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	60fb      	str	r3, [r7, #12]
  uint32_t error;
  if (tempSamplePoint >= can_bit_time->sample_point)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	891b      	ldrh	r3, [r3, #8]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d806      	bhi.n	8000f92 <XMC_CAN_NODE_NominalBitTimeConfigure+0x13e>
  {
      error = tempSamplePoint  - can_bit_time->sample_point;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	891b      	ldrh	r3, [r3, #8]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	e005      	b.n	8000f9e <XMC_CAN_NODE_NominalBitTimeConfigure+0x14a>
  }
  else
  {
    error = can_bit_time->sample_point  - tempSamplePoint;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	891b      	ldrh	r3, [r3, #8]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	61bb      	str	r3, [r7, #24]
  }
    if (best_error > error)
 8000f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d903      	bls.n	8000fae <XMC_CAN_NODE_NominalBitTimeConfigure+0x15a>
    {
      best_tseg1 = temp_tseg1;
 8000fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
      best_error = error;
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	891b      	ldrh	r3, [r3, #8]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d900      	bls.n	8000fbc <XMC_CAN_NODE_NominalBitTimeConfigure+0x168>
    {
      break;
 8000fba:	e005      	b.n	8000fc8 <XMC_CAN_NODE_NominalBitTimeConfigure+0x174>
   }
  }
  /* search for best sample point */
  best_error = 10000U;

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8000fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d8cd      	bhi.n	8000f64 <XMC_CAN_NODE_NominalBitTimeConfigure+0x110>
    {
      break;
    }
  }

  best_tseg2 = best_tbaud - best_tseg1 - 1U;
 8000fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fefe 	bl	8000dd4 <XMC_CAN_NODE_EnableConfigurationChange>
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	031b      	lsls	r3, r3, #12
 8000fde:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	895b      	ldrh	r3, [r3, #10]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	b2db      	uxtb	r3, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fec:	431a      	orrs	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
 8000fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8000ff8:	431a      	orrs	r2, r3
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
 8000ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001002:	431a      	orrs	r2, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	611a      	str	r2, [r3, #16]
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fef3 	bl	8000df4 <XMC_CAN_NODE_DisableConfigurationChange>
}
 800100e:	3740      	adds	r7, #64	; 0x40
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	cccccccd 	.word	0xcccccccd

08001018 <XMC_CAN_AllocateMOtoNodeList>:
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8001028:	bf00      	nop
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fea0 	bl	8000d70 <XMC_CAN_IsPanelControlReady>
 8001030:	4603      	mov	r3, r0
 8001032:	f083 0301 	eor.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1f6      	bne.n	800102a <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	3301      	adds	r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	78ba      	ldrb	r2, [r7, #2]
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	2102      	movs	r1, #2
 8001048:	f7ff fea6 	bl	8000d98 <XMC_CAN_PanelControl>
}
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop

08001054 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <XMC_CAN_Enable+0x30>)
 800105e:	f7ff fb25 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 0201 	bic.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 800106e:	bf00      	nop
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f9      	bne.n	8001070 <XMC_CAN_Enable+0x1c>
  {
    /*Do nothing*/
  };
}
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	10000010 	.word	0x10000010

08001088 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#endif  
}
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    default:
      frequency = 0;
      break;
  }
#else
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80010a8:	f7ff fb1c 	bl	80006e4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80010ac:	60f8      	str	r0, [r7, #12]
#endif  

  return frequency;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	460b      	mov	r3, r1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	72fb      	strb	r3, [r7, #11]
  uint32_t peripheral_frequency;

  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff ffc4 	bl	8001054 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff ffd9 	bl	8001088 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff ffe2 	bl	80010a0 <XMC_CAN_GetBaudrateClockFrequency>
 80010dc:	61f8      	str	r0, [r7, #28]

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80010ea:	2000      	movs	r0, #0
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fe91 	bl	8000e14 <max>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80010fa:	f7ff fe9b 	bl	8000e34 <min>
 80010fe:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	fbb2 f3f3 	udiv	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8001116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	60da      	str	r2, [r3, #12]

  return freq_n;
 800112e:	697b      	ldr	r3, [r7, #20]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8001148:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 800114c:	095b      	lsrs	r3, r3, #5
 800114e:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	035a      	lsls	r2, r3, #13
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 031f 	and.w	r3, r3, #31
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	6892      	ldr	r2, [r2, #8]
 800116c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001170:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	6891      	ldr	r1, [r2, #8]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	430a      	orrs	r2, r1
 8001180:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	79db      	ldrb	r3, [r3, #7]
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d007      	beq.n	80011a0 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	79db      	ldrb	r3, [r3, #7]
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800119a:	2b00      	cmp	r3, #0
 800119c:	d100      	bne.n	80011a0 <XMC_CAN_MO_Config+0x68>
 800119e:	e060      	b.n	8001262 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d000      	beq.n	80011b2 <XMC_CAN_MO_Config+0x7a>
 80011b0:	e057      	b.n	8001262 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2220      	movs	r2, #32
 80011b8:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	79db      	ldrb	r3, [r3, #7]
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d128      	bne.n	800121a <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011d4:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80011de:	049b      	lsls	r3, r3, #18
 80011e0:	461a      	mov	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011fc:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001206:	049b      	lsls	r3, r3, #18
 8001208:	461a      	mov	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	e009      	b.n	800122e <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6852      	ldr	r2, [r2, #4]
 8001222:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6892      	ldr	r2, [r2, #8]
 800122c:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7e1b      	ldrb	r3, [r3, #24]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10c      	bne.n	8001250 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f81a 	bl	8001270 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001244:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <XMC_CAN_MO_Config+0x130>)
 800124c:	61da      	str	r2, [r3, #28]
 800124e:	e008      	b.n	8001262 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001258:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a03      	ldr	r2, [pc, #12]	; (800126c <XMC_CAN_MO_Config+0x134>)
 8001260:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	062000c0 	.word	0x062000c0
 800126c:	00a00640 	.word	0x00a00640

08001270 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001278:	2303      	movs	r3, #3
 800127a:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e1b      	ldrb	r3, [r3, #24]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d122      	bne.n	80012ca <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2220      	movs	r2, #32
 800128a:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	7b12      	ldrb	r2, [r2, #12]
 800129e:	0612      	lsls	r2, r2, #24
 80012a0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80012a4:	430a      	orrs	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6912      	ldr	r2, [r2, #16]
 80012b0:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6952      	ldr	r2, [r2, #20]
 80012ba:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <XMC_CAN_MO_UpdateData+0x6c>)
 80012c2:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e001      	b.n	80012ce <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80012ca:	2303      	movs	r3, #3
 80012cc:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	00280040 	.word	0x00280040

080012e0 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 800130e:	2304      	movs	r3, #4
 8001310:	75fb      	strb	r3, [r7, #23]
 8001312:	e00c      	b.n	800132e <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800131a:	2302      	movs	r3, #2
 800131c:	75fb      	strb	r3, [r7, #23]
 800131e:	e006      	b.n	800132e <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001328:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800135a:	0adb      	lsrs	r3, r3, #11
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001372:	2303      	movs	r3, #3
 8001374:	75fb      	strb	r3, [r7, #23]
 8001376:	e0a7      	b.n	80014c8 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d102      	bne.n	8001384 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 800137e:	2302      	movs	r3, #2
 8001380:	75fb      	strb	r3, [r7, #23]
 8001382:	e0a1      	b.n	80014c8 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2208      	movs	r2, #8
 800138a:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001396:	0f5b      	lsrs	r3, r3, #29
 8001398:	2b00      	cmp	r3, #0
 800139a:	d140      	bne.n	800141e <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	79d3      	ldrb	r3, [r2, #7]
 80013a0:	f36f 1345 	bfc	r3, #5, #1
 80013a4:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699a      	ldr	r2, [r3, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <XMC_CAN_MO_Receive+0x19c>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	0c9b      	lsrs	r3, r3, #18
 80013b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6853      	ldr	r3, [r2, #4]
 80013ba:	f361 031c 	bfi	r3, r1, #0, #29
 80013be:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ca:	0f5b      	lsrs	r3, r3, #29
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	b2d9      	uxtb	r1, r3
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	7ad3      	ldrb	r3, [r2, #11]
 80013d8:	f361 1345 	bfi	r3, r1, #5, #1
 80013dc:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7adb      	ldrb	r3, [r3, #11]
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <XMC_CAN_MO_Receive+0x19c>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	0c9b      	lsrs	r3, r3, #18
 80013f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6893      	ldr	r3, [r2, #8]
 8001400:	f361 031c 	bfi	r3, r1, #0, #29
 8001404:	6093      	str	r3, [r2, #8]
 8001406:	e032      	b.n	800146e <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6893      	ldr	r3, [r2, #8]
 8001416:	f361 031c 	bfi	r3, r1, #0, #29
 800141a:	6093      	str	r3, [r2, #8]
 800141c:	e027      	b.n	800146e <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	79d3      	ldrb	r3, [r2, #7]
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6853      	ldr	r3, [r2, #4]
 8001436:	f361 031c 	bfi	r3, r1, #0, #29
 800143a:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6893      	ldr	r3, [r2, #8]
 800144a:	f361 031c 	bfi	r3, r1, #0, #29
 800144e:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800145a:	0f5b      	lsrs	r3, r3, #29
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	b2d9      	uxtb	r1, r3
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	7ad3      	ldrb	r3, [r2, #11]
 8001468:	f361 1345 	bfi	r3, r1, #5, #1
 800146c:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001478:	0e1b      	lsrs	r3, r3, #24
 800147a:	b2da      	uxtb	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 80014b0:	7dbb      	ldrb	r3, [r7, #22]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <XMC_CAN_MO_Receive+0x182>
 80014b6:	7d7b      	ldrb	r3, [r7, #21]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f47f af63 	bne.w	8001384 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80014c4:	2300      	movs	r3, #0
 80014c6:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	1ffc0000 	.word	0x1ffc0000

080014dc <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ec:	d006      	beq.n	80014fc <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e005      	b.n	8001508 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
}
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	60da      	str	r2, [r3, #12]
}
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <XMC_CCU4_lDeassertReset+0x4c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d103      	bne.n	800154c <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8001544:	2004      	movs	r0, #4
 8001546:	f7ff f8b1 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
 800154a:	e016      	b.n	800157a <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <XMC_CCU4_lDeassertReset+0x50>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d103      	bne.n	800155c <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8001554:	2008      	movs	r0, #8
 8001556:	f7ff f8a9 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
 800155a:	e00e      	b.n	800157a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <XMC_CCU4_lDeassertReset+0x54>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d103      	bne.n	800156c <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8001564:	2010      	movs	r0, #16
 8001566:	f7ff f8a1 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
 800156a:	e006      	b.n	800157a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <XMC_CCU4_lDeassertReset+0x58>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d102      	bne.n	800157a <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8001574:	4806      	ldr	r0, [pc, #24]	; (8001590 <XMC_CCU4_lDeassertReset+0x5c>)
 8001576:	f7ff f899 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	4000c000 	.word	0x4000c000
 8001584:	40010000 	.word	0x40010000
 8001588:	40014000 	.word	0x40014000
 800158c:	48004000 	.word	0x48004000
 8001590:	10000001 	.word	0x10000001

08001594 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800159c:	2010      	movs	r0, #16
 800159e:	f7ff f9d5 	bl	800094c <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffc6 	bl	8001534 <XMC_CCU4_lDeassertReset>
#endif
}
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop

080015b0 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ffe9 	bl	8001594 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa6 	bl	8001514 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015d4:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	039b      	lsls	r3, r3, #14
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	601a      	str	r2, [r3, #0]
}
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	795b      	ldrb	r3, [r3, #5]
 8001602:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	051a      	lsls	r2, r3, #20
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	791b      	ldrb	r3, [r3, #4]
 8001612:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	795b      	ldrb	r3, [r3, #5]
 8001622:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	795b      	ldrb	r3, [r3, #5]
 8001632:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	791b      	ldrb	r3, [r3, #4]
 8001642:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
 8001664:	4613      	mov	r3, r2
 8001666:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800166e:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b09      	cmp	r3, #9
 8001674:	d82c      	bhi.n	80016d0 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8001676:	a201      	add	r2, pc, #4	; (adr r2, 800167c <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	080016a5 	.word	0x080016a5
 8001680:	080016a5 	.word	0x080016a5
 8001684:	080016af 	.word	0x080016af
 8001688:	080016af 	.word	0x080016af
 800168c:	080016d1 	.word	0x080016d1
 8001690:	080016d1 	.word	0x080016d1
 8001694:	080016d1 	.word	0x080016d1
 8001698:	080016d1 	.word	0x080016d1
 800169c:	080016b9 	.word	0x080016b9
 80016a0:	080016c5 	.word	0x080016c5
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80016a4:	2303      	movs	r3, #3
 80016a6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
      break;
 80016ac:	e016      	b.n	80016dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 80016ae:	230c      	movs	r3, #12
 80016b0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 80016b2:	2302      	movs	r3, #2
 80016b4:	617b      	str	r3, [r7, #20]
      break;
 80016b6:	e011      	b.n	80016dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80016b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016bc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80016be:	2308      	movs	r3, #8
 80016c0:	617b      	str	r3, [r7, #20]
      break;
 80016c2:	e00b      	b.n	80016dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80016c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016c8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80016ca:	230a      	movs	r3, #10
 80016cc:	617b      	str	r3, [r7, #20]
      break;
 80016ce:	e005      	b.n	80016dc <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80016d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016d4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80016d6:	230c      	movs	r3, #12
 80016d8:	617b      	str	r3, [r7, #20]
      break;
 80016da:	bf00      	nop
  }
  
  srs &= ~mask; 
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80016e6:	78ba      	ldrb	r2, [r7, #2]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop

08001708 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	60da      	str	r2, [r3, #12]
}
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop

08001728 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	611a      	str	r2, [r3, #16]
}
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <XMC_CCU8_lDeassertReset+0x30>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d103      	bne.n	8001758 <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8001750:	2080      	movs	r0, #128	; 0x80
 8001752:	f7fe ffab 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
 8001756:	e007      	b.n	8001768 <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a06      	ldr	r2, [pc, #24]	; (8001774 <XMC_CCU8_lDeassertReset+0x34>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d103      	bne.n	8001768 <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8001760:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001764:	f7fe ffa2 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40020000 	.word	0x40020000
 8001774:	40024000 	.word	0x40024000

08001778 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001780:	2010      	movs	r0, #16
 8001782:	f7ff f8e3 	bl	800094c <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffda 	bl	8001740 <XMC_CCU8_lDeassertReset>
#endif
}
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop

08001794 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ffe9 	bl	8001778 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffae 	bl	8001708 <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017b8:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	039b      	lsls	r3, r3, #14
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	601a      	str	r2, [r3, #0]
}
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa4 	bl	8001728 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	7b5b      	ldrb	r3, [r3, #13]
 80017ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	051a      	lsls	r2, r3, #20
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	7b1b      	ldrb	r3, [r3, #12]
 80017fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	7b1b      	ldrb	r3, [r3, #12]
 800180c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	7b5b      	ldrb	r3, [r3, #13]
 800181c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001820:	b2db      	uxtb	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f083 0214 	eor.w	r2, r3, #20
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop

08001844 <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
 8001850:	4613      	mov	r3, r2
 8001852:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f023 0303 	bic.w	r3, r3, #3
 8001860:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	4313      	orrs	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 8001876:	78bb      	ldrb	r3, [r7, #2]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d104      	bne.n	8001886 <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e003      	b.n	800188e <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800188c:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	615a      	str	r2, [r3, #20]
}
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
 80018ac:	4613      	mov	r3, r2
 80018ae:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 80018d2:	78bb      	ldrb	r3, [r7, #2]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e003      	b.n	80018ea <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d104      	bne.n	80018fa <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	e003      	b.n	8001902 <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001900:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	615a      	str	r2, [r3, #20]
}
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	460b      	mov	r3, r1
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8001922:	7afb      	ldrb	r3, [r7, #11]
 8001924:	3b01      	subs	r3, #1
 8001926:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	3310      	adds	r3, #16
 8001936:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	785b      	ldrb	r3, [r3, #1]
 800194c:	461a      	mov	r2, r3
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 800195a:	7ffb      	ldrb	r3, [r7, #31]
 800195c:	3316      	adds	r3, #22
 800195e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	2201      	movs	r2, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	461a      	mov	r2, r3
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8001982:	7ffb      	ldrb	r3, [r7, #31]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	3319      	adds	r3, #25
 800198a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	78db      	ldrb	r3, [r3, #3]
 80019a0:	461a      	mov	r2, r3
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	601a      	str	r2, [r3, #0]
#endif
}
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop

080019e8 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80019f4:	887a      	ldrh	r2, [r7, #2]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
 8001a10:	4613      	mov	r3, r2
 8001a12:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d103      	bne.n	8001a22 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8001a1a:	883a      	ldrh	r2, [r7, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a20:	e002      	b.n	8001a28 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 8001a22:	883a      	ldrh	r2, [r7, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop

08001a34 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>:
  slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
}

/* Configures status ST1, ST2 mapping to STy */
void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_STATUS_t channel)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel));

  slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	615a      	str	r2, [r3, #20]
  slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	075b      	lsls	r3, r3, #29
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	615a      	str	r2, [r3, #20]
}
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7fe fc82 	bl	80003a8 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4619      	mov	r1, r3
 8001aae:	230f      	movs	r3, #15
 8001ab0:	408b      	lsls	r3, r1
 8001ab2:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8001ab4:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	7af9      	ldrb	r1, [r7, #11]
 8001abc:	0089      	lsls	r1, r1, #2
 8001abe:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001ac0:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8001ac6:	7afa      	ldrb	r2, [r7, #11]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3204      	adds	r2, #4
 8001ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop

08001adc <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	78bb      	ldrb	r3, [r7, #2]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	b2d9      	uxtb	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	f001 0103 	and.w	r1, r1, #3
 8001afe:	0109      	lsls	r1, r1, #4
 8001b00:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b04:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8001b08:	4301      	orrs	r1, r0
 8001b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	70fb      	strb	r3, [r7, #3]
 8001b24:	4613      	mov	r3, r2
 8001b26:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4619      	mov	r1, r3
 8001b32:	2303      	movs	r3, #3
 8001b34:	408b      	lsls	r3, r1
 8001b36:	43db      	mvns	r3, r3
 8001b38:	401a      	ands	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001b42:	78bb      	ldrb	r3, [r7, #2]
 8001b44:	78f9      	ldrb	r1, [r7, #3]
 8001b46:	0049      	lsls	r1, r1, #1
 8001b48:	408b      	lsls	r3, r1
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop

08001b5c <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f846 	bl	8001bf8 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	791b      	ldrb	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d106      	bne.n	8001b82 <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	f000 f887 	bl	8001c90 <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <XMC_SPI_CH_Init+0x64>)
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8001b9c:	f043 030b 	orr.w	r3, r3, #11
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f04f 32ff 	mov.w	r2, #4294967295
 8001bae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	88db      	ldrh	r3, [r3, #6]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	073f0102 	.word	0x073f0102

08001bc4 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001bd2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d103      	bne.n	8001be2 <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	81fb      	strh	r3, [r7, #14]
 8001be0:	e003      	b.n	8001bea <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001be8:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001bea:	89fb      	ldrh	r3, [r7, #14]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <XMC_USIC_CH_Enable+0x74>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d003      	beq.n	8001c10 <XMC_USIC_CH_Enable+0x18>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <XMC_USIC_CH_Enable+0x78>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d103      	bne.n	8001c18 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001c10:	4818      	ldr	r0, [pc, #96]	; (8001c74 <XMC_USIC_CH_Enable+0x7c>)
 8001c12:	f000 f91b 	bl	8001e4c <XMC_USIC_Enable>
 8001c16:	e016      	b.n	8001c46 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <XMC_USIC_CH_Enable+0x80>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d003      	beq.n	8001c28 <XMC_USIC_CH_Enable+0x30>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <XMC_USIC_CH_Enable+0x84>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d103      	bne.n	8001c30 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001c28:	4815      	ldr	r0, [pc, #84]	; (8001c80 <XMC_USIC_CH_Enable+0x88>)
 8001c2a:	f000 f90f 	bl	8001e4c <XMC_USIC_Enable>
 8001c2e:	e00a      	b.n	8001c46 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <XMC_USIC_CH_Enable+0x8c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d003      	beq.n	8001c40 <XMC_USIC_CH_Enable+0x48>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <XMC_USIC_CH_Enable+0x90>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d102      	bne.n	8001c46 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001c40:	4812      	ldr	r0, [pc, #72]	; (8001c8c <XMC_USIC_CH_Enable+0x94>)
 8001c42:	f000 f903 	bl	8001e4c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001c4c:	bf00      	nop
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f9      	beq.n	8001c4e <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f023 020f 	bic.w	r2, r3, #15
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40030000 	.word	0x40030000
 8001c70:	40030200 	.word	0x40030200
 8001c74:	40030008 	.word	0x40030008
 8001c78:	48020000 	.word	0x48020000
 8001c7c:	48020200 	.word	0x48020200
 8001c80:	48020008 	.word	0x48020008
 8001c84:	48024000 	.word	0x48024000
 8001c88:	48024200 	.word	0x48024200
 8001c8c:	48024008 	.word	0x48024008

08001c90 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08e      	sub	sp, #56	; 0x38
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b63      	cmp	r3, #99	; 0x63
 8001ca0:	d958      	bls.n	8001d54 <XMC_USIC_CH_SetBaudrate+0xc4>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d055      	beq.n	8001d54 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001ca8:	f7fe fd1c 	bl	80006e4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4a2b      	ldr	r2, [pc, #172]	; (8001d68 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001ccc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001cd2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd8:	e022      	b.n	8001d20 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cde:	fb02 f203 	mul.w	r2, r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	0a9b      	lsrs	r3, r3, #10
 8001cf4:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cfc:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d04:	d209      	bcs.n	8001d1a <XMC_USIC_CH_SetBaudrate+0x8a>
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d205      	bcs.n	8001d1a <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1d9      	bne.n	8001cda <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001d36:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	3a01      	subs	r2, #1
 8001d3c:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001d3e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	3b01      	subs	r3, #1
 8001d44:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001d46:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d52:	e002      	b.n	8001d5a <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001d5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3738      	adds	r7, #56	; 0x38
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	51eb851f 	.word	0x51eb851f
 8001d6c:	fc0080ef 	.word	0xfc0080ef

08001d70 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d86:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001d98:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	0211      	lsls	r1, r2, #8
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001da2:	79fa      	ldrb	r2, [r7, #7]
 8001da4:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001da6:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001da8:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	f8ffc0c0 	.word	0xf8ffc0c0

08001dc0 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001dd6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001de8:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	0211      	lsls	r1, r2, #8
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001df2:	79fa      	ldrb	r2, [r7, #7]
 8001df4:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001df6:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	efffc0c0 	.word	0xefffc0c0

08001e14 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	7afb      	ldrb	r3, [r7, #11]
 8001e28:	2107      	movs	r1, #7
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop

08001e4c <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <XMC_USIC_Enable+0x40>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d104      	bne.n	8001e66 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001e5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e60:	f7fe fc24 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
 8001e64:	e00e      	b.n	8001e84 <XMC_USIC_Enable+0x38>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <XMC_USIC_Enable+0x44>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d103      	bne.n	8001e76 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001e6e:	4809      	ldr	r0, [pc, #36]	; (8001e94 <XMC_USIC_Enable+0x48>)
 8001e70:	f7fe fc1c 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
 8001e74:	e006      	b.n	8001e84 <XMC_USIC_Enable+0x38>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <XMC_USIC_Enable+0x4c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d102      	bne.n	8001e84 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001e7e:	4807      	ldr	r0, [pc, #28]	; (8001e9c <XMC_USIC_Enable+0x50>)
 8001e80:	f7fe fc14 	bl	80006ac <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40030008 	.word	0x40030008
 8001e90:	48020008 	.word	0x48020008
 8001e94:	10000080 	.word	0x10000080
 8001e98:	48024008 	.word	0x48024008
 8001e9c:	10000100 	.word	0x10000100

08001ea0 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60da      	str	r2, [r3, #12]
}
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	60da      	str	r2, [r3, #12]
}
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	611a      	str	r2, [r3, #16]
}
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001f10:	887a      	ldrh	r2, [r7, #2]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001f2c:	887a      	ldrh	r2, [r7, #2]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	611a      	str	r2, [r3, #16]
}
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop

08001f58 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001f96:	f083 0301 	eor.w	r3, r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f808 	bl	8001fc0 <TIMER_CCU4_lInit>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop

08001fc0 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f001 fa7f 	bl	80034d0 <GLOBAL_CCU4_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7e1b      	ldrb	r3, [r3, #24]
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f7ff ff62 	bl	8001eac <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7ff fafa 	bl	80015ec <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f82d 	bl	8002058 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00f      	beq.n	8002028 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002012:	4610      	mov	r0, r2
 8002014:	2100      	movs	r1, #0
 8002016:	461a      	mov	r2, r3
 8002018:	f7ff fb1e 	bl	8001658 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	4618      	mov	r0, r3
 8002022:	2100      	movs	r1, #0
 8002024:	f7ff ff98 	bl	8001f58 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff5d 	bl	8001eec <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff43 	bl	8001ed4 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7ff ff4a 	bl	8001f04 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	4618      	mov	r0, r3
 8002076:	2100      	movs	r1, #0
 8002078:	f7ff ff52 	bl	8001f20 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7ff ff57 	bl	8001f3c <XMC_CCU4_EnableShadowTransfer>
}
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
                                             const uint16_t data,
                                             const uint32_t transmit_control_information)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	460b      	mov	r3, r1
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 80020a2:	8979      	ldrh	r1, [r7, #10]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	3220      	adds	r2, #32
 80020aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80020ca:	b2db      	uxtb	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	460b      	mov	r3, r1
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 8002102:	8979      	ldrh	r1, [r7, #10]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	3260      	adds	r2, #96	; 0x60
 800210a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002126:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	b2db      	uxtb	r3, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <XMC_USIC_CH_RXFIFO_ClearEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
                                                   const uint32_t event)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  channel->TRBSCR = event;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <XMC_SPI_CH_SetTransmitMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	019b      	lsls	r3, r3, #6
 8002190:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop

080021a4 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4798      	blx	r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	73fb      	strb	r3, [r7, #15]

  return status;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop

080021e4 <SPI_MASTER_Receive>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 80021f0:	2301      	movs	r3, #1
 80021f2:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d106      	bne.n	800220e <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	f000 f807 	bl	8002218 <SPI_MASTER_lStartReceivePolling>
 800220a:	4603      	mov	r3, r0
 800220c:	75fb      	strb	r3, [r7, #23]
  }
#endif

  return status;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <SPI_MASTER_lStartReceivePolling>:
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)

SPI_MASTER_STATUS_t SPI_MASTER_lStartReceivePolling(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_lStartReceivePolling:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 8002224:	2302      	movs	r3, #2
 8002226:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]

  if ((dataptr != NULL) && (count > 0U))
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d033      	beq.n	800229c <SPI_MASTER_lStartReceivePolling+0x84>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d030      	beq.n	800229c <SPI_MASTER_lStartReceivePolling+0x84>
  {
    /*Check data pointer is valid or not*/
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	7fdb      	ldrb	r3, [r3, #31]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d027      	beq.n	800229a <SPI_MASTER_lStartReceivePolling+0x82>
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f083 0301 	eor.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01e      	beq.n	800229a <SPI_MASTER_lStartReceivePolling+0x82>
    {
      runtime_handle->rx_busy = true;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2201      	movs	r2, #1
 8002260:	77da      	strb	r2, [r3, #31]
      runtime_handle->rx_data = dataptr;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	615a      	str	r2, [r3, #20]
      runtime_handle->tx_data = &dummy_data[0];
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <SPI_MASTER_lStartReceivePolling+0x94>)
 800226c:	619a      	str	r2, [r3, #24]
      runtime_handle->tx_data_dummy = true;
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_data_dummy = false;
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

      status = SPI_MASTER_lReceivePolling(handle, count);
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	f000 f815 	bl	80022b0 <SPI_MASTER_lReceivePolling>
 8002286:	4603      	mov	r3, r0
 8002288:	75fb      	strb	r3, [r7, #23]

      runtime_handle->tx_data_dummy = false;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_busy = false;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2200      	movs	r2, #0
 8002296:	77da      	strb	r2, [r3, #31]
  runtime_handle = handle->runtime;

  if ((dataptr != NULL) && (count > 0U))
  {
    /*Check data pointer is valid or not*/
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8002298:	e002      	b.n	80022a0 <SPI_MASTER_lStartReceivePolling+0x88>
 800229a:	e001      	b.n	80022a0 <SPI_MASTER_lStartReceivePolling+0x88>
      runtime_handle->rx_busy = false;
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUFFER_INVALID;
 800229c:	2303      	movs	r3, #3
 800229e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000080 	.word	0x20000080

080022b0 <SPI_MASTER_lReceivePolling>:
}
#endif

#if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceivePolling(const SPI_MASTER_t *const handle, uint32_t count)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 80022ba:	2301      	movs	r3, #1
 80022bc:	617b      	str	r3, [r7, #20]
                                                           Specify the number of bytes for the configured word length */
  uint16_t data;

  runtime_handle = handle->runtime;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	60fb      	str	r3, [r7, #12]
  data = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	827b      	strh	r3, [r7, #18]
  runtime_handle->rx_data_index = 0U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d901      	bls.n	80022e2 <SPI_MASTER_lReceivePolling+0x32>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 80022de:	2302      	movs	r3, #2
 80022e0:	617b      	str	r3, [r7, #20]
  }

  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	461a      	mov	r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	fa03 f202 	lsl.w	r2, r3, r2
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	60da      	str	r2, [r3, #12]

  XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	7f1b      	ldrb	r3, [r3, #28]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	f7ff ff3a 	bl	8002178 <XMC_SPI_CH_SetTransmitMode>

    /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80d6 	beq.w	80024be <SPI_MASTER_lReceivePolling+0x20e>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fefe 	bl	8002118 <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 f9c5 	bl	80026b0 <SPI_MASTER_lStdRBUFFlush>

    if (runtime_handle->tx_data_dummy == true)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <SPI_MASTER_lReceivePolling+0x9a>
    {
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	7f1b      	ldrb	r3, [r3, #28]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002342:	461a      	mov	r2, r3
 8002344:	f7ff fed6 	bl	80020f4 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8002348:	e01d      	b.n	8002386 <SPI_MASTER_lReceivePolling+0xd6>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d107      	bne.n	8002360 <SPI_MASTER_lReceivePolling+0xb0>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4413      	add	r3, r2
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	827b      	strh	r3, [r7, #18]
 800235e:	e006      	b.n	800236e <SPI_MASTER_lReceivePolling+0xbe>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4413      	add	r3, r2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	7f1b      	ldrb	r3, [r3, #28]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461c      	mov	r4, r3
 800237a:	8a7b      	ldrh	r3, [r7, #18]
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	4622      	mov	r2, r4
 8002382:	f7ff feb7 	bl	80020f4 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	441a      	add	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	609a      	str	r2, [r3, #8]


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8002392:	e061      	b.n	8002458 <SPI_MASTER_lReceivePolling+0x1a8>
    {
      if (runtime_handle->tx_data_dummy == true)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00b      	beq.n	80023b8 <SPI_MASTER_lReceivePolling+0x108>
      {
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	7f1b      	ldrb	r3, [r3, #28]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023b0:	461a      	mov	r2, r3
 80023b2:	f7ff fe9f 	bl	80020f4 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 80023b6:	e01d      	b.n	80023f4 <SPI_MASTER_lReceivePolling+0x144>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <SPI_MASTER_lReceivePolling+0x11e>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4413      	add	r3, r2
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	827b      	strh	r3, [r7, #18]
 80023cc:	e006      	b.n	80023dc <SPI_MASTER_lReceivePolling+0x12c>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	7f1b      	ldrb	r3, [r3, #28]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461c      	mov	r4, r3
 80023e8:	8a7b      	ldrh	r3, [r7, #18]
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	4622      	mov	r2, r4
 80023f0:	f7ff fe80 	bl	80020f4 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
      }

      while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 80023f4:	bf00      	nop
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fe9a 	bl	8002134 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f7      	bne.n	80023f6 <SPI_MASTER_lReceivePolling+0x146>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fbda 	bl	8001bc4 <XMC_SPI_CH_GetReceivedData>
 8002410:	4603      	mov	r3, r0
 8002412:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	4413      	add	r3, r2
 800241e:	8a7a      	ldrh	r2, [r7, #18]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d10a      	bne.n	8002440 <SPI_MASTER_lReceivePolling+0x190>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	3301      	adds	r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	8a7a      	ldrh	r2, [r7, #18]
 8002438:	0a12      	lsrs	r2, r2, #8
 800243a:	b292      	uxth	r2, r2
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	441a      	add	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	441a      	add	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	609a      	str	r2, [r3, #8]
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;


    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	d397      	bcc.n	8002394 <SPI_MASTER_lReceivePolling+0xe4>

      (runtime_handle->rx_data_index)+= bytes_per_word;
      (runtime_handle->tx_data_index)+= bytes_per_word;
    }

    while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
 8002464:	bf00      	nop
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fe62 	bl	8002134 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f7      	bne.n	8002466 <SPI_MASTER_lReceivePolling+0x1b6>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fba2 	bl	8001bc4 <XMC_SPI_CH_GetReceivedData>
 8002480:	4603      	mov	r3, r0
 8002482:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	4413      	add	r3, r2
 800248e:	8a7a      	ldrh	r2, [r7, #18]
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d10a      	bne.n	80024b0 <SPI_MASTER_lReceivePolling+0x200>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	8a7a      	ldrh	r2, [r7, #18]
 80024a8:	0a12      	lsrs	r2, r2, #8
 80024aa:	b292      	uxth	r2, r2
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	701a      	strb	r2, [r3, #0]
    }

    XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, SPI_MASTER_FIFO_RECEIVE_INDICATION_FLAG);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	2105      	movs	r1, #5
 80024b8:	f7ff fe50 	bl	800215c <XMC_USIC_CH_RXFIFO_ClearEvent>
 80024bc:	e0e9      	b.n	8002692 <SPI_MASTER_lReceivePolling+0x3e2>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f8f4 	bl	80026b0 <SPI_MASTER_lStdRBUFFlush>

    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 80024c8:	bf00      	nop
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fdf2 	bl	80020b8 <XMC_USIC_CH_GetTransmitBufferStatus>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b80      	cmp	r3, #128	; 0x80
 80024d8:	d0f7      	beq.n	80024ca <SPI_MASTER_lReceivePolling+0x21a>
    {
    }

    if (runtime_handle->tx_data_dummy == true)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <SPI_MASTER_lReceivePolling+0x24e>
    {
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	7f1b      	ldrb	r3, [r3, #28]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	4610      	mov	r0, r2
 80024f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024f6:	461a      	mov	r2, r3
 80024f8:	f7ff fdcc 	bl	8002094 <XMC_USIC_CH_WriteToTBUFTCI>
 80024fc:	e01d      	b.n	800253a <SPI_MASTER_lReceivePolling+0x28a>
    }
    else
    {
      if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d107      	bne.n	8002514 <SPI_MASTER_lReceivePolling+0x264>
      {
        data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4413      	add	r3, r2
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	827b      	strh	r3, [r7, #18]
 8002512:	e006      	b.n	8002522 <SPI_MASTER_lReceivePolling+0x272>
      }
      else
      {
        data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	699a      	ldr	r2, [r3, #24]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4413      	add	r3, r2
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	827b      	strh	r3, [r7, #18]
      }
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	7f1b      	ldrb	r3, [r3, #28]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461c      	mov	r4, r3
 800252e:	8a7b      	ldrh	r3, [r7, #18]
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	4622      	mov	r2, r4
 8002536:	f7ff fdad 	bl	8002094 <XMC_USIC_CH_WriteToTBUFTCI>
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	441a      	add	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	609a      	str	r2, [r3, #8]

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 8002546:	e071      	b.n	800262c <SPI_MASTER_lReceivePolling+0x37c>
    {
      while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002548:	bf00      	nop
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fdb2 	bl	80020b8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002554:	4603      	mov	r3, r0
 8002556:	2b80      	cmp	r3, #128	; 0x80
 8002558:	d0f7      	beq.n	800254a <SPI_MASTER_lReceivePolling+0x29a>
      {

      }

      if (runtime_handle->tx_data_dummy == true)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <SPI_MASTER_lReceivePolling+0x2ce>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	7f1b      	ldrb	r3, [r3, #28]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002576:	461a      	mov	r2, r3
 8002578:	f7ff fd8c 	bl	8002094 <XMC_USIC_CH_WriteToTBUFTCI>
 800257c:	e01d      	b.n	80025ba <SPI_MASTER_lReceivePolling+0x30a>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d107      	bne.n	8002594 <SPI_MASTER_lReceivePolling+0x2e4>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4413      	add	r3, r2
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	827b      	strh	r3, [r7, #18]
 8002592:	e006      	b.n	80025a2 <SPI_MASTER_lReceivePolling+0x2f2>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	699a      	ldr	r2, [r3, #24]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4413      	add	r3, r2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	827b      	strh	r3, [r7, #18]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	7f1b      	ldrb	r3, [r3, #28]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461c      	mov	r4, r3
 80025ae:	8a7b      	ldrh	r3, [r7, #18]
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	4622      	mov	r2, r4
 80025b6:	f7ff fd6d 	bl	8002094 <XMC_USIC_CH_WriteToTBUFTCI>
      }

      while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 80025ba:	bf00      	nop
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd89 	bl	80020d8 <XMC_USIC_CH_GetReceiveBufferStatus>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f7      	beq.n	80025bc <SPI_MASTER_lReceivePolling+0x30c>
      {

      }

      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff faf7 	bl	8001bc4 <XMC_SPI_CH_GetReceivedData>
 80025d6:	4603      	mov	r3, r0
 80025d8:	827b      	strh	r3, [r7, #18]

      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	8a7a      	ldrh	r2, [r7, #18]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d10a      	bne.n	8002606 <SPI_MASTER_lReceivePolling+0x356>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	3301      	adds	r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	8a7a      	ldrh	r2, [r7, #18]
 80025fe:	0a12      	lsrs	r2, r2, #8
 8002600:	b292      	uxth	r2, r2
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]
      }

      (runtime_handle->rx_data_index)+= bytes_per_word;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	441a      	add	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	611a      	str	r2, [r3, #16]
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	441a      	add	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	609a      	str	r2, [r3, #8]

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002628:	f7ff fdbc 	bl	80021a4 <XMC_SPI_CH_ClearStatusFlag>
      XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
    }

    (runtime_handle->tx_data_index)+= bytes_per_word;

    while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	d387      	bcc.n	8002548 <SPI_MASTER_lReceivePolling+0x298>
      (runtime_handle->tx_data_index)+= bytes_per_word;

      XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
    }

    while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
 8002638:	bf00      	nop
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fd4a 	bl	80020d8 <XMC_USIC_CH_GetReceiveBufferStatus>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f7      	beq.n	800263a <SPI_MASTER_lReceivePolling+0x38a>
    {

    }

    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fab8 	bl	8001bc4 <XMC_SPI_CH_GetReceivedData>
 8002654:	4603      	mov	r3, r0
 8002656:	827b      	strh	r3, [r7, #18]

    runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	4413      	add	r3, r2
 8002662:	8a7a      	ldrh	r2, [r7, #18]
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]

    if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d10a      	bne.n	8002684 <SPI_MASTER_lReceivePolling+0x3d4>
    {
      runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	3301      	adds	r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	8a7a      	ldrh	r2, [r7, #18]
 800267c:	0a12      	lsrs	r2, r2, #8
 800267e:	b292      	uxth	r2, r2
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
    }

    XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800268e:	f7ff fd89 	bl	80021a4 <XMC_SPI_CH_ClearStatusFlag>
  }
  runtime_handle->rx_data_count = 0U;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
  runtime_handle->rx_data_index = 0U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  runtime_handle->tx_data_index = 0U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]

  return SPI_MASTER_STATUS_SUCCESS;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd90      	pop	{r4, r7, pc}
 80026ae:	bf00      	nop

080026b0 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff fa83 	bl	8001bc4 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fa80 	bl	8001bc4 <XMC_SPI_CH_GetReceivedData>
}
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop

080026cc <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
 80026d8:	4613      	mov	r3, r2
 80026da:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80026dc:	78f8      	ldrb	r0, [r7, #3]
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	3306      	adds	r3, #6
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80026ee:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80026f0:	431a      	orrs	r2, r3
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	1d83      	adds	r3, r0, #6
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop

08002708 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	3b01      	subs	r3, #1
 8002720:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop

08002734 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	3b01      	subs	r3, #1
 800274c:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop

08002760 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8002774:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 8002776:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop

0800278c <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f023 020f 	bic.w	r2, r3, #15
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop

080027b4 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	2101      	movs	r1, #1
 80027c0:	f7ff ffe4 	bl	800278c <XMC_USIC_CH_SetMode>
}
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop

080027cc <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop

080027ec <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3b01      	subs	r3, #1
 8002802:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 8002804:	4313      	orrs	r3, r2
 8002806:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <XMC_SPI_CH_DisableFEM>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	f023 0208 	bic.w	r2, r3, #8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop

08002838 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	f7ff ff89 	bl	8002760 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4619      	mov	r1, r3
 8002866:	f7ff ff4f 	bl	8002708 <XMC_USIC_CH_SetWordLength>
}
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4619      	mov	r1, r3
 8002882:	f7ff ff57 	bl	8002734 <XMC_USIC_CH_SetFrameLength>
}
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	70fb      	strb	r3, [r7, #3]
 8002898:	4613      	mov	r3, r2
 800289a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 800289c:	78f8      	ldrb	r0, [r7, #3]
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	3306      	adds	r3, #6
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	1d83      	adds	r3, r0, #6
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	78bb      	ldrb	r3, [r7, #2]
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4611      	mov	r1, r2
 80028c4:	461a      	mov	r2, r3
 80028c6:	f7ff ff01 	bl	80026cc <XMC_USIC_CH_SetInputSource>
}
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 80028d6:	2300      	movs	r3, #0
 80028d8:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH0, &SPI_MASTER_0_Channel_Config);
 80028da:	4824      	ldr	r0, [pc, #144]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 80028dc:	4924      	ldr	r1, [pc, #144]	; (8002970 <SPI_MASTER_0_lInit+0xa0>)
 80028de:	f7ff f93d 	bl	8001b5c <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI0_CH0);
 80028e2:	4822      	ldr	r0, [pc, #136]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 80028e4:	f7ff ff98 	bl	8002818 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH0);
 80028e8:	4820      	ldr	r0, [pc, #128]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 80028ea:	f7ff ff6f 	bl	80027cc <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH0, (uint8_t)8);
 80028ee:	481f      	ldr	r0, [pc, #124]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 80028f0:	2108      	movs	r1, #8
 80028f2:	f7ff ffaf 	bl	8002854 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH0, (uint8_t)16);
 80028f6:	481d      	ldr	r0, [pc, #116]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 80028f8:	2110      	movs	r1, #16
 80028fa:	f7ff ffb9 	bl	8002870 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH0,
 80028fe:	481b      	ldr	r0, [pc, #108]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 8002900:	2100      	movs	r1, #0
 8002902:	2200      	movs	r2, #0
 8002904:	f7ff ff98 	bl	8002838 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH0, 20U);
 8002908:	4818      	ldr	r0, [pc, #96]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 800290a:	2114      	movs	r1, #20
 800290c:	f7ff ff6e 	bl	80027ec <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)4, &SPI_MASTER_0_MISO_Config.port_config);
 8002910:	4818      	ldr	r0, [pc, #96]	; (8002974 <SPI_MASTER_0_lInit+0xa4>)
 8002912:	2104      	movs	r1, #4
 8002914:	4a18      	ldr	r2, [pc, #96]	; (8002978 <SPI_MASTER_0_lInit+0xa8>)
 8002916:	f7fd fd59 	bl	80003cc <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_B);
 800291a:	4814      	ldr	r0, [pc, #80]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 800291c:	2100      	movs	r1, #0
 800291e:	2201      	movs	r2, #1
 8002920:	f7ff ffb4 	bl	800288c <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH0);
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 8002926:	f7ff ff45 	bl	80027b4 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)7, &SPI_MASTER_0_MOSI_Config.port_config);
 800292a:	4812      	ldr	r0, [pc, #72]	; (8002974 <SPI_MASTER_0_lInit+0xa4>)
 800292c:	2107      	movs	r1, #7
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <SPI_MASTER_0_lInit+0xac>)
 8002930:	f7fd fd4c 	bl	80003cc <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)1, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 8002934:	480f      	ldr	r0, [pc, #60]	; (8002974 <SPI_MASTER_0_lInit+0xa4>)
 8002936:	2101      	movs	r1, #1
 8002938:	4a11      	ldr	r2, [pc, #68]	; (8002980 <SPI_MASTER_0_lInit+0xb0>)
 800293a:	f7fd fd47 	bl	80003cc <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 800293e:	480b      	ldr	r0, [pc, #44]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 8002940:	2110      	movs	r1, #16
 8002942:	2205      	movs	r2, #5
 8002944:	f7ff fa66 	bl	8001e14 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_5);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI0_CH0,
 8002948:	4808      	ldr	r0, [pc, #32]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 800294a:	2110      	movs	r1, #16
 800294c:	2204      	movs	r2, #4
 800294e:	2301      	movs	r3, #1
 8002950:	f7ff fa0e 	bl	8001d70 <XMC_USIC_CH_TXFIFO_Configure>
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI0_CH0,
 8002954:	4805      	ldr	r0, [pc, #20]	; (800296c <SPI_MASTER_0_lInit+0x9c>)
 8002956:	2100      	movs	r1, #0
 8002958:	2204      	movs	r2, #4
 800295a:	230f      	movs	r3, #15
 800295c:	f7ff fa30 	bl	8001dc0 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               15U);
             
  return status;
 8002960:	79fb      	ldrb	r3, [r7, #7]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40030000 	.word	0x40030000
 8002970:	20000098 	.word	0x20000098
 8002974:	48028100 	.word	0x48028100
 8002978:	20000414 	.word	0x20000414
 800297c:	20000084 	.word	0x20000084
 8002980:	08006a28 	.word	0x08006a28

08002984 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	60da      	str	r2, [r3, #12]
}
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	045b      	lsls	r3, r3, #17
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	615a      	str	r2, [r3, #20]
}
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop

080029d0 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	611a      	str	r2, [r3, #16]
}
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <XMC_CCU8_SLICE_SetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_GetTimerValue().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetTimerValue(XMC_CCU8_SLICE_t *const slice, const uint16_t timer_val)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TIMER = (uint32_t) timer_val;
 80029f8:	887a      	ldrh	r2, [r7, #2]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	671a      	str	r2, [r3, #112]	; 0x70
}
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 8002a68:	4905      	ldr	r1, [pc, #20]	; (8002a80 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8002a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	50004000 	.word	0x50004000

08002a84 <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 8002a8c:	4905      	ldr	r1, [pc, #20]	; (8002aa4 <XMC_SCU_SetCcuTriggerLow+0x20>)
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <XMC_SCU_SetCcuTriggerLow+0x20>)
 8002a90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4013      	ands	r3, r2
 8002a98:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	50004000 	.word	0x50004000

08002aa8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	605a      	str	r2, [r3, #4]
}
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ada:	409a      	lsls	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	605a      	str	r2, [r3, #4]
}
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop

08002aec <PWM_SVM_lEnableEvent>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void PWM_SVM_lEnableEvent(PWM_SVM_t* const HandlePtr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /*Enable the slice 0 period match interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_periodmatch)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d106      	bne.n	8002b0e <PWM_SVM_lEnableEvent+0x22>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	2100      	movs	r1, #0
 8002b0a:	f7ff ff7d 	bl	8002a08 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
  /*Enable the slice 0 trap interrupt */
  if ((uint8_t) true == HandlePtr->confighandle_ptr->enable_trapevent)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d106      	bne.n	8002b28 <PWM_SVM_lEnableEvent+0x3c>
  {
    XMC_CCU8_SLICE_EnableEvent(HandlePtr->phase_ptr[0]->slice_ptr,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	210a      	movs	r1, #10
 8002b24:	f7ff ff70 	bl	8002a08 <XMC_CCU8_SLICE_EnableEvent>
        (XMC_CCU8_SLICE_IRQ_ID_t) XMC_CCU8_SLICE_IRQ_ID_EVENT2);
  }
}
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop

08002b30 <PWM_SVM_InverterDisable>:
/**
 * This function disables the inverter
 */
void PWM_SVM_InverterDisable(PWM_SVM_t* const HandlePtr)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_SVM_InverterDisable:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	7cdb      	ldrb	r3, [r3, #19]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d109      	bne.n	8002b56 <PWM_SVM_InverterDisable+0x26>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	791b      	ldrb	r3, [r3, #4]
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	f7ff ffb9 	bl	8002ac8 <XMC_GPIO_SetOutputLow>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	7cdb      	ldrb	r3, [r3, #19]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d109      	bne.n	8002b74 <PWM_SVM_InverterDisable+0x44>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f7ff ff9a 	bl	8002aa8 <XMC_GPIO_SetOutputHigh>
  }
}
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop

08002b7c <PWM_SVM_InverterEnable>:
/**
 * This function Enables the inverter
 */
void PWM_SVM_InverterEnable(PWM_SVM_t* const HandlePtr)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  /*Inverter Enable pin settings.*/
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_HIGH == HandlePtr->confighandle_ptr->inverter_pin)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	7cdb      	ldrb	r3, [r3, #19]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d109      	bne.n	8002ba2 <PWM_SVM_InverterEnable+0x26>
  {
    /*Set IO output to high*/
    XMC_GPIO_SetOutputHigh(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	791b      	ldrb	r3, [r3, #4]
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f7ff ff83 	bl	8002aa8 <XMC_GPIO_SetOutputHigh>
  }
  if ((PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_LOW == HandlePtr->confighandle_ptr->inverter_pin)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	7cdb      	ldrb	r3, [r3, #19]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d109      	bne.n	8002bc0 <PWM_SVM_InverterEnable+0x44>
  {
    /*Set IO output to low*/
    XMC_GPIO_SetOutputLow(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	791b      	ldrb	r3, [r3, #4]
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7ff ff84 	bl	8002ac8 <XMC_GPIO_SetOutputLow>
  }
}
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop

08002bc8 <PWM_SVM_Init>:
/**
 * This function initializes the peripherals and SVM structure 
 * required for the SVM algorithm.
 */
PWM_SVM_STATUS_t PWM_SVM_Init(PWM_SVM_t* const HandlePtr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  uint32_t phase_count = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
  PWM_SVM_STATUS_t status = (PWM_SVM_STATUS_t) PWM_SVM_STATUS_SUCCESS;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f040 8133 	bne.w	8002e54 <PWM_SVM_Init+0x28c>
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fc3c 	bl	8003470 <GLOBAL_CCU8_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e016      	b.n	8002c30 <PWM_SVM_Init+0x68>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	3208      	adds	r2, #8
 8002c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	3208      	adds	r2, #8
 8002c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c18:	7919      	ldrb	r1, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	320e      	adds	r2, #14
 8002c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f7fd fbd1 	bl	80003cc <XMC_GPIO_Init>
  XMC_ASSERT("PWM_SVM_Init:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if ((PWM_SVM_STATE_t) PWM_SVM_UNINITIALIZED == HandlePtr->state)
  {
    status = (PWM_SVM_STATUS_t) GLOBAL_CCU8_Init(HandlePtr->globalccu8_handle_ptr);
    /*Configure io init for all three phases output*/
    for (phase_count = 0U; phase_count < PWM_SVM_PHASE_IO_MAX; phase_count++)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d9e5      	bls.n	8002c02 <PWM_SVM_Init+0x3a>
    {
      XMC_GPIO_Init(HandlePtr->pwmoutpin_ptr[phase_count]->port, HandlePtr->pwmoutpin_ptr[phase_count]->pin,
          HandlePtr->pwmoutconfig_ptr[phase_count]);
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d11a      	bne.n	8002c76 <PWM_SVM_Init+0xae>
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4a:	791a      	ldrb	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	f7fd fbb9 	bl	80003cc <XMC_GPIO_Init>
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5e:	6819      	ldr	r1, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	791a      	ldrb	r2, [r3, #4]
          HandlePtr->confighandle_ptr->trap_hwsel);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
    }
    /*Configure io init for trap input*/
    if ((uint8_t) true == svmptr->enable_trap)
    {
      XMC_GPIO_Init(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin, HandlePtr->trapinconfig_ptr);
      XMC_GPIO_SetHardwareControl(HandlePtr->trappin_ptr->port, HandlePtr->trappin_ptr->pin,
 8002c6a:	7c9b      	ldrb	r3, [r3, #18]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	f7fe ff51 	bl	8001b18 <XMC_GPIO_SetHardwareControl>
          HandlePtr->confighandle_ptr->trap_hwsel);
    }

    /*Configure io init for inverter enable pin output*/
    if (svmptr->inverter_pin > (PWM_SVM_INVERTERPINLEVEL_t) PWM_SVM_IPIN_NOTREQUIRED)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	7cdb      	ldrb	r3, [r3, #19]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00c      	beq.n	8002c98 <PWM_SVM_Init+0xd0>
    {
      XMC_GPIO_Init(HandlePtr->inverterpin_ptr->port, HandlePtr->inverterpin_ptr->pin,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	791a      	ldrb	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	4608      	mov	r0, r1
 8002c90:	4611      	mov	r1, r2
 8002c92:	461a      	mov	r2, r3
 8002c94:	f7fd fb9a 	bl	80003cc <XMC_GPIO_Init>
          HandlePtr->inverterpinconfig_ptr);
    }

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff49 	bl	8002b30 <PWM_SVM_InverterDisable>

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e0a4      	b.n	8002dee <PWM_SVM_Init+0x226>
    {
      XMC_CCU8_SLICE_CompareInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->phase_configinit_ptr);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	3202      	adds	r2, #2
 8002caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fe fd8a 	bl	80017d0 <XMC_CCU8_SLICE_CompareInit>

      /* configure dead time */
      XMC_CCU8_SLICE_DeadTimeInit(HandlePtr->phase_ptr[count]->slice_ptr, HandlePtr->deadtimeconfig_ptr);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	3202      	adds	r2, #2
 8002cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f7fe feb0 	bl	8001a34 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure external start to event 0 */
      XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	3202      	adds	r2, #2
 8002cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f7fe fe13 	bl	8001914 <XMC_CCU8_SLICE_ConfigureEvent>
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0, HandlePtr->startconfig_ptr);
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d121      	bne.n	8002d3c <PWM_SVM_Init+0x174>
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	3202      	adds	r2, #2
 8002cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d08:	4610      	mov	r0, r2
 8002d0a:	2103      	movs	r1, #3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f7fe fe01 	bl	8001914 <XMC_CCU8_SLICE_ConfigureEvent>
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	3202      	adds	r2, #2
 8002d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	7c5a      	ldrb	r2, [r3, #17]
            (bool)svmptr->trap_sync_pwm);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
      {
        XMC_CCU8_SLICE_ConfigureEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_EVENT_2,
            HandlePtr->trapconfig_ptr);
        XMC_CCU8_SLICE_TrapConfig(HandlePtr->phase_ptr[count]->slice_ptr, svmptr->trap_exit_mode,
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4608      	mov	r0, r1
 8002d34:	4611      	mov	r1, r2
 8002d36:	461a      	mov	r2, r3
 8002d38:	f7fe fdb2 	bl	80018a0 <XMC_CCU8_SLICE_TrapConfig>
            (bool)svmptr->trap_sync_pwm);
      }

      /* Program period  value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(HandlePtr->phase_ptr[count]->slice_ptr, (uint16_t) HandlePtr->period);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	3202      	adds	r2, #2
 8002d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	f7fe fe48 	bl	80019e8 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	3202      	adds	r2, #2
 8002d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	2100      	movs	r1, #0
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f7fe fe4b 	bl	8001a04 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	3202      	adds	r2, #2
 8002d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f7fe fe40 	bl	8001a04 <XMC_CCU8_SLICE_SetTimerCompareMatch>
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	3202      	adds	r2, #2
 8002d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8e:	6819      	ldr	r1, [r3, #0]
          HandlePtr->confighandle_ptr->phase_st_map[count]);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0U);
      /* Program timer compare value for channel 1 or channel 2*/
      XMC_CCU8_SLICE_SetTimerCompareMatch(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2, 0U);
      /* Configures status ST1, ST2 mapping to STy */
      XMC_CCU8_SLICE_ConfigureStatusBitOutput(HandlePtr->phase_ptr[count]->slice_ptr,
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	4413      	add	r3, r2
 8002d98:	3308      	adds	r3, #8
 8002d9a:	791b      	ldrb	r3, [r3, #4]
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f7fe fe5e 	bl	8001a60 <XMC_CCU8_SLICE_ConfigureStatusBitOutput>
          HandlePtr->confighandle_ptr->phase_st_map[count]);

      /* Bind period match event to an NVIC node  */
      HandlePtr->phase_ptr[count]->slice_ptr->SRS |= svmptr->event_sr_selector[count];
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	3202      	adds	r2, #2
 8002daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6979      	ldr	r1, [r7, #20]
 8002db4:	3102      	adds	r1, #2
 8002db6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	6978      	ldr	r0, [r7, #20]
 8002dc4:	300a      	adds	r0, #10
 8002dc6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	3202      	adds	r2, #2
 8002dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dde:	791b      	ldrb	r3, [r3, #4]
 8002de0:	4608      	mov	r0, r1
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7ff fdce 	bl	8002984 <XMC_CCU8_EnableClock>

    /*Inverter Enable pin level is set to passive level.*/
    PWM_SVM_InverterDisable(HandlePtr);

    /* Phase configurations */
    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3301      	adds	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	f67f af57 	bls.w	8002ca4 <PWM_SVM_Init+0xdc>

      /* enable module clock by clearing idle bit*/
      XMC_CCU8_EnableClock(HandlePtr->global_ptr, HandlePtr->phase_ptr[count]->slice_number);
    }

    PWM_SVM_lEnableEvent(HandlePtr);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fe78 	bl	8002aec <PWM_SVM_lEnableEvent>
#if defined (MATH)
      /*Ungate Math coprocessor*/
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MATH);
#endif
    /*Enable the shadow transfer for all three slice*/
    XMC_CCU8_EnableShadowTransfer(HandlePtr->global_ptr, svmptr->shadow_transfer_mask);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f7ff fde2 	bl	80029d0 <XMC_CCU8_EnableShadowTransfer>

    /* update dead time variable*/
    HandlePtr->deadtime_rising_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_rising_edge_counter;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e10:	791b      	ldrb	r3, [r3, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    HandlePtr->deadtime_falling_edge = HandlePtr->deadtimeconfig_ptr->channel1_st_falling_edge_counter;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1e:	795b      	ldrb	r3, [r3, #5]
 8002e20:	461a      	mov	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    HandlePtr->deadtime_div = (XMC_CCU8_SLICE_DTC_DIV_t) HandlePtr->deadtimeconfig_ptr->div;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    if ((PWM_SVM_STATUS_t) PWM_SVM_STATUS_FAILURE != status)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d006      	beq.n	8002e50 <PWM_SVM_Init+0x288>
    {
      status = PWM_SVM_STATUS_SUCCESS;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
      HandlePtr->state = (PWM_SVM_STATE_t) PWM_SVM_INITIALIZED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8002e4e:	e001      	b.n	8002e54 <PWM_SVM_Init+0x28c>
    }
    else
    {
      status = PWM_SVM_STATUS_FAILURE;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop

08002e60 <PWM_SVM_Start>:

/**
 * This function starts the CCU8 slices used to generate SVM.
 */
void PWM_SVM_Start(PWM_SVM_t* const HandlePtr)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60bb      	str	r3, [r7, #8]
  XMC_ASSERT("PWM_SVM_Start:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));
  if (((PWM_SVM_STATE_t) PWM_SVM_INITIALIZED == HandlePtr->state)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d005      	beq.n	8002e88 <PWM_SVM_Start+0x28>
      || ((PWM_SVM_STATE_t) PWM_SVM_STOPPED == HandlePtr->state))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	f040 8133 	bne.w	80030ee <PWM_SVM_Start+0x28e>
  {
    HandlePtr->ta = 0U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
    HandlePtr->tb = 0U;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    HandlePtr->ta2 = 0U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    HandlePtr->tb2 = 0U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    HandlePtr->v_ta = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    HandlePtr->v_tb = 0U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    HandlePtr->v_ta2 = 0U;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    HandlePtr->v_tb2 = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    HandlePtr->sector = 0U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    HandlePtr->subsector = 0U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fe4f 	bl	8002b7c <PWM_SVM_InverterEnable>

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e026      	b.n	8002f32 <PWM_SVM_Start+0xd2>
    {
      /* if trap is enabled, Enable Trap for all the three phases
       map the external trap functionality to event 2 */
      if ((uint8_t) true == svmptr->enable_trap)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d113      	bne.n	8002f16 <PWM_SVM_Start+0xb6>
      {
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	3202      	adds	r2, #2
 8002ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	210a      	movs	r1, #10
 8002efe:	f7ff fd99 	bl	8002a34 <XMC_CCU8_SLICE_ClearEvent>
        XMC_CCU8_SLICE_ClearEvent(HandlePtr->phase_ptr[count]->slice_ptr, XMC_CCU8_SLICE_IRQ_ID_TRAP);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	3202      	adds	r2, #2
 8002f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	210b      	movs	r1, #11
 8002f12:	f7ff fd8f 	bl	8002a34 <XMC_CCU8_SLICE_ClearEvent>
      }
      /* configure the Start trigger function*/
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	3202      	adds	r2, #2
 8002f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	2101      	movs	r1, #1
 8002f26:	2201      	movs	r2, #1
 8002f28:	f7fe fc8c 	bl	8001844 <XMC_CCU8_SLICE_StartConfig>
    HandlePtr->subsector = 0U;

    /*Enable Inverter*/
    PWM_SVM_InverterEnable(HandlePtr);

    for (count = 0U; count < PWM_SVM_NUMBERPHASE; count++)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d9d5      	bls.n	8002ee4 <PWM_SVM_Start+0x84>
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[count]->slice_ptr,
          (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    if ((uint8_t) true == svmptr->enable_trap)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d129      	bne.n	8002f96 <PWM_SVM_Start+0x136>
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	7d1b      	ldrb	r3, [r3, #20]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	7d1b      	ldrb	r3, [r3, #20]
 8002f52:	005b      	lsls	r3, r3, #1
    }

    if ((uint8_t) true == svmptr->enable_trap)
    {
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
 8002f54:	430b      	orrs	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7ff fd27 	bl	80029ac <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	7d5b      	ldrb	r3, [r3, #21]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	7d5b      	ldrb	r3, [r3, #21]
 8002f6e:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase u out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[0]->slice_ptr,
          ((uint32_t) svmptr->phase_u_out0 | ((uint32_t) svmptr->phase_u_out0 << 1U)));

      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
 8002f70:	430b      	orrs	r3, r1
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	f7ff fd19 	bl	80029ac <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	681a      	ldr	r2, [r3, #0]
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	7d9b      	ldrb	r3, [r3, #22]
 8002f84:	4619      	mov	r1, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	7d9b      	ldrb	r3, [r3, #22]
 8002f8a:	005b      	lsls	r3, r3, #1
      /* Enables trap feature for phase v out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[1]->slice_ptr,
          ((uint32_t) svmptr->phase_v_out0 | ((uint32_t) svmptr->phase_v_out0 << 1U)));

      /* Enables trap feature for phase w out 0 and 1*/
      XMC_CCU8_SLICE_EnableTrap(HandlePtr->phase_ptr[2]->slice_ptr,
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	f7ff fd0b 	bl	80029ac <XMC_CCU8_SLICE_EnableTrap>
          ((uint32_t) svmptr->phase_w_out0 | ((uint32_t) svmptr->phase_w_out0 << 1U)));
    }

    /*enable module clock by clearing idle bit if any of current measurement is selected */
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	7c1b      	ldrb	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d075      	beq.n	800308a <PWM_SVM_Start+0x22a>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_0,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f7fe fc4b 	bl	8001844 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	7c1b      	ldrb	r3, [r3, #16]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d133      	bne.n	800301e <PWM_SVM_Start+0x1be>
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);

      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8002fcc:	4413      	add	r3, r2
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f7ff fd0a 	bl	80029ec <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002fe4:	085b      	lsrs	r3, r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      /* offset for current measurement trigger */
      if ((PWM_SVM_CMTYPE_t) PWM_SVM_DCLINKCM == svmptr->current_measurement)
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8002fee:	4413      	add	r3, r2
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	4608      	mov	r0, r1
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f7ff fcf9 	bl	80029ec <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003010:	4413      	add	r3, r2
 8003012:	b29b      	uxth	r3, r3
 8003014:	4608      	mov	r0, r1
 8003016:	4619      	mov	r1, r3
 8003018:	f7ff fce8 	bl	80029ec <XMC_CCU8_SLICE_SetTimerValue>
 800301c:	e035      	b.n	800308a <PWM_SVM_Start+0x22a>
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302a:	b29b      	uxth	r3, r3
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 800302c:	b2db      	uxtb	r3, r3
 800302e:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
            (uint16_t)((uint16_t)(HandlePtr->tmin >> (uint16_t) 1) + (uint16_t) svmptr->current_offset));
      }
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
 8003036:	4413      	add	r3, r2
 8003038:	b29b      	uxth	r3, r3
 800303a:	4608      	mov	r0, r1
 800303c:	4619      	mov	r1, r3
 800303e:	f7ff fcd5 	bl	80029ec <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304e:	b29b      	uxth	r3, r3
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 8003050:	b2db      	uxtb	r3, r3
 8003052:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
      else
      {
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[0]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
 800305a:	4413      	add	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	4608      	mov	r0, r1
 8003060:	4619      	mov	r1, r3
 8003062:	f7ff fcc3 	bl	80029ec <XMC_CCU8_SLICE_SetTimerValue>
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	6819      	ldr	r1, [r3, #0]
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003072:	b29b      	uxth	r3, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 8003074:	b2db      	uxtb	r3, r3
 8003076:	b29a      	uxth	r2, r3
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge ) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[1]->slice_ptr,
            (uint16_t)((((uint16_t) HandlePtr->deadtime_rising_edge) & (uint16_t) 0xFF)
                    + (uint16_t) svmptr->current_offset));
        XMC_CCU8_SLICE_SetTimerValue(HandlePtr->phase_ptr[2]->slice_ptr,
 800307e:	4413      	add	r3, r2
 8003080:	b29b      	uxth	r3, r3
 8003082:	4608      	mov	r0, r1
 8003084:	4619      	mov	r1, r3
 8003086:	f7ff fcb1 	bl	80029ec <XMC_CCU8_SLICE_SetTimerValue>
                    + (uint16_t) svmptr->current_offset));
      }
    }

    /* synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerHigh((uint32_t)(svmptr->sync_start_mask));
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fce6 	bl	8002a60 <XMC_SCU_SetCcuTriggerHigh>

    /* disable the Start trigger function*/
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[0]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	2100      	movs	r1, #0
 800309e:	2201      	movs	r2, #1
 80030a0:	f7fe fbd0 	bl	8001844 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[1]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	2100      	movs	r1, #0
 80030ae:	2201      	movs	r2, #1
 80030b0:	f7fe fbc8 	bl	8001844 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[2]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	2100      	movs	r1, #0
 80030be:	2201      	movs	r2, #1
 80030c0:	f7fe fbc0 	bl	8001844 <XMC_CCU8_SLICE_StartConfig>
        (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    if ((PWM_SVM_CMTYPE_t) PWM_SVM_NONE != svmptr->current_measurement)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	7c1b      	ldrb	r3, [r3, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <PWM_SVM_Start+0x27c>
    {
      XMC_CCU8_SLICE_StartConfig(HandlePtr->phase_ptr[3]->slice_ptr, (XMC_CCU8_SLICE_EVENT_t) XMC_CCU8_SLICE_EVENT_NONE,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	2100      	movs	r1, #0
 80030d6:	2201      	movs	r2, #1
 80030d8:	f7fe fbb4 	bl	8001844 <XMC_CCU8_SLICE_StartConfig>
          (XMC_CCU8_SLICE_START_MODE_t) XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR);
    }

    /* disable synchronous start of CCU8 slices */
    XMC_SCU_SetCcuTriggerLow((uint32_t)(svmptr->sync_start_mask));
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fccf 	bl	8002a84 <XMC_SCU_SetCcuTriggerLow>

    /* change the state to RUNNING*/
    HandlePtr->state = PWM_SVM_RUNNING;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }
}
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <__NVIC_GetPriorityGrouping+0x18>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003100:	0a1b      	lsrs	r3, r3, #8
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db0b      	blt.n	800313a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <__NVIC_EnableIRQ+0x34>)
 8003124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	79fa      	ldrb	r2, [r7, #7]
 800312c:	f002 021f 	and.w	r2, r2, #31
 8003130:	2001      	movs	r0, #1
 8003132:	fa00 f202 	lsl.w	r2, r0, r2
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db0c      	blt.n	8003174 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	4909      	ldr	r1, [pc, #36]	; (8003180 <__NVIC_ClearPendingIRQ+0x38>)
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	79fa      	ldrb	r2, [r7, #7]
 8003164:	f002 021f 	and.w	r2, r2, #31
 8003168:	2001      	movs	r0, #1
 800316a:	fa00 f202 	lsl.w	r2, r0, r2
 800316e:	3360      	adds	r3, #96	; 0x60
 8003170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100

08003184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db0a      	blt.n	80031ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003198:	490d      	ldr	r1, [pc, #52]	; (80031d0 <__NVIC_SetPriority+0x4c>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	440b      	add	r3, r1
 80031a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80031ac:	e00a      	b.n	80031c4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ae:	4909      	ldr	r1, [pc, #36]	; (80031d4 <__NVIC_SetPriority+0x50>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3b04      	subs	r3, #4
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	440b      	add	r3, r1
 80031c2:	761a      	strb	r2, [r3, #24]
  }
}
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000e100 	.word	0xe000e100
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f1c3 0307 	rsb	r3, r3, #7
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	bf28      	it	cs
 80031f6:	2306      	movcs	r3, #6
 80031f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3306      	adds	r3, #6
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d902      	bls.n	8003208 <NVIC_EncodePriority+0x30>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3b01      	subs	r3, #1
 8003206:	e000      	b.n	800320a <NVIC_EncodePriority+0x32>
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2201      	movs	r2, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	1e5a      	subs	r2, r3, #1
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	401a      	ands	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	1e59      	subs	r1, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800322c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3308      	adds	r3, #8
 8003252:	4608      	mov	r0, r1
 8003254:	4611      	mov	r1, r2
 8003256:	461a      	mov	r2, r3
 8003258:	f7fd f8b8 	bl	80003cc <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7fda      	ldrb	r2, [r3, #31]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3314      	adds	r3, #20
 8003268:	4608      	mov	r0, r1
 800326a:	4611      	mov	r1, r2
 800326c:	461a      	mov	r2, r3
 800326e:	f7fe fc0f 	bl	8001a90 <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	2201      	movs	r2, #1
 8003282:	f7fe fc2b 	bl	8001adc <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7f1c      	ldrb	r4, [r3, #28]
 800328a:	f7ff ff33 	bl	80030f4 <__NVIC_GetPriorityGrouping>
 800328e:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003294:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 800329a:	4608      	mov	r0, r1
 800329c:	4611      	mov	r1, r2
 800329e:	461a      	mov	r2, r3
 80032a0:	f7ff ff9a 	bl	80031d8 <NVIC_EncodePriority>
 80032a4:	4602      	mov	r2, r0
 80032a6:	b263      	sxtb	r3, r4
 80032a8:	4618      	mov	r0, r3
 80032aa:	4611      	mov	r1, r2
 80032ac:	f7ff ff6a 	bl	8003184 <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7f1b      	ldrb	r3, [r3, #28]
 80032be:	b25b      	sxtb	r3, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff41 	bl	8003148 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7f1b      	ldrb	r3, [r3, #28]
 80032ca:	b25b      	sxtb	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff1f 	bl	8003110 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032e8:	0a1b      	lsrs	r3, r3, #8
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	4908      	ldr	r1, [pc, #32]	; (800332c <__NVIC_EnableIRQ+0x34>)
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	79fa      	ldrb	r2, [r7, #7]
 8003314:	f002 021f 	and.w	r2, r2, #31
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000e100 	.word	0xe000e100

08003330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	2b00      	cmp	r3, #0
 8003342:	db0a      	blt.n	800335a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003344:	490d      	ldr	r1, [pc, #52]	; (800337c <__NVIC_SetPriority+0x4c>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	0092      	lsls	r2, r2, #2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	440b      	add	r3, r1
 8003354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003358:	e00a      	b.n	8003370 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335a:	4909      	ldr	r1, [pc, #36]	; (8003380 <__NVIC_SetPriority+0x50>)
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	3b04      	subs	r3, #4
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	440b      	add	r3, r1
 800336e:	761a      	strb	r2, [r3, #24]
  }
}
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000e100 	.word	0xe000e100
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f1c3 0307 	rsb	r3, r3, #7
 800339e:	2b06      	cmp	r3, #6
 80033a0:	bf28      	it	cs
 80033a2:	2306      	movcs	r3, #6
 80033a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3306      	adds	r3, #6
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d902      	bls.n	80033b4 <NVIC_EncodePriority+0x30>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	e000      	b.n	80033b6 <NVIC_EncodePriority+0x32>
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	401a      	ands	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	1e59      	subs	r1, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80033d8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop

080033e8 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b25b      	sxtb	r3, r3
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ff7e 	bl	80032f8 <__NVIC_EnableIRQ>
}
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop

08003404 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	781c      	ldrb	r4, [r3, #0]
 8003410:	f7ff ff64 	bl	80032dc <__NVIC_GetPriorityGrouping>
 8003414:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800341a:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003420:	4608      	mov	r0, r1
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	f7ff ffad 	bl	8003384 <NVIC_EncodePriority>
 800342a:	4602      	mov	r2, r0
 800342c:	b263      	sxtb	r3, r4
 800342e:	4618      	mov	r0, r3
 8003430:	4611      	mov	r1, r2
 8003432:	f7ff ff7d 	bl	8003330 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	78db      	ldrb	r3, [r3, #3]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ffd2 	bl	80033e8 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bd90      	pop	{r4, r7, pc}
 800344e:	bf00      	nop

08003450 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
}
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop

08003470 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7b5b      	ldrb	r3, [r3, #13]
 800347c:	f083 0301 	eor.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00f      	beq.n	80034a6 <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7b1b      	ldrb	r3, [r3, #12]
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f7fe f97f 	bl	8001794 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ffd8 	bl	8003450 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
}
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop

080034d0 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7b5b      	ldrb	r3, [r3, #13]
 80034dc:	f083 0301 	eor.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00f      	beq.n	8003506 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7b1b      	ldrb	r3, [r3, #12]
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	f7fe f85d 	bl	80015b0 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ffd8 	bl	80034b0 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8003518:	2300      	movs	r3, #0
 800351a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7a5b      	ldrb	r3, [r3, #9]
 8003520:	f083 0301 	eor.w	r3, r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4610      	mov	r0, r2
 8003534:	2101      	movs	r1, #1
 8003536:	461a      	mov	r2, r3
 8003538:	f7fd fdbe 	bl	80010b8 <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8003546:	7bfb      	ldrb	r3, [r7, #15]

}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7c1a      	ldrb	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	461a      	mov	r2, r3
 800356a:	f7fc ff2f 	bl	80003cc <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7c1a      	ldrb	r2, [r3, #16]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7c5b      	ldrb	r3, [r3, #17]
 800357a:	4608      	mov	r0, r1
 800357c:	4611      	mov	r1, r2
 800357e:	461a      	mov	r2, r3
 8003580:	f7fe faca 	bl	8001b18 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop

08003590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ac:	4013      	ands	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80035b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c0:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80035c2:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <__NVIC_SetPriorityGrouping+0x44>)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	60d3      	str	r3, [r2, #12]
}
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80035de:	2001      	movs	r0, #1
 80035e0:	f7ff ffd6 	bl	8003590 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035e4:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <SystemCoreSetup+0x94>)
 80035e8:	4a21      	ldr	r2, [pc, #132]	; (8003670 <SystemCoreSetup+0x98>)
 80035ea:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80035ec:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80035f0:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80035f2:	4a1e      	ldr	r2, [pc, #120]	; (800366c <SystemCoreSetup+0x94>)
 80035f4:	4b1d      	ldr	r3, [pc, #116]	; (800366c <SystemCoreSetup+0x94>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8003602:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <SystemCoreSetup+0x9c>)
 8003604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003608:	3314      	adds	r3, #20
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f023 030f 	bic.w	r3, r3, #15
 8003614:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f043 0303 	orr.w	r3, r3, #3
 800361c:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <SystemCoreSetup+0x9c>)
 8003620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003624:	3314      	adds	r3, #20
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 800362a:	4a10      	ldr	r2, [pc, #64]	; (800366c <SystemCoreSetup+0x94>)
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <SystemCoreSetup+0x94>)
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f023 0310 	bic.w	r3, r3, #16
 8003634:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8003636:	4a0d      	ldr	r2, [pc, #52]	; (800366c <SystemCoreSetup+0x94>)
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <SystemCoreSetup+0x94>)
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f023 0308 	bic.w	r3, r3, #8
 8003640:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003642:	4a0a      	ldr	r2, [pc, #40]	; (800366c <SystemCoreSetup+0x94>)
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <SystemCoreSetup+0x94>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800364e:	4a07      	ldr	r2, [pc, #28]	; (800366c <SystemCoreSetup+0x94>)
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <SystemCoreSetup+0x94>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003658:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 800365a:	4a04      	ldr	r2, [pc, #16]	; (800366c <SystemCoreSetup+0x94>)
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <SystemCoreSetup+0x94>)
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003664:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	e000ed00 	.word	0xe000ed00
 8003670:	08000000 	.word	0x08000000
 8003674:	58001000 	.word	0x58001000

08003678 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]

  return (status);
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800369c:	4b02      	ldr	r3, [pc, #8]	; (80036a8 <OSCHP_GetFrequency+0x10>)
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	00b71b00 	.word	0x00b71b00

080036ac <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80036ac:	b5b0      	push	{r4, r5, r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <SystemCoreClockSetup+0x50>)
 80036b4:	1d3c      	adds	r4, r7, #4
 80036b6:	461d      	mov	r5, r3
 80036b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036bc:	682b      	ldr	r3, [r5, #0]
 80036be:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc ff7c 	bl	80005c0 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80036c8:	2000      	movs	r0, #0
 80036ca:	f7fd f877 	bl	80007bc <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80036ce:	2000      	movs	r0, #0
 80036d0:	f7fd f82c 	bl	800072c <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80036d4:	2004      	movs	r0, #4
 80036d6:	f7fd f8fd 	bl	80008d4 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80036da:	2001      	movs	r0, #1
 80036dc:	2120      	movs	r1, #32
 80036de:	f7fd f945 	bl	800096c <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7fd f836 	bl	8000754 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80036e8:	2001      	movs	r0, #1
 80036ea:	f7fd f91b 	bl	8000924 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80036ee:	2001      	movs	r0, #1
 80036f0:	f7fd f904 	bl	80008fc <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bdb0      	pop	{r4, r5, r7, pc}
 80036fa:	bf00      	nop
 80036fc:	080074f0 	.word	0x080074f0

08003700 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	460b      	mov	r3, r1
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	7afb      	ldrb	r3, [r7, #11]
 8003714:	2107      	movs	r1, #7
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	401a      	ands	r2, r3
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	431a      	orrs	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop

08003738 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop

08003764 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]
}
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop

08003784 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	601a      	str	r2, [r3, #0]
}
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop

080037a4 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop

080037c4 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f043 0201 	orr.w	r2, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	601a      	str	r2, [r3, #0]
}
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop

080037e4 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 0201 	bic.w	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	601a      	str	r2, [r3, #0]
}
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	460b      	mov	r3, r1
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	6891      	ldr	r1, [r2, #8]
 800381c:	7afa      	ldrb	r2, [r7, #11]
 800381e:	2007      	movs	r0, #7
 8003820:	fa00 f202 	lsl.w	r2, r0, r2
 8003824:	43d2      	mvns	r2, r2
 8003826:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 8003828:	7afa      	ldrb	r2, [r7, #11]
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop

08003840 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	6811      	ldr	r1, [r2, #0]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
}
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8003876:	f7ff ffe3 	bl	8003840 <XMC_CAN_MO_EnableEvent>
}
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003892:	f7ff ffd5 	bl	8003840 <XMC_CAN_MO_EnableEvent>
}
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f831 	bl	8003910 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f043 0302 	orr.w	r3, r3, #2
 80038be:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f043 0304 	orr.w	r3, r3, #4
 80038d0:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f043 0308 	orr.w	r3, r3, #8
 80038e2:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4618      	mov	r0, r3
 80038ea:	68f9      	ldr	r1, [r7, #12]
 80038ec:	f7fd fdf6 	bl	80014dc <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4618      	mov	r0, r3
 8003900:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003904:	f7fd fdea 	bl	80014dc <XMC_CAN_NODE_EnableEvent>
  }

}
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop

08003910 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003922:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8003924:	4610      	mov	r0, r2
 8003926:	2100      	movs	r1, #0
 8003928:	461a      	mov	r2, r3
 800392a:	f7ff fee9 	bl	8003700 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003938:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800393a:	4610      	mov	r0, r2
 800393c:	2104      	movs	r1, #4
 800393e:	461a      	mov	r2, r3
 8003940:	f7ff fede 	bl	8003700 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800394e:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8003950:	4610      	mov	r0, r2
 8003952:	2108      	movs	r1, #8
 8003954:	461a      	mov	r2, r3
 8003956:	f7ff fed3 	bl	8003700 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003964:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8003966:	4610      	mov	r0, r2
 8003968:	210c      	movs	r1, #12
 800396a:	461a      	mov	r2, r3
 800396c:	f7ff fec8 	bl	8003700 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop

08003978 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd fbd7 	bl	8001138 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	79db      	ldrb	r3, [r3, #7]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	795b      	ldrb	r3, [r3, #5]
 800399a:	4610      	mov	r0, r2
 800399c:	2104      	movs	r1, #4
 800399e:	461a      	mov	r2, r3
 80039a0:	f7ff ff30 	bl	8003804 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff5d 	bl	8003864 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	7a1b      	ldrb	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	799b      	ldrb	r3, [r3, #6]
 80039ba:	4610      	mov	r0, r2
 80039bc:	2100      	movs	r1, #0
 80039be:	461a      	mov	r2, r3
 80039c0:	f7ff ff20 	bl	8003804 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff5b 	bl	8003880 <CAN_NODE_MO_EnableRxEvent>
  }

}
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd fc7d 	bl	80012e0 <XMC_CAN_MO_Transmit>
 80039e6:	4603      	mov	r3, r0
 80039e8:	73fb      	strb	r3, [r7, #15]
  return (status);
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd fc99 	bl	800133c <XMC_CAN_MO_Receive>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  return (status);
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	6852      	ldr	r2, [r2, #4]
 8003a3c:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd fc14 	bl	8001270 <XMC_CAN_MO_UpdateData>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	73fb      	strb	r3, [r7, #15]
  return (status);
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop

08003a58 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fd4d 	bl	8003510 <GLOBAL_CAN_Init>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d17b      	bne.n	8003b78 <CAN_NODE_Init+0x120>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    XMC_CAN_NODE_NominalBitTimeConfigure(handle->node_ptr, handle->baudrate_config);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f7fd f9e2 	bl	8000e54 <XMC_CAN_NODE_NominalBitTimeConfigure>
    /* set CCE and INIT bit NCR for node configuration */
    XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fe75 	bl	8003784 <XMC_CAN_NODE_EnableConfigurationChange>
    XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fe90 	bl	80037c4 <XMC_CAN_NODE_SetInitBit>

    if (handle->loopback_enable == true) /* Loop back mode enabled */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <CAN_NODE_Init+0x62>
    {
      XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fe56 	bl	8003764 <XMC_CAN_NODE_EnableLoopBack>
 8003ab8:	e018      	b.n	8003aec <CAN_NODE_Init+0x94>
    }
    else
    {
      XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ac8:	791a      	ldrb	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f7fc fc79 	bl	80003cc <XMC_GPIO_Init>
      XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7ff fe26 	bl	8003738 <XMC_CAN_NODE_SetReceiveInput>
    }
    CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fed5 	bl	800389c <CAN_NODE_SetNodeEvents>

    for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	e019      	b.n	8003b2c <CAN_NODE_Init+0xd4>
    {
      lmo_ptr = handle->lmobj_ptr[loop_count];
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3302      	adds	r3, #2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60bb      	str	r3, [r7, #8]
      XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	791b      	ldrb	r3, [r3, #4]
 8003b16:	4608      	mov	r0, r1
 8003b18:	4611      	mov	r1, r2
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f7fd fa7c 	bl	8001018 <XMC_CAN_AllocateMOtoNodeList>
      CAN_NODE_MO_Init(lmo_ptr);
 8003b20:	68b8      	ldr	r0, [r7, #8]
 8003b22:	f7ff ff29 	bl	8003978 <CAN_NODE_MO_Init>
      XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
      XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
    }
    CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

    for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8003b32:	461a      	mov	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d8de      	bhi.n	8003af8 <CAN_NODE_Init+0xa0>
      lmo_ptr = handle->lmobj_ptr[loop_count];
      XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
      CAN_NODE_MO_Init(lmo_ptr);
    }
    /* reset CCE and INIT bit NCR for node configuration */
    XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fe30 	bl	80037a4 <XMC_CAN_NODE_DisableConfigurationChange>
    XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fe4b 	bl	80037e4 <XMC_CAN_NODE_ResetInitBit>
    if (handle->loopback_enable == false)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8003b54:	f083 0301 	eor.w	r3, r3, #1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <CAN_NODE_Init+0x124>
    {
      /* CAN transmit pin configuration */
      XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	791a      	ldrb	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	4611      	mov	r1, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	f7fc fc2b 	bl	80003cc <XMC_GPIO_Init>
 8003b76:	e001      	b.n	8003b7c <CAN_NODE_Init+0x124>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop

08003b88 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	460b      	mov	r3, r1
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 8003b96:	7afb      	ldrb	r3, [r7, #11]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	605a      	str	r2, [r3, #4]
}
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop

08003bac <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	7c5b      	ldrb	r3, [r3, #17]
 8003bb8:	f083 0301 	eor.w	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d020      	beq.n	8003c04 <BUS_IO_Init+0x58>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	e015      	b.n	8003bf4 <BUS_IO_Init+0x48>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	791a      	ldrb	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	f7fc fbef 	bl	80003cc <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	7c1b      	ldrb	r3, [r3, #16]
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3e4      	bcc.n	8003bc8 <BUS_IO_Init+0x1c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	745a      	strb	r2, [r3, #17]
  }
  return (BUS_IO_STATUS_OK);
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop

08003c10 <BUS_IO_Write>:
  return(count);
}

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	73fb      	strb	r3, [r7, #15]
 8003c26:	e023      	b.n	8003c70 <BUS_IO_Write+0x60>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	4013      	ands	r3, r2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <BUS_IO_Write+0x40>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	791b      	ldrb	r3, [r3, #4]
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f7ff ff9d 	bl	8003b88 <XMC_GPIO_SetOutputLevel>
 8003c4e:	e009      	b.n	8003c64 <BUS_IO_Write+0x54>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	791b      	ldrb	r3, [r3, #4]
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c60:	f7ff ff92 	bl	8003b88 <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	3308      	adds	r3, #8
 8003c68:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7c1b      	ldrb	r3, [r3, #16]
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d3d6      	bcc.n	8003c28 <BUS_IO_Write+0x18>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8003c86:	2300      	movs	r3, #0
 8003c88:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8003c8a:	485d      	ldr	r0, [pc, #372]	; (8003e00 <DAVE_Init+0x180>)
 8003c8c:	f7ff fcf4 	bl	8003678 <CLOCK_XMC4_Init>
 8003c90:	4603      	mov	r3, r0
 8003c92:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d104      	bne.n	8003ca4 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance status_LED_green */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&status_LED_green); 
 8003c9a:	485a      	ldr	r0, [pc, #360]	; (8003e04 <DAVE_Init+0x184>)
 8003c9c:	f7ff fc58 	bl	8003550 <DIGITAL_IO_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance status_LED_red_cal_time */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&status_LED_red_cal_time); 
 8003caa:	4857      	ldr	r0, [pc, #348]	; (8003e08 <DAVE_Init+0x188>)
 8003cac:	f7ff fc50 	bl	8003550 <DIGITAL_IO_Init>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <DAVE_Init+0x44>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
 8003cba:	4854      	ldr	r0, [pc, #336]	; (8003e0c <DAVE_Init+0x18c>)
 8003cbc:	f7fe fa82 	bl	80021c4 <SPI_MASTER_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <DAVE_Init+0x54>
  {
	 /**  Initialization of BUS_IO APP instance SPI_ChipSelect */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&SPI_ChipSelect); 
 8003cca:	4851      	ldr	r0, [pc, #324]	; (8003e10 <DAVE_Init+0x190>)
 8003ccc:	f7ff ff6e 	bl	8003bac <BUS_IO_Init>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <DAVE_Init+0x64>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance OverCurrent_U */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&OverCurrent_U); 
 8003cda:	484e      	ldr	r0, [pc, #312]	; (8003e14 <DAVE_Init+0x194>)
 8003cdc:	f7ff faae 	bl	800323c <PIN_INTERRUPT_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <DAVE_Init+0x74>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance OverCurrent_V */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&OverCurrent_V); 
 8003cea:	484b      	ldr	r0, [pc, #300]	; (8003e18 <DAVE_Init+0x198>)
 8003cec:	f7ff faa6 	bl	800323c <PIN_INTERRUPT_Init>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d104      	bne.n	8003d04 <DAVE_Init+0x84>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance OverCurrent_W */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&OverCurrent_W); 
 8003cfa:	4848      	ldr	r0, [pc, #288]	; (8003e1c <DAVE_Init+0x19c>)
 8003cfc:	f7ff fa9e 	bl	800323c <PIN_INTERRUPT_Init>
 8003d00:	4603      	mov	r3, r0
 8003d02:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <DAVE_Init+0x94>
  {
	 /**  Initialization of PWM_SVM APP instance PWM_SVM_0 */
	 init_status = (DAVE_STATUS_t)PWM_SVM_Init(&PWM_SVM_0); 
 8003d0a:	4845      	ldr	r0, [pc, #276]	; (8003e20 <DAVE_Init+0x1a0>)
 8003d0c:	f7fe ff5c 	bl	8002bc8 <PWM_SVM_Init>
 8003d10:	4603      	mov	r3, r0
 8003d12:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <DAVE_Init+0xa4>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 8003d1a:	4842      	ldr	r0, [pc, #264]	; (8003e24 <DAVE_Init+0x1a4>)
 8003d1c:	f7ff fb72 	bl	8003404 <INTERRUPT_Init>
 8003d20:	4603      	mov	r3, r0
 8003d22:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <DAVE_Init+0xb4>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8003d2a:	483f      	ldr	r0, [pc, #252]	; (8003e28 <DAVE_Init+0x1a8>)
 8003d2c:	f7fe f92a 	bl	8001f84 <TIMER_Init>
 8003d30:	4603      	mov	r3, r0
 8003d32:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d104      	bne.n	8003d44 <DAVE_Init+0xc4>
  {
	 /**  Initialization of INTERRUPT APP instance Time_Counter */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&Time_Counter); 
 8003d3a:	483c      	ldr	r0, [pc, #240]	; (8003e2c <DAVE_Init+0x1ac>)
 8003d3c:	f7ff fb62 	bl	8003404 <INTERRUPT_Init>
 8003d40:	4603      	mov	r3, r0
 8003d42:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <DAVE_Init+0xd4>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance Hall_A_ISR */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&Hall_A_ISR); 
 8003d4a:	4839      	ldr	r0, [pc, #228]	; (8003e30 <DAVE_Init+0x1b0>)
 8003d4c:	f7ff fa76 	bl	800323c <PIN_INTERRUPT_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <DAVE_Init+0xe4>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance Hall_B_ISR */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&Hall_B_ISR); 
 8003d5a:	4836      	ldr	r0, [pc, #216]	; (8003e34 <DAVE_Init+0x1b4>)
 8003d5c:	f7ff fa6e 	bl	800323c <PIN_INTERRUPT_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <DAVE_Init+0xf4>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance Hall_C_ISR */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&Hall_C_ISR); 
 8003d6a:	4833      	ldr	r0, [pc, #204]	; (8003e38 <DAVE_Init+0x1b8>)
 8003d6c:	f7ff fa66 	bl	800323c <PIN_INTERRUPT_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d104      	bne.n	8003d84 <DAVE_Init+0x104>
  {
	 /**  Initialization of INTERRUPT APP instance calc_ISR */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&calc_ISR); 
 8003d7a:	4830      	ldr	r0, [pc, #192]	; (8003e3c <DAVE_Init+0x1bc>)
 8003d7c:	f7ff fb42 	bl	8003404 <INTERRUPT_Init>
 8003d80:	4603      	mov	r3, r0
 8003d82:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <DAVE_Init+0x114>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 8003d8a:	482d      	ldr	r0, [pc, #180]	; (8003e40 <DAVE_Init+0x1c0>)
 8003d8c:	f7ff fe64 	bl	8003a58 <CAN_NODE_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d104      	bne.n	8003da4 <DAVE_Init+0x124>
  {
	 /**  Initialization of INTERRUPT APP instance CAN_RX_MO2 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CAN_RX_MO2); 
 8003d9a:	482a      	ldr	r0, [pc, #168]	; (8003e44 <DAVE_Init+0x1c4>)
 8003d9c:	f7ff fb32 	bl	8003404 <INTERRUPT_Init>
 8003da0:	4603      	mov	r3, r0
 8003da2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <DAVE_Init+0x134>
  {
	 /**  Initialization of TIMER APP instance TIMER_1 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_1); 
 8003daa:	4827      	ldr	r0, [pc, #156]	; (8003e48 <DAVE_Init+0x1c8>)
 8003dac:	f7fe f8ea 	bl	8001f84 <TIMER_Init>
 8003db0:	4603      	mov	r3, r0
 8003db2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <DAVE_Init+0x144>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_1); 
 8003dba:	4824      	ldr	r0, [pc, #144]	; (8003e4c <DAVE_Init+0x1cc>)
 8003dbc:	f7ff fb22 	bl	8003404 <INTERRUPT_Init>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <DAVE_Init+0x154>
  {
	 /**  Initialization of TIMER APP instance TIMER_CAN_TX */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_CAN_TX); 
 8003dca:	4821      	ldr	r0, [pc, #132]	; (8003e50 <DAVE_Init+0x1d0>)
 8003dcc:	f7fe f8da 	bl	8001f84 <TIMER_Init>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <DAVE_Init+0x164>
  {
	 /**  Initialization of INTERRUPT APP instance CAN_TX */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CAN_TX); 
 8003dda:	481e      	ldr	r0, [pc, #120]	; (8003e54 <DAVE_Init+0x1d4>)
 8003ddc:	f7ff fb12 	bl	8003404 <INTERRUPT_Init>
 8003de0:	4603      	mov	r3, r0
 8003de2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d104      	bne.n	8003df4 <DAVE_Init+0x174>
  {
	 /**  Initialization of INTERRUPT APP instance CAN_RX_MO7 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CAN_RX_MO7); 
 8003dea:	481b      	ldr	r0, [pc, #108]	; (8003e58 <DAVE_Init+0x1d8>)
 8003dec:	f7ff fb0a 	bl	8003404 <INTERRUPT_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8003df4:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000428 	.word	0x20000428
 8003e04:	080074c8 	.word	0x080074c8
 8003e08:	080074dc 	.word	0x080074dc
 8003e0c:	200000c4 	.word	0x200000c4
 8003e10:	200002c0 	.word	0x200002c0
 8003e14:	080073d4 	.word	0x080073d4
 8003e18:	080073f8 	.word	0x080073f8
 8003e1c:	0800741c 	.word	0x0800741c
 8003e20:	200000dc 	.word	0x200000dc
 8003e24:	080074ac 	.word	0x080074ac
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	080074b0 	.word	0x080074b0
 8003e30:	08007440 	.word	0x08007440
 8003e34:	08007464 	.word	0x08007464
 8003e38:	08007488 	.word	0x08007488
 8003e3c:	080074b4 	.word	0x080074b4
 8003e40:	08007584 	.word	0x08007584
 8003e44:	080074b8 	.word	0x080074b8
 8003e48:	20000028 	.word	0x20000028
 8003e4c:	080074bc 	.word	0x080074bc
 8003e50:	20000058 	.word	0x20000058
 8003e54:	080074c0 	.word	0x080074c0
 8003e58:	080074c4 	.word	0x080074c4

08003e5c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	605a      	str	r2, [r3, #4]
}
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	605a      	str	r2, [r3, #4]
}
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop

08003ea0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	f003 0301 	and.w	r3, r3, #1
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop

08003ec8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7c1b      	ldrb	r3, [r3, #16]
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	f7ff ffbe 	bl	8003e5c <XMC_GPIO_SetOutputHigh>
}
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop

08003ee8 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7c1b      	ldrb	r3, [r3, #16]
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	f7ff ffbe 	bl	8003e7c <XMC_GPIO_SetOutputLow>
}
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop

08003f08 <PIN_INTERRUPT_GetPinValue>:
*   return (1);
* }
*  @endcode
*/
__STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
  return (XMC_GPIO_GetInput(handle->port, handle->pin));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f7ff ffbf 	bl	8003ea0 <XMC_GPIO_GetInput>
 8003f22:	4603      	mov	r3, r0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <main>:
//########################
// MAIN
//########################

int main(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8003f32:	f7ff fea5 	bl	8003c80 <DAVE_Init>
 8003f36:	4603      	mov	r3, r0
 8003f38:	71fb      	strb	r3, [r7, #7]

  Hall_init();
 8003f3a:	f000 fa41 	bl	80043c0 <Hall_init>

  if(status != DAVE_STATUS_SUCCESS)
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d000      	beq.n	8003f46 <main+0x1a>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8003f44:	e7fe      	b.n	8003f44 <main+0x18>
  }

  //Initialization of CAN
  	CAN_NODE_STATUS_t init_status;
  	init_status = CAN_NODE_Init(&CAN_NODE_0);
 8003f46:	480f      	ldr	r0, [pc, #60]	; (8003f84 <main+0x58>)
 8003f48:	f7ff fd86 	bl	8003a58 <CAN_NODE_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	71bb      	strb	r3, [r7, #6]
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 8003f50:	480d      	ldr	r0, [pc, #52]	; (8003f88 <main+0x5c>)
 8003f52:	f7fe ff85 	bl	8002e60 <PWM_SVM_Start>
		  while(1U)
		    {
			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <main+0x60>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d910      	bls.n	8003f82 <main+0x56>
			  {
				  count=0;
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <main+0x60>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
				  Calculation();
 8003f66:	f000 fae7 	bl	8004538 <Calculation>

				  f_rec_data(iq,Vq_ref,2,4);
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <main+0x64>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <main+0x68>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f7a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8003f7e:	f001 f83b 	bl	8004ff8 <f_rec_data>
			  }
		    }
 8003f82:	e7e8      	b.n	8003f56 <main+0x2a>
 8003f84:	08007584 	.word	0x08007584
 8003f88:	200000dc 	.word	0x200000dc
 8003f8c:	20000480 	.word	0x20000480
 8003f90:	200023d4 	.word	0x200023d4
 8003f94:	20000468 	.word	0x20000468

08003f98 <CAN0_1_IRQHandler>:
//########################
// INTERRUPTS
//########################

// CAN Communication
void CAN_RX_MO2_ISR(void){
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
 8003f9e:	4b38      	ldr	r3, [pc, #224]	; (8004080 <CAN0_1_IRQHandler+0xe8>)
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60bb      	str	r3, [r7, #8]
		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
 8003fa6:	4b36      	ldr	r3, [pc, #216]	; (8004080 <CAN0_1_IRQHandler+0xe8>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fd22 	bl	80039f4 <CAN_NODE_MO_Receive>

		uint8_t data_r[8];
		 int i;
		 for(i = 0 ; i < 8 ; i ++){
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e00c      	b.n	8003fd0 <CAN0_1_IRQHandler+0x38>
			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	7819      	ldrb	r1, [r3, #0]
 8003fc0:	463a      	mov	r2, r7
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	460a      	mov	r2, r1
 8003fc8:	701a      	strb	r2, [r3, #0]
		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder

		uint8_t data_r[8];
		 int i;
		 for(i = 0 ; i < 8 ; i ++){
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b07      	cmp	r3, #7
 8003fd4:	ddef      	ble.n	8003fb6 <CAN0_1_IRQHandler+0x1e>
			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
		 }

		 for(i = 0 ; i < 4 ; i ++){
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e01a      	b.n	8004012 <CAN0_1_IRQHandler+0x7a>
			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f107 0210 	add.w	r2, r7, #16
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	f107 0110 	add.w	r1, r7, #16
 8003ff8:	440b      	add	r3, r1
 8003ffa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	4313      	orrs	r3, r2
 8004002:	b299      	uxth	r1, r3
 8004004:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <CAN0_1_IRQHandler+0xec>)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 int i;
		 for(i = 0 ; i < 8 ; i ++){
			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
		 }

		 for(i = 0 ; i < 4 ; i ++){
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b03      	cmp	r3, #3
 8004016:	dde1      	ble.n	8003fdc <CAN0_1_IRQHandler+0x44>
			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
			 }

		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 8004018:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <CAN0_1_IRQHandler+0xec>)
 800401a:	88db      	ldrh	r3, [r3, #6]
 800401c:	b21b      	sxth	r3, r3
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004026:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004088 <CAN0_1_IRQHandler+0xf0>
 800402a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <CAN0_1_IRQHandler+0xf4>)
 8004030:	edc3 7a00 	vstr	s15, [r3]

		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6

		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 8004034:	4b15      	ldr	r3, [pc, #84]	; (800408c <CAN0_1_IRQHandler+0xf4>)
 8004036:	edd3 7a00 	vldr	s15, [r3]
 800403a:	eeb0 7a00 	vmov.f32	s14, #0
 800403e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004046:	dd03      	ble.n	8004050 <CAN0_1_IRQHandler+0xb8>
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <CAN0_1_IRQHandler+0xf4>)
 800404a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800404e:	601a      	str	r2, [r3, #0]
		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 8004050:	4b0e      	ldr	r3, [pc, #56]	; (800408c <CAN0_1_IRQHandler+0xf4>)
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	eeb8 7a00 	vmov.f32	s14, #128	; 0x80
 800405a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800405e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004062:	d503      	bpl.n	800406c <CAN0_1_IRQHandler+0xd4>
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <CAN0_1_IRQHandler+0xf4>)
 8004066:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800406a:	601a      	str	r2, [r3, #0]

		CAN_new_meassage = 1;
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <CAN0_1_IRQHandler+0xf8>)
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
		CAN_no_com_counter = 0;
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <CAN0_1_IRQHandler+0xfc>)
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
}
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	08007584 	.word	0x08007584
 8004084:	20002400 	.word	0x20002400
 8004088:	447a0000 	.word	0x447a0000
 800408c:	2000046c 	.word	0x2000046c
 8004090:	20000470 	.word	0x20000470
 8004094:	20000471 	.word	0x20000471

08004098 <CAN0_0_IRQHandler>:

//CAN RX reste distance
void CAN_RX_MO7_ISR(void){
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <CAN0_0_IRQHandler+0x50>)
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60bb      	str	r3, [r7, #8]
	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <CAN0_0_IRQHandler+0x50>)
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fca2 	bl	80039f4 <CAN_NODE_MO_Receive>

	uint8_t data_r[4];
	 int i;
	 for(i = 0 ; i < 4 ; i ++){
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e00c      	b.n	80040d0 <CAN0_0_IRQHandler+0x38>
		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	3310      	adds	r3, #16
 80040be:	7819      	ldrb	r1, [r3, #0]
 80040c0:	1d3a      	adds	r2, r7, #4
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	460a      	mov	r2, r1
 80040c8:	701a      	strb	r2, [r3, #0]
	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder

	uint8_t data_r[4];
	 int i;
	 for(i = 0 ; i < 4 ; i ++){
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3301      	adds	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	ddef      	ble.n	80040b6 <CAN0_0_IRQHandler+0x1e>
		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
	 }

	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d102      	bne.n	80040e2 <CAN0_0_IRQHandler+0x4a>
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <CAN0_0_IRQHandler+0x54>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
}
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	08007584 	.word	0x08007584
 80040ec:	20000474 	.word	0x20000474

080040f0 <CCU43_0_IRQHandler>:

void CAN_TX_ISR(void){
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
	int16_t Inverter_state[4] = {0};
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]

	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 80040fe:	2303      	movs	r3, #3
 8004100:	81bb      	strh	r3, [r7, #12]

	if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
 8004102:	4b4d      	ldr	r3, [pc, #308]	; (8004238 <CCU43_0_IRQHandler+0x148>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2bfa      	cmp	r3, #250	; 0xfa
 8004108:	d902      	bls.n	8004110 <CCU43_0_IRQHandler+0x20>
 800410a:	2300      	movs	r3, #0
 800410c:	81bb      	strh	r3, [r7, #12]
 800410e:	e001      	b.n	8004114 <CCU43_0_IRQHandler+0x24>
	else Inverter_state[1] = 1;
 8004110:	2301      	movs	r3, #1
 8004112:	81fb      	strh	r3, [r7, #14]

	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 8004114:	4b49      	ldr	r3, [pc, #292]	; (800423c <CCU43_0_IRQHandler+0x14c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f002 f98f 	bl	800643c <__aeabi_f2d>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	a340      	add	r3, pc, #256	; (adr r3, 8004228 <CCU43_0_IRQHandler+0x138>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f002 f9da 	bl	80064e4 <__aeabi_dmul>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	4b40      	ldr	r3, [pc, #256]	; (8004240 <CCU43_0_IRQHandler+0x150>)
 800413e:	f002 fafb 	bl	8006738 <__aeabi_ddiv>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	f002 fbdd 	bl	8006908 <__aeabi_d2f>
 800414e:	4602      	mov	r2, r0
 8004150:	4b3c      	ldr	r3, [pc, #240]	; (8004244 <CCU43_0_IRQHandler+0x154>)
 8004152:	601a      	str	r2, [r3, #0]
	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 8004154:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <CCU43_0_IRQHandler+0x154>)
 8004156:	edd3 7a00 	vldr	s15, [r3]
 800415a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004248 <CCU43_0_IRQHandler+0x158>
 800415e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004166:	edc7 7a01 	vstr	s15, [r7, #4]
 800416a:	88bb      	ldrh	r3, [r7, #4]
 800416c:	b29b      	uxth	r3, r3
 800416e:	823b      	strh	r3, [r7, #16]

	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 8004170:	4b36      	ldr	r3, [pc, #216]	; (800424c <CCU43_0_IRQHandler+0x15c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	ee07 3a90 	vmov	s15, r3
 8004178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800417c:	eeb0 7a00 	vmov.f32	s14, #0
 8004180:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8004184:	eeb2 7a06 	vmov.f32	s14, #38	; 0x26
 8004188:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800418c:	ee17 0a90 	vmov	r0, s15
 8004190:	f002 f954 	bl	800643c <__aeabi_f2d>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	a324      	add	r3, pc, #144	; (adr r3, 8004230 <CCU43_0_IRQHandler+0x140>)
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f002 f99f 	bl	80064e4 <__aeabi_dmul>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	f001 ffe7 	bl	8006180 <__adddf3>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4610      	mov	r0, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	a31b      	add	r3, pc, #108	; (adr r3, 8004228 <CCU43_0_IRQHandler+0x138>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f002 f990 	bl	80064e4 <__aeabi_dmul>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	f002 fb9c 	bl	8006908 <__aeabi_d2f>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <CCU43_0_IRQHandler+0x160>)
 80041d4:	601a      	str	r2, [r3, #0]
	if(MOTOR_NUM == 6) distance = -distance;
	Inverter_state[3] = distance * 1000; // to mm
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <CCU43_0_IRQHandler+0x160>)
 80041d8:	edd3 7a00 	vldr	s15, [r3]
 80041dc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004248 <CCU43_0_IRQHandler+0x158>
 80041e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80041ec:	88bb      	ldrh	r3, [r7, #4]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	827b      	strh	r3, [r7, #18]

	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 80041f2:	2305      	movs	r3, #5
 80041f4:	75fb      	strb	r3, [r7, #23]
	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	4a16      	ldr	r2, [pc, #88]	; (8004254 <CCU43_0_IRQHandler+0x164>)
 80041fa:	3302      	adds	r3, #2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	f107 030c 	add.w	r3, r7, #12
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	f7ff fc05 	bl	8003a18 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	4a10      	ldr	r2, [pc, #64]	; (8004254 <CCU43_0_IRQHandler+0x164>)
 8004212:	3302      	adds	r3, #2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fbd8 	bl	80039d0 <CAN_NODE_MO_Transmit>
}
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	147ae148 	.word	0x147ae148
 800422c:	3fb147ae 	.word	0x3fb147ae
 8004230:	53c8d4f1 	.word	0x53c8d4f1
 8004234:	400921fb 	.word	0x400921fb
 8004238:	20000471 	.word	0x20000471
 800423c:	20000444 	.word	0x20000444
 8004240:	40260000 	.word	0x40260000
 8004244:	20000478 	.word	0x20000478
 8004248:	447a0000 	.word	0x447a0000
 800424c:	20000474 	.word	0x20000474
 8004250:	2000047c 	.word	0x2000047c
 8004254:	08007584 	.word	0x08007584

08004258 <CCU43_3_IRQHandler>:

// 100us Timer for speed measurement
void TimeCounterISR(void){
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
	time_since_A ++;
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <CCU43_3_IRQHandler+0x2c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	4a08      	ldr	r2, [pc, #32]	; (8004284 <CCU43_3_IRQHandler+0x2c>)
 8004264:	6013      	str	r3, [r2, #0]
	time_since_B ++;
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <CCU43_3_IRQHandler+0x30>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3301      	adds	r3, #1
 800426c:	4a06      	ldr	r2, [pc, #24]	; (8004288 <CCU43_3_IRQHandler+0x30>)
 800426e:	6013      	str	r3, [r2, #0]
	time_since_C ++;
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <CCU43_3_IRQHandler+0x34>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	4a05      	ldr	r2, [pc, #20]	; (800428c <CCU43_3_IRQHandler+0x34>)
 8004278:	6013      	str	r3, [r2, #0]
}
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000434 	.word	0x20000434
 8004288:	20000438 	.word	0x20000438
 800428c:	2000043c 	.word	0x2000043c

08004290 <ERU1_2_IRQHandler>:

// Hall Sensors
void HallSensor_A_ISR(void){
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
	HallSensor();
 8004294:	f000 f8e2 	bl	800445c <HallSensor>
	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
 8004298:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <ERU1_2_IRQHandler+0x50>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a11      	ldr	r2, [pc, #68]	; (80042e4 <ERU1_2_IRQHandler+0x54>)
 800429e:	6013      	str	r3, [r2, #0]
	time_since_A = 0;						// measurement of speed -> time between change of Hall A
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <ERU1_2_IRQHandler+0x50>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
	last_Hall_trig = 'A';
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <ERU1_2_IRQHandler+0x58>)
 80042a8:	2241      	movs	r2, #65	; 0x41
 80042aa:	701a      	strb	r2, [r3, #0]

	if(direction == 1 ) distance_180deg_ele_count ++;
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <ERU1_2_IRQHandler+0x5c>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d105      	bne.n	80042c4 <ERU1_2_IRQHandler+0x34>
 80042b8:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <ERU1_2_IRQHandler+0x60>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	4a0c      	ldr	r2, [pc, #48]	; (80042f0 <ERU1_2_IRQHandler+0x60>)
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e00b      	b.n	80042dc <ERU1_2_IRQHandler+0x4c>
	else if(direction == -1 ) distance_180deg_ele_count --;
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <ERU1_2_IRQHandler+0x5c>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	b25b      	sxtb	r3, r3
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d104      	bne.n	80042dc <ERU1_2_IRQHandler+0x4c>
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <ERU1_2_IRQHandler+0x60>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	4a05      	ldr	r2, [pc, #20]	; (80042f0 <ERU1_2_IRQHandler+0x60>)
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000434 	.word	0x20000434
 80042e4:	20000318 	.word	0x20000318
 80042e8:	200023d8 	.word	0x200023d8
 80042ec:	2000042f 	.word	0x2000042f
 80042f0:	20000474 	.word	0x20000474

080042f4 <ERU1_0_IRQHandler>:
void HallSensor_B_ISR(void){
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
	HallSensor();
 80042f8:	f000 f8b0 	bl	800445c <HallSensor>
	time_180deg = time_since_B;
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <ERU1_0_IRQHandler+0x20>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a05      	ldr	r2, [pc, #20]	; (8004318 <ERU1_0_IRQHandler+0x24>)
 8004302:	6013      	str	r3, [r2, #0]
	time_since_B = 0;
 8004304:	4b03      	ldr	r3, [pc, #12]	; (8004314 <ERU1_0_IRQHandler+0x20>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
	last_Hall_trig = 'B';
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <ERU1_0_IRQHandler+0x28>)
 800430c:	2242      	movs	r2, #66	; 0x42
 800430e:	701a      	strb	r2, [r3, #0]
}
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000438 	.word	0x20000438
 8004318:	20000318 	.word	0x20000318
 800431c:	200023d8 	.word	0x200023d8

08004320 <ERU1_3_IRQHandler>:
void HallSensor_C_ISR(void){
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
	HallSensor();
 8004324:	f000 f89a 	bl	800445c <HallSensor>
	time_180deg = time_since_C;
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <ERU1_3_IRQHandler+0x20>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a05      	ldr	r2, [pc, #20]	; (8004344 <ERU1_3_IRQHandler+0x24>)
 800432e:	6013      	str	r3, [r2, #0]
	time_since_C = 0;
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <ERU1_3_IRQHandler+0x20>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
	last_Hall_trig = 'C';
 8004336:	4b04      	ldr	r3, [pc, #16]	; (8004348 <ERU1_3_IRQHandler+0x28>)
 8004338:	2243      	movs	r2, #67	; 0x43
 800433a:	701a      	strb	r2, [r3, #0]
}
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	2000043c 	.word	0x2000043c
 8004344:	20000318 	.word	0x20000318
 8004348:	200023d8 	.word	0x200023d8

0800434c <CCU43_1_IRQHandler>:
}
*/

//ISR based on Timer_1 --> 100us time base
void ISR_INT1(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
}
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <CCU80_3_IRQHandler>:

// ISR for Updating the SVM PWM -> 50us = 20kHz
void PeriodMatchInterruptHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 800435e:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <CCU80_3_IRQHandler+0x58>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	3301      	adds	r3, #1
 8004366:	b2da      	uxtb	r2, r3
 8004368:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <CCU80_3_IRQHandler+0x58>)
 800436a:	701a      	strb	r2, [r3, #0]
	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 800436c:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <CCU80_3_IRQHandler+0x58>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d118      	bne.n	80043a8 <CCU80_3_IRQHandler+0x50>
		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_DEGREE); // SK, 11.01.2019: outcommented to enable manual testing in ISR_INT1
 8004376:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <CCU80_3_IRQHandler+0x5c>)
 8004378:	edd3 7a00 	vldr	s15, [r3]
 800437c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004380:	edc7 7a01 	vstr	s15, [r7, #4]
 8004384:	88bb      	ldrh	r3, [r7, #4]
 8004386:	b29a      	uxth	r2, r3
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <CCU80_3_IRQHandler+0x60>)
 800438a:	edd3 7a00 	vldr	s15, [r3]
 800438e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004392:	ee17 1a90 	vmov	r1, s15
 8004396:	f24b 630b 	movw	r3, #46603	; 0xb60b
 800439a:	fb03 f301 	mul.w	r3, r3, r1
 800439e:	4807      	ldr	r0, [pc, #28]	; (80043bc <CCU80_3_IRQHandler+0x64>)
 80043a0:	4611      	mov	r1, r2
 80043a2:	461a      	mov	r2, r3
 80043a4:	f002 fb2c 	bl	8006a00 <__PWM_SVM_SVMUpdate_veneer>
	}
}
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000480 	.word	0x20000480
 80043b4:	20002410 	.word	0x20002410
 80043b8:	200023f8 	.word	0x200023f8
 80043bc:	200000dc 	.word	0x200000dc

080043c0 <Hall_init>:
//########################
// FUNCTIONS
//########################

// Hall init -> readout of actual Hall pattern to determine the motor position
void Hall_init(void){
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0

	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(&Hall_B_ISR)) << 1) | PIN_INTERRUPT_GetPinValue(&Hall_C_ISR));
 80043c6:	4821      	ldr	r0, [pc, #132]	; (800444c <Hall_init+0x8c>)
 80043c8:	f7ff fd9e 	bl	8003f08 <PIN_INTERRUPT_GetPinValue>
 80043cc:	4603      	mov	r3, r0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	b2dc      	uxtb	r4, r3
 80043d4:	481e      	ldr	r0, [pc, #120]	; (8004450 <Hall_init+0x90>)
 80043d6:	f7ff fd97 	bl	8003f08 <PIN_INTERRUPT_GetPinValue>
 80043da:	4603      	mov	r3, r0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	4323      	orrs	r3, r4
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	b2dc      	uxtb	r4, r3
 80043e6:	481b      	ldr	r0, [pc, #108]	; (8004454 <Hall_init+0x94>)
 80043e8:	f7ff fd8e 	bl	8003f08 <PIN_INTERRUPT_GetPinValue>
 80043ec:	4603      	mov	r3, r0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	4323      	orrs	r3, r4
 80043f2:	71fb      	strb	r3, [r7, #7]

	 if(Hall_Initial == 0b100){sector = 0;}
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d103      	bne.n	8004402 <Hall_init+0x42>
 80043fa:	4b17      	ldr	r3, [pc, #92]	; (8004458 <Hall_init+0x98>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e021      	b.n	8004446 <Hall_init+0x86>
	 else if(Hall_Initial == 0b110){sector = 1;}
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	2b06      	cmp	r3, #6
 8004406:	d103      	bne.n	8004410 <Hall_init+0x50>
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <Hall_init+0x98>)
 800440a:	2201      	movs	r2, #1
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e01a      	b.n	8004446 <Hall_init+0x86>
	 else if(Hall_Initial == 0b010){sector = 2;}
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d103      	bne.n	800441e <Hall_init+0x5e>
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <Hall_init+0x98>)
 8004418:	2202      	movs	r2, #2
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e013      	b.n	8004446 <Hall_init+0x86>
	 else if(Hall_Initial == 0b011){sector = 3;}
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d103      	bne.n	800442c <Hall_init+0x6c>
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <Hall_init+0x98>)
 8004426:	2203      	movs	r2, #3
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	e00c      	b.n	8004446 <Hall_init+0x86>
	 else if(Hall_Initial == 0b001){sector = 4;}
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d103      	bne.n	800443a <Hall_init+0x7a>
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <Hall_init+0x98>)
 8004434:	2204      	movs	r2, #4
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	e005      	b.n	8004446 <Hall_init+0x86>
	 else if(Hall_Initial == 0b101){sector = 5;}
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d102      	bne.n	8004446 <Hall_init+0x86>
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <Hall_init+0x98>)
 8004442:	2205      	movs	r2, #5
 8004444:	701a      	strb	r2, [r3, #0]
}
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bd90      	pop	{r4, r7, pc}
 800444c:	08007440 	.word	0x08007440
 8004450:	08007464 	.word	0x08007464
 8004454:	08007488 	.word	0x08007488
 8004458:	2000042e 	.word	0x2000042e

0800445c <HallSensor>:

// Function to determine direction and current Sector
void HallSensor(void){
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
	enc_val = enc_val << 3; //shift old values and make space for new ones
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HallSensor+0xc0>)
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	b29a      	uxth	r2, r3
 800446c:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HallSensor+0xc0>)
 800446e:	801a      	strh	r2, [r3, #0]
	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(&Hall_B_ISR)) << 1) | PIN_INTERRUPT_GetPinValue(&Hall_C_ISR));
 8004470:	482b      	ldr	r0, [pc, #172]	; (8004520 <HallSensor+0xc4>)
 8004472:	f7ff fd49 	bl	8003f08 <PIN_INTERRUPT_GetPinValue>
 8004476:	4603      	mov	r3, r0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	b2dc      	uxtb	r4, r3
 800447e:	4829      	ldr	r0, [pc, #164]	; (8004524 <HallSensor+0xc8>)
 8004480:	f7ff fd42 	bl	8003f08 <PIN_INTERRUPT_GetPinValue>
 8004484:	4603      	mov	r3, r0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	4323      	orrs	r3, r4
 800448a:	b2db      	uxtb	r3, r3
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	b2dc      	uxtb	r4, r3
 8004490:	4825      	ldr	r0, [pc, #148]	; (8004528 <HallSensor+0xcc>)
 8004492:	f7ff fd39 	bl	8003f08 <PIN_INTERRUPT_GetPinValue>
 8004496:	4603      	mov	r3, r0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	4323      	orrs	r3, r4
 800449c:	71fb      	strb	r3, [r7, #7]
	enc_val = enc_val | Hall_status; //read Sensor values and store them
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	4b1e      	ldr	r3, [pc, #120]	; (800451c <HallSensor+0xc0>)
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4313      	orrs	r3, r2
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HallSensor+0xc0>)
 80044ae:	801a      	strh	r2, [r3, #0]
	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual and prev measurement
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HallSensor+0xc0>)
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ba:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HallSensor+0xd0>)
 80044bc:	5cd2      	ldrb	r2, [r2, r3]
 80044be:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <HallSensor+0xd4>)
 80044c0:	701a      	strb	r2, [r3, #0]

	if(Hall_status == 0b100){sector = 0;}
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d103      	bne.n	80044d0 <HallSensor+0x74>
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HallSensor+0xd8>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e021      	b.n	8004514 <HallSensor+0xb8>
		 else if(Hall_status == 0b110){sector = 1;}
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d103      	bne.n	80044de <HallSensor+0x82>
 80044d6:	4b17      	ldr	r3, [pc, #92]	; (8004534 <HallSensor+0xd8>)
 80044d8:	2201      	movs	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e01a      	b.n	8004514 <HallSensor+0xb8>
		 else if(Hall_status == 0b010){sector = 2;}
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d103      	bne.n	80044ec <HallSensor+0x90>
 80044e4:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HallSensor+0xd8>)
 80044e6:	2202      	movs	r2, #2
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e013      	b.n	8004514 <HallSensor+0xb8>
		 else if(Hall_status == 0b011){sector = 3;}
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d103      	bne.n	80044fa <HallSensor+0x9e>
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <HallSensor+0xd8>)
 80044f4:	2203      	movs	r2, #3
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	e00c      	b.n	8004514 <HallSensor+0xb8>
		 else if(Hall_status == 0b001){sector = 4;}
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d103      	bne.n	8004508 <HallSensor+0xac>
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HallSensor+0xd8>)
 8004502:	2204      	movs	r2, #4
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e005      	b.n	8004514 <HallSensor+0xb8>
		 else if(Hall_status == 0b101){sector = 5;}
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d102      	bne.n	8004514 <HallSensor+0xb8>
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HallSensor+0xd8>)
 8004510:	2205      	movs	r2, #5
 8004512:	701a      	strb	r2, [r3, #0]

}
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	bd90      	pop	{r4, r7, pc}
 800451a:	bf00      	nop
 800451c:	20000430 	.word	0x20000430
 8004520:	08007440 	.word	0x08007440
 8004524:	08007464 	.word	0x08007464
 8004528:	08007488 	.word	0x08007488
 800452c:	200002d8 	.word	0x200002d8
 8004530:	2000042f 	.word	0x2000042f
 8004534:	2000042e 	.word	0x2000042e

08004538 <Calculation>:
// Routine for calculation (sector, clark-Park trans.,...)

//5kHz loop since every 4th step of 50us --> 200us --> 5kHz
void Calculation(void){
 8004538:	b5b0      	push	{r4, r5, r7, lr}
 800453a:	ed2d 8b02 	vpush	{d8}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 8004542:	48af      	ldr	r0, [pc, #700]	; (8004800 <Calculation+0x2c8>)
 8004544:	f7ff fcc0 	bl	8003ec8 <DIGITAL_IO_SetOutputHigh>
		// Actual time since last angle update via Hall Sensor
		uint32_t t;
		if(last_Hall_trig == 'A') t = time_since_A;
 8004548:	4bae      	ldr	r3, [pc, #696]	; (8004804 <Calculation+0x2cc>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b41      	cmp	r3, #65	; 0x41
 8004550:	d103      	bne.n	800455a <Calculation+0x22>
 8004552:	4bad      	ldr	r3, [pc, #692]	; (8004808 <Calculation+0x2d0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e010      	b.n	800457c <Calculation+0x44>
		else if(last_Hall_trig == 'B') t = time_since_B;
 800455a:	4baa      	ldr	r3, [pc, #680]	; (8004804 <Calculation+0x2cc>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b42      	cmp	r3, #66	; 0x42
 8004562:	d103      	bne.n	800456c <Calculation+0x34>
 8004564:	4ba9      	ldr	r3, [pc, #676]	; (800480c <Calculation+0x2d4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	e007      	b.n	800457c <Calculation+0x44>
		else if(last_Hall_trig == 'C') t = time_since_C;
 800456c:	4ba5      	ldr	r3, [pc, #660]	; (8004804 <Calculation+0x2cc>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b43      	cmp	r3, #67	; 0x43
 8004574:	d102      	bne.n	800457c <Calculation+0x44>
 8004576:	4ba6      	ldr	r3, [pc, #664]	; (8004810 <Calculation+0x2d8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]
		time_180deg_cal = time_180deg;
 800457c:	4ba5      	ldr	r3, [pc, #660]	; (8004814 <Calculation+0x2dc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4aa5      	ldr	r2, [pc, #660]	; (8004818 <Calculation+0x2e0>)
 8004582:	6013      	str	r3, [r2, #0]
		// not fixing sector for calc because if chainges better to do so

		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 8004584:	4ba4      	ldr	r3, [pc, #656]	; (8004818 <Calculation+0x2e0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800458c:	4293      	cmp	r3, r2
 800458e:	d904      	bls.n	800459a <Calculation+0x62>
 8004590:	4ba1      	ldr	r3, [pc, #644]	; (8004818 <Calculation+0x2e0>)
 8004592:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	e006      	b.n	80045a8 <Calculation+0x70>
		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 800459a:	4b9f      	ldr	r3, [pc, #636]	; (8004818 <Calculation+0x2e0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d802      	bhi.n	80045a8 <Calculation+0x70>
 80045a2:	4b9d      	ldr	r3, [pc, #628]	; (8004818 <Calculation+0x2e0>)
 80045a4:	2202      	movs	r2, #2
 80045a6:	601a      	str	r2, [r3, #0]

		if(t < TIME_OMEGA_0){
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f241 3287 	movw	r2, #4999	; 0x1387
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d835      	bhi.n	800461e <Calculation+0xe6>
			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 80045b2:	4b99      	ldr	r3, [pc, #612]	; (8004818 <Calculation+0x2e0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	ee17 0a90 	vmov	r0, s15
 80045c2:	f001 ff3b 	bl	800643c <__aeabi_f2d>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	f04f 0000 	mov.w	r0, #0
 80045ce:	4993      	ldr	r1, [pc, #588]	; (800481c <Calculation+0x2e4>)
 80045d0:	f002 f8b2 	bl	8006738 <__aeabi_ddiv>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4614      	mov	r4, r2
 80045da:	461d      	mov	r5, r3
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f001 ff0b 	bl	80063f8 <__aeabi_ui2d>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f001 ff7b 	bl	80064e4 <__aeabi_dmul>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	f002 f987 	bl	8006908 <__aeabi_d2f>
 80045fa:	4602      	mov	r2, r0
 80045fc:	4b88      	ldr	r3, [pc, #544]	; (8004820 <Calculation+0x2e8>)
 80045fe:	601a      	str	r2, [r3, #0]
			if(angle_in_sector > 60) angle_in_sector = 60;
 8004600:	4b87      	ldr	r3, [pc, #540]	; (8004820 <Calculation+0x2e8>)
 8004602:	edd3 7a00 	vldr	s15, [r3]
 8004606:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8004824 <Calculation+0x2ec>
 800460a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	dc00      	bgt.n	8004616 <Calculation+0xde>
 8004614:	e006      	b.n	8004624 <Calculation+0xec>
 8004616:	4b82      	ldr	r3, [pc, #520]	; (8004820 <Calculation+0x2e8>)
 8004618:	4a83      	ldr	r2, [pc, #524]	; (8004828 <Calculation+0x2f0>)
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e002      	b.n	8004624 <Calculation+0xec>
		}
		else{
			angle_in_sector = 30; // standig still
 800461e:	4b80      	ldr	r3, [pc, #512]	; (8004820 <Calculation+0x2e8>)
 8004620:	4a82      	ldr	r2, [pc, #520]	; (800482c <Calculation+0x2f4>)
 8004622:	601a      	str	r2, [r3, #0]
		}

		// CW
		if(direction==1)
 8004624:	4b82      	ldr	r3, [pc, #520]	; (8004830 <Calculation+0x2f8>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	b25b      	sxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d154      	bne.n	80046da <Calculation+0x1a2>
		{
			angle_phi = (sector*60.0)+angle_in_sector;
 8004630:	4b80      	ldr	r3, [pc, #512]	; (8004834 <Calculation+0x2fc>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	b25b      	sxtb	r3, r3
 8004638:	4618      	mov	r0, r3
 800463a:	f001 feed 	bl	8006418 <__aeabi_i2d>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	4b7b      	ldr	r3, [pc, #492]	; (8004838 <Calculation+0x300>)
 800464c:	f001 ff4a 	bl	80064e4 <__aeabi_dmul>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4614      	mov	r4, r2
 8004656:	461d      	mov	r5, r3
 8004658:	4b71      	ldr	r3, [pc, #452]	; (8004820 <Calculation+0x2e8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f001 feed 	bl	800643c <__aeabi_f2d>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4620      	mov	r0, r4
 8004668:	4629      	mov	r1, r5
 800466a:	f001 fd89 	bl	8006180 <__adddf3>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4610      	mov	r0, r2
 8004674:	4619      	mov	r1, r3
 8004676:	f002 f947 	bl	8006908 <__aeabi_d2f>
 800467a:	4602      	mov	r2, r0
 800467c:	4b6f      	ldr	r3, [pc, #444]	; (800483c <Calculation+0x304>)
 800467e:	601a      	str	r2, [r3, #0]
			angle_phi=angle_phi+offset_pos;
 8004680:	4b6e      	ldr	r3, [pc, #440]	; (800483c <Calculation+0x304>)
 8004682:	ed93 7a00 	vldr	s14, [r3]
 8004686:	4b6e      	ldr	r3, [pc, #440]	; (8004840 <Calculation+0x308>)
 8004688:	edd3 7a00 	vldr	s15, [r3]
 800468c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004690:	4b6a      	ldr	r3, [pc, #424]	; (800483c <Calculation+0x304>)
 8004692:	edc3 7a00 	vstr	s15, [r3]
			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 8004696:	4b69      	ldr	r3, [pc, #420]	; (800483c <Calculation+0x304>)
 8004698:	edd3 7a00 	vldr	s15, [r3]
 800469c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004844 <Calculation+0x30c>
 80046a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a8:	dd09      	ble.n	80046be <Calculation+0x186>
 80046aa:	4b64      	ldr	r3, [pc, #400]	; (800483c <Calculation+0x304>)
 80046ac:	edd3 7a00 	vldr	s15, [r3]
 80046b0:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8004844 <Calculation+0x30c>
 80046b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046b8:	4b60      	ldr	r3, [pc, #384]	; (800483c <Calculation+0x304>)
 80046ba:	edc3 7a00 	vstr	s15, [r3]

			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
 80046be:	4b56      	ldr	r3, [pc, #344]	; (8004818 <Calculation+0x2e0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004848 <Calculation+0x310>
 80046ce:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80046d2:	4b5e      	ldr	r3, [pc, #376]	; (800484c <Calculation+0x314>)
 80046d4:	edc3 7a00 	vstr	s15, [r3]
 80046d8:	e06f      	b.n	80047ba <Calculation+0x282>
		}
		// CCW
		else{
			angle_phi = (sector*60.0)-angle_in_sector;
 80046da:	4b56      	ldr	r3, [pc, #344]	; (8004834 <Calculation+0x2fc>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	b25b      	sxtb	r3, r3
 80046e2:	4618      	mov	r0, r3
 80046e4:	f001 fe98 	bl	8006418 <__aeabi_i2d>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	4b50      	ldr	r3, [pc, #320]	; (8004838 <Calculation+0x300>)
 80046f6:	f001 fef5 	bl	80064e4 <__aeabi_dmul>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4614      	mov	r4, r2
 8004700:	461d      	mov	r5, r3
 8004702:	4b47      	ldr	r3, [pc, #284]	; (8004820 <Calculation+0x2e8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f001 fe98 	bl	800643c <__aeabi_f2d>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4620      	mov	r0, r4
 8004712:	4629      	mov	r1, r5
 8004714:	f001 fd32 	bl	800617c <__aeabi_dsub>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	f002 f8f2 	bl	8006908 <__aeabi_d2f>
 8004724:	4602      	mov	r2, r0
 8004726:	4b45      	ldr	r3, [pc, #276]	; (800483c <Calculation+0x304>)
 8004728:	601a      	str	r2, [r3, #0]
			angle_phi = angle_phi+60.0;
 800472a:	4b44      	ldr	r3, [pc, #272]	; (800483c <Calculation+0x304>)
 800472c:	edd3 7a00 	vldr	s15, [r3]
 8004730:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004824 <Calculation+0x2ec>
 8004734:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004738:	4b40      	ldr	r3, [pc, #256]	; (800483c <Calculation+0x304>)
 800473a:	edc3 7a00 	vstr	s15, [r3]
			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 800473e:	4b3f      	ldr	r3, [pc, #252]	; (800483c <Calculation+0x304>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	d509      	bpl.n	8004762 <Calculation+0x22a>
 800474e:	4b3b      	ldr	r3, [pc, #236]	; (800483c <Calculation+0x304>)
 8004750:	edd3 7a00 	vldr	s15, [r3]
 8004754:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004844 <Calculation+0x30c>
 8004758:	ee77 7a87 	vadd.f32	s15, s15, s14
 800475c:	4b37      	ldr	r3, [pc, #220]	; (800483c <Calculation+0x304>)
 800475e:	edc3 7a00 	vstr	s15, [r3]
			angle_phi=angle_phi+offset_neg;
 8004762:	4b36      	ldr	r3, [pc, #216]	; (800483c <Calculation+0x304>)
 8004764:	ed93 7a00 	vldr	s14, [r3]
 8004768:	4b39      	ldr	r3, [pc, #228]	; (8004850 <Calculation+0x318>)
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004772:	4b32      	ldr	r3, [pc, #200]	; (800483c <Calculation+0x304>)
 8004774:	edc3 7a00 	vstr	s15, [r3]
			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 8004778:	4b30      	ldr	r3, [pc, #192]	; (800483c <Calculation+0x304>)
 800477a:	edd3 7a00 	vldr	s15, [r3]
 800477e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004844 <Calculation+0x30c>
 8004782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478a:	dd09      	ble.n	80047a0 <Calculation+0x268>
 800478c:	4b2b      	ldr	r3, [pc, #172]	; (800483c <Calculation+0x304>)
 800478e:	edd3 7a00 	vldr	s15, [r3]
 8004792:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004844 <Calculation+0x30c>
 8004796:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800479a:	4b28      	ldr	r3, [pc, #160]	; (800483c <Calculation+0x304>)
 800479c:	edc3 7a00 	vstr	s15, [r3]

			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
 80047a0:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <Calculation+0x2e0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ac:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004854 <Calculation+0x31c>
 80047b0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80047b4:	4b25      	ldr	r3, [pc, #148]	; (800484c <Calculation+0x314>)
 80047b6:	edc3 7a00 	vstr	s15, [r3]
		}

		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large peaks due to small time_180deg --> caused problems
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <Calculation+0x314>)
 80047bc:	edd3 7a00 	vldr	s15, [r3]
 80047c0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004858 <Calculation+0x320>
 80047c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	d50d      	bpl.n	80047ea <Calculation+0x2b2>
 80047ce:	4b1f      	ldr	r3, [pc, #124]	; (800484c <Calculation+0x314>)
 80047d0:	edd3 7a00 	vldr	s15, [r3]
 80047d4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800485c <Calculation+0x324>
 80047d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e0:	dd03      	ble.n	80047ea <Calculation+0x2b2>
		{
			omega_mech_rps = (float)omega_mech_rps_temp;
 80047e2:	4b1a      	ldr	r3, [pc, #104]	; (800484c <Calculation+0x314>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1e      	ldr	r2, [pc, #120]	; (8004860 <Calculation+0x328>)
 80047e8:	6013      	str	r3, [r2, #0]
		}

		if(t > TIME_OMEGA_0){omega_ele_rads = 0;} // set omega  to 0 if no more hall detected
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d939      	bls.n	8004868 <Calculation+0x330>
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <Calculation+0x32c>)
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e058      	b.n	80048b0 <Calculation+0x378>
 80047fe:	bf00      	nop
 8004800:	080074dc 	.word	0x080074dc
 8004804:	200023d8 	.word	0x200023d8
 8004808:	20000434 	.word	0x20000434
 800480c:	20000438 	.word	0x20000438
 8004810:	2000043c 	.word	0x2000043c
 8004814:	20000318 	.word	0x20000318
 8004818:	2000031c 	.word	0x2000031c
 800481c:	40668000 	.word	0x40668000
 8004820:	20000320 	.word	0x20000320
 8004824:	42700000 	.word	0x42700000
 8004828:	42700000 	.word	0x42700000
 800482c:	41f00000 	.word	0x41f00000
 8004830:	2000042f 	.word	0x2000042f
 8004834:	2000042e 	.word	0x2000042e
 8004838:	404e0000 	.word	0x404e0000
 800483c:	20000440 	.word	0x20000440
 8004840:	20000328 	.word	0x20000328
 8004844:	43b40000 	.word	0x43b40000
 8004848:	43e10000 	.word	0x43e10000
 800484c:	2000044c 	.word	0x2000044c
 8004850:	2000032c 	.word	0x2000032c
 8004854:	c3e10000 	.word	0xc3e10000
 8004858:	43480000 	.word	0x43480000
 800485c:	c3480000 	.word	0xc3480000
 8004860:	20000448 	.word	0x20000448
 8004864:	20000444 	.word	0x20000444
		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s
 8004868:	4ba3      	ldr	r3, [pc, #652]	; (8004af8 <Calculation+0x5c0>)
 800486a:	edd3 7a00 	vldr	s15, [r3]
 800486e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004872:	ee17 0a90 	vmov	r0, s15
 8004876:	f001 fde1 	bl	800643c <__aeabi_f2d>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4610      	mov	r0, r2
 8004880:	4619      	mov	r1, r3
 8004882:	a393      	add	r3, pc, #588	; (adr r3, 8004ad0 <Calculation+0x598>)
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f001 fe2c 	bl	80064e4 <__aeabi_dmul>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	4b98      	ldr	r3, [pc, #608]	; (8004afc <Calculation+0x5c4>)
 800489a:	f001 fe23 	bl	80064e4 <__aeabi_dmul>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	f002 f82f 	bl	8006908 <__aeabi_d2f>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b94      	ldr	r3, [pc, #592]	; (8004b00 <Calculation+0x5c8>)
 80048ae:	601a      	str	r2, [r3, #0]

		omega_ele_degs = omega_ele_rads / Pi180;
 80048b0:	4b93      	ldr	r3, [pc, #588]	; (8004b00 <Calculation+0x5c8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 fdc1 	bl	800643c <__aeabi_f2d>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4610      	mov	r0, r2
 80048c0:	4619      	mov	r1, r3
 80048c2:	a385      	add	r3, pc, #532	; (adr r3, 8004ad8 <Calculation+0x5a0>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f001 ff36 	bl	8006738 <__aeabi_ddiv>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4610      	mov	r0, r2
 80048d2:	4619      	mov	r1, r3
 80048d4:	f002 f818 	bl	8006908 <__aeabi_d2f>
 80048d8:	4602      	mov	r2, r0
 80048da:	4b8a      	ldr	r3, [pc, #552]	; (8004b04 <Calculation+0x5cc>)
 80048dc:	601a      	str	r2, [r3, #0]

		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% duty

		// Current read out over SPI
		Current_U = readCurrent(ChipSelect_U);
 80048de:	2006      	movs	r0, #6
 80048e0:	f000 fb36 	bl	8004f50 <readCurrent>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b88      	ldr	r3, [pc, #544]	; (8004b08 <Calculation+0x5d0>)
 80048e8:	601a      	str	r2, [r3, #0]
		Current_V = readCurrent(ChipSelect_V);
 80048ea:	2005      	movs	r0, #5
 80048ec:	f000 fb30 	bl	8004f50 <readCurrent>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b86      	ldr	r3, [pc, #536]	; (8004b0c <Calculation+0x5d4>)
 80048f4:	601a      	str	r2, [r3, #0]
		Current_W = readCurrent(ChipSelect_W);
 80048f6:	2003      	movs	r0, #3
 80048f8:	f000 fb2a 	bl	8004f50 <readCurrent>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b84      	ldr	r3, [pc, #528]	; (8004b10 <Calculation+0x5d8>)
 8004900:	601a      	str	r2, [r3, #0]

		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of the time 0.09ms

		// conversion from rad/s to degree
		float angle_phi_rad = angle_phi*Pi180;
 8004902:	4b84      	ldr	r3, [pc, #528]	; (8004b14 <Calculation+0x5dc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f001 fd98 	bl	800643c <__aeabi_f2d>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4610      	mov	r0, r2
 8004912:	4619      	mov	r1, r3
 8004914:	a370      	add	r3, pc, #448	; (adr r3, 8004ad8 <Calculation+0x5a0>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f001 fde3 	bl	80064e4 <__aeabi_dmul>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	f001 ffef 	bl	8006908 <__aeabi_d2f>
 800492a:	4603      	mov	r3, r0
 800492c:	60bb      	str	r3, [r7, #8]

		// to decrease multiple calculations and computational effort
		float cos_phi = cosf(angle_phi_rad);
 800492e:	68b8      	ldr	r0, [r7, #8]
 8004930:	f000 fca6 	bl	8005280 <cosf>
 8004934:	6078      	str	r0, [r7, #4]
		float sin_phi = sinf(angle_phi_rad);
 8004936:	68b8      	ldr	r0, [r7, #8]
 8004938:	f000 fcec 	bl	8005314 <sinf>
 800493c:	6038      	str	r0, [r7, #0]

		// Clark-Park transformation (from U,V,W to dq)
		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-FourPiThird)*Current_W);
 800493e:	4b72      	ldr	r3, [pc, #456]	; (8004b08 <Calculation+0x5d0>)
 8004940:	ed93 7a00 	vldr	s14, [r3]
 8004944:	edd7 7a01 	vldr	s15, [r7, #4]
 8004948:	ee27 8a27 	vmul.f32	s16, s14, s15
 800494c:	68b8      	ldr	r0, [r7, #8]
 800494e:	f001 fd75 	bl	800643c <__aeabi_f2d>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	a361      	add	r3, pc, #388	; (adr r3, 8004ae0 <Calculation+0x5a8>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f001 fc0c 	bl	800617c <__aeabi_dsub>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	f001 ffcc 	bl	8006908 <__aeabi_d2f>
 8004970:	4603      	mov	r3, r0
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fc84 	bl	8005280 <cosf>
 8004978:	ee07 0a10 	vmov	s14, r0
 800497c:	4b63      	ldr	r3, [pc, #396]	; (8004b0c <Calculation+0x5d4>)
 800497e:	edd3 7a00 	vldr	s15, [r3]
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	ee38 8a27 	vadd.f32	s16, s16, s15
 800498a:	68b8      	ldr	r0, [r7, #8]
 800498c:	f001 fd56 	bl	800643c <__aeabi_f2d>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	a353      	add	r3, pc, #332	; (adr r3, 8004ae8 <Calculation+0x5b0>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f001 fbed 	bl	800617c <__aeabi_dsub>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	f001 ffad 	bl	8006908 <__aeabi_d2f>
 80049ae:	4603      	mov	r3, r0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fc65 	bl	8005280 <cosf>
 80049b6:	ee07 0a10 	vmov	s14, r0
 80049ba:	4b55      	ldr	r3, [pc, #340]	; (8004b10 <Calculation+0x5d8>)
 80049bc:	edd3 7a00 	vldr	s15, [r3]
 80049c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80049c8:	ee17 0a90 	vmov	r0, s15
 80049cc:	f001 fd36 	bl	800643c <__aeabi_f2d>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4610      	mov	r0, r2
 80049d6:	4619      	mov	r1, r3
 80049d8:	a345      	add	r3, pc, #276	; (adr r3, 8004af0 <Calculation+0x5b8>)
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	f001 fd81 	bl	80064e4 <__aeabi_dmul>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	f001 ff8d 	bl	8006908 <__aeabi_d2f>
 80049ee:	4602      	mov	r2, r0
 80049f0:	4b49      	ldr	r3, [pc, #292]	; (8004b18 <Calculation+0x5e0>)
 80049f2:	601a      	str	r2, [r3, #0]
		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad-FourPiThird)*Current_W);
 80049f4:	edd7 7a00 	vldr	s15, [r7]
 80049f8:	eeb1 7a67 	vneg.f32	s14, s15
 80049fc:	4b42      	ldr	r3, [pc, #264]	; (8004b08 <Calculation+0x5d0>)
 80049fe:	edd3 7a00 	vldr	s15, [r3]
 8004a02:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004a06:	68b8      	ldr	r0, [r7, #8]
 8004a08:	f001 fd18 	bl	800643c <__aeabi_f2d>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	a332      	add	r3, pc, #200	; (adr r3, 8004ae0 <Calculation+0x5a8>)
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f001 fbaf 	bl	800617c <__aeabi_dsub>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	f001 ff6f 	bl	8006908 <__aeabi_d2f>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fc71 	bl	8005314 <sinf>
 8004a32:	ee07 0a10 	vmov	s14, r0
 8004a36:	4b35      	ldr	r3, [pc, #212]	; (8004b0c <Calculation+0x5d4>)
 8004a38:	edd3 7a00 	vldr	s15, [r3]
 8004a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a40:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004a44:	68b8      	ldr	r0, [r7, #8]
 8004a46:	f001 fcf9 	bl	800643c <__aeabi_f2d>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4619      	mov	r1, r3
 8004a52:	a325      	add	r3, pc, #148	; (adr r3, 8004ae8 <Calculation+0x5b0>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f001 fb90 	bl	800617c <__aeabi_dsub>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	f001 ff50 	bl	8006908 <__aeabi_d2f>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fc52 	bl	8005314 <sinf>
 8004a70:	ee07 0a10 	vmov	s14, r0
 8004a74:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <Calculation+0x5d8>)
 8004a76:	edd3 7a00 	vldr	s15, [r3]
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004a82:	ee17 0a90 	vmov	r0, s15
 8004a86:	f001 fcd9 	bl	800643c <__aeabi_f2d>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	a317      	add	r3, pc, #92	; (adr r3, 8004af0 <Calculation+0x5b8>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f001 fd24 	bl	80064e4 <__aeabi_dmul>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f001 ff30 	bl	8006908 <__aeabi_d2f>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <Calculation+0x5e4>)
 8004aac:	601a      	str	r2, [r3, #0]

		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of the time

		if(CAN_control == 1){// can control
 8004aae:	4b1c      	ldr	r3, [pc, #112]	; (8004b20 <Calculation+0x5e8>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d14d      	bne.n	8004b52 <Calculation+0x61a>

			if(CAN_new_meassage == 1){
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <Calculation+0x5ec>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d138      	bne.n	8004b30 <Calculation+0x5f8>
				speed_ref = CAN_speed_ref;
 8004abe:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <Calculation+0x5f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1a      	ldr	r2, [pc, #104]	; (8004b2c <Calculation+0x5f4>)
 8004ac4:	6013      	str	r3, [r2, #0]
				CAN_new_meassage = 0;
 8004ac6:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <Calculation+0x5ec>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e036      	b.n	8004b3c <Calculation+0x604>
 8004ace:	bf00      	nop
 8004ad0:	53c8d4f1 	.word	0x53c8d4f1
 8004ad4:	400921fb 	.word	0x400921fb
 8004ad8:	7707c94d 	.word	0x7707c94d
 8004adc:	3f91df46 	.word	0x3f91df46
 8004ae0:	37db38a0 	.word	0x37db38a0
 8004ae4:	4000c152 	.word	0x4000c152
 8004ae8:	37db38a0 	.word	0x37db38a0
 8004aec:	4010c152 	.word	0x4010c152
 8004af0:	571f7693 	.word	0x571f7693
 8004af4:	3fe55555 	.word	0x3fe55555
 8004af8:	20000448 	.word	0x20000448
 8004afc:	40260000 	.word	0x40260000
 8004b00:	20000444 	.word	0x20000444
 8004b04:	20000450 	.word	0x20000450
 8004b08:	200023fc 	.word	0x200023fc
 8004b0c:	200023e0 	.word	0x200023e0
 8004b10:	20002408 	.word	0x20002408
 8004b14:	20000440 	.word	0x20000440
 8004b18:	200023e8 	.word	0x200023e8
 8004b1c:	200023d4 	.word	0x200023d4
 8004b20:	2000042d 	.word	0x2000042d
 8004b24:	20000470 	.word	0x20000470
 8004b28:	2000046c 	.word	0x2000046c
 8004b2c:	20000454 	.word	0x20000454
			}
			else{
				CAN_no_com_counter ++;
 8004b30:	4bb9      	ldr	r3, [pc, #740]	; (8004e18 <Calculation+0x8e0>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	3301      	adds	r3, #1
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	4bb7      	ldr	r3, [pc, #732]	; (8004e18 <Calculation+0x8e0>)
 8004b3a:	701a      	strb	r2, [r3, #0]
			}

			if(CAN_no_com_counter > CAN_NO_COM_TH){
 8004b3c:	4bb6      	ldr	r3, [pc, #728]	; (8004e18 <Calculation+0x8e0>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2bfa      	cmp	r3, #250	; 0xfa
 8004b42:	d906      	bls.n	8004b52 <Calculation+0x61a>
				//CAN_new_meassage = 0;
				CAN_no_com_counter = CAN_NO_COM_TH;
 8004b44:	4bb4      	ldr	r3, [pc, #720]	; (8004e18 <Calculation+0x8e0>)
 8004b46:	22fa      	movs	r2, #250	; 0xfa
 8004b48:	701a      	strb	r2, [r3, #0]
				speed_ref = 0;
 8004b4a:	4bb4      	ldr	r3, [pc, #720]	; (8004e1c <Calculation+0x8e4>)
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
			}
		}

		omega_ele_rads_ref = ( speed_ref * PPZ ) / WHEEL_R;
 8004b52:	4bb2      	ldr	r3, [pc, #712]	; (8004e1c <Calculation+0x8e4>)
 8004b54:	edd3 7a00 	vldr	s15, [r3]
 8004b58:	eeb2 7a06 	vmov.f32	s14, #38	; 0x26
 8004b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b60:	ee17 0a90 	vmov	r0, s15
 8004b64:	f001 fc6a 	bl	800643c <__aeabi_f2d>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	a3a1      	add	r3, pc, #644	; (adr r3, 8004df8 <Calculation+0x8c0>)
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f001 fddf 	bl	8006738 <__aeabi_ddiv>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	f001 fec1 	bl	8006908 <__aeabi_d2f>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4ba5      	ldr	r3, [pc, #660]	; (8004e20 <Calculation+0x8e8>)
 8004b8a:	601a      	str	r2, [r3, #0]

		if((omega_ele_rads_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rads < 200))){ // no contorl is standing stil
 8004b8c:	4ba4      	ldr	r3, [pc, #656]	; (8004e20 <Calculation+0x8e8>)
 8004b8e:	edd3 7a00 	vldr	s15, [r3]
 8004b92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9a:	d11c      	bne.n	8004bd6 <Calculation+0x69e>
 8004b9c:	4ba1      	ldr	r3, [pc, #644]	; (8004e24 <Calculation+0x8ec>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d118      	bne.n	8004bd6 <Calculation+0x69e>
 8004ba4:	4ba0      	ldr	r3, [pc, #640]	; (8004e28 <Calculation+0x8f0>)
 8004ba6:	edd3 7a00 	vldr	s15, [r3]
 8004baa:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8004e2c <Calculation+0x8f4>
 8004bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb6:	dd0e      	ble.n	8004bd6 <Calculation+0x69e>
 8004bb8:	4b9b      	ldr	r3, [pc, #620]	; (8004e28 <Calculation+0x8f0>)
 8004bba:	edd3 7a00 	vldr	s15, [r3]
 8004bbe:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8004e30 <Calculation+0x8f8>
 8004bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bca:	d504      	bpl.n	8004bd6 <Calculation+0x69e>
			T_ref = 0;
 8004bcc:	4b99      	ldr	r3, [pc, #612]	; (8004e34 <Calculation+0x8fc>)
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e00b      	b.n	8004bee <Calculation+0x6b6>
		}
		else{
			if(MOTOR_NUM == 1){
				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param_1); // outer control loop q for omega
 8004bd6:	4b92      	ldr	r3, [pc, #584]	; (8004e20 <Calculation+0x8e8>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b93      	ldr	r3, [pc, #588]	; (8004e28 <Calculation+0x8f0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	4a95      	ldr	r2, [pc, #596]	; (8004e38 <Calculation+0x900>)
 8004be4:	f000 f954 	bl	8004e90 <PID_Controller>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b92      	ldr	r3, [pc, #584]	; (8004e34 <Calculation+0x8fc>)
 8004bec:	601a      	str	r2, [r3, #0]
			else{
				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param);
			}
		}

		if (Speed_control == 1){ // 1 speed contola aktive 0 not aktive torqe contol aktive
 8004bee:	4b8d      	ldr	r3, [pc, #564]	; (8004e24 <Calculation+0x8ec>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d116      	bne.n	8004c24 <Calculation+0x6ec>
			if(MOTOR_NUM == 1) {
				iq_ref =  T_ref / K_T; // dirction for motor 1
 8004bf6:	4b8f      	ldr	r3, [pc, #572]	; (8004e34 <Calculation+0x8fc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f001 fc1e 	bl	800643c <__aeabi_f2d>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4610      	mov	r0, r2
 8004c06:	4619      	mov	r1, r3
 8004c08:	a37d      	add	r3, pc, #500	; (adr r3, 8004e00 <Calculation+0x8c8>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f001 fd93 	bl	8006738 <__aeabi_ddiv>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f001 fe75 	bl	8006908 <__aeabi_d2f>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4b86      	ldr	r3, [pc, #536]	; (8004e3c <Calculation+0x904>)
 8004c22:	601a      	str	r2, [r3, #0]
				iq_ref = - T_ref / K_T;// dirction for motor 1
			}
		}

		//limit to IQ_REF_MAx limit
		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 8004c24:	4b85      	ldr	r3, [pc, #532]	; (8004e3c <Calculation+0x904>)
 8004c26:	edd3 7a00 	vldr	s15, [r3]
 8004c2a:	eeb9 7a04 	vmov.f32	s14, #148	; 0x94
 8004c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c36:	d502      	bpl.n	8004c3e <Calculation+0x706>
 8004c38:	4b80      	ldr	r3, [pc, #512]	; (8004e3c <Calculation+0x904>)
 8004c3a:	4a81      	ldr	r2, [pc, #516]	; (8004e40 <Calculation+0x908>)
 8004c3c:	601a      	str	r2, [r3, #0]
		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 8004c3e:	4b7f      	ldr	r3, [pc, #508]	; (8004e3c <Calculation+0x904>)
 8004c40:	edd3 7a00 	vldr	s15, [r3]
 8004c44:	eeb1 7a04 	vmov.f32	s14, #20
 8004c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c50:	dd02      	ble.n	8004c58 <Calculation+0x720>
 8004c52:	4b7a      	ldr	r3, [pc, #488]	; (8004e3c <Calculation+0x904>)
 8004c54:	4a7b      	ldr	r2, [pc, #492]	; (8004e44 <Calculation+0x90c>)
 8004c56:	601a      	str	r2, [r3, #0]

		if(Torque_control == 1){
 8004c58:	4b7b      	ldr	r3, [pc, #492]	; (8004e48 <Calculation+0x910>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d116      	bne.n	8004c8e <Calculation+0x756>
			Vd_ref = PID_Controller(0.0,id,&Id_param);
 8004c60:	4b7a      	ldr	r3, [pc, #488]	; (8004e4c <Calculation+0x914>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f04f 0000 	mov.w	r0, #0
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4a79      	ldr	r2, [pc, #484]	; (8004e50 <Calculation+0x918>)
 8004c6c:	f000 f910 	bl	8004e90 <PID_Controller>
 8004c70:	4602      	mov	r2, r0
 8004c72:	4b78      	ldr	r3, [pc, #480]	; (8004e54 <Calculation+0x91c>)
 8004c74:	601a      	str	r2, [r3, #0]
			Vq_ref = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
 8004c76:	4b71      	ldr	r3, [pc, #452]	; (8004e3c <Calculation+0x904>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b77      	ldr	r3, [pc, #476]	; (8004e58 <Calculation+0x920>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4610      	mov	r0, r2
 8004c80:	4619      	mov	r1, r3
 8004c82:	4a76      	ldr	r2, [pc, #472]	; (8004e5c <Calculation+0x924>)
 8004c84:	f000 f904 	bl	8004e90 <PID_Controller>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	4b75      	ldr	r3, [pc, #468]	; (8004e60 <Calculation+0x928>)
 8004c8c:	601a      	str	r2, [r3, #0]
		}

		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9ms

		// dq to alpha beta for voltage
		Valpha = Vd_ref*cos_phi - Vq_ref*sin_phi;
 8004c8e:	4b71      	ldr	r3, [pc, #452]	; (8004e54 <Calculation+0x91c>)
 8004c90:	ed93 7a00 	vldr	s14, [r3]
 8004c94:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c9c:	4b70      	ldr	r3, [pc, #448]	; (8004e60 <Calculation+0x928>)
 8004c9e:	edd3 6a00 	vldr	s13, [r3]
 8004ca2:	edd7 7a00 	vldr	s15, [r7]
 8004ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cae:	4b6d      	ldr	r3, [pc, #436]	; (8004e64 <Calculation+0x92c>)
 8004cb0:	edc3 7a00 	vstr	s15, [r3]
		Vbeta = Vd_ref*sin_phi + Vq_ref*cos_phi;
 8004cb4:	4b67      	ldr	r3, [pc, #412]	; (8004e54 <Calculation+0x91c>)
 8004cb6:	ed93 7a00 	vldr	s14, [r3]
 8004cba:	edd7 7a00 	vldr	s15, [r7]
 8004cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cc2:	4b67      	ldr	r3, [pc, #412]	; (8004e60 <Calculation+0x928>)
 8004cc4:	edd3 6a00 	vldr	s13, [r3]
 8004cc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cd4:	4b64      	ldr	r3, [pc, #400]	; (8004e68 <Calculation+0x930>)
 8004cd6:	edc3 7a00 	vstr	s15, [r3]

		// calc angle for SVM app
		angle_ab_rad = atanf(Vbeta/Valpha);
 8004cda:	4b63      	ldr	r3, [pc, #396]	; (8004e68 <Calculation+0x930>)
 8004cdc:	ed93 7a00 	vldr	s14, [r3]
 8004ce0:	4b60      	ldr	r3, [pc, #384]	; (8004e64 <Calculation+0x92c>)
 8004ce2:	edd3 7a00 	vldr	s15, [r3]
 8004ce6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8004cea:	ee17 0a90 	vmov	r0, s15
 8004cee:	f000 f9e9 	bl	80050c4 <atanf>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	4b5d      	ldr	r3, [pc, #372]	; (8004e6c <Calculation+0x934>)
 8004cf6:	601a      	str	r2, [r3, #0]
		angle_ab = angle_ab_rad/Pi180;
 8004cf8:	4b5c      	ldr	r3, [pc, #368]	; (8004e6c <Calculation+0x934>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 fb9d 	bl	800643c <__aeabi_f2d>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4610      	mov	r0, r2
 8004d08:	4619      	mov	r1, r3
 8004d0a:	a33f      	add	r3, pc, #252	; (adr r3, 8004e08 <Calculation+0x8d0>)
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	f001 fd12 	bl	8006738 <__aeabi_ddiv>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f001 fdf4 	bl	8006908 <__aeabi_d2f>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b53      	ldr	r3, [pc, #332]	; (8004e70 <Calculation+0x938>)
 8004d24:	601a      	str	r2, [r3, #0]

		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 8004d26:	4b4f      	ldr	r3, [pc, #316]	; (8004e64 <Calculation+0x92c>)
 8004d28:	edd3 7a00 	vldr	s15, [r3]
 8004d2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d34:	d50a      	bpl.n	8004d4c <Calculation+0x814>
 8004d36:	4b4e      	ldr	r3, [pc, #312]	; (8004e70 <Calculation+0x938>)
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004e74 <Calculation+0x93c>
 8004d40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d44:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <Calculation+0x938>)
 8004d46:	edc3 7a00 	vstr	s15, [r3]
 8004d4a:	e011      	b.n	8004d70 <Calculation+0x838>
		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 8004d4c:	4b46      	ldr	r3, [pc, #280]	; (8004e68 <Calculation+0x930>)
 8004d4e:	edd3 7a00 	vldr	s15, [r3]
 8004d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5a:	d509      	bpl.n	8004d70 <Calculation+0x838>
 8004d5c:	4b44      	ldr	r3, [pc, #272]	; (8004e70 <Calculation+0x938>)
 8004d5e:	edd3 7a00 	vldr	s15, [r3]
 8004d62:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004e78 <Calculation+0x940>
 8004d66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d6a:	4b41      	ldr	r3, [pc, #260]	; (8004e70 <Calculation+0x938>)
 8004d6c:	edc3 7a00 	vstr	s15, [r3]

		// shortend to one line
		// amplitude calculation
		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 8004d70:	4b3c      	ldr	r3, [pc, #240]	; (8004e64 <Calculation+0x92c>)
 8004d72:	ed93 7a00 	vldr	s14, [r3]
 8004d76:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <Calculation+0x92c>)
 8004d78:	edd3 7a00 	vldr	s15, [r3]
 8004d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d80:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <Calculation+0x930>)
 8004d82:	edd3 6a00 	vldr	s13, [r3]
 8004d86:	4b38      	ldr	r3, [pc, #224]	; (8004e68 <Calculation+0x930>)
 8004d88:	edd3 7a00 	vldr	s15, [r3]
 8004d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d94:	ee17 0a90 	vmov	r0, s15
 8004d98:	f000 fb0a 	bl	80053b0 <sqrtf>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <Calculation+0x944>)
 8004da0:	601a      	str	r2, [r3, #0]

		//K_inv = V/m --> m = V / K_inv
		modulation_index = amplitude_ab/K_inv;
 8004da2:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <Calculation+0x944>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 fb48 	bl	800643c <__aeabi_f2d>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4610      	mov	r0, r2
 8004db2:	4619      	mov	r1, r3
 8004db4:	a316      	add	r3, pc, #88	; (adr r3, 8004e10 <Calculation+0x8d8>)
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	f001 fcbd 	bl	8006738 <__aeabi_ddiv>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	f001 fd9f 	bl	8006908 <__aeabi_d2f>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <Calculation+0x948>)
 8004dce:	601a      	str	r2, [r3, #0]

		//scale maximum 1 to 10000 -->
		modulation_index_scaled = 10000*modulation_index;
 8004dd0:	4b2b      	ldr	r3, [pc, #172]	; (8004e80 <Calculation+0x948>)
 8004dd2:	edd3 7a00 	vldr	s15, [r3]
 8004dd6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004e84 <Calculation+0x94c>
 8004dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dde:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <Calculation+0x950>)
 8004de0:	edc3 7a00 	vstr	s15, [r3]


		// shortened ca 4% improvemnt
		//modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;

		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the time
 8004de4:	4829      	ldr	r0, [pc, #164]	; (8004e8c <Calculation+0x954>)
 8004de6:	f7ff f87f 	bl	8003ee8 <DIGITAL_IO_SetOutputLow>

}
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	ecbd 8b02 	vpop	{d8}
 8004df2:	bdb0      	pop	{r4, r5, r7, pc}
 8004df4:	f3af 8000 	nop.w
 8004df8:	147ae148 	.word	0x147ae148
 8004dfc:	3fb147ae 	.word	0x3fb147ae
 8004e00:	ae147ae1 	.word	0xae147ae1
 8004e04:	3fcae147 	.word	0x3fcae147
 8004e08:	7707c94d 	.word	0x7707c94d
 8004e0c:	3f91df46 	.word	0x3f91df46
 8004e10:	c99b7dee 	.word	0xc99b7dee
 8004e14:	4022211b 	.word	0x4022211b
 8004e18:	20000471 	.word	0x20000471
 8004e1c:	20000454 	.word	0x20000454
 8004e20:	20000458 	.word	0x20000458
 8004e24:	2000042c 	.word	0x2000042c
 8004e28:	20000444 	.word	0x20000444
 8004e2c:	c3480000 	.word	0xc3480000
 8004e30:	43480000 	.word	0x43480000
 8004e34:	20000460 	.word	0x20000460
 8004e38:	20000378 	.word	0x20000378
 8004e3c:	2000045c 	.word	0x2000045c
 8004e40:	c0a00000 	.word	0xc0a00000
 8004e44:	40a00000 	.word	0x40a00000
 8004e48:	200002d4 	.word	0x200002d4
 8004e4c:	200023e8 	.word	0x200023e8
 8004e50:	20000354 	.word	0x20000354
 8004e54:	20000464 	.word	0x20000464
 8004e58:	200023d4 	.word	0x200023d4
 8004e5c:	20000330 	.word	0x20000330
 8004e60:	20000468 	.word	0x20000468
 8004e64:	2000240c 	.word	0x2000240c
 8004e68:	200023f4 	.word	0x200023f4
 8004e6c:	200023cc 	.word	0x200023cc
 8004e70:	200023f8 	.word	0x200023f8
 8004e74:	43340000 	.word	0x43340000
 8004e78:	43b40000 	.word	0x43b40000
 8004e7c:	200023dc 	.word	0x200023dc
 8004e80:	200023ec 	.word	0x200023ec
 8004e84:	461c4000 	.word	0x461c4000
 8004e88:	20002410 	.word	0x20002410
 8004e8c:	080074dc 	.word	0x080074dc

08004e90 <PID_Controller>:

// PID Controller
float PID_Controller(float SetPoint,float ActValue,PID_param *param){
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	; 0x24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]

	float Deviation = SetPoint - ActValue;
 8004e9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ea8:	edc7 7a06 	vstr	s15, [r7, #24]
	float temp1, temp2;

	 temp1 = param->P*Deviation;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	ed93 7a00 	vldr	s14, [r3]
 8004eb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eba:	edc7 7a05 	vstr	s15, [r7, #20]
	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ec4:	4b21      	ldr	r3, [pc, #132]	; (8004f4c <PID_Controller+0xbc>)
 8004ec6:	edd3 7a00 	vldr	s15, [r3]
 8004eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ece:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ed6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004eda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ee8:	edc7 7a07 	vstr	s15, [r7, #28]

	 if (temp2 >= param->MaxLimit){
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ef2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efe:	d803      	bhi.n	8004f08 <PID_Controller+0x78>
		 temp2 = param->MaxLimit;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	e00c      	b.n	8004f22 <PID_Controller+0x92>
	 }
	 else if (temp2 < param->MinLimit){
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004f0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1a:	dd02      	ble.n	8004f22 <PID_Controller+0x92>
		 temp2 = param->MinLimit;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	61fb      	str	r3, [r7, #28]
	 }

	 param->Output_z = temp2 - temp1;
 8004f22:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	edc3 7a08 	vstr	s15, [r3, #32]

	 param->Output = temp2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	615a      	str	r2, [r3, #20]

	return param->Output;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]

}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3724      	adds	r7, #36	; 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000324 	.word	0x20000324

08004f50 <readCurrent>:


//Read Current  via SPI-Interface
float readCurrent(uint8_t ChipSelect){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
	uint8_t ReadData[2];

	BUS_IO_Write(&SPI_ChipSelect, ChipSelect);
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	4822      	ldr	r0, [pc, #136]	; (8004fe8 <readCurrent+0x98>)
 8004f60:	4619      	mov	r1, r3
 8004f62:	f7fe fe55 	bl	8003c10 <BUS_IO_Write>
	SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2U);
 8004f66:	f107 030c 	add.w	r3, r7, #12
 8004f6a:	4820      	ldr	r0, [pc, #128]	; (8004fec <readCurrent+0x9c>)
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f7fd f938 	bl	80021e4 <SPI_MASTER_Receive>
	BUS_IO_Write(&SPI_ChipSelect, 0b111);
 8004f74:	481c      	ldr	r0, [pc, #112]	; (8004fe8 <readCurrent+0x98>)
 8004f76:	2107      	movs	r1, #7
 8004f78:	f7fe fe4a 	bl	8003c10 <BUS_IO_Write>
	ReadData[0] = ReadData[0] & 0X1F; 									//cutting away the 3 info bits
 8004f7c:	7b3b      	ldrb	r3, [r7, #12]
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	733b      	strb	r3, [r7, #12]
	uint16_t iCurrent = ReadData[0]<<8 | ReadData[1];					//combine Data
 8004f86:	7b3b      	ldrb	r3, [r7, #12]
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	7b7b      	ldrb	r3, [r7, #13]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	4313      	orrs	r3, r2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	82fb      	strh	r3, [r7, #22]

	// calculation of the current
	float fCurrent = ((float)iCurrent - 4096.0)/160.0;					// ATTENTION: value has to be divided by 160 for the 25A Sensor and 80 for the 50A Sensor
 8004f96:	8afb      	ldrh	r3, [r7, #22]
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa0:	ee17 0a90 	vmov	r0, s15
 8004fa4:	f001 fa4a 	bl	800643c <__aeabi_f2d>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <readCurrent+0xa0>)
 8004fb6:	f001 f8e1 	bl	800617c <__aeabi_dsub>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <readCurrent+0xa4>)
 8004fc8:	f001 fbb6 	bl	8006738 <__aeabi_ddiv>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f001 fc98 	bl	8006908 <__aeabi_d2f>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	613b      	str	r3, [r7, #16]

	return fCurrent;
 8004fdc:	693b      	ldr	r3, [r7, #16]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200002c0 	.word	0x200002c0
 8004fec:	200000c4 	.word	0x200000c4
 8004ff0:	40b00000 	.word	0x40b00000
 8004ff4:	40640000 	.word	0x40640000

08004ff8 <f_rec_data>:





void f_rec_data(float data_point_var1, float data_point_var2, float start_step_from, float step_to){
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
	  if(start_rec  == 1){
 8005006:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <f_rec_data+0xb0>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d12a      	bne.n	8005064 <f_rec_data+0x6c>
		  start_rec_copunt ++;
 800500e:	4b27      	ldr	r3, [pc, #156]	; (80050ac <f_rec_data+0xb4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3301      	adds	r3, #1
 8005014:	4a25      	ldr	r2, [pc, #148]	; (80050ac <f_rec_data+0xb4>)
 8005016:	6013      	str	r3, [r2, #0]

		  if(start_rec_copunt == 1){
 8005018:	4b24      	ldr	r3, [pc, #144]	; (80050ac <f_rec_data+0xb4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d102      	bne.n	8005026 <f_rec_data+0x2e>
			  iq_ref = start_step_from;
 8005020:	4a23      	ldr	r2, [pc, #140]	; (80050b0 <f_rec_data+0xb8>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6013      	str	r3, [r2, #0]
		  }

		  if(start_rec_copunt ==10000){
 8005026:	4b21      	ldr	r3, [pc, #132]	; (80050ac <f_rec_data+0xb4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f242 7210 	movw	r2, #10000	; 0x2710
 800502e:	4293      	cmp	r3, r2
 8005030:	d102      	bne.n	8005038 <f_rec_data+0x40>
			  rec_data_contorl = 1;
 8005032:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <f_rec_data+0xbc>)
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]
		  }


		  if(start_rec_copunt == 10100){ //laster
 8005038:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <f_rec_data+0xb4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f242 7274 	movw	r2, #10100	; 0x2774
 8005040:	4293      	cmp	r3, r2
 8005042:	d102      	bne.n	800504a <f_rec_data+0x52>
			  iq_ref = step_to;
 8005044:	4a1a      	ldr	r2, [pc, #104]	; (80050b0 <f_rec_data+0xb8>)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6013      	str	r3, [r2, #0]
		  }

		  if(start_rec_copunt == 20000){
 800504a:	4b18      	ldr	r3, [pc, #96]	; (80050ac <f_rec_data+0xb4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8005052:	4293      	cmp	r3, r2
 8005054:	d106      	bne.n	8005064 <f_rec_data+0x6c>
			  iq_ref = 0;
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <f_rec_data+0xb8>)
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
			  start_rec = 0;
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <f_rec_data+0xb0>)
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
		  }
	  }


	if(rec_data_contorl == 1){
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <f_rec_data+0xbc>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d118      	bne.n	800509e <f_rec_data+0xa6>
		  if(rec_data_index < REC_DATA_NUM_POINTS){
 800506c:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <f_rec_data+0xc0>)
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005074:	d213      	bcs.n	800509e <f_rec_data+0xa6>
				rec_data[rec_data_index] = data_point_var1;
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <f_rec_data+0xc0>)
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	4a10      	ldr	r2, [pc, #64]	; (80050bc <f_rec_data+0xc4>)
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]
				rec_data2[rec_data_index] = data_point_var2;
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <f_rec_data+0xc0>)
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <f_rec_data+0xc8>)
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	601a      	str	r2, [r3, #0]
				rec_data_index ++;
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <f_rec_data+0xc0>)
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	3301      	adds	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <f_rec_data+0xc0>)
 800509c:	801a      	strh	r2, [r3, #0]
		  }
	}
}
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	200023c4 	.word	0x200023c4
 80050ac:	200023c8 	.word	0x200023c8
 80050b0:	2000045c 	.word	0x2000045c
 80050b4:	20000481 	.word	0x20000481
 80050b8:	20000482 	.word	0x20000482
 80050bc:	20000484 	.word	0x20000484
 80050c0:	20001424 	.word	0x20001424

080050c4 <atanf>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80050ca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80050ce:	ee07 0a90 	vmov	s15, r0
 80050d2:	4605      	mov	r5, r0
 80050d4:	db0d      	blt.n	80050f2 <atanf+0x2e>
 80050d6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80050da:	dc5c      	bgt.n	8005196 <atanf+0xd2>
 80050dc:	eddf 7a55 	vldr	s15, [pc, #340]	; 8005234 <atanf+0x170>
 80050e0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005238 <atanf+0x174>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	bfd8      	it	le
 80050e8:	eef0 7a47 	vmovle.f32	s15, s14
 80050ec:	ee17 0a90 	vmov	r0, s15
 80050f0:	bd38      	pop	{r3, r4, r5, pc}
 80050f2:	4b52      	ldr	r3, [pc, #328]	; (800523c <atanf+0x178>)
 80050f4:	429c      	cmp	r4, r3
 80050f6:	dc61      	bgt.n	80051bc <atanf+0xf8>
 80050f8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80050fc:	db50      	blt.n	80051a0 <atanf+0xdc>
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005102:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8005106:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8005240 <atanf+0x17c>
 800510a:	ed9f 2a4e 	vldr	s4, [pc, #312]	; 8005244 <atanf+0x180>
 800510e:	ed9f 3a4e 	vldr	s6, [pc, #312]	; 8005248 <atanf+0x184>
 8005112:	eddf 1a4e 	vldr	s3, [pc, #312]	; 800524c <atanf+0x188>
 8005116:	eddf 2a4e 	vldr	s5, [pc, #312]	; 8005250 <atanf+0x18c>
 800511a:	ed9f 4a4e 	vldr	s8, [pc, #312]	; 8005254 <atanf+0x190>
 800511e:	eddf 3a4e 	vldr	s7, [pc, #312]	; 8005258 <atanf+0x194>
 8005122:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 800525c <atanf+0x198>
 8005126:	eddf 4a4e 	vldr	s9, [pc, #312]	; 8005260 <atanf+0x19c>
 800512a:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8005264 <atanf+0x1a0>
 800512e:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005268 <atanf+0x1a4>
 8005132:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	eea7 2a01 	vfma.f32	s4, s14, s2
 800513c:	eee7 2a21 	vfma.f32	s5, s14, s3
 8005140:	eea2 3a07 	vfma.f32	s6, s4, s14
 8005144:	eee2 3a87 	vfma.f32	s7, s5, s14
 8005148:	eea3 4a07 	vfma.f32	s8, s6, s14
 800514c:	eee3 4a87 	vfma.f32	s9, s7, s14
 8005150:	eea4 5a07 	vfma.f32	s10, s8, s14
 8005154:	eee4 6a87 	vfma.f32	s13, s9, s14
 8005158:	eea5 6a07 	vfma.f32	s12, s10, s14
 800515c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005160:	ee66 6a25 	vmul.f32	s13, s12, s11
 8005164:	d041      	beq.n	80051ea <atanf+0x126>
 8005166:	4a41      	ldr	r2, [pc, #260]	; (800526c <atanf+0x1a8>)
 8005168:	4941      	ldr	r1, [pc, #260]	; (8005270 <atanf+0x1ac>)
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	ee76 6a87 	vadd.f32	s13, s13, s14
 8005172:	ed92 7a00 	vldr	s14, [r2]
 8005176:	ee96 7aa7 	vfnms.f32	s14, s13, s15
 800517a:	440b      	add	r3, r1
 800517c:	2d00      	cmp	r5, #0
 800517e:	edd3 6a00 	vldr	s13, [r3]
 8005182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005186:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800518a:	bfb8      	it	lt
 800518c:	eef1 7a67 	vneglt.f32	s15, s15
 8005190:	ee17 0a90 	vmov	r0, s15
 8005194:	bd38      	pop	{r3, r4, r5, pc}
 8005196:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800519a:	ee17 0a90 	vmov	r0, s15
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005274 <atanf+0x1b0>
 80051a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x70
 80051ac:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80051b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b4:	dda3      	ble.n	80050fe <atanf+0x3a>
 80051b6:	ee17 0a90 	vmov	r0, s15
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	f000 f8a6 	bl	800530c <fabsf>
 80051c0:	4b2d      	ldr	r3, [pc, #180]	; (8005278 <atanf+0x1b4>)
 80051c2:	429c      	cmp	r4, r3
 80051c4:	ee07 0a10 	vmov	s14, r0
 80051c8:	dc14      	bgt.n	80051f4 <atanf+0x130>
 80051ca:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80051ce:	429c      	cmp	r4, r3
 80051d0:	dc25      	bgt.n	800521e <atanf+0x15a>
 80051d2:	eef0 7a00 	vmov.f32	s15, #0
 80051d6:	eeff 6a00 	vmov.f32	s13, #240	; 0xf0
 80051da:	eee7 6a27 	vfma.f32	s13, s14, s15
 80051de:	2300      	movs	r3, #0
 80051e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e4:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 80051e8:	e78b      	b.n	8005102 <atanf+0x3e>
 80051ea:	ee76 6a87 	vadd.f32	s13, s13, s14
 80051ee:	eee6 7ae7 	vfms.f32	s15, s13, s15
 80051f2:	e77b      	b.n	80050ec <atanf+0x28>
 80051f4:	4b21      	ldr	r3, [pc, #132]	; (800527c <atanf+0x1b8>)
 80051f6:	429c      	cmp	r4, r3
 80051f8:	dc0b      	bgt.n	8005212 <atanf+0x14e>
 80051fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x78
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x70
 8005202:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005206:	2302      	movs	r3, #2
 8005208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800520c:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8005210:	e777      	b.n	8005102 <atanf+0x3e>
 8005212:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 8005216:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800521a:	2303      	movs	r3, #3
 800521c:	e771      	b.n	8005102 <atanf+0x3e>
 800521e:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8005222:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800522a:	2301      	movs	r3, #1
 800522c:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8005230:	e767      	b.n	8005102 <atanf+0x3e>
 8005232:	bf00      	nop
 8005234:	3fc90fdb 	.word	0x3fc90fdb
 8005238:	bfc90fdb 	.word	0xbfc90fdb
 800523c:	3edfffff 	.word	0x3edfffff
 8005240:	3c8569d7 	.word	0x3c8569d7
 8005244:	3d4bda59 	.word	0x3d4bda59
 8005248:	3d886b35 	.word	0x3d886b35
 800524c:	bd15a221 	.word	0xbd15a221
 8005250:	bd6ef16b 	.word	0xbd6ef16b
 8005254:	3dba2e6e 	.word	0x3dba2e6e
 8005258:	bd9d8795 	.word	0xbd9d8795
 800525c:	3e124925 	.word	0x3e124925
 8005260:	bde38e38 	.word	0xbde38e38
 8005264:	3eaaaaab 	.word	0x3eaaaaab
 8005268:	be4ccccd 	.word	0xbe4ccccd
 800526c:	08007644 	.word	0x08007644
 8005270:	08007654 	.word	0x08007654
 8005274:	7149f2ca 	.word	0x7149f2ca
 8005278:	3f97ffff 	.word	0x3f97ffff
 800527c:	401bffff 	.word	0x401bffff

08005280 <cosf>:
 8005280:	b500      	push	{lr}
 8005282:	b085      	sub	sp, #20
 8005284:	4a20      	ldr	r2, [pc, #128]	; (8005308 <cosf+0x88>)
 8005286:	9001      	str	r0, [sp, #4]
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800528e:	4293      	cmp	r3, r2
 8005290:	dd1d      	ble.n	80052ce <cosf+0x4e>
 8005292:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005296:	db08      	blt.n	80052aa <cosf+0x2a>
 8005298:	eddd 7a01 	vldr	s15, [sp, #4]
 800529c:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80052a0:	ee17 0a90 	vmov	r0, s15
 80052a4:	b005      	add	sp, #20
 80052a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80052aa:	a902      	add	r1, sp, #8
 80052ac:	f000 f8d8 	bl	8005460 <__ieee754_rem_pio2f>
 80052b0:	f000 0203 	and.w	r2, r0, #3
 80052b4:	2a01      	cmp	r2, #1
 80052b6:	9802      	ldr	r0, [sp, #8]
 80052b8:	9903      	ldr	r1, [sp, #12]
 80052ba:	d019      	beq.n	80052f0 <cosf+0x70>
 80052bc:	2a02      	cmp	r2, #2
 80052be:	d010      	beq.n	80052e2 <cosf+0x62>
 80052c0:	b1ea      	cbz	r2, 80052fe <cosf+0x7e>
 80052c2:	2201      	movs	r2, #1
 80052c4:	f000 fe0c 	bl	8005ee0 <__kernel_sinf>
 80052c8:	ee07 0a90 	vmov	s15, r0
 80052cc:	e7e8      	b.n	80052a0 <cosf+0x20>
 80052ce:	2100      	movs	r1, #0
 80052d0:	f000 fa68 	bl	80057a4 <__kernel_cosf>
 80052d4:	ee07 0a90 	vmov	s15, r0
 80052d8:	ee17 0a90 	vmov	r0, s15
 80052dc:	b005      	add	sp, #20
 80052de:	f85d fb04 	ldr.w	pc, [sp], #4
 80052e2:	f000 fa5f 	bl	80057a4 <__kernel_cosf>
 80052e6:	ee07 0a90 	vmov	s15, r0
 80052ea:	eef1 7a67 	vneg.f32	s15, s15
 80052ee:	e7d7      	b.n	80052a0 <cosf+0x20>
 80052f0:	f000 fdf6 	bl	8005ee0 <__kernel_sinf>
 80052f4:	ee07 0a90 	vmov	s15, r0
 80052f8:	eef1 7a67 	vneg.f32	s15, s15
 80052fc:	e7d0      	b.n	80052a0 <cosf+0x20>
 80052fe:	f000 fa51 	bl	80057a4 <__kernel_cosf>
 8005302:	ee07 0a90 	vmov	s15, r0
 8005306:	e7cb      	b.n	80052a0 <cosf+0x20>
 8005308:	3f490fd8 	.word	0x3f490fd8

0800530c <fabsf>:
 800530c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop

08005314 <sinf>:
 8005314:	b500      	push	{lr}
 8005316:	b085      	sub	sp, #20
 8005318:	4a24      	ldr	r2, [pc, #144]	; (80053ac <sinf+0x98>)
 800531a:	9001      	str	r0, [sp, #4]
 800531c:	9b01      	ldr	r3, [sp, #4]
 800531e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005322:	4293      	cmp	r3, r2
 8005324:	dd1e      	ble.n	8005364 <sinf+0x50>
 8005326:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800532a:	db08      	blt.n	800533e <sinf+0x2a>
 800532c:	eddd 7a01 	vldr	s15, [sp, #4]
 8005330:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8005334:	ee17 0a90 	vmov	r0, s15
 8005338:	b005      	add	sp, #20
 800533a:	f85d fb04 	ldr.w	pc, [sp], #4
 800533e:	a902      	add	r1, sp, #8
 8005340:	f000 f88e 	bl	8005460 <__ieee754_rem_pio2f>
 8005344:	f000 0003 	and.w	r0, r0, #3
 8005348:	2801      	cmp	r0, #1
 800534a:	d020      	beq.n	800538e <sinf+0x7a>
 800534c:	2802      	cmp	r0, #2
 800534e:	d014      	beq.n	800537a <sinf+0x66>
 8005350:	b320      	cbz	r0, 800539c <sinf+0x88>
 8005352:	9802      	ldr	r0, [sp, #8]
 8005354:	9903      	ldr	r1, [sp, #12]
 8005356:	f000 fa25 	bl	80057a4 <__kernel_cosf>
 800535a:	ee07 0a90 	vmov	s15, r0
 800535e:	eef1 7a67 	vneg.f32	s15, s15
 8005362:	e7e7      	b.n	8005334 <sinf+0x20>
 8005364:	2100      	movs	r1, #0
 8005366:	2200      	movs	r2, #0
 8005368:	f000 fdba 	bl	8005ee0 <__kernel_sinf>
 800536c:	ee07 0a90 	vmov	s15, r0
 8005370:	ee17 0a90 	vmov	r0, s15
 8005374:	b005      	add	sp, #20
 8005376:	f85d fb04 	ldr.w	pc, [sp], #4
 800537a:	9802      	ldr	r0, [sp, #8]
 800537c:	9903      	ldr	r1, [sp, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f000 fdae 	bl	8005ee0 <__kernel_sinf>
 8005384:	ee07 0a90 	vmov	s15, r0
 8005388:	eef1 7a67 	vneg.f32	s15, s15
 800538c:	e7d2      	b.n	8005334 <sinf+0x20>
 800538e:	9802      	ldr	r0, [sp, #8]
 8005390:	9903      	ldr	r1, [sp, #12]
 8005392:	f000 fa07 	bl	80057a4 <__kernel_cosf>
 8005396:	ee07 0a90 	vmov	s15, r0
 800539a:	e7cb      	b.n	8005334 <sinf+0x20>
 800539c:	9802      	ldr	r0, [sp, #8]
 800539e:	9903      	ldr	r1, [sp, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f000 fd9d 	bl	8005ee0 <__kernel_sinf>
 80053a6:	ee07 0a90 	vmov	s15, r0
 80053aa:	e7c3      	b.n	8005334 <sinf+0x20>
 80053ac:	3f490fd8 	.word	0x3f490fd8

080053b0 <sqrtf>:
 80053b0:	b530      	push	{r4, r5, lr}
 80053b2:	ed2d 8b02 	vpush	{d8}
 80053b6:	4d28      	ldr	r5, [pc, #160]	; (8005458 <sqrtf+0xa8>)
 80053b8:	b08b      	sub	sp, #44	; 0x2c
 80053ba:	ee08 0a10 	vmov	s16, r0
 80053be:	f000 f99b 	bl	80056f8 <__ieee754_sqrtf>
 80053c2:	f995 3000 	ldrsb.w	r3, [r5]
 80053c6:	3301      	adds	r3, #1
 80053c8:	4604      	mov	r4, r0
 80053ca:	d009      	beq.n	80053e0 <sqrtf+0x30>
 80053cc:	ee18 0a10 	vmov	r0, s16
 80053d0:	f000 fe30 	bl	8006034 <__fpclassifyf>
 80053d4:	b120      	cbz	r0, 80053e0 <sqrtf+0x30>
 80053d6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	d404      	bmi.n	80053ea <sqrtf+0x3a>
 80053e0:	4620      	mov	r0, r4
 80053e2:	b00b      	add	sp, #44	; 0x2c
 80053e4:	ecbd 8b02 	vpop	{d8}
 80053e8:	bd30      	pop	{r4, r5, pc}
 80053ea:	2301      	movs	r3, #1
 80053ec:	4a1b      	ldr	r2, [pc, #108]	; (800545c <sqrtf+0xac>)
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	ee18 0a10 	vmov	r0, s16
 80053f4:	2300      	movs	r3, #0
 80053f6:	9201      	str	r2, [sp, #4]
 80053f8:	9308      	str	r3, [sp, #32]
 80053fa:	f001 f81f 	bl	800643c <__aeabi_f2d>
 80053fe:	782c      	ldrb	r4, [r5, #0]
 8005400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005408:	b98c      	cbnz	r4, 800542e <sqrtf+0x7e>
 800540a:	2200      	movs	r2, #0
 800540c:	2300      	movs	r3, #0
 800540e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005412:	4668      	mov	r0, sp
 8005414:	f000 fdb2 	bl	8005f7c <matherr>
 8005418:	b198      	cbz	r0, 8005442 <sqrtf+0x92>
 800541a:	9b08      	ldr	r3, [sp, #32]
 800541c:	b9b3      	cbnz	r3, 800544c <sqrtf+0x9c>
 800541e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005422:	f001 fa71 	bl	8006908 <__aeabi_d2f>
 8005426:	b00b      	add	sp, #44	; 0x2c
 8005428:	ecbd 8b02 	vpop	{d8}
 800542c:	bd30      	pop	{r4, r5, pc}
 800542e:	2000      	movs	r0, #0
 8005430:	2100      	movs	r1, #0
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	f001 f97f 	bl	8006738 <__aeabi_ddiv>
 800543a:	2c02      	cmp	r4, #2
 800543c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005440:	d1e7      	bne.n	8005412 <sqrtf+0x62>
 8005442:	f001 fab1 	bl	80069a8 <__errno>
 8005446:	2321      	movs	r3, #33	; 0x21
 8005448:	6003      	str	r3, [r0, #0]
 800544a:	e7e6      	b.n	800541a <sqrtf+0x6a>
 800544c:	f001 faac 	bl	80069a8 <__errno>
 8005450:	9b08      	ldr	r3, [sp, #32]
 8005452:	6003      	str	r3, [r0, #0]
 8005454:	e7e3      	b.n	800541e <sqrtf+0x6e>
 8005456:	bf00      	nop
 8005458:	2000039c 	.word	0x2000039c
 800545c:	08007664 	.word	0x08007664

08005460 <__ieee754_rem_pio2f>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	4a97      	ldr	r2, [pc, #604]	; (80056c0 <__ieee754_rem_pio2f+0x260>)
 8005464:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8005468:	4294      	cmp	r4, r2
 800546a:	b086      	sub	sp, #24
 800546c:	4606      	mov	r6, r0
 800546e:	460d      	mov	r5, r1
 8005470:	dd68      	ble.n	8005544 <__ieee754_rem_pio2f+0xe4>
 8005472:	4a94      	ldr	r2, [pc, #592]	; (80056c4 <__ieee754_rem_pio2f+0x264>)
 8005474:	4294      	cmp	r4, r2
 8005476:	dc1c      	bgt.n	80054b2 <__ieee754_rem_pio2f+0x52>
 8005478:	2800      	cmp	r0, #0
 800547a:	eddf 7a93 	vldr	s15, [pc, #588]	; 80056c8 <__ieee754_rem_pio2f+0x268>
 800547e:	4a93      	ldr	r2, [pc, #588]	; (80056cc <__ieee754_rem_pio2f+0x26c>)
 8005480:	f024 040f 	bic.w	r4, r4, #15
 8005484:	ee07 0a10 	vmov	s14, r0
 8005488:	f340 80e2 	ble.w	8005650 <__ieee754_rem_pio2f+0x1f0>
 800548c:	4294      	cmp	r4, r2
 800548e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005492:	d067      	beq.n	8005564 <__ieee754_rem_pio2f+0x104>
 8005494:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80056d0 <__ieee754_rem_pio2f+0x270>
 8005498:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800549c:	2001      	movs	r0, #1
 800549e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80054a2:	edc1 6a00 	vstr	s13, [r1]
 80054a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054aa:	edc1 7a01 	vstr	s15, [r1, #4]
 80054ae:	b006      	add	sp, #24
 80054b0:	bd70      	pop	{r4, r5, r6, pc}
 80054b2:	4a88      	ldr	r2, [pc, #544]	; (80056d4 <__ieee754_rem_pio2f+0x274>)
 80054b4:	4294      	cmp	r4, r2
 80054b6:	dd67      	ble.n	8005588 <__ieee754_rem_pio2f+0x128>
 80054b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80054bc:	da48      	bge.n	8005550 <__ieee754_rem_pio2f+0xf0>
 80054be:	15e2      	asrs	r2, r4, #23
 80054c0:	3a86      	subs	r2, #134	; 0x86
 80054c2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80054c6:	ee07 3a10 	vmov	s14, r3
 80054ca:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 80054ce:	eddf 7a82 	vldr	s15, [pc, #520]	; 80056d8 <__ieee754_rem_pio2f+0x278>
 80054d2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80054d6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80054da:	edcd 6a03 	vstr	s13, [sp, #12]
 80054de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054e2:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 80054e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80054ea:	ee37 7a66 	vsub.f32	s14, s14, s13
 80054ee:	edcd 6a04 	vstr	s13, [sp, #16]
 80054f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fe:	edcd 7a05 	vstr	s15, [sp, #20]
 8005502:	f040 80b8 	bne.w	8005676 <__ieee754_rem_pio2f+0x216>
 8005506:	eef5 6a40 	vcmp.f32	s13, #0.0
 800550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550e:	bf14      	ite	ne
 8005510:	2302      	movne	r3, #2
 8005512:	2301      	moveq	r3, #1
 8005514:	4971      	ldr	r1, [pc, #452]	; (80056dc <__ieee754_rem_pio2f+0x27c>)
 8005516:	2002      	movs	r0, #2
 8005518:	e88d 0003 	stmia.w	sp, {r0, r1}
 800551c:	a803      	add	r0, sp, #12
 800551e:	4629      	mov	r1, r5
 8005520:	f000 f9ca 	bl	80058b8 <__kernel_rem_pio2f>
 8005524:	2e00      	cmp	r6, #0
 8005526:	da11      	bge.n	800554c <__ieee754_rem_pio2f+0xec>
 8005528:	ed95 7a00 	vldr	s14, [r5]
 800552c:	edd5 7a01 	vldr	s15, [r5, #4]
 8005530:	eeb1 7a47 	vneg.f32	s14, s14
 8005534:	eef1 7a67 	vneg.f32	s15, s15
 8005538:	4240      	negs	r0, r0
 800553a:	ed85 7a00 	vstr	s14, [r5]
 800553e:	edc5 7a01 	vstr	s15, [r5, #4]
 8005542:	e003      	b.n	800554c <__ieee754_rem_pio2f+0xec>
 8005544:	2200      	movs	r2, #0
 8005546:	6028      	str	r0, [r5, #0]
 8005548:	604a      	str	r2, [r1, #4]
 800554a:	2000      	movs	r0, #0
 800554c:	b006      	add	sp, #24
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	ee07 0a90 	vmov	s15, r0
 8005554:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8005558:	2000      	movs	r0, #0
 800555a:	edc1 7a01 	vstr	s15, [r1, #4]
 800555e:	edc1 7a00 	vstr	s15, [r1]
 8005562:	e7f3      	b.n	800554c <__ieee754_rem_pio2f+0xec>
 8005564:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80056e0 <__ieee754_rem_pio2f+0x280>
 8005568:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80056e4 <__ieee754_rem_pio2f+0x284>
 800556c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005570:	2001      	movs	r0, #1
 8005572:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005576:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800557a:	edc1 6a00 	vstr	s13, [r1]
 800557e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005582:	edc1 7a01 	vstr	s15, [r1, #4]
 8005586:	e7e1      	b.n	800554c <__ieee754_rem_pio2f+0xec>
 8005588:	f7ff fec0 	bl	800530c <fabsf>
 800558c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 80056e8 <__ieee754_rem_pio2f+0x288>
 8005590:	ed9f 5a4d 	vldr	s10, [pc, #308]	; 80056c8 <__ieee754_rem_pio2f+0x268>
 8005594:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80056d0 <__ieee754_rem_pio2f+0x270>
 8005598:	ee07 0a10 	vmov	s14, r0
 800559c:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 80055a0:	eee7 7a06 	vfma.f32	s15, s14, s12
 80055a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80055ac:	ee17 0a90 	vmov	r0, s15
 80055b0:	eef1 5a46 	vneg.f32	s11, s12
 80055b4:	eef0 7a47 	vmov.f32	s15, s14
 80055b8:	281f      	cmp	r0, #31
 80055ba:	eee5 7a85 	vfma.f32	s15, s11, s10
 80055be:	ee26 7a26 	vmul.f32	s14, s12, s13
 80055c2:	dc1d      	bgt.n	8005600 <__ieee754_rem_pio2f+0x1a0>
 80055c4:	4a49      	ldr	r2, [pc, #292]	; (80056ec <__ieee754_rem_pio2f+0x28c>)
 80055c6:	1e41      	subs	r1, r0, #1
 80055c8:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
 80055cc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d015      	beq.n	8005600 <__ieee754_rem_pio2f+0x1a0>
 80055d4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80055d8:	edc5 6a00 	vstr	s13, [r5]
 80055dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055e0:	2e00      	cmp	r6, #0
 80055e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055e6:	edc5 7a01 	vstr	s15, [r5, #4]
 80055ea:	daaf      	bge.n	800554c <__ieee754_rem_pio2f+0xec>
 80055ec:	eef1 6a66 	vneg.f32	s13, s13
 80055f0:	eef1 7a67 	vneg.f32	s15, s15
 80055f4:	edc5 6a00 	vstr	s13, [r5]
 80055f8:	edc5 7a01 	vstr	s15, [r5, #4]
 80055fc:	4240      	negs	r0, r0
 80055fe:	e7a5      	b.n	800554c <__ieee754_rem_pio2f+0xec>
 8005600:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005604:	15e4      	asrs	r4, r4, #23
 8005606:	ee16 3a90 	vmov	r3, s13
 800560a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800560e:	1ae3      	subs	r3, r4, r3
 8005610:	2b08      	cmp	r3, #8
 8005612:	dde1      	ble.n	80055d8 <__ieee754_rem_pio2f+0x178>
 8005614:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80056e0 <__ieee754_rem_pio2f+0x280>
 8005618:	eddf 6a32 	vldr	s13, [pc, #200]	; 80056e4 <__ieee754_rem_pio2f+0x284>
 800561c:	eeb0 5a67 	vmov.f32	s10, s15
 8005620:	eea5 5a87 	vfma.f32	s10, s11, s14
 8005624:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005628:	eee5 7a87 	vfma.f32	s15, s11, s14
 800562c:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8005630:	ee75 6a67 	vsub.f32	s13, s10, s15
 8005634:	eeb0 7a67 	vmov.f32	s14, s15
 8005638:	ee16 3a90 	vmov	r3, s13
 800563c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8005640:	1ae4      	subs	r4, r4, r3
 8005642:	2c19      	cmp	r4, #25
 8005644:	dc2c      	bgt.n	80056a0 <__ieee754_rem_pio2f+0x240>
 8005646:	edc5 6a00 	vstr	s13, [r5]
 800564a:	eef0 7a45 	vmov.f32	s15, s10
 800564e:	e7c5      	b.n	80055dc <__ieee754_rem_pio2f+0x17c>
 8005650:	4294      	cmp	r4, r2
 8005652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005656:	d010      	beq.n	800567a <__ieee754_rem_pio2f+0x21a>
 8005658:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80056d0 <__ieee754_rem_pio2f+0x270>
 800565c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005668:	edc1 6a00 	vstr	s13, [r1]
 800566c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005670:	edc1 7a01 	vstr	s15, [r1, #4]
 8005674:	e76a      	b.n	800554c <__ieee754_rem_pio2f+0xec>
 8005676:	2303      	movs	r3, #3
 8005678:	e74c      	b.n	8005514 <__ieee754_rem_pio2f+0xb4>
 800567a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80056e0 <__ieee754_rem_pio2f+0x280>
 800567e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80056e4 <__ieee754_rem_pio2f+0x284>
 8005682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005686:	f04f 30ff 	mov.w	r0, #4294967295
 800568a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800568e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005692:	edc1 6a00 	vstr	s13, [r1]
 8005696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800569a:	edc1 7a01 	vstr	s15, [r1, #4]
 800569e:	e755      	b.n	800554c <__ieee754_rem_pio2f+0xec>
 80056a0:	eddf 6a13 	vldr	s13, [pc, #76]	; 80056f0 <__ieee754_rem_pio2f+0x290>
 80056a4:	eddf 4a13 	vldr	s9, [pc, #76]	; 80056f4 <__ieee754_rem_pio2f+0x294>
 80056a8:	eef0 7a45 	vmov.f32	s15, s10
 80056ac:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80056b0:	ee35 7a67 	vsub.f32	s14, s10, s15
 80056b4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80056b8:	ee96 7a24 	vfnms.f32	s14, s12, s9
 80056bc:	e78a      	b.n	80055d4 <__ieee754_rem_pio2f+0x174>
 80056be:	bf00      	nop
 80056c0:	3f490fd8 	.word	0x3f490fd8
 80056c4:	4016cbe3 	.word	0x4016cbe3
 80056c8:	3fc90f80 	.word	0x3fc90f80
 80056cc:	3fc90fd0 	.word	0x3fc90fd0
 80056d0:	37354443 	.word	0x37354443
 80056d4:	43490f80 	.word	0x43490f80
 80056d8:	43800000 	.word	0x43800000
 80056dc:	080076ec 	.word	0x080076ec
 80056e0:	37354400 	.word	0x37354400
 80056e4:	2e85a308 	.word	0x2e85a308
 80056e8:	3f22f984 	.word	0x3f22f984
 80056ec:	0800766c 	.word	0x0800766c
 80056f0:	2e85a300 	.word	0x2e85a300
 80056f4:	248d3132 	.word	0x248d3132

080056f8 <__ieee754_sqrtf>:
 80056f8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80056fc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005700:	b470      	push	{r4, r5, r6}
 8005702:	ee07 0a90 	vmov	s15, r0
 8005706:	4603      	mov	r3, r0
 8005708:	d232      	bcs.n	8005770 <__ieee754_sqrtf+0x78>
 800570a:	b36a      	cbz	r2, 8005768 <__ieee754_sqrtf+0x70>
 800570c:	2800      	cmp	r0, #0
 800570e:	db41      	blt.n	8005794 <__ieee754_sqrtf+0x9c>
 8005710:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005714:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8005718:	d330      	bcc.n	800577c <__ieee754_sqrtf+0x84>
 800571a:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 800571e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005722:	07d1      	lsls	r1, r2, #31
 8005724:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005728:	bf48      	it	mi
 800572a:	005b      	lslmi	r3, r3, #1
 800572c:	2400      	movs	r4, #0
 800572e:	1056      	asrs	r6, r2, #1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4625      	mov	r5, r4
 8005734:	2119      	movs	r1, #25
 8005736:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800573a:	18a8      	adds	r0, r5, r2
 800573c:	4298      	cmp	r0, r3
 800573e:	dc02      	bgt.n	8005746 <__ieee754_sqrtf+0x4e>
 8005740:	1a1b      	subs	r3, r3, r0
 8005742:	1885      	adds	r5, r0, r2
 8005744:	4414      	add	r4, r2
 8005746:	3901      	subs	r1, #1
 8005748:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800574c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005750:	d1f3      	bne.n	800573a <__ieee754_sqrtf+0x42>
 8005752:	b113      	cbz	r3, 800575a <__ieee754_sqrtf+0x62>
 8005754:	f004 0301 	and.w	r3, r4, #1
 8005758:	441c      	add	r4, r3
 800575a:	1064      	asrs	r4, r4, #1
 800575c:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8005760:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	ee17 0a90 	vmov	r0, s15
 800576c:	bc70      	pop	{r4, r5, r6}
 800576e:	4770      	bx	lr
 8005770:	eee7 7aa7 	vfma.f32	s15, s15, s15
 8005774:	bc70      	pop	{r4, r5, r6}
 8005776:	ee17 0a90 	vmov	r0, s15
 800577a:	4770      	bx	lr
 800577c:	f410 0200 	ands.w	r2, r0, #8388608	; 0x800000
 8005780:	d10d      	bne.n	800579e <__ieee754_sqrtf+0xa6>
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	0218      	lsls	r0, r3, #8
 8005786:	f102 0201 	add.w	r2, r2, #1
 800578a:	d5fa      	bpl.n	8005782 <__ieee754_sqrtf+0x8a>
 800578c:	f1c2 0201 	rsb	r2, r2, #1
 8005790:	4411      	add	r1, r2
 8005792:	e7c2      	b.n	800571a <__ieee754_sqrtf+0x22>
 8005794:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8005798:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 800579c:	e7e4      	b.n	8005768 <__ieee754_sqrtf+0x70>
 800579e:	2201      	movs	r2, #1
 80057a0:	4411      	add	r1, r2
 80057a2:	e7ba      	b.n	800571a <__ieee754_sqrtf+0x22>

080057a4 <__kernel_cosf>:
 80057a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80057a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80057ac:	ee06 0a10 	vmov	s12, r0
 80057b0:	ee06 1a90 	vmov	s13, r1
 80057b4:	da2e      	bge.n	8005814 <__kernel_cosf+0x70>
 80057b6:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 80057ba:	ee17 3a90 	vmov	r3, s15
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d064      	beq.n	800588c <__kernel_cosf+0xe8>
 80057c2:	ee26 7a06 	vmul.f32	s14, s12, s12
 80057c6:	eddf 3a34 	vldr	s7, [pc, #208]	; 8005898 <__kernel_cosf+0xf4>
 80057ca:	ed9f 4a34 	vldr	s8, [pc, #208]	; 800589c <__kernel_cosf+0xf8>
 80057ce:	eddf 4a34 	vldr	s9, [pc, #208]	; 80058a0 <__kernel_cosf+0xfc>
 80057d2:	ed9f 5a34 	vldr	s10, [pc, #208]	; 80058a4 <__kernel_cosf+0x100>
 80057d6:	eddf 7a34 	vldr	s15, [pc, #208]	; 80058a8 <__kernel_cosf+0x104>
 80057da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058ac <__kernel_cosf+0x108>
 80057de:	eea7 4a23 	vfma.f32	s8, s14, s7
 80057e2:	eee4 4a07 	vfma.f32	s9, s8, s14
 80057e6:	eea4 5a87 	vfma.f32	s10, s9, s14
 80057ea:	eee5 7a07 	vfma.f32	s15, s10, s14
 80057ee:	eee7 5a87 	vfma.f32	s11, s15, s14
 80057f2:	ee65 5a87 	vmul.f32	s11, s11, s14
 80057f6:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 80057fa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 80057fe:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005802:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8005806:	eed7 6a06 	vfnms.f32	s13, s14, s12
 800580a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800580e:	ee17 0a90 	vmov	r0, s15
 8005812:	4770      	bx	lr
 8005814:	ee26 7a06 	vmul.f32	s14, s12, s12
 8005818:	eddf 3a1f 	vldr	s7, [pc, #124]	; 8005898 <__kernel_cosf+0xf4>
 800581c:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 800589c <__kernel_cosf+0xf8>
 8005820:	eddf 4a1f 	vldr	s9, [pc, #124]	; 80058a0 <__kernel_cosf+0xfc>
 8005824:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80058a4 <__kernel_cosf+0x100>
 8005828:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80058a8 <__kernel_cosf+0x104>
 800582c:	eddf 5a1f 	vldr	s11, [pc, #124]	; 80058ac <__kernel_cosf+0x108>
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <__kernel_cosf+0x10c>)
 8005832:	eea7 4a23 	vfma.f32	s8, s14, s7
 8005836:	4293      	cmp	r3, r2
 8005838:	eee4 4a07 	vfma.f32	s9, s8, s14
 800583c:	eea4 5a87 	vfma.f32	s10, s9, s14
 8005840:	eee5 7a07 	vfma.f32	s15, s10, s14
 8005844:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005848:	ee65 5a87 	vmul.f32	s11, s11, s14
 800584c:	ddd3      	ble.n	80057f6 <__kernel_cosf+0x52>
 800584e:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <__kernel_cosf+0x110>)
 8005850:	4293      	cmp	r3, r2
 8005852:	dc16      	bgt.n	8005882 <__kernel_cosf+0xde>
 8005854:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8005858:	ee07 3a90 	vmov	s15, r3
 800585c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x70
 8005860:	ee35 5a67 	vsub.f32	s10, s10, s15
 8005864:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 8005868:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
 800586c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005870:	eed7 7a06 	vfnms.f32	s15, s14, s12
 8005874:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005878:	ee75 7a67 	vsub.f32	s15, s10, s15
 800587c:	ee17 0a90 	vmov	r0, s15
 8005880:	4770      	bx	lr
 8005882:	eeb6 5a07 	vmov.f32	s10, #103	; 0x67
 8005886:	eef5 7a02 	vmov.f32	s15, #82	; 0x52
 800588a:	e7eb      	b.n	8005864 <__kernel_cosf+0xc0>
 800588c:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8005890:	ee17 0a90 	vmov	r0, s15
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	ad47d74e 	.word	0xad47d74e
 800589c:	310f74f6 	.word	0x310f74f6
 80058a0:	b493f27c 	.word	0xb493f27c
 80058a4:	37d00d01 	.word	0x37d00d01
 80058a8:	bab60b61 	.word	0xbab60b61
 80058ac:	3d2aaaab 	.word	0x3d2aaaab
 80058b0:	3e999999 	.word	0x3e999999
 80058b4:	3f480000 	.word	0x3f480000

080058b8 <__kernel_rem_pio2f>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	ed2d 8b04 	vpush	{d8-d9}
 80058c0:	b0d7      	sub	sp, #348	; 0x15c
 80058c2:	1e5e      	subs	r6, r3, #1
 80058c4:	4ca5      	ldr	r4, [pc, #660]	; (8005b5c <__kernel_rem_pio2f+0x2a4>)
 80058c6:	9d64      	ldr	r5, [sp, #400]	; 0x190
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	1ed3      	subs	r3, r2, #3
 80058cc:	bf48      	it	mi
 80058ce:	1d13      	addmi	r3, r2, #4
 80058d0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80058d4:	9101      	str	r1, [sp, #4]
 80058d6:	10db      	asrs	r3, r3, #3
 80058d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058dc:	ea6f 0a03 	mvn.w	sl, r3
 80058e0:	1971      	adds	r1, r6, r5
 80058e2:	9303      	str	r3, [sp, #12]
 80058e4:	4681      	mov	r9, r0
 80058e6:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 80058ea:	eba3 0306 	sub.w	r3, r3, r6
 80058ee:	d414      	bmi.n	800591a <__kernel_rem_pio2f+0x62>
 80058f0:	4419      	add	r1, r3
 80058f2:	9865      	ldr	r0, [sp, #404]	; 0x194
 80058f4:	3101      	adds	r1, #1
 80058f6:	aa1a      	add	r2, sp, #104	; 0x68
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfaa      	itet	ge
 80058fc:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8005900:	eddf 7a97 	vldrlt	s15, [pc, #604]	; 8005b60 <__kernel_rem_pio2f+0x2a8>
 8005904:	ee07 4a90 	vmovge	s15, r4
 8005908:	f103 0301 	add.w	r3, r3, #1
 800590c:	bfa8      	it	ge
 800590e:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 8005912:	428b      	cmp	r3, r1
 8005914:	ece2 7a01 	vstmia	r2!, {s15}
 8005918:	d1ee      	bne.n	80058f8 <__kernel_rem_pio2f+0x40>
 800591a:	2d00      	cmp	r5, #0
 800591c:	db1a      	blt.n	8005954 <__kernel_rem_pio2f+0x9c>
 800591e:	9b02      	ldr	r3, [sp, #8]
 8005920:	a91a      	add	r1, sp, #104	; 0x68
 8005922:	1c6c      	adds	r4, r5, #1
 8005924:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8005928:	a842      	add	r0, sp, #264	; 0x108
 800592a:	009f      	lsls	r7, r3, #2
 800592c:	2e00      	cmp	r6, #0
 800592e:	f2c0 81ce 	blt.w	8005cce <__kernel_rem_pio2f+0x416>
 8005932:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8005b60 <__kernel_rem_pio2f+0x2a8>
 8005936:	464a      	mov	r2, r9
 8005938:	19cb      	adds	r3, r1, r7
 800593a:	ed33 7a01 	vldmdb	r3!, {s14}
 800593e:	ecf2 6a01 	vldmia	r2!, {s13}
 8005942:	4299      	cmp	r1, r3
 8005944:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005948:	d1f7      	bne.n	800593a <__kernel_rem_pio2f+0x82>
 800594a:	3104      	adds	r1, #4
 800594c:	42a1      	cmp	r1, r4
 800594e:	ece0 7a01 	vstmia	r0!, {s15}
 8005952:	d1eb      	bne.n	800592c <__kernel_rem_pio2f+0x74>
 8005954:	9a02      	ldr	r2, [sp, #8]
 8005956:	eddf 8a84 	vldr	s17, [pc, #528]	; 8005b68 <__kernel_rem_pio2f+0x2b0>
 800595a:	ed9f 8a82 	vldr	s16, [pc, #520]	; 8005b64 <__kernel_rem_pio2f+0x2ac>
 800595e:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8005962:	3b01      	subs	r3, #1
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	ebc2 7882 	rsb	r8, r2, r2, lsl #30
 800596a:	aa06      	add	r2, sp, #24
 800596c:	1d1f      	adds	r7, r3, #4
 800596e:	4413      	add	r3, r2
 8005970:	4417      	add	r7, r2
 8005972:	9304      	str	r3, [sp, #16]
 8005974:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005978:	462c      	mov	r4, r5
 800597a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800597e:	ab56      	add	r3, sp, #344	; 0x158
 8005980:	445b      	add	r3, fp
 8005982:	2c00      	cmp	r4, #0
 8005984:	ed53 6a14 	vldr	s13, [r3, #-80]	; 0xffffffb0
 8005988:	dd19      	ble.n	80059be <__kernel_rem_pio2f+0x106>
 800598a:	a942      	add	r1, sp, #264	; 0x108
 800598c:	eb01 030b 	add.w	r3, r1, fp
 8005990:	aa05      	add	r2, sp, #20
 8005992:	ee66 7aa8 	vmul.f32	s15, s13, s17
 8005996:	eeb0 7a66 	vmov.f32	s14, s13
 800599a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800599e:	ed33 6a01 	vldmdb	r3!, {s12}
 80059a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059a6:	428b      	cmp	r3, r1
 80059a8:	eea7 7ac8 	vfms.f32	s14, s15, s16
 80059ac:	ee77 6a86 	vadd.f32	s13, s15, s12
 80059b0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80059b4:	ee17 0a10 	vmov	r0, s14
 80059b8:	f842 0f04 	str.w	r0, [r2, #4]!
 80059bc:	d1e9      	bne.n	8005992 <__kernel_rem_pio2f+0xda>
 80059be:	ee16 0a90 	vmov	r0, s13
 80059c2:	4651      	mov	r1, sl
 80059c4:	f000 fb50 	bl	8006068 <scalbnf>
 80059c8:	ee09 0a10 	vmov	s18, r0
 80059cc:	eef4 7a00 	vmov.f32	s15, #64	; 0x40
 80059d0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80059d4:	ee17 0a90 	vmov	r0, s15
 80059d8:	f000 fad2 	bl	8005f80 <floorf>
 80059dc:	ee07 0a10 	vmov	s14, r0
 80059e0:	eef2 7a00 	vmov.f32	s15, #32
 80059e4:	eea7 9a67 	vfms.f32	s18, s14, s15
 80059e8:	f1ba 0f00 	cmp.w	sl, #0
 80059ec:	eefd 9ac9 	vcvt.s32.f32	s19, s18
 80059f0:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 80059f4:	ee39 9a67 	vsub.f32	s18, s18, s15
 80059f8:	f340 814d 	ble.w	8005c96 <__kernel_rem_pio2f+0x3de>
 80059fc:	1e61      	subs	r1, r4, #1
 80059fe:	aa06      	add	r2, sp, #24
 8005a00:	f1ca 0308 	rsb	r3, sl, #8
 8005a04:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005a08:	fa40 f203 	asr.w	r2, r0, r3
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	f10d 0e18 	add.w	lr, sp, #24
 8005a14:	1ac3      	subs	r3, r0, r3
 8005a16:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 8005a1a:	ee19 1a90 	vmov	r1, s19
 8005a1e:	4411      	add	r1, r2
 8005a20:	f1ca 0007 	rsb	r0, sl, #7
 8005a24:	ee09 1a90 	vmov	s19, r1
 8005a28:	fa43 fc00 	asr.w	ip, r3, r0
 8005a2c:	f1bc 0f00 	cmp.w	ip, #0
 8005a30:	dd37      	ble.n	8005aa2 <__kernel_rem_pio2f+0x1ea>
 8005a32:	ee19 3a90 	vmov	r3, s19
 8005a36:	2c00      	cmp	r4, #0
 8005a38:	f103 0301 	add.w	r3, r3, #1
 8005a3c:	ee09 3a90 	vmov	s19, r3
 8005a40:	f340 81de 	ble.w	8005e00 <__kernel_rem_pio2f+0x548>
 8005a44:	2200      	movs	r2, #0
 8005a46:	4610      	mov	r0, r2
 8005a48:	a905      	add	r1, sp, #20
 8005a4a:	e008      	b.n	8005a5e <__kernel_rem_pio2f+0x1a6>
 8005a4c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8005a50:	b113      	cbz	r3, 8005a58 <__kernel_rem_pio2f+0x1a0>
 8005a52:	f8c1 e000 	str.w	lr, [r1]
 8005a56:	2001      	movs	r0, #1
 8005a58:	3201      	adds	r2, #1
 8005a5a:	4294      	cmp	r4, r2
 8005a5c:	dd0b      	ble.n	8005a76 <__kernel_rem_pio2f+0x1be>
 8005a5e:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d0f2      	beq.n	8005a4c <__kernel_rem_pio2f+0x194>
 8005a66:	3201      	adds	r2, #1
 8005a68:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005a6c:	4294      	cmp	r4, r2
 8005a6e:	600b      	str	r3, [r1, #0]
 8005a70:	f04f 0001 	mov.w	r0, #1
 8005a74:	dcf3      	bgt.n	8005a5e <__kernel_rem_pio2f+0x1a6>
 8005a76:	f1ba 0f00 	cmp.w	sl, #0
 8005a7a:	dd0f      	ble.n	8005a9c <__kernel_rem_pio2f+0x1e4>
 8005a7c:	f1ba 0f01 	cmp.w	sl, #1
 8005a80:	f000 8111 	beq.w	8005ca6 <__kernel_rem_pio2f+0x3ee>
 8005a84:	f1ba 0f02 	cmp.w	sl, #2
 8005a88:	d108      	bne.n	8005a9c <__kernel_rem_pio2f+0x1e4>
 8005a8a:	1e62      	subs	r2, r4, #1
 8005a8c:	ab06      	add	r3, sp, #24
 8005a8e:	a906      	add	r1, sp, #24
 8005a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a98:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005a9c:	f1bc 0f02 	cmp.w	ip, #2
 8005aa0:	d064      	beq.n	8005b6c <__kernel_rem_pio2f+0x2b4>
 8005aa2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aaa:	d177      	bne.n	8005b9c <__kernel_rem_pio2f+0x2e4>
 8005aac:	1e63      	subs	r3, r4, #1
 8005aae:	429d      	cmp	r5, r3
 8005ab0:	dc0b      	bgt.n	8005aca <__kernel_rem_pio2f+0x212>
 8005ab2:	aa06      	add	r2, sp, #24
 8005ab4:	4493      	add	fp, r2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8005abc:	45bb      	cmp	fp, r7
 8005abe:	ea42 0201 	orr.w	r2, r2, r1
 8005ac2:	d1f9      	bne.n	8005ab8 <__kernel_rem_pio2f+0x200>
 8005ac4:	2a00      	cmp	r2, #0
 8005ac6:	f040 8185 	bne.w	8005dd4 <__kernel_rem_pio2f+0x51c>
 8005aca:	1e6b      	subs	r3, r5, #1
 8005acc:	aa06      	add	r2, sp, #24
 8005ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f040 8191 	bne.w	8005dfa <__kernel_rem_pio2f+0x542>
 8005ad8:	9b04      	ldr	r3, [sp, #16]
 8005ada:	f04f 0c01 	mov.w	ip, #1
 8005ade:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005ae2:	f10c 0c01 	add.w	ip, ip, #1
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	d0f9      	beq.n	8005ade <__kernel_rem_pio2f+0x226>
 8005aea:	44a4      	add	ip, r4
 8005aec:	1c63      	adds	r3, r4, #1
 8005aee:	4563      	cmp	r3, ip
 8005af0:	dc31      	bgt.n	8005b56 <__kernel_rem_pio2f+0x29e>
 8005af2:	9a03      	ldr	r2, [sp, #12]
 8005af4:	eb03 0e02 	add.w	lr, r3, r2
 8005af8:	9a02      	ldr	r2, [sp, #8]
 8005afa:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8005afe:	18a0      	adds	r0, r4, r2
 8005b00:	eb0c 0b02 	add.w	fp, ip, r2
 8005b04:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8005b06:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005b0a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 8005b0e:	aa1a      	add	r2, sp, #104	; 0x68
 8005b10:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8005b14:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005b18:	aa42      	add	r2, sp, #264	; 0x108
 8005b1a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8005b1e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b2a:	2e00      	cmp	r6, #0
 8005b2c:	ece0 7a01 	vstmia	r0!, {s15}
 8005b30:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8005b60 <__kernel_rem_pio2f+0x2a8>
 8005b34:	db0b      	blt.n	8005b4e <__kernel_rem_pio2f+0x296>
 8005b36:	464a      	mov	r2, r9
 8005b38:	eb00 0108 	add.w	r1, r0, r8
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	ed33 7a01 	vldmdb	r3!, {s14}
 8005b42:	ecf2 6a01 	vldmia	r2!, {s13}
 8005b46:	428b      	cmp	r3, r1
 8005b48:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005b4c:	d1f7      	bne.n	8005b3e <__kernel_rem_pio2f+0x286>
 8005b4e:	4558      	cmp	r0, fp
 8005b50:	ece4 7a01 	vstmia	r4!, {s15}
 8005b54:	d1e3      	bne.n	8005b1e <__kernel_rem_pio2f+0x266>
 8005b56:	4664      	mov	r4, ip
 8005b58:	e70f      	b.n	800597a <__kernel_rem_pio2f+0xc2>
 8005b5a:	bf00      	nop
 8005b5c:	08007a04 	.word	0x08007a04
 8005b60:	00000000 	.word	0x00000000
 8005b64:	43800000 	.word	0x43800000
 8005b68:	3b800000 	.word	0x3b800000
 8005b6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8005b70:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d094      	beq.n	8005aa2 <__kernel_rem_pio2f+0x1ea>
 8005b78:	ee17 0a90 	vmov	r0, s15
 8005b7c:	4651      	mov	r1, sl
 8005b7e:	f8cd c014 	str.w	ip, [sp, #20]
 8005b82:	f000 fa71 	bl	8006068 <scalbnf>
 8005b86:	ee07 0a90 	vmov	s15, r0
 8005b8a:	ee39 9a67 	vsub.f32	s18, s18, s15
 8005b8e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8005b92:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	d087      	beq.n	8005aac <__kernel_rem_pio2f+0x1f4>
 8005b9c:	ee19 0a10 	vmov	r0, s18
 8005ba0:	f1ca 0100 	rsb	r1, sl, #0
 8005ba4:	f8cd c008 	str.w	ip, [sp, #8]
 8005ba8:	f000 fa5e 	bl	8006068 <scalbnf>
 8005bac:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 8005b64 <__kernel_rem_pio2f+0x2ac>
 8005bb0:	f8dd c008 	ldr.w	ip, [sp, #8]
 8005bb4:	ee07 0a10 	vmov	s14, r0
 8005bb8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc0:	f2c0 8181 	blt.w	8005ec6 <__kernel_rem_pio2f+0x60e>
 8005bc4:	ed5f 7a18 	vldr	s15, [pc, #-96]	; 8005b68 <__kernel_rem_pio2f+0x2b0>
 8005bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bcc:	a906      	add	r1, sp, #24
 8005bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bd2:	1c63      	adds	r3, r4, #1
 8005bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bd8:	f10a 0a08 	add.w	sl, sl, #8
 8005bdc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005be4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005be8:	ee17 2a10 	vmov	r2, s14
 8005bec:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8005bf0:	ee17 2a90 	vmov	r2, s15
 8005bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005bf8:	4651      	mov	r1, sl
 8005bfa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005bfe:	9303      	str	r3, [sp, #12]
 8005c00:	f8cd c008 	str.w	ip, [sp, #8]
 8005c04:	f000 fa30 	bl	8006068 <scalbnf>
 8005c08:	9b03      	ldr	r3, [sp, #12]
 8005c0a:	f8dd c008 	ldr.w	ip, [sp, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	ee07 0a10 	vmov	s14, r0
 8005c14:	f2c0 80c2 	blt.w	8005d9c <__kernel_rem_pio2f+0x4e4>
 8005c18:	1c5f      	adds	r7, r3, #1
 8005c1a:	00ba      	lsls	r2, r7, #2
 8005c1c:	a842      	add	r0, sp, #264	; 0x108
 8005c1e:	a906      	add	r1, sp, #24
 8005c20:	ed5f 6a2f 	vldr	s13, [pc, #-188]	; 8005b68 <__kernel_rem_pio2f+0x2b0>
 8005c24:	4411      	add	r1, r2
 8005c26:	1886      	adds	r6, r0, r2
 8005c28:	ed71 7a01 	vldmdb	r1!, {s15}
 8005c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005c38:	ed66 7a01 	vstmdb	r6!, {s15}
 8005c3c:	4286      	cmp	r6, r0
 8005c3e:	d1f3      	bne.n	8005c28 <__kernel_rem_pio2f+0x370>
 8005c40:	3a04      	subs	r2, #4
 8005c42:	4416      	add	r6, r2
 8005c44:	2400      	movs	r4, #0
 8005c46:	2d00      	cmp	r5, #0
 8005c48:	f2c0 80a5 	blt.w	8005d96 <__kernel_rem_pio2f+0x4de>
 8005c4c:	2c00      	cmp	r4, #0
 8005c4e:	f2c0 80a2 	blt.w	8005d96 <__kernel_rem_pio2f+0x4de>
 8005c52:	48a1      	ldr	r0, [pc, #644]	; (8005ed8 <__kernel_rem_pio2f+0x620>)
 8005c54:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8005edc <__kernel_rem_pio2f+0x624>
 8005c58:	4631      	mov	r1, r6
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	e001      	b.n	8005c62 <__kernel_rem_pio2f+0x3aa>
 8005c5e:	42a2      	cmp	r2, r4
 8005c60:	dc08      	bgt.n	8005c74 <__kernel_rem_pio2f+0x3bc>
 8005c62:	ecf0 6a01 	vldmia	r0!, {s13}
 8005c66:	ecb1 7a01 	vldmia	r1!, {s14}
 8005c6a:	3201      	adds	r2, #1
 8005c6c:	4295      	cmp	r5, r2
 8005c6e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005c72:	daf4      	bge.n	8005c5e <__kernel_rem_pio2f+0x3a6>
 8005c74:	aa56      	add	r2, sp, #344	; 0x158
 8005c76:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005c7a:	3401      	adds	r4, #1
 8005c7c:	42bc      	cmp	r4, r7
 8005c7e:	f1a6 0604 	sub.w	r6, r6, #4
 8005c82:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8005c86:	d1de      	bne.n	8005c46 <__kernel_rem_pio2f+0x38e>
 8005c88:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005c8a:	2a03      	cmp	r2, #3
 8005c8c:	d865      	bhi.n	8005d5a <__kernel_rem_pio2f+0x4a2>
 8005c8e:	e8df f002 	tbb	[pc, r2]
 8005c92:	3a6d      	.short	0x3a6d
 8005c94:	b93a      	.short	0xb93a
 8005c96:	d110      	bne.n	8005cba <__kernel_rem_pio2f+0x402>
 8005c98:	1e63      	subs	r3, r4, #1
 8005c9a:	aa06      	add	r2, sp, #24
 8005c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8005ca4:	e6c2      	b.n	8005a2c <__kernel_rem_pio2f+0x174>
 8005ca6:	1e62      	subs	r2, r4, #1
 8005ca8:	ab06      	add	r3, sp, #24
 8005caa:	a906      	add	r1, sp, #24
 8005cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005cb8:	e6f0      	b.n	8005a9c <__kernel_rem_pio2f+0x1e4>
 8005cba:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8005cbe:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8005cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc6:	da0b      	bge.n	8005ce0 <__kernel_rem_pio2f+0x428>
 8005cc8:	f04f 0c00 	mov.w	ip, #0
 8005ccc:	e6e9      	b.n	8005aa2 <__kernel_rem_pio2f+0x1ea>
 8005cce:	eddf 7a83 	vldr	s15, [pc, #524]	; 8005edc <__kernel_rem_pio2f+0x624>
 8005cd2:	3104      	adds	r1, #4
 8005cd4:	42a1      	cmp	r1, r4
 8005cd6:	ece0 7a01 	vstmia	r0!, {s15}
 8005cda:	f47f ae27 	bne.w	800592c <__kernel_rem_pio2f+0x74>
 8005cde:	e639      	b.n	8005954 <__kernel_rem_pio2f+0x9c>
 8005ce0:	ee19 3a90 	vmov	r3, s19
 8005ce4:	2c00      	cmp	r4, #0
 8005ce6:	f103 0301 	add.w	r3, r3, #1
 8005cea:	ee09 3a90 	vmov	s19, r3
 8005cee:	bfc8      	it	gt
 8005cf0:	f04f 0c02 	movgt.w	ip, #2
 8005cf4:	f73f aea6 	bgt.w	8005a44 <__kernel_rem_pio2f+0x18c>
 8005cf8:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8005cfc:	ee37 9ac9 	vsub.f32	s18, s15, s18
 8005d00:	f04f 0c02 	mov.w	ip, #2
 8005d04:	e6cd      	b.n	8005aa2 <__kernel_rem_pio2f+0x1ea>
 8005d06:	aa2e      	add	r2, sp, #184	; 0xb8
 8005d08:	eddf 7a74 	vldr	s15, [pc, #464]	; 8005edc <__kernel_rem_pio2f+0x624>
 8005d0c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005d10:	ed37 7a01 	vldmdb	r7!, {s14}
 8005d14:	4297      	cmp	r7, r2
 8005d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d1a:	d1f9      	bne.n	8005d10 <__kernel_rem_pio2f+0x458>
 8005d1c:	f1bc 0f00 	cmp.w	ip, #0
 8005d20:	d048      	beq.n	8005db4 <__kernel_rem_pio2f+0x4fc>
 8005d22:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005d26:	9a01      	ldr	r2, [sp, #4]
 8005d28:	eeb1 7a67 	vneg.f32	s14, s15
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d32:	ed82 7a00 	vstr	s14, [r2]
 8005d36:	dd0b      	ble.n	8005d50 <__kernel_rem_pio2f+0x498>
 8005d38:	a92f      	add	r1, sp, #188	; 0xbc
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	ecb1 7a01 	vldmia	r1!, {s14}
 8005d40:	3201      	adds	r2, #1
 8005d42:	4293      	cmp	r3, r2
 8005d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d48:	daf8      	bge.n	8005d3c <__kernel_rem_pio2f+0x484>
 8005d4a:	f1bc 0f00 	cmp.w	ip, #0
 8005d4e:	d001      	beq.n	8005d54 <__kernel_rem_pio2f+0x49c>
 8005d50:	eef1 7a67 	vneg.f32	s15, s15
 8005d54:	9b01      	ldr	r3, [sp, #4]
 8005d56:	edc3 7a01 	vstr	s15, [r3, #4]
 8005d5a:	ee19 3a90 	vmov	r3, s19
 8005d5e:	f003 0007 	and.w	r0, r3, #7
 8005d62:	b057      	add	sp, #348	; 0x15c
 8005d64:	ecbd 8b04 	vpop	{d8-d9}
 8005d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6c:	aa2e      	add	r2, sp, #184	; 0xb8
 8005d6e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005edc <__kernel_rem_pio2f+0x624>
 8005d72:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005d76:	ed37 7a01 	vldmdb	r7!, {s14}
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d82:	d1f8      	bne.n	8005d76 <__kernel_rem_pio2f+0x4be>
 8005d84:	f1bc 0f00 	cmp.w	ip, #0
 8005d88:	d001      	beq.n	8005d8e <__kernel_rem_pio2f+0x4d6>
 8005d8a:	eef1 7a67 	vneg.f32	s15, s15
 8005d8e:	9b01      	ldr	r3, [sp, #4]
 8005d90:	edc3 7a00 	vstr	s15, [r3]
 8005d94:	e7e1      	b.n	8005d5a <__kernel_rem_pio2f+0x4a2>
 8005d96:	eddf 7a51 	vldr	s15, [pc, #324]	; 8005edc <__kernel_rem_pio2f+0x624>
 8005d9a:	e76b      	b.n	8005c74 <__kernel_rem_pio2f+0x3bc>
 8005d9c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005d9e:	2a03      	cmp	r2, #3
 8005da0:	d8db      	bhi.n	8005d5a <__kernel_rem_pio2f+0x4a2>
 8005da2:	e8df f002 	tbb	[pc, r2]
 8005da6:	0214      	.short	0x0214
 8005da8:	8302      	.short	0x8302
 8005daa:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8005edc <__kernel_rem_pio2f+0x624>
 8005dae:	f1bc 0f00 	cmp.w	ip, #0
 8005db2:	d1b6      	bne.n	8005d22 <__kernel_rem_pio2f+0x46a>
 8005db4:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8005db8:	9a01      	ldr	r2, [sp, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	edc2 7a00 	vstr	s15, [r2]
 8005dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dc4:	dcb8      	bgt.n	8005d38 <__kernel_rem_pio2f+0x480>
 8005dc6:	9b01      	ldr	r3, [sp, #4]
 8005dc8:	edc3 7a01 	vstr	s15, [r3, #4]
 8005dcc:	e7c5      	b.n	8005d5a <__kernel_rem_pio2f+0x4a2>
 8005dce:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005edc <__kernel_rem_pio2f+0x624>
 8005dd2:	e7d7      	b.n	8005d84 <__kernel_rem_pio2f+0x4cc>
 8005dd4:	aa06      	add	r2, sp, #24
 8005dd6:	f1aa 0a08 	sub.w	sl, sl, #8
 8005dda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005dde:	2a00      	cmp	r2, #0
 8005de0:	f47f af0a 	bne.w	8005bf8 <__kernel_rem_pio2f+0x340>
 8005de4:	aa06      	add	r2, sp, #24
 8005de6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005dea:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005dee:	3b01      	subs	r3, #1
 8005df0:	f1aa 0a08 	sub.w	sl, sl, #8
 8005df4:	2900      	cmp	r1, #0
 8005df6:	d0f8      	beq.n	8005dea <__kernel_rem_pio2f+0x532>
 8005df8:	e6fe      	b.n	8005bf8 <__kernel_rem_pio2f+0x340>
 8005dfa:	f04f 0c01 	mov.w	ip, #1
 8005dfe:	e674      	b.n	8005aea <__kernel_rem_pio2f+0x232>
 8005e00:	2000      	movs	r0, #0
 8005e02:	e638      	b.n	8005a76 <__kernel_rem_pio2f+0x1be>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	dd51      	ble.n	8005eac <__kernel_rem_pio2f+0x5f4>
 8005e08:	009a      	lsls	r2, r3, #2
 8005e0a:	a956      	add	r1, sp, #344	; 0x158
 8005e0c:	4411      	add	r1, r2
 8005e0e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e10:	1d10      	adds	r0, r2, #4
 8005e12:	ed11 7a28 	vldr	s14, [r1, #-160]	; 0xffffff60
 8005e16:	4420      	add	r0, r4
 8005e18:	18a1      	adds	r1, r4, r2
 8005e1a:	ed71 7a01 	vldmdb	r1!, {s15}
 8005e1e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8005e22:	42a1      	cmp	r1, r4
 8005e24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e2c:	eeb0 7a66 	vmov.f32	s14, s13
 8005e30:	ed60 7a01 	vstmdb	r0!, {s15}
 8005e34:	edc1 6a00 	vstr	s13, [r1]
 8005e38:	d1ef      	bne.n	8005e1a <__kernel_rem_pio2f+0x562>
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	dd36      	ble.n	8005eac <__kernel_rem_pio2f+0x5f4>
 8005e3e:	1d13      	adds	r3, r2, #4
 8005e40:	a856      	add	r0, sp, #344	; 0x158
 8005e42:	4410      	add	r0, r2
 8005e44:	440b      	add	r3, r1
 8005e46:	ed10 7a28 	vldr	s14, [r0, #-160]	; 0xffffff60
 8005e4a:	440a      	add	r2, r1
 8005e4c:	a82f      	add	r0, sp, #188	; 0xbc
 8005e4e:	4619      	mov	r1, r3
 8005e50:	ed72 7a01 	vldmdb	r2!, {s15}
 8005e54:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005e58:	4282      	cmp	r2, r0
 8005e5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e62:	eeb0 7a66 	vmov.f32	s14, s13
 8005e66:	ed61 7a01 	vstmdb	r1!, {s15}
 8005e6a:	edc2 6a00 	vstr	s13, [r2]
 8005e6e:	d1ef      	bne.n	8005e50 <__kernel_rem_pio2f+0x598>
 8005e70:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8005edc <__kernel_rem_pio2f+0x624>
 8005e74:	aa30      	add	r2, sp, #192	; 0xc0
 8005e76:	ed33 7a01 	vldmdb	r3!, {s14}
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e80:	d1f9      	bne.n	8005e76 <__kernel_rem_pio2f+0x5be>
 8005e82:	f1bc 0f00 	cmp.w	ip, #0
 8005e86:	d016      	beq.n	8005eb6 <__kernel_rem_pio2f+0x5fe>
 8005e88:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005e8c:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8005e90:	9a01      	ldr	r2, [sp, #4]
 8005e92:	eef1 7a67 	vneg.f32	s15, s15
 8005e96:	eef1 6a66 	vneg.f32	s13, s13
 8005e9a:	eeb1 7a47 	vneg.f32	s14, s14
 8005e9e:	edc2 7a02 	vstr	s15, [r2, #8]
 8005ea2:	edc2 6a00 	vstr	s13, [r2]
 8005ea6:	ed82 7a01 	vstr	s14, [r2, #4]
 8005eaa:	e756      	b.n	8005d5a <__kernel_rem_pio2f+0x4a2>
 8005eac:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8005edc <__kernel_rem_pio2f+0x624>
 8005eb0:	f1bc 0f00 	cmp.w	ip, #0
 8005eb4:	d1e8      	bne.n	8005e88 <__kernel_rem_pio2f+0x5d0>
 8005eb6:	9801      	ldr	r0, [sp, #4]
 8005eb8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8005eba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8005ebc:	edc0 7a02 	vstr	s15, [r0, #8]
 8005ec0:	6002      	str	r2, [r0, #0]
 8005ec2:	6043      	str	r3, [r0, #4]
 8005ec4:	e749      	b.n	8005d5a <__kernel_rem_pio2f+0x4a2>
 8005ec6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005eca:	a906      	add	r1, sp, #24
 8005ecc:	ee17 2a10 	vmov	r2, s14
 8005ed0:	4623      	mov	r3, r4
 8005ed2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8005ed6:	e68f      	b.n	8005bf8 <__kernel_rem_pio2f+0x340>
 8005ed8:	08007a10 	.word	0x08007a10
 8005edc:	00000000 	.word	0x00000000

08005ee0 <__kernel_sinf>:
 8005ee0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005ee4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005ee8:	ee07 0a90 	vmov	s15, r0
 8005eec:	ee06 1a10 	vmov	s12, r1
 8005ef0:	da04      	bge.n	8005efc <__kernel_sinf+0x1c>
 8005ef2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005ef6:	ee17 3a10 	vmov	r3, s14
 8005efa:	b323      	cbz	r3, 8005f46 <__kernel_sinf+0x66>
 8005efc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005f00:	ed9f 4a17 	vldr	s8, [pc, #92]	; 8005f60 <__kernel_sinf+0x80>
 8005f04:	eddf 4a17 	vldr	s9, [pc, #92]	; 8005f64 <__kernel_sinf+0x84>
 8005f08:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8005f68 <__kernel_sinf+0x88>
 8005f0c:	eddf 5a17 	vldr	s11, [pc, #92]	; 8005f6c <__kernel_sinf+0x8c>
 8005f10:	eddf 6a17 	vldr	s13, [pc, #92]	; 8005f70 <__kernel_sinf+0x90>
 8005f14:	eee7 4a04 	vfma.f32	s9, s14, s8
 8005f18:	ee27 4a27 	vmul.f32	s8, s14, s15
 8005f1c:	eea4 5a87 	vfma.f32	s10, s9, s14
 8005f20:	eee5 5a07 	vfma.f32	s11, s10, s14
 8005f24:	eee5 6a87 	vfma.f32	s13, s11, s14
 8005f28:	b182      	cbz	r2, 8005f4c <__kernel_sinf+0x6c>
 8005f2a:	ee66 6ac4 	vnmul.f32	s13, s13, s8
 8005f2e:	eef6 5a00 	vmov.f32	s11, #96	; 0x60
 8005f32:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005f36:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8005f74 <__kernel_sinf+0x94>
 8005f3a:	ee96 6a87 	vfnms.f32	s12, s13, s14
 8005f3e:	eea4 6a25 	vfma.f32	s12, s8, s11
 8005f42:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005f46:	ee17 0a90 	vmov	r0, s15
 8005f4a:	4770      	bx	lr
 8005f4c:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8005f78 <__kernel_sinf+0x98>
 8005f50:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005f54:	eee6 7a04 	vfma.f32	s15, s12, s8
 8005f58:	ee17 0a90 	vmov	r0, s15
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	2f2ec9d3 	.word	0x2f2ec9d3
 8005f64:	b2d72f34 	.word	0xb2d72f34
 8005f68:	3638ef1b 	.word	0x3638ef1b
 8005f6c:	b9500d01 	.word	0xb9500d01
 8005f70:	3c088889 	.word	0x3c088889
 8005f74:	3e2aaaab 	.word	0x3e2aaaab
 8005f78:	be2aaaab 	.word	0xbe2aaaab

08005f7c <matherr>:
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	4770      	bx	lr

08005f80 <floorf>:
 8005f80:	b410      	push	{r4}
 8005f82:	b083      	sub	sp, #12
 8005f84:	9001      	str	r0, [sp, #4]
 8005f86:	9a01      	ldr	r2, [sp, #4]
 8005f88:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8005f8c:	0dcb      	lsrs	r3, r1, #23
 8005f8e:	3b7f      	subs	r3, #127	; 0x7f
 8005f90:	2b16      	cmp	r3, #22
 8005f92:	dc19      	bgt.n	8005fc8 <floorf+0x48>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	4614      	mov	r4, r2
 8005f98:	db28      	blt.n	8005fec <floorf+0x6c>
 8005f9a:	4824      	ldr	r0, [pc, #144]	; (800602c <floorf+0xac>)
 8005f9c:	4118      	asrs	r0, r3
 8005f9e:	4210      	tst	r0, r2
 8005fa0:	d015      	beq.n	8005fce <floorf+0x4e>
 8005fa2:	eddf 7a23 	vldr	s15, [pc, #140]	; 8006030 <floorf+0xb0>
 8005fa6:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb6:	dd28      	ble.n	800600a <floorf+0x8a>
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	db29      	blt.n	8006010 <floorf+0x90>
 8005fbc:	ea24 0000 	bic.w	r0, r4, r0
 8005fc0:	b003      	add	sp, #12
 8005fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005fcc:	d204      	bcs.n	8005fd8 <floorf+0x58>
 8005fce:	9801      	ldr	r0, [sp, #4]
 8005fd0:	b003      	add	sp, #12
 8005fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	eddd 7a01 	vldr	s15, [sp, #4]
 8005fdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fe0:	ee17 0a90 	vmov	r0, s15
 8005fe4:	b003      	add	sp, #12
 8005fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	eddf 7a10 	vldr	s15, [pc, #64]	; 8006030 <floorf+0xb0>
 8005ff0:	ee07 0a10 	vmov	s14, r0
 8005ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006000:	dde5      	ble.n	8005fce <floorf+0x4e>
 8006002:	2a00      	cmp	r2, #0
 8006004:	db0a      	blt.n	800601c <floorf+0x9c>
 8006006:	2000      	movs	r0, #0
 8006008:	e7e2      	b.n	8005fd0 <floorf+0x50>
 800600a:	ee17 0a10 	vmov	r0, s14
 800600e:	e7df      	b.n	8005fd0 <floorf+0x50>
 8006010:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006014:	fa42 f303 	asr.w	r3, r2, r3
 8006018:	441c      	add	r4, r3
 800601a:	e7cf      	b.n	8005fbc <floorf+0x3c>
 800601c:	2900      	cmp	r1, #0
 800601e:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 8006022:	bf18      	it	ne
 8006024:	ee17 0a90 	vmovne	r0, s15
 8006028:	e7d2      	b.n	8005fd0 <floorf+0x50>
 800602a:	bf00      	nop
 800602c:	007fffff 	.word	0x007fffff
 8006030:	7149f2ca 	.word	0x7149f2ca

08006034 <__fpclassifyf>:
 8006034:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 8006038:	d101      	bne.n	800603e <__fpclassifyf+0xa>
 800603a:	2002      	movs	r0, #2
 800603c:	4770      	bx	lr
 800603e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8006042:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8006046:	d201      	bcs.n	800604c <__fpclassifyf+0x18>
 8006048:	2004      	movs	r0, #4
 800604a:	4770      	bx	lr
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <__fpclassifyf+0x30>)
 800604e:	1e42      	subs	r2, r0, #1
 8006050:	429a      	cmp	r2, r3
 8006052:	d801      	bhi.n	8006058 <__fpclassifyf+0x24>
 8006054:	2003      	movs	r0, #3
 8006056:	4770      	bx	lr
 8006058:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 800605c:	fab0 f080 	clz	r0, r0
 8006060:	0940      	lsrs	r0, r0, #5
 8006062:	4770      	bx	lr
 8006064:	007ffffe 	.word	0x007ffffe

08006068 <scalbnf>:
 8006068:	b500      	push	{lr}
 800606a:	ed2d 8b02 	vpush	{d8}
 800606e:	b083      	sub	sp, #12
 8006070:	9001      	str	r0, [sp, #4]
 8006072:	9b01      	ldr	r3, [sp, #4]
 8006074:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006078:	d023      	beq.n	80060c2 <scalbnf+0x5a>
 800607a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800607e:	d215      	bcs.n	80060ac <scalbnf+0x44>
 8006080:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006084:	d326      	bcc.n	80060d4 <scalbnf+0x6c>
 8006086:	0dd2      	lsrs	r2, r2, #23
 8006088:	440a      	add	r2, r1
 800608a:	2afe      	cmp	r2, #254	; 0xfe
 800608c:	dc3c      	bgt.n	8006108 <scalbnf+0xa0>
 800608e:	2a00      	cmp	r2, #0
 8006090:	dd30      	ble.n	80060f4 <scalbnf+0x8c>
 8006092:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006096:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	ee17 0a90 	vmov	r0, s15
 80060a2:	b003      	add	sp, #12
 80060a4:	ecbd 8b02 	vpop	{d8}
 80060a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80060ac:	ee07 0a90 	vmov	s15, r0
 80060b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060b4:	ee17 0a90 	vmov	r0, s15
 80060b8:	b003      	add	sp, #12
 80060ba:	ecbd 8b02 	vpop	{d8}
 80060be:	f85d fb04 	ldr.w	pc, [sp], #4
 80060c2:	eddd 7a01 	vldr	s15, [sp, #4]
 80060c6:	ee17 0a90 	vmov	r0, s15
 80060ca:	b003      	add	sp, #12
 80060cc:	ecbd 8b02 	vpop	{d8}
 80060d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80060d4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80060d8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006154 <scalbnf+0xec>
 80060dc:	4b1e      	ldr	r3, [pc, #120]	; (8006158 <scalbnf+0xf0>)
 80060de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e2:	4299      	cmp	r1, r3
 80060e4:	edcd 7a01 	vstr	s15, [sp, #4]
 80060e8:	db20      	blt.n	800612c <scalbnf+0xc4>
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80060f0:	3a19      	subs	r2, #25
 80060f2:	e7c9      	b.n	8006088 <scalbnf+0x20>
 80060f4:	f112 0f16 	cmn.w	r2, #22
 80060f8:	da1f      	bge.n	800613a <scalbnf+0xd2>
 80060fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80060fe:	4299      	cmp	r1, r3
 8006100:	dc02      	bgt.n	8006108 <scalbnf+0xa0>
 8006102:	ed9f 8a16 	vldr	s16, [pc, #88]	; 800615c <scalbnf+0xf4>
 8006106:	e001      	b.n	800610c <scalbnf+0xa4>
 8006108:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8006160 <scalbnf+0xf8>
 800610c:	9901      	ldr	r1, [sp, #4]
 800610e:	ee18 0a10 	vmov	r0, s16
 8006112:	f000 f829 	bl	8006168 <copysignf>
 8006116:	ee07 0a90 	vmov	s15, r0
 800611a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800611e:	ee17 0a90 	vmov	r0, s15
 8006122:	b003      	add	sp, #12
 8006124:	ecbd 8b02 	vpop	{d8}
 8006128:	f85d fb04 	ldr.w	pc, [sp], #4
 800612c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800615c <scalbnf+0xf4>
 8006130:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006138:	e7bc      	b.n	80060b4 <scalbnf+0x4c>
 800613a:	3219      	adds	r2, #25
 800613c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006140:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006144:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006164 <scalbnf+0xfc>
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006150:	e7b0      	b.n	80060b4 <scalbnf+0x4c>
 8006152:	bf00      	nop
 8006154:	4c000000 	.word	0x4c000000
 8006158:	ffff3cb0 	.word	0xffff3cb0
 800615c:	0da24260 	.word	0x0da24260
 8006160:	7149f2ca 	.word	0x7149f2ca
 8006164:	33000000 	.word	0x33000000

08006168 <copysignf>:
 8006168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800616c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006170:	4308      	orrs	r0, r1
 8006172:	4770      	bx	lr

08006174 <__aeabi_drsub>:
 8006174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006178:	e002      	b.n	8006180 <__adddf3>
 800617a:	bf00      	nop

0800617c <__aeabi_dsub>:
 800617c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006180 <__adddf3>:
 8006180:	b530      	push	{r4, r5, lr}
 8006182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800618a:	ea94 0f05 	teq	r4, r5
 800618e:	bf08      	it	eq
 8006190:	ea90 0f02 	teqeq	r0, r2
 8006194:	bf1f      	itttt	ne
 8006196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800619a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800619e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80061a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80061a6:	f000 80e2 	beq.w	800636e <__adddf3+0x1ee>
 80061aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80061ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80061b2:	bfb8      	it	lt
 80061b4:	426d      	neglt	r5, r5
 80061b6:	dd0c      	ble.n	80061d2 <__adddf3+0x52>
 80061b8:	442c      	add	r4, r5
 80061ba:	ea80 0202 	eor.w	r2, r0, r2
 80061be:	ea81 0303 	eor.w	r3, r1, r3
 80061c2:	ea82 0000 	eor.w	r0, r2, r0
 80061c6:	ea83 0101 	eor.w	r1, r3, r1
 80061ca:	ea80 0202 	eor.w	r2, r0, r2
 80061ce:	ea81 0303 	eor.w	r3, r1, r3
 80061d2:	2d36      	cmp	r5, #54	; 0x36
 80061d4:	bf88      	it	hi
 80061d6:	bd30      	pophi	{r4, r5, pc}
 80061d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80061dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80061e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80061e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80061e8:	d002      	beq.n	80061f0 <__adddf3+0x70>
 80061ea:	4240      	negs	r0, r0
 80061ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80061f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80061f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80061f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80061fc:	d002      	beq.n	8006204 <__adddf3+0x84>
 80061fe:	4252      	negs	r2, r2
 8006200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006204:	ea94 0f05 	teq	r4, r5
 8006208:	f000 80a7 	beq.w	800635a <__adddf3+0x1da>
 800620c:	f1a4 0401 	sub.w	r4, r4, #1
 8006210:	f1d5 0e20 	rsbs	lr, r5, #32
 8006214:	db0d      	blt.n	8006232 <__adddf3+0xb2>
 8006216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800621a:	fa22 f205 	lsr.w	r2, r2, r5
 800621e:	1880      	adds	r0, r0, r2
 8006220:	f141 0100 	adc.w	r1, r1, #0
 8006224:	fa03 f20e 	lsl.w	r2, r3, lr
 8006228:	1880      	adds	r0, r0, r2
 800622a:	fa43 f305 	asr.w	r3, r3, r5
 800622e:	4159      	adcs	r1, r3
 8006230:	e00e      	b.n	8006250 <__adddf3+0xd0>
 8006232:	f1a5 0520 	sub.w	r5, r5, #32
 8006236:	f10e 0e20 	add.w	lr, lr, #32
 800623a:	2a01      	cmp	r2, #1
 800623c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006240:	bf28      	it	cs
 8006242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006246:	fa43 f305 	asr.w	r3, r3, r5
 800624a:	18c0      	adds	r0, r0, r3
 800624c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006254:	d507      	bpl.n	8006266 <__adddf3+0xe6>
 8006256:	f04f 0e00 	mov.w	lr, #0
 800625a:	f1dc 0c00 	rsbs	ip, ip, #0
 800625e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006262:	eb6e 0101 	sbc.w	r1, lr, r1
 8006266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800626a:	d31b      	bcc.n	80062a4 <__adddf3+0x124>
 800626c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006270:	d30c      	bcc.n	800628c <__adddf3+0x10c>
 8006272:	0849      	lsrs	r1, r1, #1
 8006274:	ea5f 0030 	movs.w	r0, r0, rrx
 8006278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800627c:	f104 0401 	add.w	r4, r4, #1
 8006280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006288:	f080 809a 	bcs.w	80063c0 <__adddf3+0x240>
 800628c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006290:	bf08      	it	eq
 8006292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006296:	f150 0000 	adcs.w	r0, r0, #0
 800629a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800629e:	ea41 0105 	orr.w	r1, r1, r5
 80062a2:	bd30      	pop	{r4, r5, pc}
 80062a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80062a8:	4140      	adcs	r0, r0
 80062aa:	eb41 0101 	adc.w	r1, r1, r1
 80062ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80062b2:	f1a4 0401 	sub.w	r4, r4, #1
 80062b6:	d1e9      	bne.n	800628c <__adddf3+0x10c>
 80062b8:	f091 0f00 	teq	r1, #0
 80062bc:	bf04      	itt	eq
 80062be:	4601      	moveq	r1, r0
 80062c0:	2000      	moveq	r0, #0
 80062c2:	fab1 f381 	clz	r3, r1
 80062c6:	bf08      	it	eq
 80062c8:	3320      	addeq	r3, #32
 80062ca:	f1a3 030b 	sub.w	r3, r3, #11
 80062ce:	f1b3 0220 	subs.w	r2, r3, #32
 80062d2:	da0c      	bge.n	80062ee <__adddf3+0x16e>
 80062d4:	320c      	adds	r2, #12
 80062d6:	dd08      	ble.n	80062ea <__adddf3+0x16a>
 80062d8:	f102 0c14 	add.w	ip, r2, #20
 80062dc:	f1c2 020c 	rsb	r2, r2, #12
 80062e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80062e4:	fa21 f102 	lsr.w	r1, r1, r2
 80062e8:	e00c      	b.n	8006304 <__adddf3+0x184>
 80062ea:	f102 0214 	add.w	r2, r2, #20
 80062ee:	bfd8      	it	le
 80062f0:	f1c2 0c20 	rsble	ip, r2, #32
 80062f4:	fa01 f102 	lsl.w	r1, r1, r2
 80062f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80062fc:	bfdc      	itt	le
 80062fe:	ea41 010c 	orrle.w	r1, r1, ip
 8006302:	4090      	lslle	r0, r2
 8006304:	1ae4      	subs	r4, r4, r3
 8006306:	bfa2      	ittt	ge
 8006308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800630c:	4329      	orrge	r1, r5
 800630e:	bd30      	popge	{r4, r5, pc}
 8006310:	ea6f 0404 	mvn.w	r4, r4
 8006314:	3c1f      	subs	r4, #31
 8006316:	da1c      	bge.n	8006352 <__adddf3+0x1d2>
 8006318:	340c      	adds	r4, #12
 800631a:	dc0e      	bgt.n	800633a <__adddf3+0x1ba>
 800631c:	f104 0414 	add.w	r4, r4, #20
 8006320:	f1c4 0220 	rsb	r2, r4, #32
 8006324:	fa20 f004 	lsr.w	r0, r0, r4
 8006328:	fa01 f302 	lsl.w	r3, r1, r2
 800632c:	ea40 0003 	orr.w	r0, r0, r3
 8006330:	fa21 f304 	lsr.w	r3, r1, r4
 8006334:	ea45 0103 	orr.w	r1, r5, r3
 8006338:	bd30      	pop	{r4, r5, pc}
 800633a:	f1c4 040c 	rsb	r4, r4, #12
 800633e:	f1c4 0220 	rsb	r2, r4, #32
 8006342:	fa20 f002 	lsr.w	r0, r0, r2
 8006346:	fa01 f304 	lsl.w	r3, r1, r4
 800634a:	ea40 0003 	orr.w	r0, r0, r3
 800634e:	4629      	mov	r1, r5
 8006350:	bd30      	pop	{r4, r5, pc}
 8006352:	fa21 f004 	lsr.w	r0, r1, r4
 8006356:	4629      	mov	r1, r5
 8006358:	bd30      	pop	{r4, r5, pc}
 800635a:	f094 0f00 	teq	r4, #0
 800635e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006362:	bf06      	itte	eq
 8006364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006368:	3401      	addeq	r4, #1
 800636a:	3d01      	subne	r5, #1
 800636c:	e74e      	b.n	800620c <__adddf3+0x8c>
 800636e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006372:	bf18      	it	ne
 8006374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006378:	d029      	beq.n	80063ce <__adddf3+0x24e>
 800637a:	ea94 0f05 	teq	r4, r5
 800637e:	bf08      	it	eq
 8006380:	ea90 0f02 	teqeq	r0, r2
 8006384:	d005      	beq.n	8006392 <__adddf3+0x212>
 8006386:	ea54 0c00 	orrs.w	ip, r4, r0
 800638a:	bf04      	itt	eq
 800638c:	4619      	moveq	r1, r3
 800638e:	4610      	moveq	r0, r2
 8006390:	bd30      	pop	{r4, r5, pc}
 8006392:	ea91 0f03 	teq	r1, r3
 8006396:	bf1e      	ittt	ne
 8006398:	2100      	movne	r1, #0
 800639a:	2000      	movne	r0, #0
 800639c:	bd30      	popne	{r4, r5, pc}
 800639e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80063a2:	d105      	bne.n	80063b0 <__adddf3+0x230>
 80063a4:	0040      	lsls	r0, r0, #1
 80063a6:	4149      	adcs	r1, r1
 80063a8:	bf28      	it	cs
 80063aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80063ae:	bd30      	pop	{r4, r5, pc}
 80063b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80063b4:	bf3c      	itt	cc
 80063b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80063ba:	bd30      	popcc	{r4, r5, pc}
 80063bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80063c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80063c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063c8:	f04f 0000 	mov.w	r0, #0
 80063cc:	bd30      	pop	{r4, r5, pc}
 80063ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80063d2:	bf1a      	itte	ne
 80063d4:	4619      	movne	r1, r3
 80063d6:	4610      	movne	r0, r2
 80063d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80063dc:	bf1c      	itt	ne
 80063de:	460b      	movne	r3, r1
 80063e0:	4602      	movne	r2, r0
 80063e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80063e6:	bf06      	itte	eq
 80063e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80063ec:	ea91 0f03 	teqeq	r1, r3
 80063f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80063f4:	bd30      	pop	{r4, r5, pc}
 80063f6:	bf00      	nop

080063f8 <__aeabi_ui2d>:
 80063f8:	f090 0f00 	teq	r0, #0
 80063fc:	bf04      	itt	eq
 80063fe:	2100      	moveq	r1, #0
 8006400:	4770      	bxeq	lr
 8006402:	b530      	push	{r4, r5, lr}
 8006404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800640c:	f04f 0500 	mov.w	r5, #0
 8006410:	f04f 0100 	mov.w	r1, #0
 8006414:	e750      	b.n	80062b8 <__adddf3+0x138>
 8006416:	bf00      	nop

08006418 <__aeabi_i2d>:
 8006418:	f090 0f00 	teq	r0, #0
 800641c:	bf04      	itt	eq
 800641e:	2100      	moveq	r1, #0
 8006420:	4770      	bxeq	lr
 8006422:	b530      	push	{r4, r5, lr}
 8006424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800642c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006430:	bf48      	it	mi
 8006432:	4240      	negmi	r0, r0
 8006434:	f04f 0100 	mov.w	r1, #0
 8006438:	e73e      	b.n	80062b8 <__adddf3+0x138>
 800643a:	bf00      	nop

0800643c <__aeabi_f2d>:
 800643c:	0042      	lsls	r2, r0, #1
 800643e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006442:	ea4f 0131 	mov.w	r1, r1, rrx
 8006446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800644a:	bf1f      	itttt	ne
 800644c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006458:	4770      	bxne	lr
 800645a:	f092 0f00 	teq	r2, #0
 800645e:	bf14      	ite	ne
 8006460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006464:	4770      	bxeq	lr
 8006466:	b530      	push	{r4, r5, lr}
 8006468:	f44f 7460 	mov.w	r4, #896	; 0x380
 800646c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006474:	e720      	b.n	80062b8 <__adddf3+0x138>
 8006476:	bf00      	nop

08006478 <__aeabi_ul2d>:
 8006478:	ea50 0201 	orrs.w	r2, r0, r1
 800647c:	bf08      	it	eq
 800647e:	4770      	bxeq	lr
 8006480:	b530      	push	{r4, r5, lr}
 8006482:	f04f 0500 	mov.w	r5, #0
 8006486:	e00a      	b.n	800649e <__aeabi_l2d+0x16>

08006488 <__aeabi_l2d>:
 8006488:	ea50 0201 	orrs.w	r2, r0, r1
 800648c:	bf08      	it	eq
 800648e:	4770      	bxeq	lr
 8006490:	b530      	push	{r4, r5, lr}
 8006492:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006496:	d502      	bpl.n	800649e <__aeabi_l2d+0x16>
 8006498:	4240      	negs	r0, r0
 800649a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800649e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80064a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80064a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80064aa:	f43f aedc 	beq.w	8006266 <__adddf3+0xe6>
 80064ae:	f04f 0203 	mov.w	r2, #3
 80064b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80064b6:	bf18      	it	ne
 80064b8:	3203      	addne	r2, #3
 80064ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80064be:	bf18      	it	ne
 80064c0:	3203      	addne	r2, #3
 80064c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80064c6:	f1c2 0320 	rsb	r3, r2, #32
 80064ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80064ce:	fa20 f002 	lsr.w	r0, r0, r2
 80064d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80064d6:	ea40 000e 	orr.w	r0, r0, lr
 80064da:	fa21 f102 	lsr.w	r1, r1, r2
 80064de:	4414      	add	r4, r2
 80064e0:	e6c1      	b.n	8006266 <__adddf3+0xe6>
 80064e2:	bf00      	nop

080064e4 <__aeabi_dmul>:
 80064e4:	b570      	push	{r4, r5, r6, lr}
 80064e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80064ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80064ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80064f2:	bf1d      	ittte	ne
 80064f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80064f8:	ea94 0f0c 	teqne	r4, ip
 80064fc:	ea95 0f0c 	teqne	r5, ip
 8006500:	f000 f8de 	bleq	80066c0 <__aeabi_dmul+0x1dc>
 8006504:	442c      	add	r4, r5
 8006506:	ea81 0603 	eor.w	r6, r1, r3
 800650a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800650e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006512:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006516:	bf18      	it	ne
 8006518:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800651c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006524:	d038      	beq.n	8006598 <__aeabi_dmul+0xb4>
 8006526:	fba0 ce02 	umull	ip, lr, r0, r2
 800652a:	f04f 0500 	mov.w	r5, #0
 800652e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006532:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006536:	fbe0 e503 	umlal	lr, r5, r0, r3
 800653a:	f04f 0600 	mov.w	r6, #0
 800653e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006542:	f09c 0f00 	teq	ip, #0
 8006546:	bf18      	it	ne
 8006548:	f04e 0e01 	orrne.w	lr, lr, #1
 800654c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006550:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006554:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006558:	d204      	bcs.n	8006564 <__aeabi_dmul+0x80>
 800655a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800655e:	416d      	adcs	r5, r5
 8006560:	eb46 0606 	adc.w	r6, r6, r6
 8006564:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006568:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800656c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006570:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006574:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006578:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800657c:	bf88      	it	hi
 800657e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006582:	d81e      	bhi.n	80065c2 <__aeabi_dmul+0xde>
 8006584:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006588:	bf08      	it	eq
 800658a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800658e:	f150 0000 	adcs.w	r0, r0, #0
 8006592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006596:	bd70      	pop	{r4, r5, r6, pc}
 8006598:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800659c:	ea46 0101 	orr.w	r1, r6, r1
 80065a0:	ea40 0002 	orr.w	r0, r0, r2
 80065a4:	ea81 0103 	eor.w	r1, r1, r3
 80065a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80065ac:	bfc2      	ittt	gt
 80065ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80065b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80065b6:	bd70      	popgt	{r4, r5, r6, pc}
 80065b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80065bc:	f04f 0e00 	mov.w	lr, #0
 80065c0:	3c01      	subs	r4, #1
 80065c2:	f300 80ab 	bgt.w	800671c <__aeabi_dmul+0x238>
 80065c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80065ca:	bfde      	ittt	le
 80065cc:	2000      	movle	r0, #0
 80065ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80065d2:	bd70      	pople	{r4, r5, r6, pc}
 80065d4:	f1c4 0400 	rsb	r4, r4, #0
 80065d8:	3c20      	subs	r4, #32
 80065da:	da35      	bge.n	8006648 <__aeabi_dmul+0x164>
 80065dc:	340c      	adds	r4, #12
 80065de:	dc1b      	bgt.n	8006618 <__aeabi_dmul+0x134>
 80065e0:	f104 0414 	add.w	r4, r4, #20
 80065e4:	f1c4 0520 	rsb	r5, r4, #32
 80065e8:	fa00 f305 	lsl.w	r3, r0, r5
 80065ec:	fa20 f004 	lsr.w	r0, r0, r4
 80065f0:	fa01 f205 	lsl.w	r2, r1, r5
 80065f4:	ea40 0002 	orr.w	r0, r0, r2
 80065f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80065fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006604:	fa21 f604 	lsr.w	r6, r1, r4
 8006608:	eb42 0106 	adc.w	r1, r2, r6
 800660c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006610:	bf08      	it	eq
 8006612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	f1c4 040c 	rsb	r4, r4, #12
 800661c:	f1c4 0520 	rsb	r5, r4, #32
 8006620:	fa00 f304 	lsl.w	r3, r0, r4
 8006624:	fa20 f005 	lsr.w	r0, r0, r5
 8006628:	fa01 f204 	lsl.w	r2, r1, r4
 800662c:	ea40 0002 	orr.w	r0, r0, r2
 8006630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006638:	f141 0100 	adc.w	r1, r1, #0
 800663c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006640:	bf08      	it	eq
 8006642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	f1c4 0520 	rsb	r5, r4, #32
 800664c:	fa00 f205 	lsl.w	r2, r0, r5
 8006650:	ea4e 0e02 	orr.w	lr, lr, r2
 8006654:	fa20 f304 	lsr.w	r3, r0, r4
 8006658:	fa01 f205 	lsl.w	r2, r1, r5
 800665c:	ea43 0302 	orr.w	r3, r3, r2
 8006660:	fa21 f004 	lsr.w	r0, r1, r4
 8006664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006668:	fa21 f204 	lsr.w	r2, r1, r4
 800666c:	ea20 0002 	bic.w	r0, r0, r2
 8006670:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006678:	bf08      	it	eq
 800667a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	f094 0f00 	teq	r4, #0
 8006684:	d10f      	bne.n	80066a6 <__aeabi_dmul+0x1c2>
 8006686:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800668a:	0040      	lsls	r0, r0, #1
 800668c:	eb41 0101 	adc.w	r1, r1, r1
 8006690:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006694:	bf08      	it	eq
 8006696:	3c01      	subeq	r4, #1
 8006698:	d0f7      	beq.n	800668a <__aeabi_dmul+0x1a6>
 800669a:	ea41 0106 	orr.w	r1, r1, r6
 800669e:	f095 0f00 	teq	r5, #0
 80066a2:	bf18      	it	ne
 80066a4:	4770      	bxne	lr
 80066a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80066aa:	0052      	lsls	r2, r2, #1
 80066ac:	eb43 0303 	adc.w	r3, r3, r3
 80066b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80066b4:	bf08      	it	eq
 80066b6:	3d01      	subeq	r5, #1
 80066b8:	d0f7      	beq.n	80066aa <__aeabi_dmul+0x1c6>
 80066ba:	ea43 0306 	orr.w	r3, r3, r6
 80066be:	4770      	bx	lr
 80066c0:	ea94 0f0c 	teq	r4, ip
 80066c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80066c8:	bf18      	it	ne
 80066ca:	ea95 0f0c 	teqne	r5, ip
 80066ce:	d00c      	beq.n	80066ea <__aeabi_dmul+0x206>
 80066d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80066d4:	bf18      	it	ne
 80066d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80066da:	d1d1      	bne.n	8006680 <__aeabi_dmul+0x19c>
 80066dc:	ea81 0103 	eor.w	r1, r1, r3
 80066e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80066e4:	f04f 0000 	mov.w	r0, #0
 80066e8:	bd70      	pop	{r4, r5, r6, pc}
 80066ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80066ee:	bf06      	itte	eq
 80066f0:	4610      	moveq	r0, r2
 80066f2:	4619      	moveq	r1, r3
 80066f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80066f8:	d019      	beq.n	800672e <__aeabi_dmul+0x24a>
 80066fa:	ea94 0f0c 	teq	r4, ip
 80066fe:	d102      	bne.n	8006706 <__aeabi_dmul+0x222>
 8006700:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006704:	d113      	bne.n	800672e <__aeabi_dmul+0x24a>
 8006706:	ea95 0f0c 	teq	r5, ip
 800670a:	d105      	bne.n	8006718 <__aeabi_dmul+0x234>
 800670c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006710:	bf1c      	itt	ne
 8006712:	4610      	movne	r0, r2
 8006714:	4619      	movne	r1, r3
 8006716:	d10a      	bne.n	800672e <__aeabi_dmul+0x24a>
 8006718:	ea81 0103 	eor.w	r1, r1, r3
 800671c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006720:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006728:	f04f 0000 	mov.w	r0, #0
 800672c:	bd70      	pop	{r4, r5, r6, pc}
 800672e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006732:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006736:	bd70      	pop	{r4, r5, r6, pc}

08006738 <__aeabi_ddiv>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800673e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006742:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006746:	bf1d      	ittte	ne
 8006748:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800674c:	ea94 0f0c 	teqne	r4, ip
 8006750:	ea95 0f0c 	teqne	r5, ip
 8006754:	f000 f8a7 	bleq	80068a6 <__aeabi_ddiv+0x16e>
 8006758:	eba4 0405 	sub.w	r4, r4, r5
 800675c:	ea81 0e03 	eor.w	lr, r1, r3
 8006760:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006764:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006768:	f000 8088 	beq.w	800687c <__aeabi_ddiv+0x144>
 800676c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006770:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006774:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006778:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800677c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006780:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006784:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006788:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800678c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006790:	429d      	cmp	r5, r3
 8006792:	bf08      	it	eq
 8006794:	4296      	cmpeq	r6, r2
 8006796:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800679a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800679e:	d202      	bcs.n	80067a6 <__aeabi_ddiv+0x6e>
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80067a6:	1ab6      	subs	r6, r6, r2
 80067a8:	eb65 0503 	sbc.w	r5, r5, r3
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80067b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80067b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80067ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80067be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80067c2:	bf22      	ittt	cs
 80067c4:	1ab6      	subcs	r6, r6, r2
 80067c6:	4675      	movcs	r5, lr
 80067c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80067d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80067d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80067da:	bf22      	ittt	cs
 80067dc:	1ab6      	subcs	r6, r6, r2
 80067de:	4675      	movcs	r5, lr
 80067e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80067e4:	085b      	lsrs	r3, r3, #1
 80067e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80067ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80067ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80067f2:	bf22      	ittt	cs
 80067f4:	1ab6      	subcs	r6, r6, r2
 80067f6:	4675      	movcs	r5, lr
 80067f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8006802:	ebb6 0e02 	subs.w	lr, r6, r2
 8006806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800680a:	bf22      	ittt	cs
 800680c:	1ab6      	subcs	r6, r6, r2
 800680e:	4675      	movcs	r5, lr
 8006810:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006814:	ea55 0e06 	orrs.w	lr, r5, r6
 8006818:	d018      	beq.n	800684c <__aeabi_ddiv+0x114>
 800681a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800681e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006822:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800682a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800682e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006832:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006836:	d1c0      	bne.n	80067ba <__aeabi_ddiv+0x82>
 8006838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800683c:	d10b      	bne.n	8006856 <__aeabi_ddiv+0x11e>
 800683e:	ea41 0100 	orr.w	r1, r1, r0
 8006842:	f04f 0000 	mov.w	r0, #0
 8006846:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800684a:	e7b6      	b.n	80067ba <__aeabi_ddiv+0x82>
 800684c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006850:	bf04      	itt	eq
 8006852:	4301      	orreq	r1, r0
 8006854:	2000      	moveq	r0, #0
 8006856:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800685a:	bf88      	it	hi
 800685c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006860:	f63f aeaf 	bhi.w	80065c2 <__aeabi_dmul+0xde>
 8006864:	ebb5 0c03 	subs.w	ip, r5, r3
 8006868:	bf04      	itt	eq
 800686a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800686e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006872:	f150 0000 	adcs.w	r0, r0, #0
 8006876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006880:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006884:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006888:	bfc2      	ittt	gt
 800688a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800688e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006892:	bd70      	popgt	{r4, r5, r6, pc}
 8006894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006898:	f04f 0e00 	mov.w	lr, #0
 800689c:	3c01      	subs	r4, #1
 800689e:	e690      	b.n	80065c2 <__aeabi_dmul+0xde>
 80068a0:	ea45 0e06 	orr.w	lr, r5, r6
 80068a4:	e68d      	b.n	80065c2 <__aeabi_dmul+0xde>
 80068a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80068aa:	ea94 0f0c 	teq	r4, ip
 80068ae:	bf08      	it	eq
 80068b0:	ea95 0f0c 	teqeq	r5, ip
 80068b4:	f43f af3b 	beq.w	800672e <__aeabi_dmul+0x24a>
 80068b8:	ea94 0f0c 	teq	r4, ip
 80068bc:	d10a      	bne.n	80068d4 <__aeabi_ddiv+0x19c>
 80068be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80068c2:	f47f af34 	bne.w	800672e <__aeabi_dmul+0x24a>
 80068c6:	ea95 0f0c 	teq	r5, ip
 80068ca:	f47f af25 	bne.w	8006718 <__aeabi_dmul+0x234>
 80068ce:	4610      	mov	r0, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	e72c      	b.n	800672e <__aeabi_dmul+0x24a>
 80068d4:	ea95 0f0c 	teq	r5, ip
 80068d8:	d106      	bne.n	80068e8 <__aeabi_ddiv+0x1b0>
 80068da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80068de:	f43f aefd 	beq.w	80066dc <__aeabi_dmul+0x1f8>
 80068e2:	4610      	mov	r0, r2
 80068e4:	4619      	mov	r1, r3
 80068e6:	e722      	b.n	800672e <__aeabi_dmul+0x24a>
 80068e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068ec:	bf18      	it	ne
 80068ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068f2:	f47f aec5 	bne.w	8006680 <__aeabi_dmul+0x19c>
 80068f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80068fa:	f47f af0d 	bne.w	8006718 <__aeabi_dmul+0x234>
 80068fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006902:	f47f aeeb 	bne.w	80066dc <__aeabi_dmul+0x1f8>
 8006906:	e712      	b.n	800672e <__aeabi_dmul+0x24a>

08006908 <__aeabi_d2f>:
 8006908:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800690c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006910:	bf24      	itt	cs
 8006912:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006916:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800691a:	d90d      	bls.n	8006938 <__aeabi_d2f+0x30>
 800691c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006920:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006924:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006928:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800692c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006930:	bf08      	it	eq
 8006932:	f020 0001 	biceq.w	r0, r0, #1
 8006936:	4770      	bx	lr
 8006938:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800693c:	d121      	bne.n	8006982 <__aeabi_d2f+0x7a>
 800693e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006942:	bfbc      	itt	lt
 8006944:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006948:	4770      	bxlt	lr
 800694a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800694e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006952:	f1c2 0218 	rsb	r2, r2, #24
 8006956:	f1c2 0c20 	rsb	ip, r2, #32
 800695a:	fa10 f30c 	lsls.w	r3, r0, ip
 800695e:	fa20 f002 	lsr.w	r0, r0, r2
 8006962:	bf18      	it	ne
 8006964:	f040 0001 	orrne.w	r0, r0, #1
 8006968:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800696c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006970:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006974:	ea40 000c 	orr.w	r0, r0, ip
 8006978:	fa23 f302 	lsr.w	r3, r3, r2
 800697c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006980:	e7cc      	b.n	800691c <__aeabi_d2f+0x14>
 8006982:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006986:	d107      	bne.n	8006998 <__aeabi_d2f+0x90>
 8006988:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800698c:	bf1e      	ittt	ne
 800698e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006992:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006996:	4770      	bxne	lr
 8006998:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800699c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80069a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop

080069a8 <__errno>:
 80069a8:	4b01      	ldr	r3, [pc, #4]	; (80069b0 <__errno+0x8>)
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	20000400 	.word	0x20000400

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4b0e      	ldr	r3, [pc, #56]	; (80069f0 <__libc_init_array+0x3c>)
 80069b8:	4c0e      	ldr	r4, [pc, #56]	; (80069f4 <__libc_init_array+0x40>)
 80069ba:	1ae4      	subs	r4, r4, r3
 80069bc:	10a4      	asrs	r4, r4, #2
 80069be:	2500      	movs	r5, #0
 80069c0:	461e      	mov	r6, r3
 80069c2:	42a5      	cmp	r5, r4
 80069c4:	d004      	beq.n	80069d0 <__libc_init_array+0x1c>
 80069c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069ca:	4798      	blx	r3
 80069cc:	3501      	adds	r5, #1
 80069ce:	e7f8      	b.n	80069c2 <__libc_init_array+0xe>
 80069d0:	f7fb fa66 	bl	8001ea0 <_init>
 80069d4:	4c08      	ldr	r4, [pc, #32]	; (80069f8 <__libc_init_array+0x44>)
 80069d6:	4b09      	ldr	r3, [pc, #36]	; (80069fc <__libc_init_array+0x48>)
 80069d8:	1ae4      	subs	r4, r4, r3
 80069da:	10a4      	asrs	r4, r4, #2
 80069dc:	2500      	movs	r5, #0
 80069de:	461e      	mov	r6, r3
 80069e0:	42a5      	cmp	r5, r4
 80069e2:	d004      	beq.n	80069ee <__libc_init_array+0x3a>
 80069e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069e8:	4798      	blx	r3
 80069ea:	3501      	adds	r5, #1
 80069ec:	e7f8      	b.n	80069e0 <__libc_init_array+0x2c>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	20000404 	.word	0x20000404
 80069f4:	20000404 	.word	0x20000404
 80069f8:	20000404 	.word	0x20000404
 80069fc:	20000404 	.word	0x20000404

08006a00 <__PWM_SVM_SVMUpdate_veneer>:
 8006a00:	b401      	push	{r0}
 8006a02:	4802      	ldr	r0, [pc, #8]	; (8006a0c <__PWM_SVM_SVMUpdate_veneer+0xc>)
 8006a04:	4684      	mov	ip, r0
 8006a06:	bc01      	pop	{r0}
 8006a08:	4760      	bx	ip
 8006a0a:	bf00      	nop
 8006a0c:	10000c01 	.word	0x10000c01

08006a10 <SPI_MASTER_0_MOSI>:
 8006a10:	48028100 00000007                       ...H....

08006a18 <SPI_MASTER_0_MISO>:
 8006a18:	48028100 00000004                       ...H....

08006a20 <SPI_MASTER_0_SCLKOUT>:
 8006a20:	48028100 00000001                       ...H....

08006a28 <SPI_MASTER_0_SCLKOUT_Config>:
 8006a28:	00000090 00000001 00000001 00000000     ................
 8006a38:	00000000                                ....

08006a3c <SPI_MASTER_0_Config>:
 8006a3c:	20000098 080028d1 08006a10 20000084     ... .(...j..... 
 8006a4c:	08006a18 20000414 00000000 00000000     .j..... ........
	...
 8006a64:	08006a20 08006a28 00000000 00000000      j..(j..........
	...
 8006ab8:	00000404 00000000 00000202 00000014     ................

08006ac8 <PWM_SVM_0_PhUHighPin>:
 8006ac8:	48028000 00000005                       ...H....

08006ad0 <PWM_SVM_0_PhULowPin>:
 8006ad0:	48028000 00000002                       ...H....

08006ad8 <PWM_SVM_0_PhVHighPin>:
 8006ad8:	48028000 00000004                       ...H....

08006ae0 <PWM_SVM_0_PhVLowPin>:
 8006ae0:	48028000 00000001                       ...H....

08006ae8 <PWM_SVM_0_PhWHighPin>:
 8006ae8:	48028000 00000003                       ...H....

08006af0 <PWM_SVM_0_PhWLowPin>:
 8006af0:	48028000 00000000                       ...H....

08006af8 <PWM_SVM_0_PhUHiOutPinConf>:
 8006af8:	00000098 00010000 00000000              ............

08006b04 <PWM_SVM_0_PhULoOutPinConf>:
 8006b04:	00000098 00010000 00000000              ............

08006b10 <PWM_SVM_0_PhVHiOutPinConf>:
 8006b10:	00000098 00010000 00000000              ............

08006b1c <PWM_SVM_0_PhVLoOutPinConf>:
 8006b1c:	00000098 00010000 00000000              ............

08006b28 <PWM_SVM_0_PhWHiOutPinConf>:
 8006b28:	00000098 00010000 00000000              ............

08006b34 <PWM_SVM_0_PhWLoOutPinConf>:
 8006b34:	00000098 00010000 00000000              ............

08006b40 <PWM_SVM_0_PhU>:
 8006b40:	40020100 00000000                       ...@....

08006b48 <PWM_SVM_0_PhV>:
 8006b48:	40020200 00000001                       ...@....

08006b50 <PWM_SVM_0_PhW>:
 8006b50:	40020300 00000002                       ...@....

08006b58 <PWM_SVM_0_CurrentTrig>:
 8006b58:	40020100 00000000                       ...@....

08006b60 <PWM_SVM_0_StartConfig>:
 8006b60:	00000107                                ....

08006b64 <PWM_SVM_0_TimerInitHandle>:
 8006b64:	00000001 00000000 00000014 00000000     ................

08006b74 <PWM_SVM_0_TimerInit_CurrentTrig>:
 8006b74:	20000001 0000000f 00000000 00000000     ... ............

08006b84 <PWM_SVM_0_AppConfig>:
 8006b84:	4002023c 4002033c 01000000 01000000     <..@<..@........
 8006b94:	00000000 00010101 00004e20 07270e00     ........ N....'.
 8006ba4:	00000100 00000111 00000003 00000000     ................
	...
 8006bbc:	03938700 00000727 00bb0000 00000001     ....'...........
 8006bcc:	00000000                                ....

08006bd0 <Sinus60_tab>:
 8006bd0:	00210000 00640043 00a70086 00ea00c9     ..!.C.d.........
 8006be0:	012d010c 0170014f 01b30192 01f601d5     ..-.O.p.........
 8006bf0:	02390218 027c025b 02bf029e 030202e1     ..9.[.|.........
 8006c00:	03450324 03880367 03cb03aa 040e03ed     $.E.g...........
 8006c10:	04510430 04940473 04d704b6 051a04f9     0.Q.s...........
 8006c20:	055d053b 05a0057e 05e305c1 06260604     ;.].~.........&.
 8006c30:	06690647 06ac068a 06ef06cd 07320710     G.i...........2.
 8006c40:	07740753 07b70796 07fa07d9 083d081c     S.t...........=.
 8006c50:	0880085f 08c308a1 090608e4 09490927     _...........'.I.
 8006c60:	098b096a 09ce09ad 0a1109f0 0a540a32     j...........2.T.
 8006c70:	0a970a75 0ad90ab8 0b1c0afb 0b5f0b3e     u...........>._.
 8006c80:	0ba20b80 0be40bc3 0c270c06 0c6a0c49     ..........'.I.j.
 8006c90:	0cad0c8b 0cef0cce 0d320d11 0d750d53     ..........2.S.u.
 8006ca0:	0db70d96 0dfa0dd9 0e3c0e1b 0e7f0e5e     ..........<.^...
 8006cb0:	0ec20ea0 0f040ee3 0f470f25 0f890f68     ........%.G.h...
 8006cc0:	0fcc0fab 100e0fed 10511030 10931072     ........0.Q.r...
 8006cd0:	10d610b4 111810f7 115b1139 119d117c     ........9.[.|...
 8006ce0:	11df11be 12221200 12641243 12a61285     ......".C.d.....
 8006cf0:	12e912c7 132b130a 136d134c 13af138e     ......+.L.m.....
 8006d00:	13f213d0 14341413 14761455 14b81497     ......4.U.v.....
 8006d10:	14fa14d9 153c151b 157e155d 15c0159f     ......<.].~.....
 8006d20:	160215e1 16441623 16861665 16c816a7     ....#.D.e.......
 8006d30:	170a16e9 174c172b 178e176d 17d017af     ....+.L.m.......
 8006d40:	181217f1 18541833 18951875 18d718b6     ....3.T.u.......
 8006d50:	191918f8 195b193a 199c197b 19de19bd     ....:.[.{.......
 8006d60:	1a2019ff 1a611a40 1aa31a82 1ae41ac3     .. .@.a.........
 8006d70:	1b261b05 1b671b46 1ba91b88 1bea1bc9     ..&.F.g.........
 8006d80:	1c2b1c0b 1c6d1c4c 1cae1c8e 1cef1ccf     ..+.L.m.........
 8006d90:	1d311d10 1d721d51 1db31d93 1df41dd4     ..1.Q.r.........
 8006da0:	1e351e15 1e771e56 1eb81e97 1ef91ed8     ..5.V.w.........
 8006db0:	1f3a1f19 1f7b1f5a 1fbc1f9b 1ffd1fdc     ..:.Z.{.........
 8006dc0:	203d201d 207e205e 20bf209f 210020df     . = ^ ~ . . . .!
 8006dd0:	21412120 21812161 21c221a2 220321e2      !A!a!.!.!.!.!."
 8006de0:	22432223 22842263 22c422a4 230522e4     #"C"c".".".".".#
 8006df0:	23452325 23862365 23c623a6 240623e6     %#E#e#.#.#.#.#.$
 8006e00:	24472426 24872467 24c724a7 250724e7     &$G$g$.$.$.$.$.%
 8006e10:	25472527 25872567 25c725a7 260725e7     '%G%g%.%.%.%.%.&
 8006e20:	26472627 26872667 26c726a7 270726e7     '&G&g&.&.&.&.&.'
 8006e30:	27472727 27872767 27c627a7 280627e6     ''G'g'.'.'.'.'.(
 8006e40:	28462826 28852866 28c528a5 290428e5     &(F(f(.(.(.(.(.)
 8006e50:	29442924 29832964 29c329a3 2a0229e2     $)D)d).).).).).*
 8006e60:	2a412a22 2a802a61 2ac02aa0 2aff2adf     "*A*a*.*.*.*.*.*
 8006e70:	2b3e2b1e 2b7d2b5d 2bbc2b9c 2bfb2bdb     .+>+]+}+.+.+.+.+
 8006e80:	2c3a2c1a 2c792c59 2cb82c98 2cf62cd7     .,:,Y,y,.,.,.,.,
 8006e90:	2d352d16 2d742d54 2db22d93 2df12dd2     .-5-T-t-.-.-.-.-
 8006ea0:	2e2f2e10 2e6e2e4f 2eac2e8d 2eeb2ecc     ../.O.n.........
 8006eb0:	2f292f0a 2f672f48 2fa62f86 2fe42fc5     ./)/H/g/././././
 8006ec0:	30223003 30603041 309e307f 30dc30bd     .0"0A0`0.0.0.0.0
 8006ed0:	311a30fb 31583139 31963177 31d331b4     .0.191X1w1.1.1.1
 8006ee0:	321131f2 324f3230 328c326d 32ca32ab     .1.202O2m2.2.2.2
 8006ef0:	330732e9 33453326 33823363 33bf33a1     .2.3&3E3c3.3.3.3
 8006f00:	33fd33de 343a341b 34773458 34b43496     .3.3.4:4X4w4.4.4
 8006f10:	34f134d3 352e3510 356b354d 35a8358a     .4.4.5.5M5k5.5.5
 8006f20:	35e535c6 36223603 365e3640 369b367d     .5.5.6"6@6^6}6.6
 8006f30:	36d736b9 371436f6 37503732 378d376f     .6.6.6.727P7o7.7
 8006f40:	37c937ab 380637e7 38423824 387e3860     .7.7.7.8$8B8`8~8
 8006f50:	38ba389c 38f638d8 39323914 396e3950     .8.8.8.8.929P9n9
 8006f60:	39aa398c 39e639c8 3a213a04 3a5d3a3f     .9.9.9.9.:!:?:]:
 8006f70:	3a993a7b 3ad43ab6 3b103af2 3b4b3b2d     {:.:.:.:.:.;-;K;
 8006f80:	3b863b69 3bc23ba4 3bfd3bdf 3c383c1b     i;.;.;.;.;.;.<8<
 8006f90:	3c733c56 3cae3c91 3ce93ccc 3d243d07     V<s<.<.<.<.<.=$=
 8006fa0:	3d5f3d42 3d9a3d7c 3dd53db7 3e0f3df2     B=_=|=.=.=.=.=.>
 8006fb0:	3e4a3e2c 3e843e67 3ebf3ea2 3ef93edc     ,>J>g>.>.>.>.>.>
 8006fc0:	3f333f16 3f6e3f51 3fa83f8b 3fe23fc5     .?3?Q?n?.?.?.?.?
 8006fd0:	401c3fff 40564039 40904073 40ca40ad     .?.@9@V@s@.@.@.@
 8006fe0:	410340e7 413d4120 4177415a 41b04194     .@.A A=AZAwA.A.A
 8006ff0:	41ea41cd 42234207 425d4240 42964279     .A.A.B#B@B]ByB.B
 8007000:	42cf42b2 430842ec 43414325 437a435e     .B.B.B.C%CAC^CzC
 8007010:	43b34397 43ec43d0 44254408 445d4441     .C.C.C.C.D%DAD]D
 8007020:	4496447a 44cf44b2 450744eb 453f4523     zD.D.D.D.D.E#E?E
 8007030:	4578455c 45b04594 45e845cc 46204604     \ExE.E.E.E.E.F F
 8007040:	4658463c 46904674 46c846ac 470046e4     <FXFtF.F.F.F.F.G
 8007050:	4738471c 476f4754 47a7478b 47de47c3     .G8GTGoG.G.G.G.G
 8007060:	481647fa 484d4832 48844869 48bc48a0     .G.H2HMHiH.H.H.H
 8007070:	48f348d7 492a490e 49614945 4998497c     .H.H.I*IEIaI|I.I
 8007080:	49ce49b3 4a0549ea 4a3c4a20 4a724a57     .I.I.I.J J<JWJrJ
 8007090:	4aa94a8e 4adf4ac4 4b154afa 4b4c4b31     .J.J.J.J.J.K1KLK
 80070a0:	4b824b67 4bb84b9d 4bee4bd3 4c244c09     gK.K.K.K.K.K.L$L
 80070b0:	4c5a4c3f 4c8f4c75 4cc54caa 4cfb4ce0     ?LZLuL.L.L.L.L.L
 80070c0:	4d304d15 4d664d4b 4d9b4d80 4dd04db6     .M0MKMfM.M.M.M.M
 80070d0:	4e054deb 4e3a4e20 4e6f4e55 4ea44e8a     .M.N N:NUNoN.N.N
 80070e0:	4ed94ebf 4f0e4ef4 4f434f28 4f774f5d     .N.N.N.O(OCO]OwO
 80070f0:	4fac4f91 4fe04fc6 50144ffa 5049502f     .O.O.O.O.O.P/PIP
 8007100:	507d5063 50b15097 50e550cb 511950ff     cP}P.P.P.P.P.P.Q
 8007110:	514d5133 51805166 51b4519a 51e751ce     3QMQfQ.Q.Q.Q.Q.Q
 8007120:	521b5201 524e5235 52825268 52b5529b     .R.R5RNRhR.R.R.R
 8007130:	52e852ce 531b5301 534e5334 53815367     .R.R.S.S4SNSgS.S
 8007140:	53b3539a 53e653cd 541953ff 544b5432     .S.S.S.S.S.T2TKT
 8007150:	547d5464 54b05497 54e254c9 551454fb     dT}T.T.T.T.T.T.U
 8007160:	5546552d 5578555f 55aa5591 55dc55c3     -UFU_UxU.U.U.U.U
 8007170:	560d55f4 563f5626 56705658 56a25689     .U.V&V?VXVpV.V.V
 8007180:	56d356ba 570456ec 5735571d 5766574e     .V.V.V.W.W5WNWfW
 8007190:	5797577f 57c857b0 57f957e0 58295811     .W.W.W.W.W.W.X)X
 80071a0:	585a5842 588a5872 58bb58a3 58eb58d3     BXZXrX.X.X.X.X.X
 80071b0:	591b5903 594b5933 597b5963 59ab5993     .Y.Y3YKYcY{Y.Y.Y
 80071c0:	59db59c3 5a0a59f3 5a3a5a22 5a6a5a52     .Y.Y.Y.Z"Z:ZRZjZ
 80071d0:	5a995a81 5ac85ab1 5af75ae0 5b275b0f     .Z.Z.Z.Z.Z.Z.['[
 80071e0:	5b565b3e 5b845b6d 5bb35b9c 5be25bcb     >[V[m[.[.[.[.[.[
 80071f0:	5c115bf9 5c3f5c28 5c6d5c56 5c9c5c85     .[.\(\?\V\m\.\.\
 8007200:	5cca5cb3 5cf85ce1 5d265d0f 5d545d3d     .\.\.\.\.]&]=]T]
 8007210:	5d825d6b 5db05d99 5ddd5dc6 5e0b5df4     k].].].].].].].^
 8007220:	5e385e21 5e655e4f 5e935e7c 5ec05ea9     !^8^O^e^|^.^.^.^
 8007230:	5eed5ed6 5f1a5f03 5f465f30 5f735f5d     .^.^._._0_F_]_s_
 8007240:	5fa05f89 5fcc5fb6 5ff95fe2 6025600f     ._._._._._._.`%`
 8007250:	6051603b 607d6067 60a96093 60d560bf     ;`Q`g`}`.`.`.`.`
 8007260:	610160eb 612c6117 61586142 6184616e     .`.a.a,aBaXana.a
 8007270:	61af6199 61da61c5 620561f0 6230621b     .a.a.a.a.a.b.b0b
 8007280:	625b6246 62866271 62b1629b 62db62c6     Fb[bqb.b.b.b.b.b
 8007290:	630662f1 6330631b 635b6346 63856370     .b.c.c0cFc[cpc.c
 80072a0:	63af639a 63d963c4 640363ee 642d6418     .c.c.c.c.c.d.d-d
 80072b0:	64566441 6480646b 64a96495 64d364be     AdVdkd.d.d.d.d.d
 80072c0:	64fc64e7 65256510 654e6539 65776562     .d.d.e%e9eNebewe
 80072d0:	65a0658b 65c865b4 65f165dd 66196605     .e.e.e.e.e.e.f.f
 80072e0:	6642662e 666a6656 6692667e 66ba66a6     .fBfVfjf~f.f.f.f
 80072f0:	66e266ce 670a66f6 6732671e 67596745     .f.f.f.g.g2gEgYg
 8007300:	6781676d 67a86794 67cf67bc 67f667e3     mg.g.g.g.g.g.g.g
 8007310:	681e680a 68446831 686b6858 6892687f     .h.h1hDhXhkh.h.h
 8007320:	68b968a5 68df68cc 690568f2 692c6919     .h.h.h.h.h.i.i,i
 8007330:	6952693f 69786965 699e698b 69c469b1     ?iRieixi.i.i.i.i
 8007340:	69e969d6 6a0f69fc 6a346a22 6a5a6a47     .i.i.i.j"j4jGjZj
 8007350:	6a7f6a6c 6aa46a91 6ac96ab6 6aee6adb     lj.j.j.j.j.j.j.j
 8007360:	6b136b00 6b376b25 6b5c6b4a 6b806b6e     .k.k%k7kJk\knk.k
 8007370:	6ba56b92 6bc96bb7 6bed6bdb 6c116bff     .k.k.k.k.k.k.k.l
 8007380:	6c356c23 6c586c47 6c7c6c6a 6ca06c8e     #l5lGlXljl|l.l.l
 8007390:	6cc36cb1 6ce66cd5 6d096cf8 6d2c6d1b     .l.l.l.l.l.m.m,m
 80073a0:	6d4f6d3e 6d726d61 6d956d84 6db76da6     >mOmamrm.m.m.m.m
 80073b0:	6dda6dc9 6dfc6deb 6e1e6e0d 6e416e30     .m.m.m.m.n.n0nAn
 80073c0:	6e636e52 6e846e73 6ea66e95 6ec86eb7     Rncnsn.n.n.n.n.n
 80073d0:	00006ed9                                .n..

080073d4 <OverCurrent_U>:
 80073d4:	50004800 48028200 00000000 00000000     .H.P...H........
 80073e4:	00000000 00000008 00000105 01003f01     .............?..
 80073f4:	00010200                                ....

080073f8 <OverCurrent_V>:
 80073f8:	50004800 48028300 00000000 00000000     .H.P...H........
 8007408:	00000000 00000004 00000125 00003f03     ........%....?..
 8007418:	00010102                                ....

0800741c <OverCurrent_W>:
 800741c:	50004800 48028300 00000000 00000000     .H.P...H........
 800742c:	00000000 00000004 00000135 03003f04     ........5....?..
 800743c:	00010503                                ....

08007440 <Hall_A_ISR>:
 8007440:	40044000 48028100 00000010 00000000     .@.@...H........
	...
 8007458:	0000002d 01003f07 00010f02              -....?......

08007464 <Hall_B_ISR>:
 8007464:	40044000 48028100 00000010 00000000     .@.@...H........
	...
 800747c:	0000000d 00003f05 00010500              .....?......

08007488 <Hall_C_ISR>:
 8007488:	40044000 48028100 00000010 00000000     .@.@...H........
	...
 80074a0:	0000003d 02003f08 00010303              =....?......

080074ac <INTERRUPT_0>:
 80074ac:	01003f3f                                ??..

080074b0 <Time_Counter>:
 80074b0:	01003f3b                                ;?..

080074b4 <calc_ISR>:
 80074b4:	00003f40                                @?..

080074b8 <CAN_RX_MO2>:
 80074b8:	01003c4d                                M<..

080074bc <INTERRUPT_1>:
 80074bc:	01003f39                                9?..

080074c0 <CAN_TX>:
 80074c0:	01003f38                                8?..

080074c4 <CAN_RX_MO7>:
 80074c4:	01003f4c                                L?..

080074c8 <status_LED_green>:
 80074c8:	48028200 00000080 00010000 00000000     ...H............
 80074d8:	00000008                                ....

080074dc <status_LED_red_cal_time>:
 80074dc:	48028200 00000080 00010000 00000000     ...H............
 80074ec:	00000009 01040250 00010000 00000000     ....P...........
 80074fc:	00010000 01010101                       ........

08007504 <CAN_NODE_0_gpio_out>:
 8007504:	48028200 00000007                       ...H....

0800750c <CAN_NODE_0_gpio_out_config>:
 800750c:	00000090 00000001 00000002              ............

08007518 <CAN_NODE_0_gpio_in>:
 8007518:	48028200 00000006                       ...H....

08007520 <CAN_NODE_0_gpio_in_config>:
	...

0800752c <CAN_NODE_0_sr>:
 800752c:	00000002                                ....

08007530 <CAN_NODE_0_LMO_01_Config>:
 8007530:	200001e0 00000027 00000000              ... '.......

0800753c <CAN_NODE_0_LMO_02_Config>:
 800753c:	20000200 00010022 00000001              ... ".......

08007548 <CAN_NODE_0_LMO_03_Config>:
 8007548:	20000220 0000001e 00000000               .. ........

08007554 <CAN_NODE_0_LMO_04_Config>:
 8007554:	20000240 0000001f 00000000              @.. ........

08007560 <CAN_NODE_0_LMO_05_Config>:
 8007560:	20000260 00000020 00000000              `..  .......

0800756c <CAN_NODE_0_LMO_06_Config>:
 800756c:	20000280 00000021 00000000              ... !.......

08007578 <CAN_NODE_0_LMO_07_Config>:
 8007578:	200002a0 00000023 00000001              ... #.......

08007584 <CAN_NODE_0>:
 8007584:	200001c8 48014300 200001d4 08007530     ... .C.H... 0u..
 8007594:	0800753c 08007548 08007554 08007560     <u..Hu..Tu..`u..
 80075a4:	0800756c 08007578 00000000 00000000     lu..xu..........
	...
 8007610:	0800752c 08007504 0800750c 08007518     ,u...u...u...u..
 8007620:	08007520 00070100 00000100               u..........

0800762c <SPI_ChipSelect_pin_list>:
 800762c:	48028100 00000008 48028100 00000000     ...H.......H....
 800763c:	48028100 0000000b                       ...H....

08007644 <atanlo>:
 8007644:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

08007654 <atanhi>:
 8007654:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?
 8007664:	74727173 00000066                       sqrtf...

0800766c <npio2_hw>:
 800766c:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 800767c:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 800768c:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 800769c:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 80076ac:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 80076bc:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 80076cc:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 80076dc:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080076ec <two_over_pi>:
 80076ec:	000000a2 000000f9 00000083 0000006e     ............n...
 80076fc:	0000004e 00000044 00000015 00000029     N...D.......)...
 800770c:	000000fc 00000027 00000057 000000d1     ....'...W.......
 800771c:	000000f5 00000034 000000dd 000000c0     ....4...........
 800772c:	000000db 00000062 00000095 00000099     ....b...........
 800773c:	0000003c 00000043 00000090 00000041     <...C.......A...
 800774c:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 800775c:	000000de 000000bb 000000c5 00000061     ............a...
 800776c:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 800777c:	00000042 0000004d 000000d2 000000e0     B...M...........
 800778c:	00000006 00000049 0000002e 000000ea     ....I...........
 800779c:	00000009 000000d1 00000092 0000001c     ................
 80077ac:	000000fe 0000001d 000000eb 0000001c     ................
 80077bc:	000000b1 00000029 000000a7 0000003e     ....).......>...
 80077cc:	000000e8 00000082 00000035 000000f5     ........5.......
 80077dc:	0000002e 000000bb 00000044 00000084     ........D.......
 80077ec:	000000e9 0000009c 00000070 00000026     ........p...&...
 80077fc:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 800780c:	00000039 00000091 000000d6 00000039     9...........9...
 800781c:	00000083 00000053 00000039 000000f4     ....S...9.......
 800782c:	0000009c 00000084 0000005f 0000008b     ........_.......
 800783c:	000000bd 000000f9 00000028 0000003b     ........(...;...
 800784c:	0000001f 000000f8 00000097 000000ff     ................
 800785c:	000000de 00000005 00000098 0000000f     ................
 800786c:	000000ef 0000002f 00000011 0000008b     ..../...........
 800787c:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 800788c:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 800789c:	00000027 000000cb 00000009 000000b7     '...............
 80078ac:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 80078bc:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 80078cc:	00000075 00000027 000000ba 000000c7     u...'...........
 80078dc:	000000eb 000000e5 000000f1 0000007b     ............{...
 80078ec:	0000003d 00000007 00000039 000000f7     =.......9.......
 80078fc:	0000008a 00000052 00000092 000000ea     ....R...........
 800790c:	0000006b 000000fb 0000005f 000000b1     k......._.......
 800791c:	0000001f 0000008d 0000005d 00000008     ........].......
 800792c:	00000056 00000003 00000030 00000046     V.......0...F...
 800793c:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 800794c:	000000f0 000000cf 000000bc 00000020     ............ ...
 800795c:	0000009a 000000f4 00000036 0000001d     ........6.......
 800796c:	000000a9 000000e3 00000091 00000061     ............a...
 800797c:	0000005e 000000e6 0000001b 00000008     ^...............
 800798c:	00000065 00000099 00000085 0000005f     e..........._...
 800799c:	00000014 000000a0 00000068 00000040     ........h...@...
 80079ac:	0000008d 000000ff 000000d8 00000080     ................
 80079bc:	0000004d 00000073 00000027 00000031     M...s...'...1...
 80079cc:	00000006 00000006 00000015 00000056     ............V...
 80079dc:	000000ca 00000073 000000a8 000000c9     ....s...........
 80079ec:	00000060 000000e2 0000007b 000000c0     `.......{.......
 80079fc:	0000008c 0000006b                       ....k...

08007a04 <init_jk>:
 8007a04:	00000004 00000007 00000009              ............

08007a10 <PIo2>:
 8007a10:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 8007a20:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 8007a30:	1fc40000 1bc60000 17440000 00000043     ..........D.C...

Disassembly of section .ram_code:

10000800 <PWM_SVM_lSymCompValUpdate>:
        (XMC_CCU8_SLICE_COMPARE_CHANNEL_t) XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
        (uint16_t)(HandlePtr->v_tb + (uint16_t)((uint16_t) HandlePtr->tb >> (uint16_t) 1) + (uint16_t) HandlePtr->ta));

}
static void PWM_SVM_lSymCompValUpdate(PWM_SVM_t* const HandlePtr)
{
10000800:	b480      	push	{r7}
10000802:	b083      	sub	sp, #12
10000804:	af00      	add	r7, sp, #0
10000806:	6078      	str	r0, [r7, #4]
  /*Update the compare register with appropriate value  based on sector*/
  switch ((HandlePtr->sector & 7U))
10000808:	687b      	ldr	r3, [r7, #4]
1000080a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
1000080e:	f003 0307 	and.w	r3, r3, #7
10000812:	2b04      	cmp	r3, #4
10000814:	f200 8086 	bhi.w	10000924 <__initial_sp+0x124>
10000818:	a201      	add	r2, pc, #4	; (adr r2, 10000820 <__initial_sp+0x20>)
1000081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000081e:	bf00      	nop
10000820:	10000835 	.word	0x10000835
10000824:	10000865 	.word	0x10000865
10000828:	10000895 	.word	0x10000895
1000082c:	100008c5 	.word	0x100008c5
10000830:	100008f5 	.word	0x100008f5
    {
    case 0:/*sector 0*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
10000834:	687b      	ldr	r3, [r7, #4]
10000836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000838:	687a      	ldr	r2, [r7, #4]
1000083a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000083e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
10000840:	687b      	ldr	r3, [r7, #4]
10000842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10000844:	687a      	ldr	r2, [r7, #4]
10000846:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000084a:	4611      	mov	r1, r2
1000084c:	687a      	ldr	r2, [r7, #4]
1000084e:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
10000852:	440a      	add	r2, r1
10000854:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
10000856:	687b      	ldr	r3, [r7, #4]
10000858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000085a:	687a      	ldr	r2, [r7, #4]
1000085c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000860:	601a      	str	r2, [r3, #0]
       break;
10000862:	e077      	b.n	10000954 <__initial_sp+0x154>
    case 1:/*sector 1*/
      *HandlePtr->phaseu_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->ta);
10000864:	687b      	ldr	r3, [r7, #4]
10000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000868:	687a      	ldr	r2, [r7, #4]
1000086a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000086e:	4611      	mov	r1, r2
10000870:	687a      	ldr	r2, [r7, #4]
10000872:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
10000876:	440a      	add	r2, r1
10000878:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) (HandlePtr->v_tb);
1000087a:	687b      	ldr	r3, [r7, #4]
1000087c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000087e:	687a      	ldr	r2, [r7, #4]
10000880:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000884:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_ta;
10000886:	687b      	ldr	r3, [r7, #4]
10000888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000088a:	687a      	ldr	r2, [r7, #4]
1000088c:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000890:	601a      	str	r2, [r3, #0]
       break;
10000892:	e05f      	b.n	10000954 <__initial_sp+0x154>
    case 2:/*sector 2*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
10000894:	687b      	ldr	r3, [r7, #4]
10000896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000898:	687a      	ldr	r2, [r7, #4]
1000089a:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1000089e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_tb;
100008a0:	687b      	ldr	r3, [r7, #4]
100008a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100008a4:	687a      	ldr	r2, [r7, #4]
100008a6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008aa:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) (HandlePtr->v_tb + HandlePtr->tb);
100008ac:	687b      	ldr	r3, [r7, #4]
100008ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100008b0:	687a      	ldr	r2, [r7, #4]
100008b2:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008b6:	4611      	mov	r1, r2
100008b8:	687a      	ldr	r2, [r7, #4]
100008ba:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
100008be:	440a      	add	r2, r1
100008c0:	601a      	str	r2, [r3, #0]
       break;
100008c2:	e047      	b.n	10000954 <__initial_sp+0x154>
    case 3:/*sector 3*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_ta;
100008c4:	687b      	ldr	r3, [r7, #4]
100008c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100008c8:	687a      	ldr	r2, [r7, #4]
100008ca:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
100008ce:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t)( HandlePtr->v_tb+ HandlePtr->ta);
100008d0:	687b      	ldr	r3, [r7, #4]
100008d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100008d4:	687a      	ldr	r2, [r7, #4]
100008d6:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008da:	4611      	mov	r1, r2
100008dc:	687a      	ldr	r2, [r7, #4]
100008de:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
100008e2:	440a      	add	r2, r1
100008e4:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
100008e6:	687b      	ldr	r3, [r7, #4]
100008e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
100008ea:	687a      	ldr	r2, [r7, #4]
100008ec:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008f0:	601a      	str	r2, [r3, #0]
       break;
100008f2:	e02f      	b.n	10000954 <__initial_sp+0x154>
    case 4:/*sector 4*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->tb;
100008f4:	687b      	ldr	r3, [r7, #4]
100008f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
100008f8:	687a      	ldr	r2, [r7, #4]
100008fa:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
100008fe:	4611      	mov	r1, r2
10000900:	687a      	ldr	r2, [r7, #4]
10000902:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
10000906:	440a      	add	r2, r1
10000908:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
1000090a:	687b      	ldr	r3, [r7, #4]
1000090c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000090e:	687a      	ldr	r2, [r7, #4]
10000910:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
10000914:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb;
10000916:	687b      	ldr	r3, [r7, #4]
10000918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
1000091a:	687a      	ldr	r2, [r7, #4]
1000091c:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000920:	601a      	str	r2, [r3, #0]
       break;
10000922:	e017      	b.n	10000954 <__initial_sp+0x154>
    default:/*sector 5*/
      *HandlePtr->phaseu_crs = (uint32_t) HandlePtr->v_tb;
10000924:	687b      	ldr	r3, [r7, #4]
10000926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000928:	687a      	ldr	r2, [r7, #4]
1000092a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
1000092e:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasev_crs = (uint32_t) HandlePtr->v_ta;
10000930:	687b      	ldr	r3, [r7, #4]
10000932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10000934:	687a      	ldr	r2, [r7, #4]
10000936:	f8b2 20b6 	ldrh.w	r2, [r2, #182]	; 0xb6
1000093a:	601a      	str	r2, [r3, #0]
      *HandlePtr->phasew_crs = (uint32_t) HandlePtr->v_tb+ HandlePtr->ta;
1000093c:	687b      	ldr	r3, [r7, #4]
1000093e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10000940:	687a      	ldr	r2, [r7, #4]
10000942:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
10000946:	4611      	mov	r1, r2
10000948:	687a      	ldr	r2, [r7, #4]
1000094a:	f8b2 20ae 	ldrh.w	r2, [r2, #174]	; 0xae
1000094e:	440a      	add	r2, r1
10000950:	601a      	str	r2, [r3, #0]
      break;
10000952:	bf00      	nop
    }
}
10000954:	370c      	adds	r7, #12
10000956:	46bd      	mov	sp, r7
10000958:	f85d 7b04 	ldr.w	r7, [sp], #4
1000095c:	4770      	bx	lr
1000095e:	bf00      	nop

10000960 <PWM_SVM_CalCmpValueSym7>:

/**
 * This function calculates the CCU8 slice compare valuefor Symmetric 7-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym7(PWM_SVM_t* const HandlePtr)
{
10000960:	b580      	push	{r7, lr}
10000962:	b082      	sub	sp, #8
10000964:	af00      	add	r7, sp, #0
10000966:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < (uint16_t) HandlePtr->tmin)
10000968:	687b      	ldr	r3, [r7, #4]
1000096a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
1000096e:	687b      	ldr	r3, [r7, #4]
10000970:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000974:	429a      	cmp	r2, r3
10000976:	d205      	bcs.n	10000984 <PWM_SVM_CalCmpValueSym7+0x24>
  {
    HandlePtr->ta = (uint16_t) HandlePtr->tmin;
10000978:	687b      	ldr	r3, [r7, #4]
1000097a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1000097e:	687b      	ldr	r3, [r7, #4]
10000980:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < (uint16_t) HandlePtr->tmin)
10000984:	687b      	ldr	r3, [r7, #4]
10000986:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
1000098a:	687b      	ldr	r3, [r7, #4]
1000098c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000990:	429a      	cmp	r2, r3
10000992:	d205      	bcs.n	100009a0 <PWM_SVM_CalCmpValueSym7+0x40>
  {
    HandlePtr->tb = (uint16_t) HandlePtr->tmin;
10000994:	687b      	ldr	r3, [r7, #4]
10000996:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
1000099a:	687b      	ldr	r3, [r7, #4]
1000099c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }

  HandlePtr->v_ta = (uint16_t)(((uint32_t) HandlePtr->period + (uint16_t) HandlePtr->ta) + (uint16_t) HandlePtr->tb)
100009a0:	687b      	ldr	r3, [r7, #4]
100009a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100009a6:	b29a      	uxth	r2, r3
100009a8:	687b      	ldr	r3, [r7, #4]
100009aa:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
100009ae:	4413      	add	r3, r2
100009b0:	b29a      	uxth	r2, r3
100009b2:	687b      	ldr	r3, [r7, #4]
100009b4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
100009b8:	4413      	add	r3, r2
100009ba:	b29b      	uxth	r3, r3
100009bc:	085b      	lsrs	r3, r3, #1
100009be:	b29a      	uxth	r2, r3
100009c0:	687b      	ldr	r3, [r7, #4]
100009c2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
                     >> (uint16_t) 1;
  HandlePtr->v_tb = (uint16_t)((uint16_t) HandlePtr->period - ((uint16_t) HandlePtr->ta + (uint16_t) HandlePtr->tb))
100009c6:	687b      	ldr	r3, [r7, #4]
100009c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100009cc:	b29a      	uxth	r2, r3
100009ce:	687b      	ldr	r3, [r7, #4]
100009d0:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	; 0xae
100009d4:	687b      	ldr	r3, [r7, #4]
100009d6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
100009da:	440b      	add	r3, r1
100009dc:	b29b      	uxth	r3, r3
100009de:	1ad3      	subs	r3, r2, r3
100009e0:	b29b      	uxth	r3, r3
100009e2:	085b      	lsrs	r3, r3, #1
100009e4:	b29a      	uxth	r2, r3
100009e6:	687b      	ldr	r3, [r7, #4]
100009e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
100009ec:	6878      	ldr	r0, [r7, #4]
100009ee:	f7ff ff07 	bl	10000800 <PWM_SVM_lSymCompValUpdate>

}
100009f2:	3708      	adds	r7, #8
100009f4:	46bd      	mov	sp, r7
100009f6:	bd80      	pop	{r7, pc}

100009f8 <PWM_SVM_CalCmpValueSym5>:

/**
 * This function calculates the CCU8 slice compare value for Symmetric 5-segment SVM.
 */
__INLINE void PWM_SVM_CalCmpValueSym5(PWM_SVM_t* const HandlePtr)
{
100009f8:	b580      	push	{r7, lr}
100009fa:	b082      	sub	sp, #8
100009fc:	af00      	add	r7, sp, #0
100009fe:	6078      	str	r0, [r7, #4]
  /*If segment time ta less than tmin set to tmin*/
  if (HandlePtr->ta < HandlePtr->tmin)
10000a00:	687b      	ldr	r3, [r7, #4]
10000a02:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
10000a06:	687b      	ldr	r3, [r7, #4]
10000a08:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000a0c:	429a      	cmp	r2, r3
10000a0e:	d205      	bcs.n	10000a1c <PWM_SVM_CalCmpValueSym5+0x24>
  {
    HandlePtr->ta = HandlePtr->tmin;
10000a10:	687b      	ldr	r3, [r7, #4]
10000a12:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
10000a16:	687b      	ldr	r3, [r7, #4]
10000a18:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  }
  /*If segment time tb less than tmin set to tmin*/
  if (HandlePtr->tb < HandlePtr->tmin)
10000a1c:	687b      	ldr	r3, [r7, #4]
10000a1e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
10000a22:	687b      	ldr	r3, [r7, #4]
10000a24:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
10000a28:	429a      	cmp	r2, r3
10000a2a:	d205      	bcs.n	10000a38 <PWM_SVM_CalCmpValueSym5+0x40>
  {
    HandlePtr->tb = HandlePtr->tmin;
10000a2c:	687b      	ldr	r3, [r7, #4]
10000a2e:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
10000a32:	687b      	ldr	r3, [r7, #4]
10000a34:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  }
  HandlePtr->v_ta = (uint16_t) HandlePtr->period + 1U;
10000a38:	687b      	ldr	r3, [r7, #4]
10000a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000a3e:	b29b      	uxth	r3, r3
10000a40:	3301      	adds	r3, #1
10000a42:	b29a      	uxth	r2, r3
10000a44:	687b      	ldr	r3, [r7, #4]
10000a46:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  HandlePtr->v_tb = ((uint16_t) HandlePtr->period - HandlePtr->ta) - HandlePtr->tb;
10000a4a:	687b      	ldr	r3, [r7, #4]
10000a4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000a50:	b29a      	uxth	r2, r3
10000a52:	687b      	ldr	r3, [r7, #4]
10000a54:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000a58:	1ad3      	subs	r3, r2, r3
10000a5a:	b29a      	uxth	r2, r3
10000a5c:	687b      	ldr	r3, [r7, #4]
10000a5e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000a62:	1ad3      	subs	r3, r2, r3
10000a64:	b29a      	uxth	r2, r3
10000a66:	687b      	ldr	r3, [r7, #4]
10000a68:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    /* Update the compare register values based on the sector number */
    PWM_SVM_lUpdateDcLinkComRes(HandlePtr);
  }
#endif
  /* Update the compare register values based on the sector number */
  PWM_SVM_lSymCompValUpdate(HandlePtr);
10000a6c:	6878      	ldr	r0, [r7, #4]
10000a6e:	f7ff fec7 	bl	10000800 <PWM_SVM_lSymCompValUpdate>
}
10000a72:	3708      	adds	r7, #8
10000a74:	46bd      	mov	sp, r7
10000a76:	bd80      	pop	{r7, pc}

10000a78 <PWM_SVM_TimecalcUsingLUT>:
#if(1U == PWM_SVM_IS_LUT_ENABLE)
/*
 * SVM Segment Time calculation using Look up table
 */
void PWM_SVM_TimecalcUsingLUT(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
10000a78:	b480      	push	{r7}
10000a7a:	b08b      	sub	sp, #44	; 0x2c
10000a7c:	af00      	add	r7, sp, #0
10000a7e:	60f8      	str	r0, [r7, #12]
10000a80:	460b      	mov	r3, r1
10000a82:	607a      	str	r2, [r7, #4]
10000a84:	817b      	strh	r3, [r7, #10]
  uint16_t ta_tb,ta;
  uint32_t Dividend_Sine, Divisor_Sine;        /*Ts x sin(θrel), sin(θrel)+sin(60°-θrel)*/
  XMC_ASSERT("PWM_SVM_lTimecalcUsingLUT:NULL Handle Pointer",
      (HandlePtr != (PWM_SVM_t *)NULL));

  angletemp = (uint32_t)((Angle & (uint32_t)0xFFFFFF) >> 14U) * 6U;
10000a86:	687b      	ldr	r3, [r7, #4]
10000a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
10000a8c:	0b9a      	lsrs	r2, r3, #14
10000a8e:	4613      	mov	r3, r2
10000a90:	005b      	lsls	r3, r3, #1
10000a92:	4413      	add	r3, r2
10000a94:	005b      	lsls	r3, r3, #1
10000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HandlePtr->sector_angle = (uint32_t)(angletemp & (uint32_t) 0x003FF);
10000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000a9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
10000a9e:	68fb      	ldr	r3, [r7, #12]
10000aa0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  HandlePtr->sector = (uint32_t)((angletemp >> 10U) & 7U);
10000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000aa6:	0a9b      	lsrs	r3, r3, #10
10000aa8:	f003 0207 	and.w	r2, r3, #7
10000aac:	68fb      	ldr	r3, [r7, #12]
10000aae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  if ((uint16_t)Amplitude > (HandlePtr->max_amplitude))
10000ab2:	68fb      	ldr	r3, [r7, #12]
10000ab4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
10000ab8:	897a      	ldrh	r2, [r7, #10]
10000aba:	429a      	cmp	r2, r3
10000abc:	d903      	bls.n	10000ac6 <PWM_SVM_TimecalcUsingLUT+0x4e>
  {
    Amplitude = HandlePtr->max_amplitude;
10000abe:	68fb      	ldr	r3, [r7, #12]
10000ac0:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
10000ac4:	817b      	strh	r3, [r7, #10]
  }
  HandlePtr->tb = (uint16_t)((Amplitude* Sinus60_tab[1023U - HandlePtr->sector_angle])>> 15U);
10000ac6:	897a      	ldrh	r2, [r7, #10]
10000ac8:	68fb      	ldr	r3, [r7, #12]
10000aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000ace:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
10000ad2:	3303      	adds	r3, #3
10000ad4:	4949      	ldr	r1, [pc, #292]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000ad6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
10000ada:	fb03 f302 	mul.w	r3, r3, r2
10000ade:	13db      	asrs	r3, r3, #15
10000ae0:	b29a      	uxth	r2, r3
10000ae2:	68fb      	ldr	r3, [r7, #12]
10000ae4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  HandlePtr->tb = (uint16_t)((HandlePtr->tb * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
10000ae8:	68fb      	ldr	r3, [r7, #12]
10000aea:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000aee:	461a      	mov	r2, r3
10000af0:	68fb      	ldr	r3, [r7, #12]
10000af2:	681b      	ldr	r3, [r3, #0]
10000af4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
10000af8:	fb03 f302 	mul.w	r3, r3, r2
10000afc:	129b      	asrs	r3, r3, #10
10000afe:	b29a      	uxth	r2, r3
10000b00:	68fb      	ldr	r3, [r7, #12]
10000b02:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

  HandlePtr->ta = (uint16_t)((Amplitude* Sinus60_tab[HandlePtr->sector_angle])>> 15U);
10000b06:	897b      	ldrh	r3, [r7, #10]
10000b08:	68fa      	ldr	r2, [r7, #12]
10000b0a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
10000b0e:	493b      	ldr	r1, [pc, #236]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b10:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
10000b14:	fb02 f303 	mul.w	r3, r2, r3
10000b18:	13db      	asrs	r3, r3, #15
10000b1a:	b29a      	uxth	r2, r3
10000b1c:	68fb      	ldr	r3, [r7, #12]
10000b1e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  HandlePtr->ta = (uint16_t)((HandlePtr->ta * HandlePtr->confighandle_ptr->amplitude_scale) >> 10U);
10000b22:	68fb      	ldr	r3, [r7, #12]
10000b24:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000b28:	461a      	mov	r2, r3
10000b2a:	68fb      	ldr	r3, [r7, #12]
10000b2c:	681b      	ldr	r3, [r3, #0]
10000b2e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
10000b32:	fb03 f302 	mul.w	r3, r3, r2
10000b36:	129b      	asrs	r3, r3, #10
10000b38:	b29a      	uxth	r2, r3
10000b3a:	68fb      	ldr	r3, [r7, #12]
10000b3c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ta_tb = HandlePtr->ta + HandlePtr->tb;
10000b40:	68fb      	ldr	r3, [r7, #12]
10000b42:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
10000b46:	68fb      	ldr	r3, [r7, #12]
10000b48:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
10000b4c:	4413      	add	r3, r2
10000b4e:	847b      	strh	r3, [r7, #34]	; 0x22
  HandlePtr->t0 = (uint16_t)(HandlePtr->period - ta_tb);
10000b50:	68fb      	ldr	r3, [r7, #12]
10000b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b56:	b29a      	uxth	r2, r3
10000b58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
10000b5a:	1ad3      	subs	r3, r2, r3
10000b5c:	b29a      	uxth	r2, r3
10000b5e:	68fb      	ldr	r3, [r7, #12]
10000b60:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  if (ta_tb > (HandlePtr->period))
10000b64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
10000b66:	68fb      	ldr	r3, [r7, #12]
10000b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b6c:	429a      	cmp	r2, r3
10000b6e:	d93f      	bls.n	10000bf0 <PWM_SVM_TimecalcUsingLUT+0x178>
  {
    if (HandlePtr->over_modulation_enable == 1U)
10000b70:	68fb      	ldr	r3, [r7, #12]
10000b72:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
10000b76:	2b01      	cmp	r3, #1
10000b78:	d13a      	bne.n	10000bf0 <PWM_SVM_TimecalcUsingLUT+0x178>
      /* Above Ta and Tb are not used for SVM PWM.*/

      /* Calculate new T1 and T2 of maximum Vref on SVM Hexagon edges,
       * where T0 = 0 (i.e.: T1+T2 = PERIOD_REG). Relative angle θrel kept the same.
       */
      Dividend_Sine = HandlePtr->period * Sinus60_tab[HandlePtr->sector_angle];
10000b7a:	68fb      	ldr	r3, [r7, #12]
10000b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000b80:	68fa      	ldr	r2, [r7, #12]
10000b82:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
10000b86:	491d      	ldr	r1, [pc, #116]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
10000b8c:	fb02 f303 	mul.w	r3, r2, r3
10000b90:	61fb      	str	r3, [r7, #28]
      Divisor_Sine  = Sinus60_tab[HandlePtr->sector_angle] + Sinus60_tab[1023U - HandlePtr->sector_angle];
10000b92:	68fb      	ldr	r3, [r7, #12]
10000b94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000b98:	4a18      	ldr	r2, [pc, #96]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
10000b9e:	4619      	mov	r1, r3
10000ba0:	68fb      	ldr	r3, [r7, #12]
10000ba2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
10000ba6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
10000baa:	3303      	adds	r3, #3
10000bac:	4a13      	ldr	r2, [pc, #76]	; (10000bfc <PWM_SVM_TimecalcUsingLUT+0x184>)
10000bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
10000bb2:	440b      	add	r3, r1
10000bb4:	61bb      	str	r3, [r7, #24]
      /* Unsigned Div. Dividend << SHIFT_OVERMODULATION, Quotient >> SHIFT_OVERMODULATION, Divisor no shift.*/
      MATH->DIVCON = (0x00008004 | (PWM_SVM_SHIFT_OVERMODULATION << 16U) | (PWM_SVM_SHIFT_OVERMODULATION << 8U));
      MATH->DVD = Dividend_Sine;
      MATH->DVS = Divisor_Sine;
      #else
      ta = (uint16_t)(Dividend_Sine/Divisor_Sine);
10000bb6:	69fa      	ldr	r2, [r7, #28]
10000bb8:	69bb      	ldr	r3, [r7, #24]
10000bba:	fbb2 f3f3 	udiv	r3, r2, r3
10000bbe:	82fb      	strh	r3, [r7, #22]
      #endif
      /*###* CPU computes the following simultaneously when DIV #2 is computing ###*/
      HandlePtr->t0 = 0U;
10000bc0:	68fb      	ldr	r3, [r7, #12]
10000bc2:	2200      	movs	r2, #0
10000bc4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
      ta_tb = (uint16_t)HandlePtr->period;                /* Make sure below T0/2 >= 0.*/
10000bc8:	68fb      	ldr	r3, [r7, #12]
10000bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000bce:	847b      	strh	r3, [r7, #34]	; 0x22
      #if defined (MATH)
      /*###* Results of DIV #2 for T2 of Over-Modulation ###*/
      while (MATH->DIVST) continue;          /* Wait if DIV is still running calculation.*/
      ta = MATH->QUOT;     /* Read DIV Quotient result. T2 = Ts x sin(theta) / (sin(theta)+sin(60-theta)).*/
      #endif
      HandlePtr->ta = ta;
10000bd0:	68fb      	ldr	r3, [r7, #12]
10000bd2:	8afa      	ldrh	r2, [r7, #22]
10000bd4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
      /* Ta + Tb = PERIOD_REG for Vref on SVM Hexagon edges.*/
      HandlePtr->tb = (uint16_t)(HandlePtr->period - HandlePtr->ta);
10000bd8:	68fb      	ldr	r3, [r7, #12]
10000bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10000bde:	b29a      	uxth	r2, r3
10000be0:	68fb      	ldr	r3, [r7, #12]
10000be2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
10000be6:	1ad3      	subs	r3, r2, r3
10000be8:	b29a      	uxth	r2, r3
10000bea:	68fb      	ldr	r3, [r7, #12]
10000bec:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

    }
  }
}
10000bf0:	372c      	adds	r7, #44	; 0x2c
10000bf2:	46bd      	mov	sp, r7
10000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
10000bf8:	4770      	bx	lr
10000bfa:	bf00      	nop
10000bfc:	08006bd0 	.word	0x08006bd0

10000c00 <PWM_SVM_SVMUpdate>:
 * This is the SVM algorithm for sinusoidal commutation.
 * It updates the compare registers of the CCU8 slices as per calculated
 * duty cycle.
 */
void PWM_SVM_SVMUpdate(PWM_SVM_t* const HandlePtr, uint16_t Amplitude, uint32_t Angle)
{
10000c00:	b580      	push	{r7, lr}
10000c02:	b086      	sub	sp, #24
10000c04:	af00      	add	r7, sp, #0
10000c06:	60f8      	str	r0, [r7, #12]
10000c08:	460b      	mov	r3, r1
10000c0a:	607a      	str	r2, [r7, #4]
10000c0c:	817b      	strh	r3, [r7, #10]
  const PWM_SVM_Config_t* const svmptr = HandlePtr->confighandle_ptr;
10000c0e:	68fb      	ldr	r3, [r7, #12]
10000c10:	681b      	ldr	r3, [r3, #0]
10000c12:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_SVM_SVMUpdate:NULL Handle Pointer", (HandlePtr != (PWM_SVM_t *) NULL));

  /*This function calculates segment time ta, tb using CORDIC or LUT as per UI configuration */
  HandlePtr->seg_time_calc_ptr(HandlePtr, (uint16_t) Amplitude, (uint32_t) Angle);
10000c14:	68fb      	ldr	r3, [r7, #12]
10000c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10000c1a:	897a      	ldrh	r2, [r7, #10]
10000c1c:	68f8      	ldr	r0, [r7, #12]
10000c1e:	4611      	mov	r1, r2
10000c20:	687a      	ldr	r2, [r7, #4]
10000c22:	4798      	blx	r3
  /*This function calculates and updates compare values in compare register*/
  HandlePtr->svm_schemesel_ptr(HandlePtr);
10000c24:	68fb      	ldr	r3, [r7, #12]
10000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000c2a:	68f8      	ldr	r0, [r7, #12]
10000c2c:	4798      	blx	r3

  /*Enable the shadow transfer for all three slice*/
  HandlePtr->global_ptr->GCSS |= svmptr->shadow_transfer_mask;
10000c2e:	68fb      	ldr	r3, [r7, #12]
10000c30:	685b      	ldr	r3, [r3, #4]
10000c32:	68fa      	ldr	r2, [r7, #12]
10000c34:	6852      	ldr	r2, [r2, #4]
10000c36:	6911      	ldr	r1, [r2, #16]
10000c38:	697a      	ldr	r2, [r7, #20]
10000c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
10000c3c:	430a      	orrs	r2, r1
10000c3e:	611a      	str	r2, [r3, #16]
}
10000c40:	3718      	adds	r7, #24
10000c42:	46bd      	mov	sp, r7
10000c44:	bd80      	pop	{r7, pc}
10000c46:	bf00      	nop
