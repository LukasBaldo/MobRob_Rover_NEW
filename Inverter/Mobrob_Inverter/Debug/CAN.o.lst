   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "CAN.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm Speeds_int16_r,8,4
  20              	 .comm CAN_speed_ref,4,4
  21              	 .global CAN_new_meassage
  22              	 .section .bss.CAN_new_meassage,"aw",%nobits
  25              	CAN_new_meassage:
  26 0000 00       	 .space 1
  27              	 .global CAN_no_com_counter
  28              	 .section .bss.CAN_no_com_counter,"aw",%nobits
  31              	CAN_no_com_counter:
  32 0000 00       	 .space 1
  33              	 .global Speed_act
  34              	 .section .bss.Speed_act,"aw",%nobits
  35              	 .align 2
  38              	Speed_act:
  39 0000 00000000 	 .space 4
  40              	 .global distance
  41              	 .section .bss.distance,"aw",%nobits
  42              	 .align 2
  45              	distance:
  46 0000 00000000 	 .space 4
  47              	 .section .text.CAN0_1_IRQHandler,"ax",%progbits
  48              	 .align 2
  49              	 .global CAN0_1_IRQHandler
  50              	 .thumb
  51              	 .thumb_func
  53              	CAN0_1_IRQHandler:
  54              	.LFB552:
  55              	 .file 1 "../CAN.c"
   1:../CAN.c      **** // CAN Communication
   2:../CAN.c      **** #include "DEFINE_CONST.h"
   3:../CAN.c      **** #include <DAVE.h>
   4:../CAN.c      **** #include "Globals.h"
   5:../CAN.c      **** #include "CAN.h"
   6:../CAN.c      **** 
   7:../CAN.c      **** #define MAX_Speed_CAN 2
   8:../CAN.c      **** 
   9:../CAN.c      **** int16_t Speeds_int16_r[4];
  10:../CAN.c      **** 
  11:../CAN.c      **** float CAN_speed_ref;
  12:../CAN.c      **** uint8_t CAN_new_meassage = 0;// if 1 recived can data
  13:../CAN.c      **** uint8_t CAN_no_com_counter = 0;
  14:../CAN.c      **** 
  15:../CAN.c      **** // distacne vaule back over can
  16:../CAN.c      **** float Speed_act = 0;
  17:../CAN.c      **** float distance = 0;
  18:../CAN.c      **** 
  19:../CAN.c      **** void CAN_RX_MO2_ISR(void){
  56              	 .loc 1 19 0
  57              	 .cfi_startproc
  58              	 
  59              	 
  60 0000 80B5     	 push {r7,lr}
  61              	.LCFI0:
  62              	 .cfi_def_cfa_offset 8
  63              	 .cfi_offset 7,-8
  64              	 .cfi_offset 14,-4
  65 0002 84B0     	 sub sp,sp,#16
  66              	.LCFI1:
  67              	 .cfi_def_cfa_offset 24
  68 0004 00AF     	 add r7,sp,#0
  69              	.LCFI2:
  70              	 .cfi_def_cfa_register 7
  20:../CAN.c      **** 		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
  71              	 .loc 1 20 0
  72 0006 384B     	 ldr r3,.L12
  73 0008 1B69     	 ldr r3,[r3,#16]
  74 000a 1B68     	 ldr r3,[r3]
  75 000c BB60     	 str r3,[r7,#8]
  21:../CAN.c      **** 		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
  76              	 .loc 1 21 0
  77 000e 364B     	 ldr r3,.L12
  78 0010 1B69     	 ldr r3,[r3,#16]
  79 0012 1846     	 mov r0,r3
  80 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
  22:../CAN.c      **** 
  23:../CAN.c      **** 		uint8_t data_r[8];
  24:../CAN.c      **** 		 int i;
  25:../CAN.c      **** 		 for(i = 0 ; i < 8 ; i ++){
  81              	 .loc 1 25 0
  82 0018 0023     	 movs r3,#0
  83 001a FB60     	 str r3,[r7,#12]
  84 001c 0CE0     	 b .L2
  85              	.L3:
  26:../CAN.c      **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
  86              	 .loc 1 26 0 discriminator 3
  87 001e BA68     	 ldr r2,[r7,#8]
  88 0020 FB68     	 ldr r3,[r7,#12]
  89 0022 1344     	 add r3,r3,r2
  90 0024 1033     	 adds r3,r3,#16
  91 0026 1978     	 ldrb r1,[r3]
  92 0028 3A46     	 mov r2,r7
  93 002a FB68     	 ldr r3,[r7,#12]
  94 002c 1344     	 add r3,r3,r2
  95 002e 0A46     	 mov r2,r1
  96 0030 1A70     	 strb r2,[r3]
  25:../CAN.c      **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
  97              	 .loc 1 25 0 discriminator 3
  98 0032 FB68     	 ldr r3,[r7,#12]
  99 0034 0133     	 adds r3,r3,#1
 100 0036 FB60     	 str r3,[r7,#12]
 101              	.L2:
  25:../CAN.c      **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 102              	 .loc 1 25 0 is_stmt 0 discriminator 1
 103 0038 FB68     	 ldr r3,[r7,#12]
 104 003a 072B     	 cmp r3,#7
 105 003c EFDD     	 ble .L3
  27:../CAN.c      **** 		 }
  28:../CAN.c      **** 
  29:../CAN.c      **** 		 for(i = 0 ; i < 4 ; i ++){
 106              	 .loc 1 29 0 is_stmt 1
 107 003e 0023     	 movs r3,#0
 108 0040 FB60     	 str r3,[r7,#12]
 109 0042 1AE0     	 b .L4
 110              	.L5:
  30:../CAN.c      **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 111              	 .loc 1 30 0 discriminator 3
 112 0044 FB68     	 ldr r3,[r7,#12]
 113 0046 5B00     	 lsls r3,r3,#1
 114 0048 0133     	 adds r3,r3,#1
 115 004a 07F11002 	 add r2,r7,#16
 116 004e 1344     	 add r3,r3,r2
 117 0050 13F8103C 	 ldrb r3,[r3,#-16]
 118 0054 1B02     	 lsls r3,r3,#8
 119 0056 9AB2     	 uxth r2,r3
 120 0058 FB68     	 ldr r3,[r7,#12]
 121 005a 5B00     	 lsls r3,r3,#1
 122 005c 07F11001 	 add r1,r7,#16
 123 0060 0B44     	 add r3,r3,r1
 124 0062 13F8103C 	 ldrb r3,[r3,#-16]
 125 0066 9BB2     	 uxth r3,r3
 126 0068 1343     	 orrs r3,r3,r2
 127 006a 99B2     	 uxth r1,r3
 128 006c 1F4A     	 ldr r2,.L12+4
 129 006e FB68     	 ldr r3,[r7,#12]
 130 0070 22F81310 	 strh r1,[r2,r3,lsl#1]
  29:../CAN.c      **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 131              	 .loc 1 29 0 discriminator 3
 132 0074 FB68     	 ldr r3,[r7,#12]
 133 0076 0133     	 adds r3,r3,#1
 134 0078 FB60     	 str r3,[r7,#12]
 135              	.L4:
  29:../CAN.c      **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 136              	 .loc 1 29 0 is_stmt 0 discriminator 1
 137 007a FB68     	 ldr r3,[r7,#12]
 138 007c 032B     	 cmp r3,#3
 139 007e E1DD     	 ble .L5
  31:../CAN.c      **** 			 }
  32:../CAN.c      **** 
  33:../CAN.c      **** 		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 140              	 .loc 1 33 0 is_stmt 1
 141 0080 1A4B     	 ldr r3,.L12+4
 142 0082 1B88     	 ldrh r3,[r3]
 143 0084 1BB2     	 sxth r3,r3
 144 0086 07EE903A 	 fmsr s15,r3
 145 008a F8EEE77A 	 fsitos s15,s15
 146 008e 9FED187A 	 flds s14,.L12+8
 147 0092 C7EE877A 	 fdivs s15,s15,s14
 148 0096 174B     	 ldr r3,.L12+12
 149 0098 C3ED007A 	 fsts s15,[r3]
  34:../CAN.c      **** 
  35:../CAN.c      **** 		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6
  36:../CAN.c      **** 
  37:../CAN.c      **** 		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 150              	 .loc 1 37 0
 151 009c 154B     	 ldr r3,.L12+12
 152 009e D3ED007A 	 flds s15,[r3]
 153 00a2 B0EE007A 	 fconsts s14,#0
 154 00a6 F4EEC77A 	 fcmpes s15,s14
 155 00aa F1EE10FA 	 fmstat
 156 00ae 03DD     	 ble .L6
 157              	 .loc 1 37 0 is_stmt 0 discriminator 1
 158 00b0 104B     	 ldr r3,.L12+12
 159 00b2 4FF08042 	 mov r2,#1073741824
 160 00b6 1A60     	 str r2,[r3]
 161              	.L6:
  38:../CAN.c      **** 		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 162              	 .loc 1 38 0 is_stmt 1
 163 00b8 0E4B     	 ldr r3,.L12+12
 164 00ba D3ED007A 	 flds s15,[r3]
 165 00be B8EE007A 	 fconsts s14,#128
 166 00c2 F4EEC77A 	 fcmpes s15,s14
 167 00c6 F1EE10FA 	 fmstat
 168 00ca 03D5     	 bpl .L8
 169              	 .loc 1 38 0 is_stmt 0 discriminator 1
 170 00cc 094B     	 ldr r3,.L12+12
 171 00ce 4FF04042 	 mov r2,#-1073741824
 172 00d2 1A60     	 str r2,[r3]
 173              	.L8:
  39:../CAN.c      **** 
  40:../CAN.c      **** 		CAN_new_meassage = 1;
 174              	 .loc 1 40 0 is_stmt 1
 175 00d4 084B     	 ldr r3,.L12+16
 176 00d6 0122     	 movs r2,#1
 177 00d8 1A70     	 strb r2,[r3]
  41:../CAN.c      **** 		CAN_no_com_counter = 0;
 178              	 .loc 1 41 0
 179 00da 084B     	 ldr r3,.L12+20
 180 00dc 0022     	 movs r2,#0
 181 00de 1A70     	 strb r2,[r3]
  42:../CAN.c      **** }
 182              	 .loc 1 42 0
 183 00e0 1037     	 adds r7,r7,#16
 184              	.LCFI3:
 185              	 .cfi_def_cfa_offset 8
 186 00e2 BD46     	 mov sp,r7
 187              	.LCFI4:
 188              	 .cfi_def_cfa_register 13
 189              	 
 190 00e4 80BD     	 pop {r7,pc}
 191              	.L13:
 192 00e6 00BF     	 .align 2
 193              	.L12:
 194 00e8 00000000 	 .word CAN_NODE_0
 195 00ec 00000000 	 .word Speeds_int16_r
 196 00f0 00007A44 	 .word 1148846080
 197 00f4 00000000 	 .word CAN_speed_ref
 198 00f8 00000000 	 .word CAN_new_meassage
 199 00fc 00000000 	 .word CAN_no_com_counter
 200              	 .cfi_endproc
 201              	.LFE552:
 203              	 .section .text.CAN0_0_IRQHandler,"ax",%progbits
 204              	 .align 2
 205              	 .global CAN0_0_IRQHandler
 206              	 .thumb
 207              	 .thumb_func
 209              	CAN0_0_IRQHandler:
 210              	.LFB553:
  43:../CAN.c      **** 
  44:../CAN.c      **** //CAN RX reste distance
  45:../CAN.c      **** void CAN_RX_MO7_ISR(void){
 211              	 .loc 1 45 0
 212              	 .cfi_startproc
 213              	 
 214              	 
 215 0000 80B5     	 push {r7,lr}
 216              	.LCFI5:
 217              	 .cfi_def_cfa_offset 8
 218              	 .cfi_offset 7,-8
 219              	 .cfi_offset 14,-4
 220 0002 84B0     	 sub sp,sp,#16
 221              	.LCFI6:
 222              	 .cfi_def_cfa_offset 24
 223 0004 00AF     	 add r7,sp,#0
 224              	.LCFI7:
 225              	 .cfi_def_cfa_register 7
  46:../CAN.c      **** 	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 226              	 .loc 1 46 0
 227 0006 124B     	 ldr r3,.L18
 228 0008 5B6A     	 ldr r3,[r3,#36]
 229 000a 1B68     	 ldr r3,[r3]
 230 000c BB60     	 str r3,[r7,#8]
  47:../CAN.c      **** 	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 231              	 .loc 1 47 0
 232 000e 104B     	 ldr r3,.L18
 233 0010 5B6A     	 ldr r3,[r3,#36]
 234 0012 1846     	 mov r0,r3
 235 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
  48:../CAN.c      **** 
  49:../CAN.c      **** 	uint8_t data_r[4];
  50:../CAN.c      **** 	 int i;
  51:../CAN.c      **** 	 for(i = 0 ; i < 4 ; i ++){
 236              	 .loc 1 51 0
 237 0018 0023     	 movs r3,#0
 238 001a FB60     	 str r3,[r7,#12]
 239 001c 0CE0     	 b .L15
 240              	.L16:
  52:../CAN.c      **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 241              	 .loc 1 52 0 discriminator 3
 242 001e BA68     	 ldr r2,[r7,#8]
 243 0020 FB68     	 ldr r3,[r7,#12]
 244 0022 1344     	 add r3,r3,r2
 245 0024 1033     	 adds r3,r3,#16
 246 0026 1978     	 ldrb r1,[r3]
 247 0028 3A1D     	 adds r2,r7,#4
 248 002a FB68     	 ldr r3,[r7,#12]
 249 002c 1344     	 add r3,r3,r2
 250 002e 0A46     	 mov r2,r1
 251 0030 1A70     	 strb r2,[r3]
  51:../CAN.c      **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 252              	 .loc 1 51 0 discriminator 3
 253 0032 FB68     	 ldr r3,[r7,#12]
 254 0034 0133     	 adds r3,r3,#1
 255 0036 FB60     	 str r3,[r7,#12]
 256              	.L15:
  51:../CAN.c      **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 257              	 .loc 1 51 0 is_stmt 0 discriminator 1
 258 0038 FB68     	 ldr r3,[r7,#12]
 259 003a 032B     	 cmp r3,#3
 260 003c EFDD     	 ble .L16
  53:../CAN.c      **** 	 }
  54:../CAN.c      **** 
  55:../CAN.c      **** 	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 261              	 .loc 1 55 0 is_stmt 1
 262 003e 3B79     	 ldrb r3,[r7,#4]
 263 0040 012B     	 cmp r3,#1
 264 0042 02D1     	 bne .L14
 265              	 .loc 1 55 0 is_stmt 0 discriminator 1
 266 0044 034B     	 ldr r3,.L18+4
 267 0046 0022     	 movs r2,#0
 268 0048 1A60     	 str r2,[r3]
 269              	.L14:
  56:../CAN.c      **** }
 270              	 .loc 1 56 0 is_stmt 1
 271 004a 1037     	 adds r7,r7,#16
 272              	.LCFI8:
 273              	 .cfi_def_cfa_offset 8
 274 004c BD46     	 mov sp,r7
 275              	.LCFI9:
 276              	 .cfi_def_cfa_register 13
 277              	 
 278 004e 80BD     	 pop {r7,pc}
 279              	.L19:
 280              	 .align 2
 281              	.L18:
 282 0050 00000000 	 .word CAN_NODE_0
 283 0054 00000000 	 .word distance_180deg_ele_count
 284              	 .cfi_endproc
 285              	.LFE553:
 287              	 .global __aeabi_f2d
 288              	 .global __aeabi_dmul
 289              	 .global __aeabi_ddiv
 290              	 .global __aeabi_d2f
 291              	 .global __aeabi_dadd
 292              	 .section .text.CCU43_0_IRQHandler,"ax",%progbits
 293              	 .align 2
 294              	 .global CCU43_0_IRQHandler
 295              	 .thumb
 296              	 .thumb_func
 298              	CCU43_0_IRQHandler:
 299              	.LFB554:
  57:../CAN.c      **** 
  58:../CAN.c      **** void CAN_TX_ISR(void){
 300              	 .loc 1 58 0
 301              	 .cfi_startproc
 302              	 
 303              	 
 304 0000 80B5     	 push {r7,lr}
 305              	.LCFI10:
 306              	 .cfi_def_cfa_offset 8
 307              	 .cfi_offset 7,-8
 308              	 .cfi_offset 14,-4
 309 0002 86B0     	 sub sp,sp,#24
 310              	.LCFI11:
 311              	 .cfi_def_cfa_offset 32
 312 0004 00AF     	 add r7,sp,#0
 313              	.LCFI12:
 314              	 .cfi_def_cfa_register 7
  59:../CAN.c      **** 	int16_t Inverter_state[4] = {0};
 315              	 .loc 1 59 0
 316 0006 0023     	 movs r3,#0
 317 0008 FB60     	 str r3,[r7,#12]
 318 000a 0023     	 movs r3,#0
 319 000c 3B61     	 str r3,[r7,#16]
  60:../CAN.c      **** 
  61:../CAN.c      **** 	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 320              	 .loc 1 61 0
 321 000e 0023     	 movs r3,#0
 322 0010 BB81     	 strh r3,[r7,#12]
  62:../CAN.c      **** 
  63:../CAN.c      **** 	//if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
  64:../CAN.c      **** 	//else Inverter_state[1] = 1;
  65:../CAN.c      **** 
  66:../CAN.c      **** 
  67:../CAN.c      **** 	Inverter_state[1] = V_DC_link * 100;  // *100 send  2 deciaml places
 323              	 .loc 1 67 0
 324 0012 4F4B     	 ldr r3,.L21+16
 325 0014 D3ED007A 	 flds s15,[r3]
 326 0018 9FED4E7A 	 flds s14,.L21+20
 327 001c 67EE877A 	 fmuls s15,s15,s14
 328 0020 FDEEE77A 	 ftosizs s15,s15
 329 0024 C7ED017A 	 fsts s15,[r7,#4]
 330 0028 BB88     	 ldrh r3,[r7,#4]
 331 002a 9BB2     	 uxth r3,r3
 332 002c FB81     	 strh r3,[r7,#14]
  68:../CAN.c      **** 
  69:../CAN.c      **** 	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 333              	 .loc 1 69 0
 334 002e 4A4B     	 ldr r3,.L21+24
 335 0030 1B68     	 ldr r3,[r3]
 336 0032 1846     	 mov r0,r3
 337 0034 FFF7FEFF 	 bl __aeabi_f2d
 338 0038 0246     	 mov r2,r0
 339 003a 0B46     	 mov r3,r1
 340 003c 1046     	 mov r0,r2
 341 003e 1946     	 mov r1,r3
 342 0040 3FA3     	 adr r3,.L21
 343 0042 D3E90023 	 ldrd r2,[r3]
 344 0046 FFF7FEFF 	 bl __aeabi_dmul
 345 004a 0246     	 mov r2,r0
 346 004c 0B46     	 mov r3,r1
 347 004e 1046     	 mov r0,r2
 348 0050 1946     	 mov r1,r3
 349 0052 4FF00002 	 mov r2,#0
 350 0056 414B     	 ldr r3,.L21+28
 351 0058 FFF7FEFF 	 bl __aeabi_ddiv
 352 005c 0246     	 mov r2,r0
 353 005e 0B46     	 mov r3,r1
 354 0060 1046     	 mov r0,r2
 355 0062 1946     	 mov r1,r3
 356 0064 FFF7FEFF 	 bl __aeabi_d2f
 357 0068 0246     	 mov r2,r0
 358 006a 3D4B     	 ldr r3,.L21+32
 359 006c 1A60     	 str r2,[r3]
  70:../CAN.c      **** 	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
  71:../CAN.c      **** 	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 360              	 .loc 1 71 0
 361 006e 3C4B     	 ldr r3,.L21+32
 362 0070 D3ED007A 	 flds s15,[r3]
 363 0074 9FED3B7A 	 flds s14,.L21+36
 364 0078 67EE877A 	 fmuls s15,s15,s14
 365 007c FDEEE77A 	 ftosizs s15,s15
 366 0080 C7ED017A 	 fsts s15,[r7,#4]
 367 0084 BB88     	 ldrh r3,[r7,#4]
 368 0086 9BB2     	 uxth r3,r3
 369 0088 3B82     	 strh r3,[r7,#16]
  72:../CAN.c      **** 
  73:../CAN.c      **** 	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 370              	 .loc 1 73 0
 371 008a 374B     	 ldr r3,.L21+40
 372 008c 1B68     	 ldr r3,[r3]
 373 008e 07EE903A 	 fmsr s15,r3
 374 0092 F8EEE77A 	 fsitos s15,s15
 375 0096 B0EE007A 	 fconsts s14,#0
 376 009a C7EE877A 	 fdivs s15,s15,s14
 377 009e B2EE067A 	 fconsts s14,#38
 378 00a2 C7EE877A 	 fdivs s15,s15,s14
 379 00a6 17EE900A 	 fmrs r0,s15
 380 00aa FFF7FEFF 	 bl __aeabi_f2d
 381 00ae 0246     	 mov r2,r0
 382 00b0 0B46     	 mov r3,r1
 383 00b2 1046     	 mov r0,r2
 384 00b4 1946     	 mov r1,r3
 385 00b6 24A3     	 adr r3,.L21+8
 386 00b8 D3E90023 	 ldrd r2,[r3]
 387 00bc FFF7FEFF 	 bl __aeabi_dmul
 388 00c0 0246     	 mov r2,r0
 389 00c2 0B46     	 mov r3,r1
 390 00c4 1046     	 mov r0,r2
 391 00c6 1946     	 mov r1,r3
 392 00c8 FFF7FEFF 	 bl __aeabi_dadd
 393 00cc 0246     	 mov r2,r0
 394 00ce 0B46     	 mov r3,r1
 395 00d0 1046     	 mov r0,r2
 396 00d2 1946     	 mov r1,r3
 397 00d4 1AA3     	 adr r3,.L21
 398 00d6 D3E90023 	 ldrd r2,[r3]
 399 00da FFF7FEFF 	 bl __aeabi_dmul
 400 00de 0246     	 mov r2,r0
 401 00e0 0B46     	 mov r3,r1
 402 00e2 1046     	 mov r0,r2
 403 00e4 1946     	 mov r1,r3
 404 00e6 FFF7FEFF 	 bl __aeabi_d2f
 405 00ea 0246     	 mov r2,r0
 406 00ec 1F4B     	 ldr r3,.L21+44
 407 00ee 1A60     	 str r2,[r3]
  74:../CAN.c      **** 	if(MOTOR_NUM == 6) distance = -distance;
  75:../CAN.c      **** 	Inverter_state[3] = distance * 1000; // to mm
 408              	 .loc 1 75 0
 409 00f0 1E4B     	 ldr r3,.L21+44
 410 00f2 D3ED007A 	 flds s15,[r3]
 411 00f6 9FED1B7A 	 flds s14,.L21+36
 412 00fa 67EE877A 	 fmuls s15,s15,s14
 413 00fe FDEEE77A 	 ftosizs s15,s15
 414 0102 C7ED017A 	 fsts s15,[r7,#4]
 415 0106 BB88     	 ldrh r3,[r7,#4]
 416 0108 9BB2     	 uxth r3,r3
 417 010a 7B82     	 strh r3,[r7,#18]
  76:../CAN.c      **** 
  77:../CAN.c      **** 	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 418              	 .loc 1 77 0
 419 010c 0223     	 movs r3,#2
 420 010e FB75     	 strb r3,[r7,#23]
  78:../CAN.c      **** 	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 421              	 .loc 1 78 0
 422 0110 FB7D     	 ldrb r3,[r7,#23]
 423 0112 174A     	 ldr r2,.L21+48
 424 0114 0233     	 adds r3,r3,#2
 425 0116 9B00     	 lsls r3,r3,#2
 426 0118 1344     	 add r3,r3,r2
 427 011a 5A68     	 ldr r2,[r3,#4]
 428 011c 07F10C03 	 add r3,r7,#12
 429 0120 1046     	 mov r0,r2
 430 0122 1946     	 mov r1,r3
 431 0124 FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
  79:../CAN.c      **** 	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 432              	 .loc 1 79 0
 433 0128 FB7D     	 ldrb r3,[r7,#23]
 434 012a 114A     	 ldr r2,.L21+48
 435 012c 0233     	 adds r3,r3,#2
 436 012e 9B00     	 lsls r3,r3,#2
 437 0130 1344     	 add r3,r3,r2
 438 0132 5B68     	 ldr r3,[r3,#4]
 439 0134 1846     	 mov r0,r3
 440 0136 FFF7FEFF 	 bl CAN_NODE_MO_Transmit
  80:../CAN.c      **** }
 441              	 .loc 1 80 0
 442 013a 1837     	 adds r7,r7,#24
 443              	.LCFI13:
 444              	 .cfi_def_cfa_offset 8
 445 013c BD46     	 mov sp,r7
 446              	.LCFI14:
 447              	 .cfi_def_cfa_register 13
 448              	 
 449 013e 80BD     	 pop {r7,pc}
 450              	.L22:
 451              	 .align 3
 452              	.L21:
 453 0140 48E17A14 	 .word 343597384
 454 0144 AE47B13F 	 .word 1068582830
 455 0148 F1D4C853 	 .word 1405670641
 456 014c FB210940 	 .word 1074340347
 457 0150 00000000 	 .word V_DC_link
 458 0154 0000C842 	 .word 1120403456
 459 0158 00000000 	 .word omega_ele_rads
 460 015c 00002640 	 .word 1076232192
 461 0160 00000000 	 .word Speed_act
 462 0164 00007A44 	 .word 1148846080
 463 0168 00000000 	 .word distance_180deg_ele_count
 464 016c 00000000 	 .word distance
 465 0170 00000000 	 .word CAN_NODE_0
 466              	 .cfi_endproc
 467              	.LFE554:
 469 0174 AFF30080 	 .text
 470              	.Letext0:
 471              	 .file 2 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 472              	 .file 3 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 473              	 .file 4 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 474              	 .file 5 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
 475              	 .file 6 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 476              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 477              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 478              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 479              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 480              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 481              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 482              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
 483              	 .file 14 "../Globals.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CAN.c
                            *COM*:00000008 Speeds_int16_r
                            *COM*:00000004 CAN_speed_ref
    {standard input}:25     .bss.CAN_new_meassage:00000000 CAN_new_meassage
    {standard input}:26     .bss.CAN_new_meassage:00000000 $d
    {standard input}:31     .bss.CAN_no_com_counter:00000000 CAN_no_com_counter
    {standard input}:32     .bss.CAN_no_com_counter:00000000 $d
    {standard input}:38     .bss.Speed_act:00000000 Speed_act
    {standard input}:35     .bss.Speed_act:00000000 $d
    {standard input}:45     .bss.distance:00000000 distance
    {standard input}:42     .bss.distance:00000000 $d
    {standard input}:48     .text.CAN0_1_IRQHandler:00000000 $t
    {standard input}:53     .text.CAN0_1_IRQHandler:00000000 CAN0_1_IRQHandler
    {standard input}:194    .text.CAN0_1_IRQHandler:000000e8 $d
    {standard input}:204    .text.CAN0_0_IRQHandler:00000000 $t
    {standard input}:209    .text.CAN0_0_IRQHandler:00000000 CAN0_0_IRQHandler
    {standard input}:282    .text.CAN0_0_IRQHandler:00000050 $d
    {standard input}:293    .text.CCU43_0_IRQHandler:00000000 $t
    {standard input}:298    .text.CCU43_0_IRQHandler:00000000 CCU43_0_IRQHandler
    {standard input}:453    .text.CCU43_0_IRQHandler:00000140 $d
                     .debug_frame:00000010 $d
    {standard input}:469    .text.CCU43_0_IRQHandler:00000174 $t

UNDEFINED SYMBOLS
CAN_NODE_MO_Receive
CAN_NODE_0
distance_180deg_ele_count
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_dadd
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
V_DC_link
omega_ele_rads
