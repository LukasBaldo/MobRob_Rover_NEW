   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB137:
  26              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE137:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB138:
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE138:
 114 0022 00BF     	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_GetInput:
 120              	.LFB140:
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 334 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 139              	 .loc 1 337 0
 140 000c 7B68     	 ldr r3,[r7,#4]
 141 000e 5A6A     	 ldr r2,[r3,#36]
 142 0010 FB78     	 ldrb r3,[r7,#3]
 143 0012 22FA03F3 	 lsr r3,r2,r3
 144 0016 03F00103 	 and r3,r3,#1
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 338 0
 146 001a 1846     	 mov r0,r3
 147 001c 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 001e BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0020 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0024 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE140:
 162 0026 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	DIGITAL_IO_SetOutputHigh:
 168              	.LFB145:
 169              	 .file 2 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 170              	 .loc 2 269 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 80B5     	 push {r7,lr}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 7,-8
 178              	 .cfi_offset 14,-4
 179 0002 82B0     	 sub sp,sp,#8
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 185 0006 7860     	 str r0,[r7,#4]
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 186              	 .loc 2 271 0
 187 0008 7B68     	 ldr r3,[r7,#4]
 188 000a 1A68     	 ldr r2,[r3]
 189 000c 7B68     	 ldr r3,[r7,#4]
 190 000e 1B7C     	 ldrb r3,[r3,#16]
 191 0010 1046     	 mov r0,r2
 192 0012 1946     	 mov r1,r3
 193 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 194              	 .loc 2 272 0
 195 0018 0837     	 adds r7,r7,#8
 196              	.LCFI21:
 197              	 .cfi_def_cfa_offset 8
 198 001a BD46     	 mov sp,r7
 199              	.LCFI22:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 001c 80BD     	 pop {r7,pc}
 203              	 .cfi_endproc
 204              	.LFE145:
 206 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	DIGITAL_IO_SetOutputLow:
 212              	.LFB146:
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 213              	 .loc 2 316 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217 0000 80B5     	 push {r7,lr}
 218              	.LCFI23:
 219              	 .cfi_def_cfa_offset 8
 220              	 .cfi_offset 7,-8
 221              	 .cfi_offset 14,-4
 222 0002 82B0     	 sub sp,sp,#8
 223              	.LCFI24:
 224              	 .cfi_def_cfa_offset 16
 225 0004 00AF     	 add r7,sp,#0
 226              	.LCFI25:
 227              	 .cfi_def_cfa_register 7
 228 0006 7860     	 str r0,[r7,#4]
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 229              	 .loc 2 318 0
 230 0008 7B68     	 ldr r3,[r7,#4]
 231 000a 1A68     	 ldr r2,[r3]
 232 000c 7B68     	 ldr r3,[r7,#4]
 233 000e 1B7C     	 ldrb r3,[r3,#16]
 234 0010 1046     	 mov r0,r2
 235 0012 1946     	 mov r1,r3
 236 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 237              	 .loc 2 319 0
 238 0018 0837     	 adds r7,r7,#8
 239              	.LCFI26:
 240              	 .cfi_def_cfa_offset 8
 241 001a BD46     	 mov sp,r7
 242              	.LCFI27:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 001c 80BD     	 pop {r7,pc}
 246              	 .cfi_endproc
 247              	.LFE146:
 249 001e 00BF     	 .section .text.PIN_INTERRUPT_GetPinValue,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	PIN_INTERRUPT_GetPinValue:
 255              	.LFB308:
 256              	 .file 3 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @file pin_interrupt.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @date 2016-03-02
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * NOTE:
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @cond
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT v4.0.2 - The PIN_INTERRUPT APP invokes user interrupt handler in a response to ris
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                        edge event signal on a pin.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Copyright (c) 2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * All rights reserved.                        
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * following conditions are met:   
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer.                        
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.     
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                         
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   products derived from this software without specific prior written permission. 
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * with Infineon Technologies AG (dave@infineon.com).         
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 2015-12-03:
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     - Initial version for DAVEv4. <BR>
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcond 
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifndef PIN_INTERRUPT_H
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #define PIN_INTERRUPT_H
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * HEADER FILES                                                                                    
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_scu.h>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_gpio.h>
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_eru.h>
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <DAVE_Common.h>
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include "pin_interrupt_conf.h"
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * MACROS                                                                                          
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_MINOR_VERSION >= 1U) && \
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_PATCH_VERSION >= 6U)))
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #error "PIN_INTERRUPT requires XMC Peripheral Library v2.1.6 or higher"
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup App_publicparam
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  @brief Initialization data structure for PIN_INTERRUPT APP
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ENUMS
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /*
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief enumeration for PIN_INTERRUPT APP
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_STATUS
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_SUCCESS = 0U,        /**<APP initialization is success */
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_FAILURE = 1U         /**<APP initialization is failure */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_STATUS_t;
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Defines trigger edge for the event generation by ETLx (Event Trigger Logic, x = [0 to 3]) unit, 
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * from ERSx(Event request source, x = [0 to 3]) unit.
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_EDGE
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_NONE = 0U, /**< no event enabled */
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_RISING = 1U,   /**< detection of rising edge generates the event */
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_FALLING = 2U,  /**< detection of falling edge generates the event */
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_BOTH = 3U      /**< detection of either edges generates the event */
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_EDGE_t;
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * DATA STRUCTURES
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** ***************************************************************************************************
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_datastructures
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Configuration structure for PIN_INTERRUPT APP
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef struct PIN_INTERRUPT
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_t *eru;  /**< Mapped ERU module */
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_PORT_t *port;  /**< Mapped port number */
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_CONFIG_t gpio_config;   /**< Initializes the input pin characteristics */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_ETL_CONFIG_t etl_config;  /**< reference to ERUx_ETLy (x = [0..1], y = [0..4])
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****                                                       module configuration */
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_SCU_IRQCTRL_t irqctrl;  /**< selects the interrupt source for a NVIC interrupt node*/
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   IRQn_Type IRQn;       /**< Mapped NVIC Node */
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_priority; 	  /**< Node Interrupt Priority */
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_FAMILY == XMC4)
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_subpriority;  /**< Node Interrupt SubPriority only valid for XMC4x */
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t etl; /*< ETLx channel (x = [0..3])*/
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t ogu; /*< OGUy channel (y = [0..3])*/
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t pin; /*< Mapped pin number */
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   bool enable_at_init;  /**< Interrupt enable for Node at initialization*/
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_t;
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifdef __cplusplus
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** extern "C" {
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * API Prototypes
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_apidoc
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Get PIN_INTERRUPT APP version
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description: </b><br>
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * The function can be used to check application software compatibility with a
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * specific version of the APP.
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void) {
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t init_status;
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_APP_VERSION_t version;
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // Initialize PIN_INTERRUPT APP:
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // PIN_INTERRUPT_Init() is called from within DAVE_Init().
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   init_status = DAVE_Init();
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if (DAVE_STATUS_SUCCESS == init_status)
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     version = PIN_INTERRUPT_GetAppVersion();
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     if (version.major != 4U) {
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *       // Probably, not the right version.
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     // More code here
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** DAVE_APP_VERSION_t PIN_INTERRUPT_GetAppVersion(void);
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Initializes a PIN_INTERRUPT APP instance
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_SUCCESS             : if initialization is successful\n
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_FAILURE             : if initialization is failed
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description:</b><br>
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT_Init API is called during initialization of DAVE APPS. This API Initializes input 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ERU and OGU hardware module initialization, Configures NVIC node and its priority in order to ge
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void)
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * {
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t status;
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle);
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Enables the IRQ.
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_EnableIRQ(handle->IRQn);
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Disables the IRQ.
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Disable(&PIN_INTERRUPT_0);
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Disable(const PIN_INTERRUPT_t *const handle)
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Disable: Handler null pointer", handle != NULL);
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_DisableIRQ(handle->IRQn);
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @brief Read input level of port pin.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @return uint32_t input logic level. Range:0-1
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * \par<b>Description:</b><br>
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * This function reads the Pn_IN register and returns the current logical value at the GPIO pin.
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * Example Usage:
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @code
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * int main(void)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * {
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   DAVE_STATUS_t status;
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   uint32_t pin_status;
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   status = DAVE_Init();   // (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0) is called within
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   if(status == DAVE_STATUS_SUCCESS)
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   else
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     while(1U)
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   while(1U)
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     pin_status = PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_0);
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     if(pin_status == 1)
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 339:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     else
 340:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 341:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 342:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 343:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 344:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   return (1);
 345:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * }
 346:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *  @endcode
 347:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** */
 348:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
 349:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 257              	 .loc 3 349 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI28:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI29:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI30:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
 350:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
 351:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   return (XMC_GPIO_GetInput(handle->port, handle->pin));
 273              	 .loc 3 351 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 5A68     	 ldr r2,[r3,#4]
 276 000c 7B68     	 ldr r3,[r7,#4]
 277 000e 93F82130 	 ldrb r3,[r3,#33]
 278 0012 1046     	 mov r0,r2
 279 0014 1946     	 mov r1,r3
 280 0016 FFF7FEFF 	 bl XMC_GPIO_GetInput
 281 001a 0346     	 mov r3,r0
 352:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 282              	 .loc 3 352 0
 283 001c 1846     	 mov r0,r3
 284 001e 0837     	 adds r7,r7,#8
 285              	.LCFI31:
 286              	 .cfi_def_cfa_offset 8
 287 0020 BD46     	 mov sp,r7
 288              	.LCFI32:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 0022 80BD     	 pop {r7,pc}
 292              	 .cfi_endproc
 293              	.LFE308:
 295              	 .global Torque_control
 296              	 .section .data.Torque_control,"aw",%progbits
 299              	Torque_control:
 300 0000 01       	 .byte 1
 301              	 .global Speed_control
 302              	 .section .data.Speed_control,"aw",%progbits
 305              	Speed_control:
 306 0000 01       	 .byte 1
 307              	 .global CAN_control
 308              	 .section .bss.CAN_control,"aw",%nobits
 311              	CAN_control:
 312 0000 00       	 .space 1
 313              	 .comm Current_U,4,4
 314              	 .comm Current_V,4,4
 315              	 .comm Current_W,4,4
 316              	 .global lookup_table
 317              	 .section .data.lookup_table,"aw",%progbits
 318              	 .align 2
 321              	lookup_table:
 322 0000 00       	 .byte 0
 323 0001 00       	 .byte 0
 324 0002 00       	 .byte 0
 325 0003 00       	 .byte 0
 326 0004 00       	 .byte 0
 327 0005 00       	 .byte 0
 328 0006 00       	 .byte 0
 329 0007 00       	 .byte 0
 330 0008 00       	 .byte 0
 331 0009 00       	 .byte 0
 332 000a 00       	 .byte 0
 333 000b FF       	 .byte -1
 334 000c 00       	 .byte 0
 335 000d 01       	 .byte 1
 336 000e 00       	 .byte 0
 337 000f 00       	 .byte 0
 338 0010 00       	 .byte 0
 339 0011 00       	 .byte 0
 340 0012 00       	 .byte 0
 341 0013 01       	 .byte 1
 342 0014 00       	 .byte 0
 343 0015 00       	 .byte 0
 344 0016 FF       	 .byte -1
 345 0017 00       	 .byte 0
 346 0018 00       	 .byte 0
 347 0019 01       	 .byte 1
 348 001a FF       	 .byte -1
 349 001b 00       	 .byte 0
 350 001c 00       	 .byte 0
 351 001d 00       	 .byte 0
 352 001e 00       	 .byte 0
 353 001f 00       	 .byte 0
 354 0020 00       	 .byte 0
 355 0021 00       	 .byte 0
 356 0022 00       	 .byte 0
 357 0023 00       	 .byte 0
 358 0024 00       	 .byte 0
 359 0025 FF       	 .byte -1
 360 0026 01       	 .byte 1
 361 0027 00       	 .byte 0
 362 0028 00       	 .byte 0
 363 0029 FF       	 .byte -1
 364 002a 00       	 .byte 0
 365 002b 00       	 .byte 0
 366 002c 01       	 .byte 1
 367 002d 00       	 .byte 0
 368 002e 00       	 .byte 0
 369 002f 00       	 .byte 0
 370 0030 00       	 .byte 0
 371 0031 00       	 .byte 0
 372 0032 01       	 .byte 1
 373 0033 00       	 .byte 0
 374 0034 FF       	 .byte -1
 375 0035 00       	 .byte 0
 376 0036 00       	 .byte 0
 377 0037 00       	 .byte 0
 378 0038 00       	 .byte 0
 379 0039 00       	 .byte 0
 380 003a 00       	 .byte 0
 381 003b 00       	 .byte 0
 382 003c 00       	 .byte 0
 383 003d 00       	 .byte 0
 384 003e 00       	 .byte 0
 385 003f 00       	 .byte 0
 386              	 .global sector
 387              	 .section .bss.sector,"aw",%nobits
 390              	sector:
 391 0000 00       	 .space 1
 392              	 .global direction
 393              	 .section .bss.direction,"aw",%nobits
 396              	direction:
 397 0000 00       	 .space 1
 398              	 .global enc_val
 399              	 .section .bss.enc_val,"aw",%nobits
 400              	 .align 1
 403              	enc_val:
 404 0000 0000     	 .space 2
 405              	 .global time_since_A
 406              	 .section .bss.time_since_A,"aw",%nobits
 407              	 .align 2
 410              	time_since_A:
 411 0000 00000000 	 .space 4
 412              	 .global time_since_B
 413              	 .section .bss.time_since_B,"aw",%nobits
 414              	 .align 2
 417              	time_since_B:
 418 0000 00000000 	 .space 4
 419              	 .global time_since_C
 420              	 .section .bss.time_since_C,"aw",%nobits
 421              	 .align 2
 424              	time_since_C:
 425 0000 00000000 	 .space 4
 426              	 .global time_180deg
 427              	 .section .data.time_180deg,"aw",%progbits
 428              	 .align 2
 431              	time_180deg:
 432 0000 E8030000 	 .word 1000
 433              	 .global time_180deg_cal
 434              	 .section .data.time_180deg_cal,"aw",%progbits
 435              	 .align 2
 438              	time_180deg_cal:
 439 0000 E8030000 	 .word 1000
 440              	 .comm last_Hall_trig,1,1
 441              	 .global angle_in_sector
 442              	 .section .data.angle_in_sector,"aw",%progbits
 443              	 .align 2
 446              	angle_in_sector:
 447 0000 0000F041 	 .word 1106247680
 448              	 .global angle_phi
 449              	 .section .bss.angle_phi,"aw",%nobits
 450              	 .align 2
 453              	angle_phi:
 454 0000 00000000 	 .space 4
 455              	 .comm ialpha,4,4
 456              	 .comm ibeta,4,4
 457              	 .comm iq,4,4
 458              	 .comm id,4,4
 459              	 .comm Valpha,4,4
 460              	 .comm Vbeta,4,4
 461              	 .global omega_ele_rads
 462              	 .section .bss.omega_ele_rads,"aw",%nobits
 463              	 .align 2
 466              	omega_ele_rads:
 467 0000 00000000 	 .space 4
 468              	 .global omega_mech_rps
 469              	 .section .bss.omega_mech_rps,"aw",%nobits
 470              	 .align 2
 473              	omega_mech_rps:
 474 0000 00000000 	 .space 4
 475              	 .global omega_mech_rps_temp
 476              	 .section .bss.omega_mech_rps_temp,"aw",%nobits
 477              	 .align 2
 480              	omega_mech_rps_temp:
 481 0000 00000000 	 .space 4
 482              	 .global omega_ele_degs
 483              	 .section .bss.omega_ele_degs,"aw",%nobits
 484              	 .align 2
 487              	omega_ele_degs:
 488 0000 00000000 	 .space 4
 489              	 .global speed_ref
 490              	 .section .bss.speed_ref,"aw",%nobits
 491              	 .align 2
 494              	speed_ref:
 495 0000 00000000 	 .space 4
 496              	 .global omega_ele_rads_ref
 497              	 .section .bss.omega_ele_rads_ref,"aw",%nobits
 498              	 .align 2
 501              	omega_ele_rads_ref:
 502 0000 00000000 	 .space 4
 503              	 .global iq_ref
 504              	 .section .bss.iq_ref,"aw",%nobits
 505              	 .align 2
 508              	iq_ref:
 509 0000 00000000 	 .space 4
 510              	 .global T_ref
 511              	 .section .bss.T_ref,"aw",%nobits
 512              	 .align 2
 515              	T_ref:
 516 0000 00000000 	 .space 4
 517              	 .global Vd
 518              	 .section .bss.Vd,"aw",%nobits
 519              	 .align 2
 522              	Vd:
 523 0000 00000000 	 .space 4
 524              	 .global Vq
 525              	 .section .bss.Vq,"aw",%nobits
 526              	 .align 2
 529              	Vq:
 530 0000 00000000 	 .space 4
 531              	 .global omega_mech_rps_ref
 532              	 .section .bss.omega_mech_rps_ref,"aw",%nobits
 533              	 .align 2
 536              	omega_mech_rps_ref:
 537 0000 00000000 	 .space 4
 538              	 .comm Speeds_int16_r,8,4
 539              	 .global CAN_speed_ref
 540              	 .section .bss.CAN_speed_ref,"aw",%nobits
 541              	 .align 2
 544              	CAN_speed_ref:
 545 0000 00000000 	 .space 4
 546              	 .global CAN_new_meassage
 547              	 .section .bss.CAN_new_meassage,"aw",%nobits
 550              	CAN_new_meassage:
 551 0000 00       	 .space 1
 552              	 .global CAN_no_com_counter
 553              	 .section .bss.CAN_no_com_counter,"aw",%nobits
 556              	CAN_no_com_counter:
 557 0000 00       	 .space 1
 558              	 .global distance_180deg_ele_count
 559              	 .section .bss.distance_180deg_ele_count,"aw",%nobits
 560              	 .align 2
 563              	distance_180deg_ele_count:
 564 0000 00000000 	 .space 4
 565              	 .global Speed_act
 566              	 .section .bss.Speed_act,"aw",%nobits
 567              	 .align 2
 570              	Speed_act:
 571 0000 00000000 	 .space 4
 572              	 .global distance
 573              	 .section .bss.distance,"aw",%nobits
 574              	 .align 2
 577              	distance:
 578 0000 00000000 	 .space 4
 579              	 .comm modulation_index,4,4
 580              	 .comm modulation_index_scaled,4,4
 581              	 .comm angle_ab,4,4
 582              	 .comm angle_ab_rad,4,4
 583              	 .comm amplitude_ab,4,4
 584              	 .global Ts
 585              	 .section .data.Ts,"aw",%progbits
 586              	 .align 2
 589              	Ts:
 590 0000 17B75138 	 .word 944879383
 591              	 .global Tcyc
 592              	 .section .data.Tcyc,"aw",%progbits
 593              	 .align 2
 596              	Tcyc:
 597 0000 17B75139 	 .word 961656599
 598              	 .global scaling_factor
 599              	 .section .data.scaling_factor,"aw",%progbits
 600              	 .align 2
 603              	scaling_factor:
 604 0000 00000743 	 .word 1124532224
 605              	 .comm amplitude_corrected,4,4
 606              	 .global count
 607              	 .section .bss.count,"aw",%nobits
 610              	count:
 611 0000 00       	 .space 1
 612              	 .global offset_pos
 613              	 .section .data.offset_pos,"aw",%progbits
 614              	 .align 2
 617              	offset_pos:
 618 0000 0000D8C1 	 .word -1042808832
 619              	 .global offset_neg
 620              	 .section .data.offset_neg,"aw",%progbits
 621              	 .align 2
 624              	offset_neg:
 625 0000 0000A0C1 	 .word -1046478848
 626              	 .global Iq_param
 627              	 .section .data.Iq_param,"aw",%progbits
 628              	 .align 2
 631              	Iq_param:
 632 0000 295C8F3E 	 .word 1049582633
 633 0004 00006843 	 .word 1130889216
 634 0008 00000000 	 .word 0
 635 000c 0000C842 	 .word 1120403456
 636 0010 0000C8C2 	 .word -1027080192
 637 0014 00000000 	 .word 0
 638 0018 00000000 	 .word 0
 639 001c 00000000 	 .word 0
 640 0020 00000000 	 .space 4
 641              	 .global Id_param
 642              	 .section .data.Id_param,"aw",%progbits
 643              	 .align 2
 646              	Id_param:
 647 0000 295C8F3E 	 .word 1049582633
 648 0004 00006843 	 .word 1130889216
 649 0008 00000000 	 .word 0
 650 000c 0000C842 	 .word 1120403456
 651 0010 0000C8C2 	 .word -1027080192
 652 0014 00000000 	 .word 0
 653 0018 00000000 	 .word 0
 654 001c 00000000 	 .word 0
 655 0020 00000000 	 .space 4
 656              	 .global omega_param
 657              	 .section .data.omega_param,"aw",%progbits
 658              	 .align 2
 661              	omega_param:
 662 0000 5530CA3E 	 .word 1053438037
 663 0004 1DC9253E 	 .word 1042663709
 664 0008 00000000 	 .word 0
 665 000c 00000040 	 .word 1073741824
 666 0010 000000C0 	 .word -1073741824
 667 0014 00000000 	 .word 0
 668 0018 00000000 	 .word 0
 669 001c 00000000 	 .word 0
 670 0020 00000000 	 .space 4
 671              	 .global T_param_1
 672              	 .section .data.T_param_1,"aw",%progbits
 673              	 .align 2
 676              	T_param_1:
 677 0000 0AD7A33B 	 .word 1000593162
 678 0004 0AD7233C 	 .word 1008981770
 679 0008 00000000 	 .word 0
 680 000c 0000C03F 	 .word 1069547520
 681 0010 0000C0BF 	 .word -1077936128
 682 0014 00000000 	 .word 0
 683 0018 00000000 	 .word 0
 684 001c 00000000 	 .word 0
 685 0020 00000000 	 .space 4
 686              	 .global falg_speed_not_new
 687              	 .section .bss.falg_speed_not_new,"aw",%nobits
 690              	falg_speed_not_new:
 691 0000 00       	 .space 1
 692              	 .global setting_time_scalar
 693              	 .section .data.setting_time_scalar,"aw",%progbits
 694              	 .align 2
 697              	setting_time_scalar:
 698 0000 9A99193F 	 .word 1058642330
 699              	 .global step_start
 700              	 .section .bss.step_start,"aw",%nobits
 701              	 .align 2
 704              	step_start:
 705 0000 00000000 	 .space 4
 706              	 .global step
 707              	 .section .data.step,"aw",%progbits
 708              	 .align 2
 711              	step:
 712 0000 0000803F 	 .word 1065353216
 713              	 .global start_help_count
 714              	 .section .bss.start_help_count,"aw",%nobits
 717              	start_help_count:
 718 0000 00       	 .space 1
 719              	 .global start_hilfe
 720              	 .section .bss.start_hilfe,"aw",%nobits
 723              	start_hilfe:
 724 0000 00       	 .space 1
 725              	 .global V_DC_link
 726              	 .section .data.V_DC_link,"aw",%progbits
 727              	 .align 2
 730              	V_DC_link:
 731 0000 CDCC6C41 	 .word 1097649357
 732              	 .section .text.main,"ax",%progbits
 733              	 .align 2
 734              	 .global main
 735              	 .thumb
 736              	 .thumb_func
 738              	main:
 739              	.LFB552:
 740              	 .file 4 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2020 Jan 02 10:21:43
   5:../main.c     ****  *  Author: Baldo
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** // status: 11.05.2022
   9:../main.c     **** 
  10:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  11:../main.c     **** #include <math.h>
  12:../main.c     **** #include <stdio.h> //for printf
  13:../main.c     **** #include "rec_data_function.h"
  14:../main.c     **** 
  15:../main.c     **** //#######################
  16:../main.c     **** //FUNCTION DECLARATION
  17:../main.c     **** //########################
  18:../main.c     **** float readCurrent(uint8_t);
  19:../main.c     **** void Hall_init(void);
  20:../main.c     **** void HallSensor(void);
  21:../main.c     **** void Calculation(void);
  22:../main.c     **** 
  23:../main.c     **** //########################
  24:../main.c     **** //VARIABLE DECLARATION
  25:../main.c     **** //########################
  26:../main.c     **** 
  27:../main.c     **** // NEED to be set
  28:../main.c     **** //motor
  29:../main.c     **** #define MOTOR_NUM 10 // for trque dirction motro 1 differtn form rest so far
  30:../main.c     **** #define MOTOR_ON_ROVER 3// 0 front left 1 front right 2 back left 3 back right
  31:../main.c     **** 
  32:../main.c     **** //control type
  33:../main.c     **** uint8_t Torque_control = 1;
  34:../main.c     **** uint8_t Speed_control = 1; //if 0 is torque control if 1 is speed control
  35:../main.c     **** uint8_t CAN_control = 0; // id 1 CAN speed controll aktive
  36:../main.c     **** 
  37:../main.c     **** 
  38:../main.c     **** #define IQ_REF_MAX 5
  39:../main.c     **** #define CAN_NO_COM_TH 250
  40:../main.c     **** #define MAX_Speed_CAN 2
  41:../main.c     **** #define SPEED_LIMIT_CTRL_TO_ZERO 100 //omega_ele rad/s
  42:../main.c     **** #define TIME_OMEGA_0  5000 //time since last hall before omgea set to 0 in 100us
  43:../main.c     **** 
  44:../main.c     **** // Define often used vaules to decrease computational effort
  45:../main.c     **** #define PI 3.14159265
  46:../main.c     **** #define TwoThird 0.66666667
  47:../main.c     **** #define TwoPiThird 2.0943951
  48:../main.c     **** #define FourPiThird 4.1887902
  49:../main.c     **** #define Pi180 0.01745329
  50:../main.c     **** 
  51:../main.c     **** #define ANGLE_ONE_DEGREE (46603U)
  52:../main.c     **** //#define ANGLE_60_DEGREE	 (2796203U)
  53:../main.c     **** //#define ANGLE_180_DEGREE (8388608U)
  54:../main.c     **** 
  55:../main.c     **** //#define ANGLE_LSB (9455) // 2^24 corresponds to 360°. For a timer interrupt delta time of 100us 
  56:../main.c     **** 
  57:../main.c     **** // Define Chip select Pins for Current measurement via SPI Interface
  58:../main.c     **** #define ChipSelect_U 0b110
  59:../main.c     **** #define ChipSelect_V 0b101
  60:../main.c     **** #define ChipSelect_W 0b011
  61:../main.c     **** #define J 0.0023064 //SK J = 1/2 * m_wheel * r_wheel^2 = 1/2*1.2kg*(62mm)^2
  62:../main.c     **** #define K_T 0.21 //SK torque constant in Nm/A
  63:../main.c     **** #define K_inv (15.7/1.732) // K_inv = V / m = V_DC / 2 * 2/sqrt(3) = V_DC/sqrt(3)
  64:../main.c     **** //#define Psi_p 0.0082  60/  (2 * PI) * 1.4142 // Psi_p = K_back_EMF = 0.0082 V / rpm_mech --> 60 t
  65:../main.c     **** //#define Ls 0.00088 // Ls = Lm*1.1 = 0.8mH * 1.1 = 0.00088H
  66:../main.c     **** #define PPZ 11
  67:../main.c     **** #define WHEEL_R 0.0675 //0.135/2 straigt vaule other thing casued problems
  68:../main.c     **** 
  69:../main.c     **** float Current_U;
  70:../main.c     **** float Current_V;
  71:../main.c     **** float Current_W;
  72:../main.c     **** 
  73:../main.c     **** // Declaration of Lookup Table
  74:../main.c     **** int8_t lookup_table[] = {0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,-1,0,0,1,-1,0,0,0,0,0,0,0,0,0
  75:../main.c     **** //access via the index in the  form of the 6 bits (3 previous hall states and 3 actual  hall states
  76:../main.c     **** //for each of the 2^6 possibilities of sequence of hall events  it has been thought about the wavef
  77:../main.c     **** 
  78:../main.c     **** volatile int8_t sector = 0;
  79:../main.c     **** volatile int8_t direction = 0;              // direction +1/-1 -> CW and CCW
  80:../main.c     **** volatile uint16_t enc_val = 0;          // old and new values of all Hall Sensors
  81:../main.c     **** volatile uint32_t time_since_A = 0;	// time between to edges Hall A
  82:../main.c     **** volatile uint32_t time_since_B = 0; // time between to edges Hall B
  83:../main.c     **** volatile uint32_t time_since_C = 0; // time between to edges Hall C
  84:../main.c     **** volatile uint32_t time_180deg = 1000;        // time which last triggered HAL sensor needed for 180
  85:../main.c     **** volatile uint32_t time_180deg_cal = 1000;
  86:../main.c     **** volatile char last_Hall_trig;			//last triggered Hall Sensor A/B/C
  87:../main.c     **** 
  88:../main.c     **** float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60°
  89:../main.c     **** //volatile uint32_t TIME_OMEGA_0 = 50000; // t over this therschold assumed to be zero
  90:../main.c     **** 
  91:../main.c     **** float angle_phi = 0;
  92:../main.c     **** float ialpha,ibeta,iq,id,Valpha,Vbeta;
  93:../main.c     **** 
  94:../main.c     **** volatile float omega_ele_rads = 0; 	// electrical rad / sec //current real velocity calculated from
  95:../main.c     **** volatile float omega_mech_rps = 0;	//SK	//mechanical rounds per second
  96:../main.c     **** volatile float omega_mech_rps_temp = 0; //SK	//since dividing through the incremental (counted up) 
  97:../main.c     **** //volatile float omega_ele_rads_ref = -2*69.11; //1*69.11; //SK		//target velocity electrical in ra
  98:../main.c     **** 
  99:../main.c     **** volatile float omega_ele_degs = 0;
 100:../main.c     **** 
 101:../main.c     **** // REF vaules given to PI controller
 102:../main.c     **** float speed_ref = 0.0; //meters per second
 103:../main.c     **** float omega_ele_rads_ref = 0.0; // electrical rad per second
 104:../main.c     **** float iq_ref = 0.0;
 105:../main.c     **** float T_ref = 0.0;
 106:../main.c     **** float Vd = 0;
 107:../main.c     **** float Vq = 0;
 108:../main.c     **** float omega_mech_rps_ref = 0;
 109:../main.c     **** 
 110:../main.c     **** // CAN vars
 111:../main.c     **** int16_t Speeds_int16_r[4];
 112:../main.c     **** float CAN_speed_ref = 0.0;
 113:../main.c     **** uint8_t CAN_new_meassage = 0; // if 1 recived can data
 114:../main.c     **** uint8_t CAN_no_com_counter = 0;
 115:../main.c     **** // distacne vaule back over can
 116:../main.c     **** int distance_180deg_ele_count = 0;
 117:../main.c     **** float Speed_act = 0;
 118:../main.c     **** float distance = 0;
 119:../main.c     **** 
 120:../main.c     **** volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
 121:../main.c     **** volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which 
 122:../main.c     **** 
 123:../main.c     **** float angle_ab;
 124:../main.c     **** float angle_ab_rad;
 125:../main.c     **** float amplitude_ab;
 126:../main.c     **** 
 127:../main.c     **** float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
 128:../main.c     **** float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I
 129:../main.c     **** 
 130:../main.c     **** //float amp_limit_SVM_app = 2500;  Bo
 131:../main.c     **** 
 132:../main.c     **** // scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
 133:../main.c     **** float scaling_factor = 135;
 134:../main.c     **** float amplitude_corrected;
 135:../main.c     **** 
 136:../main.c     **** 
 137:../main.c     **** // Counter for calculation function -> only use a multiple of the SVM Interrupt
 138:../main.c     **** volatile uint8_t count = 0;
 139:../main.c     **** 
 140:../main.c     **** // Angle correction factor to align Current to Hall Sensor vuales form 14/04
 141:../main.c     **** float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
 142:../main.c     **** float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction
 143:../main.c     **** 
 144:../main.c     **** //################ PI
 145:../main.c     **** // PID Controller declaration for Id and Iq component
 146:../main.c     **** typedef struct{
 147:../main.c     **** 	float P,I,D;
 148:../main.c     **** 	float MaxLimit, MinLimit;
 149:../main.c     **** 	float Output;
 150:../main.c     **** 	float Deviation_old, Deviation_old2;
 151:../main.c     **** 	float Output_z;
 152:../main.c     **** }PID_param;
 153:../main.c     **** 
 154:../main.c     **** //Vuales 14/04 mit maurzio
 155:../main.c     **** //PID_param omegaq = {.P = 0.004, .I = 0.004, .D = 0.0, .MaxLimit =  0.5, .MinLimit = -0.5, .Output
 156:../main.c     **** //PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 157:../main.c     **** //PID_param Id_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 158:../main.c     **** 
 159:../main.c     **** //PID_param Iq_param = {.P = 0.50, .I = 424.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Outpu
 160:../main.c     **** //PID_param Id_param = {.P = 0.50, .I = 424.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Outpu
 161:../main.c     **** PID_param Iq_param = {.P = 0.28, .I = 232.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output 
 162:../main.c     **** PID_param Id_param = {.P = 0.28, .I = 232.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output 
 163:../main.c     **** PID_param omega_param = {.P = 0.3949, .I = 0.1619, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Outpu
 164:../main.c     **** 
 165:../main.c     **** // for motro 1
 166:../main.c     **** PID_param T_param_1 = {.P = 0.005, .I = 0.01, .D = 0.0, .MaxLimit =  1.5, .MinLimit = -1.5, .Output
 167:../main.c     **** 
 168:../main.c     **** float PID_Controller(float,float,PID_param *param);
 169:../main.c     **** 
 170:../main.c     **** uint8_t falg_speed_not_new = 0;
 171:../main.c     **** float setting_time_scalar = 0.6, step_start =0, step = 1;
 172:../main.c     **** 
 173:../main.c     **** uint8_t start_help_count = 0, start_hilfe = 0;
 174:../main.c     **** #define START_HELP_T 0.2
 175:../main.c     **** 
 176:../main.c     **** float V_DC_link = 14.8; // nominal batt voltage
 177:../main.c     **** 
 178:../main.c     **** 
 179:../main.c     **** //########################
 180:../main.c     **** // MAIN
 181:../main.c     **** //########################
 182:../main.c     **** 
 183:../main.c     **** int main(void)
 184:../main.c     **** {
 741              	 .loc 4 184 0
 742              	 .cfi_startproc
 743              	 
 744              	 
 745 0000 90B5     	 push {r4,r7,lr}
 746              	.LCFI33:
 747              	 .cfi_def_cfa_offset 12
 748              	 .cfi_offset 4,-12
 749              	 .cfi_offset 7,-8
 750              	 .cfi_offset 14,-4
 751 0002 87B0     	 sub sp,sp,#28
 752              	.LCFI34:
 753              	 .cfi_def_cfa_offset 40
 754 0004 04AF     	 add r7,sp,#16
 755              	.LCFI35:
 756              	 .cfi_def_cfa 7,24
 185:../main.c     ****   DAVE_STATUS_t status;
 186:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 757              	 .loc 4 186 0
 758 0006 FFF7FEFF 	 bl DAVE_Init
 759 000a 0346     	 mov r3,r0
 760 000c FB71     	 strb r3,[r7,#7]
 187:../main.c     **** 
 188:../main.c     ****   Hall_init();
 761              	 .loc 4 188 0
 762 000e FFF7FEFF 	 bl Hall_init
 189:../main.c     **** 
 190:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 763              	 .loc 4 190 0
 764 0012 FB79     	 ldrb r3,[r7,#7]
 765 0014 002B     	 cmp r3,#0
 766 0016 00D0     	 beq .L10
 767              	.L11:
 191:../main.c     ****   {
 192:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 193:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 194:../main.c     **** 
 195:../main.c     ****     while(1U)
 196:../main.c     ****     {
 197:../main.c     **** 
 198:../main.c     ****     }
 768              	 .loc 4 198 0 discriminator 1
 769 0018 FEE7     	 b .L11
 770              	.L10:
 199:../main.c     ****   }
 200:../main.c     **** 
 201:../main.c     ****   //Initialization of CAN
 202:../main.c     ****   	CAN_NODE_STATUS_t init_status;
 203:../main.c     ****   	init_status = CAN_NODE_Init(&CAN_NODE_0);
 771              	 .loc 4 203 0
 772 001a 1448     	 ldr r0,.L14
 773 001c FFF7FEFF 	 bl CAN_NODE_Init
 774 0020 0346     	 mov r3,r0
 775 0022 BB71     	 strb r3,[r7,#6]
 204:../main.c     **** 
 205:../main.c     ****   	if (init_status != CAN_NODE_STATUS_SUCCESS) {
 206:../main.c     ****   		XMC_DEBUG("CAN initialization failed\n");
 207:../main.c     ****   	}
 208:../main.c     **** 
 209:../main.c     ****   if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
 210:../main.c     **** 	  while(1U)
 211:../main.c     **** 	      {
 212:../main.c     **** 		//  printf("MOTOR_ON_ROVER number false");
 213:../main.c     **** 	      }
 214:../main.c     ****   }
 215:../main.c     **** 
 216:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 217:../main.c     ****   while(1U)
 218:../main.c     ****   {
 219:../main.c     **** 	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 776              	 .loc 4 219 0
 777 0024 1248     	 ldr r0,.L14+4
 778 0026 FFF7FEFF 	 bl PWM_SVM_Start
 779              	.L13:
 220:../main.c     **** 		  while(1U)
 221:../main.c     **** 		    {
 222:../main.c     **** 			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 780              	 .loc 4 222 0
 781 002a 124B     	 ldr r3,.L14+8
 782 002c 1B78     	 ldrb r3,[r3]
 783 002e DBB2     	 uxtb r3,r3
 784 0030 032B     	 cmp r3,#3
 785 0032 1AD9     	 bls .L12
 223:../main.c     **** 			  {
 224:../main.c     **** 				  count=0;
 786              	 .loc 4 224 0
 787 0034 0F4B     	 ldr r3,.L14+8
 788 0036 0022     	 movs r2,#0
 789 0038 1A70     	 strb r2,[r3]
 225:../main.c     **** 				  Calculation();
 790              	 .loc 4 225 0
 791 003a FFF7FEFF 	 bl Calculation
 226:../main.c     **** 
 227:../main.c     **** 				  //f_rec_data(omega_mech_rps	,T_ref,&T_ref,0.15,0.2,10,1);
 228:../main.c     **** 				  f_rec_data(omega_mech_rps	,T_ref,&omega_mech_rps_ref,step_start,step,10,0.4);
 792              	 .loc 4 228 0
 793 003e 0E4B     	 ldr r3,.L14+12
 794 0040 1968     	 ldr r1,[r3]
 795 0042 0E4B     	 ldr r3,.L14+16
 796 0044 1A68     	 ldr r2,[r3]
 797 0046 0E4B     	 ldr r3,.L14+20
 798 0048 1C68     	 ldr r4,[r3]
 799 004a 0E4B     	 ldr r3,.L14+24
 800 004c 1B68     	 ldr r3,[r3]
 801 004e 0093     	 str r3,[sp]
 802 0050 0A23     	 movs r3,#10
 803 0052 0193     	 str r3,[sp,#4]
 804 0054 0C4B     	 ldr r3,.L14+28
 805 0056 0293     	 str r3,[sp,#8]
 806 0058 0846     	 mov r0,r1
 807 005a 1146     	 mov r1,r2
 808 005c 0B4A     	 ldr r2,.L14+32
 809 005e 2346     	 mov r3,r4
 810 0060 FFF7FEFF 	 bl f_rec_data
 229:../main.c     **** 
 230:../main.c     **** 				  ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 811              	 .loc 4 230 0
 812 0064 0A48     	 ldr r0,.L14+36
 813 0066 FFF7FEFF 	 bl ADC_MEASUREMENT_StartConversion
 814              	.L12:
 231:../main.c     **** 			  }
 232:../main.c     **** 		    }
 815              	 .loc 4 232 0
 816 006a DEE7     	 b .L13
 817              	.L15:
 818              	 .align 2
 819              	.L14:
 820 006c 00000000 	 .word CAN_NODE_0
 821 0070 00000000 	 .word PWM_SVM_0
 822 0074 00000000 	 .word count
 823 0078 00000000 	 .word omega_mech_rps
 824 007c 00000000 	 .word T_ref
 825 0080 00000000 	 .word step_start
 826 0084 00000000 	 .word step
 827 0088 CDCCCC3E 	 .word 1053609165
 828 008c 00000000 	 .word omega_mech_rps_ref
 829 0090 00000000 	 .word ADC_MEASUREMENT_0
 830              	 .cfi_endproc
 831              	.LFE552:
 833              	 .section .text.CAN0_1_IRQHandler,"ax",%progbits
 834              	 .align 2
 835              	 .global CAN0_1_IRQHandler
 836              	 .thumb
 837              	 .thumb_func
 839              	CAN0_1_IRQHandler:
 840              	.LFB553:
 233:../main.c     ****   }
 234:../main.c     **** }
 235:../main.c     **** 
 236:../main.c     **** 
 237:../main.c     **** //########################
 238:../main.c     **** // INTERRUPTS
 239:../main.c     **** //########################
 240:../main.c     **** 
 241:../main.c     **** // CAN Communication
 242:../main.c     **** void CAN_RX_MO2_ISR(void){
 841              	 .loc 4 242 0
 842              	 .cfi_startproc
 843              	 
 844              	 
 845 0000 80B5     	 push {r7,lr}
 846              	.LCFI36:
 847              	 .cfi_def_cfa_offset 8
 848              	 .cfi_offset 7,-8
 849              	 .cfi_offset 14,-4
 850 0002 84B0     	 sub sp,sp,#16
 851              	.LCFI37:
 852              	 .cfi_def_cfa_offset 24
 853 0004 00AF     	 add r7,sp,#0
 854              	.LCFI38:
 855              	 .cfi_def_cfa_register 7
 243:../main.c     **** 		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
 856              	 .loc 4 243 0
 857 0006 384B     	 ldr r3,.L27
 858 0008 1B69     	 ldr r3,[r3,#16]
 859 000a 1B68     	 ldr r3,[r3]
 860 000c BB60     	 str r3,[r7,#8]
 244:../main.c     **** 		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
 861              	 .loc 4 244 0
 862 000e 364B     	 ldr r3,.L27
 863 0010 1B69     	 ldr r3,[r3,#16]
 864 0012 1846     	 mov r0,r3
 865 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 245:../main.c     **** 
 246:../main.c     **** 		uint8_t data_r[8];
 247:../main.c     **** 		 int i;
 248:../main.c     **** 		 for(i = 0 ; i < 8 ; i ++){
 866              	 .loc 4 248 0
 867 0018 0023     	 movs r3,#0
 868 001a FB60     	 str r3,[r7,#12]
 869 001c 0CE0     	 b .L17
 870              	.L18:
 249:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 871              	 .loc 4 249 0 discriminator 3
 872 001e BA68     	 ldr r2,[r7,#8]
 873 0020 FB68     	 ldr r3,[r7,#12]
 874 0022 1344     	 add r3,r3,r2
 875 0024 1033     	 adds r3,r3,#16
 876 0026 1978     	 ldrb r1,[r3]
 877 0028 3A46     	 mov r2,r7
 878 002a FB68     	 ldr r3,[r7,#12]
 879 002c 1344     	 add r3,r3,r2
 880 002e 0A46     	 mov r2,r1
 881 0030 1A70     	 strb r2,[r3]
 248:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 882              	 .loc 4 248 0 discriminator 3
 883 0032 FB68     	 ldr r3,[r7,#12]
 884 0034 0133     	 adds r3,r3,#1
 885 0036 FB60     	 str r3,[r7,#12]
 886              	.L17:
 248:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 887              	 .loc 4 248 0 is_stmt 0 discriminator 1
 888 0038 FB68     	 ldr r3,[r7,#12]
 889 003a 072B     	 cmp r3,#7
 890 003c EFDD     	 ble .L18
 250:../main.c     **** 		 }
 251:../main.c     **** 
 252:../main.c     **** 		 for(i = 0 ; i < 4 ; i ++){
 891              	 .loc 4 252 0 is_stmt 1
 892 003e 0023     	 movs r3,#0
 893 0040 FB60     	 str r3,[r7,#12]
 894 0042 1AE0     	 b .L19
 895              	.L20:
 253:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 896              	 .loc 4 253 0 discriminator 3
 897 0044 FB68     	 ldr r3,[r7,#12]
 898 0046 5B00     	 lsls r3,r3,#1
 899 0048 0133     	 adds r3,r3,#1
 900 004a 07F11002 	 add r2,r7,#16
 901 004e 1344     	 add r3,r3,r2
 902 0050 13F8103C 	 ldrb r3,[r3,#-16]
 903 0054 1B02     	 lsls r3,r3,#8
 904 0056 9AB2     	 uxth r2,r3
 905 0058 FB68     	 ldr r3,[r7,#12]
 906 005a 5B00     	 lsls r3,r3,#1
 907 005c 07F11001 	 add r1,r7,#16
 908 0060 0B44     	 add r3,r3,r1
 909 0062 13F8103C 	 ldrb r3,[r3,#-16]
 910 0066 9BB2     	 uxth r3,r3
 911 0068 1343     	 orrs r3,r3,r2
 912 006a 99B2     	 uxth r1,r3
 913 006c 1F4A     	 ldr r2,.L27+4
 914 006e FB68     	 ldr r3,[r7,#12]
 915 0070 22F81310 	 strh r1,[r2,r3,lsl#1]
 252:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 916              	 .loc 4 252 0 discriminator 3
 917 0074 FB68     	 ldr r3,[r7,#12]
 918 0076 0133     	 adds r3,r3,#1
 919 0078 FB60     	 str r3,[r7,#12]
 920              	.L19:
 252:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 921              	 .loc 4 252 0 is_stmt 0 discriminator 1
 922 007a FB68     	 ldr r3,[r7,#12]
 923 007c 032B     	 cmp r3,#3
 924 007e E1DD     	 ble .L20
 254:../main.c     **** 			 }
 255:../main.c     **** 
 256:../main.c     **** 		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 925              	 .loc 4 256 0 is_stmt 1
 926 0080 1A4B     	 ldr r3,.L27+4
 927 0082 DB88     	 ldrh r3,[r3,#6]
 928 0084 1BB2     	 sxth r3,r3
 929 0086 07EE903A 	 fmsr s15,r3
 930 008a F8EEE77A 	 fsitos s15,s15
 931 008e 9FED187A 	 flds s14,.L27+8
 932 0092 C7EE877A 	 fdivs s15,s15,s14
 933 0096 174B     	 ldr r3,.L27+12
 934 0098 C3ED007A 	 fsts s15,[r3]
 257:../main.c     **** 
 258:../main.c     **** 		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6
 259:../main.c     **** 
 260:../main.c     **** 		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 935              	 .loc 4 260 0
 936 009c 154B     	 ldr r3,.L27+12
 937 009e D3ED007A 	 flds s15,[r3]
 938 00a2 B0EE007A 	 fconsts s14,#0
 939 00a6 F4EEC77A 	 fcmpes s15,s14
 940 00aa F1EE10FA 	 fmstat
 941 00ae 03DD     	 ble .L21
 942              	 .loc 4 260 0 is_stmt 0 discriminator 1
 943 00b0 104B     	 ldr r3,.L27+12
 944 00b2 4FF08042 	 mov r2,#1073741824
 945 00b6 1A60     	 str r2,[r3]
 946              	.L21:
 261:../main.c     **** 		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 947              	 .loc 4 261 0 is_stmt 1
 948 00b8 0E4B     	 ldr r3,.L27+12
 949 00ba D3ED007A 	 flds s15,[r3]
 950 00be B8EE007A 	 fconsts s14,#128
 951 00c2 F4EEC77A 	 fcmpes s15,s14
 952 00c6 F1EE10FA 	 fmstat
 953 00ca 03D5     	 bpl .L23
 954              	 .loc 4 261 0 is_stmt 0 discriminator 1
 955 00cc 094B     	 ldr r3,.L27+12
 956 00ce 4FF04042 	 mov r2,#-1073741824
 957 00d2 1A60     	 str r2,[r3]
 958              	.L23:
 262:../main.c     **** 
 263:../main.c     **** 		CAN_new_meassage = 1;
 959              	 .loc 4 263 0 is_stmt 1
 960 00d4 084B     	 ldr r3,.L27+16
 961 00d6 0122     	 movs r2,#1
 962 00d8 1A70     	 strb r2,[r3]
 264:../main.c     **** 		CAN_no_com_counter = 0;
 963              	 .loc 4 264 0
 964 00da 084B     	 ldr r3,.L27+20
 965 00dc 0022     	 movs r2,#0
 966 00de 1A70     	 strb r2,[r3]
 265:../main.c     **** }
 967              	 .loc 4 265 0
 968 00e0 1037     	 adds r7,r7,#16
 969              	.LCFI39:
 970              	 .cfi_def_cfa_offset 8
 971 00e2 BD46     	 mov sp,r7
 972              	.LCFI40:
 973              	 .cfi_def_cfa_register 13
 974              	 
 975 00e4 80BD     	 pop {r7,pc}
 976              	.L28:
 977 00e6 00BF     	 .align 2
 978              	.L27:
 979 00e8 00000000 	 .word CAN_NODE_0
 980 00ec 00000000 	 .word Speeds_int16_r
 981 00f0 00007A44 	 .word 1148846080
 982 00f4 00000000 	 .word CAN_speed_ref
 983 00f8 00000000 	 .word CAN_new_meassage
 984 00fc 00000000 	 .word CAN_no_com_counter
 985              	 .cfi_endproc
 986              	.LFE553:
 988              	 .section .text.CAN0_0_IRQHandler,"ax",%progbits
 989              	 .align 2
 990              	 .global CAN0_0_IRQHandler
 991              	 .thumb
 992              	 .thumb_func
 994              	CAN0_0_IRQHandler:
 995              	.LFB554:
 266:../main.c     **** 
 267:../main.c     **** //CAN RX reste distance
 268:../main.c     **** void CAN_RX_MO7_ISR(void){
 996              	 .loc 4 268 0
 997              	 .cfi_startproc
 998              	 
 999              	 
 1000 0000 80B5     	 push {r7,lr}
 1001              	.LCFI41:
 1002              	 .cfi_def_cfa_offset 8
 1003              	 .cfi_offset 7,-8
 1004              	 .cfi_offset 14,-4
 1005 0002 84B0     	 sub sp,sp,#16
 1006              	.LCFI42:
 1007              	 .cfi_def_cfa_offset 24
 1008 0004 00AF     	 add r7,sp,#0
 1009              	.LCFI43:
 1010              	 .cfi_def_cfa_register 7
 269:../main.c     **** 	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 1011              	 .loc 4 269 0
 1012 0006 124B     	 ldr r3,.L33
 1013 0008 5B6A     	 ldr r3,[r3,#36]
 1014 000a 1B68     	 ldr r3,[r3]
 1015 000c BB60     	 str r3,[r7,#8]
 270:../main.c     **** 	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 1016              	 .loc 4 270 0
 1017 000e 104B     	 ldr r3,.L33
 1018 0010 5B6A     	 ldr r3,[r3,#36]
 1019 0012 1846     	 mov r0,r3
 1020 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 271:../main.c     **** 
 272:../main.c     **** 	uint8_t data_r[4];
 273:../main.c     **** 	 int i;
 274:../main.c     **** 	 for(i = 0 ; i < 4 ; i ++){
 1021              	 .loc 4 274 0
 1022 0018 0023     	 movs r3,#0
 1023 001a FB60     	 str r3,[r7,#12]
 1024 001c 0CE0     	 b .L30
 1025              	.L31:
 275:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 1026              	 .loc 4 275 0 discriminator 3
 1027 001e BA68     	 ldr r2,[r7,#8]
 1028 0020 FB68     	 ldr r3,[r7,#12]
 1029 0022 1344     	 add r3,r3,r2
 1030 0024 1033     	 adds r3,r3,#16
 1031 0026 1978     	 ldrb r1,[r3]
 1032 0028 3A1D     	 adds r2,r7,#4
 1033 002a FB68     	 ldr r3,[r7,#12]
 1034 002c 1344     	 add r3,r3,r2
 1035 002e 0A46     	 mov r2,r1
 1036 0030 1A70     	 strb r2,[r3]
 274:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 1037              	 .loc 4 274 0 discriminator 3
 1038 0032 FB68     	 ldr r3,[r7,#12]
 1039 0034 0133     	 adds r3,r3,#1
 1040 0036 FB60     	 str r3,[r7,#12]
 1041              	.L30:
 274:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 1042              	 .loc 4 274 0 is_stmt 0 discriminator 1
 1043 0038 FB68     	 ldr r3,[r7,#12]
 1044 003a 032B     	 cmp r3,#3
 1045 003c EFDD     	 ble .L31
 276:../main.c     **** 	 }
 277:../main.c     **** 
 278:../main.c     **** 	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 1046              	 .loc 4 278 0 is_stmt 1
 1047 003e FB79     	 ldrb r3,[r7,#7]
 1048 0040 012B     	 cmp r3,#1
 1049 0042 02D1     	 bne .L29
 1050              	 .loc 4 278 0 is_stmt 0 discriminator 1
 1051 0044 034B     	 ldr r3,.L33+4
 1052 0046 0022     	 movs r2,#0
 1053 0048 1A60     	 str r2,[r3]
 1054              	.L29:
 279:../main.c     **** }
 1055              	 .loc 4 279 0 is_stmt 1
 1056 004a 1037     	 adds r7,r7,#16
 1057              	.LCFI44:
 1058              	 .cfi_def_cfa_offset 8
 1059 004c BD46     	 mov sp,r7
 1060              	.LCFI45:
 1061              	 .cfi_def_cfa_register 13
 1062              	 
 1063 004e 80BD     	 pop {r7,pc}
 1064              	.L34:
 1065              	 .align 2
 1066              	.L33:
 1067 0050 00000000 	 .word CAN_NODE_0
 1068 0054 00000000 	 .word distance_180deg_ele_count
 1069              	 .cfi_endproc
 1070              	.LFE554:
 1072              	 .global __aeabi_f2d
 1073              	 .global __aeabi_dmul
 1074              	 .global __aeabi_ddiv
 1075              	 .global __aeabi_d2f
 1076              	 .global __aeabi_dadd
 1077              	 .section .text.CCU43_0_IRQHandler,"ax",%progbits
 1078              	 .align 2
 1079              	 .global CCU43_0_IRQHandler
 1080              	 .thumb
 1081              	 .thumb_func
 1083              	CCU43_0_IRQHandler:
 1084              	.LFB555:
 280:../main.c     **** 
 281:../main.c     **** void CAN_TX_ISR(void){
 1085              	 .loc 4 281 0
 1086              	 .cfi_startproc
 1087              	 
 1088              	 
 1089 0000 80B5     	 push {r7,lr}
 1090              	.LCFI46:
 1091              	 .cfi_def_cfa_offset 8
 1092              	 .cfi_offset 7,-8
 1093              	 .cfi_offset 14,-4
 1094 0002 86B0     	 sub sp,sp,#24
 1095              	.LCFI47:
 1096              	 .cfi_def_cfa_offset 32
 1097 0004 00AF     	 add r7,sp,#0
 1098              	.LCFI48:
 1099              	 .cfi_def_cfa_register 7
 282:../main.c     **** 	int16_t Inverter_state[4] = {0};
 1100              	 .loc 4 282 0
 1101 0006 0023     	 movs r3,#0
 1102 0008 FB60     	 str r3,[r7,#12]
 1103 000a 0023     	 movs r3,#0
 1104 000c 3B61     	 str r3,[r7,#16]
 283:../main.c     **** 
 284:../main.c     **** 	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 1105              	 .loc 4 284 0
 1106 000e 0323     	 movs r3,#3
 1107 0010 BB81     	 strh r3,[r7,#12]
 285:../main.c     **** 	/*
 286:../main.c     **** 	if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
 287:../main.c     **** 	else Inverter_state[1] = 1;
 288:../main.c     **** 	*/
 289:../main.c     **** 
 290:../main.c     **** 	Inverter_state[1] = V_DC_link * 100;  // *100 send  2 deciaml places
 1108              	 .loc 4 290 0
 1109 0012 4F4B     	 ldr r3,.L36+16
 1110 0014 D3ED007A 	 flds s15,[r3]
 1111 0018 9FED4E7A 	 flds s14,.L36+20
 1112 001c 67EE877A 	 fmuls s15,s15,s14
 1113 0020 FDEEE77A 	 ftosizs s15,s15
 1114 0024 C7ED017A 	 fsts s15,[r7,#4]
 1115 0028 BB88     	 ldrh r3,[r7,#4]
 1116 002a 9BB2     	 uxth r3,r3
 1117 002c FB81     	 strh r3,[r7,#14]
 291:../main.c     **** 
 292:../main.c     **** 	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 1118              	 .loc 4 292 0
 1119 002e 4A4B     	 ldr r3,.L36+24
 1120 0030 1B68     	 ldr r3,[r3]
 1121 0032 1846     	 mov r0,r3
 1122 0034 FFF7FEFF 	 bl __aeabi_f2d
 1123 0038 0246     	 mov r2,r0
 1124 003a 0B46     	 mov r3,r1
 1125 003c 1046     	 mov r0,r2
 1126 003e 1946     	 mov r1,r3
 1127 0040 3FA3     	 adr r3,.L36
 1128 0042 D3E90023 	 ldrd r2,[r3]
 1129 0046 FFF7FEFF 	 bl __aeabi_dmul
 1130 004a 0246     	 mov r2,r0
 1131 004c 0B46     	 mov r3,r1
 1132 004e 1046     	 mov r0,r2
 1133 0050 1946     	 mov r1,r3
 1134 0052 4FF00002 	 mov r2,#0
 1135 0056 414B     	 ldr r3,.L36+28
 1136 0058 FFF7FEFF 	 bl __aeabi_ddiv
 1137 005c 0246     	 mov r2,r0
 1138 005e 0B46     	 mov r3,r1
 1139 0060 1046     	 mov r0,r2
 1140 0062 1946     	 mov r1,r3
 1141 0064 FFF7FEFF 	 bl __aeabi_d2f
 1142 0068 0246     	 mov r2,r0
 1143 006a 3D4B     	 ldr r3,.L36+32
 1144 006c 1A60     	 str r2,[r3]
 293:../main.c     **** 	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
 294:../main.c     **** 	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 1145              	 .loc 4 294 0
 1146 006e 3C4B     	 ldr r3,.L36+32
 1147 0070 D3ED007A 	 flds s15,[r3]
 1148 0074 9FED3B7A 	 flds s14,.L36+36
 1149 0078 67EE877A 	 fmuls s15,s15,s14
 1150 007c FDEEE77A 	 ftosizs s15,s15
 1151 0080 C7ED017A 	 fsts s15,[r7,#4]
 1152 0084 BB88     	 ldrh r3,[r7,#4]
 1153 0086 9BB2     	 uxth r3,r3
 1154 0088 3B82     	 strh r3,[r7,#16]
 295:../main.c     **** 
 296:../main.c     **** 	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 1155              	 .loc 4 296 0
 1156 008a 374B     	 ldr r3,.L36+40
 1157 008c 1B68     	 ldr r3,[r3]
 1158 008e 07EE903A 	 fmsr s15,r3
 1159 0092 F8EEE77A 	 fsitos s15,s15
 1160 0096 B0EE007A 	 fconsts s14,#0
 1161 009a C7EE877A 	 fdivs s15,s15,s14
 1162 009e B2EE067A 	 fconsts s14,#38
 1163 00a2 C7EE877A 	 fdivs s15,s15,s14
 1164 00a6 17EE900A 	 fmrs r0,s15
 1165 00aa FFF7FEFF 	 bl __aeabi_f2d
 1166 00ae 0246     	 mov r2,r0
 1167 00b0 0B46     	 mov r3,r1
 1168 00b2 1046     	 mov r0,r2
 1169 00b4 1946     	 mov r1,r3
 1170 00b6 24A3     	 adr r3,.L36+8
 1171 00b8 D3E90023 	 ldrd r2,[r3]
 1172 00bc FFF7FEFF 	 bl __aeabi_dmul
 1173 00c0 0246     	 mov r2,r0
 1174 00c2 0B46     	 mov r3,r1
 1175 00c4 1046     	 mov r0,r2
 1176 00c6 1946     	 mov r1,r3
 1177 00c8 FFF7FEFF 	 bl __aeabi_dadd
 1178 00cc 0246     	 mov r2,r0
 1179 00ce 0B46     	 mov r3,r1
 1180 00d0 1046     	 mov r0,r2
 1181 00d2 1946     	 mov r1,r3
 1182 00d4 1AA3     	 adr r3,.L36
 1183 00d6 D3E90023 	 ldrd r2,[r3]
 1184 00da FFF7FEFF 	 bl __aeabi_dmul
 1185 00de 0246     	 mov r2,r0
 1186 00e0 0B46     	 mov r3,r1
 1187 00e2 1046     	 mov r0,r2
 1188 00e4 1946     	 mov r1,r3
 1189 00e6 FFF7FEFF 	 bl __aeabi_d2f
 1190 00ea 0246     	 mov r2,r0
 1191 00ec 1F4B     	 ldr r3,.L36+44
 1192 00ee 1A60     	 str r2,[r3]
 297:../main.c     **** 	if(MOTOR_NUM == 6) distance = -distance;
 298:../main.c     **** 	Inverter_state[3] = distance * 1000; // to mm
 1193              	 .loc 4 298 0
 1194 00f0 1E4B     	 ldr r3,.L36+44
 1195 00f2 D3ED007A 	 flds s15,[r3]
 1196 00f6 9FED1B7A 	 flds s14,.L36+36
 1197 00fa 67EE877A 	 fmuls s15,s15,s14
 1198 00fe FDEEE77A 	 ftosizs s15,s15
 1199 0102 C7ED017A 	 fsts s15,[r7,#4]
 1200 0106 BB88     	 ldrh r3,[r7,#4]
 1201 0108 9BB2     	 uxth r3,r3
 1202 010a 7B82     	 strh r3,[r7,#18]
 299:../main.c     **** 
 300:../main.c     **** 	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 1203              	 .loc 4 300 0
 1204 010c 0523     	 movs r3,#5
 1205 010e FB75     	 strb r3,[r7,#23]
 301:../main.c     **** 	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 1206              	 .loc 4 301 0
 1207 0110 FB7D     	 ldrb r3,[r7,#23]
 1208 0112 174A     	 ldr r2,.L36+48
 1209 0114 0233     	 adds r3,r3,#2
 1210 0116 9B00     	 lsls r3,r3,#2
 1211 0118 1344     	 add r3,r3,r2
 1212 011a 5A68     	 ldr r2,[r3,#4]
 1213 011c 07F10C03 	 add r3,r7,#12
 1214 0120 1046     	 mov r0,r2
 1215 0122 1946     	 mov r1,r3
 1216 0124 FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
 302:../main.c     **** 	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 1217              	 .loc 4 302 0
 1218 0128 FB7D     	 ldrb r3,[r7,#23]
 1219 012a 114A     	 ldr r2,.L36+48
 1220 012c 0233     	 adds r3,r3,#2
 1221 012e 9B00     	 lsls r3,r3,#2
 1222 0130 1344     	 add r3,r3,r2
 1223 0132 5B68     	 ldr r3,[r3,#4]
 1224 0134 1846     	 mov r0,r3
 1225 0136 FFF7FEFF 	 bl CAN_NODE_MO_Transmit
 303:../main.c     **** }
 1226              	 .loc 4 303 0
 1227 013a 1837     	 adds r7,r7,#24
 1228              	.LCFI49:
 1229              	 .cfi_def_cfa_offset 8
 1230 013c BD46     	 mov sp,r7
 1231              	.LCFI50:
 1232              	 .cfi_def_cfa_register 13
 1233              	 
 1234 013e 80BD     	 pop {r7,pc}
 1235              	.L37:
 1236              	 .align 3
 1237              	.L36:
 1238 0140 48E17A14 	 .word 343597384
 1239 0144 AE47B13F 	 .word 1068582830
 1240 0148 F1D4C853 	 .word 1405670641
 1241 014c FB210940 	 .word 1074340347
 1242 0150 00000000 	 .word V_DC_link
 1243 0154 0000C842 	 .word 1120403456
 1244 0158 00000000 	 .word omega_ele_rads
 1245 015c 00002640 	 .word 1076232192
 1246 0160 00000000 	 .word Speed_act
 1247 0164 00007A44 	 .word 1148846080
 1248 0168 00000000 	 .word distance_180deg_ele_count
 1249 016c 00000000 	 .word distance
 1250 0170 00000000 	 .word CAN_NODE_0
 1251              	 .cfi_endproc
 1252              	.LFE555:
 1254              	 .global __aeabi_ui2d
 1255 0174 AFF30080 	 .section .text.VADC0_C0_2_IRQHandler,"ax",%progbits
 1256              	 .align 2
 1257              	 .global VADC0_C0_2_IRQHandler
 1258              	 .thumb
 1259              	 .thumb_func
 1261              	VADC0_C0_2_IRQHandler:
 1262              	.LFB556:
 304:../main.c     **** 
 305:../main.c     **** void Adc_Measurement_Handler(void){
 1263              	 .loc 4 305 0
 1264              	 .cfi_startproc
 1265              	 
 1266              	 
 1267 0000 80B5     	 push {r7,lr}
 1268              	.LCFI51:
 1269              	 .cfi_def_cfa_offset 8
 1270              	 .cfi_offset 7,-8
 1271              	 .cfi_offset 14,-4
 1272 0002 82B0     	 sub sp,sp,#8
 1273              	.LCFI52:
 1274              	 .cfi_def_cfa_offset 16
 1275 0004 00AF     	 add r7,sp,#0
 1276              	.LCFI53:
 1277              	 .cfi_def_cfa_register 7
 306:../main.c     **** 	uint32_t result  = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 1278              	 .loc 4 306 0
 1279 0006 1048     	 ldr r0,.L39+8
 1280 0008 FFF7FEFF 	 bl ADC_MEASUREMENT_GetResult
 1281 000c 0346     	 mov r3,r0
 1282 000e 7B60     	 str r3,[r7,#4]
 307:../main.c     **** 
 308:../main.c     **** 	V_DC_link =  result /79.5; // conversion to DClink
 1283              	 .loc 4 308 0
 1284 0010 7868     	 ldr r0,[r7,#4]
 1285 0012 FFF7FEFF 	 bl __aeabi_ui2d
 1286 0016 0246     	 mov r2,r0
 1287 0018 0B46     	 mov r3,r1
 1288 001a 1046     	 mov r0,r2
 1289 001c 1946     	 mov r1,r3
 1290 001e 08A3     	 adr r3,.L39
 1291 0020 D3E90023 	 ldrd r2,[r3]
 1292 0024 FFF7FEFF 	 bl __aeabi_ddiv
 1293 0028 0246     	 mov r2,r0
 1294 002a 0B46     	 mov r3,r1
 1295 002c 1046     	 mov r0,r2
 1296 002e 1946     	 mov r1,r3
 1297 0030 FFF7FEFF 	 bl __aeabi_d2f
 1298 0034 0246     	 mov r2,r0
 1299 0036 054B     	 ldr r3,.L39+12
 1300 0038 1A60     	 str r2,[r3]
 309:../main.c     **** 
 310:../main.c     **** }
 1301              	 .loc 4 310 0
 1302 003a 0837     	 adds r7,r7,#8
 1303              	.LCFI54:
 1304              	 .cfi_def_cfa_offset 8
 1305 003c BD46     	 mov sp,r7
 1306              	.LCFI55:
 1307              	 .cfi_def_cfa_register 13
 1308              	 
 1309 003e 80BD     	 pop {r7,pc}
 1310              	.L40:
 1311              	 .align 3
 1312              	.L39:
 1313 0040 00000000 	 .word 0
 1314 0044 00E05340 	 .word 1079238656
 1315 0048 00000000 	 .word ADC_MEASUREMENT_Channel_A_handle
 1316 004c 00000000 	 .word V_DC_link
 1317              	 .cfi_endproc
 1318              	.LFE556:
 1320              	 .section .text.CCU43_3_IRQHandler,"ax",%progbits
 1321              	 .align 2
 1322              	 .global CCU43_3_IRQHandler
 1323              	 .thumb
 1324              	 .thumb_func
 1326              	CCU43_3_IRQHandler:
 1327              	.LFB557:
 311:../main.c     **** 
 312:../main.c     **** // 100us Timer for speed measurement
 313:../main.c     **** void TimeCounterISR(void){
 1328              	 .loc 4 313 0
 1329              	 .cfi_startproc
 1330              	 
 1331              	 
 1332              	 
 1333 0000 80B4     	 push {r7}
 1334              	.LCFI56:
 1335              	 .cfi_def_cfa_offset 4
 1336              	 .cfi_offset 7,-4
 1337 0002 00AF     	 add r7,sp,#0
 1338              	.LCFI57:
 1339              	 .cfi_def_cfa_register 7
 314:../main.c     **** 	time_since_A ++;
 1340              	 .loc 4 314 0
 1341 0004 094B     	 ldr r3,.L42
 1342 0006 1B68     	 ldr r3,[r3]
 1343 0008 0133     	 adds r3,r3,#1
 1344 000a 084A     	 ldr r2,.L42
 1345 000c 1360     	 str r3,[r2]
 315:../main.c     **** 	time_since_B ++;
 1346              	 .loc 4 315 0
 1347 000e 084B     	 ldr r3,.L42+4
 1348 0010 1B68     	 ldr r3,[r3]
 1349 0012 0133     	 adds r3,r3,#1
 1350 0014 064A     	 ldr r2,.L42+4
 1351 0016 1360     	 str r3,[r2]
 316:../main.c     **** 	time_since_C ++;
 1352              	 .loc 4 316 0
 1353 0018 064B     	 ldr r3,.L42+8
 1354 001a 1B68     	 ldr r3,[r3]
 1355 001c 0133     	 adds r3,r3,#1
 1356 001e 054A     	 ldr r2,.L42+8
 1357 0020 1360     	 str r3,[r2]
 317:../main.c     **** }
 1358              	 .loc 4 317 0
 1359 0022 BD46     	 mov sp,r7
 1360              	.LCFI58:
 1361              	 .cfi_def_cfa_register 13
 1362              	 
 1363 0024 5DF8047B 	 ldr r7,[sp],#4
 1364              	.LCFI59:
 1365              	 .cfi_restore 7
 1366              	 .cfi_def_cfa_offset 0
 1367 0028 7047     	 bx lr
 1368              	.L43:
 1369 002a 00BF     	 .align 2
 1370              	.L42:
 1371 002c 00000000 	 .word time_since_A
 1372 0030 00000000 	 .word time_since_B
 1373 0034 00000000 	 .word time_since_C
 1374              	 .cfi_endproc
 1375              	.LFE557:
 1377              	 .section .text.ERU1_2_IRQHandler,"ax",%progbits
 1378              	 .align 2
 1379              	 .global ERU1_2_IRQHandler
 1380              	 .thumb
 1381              	 .thumb_func
 1383              	ERU1_2_IRQHandler:
 1384              	.LFB558:
 318:../main.c     **** 
 319:../main.c     **** // Hall Sensors
 320:../main.c     **** void HallSensor_A_ISR(void){
 1385              	 .loc 4 320 0
 1386              	 .cfi_startproc
 1387              	 
 1388              	 
 1389 0000 80B5     	 push {r7,lr}
 1390              	.LCFI60:
 1391              	 .cfi_def_cfa_offset 8
 1392              	 .cfi_offset 7,-8
 1393              	 .cfi_offset 14,-4
 1394 0002 00AF     	 add r7,sp,#0
 1395              	.LCFI61:
 1396              	 .cfi_def_cfa_register 7
 321:../main.c     **** 	HallSensor();
 1397              	 .loc 4 321 0
 1398 0004 FFF7FEFF 	 bl HallSensor
 322:../main.c     **** 	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
 1399              	 .loc 4 322 0
 1400 0008 114B     	 ldr r3,.L47
 1401 000a 1B68     	 ldr r3,[r3]
 1402 000c 114A     	 ldr r2,.L47+4
 1403 000e 1360     	 str r3,[r2]
 323:../main.c     **** 	time_since_A = 0;						// measurement of speed -> time between change of Hall A
 1404              	 .loc 4 323 0
 1405 0010 0F4B     	 ldr r3,.L47
 1406 0012 0022     	 movs r2,#0
 1407 0014 1A60     	 str r2,[r3]
 324:../main.c     **** 	last_Hall_trig = 'A';
 1408              	 .loc 4 324 0
 1409 0016 104B     	 ldr r3,.L47+8
 1410 0018 4122     	 movs r2,#65
 1411 001a 1A70     	 strb r2,[r3]
 325:../main.c     **** 
 326:../main.c     **** 	if(direction == 1 ) distance_180deg_ele_count ++;
 1412              	 .loc 4 326 0
 1413 001c 0F4B     	 ldr r3,.L47+12
 1414 001e 1B78     	 ldrb r3,[r3]
 1415 0020 DBB2     	 uxtb r3,r3
 1416 0022 5BB2     	 sxtb r3,r3
 1417 0024 012B     	 cmp r3,#1
 1418 0026 05D1     	 bne .L45
 1419              	 .loc 4 326 0 is_stmt 0 discriminator 1
 1420 0028 0D4B     	 ldr r3,.L47+16
 1421 002a 1B68     	 ldr r3,[r3]
 1422 002c 0133     	 adds r3,r3,#1
 1423 002e 0C4A     	 ldr r2,.L47+16
 1424 0030 1360     	 str r3,[r2]
 1425 0032 0BE0     	 b .L44
 1426              	.L45:
 327:../main.c     **** 	else if(direction == -1 ) distance_180deg_ele_count --;
 1427              	 .loc 4 327 0 is_stmt 1
 1428 0034 094B     	 ldr r3,.L47+12
 1429 0036 1B78     	 ldrb r3,[r3]
 1430 0038 DBB2     	 uxtb r3,r3
 1431 003a 5BB2     	 sxtb r3,r3
 1432 003c B3F1FF3F 	 cmp r3,#-1
 1433 0040 04D1     	 bne .L44
 1434              	 .loc 4 327 0 is_stmt 0 discriminator 1
 1435 0042 074B     	 ldr r3,.L47+16
 1436 0044 1B68     	 ldr r3,[r3]
 1437 0046 013B     	 subs r3,r3,#1
 1438 0048 054A     	 ldr r2,.L47+16
 1439 004a 1360     	 str r3,[r2]
 1440              	.L44:
 328:../main.c     **** }
 1441              	 .loc 4 328 0 is_stmt 1
 1442 004c 80BD     	 pop {r7,pc}
 1443              	.L48:
 1444 004e 00BF     	 .align 2
 1445              	.L47:
 1446 0050 00000000 	 .word time_since_A
 1447 0054 00000000 	 .word time_180deg
 1448 0058 00000000 	 .word last_Hall_trig
 1449 005c 00000000 	 .word direction
 1450 0060 00000000 	 .word distance_180deg_ele_count
 1451              	 .cfi_endproc
 1452              	.LFE558:
 1454              	 .section .text.ERU1_0_IRQHandler,"ax",%progbits
 1455              	 .align 2
 1456              	 .global ERU1_0_IRQHandler
 1457              	 .thumb
 1458              	 .thumb_func
 1460              	ERU1_0_IRQHandler:
 1461              	.LFB559:
 329:../main.c     **** void HallSensor_B_ISR(void){
 1462              	 .loc 4 329 0
 1463              	 .cfi_startproc
 1464              	 
 1465              	 
 1466 0000 80B5     	 push {r7,lr}
 1467              	.LCFI62:
 1468              	 .cfi_def_cfa_offset 8
 1469              	 .cfi_offset 7,-8
 1470              	 .cfi_offset 14,-4
 1471 0002 00AF     	 add r7,sp,#0
 1472              	.LCFI63:
 1473              	 .cfi_def_cfa_register 7
 330:../main.c     **** 	HallSensor();
 1474              	 .loc 4 330 0
 1475 0004 FFF7FEFF 	 bl HallSensor
 331:../main.c     **** 	time_180deg = time_since_B;
 1476              	 .loc 4 331 0
 1477 0008 054B     	 ldr r3,.L50
 1478 000a 1B68     	 ldr r3,[r3]
 1479 000c 054A     	 ldr r2,.L50+4
 1480 000e 1360     	 str r3,[r2]
 332:../main.c     **** 	time_since_B = 0;
 1481              	 .loc 4 332 0
 1482 0010 034B     	 ldr r3,.L50
 1483 0012 0022     	 movs r2,#0
 1484 0014 1A60     	 str r2,[r3]
 333:../main.c     **** 	last_Hall_trig = 'B';
 1485              	 .loc 4 333 0
 1486 0016 044B     	 ldr r3,.L50+8
 1487 0018 4222     	 movs r2,#66
 1488 001a 1A70     	 strb r2,[r3]
 334:../main.c     **** }
 1489              	 .loc 4 334 0
 1490 001c 80BD     	 pop {r7,pc}
 1491              	.L51:
 1492 001e 00BF     	 .align 2
 1493              	.L50:
 1494 0020 00000000 	 .word time_since_B
 1495 0024 00000000 	 .word time_180deg
 1496 0028 00000000 	 .word last_Hall_trig
 1497              	 .cfi_endproc
 1498              	.LFE559:
 1500              	 .section .text.ERU1_3_IRQHandler,"ax",%progbits
 1501              	 .align 2
 1502              	 .global ERU1_3_IRQHandler
 1503              	 .thumb
 1504              	 .thumb_func
 1506              	ERU1_3_IRQHandler:
 1507              	.LFB560:
 335:../main.c     **** void HallSensor_C_ISR(void){
 1508              	 .loc 4 335 0
 1509              	 .cfi_startproc
 1510              	 
 1511              	 
 1512 0000 80B5     	 push {r7,lr}
 1513              	.LCFI64:
 1514              	 .cfi_def_cfa_offset 8
 1515              	 .cfi_offset 7,-8
 1516              	 .cfi_offset 14,-4
 1517 0002 00AF     	 add r7,sp,#0
 1518              	.LCFI65:
 1519              	 .cfi_def_cfa_register 7
 336:../main.c     **** 	HallSensor();
 1520              	 .loc 4 336 0
 1521 0004 FFF7FEFF 	 bl HallSensor
 337:../main.c     **** 	time_180deg = time_since_C;
 1522              	 .loc 4 337 0
 1523 0008 054B     	 ldr r3,.L53
 1524 000a 1B68     	 ldr r3,[r3]
 1525 000c 054A     	 ldr r2,.L53+4
 1526 000e 1360     	 str r3,[r2]
 338:../main.c     **** 	time_since_C = 0;
 1527              	 .loc 4 338 0
 1528 0010 034B     	 ldr r3,.L53
 1529 0012 0022     	 movs r2,#0
 1530 0014 1A60     	 str r2,[r3]
 339:../main.c     **** 	last_Hall_trig = 'C';
 1531              	 .loc 4 339 0
 1532 0016 044B     	 ldr r3,.L53+8
 1533 0018 4322     	 movs r2,#67
 1534 001a 1A70     	 strb r2,[r3]
 340:../main.c     **** }
 1535              	 .loc 4 340 0
 1536 001c 80BD     	 pop {r7,pc}
 1537              	.L54:
 1538 001e 00BF     	 .align 2
 1539              	.L53:
 1540 0020 00000000 	 .word time_since_C
 1541 0024 00000000 	 .word time_180deg
 1542 0028 00000000 	 .word last_Hall_trig
 1543              	 .cfi_endproc
 1544              	.LFE560:
 1546              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 1547              	 .align 2
 1548              	 .global CCU43_1_IRQHandler
 1549              	 .thumb
 1550              	 .thumb_func
 1552              	CCU43_1_IRQHandler:
 1553              	.LFB561:
 341:../main.c     **** 
 342:../main.c     **** /*
 343:../main.c     **** // Turn off driver at Overcurrent
 344:../main.c     **** void OverCurrent_U_ISR(void)
 345:../main.c     **** {
 346:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 347:../main.c     **** }
 348:../main.c     **** void OverCurrent_V_ISR(void)
 349:../main.c     **** {
 350:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 351:../main.c     **** }
 352:../main.c     **** void OverCurrent_W_ISR(void)
 353:../main.c     **** {
 354:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 355:../main.c     **** }
 356:../main.c     **** */
 357:../main.c     **** 
 358:../main.c     **** //ISR based on Timer_1 --> 100us time base
 359:../main.c     **** void ISR_INT1(void)
 360:../main.c     **** {
 1554              	 .loc 4 360 0
 1555              	 .cfi_startproc
 1556              	 
 1557              	 
 1558              	 
 1559 0000 80B4     	 push {r7}
 1560              	.LCFI66:
 1561              	 .cfi_def_cfa_offset 4
 1562              	 .cfi_offset 7,-4
 1563 0002 00AF     	 add r7,sp,#0
 1564              	.LCFI67:
 1565              	 .cfi_def_cfa_register 7
 361:../main.c     **** }
 1566              	 .loc 4 361 0
 1567 0004 BD46     	 mov sp,r7
 1568              	.LCFI68:
 1569              	 .cfi_def_cfa_register 13
 1570              	 
 1571 0006 5DF8047B 	 ldr r7,[sp],#4
 1572              	.LCFI69:
 1573              	 .cfi_restore 7
 1574              	 .cfi_def_cfa_offset 0
 1575 000a 7047     	 bx lr
 1576              	 .cfi_endproc
 1577              	.LFE561:
 1579              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 1580              	 .align 2
 1581              	 .global CCU80_3_IRQHandler
 1582              	 .thumb
 1583              	 .thumb_func
 1585              	CCU80_3_IRQHandler:
 1586              	.LFB562:
 362:../main.c     **** 
 363:../main.c     **** // ISR for Updating the SVM PWM -> 50us = 20kHz
 364:../main.c     **** void PeriodMatchInterruptHandler(void)
 365:../main.c     **** {
 1587              	 .loc 4 365 0
 1588              	 .cfi_startproc
 1589              	 
 1590              	 
 1591 0000 80B5     	 push {r7,lr}
 1592              	.LCFI70:
 1593              	 .cfi_def_cfa_offset 8
 1594              	 .cfi_offset 7,-8
 1595              	 .cfi_offset 14,-4
 1596 0002 82B0     	 sub sp,sp,#8
 1597              	.LCFI71:
 1598              	 .cfi_def_cfa_offset 16
 1599 0004 00AF     	 add r7,sp,#0
 1600              	.LCFI72:
 1601              	 .cfi_def_cfa_register 7
 366:../main.c     **** 	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 1602              	 .loc 4 366 0
 1603 0006 144B     	 ldr r3,.L58
 1604 0008 1B78     	 ldrb r3,[r3]
 1605 000a DBB2     	 uxtb r3,r3
 1606 000c 0133     	 adds r3,r3,#1
 1607 000e DAB2     	 uxtb r2,r3
 1608 0010 114B     	 ldr r3,.L58
 1609 0012 1A70     	 strb r2,[r3]
 367:../main.c     **** 	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 1610              	 .loc 4 367 0
 1611 0014 104B     	 ldr r3,.L58
 1612 0016 1B78     	 ldrb r3,[r3]
 1613 0018 DBB2     	 uxtb r3,r3
 1614 001a 012B     	 cmp r3,#1
 1615 001c 18D1     	 bne .L56
 368:../main.c     **** 		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_D
 1616              	 .loc 4 368 0
 1617 001e 0F4B     	 ldr r3,.L58+4
 1618 0020 D3ED007A 	 flds s15,[r3]
 1619 0024 FCEEE77A 	 ftouizs s15,s15
 1620 0028 C7ED017A 	 fsts s15,[r7,#4]
 1621 002c BB88     	 ldrh r3,[r7,#4]
 1622 002e 9AB2     	 uxth r2,r3
 1623 0030 0B4B     	 ldr r3,.L58+8
 1624 0032 D3ED007A 	 flds s15,[r3]
 1625 0036 FCEEE77A 	 ftouizs s15,s15
 1626 003a 17EE901A 	 fmrs r1,s15
 1627 003e 4BF20B63 	 movw r3,#46603
 1628 0042 03FB01F3 	 mul r3,r3,r1
 1629 0046 0748     	 ldr r0,.L58+12
 1630 0048 1146     	 mov r1,r2
 1631 004a 1A46     	 mov r2,r3
 1632 004c FFF7FEFF 	 bl PWM_SVM_SVMUpdate
 1633              	.L56:
 369:../main.c     **** 	}
 370:../main.c     **** }
 1634              	 .loc 4 370 0
 1635 0050 0837     	 adds r7,r7,#8
 1636              	.LCFI73:
 1637              	 .cfi_def_cfa_offset 8
 1638 0052 BD46     	 mov sp,r7
 1639              	.LCFI74:
 1640              	 .cfi_def_cfa_register 13
 1641              	 
 1642 0054 80BD     	 pop {r7,pc}
 1643              	.L59:
 1644 0056 00BF     	 .align 2
 1645              	.L58:
 1646 0058 00000000 	 .word count
 1647 005c 00000000 	 .word modulation_index_scaled
 1648 0060 00000000 	 .word angle_ab
 1649 0064 00000000 	 .word PWM_SVM_0
 1650              	 .cfi_endproc
 1651              	.LFE562:
 1653              	 .section .text.Hall_init,"ax",%progbits
 1654              	 .align 2
 1655              	 .global Hall_init
 1656              	 .thumb
 1657              	 .thumb_func
 1659              	Hall_init:
 1660              	.LFB563:
 371:../main.c     **** 
 372:../main.c     **** //########################
 373:../main.c     **** // FUNCTIONS
 374:../main.c     **** //########################
 375:../main.c     **** 
 376:../main.c     **** // Hall init -> readout of actual Hall pattern to determine the motor position
 377:../main.c     **** void Hall_init(void){
 1661              	 .loc 4 377 0
 1662              	 .cfi_startproc
 1663              	 
 1664              	 
 1665 0000 90B5     	 push {r4,r7,lr}
 1666              	.LCFI75:
 1667              	 .cfi_def_cfa_offset 12
 1668              	 .cfi_offset 4,-12
 1669              	 .cfi_offset 7,-8
 1670              	 .cfi_offset 14,-4
 1671 0002 83B0     	 sub sp,sp,#12
 1672              	.LCFI76:
 1673              	 .cfi_def_cfa_offset 24
 1674 0004 00AF     	 add r7,sp,#0
 1675              	.LCFI77:
 1676              	 .cfi_def_cfa_register 7
 378:../main.c     **** 
 379:../main.c     **** 	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinV
 1677              	 .loc 4 379 0
 1678 0006 2148     	 ldr r0,.L67
 1679 0008 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1680 000c 0346     	 mov r3,r0
 1681 000e DBB2     	 uxtb r3,r3
 1682 0010 5B00     	 lsls r3,r3,#1
 1683 0012 DCB2     	 uxtb r4,r3
 1684 0014 1E48     	 ldr r0,.L67+4
 1685 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1686 001a 0346     	 mov r3,r0
 1687 001c DBB2     	 uxtb r3,r3
 1688 001e 2343     	 orrs r3,r3,r4
 1689 0020 DBB2     	 uxtb r3,r3
 1690 0022 5B00     	 lsls r3,r3,#1
 1691 0024 DCB2     	 uxtb r4,r3
 1692 0026 1B48     	 ldr r0,.L67+8
 1693 0028 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1694 002c 0346     	 mov r3,r0
 1695 002e DBB2     	 uxtb r3,r3
 1696 0030 2343     	 orrs r3,r3,r4
 1697 0032 FB71     	 strb r3,[r7,#7]
 380:../main.c     **** 
 381:../main.c     **** 	 if(Hall_Initial == 0b100){sector = 0;}
 1698              	 .loc 4 381 0
 1699 0034 FB79     	 ldrb r3,[r7,#7]
 1700 0036 042B     	 cmp r3,#4
 1701 0038 03D1     	 bne .L61
 1702              	 .loc 4 381 0 is_stmt 0 discriminator 1
 1703 003a 174B     	 ldr r3,.L67+12
 1704 003c 0022     	 movs r2,#0
 1705 003e 1A70     	 strb r2,[r3]
 1706 0040 21E0     	 b .L60
 1707              	.L61:
 382:../main.c     **** 	 else if(Hall_Initial == 0b110){sector = 1;}
 1708              	 .loc 4 382 0 is_stmt 1
 1709 0042 FB79     	 ldrb r3,[r7,#7]
 1710 0044 062B     	 cmp r3,#6
 1711 0046 03D1     	 bne .L63
 1712              	 .loc 4 382 0 is_stmt 0 discriminator 1
 1713 0048 134B     	 ldr r3,.L67+12
 1714 004a 0122     	 movs r2,#1
 1715 004c 1A70     	 strb r2,[r3]
 1716 004e 1AE0     	 b .L60
 1717              	.L63:
 383:../main.c     **** 	 else if(Hall_Initial == 0b010){sector = 2;}
 1718              	 .loc 4 383 0 is_stmt 1
 1719 0050 FB79     	 ldrb r3,[r7,#7]
 1720 0052 022B     	 cmp r3,#2
 1721 0054 03D1     	 bne .L64
 1722              	 .loc 4 383 0 is_stmt 0 discriminator 1
 1723 0056 104B     	 ldr r3,.L67+12
 1724 0058 0222     	 movs r2,#2
 1725 005a 1A70     	 strb r2,[r3]
 1726 005c 13E0     	 b .L60
 1727              	.L64:
 384:../main.c     **** 	 else if(Hall_Initial == 0b011){sector = 3;}
 1728              	 .loc 4 384 0 is_stmt 1
 1729 005e FB79     	 ldrb r3,[r7,#7]
 1730 0060 032B     	 cmp r3,#3
 1731 0062 03D1     	 bne .L65
 1732              	 .loc 4 384 0 is_stmt 0 discriminator 1
 1733 0064 0C4B     	 ldr r3,.L67+12
 1734 0066 0322     	 movs r2,#3
 1735 0068 1A70     	 strb r2,[r3]
 1736 006a 0CE0     	 b .L60
 1737              	.L65:
 385:../main.c     **** 	 else if(Hall_Initial == 0b001){sector = 4;}
 1738              	 .loc 4 385 0 is_stmt 1
 1739 006c FB79     	 ldrb r3,[r7,#7]
 1740 006e 012B     	 cmp r3,#1
 1741 0070 03D1     	 bne .L66
 1742              	 .loc 4 385 0 is_stmt 0 discriminator 1
 1743 0072 094B     	 ldr r3,.L67+12
 1744 0074 0422     	 movs r2,#4
 1745 0076 1A70     	 strb r2,[r3]
 1746 0078 05E0     	 b .L60
 1747              	.L66:
 386:../main.c     **** 	 else if(Hall_Initial == 0b101){sector = 5;}
 1748              	 .loc 4 386 0 is_stmt 1
 1749 007a FB79     	 ldrb r3,[r7,#7]
 1750 007c 052B     	 cmp r3,#5
 1751 007e 02D1     	 bne .L60
 1752              	 .loc 4 386 0 is_stmt 0 discriminator 1
 1753 0080 054B     	 ldr r3,.L67+12
 1754 0082 0522     	 movs r2,#5
 1755 0084 1A70     	 strb r2,[r3]
 1756              	.L60:
 387:../main.c     **** }
 1757              	 .loc 4 387 0 is_stmt 1
 1758 0086 0C37     	 adds r7,r7,#12
 1759              	.LCFI78:
 1760              	 .cfi_def_cfa_offset 12
 1761 0088 BD46     	 mov sp,r7
 1762              	.LCFI79:
 1763              	 .cfi_def_cfa_register 13
 1764              	 
 1765 008a 90BD     	 pop {r4,r7,pc}
 1766              	.L68:
 1767              	 .align 2
 1768              	.L67:
 1769 008c 00000000 	 .word Hall_A_ISR
 1770 0090 00000000 	 .word Hall_B_ISR
 1771 0094 00000000 	 .word Hall_C_ISR
 1772 0098 00000000 	 .word sector
 1773              	 .cfi_endproc
 1774              	.LFE563:
 1776              	 .section .text.HallSensor,"ax",%progbits
 1777              	 .align 2
 1778              	 .global HallSensor
 1779              	 .thumb
 1780              	 .thumb_func
 1782              	HallSensor:
 1783              	.LFB564:
 388:../main.c     **** 
 389:../main.c     **** // Function to determine direction and current Sector
 390:../main.c     **** void HallSensor(void){
 1784              	 .loc 4 390 0
 1785              	 .cfi_startproc
 1786              	 
 1787              	 
 1788 0000 90B5     	 push {r4,r7,lr}
 1789              	.LCFI80:
 1790              	 .cfi_def_cfa_offset 12
 1791              	 .cfi_offset 4,-12
 1792              	 .cfi_offset 7,-8
 1793              	 .cfi_offset 14,-4
 1794 0002 83B0     	 sub sp,sp,#12
 1795              	.LCFI81:
 1796              	 .cfi_def_cfa_offset 24
 1797 0004 00AF     	 add r7,sp,#0
 1798              	.LCFI82:
 1799              	 .cfi_def_cfa_register 7
 391:../main.c     **** 	enc_val = enc_val << 3; //shift old values and make space for new ones
 1800              	 .loc 4 391 0
 1801 0006 2E4B     	 ldr r3,.L76
 1802 0008 1B88     	 ldrh r3,[r3]
 1803 000a 9BB2     	 uxth r3,r3
 1804 000c DB00     	 lsls r3,r3,#3
 1805 000e 9AB2     	 uxth r2,r3
 1806 0010 2B4B     	 ldr r3,.L76
 1807 0012 1A80     	 strh r2,[r3]
 392:../main.c     **** 	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(
 1808              	 .loc 4 392 0
 1809 0014 2B48     	 ldr r0,.L76+4
 1810 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1811 001a 0346     	 mov r3,r0
 1812 001c DBB2     	 uxtb r3,r3
 1813 001e 5B00     	 lsls r3,r3,#1
 1814 0020 DCB2     	 uxtb r4,r3
 1815 0022 2948     	 ldr r0,.L76+8
 1816 0024 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1817 0028 0346     	 mov r3,r0
 1818 002a DBB2     	 uxtb r3,r3
 1819 002c 2343     	 orrs r3,r3,r4
 1820 002e DBB2     	 uxtb r3,r3
 1821 0030 5B00     	 lsls r3,r3,#1
 1822 0032 DCB2     	 uxtb r4,r3
 1823 0034 2548     	 ldr r0,.L76+12
 1824 0036 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1825 003a 0346     	 mov r3,r0
 1826 003c DBB2     	 uxtb r3,r3
 1827 003e 2343     	 orrs r3,r3,r4
 1828 0040 FB71     	 strb r3,[r7,#7]
 393:../main.c     **** 	enc_val = enc_val | Hall_status; //read Sensor values and store them
 1829              	 .loc 4 393 0
 1830 0042 FB79     	 ldrb r3,[r7,#7]
 1831 0044 9AB2     	 uxth r2,r3
 1832 0046 1E4B     	 ldr r3,.L76
 1833 0048 1B88     	 ldrh r3,[r3]
 1834 004a 9BB2     	 uxth r3,r3
 1835 004c 1343     	 orrs r3,r3,r2
 1836 004e 9AB2     	 uxth r2,r3
 1837 0050 1B4B     	 ldr r3,.L76
 1838 0052 1A80     	 strh r2,[r3]
 394:../main.c     **** 	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual an
 1839              	 .loc 4 394 0
 1840 0054 1A4B     	 ldr r3,.L76
 1841 0056 1B88     	 ldrh r3,[r3]
 1842 0058 9BB2     	 uxth r3,r3
 1843 005a 03F03F03 	 and r3,r3,#63
 1844 005e 1C4A     	 ldr r2,.L76+16
 1845 0060 D25C     	 ldrb r2,[r2,r3]
 1846 0062 1C4B     	 ldr r3,.L76+20
 1847 0064 1A70     	 strb r2,[r3]
 395:../main.c     **** 
 396:../main.c     **** 	if(Hall_status == 0b100){sector = 0;}
 1848              	 .loc 4 396 0
 1849 0066 FB79     	 ldrb r3,[r7,#7]
 1850 0068 042B     	 cmp r3,#4
 1851 006a 03D1     	 bne .L70
 1852              	 .loc 4 396 0 is_stmt 0 discriminator 1
 1853 006c 1A4B     	 ldr r3,.L76+24
 1854 006e 0022     	 movs r2,#0
 1855 0070 1A70     	 strb r2,[r3]
 1856 0072 21E0     	 b .L69
 1857              	.L70:
 397:../main.c     **** 		 else if(Hall_status == 0b110){sector = 1;}
 1858              	 .loc 4 397 0 is_stmt 1
 1859 0074 FB79     	 ldrb r3,[r7,#7]
 1860 0076 062B     	 cmp r3,#6
 1861 0078 03D1     	 bne .L72
 1862              	 .loc 4 397 0 is_stmt 0 discriminator 1
 1863 007a 174B     	 ldr r3,.L76+24
 1864 007c 0122     	 movs r2,#1
 1865 007e 1A70     	 strb r2,[r3]
 1866 0080 1AE0     	 b .L69
 1867              	.L72:
 398:../main.c     **** 		 else if(Hall_status == 0b010){sector = 2;}
 1868              	 .loc 4 398 0 is_stmt 1
 1869 0082 FB79     	 ldrb r3,[r7,#7]
 1870 0084 022B     	 cmp r3,#2
 1871 0086 03D1     	 bne .L73
 1872              	 .loc 4 398 0 is_stmt 0 discriminator 1
 1873 0088 134B     	 ldr r3,.L76+24
 1874 008a 0222     	 movs r2,#2
 1875 008c 1A70     	 strb r2,[r3]
 1876 008e 13E0     	 b .L69
 1877              	.L73:
 399:../main.c     **** 		 else if(Hall_status == 0b011){sector = 3;}
 1878              	 .loc 4 399 0 is_stmt 1
 1879 0090 FB79     	 ldrb r3,[r7,#7]
 1880 0092 032B     	 cmp r3,#3
 1881 0094 03D1     	 bne .L74
 1882              	 .loc 4 399 0 is_stmt 0 discriminator 1
 1883 0096 104B     	 ldr r3,.L76+24
 1884 0098 0322     	 movs r2,#3
 1885 009a 1A70     	 strb r2,[r3]
 1886 009c 0CE0     	 b .L69
 1887              	.L74:
 400:../main.c     **** 		 else if(Hall_status == 0b001){sector = 4;}
 1888              	 .loc 4 400 0 is_stmt 1
 1889 009e FB79     	 ldrb r3,[r7,#7]
 1890 00a0 012B     	 cmp r3,#1
 1891 00a2 03D1     	 bne .L75
 1892              	 .loc 4 400 0 is_stmt 0 discriminator 1
 1893 00a4 0C4B     	 ldr r3,.L76+24
 1894 00a6 0422     	 movs r2,#4
 1895 00a8 1A70     	 strb r2,[r3]
 1896 00aa 05E0     	 b .L69
 1897              	.L75:
 401:../main.c     **** 		 else if(Hall_status == 0b101){sector = 5;}
 1898              	 .loc 4 401 0 is_stmt 1
 1899 00ac FB79     	 ldrb r3,[r7,#7]
 1900 00ae 052B     	 cmp r3,#5
 1901 00b0 02D1     	 bne .L69
 1902              	 .loc 4 401 0 is_stmt 0 discriminator 1
 1903 00b2 094B     	 ldr r3,.L76+24
 1904 00b4 0522     	 movs r2,#5
 1905 00b6 1A70     	 strb r2,[r3]
 1906              	.L69:
 402:../main.c     **** 
 403:../main.c     **** }
 1907              	 .loc 4 403 0 is_stmt 1
 1908 00b8 0C37     	 adds r7,r7,#12
 1909              	.LCFI83:
 1910              	 .cfi_def_cfa_offset 12
 1911 00ba BD46     	 mov sp,r7
 1912              	.LCFI84:
 1913              	 .cfi_def_cfa_register 13
 1914              	 
 1915 00bc 90BD     	 pop {r4,r7,pc}
 1916              	.L77:
 1917 00be 00BF     	 .align 2
 1918              	.L76:
 1919 00c0 00000000 	 .word enc_val
 1920 00c4 00000000 	 .word Hall_A_ISR
 1921 00c8 00000000 	 .word Hall_B_ISR
 1922 00cc 00000000 	 .word Hall_C_ISR
 1923 00d0 00000000 	 .word lookup_table
 1924 00d4 00000000 	 .word direction
 1925 00d8 00000000 	 .word sector
 1926              	 .cfi_endproc
 1927              	.LFE564:
 1929              	 .global __aeabi_i2d
 1930              	 .global __aeabi_dsub
 1931              	 .section .text.Calculation,"ax",%progbits
 1932              	 .align 2
 1933              	 .global Calculation
 1934              	 .thumb
 1935              	 .thumb_func
 1937              	Calculation:
 1938              	.LFB565:
 404:../main.c     **** // Routine for calculation (sector, clark-Park trans.,...)
 405:../main.c     **** 
 406:../main.c     **** //5kHz loop since every 4th step of 50us --> 200us --> 5kHz
 407:../main.c     **** void Calculation(void){
 1939              	 .loc 4 407 0
 1940              	 .cfi_startproc
 1941              	 
 1942              	 
 1943 0000 B0B5     	 push {r4,r5,r7,lr}
 1944              	.LCFI85:
 1945              	 .cfi_def_cfa_offset 16
 1946              	 .cfi_offset 4,-16
 1947              	 .cfi_offset 5,-12
 1948              	 .cfi_offset 7,-8
 1949              	 .cfi_offset 14,-4
 1950 0002 2DED028B 	 fstmfdd sp!,{d8}
 1951              	.LCFI86:
 1952              	 .cfi_def_cfa_offset 24
 1953              	 .cfi_offset 80,-24
 1954              	 .cfi_offset 81,-20
 1955 0006 84B0     	 sub sp,sp,#16
 1956              	.LCFI87:
 1957              	 .cfi_def_cfa_offset 40
 1958 0008 00AF     	 add r7,sp,#0
 1959              	.LCFI88:
 1960              	 .cfi_def_cfa_register 7
 408:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 1961              	 .loc 4 408 0
 1962 000a B448     	 ldr r0,.L143
 1963 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 409:../main.c     **** 		// Actual time since last angle update via Hall Sensor
 410:../main.c     **** 		uint32_t t;
 411:../main.c     **** 		if(last_Hall_trig == 'A') t = time_since_A;
 1964              	 .loc 4 411 0
 1965 0010 B34B     	 ldr r3,.L143+4
 1966 0012 1B78     	 ldrb r3,[r3]
 1967 0014 DBB2     	 uxtb r3,r3
 1968 0016 412B     	 cmp r3,#65
 1969 0018 03D1     	 bne .L79
 1970              	 .loc 4 411 0 is_stmt 0 discriminator 1
 1971 001a B24B     	 ldr r3,.L143+8
 1972 001c 1B68     	 ldr r3,[r3]
 1973 001e FB60     	 str r3,[r7,#12]
 1974 0020 10E0     	 b .L80
 1975              	.L79:
 412:../main.c     **** 		else if(last_Hall_trig == 'B') t = time_since_B;
 1976              	 .loc 4 412 0 is_stmt 1
 1977 0022 AF4B     	 ldr r3,.L143+4
 1978 0024 1B78     	 ldrb r3,[r3]
 1979 0026 DBB2     	 uxtb r3,r3
 1980 0028 422B     	 cmp r3,#66
 1981 002a 03D1     	 bne .L81
 1982              	 .loc 4 412 0 is_stmt 0 discriminator 1
 1983 002c AE4B     	 ldr r3,.L143+12
 1984 002e 1B68     	 ldr r3,[r3]
 1985 0030 FB60     	 str r3,[r7,#12]
 1986 0032 07E0     	 b .L80
 1987              	.L81:
 413:../main.c     **** 		else if(last_Hall_trig == 'C') t = time_since_C;
 1988              	 .loc 4 413 0 is_stmt 1
 1989 0034 AA4B     	 ldr r3,.L143+4
 1990 0036 1B78     	 ldrb r3,[r3]
 1991 0038 DBB2     	 uxtb r3,r3
 1992 003a 432B     	 cmp r3,#67
 1993 003c 02D1     	 bne .L80
 1994              	 .loc 4 413 0 is_stmt 0 discriminator 1
 1995 003e AB4B     	 ldr r3,.L143+16
 1996 0040 1B68     	 ldr r3,[r3]
 1997 0042 FB60     	 str r3,[r7,#12]
 1998              	.L80:
 414:../main.c     **** 		time_180deg_cal = time_180deg;
 1999              	 .loc 4 414 0 is_stmt 1
 2000 0044 AA4B     	 ldr r3,.L143+20
 2001 0046 1B68     	 ldr r3,[r3]
 2002 0048 AA4A     	 ldr r2,.L143+24
 2003 004a 1360     	 str r3,[r2]
 415:../main.c     **** 		// not fixing sector for calc because if chainges better to do so
 416:../main.c     **** 
 417:../main.c     **** 		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 2004              	 .loc 4 417 0
 2005 004c A94B     	 ldr r3,.L143+24
 2006 004e 1B68     	 ldr r3,[r3]
 2007 0050 40F6C412 	 movw r2,#2500
 2008 0054 9342     	 cmp r3,r2
 2009 0056 04D9     	 bls .L82
 2010              	 .loc 4 417 0 is_stmt 0 discriminator 1
 2011 0058 A64B     	 ldr r3,.L143+24
 2012 005a 40F6C412 	 movw r2,#2500
 2013 005e 1A60     	 str r2,[r3]
 2014 0060 06E0     	 b .L83
 2015              	.L82:
 418:../main.c     **** 		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 2016              	 .loc 4 418 0 is_stmt 1
 2017 0062 A44B     	 ldr r3,.L143+24
 2018 0064 1B68     	 ldr r3,[r3]
 2019 0066 012B     	 cmp r3,#1
 2020 0068 02D8     	 bhi .L83
 2021              	 .loc 4 418 0 is_stmt 0 discriminator 1
 2022 006a A24B     	 ldr r3,.L143+24
 2023 006c 0222     	 movs r2,#2
 2024 006e 1A60     	 str r2,[r3]
 2025              	.L83:
 419:../main.c     **** 
 420:../main.c     **** 		if(t < TIME_OMEGA_0){
 2026              	 .loc 4 420 0 is_stmt 1
 2027 0070 FB68     	 ldr r3,[r7,#12]
 2028 0072 41F28732 	 movw r2,#4999
 2029 0076 9342     	 cmp r3,r2
 2030 0078 35D8     	 bhi .L84
 421:../main.c     **** 			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 2031              	 .loc 4 421 0
 2032 007a 9E4B     	 ldr r3,.L143+24
 2033 007c 1B68     	 ldr r3,[r3]
 2034 007e 07EE903A 	 fmsr s15,r3
 2035 0082 F8EE677A 	 fuitos s15,s15
 2036 0086 17EE900A 	 fmrs r0,s15
 2037 008a FFF7FEFF 	 bl __aeabi_f2d
 2038 008e 0246     	 mov r2,r0
 2039 0090 0B46     	 mov r3,r1
 2040 0092 4FF00000 	 mov r0,#0
 2041 0096 9849     	 ldr r1,.L143+28
 2042 0098 FFF7FEFF 	 bl __aeabi_ddiv
 2043 009c 0246     	 mov r2,r0
 2044 009e 0B46     	 mov r3,r1
 2045 00a0 1446     	 mov r4,r2
 2046 00a2 1D46     	 mov r5,r3
 2047 00a4 F868     	 ldr r0,[r7,#12]
 2048 00a6 FFF7FEFF 	 bl __aeabi_ui2d
 2049 00aa 0246     	 mov r2,r0
 2050 00ac 0B46     	 mov r3,r1
 2051 00ae 2046     	 mov r0,r4
 2052 00b0 2946     	 mov r1,r5
 2053 00b2 FFF7FEFF 	 bl __aeabi_dmul
 2054 00b6 0246     	 mov r2,r0
 2055 00b8 0B46     	 mov r3,r1
 2056 00ba 1046     	 mov r0,r2
 2057 00bc 1946     	 mov r1,r3
 2058 00be FFF7FEFF 	 bl __aeabi_d2f
 2059 00c2 0246     	 mov r2,r0
 2060 00c4 8D4B     	 ldr r3,.L143+32
 2061 00c6 1A60     	 str r2,[r3]
 422:../main.c     **** 			if(angle_in_sector > 60) angle_in_sector = 60;
 2062              	 .loc 4 422 0
 2063 00c8 8C4B     	 ldr r3,.L143+32
 2064 00ca D3ED007A 	 flds s15,[r3]
 2065 00ce 9FED8C7A 	 flds s14,.L143+36
 2066 00d2 F4EEC77A 	 fcmpes s15,s14
 2067 00d6 F1EE10FA 	 fmstat
 2068 00da 00DC     	 bgt .L126
 2069 00dc 06E0     	 b .L87
 2070              	.L126:
 2071              	 .loc 4 422 0 is_stmt 0 discriminator 1
 2072 00de 874B     	 ldr r3,.L143+32
 2073 00e0 884A     	 ldr r2,.L143+40
 2074 00e2 1A60     	 str r2,[r3]
 2075 00e4 02E0     	 b .L87
 2076              	.L84:
 423:../main.c     **** 		}
 424:../main.c     **** 		else{
 425:../main.c     **** 			angle_in_sector = 30; // standig still
 2077              	 .loc 4 425 0 is_stmt 1
 2078 00e6 854B     	 ldr r3,.L143+32
 2079 00e8 874A     	 ldr r2,.L143+44
 2080 00ea 1A60     	 str r2,[r3]
 2081              	.L87:
 426:../main.c     **** 		}
 427:../main.c     **** 
 428:../main.c     **** 		// CW
 429:../main.c     **** 		if(direction==1)
 2082              	 .loc 4 429 0
 2083 00ec 874B     	 ldr r3,.L143+48
 2084 00ee 1B78     	 ldrb r3,[r3]
 2085 00f0 DBB2     	 uxtb r3,r3
 2086 00f2 5BB2     	 sxtb r3,r3
 2087 00f4 012B     	 cmp r3,#1
 2088 00f6 54D1     	 bne .L88
 430:../main.c     **** 		{
 431:../main.c     **** 			angle_phi = (sector*60.0)+angle_in_sector;
 2089              	 .loc 4 431 0
 2090 00f8 854B     	 ldr r3,.L143+52
 2091 00fa 1B78     	 ldrb r3,[r3]
 2092 00fc DBB2     	 uxtb r3,r3
 2093 00fe 5BB2     	 sxtb r3,r3
 2094 0100 1846     	 mov r0,r3
 2095 0102 FFF7FEFF 	 bl __aeabi_i2d
 2096 0106 0246     	 mov r2,r0
 2097 0108 0B46     	 mov r3,r1
 2098 010a 1046     	 mov r0,r2
 2099 010c 1946     	 mov r1,r3
 2100 010e 4FF00002 	 mov r2,#0
 2101 0112 804B     	 ldr r3,.L143+56
 2102 0114 FFF7FEFF 	 bl __aeabi_dmul
 2103 0118 0246     	 mov r2,r0
 2104 011a 0B46     	 mov r3,r1
 2105 011c 1446     	 mov r4,r2
 2106 011e 1D46     	 mov r5,r3
 2107 0120 764B     	 ldr r3,.L143+32
 2108 0122 1B68     	 ldr r3,[r3]
 2109 0124 1846     	 mov r0,r3
 2110 0126 FFF7FEFF 	 bl __aeabi_f2d
 2111 012a 0246     	 mov r2,r0
 2112 012c 0B46     	 mov r3,r1
 2113 012e 2046     	 mov r0,r4
 2114 0130 2946     	 mov r1,r5
 2115 0132 FFF7FEFF 	 bl __aeabi_dadd
 2116 0136 0246     	 mov r2,r0
 2117 0138 0B46     	 mov r3,r1
 2118 013a 1046     	 mov r0,r2
 2119 013c 1946     	 mov r1,r3
 2120 013e FFF7FEFF 	 bl __aeabi_d2f
 2121 0142 0246     	 mov r2,r0
 2122 0144 744B     	 ldr r3,.L143+60
 2123 0146 1A60     	 str r2,[r3]
 432:../main.c     **** 			angle_phi=angle_phi+offset_pos;
 2124              	 .loc 4 432 0
 2125 0148 734B     	 ldr r3,.L143+60
 2126 014a 93ED007A 	 flds s14,[r3]
 2127 014e 734B     	 ldr r3,.L143+64
 2128 0150 D3ED007A 	 flds s15,[r3]
 2129 0154 77EE277A 	 fadds s15,s14,s15
 2130 0158 6F4B     	 ldr r3,.L143+60
 2131 015a C3ED007A 	 fsts s15,[r3]
 433:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2132              	 .loc 4 433 0
 2133 015e 6E4B     	 ldr r3,.L143+60
 2134 0160 D3ED007A 	 flds s15,[r3]
 2135 0164 9FED6E7A 	 flds s14,.L143+68
 2136 0168 F4EEC77A 	 fcmpes s15,s14
 2137 016c F1EE10FA 	 fmstat
 2138 0170 09DD     	 ble .L89
 2139              	 .loc 4 433 0 is_stmt 0 discriminator 1
 2140 0172 694B     	 ldr r3,.L143+60
 2141 0174 D3ED007A 	 flds s15,[r3]
 2142 0178 9FED697A 	 flds s14,.L143+68
 2143 017c 77EEC77A 	 fsubs s15,s15,s14
 2144 0180 654B     	 ldr r3,.L143+60
 2145 0182 C3ED007A 	 fsts s15,[r3]
 2146              	.L89:
 434:../main.c     **** 
 435:../main.c     **** 			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
 2147              	 .loc 4 435 0 is_stmt 1
 2148 0186 5B4B     	 ldr r3,.L143+24
 2149 0188 1B68     	 ldr r3,[r3]
 2150 018a 07EE903A 	 fmsr s15,r3
 2151 018e F8EE677A 	 fuitos s15,s15
 2152 0192 9FED647A 	 flds s14,.L143+72
 2153 0196 C7EE277A 	 fdivs s15,s14,s15
 2154 019a 634B     	 ldr r3,.L143+76
 2155 019c C3ED007A 	 fsts s15,[r3]
 2156 01a0 6FE0     	 b .L91
 2157              	.L88:
 436:../main.c     **** 		}
 437:../main.c     **** 		// CCW
 438:../main.c     **** 		else{
 439:../main.c     **** 			angle_phi = (sector*60.0)-angle_in_sector;
 2158              	 .loc 4 439 0
 2159 01a2 5B4B     	 ldr r3,.L143+52
 2160 01a4 1B78     	 ldrb r3,[r3]
 2161 01a6 DBB2     	 uxtb r3,r3
 2162 01a8 5BB2     	 sxtb r3,r3
 2163 01aa 1846     	 mov r0,r3
 2164 01ac FFF7FEFF 	 bl __aeabi_i2d
 2165 01b0 0246     	 mov r2,r0
 2166 01b2 0B46     	 mov r3,r1
 2167 01b4 1046     	 mov r0,r2
 2168 01b6 1946     	 mov r1,r3
 2169 01b8 4FF00002 	 mov r2,#0
 2170 01bc 554B     	 ldr r3,.L143+56
 2171 01be FFF7FEFF 	 bl __aeabi_dmul
 2172 01c2 0246     	 mov r2,r0
 2173 01c4 0B46     	 mov r3,r1
 2174 01c6 1446     	 mov r4,r2
 2175 01c8 1D46     	 mov r5,r3
 2176 01ca 4C4B     	 ldr r3,.L143+32
 2177 01cc 1B68     	 ldr r3,[r3]
 2178 01ce 1846     	 mov r0,r3
 2179 01d0 FFF7FEFF 	 bl __aeabi_f2d
 2180 01d4 0246     	 mov r2,r0
 2181 01d6 0B46     	 mov r3,r1
 2182 01d8 2046     	 mov r0,r4
 2183 01da 2946     	 mov r1,r5
 2184 01dc FFF7FEFF 	 bl __aeabi_dsub
 2185 01e0 0246     	 mov r2,r0
 2186 01e2 0B46     	 mov r3,r1
 2187 01e4 1046     	 mov r0,r2
 2188 01e6 1946     	 mov r1,r3
 2189 01e8 FFF7FEFF 	 bl __aeabi_d2f
 2190 01ec 0246     	 mov r2,r0
 2191 01ee 4A4B     	 ldr r3,.L143+60
 2192 01f0 1A60     	 str r2,[r3]
 440:../main.c     **** 			angle_phi = angle_phi+60.0;
 2193              	 .loc 4 440 0
 2194 01f2 494B     	 ldr r3,.L143+60
 2195 01f4 D3ED007A 	 flds s15,[r3]
 2196 01f8 9FED417A 	 flds s14,.L143+36
 2197 01fc 77EE877A 	 fadds s15,s15,s14
 2198 0200 454B     	 ldr r3,.L143+60
 2199 0202 C3ED007A 	 fsts s15,[r3]
 441:../main.c     **** 			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 2200              	 .loc 4 441 0
 2201 0206 444B     	 ldr r3,.L143+60
 2202 0208 D3ED007A 	 flds s15,[r3]
 2203 020c F5EEC07A 	 fcmpezs s15
 2204 0210 F1EE10FA 	 fmstat
 2205 0214 09D5     	 bpl .L92
 2206              	 .loc 4 441 0 is_stmt 0 discriminator 1
 2207 0216 404B     	 ldr r3,.L143+60
 2208 0218 D3ED007A 	 flds s15,[r3]
 2209 021c 9FED407A 	 flds s14,.L143+68
 2210 0220 77EE877A 	 fadds s15,s15,s14
 2211 0224 3C4B     	 ldr r3,.L143+60
 2212 0226 C3ED007A 	 fsts s15,[r3]
 2213              	.L92:
 442:../main.c     **** 			angle_phi=angle_phi+offset_neg;
 2214              	 .loc 4 442 0 is_stmt 1
 2215 022a 3B4B     	 ldr r3,.L143+60
 2216 022c 93ED007A 	 flds s14,[r3]
 2217 0230 3E4B     	 ldr r3,.L143+80
 2218 0232 D3ED007A 	 flds s15,[r3]
 2219 0236 77EE277A 	 fadds s15,s14,s15
 2220 023a 374B     	 ldr r3,.L143+60
 2221 023c C3ED007A 	 fsts s15,[r3]
 443:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2222              	 .loc 4 443 0
 2223 0240 354B     	 ldr r3,.L143+60
 2224 0242 D3ED007A 	 flds s15,[r3]
 2225 0246 9FED367A 	 flds s14,.L143+68
 2226 024a F4EEC77A 	 fcmpes s15,s14
 2227 024e F1EE10FA 	 fmstat
 2228 0252 09DD     	 ble .L94
 2229              	 .loc 4 443 0 is_stmt 0 discriminator 1
 2230 0254 304B     	 ldr r3,.L143+60
 2231 0256 D3ED007A 	 flds s15,[r3]
 2232 025a 9FED317A 	 flds s14,.L143+68
 2233 025e 77EEC77A 	 fsubs s15,s15,s14
 2234 0262 2D4B     	 ldr r3,.L143+60
 2235 0264 C3ED007A 	 fsts s15,[r3]
 2236              	.L94:
 444:../main.c     **** 
 445:../main.c     **** 			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
 2237              	 .loc 4 445 0 is_stmt 1
 2238 0268 224B     	 ldr r3,.L143+24
 2239 026a 1B68     	 ldr r3,[r3]
 2240 026c 07EE903A 	 fmsr s15,r3
 2241 0270 F8EE677A 	 fuitos s15,s15
 2242 0274 9FED2E7A 	 flds s14,.L143+84
 2243 0278 C7EE277A 	 fdivs s15,s14,s15
 2244 027c 2A4B     	 ldr r3,.L143+76
 2245 027e C3ED007A 	 fsts s15,[r3]
 2246              	.L91:
 446:../main.c     **** 		}
 447:../main.c     **** 
 448:../main.c     **** 		falg_speed_not_new = 0;
 2247              	 .loc 4 448 0
 2248 0282 2C4B     	 ldr r3,.L143+88
 2249 0284 0022     	 movs r2,#0
 2250 0286 1A70     	 strb r2,[r3]
 449:../main.c     **** 		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large pea
 2251              	 .loc 4 449 0
 2252 0288 274B     	 ldr r3,.L143+76
 2253 028a D3ED007A 	 flds s15,[r3]
 2254 028e 9FED2A7A 	 flds s14,.L143+92
 2255 0292 F4EEC77A 	 fcmpes s15,s14
 2256 0296 F1EE10FA 	 fmstat
 2257 029a 10D5     	 bpl .L96
 2258              	 .loc 4 449 0 is_stmt 0 discriminator 1
 2259 029c 224B     	 ldr r3,.L143+76
 2260 029e D3ED007A 	 flds s15,[r3]
 2261 02a2 9FED267A 	 flds s14,.L143+96
 2262 02a6 F4EEC77A 	 fcmpes s15,s14
 2263 02aa F1EE10FA 	 fmstat
 2264 02ae 06DD     	 ble .L96
 450:../main.c     **** 		{
 451:../main.c     **** 			omega_mech_rps = omega_mech_rps_temp;
 2265              	 .loc 4 451 0 is_stmt 1
 2266 02b0 1D4B     	 ldr r3,.L143+76
 2267 02b2 1B68     	 ldr r3,[r3]
 2268 02b4 224A     	 ldr r2,.L143+100
 2269 02b6 1360     	 str r3,[r2]
 452:../main.c     **** 			falg_speed_not_new = 1;
 2270              	 .loc 4 452 0
 2271 02b8 1E4B     	 ldr r3,.L143+88
 2272 02ba 0122     	 movs r2,#1
 2273 02bc 1A70     	 strb r2,[r3]
 2274              	.L96:
 453:../main.c     **** 		}
 454:../main.c     **** 
 455:../main.c     **** 		if(t > TIME_OMEGA_0){
 2275              	 .loc 4 455 0
 2276 02be FB68     	 ldr r3,[r7,#12]
 2277 02c0 41F28832 	 movw r2,#5000
 2278 02c4 9342     	 cmp r3,r2
 2279 02c6 3FD9     	 bls .L99
 456:../main.c     **** 			omega_ele_rads = 0;
 2280              	 .loc 4 456 0
 2281 02c8 1E4B     	 ldr r3,.L143+104
 2282 02ca 4FF00002 	 mov r2,#0
 2283 02ce 1A60     	 str r2,[r3]
 457:../main.c     **** 			omega_mech_rps = 0;
 2284              	 .loc 4 457 0
 2285 02d0 1B4B     	 ldr r3,.L143+100
 2286 02d2 4FF00002 	 mov r2,#0
 2287 02d6 1A60     	 str r2,[r3]
 2288 02d8 5AE0     	 b .L100
 2289              	.L144:
 2290 02da 00BF     	 .align 2
 2291              	.L143:
 2292 02dc 00000000 	 .word status_LED_red_cal_time
 2293 02e0 00000000 	 .word last_Hall_trig
 2294 02e4 00000000 	 .word time_since_A
 2295 02e8 00000000 	 .word time_since_B
 2296 02ec 00000000 	 .word time_since_C
 2297 02f0 00000000 	 .word time_180deg
 2298 02f4 00000000 	 .word time_180deg_cal
 2299 02f8 00806640 	 .word 1080459264
 2300 02fc 00000000 	 .word angle_in_sector
 2301 0300 00007042 	 .word 1114636288
 2302 0304 00007042 	 .word 1114636288
 2303 0308 0000F041 	 .word 1106247680
 2304 030c 00000000 	 .word direction
 2305 0310 00000000 	 .word sector
 2306 0314 00004E40 	 .word 1078853632
 2307 0318 00000000 	 .word angle_phi
 2308 031c 00000000 	 .word offset_pos
 2309 0320 0000B443 	 .word 1135869952
 2310 0324 0000E143 	 .word 1138819072
 2311 0328 00000000 	 .word omega_mech_rps_temp
 2312 032c 00000000 	 .word offset_neg
 2313 0330 0000E1C3 	 .word -1008664576
 2314 0334 00000000 	 .word falg_speed_not_new
 2315 0338 00004843 	 .word 1128792064
 2316 033c 000048C3 	 .word -1018691584
 2317 0340 00000000 	 .word omega_mech_rps
 2318 0344 00000000 	 .word omega_ele_rads
 2319              	.L99:
 458:../main.c     **** 		} // set omega  to 0 if no more hall detected
 459:../main.c     **** 		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s
 2320              	 .loc 4 459 0
 2321 0348 A34B     	 ldr r3,.L145+40
 2322 034a D3ED007A 	 flds s15,[r3]
 2323 034e 77EEA77A 	 fadds s15,s15,s15
 2324 0352 17EE900A 	 fmrs r0,s15
 2325 0356 FFF7FEFF 	 bl __aeabi_f2d
 2326 035a 0246     	 mov r2,r0
 2327 035c 0B46     	 mov r3,r1
 2328 035e 1046     	 mov r0,r2
 2329 0360 1946     	 mov r1,r3
 2330 0362 93A3     	 adr r3,.L145
 2331 0364 D3E90023 	 ldrd r2,[r3]
 2332 0368 FFF7FEFF 	 bl __aeabi_dmul
 2333 036c 0246     	 mov r2,r0
 2334 036e 0B46     	 mov r3,r1
 2335 0370 1046     	 mov r0,r2
 2336 0372 1946     	 mov r1,r3
 2337 0374 4FF00002 	 mov r2,#0
 2338 0378 984B     	 ldr r3,.L145+44
 2339 037a FFF7FEFF 	 bl __aeabi_dmul
 2340 037e 0246     	 mov r2,r0
 2341 0380 0B46     	 mov r3,r1
 2342 0382 1046     	 mov r0,r2
 2343 0384 1946     	 mov r1,r3
 2344 0386 FFF7FEFF 	 bl __aeabi_d2f
 2345 038a 0246     	 mov r2,r0
 2346 038c 944B     	 ldr r3,.L145+48
 2347 038e 1A60     	 str r2,[r3]
 2348              	.L100:
 460:../main.c     **** 
 461:../main.c     **** 		omega_ele_degs = omega_ele_rads / Pi180;
 2349              	 .loc 4 461 0
 2350 0390 934B     	 ldr r3,.L145+48
 2351 0392 1B68     	 ldr r3,[r3]
 2352 0394 1846     	 mov r0,r3
 2353 0396 FFF7FEFF 	 bl __aeabi_f2d
 2354 039a 0246     	 mov r2,r0
 2355 039c 0B46     	 mov r3,r1
 2356 039e 1046     	 mov r0,r2
 2357 03a0 1946     	 mov r1,r3
 2358 03a2 85A3     	 adr r3,.L145+8
 2359 03a4 D3E90023 	 ldrd r2,[r3]
 2360 03a8 FFF7FEFF 	 bl __aeabi_ddiv
 2361 03ac 0246     	 mov r2,r0
 2362 03ae 0B46     	 mov r3,r1
 2363 03b0 1046     	 mov r0,r2
 2364 03b2 1946     	 mov r1,r3
 2365 03b4 FFF7FEFF 	 bl __aeabi_d2f
 2366 03b8 0246     	 mov r2,r0
 2367 03ba 8A4B     	 ldr r3,.L145+52
 2368 03bc 1A60     	 str r2,[r3]
 462:../main.c     **** 
 463:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% 
 464:../main.c     **** 
 465:../main.c     **** 		// Current read out over SPI
 466:../main.c     **** 		Current_U = readCurrent(ChipSelect_U);
 2369              	 .loc 4 466 0
 2370 03be 0620     	 movs r0,#6
 2371 03c0 FFF7FEFF 	 bl readCurrent
 2372 03c4 0246     	 mov r2,r0
 2373 03c6 884B     	 ldr r3,.L145+56
 2374 03c8 1A60     	 str r2,[r3]
 467:../main.c     **** 		Current_V = readCurrent(ChipSelect_V);
 2375              	 .loc 4 467 0
 2376 03ca 0520     	 movs r0,#5
 2377 03cc FFF7FEFF 	 bl readCurrent
 2378 03d0 0246     	 mov r2,r0
 2379 03d2 864B     	 ldr r3,.L145+60
 2380 03d4 1A60     	 str r2,[r3]
 468:../main.c     **** 		Current_W = readCurrent(ChipSelect_W);
 2381              	 .loc 4 468 0
 2382 03d6 0320     	 movs r0,#3
 2383 03d8 FFF7FEFF 	 bl readCurrent
 2384 03dc 0246     	 mov r2,r0
 2385 03de 844B     	 ldr r3,.L145+64
 2386 03e0 1A60     	 str r2,[r3]
 469:../main.c     **** 
 470:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of th
 471:../main.c     **** 
 472:../main.c     **** 		// conversion from rad/s to degree
 473:../main.c     **** 		float angle_phi_rad = angle_phi*Pi180;
 2387              	 .loc 4 473 0
 2388 03e2 844B     	 ldr r3,.L145+68
 2389 03e4 1B68     	 ldr r3,[r3]
 2390 03e6 1846     	 mov r0,r3
 2391 03e8 FFF7FEFF 	 bl __aeabi_f2d
 2392 03ec 0246     	 mov r2,r0
 2393 03ee 0B46     	 mov r3,r1
 2394 03f0 1046     	 mov r0,r2
 2395 03f2 1946     	 mov r1,r3
 2396 03f4 70A3     	 adr r3,.L145+8
 2397 03f6 D3E90023 	 ldrd r2,[r3]
 2398 03fa FFF7FEFF 	 bl __aeabi_dmul
 2399 03fe 0246     	 mov r2,r0
 2400 0400 0B46     	 mov r3,r1
 2401 0402 1046     	 mov r0,r2
 2402 0404 1946     	 mov r1,r3
 2403 0406 FFF7FEFF 	 bl __aeabi_d2f
 2404 040a 0346     	 mov r3,r0
 2405 040c BB60     	 str r3,[r7,#8]
 474:../main.c     **** 
 475:../main.c     **** 		// to decrease multiple calculations and computational effort
 476:../main.c     **** 		float cos_phi = cosf(angle_phi_rad);
 2406              	 .loc 4 476 0
 2407 040e B868     	 ldr r0,[r7,#8]
 2408 0410 FFF7FEFF 	 bl cosf
 2409 0414 7860     	 str r0,[r7,#4]
 477:../main.c     **** 		float sin_phi = sinf(angle_phi_rad);
 2410              	 .loc 4 477 0
 2411 0416 B868     	 ldr r0,[r7,#8]
 2412 0418 FFF7FEFF 	 bl sinf
 2413 041c 3860     	 str r0,[r7]
 478:../main.c     **** 
 479:../main.c     **** 		// Clark-Park transformation (from U,V,W to dq)
 480:../main.c     **** 		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-
 2414              	 .loc 4 480 0
 2415 041e 724B     	 ldr r3,.L145+56
 2416 0420 93ED007A 	 flds s14,[r3]
 2417 0424 D7ED017A 	 flds s15,[r7,#4]
 2418 0428 27EE278A 	 fmuls s16,s14,s15
 2419 042c B868     	 ldr r0,[r7,#8]
 2420 042e FFF7FEFF 	 bl __aeabi_f2d
 2421 0432 0246     	 mov r2,r0
 2422 0434 0B46     	 mov r3,r1
 2423 0436 1046     	 mov r0,r2
 2424 0438 1946     	 mov r1,r3
 2425 043a 61A3     	 adr r3,.L145+16
 2426 043c D3E90023 	 ldrd r2,[r3]
 2427 0440 FFF7FEFF 	 bl __aeabi_dsub
 2428 0444 0246     	 mov r2,r0
 2429 0446 0B46     	 mov r3,r1
 2430 0448 1046     	 mov r0,r2
 2431 044a 1946     	 mov r1,r3
 2432 044c FFF7FEFF 	 bl __aeabi_d2f
 2433 0450 0346     	 mov r3,r0
 2434 0452 1846     	 mov r0,r3
 2435 0454 FFF7FEFF 	 bl cosf
 2436 0458 07EE100A 	 fmsr s14,r0
 2437 045c 634B     	 ldr r3,.L145+60
 2438 045e D3ED007A 	 flds s15,[r3]
 2439 0462 67EE277A 	 fmuls s15,s14,s15
 2440 0466 38EE278A 	 fadds s16,s16,s15
 2441 046a B868     	 ldr r0,[r7,#8]
 2442 046c FFF7FEFF 	 bl __aeabi_f2d
 2443 0470 0246     	 mov r2,r0
 2444 0472 0B46     	 mov r3,r1
 2445 0474 1046     	 mov r0,r2
 2446 0476 1946     	 mov r1,r3
 2447 0478 53A3     	 adr r3,.L145+24
 2448 047a D3E90023 	 ldrd r2,[r3]
 2449 047e FFF7FEFF 	 bl __aeabi_dsub
 2450 0482 0246     	 mov r2,r0
 2451 0484 0B46     	 mov r3,r1
 2452 0486 1046     	 mov r0,r2
 2453 0488 1946     	 mov r1,r3
 2454 048a FFF7FEFF 	 bl __aeabi_d2f
 2455 048e 0346     	 mov r3,r0
 2456 0490 1846     	 mov r0,r3
 2457 0492 FFF7FEFF 	 bl cosf
 2458 0496 07EE100A 	 fmsr s14,r0
 2459 049a 554B     	 ldr r3,.L145+64
 2460 049c D3ED007A 	 flds s15,[r3]
 2461 04a0 67EE277A 	 fmuls s15,s14,s15
 2462 04a4 78EE277A 	 fadds s15,s16,s15
 2463 04a8 17EE900A 	 fmrs r0,s15
 2464 04ac FFF7FEFF 	 bl __aeabi_f2d
 2465 04b0 0246     	 mov r2,r0
 2466 04b2 0B46     	 mov r3,r1
 2467 04b4 1046     	 mov r0,r2
 2468 04b6 1946     	 mov r1,r3
 2469 04b8 45A3     	 adr r3,.L145+32
 2470 04ba D3E90023 	 ldrd r2,[r3]
 2471 04be FFF7FEFF 	 bl __aeabi_dmul
 2472 04c2 0246     	 mov r2,r0
 2473 04c4 0B46     	 mov r3,r1
 2474 04c6 1046     	 mov r0,r2
 2475 04c8 1946     	 mov r1,r3
 2476 04ca FFF7FEFF 	 bl __aeabi_d2f
 2477 04ce 0246     	 mov r2,r0
 2478 04d0 494B     	 ldr r3,.L145+72
 2479 04d2 1A60     	 str r2,[r3]
 481:../main.c     **** 		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad
 2480              	 .loc 4 481 0
 2481 04d4 D7ED007A 	 flds s15,[r7]
 2482 04d8 B1EE677A 	 fnegs s14,s15
 2483 04dc 424B     	 ldr r3,.L145+56
 2484 04de D3ED007A 	 flds s15,[r3]
 2485 04e2 27EE278A 	 fmuls s16,s14,s15
 2486 04e6 B868     	 ldr r0,[r7,#8]
 2487 04e8 FFF7FEFF 	 bl __aeabi_f2d
 2488 04ec 0246     	 mov r2,r0
 2489 04ee 0B46     	 mov r3,r1
 2490 04f0 1046     	 mov r0,r2
 2491 04f2 1946     	 mov r1,r3
 2492 04f4 32A3     	 adr r3,.L145+16
 2493 04f6 D3E90023 	 ldrd r2,[r3]
 2494 04fa FFF7FEFF 	 bl __aeabi_dsub
 2495 04fe 0246     	 mov r2,r0
 2496 0500 0B46     	 mov r3,r1
 2497 0502 1046     	 mov r0,r2
 2498 0504 1946     	 mov r1,r3
 2499 0506 FFF7FEFF 	 bl __aeabi_d2f
 2500 050a 0346     	 mov r3,r0
 2501 050c 1846     	 mov r0,r3
 2502 050e FFF7FEFF 	 bl sinf
 2503 0512 07EE100A 	 fmsr s14,r0
 2504 0516 354B     	 ldr r3,.L145+60
 2505 0518 D3ED007A 	 flds s15,[r3]
 2506 051c 67EE277A 	 fmuls s15,s14,s15
 2507 0520 38EE678A 	 fsubs s16,s16,s15
 2508 0524 B868     	 ldr r0,[r7,#8]
 2509 0526 FFF7FEFF 	 bl __aeabi_f2d
 2510 052a 0246     	 mov r2,r0
 2511 052c 0B46     	 mov r3,r1
 2512 052e 1046     	 mov r0,r2
 2513 0530 1946     	 mov r1,r3
 2514 0532 25A3     	 adr r3,.L145+24
 2515 0534 D3E90023 	 ldrd r2,[r3]
 2516 0538 FFF7FEFF 	 bl __aeabi_dsub
 2517 053c 0246     	 mov r2,r0
 2518 053e 0B46     	 mov r3,r1
 2519 0540 1046     	 mov r0,r2
 2520 0542 1946     	 mov r1,r3
 2521 0544 FFF7FEFF 	 bl __aeabi_d2f
 2522 0548 0346     	 mov r3,r0
 2523 054a 1846     	 mov r0,r3
 2524 054c FFF7FEFF 	 bl sinf
 2525 0550 07EE100A 	 fmsr s14,r0
 2526 0554 264B     	 ldr r3,.L145+64
 2527 0556 D3ED007A 	 flds s15,[r3]
 2528 055a 67EE277A 	 fmuls s15,s14,s15
 2529 055e 78EE677A 	 fsubs s15,s16,s15
 2530 0562 17EE900A 	 fmrs r0,s15
 2531 0566 FFF7FEFF 	 bl __aeabi_f2d
 2532 056a 0246     	 mov r2,r0
 2533 056c 0B46     	 mov r3,r1
 2534 056e 1046     	 mov r0,r2
 2535 0570 1946     	 mov r1,r3
 2536 0572 17A3     	 adr r3,.L145+32
 2537 0574 D3E90023 	 ldrd r2,[r3]
 2538 0578 FFF7FEFF 	 bl __aeabi_dmul
 2539 057c 0246     	 mov r2,r0
 2540 057e 0B46     	 mov r3,r1
 2541 0580 1046     	 mov r0,r2
 2542 0582 1946     	 mov r1,r3
 2543 0584 FFF7FEFF 	 bl __aeabi_d2f
 2544 0588 0246     	 mov r2,r0
 2545 058a 1C4B     	 ldr r3,.L145+76
 2546 058c 1A60     	 str r2,[r3]
 482:../main.c     **** 
 483:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of
 484:../main.c     **** 
 485:../main.c     **** 		if(CAN_control == 1){// can control
 2547              	 .loc 4 485 0
 2548 058e 1C4B     	 ldr r3,.L145+80
 2549 0590 1B78     	 ldrb r3,[r3]
 2550 0592 012B     	 cmp r3,#1
 2551 0594 4DD1     	 bne .L101
 486:../main.c     **** 
 487:../main.c     **** 			if(CAN_new_meassage == 1){
 2552              	 .loc 4 487 0
 2553 0596 1B4B     	 ldr r3,.L145+84
 2554 0598 1B78     	 ldrb r3,[r3]
 2555 059a 012B     	 cmp r3,#1
 2556 059c 38D1     	 bne .L102
 488:../main.c     **** 				speed_ref = CAN_speed_ref;
 2557              	 .loc 4 488 0
 2558 059e 1A4B     	 ldr r3,.L145+88
 2559 05a0 1B68     	 ldr r3,[r3]
 2560 05a2 1A4A     	 ldr r2,.L145+92
 2561 05a4 1360     	 str r3,[r2]
 489:../main.c     **** 				CAN_new_meassage = 0;
 2562              	 .loc 4 489 0
 2563 05a6 174B     	 ldr r3,.L145+84
 2564 05a8 0022     	 movs r2,#0
 2565 05aa 1A70     	 strb r2,[r3]
 2566 05ac 36E0     	 b .L103
 2567              	.L146:
 2568 05ae 00BF     	 .align 3
 2569              	.L145:
 2570 05b0 F1D4C853 	 .word 1405670641
 2571 05b4 FB210940 	 .word 1074340347
 2572 05b8 4DC90777 	 .word 1996998989
 2573 05bc 46DF913F 	 .word 1066524486
 2574 05c0 A038DB37 	 .word 937113760
 2575 05c4 52C10040 	 .word 1073791314
 2576 05c8 A038DB37 	 .word 937113760
 2577 05cc 52C11040 	 .word 1074839890
 2578 05d0 93761F57 	 .word 1461679763
 2579 05d4 5555E53F 	 .word 1071994197
 2580 05d8 00000000 	 .word omega_mech_rps
 2581 05dc 00002640 	 .word 1076232192
 2582 05e0 00000000 	 .word omega_ele_rads
 2583 05e4 00000000 	 .word omega_ele_degs
 2584 05e8 00000000 	 .word Current_U
 2585 05ec 00000000 	 .word Current_V
 2586 05f0 00000000 	 .word Current_W
 2587 05f4 00000000 	 .word angle_phi
 2588 05f8 00000000 	 .word id
 2589 05fc 00000000 	 .word iq
 2590 0600 00000000 	 .word CAN_control
 2591 0604 00000000 	 .word CAN_new_meassage
 2592 0608 00000000 	 .word CAN_speed_ref
 2593 060c 00000000 	 .word speed_ref
 2594              	.L102:
 490:../main.c     **** 			}
 491:../main.c     **** 			else{
 492:../main.c     **** 				CAN_no_com_counter ++;
 2595              	 .loc 4 492 0
 2596 0610 594B     	 ldr r3,.L147+16
 2597 0612 1B78     	 ldrb r3,[r3]
 2598 0614 0133     	 adds r3,r3,#1
 2599 0616 DAB2     	 uxtb r2,r3
 2600 0618 574B     	 ldr r3,.L147+16
 2601 061a 1A70     	 strb r2,[r3]
 2602              	.L103:
 493:../main.c     **** 			}
 494:../main.c     **** 
 495:../main.c     **** 			if(CAN_no_com_counter > CAN_NO_COM_TH){
 2603              	 .loc 4 495 0
 2604 061c 564B     	 ldr r3,.L147+16
 2605 061e 1B78     	 ldrb r3,[r3]
 2606 0620 FA2B     	 cmp r3,#250
 2607 0622 06D9     	 bls .L101
 496:../main.c     **** 				//CAN_new_meassage = 0;
 497:../main.c     **** 				CAN_no_com_counter = CAN_NO_COM_TH;
 2608              	 .loc 4 497 0
 2609 0624 544B     	 ldr r3,.L147+16
 2610 0626 FA22     	 movs r2,#250
 2611 0628 1A70     	 strb r2,[r3]
 498:../main.c     **** 				speed_ref = 0;
 2612              	 .loc 4 498 0
 2613 062a 544B     	 ldr r3,.L147+20
 2614 062c 4FF00002 	 mov r2,#0
 2615 0630 1A60     	 str r2,[r3]
 2616              	.L101:
 499:../main.c     **** 			}
 500:../main.c     **** 		}
 501:../main.c     **** 
 502:../main.c     **** 		omega_ele_rads_ref = ( speed_ref * PPZ ) / WHEEL_R;
 2617              	 .loc 4 502 0
 2618 0632 524B     	 ldr r3,.L147+20
 2619 0634 D3ED007A 	 flds s15,[r3]
 2620 0638 B2EE067A 	 fconsts s14,#38
 2621 063c 67EE877A 	 fmuls s15,s15,s14
 2622 0640 17EE900A 	 fmrs r0,s15
 2623 0644 FFF7FEFF 	 bl __aeabi_f2d
 2624 0648 0246     	 mov r2,r0
 2625 064a 0B46     	 mov r3,r1
 2626 064c 1046     	 mov r0,r2
 2627 064e 1946     	 mov r1,r3
 2628 0650 45A3     	 adr r3,.L147
 2629 0652 D3E90023 	 ldrd r2,[r3]
 2630 0656 FFF7FEFF 	 bl __aeabi_ddiv
 2631 065a 0246     	 mov r2,r0
 2632 065c 0B46     	 mov r3,r1
 2633 065e 1046     	 mov r0,r2
 2634 0660 1946     	 mov r1,r3
 2635 0662 FFF7FEFF 	 bl __aeabi_d2f
 2636 0666 0246     	 mov r2,r0
 2637 0668 454B     	 ldr r3,.L147+24
 2638 066a 1A60     	 str r2,[r3]
 503:../main.c     **** 		 /*
 504:../main.c     **** 		if((omega_ele_rads_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rad
 505:../main.c     **** 			T_ref = 0;
 506:../main.c     **** 		}
 507:../main.c     **** 		else{
 508:../main.c     **** 			if(MOTOR_NUM == 1){
 509:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param_1); // outer control loop q f
 510:../main.c     **** 			}
 511:../main.c     **** 			else{
 512:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&omega_param);
 513:../main.c     **** 			}
 514:../main.c     **** 		}
 515:../main.c     **** 		*/
 516:../main.c     **** 
 517:../main.c     **** 		if (Speed_control == 1){
 2639              	 .loc 4 517 0
 2640 066c 454B     	 ldr r3,.L147+28
 2641 066e 1B78     	 ldrb r3,[r3]
 2642 0670 012B     	 cmp r3,#1
 2643 0672 40F0C380 	 bne .L104
 518:../main.c     **** 			if(omega_mech_rps_ref == 0  && (( -2 < omega_mech_rps) && (omega_mech_rps < 2))){ // no contorl 
 2644              	 .loc 4 518 0
 2645 0676 444B     	 ldr r3,.L147+32
 2646 0678 D3ED007A 	 flds s15,[r3]
 2647 067c F5EE407A 	 fcmpzs s15
 2648 0680 F1EE10FA 	 fmstat
 2649 0684 18D1     	 bne .L105
 2650              	 .loc 4 518 0 is_stmt 0 discriminator 1
 2651 0686 414B     	 ldr r3,.L147+36
 2652 0688 D3ED007A 	 flds s15,[r3]
 2653 068c B8EE007A 	 fconsts s14,#128
 2654 0690 F4EEC77A 	 fcmpes s15,s14
 2655 0694 F1EE10FA 	 fmstat
 2656 0698 0EDD     	 ble .L105
 2657              	 .loc 4 518 0 discriminator 2
 2658 069a 3C4B     	 ldr r3,.L147+36
 2659 069c D3ED007A 	 flds s15,[r3]
 2660 06a0 B0EE007A 	 fconsts s14,#0
 2661 06a4 F4EEC77A 	 fcmpes s15,s14
 2662 06a8 F1EE10FA 	 fmstat
 2663 06ac 04D5     	 bpl .L105
 519:../main.c     **** 					T_ref = 0;
 2664              	 .loc 4 519 0 is_stmt 1
 2665 06ae 384B     	 ldr r3,.L147+40
 2666 06b0 4FF00002 	 mov r2,#0
 2667 06b4 1A60     	 str r2,[r3]
 2668 06b6 0BE0     	 b .L108
 2669              	.L105:
 520:../main.c     **** 				}
 521:../main.c     **** 			else{
 522:../main.c     **** 				if(MOTOR_NUM == 1){
 523:../main.c     **** 					T_ref = PID_Controller(omega_mech_rps_ref,omega_mech_rps,&T_param_1); // outer control loop q 
 524:../main.c     **** 				}
 525:../main.c     **** 				else{
 526:../main.c     **** 					T_ref = PID_Controller(omega_mech_rps_ref,omega_mech_rps,&omega_param);
 2670              	 .loc 4 526 0
 2671 06b8 334B     	 ldr r3,.L147+32
 2672 06ba 1A68     	 ldr r2,[r3]
 2673 06bc 334B     	 ldr r3,.L147+36
 2674 06be 1B68     	 ldr r3,[r3]
 2675 06c0 1046     	 mov r0,r2
 2676 06c2 1946     	 mov r1,r3
 2677 06c4 334A     	 ldr r2,.L147+44
 2678 06c6 FFF7FEFF 	 bl PID_Controller
 2679 06ca 0246     	 mov r2,r0
 2680 06cc 304B     	 ldr r3,.L147+40
 2681 06ce 1A60     	 str r2,[r3]
 2682              	.L108:
 527:../main.c     **** 				}
 528:../main.c     **** 			}
 529:../main.c     **** 
 530:../main.c     **** 			if(start_hilfe ==1 ){
 2683              	 .loc 4 530 0
 2684 06d0 314B     	 ldr r3,.L147+48
 2685 06d2 1B78     	 ldrb r3,[r3]
 2686 06d4 012B     	 cmp r3,#1
 2687 06d6 7AD1     	 bne .L134
 531:../main.c     **** 				// start help
 532:../main.c     **** 				if(omega_mech_rps_ref != 0 && omega_mech_rps == 0){
 2688              	 .loc 4 532 0
 2689 06d8 2B4B     	 ldr r3,.L147+32
 2690 06da D3ED007A 	 flds s15,[r3]
 2691 06de F5EE407A 	 fcmpzs s15
 2692 06e2 F1EE10FA 	 fmstat
 2693 06e6 0AD0     	 beq .L110
 2694              	 .loc 4 532 0 is_stmt 0 discriminator 1
 2695 06e8 284B     	 ldr r3,.L147+36
 2696 06ea D3ED007A 	 flds s15,[r3]
 2697 06ee F5EE407A 	 fcmpzs s15
 2698 06f2 F1EE10FA 	 fmstat
 2699 06f6 02D1     	 bne .L110
 533:../main.c     **** 					start_help_count = 10;
 2700              	 .loc 4 533 0 is_stmt 1
 2701 06f8 284B     	 ldr r3,.L147+52
 2702 06fa 0A22     	 movs r2,#10
 2703 06fc 1A70     	 strb r2,[r3]
 2704              	.L110:
 534:../main.c     **** 				}
 535:../main.c     **** 
 536:../main.c     **** 				if(start_help_count> 0){
 2705              	 .loc 4 536 0
 2706 06fe 274B     	 ldr r3,.L147+52
 2707 0700 1B78     	 ldrb r3,[r3]
 2708 0702 002B     	 cmp r3,#0
 2709 0704 63D0     	 beq .L134
 537:../main.c     **** 					start_help_count --;
 2710              	 .loc 4 537 0
 2711 0706 254B     	 ldr r3,.L147+52
 2712 0708 1B78     	 ldrb r3,[r3]
 2713 070a 013B     	 subs r3,r3,#1
 2714 070c DAB2     	 uxtb r2,r3
 2715 070e 234B     	 ldr r3,.L147+52
 2716 0710 1A70     	 strb r2,[r3]
 538:../main.c     **** 					if(omega_mech_rps_ref > 0)T_ref = T_ref + START_HELP_T;
 2717              	 .loc 4 538 0
 2718 0712 1D4B     	 ldr r3,.L147+32
 2719 0714 D3ED007A 	 flds s15,[r3]
 2720 0718 F5EEC07A 	 fcmpezs s15
 2721 071c F1EE10FA 	 fmstat
 2722 0720 17DD     	 ble .L141
 2723              	 .loc 4 538 0 is_stmt 0 discriminator 1
 2724 0722 1B4B     	 ldr r3,.L147+40
 2725 0724 1B68     	 ldr r3,[r3]
 2726 0726 1846     	 mov r0,r3
 2727 0728 FFF7FEFF 	 bl __aeabi_f2d
 2728 072c 0246     	 mov r2,r0
 2729 072e 0B46     	 mov r3,r1
 2730 0730 1046     	 mov r0,r2
 2731 0732 1946     	 mov r1,r3
 2732 0734 0EA3     	 adr r3,.L147+8
 2733 0736 D3E90023 	 ldrd r2,[r3]
 2734 073a FFF7FEFF 	 bl __aeabi_dadd
 2735 073e 0246     	 mov r2,r0
 2736 0740 0B46     	 mov r3,r1
 2737 0742 1046     	 mov r0,r2
 2738 0744 1946     	 mov r1,r3
 2739 0746 FFF7FEFF 	 bl __aeabi_d2f
 2740 074a 0246     	 mov r2,r0
 2741 074c 104B     	 ldr r3,.L147+40
 2742 074e 1A60     	 str r2,[r3]
 2743 0750 3DE0     	 b .L134
 2744              	.L141:
 539:../main.c     **** 					else if(omega_mech_rps_ref < 0)T_ref = T_ref - START_HELP_T;
 2745              	 .loc 4 539 0 is_stmt 1
 2746 0752 0D4B     	 ldr r3,.L147+32
 2747 0754 D3ED007A 	 flds s15,[r3]
 2748 0758 F5EEC07A 	 fcmpezs s15
 2749 075c F1EE10FA 	 fmstat
 2750 0760 1ED4     	 bmi .L136
 2751 0762 34E0     	 b .L134
 2752              	.L148:
 2753 0764 AFF30080 	 .align 3
 2754              	.L147:
 2755 0768 48E17A14 	 .word 343597384
 2756 076c AE47B13F 	 .word 1068582830
 2757 0770 9A999999 	 .word -1717986918
 2758 0774 9999C93F 	 .word 1070176665
 2759 0778 00000000 	 .word CAN_no_com_counter
 2760 077c 00000000 	 .word speed_ref
 2761 0780 00000000 	 .word omega_ele_rads_ref
 2762 0784 00000000 	 .word Speed_control
 2763 0788 00000000 	 .word omega_mech_rps_ref
 2764 078c 00000000 	 .word omega_mech_rps
 2765 0790 00000000 	 .word T_ref
 2766 0794 00000000 	 .word omega_param
 2767 0798 00000000 	 .word start_hilfe
 2768 079c 00000000 	 .word start_help_count
 2769              	.L136:
 2770              	 .loc 4 539 0 is_stmt 0 discriminator 1
 2771 07a0 AF4B     	 ldr r3,.L149+32
 2772 07a2 1B68     	 ldr r3,[r3]
 2773 07a4 1846     	 mov r0,r3
 2774 07a6 FFF7FEFF 	 bl __aeabi_f2d
 2775 07aa 0246     	 mov r2,r0
 2776 07ac 0B46     	 mov r3,r1
 2777 07ae 1046     	 mov r0,r2
 2778 07b0 1946     	 mov r1,r3
 2779 07b2 A3A3     	 adr r3,.L149
 2780 07b4 D3E90023 	 ldrd r2,[r3]
 2781 07b8 FFF7FEFF 	 bl __aeabi_dsub
 2782 07bc 0246     	 mov r2,r0
 2783 07be 0B46     	 mov r3,r1
 2784 07c0 1046     	 mov r0,r2
 2785 07c2 1946     	 mov r1,r3
 2786 07c4 FFF7FEFF 	 bl __aeabi_d2f
 2787 07c8 0246     	 mov r2,r0
 2788 07ca A54B     	 ldr r3,.L149+32
 2789 07cc 1A60     	 str r2,[r3]
 2790              	.L134:
 540:../main.c     **** 				}
 541:../main.c     **** 			}
 542:../main.c     **** 
 543:../main.c     **** 			if(MOTOR_NUM == 1 || MOTOR_NUM == 10) {
 544:../main.c     **** 				iq_ref =  T_ref / K_T; // dirction for motor 1
 2791              	 .loc 4 544 0 is_stmt 1
 2792 07ce A44B     	 ldr r3,.L149+32
 2793 07d0 1B68     	 ldr r3,[r3]
 2794 07d2 1846     	 mov r0,r3
 2795 07d4 FFF7FEFF 	 bl __aeabi_f2d
 2796 07d8 0246     	 mov r2,r0
 2797 07da 0B46     	 mov r3,r1
 2798 07dc 1046     	 mov r0,r2
 2799 07de 1946     	 mov r1,r3
 2800 07e0 99A3     	 adr r3,.L149+8
 2801 07e2 D3E90023 	 ldrd r2,[r3]
 2802 07e6 FFF7FEFF 	 bl __aeabi_ddiv
 2803 07ea 0246     	 mov r2,r0
 2804 07ec 0B46     	 mov r3,r1
 2805 07ee 1046     	 mov r0,r2
 2806 07f0 1946     	 mov r1,r3
 2807 07f2 FFF7FEFF 	 bl __aeabi_d2f
 2808 07f6 0246     	 mov r2,r0
 2809 07f8 9A4B     	 ldr r3,.L149+36
 2810 07fa 1A60     	 str r2,[r3]
 2811              	.L104:
 545:../main.c     **** 			}
 546:../main.c     **** 			else{
 547:../main.c     **** 				iq_ref = - T_ref / K_T;// dirction for motor not 1
 548:../main.c     **** 			}
 549:../main.c     **** 
 550:../main.c     **** 		}
 551:../main.c     **** 
 552:../main.c     **** 
 553:../main.c     **** 		iq_ref = T_ref / K_T;// dirction for motor 1
 2812              	 .loc 4 553 0
 2813 07fc 984B     	 ldr r3,.L149+32
 2814 07fe 1B68     	 ldr r3,[r3]
 2815 0800 1846     	 mov r0,r3
 2816 0802 FFF7FEFF 	 bl __aeabi_f2d
 2817 0806 0246     	 mov r2,r0
 2818 0808 0B46     	 mov r3,r1
 2819 080a 1046     	 mov r0,r2
 2820 080c 1946     	 mov r1,r3
 2821 080e 8EA3     	 adr r3,.L149+8
 2822 0810 D3E90023 	 ldrd r2,[r3]
 2823 0814 FFF7FEFF 	 bl __aeabi_ddiv
 2824 0818 0246     	 mov r2,r0
 2825 081a 0B46     	 mov r3,r1
 2826 081c 1046     	 mov r0,r2
 2827 081e 1946     	 mov r1,r3
 2828 0820 FFF7FEFF 	 bl __aeabi_d2f
 2829 0824 0246     	 mov r2,r0
 2830 0826 8F4B     	 ldr r3,.L149+36
 2831 0828 1A60     	 str r2,[r3]
 554:../main.c     **** 
 555:../main.c     **** 		//limit to IQ_REF_MAx limit
 556:../main.c     **** 		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 2832              	 .loc 4 556 0
 2833 082a 8E4B     	 ldr r3,.L149+36
 2834 082c D3ED007A 	 flds s15,[r3]
 2835 0830 B9EE047A 	 fconsts s14,#148
 2836 0834 F4EEC77A 	 fcmpes s15,s14
 2837 0838 F1EE10FA 	 fmstat
 2838 083c 02D5     	 bpl .L114
 2839              	 .loc 4 556 0 is_stmt 0 discriminator 1
 2840 083e 894B     	 ldr r3,.L149+36
 2841 0840 894A     	 ldr r2,.L149+40
 2842 0842 1A60     	 str r2,[r3]
 2843              	.L114:
 557:../main.c     **** 		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 2844              	 .loc 4 557 0 is_stmt 1
 2845 0844 874B     	 ldr r3,.L149+36
 2846 0846 D3ED007A 	 flds s15,[r3]
 2847 084a B1EE047A 	 fconsts s14,#20
 2848 084e F4EEC77A 	 fcmpes s15,s14
 2849 0852 F1EE10FA 	 fmstat
 2850 0856 02DD     	 ble .L116
 2851              	 .loc 4 557 0 is_stmt 0 discriminator 1
 2852 0858 824B     	 ldr r3,.L149+36
 2853 085a 844A     	 ldr r2,.L149+44
 2854 085c 1A60     	 str r2,[r3]
 2855              	.L116:
 558:../main.c     **** 
 559:../main.c     **** 		if(Torque_control == 1){
 2856              	 .loc 4 559 0 is_stmt 1
 2857 085e 844B     	 ldr r3,.L149+48
 2858 0860 1B78     	 ldrb r3,[r3]
 2859 0862 012B     	 cmp r3,#1
 2860 0864 16D1     	 bne .L118
 560:../main.c     **** 			Vd = PID_Controller(0.0,id,&Id_param);
 2861              	 .loc 4 560 0
 2862 0866 834B     	 ldr r3,.L149+52
 2863 0868 1B68     	 ldr r3,[r3]
 2864 086a 4FF00000 	 mov r0,#0
 2865 086e 1946     	 mov r1,r3
 2866 0870 814A     	 ldr r2,.L149+56
 2867 0872 FFF7FEFF 	 bl PID_Controller
 2868 0876 0246     	 mov r2,r0
 2869 0878 804B     	 ldr r3,.L149+60
 2870 087a 1A60     	 str r2,[r3]
 561:../main.c     **** 			Vq = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
 2871              	 .loc 4 561 0
 2872 087c 794B     	 ldr r3,.L149+36
 2873 087e 1A68     	 ldr r2,[r3]
 2874 0880 7F4B     	 ldr r3,.L149+64
 2875 0882 1B68     	 ldr r3,[r3]
 2876 0884 1046     	 mov r0,r2
 2877 0886 1946     	 mov r1,r3
 2878 0888 7E4A     	 ldr r2,.L149+68
 2879 088a FFF7FEFF 	 bl PID_Controller
 2880 088e 0246     	 mov r2,r0
 2881 0890 7D4B     	 ldr r3,.L149+72
 2882 0892 1A60     	 str r2,[r3]
 2883              	.L118:
 562:../main.c     **** 		}
 563:../main.c     **** 
 564:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9
 565:../main.c     **** 
 566:../main.c     **** 		// dq to alpha beta for voltage
 567:../main.c     **** 		Valpha = Vd*cos_phi - Vq*sin_phi;
 2884              	 .loc 4 567 0
 2885 0894 794B     	 ldr r3,.L149+60
 2886 0896 93ED007A 	 flds s14,[r3]
 2887 089a D7ED017A 	 flds s15,[r7,#4]
 2888 089e 27EE277A 	 fmuls s14,s14,s15
 2889 08a2 794B     	 ldr r3,.L149+72
 2890 08a4 D3ED006A 	 flds s13,[r3]
 2891 08a8 D7ED007A 	 flds s15,[r7]
 2892 08ac 66EEA77A 	 fmuls s15,s13,s15
 2893 08b0 77EE677A 	 fsubs s15,s14,s15
 2894 08b4 754B     	 ldr r3,.L149+76
 2895 08b6 C3ED007A 	 fsts s15,[r3]
 568:../main.c     **** 		Vbeta = Vd*sin_phi + Vq*cos_phi;
 2896              	 .loc 4 568 0
 2897 08ba 704B     	 ldr r3,.L149+60
 2898 08bc 93ED007A 	 flds s14,[r3]
 2899 08c0 D7ED007A 	 flds s15,[r7]
 2900 08c4 27EE277A 	 fmuls s14,s14,s15
 2901 08c8 6F4B     	 ldr r3,.L149+72
 2902 08ca D3ED006A 	 flds s13,[r3]
 2903 08ce D7ED017A 	 flds s15,[r7,#4]
 2904 08d2 66EEA77A 	 fmuls s15,s13,s15
 2905 08d6 77EE277A 	 fadds s15,s14,s15
 2906 08da 6D4B     	 ldr r3,.L149+80
 2907 08dc C3ED007A 	 fsts s15,[r3]
 569:../main.c     **** 
 570:../main.c     **** 		// calc angle for SVM app
 571:../main.c     **** 		angle_ab_rad = atanf(Vbeta/Valpha);
 2908              	 .loc 4 571 0
 2909 08e0 6B4B     	 ldr r3,.L149+80
 2910 08e2 93ED007A 	 flds s14,[r3]
 2911 08e6 694B     	 ldr r3,.L149+76
 2912 08e8 D3ED007A 	 flds s15,[r3]
 2913 08ec C7EE277A 	 fdivs s15,s14,s15
 2914 08f0 17EE900A 	 fmrs r0,s15
 2915 08f4 FFF7FEFF 	 bl atanf
 2916 08f8 0246     	 mov r2,r0
 2917 08fa 664B     	 ldr r3,.L149+84
 2918 08fc 1A60     	 str r2,[r3]
 572:../main.c     **** 		angle_ab = angle_ab_rad/Pi180;
 2919              	 .loc 4 572 0
 2920 08fe 654B     	 ldr r3,.L149+84
 2921 0900 1B68     	 ldr r3,[r3]
 2922 0902 1846     	 mov r0,r3
 2923 0904 FFF7FEFF 	 bl __aeabi_f2d
 2924 0908 0246     	 mov r2,r0
 2925 090a 0B46     	 mov r3,r1
 2926 090c 1046     	 mov r0,r2
 2927 090e 1946     	 mov r1,r3
 2928 0910 4FA3     	 adr r3,.L149+16
 2929 0912 D3E90023 	 ldrd r2,[r3]
 2930 0916 FFF7FEFF 	 bl __aeabi_ddiv
 2931 091a 0246     	 mov r2,r0
 2932 091c 0B46     	 mov r3,r1
 2933 091e 1046     	 mov r0,r2
 2934 0920 1946     	 mov r1,r3
 2935 0922 FFF7FEFF 	 bl __aeabi_d2f
 2936 0926 0246     	 mov r2,r0
 2937 0928 5B4B     	 ldr r3,.L149+88
 2938 092a 1A60     	 str r2,[r3]
 573:../main.c     **** 
 574:../main.c     **** 		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 2939              	 .loc 4 574 0
 2940 092c 574B     	 ldr r3,.L149+76
 2941 092e D3ED007A 	 flds s15,[r3]
 2942 0932 F5EEC07A 	 fcmpezs s15
 2943 0936 F1EE10FA 	 fmstat
 2944 093a 0AD5     	 bpl .L142
 2945              	 .loc 4 574 0 is_stmt 0 discriminator 1
 2946 093c 564B     	 ldr r3,.L149+88
 2947 093e D3ED007A 	 flds s15,[r3]
 2948 0942 9FED567A 	 flds s14,.L149+92
 2949 0946 77EE877A 	 fadds s15,s15,s14
 2950 094a 534B     	 ldr r3,.L149+88
 2951 094c C3ED007A 	 fsts s15,[r3]
 2952 0950 11E0     	 b .L121
 2953              	.L142:
 575:../main.c     **** 		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 2954              	 .loc 4 575 0 is_stmt 1
 2955 0952 4F4B     	 ldr r3,.L149+80
 2956 0954 D3ED007A 	 flds s15,[r3]
 2957 0958 F5EEC07A 	 fcmpezs s15
 2958 095c F1EE10FA 	 fmstat
 2959 0960 09D5     	 bpl .L121
 2960              	 .loc 4 575 0 is_stmt 0 discriminator 1
 2961 0962 4D4B     	 ldr r3,.L149+88
 2962 0964 D3ED007A 	 flds s15,[r3]
 2963 0968 9FED4D7A 	 flds s14,.L149+96
 2964 096c 77EE877A 	 fadds s15,s15,s14
 2965 0970 494B     	 ldr r3,.L149+88
 2966 0972 C3ED007A 	 fsts s15,[r3]
 2967              	.L121:
 576:../main.c     **** 
 577:../main.c     **** 		// shortend to one line
 578:../main.c     **** 		// amplitude calculation
 579:../main.c     **** 		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 2968              	 .loc 4 579 0 is_stmt 1
 2969 0976 454B     	 ldr r3,.L149+76
 2970 0978 93ED007A 	 flds s14,[r3]
 2971 097c 434B     	 ldr r3,.L149+76
 2972 097e D3ED007A 	 flds s15,[r3]
 2973 0982 27EE277A 	 fmuls s14,s14,s15
 2974 0986 424B     	 ldr r3,.L149+80
 2975 0988 D3ED006A 	 flds s13,[r3]
 2976 098c 404B     	 ldr r3,.L149+80
 2977 098e D3ED007A 	 flds s15,[r3]
 2978 0992 66EEA77A 	 fmuls s15,s13,s15
 2979 0996 77EE277A 	 fadds s15,s14,s15
 2980 099a 17EE900A 	 fmrs r0,s15
 2981 099e FFF7FEFF 	 bl sqrtf
 2982 09a2 0246     	 mov r2,r0
 2983 09a4 3F4B     	 ldr r3,.L149+100
 2984 09a6 1A60     	 str r2,[r3]
 580:../main.c     **** 
 581:../main.c     **** 		//K_inv = V/m --> m = V / K_inv
 582:../main.c     **** 		//modulation_index = amplitude_ab/K_inv;
 583:../main.c     **** 
 584:../main.c     **** 		if(V_DC_link < 0 || V_DC_link > 50) V_DC_link = 14.8;  // plauseblyt check if not set to nom bat 
 2985              	 .loc 4 584 0
 2986 09a8 3F4B     	 ldr r3,.L149+104
 2987 09aa D3ED007A 	 flds s15,[r3]
 2988 09ae F5EEC07A 	 fcmpezs s15
 2989 09b2 F1EE10FA 	 fmstat
 2990 09b6 09D4     	 bmi .L123
 2991              	 .loc 4 584 0 is_stmt 0 discriminator 2
 2992 09b8 3B4B     	 ldr r3,.L149+104
 2993 09ba D3ED007A 	 flds s15,[r3]
 2994 09be 9FED3B7A 	 flds s14,.L149+108
 2995 09c2 F4EEC77A 	 fcmpes s15,s14
 2996 09c6 F1EE10FA 	 fmstat
 2997 09ca 02DD     	 ble .L124
 2998              	.L123:
 2999              	 .loc 4 584 0 discriminator 3
 3000 09cc 364B     	 ldr r3,.L149+104
 3001 09ce 384A     	 ldr r2,.L149+112
 3002 09d0 1A60     	 str r2,[r3]
 3003              	.L124:
 585:../main.c     **** 		modulation_index = amplitude_ab/(V_DC_link /1.732);
 3004              	 .loc 4 585 0 is_stmt 1
 3005 09d2 344B     	 ldr r3,.L149+100
 3006 09d4 1B68     	 ldr r3,[r3]
 3007 09d6 1846     	 mov r0,r3
 3008 09d8 FFF7FEFF 	 bl __aeabi_f2d
 3009 09dc 0446     	 mov r4,r0
 3010 09de 0D46     	 mov r5,r1
 3011 09e0 314B     	 ldr r3,.L149+104
 3012 09e2 1B68     	 ldr r3,[r3]
 3013 09e4 1846     	 mov r0,r3
 3014 09e6 FFF7FEFF 	 bl __aeabi_f2d
 3015 09ea 0246     	 mov r2,r0
 3016 09ec 0B46     	 mov r3,r1
 3017 09ee 1046     	 mov r0,r2
 3018 09f0 1946     	 mov r1,r3
 3019 09f2 19A3     	 adr r3,.L149+24
 3020 09f4 D3E90023 	 ldrd r2,[r3]
 3021 09f8 FFF7FEFF 	 bl __aeabi_ddiv
 3022 09fc 0246     	 mov r2,r0
 3023 09fe 0B46     	 mov r3,r1
 3024 0a00 2046     	 mov r0,r4
 3025 0a02 2946     	 mov r1,r5
 3026 0a04 FFF7FEFF 	 bl __aeabi_ddiv
 3027 0a08 0246     	 mov r2,r0
 3028 0a0a 0B46     	 mov r3,r1
 3029 0a0c 1046     	 mov r0,r2
 3030 0a0e 1946     	 mov r1,r3
 3031 0a10 FFF7FEFF 	 bl __aeabi_d2f
 3032 0a14 0246     	 mov r2,r0
 3033 0a16 274B     	 ldr r3,.L149+116
 3034 0a18 1A60     	 str r2,[r3]
 586:../main.c     **** 
 587:../main.c     **** 		//scale maximum 1 to 10000 -->
 588:../main.c     **** 		modulation_index_scaled = 10000*modulation_index;
 3035              	 .loc 4 588 0
 3036 0a1a 264B     	 ldr r3,.L149+116
 3037 0a1c D3ED007A 	 flds s15,[r3]
 3038 0a20 9FED257A 	 flds s14,.L149+120
 3039 0a24 67EE877A 	 fmuls s15,s15,s14
 3040 0a28 244B     	 ldr r3,.L149+124
 3041 0a2a C3ED007A 	 fsts s15,[r3]
 589:../main.c     **** 
 590:../main.c     **** 
 591:../main.c     **** 		// shortened ca 4% improvemnt
 592:../main.c     **** 		//modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;
 593:../main.c     **** 
 594:../main.c     **** 		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the ti
 3042              	 .loc 4 594 0
 3043 0a2e 2448     	 ldr r0,.L149+128
 3044 0a30 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 595:../main.c     **** 
 596:../main.c     **** }
 3045              	 .loc 4 596 0
 3046 0a34 1037     	 adds r7,r7,#16
 3047              	.LCFI89:
 3048              	 .cfi_def_cfa_offset 24
 3049 0a36 BD46     	 mov sp,r7
 3050              	.LCFI90:
 3051              	 .cfi_def_cfa_register 13
 3052              	 
 3053 0a38 BDEC028B 	 fldmfdd sp!,{d8}
 3054              	.LCFI91:
 3055              	 .cfi_restore 80
 3056              	 .cfi_restore 81
 3057              	 .cfi_def_cfa_offset 16
 3058 0a3c B0BD     	 pop {r4,r5,r7,pc}
 3059              	.L150:
 3060 0a3e 00BF     	 .align 3
 3061              	.L149:
 3062 0a40 9A999999 	 .word -1717986918
 3063 0a44 9999C93F 	 .word 1070176665
 3064 0a48 E17A14AE 	 .word -1374389535
 3065 0a4c 47E1CA3F 	 .word 1070260551
 3066 0a50 4DC90777 	 .word 1996998989
 3067 0a54 46DF913F 	 .word 1066524486
 3068 0a58 83C0CAA1 	 .word -1580547965
 3069 0a5c 45B6FB3F 	 .word 1073460805
 3070 0a60 00000000 	 .word T_ref
 3071 0a64 00000000 	 .word iq_ref
 3072 0a68 0000A0C0 	 .word -1063256064
 3073 0a6c 0000A040 	 .word 1084227584
 3074 0a70 00000000 	 .word Torque_control
 3075 0a74 00000000 	 .word id
 3076 0a78 00000000 	 .word Id_param
 3077 0a7c 00000000 	 .word Vd
 3078 0a80 00000000 	 .word iq
 3079 0a84 00000000 	 .word Iq_param
 3080 0a88 00000000 	 .word Vq
 3081 0a8c 00000000 	 .word Valpha
 3082 0a90 00000000 	 .word Vbeta
 3083 0a94 00000000 	 .word angle_ab_rad
 3084 0a98 00000000 	 .word angle_ab
 3085 0a9c 00003443 	 .word 1127481344
 3086 0aa0 0000B443 	 .word 1135869952
 3087 0aa4 00000000 	 .word amplitude_ab
 3088 0aa8 00000000 	 .word V_DC_link
 3089 0aac 00004842 	 .word 1112014848
 3090 0ab0 CDCC6C41 	 .word 1097649357
 3091 0ab4 00000000 	 .word modulation_index
 3092 0ab8 00401C46 	 .word 1176256512
 3093 0abc 00000000 	 .word modulation_index_scaled
 3094 0ac0 00000000 	 .word status_LED_red_cal_time
 3095              	 .cfi_endproc
 3096              	.LFE565:
 3098 0ac4 AFF30080 	 .section .text.PID_Controller,"ax",%progbits
 3099              	 .align 2
 3100              	 .global PID_Controller
 3101              	 .thumb
 3102              	 .thumb_func
 3104              	PID_Controller:
 3105              	.LFB566:
 597:../main.c     **** 
 598:../main.c     **** // PID Controller
 599:../main.c     **** float PID_Controller(float SetPoint,float ActValue,PID_param *param){
 3106              	 .loc 4 599 0
 3107              	 .cfi_startproc
 3108              	 
 3109              	 
 3110              	 
 3111 0000 80B4     	 push {r7}
 3112              	.LCFI92:
 3113              	 .cfi_def_cfa_offset 4
 3114              	 .cfi_offset 7,-4
 3115 0002 89B0     	 sub sp,sp,#36
 3116              	.LCFI93:
 3117              	 .cfi_def_cfa_offset 40
 3118 0004 00AF     	 add r7,sp,#0
 3119              	.LCFI94:
 3120              	 .cfi_def_cfa_register 7
 3121 0006 F860     	 str r0,[r7,#12]
 3122 0008 B960     	 str r1,[r7,#8]
 3123 000a 7A60     	 str r2,[r7,#4]
 600:../main.c     **** 
 601:../main.c     **** 	float Deviation = SetPoint - ActValue;
 3124              	 .loc 4 601 0
 3125 000c 97ED037A 	 flds s14,[r7,#12]
 3126 0010 D7ED027A 	 flds s15,[r7,#8]
 3127 0014 77EE677A 	 fsubs s15,s14,s15
 3128 0018 C7ED067A 	 fsts s15,[r7,#24]
 602:../main.c     **** 	float temp1, temp2;
 603:../main.c     **** 
 604:../main.c     **** 	 temp1 = param->P*Deviation;
 3129              	 .loc 4 604 0
 3130 001c 7B68     	 ldr r3,[r7,#4]
 3131 001e 93ED007A 	 flds s14,[r3]
 3132 0022 D7ED067A 	 flds s15,[r7,#24]
 3133 0026 67EE277A 	 fmuls s15,s14,s15
 3134 002a C7ED057A 	 fsts s15,[r7,#20]
 605:../main.c     **** 	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;
 3135              	 .loc 4 605 0
 3136 002e 7B68     	 ldr r3,[r7,#4]
 3137 0030 93ED017A 	 flds s14,[r3,#4]
 3138 0034 214B     	 ldr r3,.L160
 3139 0036 D3ED007A 	 flds s15,[r3]
 3140 003a 27EE277A 	 fmuls s14,s14,s15
 3141 003e D7ED067A 	 flds s15,[r7,#24]
 3142 0042 27EE277A 	 fmuls s14,s14,s15
 3143 0046 D7ED057A 	 flds s15,[r7,#20]
 3144 004a 37EE277A 	 fadds s14,s14,s15
 3145 004e 7B68     	 ldr r3,[r7,#4]
 3146 0050 D3ED087A 	 flds s15,[r3,#32]
 3147 0054 77EE277A 	 fadds s15,s14,s15
 3148 0058 C7ED077A 	 fsts s15,[r7,#28]
 606:../main.c     **** 
 607:../main.c     **** 	 if (temp2 >= param->MaxLimit){
 3149              	 .loc 4 607 0
 3150 005c 7B68     	 ldr r3,[r7,#4]
 3151 005e 93ED037A 	 flds s14,[r3,#12]
 3152 0062 D7ED077A 	 flds s15,[r7,#28]
 3153 0066 B4EEE77A 	 fcmpes s14,s15
 3154 006a F1EE10FA 	 fmstat
 3155 006e 03D8     	 bhi .L159
 608:../main.c     **** 		 temp2 = param->MaxLimit;
 3156              	 .loc 4 608 0
 3157 0070 7B68     	 ldr r3,[r7,#4]
 3158 0072 DB68     	 ldr r3,[r3,#12]
 3159 0074 FB61     	 str r3,[r7,#28]
 3160 0076 0CE0     	 b .L154
 3161              	.L159:
 609:../main.c     **** 	 }
 610:../main.c     **** 	 else if (temp2 < param->MinLimit){
 3162              	 .loc 4 610 0
 3163 0078 7B68     	 ldr r3,[r7,#4]
 3164 007a 93ED047A 	 flds s14,[r3,#16]
 3165 007e D7ED077A 	 flds s15,[r7,#28]
 3166 0082 B4EEE77A 	 fcmpes s14,s15
 3167 0086 F1EE10FA 	 fmstat
 3168 008a 02DD     	 ble .L154
 611:../main.c     **** 		 temp2 = param->MinLimit;
 3169              	 .loc 4 611 0
 3170 008c 7B68     	 ldr r3,[r7,#4]
 3171 008e 1B69     	 ldr r3,[r3,#16]
 3172 0090 FB61     	 str r3,[r7,#28]
 3173              	.L154:
 612:../main.c     **** 	 }
 613:../main.c     **** 
 614:../main.c     **** 	 param->Output_z = temp2 - temp1;
 3174              	 .loc 4 614 0
 3175 0092 97ED077A 	 flds s14,[r7,#28]
 3176 0096 D7ED057A 	 flds s15,[r7,#20]
 3177 009a 77EE677A 	 fsubs s15,s14,s15
 3178 009e 7B68     	 ldr r3,[r7,#4]
 3179 00a0 C3ED087A 	 fsts s15,[r3,#32]
 615:../main.c     **** 
 616:../main.c     **** 	 param->Output = temp2;
 3180              	 .loc 4 616 0
 3181 00a4 7B68     	 ldr r3,[r7,#4]
 3182 00a6 FA69     	 ldr r2,[r7,#28]
 3183 00a8 5A61     	 str r2,[r3,#20]
 617:../main.c     **** 
 618:../main.c     **** 	return param->Output;
 3184              	 .loc 4 618 0
 3185 00aa 7B68     	 ldr r3,[r7,#4]
 3186 00ac 5B69     	 ldr r3,[r3,#20]
 619:../main.c     **** 
 620:../main.c     **** }
 3187              	 .loc 4 620 0
 3188 00ae 1846     	 mov r0,r3
 3189 00b0 2437     	 adds r7,r7,#36
 3190              	.LCFI95:
 3191              	 .cfi_def_cfa_offset 4
 3192 00b2 BD46     	 mov sp,r7
 3193              	.LCFI96:
 3194              	 .cfi_def_cfa_register 13
 3195              	 
 3196 00b4 5DF8047B 	 ldr r7,[sp],#4
 3197              	.LCFI97:
 3198              	 .cfi_restore 7
 3199              	 .cfi_def_cfa_offset 0
 3200 00b8 7047     	 bx lr
 3201              	.L161:
 3202 00ba 00BF     	 .align 2
 3203              	.L160:
 3204 00bc 00000000 	 .word Tcyc
 3205              	 .cfi_endproc
 3206              	.LFE566:
 3208              	 .section .text.readCurrent,"ax",%progbits
 3209              	 .align 2
 3210              	 .global readCurrent
 3211              	 .thumb
 3212              	 .thumb_func
 3214              	readCurrent:
 3215              	.LFB567:
 621:../main.c     **** 
 622:../main.c     **** 
 623:../main.c     **** //Read Current  via SPI-Interface
 624:../main.c     **** float readCurrent(uint8_t ChipSelect){
 3216              	 .loc 4 624 0
 3217              	 .cfi_startproc
 3218              	 
 3219              	 
 3220 0000 80B5     	 push {r7,lr}
 3221              	.LCFI98:
 3222              	 .cfi_def_cfa_offset 8
 3223              	 .cfi_offset 7,-8
 3224              	 .cfi_offset 14,-4
 3225 0002 86B0     	 sub sp,sp,#24
 3226              	.LCFI99:
 3227              	 .cfi_def_cfa_offset 32
 3228 0004 00AF     	 add r7,sp,#0
 3229              	.LCFI100:
 3230              	 .cfi_def_cfa_register 7
 3231 0006 0346     	 mov r3,r0
 3232 0008 FB71     	 strb r3,[r7,#7]
 625:../main.c     **** 	uint8_t ReadData[2];
 626:../main.c     **** 
 627:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, ChipSelect);
 3233              	 .loc 4 627 0
 3234 000a FB79     	 ldrb r3,[r7,#7]
 3235 000c 9BB2     	 uxth r3,r3
 3236 000e 2248     	 ldr r0,.L164
 3237 0010 1946     	 mov r1,r3
 3238 0012 FFF7FEFF 	 bl BUS_IO_Write
 628:../main.c     **** 	SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2U);
 3239              	 .loc 4 628 0
 3240 0016 07F10C03 	 add r3,r7,#12
 3241 001a 2048     	 ldr r0,.L164+4
 3242 001c 1946     	 mov r1,r3
 3243 001e 0222     	 movs r2,#2
 3244 0020 FFF7FEFF 	 bl SPI_MASTER_Receive
 629:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, 0b111);
 3245              	 .loc 4 629 0
 3246 0024 1C48     	 ldr r0,.L164
 3247 0026 0721     	 movs r1,#7
 3248 0028 FFF7FEFF 	 bl BUS_IO_Write
 630:../main.c     **** 	ReadData[0] = ReadData[0] & 0X1F; 									//cutting away the 3 info bits
 3249              	 .loc 4 630 0
 3250 002c 3B7B     	 ldrb r3,[r7,#12]
 3251 002e 03F01F03 	 and r3,r3,#31
 3252 0032 DBB2     	 uxtb r3,r3
 3253 0034 3B73     	 strb r3,[r7,#12]
 631:../main.c     **** 	uint16_t iCurrent = ReadData[0]<<8 | ReadData[1];					//combine Data
 3254              	 .loc 4 631 0
 3255 0036 3B7B     	 ldrb r3,[r7,#12]
 3256 0038 1B02     	 lsls r3,r3,#8
 3257 003a 9AB2     	 uxth r2,r3
 3258 003c 7B7B     	 ldrb r3,[r7,#13]
 3259 003e 9BB2     	 uxth r3,r3
 3260 0040 1343     	 orrs r3,r3,r2
 3261 0042 9BB2     	 uxth r3,r3
 3262 0044 FB82     	 strh r3,[r7,#22]
 632:../main.c     **** 
 633:../main.c     **** 	// calculation of the current
 634:../main.c     **** 	float fCurrent = ((float)iCurrent - 4096.0)/160.0;					// ATTENTION: value has to be divided by 16
 3263              	 .loc 4 634 0
 3264 0046 FB8A     	 ldrh r3,[r7,#22]
 3265 0048 07EE903A 	 fmsr s15,r3
 3266 004c F8EE677A 	 fuitos s15,s15
 3267 0050 17EE900A 	 fmrs r0,s15
 3268 0054 FFF7FEFF 	 bl __aeabi_f2d
 3269 0058 0246     	 mov r2,r0
 3270 005a 0B46     	 mov r3,r1
 3271 005c 1046     	 mov r0,r2
 3272 005e 1946     	 mov r1,r3
 3273 0060 4FF00002 	 mov r2,#0
 3274 0064 0E4B     	 ldr r3,.L164+8
 3275 0066 FFF7FEFF 	 bl __aeabi_dsub
 3276 006a 0246     	 mov r2,r0
 3277 006c 0B46     	 mov r3,r1
 3278 006e 1046     	 mov r0,r2
 3279 0070 1946     	 mov r1,r3
 3280 0072 4FF00002 	 mov r2,#0
 3281 0076 0B4B     	 ldr r3,.L164+12
 3282 0078 FFF7FEFF 	 bl __aeabi_ddiv
 3283 007c 0246     	 mov r2,r0
 3284 007e 0B46     	 mov r3,r1
 3285 0080 1046     	 mov r0,r2
 3286 0082 1946     	 mov r1,r3
 3287 0084 FFF7FEFF 	 bl __aeabi_d2f
 3288 0088 0346     	 mov r3,r0
 3289 008a 3B61     	 str r3,[r7,#16]
 635:../main.c     **** 
 636:../main.c     **** 	return fCurrent;
 3290              	 .loc 4 636 0
 3291 008c 3B69     	 ldr r3,[r7,#16]
 637:../main.c     **** }
 3292              	 .loc 4 637 0
 3293 008e 1846     	 mov r0,r3
 3294 0090 1837     	 adds r7,r7,#24
 3295              	.LCFI101:
 3296              	 .cfi_def_cfa_offset 8
 3297 0092 BD46     	 mov sp,r7
 3298              	.LCFI102:
 3299              	 .cfi_def_cfa_register 13
 3300              	 
 3301 0094 80BD     	 pop {r7,pc}
 3302              	.L165:
 3303 0096 00BF     	 .align 2
 3304              	.L164:
 3305 0098 00000000 	 .word SPI_ChipSelect
 3306 009c 00000000 	 .word SPI_MASTER_0
 3307 00a0 0000B040 	 .word 1085276160
 3308 00a4 00006440 	 .word 1080295424
 3309              	 .cfi_endproc
 3310              	.LFE567:
 3312              	 .text
 3313              	.Letext0:
 3314              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3315              	 .file 6 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3316              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3317              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 3318              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_scu.h"
 3319              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 3320              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_spi.h"
 3321              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master.h"
 3322              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io.h"
 3323              	 .file 14 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_eru.h"
 3324              	 .file 15 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_ccu8.h"
 3325              	 .file 16 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 3326              	 .file 17 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm.h"
 3327              	 .file 18 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 3328              	 .file 19 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 3329              	 .file 20 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 3330              	 .file 21 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_vadc.h"
 3331              	 .file 22 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_ADC/global_adc.h"
 3332              	 .file 23 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/ADC_MEASUREMENT/adc_measurement.h"
 3333              	 .file 24 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DAVE.h"
 3334              	 .file 25 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 3335              	 .file 26 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 3336              	 .file 27 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 3337              	 .file 28 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master_extern.h"
 3338              	 .file 29 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io_extern.h"
 3339              	 .file 30 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt_extern.h"
 3340              	 .file 31 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 3341              	 .file 32 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
 3342              	 .file 33 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/ADC_MEASUREMENT/adc_measurement_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:163    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:167    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:207    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:211    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:250    .text.PIN_INTERRUPT_GetPinValue:00000000 $t
    {standard input}:254    .text.PIN_INTERRUPT_GetPinValue:00000000 PIN_INTERRUPT_GetPinValue
    {standard input}:299    .data.Torque_control:00000000 Torque_control
    {standard input}:305    .data.Speed_control:00000000 Speed_control
    {standard input}:311    .bss.CAN_control:00000000 CAN_control
    {standard input}:312    .bss.CAN_control:00000000 $d
                            *COM*:00000004 Current_U
                            *COM*:00000004 Current_V
                            *COM*:00000004 Current_W
    {standard input}:321    .data.lookup_table:00000000 lookup_table
    {standard input}:318    .data.lookup_table:00000000 $d
    {standard input}:390    .bss.sector:00000000 sector
    {standard input}:391    .bss.sector:00000000 $d
    {standard input}:396    .bss.direction:00000000 direction
    {standard input}:397    .bss.direction:00000000 $d
    {standard input}:403    .bss.enc_val:00000000 enc_val
    {standard input}:400    .bss.enc_val:00000000 $d
    {standard input}:410    .bss.time_since_A:00000000 time_since_A
    {standard input}:407    .bss.time_since_A:00000000 $d
    {standard input}:417    .bss.time_since_B:00000000 time_since_B
    {standard input}:414    .bss.time_since_B:00000000 $d
    {standard input}:424    .bss.time_since_C:00000000 time_since_C
    {standard input}:421    .bss.time_since_C:00000000 $d
    {standard input}:431    .data.time_180deg:00000000 time_180deg
    {standard input}:428    .data.time_180deg:00000000 $d
    {standard input}:438    .data.time_180deg_cal:00000000 time_180deg_cal
    {standard input}:435    .data.time_180deg_cal:00000000 $d
                            *COM*:00000001 last_Hall_trig
    {standard input}:446    .data.angle_in_sector:00000000 angle_in_sector
    {standard input}:443    .data.angle_in_sector:00000000 $d
    {standard input}:453    .bss.angle_phi:00000000 angle_phi
    {standard input}:450    .bss.angle_phi:00000000 $d
                            *COM*:00000004 ialpha
                            *COM*:00000004 ibeta
                            *COM*:00000004 iq
                            *COM*:00000004 id
                            *COM*:00000004 Valpha
                            *COM*:00000004 Vbeta
    {standard input}:466    .bss.omega_ele_rads:00000000 omega_ele_rads
    {standard input}:463    .bss.omega_ele_rads:00000000 $d
    {standard input}:473    .bss.omega_mech_rps:00000000 omega_mech_rps
    {standard input}:470    .bss.omega_mech_rps:00000000 $d
    {standard input}:480    .bss.omega_mech_rps_temp:00000000 omega_mech_rps_temp
    {standard input}:477    .bss.omega_mech_rps_temp:00000000 $d
    {standard input}:487    .bss.omega_ele_degs:00000000 omega_ele_degs
    {standard input}:484    .bss.omega_ele_degs:00000000 $d
    {standard input}:494    .bss.speed_ref:00000000 speed_ref
    {standard input}:491    .bss.speed_ref:00000000 $d
    {standard input}:501    .bss.omega_ele_rads_ref:00000000 omega_ele_rads_ref
    {standard input}:498    .bss.omega_ele_rads_ref:00000000 $d
    {standard input}:508    .bss.iq_ref:00000000 iq_ref
    {standard input}:505    .bss.iq_ref:00000000 $d
    {standard input}:515    .bss.T_ref:00000000 T_ref
    {standard input}:512    .bss.T_ref:00000000 $d
    {standard input}:522    .bss.Vd:00000000 Vd
    {standard input}:519    .bss.Vd:00000000 $d
    {standard input}:529    .bss.Vq:00000000 Vq
    {standard input}:526    .bss.Vq:00000000 $d
    {standard input}:536    .bss.omega_mech_rps_ref:00000000 omega_mech_rps_ref
    {standard input}:533    .bss.omega_mech_rps_ref:00000000 $d
                            *COM*:00000008 Speeds_int16_r
    {standard input}:544    .bss.CAN_speed_ref:00000000 CAN_speed_ref
    {standard input}:541    .bss.CAN_speed_ref:00000000 $d
    {standard input}:550    .bss.CAN_new_meassage:00000000 CAN_new_meassage
    {standard input}:551    .bss.CAN_new_meassage:00000000 $d
    {standard input}:556    .bss.CAN_no_com_counter:00000000 CAN_no_com_counter
    {standard input}:557    .bss.CAN_no_com_counter:00000000 $d
    {standard input}:563    .bss.distance_180deg_ele_count:00000000 distance_180deg_ele_count
    {standard input}:560    .bss.distance_180deg_ele_count:00000000 $d
    {standard input}:570    .bss.Speed_act:00000000 Speed_act
    {standard input}:567    .bss.Speed_act:00000000 $d
    {standard input}:577    .bss.distance:00000000 distance
    {standard input}:574    .bss.distance:00000000 $d
                            *COM*:00000004 modulation_index
                            *COM*:00000004 modulation_index_scaled
                            *COM*:00000004 angle_ab
                            *COM*:00000004 angle_ab_rad
                            *COM*:00000004 amplitude_ab
    {standard input}:589    .data.Ts:00000000 Ts
    {standard input}:586    .data.Ts:00000000 $d
    {standard input}:596    .data.Tcyc:00000000 Tcyc
    {standard input}:593    .data.Tcyc:00000000 $d
    {standard input}:603    .data.scaling_factor:00000000 scaling_factor
    {standard input}:600    .data.scaling_factor:00000000 $d
                            *COM*:00000004 amplitude_corrected
    {standard input}:610    .bss.count:00000000 count
    {standard input}:611    .bss.count:00000000 $d
    {standard input}:617    .data.offset_pos:00000000 offset_pos
    {standard input}:614    .data.offset_pos:00000000 $d
    {standard input}:624    .data.offset_neg:00000000 offset_neg
    {standard input}:621    .data.offset_neg:00000000 $d
    {standard input}:631    .data.Iq_param:00000000 Iq_param
    {standard input}:628    .data.Iq_param:00000000 $d
    {standard input}:646    .data.Id_param:00000000 Id_param
    {standard input}:643    .data.Id_param:00000000 $d
    {standard input}:661    .data.omega_param:00000000 omega_param
    {standard input}:658    .data.omega_param:00000000 $d
    {standard input}:676    .data.T_param_1:00000000 T_param_1
    {standard input}:673    .data.T_param_1:00000000 $d
    {standard input}:690    .bss.falg_speed_not_new:00000000 falg_speed_not_new
    {standard input}:691    .bss.falg_speed_not_new:00000000 $d
    {standard input}:697    .data.setting_time_scalar:00000000 setting_time_scalar
    {standard input}:694    .data.setting_time_scalar:00000000 $d
    {standard input}:704    .bss.step_start:00000000 step_start
    {standard input}:701    .bss.step_start:00000000 $d
    {standard input}:711    .data.step:00000000 step
    {standard input}:708    .data.step:00000000 $d
    {standard input}:717    .bss.start_help_count:00000000 start_help_count
    {standard input}:718    .bss.start_help_count:00000000 $d
    {standard input}:723    .bss.start_hilfe:00000000 start_hilfe
    {standard input}:724    .bss.start_hilfe:00000000 $d
    {standard input}:730    .data.V_DC_link:00000000 V_DC_link
    {standard input}:727    .data.V_DC_link:00000000 $d
    {standard input}:733    .text.main:00000000 $t
    {standard input}:738    .text.main:00000000 main
    {standard input}:1659   .text.Hall_init:00000000 Hall_init
    {standard input}:1937   .text.Calculation:00000000 Calculation
    {standard input}:820    .text.main:0000006c $d
    {standard input}:834    .text.CAN0_1_IRQHandler:00000000 $t
    {standard input}:839    .text.CAN0_1_IRQHandler:00000000 CAN0_1_IRQHandler
    {standard input}:979    .text.CAN0_1_IRQHandler:000000e8 $d
    {standard input}:989    .text.CAN0_0_IRQHandler:00000000 $t
    {standard input}:994    .text.CAN0_0_IRQHandler:00000000 CAN0_0_IRQHandler
    {standard input}:1067   .text.CAN0_0_IRQHandler:00000050 $d
    {standard input}:1078   .text.CCU43_0_IRQHandler:00000000 $t
    {standard input}:1083   .text.CCU43_0_IRQHandler:00000000 CCU43_0_IRQHandler
    {standard input}:1238   .text.CCU43_0_IRQHandler:00000140 $d
    {standard input}:1256   .text.VADC0_C0_2_IRQHandler:00000000 $t
    {standard input}:1261   .text.VADC0_C0_2_IRQHandler:00000000 VADC0_C0_2_IRQHandler
    {standard input}:1313   .text.VADC0_C0_2_IRQHandler:00000040 $d
    {standard input}:1321   .text.CCU43_3_IRQHandler:00000000 $t
    {standard input}:1326   .text.CCU43_3_IRQHandler:00000000 CCU43_3_IRQHandler
    {standard input}:1371   .text.CCU43_3_IRQHandler:0000002c $d
    {standard input}:1378   .text.ERU1_2_IRQHandler:00000000 $t
    {standard input}:1383   .text.ERU1_2_IRQHandler:00000000 ERU1_2_IRQHandler
    {standard input}:1782   .text.HallSensor:00000000 HallSensor
    {standard input}:1446   .text.ERU1_2_IRQHandler:00000050 $d
    {standard input}:1455   .text.ERU1_0_IRQHandler:00000000 $t
    {standard input}:1460   .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
    {standard input}:1494   .text.ERU1_0_IRQHandler:00000020 $d
    {standard input}:1501   .text.ERU1_3_IRQHandler:00000000 $t
    {standard input}:1506   .text.ERU1_3_IRQHandler:00000000 ERU1_3_IRQHandler
    {standard input}:1540   .text.ERU1_3_IRQHandler:00000020 $d
    {standard input}:1547   .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:1552   .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:1580   .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:1585   .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:1646   .text.CCU80_3_IRQHandler:00000058 $d
    {standard input}:1654   .text.Hall_init:00000000 $t
    {standard input}:1769   .text.Hall_init:0000008c $d
    {standard input}:1777   .text.HallSensor:00000000 $t
    {standard input}:1919   .text.HallSensor:000000c0 $d
    {standard input}:1932   .text.Calculation:00000000 $t
    {standard input}:2292   .text.Calculation:000002dc $d
    {standard input}:2321   .text.Calculation:00000348 $t
    {standard input}:3214   .text.readCurrent:00000000 readCurrent
    {standard input}:2570   .text.Calculation:000005b0 $d
    {standard input}:2596   .text.Calculation:00000610 $t
    {standard input}:3104   .text.PID_Controller:00000000 PID_Controller
    {standard input}:2755   .text.Calculation:00000768 $d
    {standard input}:2771   .text.Calculation:000007a0 $t
    {standard input}:3062   .text.Calculation:00000a40 $d
    {standard input}:3099   .text.PID_Controller:00000000 $t
    {standard input}:3204   .text.PID_Controller:000000bc $d
    {standard input}:3209   .text.readCurrent:00000000 $t
    {standard input}:3305   .text.readCurrent:00000098 $d
                     .debug_frame:00000010 $d
    {standard input}:1255   .text.CCU43_0_IRQHandler:00000174 $t
    {standard input}:3098   .text.Calculation:00000ac4 $t

UNDEFINED SYMBOLS
DAVE_Init
CAN_NODE_Init
PWM_SVM_Start
f_rec_data
ADC_MEASUREMENT_StartConversion
CAN_NODE_0
PWM_SVM_0
ADC_MEASUREMENT_0
CAN_NODE_MO_Receive
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_dadd
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
__aeabi_ui2d
ADC_MEASUREMENT_GetResult
ADC_MEASUREMENT_Channel_A_handle
PWM_SVM_SVMUpdate
Hall_A_ISR
Hall_B_ISR
Hall_C_ISR
__aeabi_i2d
__aeabi_dsub
status_LED_red_cal_time
cosf
sinf
atanf
sqrtf
BUS_IO_Write
SPI_MASTER_Receive
SPI_ChipSelect
SPI_MASTER_0
