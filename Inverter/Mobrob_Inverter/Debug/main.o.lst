   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB137:
  26              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE137:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB138:
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE138:
 114 0022 00BF     	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_GetInput:
 120              	.LFB140:
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 334 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 139              	 .loc 1 337 0
 140 000c 7B68     	 ldr r3,[r7,#4]
 141 000e 5A6A     	 ldr r2,[r3,#36]
 142 0010 FB78     	 ldrb r3,[r7,#3]
 143 0012 22FA03F3 	 lsr r3,r2,r3
 144 0016 03F00103 	 and r3,r3,#1
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 338 0
 146 001a 1846     	 mov r0,r3
 147 001c 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 001e BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0020 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0024 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE140:
 162 0026 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	DIGITAL_IO_SetOutputHigh:
 168              	.LFB145:
 169              	 .file 2 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 170              	 .loc 2 269 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 80B5     	 push {r7,lr}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 7,-8
 178              	 .cfi_offset 14,-4
 179 0002 82B0     	 sub sp,sp,#8
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 185 0006 7860     	 str r0,[r7,#4]
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 186              	 .loc 2 271 0
 187 0008 7B68     	 ldr r3,[r7,#4]
 188 000a 1A68     	 ldr r2,[r3]
 189 000c 7B68     	 ldr r3,[r7,#4]
 190 000e 1B7C     	 ldrb r3,[r3,#16]
 191 0010 1046     	 mov r0,r2
 192 0012 1946     	 mov r1,r3
 193 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 194              	 .loc 2 272 0
 195 0018 0837     	 adds r7,r7,#8
 196              	.LCFI21:
 197              	 .cfi_def_cfa_offset 8
 198 001a BD46     	 mov sp,r7
 199              	.LCFI22:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 001c 80BD     	 pop {r7,pc}
 203              	 .cfi_endproc
 204              	.LFE145:
 206 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	DIGITAL_IO_SetOutputLow:
 212              	.LFB146:
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 213              	 .loc 2 316 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217 0000 80B5     	 push {r7,lr}
 218              	.LCFI23:
 219              	 .cfi_def_cfa_offset 8
 220              	 .cfi_offset 7,-8
 221              	 .cfi_offset 14,-4
 222 0002 82B0     	 sub sp,sp,#8
 223              	.LCFI24:
 224              	 .cfi_def_cfa_offset 16
 225 0004 00AF     	 add r7,sp,#0
 226              	.LCFI25:
 227              	 .cfi_def_cfa_register 7
 228 0006 7860     	 str r0,[r7,#4]
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 229              	 .loc 2 318 0
 230 0008 7B68     	 ldr r3,[r7,#4]
 231 000a 1A68     	 ldr r2,[r3]
 232 000c 7B68     	 ldr r3,[r7,#4]
 233 000e 1B7C     	 ldrb r3,[r3,#16]
 234 0010 1046     	 mov r0,r2
 235 0012 1946     	 mov r1,r3
 236 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 237              	 .loc 2 319 0
 238 0018 0837     	 adds r7,r7,#8
 239              	.LCFI26:
 240              	 .cfi_def_cfa_offset 8
 241 001a BD46     	 mov sp,r7
 242              	.LCFI27:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 001c 80BD     	 pop {r7,pc}
 246              	 .cfi_endproc
 247              	.LFE146:
 249 001e 00BF     	 .section .text.PIN_INTERRUPT_GetPinValue,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	PIN_INTERRUPT_GetPinValue:
 255              	.LFB308:
 256              	 .file 3 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @file pin_interrupt.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @date 2016-03-02
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * NOTE:
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @cond
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT v4.0.2 - The PIN_INTERRUPT APP invokes user interrupt handler in a response to ris
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                        edge event signal on a pin.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Copyright (c) 2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * All rights reserved.                        
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * following conditions are met:   
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer.                        
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.     
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                         
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   products derived from this software without specific prior written permission. 
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * with Infineon Technologies AG (dave@infineon.com).         
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 2015-12-03:
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     - Initial version for DAVEv4. <BR>
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcond 
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifndef PIN_INTERRUPT_H
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #define PIN_INTERRUPT_H
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * HEADER FILES                                                                                    
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_scu.h>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_gpio.h>
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_eru.h>
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <DAVE_Common.h>
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include "pin_interrupt_conf.h"
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * MACROS                                                                                          
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_MINOR_VERSION >= 1U) && \
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_PATCH_VERSION >= 6U)))
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #error "PIN_INTERRUPT requires XMC Peripheral Library v2.1.6 or higher"
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup App_publicparam
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  @brief Initialization data structure for PIN_INTERRUPT APP
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ENUMS
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /*
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief enumeration for PIN_INTERRUPT APP
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_STATUS
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_SUCCESS = 0U,        /**<APP initialization is success */
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_FAILURE = 1U         /**<APP initialization is failure */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_STATUS_t;
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Defines trigger edge for the event generation by ETLx (Event Trigger Logic, x = [0 to 3]) unit, 
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * from ERSx(Event request source, x = [0 to 3]) unit.
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_EDGE
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_NONE = 0U, /**< no event enabled */
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_RISING = 1U,   /**< detection of rising edge generates the event */
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_FALLING = 2U,  /**< detection of falling edge generates the event */
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_BOTH = 3U      /**< detection of either edges generates the event */
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_EDGE_t;
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * DATA STRUCTURES
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** ***************************************************************************************************
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_datastructures
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Configuration structure for PIN_INTERRUPT APP
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef struct PIN_INTERRUPT
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_t *eru;  /**< Mapped ERU module */
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_PORT_t *port;  /**< Mapped port number */
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_CONFIG_t gpio_config;   /**< Initializes the input pin characteristics */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_ETL_CONFIG_t etl_config;  /**< reference to ERUx_ETLy (x = [0..1], y = [0..4])
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****                                                       module configuration */
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_SCU_IRQCTRL_t irqctrl;  /**< selects the interrupt source for a NVIC interrupt node*/
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   IRQn_Type IRQn;       /**< Mapped NVIC Node */
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_priority; 	  /**< Node Interrupt Priority */
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_FAMILY == XMC4)
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_subpriority;  /**< Node Interrupt SubPriority only valid for XMC4x */
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t etl; /*< ETLx channel (x = [0..3])*/
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t ogu; /*< OGUy channel (y = [0..3])*/
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t pin; /*< Mapped pin number */
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   bool enable_at_init;  /**< Interrupt enable for Node at initialization*/
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_t;
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifdef __cplusplus
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** extern "C" {
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * API Prototypes
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_apidoc
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Get PIN_INTERRUPT APP version
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description: </b><br>
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * The function can be used to check application software compatibility with a
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * specific version of the APP.
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void) {
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t init_status;
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_APP_VERSION_t version;
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // Initialize PIN_INTERRUPT APP:
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // PIN_INTERRUPT_Init() is called from within DAVE_Init().
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   init_status = DAVE_Init();
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if (DAVE_STATUS_SUCCESS == init_status)
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     version = PIN_INTERRUPT_GetAppVersion();
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     if (version.major != 4U) {
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *       // Probably, not the right version.
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     // More code here
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** DAVE_APP_VERSION_t PIN_INTERRUPT_GetAppVersion(void);
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Initializes a PIN_INTERRUPT APP instance
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_SUCCESS             : if initialization is successful\n
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_FAILURE             : if initialization is failed
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description:</b><br>
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT_Init API is called during initialization of DAVE APPS. This API Initializes input 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ERU and OGU hardware module initialization, Configures NVIC node and its priority in order to ge
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void)
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * {
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t status;
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle);
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Enables the IRQ.
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_EnableIRQ(handle->IRQn);
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Disables the IRQ.
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Disable(&PIN_INTERRUPT_0);
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Disable(const PIN_INTERRUPT_t *const handle)
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Disable: Handler null pointer", handle != NULL);
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_DisableIRQ(handle->IRQn);
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @brief Read input level of port pin.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @return uint32_t input logic level. Range:0-1
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * \par<b>Description:</b><br>
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * This function reads the Pn_IN register and returns the current logical value at the GPIO pin.
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * Example Usage:
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @code
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * int main(void)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * {
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   DAVE_STATUS_t status;
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   uint32_t pin_status;
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   status = DAVE_Init();   // (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0) is called within
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   if(status == DAVE_STATUS_SUCCESS)
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   else
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     while(1U)
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   while(1U)
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     pin_status = PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_0);
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     if(pin_status == 1)
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 339:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     else
 340:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 341:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 342:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 343:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 344:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   return (1);
 345:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * }
 346:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *  @endcode
 347:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** */
 348:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
 349:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 257              	 .loc 3 349 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI28:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI29:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI30:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
 350:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
 351:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   return (XMC_GPIO_GetInput(handle->port, handle->pin));
 273              	 .loc 3 351 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 5A68     	 ldr r2,[r3,#4]
 276 000c 7B68     	 ldr r3,[r7,#4]
 277 000e 93F82130 	 ldrb r3,[r3,#33]
 278 0012 1046     	 mov r0,r2
 279 0014 1946     	 mov r1,r3
 280 0016 FFF7FEFF 	 bl XMC_GPIO_GetInput
 281 001a 0346     	 mov r3,r0
 352:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 282              	 .loc 3 352 0
 283 001c 1846     	 mov r0,r3
 284 001e 0837     	 adds r7,r7,#8
 285              	.LCFI31:
 286              	 .cfi_def_cfa_offset 8
 287 0020 BD46     	 mov sp,r7
 288              	.LCFI32:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 0022 80BD     	 pop {r7,pc}
 292              	 .cfi_endproc
 293              	.LFE308:
 295              	 .global Torque_control
 296              	 .section .data.Torque_control,"aw",%progbits
 299              	Torque_control:
 300 0000 01       	 .byte 1
 301              	 .global Speed_control
 302              	 .section .bss.Speed_control,"aw",%nobits
 305              	Speed_control:
 306 0000 00       	 .space 1
 307              	 .global CAN_control
 308              	 .section .bss.CAN_control,"aw",%nobits
 311              	CAN_control:
 312 0000 00       	 .space 1
 313              	 .comm Current_U,4,4
 314              	 .comm Current_V,4,4
 315              	 .comm Current_W,4,4
 316              	 .global lookup_table
 317              	 .section .data.lookup_table,"aw",%progbits
 318              	 .align 2
 321              	lookup_table:
 322 0000 00       	 .byte 0
 323 0001 00       	 .byte 0
 324 0002 00       	 .byte 0
 325 0003 00       	 .byte 0
 326 0004 00       	 .byte 0
 327 0005 00       	 .byte 0
 328 0006 00       	 .byte 0
 329 0007 00       	 .byte 0
 330 0008 00       	 .byte 0
 331 0009 00       	 .byte 0
 332 000a 00       	 .byte 0
 333 000b FF       	 .byte -1
 334 000c 00       	 .byte 0
 335 000d 01       	 .byte 1
 336 000e 00       	 .byte 0
 337 000f 00       	 .byte 0
 338 0010 00       	 .byte 0
 339 0011 00       	 .byte 0
 340 0012 00       	 .byte 0
 341 0013 01       	 .byte 1
 342 0014 00       	 .byte 0
 343 0015 00       	 .byte 0
 344 0016 FF       	 .byte -1
 345 0017 00       	 .byte 0
 346 0018 00       	 .byte 0
 347 0019 01       	 .byte 1
 348 001a FF       	 .byte -1
 349 001b 00       	 .byte 0
 350 001c 00       	 .byte 0
 351 001d 00       	 .byte 0
 352 001e 00       	 .byte 0
 353 001f 00       	 .byte 0
 354 0020 00       	 .byte 0
 355 0021 00       	 .byte 0
 356 0022 00       	 .byte 0
 357 0023 00       	 .byte 0
 358 0024 00       	 .byte 0
 359 0025 FF       	 .byte -1
 360 0026 01       	 .byte 1
 361 0027 00       	 .byte 0
 362 0028 00       	 .byte 0
 363 0029 FF       	 .byte -1
 364 002a 00       	 .byte 0
 365 002b 00       	 .byte 0
 366 002c 01       	 .byte 1
 367 002d 00       	 .byte 0
 368 002e 00       	 .byte 0
 369 002f 00       	 .byte 0
 370 0030 00       	 .byte 0
 371 0031 00       	 .byte 0
 372 0032 01       	 .byte 1
 373 0033 00       	 .byte 0
 374 0034 FF       	 .byte -1
 375 0035 00       	 .byte 0
 376 0036 00       	 .byte 0
 377 0037 00       	 .byte 0
 378 0038 00       	 .byte 0
 379 0039 00       	 .byte 0
 380 003a 00       	 .byte 0
 381 003b 00       	 .byte 0
 382 003c 00       	 .byte 0
 383 003d 00       	 .byte 0
 384 003e 00       	 .byte 0
 385 003f 00       	 .byte 0
 386              	 .global sector
 387              	 .section .bss.sector,"aw",%nobits
 390              	sector:
 391 0000 00       	 .space 1
 392              	 .global direction
 393              	 .section .bss.direction,"aw",%nobits
 396              	direction:
 397 0000 00       	 .space 1
 398              	 .global enc_val
 399              	 .section .bss.enc_val,"aw",%nobits
 400              	 .align 1
 403              	enc_val:
 404 0000 0000     	 .space 2
 405              	 .global time_since_A
 406              	 .section .bss.time_since_A,"aw",%nobits
 407              	 .align 2
 410              	time_since_A:
 411 0000 00000000 	 .space 4
 412              	 .global time_since_B
 413              	 .section .bss.time_since_B,"aw",%nobits
 414              	 .align 2
 417              	time_since_B:
 418 0000 00000000 	 .space 4
 419              	 .global time_since_C
 420              	 .section .bss.time_since_C,"aw",%nobits
 421              	 .align 2
 424              	time_since_C:
 425 0000 00000000 	 .space 4
 426              	 .global time_180deg
 427              	 .section .data.time_180deg,"aw",%progbits
 428              	 .align 2
 431              	time_180deg:
 432 0000 E8030000 	 .word 1000
 433              	 .global time_180deg_cal
 434              	 .section .data.time_180deg_cal,"aw",%progbits
 435              	 .align 2
 438              	time_180deg_cal:
 439 0000 E8030000 	 .word 1000
 440              	 .comm last_Hall_trig,1,1
 441              	 .global angle_in_sector
 442              	 .section .data.angle_in_sector,"aw",%progbits
 443              	 .align 2
 446              	angle_in_sector:
 447 0000 0000F041 	 .word 1106247680
 448              	 .global angle_phi
 449              	 .section .bss.angle_phi,"aw",%nobits
 450              	 .align 2
 453              	angle_phi:
 454 0000 00000000 	 .space 4
 455              	 .comm ialpha,4,4
 456              	 .comm ibeta,4,4
 457              	 .comm iq,4,4
 458              	 .comm id,4,4
 459              	 .comm Valpha,4,4
 460              	 .comm Vbeta,4,4
 461              	 .global omega_ele_rads
 462              	 .section .bss.omega_ele_rads,"aw",%nobits
 463              	 .align 2
 466              	omega_ele_rads:
 467 0000 00000000 	 .space 4
 468              	 .global omega_mech_rps
 469              	 .section .bss.omega_mech_rps,"aw",%nobits
 470              	 .align 2
 473              	omega_mech_rps:
 474 0000 00000000 	 .space 4
 475              	 .global omega_mech_rps_temp
 476              	 .section .bss.omega_mech_rps_temp,"aw",%nobits
 477              	 .align 2
 480              	omega_mech_rps_temp:
 481 0000 00000000 	 .space 4
 482              	 .global omega_ele_degs
 483              	 .section .bss.omega_ele_degs,"aw",%nobits
 484              	 .align 2
 487              	omega_ele_degs:
 488 0000 00000000 	 .space 4
 489              	 .global speed_ref
 490              	 .section .bss.speed_ref,"aw",%nobits
 491              	 .align 2
 494              	speed_ref:
 495 0000 00000000 	 .space 4
 496              	 .global omega_ele_rads_ref
 497              	 .section .bss.omega_ele_rads_ref,"aw",%nobits
 498              	 .align 2
 501              	omega_ele_rads_ref:
 502 0000 00000000 	 .space 4
 503              	 .global iq_ref
 504              	 .section .bss.iq_ref,"aw",%nobits
 505              	 .align 2
 508              	iq_ref:
 509 0000 00000000 	 .space 4
 510              	 .global T_ref
 511              	 .section .bss.T_ref,"aw",%nobits
 512              	 .align 2
 515              	T_ref:
 516 0000 00000000 	 .space 4
 517              	 .global Vd_ref
 518              	 .section .bss.Vd_ref,"aw",%nobits
 519              	 .align 2
 522              	Vd_ref:
 523 0000 00000000 	 .space 4
 524              	 .global Vq_ref
 525              	 .section .bss.Vq_ref,"aw",%nobits
 526              	 .align 2
 529              	Vq_ref:
 530 0000 00000000 	 .space 4
 531              	 .comm Speeds_int16_r,8,4
 532              	 .global CAN_speed_ref
 533              	 .section .bss.CAN_speed_ref,"aw",%nobits
 534              	 .align 2
 537              	CAN_speed_ref:
 538 0000 00000000 	 .space 4
 539              	 .global CAN_new_meassage
 540              	 .section .bss.CAN_new_meassage,"aw",%nobits
 543              	CAN_new_meassage:
 544 0000 00       	 .space 1
 545              	 .global CAN_no_com_counter
 546              	 .section .bss.CAN_no_com_counter,"aw",%nobits
 549              	CAN_no_com_counter:
 550 0000 00       	 .space 1
 551              	 .global distance_180deg_ele_count
 552              	 .section .bss.distance_180deg_ele_count,"aw",%nobits
 553              	 .align 2
 556              	distance_180deg_ele_count:
 557 0000 00000000 	 .space 4
 558              	 .global Speed_act
 559              	 .section .bss.Speed_act,"aw",%nobits
 560              	 .align 2
 563              	Speed_act:
 564 0000 00000000 	 .space 4
 565              	 .global distance
 566              	 .section .bss.distance,"aw",%nobits
 567              	 .align 2
 570              	distance:
 571 0000 00000000 	 .space 4
 572              	 .comm modulation_index,4,4
 573              	 .comm modulation_index_scaled,4,4
 574              	 .comm angle_ab,4,4
 575              	 .comm angle_ab_rad,4,4
 576              	 .comm amplitude_ab,4,4
 577              	 .global Ts
 578              	 .section .data.Ts,"aw",%progbits
 579              	 .align 2
 582              	Ts:
 583 0000 17B75138 	 .word 944879383
 584              	 .global Tcyc
 585              	 .section .data.Tcyc,"aw",%progbits
 586              	 .align 2
 589              	Tcyc:
 590 0000 17B75139 	 .word 961656599
 591              	 .global scaling_factor
 592              	 .section .data.scaling_factor,"aw",%progbits
 593              	 .align 2
 596              	scaling_factor:
 597 0000 00000743 	 .word 1124532224
 598              	 .comm amplitude_corrected,4,4
 599              	 .global count
 600              	 .section .bss.count,"aw",%nobits
 603              	count:
 604 0000 00       	 .space 1
 605              	 .global offset_pos
 606              	 .section .data.offset_pos,"aw",%progbits
 607              	 .align 2
 610              	offset_pos:
 611 0000 0000D8C1 	 .word -1042808832
 612              	 .global offset_neg
 613              	 .section .data.offset_neg,"aw",%progbits
 614              	 .align 2
 617              	offset_neg:
 618 0000 0000A0C1 	 .word -1046478848
 619              	 .global Iq_param
 620              	 .section .data.Iq_param,"aw",%progbits
 621              	 .align 2
 624              	Iq_param:
 625 0000 2AA9133F 	 .word 1058253098
 626 0004 0000D343 	 .word 1137901568
 627 0008 00000000 	 .word 0
 628 000c 0000C842 	 .word 1120403456
 629 0010 0000C8C2 	 .word -1027080192
 630 0014 00000000 	 .word 0
 631 0018 00000000 	 .word 0
 632 001c 00000000 	 .word 0
 633 0020 00000000 	 .space 4
 634              	 .global Id_param
 635              	 .section .data.Id_param,"aw",%progbits
 636              	 .align 2
 639              	Id_param:
 640 0000 2AA9133F 	 .word 1058253098
 641 0004 0000D343 	 .word 1137901568
 642 0008 00000000 	 .word 0
 643 000c 0000C842 	 .word 1120403456
 644 0010 0000C8C2 	 .word -1027080192
 645 0014 00000000 	 .word 0
 646 0018 00000000 	 .word 0
 647 001c 00000000 	 .word 0
 648 0020 00000000 	 .space 4
 649              	 .global T_param
 650              	 .section .data.T_param,"aw",%progbits
 651              	 .align 2
 654              	T_param:
 655 0000 0AD7233C 	 .word 1008981770
 656 0004 0AD7233C 	 .word 1008981770
 657 0008 00000000 	 .word 0
 658 000c 00000040 	 .word 1073741824
 659 0010 000000C0 	 .word -1073741824
 660 0014 00000000 	 .word 0
 661 0018 00000000 	 .word 0
 662 001c 00000000 	 .word 0
 663 0020 00000000 	 .space 4
 664              	 .global T_param_1
 665              	 .section .data.T_param_1,"aw",%progbits
 666              	 .align 2
 669              	T_param_1:
 670 0000 0AD7A33B 	 .word 1000593162
 671 0004 0AD7233C 	 .word 1008981770
 672 0008 00000000 	 .word 0
 673 000c 0000C03F 	 .word 1069547520
 674 0010 0000C0BF 	 .word -1077936128
 675 0014 00000000 	 .word 0
 676 0018 00000000 	 .word 0
 677 001c 00000000 	 .word 0
 678 0020 00000000 	 .space 4
 679              	 .global rec_data_contorl
 680              	 .section .bss.rec_data_contorl,"aw",%nobits
 683              	rec_data_contorl:
 684 0000 00       	 .space 1
 685              	 .global rec_data_index
 686              	 .section .bss.rec_data_index,"aw",%nobits
 687              	 .align 1
 690              	rec_data_index:
 691 0000 0000     	 .space 2
 692              	 .global rec_data
 693              	 .section .bss.rec_data,"aw",%nobits
 694              	 .align 2
 697              	rec_data:
 698 0000 00000000 	 .space 4000
 698      00000000 
 698      00000000 
 698      00000000 
 698      00000000 
 699              	 .global rec_data2
 700              	 .section .bss.rec_data2,"aw",%nobits
 701              	 .align 2
 704              	rec_data2:
 705 0000 00000000 	 .space 4000
 705      00000000 
 705      00000000 
 705      00000000 
 705      00000000 
 706              	 .global test2
 707              	 .section .data.test2,"aw",%progbits
 708              	 .align 2
 711              	test2:
 712 0000 00000000 	 .word 0
 713 0004 0000803F 	 .word 1065353216
 714 0008 00000040 	 .word 1073741824
 715 000c 00004040 	 .word 1077936128
 716 0010 00008040 	 .word 1082130432
 717              	 .global start_rec
 718              	 .section .bss.start_rec,"aw",%nobits
 721              	start_rec:
 722 0000 00       	 .space 1
 723              	 .global start_rec_copunt
 724              	 .section .bss.start_rec_copunt,"aw",%nobits
 725              	 .align 2
 728              	start_rec_copunt:
 729 0000 00000000 	 .space 4
 730              	 .section .text.main,"ax",%progbits
 731              	 .align 2
 732              	 .global main
 733              	 .thumb
 734              	 .thumb_func
 736              	main:
 737              	.LFB473:
 738              	 .file 4 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2020 Jan 02 10:21:43
   5:../main.c     ****  *  Author: Baldo
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** // status: 11.05.2022
   9:../main.c     **** 
  10:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  11:../main.c     **** #include <math.h>
  12:../main.c     **** #include <stdio.h> //for printf
  13:../main.c     **** 
  14:../main.c     **** //#######################
  15:../main.c     **** //FUNCTION DECLARATION
  16:../main.c     **** //########################
  17:../main.c     **** float readCurrent(uint8_t);
  18:../main.c     **** void Hall_init(void);
  19:../main.c     **** void HallSensor(void);
  20:../main.c     **** void Calculation(void);
  21:../main.c     **** 
  22:../main.c     **** //########################
  23:../main.c     **** //VARIABLE DECLARATION
  24:../main.c     **** //########################
  25:../main.c     **** 
  26:../main.c     **** // NEED to be set
  27:../main.c     **** //motor
  28:../main.c     **** #define MOTOR_NUM 1 // for trque dirction motro 1 differtn form rest so far
  29:../main.c     **** #define MOTOR_ON_ROVER 3// 0 front left 1 front right 2 back left 3 back right
  30:../main.c     **** 
  31:../main.c     **** //control type
  32:../main.c     **** uint8_t Torque_control = 1;
  33:../main.c     **** uint8_t Speed_control = 0; //if 0 is torque control if 1 is speed control
  34:../main.c     **** uint8_t CAN_control = 0; // id 1 CAN speed controll aktive
  35:../main.c     **** 
  36:../main.c     **** 
  37:../main.c     **** #define IQ_REF_MAX 5
  38:../main.c     **** #define CAN_NO_COM_TH 250
  39:../main.c     **** #define MAX_Speed_CAN 2
  40:../main.c     **** #define SPEED_LIMIT_CTRL_TO_ZERO 100 //omega_ele rad/s
  41:../main.c     **** #define TIME_OMEGA_0  5000 //time since last hall before omgea set to 0 in 100us
  42:../main.c     **** 
  43:../main.c     **** // Define often used vaules to decrease computational effort
  44:../main.c     **** #define PI 3.14159265
  45:../main.c     **** #define TwoThird 0.66666667
  46:../main.c     **** #define TwoPiThird 2.0943951
  47:../main.c     **** #define FourPiThird 4.1887902
  48:../main.c     **** #define Pi180 0.01745329
  49:../main.c     **** 
  50:../main.c     **** #define ANGLE_ONE_DEGREE (46603U)
  51:../main.c     **** //#define ANGLE_60_DEGREE	 (2796203U)
  52:../main.c     **** //#define ANGLE_180_DEGREE (8388608U)
  53:../main.c     **** 
  54:../main.c     **** //#define ANGLE_LSB (9455) // 2^24 corresponds to 360°. For a timer interrupt delta time of 100us 
  55:../main.c     **** 
  56:../main.c     **** // Define Chip select Pins for Current measurement via SPI Interface
  57:../main.c     **** #define ChipSelect_U 0b110
  58:../main.c     **** #define ChipSelect_V 0b101
  59:../main.c     **** #define ChipSelect_W 0b011
  60:../main.c     **** #define J 0.0023064 //SK J = 1/2 * m_wheel * r_wheel^2 = 1/2*1.2kg*(62mm)^2
  61:../main.c     **** #define K_T 0.21 //SK torque constant in Nm/A
  62:../main.c     **** #define K_inv (15.7/1.732) // K_inv = V / m = V_DC / 2 * 2/sqrt(3) = V_DC/sqrt(3)
  63:../main.c     **** //#define Psi_p 0.0082  60/  (2 * PI) * 1.4142 // Psi_p = K_back_EMF = 0.0082 V / rpm_mech --> 60 t
  64:../main.c     **** //#define Ls 0.00088 // Ls = Lm*1.1 = 0.8mH * 1.1 = 0.00088H
  65:../main.c     **** #define PPZ 11
  66:../main.c     **** #define WHEEL_R 0.0675 //0.135/2 straigt vaule other thing casued problems
  67:../main.c     **** 
  68:../main.c     **** float Current_U;
  69:../main.c     **** float Current_V;
  70:../main.c     **** float Current_W;
  71:../main.c     **** 
  72:../main.c     **** // Declaration of Lookup Table
  73:../main.c     **** int8_t lookup_table[] = {0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,-1,0,0,1,-1,0,0,0,0,0,0,0,0,0
  74:../main.c     **** //access via the index in the  form of the 6 bits (3 previous hall states and 3 actual  hall states
  75:../main.c     **** //for each of the 2^6 possibilities of sequence of hall events  it has been thought about the wavef
  76:../main.c     **** 
  77:../main.c     **** volatile int8_t sector = 0;
  78:../main.c     **** volatile int8_t direction = 0;              // direction +1/-1 -> CW and CCW
  79:../main.c     **** volatile uint16_t enc_val = 0;          // old and new values of all Hall Sensors
  80:../main.c     **** volatile uint32_t time_since_A = 0;	// time between to edges Hall A
  81:../main.c     **** volatile uint32_t time_since_B = 0; // time between to edges Hall B
  82:../main.c     **** volatile uint32_t time_since_C = 0; // time between to edges Hall C
  83:../main.c     **** volatile uint32_t time_180deg = 1000;        // time which last triggered HAL sensor needed for 180
  84:../main.c     **** volatile uint32_t time_180deg_cal = 1000;
  85:../main.c     **** volatile char last_Hall_trig;			//last triggered Hall Sensor A/B/C
  86:../main.c     **** 
  87:../main.c     **** float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60°
  88:../main.c     **** //volatile uint32_t TIME_OMEGA_0 = 50000; // t over this therschold assumed to be zero
  89:../main.c     **** 
  90:../main.c     **** float angle_phi = 0;
  91:../main.c     **** float ialpha,ibeta,iq,id,Valpha,Vbeta;
  92:../main.c     **** 
  93:../main.c     **** volatile float omega_ele_rads = 0; 	// electrical rad / sec //current real velocity calculated from
  94:../main.c     **** volatile float omega_mech_rps = 0;	//SK	//mechanical rounds per second
  95:../main.c     **** volatile float omega_mech_rps_temp = 0; //SK	//since dividing through the incremental (counted up) 
  96:../main.c     **** //volatile float omega_ele_rads_ref = -2*69.11; //1*69.11; //SK		//target velocity electrical in ra
  97:../main.c     **** 
  98:../main.c     **** volatile float omega_ele_degs = 0;
  99:../main.c     **** 
 100:../main.c     **** // REF vaules given to PI controller
 101:../main.c     **** float speed_ref = 0.0; //meters per second
 102:../main.c     **** float omega_ele_rads_ref = 0.0; // electrical rad per second
 103:../main.c     **** float iq_ref = 0.0;
 104:../main.c     **** float T_ref = 0.0;
 105:../main.c     **** float Vd_ref = 0;
 106:../main.c     **** float Vq_ref = 0;
 107:../main.c     **** 
 108:../main.c     **** // CAN vars
 109:../main.c     **** int16_t Speeds_int16_r[4];
 110:../main.c     **** float CAN_speed_ref = 0.0;
 111:../main.c     **** uint8_t CAN_new_meassage = 0; // if 1 recived can data
 112:../main.c     **** uint8_t CAN_no_com_counter = 0;
 113:../main.c     **** // distacne vaule back over can
 114:../main.c     **** int distance_180deg_ele_count = 0;
 115:../main.c     **** float Speed_act = 0;
 116:../main.c     **** float distance = 0;
 117:../main.c     **** 
 118:../main.c     **** volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
 119:../main.c     **** volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which 
 120:../main.c     **** 
 121:../main.c     **** float angle_ab;
 122:../main.c     **** float angle_ab_rad;
 123:../main.c     **** float amplitude_ab;
 124:../main.c     **** 
 125:../main.c     **** float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
 126:../main.c     **** float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I
 127:../main.c     **** 
 128:../main.c     **** //float amp_limit_SVM_app = 2500;  Bo
 129:../main.c     **** 
 130:../main.c     **** // scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
 131:../main.c     **** float scaling_factor = 135;
 132:../main.c     **** float amplitude_corrected;
 133:../main.c     **** 
 134:../main.c     **** 
 135:../main.c     **** // Counter for calculation function -> only use a multiple of the SVM Interrupt
 136:../main.c     **** volatile uint8_t count = 0;
 137:../main.c     **** 
 138:../main.c     **** // Angle correction factor to align Current to Hall Sensor vuales form 14/04
 139:../main.c     **** float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
 140:../main.c     **** float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction
 141:../main.c     **** 
 142:../main.c     **** //################ PI
 143:../main.c     **** // PID Controller declaration for Id and Iq component
 144:../main.c     **** typedef struct{
 145:../main.c     **** 	float P,I,D;
 146:../main.c     **** 	float MaxLimit, MinLimit;
 147:../main.c     **** 	float Output;
 148:../main.c     **** 	float Deviation_old, Deviation_old2;
 149:../main.c     **** 	float Output_z;
 150:../main.c     **** }PID_param;
 151:../main.c     **** 
 152:../main.c     **** //Vuales 14/04 mit maurzio
 153:../main.c     **** //PID_param omegaq = {.P = 0.004, .I = 0.004, .D = 0.0, .MaxLimit =  0.5, .MinLimit = -0.5, .Output
 154:../main.c     **** //PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 155:../main.c     **** //PID_param Id_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 156:../main.c     **** 
 157:../main.c     **** PID_param Iq_param = {.P = 0.5768, .I = 422.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Outpu
 158:../main.c     **** PID_param Id_param = {.P = 0.5768, .I = 422.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Outpu
 159:../main.c     **** PID_param T_param = {.P = 0.01, .I = 0.01, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Output = 0.0,
 160:../main.c     **** 
 161:../main.c     **** // for motro 1
 162:../main.c     **** PID_param T_param_1 = {.P = 0.005, .I = 0.01, .D = 0.0, .MaxLimit =  1.5, .MinLimit = -1.5, .Output
 163:../main.c     **** 
 164:../main.c     **** float PID_Controller(float,float,PID_param *param);
 165:../main.c     **** 
 166:../main.c     **** 
 167:../main.c     **** void f_rec_data(float data_point_var1, float data_point_var2, float start_step_from, float step_to)
 168:../main.c     **** //data rec
 169:../main.c     **** uint8_t rec_data_contorl = 0;// 0 noiting 1 record
 170:../main.c     **** #define REC_DATA_NUM_POINTS 1000
 171:../main.c     **** #define NUM_VARS_REC 2
 172:../main.c     **** uint16_t rec_data_index = 0;
 173:../main.c     **** float rec_data[REC_DATA_NUM_POINTS] = {0};
 174:../main.c     **** float rec_data2[REC_DATA_NUM_POINTS] = {0};
 175:../main.c     **** 
 176:../main.c     **** float test2[5] = { 0,1,2,3,4};
 177:../main.c     **** 
 178:../main.c     **** uint8_t start_rec = 0;
 179:../main.c     **** uint32_t start_rec_copunt = 0;
 180:../main.c     **** 
 181:../main.c     **** //########################
 182:../main.c     **** // MAIN
 183:../main.c     **** //########################
 184:../main.c     **** 
 185:../main.c     **** int main(void)
 186:../main.c     **** {
 739              	 .loc 4 186 0
 740              	 .cfi_startproc
 741              	 
 742              	 
 743 0000 80B5     	 push {r7,lr}
 744              	.LCFI33:
 745              	 .cfi_def_cfa_offset 8
 746              	 .cfi_offset 7,-8
 747              	 .cfi_offset 14,-4
 748 0002 82B0     	 sub sp,sp,#8
 749              	.LCFI34:
 750              	 .cfi_def_cfa_offset 16
 751 0004 00AF     	 add r7,sp,#0
 752              	.LCFI35:
 753              	 .cfi_def_cfa_register 7
 187:../main.c     ****   DAVE_STATUS_t status;
 188:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 754              	 .loc 4 188 0
 755 0006 FFF7FEFF 	 bl DAVE_Init
 756 000a 0346     	 mov r3,r0
 757 000c FB71     	 strb r3,[r7,#7]
 189:../main.c     **** 
 190:../main.c     ****   Hall_init();
 758              	 .loc 4 190 0
 759 000e FFF7FEFF 	 bl Hall_init
 191:../main.c     **** 
 192:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 760              	 .loc 4 192 0
 761 0012 FB79     	 ldrb r3,[r7,#7]
 762 0014 002B     	 cmp r3,#0
 763 0016 00D0     	 beq .L10
 764              	.L11:
 193:../main.c     ****   {
 194:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 195:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 196:../main.c     **** 
 197:../main.c     ****     while(1U)
 198:../main.c     ****     {
 199:../main.c     **** 
 200:../main.c     ****     }
 765              	 .loc 4 200 0 discriminator 1
 766 0018 FEE7     	 b .L11
 767              	.L10:
 201:../main.c     ****   }
 202:../main.c     **** 
 203:../main.c     ****   //Initialization of CAN
 204:../main.c     ****   	CAN_NODE_STATUS_t init_status;
 205:../main.c     ****   	init_status = CAN_NODE_Init(&CAN_NODE_0);
 768              	 .loc 4 205 0
 769 001a 0F48     	 ldr r0,.L14
 770 001c FFF7FEFF 	 bl CAN_NODE_Init
 771 0020 0346     	 mov r3,r0
 772 0022 BB71     	 strb r3,[r7,#6]
 206:../main.c     **** 
 207:../main.c     ****   	if (init_status != CAN_NODE_STATUS_SUCCESS) {
 208:../main.c     ****   		XMC_DEBUG("CAN initialization failed\n");
 209:../main.c     ****   	}
 210:../main.c     **** 
 211:../main.c     ****   if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
 212:../main.c     **** 	  while(1U)
 213:../main.c     **** 	      {
 214:../main.c     **** 		//  printf("MOTOR_ON_ROVER number false");
 215:../main.c     **** 	      }
 216:../main.c     ****   }
 217:../main.c     **** 
 218:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 219:../main.c     ****   while(1U)
 220:../main.c     ****   {
 221:../main.c     **** 	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 773              	 .loc 4 221 0
 774 0024 0D48     	 ldr r0,.L14+4
 775 0026 FFF7FEFF 	 bl PWM_SVM_Start
 776              	.L13:
 222:../main.c     **** 		  while(1U)
 223:../main.c     **** 		    {
 224:../main.c     **** 			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 777              	 .loc 4 224 0
 778 002a 0D4B     	 ldr r3,.L14+8
 779 002c 1B78     	 ldrb r3,[r3]
 780 002e DBB2     	 uxtb r3,r3
 781 0030 032B     	 cmp r3,#3
 782 0032 10D9     	 bls .L12
 225:../main.c     **** 			  {
 226:../main.c     **** 				  count=0;
 783              	 .loc 4 226 0
 784 0034 0A4B     	 ldr r3,.L14+8
 785 0036 0022     	 movs r2,#0
 786 0038 1A70     	 strb r2,[r3]
 227:../main.c     **** 				  Calculation();
 787              	 .loc 4 227 0
 788 003a FFF7FEFF 	 bl Calculation
 228:../main.c     **** 
 229:../main.c     **** 				  f_rec_data(iq,Vq_ref,2,4);
 789              	 .loc 4 229 0
 790 003e 094B     	 ldr r3,.L14+12
 791 0040 1A68     	 ldr r2,[r3]
 792 0042 094B     	 ldr r3,.L14+16
 793 0044 1B68     	 ldr r3,[r3]
 794 0046 1046     	 mov r0,r2
 795 0048 1946     	 mov r1,r3
 796 004a 4FF08042 	 mov r2,#1073741824
 797 004e 4FF08143 	 mov r3,#1082130432
 798 0052 FFF7FEFF 	 bl f_rec_data
 799              	.L12:
 230:../main.c     **** 			  }
 231:../main.c     **** 		    }
 800              	 .loc 4 231 0
 801 0056 E8E7     	 b .L13
 802              	.L15:
 803              	 .align 2
 804              	.L14:
 805 0058 00000000 	 .word CAN_NODE_0
 806 005c 00000000 	 .word PWM_SVM_0
 807 0060 00000000 	 .word count
 808 0064 00000000 	 .word iq
 809 0068 00000000 	 .word Vq_ref
 810              	 .cfi_endproc
 811              	.LFE473:
 813              	 .section .text.CAN0_1_IRQHandler,"ax",%progbits
 814              	 .align 2
 815              	 .global CAN0_1_IRQHandler
 816              	 .thumb
 817              	 .thumb_func
 819              	CAN0_1_IRQHandler:
 820              	.LFB474:
 232:../main.c     ****   }
 233:../main.c     **** }
 234:../main.c     **** 
 235:../main.c     **** 
 236:../main.c     **** //########################
 237:../main.c     **** // INTERRUPTS
 238:../main.c     **** //########################
 239:../main.c     **** 
 240:../main.c     **** // CAN Communication
 241:../main.c     **** void CAN_RX_MO2_ISR(void){
 821              	 .loc 4 241 0
 822              	 .cfi_startproc
 823              	 
 824              	 
 825 0000 80B5     	 push {r7,lr}
 826              	.LCFI36:
 827              	 .cfi_def_cfa_offset 8
 828              	 .cfi_offset 7,-8
 829              	 .cfi_offset 14,-4
 830 0002 84B0     	 sub sp,sp,#16
 831              	.LCFI37:
 832              	 .cfi_def_cfa_offset 24
 833 0004 00AF     	 add r7,sp,#0
 834              	.LCFI38:
 835              	 .cfi_def_cfa_register 7
 242:../main.c     **** 		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
 836              	 .loc 4 242 0
 837 0006 384B     	 ldr r3,.L27
 838 0008 1B69     	 ldr r3,[r3,#16]
 839 000a 1B68     	 ldr r3,[r3]
 840 000c BB60     	 str r3,[r7,#8]
 243:../main.c     **** 		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
 841              	 .loc 4 243 0
 842 000e 364B     	 ldr r3,.L27
 843 0010 1B69     	 ldr r3,[r3,#16]
 844 0012 1846     	 mov r0,r3
 845 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 244:../main.c     **** 
 245:../main.c     **** 		uint8_t data_r[8];
 246:../main.c     **** 		 int i;
 247:../main.c     **** 		 for(i = 0 ; i < 8 ; i ++){
 846              	 .loc 4 247 0
 847 0018 0023     	 movs r3,#0
 848 001a FB60     	 str r3,[r7,#12]
 849 001c 0CE0     	 b .L17
 850              	.L18:
 248:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 851              	 .loc 4 248 0 discriminator 3
 852 001e BA68     	 ldr r2,[r7,#8]
 853 0020 FB68     	 ldr r3,[r7,#12]
 854 0022 1344     	 add r3,r3,r2
 855 0024 1033     	 adds r3,r3,#16
 856 0026 1978     	 ldrb r1,[r3]
 857 0028 3A46     	 mov r2,r7
 858 002a FB68     	 ldr r3,[r7,#12]
 859 002c 1344     	 add r3,r3,r2
 860 002e 0A46     	 mov r2,r1
 861 0030 1A70     	 strb r2,[r3]
 247:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 862              	 .loc 4 247 0 discriminator 3
 863 0032 FB68     	 ldr r3,[r7,#12]
 864 0034 0133     	 adds r3,r3,#1
 865 0036 FB60     	 str r3,[r7,#12]
 866              	.L17:
 247:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 867              	 .loc 4 247 0 is_stmt 0 discriminator 1
 868 0038 FB68     	 ldr r3,[r7,#12]
 869 003a 072B     	 cmp r3,#7
 870 003c EFDD     	 ble .L18
 249:../main.c     **** 		 }
 250:../main.c     **** 
 251:../main.c     **** 		 for(i = 0 ; i < 4 ; i ++){
 871              	 .loc 4 251 0 is_stmt 1
 872 003e 0023     	 movs r3,#0
 873 0040 FB60     	 str r3,[r7,#12]
 874 0042 1AE0     	 b .L19
 875              	.L20:
 252:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 876              	 .loc 4 252 0 discriminator 3
 877 0044 FB68     	 ldr r3,[r7,#12]
 878 0046 5B00     	 lsls r3,r3,#1
 879 0048 0133     	 adds r3,r3,#1
 880 004a 07F11002 	 add r2,r7,#16
 881 004e 1344     	 add r3,r3,r2
 882 0050 13F8103C 	 ldrb r3,[r3,#-16]
 883 0054 1B02     	 lsls r3,r3,#8
 884 0056 9AB2     	 uxth r2,r3
 885 0058 FB68     	 ldr r3,[r7,#12]
 886 005a 5B00     	 lsls r3,r3,#1
 887 005c 07F11001 	 add r1,r7,#16
 888 0060 0B44     	 add r3,r3,r1
 889 0062 13F8103C 	 ldrb r3,[r3,#-16]
 890 0066 9BB2     	 uxth r3,r3
 891 0068 1343     	 orrs r3,r3,r2
 892 006a 99B2     	 uxth r1,r3
 893 006c 1F4A     	 ldr r2,.L27+4
 894 006e FB68     	 ldr r3,[r7,#12]
 895 0070 22F81310 	 strh r1,[r2,r3,lsl#1]
 251:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 896              	 .loc 4 251 0 discriminator 3
 897 0074 FB68     	 ldr r3,[r7,#12]
 898 0076 0133     	 adds r3,r3,#1
 899 0078 FB60     	 str r3,[r7,#12]
 900              	.L19:
 251:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 901              	 .loc 4 251 0 is_stmt 0 discriminator 1
 902 007a FB68     	 ldr r3,[r7,#12]
 903 007c 032B     	 cmp r3,#3
 904 007e E1DD     	 ble .L20
 253:../main.c     **** 			 }
 254:../main.c     **** 
 255:../main.c     **** 		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 905              	 .loc 4 255 0 is_stmt 1
 906 0080 1A4B     	 ldr r3,.L27+4
 907 0082 DB88     	 ldrh r3,[r3,#6]
 908 0084 1BB2     	 sxth r3,r3
 909 0086 07EE903A 	 fmsr s15,r3
 910 008a F8EEE77A 	 fsitos s15,s15
 911 008e 9FED187A 	 flds s14,.L27+8
 912 0092 C7EE877A 	 fdivs s15,s15,s14
 913 0096 174B     	 ldr r3,.L27+12
 914 0098 C3ED007A 	 fsts s15,[r3]
 256:../main.c     **** 
 257:../main.c     **** 		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6
 258:../main.c     **** 
 259:../main.c     **** 		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 915              	 .loc 4 259 0
 916 009c 154B     	 ldr r3,.L27+12
 917 009e D3ED007A 	 flds s15,[r3]
 918 00a2 B0EE007A 	 fconsts s14,#0
 919 00a6 F4EEC77A 	 fcmpes s15,s14
 920 00aa F1EE10FA 	 fmstat
 921 00ae 03DD     	 ble .L21
 922              	 .loc 4 259 0 is_stmt 0 discriminator 1
 923 00b0 104B     	 ldr r3,.L27+12
 924 00b2 4FF08042 	 mov r2,#1073741824
 925 00b6 1A60     	 str r2,[r3]
 926              	.L21:
 260:../main.c     **** 		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 927              	 .loc 4 260 0 is_stmt 1
 928 00b8 0E4B     	 ldr r3,.L27+12
 929 00ba D3ED007A 	 flds s15,[r3]
 930 00be B8EE007A 	 fconsts s14,#128
 931 00c2 F4EEC77A 	 fcmpes s15,s14
 932 00c6 F1EE10FA 	 fmstat
 933 00ca 03D5     	 bpl .L23
 934              	 .loc 4 260 0 is_stmt 0 discriminator 1
 935 00cc 094B     	 ldr r3,.L27+12
 936 00ce 4FF04042 	 mov r2,#-1073741824
 937 00d2 1A60     	 str r2,[r3]
 938              	.L23:
 261:../main.c     **** 
 262:../main.c     **** 		CAN_new_meassage = 1;
 939              	 .loc 4 262 0 is_stmt 1
 940 00d4 084B     	 ldr r3,.L27+16
 941 00d6 0122     	 movs r2,#1
 942 00d8 1A70     	 strb r2,[r3]
 263:../main.c     **** 		CAN_no_com_counter = 0;
 943              	 .loc 4 263 0
 944 00da 084B     	 ldr r3,.L27+20
 945 00dc 0022     	 movs r2,#0
 946 00de 1A70     	 strb r2,[r3]
 264:../main.c     **** }
 947              	 .loc 4 264 0
 948 00e0 1037     	 adds r7,r7,#16
 949              	.LCFI39:
 950              	 .cfi_def_cfa_offset 8
 951 00e2 BD46     	 mov sp,r7
 952              	.LCFI40:
 953              	 .cfi_def_cfa_register 13
 954              	 
 955 00e4 80BD     	 pop {r7,pc}
 956              	.L28:
 957 00e6 00BF     	 .align 2
 958              	.L27:
 959 00e8 00000000 	 .word CAN_NODE_0
 960 00ec 00000000 	 .word Speeds_int16_r
 961 00f0 00007A44 	 .word 1148846080
 962 00f4 00000000 	 .word CAN_speed_ref
 963 00f8 00000000 	 .word CAN_new_meassage
 964 00fc 00000000 	 .word CAN_no_com_counter
 965              	 .cfi_endproc
 966              	.LFE474:
 968              	 .section .text.CAN0_0_IRQHandler,"ax",%progbits
 969              	 .align 2
 970              	 .global CAN0_0_IRQHandler
 971              	 .thumb
 972              	 .thumb_func
 974              	CAN0_0_IRQHandler:
 975              	.LFB475:
 265:../main.c     **** 
 266:../main.c     **** //CAN RX reste distance
 267:../main.c     **** void CAN_RX_MO7_ISR(void){
 976              	 .loc 4 267 0
 977              	 .cfi_startproc
 978              	 
 979              	 
 980 0000 80B5     	 push {r7,lr}
 981              	.LCFI41:
 982              	 .cfi_def_cfa_offset 8
 983              	 .cfi_offset 7,-8
 984              	 .cfi_offset 14,-4
 985 0002 84B0     	 sub sp,sp,#16
 986              	.LCFI42:
 987              	 .cfi_def_cfa_offset 24
 988 0004 00AF     	 add r7,sp,#0
 989              	.LCFI43:
 990              	 .cfi_def_cfa_register 7
 268:../main.c     **** 	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 991              	 .loc 4 268 0
 992 0006 124B     	 ldr r3,.L33
 993 0008 5B6A     	 ldr r3,[r3,#36]
 994 000a 1B68     	 ldr r3,[r3]
 995 000c BB60     	 str r3,[r7,#8]
 269:../main.c     **** 	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 996              	 .loc 4 269 0
 997 000e 104B     	 ldr r3,.L33
 998 0010 5B6A     	 ldr r3,[r3,#36]
 999 0012 1846     	 mov r0,r3
 1000 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 270:../main.c     **** 
 271:../main.c     **** 	uint8_t data_r[4];
 272:../main.c     **** 	 int i;
 273:../main.c     **** 	 for(i = 0 ; i < 4 ; i ++){
 1001              	 .loc 4 273 0
 1002 0018 0023     	 movs r3,#0
 1003 001a FB60     	 str r3,[r7,#12]
 1004 001c 0CE0     	 b .L30
 1005              	.L31:
 274:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 1006              	 .loc 4 274 0 discriminator 3
 1007 001e BA68     	 ldr r2,[r7,#8]
 1008 0020 FB68     	 ldr r3,[r7,#12]
 1009 0022 1344     	 add r3,r3,r2
 1010 0024 1033     	 adds r3,r3,#16
 1011 0026 1978     	 ldrb r1,[r3]
 1012 0028 3A1D     	 adds r2,r7,#4
 1013 002a FB68     	 ldr r3,[r7,#12]
 1014 002c 1344     	 add r3,r3,r2
 1015 002e 0A46     	 mov r2,r1
 1016 0030 1A70     	 strb r2,[r3]
 273:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 1017              	 .loc 4 273 0 discriminator 3
 1018 0032 FB68     	 ldr r3,[r7,#12]
 1019 0034 0133     	 adds r3,r3,#1
 1020 0036 FB60     	 str r3,[r7,#12]
 1021              	.L30:
 273:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 1022              	 .loc 4 273 0 is_stmt 0 discriminator 1
 1023 0038 FB68     	 ldr r3,[r7,#12]
 1024 003a 032B     	 cmp r3,#3
 1025 003c EFDD     	 ble .L31
 275:../main.c     **** 	 }
 276:../main.c     **** 
 277:../main.c     **** 	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 1026              	 .loc 4 277 0 is_stmt 1
 1027 003e FB79     	 ldrb r3,[r7,#7]
 1028 0040 012B     	 cmp r3,#1
 1029 0042 02D1     	 bne .L29
 1030              	 .loc 4 277 0 is_stmt 0 discriminator 1
 1031 0044 034B     	 ldr r3,.L33+4
 1032 0046 0022     	 movs r2,#0
 1033 0048 1A60     	 str r2,[r3]
 1034              	.L29:
 278:../main.c     **** }
 1035              	 .loc 4 278 0 is_stmt 1
 1036 004a 1037     	 adds r7,r7,#16
 1037              	.LCFI44:
 1038              	 .cfi_def_cfa_offset 8
 1039 004c BD46     	 mov sp,r7
 1040              	.LCFI45:
 1041              	 .cfi_def_cfa_register 13
 1042              	 
 1043 004e 80BD     	 pop {r7,pc}
 1044              	.L34:
 1045              	 .align 2
 1046              	.L33:
 1047 0050 00000000 	 .word CAN_NODE_0
 1048 0054 00000000 	 .word distance_180deg_ele_count
 1049              	 .cfi_endproc
 1050              	.LFE475:
 1052              	 .global __aeabi_f2d
 1053              	 .global __aeabi_dmul
 1054              	 .global __aeabi_ddiv
 1055              	 .global __aeabi_d2f
 1056              	 .global __aeabi_dadd
 1057              	 .section .text.CCU43_0_IRQHandler,"ax",%progbits
 1058              	 .align 2
 1059              	 .global CCU43_0_IRQHandler
 1060              	 .thumb
 1061              	 .thumb_func
 1063              	CCU43_0_IRQHandler:
 1064              	.LFB476:
 279:../main.c     **** 
 280:../main.c     **** void CAN_TX_ISR(void){
 1065              	 .loc 4 280 0
 1066              	 .cfi_startproc
 1067              	 
 1068              	 
 1069 0000 80B5     	 push {r7,lr}
 1070              	.LCFI46:
 1071              	 .cfi_def_cfa_offset 8
 1072              	 .cfi_offset 7,-8
 1073              	 .cfi_offset 14,-4
 1074 0002 86B0     	 sub sp,sp,#24
 1075              	.LCFI47:
 1076              	 .cfi_def_cfa_offset 32
 1077 0004 00AF     	 add r7,sp,#0
 1078              	.LCFI48:
 1079              	 .cfi_def_cfa_register 7
 281:../main.c     **** 	int16_t Inverter_state[4] = {0};
 1080              	 .loc 4 281 0
 1081 0006 0023     	 movs r3,#0
 1082 0008 FB60     	 str r3,[r7,#12]
 1083 000a 0023     	 movs r3,#0
 1084 000c 3B61     	 str r3,[r7,#16]
 282:../main.c     **** 
 283:../main.c     **** 	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 1085              	 .loc 4 283 0
 1086 000e 0323     	 movs r3,#3
 1087 0010 BB81     	 strh r3,[r7,#12]
 284:../main.c     **** 
 285:../main.c     **** 	if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
 1088              	 .loc 4 285 0
 1089 0012 4D4B     	 ldr r3,.L38+16
 1090 0014 1B78     	 ldrb r3,[r3]
 1091 0016 FA2B     	 cmp r3,#250
 1092 0018 02D9     	 bls .L36
 1093              	 .loc 4 285 0 is_stmt 0 discriminator 1
 1094 001a 0023     	 movs r3,#0
 1095 001c BB81     	 strh r3,[r7,#12]
 1096 001e 01E0     	 b .L37
 1097              	.L36:
 286:../main.c     **** 	else Inverter_state[1] = 1;
 1098              	 .loc 4 286 0 is_stmt 1
 1099 0020 0123     	 movs r3,#1
 1100 0022 FB81     	 strh r3,[r7,#14]
 1101              	.L37:
 287:../main.c     **** 
 288:../main.c     **** 	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 1102              	 .loc 4 288 0
 1103 0024 494B     	 ldr r3,.L38+20
 1104 0026 1B68     	 ldr r3,[r3]
 1105 0028 1846     	 mov r0,r3
 1106 002a FFF7FEFF 	 bl __aeabi_f2d
 1107 002e 0246     	 mov r2,r0
 1108 0030 0B46     	 mov r3,r1
 1109 0032 1046     	 mov r0,r2
 1110 0034 1946     	 mov r1,r3
 1111 0036 40A3     	 adr r3,.L38
 1112 0038 D3E90023 	 ldrd r2,[r3]
 1113 003c FFF7FEFF 	 bl __aeabi_dmul
 1114 0040 0246     	 mov r2,r0
 1115 0042 0B46     	 mov r3,r1
 1116 0044 1046     	 mov r0,r2
 1117 0046 1946     	 mov r1,r3
 1118 0048 4FF00002 	 mov r2,#0
 1119 004c 404B     	 ldr r3,.L38+24
 1120 004e FFF7FEFF 	 bl __aeabi_ddiv
 1121 0052 0246     	 mov r2,r0
 1122 0054 0B46     	 mov r3,r1
 1123 0056 1046     	 mov r0,r2
 1124 0058 1946     	 mov r1,r3
 1125 005a FFF7FEFF 	 bl __aeabi_d2f
 1126 005e 0246     	 mov r2,r0
 1127 0060 3C4B     	 ldr r3,.L38+28
 1128 0062 1A60     	 str r2,[r3]
 289:../main.c     **** 	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
 290:../main.c     **** 	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 1129              	 .loc 4 290 0
 1130 0064 3B4B     	 ldr r3,.L38+28
 1131 0066 D3ED007A 	 flds s15,[r3]
 1132 006a 9FED3B7A 	 flds s14,.L38+32
 1133 006e 67EE877A 	 fmuls s15,s15,s14
 1134 0072 FDEEE77A 	 ftosizs s15,s15
 1135 0076 C7ED017A 	 fsts s15,[r7,#4]
 1136 007a BB88     	 ldrh r3,[r7,#4]
 1137 007c 9BB2     	 uxth r3,r3
 1138 007e 3B82     	 strh r3,[r7,#16]
 291:../main.c     **** 
 292:../main.c     **** 	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 1139              	 .loc 4 292 0
 1140 0080 364B     	 ldr r3,.L38+36
 1141 0082 1B68     	 ldr r3,[r3]
 1142 0084 07EE903A 	 fmsr s15,r3
 1143 0088 F8EEE77A 	 fsitos s15,s15
 1144 008c B0EE007A 	 fconsts s14,#0
 1145 0090 C7EE877A 	 fdivs s15,s15,s14
 1146 0094 B2EE067A 	 fconsts s14,#38
 1147 0098 C7EE877A 	 fdivs s15,s15,s14
 1148 009c 17EE900A 	 fmrs r0,s15
 1149 00a0 FFF7FEFF 	 bl __aeabi_f2d
 1150 00a4 0246     	 mov r2,r0
 1151 00a6 0B46     	 mov r3,r1
 1152 00a8 1046     	 mov r0,r2
 1153 00aa 1946     	 mov r1,r3
 1154 00ac 24A3     	 adr r3,.L38+8
 1155 00ae D3E90023 	 ldrd r2,[r3]
 1156 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1157 00b6 0246     	 mov r2,r0
 1158 00b8 0B46     	 mov r3,r1
 1159 00ba 1046     	 mov r0,r2
 1160 00bc 1946     	 mov r1,r3
 1161 00be FFF7FEFF 	 bl __aeabi_dadd
 1162 00c2 0246     	 mov r2,r0
 1163 00c4 0B46     	 mov r3,r1
 1164 00c6 1046     	 mov r0,r2
 1165 00c8 1946     	 mov r1,r3
 1166 00ca 1BA3     	 adr r3,.L38
 1167 00cc D3E90023 	 ldrd r2,[r3]
 1168 00d0 FFF7FEFF 	 bl __aeabi_dmul
 1169 00d4 0246     	 mov r2,r0
 1170 00d6 0B46     	 mov r3,r1
 1171 00d8 1046     	 mov r0,r2
 1172 00da 1946     	 mov r1,r3
 1173 00dc FFF7FEFF 	 bl __aeabi_d2f
 1174 00e0 0246     	 mov r2,r0
 1175 00e2 1F4B     	 ldr r3,.L38+40
 1176 00e4 1A60     	 str r2,[r3]
 293:../main.c     **** 	if(MOTOR_NUM == 6) distance = -distance;
 294:../main.c     **** 	Inverter_state[3] = distance * 1000; // to mm
 1177              	 .loc 4 294 0
 1178 00e6 1E4B     	 ldr r3,.L38+40
 1179 00e8 D3ED007A 	 flds s15,[r3]
 1180 00ec 9FED1A7A 	 flds s14,.L38+32
 1181 00f0 67EE877A 	 fmuls s15,s15,s14
 1182 00f4 FDEEE77A 	 ftosizs s15,s15
 1183 00f8 C7ED017A 	 fsts s15,[r7,#4]
 1184 00fc BB88     	 ldrh r3,[r7,#4]
 1185 00fe 9BB2     	 uxth r3,r3
 1186 0100 7B82     	 strh r3,[r7,#18]
 295:../main.c     **** 
 296:../main.c     **** 	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 1187              	 .loc 4 296 0
 1188 0102 0523     	 movs r3,#5
 1189 0104 FB75     	 strb r3,[r7,#23]
 297:../main.c     **** 	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 1190              	 .loc 4 297 0
 1191 0106 FB7D     	 ldrb r3,[r7,#23]
 1192 0108 164A     	 ldr r2,.L38+44
 1193 010a 0233     	 adds r3,r3,#2
 1194 010c 9B00     	 lsls r3,r3,#2
 1195 010e 1344     	 add r3,r3,r2
 1196 0110 5A68     	 ldr r2,[r3,#4]
 1197 0112 07F10C03 	 add r3,r7,#12
 1198 0116 1046     	 mov r0,r2
 1199 0118 1946     	 mov r1,r3
 1200 011a FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
 298:../main.c     **** 	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 1201              	 .loc 4 298 0
 1202 011e FB7D     	 ldrb r3,[r7,#23]
 1203 0120 104A     	 ldr r2,.L38+44
 1204 0122 0233     	 adds r3,r3,#2
 1205 0124 9B00     	 lsls r3,r3,#2
 1206 0126 1344     	 add r3,r3,r2
 1207 0128 5B68     	 ldr r3,[r3,#4]
 1208 012a 1846     	 mov r0,r3
 1209 012c FFF7FEFF 	 bl CAN_NODE_MO_Transmit
 299:../main.c     **** }
 1210              	 .loc 4 299 0
 1211 0130 1837     	 adds r7,r7,#24
 1212              	.LCFI49:
 1213              	 .cfi_def_cfa_offset 8
 1214 0132 BD46     	 mov sp,r7
 1215              	.LCFI50:
 1216              	 .cfi_def_cfa_register 13
 1217              	 
 1218 0134 80BD     	 pop {r7,pc}
 1219              	.L39:
 1220 0136 00BF     	 .align 3
 1221              	.L38:
 1222 0138 48E17A14 	 .word 343597384
 1223 013c AE47B13F 	 .word 1068582830
 1224 0140 F1D4C853 	 .word 1405670641
 1225 0144 FB210940 	 .word 1074340347
 1226 0148 00000000 	 .word CAN_no_com_counter
 1227 014c 00000000 	 .word omega_ele_rads
 1228 0150 00002640 	 .word 1076232192
 1229 0154 00000000 	 .word Speed_act
 1230 0158 00007A44 	 .word 1148846080
 1231 015c 00000000 	 .word distance_180deg_ele_count
 1232 0160 00000000 	 .word distance
 1233 0164 00000000 	 .word CAN_NODE_0
 1234              	 .cfi_endproc
 1235              	.LFE476:
 1237              	 .section .text.CCU43_3_IRQHandler,"ax",%progbits
 1238              	 .align 2
 1239              	 .global CCU43_3_IRQHandler
 1240              	 .thumb
 1241              	 .thumb_func
 1243              	CCU43_3_IRQHandler:
 1244              	.LFB477:
 300:../main.c     **** 
 301:../main.c     **** // 100us Timer for speed measurement
 302:../main.c     **** void TimeCounterISR(void){
 1245              	 .loc 4 302 0
 1246              	 .cfi_startproc
 1247              	 
 1248              	 
 1249              	 
 1250 0000 80B4     	 push {r7}
 1251              	.LCFI51:
 1252              	 .cfi_def_cfa_offset 4
 1253              	 .cfi_offset 7,-4
 1254 0002 00AF     	 add r7,sp,#0
 1255              	.LCFI52:
 1256              	 .cfi_def_cfa_register 7
 303:../main.c     **** 	time_since_A ++;
 1257              	 .loc 4 303 0
 1258 0004 094B     	 ldr r3,.L41
 1259 0006 1B68     	 ldr r3,[r3]
 1260 0008 0133     	 adds r3,r3,#1
 1261 000a 084A     	 ldr r2,.L41
 1262 000c 1360     	 str r3,[r2]
 304:../main.c     **** 	time_since_B ++;
 1263              	 .loc 4 304 0
 1264 000e 084B     	 ldr r3,.L41+4
 1265 0010 1B68     	 ldr r3,[r3]
 1266 0012 0133     	 adds r3,r3,#1
 1267 0014 064A     	 ldr r2,.L41+4
 1268 0016 1360     	 str r3,[r2]
 305:../main.c     **** 	time_since_C ++;
 1269              	 .loc 4 305 0
 1270 0018 064B     	 ldr r3,.L41+8
 1271 001a 1B68     	 ldr r3,[r3]
 1272 001c 0133     	 adds r3,r3,#1
 1273 001e 054A     	 ldr r2,.L41+8
 1274 0020 1360     	 str r3,[r2]
 306:../main.c     **** }
 1275              	 .loc 4 306 0
 1276 0022 BD46     	 mov sp,r7
 1277              	.LCFI53:
 1278              	 .cfi_def_cfa_register 13
 1279              	 
 1280 0024 5DF8047B 	 ldr r7,[sp],#4
 1281              	.LCFI54:
 1282              	 .cfi_restore 7
 1283              	 .cfi_def_cfa_offset 0
 1284 0028 7047     	 bx lr
 1285              	.L42:
 1286 002a 00BF     	 .align 2
 1287              	.L41:
 1288 002c 00000000 	 .word time_since_A
 1289 0030 00000000 	 .word time_since_B
 1290 0034 00000000 	 .word time_since_C
 1291              	 .cfi_endproc
 1292              	.LFE477:
 1294              	 .section .text.ERU1_2_IRQHandler,"ax",%progbits
 1295              	 .align 2
 1296              	 .global ERU1_2_IRQHandler
 1297              	 .thumb
 1298              	 .thumb_func
 1300              	ERU1_2_IRQHandler:
 1301              	.LFB478:
 307:../main.c     **** 
 308:../main.c     **** // Hall Sensors
 309:../main.c     **** void HallSensor_A_ISR(void){
 1302              	 .loc 4 309 0
 1303              	 .cfi_startproc
 1304              	 
 1305              	 
 1306 0000 80B5     	 push {r7,lr}
 1307              	.LCFI55:
 1308              	 .cfi_def_cfa_offset 8
 1309              	 .cfi_offset 7,-8
 1310              	 .cfi_offset 14,-4
 1311 0002 00AF     	 add r7,sp,#0
 1312              	.LCFI56:
 1313              	 .cfi_def_cfa_register 7
 310:../main.c     **** 	HallSensor();
 1314              	 .loc 4 310 0
 1315 0004 FFF7FEFF 	 bl HallSensor
 311:../main.c     **** 	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
 1316              	 .loc 4 311 0
 1317 0008 114B     	 ldr r3,.L46
 1318 000a 1B68     	 ldr r3,[r3]
 1319 000c 114A     	 ldr r2,.L46+4
 1320 000e 1360     	 str r3,[r2]
 312:../main.c     **** 	time_since_A = 0;						// measurement of speed -> time between change of Hall A
 1321              	 .loc 4 312 0
 1322 0010 0F4B     	 ldr r3,.L46
 1323 0012 0022     	 movs r2,#0
 1324 0014 1A60     	 str r2,[r3]
 313:../main.c     **** 	last_Hall_trig = 'A';
 1325              	 .loc 4 313 0
 1326 0016 104B     	 ldr r3,.L46+8
 1327 0018 4122     	 movs r2,#65
 1328 001a 1A70     	 strb r2,[r3]
 314:../main.c     **** 
 315:../main.c     **** 	if(direction == 1 ) distance_180deg_ele_count ++;
 1329              	 .loc 4 315 0
 1330 001c 0F4B     	 ldr r3,.L46+12
 1331 001e 1B78     	 ldrb r3,[r3]
 1332 0020 DBB2     	 uxtb r3,r3
 1333 0022 5BB2     	 sxtb r3,r3
 1334 0024 012B     	 cmp r3,#1
 1335 0026 05D1     	 bne .L44
 1336              	 .loc 4 315 0 is_stmt 0 discriminator 1
 1337 0028 0D4B     	 ldr r3,.L46+16
 1338 002a 1B68     	 ldr r3,[r3]
 1339 002c 0133     	 adds r3,r3,#1
 1340 002e 0C4A     	 ldr r2,.L46+16
 1341 0030 1360     	 str r3,[r2]
 1342 0032 0BE0     	 b .L43
 1343              	.L44:
 316:../main.c     **** 	else if(direction == -1 ) distance_180deg_ele_count --;
 1344              	 .loc 4 316 0 is_stmt 1
 1345 0034 094B     	 ldr r3,.L46+12
 1346 0036 1B78     	 ldrb r3,[r3]
 1347 0038 DBB2     	 uxtb r3,r3
 1348 003a 5BB2     	 sxtb r3,r3
 1349 003c B3F1FF3F 	 cmp r3,#-1
 1350 0040 04D1     	 bne .L43
 1351              	 .loc 4 316 0 is_stmt 0 discriminator 1
 1352 0042 074B     	 ldr r3,.L46+16
 1353 0044 1B68     	 ldr r3,[r3]
 1354 0046 013B     	 subs r3,r3,#1
 1355 0048 054A     	 ldr r2,.L46+16
 1356 004a 1360     	 str r3,[r2]
 1357              	.L43:
 317:../main.c     **** }
 1358              	 .loc 4 317 0 is_stmt 1
 1359 004c 80BD     	 pop {r7,pc}
 1360              	.L47:
 1361 004e 00BF     	 .align 2
 1362              	.L46:
 1363 0050 00000000 	 .word time_since_A
 1364 0054 00000000 	 .word time_180deg
 1365 0058 00000000 	 .word last_Hall_trig
 1366 005c 00000000 	 .word direction
 1367 0060 00000000 	 .word distance_180deg_ele_count
 1368              	 .cfi_endproc
 1369              	.LFE478:
 1371              	 .section .text.ERU1_0_IRQHandler,"ax",%progbits
 1372              	 .align 2
 1373              	 .global ERU1_0_IRQHandler
 1374              	 .thumb
 1375              	 .thumb_func
 1377              	ERU1_0_IRQHandler:
 1378              	.LFB479:
 318:../main.c     **** void HallSensor_B_ISR(void){
 1379              	 .loc 4 318 0
 1380              	 .cfi_startproc
 1381              	 
 1382              	 
 1383 0000 80B5     	 push {r7,lr}
 1384              	.LCFI57:
 1385              	 .cfi_def_cfa_offset 8
 1386              	 .cfi_offset 7,-8
 1387              	 .cfi_offset 14,-4
 1388 0002 00AF     	 add r7,sp,#0
 1389              	.LCFI58:
 1390              	 .cfi_def_cfa_register 7
 319:../main.c     **** 	HallSensor();
 1391              	 .loc 4 319 0
 1392 0004 FFF7FEFF 	 bl HallSensor
 320:../main.c     **** 	time_180deg = time_since_B;
 1393              	 .loc 4 320 0
 1394 0008 054B     	 ldr r3,.L49
 1395 000a 1B68     	 ldr r3,[r3]
 1396 000c 054A     	 ldr r2,.L49+4
 1397 000e 1360     	 str r3,[r2]
 321:../main.c     **** 	time_since_B = 0;
 1398              	 .loc 4 321 0
 1399 0010 034B     	 ldr r3,.L49
 1400 0012 0022     	 movs r2,#0
 1401 0014 1A60     	 str r2,[r3]
 322:../main.c     **** 	last_Hall_trig = 'B';
 1402              	 .loc 4 322 0
 1403 0016 044B     	 ldr r3,.L49+8
 1404 0018 4222     	 movs r2,#66
 1405 001a 1A70     	 strb r2,[r3]
 323:../main.c     **** }
 1406              	 .loc 4 323 0
 1407 001c 80BD     	 pop {r7,pc}
 1408              	.L50:
 1409 001e 00BF     	 .align 2
 1410              	.L49:
 1411 0020 00000000 	 .word time_since_B
 1412 0024 00000000 	 .word time_180deg
 1413 0028 00000000 	 .word last_Hall_trig
 1414              	 .cfi_endproc
 1415              	.LFE479:
 1417              	 .section .text.ERU1_3_IRQHandler,"ax",%progbits
 1418              	 .align 2
 1419              	 .global ERU1_3_IRQHandler
 1420              	 .thumb
 1421              	 .thumb_func
 1423              	ERU1_3_IRQHandler:
 1424              	.LFB480:
 324:../main.c     **** void HallSensor_C_ISR(void){
 1425              	 .loc 4 324 0
 1426              	 .cfi_startproc
 1427              	 
 1428              	 
 1429 0000 80B5     	 push {r7,lr}
 1430              	.LCFI59:
 1431              	 .cfi_def_cfa_offset 8
 1432              	 .cfi_offset 7,-8
 1433              	 .cfi_offset 14,-4
 1434 0002 00AF     	 add r7,sp,#0
 1435              	.LCFI60:
 1436              	 .cfi_def_cfa_register 7
 325:../main.c     **** 	HallSensor();
 1437              	 .loc 4 325 0
 1438 0004 FFF7FEFF 	 bl HallSensor
 326:../main.c     **** 	time_180deg = time_since_C;
 1439              	 .loc 4 326 0
 1440 0008 054B     	 ldr r3,.L52
 1441 000a 1B68     	 ldr r3,[r3]
 1442 000c 054A     	 ldr r2,.L52+4
 1443 000e 1360     	 str r3,[r2]
 327:../main.c     **** 	time_since_C = 0;
 1444              	 .loc 4 327 0
 1445 0010 034B     	 ldr r3,.L52
 1446 0012 0022     	 movs r2,#0
 1447 0014 1A60     	 str r2,[r3]
 328:../main.c     **** 	last_Hall_trig = 'C';
 1448              	 .loc 4 328 0
 1449 0016 044B     	 ldr r3,.L52+8
 1450 0018 4322     	 movs r2,#67
 1451 001a 1A70     	 strb r2,[r3]
 329:../main.c     **** }
 1452              	 .loc 4 329 0
 1453 001c 80BD     	 pop {r7,pc}
 1454              	.L53:
 1455 001e 00BF     	 .align 2
 1456              	.L52:
 1457 0020 00000000 	 .word time_since_C
 1458 0024 00000000 	 .word time_180deg
 1459 0028 00000000 	 .word last_Hall_trig
 1460              	 .cfi_endproc
 1461              	.LFE480:
 1463              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 1464              	 .align 2
 1465              	 .global CCU43_1_IRQHandler
 1466              	 .thumb
 1467              	 .thumb_func
 1469              	CCU43_1_IRQHandler:
 1470              	.LFB481:
 330:../main.c     **** 
 331:../main.c     **** /*
 332:../main.c     **** // Turn off driver at Overcurrent
 333:../main.c     **** void OverCurrent_U_ISR(void)
 334:../main.c     **** {
 335:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 336:../main.c     **** }
 337:../main.c     **** void OverCurrent_V_ISR(void)
 338:../main.c     **** {
 339:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 340:../main.c     **** }
 341:../main.c     **** void OverCurrent_W_ISR(void)
 342:../main.c     **** {
 343:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 344:../main.c     **** }
 345:../main.c     **** */
 346:../main.c     **** 
 347:../main.c     **** //ISR based on Timer_1 --> 100us time base
 348:../main.c     **** void ISR_INT1(void)
 349:../main.c     **** {
 1471              	 .loc 4 349 0
 1472              	 .cfi_startproc
 1473              	 
 1474              	 
 1475              	 
 1476 0000 80B4     	 push {r7}
 1477              	.LCFI61:
 1478              	 .cfi_def_cfa_offset 4
 1479              	 .cfi_offset 7,-4
 1480 0002 00AF     	 add r7,sp,#0
 1481              	.LCFI62:
 1482              	 .cfi_def_cfa_register 7
 350:../main.c     **** }
 1483              	 .loc 4 350 0
 1484 0004 BD46     	 mov sp,r7
 1485              	.LCFI63:
 1486              	 .cfi_def_cfa_register 13
 1487              	 
 1488 0006 5DF8047B 	 ldr r7,[sp],#4
 1489              	.LCFI64:
 1490              	 .cfi_restore 7
 1491              	 .cfi_def_cfa_offset 0
 1492 000a 7047     	 bx lr
 1493              	 .cfi_endproc
 1494              	.LFE481:
 1496              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 1497              	 .align 2
 1498              	 .global CCU80_3_IRQHandler
 1499              	 .thumb
 1500              	 .thumb_func
 1502              	CCU80_3_IRQHandler:
 1503              	.LFB482:
 351:../main.c     **** 
 352:../main.c     **** // ISR for Updating the SVM PWM -> 50us = 20kHz
 353:../main.c     **** void PeriodMatchInterruptHandler(void)
 354:../main.c     **** {
 1504              	 .loc 4 354 0
 1505              	 .cfi_startproc
 1506              	 
 1507              	 
 1508 0000 80B5     	 push {r7,lr}
 1509              	.LCFI65:
 1510              	 .cfi_def_cfa_offset 8
 1511              	 .cfi_offset 7,-8
 1512              	 .cfi_offset 14,-4
 1513 0002 82B0     	 sub sp,sp,#8
 1514              	.LCFI66:
 1515              	 .cfi_def_cfa_offset 16
 1516 0004 00AF     	 add r7,sp,#0
 1517              	.LCFI67:
 1518              	 .cfi_def_cfa_register 7
 355:../main.c     **** 	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 1519              	 .loc 4 355 0
 1520 0006 144B     	 ldr r3,.L57
 1521 0008 1B78     	 ldrb r3,[r3]
 1522 000a DBB2     	 uxtb r3,r3
 1523 000c 0133     	 adds r3,r3,#1
 1524 000e DAB2     	 uxtb r2,r3
 1525 0010 114B     	 ldr r3,.L57
 1526 0012 1A70     	 strb r2,[r3]
 356:../main.c     **** 	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 1527              	 .loc 4 356 0
 1528 0014 104B     	 ldr r3,.L57
 1529 0016 1B78     	 ldrb r3,[r3]
 1530 0018 DBB2     	 uxtb r3,r3
 1531 001a 012B     	 cmp r3,#1
 1532 001c 18D1     	 bne .L55
 357:../main.c     **** 		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_D
 1533              	 .loc 4 357 0
 1534 001e 0F4B     	 ldr r3,.L57+4
 1535 0020 D3ED007A 	 flds s15,[r3]
 1536 0024 FCEEE77A 	 ftouizs s15,s15
 1537 0028 C7ED017A 	 fsts s15,[r7,#4]
 1538 002c BB88     	 ldrh r3,[r7,#4]
 1539 002e 9AB2     	 uxth r2,r3
 1540 0030 0B4B     	 ldr r3,.L57+8
 1541 0032 D3ED007A 	 flds s15,[r3]
 1542 0036 FCEEE77A 	 ftouizs s15,s15
 1543 003a 17EE901A 	 fmrs r1,s15
 1544 003e 4BF20B63 	 movw r3,#46603
 1545 0042 03FB01F3 	 mul r3,r3,r1
 1546 0046 0748     	 ldr r0,.L57+12
 1547 0048 1146     	 mov r1,r2
 1548 004a 1A46     	 mov r2,r3
 1549 004c FFF7FEFF 	 bl PWM_SVM_SVMUpdate
 1550              	.L55:
 358:../main.c     **** 	}
 359:../main.c     **** }
 1551              	 .loc 4 359 0
 1552 0050 0837     	 adds r7,r7,#8
 1553              	.LCFI68:
 1554              	 .cfi_def_cfa_offset 8
 1555 0052 BD46     	 mov sp,r7
 1556              	.LCFI69:
 1557              	 .cfi_def_cfa_register 13
 1558              	 
 1559 0054 80BD     	 pop {r7,pc}
 1560              	.L58:
 1561 0056 00BF     	 .align 2
 1562              	.L57:
 1563 0058 00000000 	 .word count
 1564 005c 00000000 	 .word modulation_index_scaled
 1565 0060 00000000 	 .word angle_ab
 1566 0064 00000000 	 .word PWM_SVM_0
 1567              	 .cfi_endproc
 1568              	.LFE482:
 1570              	 .section .text.Hall_init,"ax",%progbits
 1571              	 .align 2
 1572              	 .global Hall_init
 1573              	 .thumb
 1574              	 .thumb_func
 1576              	Hall_init:
 1577              	.LFB483:
 360:../main.c     **** 
 361:../main.c     **** //########################
 362:../main.c     **** // FUNCTIONS
 363:../main.c     **** //########################
 364:../main.c     **** 
 365:../main.c     **** // Hall init -> readout of actual Hall pattern to determine the motor position
 366:../main.c     **** void Hall_init(void){
 1578              	 .loc 4 366 0
 1579              	 .cfi_startproc
 1580              	 
 1581              	 
 1582 0000 90B5     	 push {r4,r7,lr}
 1583              	.LCFI70:
 1584              	 .cfi_def_cfa_offset 12
 1585              	 .cfi_offset 4,-12
 1586              	 .cfi_offset 7,-8
 1587              	 .cfi_offset 14,-4
 1588 0002 83B0     	 sub sp,sp,#12
 1589              	.LCFI71:
 1590              	 .cfi_def_cfa_offset 24
 1591 0004 00AF     	 add r7,sp,#0
 1592              	.LCFI72:
 1593              	 .cfi_def_cfa_register 7
 367:../main.c     **** 
 368:../main.c     **** 	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinV
 1594              	 .loc 4 368 0
 1595 0006 2148     	 ldr r0,.L66
 1596 0008 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1597 000c 0346     	 mov r3,r0
 1598 000e DBB2     	 uxtb r3,r3
 1599 0010 5B00     	 lsls r3,r3,#1
 1600 0012 DCB2     	 uxtb r4,r3
 1601 0014 1E48     	 ldr r0,.L66+4
 1602 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1603 001a 0346     	 mov r3,r0
 1604 001c DBB2     	 uxtb r3,r3
 1605 001e 2343     	 orrs r3,r3,r4
 1606 0020 DBB2     	 uxtb r3,r3
 1607 0022 5B00     	 lsls r3,r3,#1
 1608 0024 DCB2     	 uxtb r4,r3
 1609 0026 1B48     	 ldr r0,.L66+8
 1610 0028 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1611 002c 0346     	 mov r3,r0
 1612 002e DBB2     	 uxtb r3,r3
 1613 0030 2343     	 orrs r3,r3,r4
 1614 0032 FB71     	 strb r3,[r7,#7]
 369:../main.c     **** 
 370:../main.c     **** 	 if(Hall_Initial == 0b100){sector = 0;}
 1615              	 .loc 4 370 0
 1616 0034 FB79     	 ldrb r3,[r7,#7]
 1617 0036 042B     	 cmp r3,#4
 1618 0038 03D1     	 bne .L60
 1619              	 .loc 4 370 0 is_stmt 0 discriminator 1
 1620 003a 174B     	 ldr r3,.L66+12
 1621 003c 0022     	 movs r2,#0
 1622 003e 1A70     	 strb r2,[r3]
 1623 0040 21E0     	 b .L59
 1624              	.L60:
 371:../main.c     **** 	 else if(Hall_Initial == 0b110){sector = 1;}
 1625              	 .loc 4 371 0 is_stmt 1
 1626 0042 FB79     	 ldrb r3,[r7,#7]
 1627 0044 062B     	 cmp r3,#6
 1628 0046 03D1     	 bne .L62
 1629              	 .loc 4 371 0 is_stmt 0 discriminator 1
 1630 0048 134B     	 ldr r3,.L66+12
 1631 004a 0122     	 movs r2,#1
 1632 004c 1A70     	 strb r2,[r3]
 1633 004e 1AE0     	 b .L59
 1634              	.L62:
 372:../main.c     **** 	 else if(Hall_Initial == 0b010){sector = 2;}
 1635              	 .loc 4 372 0 is_stmt 1
 1636 0050 FB79     	 ldrb r3,[r7,#7]
 1637 0052 022B     	 cmp r3,#2
 1638 0054 03D1     	 bne .L63
 1639              	 .loc 4 372 0 is_stmt 0 discriminator 1
 1640 0056 104B     	 ldr r3,.L66+12
 1641 0058 0222     	 movs r2,#2
 1642 005a 1A70     	 strb r2,[r3]
 1643 005c 13E0     	 b .L59
 1644              	.L63:
 373:../main.c     **** 	 else if(Hall_Initial == 0b011){sector = 3;}
 1645              	 .loc 4 373 0 is_stmt 1
 1646 005e FB79     	 ldrb r3,[r7,#7]
 1647 0060 032B     	 cmp r3,#3
 1648 0062 03D1     	 bne .L64
 1649              	 .loc 4 373 0 is_stmt 0 discriminator 1
 1650 0064 0C4B     	 ldr r3,.L66+12
 1651 0066 0322     	 movs r2,#3
 1652 0068 1A70     	 strb r2,[r3]
 1653 006a 0CE0     	 b .L59
 1654              	.L64:
 374:../main.c     **** 	 else if(Hall_Initial == 0b001){sector = 4;}
 1655              	 .loc 4 374 0 is_stmt 1
 1656 006c FB79     	 ldrb r3,[r7,#7]
 1657 006e 012B     	 cmp r3,#1
 1658 0070 03D1     	 bne .L65
 1659              	 .loc 4 374 0 is_stmt 0 discriminator 1
 1660 0072 094B     	 ldr r3,.L66+12
 1661 0074 0422     	 movs r2,#4
 1662 0076 1A70     	 strb r2,[r3]
 1663 0078 05E0     	 b .L59
 1664              	.L65:
 375:../main.c     **** 	 else if(Hall_Initial == 0b101){sector = 5;}
 1665              	 .loc 4 375 0 is_stmt 1
 1666 007a FB79     	 ldrb r3,[r7,#7]
 1667 007c 052B     	 cmp r3,#5
 1668 007e 02D1     	 bne .L59
 1669              	 .loc 4 375 0 is_stmt 0 discriminator 1
 1670 0080 054B     	 ldr r3,.L66+12
 1671 0082 0522     	 movs r2,#5
 1672 0084 1A70     	 strb r2,[r3]
 1673              	.L59:
 376:../main.c     **** }
 1674              	 .loc 4 376 0 is_stmt 1
 1675 0086 0C37     	 adds r7,r7,#12
 1676              	.LCFI73:
 1677              	 .cfi_def_cfa_offset 12
 1678 0088 BD46     	 mov sp,r7
 1679              	.LCFI74:
 1680              	 .cfi_def_cfa_register 13
 1681              	 
 1682 008a 90BD     	 pop {r4,r7,pc}
 1683              	.L67:
 1684              	 .align 2
 1685              	.L66:
 1686 008c 00000000 	 .word Hall_A_ISR
 1687 0090 00000000 	 .word Hall_B_ISR
 1688 0094 00000000 	 .word Hall_C_ISR
 1689 0098 00000000 	 .word sector
 1690              	 .cfi_endproc
 1691              	.LFE483:
 1693              	 .section .text.HallSensor,"ax",%progbits
 1694              	 .align 2
 1695              	 .global HallSensor
 1696              	 .thumb
 1697              	 .thumb_func
 1699              	HallSensor:
 1700              	.LFB484:
 377:../main.c     **** 
 378:../main.c     **** // Function to determine direction and current Sector
 379:../main.c     **** void HallSensor(void){
 1701              	 .loc 4 379 0
 1702              	 .cfi_startproc
 1703              	 
 1704              	 
 1705 0000 90B5     	 push {r4,r7,lr}
 1706              	.LCFI75:
 1707              	 .cfi_def_cfa_offset 12
 1708              	 .cfi_offset 4,-12
 1709              	 .cfi_offset 7,-8
 1710              	 .cfi_offset 14,-4
 1711 0002 83B0     	 sub sp,sp,#12
 1712              	.LCFI76:
 1713              	 .cfi_def_cfa_offset 24
 1714 0004 00AF     	 add r7,sp,#0
 1715              	.LCFI77:
 1716              	 .cfi_def_cfa_register 7
 380:../main.c     **** 	enc_val = enc_val << 3; //shift old values and make space for new ones
 1717              	 .loc 4 380 0
 1718 0006 2E4B     	 ldr r3,.L75
 1719 0008 1B88     	 ldrh r3,[r3]
 1720 000a 9BB2     	 uxth r3,r3
 1721 000c DB00     	 lsls r3,r3,#3
 1722 000e 9AB2     	 uxth r2,r3
 1723 0010 2B4B     	 ldr r3,.L75
 1724 0012 1A80     	 strh r2,[r3]
 381:../main.c     **** 	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(
 1725              	 .loc 4 381 0
 1726 0014 2B48     	 ldr r0,.L75+4
 1727 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1728 001a 0346     	 mov r3,r0
 1729 001c DBB2     	 uxtb r3,r3
 1730 001e 5B00     	 lsls r3,r3,#1
 1731 0020 DCB2     	 uxtb r4,r3
 1732 0022 2948     	 ldr r0,.L75+8
 1733 0024 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1734 0028 0346     	 mov r3,r0
 1735 002a DBB2     	 uxtb r3,r3
 1736 002c 2343     	 orrs r3,r3,r4
 1737 002e DBB2     	 uxtb r3,r3
 1738 0030 5B00     	 lsls r3,r3,#1
 1739 0032 DCB2     	 uxtb r4,r3
 1740 0034 2548     	 ldr r0,.L75+12
 1741 0036 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1742 003a 0346     	 mov r3,r0
 1743 003c DBB2     	 uxtb r3,r3
 1744 003e 2343     	 orrs r3,r3,r4
 1745 0040 FB71     	 strb r3,[r7,#7]
 382:../main.c     **** 	enc_val = enc_val | Hall_status; //read Sensor values and store them
 1746              	 .loc 4 382 0
 1747 0042 FB79     	 ldrb r3,[r7,#7]
 1748 0044 9AB2     	 uxth r2,r3
 1749 0046 1E4B     	 ldr r3,.L75
 1750 0048 1B88     	 ldrh r3,[r3]
 1751 004a 9BB2     	 uxth r3,r3
 1752 004c 1343     	 orrs r3,r3,r2
 1753 004e 9AB2     	 uxth r2,r3
 1754 0050 1B4B     	 ldr r3,.L75
 1755 0052 1A80     	 strh r2,[r3]
 383:../main.c     **** 	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual an
 1756              	 .loc 4 383 0
 1757 0054 1A4B     	 ldr r3,.L75
 1758 0056 1B88     	 ldrh r3,[r3]
 1759 0058 9BB2     	 uxth r3,r3
 1760 005a 03F03F03 	 and r3,r3,#63
 1761 005e 1C4A     	 ldr r2,.L75+16
 1762 0060 D25C     	 ldrb r2,[r2,r3]
 1763 0062 1C4B     	 ldr r3,.L75+20
 1764 0064 1A70     	 strb r2,[r3]
 384:../main.c     **** 
 385:../main.c     **** 	if(Hall_status == 0b100){sector = 0;}
 1765              	 .loc 4 385 0
 1766 0066 FB79     	 ldrb r3,[r7,#7]
 1767 0068 042B     	 cmp r3,#4
 1768 006a 03D1     	 bne .L69
 1769              	 .loc 4 385 0 is_stmt 0 discriminator 1
 1770 006c 1A4B     	 ldr r3,.L75+24
 1771 006e 0022     	 movs r2,#0
 1772 0070 1A70     	 strb r2,[r3]
 1773 0072 21E0     	 b .L68
 1774              	.L69:
 386:../main.c     **** 		 else if(Hall_status == 0b110){sector = 1;}
 1775              	 .loc 4 386 0 is_stmt 1
 1776 0074 FB79     	 ldrb r3,[r7,#7]
 1777 0076 062B     	 cmp r3,#6
 1778 0078 03D1     	 bne .L71
 1779              	 .loc 4 386 0 is_stmt 0 discriminator 1
 1780 007a 174B     	 ldr r3,.L75+24
 1781 007c 0122     	 movs r2,#1
 1782 007e 1A70     	 strb r2,[r3]
 1783 0080 1AE0     	 b .L68
 1784              	.L71:
 387:../main.c     **** 		 else if(Hall_status == 0b010){sector = 2;}
 1785              	 .loc 4 387 0 is_stmt 1
 1786 0082 FB79     	 ldrb r3,[r7,#7]
 1787 0084 022B     	 cmp r3,#2
 1788 0086 03D1     	 bne .L72
 1789              	 .loc 4 387 0 is_stmt 0 discriminator 1
 1790 0088 134B     	 ldr r3,.L75+24
 1791 008a 0222     	 movs r2,#2
 1792 008c 1A70     	 strb r2,[r3]
 1793 008e 13E0     	 b .L68
 1794              	.L72:
 388:../main.c     **** 		 else if(Hall_status == 0b011){sector = 3;}
 1795              	 .loc 4 388 0 is_stmt 1
 1796 0090 FB79     	 ldrb r3,[r7,#7]
 1797 0092 032B     	 cmp r3,#3
 1798 0094 03D1     	 bne .L73
 1799              	 .loc 4 388 0 is_stmt 0 discriminator 1
 1800 0096 104B     	 ldr r3,.L75+24
 1801 0098 0322     	 movs r2,#3
 1802 009a 1A70     	 strb r2,[r3]
 1803 009c 0CE0     	 b .L68
 1804              	.L73:
 389:../main.c     **** 		 else if(Hall_status == 0b001){sector = 4;}
 1805              	 .loc 4 389 0 is_stmt 1
 1806 009e FB79     	 ldrb r3,[r7,#7]
 1807 00a0 012B     	 cmp r3,#1
 1808 00a2 03D1     	 bne .L74
 1809              	 .loc 4 389 0 is_stmt 0 discriminator 1
 1810 00a4 0C4B     	 ldr r3,.L75+24
 1811 00a6 0422     	 movs r2,#4
 1812 00a8 1A70     	 strb r2,[r3]
 1813 00aa 05E0     	 b .L68
 1814              	.L74:
 390:../main.c     **** 		 else if(Hall_status == 0b101){sector = 5;}
 1815              	 .loc 4 390 0 is_stmt 1
 1816 00ac FB79     	 ldrb r3,[r7,#7]
 1817 00ae 052B     	 cmp r3,#5
 1818 00b0 02D1     	 bne .L68
 1819              	 .loc 4 390 0 is_stmt 0 discriminator 1
 1820 00b2 094B     	 ldr r3,.L75+24
 1821 00b4 0522     	 movs r2,#5
 1822 00b6 1A70     	 strb r2,[r3]
 1823              	.L68:
 391:../main.c     **** 
 392:../main.c     **** }
 1824              	 .loc 4 392 0 is_stmt 1
 1825 00b8 0C37     	 adds r7,r7,#12
 1826              	.LCFI78:
 1827              	 .cfi_def_cfa_offset 12
 1828 00ba BD46     	 mov sp,r7
 1829              	.LCFI79:
 1830              	 .cfi_def_cfa_register 13
 1831              	 
 1832 00bc 90BD     	 pop {r4,r7,pc}
 1833              	.L76:
 1834 00be 00BF     	 .align 2
 1835              	.L75:
 1836 00c0 00000000 	 .word enc_val
 1837 00c4 00000000 	 .word Hall_A_ISR
 1838 00c8 00000000 	 .word Hall_B_ISR
 1839 00cc 00000000 	 .word Hall_C_ISR
 1840 00d0 00000000 	 .word lookup_table
 1841 00d4 00000000 	 .word direction
 1842 00d8 00000000 	 .word sector
 1843              	 .cfi_endproc
 1844              	.LFE484:
 1846              	 .global __aeabi_ui2d
 1847              	 .global __aeabi_i2d
 1848              	 .global __aeabi_dsub
 1849              	 .section .text.Calculation,"ax",%progbits
 1850              	 .align 2
 1851              	 .global Calculation
 1852              	 .thumb
 1853              	 .thumb_func
 1855              	Calculation:
 1856              	.LFB485:
 393:../main.c     **** // Routine for calculation (sector, clark-Park trans.,...)
 394:../main.c     **** 
 395:../main.c     **** //5kHz loop since every 4th step of 50us --> 200us --> 5kHz
 396:../main.c     **** void Calculation(void){
 1857              	 .loc 4 396 0
 1858              	 .cfi_startproc
 1859              	 
 1860              	 
 1861 0000 B0B5     	 push {r4,r5,r7,lr}
 1862              	.LCFI80:
 1863              	 .cfi_def_cfa_offset 16
 1864              	 .cfi_offset 4,-16
 1865              	 .cfi_offset 5,-12
 1866              	 .cfi_offset 7,-8
 1867              	 .cfi_offset 14,-4
 1868 0002 2DED028B 	 fstmfdd sp!,{d8}
 1869              	.LCFI81:
 1870              	 .cfi_def_cfa_offset 24
 1871              	 .cfi_offset 80,-24
 1872              	 .cfi_offset 81,-20
 1873 0006 84B0     	 sub sp,sp,#16
 1874              	.LCFI82:
 1875              	 .cfi_def_cfa_offset 40
 1876 0008 00AF     	 add r7,sp,#0
 1877              	.LCFI83:
 1878              	 .cfi_def_cfa_register 7
 397:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 1879              	 .loc 4 397 0
 1880 000a AF48     	 ldr r0,.L130
 1881 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 398:../main.c     **** 		// Actual time since last angle update via Hall Sensor
 399:../main.c     **** 		uint32_t t;
 400:../main.c     **** 		if(last_Hall_trig == 'A') t = time_since_A;
 1882              	 .loc 4 400 0
 1883 0010 AE4B     	 ldr r3,.L130+4
 1884 0012 1B78     	 ldrb r3,[r3]
 1885 0014 DBB2     	 uxtb r3,r3
 1886 0016 412B     	 cmp r3,#65
 1887 0018 03D1     	 bne .L78
 1888              	 .loc 4 400 0 is_stmt 0 discriminator 1
 1889 001a AD4B     	 ldr r3,.L130+8
 1890 001c 1B68     	 ldr r3,[r3]
 1891 001e FB60     	 str r3,[r7,#12]
 1892 0020 10E0     	 b .L79
 1893              	.L78:
 401:../main.c     **** 		else if(last_Hall_trig == 'B') t = time_since_B;
 1894              	 .loc 4 401 0 is_stmt 1
 1895 0022 AA4B     	 ldr r3,.L130+4
 1896 0024 1B78     	 ldrb r3,[r3]
 1897 0026 DBB2     	 uxtb r3,r3
 1898 0028 422B     	 cmp r3,#66
 1899 002a 03D1     	 bne .L80
 1900              	 .loc 4 401 0 is_stmt 0 discriminator 1
 1901 002c A94B     	 ldr r3,.L130+12
 1902 002e 1B68     	 ldr r3,[r3]
 1903 0030 FB60     	 str r3,[r7,#12]
 1904 0032 07E0     	 b .L79
 1905              	.L80:
 402:../main.c     **** 		else if(last_Hall_trig == 'C') t = time_since_C;
 1906              	 .loc 4 402 0 is_stmt 1
 1907 0034 A54B     	 ldr r3,.L130+4
 1908 0036 1B78     	 ldrb r3,[r3]
 1909 0038 DBB2     	 uxtb r3,r3
 1910 003a 432B     	 cmp r3,#67
 1911 003c 02D1     	 bne .L79
 1912              	 .loc 4 402 0 is_stmt 0 discriminator 1
 1913 003e A64B     	 ldr r3,.L130+16
 1914 0040 1B68     	 ldr r3,[r3]
 1915 0042 FB60     	 str r3,[r7,#12]
 1916              	.L79:
 403:../main.c     **** 		time_180deg_cal = time_180deg;
 1917              	 .loc 4 403 0 is_stmt 1
 1918 0044 A54B     	 ldr r3,.L130+20
 1919 0046 1B68     	 ldr r3,[r3]
 1920 0048 A54A     	 ldr r2,.L130+24
 1921 004a 1360     	 str r3,[r2]
 404:../main.c     **** 		// not fixing sector for calc because if chainges better to do so
 405:../main.c     **** 
 406:../main.c     **** 		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 1922              	 .loc 4 406 0
 1923 004c A44B     	 ldr r3,.L130+24
 1924 004e 1B68     	 ldr r3,[r3]
 1925 0050 40F6C412 	 movw r2,#2500
 1926 0054 9342     	 cmp r3,r2
 1927 0056 04D9     	 bls .L81
 1928              	 .loc 4 406 0 is_stmt 0 discriminator 1
 1929 0058 A14B     	 ldr r3,.L130+24
 1930 005a 40F6C412 	 movw r2,#2500
 1931 005e 1A60     	 str r2,[r3]
 1932 0060 06E0     	 b .L82
 1933              	.L81:
 407:../main.c     **** 		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 1934              	 .loc 4 407 0 is_stmt 1
 1935 0062 9F4B     	 ldr r3,.L130+24
 1936 0064 1B68     	 ldr r3,[r3]
 1937 0066 012B     	 cmp r3,#1
 1938 0068 02D8     	 bhi .L82
 1939              	 .loc 4 407 0 is_stmt 0 discriminator 1
 1940 006a 9D4B     	 ldr r3,.L130+24
 1941 006c 0222     	 movs r2,#2
 1942 006e 1A60     	 str r2,[r3]
 1943              	.L82:
 408:../main.c     **** 
 409:../main.c     **** 		if(t < TIME_OMEGA_0){
 1944              	 .loc 4 409 0 is_stmt 1
 1945 0070 FB68     	 ldr r3,[r7,#12]
 1946 0072 41F28732 	 movw r2,#4999
 1947 0076 9342     	 cmp r3,r2
 1948 0078 35D8     	 bhi .L83
 410:../main.c     **** 			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 1949              	 .loc 4 410 0
 1950 007a 994B     	 ldr r3,.L130+24
 1951 007c 1B68     	 ldr r3,[r3]
 1952 007e 07EE903A 	 fmsr s15,r3
 1953 0082 F8EE677A 	 fuitos s15,s15
 1954 0086 17EE900A 	 fmrs r0,s15
 1955 008a FFF7FEFF 	 bl __aeabi_f2d
 1956 008e 0246     	 mov r2,r0
 1957 0090 0B46     	 mov r3,r1
 1958 0092 4FF00000 	 mov r0,#0
 1959 0096 9349     	 ldr r1,.L130+28
 1960 0098 FFF7FEFF 	 bl __aeabi_ddiv
 1961 009c 0246     	 mov r2,r0
 1962 009e 0B46     	 mov r3,r1
 1963 00a0 1446     	 mov r4,r2
 1964 00a2 1D46     	 mov r5,r3
 1965 00a4 F868     	 ldr r0,[r7,#12]
 1966 00a6 FFF7FEFF 	 bl __aeabi_ui2d
 1967 00aa 0246     	 mov r2,r0
 1968 00ac 0B46     	 mov r3,r1
 1969 00ae 2046     	 mov r0,r4
 1970 00b0 2946     	 mov r1,r5
 1971 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1972 00b6 0246     	 mov r2,r0
 1973 00b8 0B46     	 mov r3,r1
 1974 00ba 1046     	 mov r0,r2
 1975 00bc 1946     	 mov r1,r3
 1976 00be FFF7FEFF 	 bl __aeabi_d2f
 1977 00c2 0246     	 mov r2,r0
 1978 00c4 884B     	 ldr r3,.L130+32
 1979 00c6 1A60     	 str r2,[r3]
 411:../main.c     **** 			if(angle_in_sector > 60) angle_in_sector = 60;
 1980              	 .loc 4 411 0
 1981 00c8 874B     	 ldr r3,.L130+32
 1982 00ca D3ED007A 	 flds s15,[r3]
 1983 00ce 9FED877A 	 flds s14,.L130+36
 1984 00d2 F4EEC77A 	 fcmpes s15,s14
 1985 00d6 F1EE10FA 	 fmstat
 1986 00da 00DC     	 bgt .L117
 1987 00dc 06E0     	 b .L86
 1988              	.L117:
 1989              	 .loc 4 411 0 is_stmt 0 discriminator 1
 1990 00de 824B     	 ldr r3,.L130+32
 1991 00e0 834A     	 ldr r2,.L130+40
 1992 00e2 1A60     	 str r2,[r3]
 1993 00e4 02E0     	 b .L86
 1994              	.L83:
 412:../main.c     **** 		}
 413:../main.c     **** 		else{
 414:../main.c     **** 			angle_in_sector = 30; // standig still
 1995              	 .loc 4 414 0 is_stmt 1
 1996 00e6 804B     	 ldr r3,.L130+32
 1997 00e8 824A     	 ldr r2,.L130+44
 1998 00ea 1A60     	 str r2,[r3]
 1999              	.L86:
 415:../main.c     **** 		}
 416:../main.c     **** 
 417:../main.c     **** 		// CW
 418:../main.c     **** 		if(direction==1)
 2000              	 .loc 4 418 0
 2001 00ec 824B     	 ldr r3,.L130+48
 2002 00ee 1B78     	 ldrb r3,[r3]
 2003 00f0 DBB2     	 uxtb r3,r3
 2004 00f2 5BB2     	 sxtb r3,r3
 2005 00f4 012B     	 cmp r3,#1
 2006 00f6 54D1     	 bne .L87
 419:../main.c     **** 		{
 420:../main.c     **** 			angle_phi = (sector*60.0)+angle_in_sector;
 2007              	 .loc 4 420 0
 2008 00f8 804B     	 ldr r3,.L130+52
 2009 00fa 1B78     	 ldrb r3,[r3]
 2010 00fc DBB2     	 uxtb r3,r3
 2011 00fe 5BB2     	 sxtb r3,r3
 2012 0100 1846     	 mov r0,r3
 2013 0102 FFF7FEFF 	 bl __aeabi_i2d
 2014 0106 0246     	 mov r2,r0
 2015 0108 0B46     	 mov r3,r1
 2016 010a 1046     	 mov r0,r2
 2017 010c 1946     	 mov r1,r3
 2018 010e 4FF00002 	 mov r2,#0
 2019 0112 7B4B     	 ldr r3,.L130+56
 2020 0114 FFF7FEFF 	 bl __aeabi_dmul
 2021 0118 0246     	 mov r2,r0
 2022 011a 0B46     	 mov r3,r1
 2023 011c 1446     	 mov r4,r2
 2024 011e 1D46     	 mov r5,r3
 2025 0120 714B     	 ldr r3,.L130+32
 2026 0122 1B68     	 ldr r3,[r3]
 2027 0124 1846     	 mov r0,r3
 2028 0126 FFF7FEFF 	 bl __aeabi_f2d
 2029 012a 0246     	 mov r2,r0
 2030 012c 0B46     	 mov r3,r1
 2031 012e 2046     	 mov r0,r4
 2032 0130 2946     	 mov r1,r5
 2033 0132 FFF7FEFF 	 bl __aeabi_dadd
 2034 0136 0246     	 mov r2,r0
 2035 0138 0B46     	 mov r3,r1
 2036 013a 1046     	 mov r0,r2
 2037 013c 1946     	 mov r1,r3
 2038 013e FFF7FEFF 	 bl __aeabi_d2f
 2039 0142 0246     	 mov r2,r0
 2040 0144 6F4B     	 ldr r3,.L130+60
 2041 0146 1A60     	 str r2,[r3]
 421:../main.c     **** 			angle_phi=angle_phi+offset_pos;
 2042              	 .loc 4 421 0
 2043 0148 6E4B     	 ldr r3,.L130+60
 2044 014a 93ED007A 	 flds s14,[r3]
 2045 014e 6E4B     	 ldr r3,.L130+64
 2046 0150 D3ED007A 	 flds s15,[r3]
 2047 0154 77EE277A 	 fadds s15,s14,s15
 2048 0158 6A4B     	 ldr r3,.L130+60
 2049 015a C3ED007A 	 fsts s15,[r3]
 422:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2050              	 .loc 4 422 0
 2051 015e 694B     	 ldr r3,.L130+60
 2052 0160 D3ED007A 	 flds s15,[r3]
 2053 0164 9FED697A 	 flds s14,.L130+68
 2054 0168 F4EEC77A 	 fcmpes s15,s14
 2055 016c F1EE10FA 	 fmstat
 2056 0170 09DD     	 ble .L88
 2057              	 .loc 4 422 0 is_stmt 0 discriminator 1
 2058 0172 644B     	 ldr r3,.L130+60
 2059 0174 D3ED007A 	 flds s15,[r3]
 2060 0178 9FED647A 	 flds s14,.L130+68
 2061 017c 77EEC77A 	 fsubs s15,s15,s14
 2062 0180 604B     	 ldr r3,.L130+60
 2063 0182 C3ED007A 	 fsts s15,[r3]
 2064              	.L88:
 423:../main.c     **** 
 424:../main.c     **** 			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
 2065              	 .loc 4 424 0 is_stmt 1
 2066 0186 564B     	 ldr r3,.L130+24
 2067 0188 1B68     	 ldr r3,[r3]
 2068 018a 07EE903A 	 fmsr s15,r3
 2069 018e F8EE677A 	 fuitos s15,s15
 2070 0192 9FED5F7A 	 flds s14,.L130+72
 2071 0196 C7EE277A 	 fdivs s15,s14,s15
 2072 019a 5E4B     	 ldr r3,.L130+76
 2073 019c C3ED007A 	 fsts s15,[r3]
 2074 01a0 6FE0     	 b .L90
 2075              	.L87:
 425:../main.c     **** 		}
 426:../main.c     **** 		// CCW
 427:../main.c     **** 		else{
 428:../main.c     **** 			angle_phi = (sector*60.0)-angle_in_sector;
 2076              	 .loc 4 428 0
 2077 01a2 564B     	 ldr r3,.L130+52
 2078 01a4 1B78     	 ldrb r3,[r3]
 2079 01a6 DBB2     	 uxtb r3,r3
 2080 01a8 5BB2     	 sxtb r3,r3
 2081 01aa 1846     	 mov r0,r3
 2082 01ac FFF7FEFF 	 bl __aeabi_i2d
 2083 01b0 0246     	 mov r2,r0
 2084 01b2 0B46     	 mov r3,r1
 2085 01b4 1046     	 mov r0,r2
 2086 01b6 1946     	 mov r1,r3
 2087 01b8 4FF00002 	 mov r2,#0
 2088 01bc 504B     	 ldr r3,.L130+56
 2089 01be FFF7FEFF 	 bl __aeabi_dmul
 2090 01c2 0246     	 mov r2,r0
 2091 01c4 0B46     	 mov r3,r1
 2092 01c6 1446     	 mov r4,r2
 2093 01c8 1D46     	 mov r5,r3
 2094 01ca 474B     	 ldr r3,.L130+32
 2095 01cc 1B68     	 ldr r3,[r3]
 2096 01ce 1846     	 mov r0,r3
 2097 01d0 FFF7FEFF 	 bl __aeabi_f2d
 2098 01d4 0246     	 mov r2,r0
 2099 01d6 0B46     	 mov r3,r1
 2100 01d8 2046     	 mov r0,r4
 2101 01da 2946     	 mov r1,r5
 2102 01dc FFF7FEFF 	 bl __aeabi_dsub
 2103 01e0 0246     	 mov r2,r0
 2104 01e2 0B46     	 mov r3,r1
 2105 01e4 1046     	 mov r0,r2
 2106 01e6 1946     	 mov r1,r3
 2107 01e8 FFF7FEFF 	 bl __aeabi_d2f
 2108 01ec 0246     	 mov r2,r0
 2109 01ee 454B     	 ldr r3,.L130+60
 2110 01f0 1A60     	 str r2,[r3]
 429:../main.c     **** 			angle_phi = angle_phi+60.0;
 2111              	 .loc 4 429 0
 2112 01f2 444B     	 ldr r3,.L130+60
 2113 01f4 D3ED007A 	 flds s15,[r3]
 2114 01f8 9FED3C7A 	 flds s14,.L130+36
 2115 01fc 77EE877A 	 fadds s15,s15,s14
 2116 0200 404B     	 ldr r3,.L130+60
 2117 0202 C3ED007A 	 fsts s15,[r3]
 430:../main.c     **** 			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 2118              	 .loc 4 430 0
 2119 0206 3F4B     	 ldr r3,.L130+60
 2120 0208 D3ED007A 	 flds s15,[r3]
 2121 020c F5EEC07A 	 fcmpezs s15
 2122 0210 F1EE10FA 	 fmstat
 2123 0214 09D5     	 bpl .L91
 2124              	 .loc 4 430 0 is_stmt 0 discriminator 1
 2125 0216 3B4B     	 ldr r3,.L130+60
 2126 0218 D3ED007A 	 flds s15,[r3]
 2127 021c 9FED3B7A 	 flds s14,.L130+68
 2128 0220 77EE877A 	 fadds s15,s15,s14
 2129 0224 374B     	 ldr r3,.L130+60
 2130 0226 C3ED007A 	 fsts s15,[r3]
 2131              	.L91:
 431:../main.c     **** 			angle_phi=angle_phi+offset_neg;
 2132              	 .loc 4 431 0 is_stmt 1
 2133 022a 364B     	 ldr r3,.L130+60
 2134 022c 93ED007A 	 flds s14,[r3]
 2135 0230 394B     	 ldr r3,.L130+80
 2136 0232 D3ED007A 	 flds s15,[r3]
 2137 0236 77EE277A 	 fadds s15,s14,s15
 2138 023a 324B     	 ldr r3,.L130+60
 2139 023c C3ED007A 	 fsts s15,[r3]
 432:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2140              	 .loc 4 432 0
 2141 0240 304B     	 ldr r3,.L130+60
 2142 0242 D3ED007A 	 flds s15,[r3]
 2143 0246 9FED317A 	 flds s14,.L130+68
 2144 024a F4EEC77A 	 fcmpes s15,s14
 2145 024e F1EE10FA 	 fmstat
 2146 0252 09DD     	 ble .L93
 2147              	 .loc 4 432 0 is_stmt 0 discriminator 1
 2148 0254 2B4B     	 ldr r3,.L130+60
 2149 0256 D3ED007A 	 flds s15,[r3]
 2150 025a 9FED2C7A 	 flds s14,.L130+68
 2151 025e 77EEC77A 	 fsubs s15,s15,s14
 2152 0262 284B     	 ldr r3,.L130+60
 2153 0264 C3ED007A 	 fsts s15,[r3]
 2154              	.L93:
 433:../main.c     **** 
 434:../main.c     **** 			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
 2155              	 .loc 4 434 0 is_stmt 1
 2156 0268 1D4B     	 ldr r3,.L130+24
 2157 026a 1B68     	 ldr r3,[r3]
 2158 026c 07EE903A 	 fmsr s15,r3
 2159 0270 F8EE677A 	 fuitos s15,s15
 2160 0274 9FED297A 	 flds s14,.L130+84
 2161 0278 C7EE277A 	 fdivs s15,s14,s15
 2162 027c 254B     	 ldr r3,.L130+76
 2163 027e C3ED007A 	 fsts s15,[r3]
 2164              	.L90:
 435:../main.c     **** 		}
 436:../main.c     **** 
 437:../main.c     **** 		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large pea
 2165              	 .loc 4 437 0
 2166 0282 244B     	 ldr r3,.L130+76
 2167 0284 D3ED007A 	 flds s15,[r3]
 2168 0288 9FED257A 	 flds s14,.L130+88
 2169 028c F4EEC77A 	 fcmpes s15,s14
 2170 0290 F1EE10FA 	 fmstat
 2171 0294 0DD5     	 bpl .L95
 2172              	 .loc 4 437 0 is_stmt 0 discriminator 1
 2173 0296 1F4B     	 ldr r3,.L130+76
 2174 0298 D3ED007A 	 flds s15,[r3]
 2175 029c 9FED217A 	 flds s14,.L130+92
 2176 02a0 F4EEC77A 	 fcmpes s15,s14
 2177 02a4 F1EE10FA 	 fmstat
 2178 02a8 03DD     	 ble .L95
 438:../main.c     **** 		{
 439:../main.c     **** 			omega_mech_rps = (float)omega_mech_rps_temp;
 2179              	 .loc 4 439 0 is_stmt 1
 2180 02aa 1A4B     	 ldr r3,.L130+76
 2181 02ac 1B68     	 ldr r3,[r3]
 2182 02ae 1E4A     	 ldr r2,.L130+96
 2183 02b0 1360     	 str r3,[r2]
 2184              	.L95:
 440:../main.c     **** 		}
 441:../main.c     **** 
 442:../main.c     **** 		if(t > TIME_OMEGA_0){omega_ele_rads = 0;} // set omega  to 0 if no more hall detected
 2185              	 .loc 4 442 0
 2186 02b2 FB68     	 ldr r3,[r7,#12]
 2187 02b4 41F28832 	 movw r2,#5000
 2188 02b8 9342     	 cmp r3,r2
 2189 02ba 39D9     	 bls .L98
 2190              	 .loc 4 442 0 is_stmt 0 discriminator 1
 2191 02bc 1B4B     	 ldr r3,.L130+100
 2192 02be 4FF00002 	 mov r2,#0
 2193 02c2 1A60     	 str r2,[r3]
 2194 02c4 58E0     	 b .L99
 2195              	.L131:
 2196 02c6 00BF     	 .align 2
 2197              	.L130:
 2198 02c8 00000000 	 .word status_LED_red_cal_time
 2199 02cc 00000000 	 .word last_Hall_trig
 2200 02d0 00000000 	 .word time_since_A
 2201 02d4 00000000 	 .word time_since_B
 2202 02d8 00000000 	 .word time_since_C
 2203 02dc 00000000 	 .word time_180deg
 2204 02e0 00000000 	 .word time_180deg_cal
 2205 02e4 00806640 	 .word 1080459264
 2206 02e8 00000000 	 .word angle_in_sector
 2207 02ec 00007042 	 .word 1114636288
 2208 02f0 00007042 	 .word 1114636288
 2209 02f4 0000F041 	 .word 1106247680
 2210 02f8 00000000 	 .word direction
 2211 02fc 00000000 	 .word sector
 2212 0300 00004E40 	 .word 1078853632
 2213 0304 00000000 	 .word angle_phi
 2214 0308 00000000 	 .word offset_pos
 2215 030c 0000B443 	 .word 1135869952
 2216 0310 0000E143 	 .word 1138819072
 2217 0314 00000000 	 .word omega_mech_rps_temp
 2218 0318 00000000 	 .word offset_neg
 2219 031c 0000E1C3 	 .word -1008664576
 2220 0320 00004843 	 .word 1128792064
 2221 0324 000048C3 	 .word -1018691584
 2222 0328 00000000 	 .word omega_mech_rps
 2223 032c 00000000 	 .word omega_ele_rads
 2224              	.L98:
 443:../main.c     **** 		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s
 2225              	 .loc 4 443 0 is_stmt 1
 2226 0330 A34B     	 ldr r3,.L132+40
 2227 0332 D3ED007A 	 flds s15,[r3]
 2228 0336 77EEA77A 	 fadds s15,s15,s15
 2229 033a 17EE900A 	 fmrs r0,s15
 2230 033e FFF7FEFF 	 bl __aeabi_f2d
 2231 0342 0246     	 mov r2,r0
 2232 0344 0B46     	 mov r3,r1
 2233 0346 1046     	 mov r0,r2
 2234 0348 1946     	 mov r1,r3
 2235 034a 93A3     	 adr r3,.L132
 2236 034c D3E90023 	 ldrd r2,[r3]
 2237 0350 FFF7FEFF 	 bl __aeabi_dmul
 2238 0354 0246     	 mov r2,r0
 2239 0356 0B46     	 mov r3,r1
 2240 0358 1046     	 mov r0,r2
 2241 035a 1946     	 mov r1,r3
 2242 035c 4FF00002 	 mov r2,#0
 2243 0360 984B     	 ldr r3,.L132+44
 2244 0362 FFF7FEFF 	 bl __aeabi_dmul
 2245 0366 0246     	 mov r2,r0
 2246 0368 0B46     	 mov r3,r1
 2247 036a 1046     	 mov r0,r2
 2248 036c 1946     	 mov r1,r3
 2249 036e FFF7FEFF 	 bl __aeabi_d2f
 2250 0372 0246     	 mov r2,r0
 2251 0374 944B     	 ldr r3,.L132+48
 2252 0376 1A60     	 str r2,[r3]
 2253              	.L99:
 444:../main.c     **** 
 445:../main.c     **** 		omega_ele_degs = omega_ele_rads / Pi180;
 2254              	 .loc 4 445 0
 2255 0378 934B     	 ldr r3,.L132+48
 2256 037a 1B68     	 ldr r3,[r3]
 2257 037c 1846     	 mov r0,r3
 2258 037e FFF7FEFF 	 bl __aeabi_f2d
 2259 0382 0246     	 mov r2,r0
 2260 0384 0B46     	 mov r3,r1
 2261 0386 1046     	 mov r0,r2
 2262 0388 1946     	 mov r1,r3
 2263 038a 85A3     	 adr r3,.L132+8
 2264 038c D3E90023 	 ldrd r2,[r3]
 2265 0390 FFF7FEFF 	 bl __aeabi_ddiv
 2266 0394 0246     	 mov r2,r0
 2267 0396 0B46     	 mov r3,r1
 2268 0398 1046     	 mov r0,r2
 2269 039a 1946     	 mov r1,r3
 2270 039c FFF7FEFF 	 bl __aeabi_d2f
 2271 03a0 0246     	 mov r2,r0
 2272 03a2 8A4B     	 ldr r3,.L132+52
 2273 03a4 1A60     	 str r2,[r3]
 446:../main.c     **** 
 447:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% 
 448:../main.c     **** 
 449:../main.c     **** 		// Current read out over SPI
 450:../main.c     **** 		Current_U = readCurrent(ChipSelect_U);
 2274              	 .loc 4 450 0
 2275 03a6 0620     	 movs r0,#6
 2276 03a8 FFF7FEFF 	 bl readCurrent
 2277 03ac 0246     	 mov r2,r0
 2278 03ae 884B     	 ldr r3,.L132+56
 2279 03b0 1A60     	 str r2,[r3]
 451:../main.c     **** 		Current_V = readCurrent(ChipSelect_V);
 2280              	 .loc 4 451 0
 2281 03b2 0520     	 movs r0,#5
 2282 03b4 FFF7FEFF 	 bl readCurrent
 2283 03b8 0246     	 mov r2,r0
 2284 03ba 864B     	 ldr r3,.L132+60
 2285 03bc 1A60     	 str r2,[r3]
 452:../main.c     **** 		Current_W = readCurrent(ChipSelect_W);
 2286              	 .loc 4 452 0
 2287 03be 0320     	 movs r0,#3
 2288 03c0 FFF7FEFF 	 bl readCurrent
 2289 03c4 0246     	 mov r2,r0
 2290 03c6 844B     	 ldr r3,.L132+64
 2291 03c8 1A60     	 str r2,[r3]
 453:../main.c     **** 
 454:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of th
 455:../main.c     **** 
 456:../main.c     **** 		// conversion from rad/s to degree
 457:../main.c     **** 		float angle_phi_rad = angle_phi*Pi180;
 2292              	 .loc 4 457 0
 2293 03ca 844B     	 ldr r3,.L132+68
 2294 03cc 1B68     	 ldr r3,[r3]
 2295 03ce 1846     	 mov r0,r3
 2296 03d0 FFF7FEFF 	 bl __aeabi_f2d
 2297 03d4 0246     	 mov r2,r0
 2298 03d6 0B46     	 mov r3,r1
 2299 03d8 1046     	 mov r0,r2
 2300 03da 1946     	 mov r1,r3
 2301 03dc 70A3     	 adr r3,.L132+8
 2302 03de D3E90023 	 ldrd r2,[r3]
 2303 03e2 FFF7FEFF 	 bl __aeabi_dmul
 2304 03e6 0246     	 mov r2,r0
 2305 03e8 0B46     	 mov r3,r1
 2306 03ea 1046     	 mov r0,r2
 2307 03ec 1946     	 mov r1,r3
 2308 03ee FFF7FEFF 	 bl __aeabi_d2f
 2309 03f2 0346     	 mov r3,r0
 2310 03f4 BB60     	 str r3,[r7,#8]
 458:../main.c     **** 
 459:../main.c     **** 		// to decrease multiple calculations and computational effort
 460:../main.c     **** 		float cos_phi = cosf(angle_phi_rad);
 2311              	 .loc 4 460 0
 2312 03f6 B868     	 ldr r0,[r7,#8]
 2313 03f8 FFF7FEFF 	 bl cosf
 2314 03fc 7860     	 str r0,[r7,#4]
 461:../main.c     **** 		float sin_phi = sinf(angle_phi_rad);
 2315              	 .loc 4 461 0
 2316 03fe B868     	 ldr r0,[r7,#8]
 2317 0400 FFF7FEFF 	 bl sinf
 2318 0404 3860     	 str r0,[r7]
 462:../main.c     **** 
 463:../main.c     **** 		// Clark-Park transformation (from U,V,W to dq)
 464:../main.c     **** 		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-
 2319              	 .loc 4 464 0
 2320 0406 724B     	 ldr r3,.L132+56
 2321 0408 93ED007A 	 flds s14,[r3]
 2322 040c D7ED017A 	 flds s15,[r7,#4]
 2323 0410 27EE278A 	 fmuls s16,s14,s15
 2324 0414 B868     	 ldr r0,[r7,#8]
 2325 0416 FFF7FEFF 	 bl __aeabi_f2d
 2326 041a 0246     	 mov r2,r0
 2327 041c 0B46     	 mov r3,r1
 2328 041e 1046     	 mov r0,r2
 2329 0420 1946     	 mov r1,r3
 2330 0422 61A3     	 adr r3,.L132+16
 2331 0424 D3E90023 	 ldrd r2,[r3]
 2332 0428 FFF7FEFF 	 bl __aeabi_dsub
 2333 042c 0246     	 mov r2,r0
 2334 042e 0B46     	 mov r3,r1
 2335 0430 1046     	 mov r0,r2
 2336 0432 1946     	 mov r1,r3
 2337 0434 FFF7FEFF 	 bl __aeabi_d2f
 2338 0438 0346     	 mov r3,r0
 2339 043a 1846     	 mov r0,r3
 2340 043c FFF7FEFF 	 bl cosf
 2341 0440 07EE100A 	 fmsr s14,r0
 2342 0444 634B     	 ldr r3,.L132+60
 2343 0446 D3ED007A 	 flds s15,[r3]
 2344 044a 67EE277A 	 fmuls s15,s14,s15
 2345 044e 38EE278A 	 fadds s16,s16,s15
 2346 0452 B868     	 ldr r0,[r7,#8]
 2347 0454 FFF7FEFF 	 bl __aeabi_f2d
 2348 0458 0246     	 mov r2,r0
 2349 045a 0B46     	 mov r3,r1
 2350 045c 1046     	 mov r0,r2
 2351 045e 1946     	 mov r1,r3
 2352 0460 53A3     	 adr r3,.L132+24
 2353 0462 D3E90023 	 ldrd r2,[r3]
 2354 0466 FFF7FEFF 	 bl __aeabi_dsub
 2355 046a 0246     	 mov r2,r0
 2356 046c 0B46     	 mov r3,r1
 2357 046e 1046     	 mov r0,r2
 2358 0470 1946     	 mov r1,r3
 2359 0472 FFF7FEFF 	 bl __aeabi_d2f
 2360 0476 0346     	 mov r3,r0
 2361 0478 1846     	 mov r0,r3
 2362 047a FFF7FEFF 	 bl cosf
 2363 047e 07EE100A 	 fmsr s14,r0
 2364 0482 554B     	 ldr r3,.L132+64
 2365 0484 D3ED007A 	 flds s15,[r3]
 2366 0488 67EE277A 	 fmuls s15,s14,s15
 2367 048c 78EE277A 	 fadds s15,s16,s15
 2368 0490 17EE900A 	 fmrs r0,s15
 2369 0494 FFF7FEFF 	 bl __aeabi_f2d
 2370 0498 0246     	 mov r2,r0
 2371 049a 0B46     	 mov r3,r1
 2372 049c 1046     	 mov r0,r2
 2373 049e 1946     	 mov r1,r3
 2374 04a0 45A3     	 adr r3,.L132+32
 2375 04a2 D3E90023 	 ldrd r2,[r3]
 2376 04a6 FFF7FEFF 	 bl __aeabi_dmul
 2377 04aa 0246     	 mov r2,r0
 2378 04ac 0B46     	 mov r3,r1
 2379 04ae 1046     	 mov r0,r2
 2380 04b0 1946     	 mov r1,r3
 2381 04b2 FFF7FEFF 	 bl __aeabi_d2f
 2382 04b6 0246     	 mov r2,r0
 2383 04b8 494B     	 ldr r3,.L132+72
 2384 04ba 1A60     	 str r2,[r3]
 465:../main.c     **** 		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad
 2385              	 .loc 4 465 0
 2386 04bc D7ED007A 	 flds s15,[r7]
 2387 04c0 B1EE677A 	 fnegs s14,s15
 2388 04c4 424B     	 ldr r3,.L132+56
 2389 04c6 D3ED007A 	 flds s15,[r3]
 2390 04ca 27EE278A 	 fmuls s16,s14,s15
 2391 04ce B868     	 ldr r0,[r7,#8]
 2392 04d0 FFF7FEFF 	 bl __aeabi_f2d
 2393 04d4 0246     	 mov r2,r0
 2394 04d6 0B46     	 mov r3,r1
 2395 04d8 1046     	 mov r0,r2
 2396 04da 1946     	 mov r1,r3
 2397 04dc 32A3     	 adr r3,.L132+16
 2398 04de D3E90023 	 ldrd r2,[r3]
 2399 04e2 FFF7FEFF 	 bl __aeabi_dsub
 2400 04e6 0246     	 mov r2,r0
 2401 04e8 0B46     	 mov r3,r1
 2402 04ea 1046     	 mov r0,r2
 2403 04ec 1946     	 mov r1,r3
 2404 04ee FFF7FEFF 	 bl __aeabi_d2f
 2405 04f2 0346     	 mov r3,r0
 2406 04f4 1846     	 mov r0,r3
 2407 04f6 FFF7FEFF 	 bl sinf
 2408 04fa 07EE100A 	 fmsr s14,r0
 2409 04fe 354B     	 ldr r3,.L132+60
 2410 0500 D3ED007A 	 flds s15,[r3]
 2411 0504 67EE277A 	 fmuls s15,s14,s15
 2412 0508 38EE678A 	 fsubs s16,s16,s15
 2413 050c B868     	 ldr r0,[r7,#8]
 2414 050e FFF7FEFF 	 bl __aeabi_f2d
 2415 0512 0246     	 mov r2,r0
 2416 0514 0B46     	 mov r3,r1
 2417 0516 1046     	 mov r0,r2
 2418 0518 1946     	 mov r1,r3
 2419 051a 25A3     	 adr r3,.L132+24
 2420 051c D3E90023 	 ldrd r2,[r3]
 2421 0520 FFF7FEFF 	 bl __aeabi_dsub
 2422 0524 0246     	 mov r2,r0
 2423 0526 0B46     	 mov r3,r1
 2424 0528 1046     	 mov r0,r2
 2425 052a 1946     	 mov r1,r3
 2426 052c FFF7FEFF 	 bl __aeabi_d2f
 2427 0530 0346     	 mov r3,r0
 2428 0532 1846     	 mov r0,r3
 2429 0534 FFF7FEFF 	 bl sinf
 2430 0538 07EE100A 	 fmsr s14,r0
 2431 053c 264B     	 ldr r3,.L132+64
 2432 053e D3ED007A 	 flds s15,[r3]
 2433 0542 67EE277A 	 fmuls s15,s14,s15
 2434 0546 78EE677A 	 fsubs s15,s16,s15
 2435 054a 17EE900A 	 fmrs r0,s15
 2436 054e FFF7FEFF 	 bl __aeabi_f2d
 2437 0552 0246     	 mov r2,r0
 2438 0554 0B46     	 mov r3,r1
 2439 0556 1046     	 mov r0,r2
 2440 0558 1946     	 mov r1,r3
 2441 055a 17A3     	 adr r3,.L132+32
 2442 055c D3E90023 	 ldrd r2,[r3]
 2443 0560 FFF7FEFF 	 bl __aeabi_dmul
 2444 0564 0246     	 mov r2,r0
 2445 0566 0B46     	 mov r3,r1
 2446 0568 1046     	 mov r0,r2
 2447 056a 1946     	 mov r1,r3
 2448 056c FFF7FEFF 	 bl __aeabi_d2f
 2449 0570 0246     	 mov r2,r0
 2450 0572 1C4B     	 ldr r3,.L132+76
 2451 0574 1A60     	 str r2,[r3]
 466:../main.c     **** 
 467:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of
 468:../main.c     **** 
 469:../main.c     **** 		if(CAN_control == 1){// can control
 2452              	 .loc 4 469 0
 2453 0576 1C4B     	 ldr r3,.L132+80
 2454 0578 1B78     	 ldrb r3,[r3]
 2455 057a 012B     	 cmp r3,#1
 2456 057c 4DD1     	 bne .L100
 470:../main.c     **** 
 471:../main.c     **** 			if(CAN_new_meassage == 1){
 2457              	 .loc 4 471 0
 2458 057e 1B4B     	 ldr r3,.L132+84
 2459 0580 1B78     	 ldrb r3,[r3]
 2460 0582 012B     	 cmp r3,#1
 2461 0584 38D1     	 bne .L101
 472:../main.c     **** 				speed_ref = CAN_speed_ref;
 2462              	 .loc 4 472 0
 2463 0586 1A4B     	 ldr r3,.L132+88
 2464 0588 1B68     	 ldr r3,[r3]
 2465 058a 1A4A     	 ldr r2,.L132+92
 2466 058c 1360     	 str r3,[r2]
 473:../main.c     **** 				CAN_new_meassage = 0;
 2467              	 .loc 4 473 0
 2468 058e 174B     	 ldr r3,.L132+84
 2469 0590 0022     	 movs r2,#0
 2470 0592 1A70     	 strb r2,[r3]
 2471 0594 36E0     	 b .L102
 2472              	.L133:
 2473 0596 00BF     	 .align 3
 2474              	.L132:
 2475 0598 F1D4C853 	 .word 1405670641
 2476 059c FB210940 	 .word 1074340347
 2477 05a0 4DC90777 	 .word 1996998989
 2478 05a4 46DF913F 	 .word 1066524486
 2479 05a8 A038DB37 	 .word 937113760
 2480 05ac 52C10040 	 .word 1073791314
 2481 05b0 A038DB37 	 .word 937113760
 2482 05b4 52C11040 	 .word 1074839890
 2483 05b8 93761F57 	 .word 1461679763
 2484 05bc 5555E53F 	 .word 1071994197
 2485 05c0 00000000 	 .word omega_mech_rps
 2486 05c4 00002640 	 .word 1076232192
 2487 05c8 00000000 	 .word omega_ele_rads
 2488 05cc 00000000 	 .word omega_ele_degs
 2489 05d0 00000000 	 .word Current_U
 2490 05d4 00000000 	 .word Current_V
 2491 05d8 00000000 	 .word Current_W
 2492 05dc 00000000 	 .word angle_phi
 2493 05e0 00000000 	 .word id
 2494 05e4 00000000 	 .word iq
 2495 05e8 00000000 	 .word CAN_control
 2496 05ec 00000000 	 .word CAN_new_meassage
 2497 05f0 00000000 	 .word CAN_speed_ref
 2498 05f4 00000000 	 .word speed_ref
 2499              	.L101:
 474:../main.c     **** 			}
 475:../main.c     **** 			else{
 476:../main.c     **** 				CAN_no_com_counter ++;
 2500              	 .loc 4 476 0
 2501 05f8 B94B     	 ldr r3,.L134+32
 2502 05fa 1B78     	 ldrb r3,[r3]
 2503 05fc 0133     	 adds r3,r3,#1
 2504 05fe DAB2     	 uxtb r2,r3
 2505 0600 B74B     	 ldr r3,.L134+32
 2506 0602 1A70     	 strb r2,[r3]
 2507              	.L102:
 477:../main.c     **** 			}
 478:../main.c     **** 
 479:../main.c     **** 			if(CAN_no_com_counter > CAN_NO_COM_TH){
 2508              	 .loc 4 479 0
 2509 0604 B64B     	 ldr r3,.L134+32
 2510 0606 1B78     	 ldrb r3,[r3]
 2511 0608 FA2B     	 cmp r3,#250
 2512 060a 06D9     	 bls .L100
 480:../main.c     **** 				//CAN_new_meassage = 0;
 481:../main.c     **** 				CAN_no_com_counter = CAN_NO_COM_TH;
 2513              	 .loc 4 481 0
 2514 060c B44B     	 ldr r3,.L134+32
 2515 060e FA22     	 movs r2,#250
 2516 0610 1A70     	 strb r2,[r3]
 482:../main.c     **** 				speed_ref = 0;
 2517              	 .loc 4 482 0
 2518 0612 B44B     	 ldr r3,.L134+36
 2519 0614 4FF00002 	 mov r2,#0
 2520 0618 1A60     	 str r2,[r3]
 2521              	.L100:
 483:../main.c     **** 			}
 484:../main.c     **** 		}
 485:../main.c     **** 
 486:../main.c     **** 		omega_ele_rads_ref = ( speed_ref * PPZ ) / WHEEL_R;
 2522              	 .loc 4 486 0
 2523 061a B24B     	 ldr r3,.L134+36
 2524 061c D3ED007A 	 flds s15,[r3]
 2525 0620 B2EE067A 	 fconsts s14,#38
 2526 0624 67EE877A 	 fmuls s15,s15,s14
 2527 0628 17EE900A 	 fmrs r0,s15
 2528 062c FFF7FEFF 	 bl __aeabi_f2d
 2529 0630 0246     	 mov r2,r0
 2530 0632 0B46     	 mov r3,r1
 2531 0634 1046     	 mov r0,r2
 2532 0636 1946     	 mov r1,r3
 2533 0638 A1A3     	 adr r3,.L134
 2534 063a D3E90023 	 ldrd r2,[r3]
 2535 063e FFF7FEFF 	 bl __aeabi_ddiv
 2536 0642 0246     	 mov r2,r0
 2537 0644 0B46     	 mov r3,r1
 2538 0646 1046     	 mov r0,r2
 2539 0648 1946     	 mov r1,r3
 2540 064a FFF7FEFF 	 bl __aeabi_d2f
 2541 064e 0246     	 mov r2,r0
 2542 0650 A54B     	 ldr r3,.L134+40
 2543 0652 1A60     	 str r2,[r3]
 487:../main.c     **** 
 488:../main.c     **** 		if((omega_ele_rads_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rad
 2544              	 .loc 4 488 0
 2545 0654 A44B     	 ldr r3,.L134+40
 2546 0656 D3ED007A 	 flds s15,[r3]
 2547 065a F5EE407A 	 fcmpzs s15
 2548 065e F1EE10FA 	 fmstat
 2549 0662 1CD1     	 bne .L103
 2550              	 .loc 4 488 0 is_stmt 0 discriminator 1
 2551 0664 A14B     	 ldr r3,.L134+44
 2552 0666 1B78     	 ldrb r3,[r3]
 2553 0668 012B     	 cmp r3,#1
 2554 066a 18D1     	 bne .L103
 2555              	 .loc 4 488 0 discriminator 2
 2556 066c A04B     	 ldr r3,.L134+48
 2557 066e D3ED007A 	 flds s15,[r3]
 2558 0672 9FEDA07A 	 flds s14,.L134+52
 2559 0676 F4EEC77A 	 fcmpes s15,s14
 2560 067a F1EE10FA 	 fmstat
 2561 067e 0EDD     	 ble .L103
 2562              	 .loc 4 488 0 discriminator 3
 2563 0680 9B4B     	 ldr r3,.L134+48
 2564 0682 D3ED007A 	 flds s15,[r3]
 2565 0686 9FED9C7A 	 flds s14,.L134+56
 2566 068a F4EEC77A 	 fcmpes s15,s14
 2567 068e F1EE10FA 	 fmstat
 2568 0692 04D5     	 bpl .L103
 489:../main.c     **** 			T_ref = 0;
 2569              	 .loc 4 489 0 is_stmt 1
 2570 0694 994B     	 ldr r3,.L134+60
 2571 0696 4FF00002 	 mov r2,#0
 2572 069a 1A60     	 str r2,[r3]
 2573 069c 0BE0     	 b .L106
 2574              	.L103:
 490:../main.c     **** 		}
 491:../main.c     **** 		else{
 492:../main.c     **** 			if(MOTOR_NUM == 1){
 493:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param_1); // outer control loop q f
 2575              	 .loc 4 493 0
 2576 069e 924B     	 ldr r3,.L134+40
 2577 06a0 1A68     	 ldr r2,[r3]
 2578 06a2 934B     	 ldr r3,.L134+48
 2579 06a4 1B68     	 ldr r3,[r3]
 2580 06a6 1046     	 mov r0,r2
 2581 06a8 1946     	 mov r1,r3
 2582 06aa 954A     	 ldr r2,.L134+64
 2583 06ac FFF7FEFF 	 bl PID_Controller
 2584 06b0 0246     	 mov r2,r0
 2585 06b2 924B     	 ldr r3,.L134+60
 2586 06b4 1A60     	 str r2,[r3]
 2587              	.L106:
 494:../main.c     **** 			}
 495:../main.c     **** 			else{
 496:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param);
 497:../main.c     **** 			}
 498:../main.c     **** 		}
 499:../main.c     **** 
 500:../main.c     **** 		if (Speed_control == 1){ // 1 speed contola aktive 0 not aktive torqe contol aktive
 2588              	 .loc 4 500 0
 2589 06b6 8D4B     	 ldr r3,.L134+44
 2590 06b8 1B78     	 ldrb r3,[r3]
 2591 06ba 012B     	 cmp r3,#1
 2592 06bc 16D1     	 bne .L107
 501:../main.c     **** 			if(MOTOR_NUM == 1) {
 502:../main.c     **** 				iq_ref =  T_ref / K_T; // dirction for motor 1
 2593              	 .loc 4 502 0
 2594 06be 8F4B     	 ldr r3,.L134+60
 2595 06c0 1B68     	 ldr r3,[r3]
 2596 06c2 1846     	 mov r0,r3
 2597 06c4 FFF7FEFF 	 bl __aeabi_f2d
 2598 06c8 0246     	 mov r2,r0
 2599 06ca 0B46     	 mov r3,r1
 2600 06cc 1046     	 mov r0,r2
 2601 06ce 1946     	 mov r1,r3
 2602 06d0 7DA3     	 adr r3,.L134+8
 2603 06d2 D3E90023 	 ldrd r2,[r3]
 2604 06d6 FFF7FEFF 	 bl __aeabi_ddiv
 2605 06da 0246     	 mov r2,r0
 2606 06dc 0B46     	 mov r3,r1
 2607 06de 1046     	 mov r0,r2
 2608 06e0 1946     	 mov r1,r3
 2609 06e2 FFF7FEFF 	 bl __aeabi_d2f
 2610 06e6 0246     	 mov r2,r0
 2611 06e8 864B     	 ldr r3,.L134+68
 2612 06ea 1A60     	 str r2,[r3]
 2613              	.L107:
 503:../main.c     **** 			}
 504:../main.c     **** 			else{
 505:../main.c     **** 				iq_ref = - T_ref / K_T;// dirction for motor 1
 506:../main.c     **** 			}
 507:../main.c     **** 		}
 508:../main.c     **** 
 509:../main.c     **** 		//limit to IQ_REF_MAx limit
 510:../main.c     **** 		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 2614              	 .loc 4 510 0
 2615 06ec 854B     	 ldr r3,.L134+68
 2616 06ee D3ED007A 	 flds s15,[r3]
 2617 06f2 B9EE047A 	 fconsts s14,#148
 2618 06f6 F4EEC77A 	 fcmpes s15,s14
 2619 06fa F1EE10FA 	 fmstat
 2620 06fe 02D5     	 bpl .L108
 2621              	 .loc 4 510 0 is_stmt 0 discriminator 1
 2622 0700 804B     	 ldr r3,.L134+68
 2623 0702 814A     	 ldr r2,.L134+72
 2624 0704 1A60     	 str r2,[r3]
 2625              	.L108:
 511:../main.c     **** 		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 2626              	 .loc 4 511 0 is_stmt 1
 2627 0706 7F4B     	 ldr r3,.L134+68
 2628 0708 D3ED007A 	 flds s15,[r3]
 2629 070c B1EE047A 	 fconsts s14,#20
 2630 0710 F4EEC77A 	 fcmpes s15,s14
 2631 0714 F1EE10FA 	 fmstat
 2632 0718 02DD     	 ble .L110
 2633              	 .loc 4 511 0 is_stmt 0 discriminator 1
 2634 071a 7A4B     	 ldr r3,.L134+68
 2635 071c 7B4A     	 ldr r2,.L134+76
 2636 071e 1A60     	 str r2,[r3]
 2637              	.L110:
 512:../main.c     **** 
 513:../main.c     **** 		if(Torque_control == 1){
 2638              	 .loc 4 513 0 is_stmt 1
 2639 0720 7B4B     	 ldr r3,.L134+80
 2640 0722 1B78     	 ldrb r3,[r3]
 2641 0724 012B     	 cmp r3,#1
 2642 0726 16D1     	 bne .L112
 514:../main.c     **** 			Vd_ref = PID_Controller(0.0,id,&Id_param);
 2643              	 .loc 4 514 0
 2644 0728 7A4B     	 ldr r3,.L134+84
 2645 072a 1B68     	 ldr r3,[r3]
 2646 072c 4FF00000 	 mov r0,#0
 2647 0730 1946     	 mov r1,r3
 2648 0732 794A     	 ldr r2,.L134+88
 2649 0734 FFF7FEFF 	 bl PID_Controller
 2650 0738 0246     	 mov r2,r0
 2651 073a 784B     	 ldr r3,.L134+92
 2652 073c 1A60     	 str r2,[r3]
 515:../main.c     **** 			Vq_ref = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
 2653              	 .loc 4 515 0
 2654 073e 714B     	 ldr r3,.L134+68
 2655 0740 1A68     	 ldr r2,[r3]
 2656 0742 774B     	 ldr r3,.L134+96
 2657 0744 1B68     	 ldr r3,[r3]
 2658 0746 1046     	 mov r0,r2
 2659 0748 1946     	 mov r1,r3
 2660 074a 764A     	 ldr r2,.L134+100
 2661 074c FFF7FEFF 	 bl PID_Controller
 2662 0750 0246     	 mov r2,r0
 2663 0752 754B     	 ldr r3,.L134+104
 2664 0754 1A60     	 str r2,[r3]
 2665              	.L112:
 516:../main.c     **** 		}
 517:../main.c     **** 
 518:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9
 519:../main.c     **** 
 520:../main.c     **** 		// dq to alpha beta for voltage
 521:../main.c     **** 		Valpha = Vd_ref*cos_phi - Vq_ref*sin_phi;
 2666              	 .loc 4 521 0
 2667 0756 714B     	 ldr r3,.L134+92
 2668 0758 93ED007A 	 flds s14,[r3]
 2669 075c D7ED017A 	 flds s15,[r7,#4]
 2670 0760 27EE277A 	 fmuls s14,s14,s15
 2671 0764 704B     	 ldr r3,.L134+104
 2672 0766 D3ED006A 	 flds s13,[r3]
 2673 076a D7ED007A 	 flds s15,[r7]
 2674 076e 66EEA77A 	 fmuls s15,s13,s15
 2675 0772 77EE677A 	 fsubs s15,s14,s15
 2676 0776 6D4B     	 ldr r3,.L134+108
 2677 0778 C3ED007A 	 fsts s15,[r3]
 522:../main.c     **** 		Vbeta = Vd_ref*sin_phi + Vq_ref*cos_phi;
 2678              	 .loc 4 522 0
 2679 077c 674B     	 ldr r3,.L134+92
 2680 077e 93ED007A 	 flds s14,[r3]
 2681 0782 D7ED007A 	 flds s15,[r7]
 2682 0786 27EE277A 	 fmuls s14,s14,s15
 2683 078a 674B     	 ldr r3,.L134+104
 2684 078c D3ED006A 	 flds s13,[r3]
 2685 0790 D7ED017A 	 flds s15,[r7,#4]
 2686 0794 66EEA77A 	 fmuls s15,s13,s15
 2687 0798 77EE277A 	 fadds s15,s14,s15
 2688 079c 644B     	 ldr r3,.L134+112
 2689 079e C3ED007A 	 fsts s15,[r3]
 523:../main.c     **** 
 524:../main.c     **** 		// calc angle for SVM app
 525:../main.c     **** 		angle_ab_rad = atanf(Vbeta/Valpha);
 2690              	 .loc 4 525 0
 2691 07a2 634B     	 ldr r3,.L134+112
 2692 07a4 93ED007A 	 flds s14,[r3]
 2693 07a8 604B     	 ldr r3,.L134+108
 2694 07aa D3ED007A 	 flds s15,[r3]
 2695 07ae C7EE277A 	 fdivs s15,s14,s15
 2696 07b2 17EE900A 	 fmrs r0,s15
 2697 07b6 FFF7FEFF 	 bl atanf
 2698 07ba 0246     	 mov r2,r0
 2699 07bc 5D4B     	 ldr r3,.L134+116
 2700 07be 1A60     	 str r2,[r3]
 526:../main.c     **** 		angle_ab = angle_ab_rad/Pi180;
 2701              	 .loc 4 526 0
 2702 07c0 5C4B     	 ldr r3,.L134+116
 2703 07c2 1B68     	 ldr r3,[r3]
 2704 07c4 1846     	 mov r0,r3
 2705 07c6 FFF7FEFF 	 bl __aeabi_f2d
 2706 07ca 0246     	 mov r2,r0
 2707 07cc 0B46     	 mov r3,r1
 2708 07ce 1046     	 mov r0,r2
 2709 07d0 1946     	 mov r1,r3
 2710 07d2 3FA3     	 adr r3,.L134+16
 2711 07d4 D3E90023 	 ldrd r2,[r3]
 2712 07d8 FFF7FEFF 	 bl __aeabi_ddiv
 2713 07dc 0246     	 mov r2,r0
 2714 07de 0B46     	 mov r3,r1
 2715 07e0 1046     	 mov r0,r2
 2716 07e2 1946     	 mov r1,r3
 2717 07e4 FFF7FEFF 	 bl __aeabi_d2f
 2718 07e8 0246     	 mov r2,r0
 2719 07ea 534B     	 ldr r3,.L134+120
 2720 07ec 1A60     	 str r2,[r3]
 527:../main.c     **** 
 528:../main.c     **** 		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 2721              	 .loc 4 528 0
 2722 07ee 4F4B     	 ldr r3,.L134+108
 2723 07f0 D3ED007A 	 flds s15,[r3]
 2724 07f4 F5EEC07A 	 fcmpezs s15
 2725 07f8 F1EE10FA 	 fmstat
 2726 07fc 0AD5     	 bpl .L129
 2727              	 .loc 4 528 0 is_stmt 0 discriminator 1
 2728 07fe 4E4B     	 ldr r3,.L134+120
 2729 0800 D3ED007A 	 flds s15,[r3]
 2730 0804 9FED4D7A 	 flds s14,.L134+124
 2731 0808 77EE877A 	 fadds s15,s15,s14
 2732 080c 4A4B     	 ldr r3,.L134+120
 2733 080e C3ED007A 	 fsts s15,[r3]
 2734 0812 11E0     	 b .L115
 2735              	.L129:
 529:../main.c     **** 		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 2736              	 .loc 4 529 0 is_stmt 1
 2737 0814 464B     	 ldr r3,.L134+112
 2738 0816 D3ED007A 	 flds s15,[r3]
 2739 081a F5EEC07A 	 fcmpezs s15
 2740 081e F1EE10FA 	 fmstat
 2741 0822 09D5     	 bpl .L115
 2742              	 .loc 4 529 0 is_stmt 0 discriminator 1
 2743 0824 444B     	 ldr r3,.L134+120
 2744 0826 D3ED007A 	 flds s15,[r3]
 2745 082a 9FED457A 	 flds s14,.L134+128
 2746 082e 77EE877A 	 fadds s15,s15,s14
 2747 0832 414B     	 ldr r3,.L134+120
 2748 0834 C3ED007A 	 fsts s15,[r3]
 2749              	.L115:
 530:../main.c     **** 
 531:../main.c     **** 		// shortend to one line
 532:../main.c     **** 		// amplitude calculation
 533:../main.c     **** 		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 2750              	 .loc 4 533 0 is_stmt 1
 2751 0838 3C4B     	 ldr r3,.L134+108
 2752 083a 93ED007A 	 flds s14,[r3]
 2753 083e 3B4B     	 ldr r3,.L134+108
 2754 0840 D3ED007A 	 flds s15,[r3]
 2755 0844 27EE277A 	 fmuls s14,s14,s15
 2756 0848 394B     	 ldr r3,.L134+112
 2757 084a D3ED006A 	 flds s13,[r3]
 2758 084e 384B     	 ldr r3,.L134+112
 2759 0850 D3ED007A 	 flds s15,[r3]
 2760 0854 66EEA77A 	 fmuls s15,s13,s15
 2761 0858 77EE277A 	 fadds s15,s14,s15
 2762 085c 17EE900A 	 fmrs r0,s15
 2763 0860 FFF7FEFF 	 bl sqrtf
 2764 0864 0246     	 mov r2,r0
 2765 0866 374B     	 ldr r3,.L134+132
 2766 0868 1A60     	 str r2,[r3]
 534:../main.c     **** 
 535:../main.c     **** 		//K_inv = V/m --> m = V / K_inv
 536:../main.c     **** 		modulation_index = amplitude_ab/K_inv;
 2767              	 .loc 4 536 0
 2768 086a 364B     	 ldr r3,.L134+132
 2769 086c 1B68     	 ldr r3,[r3]
 2770 086e 1846     	 mov r0,r3
 2771 0870 FFF7FEFF 	 bl __aeabi_f2d
 2772 0874 0246     	 mov r2,r0
 2773 0876 0B46     	 mov r3,r1
 2774 0878 1046     	 mov r0,r2
 2775 087a 1946     	 mov r1,r3
 2776 087c 16A3     	 adr r3,.L134+24
 2777 087e D3E90023 	 ldrd r2,[r3]
 2778 0882 FFF7FEFF 	 bl __aeabi_ddiv
 2779 0886 0246     	 mov r2,r0
 2780 0888 0B46     	 mov r3,r1
 2781 088a 1046     	 mov r0,r2
 2782 088c 1946     	 mov r1,r3
 2783 088e FFF7FEFF 	 bl __aeabi_d2f
 2784 0892 0246     	 mov r2,r0
 2785 0894 2C4B     	 ldr r3,.L134+136
 2786 0896 1A60     	 str r2,[r3]
 537:../main.c     **** 
 538:../main.c     **** 		//scale maximum 1 to 10000 -->
 539:../main.c     **** 		modulation_index_scaled = 10000*modulation_index;
 2787              	 .loc 4 539 0
 2788 0898 2B4B     	 ldr r3,.L134+136
 2789 089a D3ED007A 	 flds s15,[r3]
 2790 089e 9FED2B7A 	 flds s14,.L134+140
 2791 08a2 67EE877A 	 fmuls s15,s15,s14
 2792 08a6 2A4B     	 ldr r3,.L134+144
 2793 08a8 C3ED007A 	 fsts s15,[r3]
 540:../main.c     **** 
 541:../main.c     **** 
 542:../main.c     **** 		// shortened ca 4% improvemnt
 543:../main.c     **** 		//modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;
 544:../main.c     **** 
 545:../main.c     **** 		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the ti
 2794              	 .loc 4 545 0
 2795 08ac 2948     	 ldr r0,.L134+148
 2796 08ae FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 546:../main.c     **** 
 547:../main.c     **** }
 2797              	 .loc 4 547 0
 2798 08b2 1037     	 adds r7,r7,#16
 2799              	.LCFI84:
 2800              	 .cfi_def_cfa_offset 24
 2801 08b4 BD46     	 mov sp,r7
 2802              	.LCFI85:
 2803              	 .cfi_def_cfa_register 13
 2804              	 
 2805 08b6 BDEC028B 	 fldmfdd sp!,{d8}
 2806              	.LCFI86:
 2807              	 .cfi_restore 80
 2808              	 .cfi_restore 81
 2809              	 .cfi_def_cfa_offset 16
 2810 08ba B0BD     	 pop {r4,r5,r7,pc}
 2811              	.L135:
 2812 08bc AFF30080 	 .align 3
 2813              	.L134:
 2814 08c0 48E17A14 	 .word 343597384
 2815 08c4 AE47B13F 	 .word 1068582830
 2816 08c8 E17A14AE 	 .word -1374389535
 2817 08cc 47E1CA3F 	 .word 1070260551
 2818 08d0 4DC90777 	 .word 1996998989
 2819 08d4 46DF913F 	 .word 1066524486
 2820 08d8 EE7D9BC9 	 .word -912556562
 2821 08dc 1B212240 	 .word 1075978523
 2822 08e0 00000000 	 .word CAN_no_com_counter
 2823 08e4 00000000 	 .word speed_ref
 2824 08e8 00000000 	 .word omega_ele_rads_ref
 2825 08ec 00000000 	 .word Speed_control
 2826 08f0 00000000 	 .word omega_ele_rads
 2827 08f4 000048C3 	 .word -1018691584
 2828 08f8 00004843 	 .word 1128792064
 2829 08fc 00000000 	 .word T_ref
 2830 0900 00000000 	 .word T_param_1
 2831 0904 00000000 	 .word iq_ref
 2832 0908 0000A0C0 	 .word -1063256064
 2833 090c 0000A040 	 .word 1084227584
 2834 0910 00000000 	 .word Torque_control
 2835 0914 00000000 	 .word id
 2836 0918 00000000 	 .word Id_param
 2837 091c 00000000 	 .word Vd_ref
 2838 0920 00000000 	 .word iq
 2839 0924 00000000 	 .word Iq_param
 2840 0928 00000000 	 .word Vq_ref
 2841 092c 00000000 	 .word Valpha
 2842 0930 00000000 	 .word Vbeta
 2843 0934 00000000 	 .word angle_ab_rad
 2844 0938 00000000 	 .word angle_ab
 2845 093c 00003443 	 .word 1127481344
 2846 0940 0000B443 	 .word 1135869952
 2847 0944 00000000 	 .word amplitude_ab
 2848 0948 00000000 	 .word modulation_index
 2849 094c 00401C46 	 .word 1176256512
 2850 0950 00000000 	 .word modulation_index_scaled
 2851 0954 00000000 	 .word status_LED_red_cal_time
 2852              	 .cfi_endproc
 2853              	.LFE485:
 2855              	 .section .text.PID_Controller,"ax",%progbits
 2856              	 .align 2
 2857              	 .global PID_Controller
 2858              	 .thumb
 2859              	 .thumb_func
 2861              	PID_Controller:
 2862              	.LFB486:
 548:../main.c     **** 
 549:../main.c     **** // PID Controller
 550:../main.c     **** float PID_Controller(float SetPoint,float ActValue,PID_param *param){
 2863              	 .loc 4 550 0
 2864              	 .cfi_startproc
 2865              	 
 2866              	 
 2867              	 
 2868 0000 80B4     	 push {r7}
 2869              	.LCFI87:
 2870              	 .cfi_def_cfa_offset 4
 2871              	 .cfi_offset 7,-4
 2872 0002 89B0     	 sub sp,sp,#36
 2873              	.LCFI88:
 2874              	 .cfi_def_cfa_offset 40
 2875 0004 00AF     	 add r7,sp,#0
 2876              	.LCFI89:
 2877              	 .cfi_def_cfa_register 7
 2878 0006 F860     	 str r0,[r7,#12]
 2879 0008 B960     	 str r1,[r7,#8]
 2880 000a 7A60     	 str r2,[r7,#4]
 551:../main.c     **** 
 552:../main.c     **** 	float Deviation = SetPoint - ActValue;
 2881              	 .loc 4 552 0
 2882 000c 97ED037A 	 flds s14,[r7,#12]
 2883 0010 D7ED027A 	 flds s15,[r7,#8]
 2884 0014 77EE677A 	 fsubs s15,s14,s15
 2885 0018 C7ED067A 	 fsts s15,[r7,#24]
 553:../main.c     **** 	float temp1, temp2;
 554:../main.c     **** 
 555:../main.c     **** 	 temp1 = param->P*Deviation;
 2886              	 .loc 4 555 0
 2887 001c 7B68     	 ldr r3,[r7,#4]
 2888 001e 93ED007A 	 flds s14,[r3]
 2889 0022 D7ED067A 	 flds s15,[r7,#24]
 2890 0026 67EE277A 	 fmuls s15,s14,s15
 2891 002a C7ED057A 	 fsts s15,[r7,#20]
 556:../main.c     **** 	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;
 2892              	 .loc 4 556 0
 2893 002e 7B68     	 ldr r3,[r7,#4]
 2894 0030 93ED017A 	 flds s14,[r3,#4]
 2895 0034 214B     	 ldr r3,.L145
 2896 0036 D3ED007A 	 flds s15,[r3]
 2897 003a 27EE277A 	 fmuls s14,s14,s15
 2898 003e D7ED067A 	 flds s15,[r7,#24]
 2899 0042 27EE277A 	 fmuls s14,s14,s15
 2900 0046 D7ED057A 	 flds s15,[r7,#20]
 2901 004a 37EE277A 	 fadds s14,s14,s15
 2902 004e 7B68     	 ldr r3,[r7,#4]
 2903 0050 D3ED087A 	 flds s15,[r3,#32]
 2904 0054 77EE277A 	 fadds s15,s14,s15
 2905 0058 C7ED077A 	 fsts s15,[r7,#28]
 557:../main.c     **** 
 558:../main.c     **** 	 if (temp2 >= param->MaxLimit){
 2906              	 .loc 4 558 0
 2907 005c 7B68     	 ldr r3,[r7,#4]
 2908 005e 93ED037A 	 flds s14,[r3,#12]
 2909 0062 D7ED077A 	 flds s15,[r7,#28]
 2910 0066 B4EEE77A 	 fcmpes s14,s15
 2911 006a F1EE10FA 	 fmstat
 2912 006e 03D8     	 bhi .L144
 559:../main.c     **** 		 temp2 = param->MaxLimit;
 2913              	 .loc 4 559 0
 2914 0070 7B68     	 ldr r3,[r7,#4]
 2915 0072 DB68     	 ldr r3,[r3,#12]
 2916 0074 FB61     	 str r3,[r7,#28]
 2917 0076 0CE0     	 b .L139
 2918              	.L144:
 560:../main.c     **** 	 }
 561:../main.c     **** 	 else if (temp2 < param->MinLimit){
 2919              	 .loc 4 561 0
 2920 0078 7B68     	 ldr r3,[r7,#4]
 2921 007a 93ED047A 	 flds s14,[r3,#16]
 2922 007e D7ED077A 	 flds s15,[r7,#28]
 2923 0082 B4EEE77A 	 fcmpes s14,s15
 2924 0086 F1EE10FA 	 fmstat
 2925 008a 02DD     	 ble .L139
 562:../main.c     **** 		 temp2 = param->MinLimit;
 2926              	 .loc 4 562 0
 2927 008c 7B68     	 ldr r3,[r7,#4]
 2928 008e 1B69     	 ldr r3,[r3,#16]
 2929 0090 FB61     	 str r3,[r7,#28]
 2930              	.L139:
 563:../main.c     **** 	 }
 564:../main.c     **** 
 565:../main.c     **** 	 param->Output_z = temp2 - temp1;
 2931              	 .loc 4 565 0
 2932 0092 97ED077A 	 flds s14,[r7,#28]
 2933 0096 D7ED057A 	 flds s15,[r7,#20]
 2934 009a 77EE677A 	 fsubs s15,s14,s15
 2935 009e 7B68     	 ldr r3,[r7,#4]
 2936 00a0 C3ED087A 	 fsts s15,[r3,#32]
 566:../main.c     **** 
 567:../main.c     **** 	 param->Output = temp2;
 2937              	 .loc 4 567 0
 2938 00a4 7B68     	 ldr r3,[r7,#4]
 2939 00a6 FA69     	 ldr r2,[r7,#28]
 2940 00a8 5A61     	 str r2,[r3,#20]
 568:../main.c     **** 
 569:../main.c     **** 	return param->Output;
 2941              	 .loc 4 569 0
 2942 00aa 7B68     	 ldr r3,[r7,#4]
 2943 00ac 5B69     	 ldr r3,[r3,#20]
 570:../main.c     **** 
 571:../main.c     **** }
 2944              	 .loc 4 571 0
 2945 00ae 1846     	 mov r0,r3
 2946 00b0 2437     	 adds r7,r7,#36
 2947              	.LCFI90:
 2948              	 .cfi_def_cfa_offset 4
 2949 00b2 BD46     	 mov sp,r7
 2950              	.LCFI91:
 2951              	 .cfi_def_cfa_register 13
 2952              	 
 2953 00b4 5DF8047B 	 ldr r7,[sp],#4
 2954              	.LCFI92:
 2955              	 .cfi_restore 7
 2956              	 .cfi_def_cfa_offset 0
 2957 00b8 7047     	 bx lr
 2958              	.L146:
 2959 00ba 00BF     	 .align 2
 2960              	.L145:
 2961 00bc 00000000 	 .word Tcyc
 2962              	 .cfi_endproc
 2963              	.LFE486:
 2965              	 .section .text.readCurrent,"ax",%progbits
 2966              	 .align 2
 2967              	 .global readCurrent
 2968              	 .thumb
 2969              	 .thumb_func
 2971              	readCurrent:
 2972              	.LFB487:
 572:../main.c     **** 
 573:../main.c     **** 
 574:../main.c     **** //Read Current  via SPI-Interface
 575:../main.c     **** float readCurrent(uint8_t ChipSelect){
 2973              	 .loc 4 575 0
 2974              	 .cfi_startproc
 2975              	 
 2976              	 
 2977 0000 80B5     	 push {r7,lr}
 2978              	.LCFI93:
 2979              	 .cfi_def_cfa_offset 8
 2980              	 .cfi_offset 7,-8
 2981              	 .cfi_offset 14,-4
 2982 0002 86B0     	 sub sp,sp,#24
 2983              	.LCFI94:
 2984              	 .cfi_def_cfa_offset 32
 2985 0004 00AF     	 add r7,sp,#0
 2986              	.LCFI95:
 2987              	 .cfi_def_cfa_register 7
 2988 0006 0346     	 mov r3,r0
 2989 0008 FB71     	 strb r3,[r7,#7]
 576:../main.c     **** 	uint8_t ReadData[2];
 577:../main.c     **** 
 578:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, ChipSelect);
 2990              	 .loc 4 578 0
 2991 000a FB79     	 ldrb r3,[r7,#7]
 2992 000c 9BB2     	 uxth r3,r3
 2993 000e 2248     	 ldr r0,.L149
 2994 0010 1946     	 mov r1,r3
 2995 0012 FFF7FEFF 	 bl BUS_IO_Write
 579:../main.c     **** 	SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2U);
 2996              	 .loc 4 579 0
 2997 0016 07F10C03 	 add r3,r7,#12
 2998 001a 2048     	 ldr r0,.L149+4
 2999 001c 1946     	 mov r1,r3
 3000 001e 0222     	 movs r2,#2
 3001 0020 FFF7FEFF 	 bl SPI_MASTER_Receive
 580:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, 0b111);
 3002              	 .loc 4 580 0
 3003 0024 1C48     	 ldr r0,.L149
 3004 0026 0721     	 movs r1,#7
 3005 0028 FFF7FEFF 	 bl BUS_IO_Write
 581:../main.c     **** 	ReadData[0] = ReadData[0] & 0X1F; 									//cutting away the 3 info bits
 3006              	 .loc 4 581 0
 3007 002c 3B7B     	 ldrb r3,[r7,#12]
 3008 002e 03F01F03 	 and r3,r3,#31
 3009 0032 DBB2     	 uxtb r3,r3
 3010 0034 3B73     	 strb r3,[r7,#12]
 582:../main.c     **** 	uint16_t iCurrent = ReadData[0]<<8 | ReadData[1];					//combine Data
 3011              	 .loc 4 582 0
 3012 0036 3B7B     	 ldrb r3,[r7,#12]
 3013 0038 1B02     	 lsls r3,r3,#8
 3014 003a 9AB2     	 uxth r2,r3
 3015 003c 7B7B     	 ldrb r3,[r7,#13]
 3016 003e 9BB2     	 uxth r3,r3
 3017 0040 1343     	 orrs r3,r3,r2
 3018 0042 9BB2     	 uxth r3,r3
 3019 0044 FB82     	 strh r3,[r7,#22]
 583:../main.c     **** 
 584:../main.c     **** 	// calculation of the current
 585:../main.c     **** 	float fCurrent = ((float)iCurrent - 4096.0)/160.0;					// ATTENTION: value has to be divided by 16
 3020              	 .loc 4 585 0
 3021 0046 FB8A     	 ldrh r3,[r7,#22]
 3022 0048 07EE903A 	 fmsr s15,r3
 3023 004c F8EE677A 	 fuitos s15,s15
 3024 0050 17EE900A 	 fmrs r0,s15
 3025 0054 FFF7FEFF 	 bl __aeabi_f2d
 3026 0058 0246     	 mov r2,r0
 3027 005a 0B46     	 mov r3,r1
 3028 005c 1046     	 mov r0,r2
 3029 005e 1946     	 mov r1,r3
 3030 0060 4FF00002 	 mov r2,#0
 3031 0064 0E4B     	 ldr r3,.L149+8
 3032 0066 FFF7FEFF 	 bl __aeabi_dsub
 3033 006a 0246     	 mov r2,r0
 3034 006c 0B46     	 mov r3,r1
 3035 006e 1046     	 mov r0,r2
 3036 0070 1946     	 mov r1,r3
 3037 0072 4FF00002 	 mov r2,#0
 3038 0076 0B4B     	 ldr r3,.L149+12
 3039 0078 FFF7FEFF 	 bl __aeabi_ddiv
 3040 007c 0246     	 mov r2,r0
 3041 007e 0B46     	 mov r3,r1
 3042 0080 1046     	 mov r0,r2
 3043 0082 1946     	 mov r1,r3
 3044 0084 FFF7FEFF 	 bl __aeabi_d2f
 3045 0088 0346     	 mov r3,r0
 3046 008a 3B61     	 str r3,[r7,#16]
 586:../main.c     **** 
 587:../main.c     **** 	return fCurrent;
 3047              	 .loc 4 587 0
 3048 008c 3B69     	 ldr r3,[r7,#16]
 588:../main.c     **** }
 3049              	 .loc 4 588 0
 3050 008e 1846     	 mov r0,r3
 3051 0090 1837     	 adds r7,r7,#24
 3052              	.LCFI96:
 3053              	 .cfi_def_cfa_offset 8
 3054 0092 BD46     	 mov sp,r7
 3055              	.LCFI97:
 3056              	 .cfi_def_cfa_register 13
 3057              	 
 3058 0094 80BD     	 pop {r7,pc}
 3059              	.L150:
 3060 0096 00BF     	 .align 2
 3061              	.L149:
 3062 0098 00000000 	 .word SPI_ChipSelect
 3063 009c 00000000 	 .word SPI_MASTER_0
 3064 00a0 0000B040 	 .word 1085276160
 3065 00a4 00006440 	 .word 1080295424
 3066              	 .cfi_endproc
 3067              	.LFE487:
 3069              	 .section .text.f_rec_data,"ax",%progbits
 3070              	 .align 2
 3071              	 .global f_rec_data
 3072              	 .thumb
 3073              	 .thumb_func
 3075              	f_rec_data:
 3076              	.LFB488:
 589:../main.c     **** 
 590:../main.c     **** 
 591:../main.c     **** 
 592:../main.c     **** 
 593:../main.c     **** 
 594:../main.c     **** 
 595:../main.c     **** void f_rec_data(float data_point_var1, float data_point_var2, float start_step_from, float step_to)
 3077              	 .loc 4 595 0
 3078              	 .cfi_startproc
 3079              	 
 3080              	 
 3081              	 
 3082 0000 80B4     	 push {r7}
 3083              	.LCFI98:
 3084              	 .cfi_def_cfa_offset 4
 3085              	 .cfi_offset 7,-4
 3086 0002 85B0     	 sub sp,sp,#20
 3087              	.LCFI99:
 3088              	 .cfi_def_cfa_offset 24
 3089 0004 00AF     	 add r7,sp,#0
 3090              	.LCFI100:
 3091              	 .cfi_def_cfa_register 7
 3092 0006 F860     	 str r0,[r7,#12]
 3093 0008 B960     	 str r1,[r7,#8]
 3094 000a 7A60     	 str r2,[r7,#4]
 3095 000c 3B60     	 str r3,[r7]
 596:../main.c     **** 	  if(start_rec  == 1){
 3096              	 .loc 4 596 0
 3097 000e 284B     	 ldr r3,.L157
 3098 0010 1B78     	 ldrb r3,[r3]
 3099 0012 012B     	 cmp r3,#1
 3100 0014 2AD1     	 bne .L152
 597:../main.c     **** 		  start_rec_copunt ++;
 3101              	 .loc 4 597 0
 3102 0016 274B     	 ldr r3,.L157+4
 3103 0018 1B68     	 ldr r3,[r3]
 3104 001a 0133     	 adds r3,r3,#1
 3105 001c 254A     	 ldr r2,.L157+4
 3106 001e 1360     	 str r3,[r2]
 598:../main.c     **** 
 599:../main.c     **** 		  if(start_rec_copunt == 1){
 3107              	 .loc 4 599 0
 3108 0020 244B     	 ldr r3,.L157+4
 3109 0022 1B68     	 ldr r3,[r3]
 3110 0024 012B     	 cmp r3,#1
 3111 0026 02D1     	 bne .L153
 600:../main.c     **** 			  iq_ref = start_step_from;
 3112              	 .loc 4 600 0
 3113 0028 234A     	 ldr r2,.L157+8
 3114 002a 7B68     	 ldr r3,[r7,#4]
 3115 002c 1360     	 str r3,[r2]
 3116              	.L153:
 601:../main.c     **** 		  }
 602:../main.c     **** 
 603:../main.c     **** 		  if(start_rec_copunt ==10000){
 3117              	 .loc 4 603 0
 3118 002e 214B     	 ldr r3,.L157+4
 3119 0030 1B68     	 ldr r3,[r3]
 3120 0032 42F21072 	 movw r2,#10000
 3121 0036 9342     	 cmp r3,r2
 3122 0038 02D1     	 bne .L154
 604:../main.c     **** 			  rec_data_contorl = 1;
 3123              	 .loc 4 604 0
 3124 003a 204B     	 ldr r3,.L157+12
 3125 003c 0122     	 movs r2,#1
 3126 003e 1A70     	 strb r2,[r3]
 3127              	.L154:
 605:../main.c     **** 		  }
 606:../main.c     **** 
 607:../main.c     **** 
 608:../main.c     **** 		  if(start_rec_copunt == 10100){ //laster
 3128              	 .loc 4 608 0
 3129 0040 1C4B     	 ldr r3,.L157+4
 3130 0042 1B68     	 ldr r3,[r3]
 3131 0044 42F27472 	 movw r2,#10100
 3132 0048 9342     	 cmp r3,r2
 3133 004a 02D1     	 bne .L155
 609:../main.c     **** 			  iq_ref = step_to;
 3134              	 .loc 4 609 0
 3135 004c 1A4A     	 ldr r2,.L157+8
 3136 004e 3B68     	 ldr r3,[r7]
 3137 0050 1360     	 str r3,[r2]
 3138              	.L155:
 610:../main.c     **** 		  }
 611:../main.c     **** 
 612:../main.c     **** 		  if(start_rec_copunt == 20000){
 3139              	 .loc 4 612 0
 3140 0052 184B     	 ldr r3,.L157+4
 3141 0054 1B68     	 ldr r3,[r3]
 3142 0056 44F62062 	 movw r2,#20000
 3143 005a 9342     	 cmp r3,r2
 3144 005c 06D1     	 bne .L152
 613:../main.c     **** 			  iq_ref = 0;
 3145              	 .loc 4 613 0
 3146 005e 164B     	 ldr r3,.L157+8
 3147 0060 4FF00002 	 mov r2,#0
 3148 0064 1A60     	 str r2,[r3]
 614:../main.c     **** 			  start_rec = 0;
 3149              	 .loc 4 614 0
 3150 0066 124B     	 ldr r3,.L157
 3151 0068 0022     	 movs r2,#0
 3152 006a 1A70     	 strb r2,[r3]
 3153              	.L152:
 615:../main.c     **** 		  }
 616:../main.c     **** 	  }
 617:../main.c     **** 
 618:../main.c     **** 
 619:../main.c     **** 	if(rec_data_contorl == 1){
 3154              	 .loc 4 619 0
 3155 006c 134B     	 ldr r3,.L157+12
 3156 006e 1B78     	 ldrb r3,[r3]
 3157 0070 012B     	 cmp r3,#1
 3158 0072 18D1     	 bne .L151
 620:../main.c     **** 		  if(rec_data_index < REC_DATA_NUM_POINTS){
 3159              	 .loc 4 620 0
 3160 0074 124B     	 ldr r3,.L157+16
 3161 0076 1B88     	 ldrh r3,[r3]
 3162 0078 B3F57A7F 	 cmp r3,#1000
 3163 007c 13D2     	 bcs .L151
 621:../main.c     **** 				rec_data[rec_data_index] = data_point_var1;
 3164              	 .loc 4 621 0
 3165 007e 104B     	 ldr r3,.L157+16
 3166 0080 1B88     	 ldrh r3,[r3]
 3167 0082 104A     	 ldr r2,.L157+20
 3168 0084 9B00     	 lsls r3,r3,#2
 3169 0086 1344     	 add r3,r3,r2
 3170 0088 FA68     	 ldr r2,[r7,#12]
 3171 008a 1A60     	 str r2,[r3]
 622:../main.c     **** 				rec_data2[rec_data_index] = data_point_var2;
 3172              	 .loc 4 622 0
 3173 008c 0C4B     	 ldr r3,.L157+16
 3174 008e 1B88     	 ldrh r3,[r3]
 3175 0090 0D4A     	 ldr r2,.L157+24
 3176 0092 9B00     	 lsls r3,r3,#2
 3177 0094 1344     	 add r3,r3,r2
 3178 0096 BA68     	 ldr r2,[r7,#8]
 3179 0098 1A60     	 str r2,[r3]
 623:../main.c     **** 				rec_data_index ++;
 3180              	 .loc 4 623 0
 3181 009a 094B     	 ldr r3,.L157+16
 3182 009c 1B88     	 ldrh r3,[r3]
 3183 009e 0133     	 adds r3,r3,#1
 3184 00a0 9AB2     	 uxth r2,r3
 3185 00a2 074B     	 ldr r3,.L157+16
 3186 00a4 1A80     	 strh r2,[r3]
 3187              	.L151:
 624:../main.c     **** 		  }
 625:../main.c     **** 	}
 626:../main.c     **** }
 3188              	 .loc 4 626 0
 3189 00a6 1437     	 adds r7,r7,#20
 3190              	.LCFI101:
 3191              	 .cfi_def_cfa_offset 4
 3192 00a8 BD46     	 mov sp,r7
 3193              	.LCFI102:
 3194              	 .cfi_def_cfa_register 13
 3195              	 
 3196 00aa 5DF8047B 	 ldr r7,[sp],#4
 3197              	.LCFI103:
 3198              	 .cfi_restore 7
 3199              	 .cfi_def_cfa_offset 0
 3200 00ae 7047     	 bx lr
 3201              	.L158:
 3202              	 .align 2
 3203              	.L157:
 3204 00b0 00000000 	 .word start_rec
 3205 00b4 00000000 	 .word start_rec_copunt
 3206 00b8 00000000 	 .word iq_ref
 3207 00bc 00000000 	 .word rec_data_contorl
 3208 00c0 00000000 	 .word rec_data_index
 3209 00c4 00000000 	 .word rec_data
 3210 00c8 00000000 	 .word rec_data2
 3211              	 .cfi_endproc
 3212              	.LFE488:
 3214              	 .text
 3215              	.Letext0:
 3216              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3217              	 .file 6 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3218              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3219              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 3220              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_scu.h"
 3221              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 3222              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_spi.h"
 3223              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master.h"
 3224              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io.h"
 3225              	 .file 14 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_eru.h"
 3226              	 .file 15 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_ccu8.h"
 3227              	 .file 16 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 3228              	 .file 17 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm.h"
 3229              	 .file 18 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 3230              	 .file 19 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 3231              	 .file 20 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 3232              	 .file 21 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DAVE.h"
 3233              	 .file 22 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 3234              	 .file 23 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 3235              	 .file 24 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 3236              	 .file 25 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master_extern.h"
 3237              	 .file 26 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io_extern.h"
 3238              	 .file 27 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt_extern.h"
 3239              	 .file 28 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 3240              	 .file 29 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:163    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:167    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:207    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:211    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:250    .text.PIN_INTERRUPT_GetPinValue:00000000 $t
    {standard input}:254    .text.PIN_INTERRUPT_GetPinValue:00000000 PIN_INTERRUPT_GetPinValue
    {standard input}:299    .data.Torque_control:00000000 Torque_control
    {standard input}:305    .bss.Speed_control:00000000 Speed_control
    {standard input}:306    .bss.Speed_control:00000000 $d
    {standard input}:311    .bss.CAN_control:00000000 CAN_control
    {standard input}:312    .bss.CAN_control:00000000 $d
                            *COM*:00000004 Current_U
                            *COM*:00000004 Current_V
                            *COM*:00000004 Current_W
    {standard input}:321    .data.lookup_table:00000000 lookup_table
    {standard input}:318    .data.lookup_table:00000000 $d
    {standard input}:390    .bss.sector:00000000 sector
    {standard input}:391    .bss.sector:00000000 $d
    {standard input}:396    .bss.direction:00000000 direction
    {standard input}:397    .bss.direction:00000000 $d
    {standard input}:403    .bss.enc_val:00000000 enc_val
    {standard input}:400    .bss.enc_val:00000000 $d
    {standard input}:410    .bss.time_since_A:00000000 time_since_A
    {standard input}:407    .bss.time_since_A:00000000 $d
    {standard input}:417    .bss.time_since_B:00000000 time_since_B
    {standard input}:414    .bss.time_since_B:00000000 $d
    {standard input}:424    .bss.time_since_C:00000000 time_since_C
    {standard input}:421    .bss.time_since_C:00000000 $d
    {standard input}:431    .data.time_180deg:00000000 time_180deg
    {standard input}:428    .data.time_180deg:00000000 $d
    {standard input}:438    .data.time_180deg_cal:00000000 time_180deg_cal
    {standard input}:435    .data.time_180deg_cal:00000000 $d
                            *COM*:00000001 last_Hall_trig
    {standard input}:446    .data.angle_in_sector:00000000 angle_in_sector
    {standard input}:443    .data.angle_in_sector:00000000 $d
    {standard input}:453    .bss.angle_phi:00000000 angle_phi
    {standard input}:450    .bss.angle_phi:00000000 $d
                            *COM*:00000004 ialpha
                            *COM*:00000004 ibeta
                            *COM*:00000004 iq
                            *COM*:00000004 id
                            *COM*:00000004 Valpha
                            *COM*:00000004 Vbeta
    {standard input}:466    .bss.omega_ele_rads:00000000 omega_ele_rads
    {standard input}:463    .bss.omega_ele_rads:00000000 $d
    {standard input}:473    .bss.omega_mech_rps:00000000 omega_mech_rps
    {standard input}:470    .bss.omega_mech_rps:00000000 $d
    {standard input}:480    .bss.omega_mech_rps_temp:00000000 omega_mech_rps_temp
    {standard input}:477    .bss.omega_mech_rps_temp:00000000 $d
    {standard input}:487    .bss.omega_ele_degs:00000000 omega_ele_degs
    {standard input}:484    .bss.omega_ele_degs:00000000 $d
    {standard input}:494    .bss.speed_ref:00000000 speed_ref
    {standard input}:491    .bss.speed_ref:00000000 $d
    {standard input}:501    .bss.omega_ele_rads_ref:00000000 omega_ele_rads_ref
    {standard input}:498    .bss.omega_ele_rads_ref:00000000 $d
    {standard input}:508    .bss.iq_ref:00000000 iq_ref
    {standard input}:505    .bss.iq_ref:00000000 $d
    {standard input}:515    .bss.T_ref:00000000 T_ref
    {standard input}:512    .bss.T_ref:00000000 $d
    {standard input}:522    .bss.Vd_ref:00000000 Vd_ref
    {standard input}:519    .bss.Vd_ref:00000000 $d
    {standard input}:529    .bss.Vq_ref:00000000 Vq_ref
    {standard input}:526    .bss.Vq_ref:00000000 $d
                            *COM*:00000008 Speeds_int16_r
    {standard input}:537    .bss.CAN_speed_ref:00000000 CAN_speed_ref
    {standard input}:534    .bss.CAN_speed_ref:00000000 $d
    {standard input}:543    .bss.CAN_new_meassage:00000000 CAN_new_meassage
    {standard input}:544    .bss.CAN_new_meassage:00000000 $d
    {standard input}:549    .bss.CAN_no_com_counter:00000000 CAN_no_com_counter
    {standard input}:550    .bss.CAN_no_com_counter:00000000 $d
    {standard input}:556    .bss.distance_180deg_ele_count:00000000 distance_180deg_ele_count
    {standard input}:553    .bss.distance_180deg_ele_count:00000000 $d
    {standard input}:563    .bss.Speed_act:00000000 Speed_act
    {standard input}:560    .bss.Speed_act:00000000 $d
    {standard input}:570    .bss.distance:00000000 distance
    {standard input}:567    .bss.distance:00000000 $d
                            *COM*:00000004 modulation_index
                            *COM*:00000004 modulation_index_scaled
                            *COM*:00000004 angle_ab
                            *COM*:00000004 angle_ab_rad
                            *COM*:00000004 amplitude_ab
    {standard input}:582    .data.Ts:00000000 Ts
    {standard input}:579    .data.Ts:00000000 $d
    {standard input}:589    .data.Tcyc:00000000 Tcyc
    {standard input}:586    .data.Tcyc:00000000 $d
    {standard input}:596    .data.scaling_factor:00000000 scaling_factor
    {standard input}:593    .data.scaling_factor:00000000 $d
                            *COM*:00000004 amplitude_corrected
    {standard input}:603    .bss.count:00000000 count
    {standard input}:604    .bss.count:00000000 $d
    {standard input}:610    .data.offset_pos:00000000 offset_pos
    {standard input}:607    .data.offset_pos:00000000 $d
    {standard input}:617    .data.offset_neg:00000000 offset_neg
    {standard input}:614    .data.offset_neg:00000000 $d
    {standard input}:624    .data.Iq_param:00000000 Iq_param
    {standard input}:621    .data.Iq_param:00000000 $d
    {standard input}:639    .data.Id_param:00000000 Id_param
    {standard input}:636    .data.Id_param:00000000 $d
    {standard input}:654    .data.T_param:00000000 T_param
    {standard input}:651    .data.T_param:00000000 $d
    {standard input}:669    .data.T_param_1:00000000 T_param_1
    {standard input}:666    .data.T_param_1:00000000 $d
    {standard input}:683    .bss.rec_data_contorl:00000000 rec_data_contorl
    {standard input}:684    .bss.rec_data_contorl:00000000 $d
    {standard input}:690    .bss.rec_data_index:00000000 rec_data_index
    {standard input}:687    .bss.rec_data_index:00000000 $d
    {standard input}:697    .bss.rec_data:00000000 rec_data
    {standard input}:694    .bss.rec_data:00000000 $d
    {standard input}:704    .bss.rec_data2:00000000 rec_data2
    {standard input}:701    .bss.rec_data2:00000000 $d
    {standard input}:711    .data.test2:00000000 test2
    {standard input}:708    .data.test2:00000000 $d
    {standard input}:721    .bss.start_rec:00000000 start_rec
    {standard input}:722    .bss.start_rec:00000000 $d
    {standard input}:728    .bss.start_rec_copunt:00000000 start_rec_copunt
    {standard input}:725    .bss.start_rec_copunt:00000000 $d
    {standard input}:731    .text.main:00000000 $t
    {standard input}:736    .text.main:00000000 main
    {standard input}:1576   .text.Hall_init:00000000 Hall_init
    {standard input}:1855   .text.Calculation:00000000 Calculation
    {standard input}:3075   .text.f_rec_data:00000000 f_rec_data
    {standard input}:805    .text.main:00000058 $d
    {standard input}:814    .text.CAN0_1_IRQHandler:00000000 $t
    {standard input}:819    .text.CAN0_1_IRQHandler:00000000 CAN0_1_IRQHandler
    {standard input}:959    .text.CAN0_1_IRQHandler:000000e8 $d
    {standard input}:969    .text.CAN0_0_IRQHandler:00000000 $t
    {standard input}:974    .text.CAN0_0_IRQHandler:00000000 CAN0_0_IRQHandler
    {standard input}:1047   .text.CAN0_0_IRQHandler:00000050 $d
    {standard input}:1058   .text.CCU43_0_IRQHandler:00000000 $t
    {standard input}:1063   .text.CCU43_0_IRQHandler:00000000 CCU43_0_IRQHandler
    {standard input}:1222   .text.CCU43_0_IRQHandler:00000138 $d
    {standard input}:1238   .text.CCU43_3_IRQHandler:00000000 $t
    {standard input}:1243   .text.CCU43_3_IRQHandler:00000000 CCU43_3_IRQHandler
    {standard input}:1288   .text.CCU43_3_IRQHandler:0000002c $d
    {standard input}:1295   .text.ERU1_2_IRQHandler:00000000 $t
    {standard input}:1300   .text.ERU1_2_IRQHandler:00000000 ERU1_2_IRQHandler
    {standard input}:1699   .text.HallSensor:00000000 HallSensor
    {standard input}:1363   .text.ERU1_2_IRQHandler:00000050 $d
    {standard input}:1372   .text.ERU1_0_IRQHandler:00000000 $t
    {standard input}:1377   .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
    {standard input}:1411   .text.ERU1_0_IRQHandler:00000020 $d
    {standard input}:1418   .text.ERU1_3_IRQHandler:00000000 $t
    {standard input}:1423   .text.ERU1_3_IRQHandler:00000000 ERU1_3_IRQHandler
    {standard input}:1457   .text.ERU1_3_IRQHandler:00000020 $d
    {standard input}:1464   .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:1469   .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:1497   .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:1502   .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:1563   .text.CCU80_3_IRQHandler:00000058 $d
    {standard input}:1571   .text.Hall_init:00000000 $t
    {standard input}:1686   .text.Hall_init:0000008c $d
    {standard input}:1694   .text.HallSensor:00000000 $t
    {standard input}:1836   .text.HallSensor:000000c0 $d
    {standard input}:1850   .text.Calculation:00000000 $t
    {standard input}:2198   .text.Calculation:000002c8 $d
    {standard input}:2226   .text.Calculation:00000330 $t
    {standard input}:2971   .text.readCurrent:00000000 readCurrent
    {standard input}:2475   .text.Calculation:00000598 $d
    {standard input}:2501   .text.Calculation:000005f8 $t
    {standard input}:2861   .text.PID_Controller:00000000 PID_Controller
    {standard input}:2814   .text.Calculation:000008c0 $d
    {standard input}:2856   .text.PID_Controller:00000000 $t
    {standard input}:2961   .text.PID_Controller:000000bc $d
    {standard input}:2966   .text.readCurrent:00000000 $t
    {standard input}:3062   .text.readCurrent:00000098 $d
    {standard input}:3070   .text.f_rec_data:00000000 $t
    {standard input}:3204   .text.f_rec_data:000000b0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
DAVE_Init
CAN_NODE_Init
PWM_SVM_Start
CAN_NODE_0
PWM_SVM_0
CAN_NODE_MO_Receive
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_dadd
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
PWM_SVM_SVMUpdate
Hall_A_ISR
Hall_B_ISR
Hall_C_ISR
__aeabi_ui2d
__aeabi_i2d
__aeabi_dsub
status_LED_red_cal_time
cosf
sinf
atanf
sqrtf
BUS_IO_Write
SPI_MASTER_Receive
SPI_ChipSelect
SPI_MASTER_0
