   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB137:
  26              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE137:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB138:
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE138:
 114 0022 00BF     	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_GetInput:
 120              	.LFB140:
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 334 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 139              	 .loc 1 337 0
 140 000c 7B68     	 ldr r3,[r7,#4]
 141 000e 5A6A     	 ldr r2,[r3,#36]
 142 0010 FB78     	 ldrb r3,[r7,#3]
 143 0012 22FA03F3 	 lsr r3,r2,r3
 144 0016 03F00103 	 and r3,r3,#1
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 338 0
 146 001a 1846     	 mov r0,r3
 147 001c 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 001e BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0020 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0024 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE140:
 162 0026 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	DIGITAL_IO_SetOutputHigh:
 168              	.LFB145:
 169              	 .file 2 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 170              	 .loc 2 269 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 80B5     	 push {r7,lr}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 7,-8
 178              	 .cfi_offset 14,-4
 179 0002 82B0     	 sub sp,sp,#8
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 185 0006 7860     	 str r0,[r7,#4]
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 186              	 .loc 2 271 0
 187 0008 7B68     	 ldr r3,[r7,#4]
 188 000a 1A68     	 ldr r2,[r3]
 189 000c 7B68     	 ldr r3,[r7,#4]
 190 000e 1B7C     	 ldrb r3,[r3,#16]
 191 0010 1046     	 mov r0,r2
 192 0012 1946     	 mov r1,r3
 193 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 194              	 .loc 2 272 0
 195 0018 0837     	 adds r7,r7,#8
 196              	.LCFI21:
 197              	 .cfi_def_cfa_offset 8
 198 001a BD46     	 mov sp,r7
 199              	.LCFI22:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 001c 80BD     	 pop {r7,pc}
 203              	 .cfi_endproc
 204              	.LFE145:
 206 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	DIGITAL_IO_SetOutputLow:
 212              	.LFB146:
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 213              	 .loc 2 316 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217 0000 80B5     	 push {r7,lr}
 218              	.LCFI23:
 219              	 .cfi_def_cfa_offset 8
 220              	 .cfi_offset 7,-8
 221              	 .cfi_offset 14,-4
 222 0002 82B0     	 sub sp,sp,#8
 223              	.LCFI24:
 224              	 .cfi_def_cfa_offset 16
 225 0004 00AF     	 add r7,sp,#0
 226              	.LCFI25:
 227              	 .cfi_def_cfa_register 7
 228 0006 7860     	 str r0,[r7,#4]
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 229              	 .loc 2 318 0
 230 0008 7B68     	 ldr r3,[r7,#4]
 231 000a 1A68     	 ldr r2,[r3]
 232 000c 7B68     	 ldr r3,[r7,#4]
 233 000e 1B7C     	 ldrb r3,[r3,#16]
 234 0010 1046     	 mov r0,r2
 235 0012 1946     	 mov r1,r3
 236 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 237              	 .loc 2 319 0
 238 0018 0837     	 adds r7,r7,#8
 239              	.LCFI26:
 240              	 .cfi_def_cfa_offset 8
 241 001a BD46     	 mov sp,r7
 242              	.LCFI27:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 001c 80BD     	 pop {r7,pc}
 246              	 .cfi_endproc
 247              	.LFE146:
 249 001e 00BF     	 .section .text.PIN_INTERRUPT_GetPinValue,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	PIN_INTERRUPT_GetPinValue:
 255              	.LFB308:
 256              	 .file 3 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @file pin_interrupt.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @date 2016-03-02
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * NOTE:
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @cond
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT v4.0.2 - The PIN_INTERRUPT APP invokes user interrupt handler in a response to ris
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                        edge event signal on a pin.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Copyright (c) 2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * All rights reserved.                        
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * following conditions are met:   
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer.                        
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.     
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                         
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   products derived from this software without specific prior written permission. 
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * with Infineon Technologies AG (dave@infineon.com).         
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 2015-12-03:
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     - Initial version for DAVEv4. <BR>
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcond 
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifndef PIN_INTERRUPT_H
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #define PIN_INTERRUPT_H
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * HEADER FILES                                                                                    
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_scu.h>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_gpio.h>
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_eru.h>
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <DAVE_Common.h>
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include "pin_interrupt_conf.h"
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * MACROS                                                                                          
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_MINOR_VERSION >= 1U) && \
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_PATCH_VERSION >= 6U)))
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #error "PIN_INTERRUPT requires XMC Peripheral Library v2.1.6 or higher"
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup App_publicparam
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  @brief Initialization data structure for PIN_INTERRUPT APP
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ENUMS
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /*
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief enumeration for PIN_INTERRUPT APP
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_STATUS
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_SUCCESS = 0U,        /**<APP initialization is success */
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_FAILURE = 1U         /**<APP initialization is failure */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_STATUS_t;
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Defines trigger edge for the event generation by ETLx (Event Trigger Logic, x = [0 to 3]) unit, 
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * from ERSx(Event request source, x = [0 to 3]) unit.
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_EDGE
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_NONE = 0U, /**< no event enabled */
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_RISING = 1U,   /**< detection of rising edge generates the event */
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_FALLING = 2U,  /**< detection of falling edge generates the event */
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_BOTH = 3U      /**< detection of either edges generates the event */
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_EDGE_t;
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * DATA STRUCTURES
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** ***************************************************************************************************
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_datastructures
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Configuration structure for PIN_INTERRUPT APP
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef struct PIN_INTERRUPT
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_t *eru;  /**< Mapped ERU module */
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_PORT_t *port;  /**< Mapped port number */
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_CONFIG_t gpio_config;   /**< Initializes the input pin characteristics */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_ETL_CONFIG_t etl_config;  /**< reference to ERUx_ETLy (x = [0..1], y = [0..4])
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****                                                       module configuration */
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_SCU_IRQCTRL_t irqctrl;  /**< selects the interrupt source for a NVIC interrupt node*/
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   IRQn_Type IRQn;       /**< Mapped NVIC Node */
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_priority; 	  /**< Node Interrupt Priority */
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_FAMILY == XMC4)
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_subpriority;  /**< Node Interrupt SubPriority only valid for XMC4x */
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t etl; /*< ETLx channel (x = [0..3])*/
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t ogu; /*< OGUy channel (y = [0..3])*/
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t pin; /*< Mapped pin number */
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   bool enable_at_init;  /**< Interrupt enable for Node at initialization*/
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_t;
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifdef __cplusplus
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** extern "C" {
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * API Prototypes
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_apidoc
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Get PIN_INTERRUPT APP version
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description: </b><br>
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * The function can be used to check application software compatibility with a
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * specific version of the APP.
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void) {
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t init_status;
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_APP_VERSION_t version;
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // Initialize PIN_INTERRUPT APP:
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // PIN_INTERRUPT_Init() is called from within DAVE_Init().
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   init_status = DAVE_Init();
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if (DAVE_STATUS_SUCCESS == init_status)
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     version = PIN_INTERRUPT_GetAppVersion();
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     if (version.major != 4U) {
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *       // Probably, not the right version.
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     // More code here
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** DAVE_APP_VERSION_t PIN_INTERRUPT_GetAppVersion(void);
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Initializes a PIN_INTERRUPT APP instance
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_SUCCESS             : if initialization is successful\n
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_FAILURE             : if initialization is failed
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description:</b><br>
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT_Init API is called during initialization of DAVE APPS. This API Initializes input 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ERU and OGU hardware module initialization, Configures NVIC node and its priority in order to ge
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void)
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * {
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t status;
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle);
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Enables the IRQ.
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_EnableIRQ(handle->IRQn);
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Disables the IRQ.
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Disable(&PIN_INTERRUPT_0);
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Disable(const PIN_INTERRUPT_t *const handle)
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Disable: Handler null pointer", handle != NULL);
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_DisableIRQ(handle->IRQn);
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @brief Read input level of port pin.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @return uint32_t input logic level. Range:0-1
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * \par<b>Description:</b><br>
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * This function reads the Pn_IN register and returns the current logical value at the GPIO pin.
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * Example Usage:
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @code
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * int main(void)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * {
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   DAVE_STATUS_t status;
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   uint32_t pin_status;
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   status = DAVE_Init();   // (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0) is called within
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   if(status == DAVE_STATUS_SUCCESS)
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   else
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     while(1U)
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   while(1U)
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     pin_status = PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_0);
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     if(pin_status == 1)
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 339:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     else
 340:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 341:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 342:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 343:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 344:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   return (1);
 345:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * }
 346:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *  @endcode
 347:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** */
 348:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
 349:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 257              	 .loc 3 349 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI28:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI29:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI30:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
 350:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
 351:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   return (XMC_GPIO_GetInput(handle->port, handle->pin));
 273              	 .loc 3 351 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 5A68     	 ldr r2,[r3,#4]
 276 000c 7B68     	 ldr r3,[r7,#4]
 277 000e 93F82130 	 ldrb r3,[r3,#33]
 278 0012 1046     	 mov r0,r2
 279 0014 1946     	 mov r1,r3
 280 0016 FFF7FEFF 	 bl XMC_GPIO_GetInput
 281 001a 0346     	 mov r3,r0
 352:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 282              	 .loc 3 352 0
 283 001c 1846     	 mov r0,r3
 284 001e 0837     	 adds r7,r7,#8
 285              	.LCFI31:
 286              	 .cfi_def_cfa_offset 8
 287 0020 BD46     	 mov sp,r7
 288              	.LCFI32:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 0022 80BD     	 pop {r7,pc}
 292              	 .cfi_endproc
 293              	.LFE308:
 295              	 .global Torque_control
 296              	 .section .data.Torque_control,"aw",%progbits
 299              	Torque_control:
 300 0000 01       	 .byte 1
 301              	 .global Speed_control
 302              	 .section .bss.Speed_control,"aw",%nobits
 305              	Speed_control:
 306 0000 00       	 .space 1
 307              	 .global CAN_control
 308              	 .section .bss.CAN_control,"aw",%nobits
 311              	CAN_control:
 312 0000 00       	 .space 1
 313              	 .comm Current_U,4,4
 314              	 .comm Current_V,4,4
 315              	 .comm Current_W,4,4
 316              	 .global lookup_table
 317              	 .section .data.lookup_table,"aw",%progbits
 318              	 .align 2
 321              	lookup_table:
 322 0000 00       	 .byte 0
 323 0001 00       	 .byte 0
 324 0002 00       	 .byte 0
 325 0003 00       	 .byte 0
 326 0004 00       	 .byte 0
 327 0005 00       	 .byte 0
 328 0006 00       	 .byte 0
 329 0007 00       	 .byte 0
 330 0008 00       	 .byte 0
 331 0009 00       	 .byte 0
 332 000a 00       	 .byte 0
 333 000b FF       	 .byte -1
 334 000c 00       	 .byte 0
 335 000d 01       	 .byte 1
 336 000e 00       	 .byte 0
 337 000f 00       	 .byte 0
 338 0010 00       	 .byte 0
 339 0011 00       	 .byte 0
 340 0012 00       	 .byte 0
 341 0013 01       	 .byte 1
 342 0014 00       	 .byte 0
 343 0015 00       	 .byte 0
 344 0016 FF       	 .byte -1
 345 0017 00       	 .byte 0
 346 0018 00       	 .byte 0
 347 0019 01       	 .byte 1
 348 001a FF       	 .byte -1
 349 001b 00       	 .byte 0
 350 001c 00       	 .byte 0
 351 001d 00       	 .byte 0
 352 001e 00       	 .byte 0
 353 001f 00       	 .byte 0
 354 0020 00       	 .byte 0
 355 0021 00       	 .byte 0
 356 0022 00       	 .byte 0
 357 0023 00       	 .byte 0
 358 0024 00       	 .byte 0
 359 0025 FF       	 .byte -1
 360 0026 01       	 .byte 1
 361 0027 00       	 .byte 0
 362 0028 00       	 .byte 0
 363 0029 FF       	 .byte -1
 364 002a 00       	 .byte 0
 365 002b 00       	 .byte 0
 366 002c 01       	 .byte 1
 367 002d 00       	 .byte 0
 368 002e 00       	 .byte 0
 369 002f 00       	 .byte 0
 370 0030 00       	 .byte 0
 371 0031 00       	 .byte 0
 372 0032 01       	 .byte 1
 373 0033 00       	 .byte 0
 374 0034 FF       	 .byte -1
 375 0035 00       	 .byte 0
 376 0036 00       	 .byte 0
 377 0037 00       	 .byte 0
 378 0038 00       	 .byte 0
 379 0039 00       	 .byte 0
 380 003a 00       	 .byte 0
 381 003b 00       	 .byte 0
 382 003c 00       	 .byte 0
 383 003d 00       	 .byte 0
 384 003e 00       	 .byte 0
 385 003f 00       	 .byte 0
 386              	 .global sector
 387              	 .section .bss.sector,"aw",%nobits
 390              	sector:
 391 0000 00       	 .space 1
 392              	 .global direction
 393              	 .section .bss.direction,"aw",%nobits
 396              	direction:
 397 0000 00       	 .space 1
 398              	 .global enc_val
 399              	 .section .bss.enc_val,"aw",%nobits
 400              	 .align 1
 403              	enc_val:
 404 0000 0000     	 .space 2
 405              	 .global time_since_A
 406              	 .section .bss.time_since_A,"aw",%nobits
 407              	 .align 2
 410              	time_since_A:
 411 0000 00000000 	 .space 4
 412              	 .global time_since_B
 413              	 .section .bss.time_since_B,"aw",%nobits
 414              	 .align 2
 417              	time_since_B:
 418 0000 00000000 	 .space 4
 419              	 .global time_since_C
 420              	 .section .bss.time_since_C,"aw",%nobits
 421              	 .align 2
 424              	time_since_C:
 425 0000 00000000 	 .space 4
 426              	 .global time_180deg
 427              	 .section .data.time_180deg,"aw",%progbits
 428              	 .align 2
 431              	time_180deg:
 432 0000 E8030000 	 .word 1000
 433              	 .global time_180deg_cal
 434              	 .section .data.time_180deg_cal,"aw",%progbits
 435              	 .align 2
 438              	time_180deg_cal:
 439 0000 E8030000 	 .word 1000
 440              	 .comm last_Hall_trig,1,1
 441              	 .global angle_in_sector
 442              	 .section .data.angle_in_sector,"aw",%progbits
 443              	 .align 2
 446              	angle_in_sector:
 447 0000 0000F041 	 .word 1106247680
 448              	 .global angle_phi
 449              	 .section .bss.angle_phi,"aw",%nobits
 450              	 .align 2
 453              	angle_phi:
 454 0000 00000000 	 .space 4
 455              	 .comm ialpha,4,4
 456              	 .comm ibeta,4,4
 457              	 .comm iq,4,4
 458              	 .comm id,4,4
 459              	 .comm Valpha,4,4
 460              	 .comm Vbeta,4,4
 461              	 .global omega_ele_rads
 462              	 .section .bss.omega_ele_rads,"aw",%nobits
 463              	 .align 2
 466              	omega_ele_rads:
 467 0000 00000000 	 .space 4
 468              	 .global omega_mech_rps
 469              	 .section .bss.omega_mech_rps,"aw",%nobits
 470              	 .align 2
 473              	omega_mech_rps:
 474 0000 00000000 	 .space 4
 475              	 .global omega_mech_rps_temp
 476              	 .section .bss.omega_mech_rps_temp,"aw",%nobits
 477              	 .align 2
 480              	omega_mech_rps_temp:
 481 0000 00000000 	 .space 4
 482              	 .global omega_ele_degs
 483              	 .section .bss.omega_ele_degs,"aw",%nobits
 484              	 .align 2
 487              	omega_ele_degs:
 488 0000 00000000 	 .space 4
 489              	 .global speed_ref
 490              	 .section .bss.speed_ref,"aw",%nobits
 491              	 .align 2
 494              	speed_ref:
 495 0000 00000000 	 .space 4
 496              	 .global omega_ele_rads_ref
 497              	 .section .bss.omega_ele_rads_ref,"aw",%nobits
 498              	 .align 2
 501              	omega_ele_rads_ref:
 502 0000 00000000 	 .space 4
 503              	 .global iq_ref
 504              	 .section .bss.iq_ref,"aw",%nobits
 505              	 .align 2
 508              	iq_ref:
 509 0000 00000000 	 .space 4
 510              	 .global T_ref
 511              	 .section .bss.T_ref,"aw",%nobits
 512              	 .align 2
 515              	T_ref:
 516 0000 00000000 	 .space 4
 517              	 .global Vd
 518              	 .section .bss.Vd,"aw",%nobits
 519              	 .align 2
 522              	Vd:
 523 0000 00000000 	 .space 4
 524              	 .global Vq
 525              	 .section .bss.Vq,"aw",%nobits
 526              	 .align 2
 529              	Vq:
 530 0000 00000000 	 .space 4
 531              	 .global omega_mech_rps_ref
 532              	 .section .bss.omega_mech_rps_ref,"aw",%nobits
 533              	 .align 2
 536              	omega_mech_rps_ref:
 537 0000 00000000 	 .space 4
 538              	 .comm Speeds_int16_r,8,4
 539              	 .global CAN_speed_ref
 540              	 .section .bss.CAN_speed_ref,"aw",%nobits
 541              	 .align 2
 544              	CAN_speed_ref:
 545 0000 00000000 	 .space 4
 546              	 .global CAN_new_meassage
 547              	 .section .bss.CAN_new_meassage,"aw",%nobits
 550              	CAN_new_meassage:
 551 0000 00       	 .space 1
 552              	 .global CAN_no_com_counter
 553              	 .section .bss.CAN_no_com_counter,"aw",%nobits
 556              	CAN_no_com_counter:
 557 0000 00       	 .space 1
 558              	 .global distance_180deg_ele_count
 559              	 .section .bss.distance_180deg_ele_count,"aw",%nobits
 560              	 .align 2
 563              	distance_180deg_ele_count:
 564 0000 00000000 	 .space 4
 565              	 .global Speed_act
 566              	 .section .bss.Speed_act,"aw",%nobits
 567              	 .align 2
 570              	Speed_act:
 571 0000 00000000 	 .space 4
 572              	 .global distance
 573              	 .section .bss.distance,"aw",%nobits
 574              	 .align 2
 577              	distance:
 578 0000 00000000 	 .space 4
 579              	 .comm modulation_index,4,4
 580              	 .comm modulation_index_scaled,4,4
 581              	 .comm angle_ab,4,4
 582              	 .comm angle_ab_rad,4,4
 583              	 .comm amplitude_ab,4,4
 584              	 .global Ts
 585              	 .section .data.Ts,"aw",%progbits
 586              	 .align 2
 589              	Ts:
 590 0000 17B75138 	 .word 944879383
 591              	 .global Tcyc
 592              	 .section .data.Tcyc,"aw",%progbits
 593              	 .align 2
 596              	Tcyc:
 597 0000 17B75139 	 .word 961656599
 598              	 .global scaling_factor
 599              	 .section .data.scaling_factor,"aw",%progbits
 600              	 .align 2
 603              	scaling_factor:
 604 0000 00000743 	 .word 1124532224
 605              	 .comm amplitude_corrected,4,4
 606              	 .global count
 607              	 .section .bss.count,"aw",%nobits
 610              	count:
 611 0000 00       	 .space 1
 612              	 .global offset_pos
 613              	 .section .data.offset_pos,"aw",%progbits
 614              	 .align 2
 617              	offset_pos:
 618 0000 0000D8C1 	 .word -1042808832
 619              	 .global offset_neg
 620              	 .section .data.offset_neg,"aw",%progbits
 621              	 .align 2
 624              	offset_neg:
 625 0000 0000A0C1 	 .word -1046478848
 626              	 .global Iq_param
 627              	 .section .data.Iq_param,"aw",%progbits
 628              	 .align 2
 631              	Iq_param:
 632 0000 295C8F3E 	 .word 1049582633
 633 0004 00006843 	 .word 1130889216
 634 0008 00000000 	 .word 0
 635 000c 0000C842 	 .word 1120403456
 636 0010 0000C8C2 	 .word -1027080192
 637 0014 00000000 	 .word 0
 638 0018 00000000 	 .word 0
 639 001c 00000000 	 .word 0
 640 0020 00000000 	 .space 4
 641              	 .global Id_param
 642              	 .section .data.Id_param,"aw",%progbits
 643              	 .align 2
 646              	Id_param:
 647 0000 295C8F3E 	 .word 1049582633
 648 0004 00006843 	 .word 1130889216
 649 0008 00000000 	 .word 0
 650 000c 0000C842 	 .word 1120403456
 651 0010 0000C8C2 	 .word -1027080192
 652 0014 00000000 	 .word 0
 653 0018 00000000 	 .word 0
 654 001c 00000000 	 .word 0
 655 0020 00000000 	 .space 4
 656              	 .global omega_param
 657              	 .section .data.omega_param,"aw",%progbits
 658              	 .align 2
 661              	omega_param:
 662 0000 7C61923E 	 .word 1049780604
 663 0004 5DFE033E 	 .word 1040449117
 664 0008 00000000 	 .word 0
 665 000c 00000040 	 .word 1073741824
 666 0010 000000C0 	 .word -1073741824
 667 0014 00000000 	 .word 0
 668 0018 00000000 	 .word 0
 669 001c 00000000 	 .word 0
 670 0020 00000000 	 .space 4
 671              	 .global omega_param1
 672              	 .section .data.omega_param1,"aw",%progbits
 673              	 .align 2
 676              	omega_param1:
 677 0000 0AD7A33B 	 .word 1000593162
 678 0004 0AD7233C 	 .word 1008981770
 679 0008 00000000 	 .word 0
 680 000c 0000C03F 	 .word 1069547520
 681 0010 0000C0BF 	 .word -1077936128
 682 0014 00000000 	 .word 0
 683 0018 00000000 	 .word 0
 684 001c 00000000 	 .word 0
 685 0020 00000000 	 .space 4
 686              	 .global Speed_detection_OK
 687              	 .section .bss.Speed_detection_OK,"aw",%nobits
 690              	Speed_detection_OK:
 691 0000 00       	 .space 1
 692              	 .global setting_time_scalar
 693              	 .section .data.setting_time_scalar,"aw",%progbits
 694              	 .align 2
 697              	setting_time_scalar:
 698 0000 9A99193F 	 .word 1058642330
 699              	 .global step_start
 700              	 .section .bss.step_start,"aw",%nobits
 701              	 .align 2
 704              	step_start:
 705 0000 00000000 	 .space 4
 706              	 .global step
 707              	 .section .data.step,"aw",%progbits
 708              	 .align 2
 711              	step:
 712 0000 0000803F 	 .word 1065353216
 713              	 .global start_help_count
 714              	 .section .bss.start_help_count,"aw",%nobits
 717              	start_help_count:
 718 0000 00       	 .space 1
 719              	 .global start_help
 720              	 .section .bss.start_help,"aw",%nobits
 723              	start_help:
 724 0000 00       	 .space 1
 725              	 .global start_help_flag
 726              	 .section .bss.start_help_flag,"aw",%nobits
 729              	start_help_flag:
 730 0000 00       	 .space 1
 731              	 .global V_DC_link
 732              	 .section .data.V_DC_link,"aw",%progbits
 733              	 .align 2
 736              	V_DC_link:
 737 0000 CDCC6C41 	 .word 1097649357
 738              	 .global ADC_TO_DCLINK
 739              	 .section .data.ADC_TO_DCLINK,"aw",%progbits
 740              	 .align 2
 743              	ADC_TO_DCLINK:
 744 0000 00009A42 	 .word 1117388800
 745 0004 CDCCA042 	 .word 1117834445
 746 0008 00009A42 	 .word 1117388800
 747 000c 00009A42 	 .word 1117388800
 748 0010 00009A42 	 .word 1117388800
 749 0014 00009F42 	 .word 1117716480
 750              	 .section .text.main,"ax",%progbits
 751              	 .align 2
 752              	 .global main
 753              	 .thumb
 754              	 .thumb_func
 756              	main:
 757              	.LFB552:
 758              	 .file 4 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2020 Jan 02 10:21:43
   5:../main.c     ****  *  Author: Baldo
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** // status: 11.05.2022
   9:../main.c     **** 
  10:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  11:../main.c     **** #include <math.h>
  12:../main.c     **** #include <stdio.h> //for printf
  13:../main.c     **** #include "rec_data_function.h"
  14:../main.c     **** 
  15:../main.c     **** //#######################
  16:../main.c     **** //FUNCTION DECLARATION
  17:../main.c     **** //########################
  18:../main.c     **** float readCurrent(uint8_t);
  19:../main.c     **** void Hall_init(void);
  20:../main.c     **** void HallSensor(void);
  21:../main.c     **** void Calculation(void);
  22:../main.c     **** 
  23:../main.c     **** //########################
  24:../main.c     **** //VARIABLE DECLARATION
  25:../main.c     **** //########################
  26:../main.c     **** 
  27:../main.c     **** // NEED to be set
  28:../main.c     **** //motor
  29:../main.c     **** #define MOTOR_NUM 6 // for trque dirction motro 1 differtn form rest so far
  30:../main.c     **** #define MOTOR_ON_ROVER 1// 0 front left 1 front right 2 back left 3 back right
  31:../main.c     **** #define INVERTER_NUM 1 //witch board for ADC_TO_DCLINK factor version 2 boards: B3 right rear rover
  32:../main.c     **** 
  33:../main.c     **** //control type
  34:../main.c     **** uint8_t Torque_control = 1;
  35:../main.c     **** uint8_t Speed_control = 0; //if 0 is torque control if 1 is speed control
  36:../main.c     **** uint8_t CAN_control = 0; // id 1 CAN speed controll aktive
  37:../main.c     **** 
  38:../main.c     **** #define IQ_REF_MAX 5
  39:../main.c     **** #define CAN_NO_COM_TH 250
  40:../main.c     **** #define MAX_Speed_CAN 2
  41:../main.c     **** #define SPEED_LIMIT_CTRL_TO_ZERO 100 //omega_ele rad/s
  42:../main.c     **** #define TIME_OMEGA_0  5000 //time since last hall before omgea set to 0 in 100us
  43:../main.c     **** 
  44:../main.c     **** // Define often used vaules to decrease computational effort
  45:../main.c     **** #define PI 3.14159265
  46:../main.c     **** #define TwoThird 0.66666667
  47:../main.c     **** #define TwoPiThird 2.0943951
  48:../main.c     **** #define FourPiThird 4.1887902
  49:../main.c     **** #define Pi180 0.01745329
  50:../main.c     **** 
  51:../main.c     **** #define ANGLE_ONE_DEGREE (46603U)
  52:../main.c     **** //#define ANGLE_60_DEGREE	 (2796203U)
  53:../main.c     **** //#define ANGLE_180_DEGREE (8388608U)
  54:../main.c     **** 
  55:../main.c     **** //#define ANGLE_LSB (9455) // 2^24 corresponds to 360°. For a timer interrupt delta time of 100us 
  56:../main.c     **** 
  57:../main.c     **** // Define Chip select Pins for Current measurement via SPI Interface
  58:../main.c     **** #define ChipSelect_U 0b110
  59:../main.c     **** #define ChipSelect_V 0b101
  60:../main.c     **** #define ChipSelect_W 0b011
  61:../main.c     **** #define J 0.0023064 //SK J = 1/2 * m_wheel * r_wheel^2 = 1/2*1.2kg*(62mm)^2
  62:../main.c     **** #define K_T 0.21 //SK torque constant in Nm/A
  63:../main.c     **** #define K_inv (15.7/1.732) // K_inv = V / m = V_DC / 2 * 2/sqrt(3) = V_DC/sqrt(3)
  64:../main.c     **** //#define Psi_p 0.0082  60/  (2 * PI) * 1.4142 // Psi_p = K_back_EMF = 0.0082 V / rpm_mech --> 60 t
  65:../main.c     **** //#define Ls 0.00088 // Ls = Lm*1.1 = 0.8mH * 1.1 = 0.00088H
  66:../main.c     **** #define PPZ 11
  67:../main.c     **** #define WHEEL_R 0.0675 //0.135/2 straigt vaule other thing casued problems
  68:../main.c     **** 
  69:../main.c     **** float Current_U;
  70:../main.c     **** float Current_V;
  71:../main.c     **** float Current_W;
  72:../main.c     **** 
  73:../main.c     **** // Declaration of Lookup Table
  74:../main.c     **** int8_t lookup_table[] = {0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,-1,0,0,1,-1,0,0,0,0,0,0,0,0,0
  75:../main.c     **** //access via the index in the  form of the 6 bits (3 previous hall states and 3 actual  hall states
  76:../main.c     **** //for each of the 2^6 possibilities of sequence of hall events  it has been thought about the wavef
  77:../main.c     **** 
  78:../main.c     **** volatile int8_t sector = 0;
  79:../main.c     **** volatile int8_t direction = 0;              // direction +1/-1 -> CW and CCW
  80:../main.c     **** volatile uint16_t enc_val = 0;          // old and new values of all Hall Sensors
  81:../main.c     **** volatile uint32_t time_since_A = 0;	// time between to edges Hall A
  82:../main.c     **** volatile uint32_t time_since_B = 0; // time between to edges Hall B
  83:../main.c     **** volatile uint32_t time_since_C = 0; // time between to edges Hall C
  84:../main.c     **** volatile uint32_t time_180deg = 1000;        // time which last triggered HAL sensor needed for 180
  85:../main.c     **** volatile uint32_t time_180deg_cal = 1000;
  86:../main.c     **** volatile char last_Hall_trig;			//last triggered Hall Sensor A/B/C
  87:../main.c     **** 
  88:../main.c     **** float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60°
  89:../main.c     **** //volatile uint32_t TIME_OMEGA_0 = 50000; // t over this therschold assumed to be zero
  90:../main.c     **** 
  91:../main.c     **** float angle_phi = 0;
  92:../main.c     **** float ialpha,ibeta,iq,id,Valpha,Vbeta;
  93:../main.c     **** 
  94:../main.c     **** volatile float omega_ele_rads = 0; 	// electrical rad / sec //current real velocity calculated from
  95:../main.c     **** volatile float omega_mech_rps = 0;	//SK	//mechanical rounds per second
  96:../main.c     **** volatile float omega_mech_rps_temp = 0; //SK	//since dividing through the incremental (counted up) 
  97:../main.c     **** //volatile float omega_ele_rads_ref = -2*69.11; //1*69.11; //SK		//target velocity electrical in ra
  98:../main.c     **** 
  99:../main.c     **** volatile float omega_ele_degs = 0;
 100:../main.c     **** 
 101:../main.c     **** // REF vaules given to PI controller
 102:../main.c     **** float speed_ref = 0.0; //meters per second
 103:../main.c     **** float omega_ele_rads_ref = 0.0; // electrical rad per second
 104:../main.c     **** float iq_ref = 0.0;
 105:../main.c     **** float T_ref = 0.0;
 106:../main.c     **** float Vd = 0;
 107:../main.c     **** float Vq = 0;
 108:../main.c     **** float omega_mech_rps_ref = 0;
 109:../main.c     **** 
 110:../main.c     **** // CAN vars
 111:../main.c     **** int16_t Speeds_int16_r[4];
 112:../main.c     **** float CAN_speed_ref = 0.0;
 113:../main.c     **** uint8_t CAN_new_meassage = 0; // if 1 recived can data
 114:../main.c     **** uint8_t CAN_no_com_counter = 0;
 115:../main.c     **** // distacne vaule back over can
 116:../main.c     **** int distance_180deg_ele_count = 0;
 117:../main.c     **** float Speed_act = 0;
 118:../main.c     **** float distance = 0;
 119:../main.c     **** 
 120:../main.c     **** volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
 121:../main.c     **** volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which 
 122:../main.c     **** 
 123:../main.c     **** float angle_ab;
 124:../main.c     **** float angle_ab_rad;
 125:../main.c     **** float amplitude_ab;
 126:../main.c     **** 
 127:../main.c     **** float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
 128:../main.c     **** float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I
 129:../main.c     **** 
 130:../main.c     **** //float amp_limit_SVM_app = 2500;  Bo
 131:../main.c     **** 
 132:../main.c     **** // scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
 133:../main.c     **** float scaling_factor = 135;
 134:../main.c     **** float amplitude_corrected;
 135:../main.c     **** 
 136:../main.c     **** 
 137:../main.c     **** // Counter for calculation function -> only use a multiple of the SVM Interrupt
 138:../main.c     **** volatile uint8_t count = 0;
 139:../main.c     **** 
 140:../main.c     **** // Angle correction factor to align Current to Hall Sensor vuales form 14/04
 141:../main.c     **** float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
 142:../main.c     **** float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction
 143:../main.c     **** 
 144:../main.c     **** //################ PI
 145:../main.c     **** // PID Controller declaration for Id and Iq component
 146:../main.c     **** typedef struct{
 147:../main.c     **** 	float P,I,D;
 148:../main.c     **** 	float MaxLimit, MinLimit;
 149:../main.c     **** 	float Output;
 150:../main.c     **** 	float Deviation_old, Deviation_old2;
 151:../main.c     **** 	float Output_z;
 152:../main.c     **** }PID_param;
 153:../main.c     **** 
 154:../main.c     **** //Vuales 14/04 mit maurzio
 155:../main.c     **** //PID_param omega_param = {.P = 0.004, .I = 0.004, .D = 0.0, .MaxLimit =  1, .MinLimit = -1, .Outpu
 156:../main.c     **** //PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 157:../main.c     **** //PID_param Id_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 158:../main.c     **** 
 159:../main.c     **** // max ested iq 100Hz wbw
 160:../main.c     **** //PID_param Iq_param = {.P = 0.56, .I = 465.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Outpu
 161:../main.c     **** //PID_param Id_param = {.P = 0.56, .I = 465.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Outpu
 162:../main.c     **** //PID_param omega_param = {.P = 0.2921, .I = 0.1213, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Out
 163:../main.c     **** 
 164:../main.c     **** // crretn best on motor 10 iq 50Hz wbw
 165:../main.c     **** PID_param Iq_param = {.P = 0.28, .I = 232.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output 
 166:../main.c     **** PID_param Id_param = {.P = 0.28, .I = 232.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output 
 167:../main.c     **** //PID_param omega_param10 = {.P = 0.3949, .I = 0.1619, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .O
 168:../main.c     **** PID_param omega_param = {.P = 0.2859, .I = 0.1289, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Outpu
 169:../main.c     **** 
 170:../main.c     **** // for motro 1
 171:../main.c     **** PID_param omega_param1 = {.P = 0.005, .I = 0.01, .D = 0.0, .MaxLimit =  1.5, .MinLimit = -1.5, .Out
 172:../main.c     **** 
 173:../main.c     **** 
 174:../main.c     **** float PID_Controller(float,float,PID_param *param);
 175:../main.c     **** 
 176:../main.c     **** uint8_t Speed_detection_OK = 0;
 177:../main.c     **** float setting_time_scalar = 0.6, step_start =0, step = 1;
 178:../main.c     **** 
 179:../main.c     **** uint8_t start_help_count = 0, start_help = 0, start_help_flag = 0;
 180:../main.c     **** #define START_HELP_T 0.1
 181:../main.c     **** 
 182:../main.c     **** float V_DC_link = 14.8; // nominal batt voltage
 183:../main.c     **** float ADC_TO_DCLINK[6] = {77, 80.4, 77, 77, 77, 79.5}; // 77 defalft value
 184:../main.c     **** 
 185:../main.c     **** 
 186:../main.c     **** 
 187:../main.c     **** //########################
 188:../main.c     **** // MAIN
 189:../main.c     **** //########################
 190:../main.c     **** 
 191:../main.c     **** int main(void)
 192:../main.c     **** {
 759              	 .loc 4 192 0
 760              	 .cfi_startproc
 761              	 
 762              	 
 763 0000 80B5     	 push {r7,lr}
 764              	.LCFI33:
 765              	 .cfi_def_cfa_offset 8
 766              	 .cfi_offset 7,-8
 767              	 .cfi_offset 14,-4
 768 0002 84B0     	 sub sp,sp,#16
 769              	.LCFI34:
 770              	 .cfi_def_cfa_offset 24
 771 0004 02AF     	 add r7,sp,#8
 772              	.LCFI35:
 773              	 .cfi_def_cfa 7,16
 193:../main.c     ****   DAVE_STATUS_t status;
 194:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 774              	 .loc 4 194 0
 775 0006 FFF7FEFF 	 bl DAVE_Init
 776 000a 0346     	 mov r3,r0
 777 000c FB71     	 strb r3,[r7,#7]
 195:../main.c     **** 
 196:../main.c     ****   Hall_init();
 778              	 .loc 4 196 0
 779 000e FFF7FEFF 	 bl Hall_init
 197:../main.c     **** 
 198:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 780              	 .loc 4 198 0
 781 0012 FB79     	 ldrb r3,[r7,#7]
 782 0014 002B     	 cmp r3,#0
 783 0016 00D0     	 beq .L10
 784              	.L11:
 199:../main.c     ****   {
 200:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 201:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 202:../main.c     **** 
 203:../main.c     ****     while(1U)
 204:../main.c     ****     {
 205:../main.c     **** 
 206:../main.c     ****     }
 785              	 .loc 4 206 0 discriminator 1
 786 0018 FEE7     	 b .L11
 787              	.L10:
 207:../main.c     ****   }
 208:../main.c     **** 
 209:../main.c     ****   //Initialization of CAN
 210:../main.c     ****   	CAN_NODE_STATUS_t init_status;
 211:../main.c     ****   	init_status = CAN_NODE_Init(&CAN_NODE_0);
 788              	 .loc 4 211 0
 789 001a 1748     	 ldr r0,.L14
 790 001c FFF7FEFF 	 bl CAN_NODE_Init
 791 0020 0346     	 mov r3,r0
 792 0022 BB71     	 strb r3,[r7,#6]
 212:../main.c     **** 
 213:../main.c     ****   	if (init_status != CAN_NODE_STATUS_SUCCESS) {
 214:../main.c     ****   		XMC_DEBUG("CAN initialization failed\n");
 215:../main.c     ****   	}
 216:../main.c     **** 
 217:../main.c     ****   if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
 218:../main.c     **** 	  while(1U)
 219:../main.c     **** 	      {
 220:../main.c     **** 		//  printf("MOTOR_ON_ROVER number false");
 221:../main.c     **** 	      }
 222:../main.c     ****   }
 223:../main.c     **** 
 224:../main.c     ****   if((INVERTER_NUM > 6) || INVERTER_NUM < 0){ // if possibel number eneterd
 225:../main.c     ****  	  while(1U)
 226:../main.c     ****  	      {
 227:../main.c     ****  		//  printf("INVERTER_NUM num false");
 228:../main.c     ****  	      }
 229:../main.c     ****    }
 230:../main.c     **** 
 231:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 232:../main.c     ****   while(1U)
 233:../main.c     ****   {
 234:../main.c     **** 	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 793              	 .loc 4 234 0
 794 0024 1548     	 ldr r0,.L14+4
 795 0026 FFF7FEFF 	 bl PWM_SVM_Start
 796              	.L13:
 235:../main.c     **** 		  while(1U)
 236:../main.c     **** 		    {
 237:../main.c     **** 			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 797              	 .loc 4 237 0
 798 002a 154B     	 ldr r3,.L14+8
 799 002c 1B78     	 ldrb r3,[r3]
 800 002e DBB2     	 uxtb r3,r3
 801 0030 032B     	 cmp r3,#3
 802 0032 20D9     	 bls .L12
 238:../main.c     **** 			  {
 239:../main.c     **** 				  count=0;
 803              	 .loc 4 239 0
 804 0034 124B     	 ldr r3,.L14+8
 805 0036 0022     	 movs r2,#0
 806 0038 1A70     	 strb r2,[r3]
 240:../main.c     **** 				  Calculation();
 807              	 .loc 4 240 0
 808 003a FFF7FEFF 	 bl Calculation
 241:../main.c     **** 
 242:../main.c     **** 				  // f_rec_data(omega_mech_rps	,T_ref,&T_ref,0.12,0.16,10,10000);  //  tref speedd spech char
 243:../main.c     **** 
 244:../main.c     **** 				  //f_rec_data(omega_mech_rps	,T_ref,&omega_mech_rps_ref,step_start,step,2,5000);
 245:../main.c     **** 
 246:../main.c     **** 				   rec_step_from_0(omega_mech_rps, T_ref,start_help_flag, &omega_mech_rps_ref, 1, 10); // start
 809              	 .loc 4 246 0
 810 003e 114B     	 ldr r3,.L14+12
 811 0040 1968     	 ldr r1,[r3]
 812 0042 114B     	 ldr r3,.L14+16
 813 0044 1A68     	 ldr r2,[r3]
 814 0046 114B     	 ldr r3,.L14+20
 815 0048 1B78     	 ldrb r3,[r3]
 816 004a 07EE903A 	 fmsr s15,r3
 817 004e F8EE677A 	 fuitos s15,s15
 818 0052 4FF07E53 	 mov r3,#1065353216
 819 0056 0093     	 str r3,[sp]
 820 0058 0A23     	 movs r3,#10
 821 005a 0193     	 str r3,[sp,#4]
 822 005c 0846     	 mov r0,r1
 823 005e 1146     	 mov r1,r2
 824 0060 17EE902A 	 fmrs r2,s15
 825 0064 0A4B     	 ldr r3,.L14+24
 826 0066 FFF7FEFF 	 bl rec_step_from_0
 247:../main.c     **** 				   start_help_flag = 0;
 827              	 .loc 4 247 0
 828 006a 084B     	 ldr r3,.L14+20
 829 006c 0022     	 movs r2,#0
 830 006e 1A70     	 strb r2,[r3]
 248:../main.c     **** 
 249:../main.c     **** 				  ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 831              	 .loc 4 249 0
 832 0070 0848     	 ldr r0,.L14+28
 833 0072 FFF7FEFF 	 bl ADC_MEASUREMENT_StartConversion
 834              	.L12:
 250:../main.c     **** 			  }
 251:../main.c     **** 		    }
 835              	 .loc 4 251 0
 836 0076 D8E7     	 b .L13
 837              	.L15:
 838              	 .align 2
 839              	.L14:
 840 0078 00000000 	 .word CAN_NODE_0
 841 007c 00000000 	 .word PWM_SVM_0
 842 0080 00000000 	 .word count
 843 0084 00000000 	 .word omega_mech_rps
 844 0088 00000000 	 .word T_ref
 845 008c 00000000 	 .word start_help_flag
 846 0090 00000000 	 .word omega_mech_rps_ref
 847 0094 00000000 	 .word ADC_MEASUREMENT_0
 848              	 .cfi_endproc
 849              	.LFE552:
 851              	 .section .text.CAN0_1_IRQHandler,"ax",%progbits
 852              	 .align 2
 853              	 .global CAN0_1_IRQHandler
 854              	 .thumb
 855              	 .thumb_func
 857              	CAN0_1_IRQHandler:
 858              	.LFB553:
 252:../main.c     ****   }
 253:../main.c     **** }
 254:../main.c     **** 
 255:../main.c     **** 
 256:../main.c     **** //########################
 257:../main.c     **** // INTERRUPTS
 258:../main.c     **** //########################
 259:../main.c     **** 
 260:../main.c     **** // CAN Communication
 261:../main.c     **** void CAN_RX_MO2_ISR(void){
 859              	 .loc 4 261 0
 860              	 .cfi_startproc
 861              	 
 862              	 
 863 0000 80B5     	 push {r7,lr}
 864              	.LCFI36:
 865              	 .cfi_def_cfa_offset 8
 866              	 .cfi_offset 7,-8
 867              	 .cfi_offset 14,-4
 868 0002 84B0     	 sub sp,sp,#16
 869              	.LCFI37:
 870              	 .cfi_def_cfa_offset 24
 871 0004 00AF     	 add r7,sp,#0
 872              	.LCFI38:
 873              	 .cfi_def_cfa_register 7
 262:../main.c     **** 		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
 874              	 .loc 4 262 0
 875 0006 3C4B     	 ldr r3,.L27
 876 0008 1B69     	 ldr r3,[r3,#16]
 877 000a 1B68     	 ldr r3,[r3]
 878 000c BB60     	 str r3,[r7,#8]
 263:../main.c     **** 		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
 879              	 .loc 4 263 0
 880 000e 3A4B     	 ldr r3,.L27
 881 0010 1B69     	 ldr r3,[r3,#16]
 882 0012 1846     	 mov r0,r3
 883 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 264:../main.c     **** 
 265:../main.c     **** 		uint8_t data_r[8];
 266:../main.c     **** 		 int i;
 267:../main.c     **** 		 for(i = 0 ; i < 8 ; i ++){
 884              	 .loc 4 267 0
 885 0018 0023     	 movs r3,#0
 886 001a FB60     	 str r3,[r7,#12]
 887 001c 0CE0     	 b .L17
 888              	.L18:
 268:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 889              	 .loc 4 268 0 discriminator 3
 890 001e BA68     	 ldr r2,[r7,#8]
 891 0020 FB68     	 ldr r3,[r7,#12]
 892 0022 1344     	 add r3,r3,r2
 893 0024 1033     	 adds r3,r3,#16
 894 0026 1978     	 ldrb r1,[r3]
 895 0028 3A46     	 mov r2,r7
 896 002a FB68     	 ldr r3,[r7,#12]
 897 002c 1344     	 add r3,r3,r2
 898 002e 0A46     	 mov r2,r1
 899 0030 1A70     	 strb r2,[r3]
 267:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 900              	 .loc 4 267 0 discriminator 3
 901 0032 FB68     	 ldr r3,[r7,#12]
 902 0034 0133     	 adds r3,r3,#1
 903 0036 FB60     	 str r3,[r7,#12]
 904              	.L17:
 267:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 905              	 .loc 4 267 0 is_stmt 0 discriminator 1
 906 0038 FB68     	 ldr r3,[r7,#12]
 907 003a 072B     	 cmp r3,#7
 908 003c EFDD     	 ble .L18
 269:../main.c     **** 		 }
 270:../main.c     **** 
 271:../main.c     **** 		 for(i = 0 ; i < 4 ; i ++){
 909              	 .loc 4 271 0 is_stmt 1
 910 003e 0023     	 movs r3,#0
 911 0040 FB60     	 str r3,[r7,#12]
 912 0042 1AE0     	 b .L19
 913              	.L20:
 272:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 914              	 .loc 4 272 0 discriminator 3
 915 0044 FB68     	 ldr r3,[r7,#12]
 916 0046 5B00     	 lsls r3,r3,#1
 917 0048 0133     	 adds r3,r3,#1
 918 004a 07F11002 	 add r2,r7,#16
 919 004e 1344     	 add r3,r3,r2
 920 0050 13F8103C 	 ldrb r3,[r3,#-16]
 921 0054 1B02     	 lsls r3,r3,#8
 922 0056 9AB2     	 uxth r2,r3
 923 0058 FB68     	 ldr r3,[r7,#12]
 924 005a 5B00     	 lsls r3,r3,#1
 925 005c 07F11001 	 add r1,r7,#16
 926 0060 0B44     	 add r3,r3,r1
 927 0062 13F8103C 	 ldrb r3,[r3,#-16]
 928 0066 9BB2     	 uxth r3,r3
 929 0068 1343     	 orrs r3,r3,r2
 930 006a 99B2     	 uxth r1,r3
 931 006c 234A     	 ldr r2,.L27+4
 932 006e FB68     	 ldr r3,[r7,#12]
 933 0070 22F81310 	 strh r1,[r2,r3,lsl#1]
 271:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 934              	 .loc 4 271 0 discriminator 3
 935 0074 FB68     	 ldr r3,[r7,#12]
 936 0076 0133     	 adds r3,r3,#1
 937 0078 FB60     	 str r3,[r7,#12]
 938              	.L19:
 271:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 939              	 .loc 4 271 0 is_stmt 0 discriminator 1
 940 007a FB68     	 ldr r3,[r7,#12]
 941 007c 032B     	 cmp r3,#3
 942 007e E1DD     	 ble .L20
 273:../main.c     **** 			 }
 274:../main.c     **** 
 275:../main.c     **** 		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 943              	 .loc 4 275 0 is_stmt 1
 944 0080 1E4B     	 ldr r3,.L27+4
 945 0082 5B88     	 ldrh r3,[r3,#2]
 946 0084 1BB2     	 sxth r3,r3
 947 0086 07EE903A 	 fmsr s15,r3
 948 008a F8EEE77A 	 fsitos s15,s15
 949 008e 9FED1C7A 	 flds s14,.L27+8
 950 0092 C7EE877A 	 fdivs s15,s15,s14
 951 0096 1B4B     	 ldr r3,.L27+12
 952 0098 C3ED007A 	 fsts s15,[r3]
 276:../main.c     **** 
 277:../main.c     **** 		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6
 953              	 .loc 4 277 0
 954 009c 194B     	 ldr r3,.L27+12
 955 009e D3ED007A 	 flds s15,[r3]
 956 00a2 F1EE677A 	 fnegs s15,s15
 957 00a6 174B     	 ldr r3,.L27+12
 958 00a8 C3ED007A 	 fsts s15,[r3]
 278:../main.c     **** 
 279:../main.c     **** 		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 959              	 .loc 4 279 0
 960 00ac 154B     	 ldr r3,.L27+12
 961 00ae D3ED007A 	 flds s15,[r3]
 962 00b2 B0EE007A 	 fconsts s14,#0
 963 00b6 F4EEC77A 	 fcmpes s15,s14
 964 00ba F1EE10FA 	 fmstat
 965 00be 03DD     	 ble .L21
 966              	 .loc 4 279 0 is_stmt 0 discriminator 1
 967 00c0 104B     	 ldr r3,.L27+12
 968 00c2 4FF08042 	 mov r2,#1073741824
 969 00c6 1A60     	 str r2,[r3]
 970              	.L21:
 280:../main.c     **** 		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 971              	 .loc 4 280 0 is_stmt 1
 972 00c8 0E4B     	 ldr r3,.L27+12
 973 00ca D3ED007A 	 flds s15,[r3]
 974 00ce B8EE007A 	 fconsts s14,#128
 975 00d2 F4EEC77A 	 fcmpes s15,s14
 976 00d6 F1EE10FA 	 fmstat
 977 00da 03D5     	 bpl .L23
 978              	 .loc 4 280 0 is_stmt 0 discriminator 1
 979 00dc 094B     	 ldr r3,.L27+12
 980 00de 4FF04042 	 mov r2,#-1073741824
 981 00e2 1A60     	 str r2,[r3]
 982              	.L23:
 281:../main.c     **** 
 282:../main.c     **** 		CAN_new_meassage = 1;
 983              	 .loc 4 282 0 is_stmt 1
 984 00e4 084B     	 ldr r3,.L27+16
 985 00e6 0122     	 movs r2,#1
 986 00e8 1A70     	 strb r2,[r3]
 283:../main.c     **** 		CAN_no_com_counter = 0;
 987              	 .loc 4 283 0
 988 00ea 084B     	 ldr r3,.L27+20
 989 00ec 0022     	 movs r2,#0
 990 00ee 1A70     	 strb r2,[r3]
 284:../main.c     **** }
 991              	 .loc 4 284 0
 992 00f0 1037     	 adds r7,r7,#16
 993              	.LCFI39:
 994              	 .cfi_def_cfa_offset 8
 995 00f2 BD46     	 mov sp,r7
 996              	.LCFI40:
 997              	 .cfi_def_cfa_register 13
 998              	 
 999 00f4 80BD     	 pop {r7,pc}
 1000              	.L28:
 1001 00f6 00BF     	 .align 2
 1002              	.L27:
 1003 00f8 00000000 	 .word CAN_NODE_0
 1004 00fc 00000000 	 .word Speeds_int16_r
 1005 0100 00007A44 	 .word 1148846080
 1006 0104 00000000 	 .word CAN_speed_ref
 1007 0108 00000000 	 .word CAN_new_meassage
 1008 010c 00000000 	 .word CAN_no_com_counter
 1009              	 .cfi_endproc
 1010              	.LFE553:
 1012              	 .section .text.CAN0_0_IRQHandler,"ax",%progbits
 1013              	 .align 2
 1014              	 .global CAN0_0_IRQHandler
 1015              	 .thumb
 1016              	 .thumb_func
 1018              	CAN0_0_IRQHandler:
 1019              	.LFB554:
 285:../main.c     **** 
 286:../main.c     **** //CAN RX reste distance
 287:../main.c     **** void CAN_RX_MO7_ISR(void){
 1020              	 .loc 4 287 0
 1021              	 .cfi_startproc
 1022              	 
 1023              	 
 1024 0000 80B5     	 push {r7,lr}
 1025              	.LCFI41:
 1026              	 .cfi_def_cfa_offset 8
 1027              	 .cfi_offset 7,-8
 1028              	 .cfi_offset 14,-4
 1029 0002 84B0     	 sub sp,sp,#16
 1030              	.LCFI42:
 1031              	 .cfi_def_cfa_offset 24
 1032 0004 00AF     	 add r7,sp,#0
 1033              	.LCFI43:
 1034              	 .cfi_def_cfa_register 7
 288:../main.c     **** 	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 1035              	 .loc 4 288 0
 1036 0006 124B     	 ldr r3,.L33
 1037 0008 5B6A     	 ldr r3,[r3,#36]
 1038 000a 1B68     	 ldr r3,[r3]
 1039 000c BB60     	 str r3,[r7,#8]
 289:../main.c     **** 	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 1040              	 .loc 4 289 0
 1041 000e 104B     	 ldr r3,.L33
 1042 0010 5B6A     	 ldr r3,[r3,#36]
 1043 0012 1846     	 mov r0,r3
 1044 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 290:../main.c     **** 
 291:../main.c     **** 	uint8_t data_r[4];
 292:../main.c     **** 	 int i;
 293:../main.c     **** 	 for(i = 0 ; i < 4 ; i ++){
 1045              	 .loc 4 293 0
 1046 0018 0023     	 movs r3,#0
 1047 001a FB60     	 str r3,[r7,#12]
 1048 001c 0CE0     	 b .L30
 1049              	.L31:
 294:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 1050              	 .loc 4 294 0 discriminator 3
 1051 001e BA68     	 ldr r2,[r7,#8]
 1052 0020 FB68     	 ldr r3,[r7,#12]
 1053 0022 1344     	 add r3,r3,r2
 1054 0024 1033     	 adds r3,r3,#16
 1055 0026 1978     	 ldrb r1,[r3]
 1056 0028 3A1D     	 adds r2,r7,#4
 1057 002a FB68     	 ldr r3,[r7,#12]
 1058 002c 1344     	 add r3,r3,r2
 1059 002e 0A46     	 mov r2,r1
 1060 0030 1A70     	 strb r2,[r3]
 293:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 1061              	 .loc 4 293 0 discriminator 3
 1062 0032 FB68     	 ldr r3,[r7,#12]
 1063 0034 0133     	 adds r3,r3,#1
 1064 0036 FB60     	 str r3,[r7,#12]
 1065              	.L30:
 293:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 1066              	 .loc 4 293 0 is_stmt 0 discriminator 1
 1067 0038 FB68     	 ldr r3,[r7,#12]
 1068 003a 032B     	 cmp r3,#3
 1069 003c EFDD     	 ble .L31
 295:../main.c     **** 	 }
 296:../main.c     **** 
 297:../main.c     **** 	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 1070              	 .loc 4 297 0 is_stmt 1
 1071 003e 7B79     	 ldrb r3,[r7,#5]
 1072 0040 012B     	 cmp r3,#1
 1073 0042 02D1     	 bne .L29
 1074              	 .loc 4 297 0 is_stmt 0 discriminator 1
 1075 0044 034B     	 ldr r3,.L33+4
 1076 0046 0022     	 movs r2,#0
 1077 0048 1A60     	 str r2,[r3]
 1078              	.L29:
 298:../main.c     **** }
 1079              	 .loc 4 298 0 is_stmt 1
 1080 004a 1037     	 adds r7,r7,#16
 1081              	.LCFI44:
 1082              	 .cfi_def_cfa_offset 8
 1083 004c BD46     	 mov sp,r7
 1084              	.LCFI45:
 1085              	 .cfi_def_cfa_register 13
 1086              	 
 1087 004e 80BD     	 pop {r7,pc}
 1088              	.L34:
 1089              	 .align 2
 1090              	.L33:
 1091 0050 00000000 	 .word CAN_NODE_0
 1092 0054 00000000 	 .word distance_180deg_ele_count
 1093              	 .cfi_endproc
 1094              	.LFE554:
 1096              	 .global __aeabi_f2d
 1097              	 .global __aeabi_dmul
 1098              	 .global __aeabi_ddiv
 1099              	 .global __aeabi_d2f
 1100              	 .global __aeabi_dadd
 1101              	 .section .text.CCU43_0_IRQHandler,"ax",%progbits
 1102              	 .align 2
 1103              	 .global CCU43_0_IRQHandler
 1104              	 .thumb
 1105              	 .thumb_func
 1107              	CCU43_0_IRQHandler:
 1108              	.LFB555:
 299:../main.c     **** 
 300:../main.c     **** void CAN_TX_ISR(void){
 1109              	 .loc 4 300 0
 1110              	 .cfi_startproc
 1111              	 
 1112              	 
 1113 0000 80B5     	 push {r7,lr}
 1114              	.LCFI46:
 1115              	 .cfi_def_cfa_offset 8
 1116              	 .cfi_offset 7,-8
 1117              	 .cfi_offset 14,-4
 1118 0002 86B0     	 sub sp,sp,#24
 1119              	.LCFI47:
 1120              	 .cfi_def_cfa_offset 32
 1121 0004 00AF     	 add r7,sp,#0
 1122              	.LCFI48:
 1123              	 .cfi_def_cfa_register 7
 301:../main.c     **** 	int16_t Inverter_state[4] = {0};
 1124              	 .loc 4 301 0
 1125 0006 0023     	 movs r3,#0
 1126 0008 FB60     	 str r3,[r7,#12]
 1127 000a 0023     	 movs r3,#0
 1128 000c 3B61     	 str r3,[r7,#16]
 302:../main.c     **** 
 303:../main.c     **** 	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 1129              	 .loc 4 303 0
 1130 000e 0123     	 movs r3,#1
 1131 0010 BB81     	 strh r3,[r7,#12]
 304:../main.c     **** 	/*
 305:../main.c     **** 	if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
 306:../main.c     **** 	else Inverter_state[1] = 1;
 307:../main.c     **** 	*/
 308:../main.c     **** 
 309:../main.c     **** 	Inverter_state[1] = V_DC_link * 100;  // *100 send  2 deciaml places
 1132              	 .loc 4 309 0
 1133 0012 574B     	 ldr r3,.L36+16
 1134 0014 D3ED007A 	 flds s15,[r3]
 1135 0018 9FED567A 	 flds s14,.L36+20
 1136 001c 67EE877A 	 fmuls s15,s15,s14
 1137 0020 FDEEE77A 	 ftosizs s15,s15
 1138 0024 C7ED017A 	 fsts s15,[r7,#4]
 1139 0028 BB88     	 ldrh r3,[r7,#4]
 1140 002a 9BB2     	 uxth r3,r3
 1141 002c FB81     	 strh r3,[r7,#14]
 310:../main.c     **** 
 311:../main.c     **** 	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 1142              	 .loc 4 311 0
 1143 002e 524B     	 ldr r3,.L36+24
 1144 0030 1B68     	 ldr r3,[r3]
 1145 0032 1846     	 mov r0,r3
 1146 0034 FFF7FEFF 	 bl __aeabi_f2d
 1147 0038 0246     	 mov r2,r0
 1148 003a 0B46     	 mov r3,r1
 1149 003c 1046     	 mov r0,r2
 1150 003e 1946     	 mov r1,r3
 1151 0040 47A3     	 adr r3,.L36
 1152 0042 D3E90023 	 ldrd r2,[r3]
 1153 0046 FFF7FEFF 	 bl __aeabi_dmul
 1154 004a 0246     	 mov r2,r0
 1155 004c 0B46     	 mov r3,r1
 1156 004e 1046     	 mov r0,r2
 1157 0050 1946     	 mov r1,r3
 1158 0052 4FF00002 	 mov r2,#0
 1159 0056 494B     	 ldr r3,.L36+28
 1160 0058 FFF7FEFF 	 bl __aeabi_ddiv
 1161 005c 0246     	 mov r2,r0
 1162 005e 0B46     	 mov r3,r1
 1163 0060 1046     	 mov r0,r2
 1164 0062 1946     	 mov r1,r3
 1165 0064 FFF7FEFF 	 bl __aeabi_d2f
 1166 0068 0246     	 mov r2,r0
 1167 006a 454B     	 ldr r3,.L36+32
 1168 006c 1A60     	 str r2,[r3]
 312:../main.c     **** 	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
 1169              	 .loc 4 312 0
 1170 006e 444B     	 ldr r3,.L36+32
 1171 0070 D3ED007A 	 flds s15,[r3]
 1172 0074 F1EE677A 	 fnegs s15,s15
 1173 0078 414B     	 ldr r3,.L36+32
 1174 007a C3ED007A 	 fsts s15,[r3]
 313:../main.c     **** 	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 1175              	 .loc 4 313 0
 1176 007e 404B     	 ldr r3,.L36+32
 1177 0080 D3ED007A 	 flds s15,[r3]
 1178 0084 9FED3F7A 	 flds s14,.L36+36
 1179 0088 67EE877A 	 fmuls s15,s15,s14
 1180 008c FDEEE77A 	 ftosizs s15,s15
 1181 0090 C7ED017A 	 fsts s15,[r7,#4]
 1182 0094 BB88     	 ldrh r3,[r7,#4]
 1183 0096 9BB2     	 uxth r3,r3
 1184 0098 3B82     	 strh r3,[r7,#16]
 314:../main.c     **** 
 315:../main.c     **** 	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 1185              	 .loc 4 315 0
 1186 009a 3B4B     	 ldr r3,.L36+40
 1187 009c 1B68     	 ldr r3,[r3]
 1188 009e 07EE903A 	 fmsr s15,r3
 1189 00a2 F8EEE77A 	 fsitos s15,s15
 1190 00a6 B0EE007A 	 fconsts s14,#0
 1191 00aa C7EE877A 	 fdivs s15,s15,s14
 1192 00ae B2EE067A 	 fconsts s14,#38
 1193 00b2 C7EE877A 	 fdivs s15,s15,s14
 1194 00b6 17EE900A 	 fmrs r0,s15
 1195 00ba FFF7FEFF 	 bl __aeabi_f2d
 1196 00be 0246     	 mov r2,r0
 1197 00c0 0B46     	 mov r3,r1
 1198 00c2 1046     	 mov r0,r2
 1199 00c4 1946     	 mov r1,r3
 1200 00c6 28A3     	 adr r3,.L36+8
 1201 00c8 D3E90023 	 ldrd r2,[r3]
 1202 00cc FFF7FEFF 	 bl __aeabi_dmul
 1203 00d0 0246     	 mov r2,r0
 1204 00d2 0B46     	 mov r3,r1
 1205 00d4 1046     	 mov r0,r2
 1206 00d6 1946     	 mov r1,r3
 1207 00d8 FFF7FEFF 	 bl __aeabi_dadd
 1208 00dc 0246     	 mov r2,r0
 1209 00de 0B46     	 mov r3,r1
 1210 00e0 1046     	 mov r0,r2
 1211 00e2 1946     	 mov r1,r3
 1212 00e4 1EA3     	 adr r3,.L36
 1213 00e6 D3E90023 	 ldrd r2,[r3]
 1214 00ea FFF7FEFF 	 bl __aeabi_dmul
 1215 00ee 0246     	 mov r2,r0
 1216 00f0 0B46     	 mov r3,r1
 1217 00f2 1046     	 mov r0,r2
 1218 00f4 1946     	 mov r1,r3
 1219 00f6 FFF7FEFF 	 bl __aeabi_d2f
 1220 00fa 0246     	 mov r2,r0
 1221 00fc 234B     	 ldr r3,.L36+44
 1222 00fe 1A60     	 str r2,[r3]
 316:../main.c     **** 	if(MOTOR_NUM == 6) distance = -distance;
 1223              	 .loc 4 316 0
 1224 0100 224B     	 ldr r3,.L36+44
 1225 0102 D3ED007A 	 flds s15,[r3]
 1226 0106 F1EE677A 	 fnegs s15,s15
 1227 010a 204B     	 ldr r3,.L36+44
 1228 010c C3ED007A 	 fsts s15,[r3]
 317:../main.c     **** 	Inverter_state[3] = distance * 1000; // to mm
 1229              	 .loc 4 317 0
 1230 0110 1E4B     	 ldr r3,.L36+44
 1231 0112 D3ED007A 	 flds s15,[r3]
 1232 0116 9FED1B7A 	 flds s14,.L36+36
 1233 011a 67EE877A 	 fmuls s15,s15,s14
 1234 011e FDEEE77A 	 ftosizs s15,s15
 1235 0122 C7ED017A 	 fsts s15,[r7,#4]
 1236 0126 BB88     	 ldrh r3,[r7,#4]
 1237 0128 9BB2     	 uxth r3,r3
 1238 012a 7B82     	 strh r3,[r7,#18]
 318:../main.c     **** 
 319:../main.c     **** 	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 1239              	 .loc 4 319 0
 1240 012c 0323     	 movs r3,#3
 1241 012e FB75     	 strb r3,[r7,#23]
 320:../main.c     **** 	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 1242              	 .loc 4 320 0
 1243 0130 FB7D     	 ldrb r3,[r7,#23]
 1244 0132 174A     	 ldr r2,.L36+48
 1245 0134 0233     	 adds r3,r3,#2
 1246 0136 9B00     	 lsls r3,r3,#2
 1247 0138 1344     	 add r3,r3,r2
 1248 013a 5A68     	 ldr r2,[r3,#4]
 1249 013c 07F10C03 	 add r3,r7,#12
 1250 0140 1046     	 mov r0,r2
 1251 0142 1946     	 mov r1,r3
 1252 0144 FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
 321:../main.c     **** 	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 1253              	 .loc 4 321 0
 1254 0148 FB7D     	 ldrb r3,[r7,#23]
 1255 014a 114A     	 ldr r2,.L36+48
 1256 014c 0233     	 adds r3,r3,#2
 1257 014e 9B00     	 lsls r3,r3,#2
 1258 0150 1344     	 add r3,r3,r2
 1259 0152 5B68     	 ldr r3,[r3,#4]
 1260 0154 1846     	 mov r0,r3
 1261 0156 FFF7FEFF 	 bl CAN_NODE_MO_Transmit
 322:../main.c     **** }
 1262              	 .loc 4 322 0
 1263 015a 1837     	 adds r7,r7,#24
 1264              	.LCFI49:
 1265              	 .cfi_def_cfa_offset 8
 1266 015c BD46     	 mov sp,r7
 1267              	.LCFI50:
 1268              	 .cfi_def_cfa_register 13
 1269              	 
 1270 015e 80BD     	 pop {r7,pc}
 1271              	.L37:
 1272              	 .align 3
 1273              	.L36:
 1274 0160 48E17A14 	 .word 343597384
 1275 0164 AE47B13F 	 .word 1068582830
 1276 0168 F1D4C853 	 .word 1405670641
 1277 016c FB210940 	 .word 1074340347
 1278 0170 00000000 	 .word V_DC_link
 1279 0174 0000C842 	 .word 1120403456
 1280 0178 00000000 	 .word omega_ele_rads
 1281 017c 00002640 	 .word 1076232192
 1282 0180 00000000 	 .word Speed_act
 1283 0184 00007A44 	 .word 1148846080
 1284 0188 00000000 	 .word distance_180deg_ele_count
 1285 018c 00000000 	 .word distance
 1286 0190 00000000 	 .word CAN_NODE_0
 1287              	 .cfi_endproc
 1288              	.LFE555:
 1290 0194 AFF30080 	 .section .text.VADC0_C0_2_IRQHandler,"ax",%progbits
 1291              	 .align 2
 1292              	 .global VADC0_C0_2_IRQHandler
 1293              	 .thumb
 1294              	 .thumb_func
 1296              	VADC0_C0_2_IRQHandler:
 1297              	.LFB556:
 323:../main.c     **** 
 324:../main.c     **** void Adc_Measurement_Handler(void){
 1298              	 .loc 4 324 0
 1299              	 .cfi_startproc
 1300              	 
 1301              	 
 1302 0000 80B5     	 push {r7,lr}
 1303              	.LCFI51:
 1304              	 .cfi_def_cfa_offset 8
 1305              	 .cfi_offset 7,-8
 1306              	 .cfi_offset 14,-4
 1307 0002 82B0     	 sub sp,sp,#8
 1308              	.LCFI52:
 1309              	 .cfi_def_cfa_offset 16
 1310 0004 00AF     	 add r7,sp,#0
 1311              	.LCFI53:
 1312              	 .cfi_def_cfa_register 7
 325:../main.c     **** 	uint32_t result  = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 1313              	 .loc 4 325 0
 1314 0006 0A48     	 ldr r0,.L39
 1315 0008 FFF7FEFF 	 bl ADC_MEASUREMENT_GetResult
 1316 000c 0346     	 mov r3,r0
 1317 000e 7B60     	 str r3,[r7,#4]
 326:../main.c     **** 
 327:../main.c     **** 	V_DC_link =  result / ADC_TO_DCLINK[INVERTER_NUM]; // conversion to DClink
 1318              	 .loc 4 327 0
 1319 0010 7B68     	 ldr r3,[r7,#4]
 1320 0012 07EE903A 	 fmsr s15,r3
 1321 0016 B8EE677A 	 fuitos s14,s15
 1322 001a 064B     	 ldr r3,.L39+4
 1323 001c D3ED017A 	 flds s15,[r3,#4]
 1324 0020 C7EE277A 	 fdivs s15,s14,s15
 1325 0024 044B     	 ldr r3,.L39+8
 1326 0026 C3ED007A 	 fsts s15,[r3]
 328:../main.c     **** 
 329:../main.c     **** }
 1327              	 .loc 4 329 0
 1328 002a 0837     	 adds r7,r7,#8
 1329              	.LCFI54:
 1330              	 .cfi_def_cfa_offset 8
 1331 002c BD46     	 mov sp,r7
 1332              	.LCFI55:
 1333              	 .cfi_def_cfa_register 13
 1334              	 
 1335 002e 80BD     	 pop {r7,pc}
 1336              	.L40:
 1337              	 .align 2
 1338              	.L39:
 1339 0030 00000000 	 .word ADC_MEASUREMENT_Channel_A_handle
 1340 0034 00000000 	 .word ADC_TO_DCLINK
 1341 0038 00000000 	 .word V_DC_link
 1342              	 .cfi_endproc
 1343              	.LFE556:
 1345              	 .section .text.CCU43_3_IRQHandler,"ax",%progbits
 1346              	 .align 2
 1347              	 .global CCU43_3_IRQHandler
 1348              	 .thumb
 1349              	 .thumb_func
 1351              	CCU43_3_IRQHandler:
 1352              	.LFB557:
 330:../main.c     **** 
 331:../main.c     **** // 100us Timer for speed measurement
 332:../main.c     **** void TimeCounterISR(void){
 1353              	 .loc 4 332 0
 1354              	 .cfi_startproc
 1355              	 
 1356              	 
 1357              	 
 1358 0000 80B4     	 push {r7}
 1359              	.LCFI56:
 1360              	 .cfi_def_cfa_offset 4
 1361              	 .cfi_offset 7,-4
 1362 0002 00AF     	 add r7,sp,#0
 1363              	.LCFI57:
 1364              	 .cfi_def_cfa_register 7
 333:../main.c     **** 	time_since_A ++;
 1365              	 .loc 4 333 0
 1366 0004 094B     	 ldr r3,.L42
 1367 0006 1B68     	 ldr r3,[r3]
 1368 0008 0133     	 adds r3,r3,#1
 1369 000a 084A     	 ldr r2,.L42
 1370 000c 1360     	 str r3,[r2]
 334:../main.c     **** 	time_since_B ++;
 1371              	 .loc 4 334 0
 1372 000e 084B     	 ldr r3,.L42+4
 1373 0010 1B68     	 ldr r3,[r3]
 1374 0012 0133     	 adds r3,r3,#1
 1375 0014 064A     	 ldr r2,.L42+4
 1376 0016 1360     	 str r3,[r2]
 335:../main.c     **** 	time_since_C ++;
 1377              	 .loc 4 335 0
 1378 0018 064B     	 ldr r3,.L42+8
 1379 001a 1B68     	 ldr r3,[r3]
 1380 001c 0133     	 adds r3,r3,#1
 1381 001e 054A     	 ldr r2,.L42+8
 1382 0020 1360     	 str r3,[r2]
 336:../main.c     **** }
 1383              	 .loc 4 336 0
 1384 0022 BD46     	 mov sp,r7
 1385              	.LCFI58:
 1386              	 .cfi_def_cfa_register 13
 1387              	 
 1388 0024 5DF8047B 	 ldr r7,[sp],#4
 1389              	.LCFI59:
 1390              	 .cfi_restore 7
 1391              	 .cfi_def_cfa_offset 0
 1392 0028 7047     	 bx lr
 1393              	.L43:
 1394 002a 00BF     	 .align 2
 1395              	.L42:
 1396 002c 00000000 	 .word time_since_A
 1397 0030 00000000 	 .word time_since_B
 1398 0034 00000000 	 .word time_since_C
 1399              	 .cfi_endproc
 1400              	.LFE557:
 1402              	 .section .text.ERU1_2_IRQHandler,"ax",%progbits
 1403              	 .align 2
 1404              	 .global ERU1_2_IRQHandler
 1405              	 .thumb
 1406              	 .thumb_func
 1408              	ERU1_2_IRQHandler:
 1409              	.LFB558:
 337:../main.c     **** 
 338:../main.c     **** // Hall Sensors
 339:../main.c     **** void HallSensor_A_ISR(void){
 1410              	 .loc 4 339 0
 1411              	 .cfi_startproc
 1412              	 
 1413              	 
 1414 0000 80B5     	 push {r7,lr}
 1415              	.LCFI60:
 1416              	 .cfi_def_cfa_offset 8
 1417              	 .cfi_offset 7,-8
 1418              	 .cfi_offset 14,-4
 1419 0002 00AF     	 add r7,sp,#0
 1420              	.LCFI61:
 1421              	 .cfi_def_cfa_register 7
 340:../main.c     **** 	HallSensor();
 1422              	 .loc 4 340 0
 1423 0004 FFF7FEFF 	 bl HallSensor
 341:../main.c     **** 	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
 1424              	 .loc 4 341 0
 1425 0008 114B     	 ldr r3,.L47
 1426 000a 1B68     	 ldr r3,[r3]
 1427 000c 114A     	 ldr r2,.L47+4
 1428 000e 1360     	 str r3,[r2]
 342:../main.c     **** 	time_since_A = 0;						// measurement of speed -> time between change of Hall A
 1429              	 .loc 4 342 0
 1430 0010 0F4B     	 ldr r3,.L47
 1431 0012 0022     	 movs r2,#0
 1432 0014 1A60     	 str r2,[r3]
 343:../main.c     **** 	last_Hall_trig = 'A';
 1433              	 .loc 4 343 0
 1434 0016 104B     	 ldr r3,.L47+8
 1435 0018 4122     	 movs r2,#65
 1436 001a 1A70     	 strb r2,[r3]
 344:../main.c     **** 
 345:../main.c     **** 	if(direction == 1 ) distance_180deg_ele_count ++;
 1437              	 .loc 4 345 0
 1438 001c 0F4B     	 ldr r3,.L47+12
 1439 001e 1B78     	 ldrb r3,[r3]
 1440 0020 DBB2     	 uxtb r3,r3
 1441 0022 5BB2     	 sxtb r3,r3
 1442 0024 012B     	 cmp r3,#1
 1443 0026 05D1     	 bne .L45
 1444              	 .loc 4 345 0 is_stmt 0 discriminator 1
 1445 0028 0D4B     	 ldr r3,.L47+16
 1446 002a 1B68     	 ldr r3,[r3]
 1447 002c 0133     	 adds r3,r3,#1
 1448 002e 0C4A     	 ldr r2,.L47+16
 1449 0030 1360     	 str r3,[r2]
 1450 0032 0BE0     	 b .L44
 1451              	.L45:
 346:../main.c     **** 	else if(direction == -1 ) distance_180deg_ele_count --;
 1452              	 .loc 4 346 0 is_stmt 1
 1453 0034 094B     	 ldr r3,.L47+12
 1454 0036 1B78     	 ldrb r3,[r3]
 1455 0038 DBB2     	 uxtb r3,r3
 1456 003a 5BB2     	 sxtb r3,r3
 1457 003c B3F1FF3F 	 cmp r3,#-1
 1458 0040 04D1     	 bne .L44
 1459              	 .loc 4 346 0 is_stmt 0 discriminator 1
 1460 0042 074B     	 ldr r3,.L47+16
 1461 0044 1B68     	 ldr r3,[r3]
 1462 0046 013B     	 subs r3,r3,#1
 1463 0048 054A     	 ldr r2,.L47+16
 1464 004a 1360     	 str r3,[r2]
 1465              	.L44:
 347:../main.c     **** }
 1466              	 .loc 4 347 0 is_stmt 1
 1467 004c 80BD     	 pop {r7,pc}
 1468              	.L48:
 1469 004e 00BF     	 .align 2
 1470              	.L47:
 1471 0050 00000000 	 .word time_since_A
 1472 0054 00000000 	 .word time_180deg
 1473 0058 00000000 	 .word last_Hall_trig
 1474 005c 00000000 	 .word direction
 1475 0060 00000000 	 .word distance_180deg_ele_count
 1476              	 .cfi_endproc
 1477              	.LFE558:
 1479              	 .section .text.ERU1_0_IRQHandler,"ax",%progbits
 1480              	 .align 2
 1481              	 .global ERU1_0_IRQHandler
 1482              	 .thumb
 1483              	 .thumb_func
 1485              	ERU1_0_IRQHandler:
 1486              	.LFB559:
 348:../main.c     **** void HallSensor_B_ISR(void){
 1487              	 .loc 4 348 0
 1488              	 .cfi_startproc
 1489              	 
 1490              	 
 1491 0000 80B5     	 push {r7,lr}
 1492              	.LCFI62:
 1493              	 .cfi_def_cfa_offset 8
 1494              	 .cfi_offset 7,-8
 1495              	 .cfi_offset 14,-4
 1496 0002 00AF     	 add r7,sp,#0
 1497              	.LCFI63:
 1498              	 .cfi_def_cfa_register 7
 349:../main.c     **** 	HallSensor();
 1499              	 .loc 4 349 0
 1500 0004 FFF7FEFF 	 bl HallSensor
 350:../main.c     **** 	time_180deg = time_since_B;
 1501              	 .loc 4 350 0
 1502 0008 054B     	 ldr r3,.L50
 1503 000a 1B68     	 ldr r3,[r3]
 1504 000c 054A     	 ldr r2,.L50+4
 1505 000e 1360     	 str r3,[r2]
 351:../main.c     **** 	time_since_B = 0;
 1506              	 .loc 4 351 0
 1507 0010 034B     	 ldr r3,.L50
 1508 0012 0022     	 movs r2,#0
 1509 0014 1A60     	 str r2,[r3]
 352:../main.c     **** 	last_Hall_trig = 'B';
 1510              	 .loc 4 352 0
 1511 0016 044B     	 ldr r3,.L50+8
 1512 0018 4222     	 movs r2,#66
 1513 001a 1A70     	 strb r2,[r3]
 353:../main.c     **** }
 1514              	 .loc 4 353 0
 1515 001c 80BD     	 pop {r7,pc}
 1516              	.L51:
 1517 001e 00BF     	 .align 2
 1518              	.L50:
 1519 0020 00000000 	 .word time_since_B
 1520 0024 00000000 	 .word time_180deg
 1521 0028 00000000 	 .word last_Hall_trig
 1522              	 .cfi_endproc
 1523              	.LFE559:
 1525              	 .section .text.ERU1_3_IRQHandler,"ax",%progbits
 1526              	 .align 2
 1527              	 .global ERU1_3_IRQHandler
 1528              	 .thumb
 1529              	 .thumb_func
 1531              	ERU1_3_IRQHandler:
 1532              	.LFB560:
 354:../main.c     **** void HallSensor_C_ISR(void){
 1533              	 .loc 4 354 0
 1534              	 .cfi_startproc
 1535              	 
 1536              	 
 1537 0000 80B5     	 push {r7,lr}
 1538              	.LCFI64:
 1539              	 .cfi_def_cfa_offset 8
 1540              	 .cfi_offset 7,-8
 1541              	 .cfi_offset 14,-4
 1542 0002 00AF     	 add r7,sp,#0
 1543              	.LCFI65:
 1544              	 .cfi_def_cfa_register 7
 355:../main.c     **** 	HallSensor();
 1545              	 .loc 4 355 0
 1546 0004 FFF7FEFF 	 bl HallSensor
 356:../main.c     **** 	time_180deg = time_since_C;
 1547              	 .loc 4 356 0
 1548 0008 054B     	 ldr r3,.L53
 1549 000a 1B68     	 ldr r3,[r3]
 1550 000c 054A     	 ldr r2,.L53+4
 1551 000e 1360     	 str r3,[r2]
 357:../main.c     **** 	time_since_C = 0;
 1552              	 .loc 4 357 0
 1553 0010 034B     	 ldr r3,.L53
 1554 0012 0022     	 movs r2,#0
 1555 0014 1A60     	 str r2,[r3]
 358:../main.c     **** 	last_Hall_trig = 'C';
 1556              	 .loc 4 358 0
 1557 0016 044B     	 ldr r3,.L53+8
 1558 0018 4322     	 movs r2,#67
 1559 001a 1A70     	 strb r2,[r3]
 359:../main.c     **** }
 1560              	 .loc 4 359 0
 1561 001c 80BD     	 pop {r7,pc}
 1562              	.L54:
 1563 001e 00BF     	 .align 2
 1564              	.L53:
 1565 0020 00000000 	 .word time_since_C
 1566 0024 00000000 	 .word time_180deg
 1567 0028 00000000 	 .word last_Hall_trig
 1568              	 .cfi_endproc
 1569              	.LFE560:
 1571              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 1572              	 .align 2
 1573              	 .global CCU43_1_IRQHandler
 1574              	 .thumb
 1575              	 .thumb_func
 1577              	CCU43_1_IRQHandler:
 1578              	.LFB561:
 360:../main.c     **** 
 361:../main.c     **** /*
 362:../main.c     **** // Turn off driver at Overcurrent
 363:../main.c     **** void OverCurrent_U_ISR(void)
 364:../main.c     **** {
 365:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 366:../main.c     **** }
 367:../main.c     **** void OverCurrent_V_ISR(void)
 368:../main.c     **** {
 369:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 370:../main.c     **** }
 371:../main.c     **** void OverCurrent_W_ISR(void)
 372:../main.c     **** {
 373:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 374:../main.c     **** }
 375:../main.c     **** */
 376:../main.c     **** 
 377:../main.c     **** //ISR based on Timer_1 --> 100us time base
 378:../main.c     **** void ISR_INT1(void)
 379:../main.c     **** {
 1579              	 .loc 4 379 0
 1580              	 .cfi_startproc
 1581              	 
 1582              	 
 1583              	 
 1584 0000 80B4     	 push {r7}
 1585              	.LCFI66:
 1586              	 .cfi_def_cfa_offset 4
 1587              	 .cfi_offset 7,-4
 1588 0002 00AF     	 add r7,sp,#0
 1589              	.LCFI67:
 1590              	 .cfi_def_cfa_register 7
 380:../main.c     **** }
 1591              	 .loc 4 380 0
 1592 0004 BD46     	 mov sp,r7
 1593              	.LCFI68:
 1594              	 .cfi_def_cfa_register 13
 1595              	 
 1596 0006 5DF8047B 	 ldr r7,[sp],#4
 1597              	.LCFI69:
 1598              	 .cfi_restore 7
 1599              	 .cfi_def_cfa_offset 0
 1600 000a 7047     	 bx lr
 1601              	 .cfi_endproc
 1602              	.LFE561:
 1604              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 1605              	 .align 2
 1606              	 .global CCU80_3_IRQHandler
 1607              	 .thumb
 1608              	 .thumb_func
 1610              	CCU80_3_IRQHandler:
 1611              	.LFB562:
 381:../main.c     **** 
 382:../main.c     **** // ISR for Updating the SVM PWM -> 50us = 20kHz
 383:../main.c     **** void PeriodMatchInterruptHandler(void)
 384:../main.c     **** {
 1612              	 .loc 4 384 0
 1613              	 .cfi_startproc
 1614              	 
 1615              	 
 1616 0000 80B5     	 push {r7,lr}
 1617              	.LCFI70:
 1618              	 .cfi_def_cfa_offset 8
 1619              	 .cfi_offset 7,-8
 1620              	 .cfi_offset 14,-4
 1621 0002 82B0     	 sub sp,sp,#8
 1622              	.LCFI71:
 1623              	 .cfi_def_cfa_offset 16
 1624 0004 00AF     	 add r7,sp,#0
 1625              	.LCFI72:
 1626              	 .cfi_def_cfa_register 7
 385:../main.c     **** 	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 1627              	 .loc 4 385 0
 1628 0006 144B     	 ldr r3,.L58
 1629 0008 1B78     	 ldrb r3,[r3]
 1630 000a DBB2     	 uxtb r3,r3
 1631 000c 0133     	 adds r3,r3,#1
 1632 000e DAB2     	 uxtb r2,r3
 1633 0010 114B     	 ldr r3,.L58
 1634 0012 1A70     	 strb r2,[r3]
 386:../main.c     **** 	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 1635              	 .loc 4 386 0
 1636 0014 104B     	 ldr r3,.L58
 1637 0016 1B78     	 ldrb r3,[r3]
 1638 0018 DBB2     	 uxtb r3,r3
 1639 001a 012B     	 cmp r3,#1
 1640 001c 18D1     	 bne .L56
 387:../main.c     **** 		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_D
 1641              	 .loc 4 387 0
 1642 001e 0F4B     	 ldr r3,.L58+4
 1643 0020 D3ED007A 	 flds s15,[r3]
 1644 0024 FCEEE77A 	 ftouizs s15,s15
 1645 0028 C7ED017A 	 fsts s15,[r7,#4]
 1646 002c BB88     	 ldrh r3,[r7,#4]
 1647 002e 9AB2     	 uxth r2,r3
 1648 0030 0B4B     	 ldr r3,.L58+8
 1649 0032 D3ED007A 	 flds s15,[r3]
 1650 0036 FCEEE77A 	 ftouizs s15,s15
 1651 003a 17EE901A 	 fmrs r1,s15
 1652 003e 4BF20B63 	 movw r3,#46603
 1653 0042 03FB01F3 	 mul r3,r3,r1
 1654 0046 0748     	 ldr r0,.L58+12
 1655 0048 1146     	 mov r1,r2
 1656 004a 1A46     	 mov r2,r3
 1657 004c FFF7FEFF 	 bl PWM_SVM_SVMUpdate
 1658              	.L56:
 388:../main.c     **** 	}
 389:../main.c     **** }
 1659              	 .loc 4 389 0
 1660 0050 0837     	 adds r7,r7,#8
 1661              	.LCFI73:
 1662              	 .cfi_def_cfa_offset 8
 1663 0052 BD46     	 mov sp,r7
 1664              	.LCFI74:
 1665              	 .cfi_def_cfa_register 13
 1666              	 
 1667 0054 80BD     	 pop {r7,pc}
 1668              	.L59:
 1669 0056 00BF     	 .align 2
 1670              	.L58:
 1671 0058 00000000 	 .word count
 1672 005c 00000000 	 .word modulation_index_scaled
 1673 0060 00000000 	 .word angle_ab
 1674 0064 00000000 	 .word PWM_SVM_0
 1675              	 .cfi_endproc
 1676              	.LFE562:
 1678              	 .section .text.Hall_init,"ax",%progbits
 1679              	 .align 2
 1680              	 .global Hall_init
 1681              	 .thumb
 1682              	 .thumb_func
 1684              	Hall_init:
 1685              	.LFB563:
 390:../main.c     **** 
 391:../main.c     **** //########################
 392:../main.c     **** // FUNCTIONS
 393:../main.c     **** //########################
 394:../main.c     **** 
 395:../main.c     **** // Hall init -> readout of actual Hall pattern to determine the motor position
 396:../main.c     **** void Hall_init(void){
 1686              	 .loc 4 396 0
 1687              	 .cfi_startproc
 1688              	 
 1689              	 
 1690 0000 90B5     	 push {r4,r7,lr}
 1691              	.LCFI75:
 1692              	 .cfi_def_cfa_offset 12
 1693              	 .cfi_offset 4,-12
 1694              	 .cfi_offset 7,-8
 1695              	 .cfi_offset 14,-4
 1696 0002 83B0     	 sub sp,sp,#12
 1697              	.LCFI76:
 1698              	 .cfi_def_cfa_offset 24
 1699 0004 00AF     	 add r7,sp,#0
 1700              	.LCFI77:
 1701              	 .cfi_def_cfa_register 7
 397:../main.c     **** 
 398:../main.c     **** 	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinV
 1702              	 .loc 4 398 0
 1703 0006 2148     	 ldr r0,.L67
 1704 0008 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1705 000c 0346     	 mov r3,r0
 1706 000e DBB2     	 uxtb r3,r3
 1707 0010 5B00     	 lsls r3,r3,#1
 1708 0012 DCB2     	 uxtb r4,r3
 1709 0014 1E48     	 ldr r0,.L67+4
 1710 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1711 001a 0346     	 mov r3,r0
 1712 001c DBB2     	 uxtb r3,r3
 1713 001e 2343     	 orrs r3,r3,r4
 1714 0020 DBB2     	 uxtb r3,r3
 1715 0022 5B00     	 lsls r3,r3,#1
 1716 0024 DCB2     	 uxtb r4,r3
 1717 0026 1B48     	 ldr r0,.L67+8
 1718 0028 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1719 002c 0346     	 mov r3,r0
 1720 002e DBB2     	 uxtb r3,r3
 1721 0030 2343     	 orrs r3,r3,r4
 1722 0032 FB71     	 strb r3,[r7,#7]
 399:../main.c     **** 
 400:../main.c     **** 	 if(Hall_Initial == 0b100){sector = 0;}
 1723              	 .loc 4 400 0
 1724 0034 FB79     	 ldrb r3,[r7,#7]
 1725 0036 042B     	 cmp r3,#4
 1726 0038 03D1     	 bne .L61
 1727              	 .loc 4 400 0 is_stmt 0 discriminator 1
 1728 003a 174B     	 ldr r3,.L67+12
 1729 003c 0022     	 movs r2,#0
 1730 003e 1A70     	 strb r2,[r3]
 1731 0040 21E0     	 b .L60
 1732              	.L61:
 401:../main.c     **** 	 else if(Hall_Initial == 0b110){sector = 1;}
 1733              	 .loc 4 401 0 is_stmt 1
 1734 0042 FB79     	 ldrb r3,[r7,#7]
 1735 0044 062B     	 cmp r3,#6
 1736 0046 03D1     	 bne .L63
 1737              	 .loc 4 401 0 is_stmt 0 discriminator 1
 1738 0048 134B     	 ldr r3,.L67+12
 1739 004a 0122     	 movs r2,#1
 1740 004c 1A70     	 strb r2,[r3]
 1741 004e 1AE0     	 b .L60
 1742              	.L63:
 402:../main.c     **** 	 else if(Hall_Initial == 0b010){sector = 2;}
 1743              	 .loc 4 402 0 is_stmt 1
 1744 0050 FB79     	 ldrb r3,[r7,#7]
 1745 0052 022B     	 cmp r3,#2
 1746 0054 03D1     	 bne .L64
 1747              	 .loc 4 402 0 is_stmt 0 discriminator 1
 1748 0056 104B     	 ldr r3,.L67+12
 1749 0058 0222     	 movs r2,#2
 1750 005a 1A70     	 strb r2,[r3]
 1751 005c 13E0     	 b .L60
 1752              	.L64:
 403:../main.c     **** 	 else if(Hall_Initial == 0b011){sector = 3;}
 1753              	 .loc 4 403 0 is_stmt 1
 1754 005e FB79     	 ldrb r3,[r7,#7]
 1755 0060 032B     	 cmp r3,#3
 1756 0062 03D1     	 bne .L65
 1757              	 .loc 4 403 0 is_stmt 0 discriminator 1
 1758 0064 0C4B     	 ldr r3,.L67+12
 1759 0066 0322     	 movs r2,#3
 1760 0068 1A70     	 strb r2,[r3]
 1761 006a 0CE0     	 b .L60
 1762              	.L65:
 404:../main.c     **** 	 else if(Hall_Initial == 0b001){sector = 4;}
 1763              	 .loc 4 404 0 is_stmt 1
 1764 006c FB79     	 ldrb r3,[r7,#7]
 1765 006e 012B     	 cmp r3,#1
 1766 0070 03D1     	 bne .L66
 1767              	 .loc 4 404 0 is_stmt 0 discriminator 1
 1768 0072 094B     	 ldr r3,.L67+12
 1769 0074 0422     	 movs r2,#4
 1770 0076 1A70     	 strb r2,[r3]
 1771 0078 05E0     	 b .L60
 1772              	.L66:
 405:../main.c     **** 	 else if(Hall_Initial == 0b101){sector = 5;}
 1773              	 .loc 4 405 0 is_stmt 1
 1774 007a FB79     	 ldrb r3,[r7,#7]
 1775 007c 052B     	 cmp r3,#5
 1776 007e 02D1     	 bne .L60
 1777              	 .loc 4 405 0 is_stmt 0 discriminator 1
 1778 0080 054B     	 ldr r3,.L67+12
 1779 0082 0522     	 movs r2,#5
 1780 0084 1A70     	 strb r2,[r3]
 1781              	.L60:
 406:../main.c     **** }
 1782              	 .loc 4 406 0 is_stmt 1
 1783 0086 0C37     	 adds r7,r7,#12
 1784              	.LCFI78:
 1785              	 .cfi_def_cfa_offset 12
 1786 0088 BD46     	 mov sp,r7
 1787              	.LCFI79:
 1788              	 .cfi_def_cfa_register 13
 1789              	 
 1790 008a 90BD     	 pop {r4,r7,pc}
 1791              	.L68:
 1792              	 .align 2
 1793              	.L67:
 1794 008c 00000000 	 .word Hall_A_ISR
 1795 0090 00000000 	 .word Hall_B_ISR
 1796 0094 00000000 	 .word Hall_C_ISR
 1797 0098 00000000 	 .word sector
 1798              	 .cfi_endproc
 1799              	.LFE563:
 1801              	 .section .text.HallSensor,"ax",%progbits
 1802              	 .align 2
 1803              	 .global HallSensor
 1804              	 .thumb
 1805              	 .thumb_func
 1807              	HallSensor:
 1808              	.LFB564:
 407:../main.c     **** 
 408:../main.c     **** // Function to determine direction and current Sector
 409:../main.c     **** void HallSensor(void){
 1809              	 .loc 4 409 0
 1810              	 .cfi_startproc
 1811              	 
 1812              	 
 1813 0000 90B5     	 push {r4,r7,lr}
 1814              	.LCFI80:
 1815              	 .cfi_def_cfa_offset 12
 1816              	 .cfi_offset 4,-12
 1817              	 .cfi_offset 7,-8
 1818              	 .cfi_offset 14,-4
 1819 0002 83B0     	 sub sp,sp,#12
 1820              	.LCFI81:
 1821              	 .cfi_def_cfa_offset 24
 1822 0004 00AF     	 add r7,sp,#0
 1823              	.LCFI82:
 1824              	 .cfi_def_cfa_register 7
 410:../main.c     **** 	enc_val = enc_val << 3; //shift old values and make space for new ones
 1825              	 .loc 4 410 0
 1826 0006 2E4B     	 ldr r3,.L76
 1827 0008 1B88     	 ldrh r3,[r3]
 1828 000a 9BB2     	 uxth r3,r3
 1829 000c DB00     	 lsls r3,r3,#3
 1830 000e 9AB2     	 uxth r2,r3
 1831 0010 2B4B     	 ldr r3,.L76
 1832 0012 1A80     	 strh r2,[r3]
 411:../main.c     **** 	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(
 1833              	 .loc 4 411 0
 1834 0014 2B48     	 ldr r0,.L76+4
 1835 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1836 001a 0346     	 mov r3,r0
 1837 001c DBB2     	 uxtb r3,r3
 1838 001e 5B00     	 lsls r3,r3,#1
 1839 0020 DCB2     	 uxtb r4,r3
 1840 0022 2948     	 ldr r0,.L76+8
 1841 0024 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1842 0028 0346     	 mov r3,r0
 1843 002a DBB2     	 uxtb r3,r3
 1844 002c 2343     	 orrs r3,r3,r4
 1845 002e DBB2     	 uxtb r3,r3
 1846 0030 5B00     	 lsls r3,r3,#1
 1847 0032 DCB2     	 uxtb r4,r3
 1848 0034 2548     	 ldr r0,.L76+12
 1849 0036 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1850 003a 0346     	 mov r3,r0
 1851 003c DBB2     	 uxtb r3,r3
 1852 003e 2343     	 orrs r3,r3,r4
 1853 0040 FB71     	 strb r3,[r7,#7]
 412:../main.c     **** 	enc_val = enc_val | Hall_status; //read Sensor values and store them
 1854              	 .loc 4 412 0
 1855 0042 FB79     	 ldrb r3,[r7,#7]
 1856 0044 9AB2     	 uxth r2,r3
 1857 0046 1E4B     	 ldr r3,.L76
 1858 0048 1B88     	 ldrh r3,[r3]
 1859 004a 9BB2     	 uxth r3,r3
 1860 004c 1343     	 orrs r3,r3,r2
 1861 004e 9AB2     	 uxth r2,r3
 1862 0050 1B4B     	 ldr r3,.L76
 1863 0052 1A80     	 strh r2,[r3]
 413:../main.c     **** 	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual an
 1864              	 .loc 4 413 0
 1865 0054 1A4B     	 ldr r3,.L76
 1866 0056 1B88     	 ldrh r3,[r3]
 1867 0058 9BB2     	 uxth r3,r3
 1868 005a 03F03F03 	 and r3,r3,#63
 1869 005e 1C4A     	 ldr r2,.L76+16
 1870 0060 D25C     	 ldrb r2,[r2,r3]
 1871 0062 1C4B     	 ldr r3,.L76+20
 1872 0064 1A70     	 strb r2,[r3]
 414:../main.c     **** 
 415:../main.c     **** 	if(Hall_status == 0b100){sector = 0;}
 1873              	 .loc 4 415 0
 1874 0066 FB79     	 ldrb r3,[r7,#7]
 1875 0068 042B     	 cmp r3,#4
 1876 006a 03D1     	 bne .L70
 1877              	 .loc 4 415 0 is_stmt 0 discriminator 1
 1878 006c 1A4B     	 ldr r3,.L76+24
 1879 006e 0022     	 movs r2,#0
 1880 0070 1A70     	 strb r2,[r3]
 1881 0072 21E0     	 b .L69
 1882              	.L70:
 416:../main.c     **** 		 else if(Hall_status == 0b110){sector = 1;}
 1883              	 .loc 4 416 0 is_stmt 1
 1884 0074 FB79     	 ldrb r3,[r7,#7]
 1885 0076 062B     	 cmp r3,#6
 1886 0078 03D1     	 bne .L72
 1887              	 .loc 4 416 0 is_stmt 0 discriminator 1
 1888 007a 174B     	 ldr r3,.L76+24
 1889 007c 0122     	 movs r2,#1
 1890 007e 1A70     	 strb r2,[r3]
 1891 0080 1AE0     	 b .L69
 1892              	.L72:
 417:../main.c     **** 		 else if(Hall_status == 0b010){sector = 2;}
 1893              	 .loc 4 417 0 is_stmt 1
 1894 0082 FB79     	 ldrb r3,[r7,#7]
 1895 0084 022B     	 cmp r3,#2
 1896 0086 03D1     	 bne .L73
 1897              	 .loc 4 417 0 is_stmt 0 discriminator 1
 1898 0088 134B     	 ldr r3,.L76+24
 1899 008a 0222     	 movs r2,#2
 1900 008c 1A70     	 strb r2,[r3]
 1901 008e 13E0     	 b .L69
 1902              	.L73:
 418:../main.c     **** 		 else if(Hall_status == 0b011){sector = 3;}
 1903              	 .loc 4 418 0 is_stmt 1
 1904 0090 FB79     	 ldrb r3,[r7,#7]
 1905 0092 032B     	 cmp r3,#3
 1906 0094 03D1     	 bne .L74
 1907              	 .loc 4 418 0 is_stmt 0 discriminator 1
 1908 0096 104B     	 ldr r3,.L76+24
 1909 0098 0322     	 movs r2,#3
 1910 009a 1A70     	 strb r2,[r3]
 1911 009c 0CE0     	 b .L69
 1912              	.L74:
 419:../main.c     **** 		 else if(Hall_status == 0b001){sector = 4;}
 1913              	 .loc 4 419 0 is_stmt 1
 1914 009e FB79     	 ldrb r3,[r7,#7]
 1915 00a0 012B     	 cmp r3,#1
 1916 00a2 03D1     	 bne .L75
 1917              	 .loc 4 419 0 is_stmt 0 discriminator 1
 1918 00a4 0C4B     	 ldr r3,.L76+24
 1919 00a6 0422     	 movs r2,#4
 1920 00a8 1A70     	 strb r2,[r3]
 1921 00aa 05E0     	 b .L69
 1922              	.L75:
 420:../main.c     **** 		 else if(Hall_status == 0b101){sector = 5;}
 1923              	 .loc 4 420 0 is_stmt 1
 1924 00ac FB79     	 ldrb r3,[r7,#7]
 1925 00ae 052B     	 cmp r3,#5
 1926 00b0 02D1     	 bne .L69
 1927              	 .loc 4 420 0 is_stmt 0 discriminator 1
 1928 00b2 094B     	 ldr r3,.L76+24
 1929 00b4 0522     	 movs r2,#5
 1930 00b6 1A70     	 strb r2,[r3]
 1931              	.L69:
 421:../main.c     **** 
 422:../main.c     **** }
 1932              	 .loc 4 422 0 is_stmt 1
 1933 00b8 0C37     	 adds r7,r7,#12
 1934              	.LCFI83:
 1935              	 .cfi_def_cfa_offset 12
 1936 00ba BD46     	 mov sp,r7
 1937              	.LCFI84:
 1938              	 .cfi_def_cfa_register 13
 1939              	 
 1940 00bc 90BD     	 pop {r4,r7,pc}
 1941              	.L77:
 1942 00be 00BF     	 .align 2
 1943              	.L76:
 1944 00c0 00000000 	 .word enc_val
 1945 00c4 00000000 	 .word Hall_A_ISR
 1946 00c8 00000000 	 .word Hall_B_ISR
 1947 00cc 00000000 	 .word Hall_C_ISR
 1948 00d0 00000000 	 .word lookup_table
 1949 00d4 00000000 	 .word direction
 1950 00d8 00000000 	 .word sector
 1951              	 .cfi_endproc
 1952              	.LFE564:
 1954              	 .global __aeabi_ui2d
 1955              	 .global __aeabi_i2d
 1956              	 .global __aeabi_dsub
 1957              	 .global __aeabi_dcmpeq
 1958              	 .section .text.Calculation,"ax",%progbits
 1959              	 .align 2
 1960              	 .global Calculation
 1961              	 .thumb
 1962              	 .thumb_func
 1964              	Calculation:
 1965              	.LFB565:
 423:../main.c     **** // Routine for calculation (sector, clark-Park trans.,...)
 424:../main.c     **** 
 425:../main.c     **** //5kHz loop since every 4th step of 50us --> 200us --> 5kHz
 426:../main.c     **** void Calculation(void){
 1966              	 .loc 4 426 0
 1967              	 .cfi_startproc
 1968              	 
 1969              	 
 1970 0000 B0B5     	 push {r4,r5,r7,lr}
 1971              	.LCFI85:
 1972              	 .cfi_def_cfa_offset 16
 1973              	 .cfi_offset 4,-16
 1974              	 .cfi_offset 5,-12
 1975              	 .cfi_offset 7,-8
 1976              	 .cfi_offset 14,-4
 1977 0002 2DED028B 	 fstmfdd sp!,{d8}
 1978              	.LCFI86:
 1979              	 .cfi_def_cfa_offset 24
 1980              	 .cfi_offset 80,-24
 1981              	 .cfi_offset 81,-20
 1982 0006 84B0     	 sub sp,sp,#16
 1983              	.LCFI87:
 1984              	 .cfi_def_cfa_offset 40
 1985 0008 00AF     	 add r7,sp,#0
 1986              	.LCFI88:
 1987              	 .cfi_def_cfa_register 7
 427:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 1988              	 .loc 4 427 0
 1989 000a B448     	 ldr r0,.L143
 1990 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 428:../main.c     **** 		// Actual time since last angle update via Hall Sensor
 429:../main.c     **** 		uint32_t t;
 430:../main.c     **** 		if(last_Hall_trig == 'A') t = time_since_A;
 1991              	 .loc 4 430 0
 1992 0010 B34B     	 ldr r3,.L143+4
 1993 0012 1B78     	 ldrb r3,[r3]
 1994 0014 DBB2     	 uxtb r3,r3
 1995 0016 412B     	 cmp r3,#65
 1996 0018 03D1     	 bne .L79
 1997              	 .loc 4 430 0 is_stmt 0 discriminator 1
 1998 001a B24B     	 ldr r3,.L143+8
 1999 001c 1B68     	 ldr r3,[r3]
 2000 001e FB60     	 str r3,[r7,#12]
 2001 0020 10E0     	 b .L80
 2002              	.L79:
 431:../main.c     **** 		else if(last_Hall_trig == 'B') t = time_since_B;
 2003              	 .loc 4 431 0 is_stmt 1
 2004 0022 AF4B     	 ldr r3,.L143+4
 2005 0024 1B78     	 ldrb r3,[r3]
 2006 0026 DBB2     	 uxtb r3,r3
 2007 0028 422B     	 cmp r3,#66
 2008 002a 03D1     	 bne .L81
 2009              	 .loc 4 431 0 is_stmt 0 discriminator 1
 2010 002c AE4B     	 ldr r3,.L143+12
 2011 002e 1B68     	 ldr r3,[r3]
 2012 0030 FB60     	 str r3,[r7,#12]
 2013 0032 07E0     	 b .L80
 2014              	.L81:
 432:../main.c     **** 		else if(last_Hall_trig == 'C') t = time_since_C;
 2015              	 .loc 4 432 0 is_stmt 1
 2016 0034 AA4B     	 ldr r3,.L143+4
 2017 0036 1B78     	 ldrb r3,[r3]
 2018 0038 DBB2     	 uxtb r3,r3
 2019 003a 432B     	 cmp r3,#67
 2020 003c 02D1     	 bne .L80
 2021              	 .loc 4 432 0 is_stmt 0 discriminator 1
 2022 003e AB4B     	 ldr r3,.L143+16
 2023 0040 1B68     	 ldr r3,[r3]
 2024 0042 FB60     	 str r3,[r7,#12]
 2025              	.L80:
 433:../main.c     **** 		time_180deg_cal = time_180deg;
 2026              	 .loc 4 433 0 is_stmt 1
 2027 0044 AA4B     	 ldr r3,.L143+20
 2028 0046 1B68     	 ldr r3,[r3]
 2029 0048 AA4A     	 ldr r2,.L143+24
 2030 004a 1360     	 str r3,[r2]
 434:../main.c     **** 		// not fixing sector for calc because if chainges better to do so
 435:../main.c     **** 
 436:../main.c     **** 		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 2031              	 .loc 4 436 0
 2032 004c A94B     	 ldr r3,.L143+24
 2033 004e 1B68     	 ldr r3,[r3]
 2034 0050 40F6C412 	 movw r2,#2500
 2035 0054 9342     	 cmp r3,r2
 2036 0056 04D9     	 bls .L82
 2037              	 .loc 4 436 0 is_stmt 0 discriminator 1
 2038 0058 A64B     	 ldr r3,.L143+24
 2039 005a 40F6C412 	 movw r2,#2500
 2040 005e 1A60     	 str r2,[r3]
 2041 0060 06E0     	 b .L83
 2042              	.L82:
 437:../main.c     **** 		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 2043              	 .loc 4 437 0 is_stmt 1
 2044 0062 A44B     	 ldr r3,.L143+24
 2045 0064 1B68     	 ldr r3,[r3]
 2046 0066 012B     	 cmp r3,#1
 2047 0068 02D8     	 bhi .L83
 2048              	 .loc 4 437 0 is_stmt 0 discriminator 1
 2049 006a A24B     	 ldr r3,.L143+24
 2050 006c 0222     	 movs r2,#2
 2051 006e 1A60     	 str r2,[r3]
 2052              	.L83:
 438:../main.c     **** 
 439:../main.c     **** 		if(t < TIME_OMEGA_0){
 2053              	 .loc 4 439 0 is_stmt 1
 2054 0070 FB68     	 ldr r3,[r7,#12]
 2055 0072 41F28732 	 movw r2,#4999
 2056 0076 9342     	 cmp r3,r2
 2057 0078 35D8     	 bhi .L84
 440:../main.c     **** 			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 2058              	 .loc 4 440 0
 2059 007a 9E4B     	 ldr r3,.L143+24
 2060 007c 1B68     	 ldr r3,[r3]
 2061 007e 07EE903A 	 fmsr s15,r3
 2062 0082 F8EE677A 	 fuitos s15,s15
 2063 0086 17EE900A 	 fmrs r0,s15
 2064 008a FFF7FEFF 	 bl __aeabi_f2d
 2065 008e 0246     	 mov r2,r0
 2066 0090 0B46     	 mov r3,r1
 2067 0092 4FF00000 	 mov r0,#0
 2068 0096 9849     	 ldr r1,.L143+28
 2069 0098 FFF7FEFF 	 bl __aeabi_ddiv
 2070 009c 0246     	 mov r2,r0
 2071 009e 0B46     	 mov r3,r1
 2072 00a0 1446     	 mov r4,r2
 2073 00a2 1D46     	 mov r5,r3
 2074 00a4 F868     	 ldr r0,[r7,#12]
 2075 00a6 FFF7FEFF 	 bl __aeabi_ui2d
 2076 00aa 0246     	 mov r2,r0
 2077 00ac 0B46     	 mov r3,r1
 2078 00ae 2046     	 mov r0,r4
 2079 00b0 2946     	 mov r1,r5
 2080 00b2 FFF7FEFF 	 bl __aeabi_dmul
 2081 00b6 0246     	 mov r2,r0
 2082 00b8 0B46     	 mov r3,r1
 2083 00ba 1046     	 mov r0,r2
 2084 00bc 1946     	 mov r1,r3
 2085 00be FFF7FEFF 	 bl __aeabi_d2f
 2086 00c2 0246     	 mov r2,r0
 2087 00c4 8D4B     	 ldr r3,.L143+32
 2088 00c6 1A60     	 str r2,[r3]
 441:../main.c     **** 			if(angle_in_sector > 60) angle_in_sector = 60;
 2089              	 .loc 4 441 0
 2090 00c8 8C4B     	 ldr r3,.L143+32
 2091 00ca D3ED007A 	 flds s15,[r3]
 2092 00ce 9FED8C7A 	 flds s14,.L143+36
 2093 00d2 F4EEC77A 	 fcmpes s15,s14
 2094 00d6 F1EE10FA 	 fmstat
 2095 00da 00DC     	 bgt .L126
 2096 00dc 06E0     	 b .L87
 2097              	.L126:
 2098              	 .loc 4 441 0 is_stmt 0 discriminator 1
 2099 00de 874B     	 ldr r3,.L143+32
 2100 00e0 884A     	 ldr r2,.L143+40
 2101 00e2 1A60     	 str r2,[r3]
 2102 00e4 02E0     	 b .L87
 2103              	.L84:
 442:../main.c     **** 		}
 443:../main.c     **** 		else{
 444:../main.c     **** 			angle_in_sector = 30; // standig still
 2104              	 .loc 4 444 0 is_stmt 1
 2105 00e6 854B     	 ldr r3,.L143+32
 2106 00e8 874A     	 ldr r2,.L143+44
 2107 00ea 1A60     	 str r2,[r3]
 2108              	.L87:
 445:../main.c     **** 		}
 446:../main.c     **** 
 447:../main.c     **** 		// CW
 448:../main.c     **** 		if(direction==1)
 2109              	 .loc 4 448 0
 2110 00ec 874B     	 ldr r3,.L143+48
 2111 00ee 1B78     	 ldrb r3,[r3]
 2112 00f0 DBB2     	 uxtb r3,r3
 2113 00f2 5BB2     	 sxtb r3,r3
 2114 00f4 012B     	 cmp r3,#1
 2115 00f6 54D1     	 bne .L88
 449:../main.c     **** 		{
 450:../main.c     **** 			angle_phi = (sector*60.0)+angle_in_sector;
 2116              	 .loc 4 450 0
 2117 00f8 854B     	 ldr r3,.L143+52
 2118 00fa 1B78     	 ldrb r3,[r3]
 2119 00fc DBB2     	 uxtb r3,r3
 2120 00fe 5BB2     	 sxtb r3,r3
 2121 0100 1846     	 mov r0,r3
 2122 0102 FFF7FEFF 	 bl __aeabi_i2d
 2123 0106 0246     	 mov r2,r0
 2124 0108 0B46     	 mov r3,r1
 2125 010a 1046     	 mov r0,r2
 2126 010c 1946     	 mov r1,r3
 2127 010e 4FF00002 	 mov r2,#0
 2128 0112 804B     	 ldr r3,.L143+56
 2129 0114 FFF7FEFF 	 bl __aeabi_dmul
 2130 0118 0246     	 mov r2,r0
 2131 011a 0B46     	 mov r3,r1
 2132 011c 1446     	 mov r4,r2
 2133 011e 1D46     	 mov r5,r3
 2134 0120 764B     	 ldr r3,.L143+32
 2135 0122 1B68     	 ldr r3,[r3]
 2136 0124 1846     	 mov r0,r3
 2137 0126 FFF7FEFF 	 bl __aeabi_f2d
 2138 012a 0246     	 mov r2,r0
 2139 012c 0B46     	 mov r3,r1
 2140 012e 2046     	 mov r0,r4
 2141 0130 2946     	 mov r1,r5
 2142 0132 FFF7FEFF 	 bl __aeabi_dadd
 2143 0136 0246     	 mov r2,r0
 2144 0138 0B46     	 mov r3,r1
 2145 013a 1046     	 mov r0,r2
 2146 013c 1946     	 mov r1,r3
 2147 013e FFF7FEFF 	 bl __aeabi_d2f
 2148 0142 0246     	 mov r2,r0
 2149 0144 744B     	 ldr r3,.L143+60
 2150 0146 1A60     	 str r2,[r3]
 451:../main.c     **** 			angle_phi=angle_phi+offset_pos;
 2151              	 .loc 4 451 0
 2152 0148 734B     	 ldr r3,.L143+60
 2153 014a 93ED007A 	 flds s14,[r3]
 2154 014e 734B     	 ldr r3,.L143+64
 2155 0150 D3ED007A 	 flds s15,[r3]
 2156 0154 77EE277A 	 fadds s15,s14,s15
 2157 0158 6F4B     	 ldr r3,.L143+60
 2158 015a C3ED007A 	 fsts s15,[r3]
 452:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2159              	 .loc 4 452 0
 2160 015e 6E4B     	 ldr r3,.L143+60
 2161 0160 D3ED007A 	 flds s15,[r3]
 2162 0164 9FED6E7A 	 flds s14,.L143+68
 2163 0168 F4EEC77A 	 fcmpes s15,s14
 2164 016c F1EE10FA 	 fmstat
 2165 0170 09DD     	 ble .L89
 2166              	 .loc 4 452 0 is_stmt 0 discriminator 1
 2167 0172 694B     	 ldr r3,.L143+60
 2168 0174 D3ED007A 	 flds s15,[r3]
 2169 0178 9FED697A 	 flds s14,.L143+68
 2170 017c 77EEC77A 	 fsubs s15,s15,s14
 2171 0180 654B     	 ldr r3,.L143+60
 2172 0182 C3ED007A 	 fsts s15,[r3]
 2173              	.L89:
 453:../main.c     **** 
 454:../main.c     **** 			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
 2174              	 .loc 4 454 0 is_stmt 1
 2175 0186 5B4B     	 ldr r3,.L143+24
 2176 0188 1B68     	 ldr r3,[r3]
 2177 018a 07EE903A 	 fmsr s15,r3
 2178 018e F8EE677A 	 fuitos s15,s15
 2179 0192 9FED647A 	 flds s14,.L143+72
 2180 0196 C7EE277A 	 fdivs s15,s14,s15
 2181 019a 634B     	 ldr r3,.L143+76
 2182 019c C3ED007A 	 fsts s15,[r3]
 2183 01a0 6FE0     	 b .L91
 2184              	.L88:
 455:../main.c     **** 		}
 456:../main.c     **** 		// CCW
 457:../main.c     **** 		else{
 458:../main.c     **** 			angle_phi = (sector*60.0)-angle_in_sector;
 2185              	 .loc 4 458 0
 2186 01a2 5B4B     	 ldr r3,.L143+52
 2187 01a4 1B78     	 ldrb r3,[r3]
 2188 01a6 DBB2     	 uxtb r3,r3
 2189 01a8 5BB2     	 sxtb r3,r3
 2190 01aa 1846     	 mov r0,r3
 2191 01ac FFF7FEFF 	 bl __aeabi_i2d
 2192 01b0 0246     	 mov r2,r0
 2193 01b2 0B46     	 mov r3,r1
 2194 01b4 1046     	 mov r0,r2
 2195 01b6 1946     	 mov r1,r3
 2196 01b8 4FF00002 	 mov r2,#0
 2197 01bc 554B     	 ldr r3,.L143+56
 2198 01be FFF7FEFF 	 bl __aeabi_dmul
 2199 01c2 0246     	 mov r2,r0
 2200 01c4 0B46     	 mov r3,r1
 2201 01c6 1446     	 mov r4,r2
 2202 01c8 1D46     	 mov r5,r3
 2203 01ca 4C4B     	 ldr r3,.L143+32
 2204 01cc 1B68     	 ldr r3,[r3]
 2205 01ce 1846     	 mov r0,r3
 2206 01d0 FFF7FEFF 	 bl __aeabi_f2d
 2207 01d4 0246     	 mov r2,r0
 2208 01d6 0B46     	 mov r3,r1
 2209 01d8 2046     	 mov r0,r4
 2210 01da 2946     	 mov r1,r5
 2211 01dc FFF7FEFF 	 bl __aeabi_dsub
 2212 01e0 0246     	 mov r2,r0
 2213 01e2 0B46     	 mov r3,r1
 2214 01e4 1046     	 mov r0,r2
 2215 01e6 1946     	 mov r1,r3
 2216 01e8 FFF7FEFF 	 bl __aeabi_d2f
 2217 01ec 0246     	 mov r2,r0
 2218 01ee 4A4B     	 ldr r3,.L143+60
 2219 01f0 1A60     	 str r2,[r3]
 459:../main.c     **** 			angle_phi = angle_phi+60.0;
 2220              	 .loc 4 459 0
 2221 01f2 494B     	 ldr r3,.L143+60
 2222 01f4 D3ED007A 	 flds s15,[r3]
 2223 01f8 9FED417A 	 flds s14,.L143+36
 2224 01fc 77EE877A 	 fadds s15,s15,s14
 2225 0200 454B     	 ldr r3,.L143+60
 2226 0202 C3ED007A 	 fsts s15,[r3]
 460:../main.c     **** 			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 2227              	 .loc 4 460 0
 2228 0206 444B     	 ldr r3,.L143+60
 2229 0208 D3ED007A 	 flds s15,[r3]
 2230 020c F5EEC07A 	 fcmpezs s15
 2231 0210 F1EE10FA 	 fmstat
 2232 0214 09D5     	 bpl .L92
 2233              	 .loc 4 460 0 is_stmt 0 discriminator 1
 2234 0216 404B     	 ldr r3,.L143+60
 2235 0218 D3ED007A 	 flds s15,[r3]
 2236 021c 9FED407A 	 flds s14,.L143+68
 2237 0220 77EE877A 	 fadds s15,s15,s14
 2238 0224 3C4B     	 ldr r3,.L143+60
 2239 0226 C3ED007A 	 fsts s15,[r3]
 2240              	.L92:
 461:../main.c     **** 			angle_phi=angle_phi+offset_neg;
 2241              	 .loc 4 461 0 is_stmt 1
 2242 022a 3B4B     	 ldr r3,.L143+60
 2243 022c 93ED007A 	 flds s14,[r3]
 2244 0230 3E4B     	 ldr r3,.L143+80
 2245 0232 D3ED007A 	 flds s15,[r3]
 2246 0236 77EE277A 	 fadds s15,s14,s15
 2247 023a 374B     	 ldr r3,.L143+60
 2248 023c C3ED007A 	 fsts s15,[r3]
 462:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2249              	 .loc 4 462 0
 2250 0240 354B     	 ldr r3,.L143+60
 2251 0242 D3ED007A 	 flds s15,[r3]
 2252 0246 9FED367A 	 flds s14,.L143+68
 2253 024a F4EEC77A 	 fcmpes s15,s14
 2254 024e F1EE10FA 	 fmstat
 2255 0252 09DD     	 ble .L94
 2256              	 .loc 4 462 0 is_stmt 0 discriminator 1
 2257 0254 304B     	 ldr r3,.L143+60
 2258 0256 D3ED007A 	 flds s15,[r3]
 2259 025a 9FED317A 	 flds s14,.L143+68
 2260 025e 77EEC77A 	 fsubs s15,s15,s14
 2261 0262 2D4B     	 ldr r3,.L143+60
 2262 0264 C3ED007A 	 fsts s15,[r3]
 2263              	.L94:
 463:../main.c     **** 
 464:../main.c     **** 			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
 2264              	 .loc 4 464 0 is_stmt 1
 2265 0268 224B     	 ldr r3,.L143+24
 2266 026a 1B68     	 ldr r3,[r3]
 2267 026c 07EE903A 	 fmsr s15,r3
 2268 0270 F8EE677A 	 fuitos s15,s15
 2269 0274 9FED2E7A 	 flds s14,.L143+84
 2270 0278 C7EE277A 	 fdivs s15,s14,s15
 2271 027c 2A4B     	 ldr r3,.L143+76
 2272 027e C3ED007A 	 fsts s15,[r3]
 2273              	.L91:
 465:../main.c     **** 		}
 466:../main.c     **** 
 467:../main.c     **** 		Speed_detection_OK = 0;
 2274              	 .loc 4 467 0
 2275 0282 2C4B     	 ldr r3,.L143+88
 2276 0284 0022     	 movs r2,#0
 2277 0286 1A70     	 strb r2,[r3]
 468:../main.c     **** 		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large pea
 2278              	 .loc 4 468 0
 2279 0288 274B     	 ldr r3,.L143+76
 2280 028a D3ED007A 	 flds s15,[r3]
 2281 028e 9FED2A7A 	 flds s14,.L143+92
 2282 0292 F4EEC77A 	 fcmpes s15,s14
 2283 0296 F1EE10FA 	 fmstat
 2284 029a 10D5     	 bpl .L96
 2285              	 .loc 4 468 0 is_stmt 0 discriminator 1
 2286 029c 224B     	 ldr r3,.L143+76
 2287 029e D3ED007A 	 flds s15,[r3]
 2288 02a2 9FED267A 	 flds s14,.L143+96
 2289 02a6 F4EEC77A 	 fcmpes s15,s14
 2290 02aa F1EE10FA 	 fmstat
 2291 02ae 06DD     	 ble .L96
 469:../main.c     **** 		{
 470:../main.c     **** 			omega_mech_rps = omega_mech_rps_temp;
 2292              	 .loc 4 470 0 is_stmt 1
 2293 02b0 1D4B     	 ldr r3,.L143+76
 2294 02b2 1B68     	 ldr r3,[r3]
 2295 02b4 224A     	 ldr r2,.L143+100
 2296 02b6 1360     	 str r3,[r2]
 471:../main.c     **** 			Speed_detection_OK = 1;
 2297              	 .loc 4 471 0
 2298 02b8 1E4B     	 ldr r3,.L143+88
 2299 02ba 0122     	 movs r2,#1
 2300 02bc 1A70     	 strb r2,[r3]
 2301              	.L96:
 472:../main.c     **** 		}
 473:../main.c     **** 
 474:../main.c     **** 		if(t > TIME_OMEGA_0){
 2302              	 .loc 4 474 0
 2303 02be FB68     	 ldr r3,[r7,#12]
 2304 02c0 41F28832 	 movw r2,#5000
 2305 02c4 9342     	 cmp r3,r2
 2306 02c6 3FD9     	 bls .L99
 475:../main.c     **** 			omega_ele_rads = 0;
 2307              	 .loc 4 475 0
 2308 02c8 1E4B     	 ldr r3,.L143+104
 2309 02ca 4FF00002 	 mov r2,#0
 2310 02ce 1A60     	 str r2,[r3]
 476:../main.c     **** 			omega_mech_rps = 0;
 2311              	 .loc 4 476 0
 2312 02d0 1B4B     	 ldr r3,.L143+100
 2313 02d2 4FF00002 	 mov r2,#0
 2314 02d6 1A60     	 str r2,[r3]
 2315 02d8 5AE0     	 b .L100
 2316              	.L144:
 2317 02da 00BF     	 .align 2
 2318              	.L143:
 2319 02dc 00000000 	 .word status_LED_red_cal_time
 2320 02e0 00000000 	 .word last_Hall_trig
 2321 02e4 00000000 	 .word time_since_A
 2322 02e8 00000000 	 .word time_since_B
 2323 02ec 00000000 	 .word time_since_C
 2324 02f0 00000000 	 .word time_180deg
 2325 02f4 00000000 	 .word time_180deg_cal
 2326 02f8 00806640 	 .word 1080459264
 2327 02fc 00000000 	 .word angle_in_sector
 2328 0300 00007042 	 .word 1114636288
 2329 0304 00007042 	 .word 1114636288
 2330 0308 0000F041 	 .word 1106247680
 2331 030c 00000000 	 .word direction
 2332 0310 00000000 	 .word sector
 2333 0314 00004E40 	 .word 1078853632
 2334 0318 00000000 	 .word angle_phi
 2335 031c 00000000 	 .word offset_pos
 2336 0320 0000B443 	 .word 1135869952
 2337 0324 0000E143 	 .word 1138819072
 2338 0328 00000000 	 .word omega_mech_rps_temp
 2339 032c 00000000 	 .word offset_neg
 2340 0330 0000E1C3 	 .word -1008664576
 2341 0334 00000000 	 .word Speed_detection_OK
 2342 0338 00004843 	 .word 1128792064
 2343 033c 000048C3 	 .word -1018691584
 2344 0340 00000000 	 .word omega_mech_rps
 2345 0344 00000000 	 .word omega_ele_rads
 2346              	.L99:
 477:../main.c     **** 		} // set omega  to 0 if no more hall detected
 478:../main.c     **** 		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s
 2347              	 .loc 4 478 0
 2348 0348 A34B     	 ldr r3,.L145+40
 2349 034a D3ED007A 	 flds s15,[r3]
 2350 034e 77EEA77A 	 fadds s15,s15,s15
 2351 0352 17EE900A 	 fmrs r0,s15
 2352 0356 FFF7FEFF 	 bl __aeabi_f2d
 2353 035a 0246     	 mov r2,r0
 2354 035c 0B46     	 mov r3,r1
 2355 035e 1046     	 mov r0,r2
 2356 0360 1946     	 mov r1,r3
 2357 0362 93A3     	 adr r3,.L145
 2358 0364 D3E90023 	 ldrd r2,[r3]
 2359 0368 FFF7FEFF 	 bl __aeabi_dmul
 2360 036c 0246     	 mov r2,r0
 2361 036e 0B46     	 mov r3,r1
 2362 0370 1046     	 mov r0,r2
 2363 0372 1946     	 mov r1,r3
 2364 0374 4FF00002 	 mov r2,#0
 2365 0378 984B     	 ldr r3,.L145+44
 2366 037a FFF7FEFF 	 bl __aeabi_dmul
 2367 037e 0246     	 mov r2,r0
 2368 0380 0B46     	 mov r3,r1
 2369 0382 1046     	 mov r0,r2
 2370 0384 1946     	 mov r1,r3
 2371 0386 FFF7FEFF 	 bl __aeabi_d2f
 2372 038a 0246     	 mov r2,r0
 2373 038c 944B     	 ldr r3,.L145+48
 2374 038e 1A60     	 str r2,[r3]
 2375              	.L100:
 479:../main.c     **** 
 480:../main.c     **** 		omega_ele_degs = omega_ele_rads / Pi180;
 2376              	 .loc 4 480 0
 2377 0390 934B     	 ldr r3,.L145+48
 2378 0392 1B68     	 ldr r3,[r3]
 2379 0394 1846     	 mov r0,r3
 2380 0396 FFF7FEFF 	 bl __aeabi_f2d
 2381 039a 0246     	 mov r2,r0
 2382 039c 0B46     	 mov r3,r1
 2383 039e 1046     	 mov r0,r2
 2384 03a0 1946     	 mov r1,r3
 2385 03a2 85A3     	 adr r3,.L145+8
 2386 03a4 D3E90023 	 ldrd r2,[r3]
 2387 03a8 FFF7FEFF 	 bl __aeabi_ddiv
 2388 03ac 0246     	 mov r2,r0
 2389 03ae 0B46     	 mov r3,r1
 2390 03b0 1046     	 mov r0,r2
 2391 03b2 1946     	 mov r1,r3
 2392 03b4 FFF7FEFF 	 bl __aeabi_d2f
 2393 03b8 0246     	 mov r2,r0
 2394 03ba 8A4B     	 ldr r3,.L145+52
 2395 03bc 1A60     	 str r2,[r3]
 481:../main.c     **** 
 482:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% 
 483:../main.c     **** 
 484:../main.c     **** 		// Current read out over SPI
 485:../main.c     **** 		Current_U = readCurrent(ChipSelect_U);
 2396              	 .loc 4 485 0
 2397 03be 0620     	 movs r0,#6
 2398 03c0 FFF7FEFF 	 bl readCurrent
 2399 03c4 0246     	 mov r2,r0
 2400 03c6 884B     	 ldr r3,.L145+56
 2401 03c8 1A60     	 str r2,[r3]
 486:../main.c     **** 		Current_V = readCurrent(ChipSelect_V);
 2402              	 .loc 4 486 0
 2403 03ca 0520     	 movs r0,#5
 2404 03cc FFF7FEFF 	 bl readCurrent
 2405 03d0 0246     	 mov r2,r0
 2406 03d2 864B     	 ldr r3,.L145+60
 2407 03d4 1A60     	 str r2,[r3]
 487:../main.c     **** 		Current_W = readCurrent(ChipSelect_W);
 2408              	 .loc 4 487 0
 2409 03d6 0320     	 movs r0,#3
 2410 03d8 FFF7FEFF 	 bl readCurrent
 2411 03dc 0246     	 mov r2,r0
 2412 03de 844B     	 ldr r3,.L145+64
 2413 03e0 1A60     	 str r2,[r3]
 488:../main.c     **** 
 489:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of th
 490:../main.c     **** 
 491:../main.c     **** 		// conversion from rad/s to degree
 492:../main.c     **** 		float angle_phi_rad = angle_phi*Pi180;
 2414              	 .loc 4 492 0
 2415 03e2 844B     	 ldr r3,.L145+68
 2416 03e4 1B68     	 ldr r3,[r3]
 2417 03e6 1846     	 mov r0,r3
 2418 03e8 FFF7FEFF 	 bl __aeabi_f2d
 2419 03ec 0246     	 mov r2,r0
 2420 03ee 0B46     	 mov r3,r1
 2421 03f0 1046     	 mov r0,r2
 2422 03f2 1946     	 mov r1,r3
 2423 03f4 70A3     	 adr r3,.L145+8
 2424 03f6 D3E90023 	 ldrd r2,[r3]
 2425 03fa FFF7FEFF 	 bl __aeabi_dmul
 2426 03fe 0246     	 mov r2,r0
 2427 0400 0B46     	 mov r3,r1
 2428 0402 1046     	 mov r0,r2
 2429 0404 1946     	 mov r1,r3
 2430 0406 FFF7FEFF 	 bl __aeabi_d2f
 2431 040a 0346     	 mov r3,r0
 2432 040c BB60     	 str r3,[r7,#8]
 493:../main.c     **** 
 494:../main.c     **** 		// to decrease multiple calculations and computational effort
 495:../main.c     **** 		float cos_phi = cosf(angle_phi_rad);
 2433              	 .loc 4 495 0
 2434 040e B868     	 ldr r0,[r7,#8]
 2435 0410 FFF7FEFF 	 bl cosf
 2436 0414 7860     	 str r0,[r7,#4]
 496:../main.c     **** 		float sin_phi = sinf(angle_phi_rad);
 2437              	 .loc 4 496 0
 2438 0416 B868     	 ldr r0,[r7,#8]
 2439 0418 FFF7FEFF 	 bl sinf
 2440 041c 3860     	 str r0,[r7]
 497:../main.c     **** 
 498:../main.c     **** 		// Clark-Park transformation (from U,V,W to dq)
 499:../main.c     **** 		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-
 2441              	 .loc 4 499 0
 2442 041e 724B     	 ldr r3,.L145+56
 2443 0420 93ED007A 	 flds s14,[r3]
 2444 0424 D7ED017A 	 flds s15,[r7,#4]
 2445 0428 27EE278A 	 fmuls s16,s14,s15
 2446 042c B868     	 ldr r0,[r7,#8]
 2447 042e FFF7FEFF 	 bl __aeabi_f2d
 2448 0432 0246     	 mov r2,r0
 2449 0434 0B46     	 mov r3,r1
 2450 0436 1046     	 mov r0,r2
 2451 0438 1946     	 mov r1,r3
 2452 043a 61A3     	 adr r3,.L145+16
 2453 043c D3E90023 	 ldrd r2,[r3]
 2454 0440 FFF7FEFF 	 bl __aeabi_dsub
 2455 0444 0246     	 mov r2,r0
 2456 0446 0B46     	 mov r3,r1
 2457 0448 1046     	 mov r0,r2
 2458 044a 1946     	 mov r1,r3
 2459 044c FFF7FEFF 	 bl __aeabi_d2f
 2460 0450 0346     	 mov r3,r0
 2461 0452 1846     	 mov r0,r3
 2462 0454 FFF7FEFF 	 bl cosf
 2463 0458 07EE100A 	 fmsr s14,r0
 2464 045c 634B     	 ldr r3,.L145+60
 2465 045e D3ED007A 	 flds s15,[r3]
 2466 0462 67EE277A 	 fmuls s15,s14,s15
 2467 0466 38EE278A 	 fadds s16,s16,s15
 2468 046a B868     	 ldr r0,[r7,#8]
 2469 046c FFF7FEFF 	 bl __aeabi_f2d
 2470 0470 0246     	 mov r2,r0
 2471 0472 0B46     	 mov r3,r1
 2472 0474 1046     	 mov r0,r2
 2473 0476 1946     	 mov r1,r3
 2474 0478 53A3     	 adr r3,.L145+24
 2475 047a D3E90023 	 ldrd r2,[r3]
 2476 047e FFF7FEFF 	 bl __aeabi_dsub
 2477 0482 0246     	 mov r2,r0
 2478 0484 0B46     	 mov r3,r1
 2479 0486 1046     	 mov r0,r2
 2480 0488 1946     	 mov r1,r3
 2481 048a FFF7FEFF 	 bl __aeabi_d2f
 2482 048e 0346     	 mov r3,r0
 2483 0490 1846     	 mov r0,r3
 2484 0492 FFF7FEFF 	 bl cosf
 2485 0496 07EE100A 	 fmsr s14,r0
 2486 049a 554B     	 ldr r3,.L145+64
 2487 049c D3ED007A 	 flds s15,[r3]
 2488 04a0 67EE277A 	 fmuls s15,s14,s15
 2489 04a4 78EE277A 	 fadds s15,s16,s15
 2490 04a8 17EE900A 	 fmrs r0,s15
 2491 04ac FFF7FEFF 	 bl __aeabi_f2d
 2492 04b0 0246     	 mov r2,r0
 2493 04b2 0B46     	 mov r3,r1
 2494 04b4 1046     	 mov r0,r2
 2495 04b6 1946     	 mov r1,r3
 2496 04b8 45A3     	 adr r3,.L145+32
 2497 04ba D3E90023 	 ldrd r2,[r3]
 2498 04be FFF7FEFF 	 bl __aeabi_dmul
 2499 04c2 0246     	 mov r2,r0
 2500 04c4 0B46     	 mov r3,r1
 2501 04c6 1046     	 mov r0,r2
 2502 04c8 1946     	 mov r1,r3
 2503 04ca FFF7FEFF 	 bl __aeabi_d2f
 2504 04ce 0246     	 mov r2,r0
 2505 04d0 494B     	 ldr r3,.L145+72
 2506 04d2 1A60     	 str r2,[r3]
 500:../main.c     **** 		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad
 2507              	 .loc 4 500 0
 2508 04d4 D7ED007A 	 flds s15,[r7]
 2509 04d8 B1EE677A 	 fnegs s14,s15
 2510 04dc 424B     	 ldr r3,.L145+56
 2511 04de D3ED007A 	 flds s15,[r3]
 2512 04e2 27EE278A 	 fmuls s16,s14,s15
 2513 04e6 B868     	 ldr r0,[r7,#8]
 2514 04e8 FFF7FEFF 	 bl __aeabi_f2d
 2515 04ec 0246     	 mov r2,r0
 2516 04ee 0B46     	 mov r3,r1
 2517 04f0 1046     	 mov r0,r2
 2518 04f2 1946     	 mov r1,r3
 2519 04f4 32A3     	 adr r3,.L145+16
 2520 04f6 D3E90023 	 ldrd r2,[r3]
 2521 04fa FFF7FEFF 	 bl __aeabi_dsub
 2522 04fe 0246     	 mov r2,r0
 2523 0500 0B46     	 mov r3,r1
 2524 0502 1046     	 mov r0,r2
 2525 0504 1946     	 mov r1,r3
 2526 0506 FFF7FEFF 	 bl __aeabi_d2f
 2527 050a 0346     	 mov r3,r0
 2528 050c 1846     	 mov r0,r3
 2529 050e FFF7FEFF 	 bl sinf
 2530 0512 07EE100A 	 fmsr s14,r0
 2531 0516 354B     	 ldr r3,.L145+60
 2532 0518 D3ED007A 	 flds s15,[r3]
 2533 051c 67EE277A 	 fmuls s15,s14,s15
 2534 0520 38EE678A 	 fsubs s16,s16,s15
 2535 0524 B868     	 ldr r0,[r7,#8]
 2536 0526 FFF7FEFF 	 bl __aeabi_f2d
 2537 052a 0246     	 mov r2,r0
 2538 052c 0B46     	 mov r3,r1
 2539 052e 1046     	 mov r0,r2
 2540 0530 1946     	 mov r1,r3
 2541 0532 25A3     	 adr r3,.L145+24
 2542 0534 D3E90023 	 ldrd r2,[r3]
 2543 0538 FFF7FEFF 	 bl __aeabi_dsub
 2544 053c 0246     	 mov r2,r0
 2545 053e 0B46     	 mov r3,r1
 2546 0540 1046     	 mov r0,r2
 2547 0542 1946     	 mov r1,r3
 2548 0544 FFF7FEFF 	 bl __aeabi_d2f
 2549 0548 0346     	 mov r3,r0
 2550 054a 1846     	 mov r0,r3
 2551 054c FFF7FEFF 	 bl sinf
 2552 0550 07EE100A 	 fmsr s14,r0
 2553 0554 264B     	 ldr r3,.L145+64
 2554 0556 D3ED007A 	 flds s15,[r3]
 2555 055a 67EE277A 	 fmuls s15,s14,s15
 2556 055e 78EE677A 	 fsubs s15,s16,s15
 2557 0562 17EE900A 	 fmrs r0,s15
 2558 0566 FFF7FEFF 	 bl __aeabi_f2d
 2559 056a 0246     	 mov r2,r0
 2560 056c 0B46     	 mov r3,r1
 2561 056e 1046     	 mov r0,r2
 2562 0570 1946     	 mov r1,r3
 2563 0572 17A3     	 adr r3,.L145+32
 2564 0574 D3E90023 	 ldrd r2,[r3]
 2565 0578 FFF7FEFF 	 bl __aeabi_dmul
 2566 057c 0246     	 mov r2,r0
 2567 057e 0B46     	 mov r3,r1
 2568 0580 1046     	 mov r0,r2
 2569 0582 1946     	 mov r1,r3
 2570 0584 FFF7FEFF 	 bl __aeabi_d2f
 2571 0588 0246     	 mov r2,r0
 2572 058a 1C4B     	 ldr r3,.L145+76
 2573 058c 1A60     	 str r2,[r3]
 501:../main.c     **** 
 502:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of
 503:../main.c     **** 
 504:../main.c     **** 		if(CAN_control == 1){// can control
 2574              	 .loc 4 504 0
 2575 058e 1C4B     	 ldr r3,.L145+80
 2576 0590 1B78     	 ldrb r3,[r3]
 2577 0592 012B     	 cmp r3,#1
 2578 0594 4DD1     	 bne .L101
 505:../main.c     **** 
 506:../main.c     **** 			if(CAN_new_meassage == 1){
 2579              	 .loc 4 506 0
 2580 0596 1B4B     	 ldr r3,.L145+84
 2581 0598 1B78     	 ldrb r3,[r3]
 2582 059a 012B     	 cmp r3,#1
 2583 059c 38D1     	 bne .L102
 507:../main.c     **** 				speed_ref = CAN_speed_ref;
 2584              	 .loc 4 507 0
 2585 059e 1A4B     	 ldr r3,.L145+88
 2586 05a0 1B68     	 ldr r3,[r3]
 2587 05a2 1A4A     	 ldr r2,.L145+92
 2588 05a4 1360     	 str r3,[r2]
 508:../main.c     **** 				CAN_new_meassage = 0;
 2589              	 .loc 4 508 0
 2590 05a6 174B     	 ldr r3,.L145+84
 2591 05a8 0022     	 movs r2,#0
 2592 05aa 1A70     	 strb r2,[r3]
 2593 05ac 36E0     	 b .L103
 2594              	.L146:
 2595 05ae 00BF     	 .align 3
 2596              	.L145:
 2597 05b0 F1D4C853 	 .word 1405670641
 2598 05b4 FB210940 	 .word 1074340347
 2599 05b8 4DC90777 	 .word 1996998989
 2600 05bc 46DF913F 	 .word 1066524486
 2601 05c0 A038DB37 	 .word 937113760
 2602 05c4 52C10040 	 .word 1073791314
 2603 05c8 A038DB37 	 .word 937113760
 2604 05cc 52C11040 	 .word 1074839890
 2605 05d0 93761F57 	 .word 1461679763
 2606 05d4 5555E53F 	 .word 1071994197
 2607 05d8 00000000 	 .word omega_mech_rps
 2608 05dc 00002640 	 .word 1076232192
 2609 05e0 00000000 	 .word omega_ele_rads
 2610 05e4 00000000 	 .word omega_ele_degs
 2611 05e8 00000000 	 .word Current_U
 2612 05ec 00000000 	 .word Current_V
 2613 05f0 00000000 	 .word Current_W
 2614 05f4 00000000 	 .word angle_phi
 2615 05f8 00000000 	 .word id
 2616 05fc 00000000 	 .word iq
 2617 0600 00000000 	 .word CAN_control
 2618 0604 00000000 	 .word CAN_new_meassage
 2619 0608 00000000 	 .word CAN_speed_ref
 2620 060c 00000000 	 .word speed_ref
 2621              	.L102:
 509:../main.c     **** 			}
 510:../main.c     **** 			else{
 511:../main.c     **** 				CAN_no_com_counter ++;
 2622              	 .loc 4 511 0
 2623 0610 6D4B     	 ldr r3,.L147+16
 2624 0612 1B78     	 ldrb r3,[r3]
 2625 0614 0133     	 adds r3,r3,#1
 2626 0616 DAB2     	 uxtb r2,r3
 2627 0618 6B4B     	 ldr r3,.L147+16
 2628 061a 1A70     	 strb r2,[r3]
 2629              	.L103:
 512:../main.c     **** 			}
 513:../main.c     **** 
 514:../main.c     **** 			if(CAN_no_com_counter > CAN_NO_COM_TH){
 2630              	 .loc 4 514 0
 2631 061c 6A4B     	 ldr r3,.L147+16
 2632 061e 1B78     	 ldrb r3,[r3]
 2633 0620 FA2B     	 cmp r3,#250
 2634 0622 06D9     	 bls .L101
 515:../main.c     **** 				//CAN_new_meassage = 0;
 516:../main.c     **** 				CAN_no_com_counter = CAN_NO_COM_TH;
 2635              	 .loc 4 516 0
 2636 0624 684B     	 ldr r3,.L147+16
 2637 0626 FA22     	 movs r2,#250
 2638 0628 1A70     	 strb r2,[r3]
 517:../main.c     **** 				speed_ref = 0;
 2639              	 .loc 4 517 0
 2640 062a 684B     	 ldr r3,.L147+20
 2641 062c 4FF00002 	 mov r2,#0
 2642 0630 1A60     	 str r2,[r3]
 2643              	.L101:
 518:../main.c     **** 			}
 519:../main.c     **** 		}
 520:../main.c     **** 
 521:../main.c     **** 		omega_ele_rads_ref = ( speed_ref * PPZ ) / WHEEL_R;
 2644              	 .loc 4 521 0
 2645 0632 664B     	 ldr r3,.L147+20
 2646 0634 D3ED007A 	 flds s15,[r3]
 2647 0638 B2EE067A 	 fconsts s14,#38
 2648 063c 67EE877A 	 fmuls s15,s15,s14
 2649 0640 17EE900A 	 fmrs r0,s15
 2650 0644 FFF7FEFF 	 bl __aeabi_f2d
 2651 0648 0246     	 mov r2,r0
 2652 064a 0B46     	 mov r3,r1
 2653 064c 1046     	 mov r0,r2
 2654 064e 1946     	 mov r1,r3
 2655 0650 59A3     	 adr r3,.L147
 2656 0652 D3E90023 	 ldrd r2,[r3]
 2657 0656 FFF7FEFF 	 bl __aeabi_ddiv
 2658 065a 0246     	 mov r2,r0
 2659 065c 0B46     	 mov r3,r1
 2660 065e 1046     	 mov r0,r2
 2661 0660 1946     	 mov r1,r3
 2662 0662 FFF7FEFF 	 bl __aeabi_d2f
 2663 0666 0246     	 mov r2,r0
 2664 0668 594B     	 ldr r3,.L147+24
 2665 066a 1A60     	 str r2,[r3]
 522:../main.c     **** 		 /*
 523:../main.c     **** 		if((omega_ele_rads_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rad
 524:../main.c     **** 			T_ref = 0;
 525:../main.c     **** 		}
 526:../main.c     **** 		else{
 527:../main.c     **** 			if(MOTOR_NUM == 1){
 528:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param_1); // outer control loop q f
 529:../main.c     **** 			}
 530:../main.c     **** 			else{
 531:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&omega_param);
 532:../main.c     **** 			}
 533:../main.c     **** 		}
 534:../main.c     **** 		*/
 535:../main.c     **** 
 536:../main.c     **** 		if (Speed_control == 1){
 2666              	 .loc 4 536 0
 2667 066c 594B     	 ldr r3,.L147+28
 2668 066e 1B78     	 ldrb r3,[r3]
 2669 0670 012B     	 cmp r3,#1
 2670 0672 40F0F480 	 bne .L104
 537:../main.c     **** 			if(omega_mech_rps_ref == 0  && (( -2 < omega_mech_rps) && (omega_mech_rps < 2))){ // no contorl 
 2671              	 .loc 4 537 0
 2672 0676 584B     	 ldr r3,.L147+32
 2673 0678 D3ED007A 	 flds s15,[r3]
 2674 067c F5EE407A 	 fcmpzs s15
 2675 0680 F1EE10FA 	 fmstat
 2676 0684 18D1     	 bne .L105
 2677              	 .loc 4 537 0 is_stmt 0 discriminator 1
 2678 0686 554B     	 ldr r3,.L147+36
 2679 0688 D3ED007A 	 flds s15,[r3]
 2680 068c B8EE007A 	 fconsts s14,#128
 2681 0690 F4EEC77A 	 fcmpes s15,s14
 2682 0694 F1EE10FA 	 fmstat
 2683 0698 0EDD     	 ble .L105
 2684              	 .loc 4 537 0 discriminator 2
 2685 069a 504B     	 ldr r3,.L147+36
 2686 069c D3ED007A 	 flds s15,[r3]
 2687 06a0 B0EE007A 	 fconsts s14,#0
 2688 06a4 F4EEC77A 	 fcmpes s15,s14
 2689 06a8 F1EE10FA 	 fmstat
 2690 06ac 04D5     	 bpl .L105
 538:../main.c     **** 					T_ref = 0;
 2691              	 .loc 4 538 0 is_stmt 1
 2692 06ae 4C4B     	 ldr r3,.L147+40
 2693 06b0 4FF00002 	 mov r2,#0
 2694 06b4 1A60     	 str r2,[r3]
 2695 06b6 B6E0     	 b .L134
 2696              	.L105:
 539:../main.c     **** 				}
 540:../main.c     **** 			else{
 541:../main.c     **** 				if(MOTOR_NUM == 1) T_ref = PID_Controller(omega_mech_rps_ref,omega_mech_rps,&omega_param1); // 
 542:../main.c     **** 				else T_ref = PID_Controller(omega_mech_rps_ref,omega_mech_rps,&omega_param);
 2697              	 .loc 4 542 0
 2698 06b8 474B     	 ldr r3,.L147+32
 2699 06ba 1A68     	 ldr r2,[r3]
 2700 06bc 474B     	 ldr r3,.L147+36
 2701 06be 1B68     	 ldr r3,[r3]
 2702 06c0 1046     	 mov r0,r2
 2703 06c2 1946     	 mov r1,r3
 2704 06c4 474A     	 ldr r2,.L147+44
 2705 06c6 FFF7FEFF 	 bl PID_Controller
 2706 06ca 0246     	 mov r2,r0
 2707 06cc 444B     	 ldr r3,.L147+40
 2708 06ce 1A60     	 str r2,[r3]
 543:../main.c     **** 
 544:../main.c     **** 				if(start_help ==1 ){
 2709              	 .loc 4 544 0
 2710 06d0 454B     	 ldr r3,.L147+48
 2711 06d2 1B78     	 ldrb r3,[r3]
 2712 06d4 012B     	 cmp r3,#1
 2713 06d6 40F0A680 	 bne .L134
 545:../main.c     **** 					// start help
 546:../main.c     **** 					if(omega_mech_rps_ref != 0 && (copysign(1,omega_mech_rps_ref) != copysign(1,omega_mech_rps) ||
 2714              	 .loc 4 546 0
 2715 06da 3F4B     	 ldr r3,.L147+32
 2716 06dc D3ED007A 	 flds s15,[r3]
 2717 06e0 F5EE407A 	 fcmpzs s15
 2718 06e4 F1EE10FA 	 fmstat
 2719 06e8 2DD0     	 beq .L109
 2720              	 .loc 4 546 0 is_stmt 0 discriminator 1
 2721 06ea 3B4B     	 ldr r3,.L147+32
 2722 06ec 1B68     	 ldr r3,[r3]
 2723 06ee 1846     	 mov r0,r3
 2724 06f0 FFF7FEFF 	 bl __aeabi_f2d
 2725 06f4 0246     	 mov r2,r0
 2726 06f6 0B46     	 mov r3,r1
 2727 06f8 4FF00000 	 mov r0,#0
 2728 06fc 3B49     	 ldr r1,.L147+52
 2729 06fe FFF7FEFF 	 bl copysign
 2730 0702 0446     	 mov r4,r0
 2731 0704 0D46     	 mov r5,r1
 2732 0706 354B     	 ldr r3,.L147+36
 2733 0708 1B68     	 ldr r3,[r3]
 2734 070a 1846     	 mov r0,r3
 2735 070c FFF7FEFF 	 bl __aeabi_f2d
 2736 0710 0246     	 mov r2,r0
 2737 0712 0B46     	 mov r3,r1
 2738 0714 4FF00000 	 mov r0,#0
 2739 0718 3449     	 ldr r1,.L147+52
 2740 071a FFF7FEFF 	 bl copysign
 2741 071e 0246     	 mov r2,r0
 2742 0720 0B46     	 mov r3,r1
 2743 0722 2046     	 mov r0,r4
 2744 0724 2946     	 mov r1,r5
 2745 0726 FFF7FEFF 	 bl __aeabi_dcmpeq
 2746 072a 0346     	 mov r3,r0
 2747 072c 002B     	 cmp r3,#0
 2748 072e 07D0     	 beq .L110
 2749              	 .loc 4 546 0 discriminator 2
 2750 0730 2A4B     	 ldr r3,.L147+36
 2751 0732 D3ED007A 	 flds s15,[r3]
 2752 0736 F5EE407A 	 fcmpzs s15
 2753 073a F1EE10FA 	 fmstat
 2754 073e 02D1     	 bne .L109
 2755              	.L110:
 547:../main.c     **** 						start_help_count = 1;
 2756              	 .loc 4 547 0 is_stmt 1
 2757 0740 2B4B     	 ldr r3,.L147+56
 2758 0742 0122     	 movs r2,#1
 2759 0744 1A70     	 strb r2,[r3]
 2760              	.L109:
 548:../main.c     **** 					}
 549:../main.c     **** 
 550:../main.c     **** 					if(start_help_count > 0){
 2761              	 .loc 4 550 0
 2762 0746 2A4B     	 ldr r3,.L147+56
 2763 0748 1B78     	 ldrb r3,[r3]
 2764 074a 002B     	 cmp r3,#0
 2765 074c 6BD0     	 beq .L134
 551:../main.c     **** 						start_help_flag = 1;
 2766              	 .loc 4 551 0
 2767 074e 294B     	 ldr r3,.L147+60
 2768 0750 0122     	 movs r2,#1
 2769 0752 1A70     	 strb r2,[r3]
 552:../main.c     **** 						start_help_count --;
 2770              	 .loc 4 552 0
 2771 0754 264B     	 ldr r3,.L147+56
 2772 0756 1B78     	 ldrb r3,[r3]
 2773 0758 013B     	 subs r3,r3,#1
 2774 075a DAB2     	 uxtb r2,r3
 2775 075c 244B     	 ldr r3,.L147+56
 2776 075e 1A70     	 strb r2,[r3]
 553:../main.c     **** 						if(omega_mech_rps_ref > 0)T_ref = T_ref + START_HELP_T;
 2777              	 .loc 4 553 0
 2778 0760 1D4B     	 ldr r3,.L147+32
 2779 0762 D3ED007A 	 flds s15,[r3]
 2780 0766 F5EEC07A 	 fcmpezs s15
 2781 076a F1EE10FA 	 fmstat
 2782 076e 17DD     	 ble .L141
 2783              	 .loc 4 553 0 is_stmt 0 discriminator 1
 2784 0770 1B4B     	 ldr r3,.L147+40
 2785 0772 1B68     	 ldr r3,[r3]
 2786 0774 1846     	 mov r0,r3
 2787 0776 FFF7FEFF 	 bl __aeabi_f2d
 2788 077a 0246     	 mov r2,r0
 2789 077c 0B46     	 mov r3,r1
 2790 077e 1046     	 mov r0,r2
 2791 0780 1946     	 mov r1,r3
 2792 0782 0FA3     	 adr r3,.L147+8
 2793 0784 D3E90023 	 ldrd r2,[r3]
 2794 0788 FFF7FEFF 	 bl __aeabi_dadd
 2795 078c 0246     	 mov r2,r0
 2796 078e 0B46     	 mov r3,r1
 2797 0790 1046     	 mov r0,r2
 2798 0792 1946     	 mov r1,r3
 2799 0794 FFF7FEFF 	 bl __aeabi_d2f
 2800 0798 0246     	 mov r2,r0
 2801 079a 114B     	 ldr r3,.L147+40
 2802 079c 1A60     	 str r2,[r3]
 2803 079e 42E0     	 b .L134
 2804              	.L141:
 554:../main.c     **** 						else if(omega_mech_rps_ref < 0)T_ref = T_ref - START_HELP_T;
 2805              	 .loc 4 554 0 is_stmt 1
 2806 07a0 0D4B     	 ldr r3,.L147+32
 2807 07a2 D3ED007A 	 flds s15,[r3]
 2808 07a6 F5EEC07A 	 fcmpezs s15
 2809 07aa F1EE10FA 	 fmstat
 2810 07ae 23D4     	 bmi .L136
 2811 07b0 39E0     	 b .L134
 2812              	.L148:
 2813 07b2 00BFAFF3 	 .align 3
 2813      0080
 2814              	.L147:
 2815 07b8 48E17A14 	 .word 343597384
 2816 07bc AE47B13F 	 .word 1068582830
 2817 07c0 9A999999 	 .word -1717986918
 2818 07c4 9999B93F 	 .word 1069128089
 2819 07c8 00000000 	 .word CAN_no_com_counter
 2820 07cc 00000000 	 .word speed_ref
 2821 07d0 00000000 	 .word omega_ele_rads_ref
 2822 07d4 00000000 	 .word Speed_control
 2823 07d8 00000000 	 .word omega_mech_rps_ref
 2824 07dc 00000000 	 .word omega_mech_rps
 2825 07e0 00000000 	 .word T_ref
 2826 07e4 00000000 	 .word omega_param
 2827 07e8 00000000 	 .word start_help
 2828 07ec 0000F03F 	 .word 1072693248
 2829 07f0 00000000 	 .word start_help_count
 2830 07f4 00000000 	 .word start_help_flag
 2831              	.L136:
 2832              	 .loc 4 554 0 is_stmt 0 discriminator 1
 2833 07f8 B54B     	 ldr r3,.L149+32
 2834 07fa 1B68     	 ldr r3,[r3]
 2835 07fc 1846     	 mov r0,r3
 2836 07fe FFF7FEFF 	 bl __aeabi_f2d
 2837 0802 0246     	 mov r2,r0
 2838 0804 0B46     	 mov r3,r1
 2839 0806 1046     	 mov r0,r2
 2840 0808 1946     	 mov r1,r3
 2841 080a A9A3     	 adr r3,.L149
 2842 080c D3E90023 	 ldrd r2,[r3]
 2843 0810 FFF7FEFF 	 bl __aeabi_dsub
 2844 0814 0246     	 mov r2,r0
 2845 0816 0B46     	 mov r3,r1
 2846 0818 1046     	 mov r0,r2
 2847 081a 1946     	 mov r1,r3
 2848 081c FFF7FEFF 	 bl __aeabi_d2f
 2849 0820 0246     	 mov r2,r0
 2850 0822 AB4B     	 ldr r3,.L149+32
 2851 0824 1A60     	 str r2,[r3]
 2852              	.L134:
 555:../main.c     **** 					}
 556:../main.c     **** 				}
 557:../main.c     **** 			}
 558:../main.c     **** 
 559:../main.c     **** 			if(MOTOR_NUM == 1 || MOTOR_NUM == 10) {
 560:../main.c     **** 				iq_ref =  T_ref / K_T; // dirction for motor 1
 561:../main.c     **** 			}
 562:../main.c     **** 			else{
 563:../main.c     **** 				iq_ref = - T_ref / K_T;// dirction for motor not 1
 2853              	 .loc 4 563 0 is_stmt 1
 2854 0826 AA4B     	 ldr r3,.L149+32
 2855 0828 D3ED007A 	 flds s15,[r3]
 2856 082c F1EE677A 	 fnegs s15,s15
 2857 0830 17EE903A 	 fmrs r3,s15
 2858 0834 1846     	 mov r0,r3
 2859 0836 FFF7FEFF 	 bl __aeabi_f2d
 2860 083a 0246     	 mov r2,r0
 2861 083c 0B46     	 mov r3,r1
 2862 083e 1046     	 mov r0,r2
 2863 0840 1946     	 mov r1,r3
 2864 0842 9DA3     	 adr r3,.L149+8
 2865 0844 D3E90023 	 ldrd r2,[r3]
 2866 0848 FFF7FEFF 	 bl __aeabi_ddiv
 2867 084c 0246     	 mov r2,r0
 2868 084e 0B46     	 mov r3,r1
 2869 0850 1046     	 mov r0,r2
 2870 0852 1946     	 mov r1,r3
 2871 0854 FFF7FEFF 	 bl __aeabi_d2f
 2872 0858 0246     	 mov r2,r0
 2873 085a 9E4B     	 ldr r3,.L149+36
 2874 085c 1A60     	 str r2,[r3]
 2875              	.L104:
 564:../main.c     **** 			}
 565:../main.c     **** 
 566:../main.c     **** 		}
 567:../main.c     **** 
 568:../main.c     **** 
 569:../main.c     **** 		iq_ref = - T_ref / K_T;// dirction for motor 1
 2876              	 .loc 4 569 0
 2877 085e 9C4B     	 ldr r3,.L149+32
 2878 0860 D3ED007A 	 flds s15,[r3]
 2879 0864 F1EE677A 	 fnegs s15,s15
 2880 0868 17EE903A 	 fmrs r3,s15
 2881 086c 1846     	 mov r0,r3
 2882 086e FFF7FEFF 	 bl __aeabi_f2d
 2883 0872 0246     	 mov r2,r0
 2884 0874 0B46     	 mov r3,r1
 2885 0876 1046     	 mov r0,r2
 2886 0878 1946     	 mov r1,r3
 2887 087a 8FA3     	 adr r3,.L149+8
 2888 087c D3E90023 	 ldrd r2,[r3]
 2889 0880 FFF7FEFF 	 bl __aeabi_ddiv
 2890 0884 0246     	 mov r2,r0
 2891 0886 0B46     	 mov r3,r1
 2892 0888 1046     	 mov r0,r2
 2893 088a 1946     	 mov r1,r3
 2894 088c FFF7FEFF 	 bl __aeabi_d2f
 2895 0890 0246     	 mov r2,r0
 2896 0892 904B     	 ldr r3,.L149+36
 2897 0894 1A60     	 str r2,[r3]
 570:../main.c     **** 
 571:../main.c     **** 		//limit to IQ_REF_MAx limit
 572:../main.c     **** 		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 2898              	 .loc 4 572 0
 2899 0896 8F4B     	 ldr r3,.L149+36
 2900 0898 D3ED007A 	 flds s15,[r3]
 2901 089c B9EE047A 	 fconsts s14,#148
 2902 08a0 F4EEC77A 	 fcmpes s15,s14
 2903 08a4 F1EE10FA 	 fmstat
 2904 08a8 02D5     	 bpl .L114
 2905              	 .loc 4 572 0 is_stmt 0 discriminator 1
 2906 08aa 8A4B     	 ldr r3,.L149+36
 2907 08ac 8A4A     	 ldr r2,.L149+40
 2908 08ae 1A60     	 str r2,[r3]
 2909              	.L114:
 573:../main.c     **** 		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 2910              	 .loc 4 573 0 is_stmt 1
 2911 08b0 884B     	 ldr r3,.L149+36
 2912 08b2 D3ED007A 	 flds s15,[r3]
 2913 08b6 B1EE047A 	 fconsts s14,#20
 2914 08ba F4EEC77A 	 fcmpes s15,s14
 2915 08be F1EE10FA 	 fmstat
 2916 08c2 02DD     	 ble .L116
 2917              	 .loc 4 573 0 is_stmt 0 discriminator 1
 2918 08c4 834B     	 ldr r3,.L149+36
 2919 08c6 854A     	 ldr r2,.L149+44
 2920 08c8 1A60     	 str r2,[r3]
 2921              	.L116:
 574:../main.c     **** 
 575:../main.c     **** 		if(Torque_control == 1){
 2922              	 .loc 4 575 0 is_stmt 1
 2923 08ca 854B     	 ldr r3,.L149+48
 2924 08cc 1B78     	 ldrb r3,[r3]
 2925 08ce 012B     	 cmp r3,#1
 2926 08d0 16D1     	 bne .L118
 576:../main.c     **** 			Vd = PID_Controller(0.0,id,&Id_param);
 2927              	 .loc 4 576 0
 2928 08d2 844B     	 ldr r3,.L149+52
 2929 08d4 1B68     	 ldr r3,[r3]
 2930 08d6 4FF00000 	 mov r0,#0
 2931 08da 1946     	 mov r1,r3
 2932 08dc 824A     	 ldr r2,.L149+56
 2933 08de FFF7FEFF 	 bl PID_Controller
 2934 08e2 0246     	 mov r2,r0
 2935 08e4 814B     	 ldr r3,.L149+60
 2936 08e6 1A60     	 str r2,[r3]
 577:../main.c     **** 			Vq = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
 2937              	 .loc 4 577 0
 2938 08e8 7A4B     	 ldr r3,.L149+36
 2939 08ea 1A68     	 ldr r2,[r3]
 2940 08ec 804B     	 ldr r3,.L149+64
 2941 08ee 1B68     	 ldr r3,[r3]
 2942 08f0 1046     	 mov r0,r2
 2943 08f2 1946     	 mov r1,r3
 2944 08f4 7F4A     	 ldr r2,.L149+68
 2945 08f6 FFF7FEFF 	 bl PID_Controller
 2946 08fa 0246     	 mov r2,r0
 2947 08fc 7E4B     	 ldr r3,.L149+72
 2948 08fe 1A60     	 str r2,[r3]
 2949              	.L118:
 578:../main.c     **** 		}
 579:../main.c     **** 
 580:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9
 581:../main.c     **** 
 582:../main.c     **** 		// dq to alpha beta for voltage
 583:../main.c     **** 		Valpha = Vd*cos_phi - Vq*sin_phi;
 2950              	 .loc 4 583 0
 2951 0900 7A4B     	 ldr r3,.L149+60
 2952 0902 93ED007A 	 flds s14,[r3]
 2953 0906 D7ED017A 	 flds s15,[r7,#4]
 2954 090a 27EE277A 	 fmuls s14,s14,s15
 2955 090e 7A4B     	 ldr r3,.L149+72
 2956 0910 D3ED006A 	 flds s13,[r3]
 2957 0914 D7ED007A 	 flds s15,[r7]
 2958 0918 66EEA77A 	 fmuls s15,s13,s15
 2959 091c 77EE677A 	 fsubs s15,s14,s15
 2960 0920 764B     	 ldr r3,.L149+76
 2961 0922 C3ED007A 	 fsts s15,[r3]
 584:../main.c     **** 		Vbeta = Vd*sin_phi + Vq*cos_phi;
 2962              	 .loc 4 584 0
 2963 0926 714B     	 ldr r3,.L149+60
 2964 0928 93ED007A 	 flds s14,[r3]
 2965 092c D7ED007A 	 flds s15,[r7]
 2966 0930 27EE277A 	 fmuls s14,s14,s15
 2967 0934 704B     	 ldr r3,.L149+72
 2968 0936 D3ED006A 	 flds s13,[r3]
 2969 093a D7ED017A 	 flds s15,[r7,#4]
 2970 093e 66EEA77A 	 fmuls s15,s13,s15
 2971 0942 77EE277A 	 fadds s15,s14,s15
 2972 0946 6E4B     	 ldr r3,.L149+80
 2973 0948 C3ED007A 	 fsts s15,[r3]
 585:../main.c     **** 
 586:../main.c     **** 		// calc angle for SVM app
 587:../main.c     **** 		angle_ab_rad = atanf(Vbeta/Valpha);
 2974              	 .loc 4 587 0
 2975 094c 6C4B     	 ldr r3,.L149+80
 2976 094e 93ED007A 	 flds s14,[r3]
 2977 0952 6A4B     	 ldr r3,.L149+76
 2978 0954 D3ED007A 	 flds s15,[r3]
 2979 0958 C7EE277A 	 fdivs s15,s14,s15
 2980 095c 17EE900A 	 fmrs r0,s15
 2981 0960 FFF7FEFF 	 bl atanf
 2982 0964 0246     	 mov r2,r0
 2983 0966 674B     	 ldr r3,.L149+84
 2984 0968 1A60     	 str r2,[r3]
 588:../main.c     **** 		angle_ab = angle_ab_rad/Pi180;
 2985              	 .loc 4 588 0
 2986 096a 664B     	 ldr r3,.L149+84
 2987 096c 1B68     	 ldr r3,[r3]
 2988 096e 1846     	 mov r0,r3
 2989 0970 FFF7FEFF 	 bl __aeabi_f2d
 2990 0974 0246     	 mov r2,r0
 2991 0976 0B46     	 mov r3,r1
 2992 0978 1046     	 mov r0,r2
 2993 097a 1946     	 mov r1,r3
 2994 097c 50A3     	 adr r3,.L149+16
 2995 097e D3E90023 	 ldrd r2,[r3]
 2996 0982 FFF7FEFF 	 bl __aeabi_ddiv
 2997 0986 0246     	 mov r2,r0
 2998 0988 0B46     	 mov r3,r1
 2999 098a 1046     	 mov r0,r2
 3000 098c 1946     	 mov r1,r3
 3001 098e FFF7FEFF 	 bl __aeabi_d2f
 3002 0992 0246     	 mov r2,r0
 3003 0994 5C4B     	 ldr r3,.L149+88
 3004 0996 1A60     	 str r2,[r3]
 589:../main.c     **** 
 590:../main.c     **** 		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 3005              	 .loc 4 590 0
 3006 0998 584B     	 ldr r3,.L149+76
 3007 099a D3ED007A 	 flds s15,[r3]
 3008 099e F5EEC07A 	 fcmpezs s15
 3009 09a2 F1EE10FA 	 fmstat
 3010 09a6 0AD5     	 bpl .L142
 3011              	 .loc 4 590 0 is_stmt 0 discriminator 1
 3012 09a8 574B     	 ldr r3,.L149+88
 3013 09aa D3ED007A 	 flds s15,[r3]
 3014 09ae 9FED577A 	 flds s14,.L149+92
 3015 09b2 77EE877A 	 fadds s15,s15,s14
 3016 09b6 544B     	 ldr r3,.L149+88
 3017 09b8 C3ED007A 	 fsts s15,[r3]
 3018 09bc 11E0     	 b .L121
 3019              	.L142:
 591:../main.c     **** 		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 3020              	 .loc 4 591 0 is_stmt 1
 3021 09be 504B     	 ldr r3,.L149+80
 3022 09c0 D3ED007A 	 flds s15,[r3]
 3023 09c4 F5EEC07A 	 fcmpezs s15
 3024 09c8 F1EE10FA 	 fmstat
 3025 09cc 09D5     	 bpl .L121
 3026              	 .loc 4 591 0 is_stmt 0 discriminator 1
 3027 09ce 4E4B     	 ldr r3,.L149+88
 3028 09d0 D3ED007A 	 flds s15,[r3]
 3029 09d4 9FED4E7A 	 flds s14,.L149+96
 3030 09d8 77EE877A 	 fadds s15,s15,s14
 3031 09dc 4A4B     	 ldr r3,.L149+88
 3032 09de C3ED007A 	 fsts s15,[r3]
 3033              	.L121:
 592:../main.c     **** 
 593:../main.c     **** 		// shortend to one line
 594:../main.c     **** 		// amplitude calculation
 595:../main.c     **** 		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 3034              	 .loc 4 595 0 is_stmt 1
 3035 09e2 464B     	 ldr r3,.L149+76
 3036 09e4 93ED007A 	 flds s14,[r3]
 3037 09e8 444B     	 ldr r3,.L149+76
 3038 09ea D3ED007A 	 flds s15,[r3]
 3039 09ee 27EE277A 	 fmuls s14,s14,s15
 3040 09f2 434B     	 ldr r3,.L149+80
 3041 09f4 D3ED006A 	 flds s13,[r3]
 3042 09f8 414B     	 ldr r3,.L149+80
 3043 09fa D3ED007A 	 flds s15,[r3]
 3044 09fe 66EEA77A 	 fmuls s15,s13,s15
 3045 0a02 77EE277A 	 fadds s15,s14,s15
 3046 0a06 17EE900A 	 fmrs r0,s15
 3047 0a0a FFF7FEFF 	 bl sqrtf
 3048 0a0e 0246     	 mov r2,r0
 3049 0a10 404B     	 ldr r3,.L149+100
 3050 0a12 1A60     	 str r2,[r3]
 596:../main.c     **** 
 597:../main.c     **** 		//K_inv = V/m --> m = V / K_inv
 598:../main.c     **** 		//modulation_index = amplitude_ab/K_inv;
 599:../main.c     **** 
 600:../main.c     **** 		if(V_DC_link < 0 || V_DC_link > 50) V_DC_link = 14.8;  // plauseblyt check if not set to nom bat 
 3051              	 .loc 4 600 0
 3052 0a14 404B     	 ldr r3,.L149+104
 3053 0a16 D3ED007A 	 flds s15,[r3]
 3054 0a1a F5EEC07A 	 fcmpezs s15
 3055 0a1e F1EE10FA 	 fmstat
 3056 0a22 09D4     	 bmi .L123
 3057              	 .loc 4 600 0 is_stmt 0 discriminator 2
 3058 0a24 3C4B     	 ldr r3,.L149+104
 3059 0a26 D3ED007A 	 flds s15,[r3]
 3060 0a2a 9FED3C7A 	 flds s14,.L149+108
 3061 0a2e F4EEC77A 	 fcmpes s15,s14
 3062 0a32 F1EE10FA 	 fmstat
 3063 0a36 02DD     	 ble .L124
 3064              	.L123:
 3065              	 .loc 4 600 0 discriminator 3
 3066 0a38 374B     	 ldr r3,.L149+104
 3067 0a3a 394A     	 ldr r2,.L149+112
 3068 0a3c 1A60     	 str r2,[r3]
 3069              	.L124:
 601:../main.c     **** 		modulation_index = amplitude_ab/(V_DC_link /1.732);
 3070              	 .loc 4 601 0 is_stmt 1
 3071 0a3e 354B     	 ldr r3,.L149+100
 3072 0a40 1B68     	 ldr r3,[r3]
 3073 0a42 1846     	 mov r0,r3
 3074 0a44 FFF7FEFF 	 bl __aeabi_f2d
 3075 0a48 0446     	 mov r4,r0
 3076 0a4a 0D46     	 mov r5,r1
 3077 0a4c 324B     	 ldr r3,.L149+104
 3078 0a4e 1B68     	 ldr r3,[r3]
 3079 0a50 1846     	 mov r0,r3
 3080 0a52 FFF7FEFF 	 bl __aeabi_f2d
 3081 0a56 0246     	 mov r2,r0
 3082 0a58 0B46     	 mov r3,r1
 3083 0a5a 1046     	 mov r0,r2
 3084 0a5c 1946     	 mov r1,r3
 3085 0a5e 1AA3     	 adr r3,.L149+24
 3086 0a60 D3E90023 	 ldrd r2,[r3]
 3087 0a64 FFF7FEFF 	 bl __aeabi_ddiv
 3088 0a68 0246     	 mov r2,r0
 3089 0a6a 0B46     	 mov r3,r1
 3090 0a6c 2046     	 mov r0,r4
 3091 0a6e 2946     	 mov r1,r5
 3092 0a70 FFF7FEFF 	 bl __aeabi_ddiv
 3093 0a74 0246     	 mov r2,r0
 3094 0a76 0B46     	 mov r3,r1
 3095 0a78 1046     	 mov r0,r2
 3096 0a7a 1946     	 mov r1,r3
 3097 0a7c FFF7FEFF 	 bl __aeabi_d2f
 3098 0a80 0246     	 mov r2,r0
 3099 0a82 284B     	 ldr r3,.L149+116
 3100 0a84 1A60     	 str r2,[r3]
 602:../main.c     **** 
 603:../main.c     **** 		//scale maximum 1 to 10000 -->
 604:../main.c     **** 		modulation_index_scaled = 10000*modulation_index;
 3101              	 .loc 4 604 0
 3102 0a86 274B     	 ldr r3,.L149+116
 3103 0a88 D3ED007A 	 flds s15,[r3]
 3104 0a8c 9FED267A 	 flds s14,.L149+120
 3105 0a90 67EE877A 	 fmuls s15,s15,s14
 3106 0a94 254B     	 ldr r3,.L149+124
 3107 0a96 C3ED007A 	 fsts s15,[r3]
 605:../main.c     **** 
 606:../main.c     **** 
 607:../main.c     **** 		// shortened ca 4% improvemnt
 608:../main.c     **** 		//modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;
 609:../main.c     **** 
 610:../main.c     **** 		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the ti
 3108              	 .loc 4 610 0
 3109 0a9a 2548     	 ldr r0,.L149+128
 3110 0a9c FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 611:../main.c     **** 
 612:../main.c     **** }
 3111              	 .loc 4 612 0
 3112 0aa0 1037     	 adds r7,r7,#16
 3113              	.LCFI89:
 3114              	 .cfi_def_cfa_offset 24
 3115 0aa2 BD46     	 mov sp,r7
 3116              	.LCFI90:
 3117              	 .cfi_def_cfa_register 13
 3118              	 
 3119 0aa4 BDEC028B 	 fldmfdd sp!,{d8}
 3120              	.LCFI91:
 3121              	 .cfi_restore 80
 3122              	 .cfi_restore 81
 3123              	 .cfi_def_cfa_offset 16
 3124 0aa8 B0BD     	 pop {r4,r5,r7,pc}
 3125              	.L150:
 3126 0aaa 00BFAFF3 	 .align 3
 3126      0080
 3127              	.L149:
 3128 0ab0 9A999999 	 .word -1717986918
 3129 0ab4 9999B93F 	 .word 1069128089
 3130 0ab8 E17A14AE 	 .word -1374389535
 3131 0abc 47E1CA3F 	 .word 1070260551
 3132 0ac0 4DC90777 	 .word 1996998989
 3133 0ac4 46DF913F 	 .word 1066524486
 3134 0ac8 83C0CAA1 	 .word -1580547965
 3135 0acc 45B6FB3F 	 .word 1073460805
 3136 0ad0 00000000 	 .word T_ref
 3137 0ad4 00000000 	 .word iq_ref
 3138 0ad8 0000A0C0 	 .word -1063256064
 3139 0adc 0000A040 	 .word 1084227584
 3140 0ae0 00000000 	 .word Torque_control
 3141 0ae4 00000000 	 .word id
 3142 0ae8 00000000 	 .word Id_param
 3143 0aec 00000000 	 .word Vd
 3144 0af0 00000000 	 .word iq
 3145 0af4 00000000 	 .word Iq_param
 3146 0af8 00000000 	 .word Vq
 3147 0afc 00000000 	 .word Valpha
 3148 0b00 00000000 	 .word Vbeta
 3149 0b04 00000000 	 .word angle_ab_rad
 3150 0b08 00000000 	 .word angle_ab
 3151 0b0c 00003443 	 .word 1127481344
 3152 0b10 0000B443 	 .word 1135869952
 3153 0b14 00000000 	 .word amplitude_ab
 3154 0b18 00000000 	 .word V_DC_link
 3155 0b1c 00004842 	 .word 1112014848
 3156 0b20 CDCC6C41 	 .word 1097649357
 3157 0b24 00000000 	 .word modulation_index
 3158 0b28 00401C46 	 .word 1176256512
 3159 0b2c 00000000 	 .word modulation_index_scaled
 3160 0b30 00000000 	 .word status_LED_red_cal_time
 3161              	 .cfi_endproc
 3162              	.LFE565:
 3164 0b34 AFF30080 	 .section .text.PID_Controller,"ax",%progbits
 3165              	 .align 2
 3166              	 .global PID_Controller
 3167              	 .thumb
 3168              	 .thumb_func
 3170              	PID_Controller:
 3171              	.LFB566:
 613:../main.c     **** 
 614:../main.c     **** // PID Controller
 615:../main.c     **** float PID_Controller(float SetPoint,float ActValue,PID_param *param){
 3172              	 .loc 4 615 0
 3173              	 .cfi_startproc
 3174              	 
 3175              	 
 3176              	 
 3177 0000 80B4     	 push {r7}
 3178              	.LCFI92:
 3179              	 .cfi_def_cfa_offset 4
 3180              	 .cfi_offset 7,-4
 3181 0002 89B0     	 sub sp,sp,#36
 3182              	.LCFI93:
 3183              	 .cfi_def_cfa_offset 40
 3184 0004 00AF     	 add r7,sp,#0
 3185              	.LCFI94:
 3186              	 .cfi_def_cfa_register 7
 3187 0006 F860     	 str r0,[r7,#12]
 3188 0008 B960     	 str r1,[r7,#8]
 3189 000a 7A60     	 str r2,[r7,#4]
 616:../main.c     **** 
 617:../main.c     **** 	float Deviation = SetPoint - ActValue;
 3190              	 .loc 4 617 0
 3191 000c 97ED037A 	 flds s14,[r7,#12]
 3192 0010 D7ED027A 	 flds s15,[r7,#8]
 3193 0014 77EE677A 	 fsubs s15,s14,s15
 3194 0018 C7ED067A 	 fsts s15,[r7,#24]
 618:../main.c     **** 	float temp1, temp2;
 619:../main.c     **** 
 620:../main.c     **** 	 temp1 = param->P*Deviation;
 3195              	 .loc 4 620 0
 3196 001c 7B68     	 ldr r3,[r7,#4]
 3197 001e 93ED007A 	 flds s14,[r3]
 3198 0022 D7ED067A 	 flds s15,[r7,#24]
 3199 0026 67EE277A 	 fmuls s15,s14,s15
 3200 002a C7ED057A 	 fsts s15,[r7,#20]
 621:../main.c     **** 	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;
 3201              	 .loc 4 621 0
 3202 002e 7B68     	 ldr r3,[r7,#4]
 3203 0030 93ED017A 	 flds s14,[r3,#4]
 3204 0034 214B     	 ldr r3,.L160
 3205 0036 D3ED007A 	 flds s15,[r3]
 3206 003a 27EE277A 	 fmuls s14,s14,s15
 3207 003e D7ED067A 	 flds s15,[r7,#24]
 3208 0042 27EE277A 	 fmuls s14,s14,s15
 3209 0046 D7ED057A 	 flds s15,[r7,#20]
 3210 004a 37EE277A 	 fadds s14,s14,s15
 3211 004e 7B68     	 ldr r3,[r7,#4]
 3212 0050 D3ED087A 	 flds s15,[r3,#32]
 3213 0054 77EE277A 	 fadds s15,s14,s15
 3214 0058 C7ED077A 	 fsts s15,[r7,#28]
 622:../main.c     **** 
 623:../main.c     **** 	 if (temp2 >= param->MaxLimit){
 3215              	 .loc 4 623 0
 3216 005c 7B68     	 ldr r3,[r7,#4]
 3217 005e 93ED037A 	 flds s14,[r3,#12]
 3218 0062 D7ED077A 	 flds s15,[r7,#28]
 3219 0066 B4EEE77A 	 fcmpes s14,s15
 3220 006a F1EE10FA 	 fmstat
 3221 006e 03D8     	 bhi .L159
 624:../main.c     **** 		 temp2 = param->MaxLimit;
 3222              	 .loc 4 624 0
 3223 0070 7B68     	 ldr r3,[r7,#4]
 3224 0072 DB68     	 ldr r3,[r3,#12]
 3225 0074 FB61     	 str r3,[r7,#28]
 3226 0076 0CE0     	 b .L154
 3227              	.L159:
 625:../main.c     **** 	 }
 626:../main.c     **** 	 else if (temp2 < param->MinLimit){
 3228              	 .loc 4 626 0
 3229 0078 7B68     	 ldr r3,[r7,#4]
 3230 007a 93ED047A 	 flds s14,[r3,#16]
 3231 007e D7ED077A 	 flds s15,[r7,#28]
 3232 0082 B4EEE77A 	 fcmpes s14,s15
 3233 0086 F1EE10FA 	 fmstat
 3234 008a 02DD     	 ble .L154
 627:../main.c     **** 		 temp2 = param->MinLimit;
 3235              	 .loc 4 627 0
 3236 008c 7B68     	 ldr r3,[r7,#4]
 3237 008e 1B69     	 ldr r3,[r3,#16]
 3238 0090 FB61     	 str r3,[r7,#28]
 3239              	.L154:
 628:../main.c     **** 	 }
 629:../main.c     **** 
 630:../main.c     **** 	 param->Output_z = temp2 - temp1;
 3240              	 .loc 4 630 0
 3241 0092 97ED077A 	 flds s14,[r7,#28]
 3242 0096 D7ED057A 	 flds s15,[r7,#20]
 3243 009a 77EE677A 	 fsubs s15,s14,s15
 3244 009e 7B68     	 ldr r3,[r7,#4]
 3245 00a0 C3ED087A 	 fsts s15,[r3,#32]
 631:../main.c     **** 
 632:../main.c     **** 	 param->Output = temp2;
 3246              	 .loc 4 632 0
 3247 00a4 7B68     	 ldr r3,[r7,#4]
 3248 00a6 FA69     	 ldr r2,[r7,#28]
 3249 00a8 5A61     	 str r2,[r3,#20]
 633:../main.c     **** 
 634:../main.c     **** 	return param->Output;
 3250              	 .loc 4 634 0
 3251 00aa 7B68     	 ldr r3,[r7,#4]
 3252 00ac 5B69     	 ldr r3,[r3,#20]
 635:../main.c     **** 
 636:../main.c     **** }
 3253              	 .loc 4 636 0
 3254 00ae 1846     	 mov r0,r3
 3255 00b0 2437     	 adds r7,r7,#36
 3256              	.LCFI95:
 3257              	 .cfi_def_cfa_offset 4
 3258 00b2 BD46     	 mov sp,r7
 3259              	.LCFI96:
 3260              	 .cfi_def_cfa_register 13
 3261              	 
 3262 00b4 5DF8047B 	 ldr r7,[sp],#4
 3263              	.LCFI97:
 3264              	 .cfi_restore 7
 3265              	 .cfi_def_cfa_offset 0
 3266 00b8 7047     	 bx lr
 3267              	.L161:
 3268 00ba 00BF     	 .align 2
 3269              	.L160:
 3270 00bc 00000000 	 .word Tcyc
 3271              	 .cfi_endproc
 3272              	.LFE566:
 3274              	 .section .text.readCurrent,"ax",%progbits
 3275              	 .align 2
 3276              	 .global readCurrent
 3277              	 .thumb
 3278              	 .thumb_func
 3280              	readCurrent:
 3281              	.LFB567:
 637:../main.c     **** 
 638:../main.c     **** 
 639:../main.c     **** //Read Current  via SPI-Interface
 640:../main.c     **** float readCurrent(uint8_t ChipSelect){
 3282              	 .loc 4 640 0
 3283              	 .cfi_startproc
 3284              	 
 3285              	 
 3286 0000 80B5     	 push {r7,lr}
 3287              	.LCFI98:
 3288              	 .cfi_def_cfa_offset 8
 3289              	 .cfi_offset 7,-8
 3290              	 .cfi_offset 14,-4
 3291 0002 86B0     	 sub sp,sp,#24
 3292              	.LCFI99:
 3293              	 .cfi_def_cfa_offset 32
 3294 0004 00AF     	 add r7,sp,#0
 3295              	.LCFI100:
 3296              	 .cfi_def_cfa_register 7
 3297 0006 0346     	 mov r3,r0
 3298 0008 FB71     	 strb r3,[r7,#7]
 641:../main.c     **** 	uint8_t ReadData[2];
 642:../main.c     **** 
 643:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, ChipSelect);
 3299              	 .loc 4 643 0
 3300 000a FB79     	 ldrb r3,[r7,#7]
 3301 000c 9BB2     	 uxth r3,r3
 3302 000e 2248     	 ldr r0,.L164
 3303 0010 1946     	 mov r1,r3
 3304 0012 FFF7FEFF 	 bl BUS_IO_Write
 644:../main.c     **** 	SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2U);
 3305              	 .loc 4 644 0
 3306 0016 07F10C03 	 add r3,r7,#12
 3307 001a 2048     	 ldr r0,.L164+4
 3308 001c 1946     	 mov r1,r3
 3309 001e 0222     	 movs r2,#2
 3310 0020 FFF7FEFF 	 bl SPI_MASTER_Receive
 645:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, 0b111);
 3311              	 .loc 4 645 0
 3312 0024 1C48     	 ldr r0,.L164
 3313 0026 0721     	 movs r1,#7
 3314 0028 FFF7FEFF 	 bl BUS_IO_Write
 646:../main.c     **** 	ReadData[0] = ReadData[0] & 0X1F; 									//cutting away the 3 info bits
 3315              	 .loc 4 646 0
 3316 002c 3B7B     	 ldrb r3,[r7,#12]
 3317 002e 03F01F03 	 and r3,r3,#31
 3318 0032 DBB2     	 uxtb r3,r3
 3319 0034 3B73     	 strb r3,[r7,#12]
 647:../main.c     **** 	uint16_t iCurrent = ReadData[0]<<8 | ReadData[1];					//combine Data
 3320              	 .loc 4 647 0
 3321 0036 3B7B     	 ldrb r3,[r7,#12]
 3322 0038 1B02     	 lsls r3,r3,#8
 3323 003a 9AB2     	 uxth r2,r3
 3324 003c 7B7B     	 ldrb r3,[r7,#13]
 3325 003e 9BB2     	 uxth r3,r3
 3326 0040 1343     	 orrs r3,r3,r2
 3327 0042 9BB2     	 uxth r3,r3
 3328 0044 FB82     	 strh r3,[r7,#22]
 648:../main.c     **** 
 649:../main.c     **** 	// calculation of the current
 650:../main.c     **** 	float fCurrent = ((float)iCurrent - 4096.0)/160.0;					// ATTENTION: value has to be divided by 16
 3329              	 .loc 4 650 0
 3330 0046 FB8A     	 ldrh r3,[r7,#22]
 3331 0048 07EE903A 	 fmsr s15,r3
 3332 004c F8EE677A 	 fuitos s15,s15
 3333 0050 17EE900A 	 fmrs r0,s15
 3334 0054 FFF7FEFF 	 bl __aeabi_f2d
 3335 0058 0246     	 mov r2,r0
 3336 005a 0B46     	 mov r3,r1
 3337 005c 1046     	 mov r0,r2
 3338 005e 1946     	 mov r1,r3
 3339 0060 4FF00002 	 mov r2,#0
 3340 0064 0E4B     	 ldr r3,.L164+8
 3341 0066 FFF7FEFF 	 bl __aeabi_dsub
 3342 006a 0246     	 mov r2,r0
 3343 006c 0B46     	 mov r3,r1
 3344 006e 1046     	 mov r0,r2
 3345 0070 1946     	 mov r1,r3
 3346 0072 4FF00002 	 mov r2,#0
 3347 0076 0B4B     	 ldr r3,.L164+12
 3348 0078 FFF7FEFF 	 bl __aeabi_ddiv
 3349 007c 0246     	 mov r2,r0
 3350 007e 0B46     	 mov r3,r1
 3351 0080 1046     	 mov r0,r2
 3352 0082 1946     	 mov r1,r3
 3353 0084 FFF7FEFF 	 bl __aeabi_d2f
 3354 0088 0346     	 mov r3,r0
 3355 008a 3B61     	 str r3,[r7,#16]
 651:../main.c     **** 
 652:../main.c     **** 	return fCurrent;
 3356              	 .loc 4 652 0
 3357 008c 3B69     	 ldr r3,[r7,#16]
 653:../main.c     **** }
 3358              	 .loc 4 653 0
 3359 008e 1846     	 mov r0,r3
 3360 0090 1837     	 adds r7,r7,#24
 3361              	.LCFI101:
 3362              	 .cfi_def_cfa_offset 8
 3363 0092 BD46     	 mov sp,r7
 3364              	.LCFI102:
 3365              	 .cfi_def_cfa_register 13
 3366              	 
 3367 0094 80BD     	 pop {r7,pc}
 3368              	.L165:
 3369 0096 00BF     	 .align 2
 3370              	.L164:
 3371 0098 00000000 	 .word SPI_ChipSelect
 3372 009c 00000000 	 .word SPI_MASTER_0
 3373 00a0 0000B040 	 .word 1085276160
 3374 00a4 00006440 	 .word 1080295424
 3375              	 .cfi_endproc
 3376              	.LFE567:
 3378              	 .text
 3379              	.Letext0:
 3380              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3381              	 .file 6 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3382              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3383              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 3384              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_scu.h"
 3385              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 3386              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_spi.h"
 3387              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master.h"
 3388              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io.h"
 3389              	 .file 14 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_eru.h"
 3390              	 .file 15 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_ccu8.h"
 3391              	 .file 16 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 3392              	 .file 17 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm.h"
 3393              	 .file 18 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 3394              	 .file 19 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 3395              	 .file 20 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 3396              	 .file 21 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_vadc.h"
 3397              	 .file 22 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_ADC/global_adc.h"
 3398              	 .file 23 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/ADC_MEASUREMENT/adc_measurement.h"
 3399              	 .file 24 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DAVE.h"
 3400              	 .file 25 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 3401              	 .file 26 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 3402              	 .file 27 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 3403              	 .file 28 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master_extern.h"
 3404              	 .file 29 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io_extern.h"
 3405              	 .file 30 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt_extern.h"
 3406              	 .file 31 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 3407              	 .file 32 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
 3408              	 .file 33 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/ADC_MEASUREMENT/adc_measurement_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:163    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:167    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:207    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:211    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:250    .text.PIN_INTERRUPT_GetPinValue:00000000 $t
    {standard input}:254    .text.PIN_INTERRUPT_GetPinValue:00000000 PIN_INTERRUPT_GetPinValue
    {standard input}:299    .data.Torque_control:00000000 Torque_control
    {standard input}:305    .bss.Speed_control:00000000 Speed_control
    {standard input}:306    .bss.Speed_control:00000000 $d
    {standard input}:311    .bss.CAN_control:00000000 CAN_control
    {standard input}:312    .bss.CAN_control:00000000 $d
                            *COM*:00000004 Current_U
                            *COM*:00000004 Current_V
                            *COM*:00000004 Current_W
    {standard input}:321    .data.lookup_table:00000000 lookup_table
    {standard input}:318    .data.lookup_table:00000000 $d
    {standard input}:390    .bss.sector:00000000 sector
    {standard input}:391    .bss.sector:00000000 $d
    {standard input}:396    .bss.direction:00000000 direction
    {standard input}:397    .bss.direction:00000000 $d
    {standard input}:403    .bss.enc_val:00000000 enc_val
    {standard input}:400    .bss.enc_val:00000000 $d
    {standard input}:410    .bss.time_since_A:00000000 time_since_A
    {standard input}:407    .bss.time_since_A:00000000 $d
    {standard input}:417    .bss.time_since_B:00000000 time_since_B
    {standard input}:414    .bss.time_since_B:00000000 $d
    {standard input}:424    .bss.time_since_C:00000000 time_since_C
    {standard input}:421    .bss.time_since_C:00000000 $d
    {standard input}:431    .data.time_180deg:00000000 time_180deg
    {standard input}:428    .data.time_180deg:00000000 $d
    {standard input}:438    .data.time_180deg_cal:00000000 time_180deg_cal
    {standard input}:435    .data.time_180deg_cal:00000000 $d
                            *COM*:00000001 last_Hall_trig
    {standard input}:446    .data.angle_in_sector:00000000 angle_in_sector
    {standard input}:443    .data.angle_in_sector:00000000 $d
    {standard input}:453    .bss.angle_phi:00000000 angle_phi
    {standard input}:450    .bss.angle_phi:00000000 $d
                            *COM*:00000004 ialpha
                            *COM*:00000004 ibeta
                            *COM*:00000004 iq
                            *COM*:00000004 id
                            *COM*:00000004 Valpha
                            *COM*:00000004 Vbeta
    {standard input}:466    .bss.omega_ele_rads:00000000 omega_ele_rads
    {standard input}:463    .bss.omega_ele_rads:00000000 $d
    {standard input}:473    .bss.omega_mech_rps:00000000 omega_mech_rps
    {standard input}:470    .bss.omega_mech_rps:00000000 $d
    {standard input}:480    .bss.omega_mech_rps_temp:00000000 omega_mech_rps_temp
    {standard input}:477    .bss.omega_mech_rps_temp:00000000 $d
    {standard input}:487    .bss.omega_ele_degs:00000000 omega_ele_degs
    {standard input}:484    .bss.omega_ele_degs:00000000 $d
    {standard input}:494    .bss.speed_ref:00000000 speed_ref
    {standard input}:491    .bss.speed_ref:00000000 $d
    {standard input}:501    .bss.omega_ele_rads_ref:00000000 omega_ele_rads_ref
    {standard input}:498    .bss.omega_ele_rads_ref:00000000 $d
    {standard input}:508    .bss.iq_ref:00000000 iq_ref
    {standard input}:505    .bss.iq_ref:00000000 $d
    {standard input}:515    .bss.T_ref:00000000 T_ref
    {standard input}:512    .bss.T_ref:00000000 $d
    {standard input}:522    .bss.Vd:00000000 Vd
    {standard input}:519    .bss.Vd:00000000 $d
    {standard input}:529    .bss.Vq:00000000 Vq
    {standard input}:526    .bss.Vq:00000000 $d
    {standard input}:536    .bss.omega_mech_rps_ref:00000000 omega_mech_rps_ref
    {standard input}:533    .bss.omega_mech_rps_ref:00000000 $d
                            *COM*:00000008 Speeds_int16_r
    {standard input}:544    .bss.CAN_speed_ref:00000000 CAN_speed_ref
    {standard input}:541    .bss.CAN_speed_ref:00000000 $d
    {standard input}:550    .bss.CAN_new_meassage:00000000 CAN_new_meassage
    {standard input}:551    .bss.CAN_new_meassage:00000000 $d
    {standard input}:556    .bss.CAN_no_com_counter:00000000 CAN_no_com_counter
    {standard input}:557    .bss.CAN_no_com_counter:00000000 $d
    {standard input}:563    .bss.distance_180deg_ele_count:00000000 distance_180deg_ele_count
    {standard input}:560    .bss.distance_180deg_ele_count:00000000 $d
    {standard input}:570    .bss.Speed_act:00000000 Speed_act
    {standard input}:567    .bss.Speed_act:00000000 $d
    {standard input}:577    .bss.distance:00000000 distance
    {standard input}:574    .bss.distance:00000000 $d
                            *COM*:00000004 modulation_index
                            *COM*:00000004 modulation_index_scaled
                            *COM*:00000004 angle_ab
                            *COM*:00000004 angle_ab_rad
                            *COM*:00000004 amplitude_ab
    {standard input}:589    .data.Ts:00000000 Ts
    {standard input}:586    .data.Ts:00000000 $d
    {standard input}:596    .data.Tcyc:00000000 Tcyc
    {standard input}:593    .data.Tcyc:00000000 $d
    {standard input}:603    .data.scaling_factor:00000000 scaling_factor
    {standard input}:600    .data.scaling_factor:00000000 $d
                            *COM*:00000004 amplitude_corrected
    {standard input}:610    .bss.count:00000000 count
    {standard input}:611    .bss.count:00000000 $d
    {standard input}:617    .data.offset_pos:00000000 offset_pos
    {standard input}:614    .data.offset_pos:00000000 $d
    {standard input}:624    .data.offset_neg:00000000 offset_neg
    {standard input}:621    .data.offset_neg:00000000 $d
    {standard input}:631    .data.Iq_param:00000000 Iq_param
    {standard input}:628    .data.Iq_param:00000000 $d
    {standard input}:646    .data.Id_param:00000000 Id_param
    {standard input}:643    .data.Id_param:00000000 $d
    {standard input}:661    .data.omega_param:00000000 omega_param
    {standard input}:658    .data.omega_param:00000000 $d
    {standard input}:676    .data.omega_param1:00000000 omega_param1
    {standard input}:673    .data.omega_param1:00000000 $d
    {standard input}:690    .bss.Speed_detection_OK:00000000 Speed_detection_OK
    {standard input}:691    .bss.Speed_detection_OK:00000000 $d
    {standard input}:697    .data.setting_time_scalar:00000000 setting_time_scalar
    {standard input}:694    .data.setting_time_scalar:00000000 $d
    {standard input}:704    .bss.step_start:00000000 step_start
    {standard input}:701    .bss.step_start:00000000 $d
    {standard input}:711    .data.step:00000000 step
    {standard input}:708    .data.step:00000000 $d
    {standard input}:717    .bss.start_help_count:00000000 start_help_count
    {standard input}:718    .bss.start_help_count:00000000 $d
    {standard input}:723    .bss.start_help:00000000 start_help
    {standard input}:724    .bss.start_help:00000000 $d
    {standard input}:729    .bss.start_help_flag:00000000 start_help_flag
    {standard input}:730    .bss.start_help_flag:00000000 $d
    {standard input}:736    .data.V_DC_link:00000000 V_DC_link
    {standard input}:733    .data.V_DC_link:00000000 $d
    {standard input}:743    .data.ADC_TO_DCLINK:00000000 ADC_TO_DCLINK
    {standard input}:740    .data.ADC_TO_DCLINK:00000000 $d
    {standard input}:751    .text.main:00000000 $t
    {standard input}:756    .text.main:00000000 main
    {standard input}:1684   .text.Hall_init:00000000 Hall_init
    {standard input}:1964   .text.Calculation:00000000 Calculation
    {standard input}:840    .text.main:00000078 $d
    {standard input}:852    .text.CAN0_1_IRQHandler:00000000 $t
    {standard input}:857    .text.CAN0_1_IRQHandler:00000000 CAN0_1_IRQHandler
    {standard input}:1003   .text.CAN0_1_IRQHandler:000000f8 $d
    {standard input}:1013   .text.CAN0_0_IRQHandler:00000000 $t
    {standard input}:1018   .text.CAN0_0_IRQHandler:00000000 CAN0_0_IRQHandler
    {standard input}:1091   .text.CAN0_0_IRQHandler:00000050 $d
    {standard input}:1102   .text.CCU43_0_IRQHandler:00000000 $t
    {standard input}:1107   .text.CCU43_0_IRQHandler:00000000 CCU43_0_IRQHandler
    {standard input}:1274   .text.CCU43_0_IRQHandler:00000160 $d
    {standard input}:1291   .text.VADC0_C0_2_IRQHandler:00000000 $t
    {standard input}:1296   .text.VADC0_C0_2_IRQHandler:00000000 VADC0_C0_2_IRQHandler
    {standard input}:1339   .text.VADC0_C0_2_IRQHandler:00000030 $d
    {standard input}:1346   .text.CCU43_3_IRQHandler:00000000 $t
    {standard input}:1351   .text.CCU43_3_IRQHandler:00000000 CCU43_3_IRQHandler
    {standard input}:1396   .text.CCU43_3_IRQHandler:0000002c $d
    {standard input}:1403   .text.ERU1_2_IRQHandler:00000000 $t
    {standard input}:1408   .text.ERU1_2_IRQHandler:00000000 ERU1_2_IRQHandler
    {standard input}:1807   .text.HallSensor:00000000 HallSensor
    {standard input}:1471   .text.ERU1_2_IRQHandler:00000050 $d
    {standard input}:1480   .text.ERU1_0_IRQHandler:00000000 $t
    {standard input}:1485   .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
    {standard input}:1519   .text.ERU1_0_IRQHandler:00000020 $d
    {standard input}:1526   .text.ERU1_3_IRQHandler:00000000 $t
    {standard input}:1531   .text.ERU1_3_IRQHandler:00000000 ERU1_3_IRQHandler
    {standard input}:1565   .text.ERU1_3_IRQHandler:00000020 $d
    {standard input}:1572   .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:1577   .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:1605   .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:1610   .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:1671   .text.CCU80_3_IRQHandler:00000058 $d
    {standard input}:1679   .text.Hall_init:00000000 $t
    {standard input}:1794   .text.Hall_init:0000008c $d
    {standard input}:1802   .text.HallSensor:00000000 $t
    {standard input}:1944   .text.HallSensor:000000c0 $d
    {standard input}:1959   .text.Calculation:00000000 $t
    {standard input}:2319   .text.Calculation:000002dc $d
    {standard input}:2348   .text.Calculation:00000348 $t
    {standard input}:3280   .text.readCurrent:00000000 readCurrent
    {standard input}:2597   .text.Calculation:000005b0 $d
    {standard input}:2623   .text.Calculation:00000610 $t
    {standard input}:3170   .text.PID_Controller:00000000 PID_Controller
    {standard input}:2815   .text.Calculation:000007b8 $d
    {standard input}:2833   .text.Calculation:000007f8 $t
    {standard input}:3128   .text.Calculation:00000ab0 $d
    {standard input}:3165   .text.PID_Controller:00000000 $t
    {standard input}:3270   .text.PID_Controller:000000bc $d
    {standard input}:3275   .text.readCurrent:00000000 $t
    {standard input}:3371   .text.readCurrent:00000098 $d
                     .debug_frame:00000010 $d
    {standard input}:1290   .text.CCU43_0_IRQHandler:00000194 $t
    {standard input}:3164   .text.Calculation:00000b34 $t

UNDEFINED SYMBOLS
DAVE_Init
CAN_NODE_Init
PWM_SVM_Start
rec_step_from_0
ADC_MEASUREMENT_StartConversion
CAN_NODE_0
PWM_SVM_0
ADC_MEASUREMENT_0
CAN_NODE_MO_Receive
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_dadd
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
ADC_MEASUREMENT_GetResult
ADC_MEASUREMENT_Channel_A_handle
PWM_SVM_SVMUpdate
Hall_A_ISR
Hall_B_ISR
Hall_C_ISR
__aeabi_ui2d
__aeabi_i2d
__aeabi_dsub
__aeabi_dcmpeq
status_LED_red_cal_time
cosf
sinf
copysign
atanf
sqrtf
BUS_IO_Write
SPI_MASTER_Receive
SPI_ChipSelect
SPI_MASTER_0
