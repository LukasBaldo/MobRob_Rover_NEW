   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB137:
  26              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE137:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB138:
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE138:
 114 0022 00BF     	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_GetInput:
 120              	.LFB140:
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 334 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 139              	 .loc 1 337 0
 140 000c 7B68     	 ldr r3,[r7,#4]
 141 000e 5A6A     	 ldr r2,[r3,#36]
 142 0010 FB78     	 ldrb r3,[r7,#3]
 143 0012 22FA03F3 	 lsr r3,r2,r3
 144 0016 03F00103 	 and r3,r3,#1
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 338 0
 146 001a 1846     	 mov r0,r3
 147 001c 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 001e BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0020 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0024 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE140:
 162 0026 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	DIGITAL_IO_SetOutputHigh:
 168              	.LFB145:
 169              	 .file 2 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 170              	 .loc 2 269 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 80B5     	 push {r7,lr}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 7,-8
 178              	 .cfi_offset 14,-4
 179 0002 82B0     	 sub sp,sp,#8
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 185 0006 7860     	 str r0,[r7,#4]
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 186              	 .loc 2 271 0
 187 0008 7B68     	 ldr r3,[r7,#4]
 188 000a 1A68     	 ldr r2,[r3]
 189 000c 7B68     	 ldr r3,[r7,#4]
 190 000e 1B7C     	 ldrb r3,[r3,#16]
 191 0010 1046     	 mov r0,r2
 192 0012 1946     	 mov r1,r3
 193 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 194              	 .loc 2 272 0
 195 0018 0837     	 adds r7,r7,#8
 196              	.LCFI21:
 197              	 .cfi_def_cfa_offset 8
 198 001a BD46     	 mov sp,r7
 199              	.LCFI22:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 001c 80BD     	 pop {r7,pc}
 203              	 .cfi_endproc
 204              	.LFE145:
 206 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	DIGITAL_IO_SetOutputLow:
 212              	.LFB146:
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 213              	 .loc 2 316 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217 0000 80B5     	 push {r7,lr}
 218              	.LCFI23:
 219              	 .cfi_def_cfa_offset 8
 220              	 .cfi_offset 7,-8
 221              	 .cfi_offset 14,-4
 222 0002 82B0     	 sub sp,sp,#8
 223              	.LCFI24:
 224              	 .cfi_def_cfa_offset 16
 225 0004 00AF     	 add r7,sp,#0
 226              	.LCFI25:
 227              	 .cfi_def_cfa_register 7
 228 0006 7860     	 str r0,[r7,#4]
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 229              	 .loc 2 318 0
 230 0008 7B68     	 ldr r3,[r7,#4]
 231 000a 1A68     	 ldr r2,[r3]
 232 000c 7B68     	 ldr r3,[r7,#4]
 233 000e 1B7C     	 ldrb r3,[r3,#16]
 234 0010 1046     	 mov r0,r2
 235 0012 1946     	 mov r1,r3
 236 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 237              	 .loc 2 319 0
 238 0018 0837     	 adds r7,r7,#8
 239              	.LCFI26:
 240              	 .cfi_def_cfa_offset 8
 241 001a BD46     	 mov sp,r7
 242              	.LCFI27:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 001c 80BD     	 pop {r7,pc}
 246              	 .cfi_endproc
 247              	.LFE146:
 249 001e 00BF     	 .section .text.PIN_INTERRUPT_GetPinValue,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	PIN_INTERRUPT_GetPinValue:
 255              	.LFB308:
 256              	 .file 3 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @file pin_interrupt.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @date 2016-03-02
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * NOTE:
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @cond
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT v4.0.2 - The PIN_INTERRUPT APP invokes user interrupt handler in a response to ris
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                        edge event signal on a pin.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Copyright (c) 2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * All rights reserved.                        
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * following conditions are met:   
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer.                        
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.     
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                         
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   products derived from this software without specific prior written permission. 
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * with Infineon Technologies AG (dave@infineon.com).         
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 2015-12-03:
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     - Initial version for DAVEv4. <BR>
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcond 
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifndef PIN_INTERRUPT_H
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #define PIN_INTERRUPT_H
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * HEADER FILES                                                                                    
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_scu.h>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_gpio.h>
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_eru.h>
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <DAVE_Common.h>
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include "pin_interrupt_conf.h"
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * MACROS                                                                                          
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_MINOR_VERSION >= 1U) && \
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_PATCH_VERSION >= 6U)))
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #error "PIN_INTERRUPT requires XMC Peripheral Library v2.1.6 or higher"
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup App_publicparam
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  @brief Initialization data structure for PIN_INTERRUPT APP
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ENUMS
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /*
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief enumeration for PIN_INTERRUPT APP
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_STATUS
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_SUCCESS = 0U,        /**<APP initialization is success */
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_FAILURE = 1U         /**<APP initialization is failure */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_STATUS_t;
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Defines trigger edge for the event generation by ETLx (Event Trigger Logic, x = [0 to 3]) unit, 
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * from ERSx(Event request source, x = [0 to 3]) unit.
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_EDGE
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_NONE = 0U, /**< no event enabled */
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_RISING = 1U,   /**< detection of rising edge generates the event */
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_FALLING = 2U,  /**< detection of falling edge generates the event */
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_BOTH = 3U      /**< detection of either edges generates the event */
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_EDGE_t;
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * DATA STRUCTURES
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** ***************************************************************************************************
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_datastructures
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Configuration structure for PIN_INTERRUPT APP
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef struct PIN_INTERRUPT
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_t *eru;  /**< Mapped ERU module */
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_PORT_t *port;  /**< Mapped port number */
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_CONFIG_t gpio_config;   /**< Initializes the input pin characteristics */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_ETL_CONFIG_t etl_config;  /**< reference to ERUx_ETLy (x = [0..1], y = [0..4])
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****                                                       module configuration */
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_SCU_IRQCTRL_t irqctrl;  /**< selects the interrupt source for a NVIC interrupt node*/
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   IRQn_Type IRQn;       /**< Mapped NVIC Node */
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_priority; 	  /**< Node Interrupt Priority */
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_FAMILY == XMC4)
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_subpriority;  /**< Node Interrupt SubPriority only valid for XMC4x */
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t etl; /*< ETLx channel (x = [0..3])*/
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t ogu; /*< OGUy channel (y = [0..3])*/
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t pin; /*< Mapped pin number */
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   bool enable_at_init;  /**< Interrupt enable for Node at initialization*/
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_t;
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifdef __cplusplus
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** extern "C" {
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * API Prototypes
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_apidoc
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Get PIN_INTERRUPT APP version
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description: </b><br>
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * The function can be used to check application software compatibility with a
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * specific version of the APP.
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void) {
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t init_status;
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_APP_VERSION_t version;
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // Initialize PIN_INTERRUPT APP:
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // PIN_INTERRUPT_Init() is called from within DAVE_Init().
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   init_status = DAVE_Init();
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if (DAVE_STATUS_SUCCESS == init_status)
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     version = PIN_INTERRUPT_GetAppVersion();
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     if (version.major != 4U) {
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *       // Probably, not the right version.
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     // More code here
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** DAVE_APP_VERSION_t PIN_INTERRUPT_GetAppVersion(void);
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Initializes a PIN_INTERRUPT APP instance
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_SUCCESS             : if initialization is successful\n
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_FAILURE             : if initialization is failed
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description:</b><br>
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT_Init API is called during initialization of DAVE APPS. This API Initializes input 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ERU and OGU hardware module initialization, Configures NVIC node and its priority in order to ge
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void)
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * {
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t status;
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle);
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Enables the IRQ.
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_EnableIRQ(handle->IRQn);
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Disables the IRQ.
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Disable(&PIN_INTERRUPT_0);
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Disable(const PIN_INTERRUPT_t *const handle)
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Disable: Handler null pointer", handle != NULL);
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_DisableIRQ(handle->IRQn);
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @brief Read input level of port pin.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @return uint32_t input logic level. Range:0-1
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * \par<b>Description:</b><br>
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * This function reads the Pn_IN register and returns the current logical value at the GPIO pin.
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * Example Usage:
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @code
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * int main(void)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * {
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   DAVE_STATUS_t status;
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   uint32_t pin_status;
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   status = DAVE_Init();   // (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0) is called within
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   if(status == DAVE_STATUS_SUCCESS)
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   else
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     while(1U)
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   while(1U)
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     pin_status = PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_0);
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     if(pin_status == 1)
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 339:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     else
 340:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 341:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 342:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 343:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 344:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   return (1);
 345:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * }
 346:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *  @endcode
 347:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** */
 348:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
 349:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 257              	 .loc 3 349 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI28:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI29:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI30:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
 350:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
 351:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   return (XMC_GPIO_GetInput(handle->port, handle->pin));
 273              	 .loc 3 351 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 5A68     	 ldr r2,[r3,#4]
 276 000c 7B68     	 ldr r3,[r7,#4]
 277 000e 93F82130 	 ldrb r3,[r3,#33]
 278 0012 1046     	 mov r0,r2
 279 0014 1946     	 mov r1,r3
 280 0016 FFF7FEFF 	 bl XMC_GPIO_GetInput
 281 001a 0346     	 mov r3,r0
 352:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 282              	 .loc 3 352 0
 283 001c 1846     	 mov r0,r3
 284 001e 0837     	 adds r7,r7,#8
 285              	.LCFI31:
 286              	 .cfi_def_cfa_offset 8
 287 0020 BD46     	 mov sp,r7
 288              	.LCFI32:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 0022 80BD     	 pop {r7,pc}
 292              	 .cfi_endproc
 293              	.LFE308:
 295              	 .global Torque_control
 296              	 .section .bss.Torque_control,"aw",%nobits
 299              	Torque_control:
 300 0000 00       	 .space 1
 301              	 .global Speed_control
 302              	 .section .bss.Speed_control,"aw",%nobits
 305              	Speed_control:
 306 0000 00       	 .space 1
 307              	 .global CAN_control
 308              	 .section .bss.CAN_control,"aw",%nobits
 311              	CAN_control:
 312 0000 00       	 .space 1
 313              	 .comm Current_U,4,4
 314              	 .comm Current_V,4,4
 315              	 .comm Current_W,4,4
 316              	 .global lookup_table
 317              	 .section .data.lookup_table,"aw",%progbits
 318              	 .align 2
 321              	lookup_table:
 322 0000 00       	 .byte 0
 323 0001 00       	 .byte 0
 324 0002 00       	 .byte 0
 325 0003 00       	 .byte 0
 326 0004 00       	 .byte 0
 327 0005 00       	 .byte 0
 328 0006 00       	 .byte 0
 329 0007 00       	 .byte 0
 330 0008 00       	 .byte 0
 331 0009 00       	 .byte 0
 332 000a 00       	 .byte 0
 333 000b FF       	 .byte -1
 334 000c 00       	 .byte 0
 335 000d 01       	 .byte 1
 336 000e 00       	 .byte 0
 337 000f 00       	 .byte 0
 338 0010 00       	 .byte 0
 339 0011 00       	 .byte 0
 340 0012 00       	 .byte 0
 341 0013 01       	 .byte 1
 342 0014 00       	 .byte 0
 343 0015 00       	 .byte 0
 344 0016 FF       	 .byte -1
 345 0017 00       	 .byte 0
 346 0018 00       	 .byte 0
 347 0019 01       	 .byte 1
 348 001a FF       	 .byte -1
 349 001b 00       	 .byte 0
 350 001c 00       	 .byte 0
 351 001d 00       	 .byte 0
 352 001e 00       	 .byte 0
 353 001f 00       	 .byte 0
 354 0020 00       	 .byte 0
 355 0021 00       	 .byte 0
 356 0022 00       	 .byte 0
 357 0023 00       	 .byte 0
 358 0024 00       	 .byte 0
 359 0025 FF       	 .byte -1
 360 0026 01       	 .byte 1
 361 0027 00       	 .byte 0
 362 0028 00       	 .byte 0
 363 0029 FF       	 .byte -1
 364 002a 00       	 .byte 0
 365 002b 00       	 .byte 0
 366 002c 01       	 .byte 1
 367 002d 00       	 .byte 0
 368 002e 00       	 .byte 0
 369 002f 00       	 .byte 0
 370 0030 00       	 .byte 0
 371 0031 00       	 .byte 0
 372 0032 01       	 .byte 1
 373 0033 00       	 .byte 0
 374 0034 FF       	 .byte -1
 375 0035 00       	 .byte 0
 376 0036 00       	 .byte 0
 377 0037 00       	 .byte 0
 378 0038 00       	 .byte 0
 379 0039 00       	 .byte 0
 380 003a 00       	 .byte 0
 381 003b 00       	 .byte 0
 382 003c 00       	 .byte 0
 383 003d 00       	 .byte 0
 384 003e 00       	 .byte 0
 385 003f 00       	 .byte 0
 386              	 .global sector
 387              	 .section .bss.sector,"aw",%nobits
 390              	sector:
 391 0000 00       	 .space 1
 392              	 .global direction
 393              	 .section .bss.direction,"aw",%nobits
 396              	direction:
 397 0000 00       	 .space 1
 398              	 .global enc_val
 399              	 .section .bss.enc_val,"aw",%nobits
 400              	 .align 1
 403              	enc_val:
 404 0000 0000     	 .space 2
 405              	 .global time_since_A
 406              	 .section .bss.time_since_A,"aw",%nobits
 407              	 .align 2
 410              	time_since_A:
 411 0000 00000000 	 .space 4
 412              	 .global time_since_B
 413              	 .section .bss.time_since_B,"aw",%nobits
 414              	 .align 2
 417              	time_since_B:
 418 0000 00000000 	 .space 4
 419              	 .global time_since_C
 420              	 .section .bss.time_since_C,"aw",%nobits
 421              	 .align 2
 424              	time_since_C:
 425 0000 00000000 	 .space 4
 426              	 .global time_180deg
 427              	 .section .data.time_180deg,"aw",%progbits
 428              	 .align 2
 431              	time_180deg:
 432 0000 E8030000 	 .word 1000
 433              	 .global time_180deg_cal
 434              	 .section .data.time_180deg_cal,"aw",%progbits
 435              	 .align 2
 438              	time_180deg_cal:
 439 0000 E8030000 	 .word 1000
 440              	 .comm last_Hall_trig,1,1
 441              	 .global angle_in_sector
 442              	 .section .data.angle_in_sector,"aw",%progbits
 443              	 .align 2
 446              	angle_in_sector:
 447 0000 0000F041 	 .word 1106247680
 448              	 .global angle_phi
 449              	 .section .bss.angle_phi,"aw",%nobits
 450              	 .align 2
 453              	angle_phi:
 454 0000 00000000 	 .space 4
 455              	 .comm ialpha,4,4
 456              	 .comm ibeta,4,4
 457              	 .comm iq,4,4
 458              	 .comm id,4,4
 459              	 .comm Valpha,4,4
 460              	 .comm Vbeta,4,4
 461              	 .global omega_ele_rads
 462              	 .section .bss.omega_ele_rads,"aw",%nobits
 463              	 .align 2
 466              	omega_ele_rads:
 467 0000 00000000 	 .space 4
 468              	 .global omega_mech_rps
 469              	 .section .bss.omega_mech_rps,"aw",%nobits
 470              	 .align 2
 473              	omega_mech_rps:
 474 0000 00000000 	 .space 4
 475              	 .global omega_mech_rps_temp
 476              	 .section .bss.omega_mech_rps_temp,"aw",%nobits
 477              	 .align 2
 480              	omega_mech_rps_temp:
 481 0000 00000000 	 .space 4
 482              	 .global omega_ele_degs
 483              	 .section .bss.omega_ele_degs,"aw",%nobits
 484              	 .align 2
 487              	omega_ele_degs:
 488 0000 00000000 	 .space 4
 489              	 .global speed_ref
 490              	 .section .bss.speed_ref,"aw",%nobits
 491              	 .align 2
 494              	speed_ref:
 495 0000 00000000 	 .space 4
 496              	 .global omega_ele_rads_ref
 497              	 .section .bss.omega_ele_rads_ref,"aw",%nobits
 498              	 .align 2
 501              	omega_ele_rads_ref:
 502 0000 00000000 	 .space 4
 503              	 .global iq_ref
 504              	 .section .bss.iq_ref,"aw",%nobits
 505              	 .align 2
 508              	iq_ref:
 509 0000 00000000 	 .space 4
 510              	 .global T_ref
 511              	 .section .bss.T_ref,"aw",%nobits
 512              	 .align 2
 515              	T_ref:
 516 0000 00000000 	 .space 4
 517              	 .global Vd
 518              	 .section .bss.Vd,"aw",%nobits
 519              	 .align 2
 522              	Vd:
 523 0000 00000000 	 .space 4
 524              	 .global Vq
 525              	 .section .bss.Vq,"aw",%nobits
 526              	 .align 2
 529              	Vq:
 530 0000 00000000 	 .space 4
 531              	 .comm Speeds_int16_r,8,4
 532              	 .global CAN_speed_ref
 533              	 .section .bss.CAN_speed_ref,"aw",%nobits
 534              	 .align 2
 537              	CAN_speed_ref:
 538 0000 00000000 	 .space 4
 539              	 .global CAN_new_meassage
 540              	 .section .bss.CAN_new_meassage,"aw",%nobits
 543              	CAN_new_meassage:
 544 0000 00       	 .space 1
 545              	 .global CAN_no_com_counter
 546              	 .section .bss.CAN_no_com_counter,"aw",%nobits
 549              	CAN_no_com_counter:
 550 0000 00       	 .space 1
 551              	 .global distance_180deg_ele_count
 552              	 .section .bss.distance_180deg_ele_count,"aw",%nobits
 553              	 .align 2
 556              	distance_180deg_ele_count:
 557 0000 00000000 	 .space 4
 558              	 .global Speed_act
 559              	 .section .bss.Speed_act,"aw",%nobits
 560              	 .align 2
 563              	Speed_act:
 564 0000 00000000 	 .space 4
 565              	 .global distance
 566              	 .section .bss.distance,"aw",%nobits
 567              	 .align 2
 570              	distance:
 571 0000 00000000 	 .space 4
 572              	 .comm modulation_index,4,4
 573              	 .comm modulation_index_scaled,4,4
 574              	 .comm angle_ab,4,4
 575              	 .comm angle_ab_rad,4,4
 576              	 .comm amplitude_ab,4,4
 577              	 .global Ts
 578              	 .section .data.Ts,"aw",%progbits
 579              	 .align 2
 582              	Ts:
 583 0000 17B75138 	 .word 944879383
 584              	 .global Tcyc
 585              	 .section .data.Tcyc,"aw",%progbits
 586              	 .align 2
 589              	Tcyc:
 590 0000 17B75139 	 .word 961656599
 591              	 .global scaling_factor
 592              	 .section .data.scaling_factor,"aw",%progbits
 593              	 .align 2
 596              	scaling_factor:
 597 0000 00000743 	 .word 1124532224
 598              	 .comm amplitude_corrected,4,4
 599              	 .global count
 600              	 .section .bss.count,"aw",%nobits
 603              	count:
 604 0000 00       	 .space 1
 605              	 .global offset_pos
 606              	 .section .data.offset_pos,"aw",%progbits
 607              	 .align 2
 610              	offset_pos:
 611 0000 0000D8C1 	 .word -1042808832
 612              	 .global offset_neg
 613              	 .section .data.offset_neg,"aw",%progbits
 614              	 .align 2
 617              	offset_neg:
 618 0000 0000A0C1 	 .word -1046478848
 619              	 .global Iq_param
 620              	 .section .data.Iq_param,"aw",%progbits
 621              	 .align 2
 624              	Iq_param:
 625 0000 0000003F 	 .word 1056964608
 626 0004 0000D443 	 .word 1137967104
 627 0008 00000000 	 .word 0
 628 000c 0000C842 	 .word 1120403456
 629 0010 0000C8C2 	 .word -1027080192
 630 0014 00000000 	 .word 0
 631 0018 00000000 	 .word 0
 632 001c 00000000 	 .word 0
 633 0020 00000000 	 .space 4
 634              	 .global Id_param
 635              	 .section .data.Id_param,"aw",%progbits
 636              	 .align 2
 639              	Id_param:
 640 0000 0000003F 	 .word 1056964608
 641 0004 0000D443 	 .word 1137967104
 642 0008 00000000 	 .word 0
 643 000c 0000C842 	 .word 1120403456
 644 0010 0000C8C2 	 .word -1027080192
 645 0014 00000000 	 .word 0
 646 0018 00000000 	 .word 0
 647 001c 00000000 	 .word 0
 648 0020 00000000 	 .space 4
 649              	 .global T_param
 650              	 .section .data.T_param,"aw",%progbits
 651              	 .align 2
 654              	T_param:
 655 0000 0AD7233C 	 .word 1008981770
 656 0004 0AD7233C 	 .word 1008981770
 657 0008 00000000 	 .word 0
 658 000c 00000040 	 .word 1073741824
 659 0010 000000C0 	 .word -1073741824
 660 0014 00000000 	 .word 0
 661 0018 00000000 	 .word 0
 662 001c 00000000 	 .word 0
 663 0020 00000000 	 .space 4
 664              	 .global T_param_1
 665              	 .section .data.T_param_1,"aw",%progbits
 666              	 .align 2
 669              	T_param_1:
 670 0000 0AD7A33B 	 .word 1000593162
 671 0004 0AD7233C 	 .word 1008981770
 672 0008 00000000 	 .word 0
 673 000c 0000C03F 	 .word 1069547520
 674 0010 0000C0BF 	 .word -1077936128
 675 0014 00000000 	 .word 0
 676 0018 00000000 	 .word 0
 677 001c 00000000 	 .word 0
 678 0020 00000000 	 .space 4
 679              	 .section .text.main,"ax",%progbits
 680              	 .align 2
 681              	 .global main
 682              	 .thumb
 683              	 .thumb_func
 685              	main:
 686              	.LFB473:
 687              	 .file 4 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2020 Jan 02 10:21:43
   5:../main.c     ****  *  Author: Baldo
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** // status: 11.05.2022
   9:../main.c     **** 
  10:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  11:../main.c     **** #include <math.h>
  12:../main.c     **** #include <stdio.h> //for printf
  13:../main.c     **** #include "rec_data_function.h"
  14:../main.c     **** 
  15:../main.c     **** //#######################
  16:../main.c     **** //FUNCTION DECLARATION
  17:../main.c     **** //########################
  18:../main.c     **** float readCurrent(uint8_t);
  19:../main.c     **** void Hall_init(void);
  20:../main.c     **** void HallSensor(void);
  21:../main.c     **** void Calculation(void);
  22:../main.c     **** 
  23:../main.c     **** //########################
  24:../main.c     **** //VARIABLE DECLARATION
  25:../main.c     **** //########################
  26:../main.c     **** 
  27:../main.c     **** // NEED to be set
  28:../main.c     **** //motor
  29:../main.c     **** #define MOTOR_NUM 1 // for trque dirction motro 1 differtn form rest so far
  30:../main.c     **** #define MOTOR_ON_ROVER 3// 0 front left 1 front right 2 back left 3 back right
  31:../main.c     **** 
  32:../main.c     **** //control type
  33:../main.c     **** uint8_t Torque_control = 0;
  34:../main.c     **** uint8_t Speed_control = 0; //if 0 is torque control if 1 is speed control
  35:../main.c     **** uint8_t CAN_control = 0; // id 1 CAN speed controll aktive
  36:../main.c     **** 
  37:../main.c     **** 
  38:../main.c     **** #define IQ_REF_MAX 5
  39:../main.c     **** #define CAN_NO_COM_TH 250
  40:../main.c     **** #define MAX_Speed_CAN 2
  41:../main.c     **** #define SPEED_LIMIT_CTRL_TO_ZERO 100 //omega_ele rad/s
  42:../main.c     **** #define TIME_OMEGA_0  5000 //time since last hall before omgea set to 0 in 100us
  43:../main.c     **** 
  44:../main.c     **** // Define often used vaules to decrease computational effort
  45:../main.c     **** #define PI 3.14159265
  46:../main.c     **** #define TwoThird 0.66666667
  47:../main.c     **** #define TwoPiThird 2.0943951
  48:../main.c     **** #define FourPiThird 4.1887902
  49:../main.c     **** #define Pi180 0.01745329
  50:../main.c     **** 
  51:../main.c     **** #define ANGLE_ONE_DEGREE (46603U)
  52:../main.c     **** //#define ANGLE_60_DEGREE	 (2796203U)
  53:../main.c     **** //#define ANGLE_180_DEGREE (8388608U)
  54:../main.c     **** 
  55:../main.c     **** //#define ANGLE_LSB (9455) // 2^24 corresponds to 360°. For a timer interrupt delta time of 100us 
  56:../main.c     **** 
  57:../main.c     **** // Define Chip select Pins for Current measurement via SPI Interface
  58:../main.c     **** #define ChipSelect_U 0b110
  59:../main.c     **** #define ChipSelect_V 0b101
  60:../main.c     **** #define ChipSelect_W 0b011
  61:../main.c     **** #define J 0.0023064 //SK J = 1/2 * m_wheel * r_wheel^2 = 1/2*1.2kg*(62mm)^2
  62:../main.c     **** #define K_T 0.21 //SK torque constant in Nm/A
  63:../main.c     **** #define K_inv (15.7/1.732) // K_inv = V / m = V_DC / 2 * 2/sqrt(3) = V_DC/sqrt(3)
  64:../main.c     **** //#define Psi_p 0.0082  60/  (2 * PI) * 1.4142 // Psi_p = K_back_EMF = 0.0082 V / rpm_mech --> 60 t
  65:../main.c     **** //#define Ls 0.00088 // Ls = Lm*1.1 = 0.8mH * 1.1 = 0.00088H
  66:../main.c     **** #define PPZ 11
  67:../main.c     **** #define WHEEL_R 0.0675 //0.135/2 straigt vaule other thing casued problems
  68:../main.c     **** 
  69:../main.c     **** float Current_U;
  70:../main.c     **** float Current_V;
  71:../main.c     **** float Current_W;
  72:../main.c     **** 
  73:../main.c     **** // Declaration of Lookup Table
  74:../main.c     **** int8_t lookup_table[] = {0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,-1,0,0,1,-1,0,0,0,0,0,0,0,0,0
  75:../main.c     **** //access via the index in the  form of the 6 bits (3 previous hall states and 3 actual  hall states
  76:../main.c     **** //for each of the 2^6 possibilities of sequence of hall events  it has been thought about the wavef
  77:../main.c     **** 
  78:../main.c     **** volatile int8_t sector = 0;
  79:../main.c     **** volatile int8_t direction = 0;              // direction +1/-1 -> CW and CCW
  80:../main.c     **** volatile uint16_t enc_val = 0;          // old and new values of all Hall Sensors
  81:../main.c     **** volatile uint32_t time_since_A = 0;	// time between to edges Hall A
  82:../main.c     **** volatile uint32_t time_since_B = 0; // time between to edges Hall B
  83:../main.c     **** volatile uint32_t time_since_C = 0; // time between to edges Hall C
  84:../main.c     **** volatile uint32_t time_180deg = 1000;        // time which last triggered HAL sensor needed for 180
  85:../main.c     **** volatile uint32_t time_180deg_cal = 1000;
  86:../main.c     **** volatile char last_Hall_trig;			//last triggered Hall Sensor A/B/C
  87:../main.c     **** 
  88:../main.c     **** float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60°
  89:../main.c     **** //volatile uint32_t TIME_OMEGA_0 = 50000; // t over this therschold assumed to be zero
  90:../main.c     **** 
  91:../main.c     **** float angle_phi = 0;
  92:../main.c     **** float ialpha,ibeta,iq,id,Valpha,Vbeta;
  93:../main.c     **** 
  94:../main.c     **** volatile float omega_ele_rads = 0; 	// electrical rad / sec //current real velocity calculated from
  95:../main.c     **** volatile float omega_mech_rps = 0;	//SK	//mechanical rounds per second
  96:../main.c     **** volatile float omega_mech_rps_temp = 0; //SK	//since dividing through the incremental (counted up) 
  97:../main.c     **** //volatile float omega_ele_rads_ref = -2*69.11; //1*69.11; //SK		//target velocity electrical in ra
  98:../main.c     **** 
  99:../main.c     **** volatile float omega_ele_degs = 0;
 100:../main.c     **** 
 101:../main.c     **** // REF vaules given to PI controller
 102:../main.c     **** float speed_ref = 0.0; //meters per second
 103:../main.c     **** float omega_ele_rads_ref = 0.0; // electrical rad per second
 104:../main.c     **** float iq_ref = 0.0;
 105:../main.c     **** float T_ref = 0.0;
 106:../main.c     **** float Vd = 0;
 107:../main.c     **** float Vq = 0;
 108:../main.c     **** 
 109:../main.c     **** // CAN vars
 110:../main.c     **** int16_t Speeds_int16_r[4];
 111:../main.c     **** float CAN_speed_ref = 0.0;
 112:../main.c     **** uint8_t CAN_new_meassage = 0; // if 1 recived can data
 113:../main.c     **** uint8_t CAN_no_com_counter = 0;
 114:../main.c     **** // distacne vaule back over can
 115:../main.c     **** int distance_180deg_ele_count = 0;
 116:../main.c     **** float Speed_act = 0;
 117:../main.c     **** float distance = 0;
 118:../main.c     **** 
 119:../main.c     **** volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
 120:../main.c     **** volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which 
 121:../main.c     **** 
 122:../main.c     **** float angle_ab;
 123:../main.c     **** float angle_ab_rad;
 124:../main.c     **** float amplitude_ab;
 125:../main.c     **** 
 126:../main.c     **** float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
 127:../main.c     **** float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I
 128:../main.c     **** 
 129:../main.c     **** //float amp_limit_SVM_app = 2500;  Bo
 130:../main.c     **** 
 131:../main.c     **** // scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
 132:../main.c     **** float scaling_factor = 135;
 133:../main.c     **** float amplitude_corrected;
 134:../main.c     **** 
 135:../main.c     **** 
 136:../main.c     **** // Counter for calculation function -> only use a multiple of the SVM Interrupt
 137:../main.c     **** volatile uint8_t count = 0;
 138:../main.c     **** 
 139:../main.c     **** // Angle correction factor to align Current to Hall Sensor vuales form 14/04
 140:../main.c     **** float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
 141:../main.c     **** float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction
 142:../main.c     **** 
 143:../main.c     **** //################ PI
 144:../main.c     **** // PID Controller declaration for Id and Iq component
 145:../main.c     **** typedef struct{
 146:../main.c     **** 	float P,I,D;
 147:../main.c     **** 	float MaxLimit, MinLimit;
 148:../main.c     **** 	float Output;
 149:../main.c     **** 	float Deviation_old, Deviation_old2;
 150:../main.c     **** 	float Output_z;
 151:../main.c     **** }PID_param;
 152:../main.c     **** 
 153:../main.c     **** //Vuales 14/04 mit maurzio
 154:../main.c     **** //PID_param omegaq = {.P = 0.004, .I = 0.004, .D = 0.0, .MaxLimit =  0.5, .MinLimit = -0.5, .Output
 155:../main.c     **** //PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 156:../main.c     **** //PID_param Id_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 157:../main.c     **** 
 158:../main.c     **** PID_param Iq_param = {.P = 0.50, .I = 424.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output 
 159:../main.c     **** PID_param Id_param = {.P = 0.50, .I = 424.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output 
 160:../main.c     **** PID_param T_param = {.P = 0.01, .I = 0.01, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Output = 0.0,
 161:../main.c     **** 
 162:../main.c     **** // for motro 1
 163:../main.c     **** PID_param T_param_1 = {.P = 0.005, .I = 0.01, .D = 0.0, .MaxLimit =  1.5, .MinLimit = -1.5, .Output
 164:../main.c     **** 
 165:../main.c     **** float PID_Controller(float,float,PID_param *param);
 166:../main.c     **** 
 167:../main.c     **** 
 168:../main.c     **** //########################
 169:../main.c     **** // MAIN
 170:../main.c     **** //########################
 171:../main.c     **** 
 172:../main.c     **** int main(void)
 173:../main.c     **** {
 688              	 .loc 4 173 0
 689              	 .cfi_startproc
 690              	 
 691              	 
 692 0000 80B5     	 push {r7,lr}
 693              	.LCFI33:
 694              	 .cfi_def_cfa_offset 8
 695              	 .cfi_offset 7,-8
 696              	 .cfi_offset 14,-4
 697 0002 84B0     	 sub sp,sp,#16
 698              	.LCFI34:
 699              	 .cfi_def_cfa_offset 24
 700 0004 02AF     	 add r7,sp,#8
 701              	.LCFI35:
 702              	 .cfi_def_cfa 7,16
 174:../main.c     ****   DAVE_STATUS_t status;
 175:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 703              	 .loc 4 175 0
 704 0006 FFF7FEFF 	 bl DAVE_Init
 705 000a 0346     	 mov r3,r0
 706 000c FB71     	 strb r3,[r7,#7]
 176:../main.c     **** 
 177:../main.c     ****   Hall_init();
 707              	 .loc 4 177 0
 708 000e FFF7FEFF 	 bl Hall_init
 178:../main.c     **** 
 179:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 709              	 .loc 4 179 0
 710 0012 FB79     	 ldrb r3,[r7,#7]
 711 0014 002B     	 cmp r3,#0
 712 0016 00D0     	 beq .L10
 713              	.L11:
 180:../main.c     ****   {
 181:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 182:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 183:../main.c     **** 
 184:../main.c     ****     while(1U)
 185:../main.c     ****     {
 186:../main.c     **** 
 187:../main.c     ****     }
 714              	 .loc 4 187 0 discriminator 1
 715 0018 FEE7     	 b .L11
 716              	.L10:
 188:../main.c     ****   }
 189:../main.c     **** 
 190:../main.c     ****   //Initialization of CAN
 191:../main.c     ****   	CAN_NODE_STATUS_t init_status;
 192:../main.c     ****   	init_status = CAN_NODE_Init(&CAN_NODE_0);
 717              	 .loc 4 192 0
 718 001a 1048     	 ldr r0,.L14
 719 001c FFF7FEFF 	 bl CAN_NODE_Init
 720 0020 0346     	 mov r3,r0
 721 0022 BB71     	 strb r3,[r7,#6]
 193:../main.c     **** 
 194:../main.c     ****   	if (init_status != CAN_NODE_STATUS_SUCCESS) {
 195:../main.c     ****   		XMC_DEBUG("CAN initialization failed\n");
 196:../main.c     ****   	}
 197:../main.c     **** 
 198:../main.c     ****   if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
 199:../main.c     **** 	  while(1U)
 200:../main.c     **** 	      {
 201:../main.c     **** 		//  printf("MOTOR_ON_ROVER number false");
 202:../main.c     **** 	      }
 203:../main.c     ****   }
 204:../main.c     **** 
 205:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 206:../main.c     ****   while(1U)
 207:../main.c     ****   {
 208:../main.c     **** 	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 722              	 .loc 4 208 0
 723 0024 0E48     	 ldr r0,.L14+4
 724 0026 FFF7FEFF 	 bl PWM_SVM_Start
 725              	.L13:
 209:../main.c     **** 		  while(1U)
 210:../main.c     **** 		    {
 211:../main.c     **** 			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 726              	 .loc 4 211 0
 727 002a 0E4B     	 ldr r3,.L14+8
 728 002c 1B78     	 ldrb r3,[r3]
 729 002e DBB2     	 uxtb r3,r3
 730 0030 032B     	 cmp r3,#3
 731 0032 12D9     	 bls .L12
 212:../main.c     **** 			  {
 213:../main.c     **** 				  count=0;
 732              	 .loc 4 213 0
 733 0034 0B4B     	 ldr r3,.L14+8
 734 0036 0022     	 movs r2,#0
 735 0038 1A70     	 strb r2,[r3]
 214:../main.c     **** 				  Calculation();
 736              	 .loc 4 214 0
 737 003a FFF7FEFF 	 bl Calculation
 215:../main.c     **** 
 216:../main.c     **** 				  f_rec_data(iq,Vq,&iq_ref,2,4);
 738              	 .loc 4 216 0
 739 003e 0A4B     	 ldr r3,.L14+12
 740 0040 1968     	 ldr r1,[r3]
 741 0042 0A4B     	 ldr r3,.L14+16
 742 0044 1A68     	 ldr r2,[r3]
 743 0046 4FF08143 	 mov r3,#1082130432
 744 004a 0093     	 str r3,[sp]
 745 004c 0846     	 mov r0,r1
 746 004e 1146     	 mov r1,r2
 747 0050 074A     	 ldr r2,.L14+20
 748 0052 4FF08043 	 mov r3,#1073741824
 749 0056 FFF7FEFF 	 bl f_rec_data
 750              	.L12:
 217:../main.c     **** 			  }
 218:../main.c     **** 		    }
 751              	 .loc 4 218 0
 752 005a E6E7     	 b .L13
 753              	.L15:
 754              	 .align 2
 755              	.L14:
 756 005c 00000000 	 .word CAN_NODE_0
 757 0060 00000000 	 .word PWM_SVM_0
 758 0064 00000000 	 .word count
 759 0068 00000000 	 .word iq
 760 006c 00000000 	 .word Vq
 761 0070 00000000 	 .word iq_ref
 762              	 .cfi_endproc
 763              	.LFE473:
 765              	 .section .text.CAN0_1_IRQHandler,"ax",%progbits
 766              	 .align 2
 767              	 .global CAN0_1_IRQHandler
 768              	 .thumb
 769              	 .thumb_func
 771              	CAN0_1_IRQHandler:
 772              	.LFB474:
 219:../main.c     ****   }
 220:../main.c     **** }
 221:../main.c     **** 
 222:../main.c     **** 
 223:../main.c     **** //########################
 224:../main.c     **** // INTERRUPTS
 225:../main.c     **** //########################
 226:../main.c     **** 
 227:../main.c     **** // CAN Communication
 228:../main.c     **** void CAN_RX_MO2_ISR(void){
 773              	 .loc 4 228 0
 774              	 .cfi_startproc
 775              	 
 776              	 
 777 0000 80B5     	 push {r7,lr}
 778              	.LCFI36:
 779              	 .cfi_def_cfa_offset 8
 780              	 .cfi_offset 7,-8
 781              	 .cfi_offset 14,-4
 782 0002 84B0     	 sub sp,sp,#16
 783              	.LCFI37:
 784              	 .cfi_def_cfa_offset 24
 785 0004 00AF     	 add r7,sp,#0
 786              	.LCFI38:
 787              	 .cfi_def_cfa_register 7
 229:../main.c     **** 		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
 788              	 .loc 4 229 0
 789 0006 384B     	 ldr r3,.L27
 790 0008 1B69     	 ldr r3,[r3,#16]
 791 000a 1B68     	 ldr r3,[r3]
 792 000c BB60     	 str r3,[r7,#8]
 230:../main.c     **** 		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
 793              	 .loc 4 230 0
 794 000e 364B     	 ldr r3,.L27
 795 0010 1B69     	 ldr r3,[r3,#16]
 796 0012 1846     	 mov r0,r3
 797 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 231:../main.c     **** 
 232:../main.c     **** 		uint8_t data_r[8];
 233:../main.c     **** 		 int i;
 234:../main.c     **** 		 for(i = 0 ; i < 8 ; i ++){
 798              	 .loc 4 234 0
 799 0018 0023     	 movs r3,#0
 800 001a FB60     	 str r3,[r7,#12]
 801 001c 0CE0     	 b .L17
 802              	.L18:
 235:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 803              	 .loc 4 235 0 discriminator 3
 804 001e BA68     	 ldr r2,[r7,#8]
 805 0020 FB68     	 ldr r3,[r7,#12]
 806 0022 1344     	 add r3,r3,r2
 807 0024 1033     	 adds r3,r3,#16
 808 0026 1978     	 ldrb r1,[r3]
 809 0028 3A46     	 mov r2,r7
 810 002a FB68     	 ldr r3,[r7,#12]
 811 002c 1344     	 add r3,r3,r2
 812 002e 0A46     	 mov r2,r1
 813 0030 1A70     	 strb r2,[r3]
 234:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 814              	 .loc 4 234 0 discriminator 3
 815 0032 FB68     	 ldr r3,[r7,#12]
 816 0034 0133     	 adds r3,r3,#1
 817 0036 FB60     	 str r3,[r7,#12]
 818              	.L17:
 234:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 819              	 .loc 4 234 0 is_stmt 0 discriminator 1
 820 0038 FB68     	 ldr r3,[r7,#12]
 821 003a 072B     	 cmp r3,#7
 822 003c EFDD     	 ble .L18
 236:../main.c     **** 		 }
 237:../main.c     **** 
 238:../main.c     **** 		 for(i = 0 ; i < 4 ; i ++){
 823              	 .loc 4 238 0 is_stmt 1
 824 003e 0023     	 movs r3,#0
 825 0040 FB60     	 str r3,[r7,#12]
 826 0042 1AE0     	 b .L19
 827              	.L20:
 239:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 828              	 .loc 4 239 0 discriminator 3
 829 0044 FB68     	 ldr r3,[r7,#12]
 830 0046 5B00     	 lsls r3,r3,#1
 831 0048 0133     	 adds r3,r3,#1
 832 004a 07F11002 	 add r2,r7,#16
 833 004e 1344     	 add r3,r3,r2
 834 0050 13F8103C 	 ldrb r3,[r3,#-16]
 835 0054 1B02     	 lsls r3,r3,#8
 836 0056 9AB2     	 uxth r2,r3
 837 0058 FB68     	 ldr r3,[r7,#12]
 838 005a 5B00     	 lsls r3,r3,#1
 839 005c 07F11001 	 add r1,r7,#16
 840 0060 0B44     	 add r3,r3,r1
 841 0062 13F8103C 	 ldrb r3,[r3,#-16]
 842 0066 9BB2     	 uxth r3,r3
 843 0068 1343     	 orrs r3,r3,r2
 844 006a 99B2     	 uxth r1,r3
 845 006c 1F4A     	 ldr r2,.L27+4
 846 006e FB68     	 ldr r3,[r7,#12]
 847 0070 22F81310 	 strh r1,[r2,r3,lsl#1]
 238:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 848              	 .loc 4 238 0 discriminator 3
 849 0074 FB68     	 ldr r3,[r7,#12]
 850 0076 0133     	 adds r3,r3,#1
 851 0078 FB60     	 str r3,[r7,#12]
 852              	.L19:
 238:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 853              	 .loc 4 238 0 is_stmt 0 discriminator 1
 854 007a FB68     	 ldr r3,[r7,#12]
 855 007c 032B     	 cmp r3,#3
 856 007e E1DD     	 ble .L20
 240:../main.c     **** 			 }
 241:../main.c     **** 
 242:../main.c     **** 		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 857              	 .loc 4 242 0 is_stmt 1
 858 0080 1A4B     	 ldr r3,.L27+4
 859 0082 DB88     	 ldrh r3,[r3,#6]
 860 0084 1BB2     	 sxth r3,r3
 861 0086 07EE903A 	 fmsr s15,r3
 862 008a F8EEE77A 	 fsitos s15,s15
 863 008e 9FED187A 	 flds s14,.L27+8
 864 0092 C7EE877A 	 fdivs s15,s15,s14
 865 0096 174B     	 ldr r3,.L27+12
 866 0098 C3ED007A 	 fsts s15,[r3]
 243:../main.c     **** 
 244:../main.c     **** 		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6
 245:../main.c     **** 
 246:../main.c     **** 		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 867              	 .loc 4 246 0
 868 009c 154B     	 ldr r3,.L27+12
 869 009e D3ED007A 	 flds s15,[r3]
 870 00a2 B0EE007A 	 fconsts s14,#0
 871 00a6 F4EEC77A 	 fcmpes s15,s14
 872 00aa F1EE10FA 	 fmstat
 873 00ae 03DD     	 ble .L21
 874              	 .loc 4 246 0 is_stmt 0 discriminator 1
 875 00b0 104B     	 ldr r3,.L27+12
 876 00b2 4FF08042 	 mov r2,#1073741824
 877 00b6 1A60     	 str r2,[r3]
 878              	.L21:
 247:../main.c     **** 		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 879              	 .loc 4 247 0 is_stmt 1
 880 00b8 0E4B     	 ldr r3,.L27+12
 881 00ba D3ED007A 	 flds s15,[r3]
 882 00be B8EE007A 	 fconsts s14,#128
 883 00c2 F4EEC77A 	 fcmpes s15,s14
 884 00c6 F1EE10FA 	 fmstat
 885 00ca 03D5     	 bpl .L23
 886              	 .loc 4 247 0 is_stmt 0 discriminator 1
 887 00cc 094B     	 ldr r3,.L27+12
 888 00ce 4FF04042 	 mov r2,#-1073741824
 889 00d2 1A60     	 str r2,[r3]
 890              	.L23:
 248:../main.c     **** 
 249:../main.c     **** 		CAN_new_meassage = 1;
 891              	 .loc 4 249 0 is_stmt 1
 892 00d4 084B     	 ldr r3,.L27+16
 893 00d6 0122     	 movs r2,#1
 894 00d8 1A70     	 strb r2,[r3]
 250:../main.c     **** 		CAN_no_com_counter = 0;
 895              	 .loc 4 250 0
 896 00da 084B     	 ldr r3,.L27+20
 897 00dc 0022     	 movs r2,#0
 898 00de 1A70     	 strb r2,[r3]
 251:../main.c     **** }
 899              	 .loc 4 251 0
 900 00e0 1037     	 adds r7,r7,#16
 901              	.LCFI39:
 902              	 .cfi_def_cfa_offset 8
 903 00e2 BD46     	 mov sp,r7
 904              	.LCFI40:
 905              	 .cfi_def_cfa_register 13
 906              	 
 907 00e4 80BD     	 pop {r7,pc}
 908              	.L28:
 909 00e6 00BF     	 .align 2
 910              	.L27:
 911 00e8 00000000 	 .word CAN_NODE_0
 912 00ec 00000000 	 .word Speeds_int16_r
 913 00f0 00007A44 	 .word 1148846080
 914 00f4 00000000 	 .word CAN_speed_ref
 915 00f8 00000000 	 .word CAN_new_meassage
 916 00fc 00000000 	 .word CAN_no_com_counter
 917              	 .cfi_endproc
 918              	.LFE474:
 920              	 .section .text.CAN0_0_IRQHandler,"ax",%progbits
 921              	 .align 2
 922              	 .global CAN0_0_IRQHandler
 923              	 .thumb
 924              	 .thumb_func
 926              	CAN0_0_IRQHandler:
 927              	.LFB475:
 252:../main.c     **** 
 253:../main.c     **** //CAN RX reste distance
 254:../main.c     **** void CAN_RX_MO7_ISR(void){
 928              	 .loc 4 254 0
 929              	 .cfi_startproc
 930              	 
 931              	 
 932 0000 80B5     	 push {r7,lr}
 933              	.LCFI41:
 934              	 .cfi_def_cfa_offset 8
 935              	 .cfi_offset 7,-8
 936              	 .cfi_offset 14,-4
 937 0002 84B0     	 sub sp,sp,#16
 938              	.LCFI42:
 939              	 .cfi_def_cfa_offset 24
 940 0004 00AF     	 add r7,sp,#0
 941              	.LCFI43:
 942              	 .cfi_def_cfa_register 7
 255:../main.c     **** 	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 943              	 .loc 4 255 0
 944 0006 124B     	 ldr r3,.L33
 945 0008 5B6A     	 ldr r3,[r3,#36]
 946 000a 1B68     	 ldr r3,[r3]
 947 000c BB60     	 str r3,[r7,#8]
 256:../main.c     **** 	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 948              	 .loc 4 256 0
 949 000e 104B     	 ldr r3,.L33
 950 0010 5B6A     	 ldr r3,[r3,#36]
 951 0012 1846     	 mov r0,r3
 952 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 257:../main.c     **** 
 258:../main.c     **** 	uint8_t data_r[4];
 259:../main.c     **** 	 int i;
 260:../main.c     **** 	 for(i = 0 ; i < 4 ; i ++){
 953              	 .loc 4 260 0
 954 0018 0023     	 movs r3,#0
 955 001a FB60     	 str r3,[r7,#12]
 956 001c 0CE0     	 b .L30
 957              	.L31:
 261:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 958              	 .loc 4 261 0 discriminator 3
 959 001e BA68     	 ldr r2,[r7,#8]
 960 0020 FB68     	 ldr r3,[r7,#12]
 961 0022 1344     	 add r3,r3,r2
 962 0024 1033     	 adds r3,r3,#16
 963 0026 1978     	 ldrb r1,[r3]
 964 0028 3A1D     	 adds r2,r7,#4
 965 002a FB68     	 ldr r3,[r7,#12]
 966 002c 1344     	 add r3,r3,r2
 967 002e 0A46     	 mov r2,r1
 968 0030 1A70     	 strb r2,[r3]
 260:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 969              	 .loc 4 260 0 discriminator 3
 970 0032 FB68     	 ldr r3,[r7,#12]
 971 0034 0133     	 adds r3,r3,#1
 972 0036 FB60     	 str r3,[r7,#12]
 973              	.L30:
 260:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 974              	 .loc 4 260 0 is_stmt 0 discriminator 1
 975 0038 FB68     	 ldr r3,[r7,#12]
 976 003a 032B     	 cmp r3,#3
 977 003c EFDD     	 ble .L31
 262:../main.c     **** 	 }
 263:../main.c     **** 
 264:../main.c     **** 	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 978              	 .loc 4 264 0 is_stmt 1
 979 003e FB79     	 ldrb r3,[r7,#7]
 980 0040 012B     	 cmp r3,#1
 981 0042 02D1     	 bne .L29
 982              	 .loc 4 264 0 is_stmt 0 discriminator 1
 983 0044 034B     	 ldr r3,.L33+4
 984 0046 0022     	 movs r2,#0
 985 0048 1A60     	 str r2,[r3]
 986              	.L29:
 265:../main.c     **** }
 987              	 .loc 4 265 0 is_stmt 1
 988 004a 1037     	 adds r7,r7,#16
 989              	.LCFI44:
 990              	 .cfi_def_cfa_offset 8
 991 004c BD46     	 mov sp,r7
 992              	.LCFI45:
 993              	 .cfi_def_cfa_register 13
 994              	 
 995 004e 80BD     	 pop {r7,pc}
 996              	.L34:
 997              	 .align 2
 998              	.L33:
 999 0050 00000000 	 .word CAN_NODE_0
 1000 0054 00000000 	 .word distance_180deg_ele_count
 1001              	 .cfi_endproc
 1002              	.LFE475:
 1004              	 .global __aeabi_f2d
 1005              	 .global __aeabi_dmul
 1006              	 .global __aeabi_ddiv
 1007              	 .global __aeabi_d2f
 1008              	 .global __aeabi_dadd
 1009              	 .section .text.CCU43_0_IRQHandler,"ax",%progbits
 1010              	 .align 2
 1011              	 .global CCU43_0_IRQHandler
 1012              	 .thumb
 1013              	 .thumb_func
 1015              	CCU43_0_IRQHandler:
 1016              	.LFB476:
 266:../main.c     **** 
 267:../main.c     **** void CAN_TX_ISR(void){
 1017              	 .loc 4 267 0
 1018              	 .cfi_startproc
 1019              	 
 1020              	 
 1021 0000 80B5     	 push {r7,lr}
 1022              	.LCFI46:
 1023              	 .cfi_def_cfa_offset 8
 1024              	 .cfi_offset 7,-8
 1025              	 .cfi_offset 14,-4
 1026 0002 86B0     	 sub sp,sp,#24
 1027              	.LCFI47:
 1028              	 .cfi_def_cfa_offset 32
 1029 0004 00AF     	 add r7,sp,#0
 1030              	.LCFI48:
 1031              	 .cfi_def_cfa_register 7
 268:../main.c     **** 	int16_t Inverter_state[4] = {0};
 1032              	 .loc 4 268 0
 1033 0006 0023     	 movs r3,#0
 1034 0008 FB60     	 str r3,[r7,#12]
 1035 000a 0023     	 movs r3,#0
 1036 000c 3B61     	 str r3,[r7,#16]
 269:../main.c     **** 
 270:../main.c     **** 	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 1037              	 .loc 4 270 0
 1038 000e 0323     	 movs r3,#3
 1039 0010 BB81     	 strh r3,[r7,#12]
 271:../main.c     **** 
 272:../main.c     **** 	if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
 1040              	 .loc 4 272 0
 1041 0012 4D4B     	 ldr r3,.L38+16
 1042 0014 1B78     	 ldrb r3,[r3]
 1043 0016 FA2B     	 cmp r3,#250
 1044 0018 02D9     	 bls .L36
 1045              	 .loc 4 272 0 is_stmt 0 discriminator 1
 1046 001a 0023     	 movs r3,#0
 1047 001c BB81     	 strh r3,[r7,#12]
 1048 001e 01E0     	 b .L37
 1049              	.L36:
 273:../main.c     **** 	else Inverter_state[1] = 1;
 1050              	 .loc 4 273 0 is_stmt 1
 1051 0020 0123     	 movs r3,#1
 1052 0022 FB81     	 strh r3,[r7,#14]
 1053              	.L37:
 274:../main.c     **** 
 275:../main.c     **** 	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 1054              	 .loc 4 275 0
 1055 0024 494B     	 ldr r3,.L38+20
 1056 0026 1B68     	 ldr r3,[r3]
 1057 0028 1846     	 mov r0,r3
 1058 002a FFF7FEFF 	 bl __aeabi_f2d
 1059 002e 0246     	 mov r2,r0
 1060 0030 0B46     	 mov r3,r1
 1061 0032 1046     	 mov r0,r2
 1062 0034 1946     	 mov r1,r3
 1063 0036 40A3     	 adr r3,.L38
 1064 0038 D3E90023 	 ldrd r2,[r3]
 1065 003c FFF7FEFF 	 bl __aeabi_dmul
 1066 0040 0246     	 mov r2,r0
 1067 0042 0B46     	 mov r3,r1
 1068 0044 1046     	 mov r0,r2
 1069 0046 1946     	 mov r1,r3
 1070 0048 4FF00002 	 mov r2,#0
 1071 004c 404B     	 ldr r3,.L38+24
 1072 004e FFF7FEFF 	 bl __aeabi_ddiv
 1073 0052 0246     	 mov r2,r0
 1074 0054 0B46     	 mov r3,r1
 1075 0056 1046     	 mov r0,r2
 1076 0058 1946     	 mov r1,r3
 1077 005a FFF7FEFF 	 bl __aeabi_d2f
 1078 005e 0246     	 mov r2,r0
 1079 0060 3C4B     	 ldr r3,.L38+28
 1080 0062 1A60     	 str r2,[r3]
 276:../main.c     **** 	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
 277:../main.c     **** 	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 1081              	 .loc 4 277 0
 1082 0064 3B4B     	 ldr r3,.L38+28
 1083 0066 D3ED007A 	 flds s15,[r3]
 1084 006a 9FED3B7A 	 flds s14,.L38+32
 1085 006e 67EE877A 	 fmuls s15,s15,s14
 1086 0072 FDEEE77A 	 ftosizs s15,s15
 1087 0076 C7ED017A 	 fsts s15,[r7,#4]
 1088 007a BB88     	 ldrh r3,[r7,#4]
 1089 007c 9BB2     	 uxth r3,r3
 1090 007e 3B82     	 strh r3,[r7,#16]
 278:../main.c     **** 
 279:../main.c     **** 	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 1091              	 .loc 4 279 0
 1092 0080 364B     	 ldr r3,.L38+36
 1093 0082 1B68     	 ldr r3,[r3]
 1094 0084 07EE903A 	 fmsr s15,r3
 1095 0088 F8EEE77A 	 fsitos s15,s15
 1096 008c B0EE007A 	 fconsts s14,#0
 1097 0090 C7EE877A 	 fdivs s15,s15,s14
 1098 0094 B2EE067A 	 fconsts s14,#38
 1099 0098 C7EE877A 	 fdivs s15,s15,s14
 1100 009c 17EE900A 	 fmrs r0,s15
 1101 00a0 FFF7FEFF 	 bl __aeabi_f2d
 1102 00a4 0246     	 mov r2,r0
 1103 00a6 0B46     	 mov r3,r1
 1104 00a8 1046     	 mov r0,r2
 1105 00aa 1946     	 mov r1,r3
 1106 00ac 24A3     	 adr r3,.L38+8
 1107 00ae D3E90023 	 ldrd r2,[r3]
 1108 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1109 00b6 0246     	 mov r2,r0
 1110 00b8 0B46     	 mov r3,r1
 1111 00ba 1046     	 mov r0,r2
 1112 00bc 1946     	 mov r1,r3
 1113 00be FFF7FEFF 	 bl __aeabi_dadd
 1114 00c2 0246     	 mov r2,r0
 1115 00c4 0B46     	 mov r3,r1
 1116 00c6 1046     	 mov r0,r2
 1117 00c8 1946     	 mov r1,r3
 1118 00ca 1BA3     	 adr r3,.L38
 1119 00cc D3E90023 	 ldrd r2,[r3]
 1120 00d0 FFF7FEFF 	 bl __aeabi_dmul
 1121 00d4 0246     	 mov r2,r0
 1122 00d6 0B46     	 mov r3,r1
 1123 00d8 1046     	 mov r0,r2
 1124 00da 1946     	 mov r1,r3
 1125 00dc FFF7FEFF 	 bl __aeabi_d2f
 1126 00e0 0246     	 mov r2,r0
 1127 00e2 1F4B     	 ldr r3,.L38+40
 1128 00e4 1A60     	 str r2,[r3]
 280:../main.c     **** 	if(MOTOR_NUM == 6) distance = -distance;
 281:../main.c     **** 	Inverter_state[3] = distance * 1000; // to mm
 1129              	 .loc 4 281 0
 1130 00e6 1E4B     	 ldr r3,.L38+40
 1131 00e8 D3ED007A 	 flds s15,[r3]
 1132 00ec 9FED1A7A 	 flds s14,.L38+32
 1133 00f0 67EE877A 	 fmuls s15,s15,s14
 1134 00f4 FDEEE77A 	 ftosizs s15,s15
 1135 00f8 C7ED017A 	 fsts s15,[r7,#4]
 1136 00fc BB88     	 ldrh r3,[r7,#4]
 1137 00fe 9BB2     	 uxth r3,r3
 1138 0100 7B82     	 strh r3,[r7,#18]
 282:../main.c     **** 
 283:../main.c     **** 	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 1139              	 .loc 4 283 0
 1140 0102 0523     	 movs r3,#5
 1141 0104 FB75     	 strb r3,[r7,#23]
 284:../main.c     **** 	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 1142              	 .loc 4 284 0
 1143 0106 FB7D     	 ldrb r3,[r7,#23]
 1144 0108 164A     	 ldr r2,.L38+44
 1145 010a 0233     	 adds r3,r3,#2
 1146 010c 9B00     	 lsls r3,r3,#2
 1147 010e 1344     	 add r3,r3,r2
 1148 0110 5A68     	 ldr r2,[r3,#4]
 1149 0112 07F10C03 	 add r3,r7,#12
 1150 0116 1046     	 mov r0,r2
 1151 0118 1946     	 mov r1,r3
 1152 011a FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
 285:../main.c     **** 	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 1153              	 .loc 4 285 0
 1154 011e FB7D     	 ldrb r3,[r7,#23]
 1155 0120 104A     	 ldr r2,.L38+44
 1156 0122 0233     	 adds r3,r3,#2
 1157 0124 9B00     	 lsls r3,r3,#2
 1158 0126 1344     	 add r3,r3,r2
 1159 0128 5B68     	 ldr r3,[r3,#4]
 1160 012a 1846     	 mov r0,r3
 1161 012c FFF7FEFF 	 bl CAN_NODE_MO_Transmit
 286:../main.c     **** }
 1162              	 .loc 4 286 0
 1163 0130 1837     	 adds r7,r7,#24
 1164              	.LCFI49:
 1165              	 .cfi_def_cfa_offset 8
 1166 0132 BD46     	 mov sp,r7
 1167              	.LCFI50:
 1168              	 .cfi_def_cfa_register 13
 1169              	 
 1170 0134 80BD     	 pop {r7,pc}
 1171              	.L39:
 1172 0136 00BF     	 .align 3
 1173              	.L38:
 1174 0138 48E17A14 	 .word 343597384
 1175 013c AE47B13F 	 .word 1068582830
 1176 0140 F1D4C853 	 .word 1405670641
 1177 0144 FB210940 	 .word 1074340347
 1178 0148 00000000 	 .word CAN_no_com_counter
 1179 014c 00000000 	 .word omega_ele_rads
 1180 0150 00002640 	 .word 1076232192
 1181 0154 00000000 	 .word Speed_act
 1182 0158 00007A44 	 .word 1148846080
 1183 015c 00000000 	 .word distance_180deg_ele_count
 1184 0160 00000000 	 .word distance
 1185 0164 00000000 	 .word CAN_NODE_0
 1186              	 .cfi_endproc
 1187              	.LFE476:
 1189              	 .section .text.CCU43_3_IRQHandler,"ax",%progbits
 1190              	 .align 2
 1191              	 .global CCU43_3_IRQHandler
 1192              	 .thumb
 1193              	 .thumb_func
 1195              	CCU43_3_IRQHandler:
 1196              	.LFB477:
 287:../main.c     **** 
 288:../main.c     **** // 100us Timer for speed measurement
 289:../main.c     **** void TimeCounterISR(void){
 1197              	 .loc 4 289 0
 1198              	 .cfi_startproc
 1199              	 
 1200              	 
 1201              	 
 1202 0000 80B4     	 push {r7}
 1203              	.LCFI51:
 1204              	 .cfi_def_cfa_offset 4
 1205              	 .cfi_offset 7,-4
 1206 0002 00AF     	 add r7,sp,#0
 1207              	.LCFI52:
 1208              	 .cfi_def_cfa_register 7
 290:../main.c     **** 	time_since_A ++;
 1209              	 .loc 4 290 0
 1210 0004 094B     	 ldr r3,.L41
 1211 0006 1B68     	 ldr r3,[r3]
 1212 0008 0133     	 adds r3,r3,#1
 1213 000a 084A     	 ldr r2,.L41
 1214 000c 1360     	 str r3,[r2]
 291:../main.c     **** 	time_since_B ++;
 1215              	 .loc 4 291 0
 1216 000e 084B     	 ldr r3,.L41+4
 1217 0010 1B68     	 ldr r3,[r3]
 1218 0012 0133     	 adds r3,r3,#1
 1219 0014 064A     	 ldr r2,.L41+4
 1220 0016 1360     	 str r3,[r2]
 292:../main.c     **** 	time_since_C ++;
 1221              	 .loc 4 292 0
 1222 0018 064B     	 ldr r3,.L41+8
 1223 001a 1B68     	 ldr r3,[r3]
 1224 001c 0133     	 adds r3,r3,#1
 1225 001e 054A     	 ldr r2,.L41+8
 1226 0020 1360     	 str r3,[r2]
 293:../main.c     **** }
 1227              	 .loc 4 293 0
 1228 0022 BD46     	 mov sp,r7
 1229              	.LCFI53:
 1230              	 .cfi_def_cfa_register 13
 1231              	 
 1232 0024 5DF8047B 	 ldr r7,[sp],#4
 1233              	.LCFI54:
 1234              	 .cfi_restore 7
 1235              	 .cfi_def_cfa_offset 0
 1236 0028 7047     	 bx lr
 1237              	.L42:
 1238 002a 00BF     	 .align 2
 1239              	.L41:
 1240 002c 00000000 	 .word time_since_A
 1241 0030 00000000 	 .word time_since_B
 1242 0034 00000000 	 .word time_since_C
 1243              	 .cfi_endproc
 1244              	.LFE477:
 1246              	 .section .text.ERU1_2_IRQHandler,"ax",%progbits
 1247              	 .align 2
 1248              	 .global ERU1_2_IRQHandler
 1249              	 .thumb
 1250              	 .thumb_func
 1252              	ERU1_2_IRQHandler:
 1253              	.LFB478:
 294:../main.c     **** 
 295:../main.c     **** // Hall Sensors
 296:../main.c     **** void HallSensor_A_ISR(void){
 1254              	 .loc 4 296 0
 1255              	 .cfi_startproc
 1256              	 
 1257              	 
 1258 0000 80B5     	 push {r7,lr}
 1259              	.LCFI55:
 1260              	 .cfi_def_cfa_offset 8
 1261              	 .cfi_offset 7,-8
 1262              	 .cfi_offset 14,-4
 1263 0002 00AF     	 add r7,sp,#0
 1264              	.LCFI56:
 1265              	 .cfi_def_cfa_register 7
 297:../main.c     **** 	HallSensor();
 1266              	 .loc 4 297 0
 1267 0004 FFF7FEFF 	 bl HallSensor
 298:../main.c     **** 	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
 1268              	 .loc 4 298 0
 1269 0008 114B     	 ldr r3,.L46
 1270 000a 1B68     	 ldr r3,[r3]
 1271 000c 114A     	 ldr r2,.L46+4
 1272 000e 1360     	 str r3,[r2]
 299:../main.c     **** 	time_since_A = 0;						// measurement of speed -> time between change of Hall A
 1273              	 .loc 4 299 0
 1274 0010 0F4B     	 ldr r3,.L46
 1275 0012 0022     	 movs r2,#0
 1276 0014 1A60     	 str r2,[r3]
 300:../main.c     **** 	last_Hall_trig = 'A';
 1277              	 .loc 4 300 0
 1278 0016 104B     	 ldr r3,.L46+8
 1279 0018 4122     	 movs r2,#65
 1280 001a 1A70     	 strb r2,[r3]
 301:../main.c     **** 
 302:../main.c     **** 	if(direction == 1 ) distance_180deg_ele_count ++;
 1281              	 .loc 4 302 0
 1282 001c 0F4B     	 ldr r3,.L46+12
 1283 001e 1B78     	 ldrb r3,[r3]
 1284 0020 DBB2     	 uxtb r3,r3
 1285 0022 5BB2     	 sxtb r3,r3
 1286 0024 012B     	 cmp r3,#1
 1287 0026 05D1     	 bne .L44
 1288              	 .loc 4 302 0 is_stmt 0 discriminator 1
 1289 0028 0D4B     	 ldr r3,.L46+16
 1290 002a 1B68     	 ldr r3,[r3]
 1291 002c 0133     	 adds r3,r3,#1
 1292 002e 0C4A     	 ldr r2,.L46+16
 1293 0030 1360     	 str r3,[r2]
 1294 0032 0BE0     	 b .L43
 1295              	.L44:
 303:../main.c     **** 	else if(direction == -1 ) distance_180deg_ele_count --;
 1296              	 .loc 4 303 0 is_stmt 1
 1297 0034 094B     	 ldr r3,.L46+12
 1298 0036 1B78     	 ldrb r3,[r3]
 1299 0038 DBB2     	 uxtb r3,r3
 1300 003a 5BB2     	 sxtb r3,r3
 1301 003c B3F1FF3F 	 cmp r3,#-1
 1302 0040 04D1     	 bne .L43
 1303              	 .loc 4 303 0 is_stmt 0 discriminator 1
 1304 0042 074B     	 ldr r3,.L46+16
 1305 0044 1B68     	 ldr r3,[r3]
 1306 0046 013B     	 subs r3,r3,#1
 1307 0048 054A     	 ldr r2,.L46+16
 1308 004a 1360     	 str r3,[r2]
 1309              	.L43:
 304:../main.c     **** }
 1310              	 .loc 4 304 0 is_stmt 1
 1311 004c 80BD     	 pop {r7,pc}
 1312              	.L47:
 1313 004e 00BF     	 .align 2
 1314              	.L46:
 1315 0050 00000000 	 .word time_since_A
 1316 0054 00000000 	 .word time_180deg
 1317 0058 00000000 	 .word last_Hall_trig
 1318 005c 00000000 	 .word direction
 1319 0060 00000000 	 .word distance_180deg_ele_count
 1320              	 .cfi_endproc
 1321              	.LFE478:
 1323              	 .section .text.ERU1_0_IRQHandler,"ax",%progbits
 1324              	 .align 2
 1325              	 .global ERU1_0_IRQHandler
 1326              	 .thumb
 1327              	 .thumb_func
 1329              	ERU1_0_IRQHandler:
 1330              	.LFB479:
 305:../main.c     **** void HallSensor_B_ISR(void){
 1331              	 .loc 4 305 0
 1332              	 .cfi_startproc
 1333              	 
 1334              	 
 1335 0000 80B5     	 push {r7,lr}
 1336              	.LCFI57:
 1337              	 .cfi_def_cfa_offset 8
 1338              	 .cfi_offset 7,-8
 1339              	 .cfi_offset 14,-4
 1340 0002 00AF     	 add r7,sp,#0
 1341              	.LCFI58:
 1342              	 .cfi_def_cfa_register 7
 306:../main.c     **** 	HallSensor();
 1343              	 .loc 4 306 0
 1344 0004 FFF7FEFF 	 bl HallSensor
 307:../main.c     **** 	time_180deg = time_since_B;
 1345              	 .loc 4 307 0
 1346 0008 054B     	 ldr r3,.L49
 1347 000a 1B68     	 ldr r3,[r3]
 1348 000c 054A     	 ldr r2,.L49+4
 1349 000e 1360     	 str r3,[r2]
 308:../main.c     **** 	time_since_B = 0;
 1350              	 .loc 4 308 0
 1351 0010 034B     	 ldr r3,.L49
 1352 0012 0022     	 movs r2,#0
 1353 0014 1A60     	 str r2,[r3]
 309:../main.c     **** 	last_Hall_trig = 'B';
 1354              	 .loc 4 309 0
 1355 0016 044B     	 ldr r3,.L49+8
 1356 0018 4222     	 movs r2,#66
 1357 001a 1A70     	 strb r2,[r3]
 310:../main.c     **** }
 1358              	 .loc 4 310 0
 1359 001c 80BD     	 pop {r7,pc}
 1360              	.L50:
 1361 001e 00BF     	 .align 2
 1362              	.L49:
 1363 0020 00000000 	 .word time_since_B
 1364 0024 00000000 	 .word time_180deg
 1365 0028 00000000 	 .word last_Hall_trig
 1366              	 .cfi_endproc
 1367              	.LFE479:
 1369              	 .section .text.ERU1_3_IRQHandler,"ax",%progbits
 1370              	 .align 2
 1371              	 .global ERU1_3_IRQHandler
 1372              	 .thumb
 1373              	 .thumb_func
 1375              	ERU1_3_IRQHandler:
 1376              	.LFB480:
 311:../main.c     **** void HallSensor_C_ISR(void){
 1377              	 .loc 4 311 0
 1378              	 .cfi_startproc
 1379              	 
 1380              	 
 1381 0000 80B5     	 push {r7,lr}
 1382              	.LCFI59:
 1383              	 .cfi_def_cfa_offset 8
 1384              	 .cfi_offset 7,-8
 1385              	 .cfi_offset 14,-4
 1386 0002 00AF     	 add r7,sp,#0
 1387              	.LCFI60:
 1388              	 .cfi_def_cfa_register 7
 312:../main.c     **** 	HallSensor();
 1389              	 .loc 4 312 0
 1390 0004 FFF7FEFF 	 bl HallSensor
 313:../main.c     **** 	time_180deg = time_since_C;
 1391              	 .loc 4 313 0
 1392 0008 054B     	 ldr r3,.L52
 1393 000a 1B68     	 ldr r3,[r3]
 1394 000c 054A     	 ldr r2,.L52+4
 1395 000e 1360     	 str r3,[r2]
 314:../main.c     **** 	time_since_C = 0;
 1396              	 .loc 4 314 0
 1397 0010 034B     	 ldr r3,.L52
 1398 0012 0022     	 movs r2,#0
 1399 0014 1A60     	 str r2,[r3]
 315:../main.c     **** 	last_Hall_trig = 'C';
 1400              	 .loc 4 315 0
 1401 0016 044B     	 ldr r3,.L52+8
 1402 0018 4322     	 movs r2,#67
 1403 001a 1A70     	 strb r2,[r3]
 316:../main.c     **** }
 1404              	 .loc 4 316 0
 1405 001c 80BD     	 pop {r7,pc}
 1406              	.L53:
 1407 001e 00BF     	 .align 2
 1408              	.L52:
 1409 0020 00000000 	 .word time_since_C
 1410 0024 00000000 	 .word time_180deg
 1411 0028 00000000 	 .word last_Hall_trig
 1412              	 .cfi_endproc
 1413              	.LFE480:
 1415              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 1416              	 .align 2
 1417              	 .global CCU43_1_IRQHandler
 1418              	 .thumb
 1419              	 .thumb_func
 1421              	CCU43_1_IRQHandler:
 1422              	.LFB481:
 317:../main.c     **** 
 318:../main.c     **** /*
 319:../main.c     **** // Turn off driver at Overcurrent
 320:../main.c     **** void OverCurrent_U_ISR(void)
 321:../main.c     **** {
 322:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 323:../main.c     **** }
 324:../main.c     **** void OverCurrent_V_ISR(void)
 325:../main.c     **** {
 326:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 327:../main.c     **** }
 328:../main.c     **** void OverCurrent_W_ISR(void)
 329:../main.c     **** {
 330:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 331:../main.c     **** }
 332:../main.c     **** */
 333:../main.c     **** 
 334:../main.c     **** //ISR based on Timer_1 --> 100us time base
 335:../main.c     **** void ISR_INT1(void)
 336:../main.c     **** {
 1423              	 .loc 4 336 0
 1424              	 .cfi_startproc
 1425              	 
 1426              	 
 1427              	 
 1428 0000 80B4     	 push {r7}
 1429              	.LCFI61:
 1430              	 .cfi_def_cfa_offset 4
 1431              	 .cfi_offset 7,-4
 1432 0002 00AF     	 add r7,sp,#0
 1433              	.LCFI62:
 1434              	 .cfi_def_cfa_register 7
 337:../main.c     **** }
 1435              	 .loc 4 337 0
 1436 0004 BD46     	 mov sp,r7
 1437              	.LCFI63:
 1438              	 .cfi_def_cfa_register 13
 1439              	 
 1440 0006 5DF8047B 	 ldr r7,[sp],#4
 1441              	.LCFI64:
 1442              	 .cfi_restore 7
 1443              	 .cfi_def_cfa_offset 0
 1444 000a 7047     	 bx lr
 1445              	 .cfi_endproc
 1446              	.LFE481:
 1448              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 1449              	 .align 2
 1450              	 .global CCU80_3_IRQHandler
 1451              	 .thumb
 1452              	 .thumb_func
 1454              	CCU80_3_IRQHandler:
 1455              	.LFB482:
 338:../main.c     **** 
 339:../main.c     **** // ISR for Updating the SVM PWM -> 50us = 20kHz
 340:../main.c     **** void PeriodMatchInterruptHandler(void)
 341:../main.c     **** {
 1456              	 .loc 4 341 0
 1457              	 .cfi_startproc
 1458              	 
 1459              	 
 1460 0000 80B5     	 push {r7,lr}
 1461              	.LCFI65:
 1462              	 .cfi_def_cfa_offset 8
 1463              	 .cfi_offset 7,-8
 1464              	 .cfi_offset 14,-4
 1465 0002 82B0     	 sub sp,sp,#8
 1466              	.LCFI66:
 1467              	 .cfi_def_cfa_offset 16
 1468 0004 00AF     	 add r7,sp,#0
 1469              	.LCFI67:
 1470              	 .cfi_def_cfa_register 7
 342:../main.c     **** 	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 1471              	 .loc 4 342 0
 1472 0006 144B     	 ldr r3,.L57
 1473 0008 1B78     	 ldrb r3,[r3]
 1474 000a DBB2     	 uxtb r3,r3
 1475 000c 0133     	 adds r3,r3,#1
 1476 000e DAB2     	 uxtb r2,r3
 1477 0010 114B     	 ldr r3,.L57
 1478 0012 1A70     	 strb r2,[r3]
 343:../main.c     **** 	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 1479              	 .loc 4 343 0
 1480 0014 104B     	 ldr r3,.L57
 1481 0016 1B78     	 ldrb r3,[r3]
 1482 0018 DBB2     	 uxtb r3,r3
 1483 001a 012B     	 cmp r3,#1
 1484 001c 18D1     	 bne .L55
 344:../main.c     **** 		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_D
 1485              	 .loc 4 344 0
 1486 001e 0F4B     	 ldr r3,.L57+4
 1487 0020 D3ED007A 	 flds s15,[r3]
 1488 0024 FCEEE77A 	 ftouizs s15,s15
 1489 0028 C7ED017A 	 fsts s15,[r7,#4]
 1490 002c BB88     	 ldrh r3,[r7,#4]
 1491 002e 9AB2     	 uxth r2,r3
 1492 0030 0B4B     	 ldr r3,.L57+8
 1493 0032 D3ED007A 	 flds s15,[r3]
 1494 0036 FCEEE77A 	 ftouizs s15,s15
 1495 003a 17EE901A 	 fmrs r1,s15
 1496 003e 4BF20B63 	 movw r3,#46603
 1497 0042 03FB01F3 	 mul r3,r3,r1
 1498 0046 0748     	 ldr r0,.L57+12
 1499 0048 1146     	 mov r1,r2
 1500 004a 1A46     	 mov r2,r3
 1501 004c FFF7FEFF 	 bl PWM_SVM_SVMUpdate
 1502              	.L55:
 345:../main.c     **** 	}
 346:../main.c     **** }
 1503              	 .loc 4 346 0
 1504 0050 0837     	 adds r7,r7,#8
 1505              	.LCFI68:
 1506              	 .cfi_def_cfa_offset 8
 1507 0052 BD46     	 mov sp,r7
 1508              	.LCFI69:
 1509              	 .cfi_def_cfa_register 13
 1510              	 
 1511 0054 80BD     	 pop {r7,pc}
 1512              	.L58:
 1513 0056 00BF     	 .align 2
 1514              	.L57:
 1515 0058 00000000 	 .word count
 1516 005c 00000000 	 .word modulation_index_scaled
 1517 0060 00000000 	 .word angle_ab
 1518 0064 00000000 	 .word PWM_SVM_0
 1519              	 .cfi_endproc
 1520              	.LFE482:
 1522              	 .section .text.Hall_init,"ax",%progbits
 1523              	 .align 2
 1524              	 .global Hall_init
 1525              	 .thumb
 1526              	 .thumb_func
 1528              	Hall_init:
 1529              	.LFB483:
 347:../main.c     **** 
 348:../main.c     **** //########################
 349:../main.c     **** // FUNCTIONS
 350:../main.c     **** //########################
 351:../main.c     **** 
 352:../main.c     **** // Hall init -> readout of actual Hall pattern to determine the motor position
 353:../main.c     **** void Hall_init(void){
 1530              	 .loc 4 353 0
 1531              	 .cfi_startproc
 1532              	 
 1533              	 
 1534 0000 90B5     	 push {r4,r7,lr}
 1535              	.LCFI70:
 1536              	 .cfi_def_cfa_offset 12
 1537              	 .cfi_offset 4,-12
 1538              	 .cfi_offset 7,-8
 1539              	 .cfi_offset 14,-4
 1540 0002 83B0     	 sub sp,sp,#12
 1541              	.LCFI71:
 1542              	 .cfi_def_cfa_offset 24
 1543 0004 00AF     	 add r7,sp,#0
 1544              	.LCFI72:
 1545              	 .cfi_def_cfa_register 7
 354:../main.c     **** 
 355:../main.c     **** 	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinV
 1546              	 .loc 4 355 0
 1547 0006 2148     	 ldr r0,.L66
 1548 0008 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1549 000c 0346     	 mov r3,r0
 1550 000e DBB2     	 uxtb r3,r3
 1551 0010 5B00     	 lsls r3,r3,#1
 1552 0012 DCB2     	 uxtb r4,r3
 1553 0014 1E48     	 ldr r0,.L66+4
 1554 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1555 001a 0346     	 mov r3,r0
 1556 001c DBB2     	 uxtb r3,r3
 1557 001e 2343     	 orrs r3,r3,r4
 1558 0020 DBB2     	 uxtb r3,r3
 1559 0022 5B00     	 lsls r3,r3,#1
 1560 0024 DCB2     	 uxtb r4,r3
 1561 0026 1B48     	 ldr r0,.L66+8
 1562 0028 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1563 002c 0346     	 mov r3,r0
 1564 002e DBB2     	 uxtb r3,r3
 1565 0030 2343     	 orrs r3,r3,r4
 1566 0032 FB71     	 strb r3,[r7,#7]
 356:../main.c     **** 
 357:../main.c     **** 	 if(Hall_Initial == 0b100){sector = 0;}
 1567              	 .loc 4 357 0
 1568 0034 FB79     	 ldrb r3,[r7,#7]
 1569 0036 042B     	 cmp r3,#4
 1570 0038 03D1     	 bne .L60
 1571              	 .loc 4 357 0 is_stmt 0 discriminator 1
 1572 003a 174B     	 ldr r3,.L66+12
 1573 003c 0022     	 movs r2,#0
 1574 003e 1A70     	 strb r2,[r3]
 1575 0040 21E0     	 b .L59
 1576              	.L60:
 358:../main.c     **** 	 else if(Hall_Initial == 0b110){sector = 1;}
 1577              	 .loc 4 358 0 is_stmt 1
 1578 0042 FB79     	 ldrb r3,[r7,#7]
 1579 0044 062B     	 cmp r3,#6
 1580 0046 03D1     	 bne .L62
 1581              	 .loc 4 358 0 is_stmt 0 discriminator 1
 1582 0048 134B     	 ldr r3,.L66+12
 1583 004a 0122     	 movs r2,#1
 1584 004c 1A70     	 strb r2,[r3]
 1585 004e 1AE0     	 b .L59
 1586              	.L62:
 359:../main.c     **** 	 else if(Hall_Initial == 0b010){sector = 2;}
 1587              	 .loc 4 359 0 is_stmt 1
 1588 0050 FB79     	 ldrb r3,[r7,#7]
 1589 0052 022B     	 cmp r3,#2
 1590 0054 03D1     	 bne .L63
 1591              	 .loc 4 359 0 is_stmt 0 discriminator 1
 1592 0056 104B     	 ldr r3,.L66+12
 1593 0058 0222     	 movs r2,#2
 1594 005a 1A70     	 strb r2,[r3]
 1595 005c 13E0     	 b .L59
 1596              	.L63:
 360:../main.c     **** 	 else if(Hall_Initial == 0b011){sector = 3;}
 1597              	 .loc 4 360 0 is_stmt 1
 1598 005e FB79     	 ldrb r3,[r7,#7]
 1599 0060 032B     	 cmp r3,#3
 1600 0062 03D1     	 bne .L64
 1601              	 .loc 4 360 0 is_stmt 0 discriminator 1
 1602 0064 0C4B     	 ldr r3,.L66+12
 1603 0066 0322     	 movs r2,#3
 1604 0068 1A70     	 strb r2,[r3]
 1605 006a 0CE0     	 b .L59
 1606              	.L64:
 361:../main.c     **** 	 else if(Hall_Initial == 0b001){sector = 4;}
 1607              	 .loc 4 361 0 is_stmt 1
 1608 006c FB79     	 ldrb r3,[r7,#7]
 1609 006e 012B     	 cmp r3,#1
 1610 0070 03D1     	 bne .L65
 1611              	 .loc 4 361 0 is_stmt 0 discriminator 1
 1612 0072 094B     	 ldr r3,.L66+12
 1613 0074 0422     	 movs r2,#4
 1614 0076 1A70     	 strb r2,[r3]
 1615 0078 05E0     	 b .L59
 1616              	.L65:
 362:../main.c     **** 	 else if(Hall_Initial == 0b101){sector = 5;}
 1617              	 .loc 4 362 0 is_stmt 1
 1618 007a FB79     	 ldrb r3,[r7,#7]
 1619 007c 052B     	 cmp r3,#5
 1620 007e 02D1     	 bne .L59
 1621              	 .loc 4 362 0 is_stmt 0 discriminator 1
 1622 0080 054B     	 ldr r3,.L66+12
 1623 0082 0522     	 movs r2,#5
 1624 0084 1A70     	 strb r2,[r3]
 1625              	.L59:
 363:../main.c     **** }
 1626              	 .loc 4 363 0 is_stmt 1
 1627 0086 0C37     	 adds r7,r7,#12
 1628              	.LCFI73:
 1629              	 .cfi_def_cfa_offset 12
 1630 0088 BD46     	 mov sp,r7
 1631              	.LCFI74:
 1632              	 .cfi_def_cfa_register 13
 1633              	 
 1634 008a 90BD     	 pop {r4,r7,pc}
 1635              	.L67:
 1636              	 .align 2
 1637              	.L66:
 1638 008c 00000000 	 .word Hall_A_ISR
 1639 0090 00000000 	 .word Hall_B_ISR
 1640 0094 00000000 	 .word Hall_C_ISR
 1641 0098 00000000 	 .word sector
 1642              	 .cfi_endproc
 1643              	.LFE483:
 1645              	 .section .text.HallSensor,"ax",%progbits
 1646              	 .align 2
 1647              	 .global HallSensor
 1648              	 .thumb
 1649              	 .thumb_func
 1651              	HallSensor:
 1652              	.LFB484:
 364:../main.c     **** 
 365:../main.c     **** // Function to determine direction and current Sector
 366:../main.c     **** void HallSensor(void){
 1653              	 .loc 4 366 0
 1654              	 .cfi_startproc
 1655              	 
 1656              	 
 1657 0000 90B5     	 push {r4,r7,lr}
 1658              	.LCFI75:
 1659              	 .cfi_def_cfa_offset 12
 1660              	 .cfi_offset 4,-12
 1661              	 .cfi_offset 7,-8
 1662              	 .cfi_offset 14,-4
 1663 0002 83B0     	 sub sp,sp,#12
 1664              	.LCFI76:
 1665              	 .cfi_def_cfa_offset 24
 1666 0004 00AF     	 add r7,sp,#0
 1667              	.LCFI77:
 1668              	 .cfi_def_cfa_register 7
 367:../main.c     **** 	enc_val = enc_val << 3; //shift old values and make space for new ones
 1669              	 .loc 4 367 0
 1670 0006 2E4B     	 ldr r3,.L75
 1671 0008 1B88     	 ldrh r3,[r3]
 1672 000a 9BB2     	 uxth r3,r3
 1673 000c DB00     	 lsls r3,r3,#3
 1674 000e 9AB2     	 uxth r2,r3
 1675 0010 2B4B     	 ldr r3,.L75
 1676 0012 1A80     	 strh r2,[r3]
 368:../main.c     **** 	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(
 1677              	 .loc 4 368 0
 1678 0014 2B48     	 ldr r0,.L75+4
 1679 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1680 001a 0346     	 mov r3,r0
 1681 001c DBB2     	 uxtb r3,r3
 1682 001e 5B00     	 lsls r3,r3,#1
 1683 0020 DCB2     	 uxtb r4,r3
 1684 0022 2948     	 ldr r0,.L75+8
 1685 0024 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1686 0028 0346     	 mov r3,r0
 1687 002a DBB2     	 uxtb r3,r3
 1688 002c 2343     	 orrs r3,r3,r4
 1689 002e DBB2     	 uxtb r3,r3
 1690 0030 5B00     	 lsls r3,r3,#1
 1691 0032 DCB2     	 uxtb r4,r3
 1692 0034 2548     	 ldr r0,.L75+12
 1693 0036 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1694 003a 0346     	 mov r3,r0
 1695 003c DBB2     	 uxtb r3,r3
 1696 003e 2343     	 orrs r3,r3,r4
 1697 0040 FB71     	 strb r3,[r7,#7]
 369:../main.c     **** 	enc_val = enc_val | Hall_status; //read Sensor values and store them
 1698              	 .loc 4 369 0
 1699 0042 FB79     	 ldrb r3,[r7,#7]
 1700 0044 9AB2     	 uxth r2,r3
 1701 0046 1E4B     	 ldr r3,.L75
 1702 0048 1B88     	 ldrh r3,[r3]
 1703 004a 9BB2     	 uxth r3,r3
 1704 004c 1343     	 orrs r3,r3,r2
 1705 004e 9AB2     	 uxth r2,r3
 1706 0050 1B4B     	 ldr r3,.L75
 1707 0052 1A80     	 strh r2,[r3]
 370:../main.c     **** 	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual an
 1708              	 .loc 4 370 0
 1709 0054 1A4B     	 ldr r3,.L75
 1710 0056 1B88     	 ldrh r3,[r3]
 1711 0058 9BB2     	 uxth r3,r3
 1712 005a 03F03F03 	 and r3,r3,#63
 1713 005e 1C4A     	 ldr r2,.L75+16
 1714 0060 D25C     	 ldrb r2,[r2,r3]
 1715 0062 1C4B     	 ldr r3,.L75+20
 1716 0064 1A70     	 strb r2,[r3]
 371:../main.c     **** 
 372:../main.c     **** 	if(Hall_status == 0b100){sector = 0;}
 1717              	 .loc 4 372 0
 1718 0066 FB79     	 ldrb r3,[r7,#7]
 1719 0068 042B     	 cmp r3,#4
 1720 006a 03D1     	 bne .L69
 1721              	 .loc 4 372 0 is_stmt 0 discriminator 1
 1722 006c 1A4B     	 ldr r3,.L75+24
 1723 006e 0022     	 movs r2,#0
 1724 0070 1A70     	 strb r2,[r3]
 1725 0072 21E0     	 b .L68
 1726              	.L69:
 373:../main.c     **** 		 else if(Hall_status == 0b110){sector = 1;}
 1727              	 .loc 4 373 0 is_stmt 1
 1728 0074 FB79     	 ldrb r3,[r7,#7]
 1729 0076 062B     	 cmp r3,#6
 1730 0078 03D1     	 bne .L71
 1731              	 .loc 4 373 0 is_stmt 0 discriminator 1
 1732 007a 174B     	 ldr r3,.L75+24
 1733 007c 0122     	 movs r2,#1
 1734 007e 1A70     	 strb r2,[r3]
 1735 0080 1AE0     	 b .L68
 1736              	.L71:
 374:../main.c     **** 		 else if(Hall_status == 0b010){sector = 2;}
 1737              	 .loc 4 374 0 is_stmt 1
 1738 0082 FB79     	 ldrb r3,[r7,#7]
 1739 0084 022B     	 cmp r3,#2
 1740 0086 03D1     	 bne .L72
 1741              	 .loc 4 374 0 is_stmt 0 discriminator 1
 1742 0088 134B     	 ldr r3,.L75+24
 1743 008a 0222     	 movs r2,#2
 1744 008c 1A70     	 strb r2,[r3]
 1745 008e 13E0     	 b .L68
 1746              	.L72:
 375:../main.c     **** 		 else if(Hall_status == 0b011){sector = 3;}
 1747              	 .loc 4 375 0 is_stmt 1
 1748 0090 FB79     	 ldrb r3,[r7,#7]
 1749 0092 032B     	 cmp r3,#3
 1750 0094 03D1     	 bne .L73
 1751              	 .loc 4 375 0 is_stmt 0 discriminator 1
 1752 0096 104B     	 ldr r3,.L75+24
 1753 0098 0322     	 movs r2,#3
 1754 009a 1A70     	 strb r2,[r3]
 1755 009c 0CE0     	 b .L68
 1756              	.L73:
 376:../main.c     **** 		 else if(Hall_status == 0b001){sector = 4;}
 1757              	 .loc 4 376 0 is_stmt 1
 1758 009e FB79     	 ldrb r3,[r7,#7]
 1759 00a0 012B     	 cmp r3,#1
 1760 00a2 03D1     	 bne .L74
 1761              	 .loc 4 376 0 is_stmt 0 discriminator 1
 1762 00a4 0C4B     	 ldr r3,.L75+24
 1763 00a6 0422     	 movs r2,#4
 1764 00a8 1A70     	 strb r2,[r3]
 1765 00aa 05E0     	 b .L68
 1766              	.L74:
 377:../main.c     **** 		 else if(Hall_status == 0b101){sector = 5;}
 1767              	 .loc 4 377 0 is_stmt 1
 1768 00ac FB79     	 ldrb r3,[r7,#7]
 1769 00ae 052B     	 cmp r3,#5
 1770 00b0 02D1     	 bne .L68
 1771              	 .loc 4 377 0 is_stmt 0 discriminator 1
 1772 00b2 094B     	 ldr r3,.L75+24
 1773 00b4 0522     	 movs r2,#5
 1774 00b6 1A70     	 strb r2,[r3]
 1775              	.L68:
 378:../main.c     **** 
 379:../main.c     **** }
 1776              	 .loc 4 379 0 is_stmt 1
 1777 00b8 0C37     	 adds r7,r7,#12
 1778              	.LCFI78:
 1779              	 .cfi_def_cfa_offset 12
 1780 00ba BD46     	 mov sp,r7
 1781              	.LCFI79:
 1782              	 .cfi_def_cfa_register 13
 1783              	 
 1784 00bc 90BD     	 pop {r4,r7,pc}
 1785              	.L76:
 1786 00be 00BF     	 .align 2
 1787              	.L75:
 1788 00c0 00000000 	 .word enc_val
 1789 00c4 00000000 	 .word Hall_A_ISR
 1790 00c8 00000000 	 .word Hall_B_ISR
 1791 00cc 00000000 	 .word Hall_C_ISR
 1792 00d0 00000000 	 .word lookup_table
 1793 00d4 00000000 	 .word direction
 1794 00d8 00000000 	 .word sector
 1795              	 .cfi_endproc
 1796              	.LFE484:
 1798              	 .global __aeabi_ui2d
 1799              	 .global __aeabi_i2d
 1800              	 .global __aeabi_dsub
 1801              	 .section .text.Calculation,"ax",%progbits
 1802              	 .align 2
 1803              	 .global Calculation
 1804              	 .thumb
 1805              	 .thumb_func
 1807              	Calculation:
 1808              	.LFB485:
 380:../main.c     **** // Routine for calculation (sector, clark-Park trans.,...)
 381:../main.c     **** 
 382:../main.c     **** //5kHz loop since every 4th step of 50us --> 200us --> 5kHz
 383:../main.c     **** void Calculation(void){
 1809              	 .loc 4 383 0
 1810              	 .cfi_startproc
 1811              	 
 1812              	 
 1813 0000 B0B5     	 push {r4,r5,r7,lr}
 1814              	.LCFI80:
 1815              	 .cfi_def_cfa_offset 16
 1816              	 .cfi_offset 4,-16
 1817              	 .cfi_offset 5,-12
 1818              	 .cfi_offset 7,-8
 1819              	 .cfi_offset 14,-4
 1820 0002 2DED028B 	 fstmfdd sp!,{d8}
 1821              	.LCFI81:
 1822              	 .cfi_def_cfa_offset 24
 1823              	 .cfi_offset 80,-24
 1824              	 .cfi_offset 81,-20
 1825 0006 84B0     	 sub sp,sp,#16
 1826              	.LCFI82:
 1827              	 .cfi_def_cfa_offset 40
 1828 0008 00AF     	 add r7,sp,#0
 1829              	.LCFI83:
 1830              	 .cfi_def_cfa_register 7
 384:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 1831              	 .loc 4 384 0
 1832 000a AF48     	 ldr r0,.L130
 1833 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 385:../main.c     **** 		// Actual time since last angle update via Hall Sensor
 386:../main.c     **** 		uint32_t t;
 387:../main.c     **** 		if(last_Hall_trig == 'A') t = time_since_A;
 1834              	 .loc 4 387 0
 1835 0010 AE4B     	 ldr r3,.L130+4
 1836 0012 1B78     	 ldrb r3,[r3]
 1837 0014 DBB2     	 uxtb r3,r3
 1838 0016 412B     	 cmp r3,#65
 1839 0018 03D1     	 bne .L78
 1840              	 .loc 4 387 0 is_stmt 0 discriminator 1
 1841 001a AD4B     	 ldr r3,.L130+8
 1842 001c 1B68     	 ldr r3,[r3]
 1843 001e FB60     	 str r3,[r7,#12]
 1844 0020 10E0     	 b .L79
 1845              	.L78:
 388:../main.c     **** 		else if(last_Hall_trig == 'B') t = time_since_B;
 1846              	 .loc 4 388 0 is_stmt 1
 1847 0022 AA4B     	 ldr r3,.L130+4
 1848 0024 1B78     	 ldrb r3,[r3]
 1849 0026 DBB2     	 uxtb r3,r3
 1850 0028 422B     	 cmp r3,#66
 1851 002a 03D1     	 bne .L80
 1852              	 .loc 4 388 0 is_stmt 0 discriminator 1
 1853 002c A94B     	 ldr r3,.L130+12
 1854 002e 1B68     	 ldr r3,[r3]
 1855 0030 FB60     	 str r3,[r7,#12]
 1856 0032 07E0     	 b .L79
 1857              	.L80:
 389:../main.c     **** 		else if(last_Hall_trig == 'C') t = time_since_C;
 1858              	 .loc 4 389 0 is_stmt 1
 1859 0034 A54B     	 ldr r3,.L130+4
 1860 0036 1B78     	 ldrb r3,[r3]
 1861 0038 DBB2     	 uxtb r3,r3
 1862 003a 432B     	 cmp r3,#67
 1863 003c 02D1     	 bne .L79
 1864              	 .loc 4 389 0 is_stmt 0 discriminator 1
 1865 003e A64B     	 ldr r3,.L130+16
 1866 0040 1B68     	 ldr r3,[r3]
 1867 0042 FB60     	 str r3,[r7,#12]
 1868              	.L79:
 390:../main.c     **** 		time_180deg_cal = time_180deg;
 1869              	 .loc 4 390 0 is_stmt 1
 1870 0044 A54B     	 ldr r3,.L130+20
 1871 0046 1B68     	 ldr r3,[r3]
 1872 0048 A54A     	 ldr r2,.L130+24
 1873 004a 1360     	 str r3,[r2]
 391:../main.c     **** 		// not fixing sector for calc because if chainges better to do so
 392:../main.c     **** 
 393:../main.c     **** 		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 1874              	 .loc 4 393 0
 1875 004c A44B     	 ldr r3,.L130+24
 1876 004e 1B68     	 ldr r3,[r3]
 1877 0050 40F6C412 	 movw r2,#2500
 1878 0054 9342     	 cmp r3,r2
 1879 0056 04D9     	 bls .L81
 1880              	 .loc 4 393 0 is_stmt 0 discriminator 1
 1881 0058 A14B     	 ldr r3,.L130+24
 1882 005a 40F6C412 	 movw r2,#2500
 1883 005e 1A60     	 str r2,[r3]
 1884 0060 06E0     	 b .L82
 1885              	.L81:
 394:../main.c     **** 		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 1886              	 .loc 4 394 0 is_stmt 1
 1887 0062 9F4B     	 ldr r3,.L130+24
 1888 0064 1B68     	 ldr r3,[r3]
 1889 0066 012B     	 cmp r3,#1
 1890 0068 02D8     	 bhi .L82
 1891              	 .loc 4 394 0 is_stmt 0 discriminator 1
 1892 006a 9D4B     	 ldr r3,.L130+24
 1893 006c 0222     	 movs r2,#2
 1894 006e 1A60     	 str r2,[r3]
 1895              	.L82:
 395:../main.c     **** 
 396:../main.c     **** 		if(t < TIME_OMEGA_0){
 1896              	 .loc 4 396 0 is_stmt 1
 1897 0070 FB68     	 ldr r3,[r7,#12]
 1898 0072 41F28732 	 movw r2,#4999
 1899 0076 9342     	 cmp r3,r2
 1900 0078 35D8     	 bhi .L83
 397:../main.c     **** 			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 1901              	 .loc 4 397 0
 1902 007a 994B     	 ldr r3,.L130+24
 1903 007c 1B68     	 ldr r3,[r3]
 1904 007e 07EE903A 	 fmsr s15,r3
 1905 0082 F8EE677A 	 fuitos s15,s15
 1906 0086 17EE900A 	 fmrs r0,s15
 1907 008a FFF7FEFF 	 bl __aeabi_f2d
 1908 008e 0246     	 mov r2,r0
 1909 0090 0B46     	 mov r3,r1
 1910 0092 4FF00000 	 mov r0,#0
 1911 0096 9349     	 ldr r1,.L130+28
 1912 0098 FFF7FEFF 	 bl __aeabi_ddiv
 1913 009c 0246     	 mov r2,r0
 1914 009e 0B46     	 mov r3,r1
 1915 00a0 1446     	 mov r4,r2
 1916 00a2 1D46     	 mov r5,r3
 1917 00a4 F868     	 ldr r0,[r7,#12]
 1918 00a6 FFF7FEFF 	 bl __aeabi_ui2d
 1919 00aa 0246     	 mov r2,r0
 1920 00ac 0B46     	 mov r3,r1
 1921 00ae 2046     	 mov r0,r4
 1922 00b0 2946     	 mov r1,r5
 1923 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1924 00b6 0246     	 mov r2,r0
 1925 00b8 0B46     	 mov r3,r1
 1926 00ba 1046     	 mov r0,r2
 1927 00bc 1946     	 mov r1,r3
 1928 00be FFF7FEFF 	 bl __aeabi_d2f
 1929 00c2 0246     	 mov r2,r0
 1930 00c4 884B     	 ldr r3,.L130+32
 1931 00c6 1A60     	 str r2,[r3]
 398:../main.c     **** 			if(angle_in_sector > 60) angle_in_sector = 60;
 1932              	 .loc 4 398 0
 1933 00c8 874B     	 ldr r3,.L130+32
 1934 00ca D3ED007A 	 flds s15,[r3]
 1935 00ce 9FED877A 	 flds s14,.L130+36
 1936 00d2 F4EEC77A 	 fcmpes s15,s14
 1937 00d6 F1EE10FA 	 fmstat
 1938 00da 00DC     	 bgt .L117
 1939 00dc 06E0     	 b .L86
 1940              	.L117:
 1941              	 .loc 4 398 0 is_stmt 0 discriminator 1
 1942 00de 824B     	 ldr r3,.L130+32
 1943 00e0 834A     	 ldr r2,.L130+40
 1944 00e2 1A60     	 str r2,[r3]
 1945 00e4 02E0     	 b .L86
 1946              	.L83:
 399:../main.c     **** 		}
 400:../main.c     **** 		else{
 401:../main.c     **** 			angle_in_sector = 30; // standig still
 1947              	 .loc 4 401 0 is_stmt 1
 1948 00e6 804B     	 ldr r3,.L130+32
 1949 00e8 824A     	 ldr r2,.L130+44
 1950 00ea 1A60     	 str r2,[r3]
 1951              	.L86:
 402:../main.c     **** 		}
 403:../main.c     **** 
 404:../main.c     **** 		// CW
 405:../main.c     **** 		if(direction==1)
 1952              	 .loc 4 405 0
 1953 00ec 824B     	 ldr r3,.L130+48
 1954 00ee 1B78     	 ldrb r3,[r3]
 1955 00f0 DBB2     	 uxtb r3,r3
 1956 00f2 5BB2     	 sxtb r3,r3
 1957 00f4 012B     	 cmp r3,#1
 1958 00f6 54D1     	 bne .L87
 406:../main.c     **** 		{
 407:../main.c     **** 			angle_phi = (sector*60.0)+angle_in_sector;
 1959              	 .loc 4 407 0
 1960 00f8 804B     	 ldr r3,.L130+52
 1961 00fa 1B78     	 ldrb r3,[r3]
 1962 00fc DBB2     	 uxtb r3,r3
 1963 00fe 5BB2     	 sxtb r3,r3
 1964 0100 1846     	 mov r0,r3
 1965 0102 FFF7FEFF 	 bl __aeabi_i2d
 1966 0106 0246     	 mov r2,r0
 1967 0108 0B46     	 mov r3,r1
 1968 010a 1046     	 mov r0,r2
 1969 010c 1946     	 mov r1,r3
 1970 010e 4FF00002 	 mov r2,#0
 1971 0112 7B4B     	 ldr r3,.L130+56
 1972 0114 FFF7FEFF 	 bl __aeabi_dmul
 1973 0118 0246     	 mov r2,r0
 1974 011a 0B46     	 mov r3,r1
 1975 011c 1446     	 mov r4,r2
 1976 011e 1D46     	 mov r5,r3
 1977 0120 714B     	 ldr r3,.L130+32
 1978 0122 1B68     	 ldr r3,[r3]
 1979 0124 1846     	 mov r0,r3
 1980 0126 FFF7FEFF 	 bl __aeabi_f2d
 1981 012a 0246     	 mov r2,r0
 1982 012c 0B46     	 mov r3,r1
 1983 012e 2046     	 mov r0,r4
 1984 0130 2946     	 mov r1,r5
 1985 0132 FFF7FEFF 	 bl __aeabi_dadd
 1986 0136 0246     	 mov r2,r0
 1987 0138 0B46     	 mov r3,r1
 1988 013a 1046     	 mov r0,r2
 1989 013c 1946     	 mov r1,r3
 1990 013e FFF7FEFF 	 bl __aeabi_d2f
 1991 0142 0246     	 mov r2,r0
 1992 0144 6F4B     	 ldr r3,.L130+60
 1993 0146 1A60     	 str r2,[r3]
 408:../main.c     **** 			angle_phi=angle_phi+offset_pos;
 1994              	 .loc 4 408 0
 1995 0148 6E4B     	 ldr r3,.L130+60
 1996 014a 93ED007A 	 flds s14,[r3]
 1997 014e 6E4B     	 ldr r3,.L130+64
 1998 0150 D3ED007A 	 flds s15,[r3]
 1999 0154 77EE277A 	 fadds s15,s14,s15
 2000 0158 6A4B     	 ldr r3,.L130+60
 2001 015a C3ED007A 	 fsts s15,[r3]
 409:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2002              	 .loc 4 409 0
 2003 015e 694B     	 ldr r3,.L130+60
 2004 0160 D3ED007A 	 flds s15,[r3]
 2005 0164 9FED697A 	 flds s14,.L130+68
 2006 0168 F4EEC77A 	 fcmpes s15,s14
 2007 016c F1EE10FA 	 fmstat
 2008 0170 09DD     	 ble .L88
 2009              	 .loc 4 409 0 is_stmt 0 discriminator 1
 2010 0172 644B     	 ldr r3,.L130+60
 2011 0174 D3ED007A 	 flds s15,[r3]
 2012 0178 9FED647A 	 flds s14,.L130+68
 2013 017c 77EEC77A 	 fsubs s15,s15,s14
 2014 0180 604B     	 ldr r3,.L130+60
 2015 0182 C3ED007A 	 fsts s15,[r3]
 2016              	.L88:
 410:../main.c     **** 
 411:../main.c     **** 			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
 2017              	 .loc 4 411 0 is_stmt 1
 2018 0186 564B     	 ldr r3,.L130+24
 2019 0188 1B68     	 ldr r3,[r3]
 2020 018a 07EE903A 	 fmsr s15,r3
 2021 018e F8EE677A 	 fuitos s15,s15
 2022 0192 9FED5F7A 	 flds s14,.L130+72
 2023 0196 C7EE277A 	 fdivs s15,s14,s15
 2024 019a 5E4B     	 ldr r3,.L130+76
 2025 019c C3ED007A 	 fsts s15,[r3]
 2026 01a0 6FE0     	 b .L90
 2027              	.L87:
 412:../main.c     **** 		}
 413:../main.c     **** 		// CCW
 414:../main.c     **** 		else{
 415:../main.c     **** 			angle_phi = (sector*60.0)-angle_in_sector;
 2028              	 .loc 4 415 0
 2029 01a2 564B     	 ldr r3,.L130+52
 2030 01a4 1B78     	 ldrb r3,[r3]
 2031 01a6 DBB2     	 uxtb r3,r3
 2032 01a8 5BB2     	 sxtb r3,r3
 2033 01aa 1846     	 mov r0,r3
 2034 01ac FFF7FEFF 	 bl __aeabi_i2d
 2035 01b0 0246     	 mov r2,r0
 2036 01b2 0B46     	 mov r3,r1
 2037 01b4 1046     	 mov r0,r2
 2038 01b6 1946     	 mov r1,r3
 2039 01b8 4FF00002 	 mov r2,#0
 2040 01bc 504B     	 ldr r3,.L130+56
 2041 01be FFF7FEFF 	 bl __aeabi_dmul
 2042 01c2 0246     	 mov r2,r0
 2043 01c4 0B46     	 mov r3,r1
 2044 01c6 1446     	 mov r4,r2
 2045 01c8 1D46     	 mov r5,r3
 2046 01ca 474B     	 ldr r3,.L130+32
 2047 01cc 1B68     	 ldr r3,[r3]
 2048 01ce 1846     	 mov r0,r3
 2049 01d0 FFF7FEFF 	 bl __aeabi_f2d
 2050 01d4 0246     	 mov r2,r0
 2051 01d6 0B46     	 mov r3,r1
 2052 01d8 2046     	 mov r0,r4
 2053 01da 2946     	 mov r1,r5
 2054 01dc FFF7FEFF 	 bl __aeabi_dsub
 2055 01e0 0246     	 mov r2,r0
 2056 01e2 0B46     	 mov r3,r1
 2057 01e4 1046     	 mov r0,r2
 2058 01e6 1946     	 mov r1,r3
 2059 01e8 FFF7FEFF 	 bl __aeabi_d2f
 2060 01ec 0246     	 mov r2,r0
 2061 01ee 454B     	 ldr r3,.L130+60
 2062 01f0 1A60     	 str r2,[r3]
 416:../main.c     **** 			angle_phi = angle_phi+60.0;
 2063              	 .loc 4 416 0
 2064 01f2 444B     	 ldr r3,.L130+60
 2065 01f4 D3ED007A 	 flds s15,[r3]
 2066 01f8 9FED3C7A 	 flds s14,.L130+36
 2067 01fc 77EE877A 	 fadds s15,s15,s14
 2068 0200 404B     	 ldr r3,.L130+60
 2069 0202 C3ED007A 	 fsts s15,[r3]
 417:../main.c     **** 			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 2070              	 .loc 4 417 0
 2071 0206 3F4B     	 ldr r3,.L130+60
 2072 0208 D3ED007A 	 flds s15,[r3]
 2073 020c F5EEC07A 	 fcmpezs s15
 2074 0210 F1EE10FA 	 fmstat
 2075 0214 09D5     	 bpl .L91
 2076              	 .loc 4 417 0 is_stmt 0 discriminator 1
 2077 0216 3B4B     	 ldr r3,.L130+60
 2078 0218 D3ED007A 	 flds s15,[r3]
 2079 021c 9FED3B7A 	 flds s14,.L130+68
 2080 0220 77EE877A 	 fadds s15,s15,s14
 2081 0224 374B     	 ldr r3,.L130+60
 2082 0226 C3ED007A 	 fsts s15,[r3]
 2083              	.L91:
 418:../main.c     **** 			angle_phi=angle_phi+offset_neg;
 2084              	 .loc 4 418 0 is_stmt 1
 2085 022a 364B     	 ldr r3,.L130+60
 2086 022c 93ED007A 	 flds s14,[r3]
 2087 0230 394B     	 ldr r3,.L130+80
 2088 0232 D3ED007A 	 flds s15,[r3]
 2089 0236 77EE277A 	 fadds s15,s14,s15
 2090 023a 324B     	 ldr r3,.L130+60
 2091 023c C3ED007A 	 fsts s15,[r3]
 419:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2092              	 .loc 4 419 0
 2093 0240 304B     	 ldr r3,.L130+60
 2094 0242 D3ED007A 	 flds s15,[r3]
 2095 0246 9FED317A 	 flds s14,.L130+68
 2096 024a F4EEC77A 	 fcmpes s15,s14
 2097 024e F1EE10FA 	 fmstat
 2098 0252 09DD     	 ble .L93
 2099              	 .loc 4 419 0 is_stmt 0 discriminator 1
 2100 0254 2B4B     	 ldr r3,.L130+60
 2101 0256 D3ED007A 	 flds s15,[r3]
 2102 025a 9FED2C7A 	 flds s14,.L130+68
 2103 025e 77EEC77A 	 fsubs s15,s15,s14
 2104 0262 284B     	 ldr r3,.L130+60
 2105 0264 C3ED007A 	 fsts s15,[r3]
 2106              	.L93:
 420:../main.c     **** 
 421:../main.c     **** 			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
 2107              	 .loc 4 421 0 is_stmt 1
 2108 0268 1D4B     	 ldr r3,.L130+24
 2109 026a 1B68     	 ldr r3,[r3]
 2110 026c 07EE903A 	 fmsr s15,r3
 2111 0270 F8EE677A 	 fuitos s15,s15
 2112 0274 9FED297A 	 flds s14,.L130+84
 2113 0278 C7EE277A 	 fdivs s15,s14,s15
 2114 027c 254B     	 ldr r3,.L130+76
 2115 027e C3ED007A 	 fsts s15,[r3]
 2116              	.L90:
 422:../main.c     **** 		}
 423:../main.c     **** 
 424:../main.c     **** 		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large pea
 2117              	 .loc 4 424 0
 2118 0282 244B     	 ldr r3,.L130+76
 2119 0284 D3ED007A 	 flds s15,[r3]
 2120 0288 9FED257A 	 flds s14,.L130+88
 2121 028c F4EEC77A 	 fcmpes s15,s14
 2122 0290 F1EE10FA 	 fmstat
 2123 0294 0DD5     	 bpl .L95
 2124              	 .loc 4 424 0 is_stmt 0 discriminator 1
 2125 0296 1F4B     	 ldr r3,.L130+76
 2126 0298 D3ED007A 	 flds s15,[r3]
 2127 029c 9FED217A 	 flds s14,.L130+92
 2128 02a0 F4EEC77A 	 fcmpes s15,s14
 2129 02a4 F1EE10FA 	 fmstat
 2130 02a8 03DD     	 ble .L95
 425:../main.c     **** 		{
 426:../main.c     **** 			omega_mech_rps = (float)omega_mech_rps_temp;
 2131              	 .loc 4 426 0 is_stmt 1
 2132 02aa 1A4B     	 ldr r3,.L130+76
 2133 02ac 1B68     	 ldr r3,[r3]
 2134 02ae 1E4A     	 ldr r2,.L130+96
 2135 02b0 1360     	 str r3,[r2]
 2136              	.L95:
 427:../main.c     **** 		}
 428:../main.c     **** 
 429:../main.c     **** 		if(t > TIME_OMEGA_0){omega_ele_rads = 0;} // set omega  to 0 if no more hall detected
 2137              	 .loc 4 429 0
 2138 02b2 FB68     	 ldr r3,[r7,#12]
 2139 02b4 41F28832 	 movw r2,#5000
 2140 02b8 9342     	 cmp r3,r2
 2141 02ba 39D9     	 bls .L98
 2142              	 .loc 4 429 0 is_stmt 0 discriminator 1
 2143 02bc 1B4B     	 ldr r3,.L130+100
 2144 02be 4FF00002 	 mov r2,#0
 2145 02c2 1A60     	 str r2,[r3]
 2146 02c4 58E0     	 b .L99
 2147              	.L131:
 2148 02c6 00BF     	 .align 2
 2149              	.L130:
 2150 02c8 00000000 	 .word status_LED_red_cal_time
 2151 02cc 00000000 	 .word last_Hall_trig
 2152 02d0 00000000 	 .word time_since_A
 2153 02d4 00000000 	 .word time_since_B
 2154 02d8 00000000 	 .word time_since_C
 2155 02dc 00000000 	 .word time_180deg
 2156 02e0 00000000 	 .word time_180deg_cal
 2157 02e4 00806640 	 .word 1080459264
 2158 02e8 00000000 	 .word angle_in_sector
 2159 02ec 00007042 	 .word 1114636288
 2160 02f0 00007042 	 .word 1114636288
 2161 02f4 0000F041 	 .word 1106247680
 2162 02f8 00000000 	 .word direction
 2163 02fc 00000000 	 .word sector
 2164 0300 00004E40 	 .word 1078853632
 2165 0304 00000000 	 .word angle_phi
 2166 0308 00000000 	 .word offset_pos
 2167 030c 0000B443 	 .word 1135869952
 2168 0310 0000E143 	 .word 1138819072
 2169 0314 00000000 	 .word omega_mech_rps_temp
 2170 0318 00000000 	 .word offset_neg
 2171 031c 0000E1C3 	 .word -1008664576
 2172 0320 00004843 	 .word 1128792064
 2173 0324 000048C3 	 .word -1018691584
 2174 0328 00000000 	 .word omega_mech_rps
 2175 032c 00000000 	 .word omega_ele_rads
 2176              	.L98:
 430:../main.c     **** 		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s
 2177              	 .loc 4 430 0 is_stmt 1
 2178 0330 A34B     	 ldr r3,.L132+40
 2179 0332 D3ED007A 	 flds s15,[r3]
 2180 0336 77EEA77A 	 fadds s15,s15,s15
 2181 033a 17EE900A 	 fmrs r0,s15
 2182 033e FFF7FEFF 	 bl __aeabi_f2d
 2183 0342 0246     	 mov r2,r0
 2184 0344 0B46     	 mov r3,r1
 2185 0346 1046     	 mov r0,r2
 2186 0348 1946     	 mov r1,r3
 2187 034a 93A3     	 adr r3,.L132
 2188 034c D3E90023 	 ldrd r2,[r3]
 2189 0350 FFF7FEFF 	 bl __aeabi_dmul
 2190 0354 0246     	 mov r2,r0
 2191 0356 0B46     	 mov r3,r1
 2192 0358 1046     	 mov r0,r2
 2193 035a 1946     	 mov r1,r3
 2194 035c 4FF00002 	 mov r2,#0
 2195 0360 984B     	 ldr r3,.L132+44
 2196 0362 FFF7FEFF 	 bl __aeabi_dmul
 2197 0366 0246     	 mov r2,r0
 2198 0368 0B46     	 mov r3,r1
 2199 036a 1046     	 mov r0,r2
 2200 036c 1946     	 mov r1,r3
 2201 036e FFF7FEFF 	 bl __aeabi_d2f
 2202 0372 0246     	 mov r2,r0
 2203 0374 944B     	 ldr r3,.L132+48
 2204 0376 1A60     	 str r2,[r3]
 2205              	.L99:
 431:../main.c     **** 
 432:../main.c     **** 		omega_ele_degs = omega_ele_rads / Pi180;
 2206              	 .loc 4 432 0
 2207 0378 934B     	 ldr r3,.L132+48
 2208 037a 1B68     	 ldr r3,[r3]
 2209 037c 1846     	 mov r0,r3
 2210 037e FFF7FEFF 	 bl __aeabi_f2d
 2211 0382 0246     	 mov r2,r0
 2212 0384 0B46     	 mov r3,r1
 2213 0386 1046     	 mov r0,r2
 2214 0388 1946     	 mov r1,r3
 2215 038a 85A3     	 adr r3,.L132+8
 2216 038c D3E90023 	 ldrd r2,[r3]
 2217 0390 FFF7FEFF 	 bl __aeabi_ddiv
 2218 0394 0246     	 mov r2,r0
 2219 0396 0B46     	 mov r3,r1
 2220 0398 1046     	 mov r0,r2
 2221 039a 1946     	 mov r1,r3
 2222 039c FFF7FEFF 	 bl __aeabi_d2f
 2223 03a0 0246     	 mov r2,r0
 2224 03a2 8A4B     	 ldr r3,.L132+52
 2225 03a4 1A60     	 str r2,[r3]
 433:../main.c     **** 
 434:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% 
 435:../main.c     **** 
 436:../main.c     **** 		// Current read out over SPI
 437:../main.c     **** 		Current_U = readCurrent(ChipSelect_U);
 2226              	 .loc 4 437 0
 2227 03a6 0620     	 movs r0,#6
 2228 03a8 FFF7FEFF 	 bl readCurrent
 2229 03ac 0246     	 mov r2,r0
 2230 03ae 884B     	 ldr r3,.L132+56
 2231 03b0 1A60     	 str r2,[r3]
 438:../main.c     **** 		Current_V = readCurrent(ChipSelect_V);
 2232              	 .loc 4 438 0
 2233 03b2 0520     	 movs r0,#5
 2234 03b4 FFF7FEFF 	 bl readCurrent
 2235 03b8 0246     	 mov r2,r0
 2236 03ba 864B     	 ldr r3,.L132+60
 2237 03bc 1A60     	 str r2,[r3]
 439:../main.c     **** 		Current_W = readCurrent(ChipSelect_W);
 2238              	 .loc 4 439 0
 2239 03be 0320     	 movs r0,#3
 2240 03c0 FFF7FEFF 	 bl readCurrent
 2241 03c4 0246     	 mov r2,r0
 2242 03c6 844B     	 ldr r3,.L132+64
 2243 03c8 1A60     	 str r2,[r3]
 440:../main.c     **** 
 441:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of th
 442:../main.c     **** 
 443:../main.c     **** 		// conversion from rad/s to degree
 444:../main.c     **** 		float angle_phi_rad = angle_phi*Pi180;
 2244              	 .loc 4 444 0
 2245 03ca 844B     	 ldr r3,.L132+68
 2246 03cc 1B68     	 ldr r3,[r3]
 2247 03ce 1846     	 mov r0,r3
 2248 03d0 FFF7FEFF 	 bl __aeabi_f2d
 2249 03d4 0246     	 mov r2,r0
 2250 03d6 0B46     	 mov r3,r1
 2251 03d8 1046     	 mov r0,r2
 2252 03da 1946     	 mov r1,r3
 2253 03dc 70A3     	 adr r3,.L132+8
 2254 03de D3E90023 	 ldrd r2,[r3]
 2255 03e2 FFF7FEFF 	 bl __aeabi_dmul
 2256 03e6 0246     	 mov r2,r0
 2257 03e8 0B46     	 mov r3,r1
 2258 03ea 1046     	 mov r0,r2
 2259 03ec 1946     	 mov r1,r3
 2260 03ee FFF7FEFF 	 bl __aeabi_d2f
 2261 03f2 0346     	 mov r3,r0
 2262 03f4 BB60     	 str r3,[r7,#8]
 445:../main.c     **** 
 446:../main.c     **** 		// to decrease multiple calculations and computational effort
 447:../main.c     **** 		float cos_phi = cosf(angle_phi_rad);
 2263              	 .loc 4 447 0
 2264 03f6 B868     	 ldr r0,[r7,#8]
 2265 03f8 FFF7FEFF 	 bl cosf
 2266 03fc 7860     	 str r0,[r7,#4]
 448:../main.c     **** 		float sin_phi = sinf(angle_phi_rad);
 2267              	 .loc 4 448 0
 2268 03fe B868     	 ldr r0,[r7,#8]
 2269 0400 FFF7FEFF 	 bl sinf
 2270 0404 3860     	 str r0,[r7]
 449:../main.c     **** 
 450:../main.c     **** 		// Clark-Park transformation (from U,V,W to dq)
 451:../main.c     **** 		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-
 2271              	 .loc 4 451 0
 2272 0406 724B     	 ldr r3,.L132+56
 2273 0408 93ED007A 	 flds s14,[r3]
 2274 040c D7ED017A 	 flds s15,[r7,#4]
 2275 0410 27EE278A 	 fmuls s16,s14,s15
 2276 0414 B868     	 ldr r0,[r7,#8]
 2277 0416 FFF7FEFF 	 bl __aeabi_f2d
 2278 041a 0246     	 mov r2,r0
 2279 041c 0B46     	 mov r3,r1
 2280 041e 1046     	 mov r0,r2
 2281 0420 1946     	 mov r1,r3
 2282 0422 61A3     	 adr r3,.L132+16
 2283 0424 D3E90023 	 ldrd r2,[r3]
 2284 0428 FFF7FEFF 	 bl __aeabi_dsub
 2285 042c 0246     	 mov r2,r0
 2286 042e 0B46     	 mov r3,r1
 2287 0430 1046     	 mov r0,r2
 2288 0432 1946     	 mov r1,r3
 2289 0434 FFF7FEFF 	 bl __aeabi_d2f
 2290 0438 0346     	 mov r3,r0
 2291 043a 1846     	 mov r0,r3
 2292 043c FFF7FEFF 	 bl cosf
 2293 0440 07EE100A 	 fmsr s14,r0
 2294 0444 634B     	 ldr r3,.L132+60
 2295 0446 D3ED007A 	 flds s15,[r3]
 2296 044a 67EE277A 	 fmuls s15,s14,s15
 2297 044e 38EE278A 	 fadds s16,s16,s15
 2298 0452 B868     	 ldr r0,[r7,#8]
 2299 0454 FFF7FEFF 	 bl __aeabi_f2d
 2300 0458 0246     	 mov r2,r0
 2301 045a 0B46     	 mov r3,r1
 2302 045c 1046     	 mov r0,r2
 2303 045e 1946     	 mov r1,r3
 2304 0460 53A3     	 adr r3,.L132+24
 2305 0462 D3E90023 	 ldrd r2,[r3]
 2306 0466 FFF7FEFF 	 bl __aeabi_dsub
 2307 046a 0246     	 mov r2,r0
 2308 046c 0B46     	 mov r3,r1
 2309 046e 1046     	 mov r0,r2
 2310 0470 1946     	 mov r1,r3
 2311 0472 FFF7FEFF 	 bl __aeabi_d2f
 2312 0476 0346     	 mov r3,r0
 2313 0478 1846     	 mov r0,r3
 2314 047a FFF7FEFF 	 bl cosf
 2315 047e 07EE100A 	 fmsr s14,r0
 2316 0482 554B     	 ldr r3,.L132+64
 2317 0484 D3ED007A 	 flds s15,[r3]
 2318 0488 67EE277A 	 fmuls s15,s14,s15
 2319 048c 78EE277A 	 fadds s15,s16,s15
 2320 0490 17EE900A 	 fmrs r0,s15
 2321 0494 FFF7FEFF 	 bl __aeabi_f2d
 2322 0498 0246     	 mov r2,r0
 2323 049a 0B46     	 mov r3,r1
 2324 049c 1046     	 mov r0,r2
 2325 049e 1946     	 mov r1,r3
 2326 04a0 45A3     	 adr r3,.L132+32
 2327 04a2 D3E90023 	 ldrd r2,[r3]
 2328 04a6 FFF7FEFF 	 bl __aeabi_dmul
 2329 04aa 0246     	 mov r2,r0
 2330 04ac 0B46     	 mov r3,r1
 2331 04ae 1046     	 mov r0,r2
 2332 04b0 1946     	 mov r1,r3
 2333 04b2 FFF7FEFF 	 bl __aeabi_d2f
 2334 04b6 0246     	 mov r2,r0
 2335 04b8 494B     	 ldr r3,.L132+72
 2336 04ba 1A60     	 str r2,[r3]
 452:../main.c     **** 		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad
 2337              	 .loc 4 452 0
 2338 04bc D7ED007A 	 flds s15,[r7]
 2339 04c0 B1EE677A 	 fnegs s14,s15
 2340 04c4 424B     	 ldr r3,.L132+56
 2341 04c6 D3ED007A 	 flds s15,[r3]
 2342 04ca 27EE278A 	 fmuls s16,s14,s15
 2343 04ce B868     	 ldr r0,[r7,#8]
 2344 04d0 FFF7FEFF 	 bl __aeabi_f2d
 2345 04d4 0246     	 mov r2,r0
 2346 04d6 0B46     	 mov r3,r1
 2347 04d8 1046     	 mov r0,r2
 2348 04da 1946     	 mov r1,r3
 2349 04dc 32A3     	 adr r3,.L132+16
 2350 04de D3E90023 	 ldrd r2,[r3]
 2351 04e2 FFF7FEFF 	 bl __aeabi_dsub
 2352 04e6 0246     	 mov r2,r0
 2353 04e8 0B46     	 mov r3,r1
 2354 04ea 1046     	 mov r0,r2
 2355 04ec 1946     	 mov r1,r3
 2356 04ee FFF7FEFF 	 bl __aeabi_d2f
 2357 04f2 0346     	 mov r3,r0
 2358 04f4 1846     	 mov r0,r3
 2359 04f6 FFF7FEFF 	 bl sinf
 2360 04fa 07EE100A 	 fmsr s14,r0
 2361 04fe 354B     	 ldr r3,.L132+60
 2362 0500 D3ED007A 	 flds s15,[r3]
 2363 0504 67EE277A 	 fmuls s15,s14,s15
 2364 0508 38EE678A 	 fsubs s16,s16,s15
 2365 050c B868     	 ldr r0,[r7,#8]
 2366 050e FFF7FEFF 	 bl __aeabi_f2d
 2367 0512 0246     	 mov r2,r0
 2368 0514 0B46     	 mov r3,r1
 2369 0516 1046     	 mov r0,r2
 2370 0518 1946     	 mov r1,r3
 2371 051a 25A3     	 adr r3,.L132+24
 2372 051c D3E90023 	 ldrd r2,[r3]
 2373 0520 FFF7FEFF 	 bl __aeabi_dsub
 2374 0524 0246     	 mov r2,r0
 2375 0526 0B46     	 mov r3,r1
 2376 0528 1046     	 mov r0,r2
 2377 052a 1946     	 mov r1,r3
 2378 052c FFF7FEFF 	 bl __aeabi_d2f
 2379 0530 0346     	 mov r3,r0
 2380 0532 1846     	 mov r0,r3
 2381 0534 FFF7FEFF 	 bl sinf
 2382 0538 07EE100A 	 fmsr s14,r0
 2383 053c 264B     	 ldr r3,.L132+64
 2384 053e D3ED007A 	 flds s15,[r3]
 2385 0542 67EE277A 	 fmuls s15,s14,s15
 2386 0546 78EE677A 	 fsubs s15,s16,s15
 2387 054a 17EE900A 	 fmrs r0,s15
 2388 054e FFF7FEFF 	 bl __aeabi_f2d
 2389 0552 0246     	 mov r2,r0
 2390 0554 0B46     	 mov r3,r1
 2391 0556 1046     	 mov r0,r2
 2392 0558 1946     	 mov r1,r3
 2393 055a 17A3     	 adr r3,.L132+32
 2394 055c D3E90023 	 ldrd r2,[r3]
 2395 0560 FFF7FEFF 	 bl __aeabi_dmul
 2396 0564 0246     	 mov r2,r0
 2397 0566 0B46     	 mov r3,r1
 2398 0568 1046     	 mov r0,r2
 2399 056a 1946     	 mov r1,r3
 2400 056c FFF7FEFF 	 bl __aeabi_d2f
 2401 0570 0246     	 mov r2,r0
 2402 0572 1C4B     	 ldr r3,.L132+76
 2403 0574 1A60     	 str r2,[r3]
 453:../main.c     **** 
 454:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of
 455:../main.c     **** 
 456:../main.c     **** 		if(CAN_control == 1){// can control
 2404              	 .loc 4 456 0
 2405 0576 1C4B     	 ldr r3,.L132+80
 2406 0578 1B78     	 ldrb r3,[r3]
 2407 057a 012B     	 cmp r3,#1
 2408 057c 4DD1     	 bne .L100
 457:../main.c     **** 
 458:../main.c     **** 			if(CAN_new_meassage == 1){
 2409              	 .loc 4 458 0
 2410 057e 1B4B     	 ldr r3,.L132+84
 2411 0580 1B78     	 ldrb r3,[r3]
 2412 0582 012B     	 cmp r3,#1
 2413 0584 38D1     	 bne .L101
 459:../main.c     **** 				speed_ref = CAN_speed_ref;
 2414              	 .loc 4 459 0
 2415 0586 1A4B     	 ldr r3,.L132+88
 2416 0588 1B68     	 ldr r3,[r3]
 2417 058a 1A4A     	 ldr r2,.L132+92
 2418 058c 1360     	 str r3,[r2]
 460:../main.c     **** 				CAN_new_meassage = 0;
 2419              	 .loc 4 460 0
 2420 058e 174B     	 ldr r3,.L132+84
 2421 0590 0022     	 movs r2,#0
 2422 0592 1A70     	 strb r2,[r3]
 2423 0594 36E0     	 b .L102
 2424              	.L133:
 2425 0596 00BF     	 .align 3
 2426              	.L132:
 2427 0598 F1D4C853 	 .word 1405670641
 2428 059c FB210940 	 .word 1074340347
 2429 05a0 4DC90777 	 .word 1996998989
 2430 05a4 46DF913F 	 .word 1066524486
 2431 05a8 A038DB37 	 .word 937113760
 2432 05ac 52C10040 	 .word 1073791314
 2433 05b0 A038DB37 	 .word 937113760
 2434 05b4 52C11040 	 .word 1074839890
 2435 05b8 93761F57 	 .word 1461679763
 2436 05bc 5555E53F 	 .word 1071994197
 2437 05c0 00000000 	 .word omega_mech_rps
 2438 05c4 00002640 	 .word 1076232192
 2439 05c8 00000000 	 .word omega_ele_rads
 2440 05cc 00000000 	 .word omega_ele_degs
 2441 05d0 00000000 	 .word Current_U
 2442 05d4 00000000 	 .word Current_V
 2443 05d8 00000000 	 .word Current_W
 2444 05dc 00000000 	 .word angle_phi
 2445 05e0 00000000 	 .word id
 2446 05e4 00000000 	 .word iq
 2447 05e8 00000000 	 .word CAN_control
 2448 05ec 00000000 	 .word CAN_new_meassage
 2449 05f0 00000000 	 .word CAN_speed_ref
 2450 05f4 00000000 	 .word speed_ref
 2451              	.L101:
 461:../main.c     **** 			}
 462:../main.c     **** 			else{
 463:../main.c     **** 				CAN_no_com_counter ++;
 2452              	 .loc 4 463 0
 2453 05f8 B94B     	 ldr r3,.L134+32
 2454 05fa 1B78     	 ldrb r3,[r3]
 2455 05fc 0133     	 adds r3,r3,#1
 2456 05fe DAB2     	 uxtb r2,r3
 2457 0600 B74B     	 ldr r3,.L134+32
 2458 0602 1A70     	 strb r2,[r3]
 2459              	.L102:
 464:../main.c     **** 			}
 465:../main.c     **** 
 466:../main.c     **** 			if(CAN_no_com_counter > CAN_NO_COM_TH){
 2460              	 .loc 4 466 0
 2461 0604 B64B     	 ldr r3,.L134+32
 2462 0606 1B78     	 ldrb r3,[r3]
 2463 0608 FA2B     	 cmp r3,#250
 2464 060a 06D9     	 bls .L100
 467:../main.c     **** 				//CAN_new_meassage = 0;
 468:../main.c     **** 				CAN_no_com_counter = CAN_NO_COM_TH;
 2465              	 .loc 4 468 0
 2466 060c B44B     	 ldr r3,.L134+32
 2467 060e FA22     	 movs r2,#250
 2468 0610 1A70     	 strb r2,[r3]
 469:../main.c     **** 				speed_ref = 0;
 2469              	 .loc 4 469 0
 2470 0612 B44B     	 ldr r3,.L134+36
 2471 0614 4FF00002 	 mov r2,#0
 2472 0618 1A60     	 str r2,[r3]
 2473              	.L100:
 470:../main.c     **** 			}
 471:../main.c     **** 		}
 472:../main.c     **** 
 473:../main.c     **** 		omega_ele_rads_ref = ( speed_ref * PPZ ) / WHEEL_R;
 2474              	 .loc 4 473 0
 2475 061a B24B     	 ldr r3,.L134+36
 2476 061c D3ED007A 	 flds s15,[r3]
 2477 0620 B2EE067A 	 fconsts s14,#38
 2478 0624 67EE877A 	 fmuls s15,s15,s14
 2479 0628 17EE900A 	 fmrs r0,s15
 2480 062c FFF7FEFF 	 bl __aeabi_f2d
 2481 0630 0246     	 mov r2,r0
 2482 0632 0B46     	 mov r3,r1
 2483 0634 1046     	 mov r0,r2
 2484 0636 1946     	 mov r1,r3
 2485 0638 A1A3     	 adr r3,.L134
 2486 063a D3E90023 	 ldrd r2,[r3]
 2487 063e FFF7FEFF 	 bl __aeabi_ddiv
 2488 0642 0246     	 mov r2,r0
 2489 0644 0B46     	 mov r3,r1
 2490 0646 1046     	 mov r0,r2
 2491 0648 1946     	 mov r1,r3
 2492 064a FFF7FEFF 	 bl __aeabi_d2f
 2493 064e 0246     	 mov r2,r0
 2494 0650 A54B     	 ldr r3,.L134+40
 2495 0652 1A60     	 str r2,[r3]
 474:../main.c     **** 
 475:../main.c     **** 		if((omega_ele_rads_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rad
 2496              	 .loc 4 475 0
 2497 0654 A44B     	 ldr r3,.L134+40
 2498 0656 D3ED007A 	 flds s15,[r3]
 2499 065a F5EE407A 	 fcmpzs s15
 2500 065e F1EE10FA 	 fmstat
 2501 0662 1CD1     	 bne .L103
 2502              	 .loc 4 475 0 is_stmt 0 discriminator 1
 2503 0664 A14B     	 ldr r3,.L134+44
 2504 0666 1B78     	 ldrb r3,[r3]
 2505 0668 012B     	 cmp r3,#1
 2506 066a 18D1     	 bne .L103
 2507              	 .loc 4 475 0 discriminator 2
 2508 066c A04B     	 ldr r3,.L134+48
 2509 066e D3ED007A 	 flds s15,[r3]
 2510 0672 9FEDA07A 	 flds s14,.L134+52
 2511 0676 F4EEC77A 	 fcmpes s15,s14
 2512 067a F1EE10FA 	 fmstat
 2513 067e 0EDD     	 ble .L103
 2514              	 .loc 4 475 0 discriminator 3
 2515 0680 9B4B     	 ldr r3,.L134+48
 2516 0682 D3ED007A 	 flds s15,[r3]
 2517 0686 9FED9C7A 	 flds s14,.L134+56
 2518 068a F4EEC77A 	 fcmpes s15,s14
 2519 068e F1EE10FA 	 fmstat
 2520 0692 04D5     	 bpl .L103
 476:../main.c     **** 			T_ref = 0;
 2521              	 .loc 4 476 0 is_stmt 1
 2522 0694 994B     	 ldr r3,.L134+60
 2523 0696 4FF00002 	 mov r2,#0
 2524 069a 1A60     	 str r2,[r3]
 2525 069c 0BE0     	 b .L106
 2526              	.L103:
 477:../main.c     **** 		}
 478:../main.c     **** 		else{
 479:../main.c     **** 			if(MOTOR_NUM == 1){
 480:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param_1); // outer control loop q f
 2527              	 .loc 4 480 0
 2528 069e 924B     	 ldr r3,.L134+40
 2529 06a0 1A68     	 ldr r2,[r3]
 2530 06a2 934B     	 ldr r3,.L134+48
 2531 06a4 1B68     	 ldr r3,[r3]
 2532 06a6 1046     	 mov r0,r2
 2533 06a8 1946     	 mov r1,r3
 2534 06aa 954A     	 ldr r2,.L134+64
 2535 06ac FFF7FEFF 	 bl PID_Controller
 2536 06b0 0246     	 mov r2,r0
 2537 06b2 924B     	 ldr r3,.L134+60
 2538 06b4 1A60     	 str r2,[r3]
 2539              	.L106:
 481:../main.c     **** 			}
 482:../main.c     **** 			else{
 483:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param);
 484:../main.c     **** 			}
 485:../main.c     **** 		}
 486:../main.c     **** 
 487:../main.c     **** 		if (Speed_control == 1){ // 1 speed contola aktive 0 not aktive torqe contol aktive
 2540              	 .loc 4 487 0
 2541 06b6 8D4B     	 ldr r3,.L134+44
 2542 06b8 1B78     	 ldrb r3,[r3]
 2543 06ba 012B     	 cmp r3,#1
 2544 06bc 16D1     	 bne .L107
 488:../main.c     **** 			if(MOTOR_NUM == 1) {
 489:../main.c     **** 				iq_ref =  T_ref / K_T; // dirction for motor 1
 2545              	 .loc 4 489 0
 2546 06be 8F4B     	 ldr r3,.L134+60
 2547 06c0 1B68     	 ldr r3,[r3]
 2548 06c2 1846     	 mov r0,r3
 2549 06c4 FFF7FEFF 	 bl __aeabi_f2d
 2550 06c8 0246     	 mov r2,r0
 2551 06ca 0B46     	 mov r3,r1
 2552 06cc 1046     	 mov r0,r2
 2553 06ce 1946     	 mov r1,r3
 2554 06d0 7DA3     	 adr r3,.L134+8
 2555 06d2 D3E90023 	 ldrd r2,[r3]
 2556 06d6 FFF7FEFF 	 bl __aeabi_ddiv
 2557 06da 0246     	 mov r2,r0
 2558 06dc 0B46     	 mov r3,r1
 2559 06de 1046     	 mov r0,r2
 2560 06e0 1946     	 mov r1,r3
 2561 06e2 FFF7FEFF 	 bl __aeabi_d2f
 2562 06e6 0246     	 mov r2,r0
 2563 06e8 864B     	 ldr r3,.L134+68
 2564 06ea 1A60     	 str r2,[r3]
 2565              	.L107:
 490:../main.c     **** 			}
 491:../main.c     **** 			else{
 492:../main.c     **** 				iq_ref = - T_ref / K_T;// dirction for motor 1
 493:../main.c     **** 			}
 494:../main.c     **** 		}
 495:../main.c     **** 
 496:../main.c     **** 		//limit to IQ_REF_MAx limit
 497:../main.c     **** 		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 2566              	 .loc 4 497 0
 2567 06ec 854B     	 ldr r3,.L134+68
 2568 06ee D3ED007A 	 flds s15,[r3]
 2569 06f2 B9EE047A 	 fconsts s14,#148
 2570 06f6 F4EEC77A 	 fcmpes s15,s14
 2571 06fa F1EE10FA 	 fmstat
 2572 06fe 02D5     	 bpl .L108
 2573              	 .loc 4 497 0 is_stmt 0 discriminator 1
 2574 0700 804B     	 ldr r3,.L134+68
 2575 0702 814A     	 ldr r2,.L134+72
 2576 0704 1A60     	 str r2,[r3]
 2577              	.L108:
 498:../main.c     **** 		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 2578              	 .loc 4 498 0 is_stmt 1
 2579 0706 7F4B     	 ldr r3,.L134+68
 2580 0708 D3ED007A 	 flds s15,[r3]
 2581 070c B1EE047A 	 fconsts s14,#20
 2582 0710 F4EEC77A 	 fcmpes s15,s14
 2583 0714 F1EE10FA 	 fmstat
 2584 0718 02DD     	 ble .L110
 2585              	 .loc 4 498 0 is_stmt 0 discriminator 1
 2586 071a 7A4B     	 ldr r3,.L134+68
 2587 071c 7B4A     	 ldr r2,.L134+76
 2588 071e 1A60     	 str r2,[r3]
 2589              	.L110:
 499:../main.c     **** 
 500:../main.c     **** 		if(Torque_control == 1){
 2590              	 .loc 4 500 0 is_stmt 1
 2591 0720 7B4B     	 ldr r3,.L134+80
 2592 0722 1B78     	 ldrb r3,[r3]
 2593 0724 012B     	 cmp r3,#1
 2594 0726 16D1     	 bne .L112
 501:../main.c     **** 			Vd = PID_Controller(0.0,id,&Id_param);
 2595              	 .loc 4 501 0
 2596 0728 7A4B     	 ldr r3,.L134+84
 2597 072a 1B68     	 ldr r3,[r3]
 2598 072c 4FF00000 	 mov r0,#0
 2599 0730 1946     	 mov r1,r3
 2600 0732 794A     	 ldr r2,.L134+88
 2601 0734 FFF7FEFF 	 bl PID_Controller
 2602 0738 0246     	 mov r2,r0
 2603 073a 784B     	 ldr r3,.L134+92
 2604 073c 1A60     	 str r2,[r3]
 502:../main.c     **** 			Vq = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
 2605              	 .loc 4 502 0
 2606 073e 714B     	 ldr r3,.L134+68
 2607 0740 1A68     	 ldr r2,[r3]
 2608 0742 774B     	 ldr r3,.L134+96
 2609 0744 1B68     	 ldr r3,[r3]
 2610 0746 1046     	 mov r0,r2
 2611 0748 1946     	 mov r1,r3
 2612 074a 764A     	 ldr r2,.L134+100
 2613 074c FFF7FEFF 	 bl PID_Controller
 2614 0750 0246     	 mov r2,r0
 2615 0752 754B     	 ldr r3,.L134+104
 2616 0754 1A60     	 str r2,[r3]
 2617              	.L112:
 503:../main.c     **** 		}
 504:../main.c     **** 
 505:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9
 506:../main.c     **** 
 507:../main.c     **** 		// dq to alpha beta for voltage
 508:../main.c     **** 		Valpha = Vd*cos_phi - Vq*sin_phi;
 2618              	 .loc 4 508 0
 2619 0756 714B     	 ldr r3,.L134+92
 2620 0758 93ED007A 	 flds s14,[r3]
 2621 075c D7ED017A 	 flds s15,[r7,#4]
 2622 0760 27EE277A 	 fmuls s14,s14,s15
 2623 0764 704B     	 ldr r3,.L134+104
 2624 0766 D3ED006A 	 flds s13,[r3]
 2625 076a D7ED007A 	 flds s15,[r7]
 2626 076e 66EEA77A 	 fmuls s15,s13,s15
 2627 0772 77EE677A 	 fsubs s15,s14,s15
 2628 0776 6D4B     	 ldr r3,.L134+108
 2629 0778 C3ED007A 	 fsts s15,[r3]
 509:../main.c     **** 		Vbeta = Vd*sin_phi + Vq*cos_phi;
 2630              	 .loc 4 509 0
 2631 077c 674B     	 ldr r3,.L134+92
 2632 077e 93ED007A 	 flds s14,[r3]
 2633 0782 D7ED007A 	 flds s15,[r7]
 2634 0786 27EE277A 	 fmuls s14,s14,s15
 2635 078a 674B     	 ldr r3,.L134+104
 2636 078c D3ED006A 	 flds s13,[r3]
 2637 0790 D7ED017A 	 flds s15,[r7,#4]
 2638 0794 66EEA77A 	 fmuls s15,s13,s15
 2639 0798 77EE277A 	 fadds s15,s14,s15
 2640 079c 644B     	 ldr r3,.L134+112
 2641 079e C3ED007A 	 fsts s15,[r3]
 510:../main.c     **** 
 511:../main.c     **** 		// calc angle for SVM app
 512:../main.c     **** 		angle_ab_rad = atanf(Vbeta/Valpha);
 2642              	 .loc 4 512 0
 2643 07a2 634B     	 ldr r3,.L134+112
 2644 07a4 93ED007A 	 flds s14,[r3]
 2645 07a8 604B     	 ldr r3,.L134+108
 2646 07aa D3ED007A 	 flds s15,[r3]
 2647 07ae C7EE277A 	 fdivs s15,s14,s15
 2648 07b2 17EE900A 	 fmrs r0,s15
 2649 07b6 FFF7FEFF 	 bl atanf
 2650 07ba 0246     	 mov r2,r0
 2651 07bc 5D4B     	 ldr r3,.L134+116
 2652 07be 1A60     	 str r2,[r3]
 513:../main.c     **** 		angle_ab = angle_ab_rad/Pi180;
 2653              	 .loc 4 513 0
 2654 07c0 5C4B     	 ldr r3,.L134+116
 2655 07c2 1B68     	 ldr r3,[r3]
 2656 07c4 1846     	 mov r0,r3
 2657 07c6 FFF7FEFF 	 bl __aeabi_f2d
 2658 07ca 0246     	 mov r2,r0
 2659 07cc 0B46     	 mov r3,r1
 2660 07ce 1046     	 mov r0,r2
 2661 07d0 1946     	 mov r1,r3
 2662 07d2 3FA3     	 adr r3,.L134+16
 2663 07d4 D3E90023 	 ldrd r2,[r3]
 2664 07d8 FFF7FEFF 	 bl __aeabi_ddiv
 2665 07dc 0246     	 mov r2,r0
 2666 07de 0B46     	 mov r3,r1
 2667 07e0 1046     	 mov r0,r2
 2668 07e2 1946     	 mov r1,r3
 2669 07e4 FFF7FEFF 	 bl __aeabi_d2f
 2670 07e8 0246     	 mov r2,r0
 2671 07ea 534B     	 ldr r3,.L134+120
 2672 07ec 1A60     	 str r2,[r3]
 514:../main.c     **** 
 515:../main.c     **** 		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 2673              	 .loc 4 515 0
 2674 07ee 4F4B     	 ldr r3,.L134+108
 2675 07f0 D3ED007A 	 flds s15,[r3]
 2676 07f4 F5EEC07A 	 fcmpezs s15
 2677 07f8 F1EE10FA 	 fmstat
 2678 07fc 0AD5     	 bpl .L129
 2679              	 .loc 4 515 0 is_stmt 0 discriminator 1
 2680 07fe 4E4B     	 ldr r3,.L134+120
 2681 0800 D3ED007A 	 flds s15,[r3]
 2682 0804 9FED4D7A 	 flds s14,.L134+124
 2683 0808 77EE877A 	 fadds s15,s15,s14
 2684 080c 4A4B     	 ldr r3,.L134+120
 2685 080e C3ED007A 	 fsts s15,[r3]
 2686 0812 11E0     	 b .L115
 2687              	.L129:
 516:../main.c     **** 		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 2688              	 .loc 4 516 0 is_stmt 1
 2689 0814 464B     	 ldr r3,.L134+112
 2690 0816 D3ED007A 	 flds s15,[r3]
 2691 081a F5EEC07A 	 fcmpezs s15
 2692 081e F1EE10FA 	 fmstat
 2693 0822 09D5     	 bpl .L115
 2694              	 .loc 4 516 0 is_stmt 0 discriminator 1
 2695 0824 444B     	 ldr r3,.L134+120
 2696 0826 D3ED007A 	 flds s15,[r3]
 2697 082a 9FED457A 	 flds s14,.L134+128
 2698 082e 77EE877A 	 fadds s15,s15,s14
 2699 0832 414B     	 ldr r3,.L134+120
 2700 0834 C3ED007A 	 fsts s15,[r3]
 2701              	.L115:
 517:../main.c     **** 
 518:../main.c     **** 		// shortend to one line
 519:../main.c     **** 		// amplitude calculation
 520:../main.c     **** 		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 2702              	 .loc 4 520 0 is_stmt 1
 2703 0838 3C4B     	 ldr r3,.L134+108
 2704 083a 93ED007A 	 flds s14,[r3]
 2705 083e 3B4B     	 ldr r3,.L134+108
 2706 0840 D3ED007A 	 flds s15,[r3]
 2707 0844 27EE277A 	 fmuls s14,s14,s15
 2708 0848 394B     	 ldr r3,.L134+112
 2709 084a D3ED006A 	 flds s13,[r3]
 2710 084e 384B     	 ldr r3,.L134+112
 2711 0850 D3ED007A 	 flds s15,[r3]
 2712 0854 66EEA77A 	 fmuls s15,s13,s15
 2713 0858 77EE277A 	 fadds s15,s14,s15
 2714 085c 17EE900A 	 fmrs r0,s15
 2715 0860 FFF7FEFF 	 bl sqrtf
 2716 0864 0246     	 mov r2,r0
 2717 0866 374B     	 ldr r3,.L134+132
 2718 0868 1A60     	 str r2,[r3]
 521:../main.c     **** 
 522:../main.c     **** 		//K_inv = V/m --> m = V / K_inv
 523:../main.c     **** 		modulation_index = amplitude_ab/K_inv;
 2719              	 .loc 4 523 0
 2720 086a 364B     	 ldr r3,.L134+132
 2721 086c 1B68     	 ldr r3,[r3]
 2722 086e 1846     	 mov r0,r3
 2723 0870 FFF7FEFF 	 bl __aeabi_f2d
 2724 0874 0246     	 mov r2,r0
 2725 0876 0B46     	 mov r3,r1
 2726 0878 1046     	 mov r0,r2
 2727 087a 1946     	 mov r1,r3
 2728 087c 16A3     	 adr r3,.L134+24
 2729 087e D3E90023 	 ldrd r2,[r3]
 2730 0882 FFF7FEFF 	 bl __aeabi_ddiv
 2731 0886 0246     	 mov r2,r0
 2732 0888 0B46     	 mov r3,r1
 2733 088a 1046     	 mov r0,r2
 2734 088c 1946     	 mov r1,r3
 2735 088e FFF7FEFF 	 bl __aeabi_d2f
 2736 0892 0246     	 mov r2,r0
 2737 0894 2C4B     	 ldr r3,.L134+136
 2738 0896 1A60     	 str r2,[r3]
 524:../main.c     **** 
 525:../main.c     **** 		//scale maximum 1 to 10000 -->
 526:../main.c     **** 		modulation_index_scaled = 10000*modulation_index;
 2739              	 .loc 4 526 0
 2740 0898 2B4B     	 ldr r3,.L134+136
 2741 089a D3ED007A 	 flds s15,[r3]
 2742 089e 9FED2B7A 	 flds s14,.L134+140
 2743 08a2 67EE877A 	 fmuls s15,s15,s14
 2744 08a6 2A4B     	 ldr r3,.L134+144
 2745 08a8 C3ED007A 	 fsts s15,[r3]
 527:../main.c     **** 
 528:../main.c     **** 
 529:../main.c     **** 		// shortened ca 4% improvemnt
 530:../main.c     **** 		//modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;
 531:../main.c     **** 
 532:../main.c     **** 		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the ti
 2746              	 .loc 4 532 0
 2747 08ac 2948     	 ldr r0,.L134+148
 2748 08ae FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 533:../main.c     **** 
 534:../main.c     **** }
 2749              	 .loc 4 534 0
 2750 08b2 1037     	 adds r7,r7,#16
 2751              	.LCFI84:
 2752              	 .cfi_def_cfa_offset 24
 2753 08b4 BD46     	 mov sp,r7
 2754              	.LCFI85:
 2755              	 .cfi_def_cfa_register 13
 2756              	 
 2757 08b6 BDEC028B 	 fldmfdd sp!,{d8}
 2758              	.LCFI86:
 2759              	 .cfi_restore 80
 2760              	 .cfi_restore 81
 2761              	 .cfi_def_cfa_offset 16
 2762 08ba B0BD     	 pop {r4,r5,r7,pc}
 2763              	.L135:
 2764 08bc AFF30080 	 .align 3
 2765              	.L134:
 2766 08c0 48E17A14 	 .word 343597384
 2767 08c4 AE47B13F 	 .word 1068582830
 2768 08c8 E17A14AE 	 .word -1374389535
 2769 08cc 47E1CA3F 	 .word 1070260551
 2770 08d0 4DC90777 	 .word 1996998989
 2771 08d4 46DF913F 	 .word 1066524486
 2772 08d8 EE7D9BC9 	 .word -912556562
 2773 08dc 1B212240 	 .word 1075978523
 2774 08e0 00000000 	 .word CAN_no_com_counter
 2775 08e4 00000000 	 .word speed_ref
 2776 08e8 00000000 	 .word omega_ele_rads_ref
 2777 08ec 00000000 	 .word Speed_control
 2778 08f0 00000000 	 .word omega_ele_rads
 2779 08f4 000048C3 	 .word -1018691584
 2780 08f8 00004843 	 .word 1128792064
 2781 08fc 00000000 	 .word T_ref
 2782 0900 00000000 	 .word T_param_1
 2783 0904 00000000 	 .word iq_ref
 2784 0908 0000A0C0 	 .word -1063256064
 2785 090c 0000A040 	 .word 1084227584
 2786 0910 00000000 	 .word Torque_control
 2787 0914 00000000 	 .word id
 2788 0918 00000000 	 .word Id_param
 2789 091c 00000000 	 .word Vd
 2790 0920 00000000 	 .word iq
 2791 0924 00000000 	 .word Iq_param
 2792 0928 00000000 	 .word Vq
 2793 092c 00000000 	 .word Valpha
 2794 0930 00000000 	 .word Vbeta
 2795 0934 00000000 	 .word angle_ab_rad
 2796 0938 00000000 	 .word angle_ab
 2797 093c 00003443 	 .word 1127481344
 2798 0940 0000B443 	 .word 1135869952
 2799 0944 00000000 	 .word amplitude_ab
 2800 0948 00000000 	 .word modulation_index
 2801 094c 00401C46 	 .word 1176256512
 2802 0950 00000000 	 .word modulation_index_scaled
 2803 0954 00000000 	 .word status_LED_red_cal_time
 2804              	 .cfi_endproc
 2805              	.LFE485:
 2807              	 .section .text.PID_Controller,"ax",%progbits
 2808              	 .align 2
 2809              	 .global PID_Controller
 2810              	 .thumb
 2811              	 .thumb_func
 2813              	PID_Controller:
 2814              	.LFB486:
 535:../main.c     **** 
 536:../main.c     **** // PID Controller
 537:../main.c     **** float PID_Controller(float SetPoint,float ActValue,PID_param *param){
 2815              	 .loc 4 537 0
 2816              	 .cfi_startproc
 2817              	 
 2818              	 
 2819              	 
 2820 0000 80B4     	 push {r7}
 2821              	.LCFI87:
 2822              	 .cfi_def_cfa_offset 4
 2823              	 .cfi_offset 7,-4
 2824 0002 89B0     	 sub sp,sp,#36
 2825              	.LCFI88:
 2826              	 .cfi_def_cfa_offset 40
 2827 0004 00AF     	 add r7,sp,#0
 2828              	.LCFI89:
 2829              	 .cfi_def_cfa_register 7
 2830 0006 F860     	 str r0,[r7,#12]
 2831 0008 B960     	 str r1,[r7,#8]
 2832 000a 7A60     	 str r2,[r7,#4]
 538:../main.c     **** 
 539:../main.c     **** 	float Deviation = SetPoint - ActValue;
 2833              	 .loc 4 539 0
 2834 000c 97ED037A 	 flds s14,[r7,#12]
 2835 0010 D7ED027A 	 flds s15,[r7,#8]
 2836 0014 77EE677A 	 fsubs s15,s14,s15
 2837 0018 C7ED067A 	 fsts s15,[r7,#24]
 540:../main.c     **** 	float temp1, temp2;
 541:../main.c     **** 
 542:../main.c     **** 	 temp1 = param->P*Deviation;
 2838              	 .loc 4 542 0
 2839 001c 7B68     	 ldr r3,[r7,#4]
 2840 001e 93ED007A 	 flds s14,[r3]
 2841 0022 D7ED067A 	 flds s15,[r7,#24]
 2842 0026 67EE277A 	 fmuls s15,s14,s15
 2843 002a C7ED057A 	 fsts s15,[r7,#20]
 543:../main.c     **** 	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;
 2844              	 .loc 4 543 0
 2845 002e 7B68     	 ldr r3,[r7,#4]
 2846 0030 93ED017A 	 flds s14,[r3,#4]
 2847 0034 214B     	 ldr r3,.L145
 2848 0036 D3ED007A 	 flds s15,[r3]
 2849 003a 27EE277A 	 fmuls s14,s14,s15
 2850 003e D7ED067A 	 flds s15,[r7,#24]
 2851 0042 27EE277A 	 fmuls s14,s14,s15
 2852 0046 D7ED057A 	 flds s15,[r7,#20]
 2853 004a 37EE277A 	 fadds s14,s14,s15
 2854 004e 7B68     	 ldr r3,[r7,#4]
 2855 0050 D3ED087A 	 flds s15,[r3,#32]
 2856 0054 77EE277A 	 fadds s15,s14,s15
 2857 0058 C7ED077A 	 fsts s15,[r7,#28]
 544:../main.c     **** 
 545:../main.c     **** 	 if (temp2 >= param->MaxLimit){
 2858              	 .loc 4 545 0
 2859 005c 7B68     	 ldr r3,[r7,#4]
 2860 005e 93ED037A 	 flds s14,[r3,#12]
 2861 0062 D7ED077A 	 flds s15,[r7,#28]
 2862 0066 B4EEE77A 	 fcmpes s14,s15
 2863 006a F1EE10FA 	 fmstat
 2864 006e 03D8     	 bhi .L144
 546:../main.c     **** 		 temp2 = param->MaxLimit;
 2865              	 .loc 4 546 0
 2866 0070 7B68     	 ldr r3,[r7,#4]
 2867 0072 DB68     	 ldr r3,[r3,#12]
 2868 0074 FB61     	 str r3,[r7,#28]
 2869 0076 0CE0     	 b .L139
 2870              	.L144:
 547:../main.c     **** 	 }
 548:../main.c     **** 	 else if (temp2 < param->MinLimit){
 2871              	 .loc 4 548 0
 2872 0078 7B68     	 ldr r3,[r7,#4]
 2873 007a 93ED047A 	 flds s14,[r3,#16]
 2874 007e D7ED077A 	 flds s15,[r7,#28]
 2875 0082 B4EEE77A 	 fcmpes s14,s15
 2876 0086 F1EE10FA 	 fmstat
 2877 008a 02DD     	 ble .L139
 549:../main.c     **** 		 temp2 = param->MinLimit;
 2878              	 .loc 4 549 0
 2879 008c 7B68     	 ldr r3,[r7,#4]
 2880 008e 1B69     	 ldr r3,[r3,#16]
 2881 0090 FB61     	 str r3,[r7,#28]
 2882              	.L139:
 550:../main.c     **** 	 }
 551:../main.c     **** 
 552:../main.c     **** 	 param->Output_z = temp2 - temp1;
 2883              	 .loc 4 552 0
 2884 0092 97ED077A 	 flds s14,[r7,#28]
 2885 0096 D7ED057A 	 flds s15,[r7,#20]
 2886 009a 77EE677A 	 fsubs s15,s14,s15
 2887 009e 7B68     	 ldr r3,[r7,#4]
 2888 00a0 C3ED087A 	 fsts s15,[r3,#32]
 553:../main.c     **** 
 554:../main.c     **** 	 param->Output = temp2;
 2889              	 .loc 4 554 0
 2890 00a4 7B68     	 ldr r3,[r7,#4]
 2891 00a6 FA69     	 ldr r2,[r7,#28]
 2892 00a8 5A61     	 str r2,[r3,#20]
 555:../main.c     **** 
 556:../main.c     **** 	return param->Output;
 2893              	 .loc 4 556 0
 2894 00aa 7B68     	 ldr r3,[r7,#4]
 2895 00ac 5B69     	 ldr r3,[r3,#20]
 557:../main.c     **** 
 558:../main.c     **** }
 2896              	 .loc 4 558 0
 2897 00ae 1846     	 mov r0,r3
 2898 00b0 2437     	 adds r7,r7,#36
 2899              	.LCFI90:
 2900              	 .cfi_def_cfa_offset 4
 2901 00b2 BD46     	 mov sp,r7
 2902              	.LCFI91:
 2903              	 .cfi_def_cfa_register 13
 2904              	 
 2905 00b4 5DF8047B 	 ldr r7,[sp],#4
 2906              	.LCFI92:
 2907              	 .cfi_restore 7
 2908              	 .cfi_def_cfa_offset 0
 2909 00b8 7047     	 bx lr
 2910              	.L146:
 2911 00ba 00BF     	 .align 2
 2912              	.L145:
 2913 00bc 00000000 	 .word Tcyc
 2914              	 .cfi_endproc
 2915              	.LFE486:
 2917              	 .section .text.readCurrent,"ax",%progbits
 2918              	 .align 2
 2919              	 .global readCurrent
 2920              	 .thumb
 2921              	 .thumb_func
 2923              	readCurrent:
 2924              	.LFB487:
 559:../main.c     **** 
 560:../main.c     **** 
 561:../main.c     **** //Read Current  via SPI-Interface
 562:../main.c     **** float readCurrent(uint8_t ChipSelect){
 2925              	 .loc 4 562 0
 2926              	 .cfi_startproc
 2927              	 
 2928              	 
 2929 0000 80B5     	 push {r7,lr}
 2930              	.LCFI93:
 2931              	 .cfi_def_cfa_offset 8
 2932              	 .cfi_offset 7,-8
 2933              	 .cfi_offset 14,-4
 2934 0002 86B0     	 sub sp,sp,#24
 2935              	.LCFI94:
 2936              	 .cfi_def_cfa_offset 32
 2937 0004 00AF     	 add r7,sp,#0
 2938              	.LCFI95:
 2939              	 .cfi_def_cfa_register 7
 2940 0006 0346     	 mov r3,r0
 2941 0008 FB71     	 strb r3,[r7,#7]
 563:../main.c     **** 	uint8_t ReadData[2];
 564:../main.c     **** 
 565:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, ChipSelect);
 2942              	 .loc 4 565 0
 2943 000a FB79     	 ldrb r3,[r7,#7]
 2944 000c 9BB2     	 uxth r3,r3
 2945 000e 2248     	 ldr r0,.L149
 2946 0010 1946     	 mov r1,r3
 2947 0012 FFF7FEFF 	 bl BUS_IO_Write
 566:../main.c     **** 	SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2U);
 2948              	 .loc 4 566 0
 2949 0016 07F10C03 	 add r3,r7,#12
 2950 001a 2048     	 ldr r0,.L149+4
 2951 001c 1946     	 mov r1,r3
 2952 001e 0222     	 movs r2,#2
 2953 0020 FFF7FEFF 	 bl SPI_MASTER_Receive
 567:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, 0b111);
 2954              	 .loc 4 567 0
 2955 0024 1C48     	 ldr r0,.L149
 2956 0026 0721     	 movs r1,#7
 2957 0028 FFF7FEFF 	 bl BUS_IO_Write
 568:../main.c     **** 	ReadData[0] = ReadData[0] & 0X1F; 									//cutting away the 3 info bits
 2958              	 .loc 4 568 0
 2959 002c 3B7B     	 ldrb r3,[r7,#12]
 2960 002e 03F01F03 	 and r3,r3,#31
 2961 0032 DBB2     	 uxtb r3,r3
 2962 0034 3B73     	 strb r3,[r7,#12]
 569:../main.c     **** 	uint16_t iCurrent = ReadData[0]<<8 | ReadData[1];					//combine Data
 2963              	 .loc 4 569 0
 2964 0036 3B7B     	 ldrb r3,[r7,#12]
 2965 0038 1B02     	 lsls r3,r3,#8
 2966 003a 9AB2     	 uxth r2,r3
 2967 003c 7B7B     	 ldrb r3,[r7,#13]
 2968 003e 9BB2     	 uxth r3,r3
 2969 0040 1343     	 orrs r3,r3,r2
 2970 0042 9BB2     	 uxth r3,r3
 2971 0044 FB82     	 strh r3,[r7,#22]
 570:../main.c     **** 
 571:../main.c     **** 	// calculation of the current
 572:../main.c     **** 	float fCurrent = ((float)iCurrent - 4096.0)/160.0;					// ATTENTION: value has to be divided by 16
 2972              	 .loc 4 572 0
 2973 0046 FB8A     	 ldrh r3,[r7,#22]
 2974 0048 07EE903A 	 fmsr s15,r3
 2975 004c F8EE677A 	 fuitos s15,s15
 2976 0050 17EE900A 	 fmrs r0,s15
 2977 0054 FFF7FEFF 	 bl __aeabi_f2d
 2978 0058 0246     	 mov r2,r0
 2979 005a 0B46     	 mov r3,r1
 2980 005c 1046     	 mov r0,r2
 2981 005e 1946     	 mov r1,r3
 2982 0060 4FF00002 	 mov r2,#0
 2983 0064 0E4B     	 ldr r3,.L149+8
 2984 0066 FFF7FEFF 	 bl __aeabi_dsub
 2985 006a 0246     	 mov r2,r0
 2986 006c 0B46     	 mov r3,r1
 2987 006e 1046     	 mov r0,r2
 2988 0070 1946     	 mov r1,r3
 2989 0072 4FF00002 	 mov r2,#0
 2990 0076 0B4B     	 ldr r3,.L149+12
 2991 0078 FFF7FEFF 	 bl __aeabi_ddiv
 2992 007c 0246     	 mov r2,r0
 2993 007e 0B46     	 mov r3,r1
 2994 0080 1046     	 mov r0,r2
 2995 0082 1946     	 mov r1,r3
 2996 0084 FFF7FEFF 	 bl __aeabi_d2f
 2997 0088 0346     	 mov r3,r0
 2998 008a 3B61     	 str r3,[r7,#16]
 573:../main.c     **** 
 574:../main.c     **** 	return fCurrent;
 2999              	 .loc 4 574 0
 3000 008c 3B69     	 ldr r3,[r7,#16]
 575:../main.c     **** }
 3001              	 .loc 4 575 0
 3002 008e 1846     	 mov r0,r3
 3003 0090 1837     	 adds r7,r7,#24
 3004              	.LCFI96:
 3005              	 .cfi_def_cfa_offset 8
 3006 0092 BD46     	 mov sp,r7
 3007              	.LCFI97:
 3008              	 .cfi_def_cfa_register 13
 3009              	 
 3010 0094 80BD     	 pop {r7,pc}
 3011              	.L150:
 3012 0096 00BF     	 .align 2
 3013              	.L149:
 3014 0098 00000000 	 .word SPI_ChipSelect
 3015 009c 00000000 	 .word SPI_MASTER_0
 3016 00a0 0000B040 	 .word 1085276160
 3017 00a4 00006440 	 .word 1080295424
 3018              	 .cfi_endproc
 3019              	.LFE487:
 3021              	 .text
 3022              	.Letext0:
 3023              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3024              	 .file 6 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3025              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3026              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 3027              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_scu.h"
 3028              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 3029              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_spi.h"
 3030              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master.h"
 3031              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io.h"
 3032              	 .file 14 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_eru.h"
 3033              	 .file 15 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_ccu8.h"
 3034              	 .file 16 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 3035              	 .file 17 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm.h"
 3036              	 .file 18 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 3037              	 .file 19 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 3038              	 .file 20 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 3039              	 .file 21 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DAVE.h"
 3040              	 .file 22 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 3041              	 .file 23 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 3042              	 .file 24 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 3043              	 .file 25 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master_extern.h"
 3044              	 .file 26 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io_extern.h"
 3045              	 .file 27 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt_extern.h"
 3046              	 .file 28 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 3047              	 .file 29 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:163    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:167    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:207    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:211    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:250    .text.PIN_INTERRUPT_GetPinValue:00000000 $t
    {standard input}:254    .text.PIN_INTERRUPT_GetPinValue:00000000 PIN_INTERRUPT_GetPinValue
    {standard input}:299    .bss.Torque_control:00000000 Torque_control
    {standard input}:300    .bss.Torque_control:00000000 $d
    {standard input}:305    .bss.Speed_control:00000000 Speed_control
    {standard input}:306    .bss.Speed_control:00000000 $d
    {standard input}:311    .bss.CAN_control:00000000 CAN_control
    {standard input}:312    .bss.CAN_control:00000000 $d
                            *COM*:00000004 Current_U
                            *COM*:00000004 Current_V
                            *COM*:00000004 Current_W
    {standard input}:321    .data.lookup_table:00000000 lookup_table
    {standard input}:318    .data.lookup_table:00000000 $d
    {standard input}:390    .bss.sector:00000000 sector
    {standard input}:391    .bss.sector:00000000 $d
    {standard input}:396    .bss.direction:00000000 direction
    {standard input}:397    .bss.direction:00000000 $d
    {standard input}:403    .bss.enc_val:00000000 enc_val
    {standard input}:400    .bss.enc_val:00000000 $d
    {standard input}:410    .bss.time_since_A:00000000 time_since_A
    {standard input}:407    .bss.time_since_A:00000000 $d
    {standard input}:417    .bss.time_since_B:00000000 time_since_B
    {standard input}:414    .bss.time_since_B:00000000 $d
    {standard input}:424    .bss.time_since_C:00000000 time_since_C
    {standard input}:421    .bss.time_since_C:00000000 $d
    {standard input}:431    .data.time_180deg:00000000 time_180deg
    {standard input}:428    .data.time_180deg:00000000 $d
    {standard input}:438    .data.time_180deg_cal:00000000 time_180deg_cal
    {standard input}:435    .data.time_180deg_cal:00000000 $d
                            *COM*:00000001 last_Hall_trig
    {standard input}:446    .data.angle_in_sector:00000000 angle_in_sector
    {standard input}:443    .data.angle_in_sector:00000000 $d
    {standard input}:453    .bss.angle_phi:00000000 angle_phi
    {standard input}:450    .bss.angle_phi:00000000 $d
                            *COM*:00000004 ialpha
                            *COM*:00000004 ibeta
                            *COM*:00000004 iq
                            *COM*:00000004 id
                            *COM*:00000004 Valpha
                            *COM*:00000004 Vbeta
    {standard input}:466    .bss.omega_ele_rads:00000000 omega_ele_rads
    {standard input}:463    .bss.omega_ele_rads:00000000 $d
    {standard input}:473    .bss.omega_mech_rps:00000000 omega_mech_rps
    {standard input}:470    .bss.omega_mech_rps:00000000 $d
    {standard input}:480    .bss.omega_mech_rps_temp:00000000 omega_mech_rps_temp
    {standard input}:477    .bss.omega_mech_rps_temp:00000000 $d
    {standard input}:487    .bss.omega_ele_degs:00000000 omega_ele_degs
    {standard input}:484    .bss.omega_ele_degs:00000000 $d
    {standard input}:494    .bss.speed_ref:00000000 speed_ref
    {standard input}:491    .bss.speed_ref:00000000 $d
    {standard input}:501    .bss.omega_ele_rads_ref:00000000 omega_ele_rads_ref
    {standard input}:498    .bss.omega_ele_rads_ref:00000000 $d
    {standard input}:508    .bss.iq_ref:00000000 iq_ref
    {standard input}:505    .bss.iq_ref:00000000 $d
    {standard input}:515    .bss.T_ref:00000000 T_ref
    {standard input}:512    .bss.T_ref:00000000 $d
    {standard input}:522    .bss.Vd:00000000 Vd
    {standard input}:519    .bss.Vd:00000000 $d
    {standard input}:529    .bss.Vq:00000000 Vq
    {standard input}:526    .bss.Vq:00000000 $d
                            *COM*:00000008 Speeds_int16_r
    {standard input}:537    .bss.CAN_speed_ref:00000000 CAN_speed_ref
    {standard input}:534    .bss.CAN_speed_ref:00000000 $d
    {standard input}:543    .bss.CAN_new_meassage:00000000 CAN_new_meassage
    {standard input}:544    .bss.CAN_new_meassage:00000000 $d
    {standard input}:549    .bss.CAN_no_com_counter:00000000 CAN_no_com_counter
    {standard input}:550    .bss.CAN_no_com_counter:00000000 $d
    {standard input}:556    .bss.distance_180deg_ele_count:00000000 distance_180deg_ele_count
    {standard input}:553    .bss.distance_180deg_ele_count:00000000 $d
    {standard input}:563    .bss.Speed_act:00000000 Speed_act
    {standard input}:560    .bss.Speed_act:00000000 $d
    {standard input}:570    .bss.distance:00000000 distance
    {standard input}:567    .bss.distance:00000000 $d
                            *COM*:00000004 modulation_index
                            *COM*:00000004 modulation_index_scaled
                            *COM*:00000004 angle_ab
                            *COM*:00000004 angle_ab_rad
                            *COM*:00000004 amplitude_ab
    {standard input}:582    .data.Ts:00000000 Ts
    {standard input}:579    .data.Ts:00000000 $d
    {standard input}:589    .data.Tcyc:00000000 Tcyc
    {standard input}:586    .data.Tcyc:00000000 $d
    {standard input}:596    .data.scaling_factor:00000000 scaling_factor
    {standard input}:593    .data.scaling_factor:00000000 $d
                            *COM*:00000004 amplitude_corrected
    {standard input}:603    .bss.count:00000000 count
    {standard input}:604    .bss.count:00000000 $d
    {standard input}:610    .data.offset_pos:00000000 offset_pos
    {standard input}:607    .data.offset_pos:00000000 $d
    {standard input}:617    .data.offset_neg:00000000 offset_neg
    {standard input}:614    .data.offset_neg:00000000 $d
    {standard input}:624    .data.Iq_param:00000000 Iq_param
    {standard input}:621    .data.Iq_param:00000000 $d
    {standard input}:639    .data.Id_param:00000000 Id_param
    {standard input}:636    .data.Id_param:00000000 $d
    {standard input}:654    .data.T_param:00000000 T_param
    {standard input}:651    .data.T_param:00000000 $d
    {standard input}:669    .data.T_param_1:00000000 T_param_1
    {standard input}:666    .data.T_param_1:00000000 $d
    {standard input}:680    .text.main:00000000 $t
    {standard input}:685    .text.main:00000000 main
    {standard input}:1528   .text.Hall_init:00000000 Hall_init
    {standard input}:1807   .text.Calculation:00000000 Calculation
    {standard input}:756    .text.main:0000005c $d
    {standard input}:766    .text.CAN0_1_IRQHandler:00000000 $t
    {standard input}:771    .text.CAN0_1_IRQHandler:00000000 CAN0_1_IRQHandler
    {standard input}:911    .text.CAN0_1_IRQHandler:000000e8 $d
    {standard input}:921    .text.CAN0_0_IRQHandler:00000000 $t
    {standard input}:926    .text.CAN0_0_IRQHandler:00000000 CAN0_0_IRQHandler
    {standard input}:999    .text.CAN0_0_IRQHandler:00000050 $d
    {standard input}:1010   .text.CCU43_0_IRQHandler:00000000 $t
    {standard input}:1015   .text.CCU43_0_IRQHandler:00000000 CCU43_0_IRQHandler
    {standard input}:1174   .text.CCU43_0_IRQHandler:00000138 $d
    {standard input}:1190   .text.CCU43_3_IRQHandler:00000000 $t
    {standard input}:1195   .text.CCU43_3_IRQHandler:00000000 CCU43_3_IRQHandler
    {standard input}:1240   .text.CCU43_3_IRQHandler:0000002c $d
    {standard input}:1247   .text.ERU1_2_IRQHandler:00000000 $t
    {standard input}:1252   .text.ERU1_2_IRQHandler:00000000 ERU1_2_IRQHandler
    {standard input}:1651   .text.HallSensor:00000000 HallSensor
    {standard input}:1315   .text.ERU1_2_IRQHandler:00000050 $d
    {standard input}:1324   .text.ERU1_0_IRQHandler:00000000 $t
    {standard input}:1329   .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
    {standard input}:1363   .text.ERU1_0_IRQHandler:00000020 $d
    {standard input}:1370   .text.ERU1_3_IRQHandler:00000000 $t
    {standard input}:1375   .text.ERU1_3_IRQHandler:00000000 ERU1_3_IRQHandler
    {standard input}:1409   .text.ERU1_3_IRQHandler:00000020 $d
    {standard input}:1416   .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:1421   .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:1449   .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:1454   .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:1515   .text.CCU80_3_IRQHandler:00000058 $d
    {standard input}:1523   .text.Hall_init:00000000 $t
    {standard input}:1638   .text.Hall_init:0000008c $d
    {standard input}:1646   .text.HallSensor:00000000 $t
    {standard input}:1788   .text.HallSensor:000000c0 $d
    {standard input}:1802   .text.Calculation:00000000 $t
    {standard input}:2150   .text.Calculation:000002c8 $d
    {standard input}:2178   .text.Calculation:00000330 $t
    {standard input}:2923   .text.readCurrent:00000000 readCurrent
    {standard input}:2427   .text.Calculation:00000598 $d
    {standard input}:2453   .text.Calculation:000005f8 $t
    {standard input}:2813   .text.PID_Controller:00000000 PID_Controller
    {standard input}:2766   .text.Calculation:000008c0 $d
    {standard input}:2808   .text.PID_Controller:00000000 $t
    {standard input}:2913   .text.PID_Controller:000000bc $d
    {standard input}:2918   .text.readCurrent:00000000 $t
    {standard input}:3014   .text.readCurrent:00000098 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
DAVE_Init
CAN_NODE_Init
PWM_SVM_Start
f_rec_data
CAN_NODE_0
PWM_SVM_0
CAN_NODE_MO_Receive
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_dadd
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
PWM_SVM_SVMUpdate
Hall_A_ISR
Hall_B_ISR
Hall_C_ISR
__aeabi_ui2d
__aeabi_i2d
__aeabi_dsub
status_LED_red_cal_time
cosf
sinf
atanf
sqrtf
BUS_IO_Write
SPI_MASTER_Receive
SPI_ChipSelect
SPI_MASTER_0
