   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB137:
  26              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE137:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB138:
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE138:
 114 0022 00BF     	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_GetInput:
 120              	.LFB140:
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 334 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 139              	 .loc 1 337 0
 140 000c 7B68     	 ldr r3,[r7,#4]
 141 000e 5A6A     	 ldr r2,[r3,#36]
 142 0010 FB78     	 ldrb r3,[r7,#3]
 143 0012 22FA03F3 	 lsr r3,r2,r3
 144 0016 03F00103 	 and r3,r3,#1
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 338 0
 146 001a 1846     	 mov r0,r3
 147 001c 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 001e BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0020 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0024 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE140:
 162 0026 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	DIGITAL_IO_SetOutputHigh:
 168              	.LFB145:
 169              	 .file 2 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 170              	 .loc 2 269 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 80B5     	 push {r7,lr}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 7,-8
 178              	 .cfi_offset 14,-4
 179 0002 82B0     	 sub sp,sp,#8
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 185 0006 7860     	 str r0,[r7,#4]
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 186              	 .loc 2 271 0
 187 0008 7B68     	 ldr r3,[r7,#4]
 188 000a 1A68     	 ldr r2,[r3]
 189 000c 7B68     	 ldr r3,[r7,#4]
 190 000e 1B7C     	 ldrb r3,[r3,#16]
 191 0010 1046     	 mov r0,r2
 192 0012 1946     	 mov r1,r3
 193 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 194              	 .loc 2 272 0
 195 0018 0837     	 adds r7,r7,#8
 196              	.LCFI21:
 197              	 .cfi_def_cfa_offset 8
 198 001a BD46     	 mov sp,r7
 199              	.LCFI22:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 001c 80BD     	 pop {r7,pc}
 203              	 .cfi_endproc
 204              	.LFE145:
 206 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	DIGITAL_IO_SetOutputLow:
 212              	.LFB146:
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 213              	 .loc 2 316 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217 0000 80B5     	 push {r7,lr}
 218              	.LCFI23:
 219              	 .cfi_def_cfa_offset 8
 220              	 .cfi_offset 7,-8
 221              	 .cfi_offset 14,-4
 222 0002 82B0     	 sub sp,sp,#8
 223              	.LCFI24:
 224              	 .cfi_def_cfa_offset 16
 225 0004 00AF     	 add r7,sp,#0
 226              	.LCFI25:
 227              	 .cfi_def_cfa_register 7
 228 0006 7860     	 str r0,[r7,#4]
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 229              	 .loc 2 318 0
 230 0008 7B68     	 ldr r3,[r7,#4]
 231 000a 1A68     	 ldr r2,[r3]
 232 000c 7B68     	 ldr r3,[r7,#4]
 233 000e 1B7C     	 ldrb r3,[r3,#16]
 234 0010 1046     	 mov r0,r2
 235 0012 1946     	 mov r1,r3
 236 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 237              	 .loc 2 319 0
 238 0018 0837     	 adds r7,r7,#8
 239              	.LCFI26:
 240              	 .cfi_def_cfa_offset 8
 241 001a BD46     	 mov sp,r7
 242              	.LCFI27:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 001c 80BD     	 pop {r7,pc}
 246              	 .cfi_endproc
 247              	.LFE146:
 249 001e 00BF     	 .section .text.PIN_INTERRUPT_GetPinValue,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	PIN_INTERRUPT_GetPinValue:
 255              	.LFB308:
 256              	 .file 3 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @file pin_interrupt.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @date 2016-03-02
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * NOTE:
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @cond
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT v4.0.2 - The PIN_INTERRUPT APP invokes user interrupt handler in a response to ris
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                        edge event signal on a pin.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Copyright (c) 2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * All rights reserved.                        
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * following conditions are met:   
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer.                        
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.     
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                         
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   products derived from this software without specific prior written permission. 
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * with Infineon Technologies AG (dave@infineon.com).         
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 2015-12-03:
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     - Initial version for DAVEv4. <BR>
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcond 
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifndef PIN_INTERRUPT_H
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #define PIN_INTERRUPT_H
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * HEADER FILES                                                                                    
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_scu.h>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_gpio.h>
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_eru.h>
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <DAVE_Common.h>
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include "pin_interrupt_conf.h"
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * MACROS                                                                                          
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_MINOR_VERSION >= 1U) && \
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_PATCH_VERSION >= 6U)))
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #error "PIN_INTERRUPT requires XMC Peripheral Library v2.1.6 or higher"
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup App_publicparam
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  @brief Initialization data structure for PIN_INTERRUPT APP
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ENUMS
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /*
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief enumeration for PIN_INTERRUPT APP
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_STATUS
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_SUCCESS = 0U,        /**<APP initialization is success */
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_FAILURE = 1U         /**<APP initialization is failure */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_STATUS_t;
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Defines trigger edge for the event generation by ETLx (Event Trigger Logic, x = [0 to 3]) unit, 
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * from ERSx(Event request source, x = [0 to 3]) unit.
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_EDGE
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_NONE = 0U, /**< no event enabled */
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_RISING = 1U,   /**< detection of rising edge generates the event */
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_FALLING = 2U,  /**< detection of falling edge generates the event */
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_BOTH = 3U      /**< detection of either edges generates the event */
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_EDGE_t;
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * DATA STRUCTURES
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** ***************************************************************************************************
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_datastructures
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Configuration structure for PIN_INTERRUPT APP
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef struct PIN_INTERRUPT
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_t *eru;  /**< Mapped ERU module */
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_PORT_t *port;  /**< Mapped port number */
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_CONFIG_t gpio_config;   /**< Initializes the input pin characteristics */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_ETL_CONFIG_t etl_config;  /**< reference to ERUx_ETLy (x = [0..1], y = [0..4])
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****                                                       module configuration */
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_SCU_IRQCTRL_t irqctrl;  /**< selects the interrupt source for a NVIC interrupt node*/
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   IRQn_Type IRQn;       /**< Mapped NVIC Node */
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_priority; 	  /**< Node Interrupt Priority */
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_FAMILY == XMC4)
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_subpriority;  /**< Node Interrupt SubPriority only valid for XMC4x */
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t etl; /*< ETLx channel (x = [0..3])*/
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t ogu; /*< OGUy channel (y = [0..3])*/
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t pin; /*< Mapped pin number */
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   bool enable_at_init;  /**< Interrupt enable for Node at initialization*/
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_t;
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifdef __cplusplus
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** extern "C" {
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * API Prototypes
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_apidoc
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Get PIN_INTERRUPT APP version
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description: </b><br>
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * The function can be used to check application software compatibility with a
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * specific version of the APP.
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void) {
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t init_status;
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_APP_VERSION_t version;
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // Initialize PIN_INTERRUPT APP:
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // PIN_INTERRUPT_Init() is called from within DAVE_Init().
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   init_status = DAVE_Init();
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if (DAVE_STATUS_SUCCESS == init_status)
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     version = PIN_INTERRUPT_GetAppVersion();
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     if (version.major != 4U) {
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *       // Probably, not the right version.
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     // More code here
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** DAVE_APP_VERSION_t PIN_INTERRUPT_GetAppVersion(void);
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Initializes a PIN_INTERRUPT APP instance
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_SUCCESS             : if initialization is successful\n
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_FAILURE             : if initialization is failed
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description:</b><br>
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT_Init API is called during initialization of DAVE APPS. This API Initializes input 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ERU and OGU hardware module initialization, Configures NVIC node and its priority in order to ge
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void)
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * {
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t status;
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle);
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Enables the IRQ.
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_EnableIRQ(handle->IRQn);
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Disables the IRQ.
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Disable(&PIN_INTERRUPT_0);
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Disable(const PIN_INTERRUPT_t *const handle)
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Disable: Handler null pointer", handle != NULL);
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_DisableIRQ(handle->IRQn);
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @brief Read input level of port pin.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @return uint32_t input logic level. Range:0-1
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * \par<b>Description:</b><br>
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * This function reads the Pn_IN register and returns the current logical value at the GPIO pin.
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * Example Usage:
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @code
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * int main(void)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * {
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   DAVE_STATUS_t status;
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   uint32_t pin_status;
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   status = DAVE_Init();   // (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0) is called within
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   if(status == DAVE_STATUS_SUCCESS)
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   else
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     while(1U)
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   while(1U)
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     pin_status = PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_0);
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     if(pin_status == 1)
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 339:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     else
 340:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 341:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 342:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 343:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 344:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   return (1);
 345:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * }
 346:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *  @endcode
 347:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** */
 348:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
 349:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 257              	 .loc 3 349 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI28:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI29:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI30:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
 350:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
 351:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   return (XMC_GPIO_GetInput(handle->port, handle->pin));
 273              	 .loc 3 351 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 5A68     	 ldr r2,[r3,#4]
 276 000c 7B68     	 ldr r3,[r7,#4]
 277 000e 93F82130 	 ldrb r3,[r3,#33]
 278 0012 1046     	 mov r0,r2
 279 0014 1946     	 mov r1,r3
 280 0016 FFF7FEFF 	 bl XMC_GPIO_GetInput
 281 001a 0346     	 mov r3,r0
 352:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 282              	 .loc 3 352 0
 283 001c 1846     	 mov r0,r3
 284 001e 0837     	 adds r7,r7,#8
 285              	.LCFI31:
 286              	 .cfi_def_cfa_offset 8
 287 0020 BD46     	 mov sp,r7
 288              	.LCFI32:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 0022 80BD     	 pop {r7,pc}
 292              	 .cfi_endproc
 293              	.LFE308:
 295              	 .global Torque_control
 296              	 .section .bss.Torque_control,"aw",%nobits
 299              	Torque_control:
 300 0000 00       	 .space 1
 301              	 .global Speed_control
 302              	 .section .bss.Speed_control,"aw",%nobits
 305              	Speed_control:
 306 0000 00       	 .space 1
 307              	 .global CAN_control
 308              	 .section .bss.CAN_control,"aw",%nobits
 311              	CAN_control:
 312 0000 00       	 .space 1
 313              	 .comm Current_U,4,4
 314              	 .comm Current_V,4,4
 315              	 .comm Current_W,4,4
 316              	 .global lookup_table
 317              	 .section .data.lookup_table,"aw",%progbits
 318              	 .align 2
 321              	lookup_table:
 322 0000 00       	 .byte 0
 323 0001 00       	 .byte 0
 324 0002 00       	 .byte 0
 325 0003 00       	 .byte 0
 326 0004 00       	 .byte 0
 327 0005 00       	 .byte 0
 328 0006 00       	 .byte 0
 329 0007 00       	 .byte 0
 330 0008 00       	 .byte 0
 331 0009 00       	 .byte 0
 332 000a 00       	 .byte 0
 333 000b FF       	 .byte -1
 334 000c 00       	 .byte 0
 335 000d 01       	 .byte 1
 336 000e 00       	 .byte 0
 337 000f 00       	 .byte 0
 338 0010 00       	 .byte 0
 339 0011 00       	 .byte 0
 340 0012 00       	 .byte 0
 341 0013 01       	 .byte 1
 342 0014 00       	 .byte 0
 343 0015 00       	 .byte 0
 344 0016 FF       	 .byte -1
 345 0017 00       	 .byte 0
 346 0018 00       	 .byte 0
 347 0019 01       	 .byte 1
 348 001a FF       	 .byte -1
 349 001b 00       	 .byte 0
 350 001c 00       	 .byte 0
 351 001d 00       	 .byte 0
 352 001e 00       	 .byte 0
 353 001f 00       	 .byte 0
 354 0020 00       	 .byte 0
 355 0021 00       	 .byte 0
 356 0022 00       	 .byte 0
 357 0023 00       	 .byte 0
 358 0024 00       	 .byte 0
 359 0025 FF       	 .byte -1
 360 0026 01       	 .byte 1
 361 0027 00       	 .byte 0
 362 0028 00       	 .byte 0
 363 0029 FF       	 .byte -1
 364 002a 00       	 .byte 0
 365 002b 00       	 .byte 0
 366 002c 01       	 .byte 1
 367 002d 00       	 .byte 0
 368 002e 00       	 .byte 0
 369 002f 00       	 .byte 0
 370 0030 00       	 .byte 0
 371 0031 00       	 .byte 0
 372 0032 01       	 .byte 1
 373 0033 00       	 .byte 0
 374 0034 FF       	 .byte -1
 375 0035 00       	 .byte 0
 376 0036 00       	 .byte 0
 377 0037 00       	 .byte 0
 378 0038 00       	 .byte 0
 379 0039 00       	 .byte 0
 380 003a 00       	 .byte 0
 381 003b 00       	 .byte 0
 382 003c 00       	 .byte 0
 383 003d 00       	 .byte 0
 384 003e 00       	 .byte 0
 385 003f 00       	 .byte 0
 386              	 .global sector
 387              	 .section .bss.sector,"aw",%nobits
 390              	sector:
 391 0000 00       	 .space 1
 392              	 .global direction
 393              	 .section .bss.direction,"aw",%nobits
 396              	direction:
 397 0000 00       	 .space 1
 398              	 .global enc_val
 399              	 .section .bss.enc_val,"aw",%nobits
 400              	 .align 1
 403              	enc_val:
 404 0000 0000     	 .space 2
 405              	 .global time_since_A
 406              	 .section .bss.time_since_A,"aw",%nobits
 407              	 .align 2
 410              	time_since_A:
 411 0000 00000000 	 .space 4
 412              	 .global time_since_B
 413              	 .section .bss.time_since_B,"aw",%nobits
 414              	 .align 2
 417              	time_since_B:
 418 0000 00000000 	 .space 4
 419              	 .global time_since_C
 420              	 .section .bss.time_since_C,"aw",%nobits
 421              	 .align 2
 424              	time_since_C:
 425 0000 00000000 	 .space 4
 426              	 .global time_180deg
 427              	 .section .data.time_180deg,"aw",%progbits
 428              	 .align 2
 431              	time_180deg:
 432 0000 E8030000 	 .word 1000
 433              	 .global time_180deg_cal
 434              	 .section .data.time_180deg_cal,"aw",%progbits
 435              	 .align 2
 438              	time_180deg_cal:
 439 0000 E8030000 	 .word 1000
 440              	 .comm last_Hall_trig,1,1
 441              	 .global angle_in_sector
 442              	 .section .data.angle_in_sector,"aw",%progbits
 443              	 .align 2
 446              	angle_in_sector:
 447 0000 0000F041 	 .word 1106247680
 448              	 .global angle_phi
 449              	 .section .bss.angle_phi,"aw",%nobits
 450              	 .align 2
 453              	angle_phi:
 454 0000 00000000 	 .space 4
 455              	 .comm ialpha,4,4
 456              	 .comm ibeta,4,4
 457              	 .comm iq,4,4
 458              	 .comm id,4,4
 459              	 .comm Valpha,4,4
 460              	 .comm Vbeta,4,4
 461              	 .global omega_ele_rads
 462              	 .section .bss.omega_ele_rads,"aw",%nobits
 463              	 .align 2
 466              	omega_ele_rads:
 467 0000 00000000 	 .space 4
 468              	 .global omega_mech_rps
 469              	 .section .bss.omega_mech_rps,"aw",%nobits
 470              	 .align 2
 473              	omega_mech_rps:
 474 0000 00000000 	 .space 4
 475              	 .global omega_mech_rps_temp
 476              	 .section .bss.omega_mech_rps_temp,"aw",%nobits
 477              	 .align 2
 480              	omega_mech_rps_temp:
 481 0000 00000000 	 .space 4
 482              	 .global omega_ele_degs
 483              	 .section .bss.omega_ele_degs,"aw",%nobits
 484              	 .align 2
 487              	omega_ele_degs:
 488 0000 00000000 	 .space 4
 489              	 .global speed_ref
 490              	 .section .bss.speed_ref,"aw",%nobits
 491              	 .align 2
 494              	speed_ref:
 495 0000 00000000 	 .space 4
 496              	 .global omega_ele_rads_ref
 497              	 .section .bss.omega_ele_rads_ref,"aw",%nobits
 498              	 .align 2
 501              	omega_ele_rads_ref:
 502 0000 00000000 	 .space 4
 503              	 .global iq_ref
 504              	 .section .bss.iq_ref,"aw",%nobits
 505              	 .align 2
 508              	iq_ref:
 509 0000 00000000 	 .space 4
 510              	 .global T_ref
 511              	 .section .bss.T_ref,"aw",%nobits
 512              	 .align 2
 515              	T_ref:
 516 0000 00000000 	 .space 4
 517              	 .global Vd_ref
 518              	 .section .bss.Vd_ref,"aw",%nobits
 519              	 .align 2
 522              	Vd_ref:
 523 0000 00000000 	 .space 4
 524              	 .global Vq_ref
 525              	 .section .bss.Vq_ref,"aw",%nobits
 526              	 .align 2
 529              	Vq_ref:
 530 0000 00000000 	 .space 4
 531              	 .comm Speeds_int16_r,8,4
 532              	 .global CAN_speed_ref
 533              	 .section .bss.CAN_speed_ref,"aw",%nobits
 534              	 .align 2
 537              	CAN_speed_ref:
 538 0000 00000000 	 .space 4
 539              	 .global CAN_new_meassage
 540              	 .section .bss.CAN_new_meassage,"aw",%nobits
 543              	CAN_new_meassage:
 544 0000 00       	 .space 1
 545              	 .global CAN_no_com_counter
 546              	 .section .bss.CAN_no_com_counter,"aw",%nobits
 549              	CAN_no_com_counter:
 550 0000 00       	 .space 1
 551              	 .global distance_180deg_ele_count
 552              	 .section .bss.distance_180deg_ele_count,"aw",%nobits
 553              	 .align 2
 556              	distance_180deg_ele_count:
 557 0000 00000000 	 .space 4
 558              	 .global Speed_act
 559              	 .section .bss.Speed_act,"aw",%nobits
 560              	 .align 2
 563              	Speed_act:
 564 0000 00000000 	 .space 4
 565              	 .global distance
 566              	 .section .bss.distance,"aw",%nobits
 567              	 .align 2
 570              	distance:
 571 0000 00000000 	 .space 4
 572              	 .comm modulation_index,4,4
 573              	 .comm modulation_index_scaled,4,4
 574              	 .comm angle_ab,4,4
 575              	 .comm angle_ab_rad,4,4
 576              	 .comm amplitude_ab,4,4
 577              	 .global Ts
 578              	 .section .data.Ts,"aw",%progbits
 579              	 .align 2
 582              	Ts:
 583 0000 17B75138 	 .word 944879383
 584              	 .global Tcyc
 585              	 .section .data.Tcyc,"aw",%progbits
 586              	 .align 2
 589              	Tcyc:
 590 0000 17B75139 	 .word 961656599
 591              	 .global scaling_factor
 592              	 .section .data.scaling_factor,"aw",%progbits
 593              	 .align 2
 596              	scaling_factor:
 597 0000 00000743 	 .word 1124532224
 598              	 .comm amplitude_corrected,4,4
 599              	 .global count
 600              	 .section .bss.count,"aw",%nobits
 603              	count:
 604 0000 00       	 .space 1
 605              	 .global offset_pos
 606              	 .section .data.offset_pos,"aw",%progbits
 607              	 .align 2
 610              	offset_pos:
 611 0000 0000D8C1 	 .word -1042808832
 612              	 .global offset_neg
 613              	 .section .data.offset_neg,"aw",%progbits
 614              	 .align 2
 617              	offset_neg:
 618 0000 0000A0C1 	 .word -1046478848
 619              	 .global Iq_param
 620              	 .section .data.Iq_param,"aw",%progbits
 621              	 .align 2
 624              	Iq_param:
 625 0000 CDCC4C3D 	 .word 1028443341
 626 0004 0000C841 	 .word 1103626240
 627 0008 00000000 	 .word 0
 628 000c 0000C842 	 .word 1120403456
 629 0010 0000C8C2 	 .word -1027080192
 630 0014 00000000 	 .word 0
 631 0018 00000000 	 .word 0
 632 001c 00000000 	 .word 0
 633 0020 00000000 	 .space 4
 634              	 .global Id_param
 635              	 .section .data.Id_param,"aw",%progbits
 636              	 .align 2
 639              	Id_param:
 640 0000 CDCC4C3D 	 .word 1028443341
 641 0004 0000C841 	 .word 1103626240
 642 0008 00000000 	 .word 0
 643 000c 0000C842 	 .word 1120403456
 644 0010 0000C8C2 	 .word -1027080192
 645 0014 00000000 	 .word 0
 646 0018 00000000 	 .word 0
 647 001c 00000000 	 .word 0
 648 0020 00000000 	 .space 4
 649              	 .global T_param
 650              	 .section .data.T_param,"aw",%progbits
 651              	 .align 2
 654              	T_param:
 655 0000 0AD7233C 	 .word 1008981770
 656 0004 0AD7233C 	 .word 1008981770
 657 0008 00000000 	 .word 0
 658 000c 00000040 	 .word 1073741824
 659 0010 000000C0 	 .word -1073741824
 660 0014 00000000 	 .word 0
 661 0018 00000000 	 .word 0
 662 001c 00000000 	 .word 0
 663 0020 00000000 	 .space 4
 664              	 .global T_param_1
 665              	 .section .data.T_param_1,"aw",%progbits
 666              	 .align 2
 669              	T_param_1:
 670 0000 0AD7A33B 	 .word 1000593162
 671 0004 0AD7233C 	 .word 1008981770
 672 0008 00000000 	 .word 0
 673 000c 0000C03F 	 .word 1069547520
 674 0010 0000C0BF 	 .word -1077936128
 675 0014 00000000 	 .word 0
 676 0018 00000000 	 .word 0
 677 001c 00000000 	 .word 0
 678 0020 00000000 	 .space 4
 679              	 .section .text.main,"ax",%progbits
 680              	 .align 2
 681              	 .global main
 682              	 .thumb
 683              	 .thumb_func
 685              	main:
 686              	.LFB473:
 687              	 .file 4 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2020 Jan 02 10:21:43
   5:../main.c     ****  *  Author: Baldo
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** // status: 11.05.2022
   9:../main.c     **** 
  10:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  11:../main.c     **** #include <math.h>
  12:../main.c     **** #include <stdio.h> //for printf
  13:../main.c     **** 
  14:../main.c     **** //#######################
  15:../main.c     **** //FUNCTION DECLARATION
  16:../main.c     **** //########################
  17:../main.c     **** float readCurrent(uint8_t);
  18:../main.c     **** void Hall_init(void);
  19:../main.c     **** void HallSensor(void);
  20:../main.c     **** void Calculation(void);
  21:../main.c     **** 
  22:../main.c     **** //########################
  23:../main.c     **** //VARIABLE DECLARATION
  24:../main.c     **** //########################
  25:../main.c     **** 
  26:../main.c     **** // NEED to be set
  27:../main.c     **** //motor
  28:../main.c     **** #define MOTOR_NUM 1 // for trque dirction motro 1 differtn form rest so far
  29:../main.c     **** #define MOTOR_ON_ROVER 3// 0 front left 1 front right 2 back left 3 back right
  30:../main.c     **** 
  31:../main.c     **** //control type
  32:../main.c     **** uint8_t Torque_control = 0;
  33:../main.c     **** uint8_t Speed_control = 0; //if 0 is torque control if 1 is speed control
  34:../main.c     **** uint8_t CAN_control = 0; // id 1 CAN speed controll aktive
  35:../main.c     **** 
  36:../main.c     **** 
  37:../main.c     **** #define IQ_REF_MAX 5
  38:../main.c     **** #define CAN_NO_COM_TH 250
  39:../main.c     **** #define MAX_Speed_CAN 2
  40:../main.c     **** #define SPEED_LIMIT_CTRL_TO_ZERO 100 //omega_ele rad/s
  41:../main.c     **** #define TIME_OMEGA_0  5000 //time since last hall before omgea set to 0 in 100us
  42:../main.c     **** 
  43:../main.c     **** // Define often used vaules to decrease computational effort
  44:../main.c     **** #define PI 3.14159265
  45:../main.c     **** #define TwoThird 0.66666667
  46:../main.c     **** #define TwoPiThird 2.0943951
  47:../main.c     **** #define FourPiThird 4.1887902
  48:../main.c     **** #define Pi180 0.01745329
  49:../main.c     **** 
  50:../main.c     **** #define ANGLE_ONE_DEGREE (46603U)
  51:../main.c     **** //#define ANGLE_60_DEGREE	 (2796203U)
  52:../main.c     **** //#define ANGLE_180_DEGREE (8388608U)
  53:../main.c     **** 
  54:../main.c     **** //#define ANGLE_LSB (9455) // 2^24 corresponds to 360°. For a timer interrupt delta time of 100us 
  55:../main.c     **** 
  56:../main.c     **** // Define Chip select Pins for Current measurement via SPI Interface
  57:../main.c     **** #define ChipSelect_U 0b110
  58:../main.c     **** #define ChipSelect_V 0b101
  59:../main.c     **** #define ChipSelect_W 0b011
  60:../main.c     **** #define J 0.0023064 //SK J = 1/2 * m_wheel * r_wheel^2 = 1/2*1.2kg*(62mm)^2
  61:../main.c     **** #define K_T 0.21 //SK torque constant in Nm/A
  62:../main.c     **** #define K_inv 30/1.732 // K_inv = V / m = V_DC / 2 * 2/sqrt(3) = V_DC/sqrt(3)
  63:../main.c     **** //#define Psi_p 0.0082  60/  (2 * PI) * 1.4142 // Psi_p = K_back_EMF = 0.0082 V / rpm_mech --> 60 t
  64:../main.c     **** //#define Ls 0.00088 // Ls = Lm*1.1 = 0.8mH * 1.1 = 0.00088H
  65:../main.c     **** #define PPZ 11
  66:../main.c     **** #define WHEEL_R 0.0675 //0.135/2 straigt vaule other thing casued problems
  67:../main.c     **** 
  68:../main.c     **** float Current_U;
  69:../main.c     **** float Current_V;
  70:../main.c     **** float Current_W;
  71:../main.c     **** 
  72:../main.c     **** // Declaration of Lookup Table
  73:../main.c     **** int8_t lookup_table[] = {0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,-1,0,0,1,-1,0,0,0,0,0,0,0,0,0
  74:../main.c     **** //access via the index in the  form of the 6 bits (3 previous hall states and 3 actual  hall states
  75:../main.c     **** //for each of the 2^6 possibilities of sequence of hall events  it has been thought about the wavef
  76:../main.c     **** 
  77:../main.c     **** volatile int8_t sector = 0;
  78:../main.c     **** volatile int8_t direction = 0;              // direction +1/-1 -> CW and CCW
  79:../main.c     **** volatile uint16_t enc_val = 0;          // old and new values of all Hall Sensors
  80:../main.c     **** volatile uint32_t time_since_A = 0;	// time between to edges Hall A
  81:../main.c     **** volatile uint32_t time_since_B = 0; // time between to edges Hall B
  82:../main.c     **** volatile uint32_t time_since_C = 0; // time between to edges Hall C
  83:../main.c     **** volatile uint32_t time_180deg = 1000;        // time which last triggered HAL sensor needed for 180
  84:../main.c     **** volatile uint32_t time_180deg_cal = 1000;
  85:../main.c     **** volatile char last_Hall_trig;			//last triggered Hall Sensor A/B/C
  86:../main.c     **** 
  87:../main.c     **** float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60°
  88:../main.c     **** //volatile uint32_t TIME_OMEGA_0 = 50000; // t over this therschold assumed to be zero
  89:../main.c     **** 
  90:../main.c     **** float angle_phi = 0;
  91:../main.c     **** float ialpha,ibeta,iq,id,Valpha,Vbeta;
  92:../main.c     **** 
  93:../main.c     **** volatile float omega_ele_rads = 0; 	// electrical rad / sec //current real velocity calculated from
  94:../main.c     **** volatile float omega_mech_rps = 0;	//SK	//mechanical rounds per second
  95:../main.c     **** volatile float omega_mech_rps_temp = 0; //SK	//since dividing through the incremental (counted up) 
  96:../main.c     **** //volatile float omega_ele_rads_ref = -2*69.11; //1*69.11; //SK		//target velocity electrical in ra
  97:../main.c     **** 
  98:../main.c     **** volatile float omega_ele_degs = 0;
  99:../main.c     **** 
 100:../main.c     **** // REF vaules given to PI controller
 101:../main.c     **** float speed_ref = 0.0; //meters per second
 102:../main.c     **** float omega_ele_rads_ref = 0.0; // electrical rad per second
 103:../main.c     **** float iq_ref = 0.0;
 104:../main.c     **** float T_ref = 0.0;
 105:../main.c     **** float Vd_ref = 0;
 106:../main.c     **** float Vq_ref = 0;
 107:../main.c     **** 
 108:../main.c     **** // CAN vars
 109:../main.c     **** int16_t Speeds_int16_r[4];
 110:../main.c     **** float CAN_speed_ref = 0.0;
 111:../main.c     **** uint8_t CAN_new_meassage = 0; // if 1 recived can data
 112:../main.c     **** uint8_t CAN_no_com_counter = 0;
 113:../main.c     **** // distacne vaule back over can
 114:../main.c     **** int distance_180deg_ele_count = 0;
 115:../main.c     **** float Speed_act = 0;
 116:../main.c     **** float distance = 0;
 117:../main.c     **** 
 118:../main.c     **** volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
 119:../main.c     **** volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which 
 120:../main.c     **** 
 121:../main.c     **** float angle_ab;
 122:../main.c     **** float angle_ab_rad;
 123:../main.c     **** float amplitude_ab;
 124:../main.c     **** 
 125:../main.c     **** float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
 126:../main.c     **** float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I
 127:../main.c     **** 
 128:../main.c     **** //float amp_limit_SVM_app = 2500;  Bo
 129:../main.c     **** 
 130:../main.c     **** // scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
 131:../main.c     **** float scaling_factor = 135;
 132:../main.c     **** float amplitude_corrected;
 133:../main.c     **** 
 134:../main.c     **** 
 135:../main.c     **** // Counter for calculation function -> only use a multiple of the SVM Interrupt
 136:../main.c     **** volatile uint8_t count = 0;
 137:../main.c     **** 
 138:../main.c     **** // Angle correction factor to align Current to Hall Sensor vuales form 14/04
 139:../main.c     **** float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
 140:../main.c     **** float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction
 141:../main.c     **** 
 142:../main.c     **** //################ PI
 143:../main.c     **** // PID Controller declaration for Id and Iq component
 144:../main.c     **** typedef struct{
 145:../main.c     **** 	float P,I,D;
 146:../main.c     **** 	float MaxLimit, MinLimit;
 147:../main.c     **** 	float Output;
 148:../main.c     **** 	float Deviation_old, Deviation_old2;
 149:../main.c     **** 	float Output_z;
 150:../main.c     **** }PID_param;
 151:../main.c     **** 
 152:../main.c     **** //Vuales 14/04 mit maurzio
 153:../main.c     **** //PID_param omegaq = {.P = 0.004, .I = 0.004, .D = 0.0, .MaxLimit =  0.5, .MinLimit = -0.5, .Output
 154:../main.c     **** PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output =
 155:../main.c     **** PID_param Id_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output =
 156:../main.c     **** PID_param T_param = {.P = 0.01, .I = 0.01, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Output = 0.0,
 157:../main.c     **** 
 158:../main.c     **** // for motro 1
 159:../main.c     **** PID_param T_param_1 = {.P = 0.005, .I = 0.01, .D = 0.0, .MaxLimit =  1.5, .MinLimit = -1.5, .Output
 160:../main.c     **** 
 161:../main.c     **** float PID_Controller(float,float,PID_param *param);
 162:../main.c     **** 
 163:../main.c     **** 
 164:../main.c     **** //########################
 165:../main.c     **** // MAIN
 166:../main.c     **** //########################
 167:../main.c     **** 
 168:../main.c     **** int main(void)
 169:../main.c     **** {
 688              	 .loc 4 169 0
 689              	 .cfi_startproc
 690              	 
 691              	 
 692 0000 80B5     	 push {r7,lr}
 693              	.LCFI33:
 694              	 .cfi_def_cfa_offset 8
 695              	 .cfi_offset 7,-8
 696              	 .cfi_offset 14,-4
 697 0002 82B0     	 sub sp,sp,#8
 698              	.LCFI34:
 699              	 .cfi_def_cfa_offset 16
 700 0004 00AF     	 add r7,sp,#0
 701              	.LCFI35:
 702              	 .cfi_def_cfa_register 7
 170:../main.c     ****   DAVE_STATUS_t status;
 171:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 703              	 .loc 4 171 0
 704 0006 FFF7FEFF 	 bl DAVE_Init
 705 000a 0346     	 mov r3,r0
 706 000c FB71     	 strb r3,[r7,#7]
 172:../main.c     **** 
 173:../main.c     ****   Hall_init();
 707              	 .loc 4 173 0
 708 000e FFF7FEFF 	 bl Hall_init
 174:../main.c     **** 
 175:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 709              	 .loc 4 175 0
 710 0012 FB79     	 ldrb r3,[r7,#7]
 711 0014 002B     	 cmp r3,#0
 712 0016 00D0     	 beq .L10
 713              	.L11:
 176:../main.c     ****   {
 177:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 178:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 179:../main.c     **** 
 180:../main.c     ****     while(1U)
 181:../main.c     ****     {
 182:../main.c     **** 
 183:../main.c     ****     }
 714              	 .loc 4 183 0 discriminator 1
 715 0018 FEE7     	 b .L11
 716              	.L10:
 184:../main.c     ****   }
 185:../main.c     **** 
 186:../main.c     ****   //Initialization of CAN
 187:../main.c     ****   	CAN_NODE_STATUS_t init_status;
 188:../main.c     ****   	init_status = CAN_NODE_Init(&CAN_NODE_0);
 717              	 .loc 4 188 0
 718 001a 0948     	 ldr r0,.L14
 719 001c FFF7FEFF 	 bl CAN_NODE_Init
 720 0020 0346     	 mov r3,r0
 721 0022 BB71     	 strb r3,[r7,#6]
 189:../main.c     **** 
 190:../main.c     ****   	if (init_status != CAN_NODE_STATUS_SUCCESS) {
 191:../main.c     ****   		XMC_DEBUG("CAN initialization failed\n");
 192:../main.c     ****   	}
 193:../main.c     **** 
 194:../main.c     ****   if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
 195:../main.c     **** 	  while(1U)
 196:../main.c     **** 	      {
 197:../main.c     **** 		//  printf("MOTOR_ON_ROVER number false");
 198:../main.c     **** 	      }
 199:../main.c     ****   }
 200:../main.c     **** 
 201:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 202:../main.c     ****   while(1U)
 203:../main.c     ****   {
 204:../main.c     **** 	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 722              	 .loc 4 204 0
 723 0024 0748     	 ldr r0,.L14+4
 724 0026 FFF7FEFF 	 bl PWM_SVM_Start
 725              	.L13:
 205:../main.c     **** 
 206:../main.c     **** 		  while(1U)
 207:../main.c     **** 		    {
 208:../main.c     **** 
 209:../main.c     **** 			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 726              	 .loc 4 209 0
 727 002a 074B     	 ldr r3,.L14+8
 728 002c 1B78     	 ldrb r3,[r3]
 729 002e DBB2     	 uxtb r3,r3
 730 0030 032B     	 cmp r3,#3
 731 0032 04D9     	 bls .L12
 210:../main.c     **** 			  {
 211:../main.c     **** 				  count=0;
 732              	 .loc 4 211 0
 733 0034 044B     	 ldr r3,.L14+8
 734 0036 0022     	 movs r2,#0
 735 0038 1A70     	 strb r2,[r3]
 212:../main.c     **** 				  Calculation();
 736              	 .loc 4 212 0
 737 003a FFF7FEFF 	 bl Calculation
 738              	.L12:
 213:../main.c     **** 			  }
 214:../main.c     **** 		    }
 739              	 .loc 4 214 0
 740 003e F4E7     	 b .L13
 741              	.L15:
 742              	 .align 2
 743              	.L14:
 744 0040 00000000 	 .word CAN_NODE_0
 745 0044 00000000 	 .word PWM_SVM_0
 746 0048 00000000 	 .word count
 747              	 .cfi_endproc
 748              	.LFE473:
 750              	 .section .text.CAN0_1_IRQHandler,"ax",%progbits
 751              	 .align 2
 752              	 .global CAN0_1_IRQHandler
 753              	 .thumb
 754              	 .thumb_func
 756              	CAN0_1_IRQHandler:
 757              	.LFB474:
 215:../main.c     ****   }
 216:../main.c     **** }
 217:../main.c     **** 
 218:../main.c     **** 
 219:../main.c     **** //########################
 220:../main.c     **** // INTERRUPTS
 221:../main.c     **** //########################
 222:../main.c     **** 
 223:../main.c     **** // CAN Communication
 224:../main.c     **** void CAN_RX_MO2_ISR(void){
 758              	 .loc 4 224 0
 759              	 .cfi_startproc
 760              	 
 761              	 
 762 0000 80B5     	 push {r7,lr}
 763              	.LCFI36:
 764              	 .cfi_def_cfa_offset 8
 765              	 .cfi_offset 7,-8
 766              	 .cfi_offset 14,-4
 767 0002 84B0     	 sub sp,sp,#16
 768              	.LCFI37:
 769              	 .cfi_def_cfa_offset 24
 770 0004 00AF     	 add r7,sp,#0
 771              	.LCFI38:
 772              	 .cfi_def_cfa_register 7
 225:../main.c     **** 		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
 773              	 .loc 4 225 0
 774 0006 384B     	 ldr r3,.L27
 775 0008 1B69     	 ldr r3,[r3,#16]
 776 000a 1B68     	 ldr r3,[r3]
 777 000c BB60     	 str r3,[r7,#8]
 226:../main.c     **** 		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
 778              	 .loc 4 226 0
 779 000e 364B     	 ldr r3,.L27
 780 0010 1B69     	 ldr r3,[r3,#16]
 781 0012 1846     	 mov r0,r3
 782 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 227:../main.c     **** 
 228:../main.c     **** 		uint8_t data_r[8];
 229:../main.c     **** 		 int i;
 230:../main.c     **** 		 for(i = 0 ; i < 8 ; i ++){
 783              	 .loc 4 230 0
 784 0018 0023     	 movs r3,#0
 785 001a FB60     	 str r3,[r7,#12]
 786 001c 0CE0     	 b .L17
 787              	.L18:
 231:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 788              	 .loc 4 231 0 discriminator 3
 789 001e BA68     	 ldr r2,[r7,#8]
 790 0020 FB68     	 ldr r3,[r7,#12]
 791 0022 1344     	 add r3,r3,r2
 792 0024 1033     	 adds r3,r3,#16
 793 0026 1978     	 ldrb r1,[r3]
 794 0028 3A46     	 mov r2,r7
 795 002a FB68     	 ldr r3,[r7,#12]
 796 002c 1344     	 add r3,r3,r2
 797 002e 0A46     	 mov r2,r1
 798 0030 1A70     	 strb r2,[r3]
 230:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 799              	 .loc 4 230 0 discriminator 3
 800 0032 FB68     	 ldr r3,[r7,#12]
 801 0034 0133     	 adds r3,r3,#1
 802 0036 FB60     	 str r3,[r7,#12]
 803              	.L17:
 230:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 804              	 .loc 4 230 0 is_stmt 0 discriminator 1
 805 0038 FB68     	 ldr r3,[r7,#12]
 806 003a 072B     	 cmp r3,#7
 807 003c EFDD     	 ble .L18
 232:../main.c     **** 		 }
 233:../main.c     **** 
 234:../main.c     **** 		 for(i = 0 ; i < 4 ; i ++){
 808              	 .loc 4 234 0 is_stmt 1
 809 003e 0023     	 movs r3,#0
 810 0040 FB60     	 str r3,[r7,#12]
 811 0042 1AE0     	 b .L19
 812              	.L20:
 235:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 813              	 .loc 4 235 0 discriminator 3
 814 0044 FB68     	 ldr r3,[r7,#12]
 815 0046 5B00     	 lsls r3,r3,#1
 816 0048 0133     	 adds r3,r3,#1
 817 004a 07F11002 	 add r2,r7,#16
 818 004e 1344     	 add r3,r3,r2
 819 0050 13F8103C 	 ldrb r3,[r3,#-16]
 820 0054 1B02     	 lsls r3,r3,#8
 821 0056 9AB2     	 uxth r2,r3
 822 0058 FB68     	 ldr r3,[r7,#12]
 823 005a 5B00     	 lsls r3,r3,#1
 824 005c 07F11001 	 add r1,r7,#16
 825 0060 0B44     	 add r3,r3,r1
 826 0062 13F8103C 	 ldrb r3,[r3,#-16]
 827 0066 9BB2     	 uxth r3,r3
 828 0068 1343     	 orrs r3,r3,r2
 829 006a 99B2     	 uxth r1,r3
 830 006c 1F4A     	 ldr r2,.L27+4
 831 006e FB68     	 ldr r3,[r7,#12]
 832 0070 22F81310 	 strh r1,[r2,r3,lsl#1]
 234:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 833              	 .loc 4 234 0 discriminator 3
 834 0074 FB68     	 ldr r3,[r7,#12]
 835 0076 0133     	 adds r3,r3,#1
 836 0078 FB60     	 str r3,[r7,#12]
 837              	.L19:
 234:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 838              	 .loc 4 234 0 is_stmt 0 discriminator 1
 839 007a FB68     	 ldr r3,[r7,#12]
 840 007c 032B     	 cmp r3,#3
 841 007e E1DD     	 ble .L20
 236:../main.c     **** 			 }
 237:../main.c     **** 
 238:../main.c     **** 		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 842              	 .loc 4 238 0 is_stmt 1
 843 0080 1A4B     	 ldr r3,.L27+4
 844 0082 DB88     	 ldrh r3,[r3,#6]
 845 0084 1BB2     	 sxth r3,r3
 846 0086 07EE903A 	 fmsr s15,r3
 847 008a F8EEE77A 	 fsitos s15,s15
 848 008e 9FED187A 	 flds s14,.L27+8
 849 0092 C7EE877A 	 fdivs s15,s15,s14
 850 0096 174B     	 ldr r3,.L27+12
 851 0098 C3ED007A 	 fsts s15,[r3]
 239:../main.c     **** 
 240:../main.c     **** 		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6
 241:../main.c     **** 
 242:../main.c     **** 		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 852              	 .loc 4 242 0
 853 009c 154B     	 ldr r3,.L27+12
 854 009e D3ED007A 	 flds s15,[r3]
 855 00a2 B0EE007A 	 fconsts s14,#0
 856 00a6 F4EEC77A 	 fcmpes s15,s14
 857 00aa F1EE10FA 	 fmstat
 858 00ae 03DD     	 ble .L21
 859              	 .loc 4 242 0 is_stmt 0 discriminator 1
 860 00b0 104B     	 ldr r3,.L27+12
 861 00b2 4FF08042 	 mov r2,#1073741824
 862 00b6 1A60     	 str r2,[r3]
 863              	.L21:
 243:../main.c     **** 		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 864              	 .loc 4 243 0 is_stmt 1
 865 00b8 0E4B     	 ldr r3,.L27+12
 866 00ba D3ED007A 	 flds s15,[r3]
 867 00be B8EE007A 	 fconsts s14,#128
 868 00c2 F4EEC77A 	 fcmpes s15,s14
 869 00c6 F1EE10FA 	 fmstat
 870 00ca 03D5     	 bpl .L23
 871              	 .loc 4 243 0 is_stmt 0 discriminator 1
 872 00cc 094B     	 ldr r3,.L27+12
 873 00ce 4FF04042 	 mov r2,#-1073741824
 874 00d2 1A60     	 str r2,[r3]
 875              	.L23:
 244:../main.c     **** 
 245:../main.c     **** 		CAN_new_meassage = 1;
 876              	 .loc 4 245 0 is_stmt 1
 877 00d4 084B     	 ldr r3,.L27+16
 878 00d6 0122     	 movs r2,#1
 879 00d8 1A70     	 strb r2,[r3]
 246:../main.c     **** 		CAN_no_com_counter = 0;
 880              	 .loc 4 246 0
 881 00da 084B     	 ldr r3,.L27+20
 882 00dc 0022     	 movs r2,#0
 883 00de 1A70     	 strb r2,[r3]
 247:../main.c     **** }
 884              	 .loc 4 247 0
 885 00e0 1037     	 adds r7,r7,#16
 886              	.LCFI39:
 887              	 .cfi_def_cfa_offset 8
 888 00e2 BD46     	 mov sp,r7
 889              	.LCFI40:
 890              	 .cfi_def_cfa_register 13
 891              	 
 892 00e4 80BD     	 pop {r7,pc}
 893              	.L28:
 894 00e6 00BF     	 .align 2
 895              	.L27:
 896 00e8 00000000 	 .word CAN_NODE_0
 897 00ec 00000000 	 .word Speeds_int16_r
 898 00f0 00007A44 	 .word 1148846080
 899 00f4 00000000 	 .word CAN_speed_ref
 900 00f8 00000000 	 .word CAN_new_meassage
 901 00fc 00000000 	 .word CAN_no_com_counter
 902              	 .cfi_endproc
 903              	.LFE474:
 905              	 .section .text.CAN0_0_IRQHandler,"ax",%progbits
 906              	 .align 2
 907              	 .global CAN0_0_IRQHandler
 908              	 .thumb
 909              	 .thumb_func
 911              	CAN0_0_IRQHandler:
 912              	.LFB475:
 248:../main.c     **** 
 249:../main.c     **** //CAN RX reste distance
 250:../main.c     **** void CAN_RX_MO7_ISR(void){
 913              	 .loc 4 250 0
 914              	 .cfi_startproc
 915              	 
 916              	 
 917 0000 80B5     	 push {r7,lr}
 918              	.LCFI41:
 919              	 .cfi_def_cfa_offset 8
 920              	 .cfi_offset 7,-8
 921              	 .cfi_offset 14,-4
 922 0002 84B0     	 sub sp,sp,#16
 923              	.LCFI42:
 924              	 .cfi_def_cfa_offset 24
 925 0004 00AF     	 add r7,sp,#0
 926              	.LCFI43:
 927              	 .cfi_def_cfa_register 7
 251:../main.c     **** 	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 928              	 .loc 4 251 0
 929 0006 124B     	 ldr r3,.L33
 930 0008 5B6A     	 ldr r3,[r3,#36]
 931 000a 1B68     	 ldr r3,[r3]
 932 000c BB60     	 str r3,[r7,#8]
 252:../main.c     **** 	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 933              	 .loc 4 252 0
 934 000e 104B     	 ldr r3,.L33
 935 0010 5B6A     	 ldr r3,[r3,#36]
 936 0012 1846     	 mov r0,r3
 937 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 253:../main.c     **** 
 254:../main.c     **** 	uint8_t data_r[4];
 255:../main.c     **** 	 int i;
 256:../main.c     **** 	 for(i = 0 ; i < 4 ; i ++){
 938              	 .loc 4 256 0
 939 0018 0023     	 movs r3,#0
 940 001a FB60     	 str r3,[r7,#12]
 941 001c 0CE0     	 b .L30
 942              	.L31:
 257:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 943              	 .loc 4 257 0 discriminator 3
 944 001e BA68     	 ldr r2,[r7,#8]
 945 0020 FB68     	 ldr r3,[r7,#12]
 946 0022 1344     	 add r3,r3,r2
 947 0024 1033     	 adds r3,r3,#16
 948 0026 1978     	 ldrb r1,[r3]
 949 0028 3A1D     	 adds r2,r7,#4
 950 002a FB68     	 ldr r3,[r7,#12]
 951 002c 1344     	 add r3,r3,r2
 952 002e 0A46     	 mov r2,r1
 953 0030 1A70     	 strb r2,[r3]
 256:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 954              	 .loc 4 256 0 discriminator 3
 955 0032 FB68     	 ldr r3,[r7,#12]
 956 0034 0133     	 adds r3,r3,#1
 957 0036 FB60     	 str r3,[r7,#12]
 958              	.L30:
 256:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 959              	 .loc 4 256 0 is_stmt 0 discriminator 1
 960 0038 FB68     	 ldr r3,[r7,#12]
 961 003a 032B     	 cmp r3,#3
 962 003c EFDD     	 ble .L31
 258:../main.c     **** 	 }
 259:../main.c     **** 
 260:../main.c     **** 	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 963              	 .loc 4 260 0 is_stmt 1
 964 003e FB79     	 ldrb r3,[r7,#7]
 965 0040 012B     	 cmp r3,#1
 966 0042 02D1     	 bne .L29
 967              	 .loc 4 260 0 is_stmt 0 discriminator 1
 968 0044 034B     	 ldr r3,.L33+4
 969 0046 0022     	 movs r2,#0
 970 0048 1A60     	 str r2,[r3]
 971              	.L29:
 261:../main.c     **** }
 972              	 .loc 4 261 0 is_stmt 1
 973 004a 1037     	 adds r7,r7,#16
 974              	.LCFI44:
 975              	 .cfi_def_cfa_offset 8
 976 004c BD46     	 mov sp,r7
 977              	.LCFI45:
 978              	 .cfi_def_cfa_register 13
 979              	 
 980 004e 80BD     	 pop {r7,pc}
 981              	.L34:
 982              	 .align 2
 983              	.L33:
 984 0050 00000000 	 .word CAN_NODE_0
 985 0054 00000000 	 .word distance_180deg_ele_count
 986              	 .cfi_endproc
 987              	.LFE475:
 989              	 .global __aeabi_f2d
 990              	 .global __aeabi_dmul
 991              	 .global __aeabi_ddiv
 992              	 .global __aeabi_d2f
 993              	 .global __aeabi_dadd
 994              	 .section .text.CCU43_0_IRQHandler,"ax",%progbits
 995              	 .align 2
 996              	 .global CCU43_0_IRQHandler
 997              	 .thumb
 998              	 .thumb_func
 1000              	CCU43_0_IRQHandler:
 1001              	.LFB476:
 262:../main.c     **** 
 263:../main.c     **** void CAN_TX_ISR(void){
 1002              	 .loc 4 263 0
 1003              	 .cfi_startproc
 1004              	 
 1005              	 
 1006 0000 80B5     	 push {r7,lr}
 1007              	.LCFI46:
 1008              	 .cfi_def_cfa_offset 8
 1009              	 .cfi_offset 7,-8
 1010              	 .cfi_offset 14,-4
 1011 0002 86B0     	 sub sp,sp,#24
 1012              	.LCFI47:
 1013              	 .cfi_def_cfa_offset 32
 1014 0004 00AF     	 add r7,sp,#0
 1015              	.LCFI48:
 1016              	 .cfi_def_cfa_register 7
 264:../main.c     **** 	int16_t Inverter_state[4] = {0};
 1017              	 .loc 4 264 0
 1018 0006 0023     	 movs r3,#0
 1019 0008 FB60     	 str r3,[r7,#12]
 1020 000a 0023     	 movs r3,#0
 1021 000c 3B61     	 str r3,[r7,#16]
 265:../main.c     **** 
 266:../main.c     **** 	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 1022              	 .loc 4 266 0
 1023 000e 0323     	 movs r3,#3
 1024 0010 BB81     	 strh r3,[r7,#12]
 267:../main.c     **** 
 268:../main.c     **** 	if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
 1025              	 .loc 4 268 0
 1026 0012 4D4B     	 ldr r3,.L38+16
 1027 0014 1B78     	 ldrb r3,[r3]
 1028 0016 FA2B     	 cmp r3,#250
 1029 0018 02D9     	 bls .L36
 1030              	 .loc 4 268 0 is_stmt 0 discriminator 1
 1031 001a 0023     	 movs r3,#0
 1032 001c BB81     	 strh r3,[r7,#12]
 1033 001e 01E0     	 b .L37
 1034              	.L36:
 269:../main.c     **** 	else Inverter_state[1] = 1;
 1035              	 .loc 4 269 0 is_stmt 1
 1036 0020 0123     	 movs r3,#1
 1037 0022 FB81     	 strh r3,[r7,#14]
 1038              	.L37:
 270:../main.c     **** 
 271:../main.c     **** 	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 1039              	 .loc 4 271 0
 1040 0024 494B     	 ldr r3,.L38+20
 1041 0026 1B68     	 ldr r3,[r3]
 1042 0028 1846     	 mov r0,r3
 1043 002a FFF7FEFF 	 bl __aeabi_f2d
 1044 002e 0246     	 mov r2,r0
 1045 0030 0B46     	 mov r3,r1
 1046 0032 1046     	 mov r0,r2
 1047 0034 1946     	 mov r1,r3
 1048 0036 40A3     	 adr r3,.L38
 1049 0038 D3E90023 	 ldrd r2,[r3]
 1050 003c FFF7FEFF 	 bl __aeabi_dmul
 1051 0040 0246     	 mov r2,r0
 1052 0042 0B46     	 mov r3,r1
 1053 0044 1046     	 mov r0,r2
 1054 0046 1946     	 mov r1,r3
 1055 0048 4FF00002 	 mov r2,#0
 1056 004c 404B     	 ldr r3,.L38+24
 1057 004e FFF7FEFF 	 bl __aeabi_ddiv
 1058 0052 0246     	 mov r2,r0
 1059 0054 0B46     	 mov r3,r1
 1060 0056 1046     	 mov r0,r2
 1061 0058 1946     	 mov r1,r3
 1062 005a FFF7FEFF 	 bl __aeabi_d2f
 1063 005e 0246     	 mov r2,r0
 1064 0060 3C4B     	 ldr r3,.L38+28
 1065 0062 1A60     	 str r2,[r3]
 272:../main.c     **** 	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
 273:../main.c     **** 	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 1066              	 .loc 4 273 0
 1067 0064 3B4B     	 ldr r3,.L38+28
 1068 0066 D3ED007A 	 flds s15,[r3]
 1069 006a 9FED3B7A 	 flds s14,.L38+32
 1070 006e 67EE877A 	 fmuls s15,s15,s14
 1071 0072 FDEEE77A 	 ftosizs s15,s15
 1072 0076 C7ED017A 	 fsts s15,[r7,#4]
 1073 007a BB88     	 ldrh r3,[r7,#4]
 1074 007c 9BB2     	 uxth r3,r3
 1075 007e 3B82     	 strh r3,[r7,#16]
 274:../main.c     **** 
 275:../main.c     **** 	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 1076              	 .loc 4 275 0
 1077 0080 364B     	 ldr r3,.L38+36
 1078 0082 1B68     	 ldr r3,[r3]
 1079 0084 07EE903A 	 fmsr s15,r3
 1080 0088 F8EEE77A 	 fsitos s15,s15
 1081 008c B0EE007A 	 fconsts s14,#0
 1082 0090 C7EE877A 	 fdivs s15,s15,s14
 1083 0094 B2EE067A 	 fconsts s14,#38
 1084 0098 C7EE877A 	 fdivs s15,s15,s14
 1085 009c 17EE900A 	 fmrs r0,s15
 1086 00a0 FFF7FEFF 	 bl __aeabi_f2d
 1087 00a4 0246     	 mov r2,r0
 1088 00a6 0B46     	 mov r3,r1
 1089 00a8 1046     	 mov r0,r2
 1090 00aa 1946     	 mov r1,r3
 1091 00ac 24A3     	 adr r3,.L38+8
 1092 00ae D3E90023 	 ldrd r2,[r3]
 1093 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1094 00b6 0246     	 mov r2,r0
 1095 00b8 0B46     	 mov r3,r1
 1096 00ba 1046     	 mov r0,r2
 1097 00bc 1946     	 mov r1,r3
 1098 00be FFF7FEFF 	 bl __aeabi_dadd
 1099 00c2 0246     	 mov r2,r0
 1100 00c4 0B46     	 mov r3,r1
 1101 00c6 1046     	 mov r0,r2
 1102 00c8 1946     	 mov r1,r3
 1103 00ca 1BA3     	 adr r3,.L38
 1104 00cc D3E90023 	 ldrd r2,[r3]
 1105 00d0 FFF7FEFF 	 bl __aeabi_dmul
 1106 00d4 0246     	 mov r2,r0
 1107 00d6 0B46     	 mov r3,r1
 1108 00d8 1046     	 mov r0,r2
 1109 00da 1946     	 mov r1,r3
 1110 00dc FFF7FEFF 	 bl __aeabi_d2f
 1111 00e0 0246     	 mov r2,r0
 1112 00e2 1F4B     	 ldr r3,.L38+40
 1113 00e4 1A60     	 str r2,[r3]
 276:../main.c     **** 	if(MOTOR_NUM == 6) distance = -distance;
 277:../main.c     **** 	Inverter_state[3] = distance * 1000; // to mm
 1114              	 .loc 4 277 0
 1115 00e6 1E4B     	 ldr r3,.L38+40
 1116 00e8 D3ED007A 	 flds s15,[r3]
 1117 00ec 9FED1A7A 	 flds s14,.L38+32
 1118 00f0 67EE877A 	 fmuls s15,s15,s14
 1119 00f4 FDEEE77A 	 ftosizs s15,s15
 1120 00f8 C7ED017A 	 fsts s15,[r7,#4]
 1121 00fc BB88     	 ldrh r3,[r7,#4]
 1122 00fe 9BB2     	 uxth r3,r3
 1123 0100 7B82     	 strh r3,[r7,#18]
 278:../main.c     **** 
 279:../main.c     **** 	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 1124              	 .loc 4 279 0
 1125 0102 0523     	 movs r3,#5
 1126 0104 FB75     	 strb r3,[r7,#23]
 280:../main.c     **** 	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 1127              	 .loc 4 280 0
 1128 0106 FB7D     	 ldrb r3,[r7,#23]
 1129 0108 164A     	 ldr r2,.L38+44
 1130 010a 0233     	 adds r3,r3,#2
 1131 010c 9B00     	 lsls r3,r3,#2
 1132 010e 1344     	 add r3,r3,r2
 1133 0110 5A68     	 ldr r2,[r3,#4]
 1134 0112 07F10C03 	 add r3,r7,#12
 1135 0116 1046     	 mov r0,r2
 1136 0118 1946     	 mov r1,r3
 1137 011a FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
 281:../main.c     **** 	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 1138              	 .loc 4 281 0
 1139 011e FB7D     	 ldrb r3,[r7,#23]
 1140 0120 104A     	 ldr r2,.L38+44
 1141 0122 0233     	 adds r3,r3,#2
 1142 0124 9B00     	 lsls r3,r3,#2
 1143 0126 1344     	 add r3,r3,r2
 1144 0128 5B68     	 ldr r3,[r3,#4]
 1145 012a 1846     	 mov r0,r3
 1146 012c FFF7FEFF 	 bl CAN_NODE_MO_Transmit
 282:../main.c     **** }
 1147              	 .loc 4 282 0
 1148 0130 1837     	 adds r7,r7,#24
 1149              	.LCFI49:
 1150              	 .cfi_def_cfa_offset 8
 1151 0132 BD46     	 mov sp,r7
 1152              	.LCFI50:
 1153              	 .cfi_def_cfa_register 13
 1154              	 
 1155 0134 80BD     	 pop {r7,pc}
 1156              	.L39:
 1157 0136 00BF     	 .align 3
 1158              	.L38:
 1159 0138 48E17A14 	 .word 343597384
 1160 013c AE47B13F 	 .word 1068582830
 1161 0140 F1D4C853 	 .word 1405670641
 1162 0144 FB210940 	 .word 1074340347
 1163 0148 00000000 	 .word CAN_no_com_counter
 1164 014c 00000000 	 .word omega_ele_rads
 1165 0150 00002640 	 .word 1076232192
 1166 0154 00000000 	 .word Speed_act
 1167 0158 00007A44 	 .word 1148846080
 1168 015c 00000000 	 .word distance_180deg_ele_count
 1169 0160 00000000 	 .word distance
 1170 0164 00000000 	 .word CAN_NODE_0
 1171              	 .cfi_endproc
 1172              	.LFE476:
 1174              	 .section .text.CCU43_3_IRQHandler,"ax",%progbits
 1175              	 .align 2
 1176              	 .global CCU43_3_IRQHandler
 1177              	 .thumb
 1178              	 .thumb_func
 1180              	CCU43_3_IRQHandler:
 1181              	.LFB477:
 283:../main.c     **** 
 284:../main.c     **** // 100us Timer for speed measurement
 285:../main.c     **** void TimeCounterISR(void){
 1182              	 .loc 4 285 0
 1183              	 .cfi_startproc
 1184              	 
 1185              	 
 1186              	 
 1187 0000 80B4     	 push {r7}
 1188              	.LCFI51:
 1189              	 .cfi_def_cfa_offset 4
 1190              	 .cfi_offset 7,-4
 1191 0002 00AF     	 add r7,sp,#0
 1192              	.LCFI52:
 1193              	 .cfi_def_cfa_register 7
 286:../main.c     **** 	time_since_A ++;
 1194              	 .loc 4 286 0
 1195 0004 094B     	 ldr r3,.L41
 1196 0006 1B68     	 ldr r3,[r3]
 1197 0008 0133     	 adds r3,r3,#1
 1198 000a 084A     	 ldr r2,.L41
 1199 000c 1360     	 str r3,[r2]
 287:../main.c     **** 	time_since_B ++;
 1200              	 .loc 4 287 0
 1201 000e 084B     	 ldr r3,.L41+4
 1202 0010 1B68     	 ldr r3,[r3]
 1203 0012 0133     	 adds r3,r3,#1
 1204 0014 064A     	 ldr r2,.L41+4
 1205 0016 1360     	 str r3,[r2]
 288:../main.c     **** 	time_since_C ++;
 1206              	 .loc 4 288 0
 1207 0018 064B     	 ldr r3,.L41+8
 1208 001a 1B68     	 ldr r3,[r3]
 1209 001c 0133     	 adds r3,r3,#1
 1210 001e 054A     	 ldr r2,.L41+8
 1211 0020 1360     	 str r3,[r2]
 289:../main.c     **** }
 1212              	 .loc 4 289 0
 1213 0022 BD46     	 mov sp,r7
 1214              	.LCFI53:
 1215              	 .cfi_def_cfa_register 13
 1216              	 
 1217 0024 5DF8047B 	 ldr r7,[sp],#4
 1218              	.LCFI54:
 1219              	 .cfi_restore 7
 1220              	 .cfi_def_cfa_offset 0
 1221 0028 7047     	 bx lr
 1222              	.L42:
 1223 002a 00BF     	 .align 2
 1224              	.L41:
 1225 002c 00000000 	 .word time_since_A
 1226 0030 00000000 	 .word time_since_B
 1227 0034 00000000 	 .word time_since_C
 1228              	 .cfi_endproc
 1229              	.LFE477:
 1231              	 .section .text.ERU1_2_IRQHandler,"ax",%progbits
 1232              	 .align 2
 1233              	 .global ERU1_2_IRQHandler
 1234              	 .thumb
 1235              	 .thumb_func
 1237              	ERU1_2_IRQHandler:
 1238              	.LFB478:
 290:../main.c     **** 
 291:../main.c     **** // Hall Sensors
 292:../main.c     **** void HallSensor_A_ISR(void){
 1239              	 .loc 4 292 0
 1240              	 .cfi_startproc
 1241              	 
 1242              	 
 1243 0000 80B5     	 push {r7,lr}
 1244              	.LCFI55:
 1245              	 .cfi_def_cfa_offset 8
 1246              	 .cfi_offset 7,-8
 1247              	 .cfi_offset 14,-4
 1248 0002 00AF     	 add r7,sp,#0
 1249              	.LCFI56:
 1250              	 .cfi_def_cfa_register 7
 293:../main.c     **** 	HallSensor();
 1251              	 .loc 4 293 0
 1252 0004 FFF7FEFF 	 bl HallSensor
 294:../main.c     **** 	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
 1253              	 .loc 4 294 0
 1254 0008 114B     	 ldr r3,.L46
 1255 000a 1B68     	 ldr r3,[r3]
 1256 000c 114A     	 ldr r2,.L46+4
 1257 000e 1360     	 str r3,[r2]
 295:../main.c     **** 	time_since_A = 0;						// measurement of speed -> time between change of Hall A
 1258              	 .loc 4 295 0
 1259 0010 0F4B     	 ldr r3,.L46
 1260 0012 0022     	 movs r2,#0
 1261 0014 1A60     	 str r2,[r3]
 296:../main.c     **** 	last_Hall_trig = 'A';
 1262              	 .loc 4 296 0
 1263 0016 104B     	 ldr r3,.L46+8
 1264 0018 4122     	 movs r2,#65
 1265 001a 1A70     	 strb r2,[r3]
 297:../main.c     **** 
 298:../main.c     **** 	if(direction == 1 ) distance_180deg_ele_count ++;
 1266              	 .loc 4 298 0
 1267 001c 0F4B     	 ldr r3,.L46+12
 1268 001e 1B78     	 ldrb r3,[r3]
 1269 0020 DBB2     	 uxtb r3,r3
 1270 0022 5BB2     	 sxtb r3,r3
 1271 0024 012B     	 cmp r3,#1
 1272 0026 05D1     	 bne .L44
 1273              	 .loc 4 298 0 is_stmt 0 discriminator 1
 1274 0028 0D4B     	 ldr r3,.L46+16
 1275 002a 1B68     	 ldr r3,[r3]
 1276 002c 0133     	 adds r3,r3,#1
 1277 002e 0C4A     	 ldr r2,.L46+16
 1278 0030 1360     	 str r3,[r2]
 1279 0032 0BE0     	 b .L43
 1280              	.L44:
 299:../main.c     **** 	else if(direction == -1 ) distance_180deg_ele_count --;
 1281              	 .loc 4 299 0 is_stmt 1
 1282 0034 094B     	 ldr r3,.L46+12
 1283 0036 1B78     	 ldrb r3,[r3]
 1284 0038 DBB2     	 uxtb r3,r3
 1285 003a 5BB2     	 sxtb r3,r3
 1286 003c B3F1FF3F 	 cmp r3,#-1
 1287 0040 04D1     	 bne .L43
 1288              	 .loc 4 299 0 is_stmt 0 discriminator 1
 1289 0042 074B     	 ldr r3,.L46+16
 1290 0044 1B68     	 ldr r3,[r3]
 1291 0046 013B     	 subs r3,r3,#1
 1292 0048 054A     	 ldr r2,.L46+16
 1293 004a 1360     	 str r3,[r2]
 1294              	.L43:
 300:../main.c     **** }
 1295              	 .loc 4 300 0 is_stmt 1
 1296 004c 80BD     	 pop {r7,pc}
 1297              	.L47:
 1298 004e 00BF     	 .align 2
 1299              	.L46:
 1300 0050 00000000 	 .word time_since_A
 1301 0054 00000000 	 .word time_180deg
 1302 0058 00000000 	 .word last_Hall_trig
 1303 005c 00000000 	 .word direction
 1304 0060 00000000 	 .word distance_180deg_ele_count
 1305              	 .cfi_endproc
 1306              	.LFE478:
 1308              	 .section .text.ERU1_0_IRQHandler,"ax",%progbits
 1309              	 .align 2
 1310              	 .global ERU1_0_IRQHandler
 1311              	 .thumb
 1312              	 .thumb_func
 1314              	ERU1_0_IRQHandler:
 1315              	.LFB479:
 301:../main.c     **** void HallSensor_B_ISR(void){
 1316              	 .loc 4 301 0
 1317              	 .cfi_startproc
 1318              	 
 1319              	 
 1320 0000 80B5     	 push {r7,lr}
 1321              	.LCFI57:
 1322              	 .cfi_def_cfa_offset 8
 1323              	 .cfi_offset 7,-8
 1324              	 .cfi_offset 14,-4
 1325 0002 00AF     	 add r7,sp,#0
 1326              	.LCFI58:
 1327              	 .cfi_def_cfa_register 7
 302:../main.c     **** 	HallSensor();
 1328              	 .loc 4 302 0
 1329 0004 FFF7FEFF 	 bl HallSensor
 303:../main.c     **** 	time_180deg = time_since_B;
 1330              	 .loc 4 303 0
 1331 0008 054B     	 ldr r3,.L49
 1332 000a 1B68     	 ldr r3,[r3]
 1333 000c 054A     	 ldr r2,.L49+4
 1334 000e 1360     	 str r3,[r2]
 304:../main.c     **** 	time_since_B = 0;
 1335              	 .loc 4 304 0
 1336 0010 034B     	 ldr r3,.L49
 1337 0012 0022     	 movs r2,#0
 1338 0014 1A60     	 str r2,[r3]
 305:../main.c     **** 	last_Hall_trig = 'B';
 1339              	 .loc 4 305 0
 1340 0016 044B     	 ldr r3,.L49+8
 1341 0018 4222     	 movs r2,#66
 1342 001a 1A70     	 strb r2,[r3]
 306:../main.c     **** }
 1343              	 .loc 4 306 0
 1344 001c 80BD     	 pop {r7,pc}
 1345              	.L50:
 1346 001e 00BF     	 .align 2
 1347              	.L49:
 1348 0020 00000000 	 .word time_since_B
 1349 0024 00000000 	 .word time_180deg
 1350 0028 00000000 	 .word last_Hall_trig
 1351              	 .cfi_endproc
 1352              	.LFE479:
 1354              	 .section .text.ERU1_3_IRQHandler,"ax",%progbits
 1355              	 .align 2
 1356              	 .global ERU1_3_IRQHandler
 1357              	 .thumb
 1358              	 .thumb_func
 1360              	ERU1_3_IRQHandler:
 1361              	.LFB480:
 307:../main.c     **** void HallSensor_C_ISR(void){
 1362              	 .loc 4 307 0
 1363              	 .cfi_startproc
 1364              	 
 1365              	 
 1366 0000 80B5     	 push {r7,lr}
 1367              	.LCFI59:
 1368              	 .cfi_def_cfa_offset 8
 1369              	 .cfi_offset 7,-8
 1370              	 .cfi_offset 14,-4
 1371 0002 00AF     	 add r7,sp,#0
 1372              	.LCFI60:
 1373              	 .cfi_def_cfa_register 7
 308:../main.c     **** 	HallSensor();
 1374              	 .loc 4 308 0
 1375 0004 FFF7FEFF 	 bl HallSensor
 309:../main.c     **** 	time_180deg = time_since_C;
 1376              	 .loc 4 309 0
 1377 0008 054B     	 ldr r3,.L52
 1378 000a 1B68     	 ldr r3,[r3]
 1379 000c 054A     	 ldr r2,.L52+4
 1380 000e 1360     	 str r3,[r2]
 310:../main.c     **** 	time_since_C = 0;
 1381              	 .loc 4 310 0
 1382 0010 034B     	 ldr r3,.L52
 1383 0012 0022     	 movs r2,#0
 1384 0014 1A60     	 str r2,[r3]
 311:../main.c     **** 	last_Hall_trig = 'C';
 1385              	 .loc 4 311 0
 1386 0016 044B     	 ldr r3,.L52+8
 1387 0018 4322     	 movs r2,#67
 1388 001a 1A70     	 strb r2,[r3]
 312:../main.c     **** }
 1389              	 .loc 4 312 0
 1390 001c 80BD     	 pop {r7,pc}
 1391              	.L53:
 1392 001e 00BF     	 .align 2
 1393              	.L52:
 1394 0020 00000000 	 .word time_since_C
 1395 0024 00000000 	 .word time_180deg
 1396 0028 00000000 	 .word last_Hall_trig
 1397              	 .cfi_endproc
 1398              	.LFE480:
 1400              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 1401              	 .align 2
 1402              	 .global CCU43_1_IRQHandler
 1403              	 .thumb
 1404              	 .thumb_func
 1406              	CCU43_1_IRQHandler:
 1407              	.LFB481:
 313:../main.c     **** 
 314:../main.c     **** /*
 315:../main.c     **** // Turn off driver at Overcurrent
 316:../main.c     **** void OverCurrent_U_ISR(void)
 317:../main.c     **** {
 318:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 319:../main.c     **** }
 320:../main.c     **** void OverCurrent_V_ISR(void)
 321:../main.c     **** {
 322:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 323:../main.c     **** }
 324:../main.c     **** void OverCurrent_W_ISR(void)
 325:../main.c     **** {
 326:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 327:../main.c     **** }
 328:../main.c     **** */
 329:../main.c     **** 
 330:../main.c     **** //ISR based on Timer_1 --> 100us time base
 331:../main.c     **** void ISR_INT1(void)
 332:../main.c     **** {
 1408              	 .loc 4 332 0
 1409              	 .cfi_startproc
 1410              	 
 1411              	 
 1412              	 
 1413 0000 80B4     	 push {r7}
 1414              	.LCFI61:
 1415              	 .cfi_def_cfa_offset 4
 1416              	 .cfi_offset 7,-4
 1417 0002 00AF     	 add r7,sp,#0
 1418              	.LCFI62:
 1419              	 .cfi_def_cfa_register 7
 333:../main.c     **** }
 1420              	 .loc 4 333 0
 1421 0004 BD46     	 mov sp,r7
 1422              	.LCFI63:
 1423              	 .cfi_def_cfa_register 13
 1424              	 
 1425 0006 5DF8047B 	 ldr r7,[sp],#4
 1426              	.LCFI64:
 1427              	 .cfi_restore 7
 1428              	 .cfi_def_cfa_offset 0
 1429 000a 7047     	 bx lr
 1430              	 .cfi_endproc
 1431              	.LFE481:
 1433              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 1434              	 .align 2
 1435              	 .global CCU80_3_IRQHandler
 1436              	 .thumb
 1437              	 .thumb_func
 1439              	CCU80_3_IRQHandler:
 1440              	.LFB482:
 334:../main.c     **** 
 335:../main.c     **** // ISR for Updating the SVM PWM -> 50us = 20kHz
 336:../main.c     **** void PeriodMatchInterruptHandler(void)
 337:../main.c     **** {
 1441              	 .loc 4 337 0
 1442              	 .cfi_startproc
 1443              	 
 1444              	 
 1445 0000 80B5     	 push {r7,lr}
 1446              	.LCFI65:
 1447              	 .cfi_def_cfa_offset 8
 1448              	 .cfi_offset 7,-8
 1449              	 .cfi_offset 14,-4
 1450 0002 82B0     	 sub sp,sp,#8
 1451              	.LCFI66:
 1452              	 .cfi_def_cfa_offset 16
 1453 0004 00AF     	 add r7,sp,#0
 1454              	.LCFI67:
 1455              	 .cfi_def_cfa_register 7
 338:../main.c     **** 	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 1456              	 .loc 4 338 0
 1457 0006 144B     	 ldr r3,.L57
 1458 0008 1B78     	 ldrb r3,[r3]
 1459 000a DBB2     	 uxtb r3,r3
 1460 000c 0133     	 adds r3,r3,#1
 1461 000e DAB2     	 uxtb r2,r3
 1462 0010 114B     	 ldr r3,.L57
 1463 0012 1A70     	 strb r2,[r3]
 339:../main.c     **** 	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 1464              	 .loc 4 339 0
 1465 0014 104B     	 ldr r3,.L57
 1466 0016 1B78     	 ldrb r3,[r3]
 1467 0018 DBB2     	 uxtb r3,r3
 1468 001a 012B     	 cmp r3,#1
 1469 001c 18D1     	 bne .L55
 340:../main.c     **** 		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_D
 1470              	 .loc 4 340 0
 1471 001e 0F4B     	 ldr r3,.L57+4
 1472 0020 D3ED007A 	 flds s15,[r3]
 1473 0024 FCEEE77A 	 ftouizs s15,s15
 1474 0028 C7ED017A 	 fsts s15,[r7,#4]
 1475 002c BB88     	 ldrh r3,[r7,#4]
 1476 002e 9AB2     	 uxth r2,r3
 1477 0030 0B4B     	 ldr r3,.L57+8
 1478 0032 D3ED007A 	 flds s15,[r3]
 1479 0036 FCEEE77A 	 ftouizs s15,s15
 1480 003a 17EE901A 	 fmrs r1,s15
 1481 003e 4BF20B63 	 movw r3,#46603
 1482 0042 03FB01F3 	 mul r3,r3,r1
 1483 0046 0748     	 ldr r0,.L57+12
 1484 0048 1146     	 mov r1,r2
 1485 004a 1A46     	 mov r2,r3
 1486 004c FFF7FEFF 	 bl PWM_SVM_SVMUpdate
 1487              	.L55:
 341:../main.c     **** 	}
 342:../main.c     **** }
 1488              	 .loc 4 342 0
 1489 0050 0837     	 adds r7,r7,#8
 1490              	.LCFI68:
 1491              	 .cfi_def_cfa_offset 8
 1492 0052 BD46     	 mov sp,r7
 1493              	.LCFI69:
 1494              	 .cfi_def_cfa_register 13
 1495              	 
 1496 0054 80BD     	 pop {r7,pc}
 1497              	.L58:
 1498 0056 00BF     	 .align 2
 1499              	.L57:
 1500 0058 00000000 	 .word count
 1501 005c 00000000 	 .word modulation_index_scaled
 1502 0060 00000000 	 .word angle_ab
 1503 0064 00000000 	 .word PWM_SVM_0
 1504              	 .cfi_endproc
 1505              	.LFE482:
 1507              	 .section .text.Hall_init,"ax",%progbits
 1508              	 .align 2
 1509              	 .global Hall_init
 1510              	 .thumb
 1511              	 .thumb_func
 1513              	Hall_init:
 1514              	.LFB483:
 343:../main.c     **** 
 344:../main.c     **** //########################
 345:../main.c     **** // FUNCTIONS
 346:../main.c     **** //########################
 347:../main.c     **** 
 348:../main.c     **** // Hall init -> readout of actual Hall pattern to determine the motor position
 349:../main.c     **** void Hall_init(void){
 1515              	 .loc 4 349 0
 1516              	 .cfi_startproc
 1517              	 
 1518              	 
 1519 0000 90B5     	 push {r4,r7,lr}
 1520              	.LCFI70:
 1521              	 .cfi_def_cfa_offset 12
 1522              	 .cfi_offset 4,-12
 1523              	 .cfi_offset 7,-8
 1524              	 .cfi_offset 14,-4
 1525 0002 83B0     	 sub sp,sp,#12
 1526              	.LCFI71:
 1527              	 .cfi_def_cfa_offset 24
 1528 0004 00AF     	 add r7,sp,#0
 1529              	.LCFI72:
 1530              	 .cfi_def_cfa_register 7
 350:../main.c     **** 
 351:../main.c     **** 	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinV
 1531              	 .loc 4 351 0
 1532 0006 2148     	 ldr r0,.L66
 1533 0008 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1534 000c 0346     	 mov r3,r0
 1535 000e DBB2     	 uxtb r3,r3
 1536 0010 5B00     	 lsls r3,r3,#1
 1537 0012 DCB2     	 uxtb r4,r3
 1538 0014 1E48     	 ldr r0,.L66+4
 1539 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1540 001a 0346     	 mov r3,r0
 1541 001c DBB2     	 uxtb r3,r3
 1542 001e 2343     	 orrs r3,r3,r4
 1543 0020 DBB2     	 uxtb r3,r3
 1544 0022 5B00     	 lsls r3,r3,#1
 1545 0024 DCB2     	 uxtb r4,r3
 1546 0026 1B48     	 ldr r0,.L66+8
 1547 0028 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1548 002c 0346     	 mov r3,r0
 1549 002e DBB2     	 uxtb r3,r3
 1550 0030 2343     	 orrs r3,r3,r4
 1551 0032 FB71     	 strb r3,[r7,#7]
 352:../main.c     **** 
 353:../main.c     **** 	 if(Hall_Initial == 0b100){sector = 0;}
 1552              	 .loc 4 353 0
 1553 0034 FB79     	 ldrb r3,[r7,#7]
 1554 0036 042B     	 cmp r3,#4
 1555 0038 03D1     	 bne .L60
 1556              	 .loc 4 353 0 is_stmt 0 discriminator 1
 1557 003a 174B     	 ldr r3,.L66+12
 1558 003c 0022     	 movs r2,#0
 1559 003e 1A70     	 strb r2,[r3]
 1560 0040 21E0     	 b .L59
 1561              	.L60:
 354:../main.c     **** 	 else if(Hall_Initial == 0b110){sector = 1;}
 1562              	 .loc 4 354 0 is_stmt 1
 1563 0042 FB79     	 ldrb r3,[r7,#7]
 1564 0044 062B     	 cmp r3,#6
 1565 0046 03D1     	 bne .L62
 1566              	 .loc 4 354 0 is_stmt 0 discriminator 1
 1567 0048 134B     	 ldr r3,.L66+12
 1568 004a 0122     	 movs r2,#1
 1569 004c 1A70     	 strb r2,[r3]
 1570 004e 1AE0     	 b .L59
 1571              	.L62:
 355:../main.c     **** 	 else if(Hall_Initial == 0b010){sector = 2;}
 1572              	 .loc 4 355 0 is_stmt 1
 1573 0050 FB79     	 ldrb r3,[r7,#7]
 1574 0052 022B     	 cmp r3,#2
 1575 0054 03D1     	 bne .L63
 1576              	 .loc 4 355 0 is_stmt 0 discriminator 1
 1577 0056 104B     	 ldr r3,.L66+12
 1578 0058 0222     	 movs r2,#2
 1579 005a 1A70     	 strb r2,[r3]
 1580 005c 13E0     	 b .L59
 1581              	.L63:
 356:../main.c     **** 	 else if(Hall_Initial == 0b011){sector = 3;}
 1582              	 .loc 4 356 0 is_stmt 1
 1583 005e FB79     	 ldrb r3,[r7,#7]
 1584 0060 032B     	 cmp r3,#3
 1585 0062 03D1     	 bne .L64
 1586              	 .loc 4 356 0 is_stmt 0 discriminator 1
 1587 0064 0C4B     	 ldr r3,.L66+12
 1588 0066 0322     	 movs r2,#3
 1589 0068 1A70     	 strb r2,[r3]
 1590 006a 0CE0     	 b .L59
 1591              	.L64:
 357:../main.c     **** 	 else if(Hall_Initial == 0b001){sector = 4;}
 1592              	 .loc 4 357 0 is_stmt 1
 1593 006c FB79     	 ldrb r3,[r7,#7]
 1594 006e 012B     	 cmp r3,#1
 1595 0070 03D1     	 bne .L65
 1596              	 .loc 4 357 0 is_stmt 0 discriminator 1
 1597 0072 094B     	 ldr r3,.L66+12
 1598 0074 0422     	 movs r2,#4
 1599 0076 1A70     	 strb r2,[r3]
 1600 0078 05E0     	 b .L59
 1601              	.L65:
 358:../main.c     **** 	 else if(Hall_Initial == 0b101){sector = 5;}
 1602              	 .loc 4 358 0 is_stmt 1
 1603 007a FB79     	 ldrb r3,[r7,#7]
 1604 007c 052B     	 cmp r3,#5
 1605 007e 02D1     	 bne .L59
 1606              	 .loc 4 358 0 is_stmt 0 discriminator 1
 1607 0080 054B     	 ldr r3,.L66+12
 1608 0082 0522     	 movs r2,#5
 1609 0084 1A70     	 strb r2,[r3]
 1610              	.L59:
 359:../main.c     **** }
 1611              	 .loc 4 359 0 is_stmt 1
 1612 0086 0C37     	 adds r7,r7,#12
 1613              	.LCFI73:
 1614              	 .cfi_def_cfa_offset 12
 1615 0088 BD46     	 mov sp,r7
 1616              	.LCFI74:
 1617              	 .cfi_def_cfa_register 13
 1618              	 
 1619 008a 90BD     	 pop {r4,r7,pc}
 1620              	.L67:
 1621              	 .align 2
 1622              	.L66:
 1623 008c 00000000 	 .word Hall_A_ISR
 1624 0090 00000000 	 .word Hall_B_ISR
 1625 0094 00000000 	 .word Hall_C_ISR
 1626 0098 00000000 	 .word sector
 1627              	 .cfi_endproc
 1628              	.LFE483:
 1630              	 .section .text.HallSensor,"ax",%progbits
 1631              	 .align 2
 1632              	 .global HallSensor
 1633              	 .thumb
 1634              	 .thumb_func
 1636              	HallSensor:
 1637              	.LFB484:
 360:../main.c     **** 
 361:../main.c     **** // Function to determine direction and current Sector
 362:../main.c     **** void HallSensor(void){
 1638              	 .loc 4 362 0
 1639              	 .cfi_startproc
 1640              	 
 1641              	 
 1642 0000 90B5     	 push {r4,r7,lr}
 1643              	.LCFI75:
 1644              	 .cfi_def_cfa_offset 12
 1645              	 .cfi_offset 4,-12
 1646              	 .cfi_offset 7,-8
 1647              	 .cfi_offset 14,-4
 1648 0002 83B0     	 sub sp,sp,#12
 1649              	.LCFI76:
 1650              	 .cfi_def_cfa_offset 24
 1651 0004 00AF     	 add r7,sp,#0
 1652              	.LCFI77:
 1653              	 .cfi_def_cfa_register 7
 363:../main.c     **** 	enc_val = enc_val << 3; //shift old values and make space for new ones
 1654              	 .loc 4 363 0
 1655 0006 2E4B     	 ldr r3,.L75
 1656 0008 1B88     	 ldrh r3,[r3]
 1657 000a 9BB2     	 uxth r3,r3
 1658 000c DB00     	 lsls r3,r3,#3
 1659 000e 9AB2     	 uxth r2,r3
 1660 0010 2B4B     	 ldr r3,.L75
 1661 0012 1A80     	 strh r2,[r3]
 364:../main.c     **** 	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(
 1662              	 .loc 4 364 0
 1663 0014 2B48     	 ldr r0,.L75+4
 1664 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1665 001a 0346     	 mov r3,r0
 1666 001c DBB2     	 uxtb r3,r3
 1667 001e 5B00     	 lsls r3,r3,#1
 1668 0020 DCB2     	 uxtb r4,r3
 1669 0022 2948     	 ldr r0,.L75+8
 1670 0024 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1671 0028 0346     	 mov r3,r0
 1672 002a DBB2     	 uxtb r3,r3
 1673 002c 2343     	 orrs r3,r3,r4
 1674 002e DBB2     	 uxtb r3,r3
 1675 0030 5B00     	 lsls r3,r3,#1
 1676 0032 DCB2     	 uxtb r4,r3
 1677 0034 2548     	 ldr r0,.L75+12
 1678 0036 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1679 003a 0346     	 mov r3,r0
 1680 003c DBB2     	 uxtb r3,r3
 1681 003e 2343     	 orrs r3,r3,r4
 1682 0040 FB71     	 strb r3,[r7,#7]
 365:../main.c     **** 	enc_val = enc_val | Hall_status; //read Sensor values and store them
 1683              	 .loc 4 365 0
 1684 0042 FB79     	 ldrb r3,[r7,#7]
 1685 0044 9AB2     	 uxth r2,r3
 1686 0046 1E4B     	 ldr r3,.L75
 1687 0048 1B88     	 ldrh r3,[r3]
 1688 004a 9BB2     	 uxth r3,r3
 1689 004c 1343     	 orrs r3,r3,r2
 1690 004e 9AB2     	 uxth r2,r3
 1691 0050 1B4B     	 ldr r3,.L75
 1692 0052 1A80     	 strh r2,[r3]
 366:../main.c     **** 	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual an
 1693              	 .loc 4 366 0
 1694 0054 1A4B     	 ldr r3,.L75
 1695 0056 1B88     	 ldrh r3,[r3]
 1696 0058 9BB2     	 uxth r3,r3
 1697 005a 03F03F03 	 and r3,r3,#63
 1698 005e 1C4A     	 ldr r2,.L75+16
 1699 0060 D25C     	 ldrb r2,[r2,r3]
 1700 0062 1C4B     	 ldr r3,.L75+20
 1701 0064 1A70     	 strb r2,[r3]
 367:../main.c     **** 
 368:../main.c     **** 	if(Hall_status == 0b100){sector = 0;}
 1702              	 .loc 4 368 0
 1703 0066 FB79     	 ldrb r3,[r7,#7]
 1704 0068 042B     	 cmp r3,#4
 1705 006a 03D1     	 bne .L69
 1706              	 .loc 4 368 0 is_stmt 0 discriminator 1
 1707 006c 1A4B     	 ldr r3,.L75+24
 1708 006e 0022     	 movs r2,#0
 1709 0070 1A70     	 strb r2,[r3]
 1710 0072 21E0     	 b .L68
 1711              	.L69:
 369:../main.c     **** 		 else if(Hall_status == 0b110){sector = 1;}
 1712              	 .loc 4 369 0 is_stmt 1
 1713 0074 FB79     	 ldrb r3,[r7,#7]
 1714 0076 062B     	 cmp r3,#6
 1715 0078 03D1     	 bne .L71
 1716              	 .loc 4 369 0 is_stmt 0 discriminator 1
 1717 007a 174B     	 ldr r3,.L75+24
 1718 007c 0122     	 movs r2,#1
 1719 007e 1A70     	 strb r2,[r3]
 1720 0080 1AE0     	 b .L68
 1721              	.L71:
 370:../main.c     **** 		 else if(Hall_status == 0b010){sector = 2;}
 1722              	 .loc 4 370 0 is_stmt 1
 1723 0082 FB79     	 ldrb r3,[r7,#7]
 1724 0084 022B     	 cmp r3,#2
 1725 0086 03D1     	 bne .L72
 1726              	 .loc 4 370 0 is_stmt 0 discriminator 1
 1727 0088 134B     	 ldr r3,.L75+24
 1728 008a 0222     	 movs r2,#2
 1729 008c 1A70     	 strb r2,[r3]
 1730 008e 13E0     	 b .L68
 1731              	.L72:
 371:../main.c     **** 		 else if(Hall_status == 0b011){sector = 3;}
 1732              	 .loc 4 371 0 is_stmt 1
 1733 0090 FB79     	 ldrb r3,[r7,#7]
 1734 0092 032B     	 cmp r3,#3
 1735 0094 03D1     	 bne .L73
 1736              	 .loc 4 371 0 is_stmt 0 discriminator 1
 1737 0096 104B     	 ldr r3,.L75+24
 1738 0098 0322     	 movs r2,#3
 1739 009a 1A70     	 strb r2,[r3]
 1740 009c 0CE0     	 b .L68
 1741              	.L73:
 372:../main.c     **** 		 else if(Hall_status == 0b001){sector = 4;}
 1742              	 .loc 4 372 0 is_stmt 1
 1743 009e FB79     	 ldrb r3,[r7,#7]
 1744 00a0 012B     	 cmp r3,#1
 1745 00a2 03D1     	 bne .L74
 1746              	 .loc 4 372 0 is_stmt 0 discriminator 1
 1747 00a4 0C4B     	 ldr r3,.L75+24
 1748 00a6 0422     	 movs r2,#4
 1749 00a8 1A70     	 strb r2,[r3]
 1750 00aa 05E0     	 b .L68
 1751              	.L74:
 373:../main.c     **** 		 else if(Hall_status == 0b101){sector = 5;}
 1752              	 .loc 4 373 0 is_stmt 1
 1753 00ac FB79     	 ldrb r3,[r7,#7]
 1754 00ae 052B     	 cmp r3,#5
 1755 00b0 02D1     	 bne .L68
 1756              	 .loc 4 373 0 is_stmt 0 discriminator 1
 1757 00b2 094B     	 ldr r3,.L75+24
 1758 00b4 0522     	 movs r2,#5
 1759 00b6 1A70     	 strb r2,[r3]
 1760              	.L68:
 374:../main.c     **** 
 375:../main.c     **** }
 1761              	 .loc 4 375 0 is_stmt 1
 1762 00b8 0C37     	 adds r7,r7,#12
 1763              	.LCFI78:
 1764              	 .cfi_def_cfa_offset 12
 1765 00ba BD46     	 mov sp,r7
 1766              	.LCFI79:
 1767              	 .cfi_def_cfa_register 13
 1768              	 
 1769 00bc 90BD     	 pop {r4,r7,pc}
 1770              	.L76:
 1771 00be 00BF     	 .align 2
 1772              	.L75:
 1773 00c0 00000000 	 .word enc_val
 1774 00c4 00000000 	 .word Hall_A_ISR
 1775 00c8 00000000 	 .word Hall_B_ISR
 1776 00cc 00000000 	 .word Hall_C_ISR
 1777 00d0 00000000 	 .word lookup_table
 1778 00d4 00000000 	 .word direction
 1779 00d8 00000000 	 .word sector
 1780              	 .cfi_endproc
 1781              	.LFE484:
 1783              	 .global __aeabi_ui2d
 1784              	 .global __aeabi_i2d
 1785              	 .global __aeabi_dsub
 1786              	 .section .text.Calculation,"ax",%progbits
 1787              	 .align 2
 1788              	 .global Calculation
 1789              	 .thumb
 1790              	 .thumb_func
 1792              	Calculation:
 1793              	.LFB485:
 376:../main.c     **** // Routine for calculation (sector, clark-Park trans.,...)
 377:../main.c     **** 
 378:../main.c     **** //5kHz loop since every 4th step of 50us --> 200us --> 5kHz
 379:../main.c     **** void Calculation(void){
 1794              	 .loc 4 379 0
 1795              	 .cfi_startproc
 1796              	 
 1797              	 
 1798 0000 B0B5     	 push {r4,r5,r7,lr}
 1799              	.LCFI80:
 1800              	 .cfi_def_cfa_offset 16
 1801              	 .cfi_offset 4,-16
 1802              	 .cfi_offset 5,-12
 1803              	 .cfi_offset 7,-8
 1804              	 .cfi_offset 14,-4
 1805 0002 2DED028B 	 fstmfdd sp!,{d8}
 1806              	.LCFI81:
 1807              	 .cfi_def_cfa_offset 24
 1808              	 .cfi_offset 80,-24
 1809              	 .cfi_offset 81,-20
 1810 0006 84B0     	 sub sp,sp,#16
 1811              	.LCFI82:
 1812              	 .cfi_def_cfa_offset 40
 1813 0008 00AF     	 add r7,sp,#0
 1814              	.LCFI83:
 1815              	 .cfi_def_cfa_register 7
 380:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 1816              	 .loc 4 380 0
 1817 000a AF48     	 ldr r0,.L130
 1818 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 381:../main.c     **** 		// Actual time since last angle update via Hall Sensor
 382:../main.c     **** 		uint32_t t;
 383:../main.c     **** 		if(last_Hall_trig == 'A') t = time_since_A;
 1819              	 .loc 4 383 0
 1820 0010 AE4B     	 ldr r3,.L130+4
 1821 0012 1B78     	 ldrb r3,[r3]
 1822 0014 DBB2     	 uxtb r3,r3
 1823 0016 412B     	 cmp r3,#65
 1824 0018 03D1     	 bne .L78
 1825              	 .loc 4 383 0 is_stmt 0 discriminator 1
 1826 001a AD4B     	 ldr r3,.L130+8
 1827 001c 1B68     	 ldr r3,[r3]
 1828 001e FB60     	 str r3,[r7,#12]
 1829 0020 10E0     	 b .L79
 1830              	.L78:
 384:../main.c     **** 		else if(last_Hall_trig == 'B') t = time_since_B;
 1831              	 .loc 4 384 0 is_stmt 1
 1832 0022 AA4B     	 ldr r3,.L130+4
 1833 0024 1B78     	 ldrb r3,[r3]
 1834 0026 DBB2     	 uxtb r3,r3
 1835 0028 422B     	 cmp r3,#66
 1836 002a 03D1     	 bne .L80
 1837              	 .loc 4 384 0 is_stmt 0 discriminator 1
 1838 002c A94B     	 ldr r3,.L130+12
 1839 002e 1B68     	 ldr r3,[r3]
 1840 0030 FB60     	 str r3,[r7,#12]
 1841 0032 07E0     	 b .L79
 1842              	.L80:
 385:../main.c     **** 		else if(last_Hall_trig == 'C') t = time_since_C;
 1843              	 .loc 4 385 0 is_stmt 1
 1844 0034 A54B     	 ldr r3,.L130+4
 1845 0036 1B78     	 ldrb r3,[r3]
 1846 0038 DBB2     	 uxtb r3,r3
 1847 003a 432B     	 cmp r3,#67
 1848 003c 02D1     	 bne .L79
 1849              	 .loc 4 385 0 is_stmt 0 discriminator 1
 1850 003e A64B     	 ldr r3,.L130+16
 1851 0040 1B68     	 ldr r3,[r3]
 1852 0042 FB60     	 str r3,[r7,#12]
 1853              	.L79:
 386:../main.c     **** 		time_180deg_cal = time_180deg;
 1854              	 .loc 4 386 0 is_stmt 1
 1855 0044 A54B     	 ldr r3,.L130+20
 1856 0046 1B68     	 ldr r3,[r3]
 1857 0048 A54A     	 ldr r2,.L130+24
 1858 004a 1360     	 str r3,[r2]
 387:../main.c     **** 		// not fixing sector for calc because if chainges better to do so
 388:../main.c     **** 
 389:../main.c     **** 		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 1859              	 .loc 4 389 0
 1860 004c A44B     	 ldr r3,.L130+24
 1861 004e 1B68     	 ldr r3,[r3]
 1862 0050 40F6C412 	 movw r2,#2500
 1863 0054 9342     	 cmp r3,r2
 1864 0056 04D9     	 bls .L81
 1865              	 .loc 4 389 0 is_stmt 0 discriminator 1
 1866 0058 A14B     	 ldr r3,.L130+24
 1867 005a 40F6C412 	 movw r2,#2500
 1868 005e 1A60     	 str r2,[r3]
 1869 0060 06E0     	 b .L82
 1870              	.L81:
 390:../main.c     **** 		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 1871              	 .loc 4 390 0 is_stmt 1
 1872 0062 9F4B     	 ldr r3,.L130+24
 1873 0064 1B68     	 ldr r3,[r3]
 1874 0066 012B     	 cmp r3,#1
 1875 0068 02D8     	 bhi .L82
 1876              	 .loc 4 390 0 is_stmt 0 discriminator 1
 1877 006a 9D4B     	 ldr r3,.L130+24
 1878 006c 0222     	 movs r2,#2
 1879 006e 1A60     	 str r2,[r3]
 1880              	.L82:
 391:../main.c     **** 
 392:../main.c     **** 		if(t < TIME_OMEGA_0){
 1881              	 .loc 4 392 0 is_stmt 1
 1882 0070 FB68     	 ldr r3,[r7,#12]
 1883 0072 41F28732 	 movw r2,#4999
 1884 0076 9342     	 cmp r3,r2
 1885 0078 35D8     	 bhi .L83
 393:../main.c     **** 			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 1886              	 .loc 4 393 0
 1887 007a 994B     	 ldr r3,.L130+24
 1888 007c 1B68     	 ldr r3,[r3]
 1889 007e 07EE903A 	 fmsr s15,r3
 1890 0082 F8EE677A 	 fuitos s15,s15
 1891 0086 17EE900A 	 fmrs r0,s15
 1892 008a FFF7FEFF 	 bl __aeabi_f2d
 1893 008e 0246     	 mov r2,r0
 1894 0090 0B46     	 mov r3,r1
 1895 0092 4FF00000 	 mov r0,#0
 1896 0096 9349     	 ldr r1,.L130+28
 1897 0098 FFF7FEFF 	 bl __aeabi_ddiv
 1898 009c 0246     	 mov r2,r0
 1899 009e 0B46     	 mov r3,r1
 1900 00a0 1446     	 mov r4,r2
 1901 00a2 1D46     	 mov r5,r3
 1902 00a4 F868     	 ldr r0,[r7,#12]
 1903 00a6 FFF7FEFF 	 bl __aeabi_ui2d
 1904 00aa 0246     	 mov r2,r0
 1905 00ac 0B46     	 mov r3,r1
 1906 00ae 2046     	 mov r0,r4
 1907 00b0 2946     	 mov r1,r5
 1908 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1909 00b6 0246     	 mov r2,r0
 1910 00b8 0B46     	 mov r3,r1
 1911 00ba 1046     	 mov r0,r2
 1912 00bc 1946     	 mov r1,r3
 1913 00be FFF7FEFF 	 bl __aeabi_d2f
 1914 00c2 0246     	 mov r2,r0
 1915 00c4 884B     	 ldr r3,.L130+32
 1916 00c6 1A60     	 str r2,[r3]
 394:../main.c     **** 			if(angle_in_sector > 60) angle_in_sector = 60;
 1917              	 .loc 4 394 0
 1918 00c8 874B     	 ldr r3,.L130+32
 1919 00ca D3ED007A 	 flds s15,[r3]
 1920 00ce 9FED877A 	 flds s14,.L130+36
 1921 00d2 F4EEC77A 	 fcmpes s15,s14
 1922 00d6 F1EE10FA 	 fmstat
 1923 00da 00DC     	 bgt .L117
 1924 00dc 06E0     	 b .L86
 1925              	.L117:
 1926              	 .loc 4 394 0 is_stmt 0 discriminator 1
 1927 00de 824B     	 ldr r3,.L130+32
 1928 00e0 834A     	 ldr r2,.L130+40
 1929 00e2 1A60     	 str r2,[r3]
 1930 00e4 02E0     	 b .L86
 1931              	.L83:
 395:../main.c     **** 		}
 396:../main.c     **** 		else{
 397:../main.c     **** 			angle_in_sector = 30; // standig still
 1932              	 .loc 4 397 0 is_stmt 1
 1933 00e6 804B     	 ldr r3,.L130+32
 1934 00e8 824A     	 ldr r2,.L130+44
 1935 00ea 1A60     	 str r2,[r3]
 1936              	.L86:
 398:../main.c     **** 		}
 399:../main.c     **** 
 400:../main.c     **** 		// CW
 401:../main.c     **** 		if(direction==1)
 1937              	 .loc 4 401 0
 1938 00ec 824B     	 ldr r3,.L130+48
 1939 00ee 1B78     	 ldrb r3,[r3]
 1940 00f0 DBB2     	 uxtb r3,r3
 1941 00f2 5BB2     	 sxtb r3,r3
 1942 00f4 012B     	 cmp r3,#1
 1943 00f6 54D1     	 bne .L87
 402:../main.c     **** 		{
 403:../main.c     **** 			angle_phi = (sector*60.0)+angle_in_sector;
 1944              	 .loc 4 403 0
 1945 00f8 804B     	 ldr r3,.L130+52
 1946 00fa 1B78     	 ldrb r3,[r3]
 1947 00fc DBB2     	 uxtb r3,r3
 1948 00fe 5BB2     	 sxtb r3,r3
 1949 0100 1846     	 mov r0,r3
 1950 0102 FFF7FEFF 	 bl __aeabi_i2d
 1951 0106 0246     	 mov r2,r0
 1952 0108 0B46     	 mov r3,r1
 1953 010a 1046     	 mov r0,r2
 1954 010c 1946     	 mov r1,r3
 1955 010e 4FF00002 	 mov r2,#0
 1956 0112 7B4B     	 ldr r3,.L130+56
 1957 0114 FFF7FEFF 	 bl __aeabi_dmul
 1958 0118 0246     	 mov r2,r0
 1959 011a 0B46     	 mov r3,r1
 1960 011c 1446     	 mov r4,r2
 1961 011e 1D46     	 mov r5,r3
 1962 0120 714B     	 ldr r3,.L130+32
 1963 0122 1B68     	 ldr r3,[r3]
 1964 0124 1846     	 mov r0,r3
 1965 0126 FFF7FEFF 	 bl __aeabi_f2d
 1966 012a 0246     	 mov r2,r0
 1967 012c 0B46     	 mov r3,r1
 1968 012e 2046     	 mov r0,r4
 1969 0130 2946     	 mov r1,r5
 1970 0132 FFF7FEFF 	 bl __aeabi_dadd
 1971 0136 0246     	 mov r2,r0
 1972 0138 0B46     	 mov r3,r1
 1973 013a 1046     	 mov r0,r2
 1974 013c 1946     	 mov r1,r3
 1975 013e FFF7FEFF 	 bl __aeabi_d2f
 1976 0142 0246     	 mov r2,r0
 1977 0144 6F4B     	 ldr r3,.L130+60
 1978 0146 1A60     	 str r2,[r3]
 404:../main.c     **** 			angle_phi=angle_phi+offset_pos;
 1979              	 .loc 4 404 0
 1980 0148 6E4B     	 ldr r3,.L130+60
 1981 014a 93ED007A 	 flds s14,[r3]
 1982 014e 6E4B     	 ldr r3,.L130+64
 1983 0150 D3ED007A 	 flds s15,[r3]
 1984 0154 77EE277A 	 fadds s15,s14,s15
 1985 0158 6A4B     	 ldr r3,.L130+60
 1986 015a C3ED007A 	 fsts s15,[r3]
 405:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 1987              	 .loc 4 405 0
 1988 015e 694B     	 ldr r3,.L130+60
 1989 0160 D3ED007A 	 flds s15,[r3]
 1990 0164 9FED697A 	 flds s14,.L130+68
 1991 0168 F4EEC77A 	 fcmpes s15,s14
 1992 016c F1EE10FA 	 fmstat
 1993 0170 09DD     	 ble .L88
 1994              	 .loc 4 405 0 is_stmt 0 discriminator 1
 1995 0172 644B     	 ldr r3,.L130+60
 1996 0174 D3ED007A 	 flds s15,[r3]
 1997 0178 9FED647A 	 flds s14,.L130+68
 1998 017c 77EEC77A 	 fsubs s15,s15,s14
 1999 0180 604B     	 ldr r3,.L130+60
 2000 0182 C3ED007A 	 fsts s15,[r3]
 2001              	.L88:
 406:../main.c     **** 
 407:../main.c     **** 			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
 2002              	 .loc 4 407 0 is_stmt 1
 2003 0186 564B     	 ldr r3,.L130+24
 2004 0188 1B68     	 ldr r3,[r3]
 2005 018a 07EE903A 	 fmsr s15,r3
 2006 018e F8EE677A 	 fuitos s15,s15
 2007 0192 9FED5F7A 	 flds s14,.L130+72
 2008 0196 C7EE277A 	 fdivs s15,s14,s15
 2009 019a 5E4B     	 ldr r3,.L130+76
 2010 019c C3ED007A 	 fsts s15,[r3]
 2011 01a0 6FE0     	 b .L90
 2012              	.L87:
 408:../main.c     **** 		}
 409:../main.c     **** 		// CCW
 410:../main.c     **** 		else{
 411:../main.c     **** 			angle_phi = (sector*60.0)-angle_in_sector;
 2013              	 .loc 4 411 0
 2014 01a2 564B     	 ldr r3,.L130+52
 2015 01a4 1B78     	 ldrb r3,[r3]
 2016 01a6 DBB2     	 uxtb r3,r3
 2017 01a8 5BB2     	 sxtb r3,r3
 2018 01aa 1846     	 mov r0,r3
 2019 01ac FFF7FEFF 	 bl __aeabi_i2d
 2020 01b0 0246     	 mov r2,r0
 2021 01b2 0B46     	 mov r3,r1
 2022 01b4 1046     	 mov r0,r2
 2023 01b6 1946     	 mov r1,r3
 2024 01b8 4FF00002 	 mov r2,#0
 2025 01bc 504B     	 ldr r3,.L130+56
 2026 01be FFF7FEFF 	 bl __aeabi_dmul
 2027 01c2 0246     	 mov r2,r0
 2028 01c4 0B46     	 mov r3,r1
 2029 01c6 1446     	 mov r4,r2
 2030 01c8 1D46     	 mov r5,r3
 2031 01ca 474B     	 ldr r3,.L130+32
 2032 01cc 1B68     	 ldr r3,[r3]
 2033 01ce 1846     	 mov r0,r3
 2034 01d0 FFF7FEFF 	 bl __aeabi_f2d
 2035 01d4 0246     	 mov r2,r0
 2036 01d6 0B46     	 mov r3,r1
 2037 01d8 2046     	 mov r0,r4
 2038 01da 2946     	 mov r1,r5
 2039 01dc FFF7FEFF 	 bl __aeabi_dsub
 2040 01e0 0246     	 mov r2,r0
 2041 01e2 0B46     	 mov r3,r1
 2042 01e4 1046     	 mov r0,r2
 2043 01e6 1946     	 mov r1,r3
 2044 01e8 FFF7FEFF 	 bl __aeabi_d2f
 2045 01ec 0246     	 mov r2,r0
 2046 01ee 454B     	 ldr r3,.L130+60
 2047 01f0 1A60     	 str r2,[r3]
 412:../main.c     **** 			angle_phi = angle_phi+60.0;
 2048              	 .loc 4 412 0
 2049 01f2 444B     	 ldr r3,.L130+60
 2050 01f4 D3ED007A 	 flds s15,[r3]
 2051 01f8 9FED3C7A 	 flds s14,.L130+36
 2052 01fc 77EE877A 	 fadds s15,s15,s14
 2053 0200 404B     	 ldr r3,.L130+60
 2054 0202 C3ED007A 	 fsts s15,[r3]
 413:../main.c     **** 			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 2055              	 .loc 4 413 0
 2056 0206 3F4B     	 ldr r3,.L130+60
 2057 0208 D3ED007A 	 flds s15,[r3]
 2058 020c F5EEC07A 	 fcmpezs s15
 2059 0210 F1EE10FA 	 fmstat
 2060 0214 09D5     	 bpl .L91
 2061              	 .loc 4 413 0 is_stmt 0 discriminator 1
 2062 0216 3B4B     	 ldr r3,.L130+60
 2063 0218 D3ED007A 	 flds s15,[r3]
 2064 021c 9FED3B7A 	 flds s14,.L130+68
 2065 0220 77EE877A 	 fadds s15,s15,s14
 2066 0224 374B     	 ldr r3,.L130+60
 2067 0226 C3ED007A 	 fsts s15,[r3]
 2068              	.L91:
 414:../main.c     **** 			angle_phi=angle_phi+offset_neg;
 2069              	 .loc 4 414 0 is_stmt 1
 2070 022a 364B     	 ldr r3,.L130+60
 2071 022c 93ED007A 	 flds s14,[r3]
 2072 0230 394B     	 ldr r3,.L130+80
 2073 0232 D3ED007A 	 flds s15,[r3]
 2074 0236 77EE277A 	 fadds s15,s14,s15
 2075 023a 324B     	 ldr r3,.L130+60
 2076 023c C3ED007A 	 fsts s15,[r3]
 415:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2077              	 .loc 4 415 0
 2078 0240 304B     	 ldr r3,.L130+60
 2079 0242 D3ED007A 	 flds s15,[r3]
 2080 0246 9FED317A 	 flds s14,.L130+68
 2081 024a F4EEC77A 	 fcmpes s15,s14
 2082 024e F1EE10FA 	 fmstat
 2083 0252 09DD     	 ble .L93
 2084              	 .loc 4 415 0 is_stmt 0 discriminator 1
 2085 0254 2B4B     	 ldr r3,.L130+60
 2086 0256 D3ED007A 	 flds s15,[r3]
 2087 025a 9FED2C7A 	 flds s14,.L130+68
 2088 025e 77EEC77A 	 fsubs s15,s15,s14
 2089 0262 284B     	 ldr r3,.L130+60
 2090 0264 C3ED007A 	 fsts s15,[r3]
 2091              	.L93:
 416:../main.c     **** 
 417:../main.c     **** 			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
 2092              	 .loc 4 417 0 is_stmt 1
 2093 0268 1D4B     	 ldr r3,.L130+24
 2094 026a 1B68     	 ldr r3,[r3]
 2095 026c 07EE903A 	 fmsr s15,r3
 2096 0270 F8EE677A 	 fuitos s15,s15
 2097 0274 9FED297A 	 flds s14,.L130+84
 2098 0278 C7EE277A 	 fdivs s15,s14,s15
 2099 027c 254B     	 ldr r3,.L130+76
 2100 027e C3ED007A 	 fsts s15,[r3]
 2101              	.L90:
 418:../main.c     **** 		}
 419:../main.c     **** 
 420:../main.c     **** 		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large pea
 2102              	 .loc 4 420 0
 2103 0282 244B     	 ldr r3,.L130+76
 2104 0284 D3ED007A 	 flds s15,[r3]
 2105 0288 9FED257A 	 flds s14,.L130+88
 2106 028c F4EEC77A 	 fcmpes s15,s14
 2107 0290 F1EE10FA 	 fmstat
 2108 0294 0DD5     	 bpl .L95
 2109              	 .loc 4 420 0 is_stmt 0 discriminator 1
 2110 0296 1F4B     	 ldr r3,.L130+76
 2111 0298 D3ED007A 	 flds s15,[r3]
 2112 029c 9FED217A 	 flds s14,.L130+92
 2113 02a0 F4EEC77A 	 fcmpes s15,s14
 2114 02a4 F1EE10FA 	 fmstat
 2115 02a8 03DD     	 ble .L95
 421:../main.c     **** 		{
 422:../main.c     **** 			omega_mech_rps = (float)omega_mech_rps_temp;
 2116              	 .loc 4 422 0 is_stmt 1
 2117 02aa 1A4B     	 ldr r3,.L130+76
 2118 02ac 1B68     	 ldr r3,[r3]
 2119 02ae 1E4A     	 ldr r2,.L130+96
 2120 02b0 1360     	 str r3,[r2]
 2121              	.L95:
 423:../main.c     **** 		}
 424:../main.c     **** 
 425:../main.c     **** 		if(t > TIME_OMEGA_0){omega_ele_rads = 0;} // set omega  to 0 if no more hall detected
 2122              	 .loc 4 425 0
 2123 02b2 FB68     	 ldr r3,[r7,#12]
 2124 02b4 41F28832 	 movw r2,#5000
 2125 02b8 9342     	 cmp r3,r2
 2126 02ba 39D9     	 bls .L98
 2127              	 .loc 4 425 0 is_stmt 0 discriminator 1
 2128 02bc 1B4B     	 ldr r3,.L130+100
 2129 02be 4FF00002 	 mov r2,#0
 2130 02c2 1A60     	 str r2,[r3]
 2131 02c4 58E0     	 b .L99
 2132              	.L131:
 2133 02c6 00BF     	 .align 2
 2134              	.L130:
 2135 02c8 00000000 	 .word status_LED_red_cal_time
 2136 02cc 00000000 	 .word last_Hall_trig
 2137 02d0 00000000 	 .word time_since_A
 2138 02d4 00000000 	 .word time_since_B
 2139 02d8 00000000 	 .word time_since_C
 2140 02dc 00000000 	 .word time_180deg
 2141 02e0 00000000 	 .word time_180deg_cal
 2142 02e4 00806640 	 .word 1080459264
 2143 02e8 00000000 	 .word angle_in_sector
 2144 02ec 00007042 	 .word 1114636288
 2145 02f0 00007042 	 .word 1114636288
 2146 02f4 0000F041 	 .word 1106247680
 2147 02f8 00000000 	 .word direction
 2148 02fc 00000000 	 .word sector
 2149 0300 00004E40 	 .word 1078853632
 2150 0304 00000000 	 .word angle_phi
 2151 0308 00000000 	 .word offset_pos
 2152 030c 0000B443 	 .word 1135869952
 2153 0310 0000E143 	 .word 1138819072
 2154 0314 00000000 	 .word omega_mech_rps_temp
 2155 0318 00000000 	 .word offset_neg
 2156 031c 0000E1C3 	 .word -1008664576
 2157 0320 00004843 	 .word 1128792064
 2158 0324 000048C3 	 .word -1018691584
 2159 0328 00000000 	 .word omega_mech_rps
 2160 032c 00000000 	 .word omega_ele_rads
 2161              	.L98:
 426:../main.c     **** 		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s
 2162              	 .loc 4 426 0 is_stmt 1
 2163 0330 A34B     	 ldr r3,.L132+40
 2164 0332 D3ED007A 	 flds s15,[r3]
 2165 0336 77EEA77A 	 fadds s15,s15,s15
 2166 033a 17EE900A 	 fmrs r0,s15
 2167 033e FFF7FEFF 	 bl __aeabi_f2d
 2168 0342 0246     	 mov r2,r0
 2169 0344 0B46     	 mov r3,r1
 2170 0346 1046     	 mov r0,r2
 2171 0348 1946     	 mov r1,r3
 2172 034a 93A3     	 adr r3,.L132
 2173 034c D3E90023 	 ldrd r2,[r3]
 2174 0350 FFF7FEFF 	 bl __aeabi_dmul
 2175 0354 0246     	 mov r2,r0
 2176 0356 0B46     	 mov r3,r1
 2177 0358 1046     	 mov r0,r2
 2178 035a 1946     	 mov r1,r3
 2179 035c 4FF00002 	 mov r2,#0
 2180 0360 984B     	 ldr r3,.L132+44
 2181 0362 FFF7FEFF 	 bl __aeabi_dmul
 2182 0366 0246     	 mov r2,r0
 2183 0368 0B46     	 mov r3,r1
 2184 036a 1046     	 mov r0,r2
 2185 036c 1946     	 mov r1,r3
 2186 036e FFF7FEFF 	 bl __aeabi_d2f
 2187 0372 0246     	 mov r2,r0
 2188 0374 944B     	 ldr r3,.L132+48
 2189 0376 1A60     	 str r2,[r3]
 2190              	.L99:
 427:../main.c     **** 
 428:../main.c     **** 		omega_ele_degs = omega_ele_rads / Pi180;
 2191              	 .loc 4 428 0
 2192 0378 934B     	 ldr r3,.L132+48
 2193 037a 1B68     	 ldr r3,[r3]
 2194 037c 1846     	 mov r0,r3
 2195 037e FFF7FEFF 	 bl __aeabi_f2d
 2196 0382 0246     	 mov r2,r0
 2197 0384 0B46     	 mov r3,r1
 2198 0386 1046     	 mov r0,r2
 2199 0388 1946     	 mov r1,r3
 2200 038a 85A3     	 adr r3,.L132+8
 2201 038c D3E90023 	 ldrd r2,[r3]
 2202 0390 FFF7FEFF 	 bl __aeabi_ddiv
 2203 0394 0246     	 mov r2,r0
 2204 0396 0B46     	 mov r3,r1
 2205 0398 1046     	 mov r0,r2
 2206 039a 1946     	 mov r1,r3
 2207 039c FFF7FEFF 	 bl __aeabi_d2f
 2208 03a0 0246     	 mov r2,r0
 2209 03a2 8A4B     	 ldr r3,.L132+52
 2210 03a4 1A60     	 str r2,[r3]
 429:../main.c     **** 
 430:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% 
 431:../main.c     **** 
 432:../main.c     **** 		// Current read out over SPI
 433:../main.c     **** 		Current_U = readCurrent(ChipSelect_U);
 2211              	 .loc 4 433 0
 2212 03a6 0620     	 movs r0,#6
 2213 03a8 FFF7FEFF 	 bl readCurrent
 2214 03ac 0246     	 mov r2,r0
 2215 03ae 884B     	 ldr r3,.L132+56
 2216 03b0 1A60     	 str r2,[r3]
 434:../main.c     **** 		Current_V = readCurrent(ChipSelect_V);
 2217              	 .loc 4 434 0
 2218 03b2 0520     	 movs r0,#5
 2219 03b4 FFF7FEFF 	 bl readCurrent
 2220 03b8 0246     	 mov r2,r0
 2221 03ba 864B     	 ldr r3,.L132+60
 2222 03bc 1A60     	 str r2,[r3]
 435:../main.c     **** 		Current_W = readCurrent(ChipSelect_W);
 2223              	 .loc 4 435 0
 2224 03be 0320     	 movs r0,#3
 2225 03c0 FFF7FEFF 	 bl readCurrent
 2226 03c4 0246     	 mov r2,r0
 2227 03c6 844B     	 ldr r3,.L132+64
 2228 03c8 1A60     	 str r2,[r3]
 436:../main.c     **** 
 437:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of th
 438:../main.c     **** 
 439:../main.c     **** 		// conversion from rad/s to degree
 440:../main.c     **** 		float angle_phi_rad = angle_phi*Pi180;
 2229              	 .loc 4 440 0
 2230 03ca 844B     	 ldr r3,.L132+68
 2231 03cc 1B68     	 ldr r3,[r3]
 2232 03ce 1846     	 mov r0,r3
 2233 03d0 FFF7FEFF 	 bl __aeabi_f2d
 2234 03d4 0246     	 mov r2,r0
 2235 03d6 0B46     	 mov r3,r1
 2236 03d8 1046     	 mov r0,r2
 2237 03da 1946     	 mov r1,r3
 2238 03dc 70A3     	 adr r3,.L132+8
 2239 03de D3E90023 	 ldrd r2,[r3]
 2240 03e2 FFF7FEFF 	 bl __aeabi_dmul
 2241 03e6 0246     	 mov r2,r0
 2242 03e8 0B46     	 mov r3,r1
 2243 03ea 1046     	 mov r0,r2
 2244 03ec 1946     	 mov r1,r3
 2245 03ee FFF7FEFF 	 bl __aeabi_d2f
 2246 03f2 0346     	 mov r3,r0
 2247 03f4 BB60     	 str r3,[r7,#8]
 441:../main.c     **** 
 442:../main.c     **** 		// to decrease multiple calculations and computational effort
 443:../main.c     **** 		float cos_phi = cosf(angle_phi_rad);
 2248              	 .loc 4 443 0
 2249 03f6 B868     	 ldr r0,[r7,#8]
 2250 03f8 FFF7FEFF 	 bl cosf
 2251 03fc 7860     	 str r0,[r7,#4]
 444:../main.c     **** 		float sin_phi = sinf(angle_phi_rad);
 2252              	 .loc 4 444 0
 2253 03fe B868     	 ldr r0,[r7,#8]
 2254 0400 FFF7FEFF 	 bl sinf
 2255 0404 3860     	 str r0,[r7]
 445:../main.c     **** 
 446:../main.c     **** 		// Clark-Park transformation (from U,V,W to dq)
 447:../main.c     **** 		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-
 2256              	 .loc 4 447 0
 2257 0406 724B     	 ldr r3,.L132+56
 2258 0408 93ED007A 	 flds s14,[r3]
 2259 040c D7ED017A 	 flds s15,[r7,#4]
 2260 0410 27EE278A 	 fmuls s16,s14,s15
 2261 0414 B868     	 ldr r0,[r7,#8]
 2262 0416 FFF7FEFF 	 bl __aeabi_f2d
 2263 041a 0246     	 mov r2,r0
 2264 041c 0B46     	 mov r3,r1
 2265 041e 1046     	 mov r0,r2
 2266 0420 1946     	 mov r1,r3
 2267 0422 61A3     	 adr r3,.L132+16
 2268 0424 D3E90023 	 ldrd r2,[r3]
 2269 0428 FFF7FEFF 	 bl __aeabi_dsub
 2270 042c 0246     	 mov r2,r0
 2271 042e 0B46     	 mov r3,r1
 2272 0430 1046     	 mov r0,r2
 2273 0432 1946     	 mov r1,r3
 2274 0434 FFF7FEFF 	 bl __aeabi_d2f
 2275 0438 0346     	 mov r3,r0
 2276 043a 1846     	 mov r0,r3
 2277 043c FFF7FEFF 	 bl cosf
 2278 0440 07EE100A 	 fmsr s14,r0
 2279 0444 634B     	 ldr r3,.L132+60
 2280 0446 D3ED007A 	 flds s15,[r3]
 2281 044a 67EE277A 	 fmuls s15,s14,s15
 2282 044e 38EE278A 	 fadds s16,s16,s15
 2283 0452 B868     	 ldr r0,[r7,#8]
 2284 0454 FFF7FEFF 	 bl __aeabi_f2d
 2285 0458 0246     	 mov r2,r0
 2286 045a 0B46     	 mov r3,r1
 2287 045c 1046     	 mov r0,r2
 2288 045e 1946     	 mov r1,r3
 2289 0460 53A3     	 adr r3,.L132+24
 2290 0462 D3E90023 	 ldrd r2,[r3]
 2291 0466 FFF7FEFF 	 bl __aeabi_dsub
 2292 046a 0246     	 mov r2,r0
 2293 046c 0B46     	 mov r3,r1
 2294 046e 1046     	 mov r0,r2
 2295 0470 1946     	 mov r1,r3
 2296 0472 FFF7FEFF 	 bl __aeabi_d2f
 2297 0476 0346     	 mov r3,r0
 2298 0478 1846     	 mov r0,r3
 2299 047a FFF7FEFF 	 bl cosf
 2300 047e 07EE100A 	 fmsr s14,r0
 2301 0482 554B     	 ldr r3,.L132+64
 2302 0484 D3ED007A 	 flds s15,[r3]
 2303 0488 67EE277A 	 fmuls s15,s14,s15
 2304 048c 78EE277A 	 fadds s15,s16,s15
 2305 0490 17EE900A 	 fmrs r0,s15
 2306 0494 FFF7FEFF 	 bl __aeabi_f2d
 2307 0498 0246     	 mov r2,r0
 2308 049a 0B46     	 mov r3,r1
 2309 049c 1046     	 mov r0,r2
 2310 049e 1946     	 mov r1,r3
 2311 04a0 45A3     	 adr r3,.L132+32
 2312 04a2 D3E90023 	 ldrd r2,[r3]
 2313 04a6 FFF7FEFF 	 bl __aeabi_dmul
 2314 04aa 0246     	 mov r2,r0
 2315 04ac 0B46     	 mov r3,r1
 2316 04ae 1046     	 mov r0,r2
 2317 04b0 1946     	 mov r1,r3
 2318 04b2 FFF7FEFF 	 bl __aeabi_d2f
 2319 04b6 0246     	 mov r2,r0
 2320 04b8 494B     	 ldr r3,.L132+72
 2321 04ba 1A60     	 str r2,[r3]
 448:../main.c     **** 		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad
 2322              	 .loc 4 448 0
 2323 04bc D7ED007A 	 flds s15,[r7]
 2324 04c0 B1EE677A 	 fnegs s14,s15
 2325 04c4 424B     	 ldr r3,.L132+56
 2326 04c6 D3ED007A 	 flds s15,[r3]
 2327 04ca 27EE278A 	 fmuls s16,s14,s15
 2328 04ce B868     	 ldr r0,[r7,#8]
 2329 04d0 FFF7FEFF 	 bl __aeabi_f2d
 2330 04d4 0246     	 mov r2,r0
 2331 04d6 0B46     	 mov r3,r1
 2332 04d8 1046     	 mov r0,r2
 2333 04da 1946     	 mov r1,r3
 2334 04dc 32A3     	 adr r3,.L132+16
 2335 04de D3E90023 	 ldrd r2,[r3]
 2336 04e2 FFF7FEFF 	 bl __aeabi_dsub
 2337 04e6 0246     	 mov r2,r0
 2338 04e8 0B46     	 mov r3,r1
 2339 04ea 1046     	 mov r0,r2
 2340 04ec 1946     	 mov r1,r3
 2341 04ee FFF7FEFF 	 bl __aeabi_d2f
 2342 04f2 0346     	 mov r3,r0
 2343 04f4 1846     	 mov r0,r3
 2344 04f6 FFF7FEFF 	 bl sinf
 2345 04fa 07EE100A 	 fmsr s14,r0
 2346 04fe 354B     	 ldr r3,.L132+60
 2347 0500 D3ED007A 	 flds s15,[r3]
 2348 0504 67EE277A 	 fmuls s15,s14,s15
 2349 0508 38EE678A 	 fsubs s16,s16,s15
 2350 050c B868     	 ldr r0,[r7,#8]
 2351 050e FFF7FEFF 	 bl __aeabi_f2d
 2352 0512 0246     	 mov r2,r0
 2353 0514 0B46     	 mov r3,r1
 2354 0516 1046     	 mov r0,r2
 2355 0518 1946     	 mov r1,r3
 2356 051a 25A3     	 adr r3,.L132+24
 2357 051c D3E90023 	 ldrd r2,[r3]
 2358 0520 FFF7FEFF 	 bl __aeabi_dsub
 2359 0524 0246     	 mov r2,r0
 2360 0526 0B46     	 mov r3,r1
 2361 0528 1046     	 mov r0,r2
 2362 052a 1946     	 mov r1,r3
 2363 052c FFF7FEFF 	 bl __aeabi_d2f
 2364 0530 0346     	 mov r3,r0
 2365 0532 1846     	 mov r0,r3
 2366 0534 FFF7FEFF 	 bl sinf
 2367 0538 07EE100A 	 fmsr s14,r0
 2368 053c 264B     	 ldr r3,.L132+64
 2369 053e D3ED007A 	 flds s15,[r3]
 2370 0542 67EE277A 	 fmuls s15,s14,s15
 2371 0546 78EE677A 	 fsubs s15,s16,s15
 2372 054a 17EE900A 	 fmrs r0,s15
 2373 054e FFF7FEFF 	 bl __aeabi_f2d
 2374 0552 0246     	 mov r2,r0
 2375 0554 0B46     	 mov r3,r1
 2376 0556 1046     	 mov r0,r2
 2377 0558 1946     	 mov r1,r3
 2378 055a 17A3     	 adr r3,.L132+32
 2379 055c D3E90023 	 ldrd r2,[r3]
 2380 0560 FFF7FEFF 	 bl __aeabi_dmul
 2381 0564 0246     	 mov r2,r0
 2382 0566 0B46     	 mov r3,r1
 2383 0568 1046     	 mov r0,r2
 2384 056a 1946     	 mov r1,r3
 2385 056c FFF7FEFF 	 bl __aeabi_d2f
 2386 0570 0246     	 mov r2,r0
 2387 0572 1C4B     	 ldr r3,.L132+76
 2388 0574 1A60     	 str r2,[r3]
 449:../main.c     **** 
 450:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of
 451:../main.c     **** 
 452:../main.c     **** 		if(CAN_control == 1){// can control
 2389              	 .loc 4 452 0
 2390 0576 1C4B     	 ldr r3,.L132+80
 2391 0578 1B78     	 ldrb r3,[r3]
 2392 057a 012B     	 cmp r3,#1
 2393 057c 4DD1     	 bne .L100
 453:../main.c     **** 
 454:../main.c     **** 			if(CAN_new_meassage == 1){
 2394              	 .loc 4 454 0
 2395 057e 1B4B     	 ldr r3,.L132+84
 2396 0580 1B78     	 ldrb r3,[r3]
 2397 0582 012B     	 cmp r3,#1
 2398 0584 38D1     	 bne .L101
 455:../main.c     **** 				speed_ref = CAN_speed_ref;
 2399              	 .loc 4 455 0
 2400 0586 1A4B     	 ldr r3,.L132+88
 2401 0588 1B68     	 ldr r3,[r3]
 2402 058a 1A4A     	 ldr r2,.L132+92
 2403 058c 1360     	 str r3,[r2]
 456:../main.c     **** 				CAN_new_meassage = 0;
 2404              	 .loc 4 456 0
 2405 058e 174B     	 ldr r3,.L132+84
 2406 0590 0022     	 movs r2,#0
 2407 0592 1A70     	 strb r2,[r3]
 2408 0594 36E0     	 b .L102
 2409              	.L133:
 2410 0596 00BF     	 .align 3
 2411              	.L132:
 2412 0598 F1D4C853 	 .word 1405670641
 2413 059c FB210940 	 .word 1074340347
 2414 05a0 4DC90777 	 .word 1996998989
 2415 05a4 46DF913F 	 .word 1066524486
 2416 05a8 A038DB37 	 .word 937113760
 2417 05ac 52C10040 	 .word 1073791314
 2418 05b0 A038DB37 	 .word 937113760
 2419 05b4 52C11040 	 .word 1074839890
 2420 05b8 93761F57 	 .word 1461679763
 2421 05bc 5555E53F 	 .word 1071994197
 2422 05c0 00000000 	 .word omega_mech_rps
 2423 05c4 00002640 	 .word 1076232192
 2424 05c8 00000000 	 .word omega_ele_rads
 2425 05cc 00000000 	 .word omega_ele_degs
 2426 05d0 00000000 	 .word Current_U
 2427 05d4 00000000 	 .word Current_V
 2428 05d8 00000000 	 .word Current_W
 2429 05dc 00000000 	 .word angle_phi
 2430 05e0 00000000 	 .word id
 2431 05e4 00000000 	 .word iq
 2432 05e8 00000000 	 .word CAN_control
 2433 05ec 00000000 	 .word CAN_new_meassage
 2434 05f0 00000000 	 .word CAN_speed_ref
 2435 05f4 00000000 	 .word speed_ref
 2436              	.L101:
 457:../main.c     **** 			}
 458:../main.c     **** 			else{
 459:../main.c     **** 				CAN_no_com_counter ++;
 2437              	 .loc 4 459 0
 2438 05f8 B14B     	 ldr r3,.L134+32
 2439 05fa 1B78     	 ldrb r3,[r3]
 2440 05fc 0133     	 adds r3,r3,#1
 2441 05fe DAB2     	 uxtb r2,r3
 2442 0600 AF4B     	 ldr r3,.L134+32
 2443 0602 1A70     	 strb r2,[r3]
 2444              	.L102:
 460:../main.c     **** 			}
 461:../main.c     **** 
 462:../main.c     **** 			if(CAN_no_com_counter > CAN_NO_COM_TH){
 2445              	 .loc 4 462 0
 2446 0604 AE4B     	 ldr r3,.L134+32
 2447 0606 1B78     	 ldrb r3,[r3]
 2448 0608 FA2B     	 cmp r3,#250
 2449 060a 06D9     	 bls .L100
 463:../main.c     **** 				//CAN_new_meassage = 0;
 464:../main.c     **** 				CAN_no_com_counter = CAN_NO_COM_TH;
 2450              	 .loc 4 464 0
 2451 060c AC4B     	 ldr r3,.L134+32
 2452 060e FA22     	 movs r2,#250
 2453 0610 1A70     	 strb r2,[r3]
 465:../main.c     **** 				speed_ref = 0;
 2454              	 .loc 4 465 0
 2455 0612 AC4B     	 ldr r3,.L134+36
 2456 0614 4FF00002 	 mov r2,#0
 2457 0618 1A60     	 str r2,[r3]
 2458              	.L100:
 466:../main.c     **** 			}
 467:../main.c     **** 		}
 468:../main.c     **** 
 469:../main.c     **** 		omega_ele_rads_ref = ( speed_ref * PPZ ) / WHEEL_R;
 2459              	 .loc 4 469 0
 2460 061a AA4B     	 ldr r3,.L134+36
 2461 061c D3ED007A 	 flds s15,[r3]
 2462 0620 B2EE067A 	 fconsts s14,#38
 2463 0624 67EE877A 	 fmuls s15,s15,s14
 2464 0628 17EE900A 	 fmrs r0,s15
 2465 062c FFF7FEFF 	 bl __aeabi_f2d
 2466 0630 0246     	 mov r2,r0
 2467 0632 0B46     	 mov r3,r1
 2468 0634 1046     	 mov r0,r2
 2469 0636 1946     	 mov r1,r3
 2470 0638 99A3     	 adr r3,.L134
 2471 063a D3E90023 	 ldrd r2,[r3]
 2472 063e FFF7FEFF 	 bl __aeabi_ddiv
 2473 0642 0246     	 mov r2,r0
 2474 0644 0B46     	 mov r3,r1
 2475 0646 1046     	 mov r0,r2
 2476 0648 1946     	 mov r1,r3
 2477 064a FFF7FEFF 	 bl __aeabi_d2f
 2478 064e 0246     	 mov r2,r0
 2479 0650 9D4B     	 ldr r3,.L134+40
 2480 0652 1A60     	 str r2,[r3]
 470:../main.c     **** 
 471:../main.c     **** 		if((omega_ele_rads_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rad
 2481              	 .loc 4 471 0
 2482 0654 9C4B     	 ldr r3,.L134+40
 2483 0656 D3ED007A 	 flds s15,[r3]
 2484 065a F5EE407A 	 fcmpzs s15
 2485 065e F1EE10FA 	 fmstat
 2486 0662 1CD1     	 bne .L103
 2487              	 .loc 4 471 0 is_stmt 0 discriminator 1
 2488 0664 994B     	 ldr r3,.L134+44
 2489 0666 1B78     	 ldrb r3,[r3]
 2490 0668 012B     	 cmp r3,#1
 2491 066a 18D1     	 bne .L103
 2492              	 .loc 4 471 0 discriminator 2
 2493 066c 984B     	 ldr r3,.L134+48
 2494 066e D3ED007A 	 flds s15,[r3]
 2495 0672 9FED987A 	 flds s14,.L134+52
 2496 0676 F4EEC77A 	 fcmpes s15,s14
 2497 067a F1EE10FA 	 fmstat
 2498 067e 0EDD     	 ble .L103
 2499              	 .loc 4 471 0 discriminator 3
 2500 0680 934B     	 ldr r3,.L134+48
 2501 0682 D3ED007A 	 flds s15,[r3]
 2502 0686 9FED947A 	 flds s14,.L134+56
 2503 068a F4EEC77A 	 fcmpes s15,s14
 2504 068e F1EE10FA 	 fmstat
 2505 0692 04D5     	 bpl .L103
 472:../main.c     **** 			T_ref = 0;
 2506              	 .loc 4 472 0 is_stmt 1
 2507 0694 914B     	 ldr r3,.L134+60
 2508 0696 4FF00002 	 mov r2,#0
 2509 069a 1A60     	 str r2,[r3]
 2510 069c 0BE0     	 b .L106
 2511              	.L103:
 473:../main.c     **** 		}
 474:../main.c     **** 		else{
 475:../main.c     **** 			if(MOTOR_NUM == 1){
 476:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param_1); // outer control loop q f
 2512              	 .loc 4 476 0
 2513 069e 8A4B     	 ldr r3,.L134+40
 2514 06a0 1A68     	 ldr r2,[r3]
 2515 06a2 8B4B     	 ldr r3,.L134+48
 2516 06a4 1B68     	 ldr r3,[r3]
 2517 06a6 1046     	 mov r0,r2
 2518 06a8 1946     	 mov r1,r3
 2519 06aa 8D4A     	 ldr r2,.L134+64
 2520 06ac FFF7FEFF 	 bl PID_Controller
 2521 06b0 0246     	 mov r2,r0
 2522 06b2 8A4B     	 ldr r3,.L134+60
 2523 06b4 1A60     	 str r2,[r3]
 2524              	.L106:
 477:../main.c     **** 			}
 478:../main.c     **** 			else{
 479:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param);
 480:../main.c     **** 			}
 481:../main.c     **** 		}
 482:../main.c     **** 
 483:../main.c     **** 		if (Speed_control == 1){ // 1 speed contola aktive 0 not aktive torqe contol aktive
 2525              	 .loc 4 483 0
 2526 06b6 854B     	 ldr r3,.L134+44
 2527 06b8 1B78     	 ldrb r3,[r3]
 2528 06ba 012B     	 cmp r3,#1
 2529 06bc 16D1     	 bne .L107
 484:../main.c     **** 			if(MOTOR_NUM == 1) {
 485:../main.c     **** 				iq_ref =  T_ref / K_T; // dirction for motor 1
 2530              	 .loc 4 485 0
 2531 06be 874B     	 ldr r3,.L134+60
 2532 06c0 1B68     	 ldr r3,[r3]
 2533 06c2 1846     	 mov r0,r3
 2534 06c4 FFF7FEFF 	 bl __aeabi_f2d
 2535 06c8 0246     	 mov r2,r0
 2536 06ca 0B46     	 mov r3,r1
 2537 06cc 1046     	 mov r0,r2
 2538 06ce 1946     	 mov r1,r3
 2539 06d0 75A3     	 adr r3,.L134+8
 2540 06d2 D3E90023 	 ldrd r2,[r3]
 2541 06d6 FFF7FEFF 	 bl __aeabi_ddiv
 2542 06da 0246     	 mov r2,r0
 2543 06dc 0B46     	 mov r3,r1
 2544 06de 1046     	 mov r0,r2
 2545 06e0 1946     	 mov r1,r3
 2546 06e2 FFF7FEFF 	 bl __aeabi_d2f
 2547 06e6 0246     	 mov r2,r0
 2548 06e8 7E4B     	 ldr r3,.L134+68
 2549 06ea 1A60     	 str r2,[r3]
 2550              	.L107:
 486:../main.c     **** 			}
 487:../main.c     **** 			else{
 488:../main.c     **** 				iq_ref = - T_ref / K_T;// dirction for motor 1
 489:../main.c     **** 			}
 490:../main.c     **** 		}
 491:../main.c     **** 
 492:../main.c     **** 		//saturation to IQ_REF_MAC limit
 493:../main.c     **** 		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 2551              	 .loc 4 493 0
 2552 06ec 7D4B     	 ldr r3,.L134+68
 2553 06ee D3ED007A 	 flds s15,[r3]
 2554 06f2 B9EE047A 	 fconsts s14,#148
 2555 06f6 F4EEC77A 	 fcmpes s15,s14
 2556 06fa F1EE10FA 	 fmstat
 2557 06fe 02D5     	 bpl .L108
 2558              	 .loc 4 493 0 is_stmt 0 discriminator 1
 2559 0700 784B     	 ldr r3,.L134+68
 2560 0702 794A     	 ldr r2,.L134+72
 2561 0704 1A60     	 str r2,[r3]
 2562              	.L108:
 494:../main.c     **** 		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 2563              	 .loc 4 494 0 is_stmt 1
 2564 0706 774B     	 ldr r3,.L134+68
 2565 0708 D3ED007A 	 flds s15,[r3]
 2566 070c B1EE047A 	 fconsts s14,#20
 2567 0710 F4EEC77A 	 fcmpes s15,s14
 2568 0714 F1EE10FA 	 fmstat
 2569 0718 02DD     	 ble .L110
 2570              	 .loc 4 494 0 is_stmt 0 discriminator 1
 2571 071a 724B     	 ldr r3,.L134+68
 2572 071c 734A     	 ldr r2,.L134+76
 2573 071e 1A60     	 str r2,[r3]
 2574              	.L110:
 495:../main.c     **** 
 496:../main.c     **** 		if(Torque_control == 1){
 2575              	 .loc 4 496 0 is_stmt 1
 2576 0720 734B     	 ldr r3,.L134+80
 2577 0722 1B78     	 ldrb r3,[r3]
 2578 0724 012B     	 cmp r3,#1
 2579 0726 16D1     	 bne .L112
 497:../main.c     **** 			Vd_ref = PID_Controller(0.0,id,&Id_param);
 2580              	 .loc 4 497 0
 2581 0728 724B     	 ldr r3,.L134+84
 2582 072a 1B68     	 ldr r3,[r3]
 2583 072c 4FF00000 	 mov r0,#0
 2584 0730 1946     	 mov r1,r3
 2585 0732 714A     	 ldr r2,.L134+88
 2586 0734 FFF7FEFF 	 bl PID_Controller
 2587 0738 0246     	 mov r2,r0
 2588 073a 704B     	 ldr r3,.L134+92
 2589 073c 1A60     	 str r2,[r3]
 498:../main.c     **** 			Vq_ref = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
 2590              	 .loc 4 498 0
 2591 073e 694B     	 ldr r3,.L134+68
 2592 0740 1A68     	 ldr r2,[r3]
 2593 0742 6F4B     	 ldr r3,.L134+96
 2594 0744 1B68     	 ldr r3,[r3]
 2595 0746 1046     	 mov r0,r2
 2596 0748 1946     	 mov r1,r3
 2597 074a 6E4A     	 ldr r2,.L134+100
 2598 074c FFF7FEFF 	 bl PID_Controller
 2599 0750 0246     	 mov r2,r0
 2600 0752 6D4B     	 ldr r3,.L134+104
 2601 0754 1A60     	 str r2,[r3]
 2602              	.L112:
 499:../main.c     **** 		}
 500:../main.c     **** 
 501:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9
 502:../main.c     **** 
 503:../main.c     **** 		// dq to alpha beta for voltage
 504:../main.c     **** 		Valpha = Vd_ref*cos_phi - Vq_ref*sin_phi;
 2603              	 .loc 4 504 0
 2604 0756 694B     	 ldr r3,.L134+92
 2605 0758 93ED007A 	 flds s14,[r3]
 2606 075c D7ED017A 	 flds s15,[r7,#4]
 2607 0760 27EE277A 	 fmuls s14,s14,s15
 2608 0764 684B     	 ldr r3,.L134+104
 2609 0766 D3ED006A 	 flds s13,[r3]
 2610 076a D7ED007A 	 flds s15,[r7]
 2611 076e 66EEA77A 	 fmuls s15,s13,s15
 2612 0772 77EE677A 	 fsubs s15,s14,s15
 2613 0776 654B     	 ldr r3,.L134+108
 2614 0778 C3ED007A 	 fsts s15,[r3]
 505:../main.c     **** 		Vbeta = Vd_ref*sin_phi + Vq_ref*cos_phi;
 2615              	 .loc 4 505 0
 2616 077c 5F4B     	 ldr r3,.L134+92
 2617 077e 93ED007A 	 flds s14,[r3]
 2618 0782 D7ED007A 	 flds s15,[r7]
 2619 0786 27EE277A 	 fmuls s14,s14,s15
 2620 078a 5F4B     	 ldr r3,.L134+104
 2621 078c D3ED006A 	 flds s13,[r3]
 2622 0790 D7ED017A 	 flds s15,[r7,#4]
 2623 0794 66EEA77A 	 fmuls s15,s13,s15
 2624 0798 77EE277A 	 fadds s15,s14,s15
 2625 079c 5C4B     	 ldr r3,.L134+112
 2626 079e C3ED007A 	 fsts s15,[r3]
 506:../main.c     **** 
 507:../main.c     **** 		// calc angle for SVM app
 508:../main.c     **** 		angle_ab_rad = atanf(Vbeta/Valpha);
 2627              	 .loc 4 508 0
 2628 07a2 5B4B     	 ldr r3,.L134+112
 2629 07a4 93ED007A 	 flds s14,[r3]
 2630 07a8 584B     	 ldr r3,.L134+108
 2631 07aa D3ED007A 	 flds s15,[r3]
 2632 07ae C7EE277A 	 fdivs s15,s14,s15
 2633 07b2 17EE900A 	 fmrs r0,s15
 2634 07b6 FFF7FEFF 	 bl atanf
 2635 07ba 0246     	 mov r2,r0
 2636 07bc 554B     	 ldr r3,.L134+116
 2637 07be 1A60     	 str r2,[r3]
 509:../main.c     **** 		angle_ab = angle_ab_rad/Pi180;
 2638              	 .loc 4 509 0
 2639 07c0 544B     	 ldr r3,.L134+116
 2640 07c2 1B68     	 ldr r3,[r3]
 2641 07c4 1846     	 mov r0,r3
 2642 07c6 FFF7FEFF 	 bl __aeabi_f2d
 2643 07ca 0246     	 mov r2,r0
 2644 07cc 0B46     	 mov r3,r1
 2645 07ce 1046     	 mov r0,r2
 2646 07d0 1946     	 mov r1,r3
 2647 07d2 37A3     	 adr r3,.L134+16
 2648 07d4 D3E90023 	 ldrd r2,[r3]
 2649 07d8 FFF7FEFF 	 bl __aeabi_ddiv
 2650 07dc 0246     	 mov r2,r0
 2651 07de 0B46     	 mov r3,r1
 2652 07e0 1046     	 mov r0,r2
 2653 07e2 1946     	 mov r1,r3
 2654 07e4 FFF7FEFF 	 bl __aeabi_d2f
 2655 07e8 0246     	 mov r2,r0
 2656 07ea 4B4B     	 ldr r3,.L134+120
 2657 07ec 1A60     	 str r2,[r3]
 510:../main.c     **** 
 511:../main.c     **** 		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 2658              	 .loc 4 511 0
 2659 07ee 474B     	 ldr r3,.L134+108
 2660 07f0 D3ED007A 	 flds s15,[r3]
 2661 07f4 F5EEC07A 	 fcmpezs s15
 2662 07f8 F1EE10FA 	 fmstat
 2663 07fc 0AD5     	 bpl .L129
 2664              	 .loc 4 511 0 is_stmt 0 discriminator 1
 2665 07fe 464B     	 ldr r3,.L134+120
 2666 0800 D3ED007A 	 flds s15,[r3]
 2667 0804 9FED457A 	 flds s14,.L134+124
 2668 0808 77EE877A 	 fadds s15,s15,s14
 2669 080c 424B     	 ldr r3,.L134+120
 2670 080e C3ED007A 	 fsts s15,[r3]
 2671 0812 11E0     	 b .L115
 2672              	.L129:
 512:../main.c     **** 		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 2673              	 .loc 4 512 0 is_stmt 1
 2674 0814 3E4B     	 ldr r3,.L134+112
 2675 0816 D3ED007A 	 flds s15,[r3]
 2676 081a F5EEC07A 	 fcmpezs s15
 2677 081e F1EE10FA 	 fmstat
 2678 0822 09D5     	 bpl .L115
 2679              	 .loc 4 512 0 is_stmt 0 discriminator 1
 2680 0824 3C4B     	 ldr r3,.L134+120
 2681 0826 D3ED007A 	 flds s15,[r3]
 2682 082a 9FED3D7A 	 flds s14,.L134+128
 2683 082e 77EE877A 	 fadds s15,s15,s14
 2684 0832 394B     	 ldr r3,.L134+120
 2685 0834 C3ED007A 	 fsts s15,[r3]
 2686              	.L115:
 513:../main.c     **** 
 514:../main.c     **** 		/*  shortend to one line
 515:../main.c     **** 		// amplitude calculation
 516:../main.c     **** 		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 517:../main.c     **** 
 518:../main.c     **** 		//K_inv = V/m --> m = V / K_inv
 519:../main.c     **** 		modulation_index = amplitude_ab/K_inv;
 520:../main.c     **** 
 521:../main.c     **** 		//scale maximum 1 to 10000 -->
 522:../main.c     **** 		modulation_index_scaled = 10000*modulation_index;
 523:../main.c     **** 
 524:../main.c     **** 		*/
 525:../main.c     **** 		// shortened ca 4% improvemnt
 526:../main.c     **** 		modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;
 2687              	 .loc 4 526 0 is_stmt 1
 2688 0838 344B     	 ldr r3,.L134+108
 2689 083a 93ED007A 	 flds s14,[r3]
 2690 083e 334B     	 ldr r3,.L134+108
 2691 0840 D3ED007A 	 flds s15,[r3]
 2692 0844 27EE277A 	 fmuls s14,s14,s15
 2693 0848 314B     	 ldr r3,.L134+112
 2694 084a D3ED006A 	 flds s13,[r3]
 2695 084e 304B     	 ldr r3,.L134+112
 2696 0850 D3ED007A 	 flds s15,[r3]
 2697 0854 66EEA77A 	 fmuls s15,s13,s15
 2698 0858 77EE277A 	 fadds s15,s14,s15
 2699 085c 17EE900A 	 fmrs r0,s15
 2700 0860 FFF7FEFF 	 bl sqrtf
 2701 0864 0346     	 mov r3,r0
 2702 0866 1846     	 mov r0,r3
 2703 0868 FFF7FEFF 	 bl __aeabi_f2d
 2704 086c 0246     	 mov r2,r0
 2705 086e 0B46     	 mov r3,r1
 2706 0870 1046     	 mov r0,r2
 2707 0872 1946     	 mov r1,r3
 2708 0874 10A3     	 adr r3,.L134+24
 2709 0876 D3E90023 	 ldrd r2,[r3]
 2710 087a FFF7FEFF 	 bl __aeabi_dmul
 2711 087e 0246     	 mov r2,r0
 2712 0880 0B46     	 mov r3,r1
 2713 0882 1046     	 mov r0,r2
 2714 0884 1946     	 mov r1,r3
 2715 0886 FFF7FEFF 	 bl __aeabi_d2f
 2716 088a 0246     	 mov r2,r0
 2717 088c 254B     	 ldr r3,.L134+132
 2718 088e 1A60     	 str r2,[r3]
 527:../main.c     **** 
 528:../main.c     **** 		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the ti
 2719              	 .loc 4 528 0
 2720 0890 2548     	 ldr r0,.L134+136
 2721 0892 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 529:../main.c     **** 
 530:../main.c     **** }
 2722              	 .loc 4 530 0
 2723 0896 1037     	 adds r7,r7,#16
 2724              	.LCFI84:
 2725              	 .cfi_def_cfa_offset 24
 2726 0898 BD46     	 mov sp,r7
 2727              	.LCFI85:
 2728              	 .cfi_def_cfa_register 13
 2729              	 
 2730 089a BDEC028B 	 fldmfdd sp!,{d8}
 2731              	.LCFI86:
 2732              	 .cfi_restore 80
 2733              	 .cfi_restore 81
 2734              	 .cfi_def_cfa_offset 16
 2735 089e B0BD     	 pop {r4,r5,r7,pc}
 2736              	.L135:
 2737              	 .align 3
 2738              	.L134:
 2739 08a0 48E17A14 	 .word 343597384
 2740 08a4 AE47B13F 	 .word 1068582830
 2741 08a8 E17A14AE 	 .word -1374389535
 2742 08ac 47E1CA3F 	 .word 1070260551
 2743 08b0 4DC90777 	 .word 1996998989
 2744 08b4 46DF913F 	 .word 1066524486
 2745 08b8 1361C3D3 	 .word -742170349
 2746 08bc AB0A8240 	 .word 1082264235
 2747 08c0 00000000 	 .word CAN_no_com_counter
 2748 08c4 00000000 	 .word speed_ref
 2749 08c8 00000000 	 .word omega_ele_rads_ref
 2750 08cc 00000000 	 .word Speed_control
 2751 08d0 00000000 	 .word omega_ele_rads
 2752 08d4 000048C3 	 .word -1018691584
 2753 08d8 00004843 	 .word 1128792064
 2754 08dc 00000000 	 .word T_ref
 2755 08e0 00000000 	 .word T_param_1
 2756 08e4 00000000 	 .word iq_ref
 2757 08e8 0000A0C0 	 .word -1063256064
 2758 08ec 0000A040 	 .word 1084227584
 2759 08f0 00000000 	 .word Torque_control
 2760 08f4 00000000 	 .word id
 2761 08f8 00000000 	 .word Id_param
 2762 08fc 00000000 	 .word Vd_ref
 2763 0900 00000000 	 .word iq
 2764 0904 00000000 	 .word Iq_param
 2765 0908 00000000 	 .word Vq_ref
 2766 090c 00000000 	 .word Valpha
 2767 0910 00000000 	 .word Vbeta
 2768 0914 00000000 	 .word angle_ab_rad
 2769 0918 00000000 	 .word angle_ab
 2770 091c 00003443 	 .word 1127481344
 2771 0920 0000B443 	 .word 1135869952
 2772 0924 00000000 	 .word modulation_index_scaled
 2773 0928 00000000 	 .word status_LED_red_cal_time
 2774              	 .cfi_endproc
 2775              	.LFE485:
 2777 092c AFF30080 	 .section .text.PID_Controller,"ax",%progbits
 2778              	 .align 2
 2779              	 .global PID_Controller
 2780              	 .thumb
 2781              	 .thumb_func
 2783              	PID_Controller:
 2784              	.LFB486:
 531:../main.c     **** 
 532:../main.c     **** // PID Controller
 533:../main.c     **** float PID_Controller(float SetPoint,float ActValue,PID_param *param){
 2785              	 .loc 4 533 0
 2786              	 .cfi_startproc
 2787              	 
 2788              	 
 2789              	 
 2790 0000 80B4     	 push {r7}
 2791              	.LCFI87:
 2792              	 .cfi_def_cfa_offset 4
 2793              	 .cfi_offset 7,-4
 2794 0002 89B0     	 sub sp,sp,#36
 2795              	.LCFI88:
 2796              	 .cfi_def_cfa_offset 40
 2797 0004 00AF     	 add r7,sp,#0
 2798              	.LCFI89:
 2799              	 .cfi_def_cfa_register 7
 2800 0006 F860     	 str r0,[r7,#12]
 2801 0008 B960     	 str r1,[r7,#8]
 2802 000a 7A60     	 str r2,[r7,#4]
 534:../main.c     **** 
 535:../main.c     **** 	float Deviation = SetPoint - ActValue;
 2803              	 .loc 4 535 0
 2804 000c 97ED037A 	 flds s14,[r7,#12]
 2805 0010 D7ED027A 	 flds s15,[r7,#8]
 2806 0014 77EE677A 	 fsubs s15,s14,s15
 2807 0018 C7ED067A 	 fsts s15,[r7,#24]
 536:../main.c     **** 	float temp1, temp2;
 537:../main.c     **** 
 538:../main.c     **** 	 temp1 = param->P*Deviation;
 2808              	 .loc 4 538 0
 2809 001c 7B68     	 ldr r3,[r7,#4]
 2810 001e 93ED007A 	 flds s14,[r3]
 2811 0022 D7ED067A 	 flds s15,[r7,#24]
 2812 0026 67EE277A 	 fmuls s15,s14,s15
 2813 002a C7ED057A 	 fsts s15,[r7,#20]
 539:../main.c     **** 	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;
 2814              	 .loc 4 539 0
 2815 002e 7B68     	 ldr r3,[r7,#4]
 2816 0030 93ED017A 	 flds s14,[r3,#4]
 2817 0034 214B     	 ldr r3,.L145
 2818 0036 D3ED007A 	 flds s15,[r3]
 2819 003a 27EE277A 	 fmuls s14,s14,s15
 2820 003e D7ED067A 	 flds s15,[r7,#24]
 2821 0042 27EE277A 	 fmuls s14,s14,s15
 2822 0046 D7ED057A 	 flds s15,[r7,#20]
 2823 004a 37EE277A 	 fadds s14,s14,s15
 2824 004e 7B68     	 ldr r3,[r7,#4]
 2825 0050 D3ED087A 	 flds s15,[r3,#32]
 2826 0054 77EE277A 	 fadds s15,s14,s15
 2827 0058 C7ED077A 	 fsts s15,[r7,#28]
 540:../main.c     **** 
 541:../main.c     **** 	 if (temp2 >= param->MaxLimit){
 2828              	 .loc 4 541 0
 2829 005c 7B68     	 ldr r3,[r7,#4]
 2830 005e 93ED037A 	 flds s14,[r3,#12]
 2831 0062 D7ED077A 	 flds s15,[r7,#28]
 2832 0066 B4EEE77A 	 fcmpes s14,s15
 2833 006a F1EE10FA 	 fmstat
 2834 006e 03D8     	 bhi .L144
 542:../main.c     **** 		 temp2 = param->MaxLimit;
 2835              	 .loc 4 542 0
 2836 0070 7B68     	 ldr r3,[r7,#4]
 2837 0072 DB68     	 ldr r3,[r3,#12]
 2838 0074 FB61     	 str r3,[r7,#28]
 2839 0076 0CE0     	 b .L139
 2840              	.L144:
 543:../main.c     **** 	 }
 544:../main.c     **** 	 else if (temp2 < param->MinLimit){
 2841              	 .loc 4 544 0
 2842 0078 7B68     	 ldr r3,[r7,#4]
 2843 007a 93ED047A 	 flds s14,[r3,#16]
 2844 007e D7ED077A 	 flds s15,[r7,#28]
 2845 0082 B4EEE77A 	 fcmpes s14,s15
 2846 0086 F1EE10FA 	 fmstat
 2847 008a 02DD     	 ble .L139
 545:../main.c     **** 		 temp2 = param->MinLimit;
 2848              	 .loc 4 545 0
 2849 008c 7B68     	 ldr r3,[r7,#4]
 2850 008e 1B69     	 ldr r3,[r3,#16]
 2851 0090 FB61     	 str r3,[r7,#28]
 2852              	.L139:
 546:../main.c     **** 	 }
 547:../main.c     **** 
 548:../main.c     **** 	 param->Output_z = temp2 - temp1;
 2853              	 .loc 4 548 0
 2854 0092 97ED077A 	 flds s14,[r7,#28]
 2855 0096 D7ED057A 	 flds s15,[r7,#20]
 2856 009a 77EE677A 	 fsubs s15,s14,s15
 2857 009e 7B68     	 ldr r3,[r7,#4]
 2858 00a0 C3ED087A 	 fsts s15,[r3,#32]
 549:../main.c     **** 
 550:../main.c     **** 	 param->Output = temp2;
 2859              	 .loc 4 550 0
 2860 00a4 7B68     	 ldr r3,[r7,#4]
 2861 00a6 FA69     	 ldr r2,[r7,#28]
 2862 00a8 5A61     	 str r2,[r3,#20]
 551:../main.c     **** 
 552:../main.c     **** 	return param->Output;
 2863              	 .loc 4 552 0
 2864 00aa 7B68     	 ldr r3,[r7,#4]
 2865 00ac 5B69     	 ldr r3,[r3,#20]
 553:../main.c     **** 
 554:../main.c     **** }
 2866              	 .loc 4 554 0
 2867 00ae 1846     	 mov r0,r3
 2868 00b0 2437     	 adds r7,r7,#36
 2869              	.LCFI90:
 2870              	 .cfi_def_cfa_offset 4
 2871 00b2 BD46     	 mov sp,r7
 2872              	.LCFI91:
 2873              	 .cfi_def_cfa_register 13
 2874              	 
 2875 00b4 5DF8047B 	 ldr r7,[sp],#4
 2876              	.LCFI92:
 2877              	 .cfi_restore 7
 2878              	 .cfi_def_cfa_offset 0
 2879 00b8 7047     	 bx lr
 2880              	.L146:
 2881 00ba 00BF     	 .align 2
 2882              	.L145:
 2883 00bc 00000000 	 .word Tcyc
 2884              	 .cfi_endproc
 2885              	.LFE486:
 2887              	 .section .text.readCurrent,"ax",%progbits
 2888              	 .align 2
 2889              	 .global readCurrent
 2890              	 .thumb
 2891              	 .thumb_func
 2893              	readCurrent:
 2894              	.LFB487:
 555:../main.c     **** 
 556:../main.c     **** 
 557:../main.c     **** //Read Current  via SPI-Interface
 558:../main.c     **** float readCurrent(uint8_t ChipSelect){
 2895              	 .loc 4 558 0
 2896              	 .cfi_startproc
 2897              	 
 2898              	 
 2899 0000 80B5     	 push {r7,lr}
 2900              	.LCFI93:
 2901              	 .cfi_def_cfa_offset 8
 2902              	 .cfi_offset 7,-8
 2903              	 .cfi_offset 14,-4
 2904 0002 86B0     	 sub sp,sp,#24
 2905              	.LCFI94:
 2906              	 .cfi_def_cfa_offset 32
 2907 0004 00AF     	 add r7,sp,#0
 2908              	.LCFI95:
 2909              	 .cfi_def_cfa_register 7
 2910 0006 0346     	 mov r3,r0
 2911 0008 FB71     	 strb r3,[r7,#7]
 559:../main.c     **** 	uint8_t ReadData[2];
 560:../main.c     **** 
 561:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, ChipSelect);
 2912              	 .loc 4 561 0
 2913 000a FB79     	 ldrb r3,[r7,#7]
 2914 000c 9BB2     	 uxth r3,r3
 2915 000e 2248     	 ldr r0,.L149
 2916 0010 1946     	 mov r1,r3
 2917 0012 FFF7FEFF 	 bl BUS_IO_Write
 562:../main.c     **** 	SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2U);
 2918              	 .loc 4 562 0
 2919 0016 07F10C03 	 add r3,r7,#12
 2920 001a 2048     	 ldr r0,.L149+4
 2921 001c 1946     	 mov r1,r3
 2922 001e 0222     	 movs r2,#2
 2923 0020 FFF7FEFF 	 bl SPI_MASTER_Receive
 563:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, 0b111);
 2924              	 .loc 4 563 0
 2925 0024 1C48     	 ldr r0,.L149
 2926 0026 0721     	 movs r1,#7
 2927 0028 FFF7FEFF 	 bl BUS_IO_Write
 564:../main.c     **** 	ReadData[0] = ReadData[0] & 0X1F; 									//cutting away the 3 info bits
 2928              	 .loc 4 564 0
 2929 002c 3B7B     	 ldrb r3,[r7,#12]
 2930 002e 03F01F03 	 and r3,r3,#31
 2931 0032 DBB2     	 uxtb r3,r3
 2932 0034 3B73     	 strb r3,[r7,#12]
 565:../main.c     **** 	uint16_t iCurrent = ReadData[0]<<8 | ReadData[1];					//combine Data
 2933              	 .loc 4 565 0
 2934 0036 3B7B     	 ldrb r3,[r7,#12]
 2935 0038 1B02     	 lsls r3,r3,#8
 2936 003a 9AB2     	 uxth r2,r3
 2937 003c 7B7B     	 ldrb r3,[r7,#13]
 2938 003e 9BB2     	 uxth r3,r3
 2939 0040 1343     	 orrs r3,r3,r2
 2940 0042 9BB2     	 uxth r3,r3
 2941 0044 FB82     	 strh r3,[r7,#22]
 566:../main.c     **** 
 567:../main.c     **** 	// calculation of the current
 568:../main.c     **** 	float fCurrent = ((float)iCurrent - 4096.0)/160.0;					// ATTENTION: value has to be divided by 16
 2942              	 .loc 4 568 0
 2943 0046 FB8A     	 ldrh r3,[r7,#22]
 2944 0048 07EE903A 	 fmsr s15,r3
 2945 004c F8EE677A 	 fuitos s15,s15
 2946 0050 17EE900A 	 fmrs r0,s15
 2947 0054 FFF7FEFF 	 bl __aeabi_f2d
 2948 0058 0246     	 mov r2,r0
 2949 005a 0B46     	 mov r3,r1
 2950 005c 1046     	 mov r0,r2
 2951 005e 1946     	 mov r1,r3
 2952 0060 4FF00002 	 mov r2,#0
 2953 0064 0E4B     	 ldr r3,.L149+8
 2954 0066 FFF7FEFF 	 bl __aeabi_dsub
 2955 006a 0246     	 mov r2,r0
 2956 006c 0B46     	 mov r3,r1
 2957 006e 1046     	 mov r0,r2
 2958 0070 1946     	 mov r1,r3
 2959 0072 4FF00002 	 mov r2,#0
 2960 0076 0B4B     	 ldr r3,.L149+12
 2961 0078 FFF7FEFF 	 bl __aeabi_ddiv
 2962 007c 0246     	 mov r2,r0
 2963 007e 0B46     	 mov r3,r1
 2964 0080 1046     	 mov r0,r2
 2965 0082 1946     	 mov r1,r3
 2966 0084 FFF7FEFF 	 bl __aeabi_d2f
 2967 0088 0346     	 mov r3,r0
 2968 008a 3B61     	 str r3,[r7,#16]
 569:../main.c     **** 
 570:../main.c     **** 	return fCurrent;
 2969              	 .loc 4 570 0
 2970 008c 3B69     	 ldr r3,[r7,#16]
 571:../main.c     **** }
 2971              	 .loc 4 571 0
 2972 008e 1846     	 mov r0,r3
 2973 0090 1837     	 adds r7,r7,#24
 2974              	.LCFI96:
 2975              	 .cfi_def_cfa_offset 8
 2976 0092 BD46     	 mov sp,r7
 2977              	.LCFI97:
 2978              	 .cfi_def_cfa_register 13
 2979              	 
 2980 0094 80BD     	 pop {r7,pc}
 2981              	.L150:
 2982 0096 00BF     	 .align 2
 2983              	.L149:
 2984 0098 00000000 	 .word SPI_ChipSelect
 2985 009c 00000000 	 .word SPI_MASTER_0
 2986 00a0 0000B040 	 .word 1085276160
 2987 00a4 00006440 	 .word 1080295424
 2988              	 .cfi_endproc
 2989              	.LFE487:
 2991              	 .text
 2992              	.Letext0:
 2993              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2994              	 .file 6 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2995              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2996              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 2997              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_scu.h"
 2998              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 2999              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_spi.h"
 3000              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master.h"
 3001              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io.h"
 3002              	 .file 14 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_eru.h"
 3003              	 .file 15 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_ccu8.h"
 3004              	 .file 16 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 3005              	 .file 17 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm.h"
 3006              	 .file 18 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 3007              	 .file 19 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 3008              	 .file 20 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 3009              	 .file 21 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DAVE.h"
 3010              	 .file 22 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 3011              	 .file 23 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 3012              	 .file 24 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 3013              	 .file 25 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master_extern.h"
 3014              	 .file 26 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io_extern.h"
 3015              	 .file 27 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt_extern.h"
 3016              	 .file 28 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 3017              	 .file 29 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:163    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:167    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:207    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:211    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:250    .text.PIN_INTERRUPT_GetPinValue:00000000 $t
    {standard input}:254    .text.PIN_INTERRUPT_GetPinValue:00000000 PIN_INTERRUPT_GetPinValue
    {standard input}:299    .bss.Torque_control:00000000 Torque_control
    {standard input}:300    .bss.Torque_control:00000000 $d
    {standard input}:305    .bss.Speed_control:00000000 Speed_control
    {standard input}:306    .bss.Speed_control:00000000 $d
    {standard input}:311    .bss.CAN_control:00000000 CAN_control
    {standard input}:312    .bss.CAN_control:00000000 $d
                            *COM*:00000004 Current_U
                            *COM*:00000004 Current_V
                            *COM*:00000004 Current_W
    {standard input}:321    .data.lookup_table:00000000 lookup_table
    {standard input}:318    .data.lookup_table:00000000 $d
    {standard input}:390    .bss.sector:00000000 sector
    {standard input}:391    .bss.sector:00000000 $d
    {standard input}:396    .bss.direction:00000000 direction
    {standard input}:397    .bss.direction:00000000 $d
    {standard input}:403    .bss.enc_val:00000000 enc_val
    {standard input}:400    .bss.enc_val:00000000 $d
    {standard input}:410    .bss.time_since_A:00000000 time_since_A
    {standard input}:407    .bss.time_since_A:00000000 $d
    {standard input}:417    .bss.time_since_B:00000000 time_since_B
    {standard input}:414    .bss.time_since_B:00000000 $d
    {standard input}:424    .bss.time_since_C:00000000 time_since_C
    {standard input}:421    .bss.time_since_C:00000000 $d
    {standard input}:431    .data.time_180deg:00000000 time_180deg
    {standard input}:428    .data.time_180deg:00000000 $d
    {standard input}:438    .data.time_180deg_cal:00000000 time_180deg_cal
    {standard input}:435    .data.time_180deg_cal:00000000 $d
                            *COM*:00000001 last_Hall_trig
    {standard input}:446    .data.angle_in_sector:00000000 angle_in_sector
    {standard input}:443    .data.angle_in_sector:00000000 $d
    {standard input}:453    .bss.angle_phi:00000000 angle_phi
    {standard input}:450    .bss.angle_phi:00000000 $d
                            *COM*:00000004 ialpha
                            *COM*:00000004 ibeta
                            *COM*:00000004 iq
                            *COM*:00000004 id
                            *COM*:00000004 Valpha
                            *COM*:00000004 Vbeta
    {standard input}:466    .bss.omega_ele_rads:00000000 omega_ele_rads
    {standard input}:463    .bss.omega_ele_rads:00000000 $d
    {standard input}:473    .bss.omega_mech_rps:00000000 omega_mech_rps
    {standard input}:470    .bss.omega_mech_rps:00000000 $d
    {standard input}:480    .bss.omega_mech_rps_temp:00000000 omega_mech_rps_temp
    {standard input}:477    .bss.omega_mech_rps_temp:00000000 $d
    {standard input}:487    .bss.omega_ele_degs:00000000 omega_ele_degs
    {standard input}:484    .bss.omega_ele_degs:00000000 $d
    {standard input}:494    .bss.speed_ref:00000000 speed_ref
    {standard input}:491    .bss.speed_ref:00000000 $d
    {standard input}:501    .bss.omega_ele_rads_ref:00000000 omega_ele_rads_ref
    {standard input}:498    .bss.omega_ele_rads_ref:00000000 $d
    {standard input}:508    .bss.iq_ref:00000000 iq_ref
    {standard input}:505    .bss.iq_ref:00000000 $d
    {standard input}:515    .bss.T_ref:00000000 T_ref
    {standard input}:512    .bss.T_ref:00000000 $d
    {standard input}:522    .bss.Vd_ref:00000000 Vd_ref
    {standard input}:519    .bss.Vd_ref:00000000 $d
    {standard input}:529    .bss.Vq_ref:00000000 Vq_ref
    {standard input}:526    .bss.Vq_ref:00000000 $d
                            *COM*:00000008 Speeds_int16_r
    {standard input}:537    .bss.CAN_speed_ref:00000000 CAN_speed_ref
    {standard input}:534    .bss.CAN_speed_ref:00000000 $d
    {standard input}:543    .bss.CAN_new_meassage:00000000 CAN_new_meassage
    {standard input}:544    .bss.CAN_new_meassage:00000000 $d
    {standard input}:549    .bss.CAN_no_com_counter:00000000 CAN_no_com_counter
    {standard input}:550    .bss.CAN_no_com_counter:00000000 $d
    {standard input}:556    .bss.distance_180deg_ele_count:00000000 distance_180deg_ele_count
    {standard input}:553    .bss.distance_180deg_ele_count:00000000 $d
    {standard input}:563    .bss.Speed_act:00000000 Speed_act
    {standard input}:560    .bss.Speed_act:00000000 $d
    {standard input}:570    .bss.distance:00000000 distance
    {standard input}:567    .bss.distance:00000000 $d
                            *COM*:00000004 modulation_index
                            *COM*:00000004 modulation_index_scaled
                            *COM*:00000004 angle_ab
                            *COM*:00000004 angle_ab_rad
                            *COM*:00000004 amplitude_ab
    {standard input}:582    .data.Ts:00000000 Ts
    {standard input}:579    .data.Ts:00000000 $d
    {standard input}:589    .data.Tcyc:00000000 Tcyc
    {standard input}:586    .data.Tcyc:00000000 $d
    {standard input}:596    .data.scaling_factor:00000000 scaling_factor
    {standard input}:593    .data.scaling_factor:00000000 $d
                            *COM*:00000004 amplitude_corrected
    {standard input}:603    .bss.count:00000000 count
    {standard input}:604    .bss.count:00000000 $d
    {standard input}:610    .data.offset_pos:00000000 offset_pos
    {standard input}:607    .data.offset_pos:00000000 $d
    {standard input}:617    .data.offset_neg:00000000 offset_neg
    {standard input}:614    .data.offset_neg:00000000 $d
    {standard input}:624    .data.Iq_param:00000000 Iq_param
    {standard input}:621    .data.Iq_param:00000000 $d
    {standard input}:639    .data.Id_param:00000000 Id_param
    {standard input}:636    .data.Id_param:00000000 $d
    {standard input}:654    .data.T_param:00000000 T_param
    {standard input}:651    .data.T_param:00000000 $d
    {standard input}:669    .data.T_param_1:00000000 T_param_1
    {standard input}:666    .data.T_param_1:00000000 $d
    {standard input}:680    .text.main:00000000 $t
    {standard input}:685    .text.main:00000000 main
    {standard input}:1513   .text.Hall_init:00000000 Hall_init
    {standard input}:1792   .text.Calculation:00000000 Calculation
    {standard input}:744    .text.main:00000040 $d
    {standard input}:751    .text.CAN0_1_IRQHandler:00000000 $t
    {standard input}:756    .text.CAN0_1_IRQHandler:00000000 CAN0_1_IRQHandler
    {standard input}:896    .text.CAN0_1_IRQHandler:000000e8 $d
    {standard input}:906    .text.CAN0_0_IRQHandler:00000000 $t
    {standard input}:911    .text.CAN0_0_IRQHandler:00000000 CAN0_0_IRQHandler
    {standard input}:984    .text.CAN0_0_IRQHandler:00000050 $d
    {standard input}:995    .text.CCU43_0_IRQHandler:00000000 $t
    {standard input}:1000   .text.CCU43_0_IRQHandler:00000000 CCU43_0_IRQHandler
    {standard input}:1159   .text.CCU43_0_IRQHandler:00000138 $d
    {standard input}:1175   .text.CCU43_3_IRQHandler:00000000 $t
    {standard input}:1180   .text.CCU43_3_IRQHandler:00000000 CCU43_3_IRQHandler
    {standard input}:1225   .text.CCU43_3_IRQHandler:0000002c $d
    {standard input}:1232   .text.ERU1_2_IRQHandler:00000000 $t
    {standard input}:1237   .text.ERU1_2_IRQHandler:00000000 ERU1_2_IRQHandler
    {standard input}:1636   .text.HallSensor:00000000 HallSensor
    {standard input}:1300   .text.ERU1_2_IRQHandler:00000050 $d
    {standard input}:1309   .text.ERU1_0_IRQHandler:00000000 $t
    {standard input}:1314   .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
    {standard input}:1348   .text.ERU1_0_IRQHandler:00000020 $d
    {standard input}:1355   .text.ERU1_3_IRQHandler:00000000 $t
    {standard input}:1360   .text.ERU1_3_IRQHandler:00000000 ERU1_3_IRQHandler
    {standard input}:1394   .text.ERU1_3_IRQHandler:00000020 $d
    {standard input}:1401   .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:1406   .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:1434   .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:1439   .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:1500   .text.CCU80_3_IRQHandler:00000058 $d
    {standard input}:1508   .text.Hall_init:00000000 $t
    {standard input}:1623   .text.Hall_init:0000008c $d
    {standard input}:1631   .text.HallSensor:00000000 $t
    {standard input}:1773   .text.HallSensor:000000c0 $d
    {standard input}:1787   .text.Calculation:00000000 $t
    {standard input}:2135   .text.Calculation:000002c8 $d
    {standard input}:2163   .text.Calculation:00000330 $t
    {standard input}:2893   .text.readCurrent:00000000 readCurrent
    {standard input}:2412   .text.Calculation:00000598 $d
    {standard input}:2438   .text.Calculation:000005f8 $t
    {standard input}:2783   .text.PID_Controller:00000000 PID_Controller
    {standard input}:2739   .text.Calculation:000008a0 $d
    {standard input}:2778   .text.PID_Controller:00000000 $t
    {standard input}:2883   .text.PID_Controller:000000bc $d
    {standard input}:2888   .text.readCurrent:00000000 $t
    {standard input}:2984   .text.readCurrent:00000098 $d
                     .debug_frame:00000010 $d
    {standard input}:2777   .text.Calculation:0000092c $t

UNDEFINED SYMBOLS
DAVE_Init
CAN_NODE_Init
PWM_SVM_Start
CAN_NODE_0
PWM_SVM_0
CAN_NODE_MO_Receive
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_dadd
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
PWM_SVM_SVMUpdate
Hall_A_ISR
Hall_B_ISR
Hall_C_ISR
__aeabi_ui2d
__aeabi_i2d
__aeabi_dsub
status_LED_red_cal_time
cosf
sinf
atanf
sqrtf
BUS_IO_Write
SPI_MASTER_Receive
SPI_ChipSelect
SPI_MASTER_0
