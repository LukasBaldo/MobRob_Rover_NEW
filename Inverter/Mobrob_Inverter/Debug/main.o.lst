   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB137:
  26              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE137:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB138:
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE138:
 114 0022 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	DIGITAL_IO_SetOutputHigh:
 120              	.LFB145:
 121              	 .file 2 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 122              	 .loc 2 269 0
 123              	 .cfi_startproc
 124              	 
 125              	 
 126 0000 80B5     	 push {r7,lr}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 8
 129              	 .cfi_offset 7,-8
 130              	 .cfi_offset 14,-4
 131 0002 82B0     	 sub sp,sp,#8
 132              	.LCFI13:
 133              	 .cfi_def_cfa_offset 16
 134 0004 00AF     	 add r7,sp,#0
 135              	.LCFI14:
 136              	 .cfi_def_cfa_register 7
 137 0006 7860     	 str r0,[r7,#4]
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 138              	 .loc 2 271 0
 139 0008 7B68     	 ldr r3,[r7,#4]
 140 000a 1A68     	 ldr r2,[r3]
 141 000c 7B68     	 ldr r3,[r7,#4]
 142 000e 1B7C     	 ldrb r3,[r3,#16]
 143 0010 1046     	 mov r0,r2
 144 0012 1946     	 mov r1,r3
 145 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 146              	 .loc 2 272 0
 147 0018 0837     	 adds r7,r7,#8
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 8
 150 001a BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 001c 80BD     	 pop {r7,pc}
 155              	 .cfi_endproc
 156              	.LFE145:
 158 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 159              	 .align 2
 160              	 .thumb
 161              	 .thumb_func
 163              	DIGITAL_IO_SetOutputLow:
 164              	.LFB146:
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 165              	 .loc 2 316 0
 166              	 .cfi_startproc
 167              	 
 168              	 
 169 0000 80B5     	 push {r7,lr}
 170              	.LCFI17:
 171              	 .cfi_def_cfa_offset 8
 172              	 .cfi_offset 7,-8
 173              	 .cfi_offset 14,-4
 174 0002 82B0     	 sub sp,sp,#8
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 16
 177 0004 00AF     	 add r7,sp,#0
 178              	.LCFI19:
 179              	 .cfi_def_cfa_register 7
 180 0006 7860     	 str r0,[r7,#4]
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 181              	 .loc 2 318 0
 182 0008 7B68     	 ldr r3,[r7,#4]
 183 000a 1A68     	 ldr r2,[r3]
 184 000c 7B68     	 ldr r3,[r7,#4]
 185 000e 1B7C     	 ldrb r3,[r3,#16]
 186 0010 1046     	 mov r0,r2
 187 0012 1946     	 mov r1,r3
 188 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 189              	 .loc 2 319 0
 190 0018 0837     	 adds r7,r7,#8
 191              	.LCFI20:
 192              	 .cfi_def_cfa_offset 8
 193 001a BD46     	 mov sp,r7
 194              	.LCFI21:
 195              	 .cfi_def_cfa_register 13
 196              	 
 197 001c 80BD     	 pop {r7,pc}
 198              	 .cfi_endproc
 199              	.LFE146:
 201              	 .global Torque_control
 202 001e 00BF     	 .section .data.Torque_control,"aw",%progbits
 205              	Torque_control:
 206 0000 01       	 .byte 1
 207              	 .global Speed_control
 208              	 .section .bss.Speed_control,"aw",%nobits
 211              	Speed_control:
 212 0000 00       	 .space 1
 213              	 .global CAN_control
 214              	 .section .bss.CAN_control,"aw",%nobits
 217              	CAN_control:
 218 0000 00       	 .space 1
 219              	 .comm Current_U,4,4
 220              	 .comm Current_V,4,4
 221              	 .comm Current_W,4,4
 222              	 .global time_180deg_cal
 223              	 .section .data.time_180deg_cal,"aw",%progbits
 224              	 .align 2
 227              	time_180deg_cal:
 228 0000 E8030000 	 .word 1000
 229              	 .global angle_in_sector
 230              	 .section .data.angle_in_sector,"aw",%progbits
 231              	 .align 2
 234              	angle_in_sector:
 235 0000 0000F041 	 .word 1106247680
 236              	 .global angle_phi
 237              	 .section .bss.angle_phi,"aw",%nobits
 238              	 .align 2
 241              	angle_phi:
 242 0000 00000000 	 .space 4
 243              	 .comm ialpha,4,4
 244              	 .comm ibeta,4,4
 245              	 .comm iq,4,4
 246              	 .comm id,4,4
 247              	 .comm Valpha,4,4
 248              	 .comm Vbeta,4,4
 249              	 .global omega_mech_rps
 250              	 .section .bss.omega_mech_rps,"aw",%nobits
 251              	 .align 2
 254              	omega_mech_rps:
 255 0000 00000000 	 .space 4
 256              	 .global omega_mech_rps_temp
 257              	 .section .bss.omega_mech_rps_temp,"aw",%nobits
 258              	 .align 2
 261              	omega_mech_rps_temp:
 262 0000 00000000 	 .space 4
 263              	 .global speed_ref
 264              	 .section .bss.speed_ref,"aw",%nobits
 265              	 .align 2
 268              	speed_ref:
 269 0000 00000000 	 .space 4
 270              	 .global omega_ele_rads_ref
 271              	 .section .bss.omega_ele_rads_ref,"aw",%nobits
 272              	 .align 2
 275              	omega_ele_rads_ref:
 276 0000 00000000 	 .space 4
 277              	 .global iq_ref
 278              	 .section .bss.iq_ref,"aw",%nobits
 279              	 .align 2
 282              	iq_ref:
 283 0000 00000000 	 .space 4
 284              	 .global T_ref
 285              	 .section .bss.T_ref,"aw",%nobits
 286              	 .align 2
 289              	T_ref:
 290 0000 00000000 	 .space 4
 291              	 .comm T_ref_controlled,4,4
 292              	 .global omega_mech_rps_ref
 293              	 .section .bss.omega_mech_rps_ref,"aw",%nobits
 294              	 .align 2
 297              	omega_mech_rps_ref:
 298 0000 00000000 	 .space 4
 299              	 .global Vd
 300              	 .section .bss.Vd,"aw",%nobits
 301              	 .align 2
 304              	Vd:
 305 0000 00000000 	 .space 4
 306              	 .global Vq
 307              	 .section .bss.Vq,"aw",%nobits
 308              	 .align 2
 311              	Vq:
 312 0000 00000000 	 .space 4
 313              	 .comm modulation_index,4,4
 314              	 .comm modulation_index_scaled,4,4
 315              	 .comm angle_ab,4,4
 316              	 .comm angle_ab_rad,4,4
 317              	 .comm amplitude_ab,4,4
 318              	 .global Ts
 319              	 .section .data.Ts,"aw",%progbits
 320              	 .align 2
 323              	Ts:
 324 0000 17B75138 	 .word 944879383
 325              	 .global Tcyc
 326              	 .section .data.Tcyc,"aw",%progbits
 327              	 .align 2
 330              	Tcyc:
 331 0000 17B75139 	 .word 961656599
 332              	 .global scaling_factor
 333              	 .section .data.scaling_factor,"aw",%progbits
 334              	 .align 2
 337              	scaling_factor:
 338 0000 00000743 	 .word 1124532224
 339              	 .comm amplitude_corrected,4,4
 340              	 .global count
 341              	 .section .bss.count,"aw",%nobits
 344              	count:
 345 0000 00       	 .space 1
 346              	 .global offset_pos
 347              	 .section .data.offset_pos,"aw",%progbits
 348              	 .align 2
 351              	offset_pos:
 352 0000 0000D8C1 	 .word -1042808832
 353              	 .global offset_neg
 354              	 .section .data.offset_neg,"aw",%progbits
 355              	 .align 2
 358              	offset_neg:
 359 0000 0000A0C1 	 .word -1046478848
 360              	 .global Speed_detection_OK
 361              	 .section .bss.Speed_detection_OK,"aw",%nobits
 364              	Speed_detection_OK:
 365 0000 00       	 .space 1
 366              	 .global setting_cyc
 367              	 .section .data.setting_cyc,"aw",%progbits
 368              	 .align 2
 371              	setting_cyc:
 372 0000 983A0000 	 .word 15000
 373              	 .global step_start
 374              	 .section .data.step_start,"aw",%progbits
 375              	 .align 2
 378              	step_start:
 379 0000 8FC2753D 	 .word 1031127695
 380              	 .global step_to
 381              	 .section .data.step_to,"aw",%progbits
 382              	 .align 2
 385              	step_to:
 386 0000 0AD7A33D 	 .word 1034147594
 387              	 .global start_help_count
 388              	 .section .bss.start_help_count,"aw",%nobits
 391              	start_help_count:
 392 0000 00       	 .space 1
 393              	 .global start_help
 394              	 .section .bss.start_help,"aw",%nobits
 397              	start_help:
 398 0000 00       	 .space 1
 399              	 .global start_help_flag
 400              	 .section .bss.start_help_flag,"aw",%nobits
 403              	start_help_flag:
 404 0000 00       	 .space 1
 405              	 .global ADC_TO_DCLINK
 406              	 .section .data.ADC_TO_DCLINK,"aw",%progbits
 407              	 .align 2
 410              	ADC_TO_DCLINK:
 411 0000 6666A042 	 .word 1117808230
 412 0004 CDCCA042 	 .word 1117834445
 413 0008 00002442 	 .word 1109655552
 414 000c 00009A42 	 .word 1117388800
 415 0010 00009A42 	 .word 1117388800
 416 0014 00009F42 	 .word 1117716480
 417              	 .section .text.main,"ax",%progbits
 418              	 .align 2
 419              	 .global main
 420              	 .thumb
 421              	 .thumb_func
 423              	main:
 424              	.LFB552:
 425              	 .file 3 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2020 Jan 02 10:21:43
   5:../main.c     ****  *  Author: Baldo
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** // status: 11.05.2022
   9:../main.c     **** 
  10:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  11:../main.c     **** #include <math.h>
  12:../main.c     **** #include <stdio.h> //for printf
  13:../main.c     **** 
  14:../main.c     **** #include "Globals.h"
  15:../main.c     **** #include "DEFINE_CONST.h"
  16:../main.c     **** #include "Hall_Sensors.h"
  17:../main.c     **** #include "rec_data_function.h"
  18:../main.c     **** #include "Read_Current_Sensor.h"
  19:../main.c     **** #include "CAN.h"
  20:../main.c     **** #include "PI_Controller.h"
  21:../main.c     **** 
  22:../main.c     **** //#######################
  23:../main.c     **** //FUNCTION DECLARATION
  24:../main.c     **** //########################
  25:../main.c     **** void Calculation(void);
  26:../main.c     **** 
  27:../main.c     **** //########################
  28:../main.c     **** //VARIABLE DECLARATION
  29:../main.c     **** //########################
  30:../main.c     **** 
  31:../main.c     **** //control type
  32:../main.c     **** uint8_t Torque_control = 1;
  33:../main.c     **** uint8_t Speed_control = 0; //if 0 is torque control if 1 is speed control
  34:../main.c     **** uint8_t CAN_control = 0; // id 1 CAN speed controll aktive
  35:../main.c     **** 
  36:../main.c     **** float Current_U, Current_V, Current_W;
  37:../main.c     **** 
  38:../main.c     **** uint32_t time_180deg_cal = 1000;
  39:../main.c     **** float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60°
  40:../main.c     **** 
  41:../main.c     **** float angle_phi = 0;
  42:../main.c     **** float ialpha,ibeta,iq,id,Valpha,Vbeta;
  43:../main.c     **** 
  44:../main.c     **** volatile float omega_mech_rps = 0;	//SK	//mechanical rounds per second
  45:../main.c     **** volatile float omega_mech_rps_temp = 0; //SK	//since dividing through the incremental (counted up) 
  46:../main.c     **** 
  47:../main.c     **** 
  48:../main.c     **** // REF vaules given to PI controller
  49:../main.c     **** float speed_ref = 0.0; //meters per second
  50:../main.c     **** float omega_ele_rads_ref = 0.0; // electrical rad per second
  51:../main.c     **** float iq_ref = 0.0;
  52:../main.c     **** float T_ref = 0.0;
  53:../main.c     **** float T_ref_controlled;
  54:../main.c     **** float omega_mech_rps_ref = 0;
  55:../main.c     **** 
  56:../main.c     **** float Vd = 0;
  57:../main.c     **** float Vq = 0;
  58:../main.c     **** 
  59:../main.c     **** 
  60:../main.c     **** volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
  61:../main.c     **** volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which 
  62:../main.c     **** 
  63:../main.c     **** float angle_ab;
  64:../main.c     **** float angle_ab_rad;
  65:../main.c     **** float amplitude_ab;
  66:../main.c     **** 
  67:../main.c     **** float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
  68:../main.c     **** float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I
  69:../main.c     **** 
  70:../main.c     **** // scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
  71:../main.c     **** float scaling_factor = 135;
  72:../main.c     **** float amplitude_corrected;
  73:../main.c     **** 
  74:../main.c     **** // Counter for calculation function -> only use a multiple of the SVM Interrupt
  75:../main.c     **** volatile uint8_t count = 0;
  76:../main.c     **** 
  77:../main.c     **** // Angle correction factor to align Current to Hall Sensor vuales form 14/04
  78:../main.c     **** float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
  79:../main.c     **** float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction
  80:../main.c     **** 
  81:../main.c     **** 
  82:../main.c     **** uint8_t Speed_detection_OK = 0;
  83:../main.c     **** 
  84:../main.c     **** //step rec
  85:../main.c     **** uint32_t setting_cyc = 15000;
  86:../main.c     **** float step_start = 0.06; //0.13 ; M1 //  0.06; M2
  87:../main.c     **** float step_to = 0.08;  //0.17;  // 0l09 ; M2
  88:../main.c     **** 
  89:../main.c     **** //satrt help
  90:../main.c     **** uint8_t start_help_count = 0, start_help = 0, start_help_flag = 0;
  91:../main.c     **** #define START_HELP_T 0.1
  92:../main.c     **** 
  93:../main.c     **** 
  94:../main.c     **** float ADC_TO_DCLINK[6] = {80.2, 80.4, 41, 77, 77, 79.5}; // 77 defalft value
  95:../main.c     **** 
  96:../main.c     **** //########################
  97:../main.c     **** // MAIN
  98:../main.c     **** //########################
  99:../main.c     **** 
 100:../main.c     **** int main(void)
 101:../main.c     **** {
 426              	 .loc 3 101 0
 427              	 .cfi_startproc
 428              	 
 429              	 
 430 0000 80B5     	 push {r7,lr}
 431              	.LCFI22:
 432              	 .cfi_def_cfa_offset 8
 433              	 .cfi_offset 7,-8
 434              	 .cfi_offset 14,-4
 435 0002 86B0     	 sub sp,sp,#24
 436              	.LCFI23:
 437              	 .cfi_def_cfa_offset 32
 438 0004 04AF     	 add r7,sp,#16
 439              	.LCFI24:
 440              	 .cfi_def_cfa 7,16
 102:../main.c     ****   DAVE_STATUS_t status;
 103:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 441              	 .loc 3 103 0
 442 0006 FFF7FEFF 	 bl DAVE_Init
 443 000a 0346     	 mov r3,r0
 444 000c FB71     	 strb r3,[r7,#7]
 104:../main.c     **** 
 105:../main.c     ****   Hall_init();
 445              	 .loc 3 105 0
 446 000e FFF7FEFF 	 bl Hall_init
 106:../main.c     **** 
 107:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 447              	 .loc 3 107 0
 448 0012 FB79     	 ldrb r3,[r7,#7]
 449 0014 002B     	 cmp r3,#0
 450 0016 00D0     	 beq .L6
 451              	.L7:
 108:../main.c     ****   {
 109:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 110:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 111:../main.c     **** 
 112:../main.c     ****     while(1U)
 113:../main.c     ****     {
 114:../main.c     **** 
 115:../main.c     ****     }
 452              	 .loc 3 115 0 discriminator 1
 453 0018 FEE7     	 b .L7
 454              	.L6:
 116:../main.c     ****   }
 117:../main.c     **** 
 118:../main.c     ****   //Initialization of CAN
 119:../main.c     ****   	CAN_NODE_STATUS_t init_status;
 120:../main.c     ****   	init_status = CAN_NODE_Init(&CAN_NODE_0);
 455              	 .loc 3 120 0
 456 001a 1748     	 ldr r0,.L10
 457 001c FFF7FEFF 	 bl CAN_NODE_Init
 458 0020 0346     	 mov r3,r0
 459 0022 BB71     	 strb r3,[r7,#6]
 121:../main.c     **** 
 122:../main.c     ****   	if (init_status != CAN_NODE_STATUS_SUCCESS) {
 123:../main.c     ****   		XMC_DEBUG("CAN initialization failed\n");
 124:../main.c     ****   	}
 125:../main.c     **** 
 126:../main.c     ****   if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
 127:../main.c     **** 	  while(1U)
 128:../main.c     **** 	      {
 129:../main.c     **** 		//  printf("MOTOR_ON_ROVER number false");
 130:../main.c     **** 	      }
 131:../main.c     ****   }
 132:../main.c     **** 
 133:../main.c     ****   if((INVERTER_NUM > 6) || INVERTER_NUM < 0){ // if possibel number eneterd
 134:../main.c     ****  	  while(1U)
 135:../main.c     ****  	      {
 136:../main.c     ****  		//  printf("INVERTER_NUM num false");
 137:../main.c     ****  	      }
 138:../main.c     ****    }
 139:../main.c     **** 
 140:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 141:../main.c     ****   while(1U)
 142:../main.c     ****   {
 143:../main.c     **** 	  omega_param_selctor(MOTOR_NUM); //set motor spefici speeed parameters
 460              	 .loc 3 143 0
 461 0024 0220     	 movs r0,#2
 462 0026 FFF7FEFF 	 bl omega_param_selctor
 144:../main.c     **** 
 145:../main.c     **** 	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 463              	 .loc 3 145 0
 464 002a 1448     	 ldr r0,.L10+4
 465 002c FFF7FEFF 	 bl PWM_SVM_Start
 466              	.L9:
 146:../main.c     **** 		  while(1U)
 147:../main.c     **** 		    {
 148:../main.c     **** 			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 467              	 .loc 3 148 0
 468 0030 134B     	 ldr r3,.L10+8
 469 0032 1B78     	 ldrb r3,[r3]
 470 0034 DBB2     	 uxtb r3,r3
 471 0036 032B     	 cmp r3,#3
 472 0038 1DD9     	 bls .L8
 149:../main.c     **** 			  {
 150:../main.c     **** 				  count=0;
 473              	 .loc 3 150 0
 474 003a 114B     	 ldr r3,.L10+8
 475 003c 0022     	 movs r2,#0
 476 003e 1A70     	 strb r2,[r3]
 151:../main.c     **** 				  Calculation();
 477              	 .loc 3 151 0
 478 0040 FFF7FEFF 	 bl Calculation
 152:../main.c     **** 
 153:../main.c     **** 				 // f_rec_data(iq	,Vq,&Vq,1,2,1,10000);  //  iq char
 154:../main.c     **** 
 155:../main.c     **** 				  //f_rec_data(iq	,Vq,&iq_ref,1,2,1,10000); // iq step test
 156:../main.c     **** 
 157:../main.c     **** 				   //f_rec_data(omega_mech_rps,T_ref,&T_ref,step_start,step_to,10,setting_cyc); //10000 settlin
 158:../main.c     **** 
 159:../main.c     **** 				   f_rec_data(omega_mech_rps,T_ref,&omega_mech_rps_ref,2,4,50,2000); // speed step test
 479              	 .loc 3 159 0
 480 0044 0F4B     	 ldr r3,.L10+12
 481 0046 1968     	 ldr r1,[r3]
 482 0048 0F4B     	 ldr r3,.L10+16
 483 004a 1A68     	 ldr r2,[r3]
 484 004c 4FF08143 	 mov r3,#1082130432
 485 0050 0093     	 str r3,[sp]
 486 0052 3223     	 movs r3,#50
 487 0054 0193     	 str r3,[sp,#4]
 488 0056 4FF4FA63 	 mov r3,#2000
 489 005a 0293     	 str r3,[sp,#8]
 490 005c 0846     	 mov r0,r1
 491 005e 1146     	 mov r1,r2
 492 0060 0A4A     	 ldr r2,.L10+20
 493 0062 4FF08043 	 mov r3,#1073741824
 494 0066 FFF7FEFF 	 bl f_rec_data
 160:../main.c     **** 
 161:../main.c     **** 				   //rec_step_from_0(omega_mech_rps, iq_ref,iq, &omega_mech_rps_ref, 4, 20); // start help test
 162:../main.c     **** 				   start_help_flag = 0;
 495              	 .loc 3 162 0
 496 006a 094B     	 ldr r3,.L10+24
 497 006c 0022     	 movs r2,#0
 498 006e 1A70     	 strb r2,[r3]
 163:../main.c     **** 
 164:../main.c     **** 				 ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 499              	 .loc 3 164 0
 500 0070 0848     	 ldr r0,.L10+28
 501 0072 FFF7FEFF 	 bl ADC_MEASUREMENT_StartConversion
 502              	.L8:
 165:../main.c     **** 			  }
 166:../main.c     **** 		    }
 503              	 .loc 3 166 0
 504 0076 DBE7     	 b .L9
 505              	.L11:
 506              	 .align 2
 507              	.L10:
 508 0078 00000000 	 .word CAN_NODE_0
 509 007c 00000000 	 .word PWM_SVM_0
 510 0080 00000000 	 .word count
 511 0084 00000000 	 .word omega_mech_rps
 512 0088 00000000 	 .word T_ref
 513 008c 00000000 	 .word omega_mech_rps_ref
 514 0090 00000000 	 .word start_help_flag
 515 0094 00000000 	 .word ADC_MEASUREMENT_0
 516              	 .cfi_endproc
 517              	.LFE552:
 519              	 .section .text.VADC0_C0_2_IRQHandler,"ax",%progbits
 520              	 .align 2
 521              	 .global VADC0_C0_2_IRQHandler
 522              	 .thumb
 523              	 .thumb_func
 525              	VADC0_C0_2_IRQHandler:
 526              	.LFB553:
 167:../main.c     ****   }
 168:../main.c     **** }
 169:../main.c     **** 
 170:../main.c     **** 
 171:../main.c     **** //########################
 172:../main.c     **** // INTERRUPTS
 173:../main.c     **** //########################
 174:../main.c     **** 
 175:../main.c     **** void Adc_Measurement_Handler(void){
 527              	 .loc 3 175 0
 528              	 .cfi_startproc
 529              	 
 530              	 
 531 0000 80B5     	 push {r7,lr}
 532              	.LCFI25:
 533              	 .cfi_def_cfa_offset 8
 534              	 .cfi_offset 7,-8
 535              	 .cfi_offset 14,-4
 536 0002 82B0     	 sub sp,sp,#8
 537              	.LCFI26:
 538              	 .cfi_def_cfa_offset 16
 539 0004 00AF     	 add r7,sp,#0
 540              	.LCFI27:
 541              	 .cfi_def_cfa_register 7
 176:../main.c     **** 	uint32_t result  = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 542              	 .loc 3 176 0
 543 0006 0448     	 ldr r0,.L13
 544 0008 FFF7FEFF 	 bl ADC_MEASUREMENT_GetResult
 545 000c 0346     	 mov r3,r0
 546 000e 7B60     	 str r3,[r7,#4]
 177:../main.c     **** 
 178:../main.c     ****  //V_DC_link =  result / ADC_TO_DCLINK[INVERTER_NUM]; // conversion to DClink
 179:../main.c     **** }
 547              	 .loc 3 179 0
 548 0010 0837     	 adds r7,r7,#8
 549              	.LCFI28:
 550              	 .cfi_def_cfa_offset 8
 551 0012 BD46     	 mov sp,r7
 552              	.LCFI29:
 553              	 .cfi_def_cfa_register 13
 554              	 
 555 0014 80BD     	 pop {r7,pc}
 556              	.L14:
 557 0016 00BF     	 .align 2
 558              	.L13:
 559 0018 00000000 	 .word ADC_MEASUREMENT_Channel_A_handle
 560              	 .cfi_endproc
 561              	.LFE553:
 563              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 564              	 .align 2
 565              	 .global CCU43_1_IRQHandler
 566              	 .thumb
 567              	 .thumb_func
 569              	CCU43_1_IRQHandler:
 570              	.LFB554:
 180:../main.c     **** 
 181:../main.c     **** 
 182:../main.c     **** /*
 183:../main.c     **** // Turn off driver at Overcurrent
 184:../main.c     **** void OverCurrent_U_ISR(void)
 185:../main.c     **** {
 186:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 187:../main.c     **** }
 188:../main.c     **** void OverCurrent_V_ISR(void)
 189:../main.c     **** {
 190:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 191:../main.c     **** }
 192:../main.c     **** void OverCurrent_W_ISR(void)
 193:../main.c     **** {
 194:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 195:../main.c     **** }
 196:../main.c     **** */
 197:../main.c     **** 
 198:../main.c     **** //ISR based on Timer_1 --> 100us time base
 199:../main.c     **** void ISR_INT1(void)
 200:../main.c     **** {
 571              	 .loc 3 200 0
 572              	 .cfi_startproc
 573              	 
 574              	 
 575              	 
 576 0000 80B4     	 push {r7}
 577              	.LCFI30:
 578              	 .cfi_def_cfa_offset 4
 579              	 .cfi_offset 7,-4
 580 0002 00AF     	 add r7,sp,#0
 581              	.LCFI31:
 582              	 .cfi_def_cfa_register 7
 201:../main.c     **** }
 583              	 .loc 3 201 0
 584 0004 BD46     	 mov sp,r7
 585              	.LCFI32:
 586              	 .cfi_def_cfa_register 13
 587              	 
 588 0006 5DF8047B 	 ldr r7,[sp],#4
 589              	.LCFI33:
 590              	 .cfi_restore 7
 591              	 .cfi_def_cfa_offset 0
 592 000a 7047     	 bx lr
 593              	 .cfi_endproc
 594              	.LFE554:
 596              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 597              	 .align 2
 598              	 .global CCU80_3_IRQHandler
 599              	 .thumb
 600              	 .thumb_func
 602              	CCU80_3_IRQHandler:
 603              	.LFB555:
 202:../main.c     **** 
 203:../main.c     **** // ISR for Updating the SVM PWM -> 50us = 20kHz
 204:../main.c     **** void PeriodMatchInterruptHandler(void)
 205:../main.c     **** {
 604              	 .loc 3 205 0
 605              	 .cfi_startproc
 606              	 
 607              	 
 608 0000 80B5     	 push {r7,lr}
 609              	.LCFI34:
 610              	 .cfi_def_cfa_offset 8
 611              	 .cfi_offset 7,-8
 612              	 .cfi_offset 14,-4
 613 0002 82B0     	 sub sp,sp,#8
 614              	.LCFI35:
 615              	 .cfi_def_cfa_offset 16
 616 0004 00AF     	 add r7,sp,#0
 617              	.LCFI36:
 618              	 .cfi_def_cfa_register 7
 206:../main.c     **** 	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 619              	 .loc 3 206 0
 620 0006 144B     	 ldr r3,.L18
 621 0008 1B78     	 ldrb r3,[r3]
 622 000a DBB2     	 uxtb r3,r3
 623 000c 0133     	 adds r3,r3,#1
 624 000e DAB2     	 uxtb r2,r3
 625 0010 114B     	 ldr r3,.L18
 626 0012 1A70     	 strb r2,[r3]
 207:../main.c     **** 	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 627              	 .loc 3 207 0
 628 0014 104B     	 ldr r3,.L18
 629 0016 1B78     	 ldrb r3,[r3]
 630 0018 DBB2     	 uxtb r3,r3
 631 001a 012B     	 cmp r3,#1
 632 001c 18D1     	 bne .L16
 208:../main.c     **** 		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_D
 633              	 .loc 3 208 0
 634 001e 0F4B     	 ldr r3,.L18+4
 635 0020 D3ED007A 	 flds s15,[r3]
 636 0024 FCEEE77A 	 ftouizs s15,s15
 637 0028 C7ED017A 	 fsts s15,[r7,#4]
 638 002c BB88     	 ldrh r3,[r7,#4]
 639 002e 9AB2     	 uxth r2,r3
 640 0030 0B4B     	 ldr r3,.L18+8
 641 0032 D3ED007A 	 flds s15,[r3]
 642 0036 FCEEE77A 	 ftouizs s15,s15
 643 003a 17EE901A 	 fmrs r1,s15
 644 003e 4BF20B63 	 movw r3,#46603
 645 0042 03FB01F3 	 mul r3,r3,r1
 646 0046 0748     	 ldr r0,.L18+12
 647 0048 1146     	 mov r1,r2
 648 004a 1A46     	 mov r2,r3
 649 004c FFF7FEFF 	 bl PWM_SVM_SVMUpdate
 650              	.L16:
 209:../main.c     **** 	}
 210:../main.c     **** }
 651              	 .loc 3 210 0
 652 0050 0837     	 adds r7,r7,#8
 653              	.LCFI37:
 654              	 .cfi_def_cfa_offset 8
 655 0052 BD46     	 mov sp,r7
 656              	.LCFI38:
 657              	 .cfi_def_cfa_register 13
 658              	 
 659 0054 80BD     	 pop {r7,pc}
 660              	.L19:
 661 0056 00BF     	 .align 2
 662              	.L18:
 663 0058 00000000 	 .word count
 664 005c 00000000 	 .word modulation_index_scaled
 665 0060 00000000 	 .word angle_ab
 666 0064 00000000 	 .word PWM_SVM_0
 667              	 .cfi_endproc
 668              	.LFE555:
 670              	 .global __aeabi_f2d
 671              	 .global __aeabi_ddiv
 672              	 .global __aeabi_ui2d
 673              	 .global __aeabi_dmul
 674              	 .global __aeabi_d2f
 675              	 .global __aeabi_i2d
 676              	 .global __aeabi_dadd
 677              	 .global __aeabi_dsub
 678              	 .global __aeabi_dcmpeq
 679              	 .section .text.Calculation,"ax",%progbits
 680              	 .align 2
 681              	 .global Calculation
 682              	 .thumb
 683              	 .thumb_func
 685              	Calculation:
 686              	.LFB556:
 211:../main.c     **** 
 212:../main.c     **** //########################
 213:../main.c     **** // FUNCTIONS
 214:../main.c     **** //########################
 215:../main.c     **** 
 216:../main.c     **** 
 217:../main.c     **** // Routine for calculation (sector, clark-Park trans.,...)
 218:../main.c     **** //5kHz loop since every 4th step of 50us --> 200us --> 5kHz
 219:../main.c     **** void Calculation(void){
 687              	 .loc 3 219 0
 688              	 .cfi_startproc
 689              	 
 690              	 
 691 0000 B0B5     	 push {r4,r5,r7,lr}
 692              	.LCFI39:
 693              	 .cfi_def_cfa_offset 16
 694              	 .cfi_offset 4,-16
 695              	 .cfi_offset 5,-12
 696              	 .cfi_offset 7,-8
 697              	 .cfi_offset 14,-4
 698 0002 2DED028B 	 fstmfdd sp!,{d8}
 699              	.LCFI40:
 700              	 .cfi_def_cfa_offset 24
 701              	 .cfi_offset 80,-24
 702              	 .cfi_offset 81,-20
 703 0006 84B0     	 sub sp,sp,#16
 704              	.LCFI41:
 705              	 .cfi_def_cfa_offset 40
 706 0008 00AF     	 add r7,sp,#0
 707              	.LCFI42:
 708              	 .cfi_def_cfa_register 7
 220:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 709              	 .loc 3 220 0
 710 000a B448     	 ldr r0,.L85
 711 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 221:../main.c     **** 		// Actual time since last angle update via Hall Sensor
 222:../main.c     **** 		uint32_t t;
 223:../main.c     **** 		if(last_Hall_trig == 'A') t = time_since_A;
 712              	 .loc 3 223 0
 713 0010 B34B     	 ldr r3,.L85+4
 714 0012 1B78     	 ldrb r3,[r3]
 715 0014 DBB2     	 uxtb r3,r3
 716 0016 412B     	 cmp r3,#65
 717 0018 03D1     	 bne .L21
 718              	 .loc 3 223 0 is_stmt 0 discriminator 1
 719 001a B24B     	 ldr r3,.L85+8
 720 001c 1B68     	 ldr r3,[r3]
 721 001e FB60     	 str r3,[r7,#12]
 722 0020 10E0     	 b .L22
 723              	.L21:
 224:../main.c     **** 		else if(last_Hall_trig == 'B') t = time_since_B;
 724              	 .loc 3 224 0 is_stmt 1
 725 0022 AF4B     	 ldr r3,.L85+4
 726 0024 1B78     	 ldrb r3,[r3]
 727 0026 DBB2     	 uxtb r3,r3
 728 0028 422B     	 cmp r3,#66
 729 002a 03D1     	 bne .L23
 730              	 .loc 3 224 0 is_stmt 0 discriminator 1
 731 002c AE4B     	 ldr r3,.L85+12
 732 002e 1B68     	 ldr r3,[r3]
 733 0030 FB60     	 str r3,[r7,#12]
 734 0032 07E0     	 b .L22
 735              	.L23:
 225:../main.c     **** 		else if(last_Hall_trig == 'C') t = time_since_C;
 736              	 .loc 3 225 0 is_stmt 1
 737 0034 AA4B     	 ldr r3,.L85+4
 738 0036 1B78     	 ldrb r3,[r3]
 739 0038 DBB2     	 uxtb r3,r3
 740 003a 432B     	 cmp r3,#67
 741 003c 02D1     	 bne .L22
 742              	 .loc 3 225 0 is_stmt 0 discriminator 1
 743 003e AB4B     	 ldr r3,.L85+16
 744 0040 1B68     	 ldr r3,[r3]
 745 0042 FB60     	 str r3,[r7,#12]
 746              	.L22:
 226:../main.c     **** 		time_180deg_cal = time_180deg;
 747              	 .loc 3 226 0 is_stmt 1
 748 0044 AA4B     	 ldr r3,.L85+20
 749 0046 1B68     	 ldr r3,[r3]
 750 0048 AA4A     	 ldr r2,.L85+24
 751 004a 1360     	 str r3,[r2]
 227:../main.c     **** 		// not fixing sector for calc because if chainges better to do so
 228:../main.c     **** 
 229:../main.c     **** 		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 752              	 .loc 3 229 0
 753 004c A94B     	 ldr r3,.L85+24
 754 004e 1B68     	 ldr r3,[r3]
 755 0050 40F6C412 	 movw r2,#2500
 756 0054 9342     	 cmp r3,r2
 757 0056 04D9     	 bls .L24
 758              	 .loc 3 229 0 is_stmt 0 discriminator 1
 759 0058 A64B     	 ldr r3,.L85+24
 760 005a 40F6C412 	 movw r2,#2500
 761 005e 1A60     	 str r2,[r3]
 762 0060 06E0     	 b .L25
 763              	.L24:
 230:../main.c     **** 		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 764              	 .loc 3 230 0 is_stmt 1
 765 0062 A44B     	 ldr r3,.L85+24
 766 0064 1B68     	 ldr r3,[r3]
 767 0066 012B     	 cmp r3,#1
 768 0068 02D8     	 bhi .L25
 769              	 .loc 3 230 0 is_stmt 0 discriminator 1
 770 006a A24B     	 ldr r3,.L85+24
 771 006c 0222     	 movs r2,#2
 772 006e 1A60     	 str r2,[r3]
 773              	.L25:
 231:../main.c     **** 
 232:../main.c     **** 		if(t < TIME_OMEGA_0){
 774              	 .loc 3 232 0 is_stmt 1
 775 0070 FB68     	 ldr r3,[r7,#12]
 776 0072 41F28732 	 movw r2,#4999
 777 0076 9342     	 cmp r3,r2
 778 0078 35D8     	 bhi .L26
 233:../main.c     **** 			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 779              	 .loc 3 233 0
 780 007a 9E4B     	 ldr r3,.L85+24
 781 007c 1B68     	 ldr r3,[r3]
 782 007e 07EE903A 	 fmsr s15,r3
 783 0082 F8EE677A 	 fuitos s15,s15
 784 0086 17EE900A 	 fmrs r0,s15
 785 008a FFF7FEFF 	 bl __aeabi_f2d
 786 008e 0246     	 mov r2,r0
 787 0090 0B46     	 mov r3,r1
 788 0092 4FF00000 	 mov r0,#0
 789 0096 9849     	 ldr r1,.L85+28
 790 0098 FFF7FEFF 	 bl __aeabi_ddiv
 791 009c 0246     	 mov r2,r0
 792 009e 0B46     	 mov r3,r1
 793 00a0 1446     	 mov r4,r2
 794 00a2 1D46     	 mov r5,r3
 795 00a4 F868     	 ldr r0,[r7,#12]
 796 00a6 FFF7FEFF 	 bl __aeabi_ui2d
 797 00aa 0246     	 mov r2,r0
 798 00ac 0B46     	 mov r3,r1
 799 00ae 2046     	 mov r0,r4
 800 00b0 2946     	 mov r1,r5
 801 00b2 FFF7FEFF 	 bl __aeabi_dmul
 802 00b6 0246     	 mov r2,r0
 803 00b8 0B46     	 mov r3,r1
 804 00ba 1046     	 mov r0,r2
 805 00bc 1946     	 mov r1,r3
 806 00be FFF7FEFF 	 bl __aeabi_d2f
 807 00c2 0246     	 mov r2,r0
 808 00c4 8D4B     	 ldr r3,.L85+32
 809 00c6 1A60     	 str r2,[r3]
 234:../main.c     **** 			if(angle_in_sector > 60) angle_in_sector = 60;
 810              	 .loc 3 234 0
 811 00c8 8C4B     	 ldr r3,.L85+32
 812 00ca D3ED007A 	 flds s15,[r3]
 813 00ce 9FED8C7A 	 flds s14,.L85+36
 814 00d2 F4EEC77A 	 fcmpes s15,s14
 815 00d6 F1EE10FA 	 fmstat
 816 00da 00DC     	 bgt .L69
 817 00dc 06E0     	 b .L29
 818              	.L69:
 819              	 .loc 3 234 0 is_stmt 0 discriminator 1
 820 00de 874B     	 ldr r3,.L85+32
 821 00e0 884A     	 ldr r2,.L85+40
 822 00e2 1A60     	 str r2,[r3]
 823 00e4 02E0     	 b .L29
 824              	.L26:
 235:../main.c     **** 		}
 236:../main.c     **** 		else{
 237:../main.c     **** 			angle_in_sector = 30; // standig still
 825              	 .loc 3 237 0 is_stmt 1
 826 00e6 854B     	 ldr r3,.L85+32
 827 00e8 874A     	 ldr r2,.L85+44
 828 00ea 1A60     	 str r2,[r3]
 829              	.L29:
 238:../main.c     **** 			//angle_in_sector += 5;
 239:../main.c     **** 
 240:../main.c     **** 			//if(angle_in_sector > 60) angle_in_sector = 0;
 241:../main.c     **** 		}
 242:../main.c     **** 
 243:../main.c     **** 		// CW
 244:../main.c     **** 		if(direction==1)
 830              	 .loc 3 244 0
 831 00ec 874B     	 ldr r3,.L85+48
 832 00ee 1B78     	 ldrb r3,[r3]
 833 00f0 DBB2     	 uxtb r3,r3
 834 00f2 5BB2     	 sxtb r3,r3
 835 00f4 012B     	 cmp r3,#1
 836 00f6 54D1     	 bne .L30
 245:../main.c     **** 		{
 246:../main.c     **** 			angle_phi = (sector*60.0)+angle_in_sector;
 837              	 .loc 3 246 0
 838 00f8 854B     	 ldr r3,.L85+52
 839 00fa 1B78     	 ldrb r3,[r3]
 840 00fc DBB2     	 uxtb r3,r3
 841 00fe 5BB2     	 sxtb r3,r3
 842 0100 1846     	 mov r0,r3
 843 0102 FFF7FEFF 	 bl __aeabi_i2d
 844 0106 0246     	 mov r2,r0
 845 0108 0B46     	 mov r3,r1
 846 010a 1046     	 mov r0,r2
 847 010c 1946     	 mov r1,r3
 848 010e 4FF00002 	 mov r2,#0
 849 0112 804B     	 ldr r3,.L85+56
 850 0114 FFF7FEFF 	 bl __aeabi_dmul
 851 0118 0246     	 mov r2,r0
 852 011a 0B46     	 mov r3,r1
 853 011c 1446     	 mov r4,r2
 854 011e 1D46     	 mov r5,r3
 855 0120 764B     	 ldr r3,.L85+32
 856 0122 1B68     	 ldr r3,[r3]
 857 0124 1846     	 mov r0,r3
 858 0126 FFF7FEFF 	 bl __aeabi_f2d
 859 012a 0246     	 mov r2,r0
 860 012c 0B46     	 mov r3,r1
 861 012e 2046     	 mov r0,r4
 862 0130 2946     	 mov r1,r5
 863 0132 FFF7FEFF 	 bl __aeabi_dadd
 864 0136 0246     	 mov r2,r0
 865 0138 0B46     	 mov r3,r1
 866 013a 1046     	 mov r0,r2
 867 013c 1946     	 mov r1,r3
 868 013e FFF7FEFF 	 bl __aeabi_d2f
 869 0142 0246     	 mov r2,r0
 870 0144 744B     	 ldr r3,.L85+60
 871 0146 1A60     	 str r2,[r3]
 247:../main.c     **** 			angle_phi=angle_phi+offset_pos;
 872              	 .loc 3 247 0
 873 0148 734B     	 ldr r3,.L85+60
 874 014a 93ED007A 	 flds s14,[r3]
 875 014e 734B     	 ldr r3,.L85+64
 876 0150 D3ED007A 	 flds s15,[r3]
 877 0154 77EE277A 	 fadds s15,s14,s15
 878 0158 6F4B     	 ldr r3,.L85+60
 879 015a C3ED007A 	 fsts s15,[r3]
 248:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 880              	 .loc 3 248 0
 881 015e 6E4B     	 ldr r3,.L85+60
 882 0160 D3ED007A 	 flds s15,[r3]
 883 0164 9FED6E7A 	 flds s14,.L85+68
 884 0168 F4EEC77A 	 fcmpes s15,s14
 885 016c F1EE10FA 	 fmstat
 886 0170 09DD     	 ble .L31
 887              	 .loc 3 248 0 is_stmt 0 discriminator 1
 888 0172 694B     	 ldr r3,.L85+60
 889 0174 D3ED007A 	 flds s15,[r3]
 890 0178 9FED697A 	 flds s14,.L85+68
 891 017c 77EEC77A 	 fsubs s15,s15,s14
 892 0180 654B     	 ldr r3,.L85+60
 893 0182 C3ED007A 	 fsts s15,[r3]
 894              	.L31:
 249:../main.c     **** 
 250:../main.c     **** 			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
 895              	 .loc 3 250 0 is_stmt 1
 896 0186 5B4B     	 ldr r3,.L85+24
 897 0188 1B68     	 ldr r3,[r3]
 898 018a 07EE903A 	 fmsr s15,r3
 899 018e F8EE677A 	 fuitos s15,s15
 900 0192 9FED647A 	 flds s14,.L85+72
 901 0196 C7EE277A 	 fdivs s15,s14,s15
 902 019a 634B     	 ldr r3,.L85+76
 903 019c C3ED007A 	 fsts s15,[r3]
 904 01a0 6FE0     	 b .L33
 905              	.L30:
 251:../main.c     **** 		}
 252:../main.c     **** 		// CCW
 253:../main.c     **** 		else{
 254:../main.c     **** 			angle_phi = (sector*60.0)-angle_in_sector;
 906              	 .loc 3 254 0
 907 01a2 5B4B     	 ldr r3,.L85+52
 908 01a4 1B78     	 ldrb r3,[r3]
 909 01a6 DBB2     	 uxtb r3,r3
 910 01a8 5BB2     	 sxtb r3,r3
 911 01aa 1846     	 mov r0,r3
 912 01ac FFF7FEFF 	 bl __aeabi_i2d
 913 01b0 0246     	 mov r2,r0
 914 01b2 0B46     	 mov r3,r1
 915 01b4 1046     	 mov r0,r2
 916 01b6 1946     	 mov r1,r3
 917 01b8 4FF00002 	 mov r2,#0
 918 01bc 554B     	 ldr r3,.L85+56
 919 01be FFF7FEFF 	 bl __aeabi_dmul
 920 01c2 0246     	 mov r2,r0
 921 01c4 0B46     	 mov r3,r1
 922 01c6 1446     	 mov r4,r2
 923 01c8 1D46     	 mov r5,r3
 924 01ca 4C4B     	 ldr r3,.L85+32
 925 01cc 1B68     	 ldr r3,[r3]
 926 01ce 1846     	 mov r0,r3
 927 01d0 FFF7FEFF 	 bl __aeabi_f2d
 928 01d4 0246     	 mov r2,r0
 929 01d6 0B46     	 mov r3,r1
 930 01d8 2046     	 mov r0,r4
 931 01da 2946     	 mov r1,r5
 932 01dc FFF7FEFF 	 bl __aeabi_dsub
 933 01e0 0246     	 mov r2,r0
 934 01e2 0B46     	 mov r3,r1
 935 01e4 1046     	 mov r0,r2
 936 01e6 1946     	 mov r1,r3
 937 01e8 FFF7FEFF 	 bl __aeabi_d2f
 938 01ec 0246     	 mov r2,r0
 939 01ee 4A4B     	 ldr r3,.L85+60
 940 01f0 1A60     	 str r2,[r3]
 255:../main.c     **** 			angle_phi = angle_phi+60.0;
 941              	 .loc 3 255 0
 942 01f2 494B     	 ldr r3,.L85+60
 943 01f4 D3ED007A 	 flds s15,[r3]
 944 01f8 9FED417A 	 flds s14,.L85+36
 945 01fc 77EE877A 	 fadds s15,s15,s14
 946 0200 454B     	 ldr r3,.L85+60
 947 0202 C3ED007A 	 fsts s15,[r3]
 256:../main.c     **** 			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 948              	 .loc 3 256 0
 949 0206 444B     	 ldr r3,.L85+60
 950 0208 D3ED007A 	 flds s15,[r3]
 951 020c F5EEC07A 	 fcmpezs s15
 952 0210 F1EE10FA 	 fmstat
 953 0214 09D5     	 bpl .L34
 954              	 .loc 3 256 0 is_stmt 0 discriminator 1
 955 0216 404B     	 ldr r3,.L85+60
 956 0218 D3ED007A 	 flds s15,[r3]
 957 021c 9FED407A 	 flds s14,.L85+68
 958 0220 77EE877A 	 fadds s15,s15,s14
 959 0224 3C4B     	 ldr r3,.L85+60
 960 0226 C3ED007A 	 fsts s15,[r3]
 961              	.L34:
 257:../main.c     **** 			angle_phi=angle_phi+offset_neg;
 962              	 .loc 3 257 0 is_stmt 1
 963 022a 3B4B     	 ldr r3,.L85+60
 964 022c 93ED007A 	 flds s14,[r3]
 965 0230 3E4B     	 ldr r3,.L85+80
 966 0232 D3ED007A 	 flds s15,[r3]
 967 0236 77EE277A 	 fadds s15,s14,s15
 968 023a 374B     	 ldr r3,.L85+60
 969 023c C3ED007A 	 fsts s15,[r3]
 258:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 970              	 .loc 3 258 0
 971 0240 354B     	 ldr r3,.L85+60
 972 0242 D3ED007A 	 flds s15,[r3]
 973 0246 9FED367A 	 flds s14,.L85+68
 974 024a F4EEC77A 	 fcmpes s15,s14
 975 024e F1EE10FA 	 fmstat
 976 0252 09DD     	 ble .L36
 977              	 .loc 3 258 0 is_stmt 0 discriminator 1
 978 0254 304B     	 ldr r3,.L85+60
 979 0256 D3ED007A 	 flds s15,[r3]
 980 025a 9FED317A 	 flds s14,.L85+68
 981 025e 77EEC77A 	 fsubs s15,s15,s14
 982 0262 2D4B     	 ldr r3,.L85+60
 983 0264 C3ED007A 	 fsts s15,[r3]
 984              	.L36:
 259:../main.c     **** 
 260:../main.c     **** 			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
 985              	 .loc 3 260 0 is_stmt 1
 986 0268 224B     	 ldr r3,.L85+24
 987 026a 1B68     	 ldr r3,[r3]
 988 026c 07EE903A 	 fmsr s15,r3
 989 0270 F8EE677A 	 fuitos s15,s15
 990 0274 9FED2E7A 	 flds s14,.L85+84
 991 0278 C7EE277A 	 fdivs s15,s14,s15
 992 027c 2A4B     	 ldr r3,.L85+76
 993 027e C3ED007A 	 fsts s15,[r3]
 994              	.L33:
 261:../main.c     **** 		}
 262:../main.c     **** 
 263:../main.c     **** 		Speed_detection_OK = 0;
 995              	 .loc 3 263 0
 996 0282 2C4B     	 ldr r3,.L85+88
 997 0284 0022     	 movs r2,#0
 998 0286 1A70     	 strb r2,[r3]
 264:../main.c     **** 		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large pea
 999              	 .loc 3 264 0
 1000 0288 274B     	 ldr r3,.L85+76
 1001 028a D3ED007A 	 flds s15,[r3]
 1002 028e 9FED2A7A 	 flds s14,.L85+92
 1003 0292 F4EEC77A 	 fcmpes s15,s14
 1004 0296 F1EE10FA 	 fmstat
 1005 029a 10D5     	 bpl .L38
 1006              	 .loc 3 264 0 is_stmt 0 discriminator 1
 1007 029c 224B     	 ldr r3,.L85+76
 1008 029e D3ED007A 	 flds s15,[r3]
 1009 02a2 9FED267A 	 flds s14,.L85+96
 1010 02a6 F4EEC77A 	 fcmpes s15,s14
 1011 02aa F1EE10FA 	 fmstat
 1012 02ae 06DD     	 ble .L38
 265:../main.c     **** 		{
 266:../main.c     **** 			omega_mech_rps = omega_mech_rps_temp;
 1013              	 .loc 3 266 0 is_stmt 1
 1014 02b0 1D4B     	 ldr r3,.L85+76
 1015 02b2 1B68     	 ldr r3,[r3]
 1016 02b4 224A     	 ldr r2,.L85+100
 1017 02b6 1360     	 str r3,[r2]
 267:../main.c     **** 			Speed_detection_OK = 1;
 1018              	 .loc 3 267 0
 1019 02b8 1E4B     	 ldr r3,.L85+88
 1020 02ba 0122     	 movs r2,#1
 1021 02bc 1A70     	 strb r2,[r3]
 1022              	.L38:
 268:../main.c     **** 		}
 269:../main.c     **** 
 270:../main.c     **** 		if(t > TIME_OMEGA_0){
 1023              	 .loc 3 270 0
 1024 02be FB68     	 ldr r3,[r7,#12]
 1025 02c0 41F28832 	 movw r2,#5000
 1026 02c4 9342     	 cmp r3,r2
 1027 02c6 3FD9     	 bls .L41
 271:../main.c     **** 			omega_ele_rads = 0;
 1028              	 .loc 3 271 0
 1029 02c8 1E4B     	 ldr r3,.L85+104
 1030 02ca 4FF00002 	 mov r2,#0
 1031 02ce 1A60     	 str r2,[r3]
 272:../main.c     **** 			omega_mech_rps = 0;
 1032              	 .loc 3 272 0
 1033 02d0 1B4B     	 ldr r3,.L85+100
 1034 02d2 4FF00002 	 mov r2,#0
 1035 02d6 1A60     	 str r2,[r3]
 1036 02d8 5AE0     	 b .L42
 1037              	.L86:
 1038 02da 00BF     	 .align 2
 1039              	.L85:
 1040 02dc 00000000 	 .word status_LED_red_cal_time
 1041 02e0 00000000 	 .word last_Hall_trig
 1042 02e4 00000000 	 .word time_since_A
 1043 02e8 00000000 	 .word time_since_B
 1044 02ec 00000000 	 .word time_since_C
 1045 02f0 00000000 	 .word time_180deg
 1046 02f4 00000000 	 .word time_180deg_cal
 1047 02f8 00806640 	 .word 1080459264
 1048 02fc 00000000 	 .word angle_in_sector
 1049 0300 00007042 	 .word 1114636288
 1050 0304 00007042 	 .word 1114636288
 1051 0308 0000F041 	 .word 1106247680
 1052 030c 00000000 	 .word direction
 1053 0310 00000000 	 .word sector
 1054 0314 00004E40 	 .word 1078853632
 1055 0318 00000000 	 .word angle_phi
 1056 031c 00000000 	 .word offset_pos
 1057 0320 0000B443 	 .word 1135869952
 1058 0324 0000E143 	 .word 1138819072
 1059 0328 00000000 	 .word omega_mech_rps_temp
 1060 032c 00000000 	 .word offset_neg
 1061 0330 0000E1C3 	 .word -1008664576
 1062 0334 00000000 	 .word Speed_detection_OK
 1063 0338 00004843 	 .word 1128792064
 1064 033c 000048C3 	 .word -1018691584
 1065 0340 00000000 	 .word omega_mech_rps
 1066 0344 00000000 	 .word omega_ele_rads
 1067              	.L41:
 273:../main.c     **** 		} // set omega  to 0 if no more hall detected
 274:../main.c     **** 		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s
 1068              	 .loc 3 274 0
 1069 0348 C54B     	 ldr r3,.L87+56
 1070 034a D3ED007A 	 flds s15,[r3]
 1071 034e 77EEA77A 	 fadds s15,s15,s15
 1072 0352 17EE900A 	 fmrs r0,s15
 1073 0356 FFF7FEFF 	 bl __aeabi_f2d
 1074 035a 0246     	 mov r2,r0
 1075 035c 0B46     	 mov r3,r1
 1076 035e 1046     	 mov r0,r2
 1077 0360 1946     	 mov r1,r3
 1078 0362 B1A3     	 adr r3,.L87
 1079 0364 D3E90023 	 ldrd r2,[r3]
 1080 0368 FFF7FEFF 	 bl __aeabi_dmul
 1081 036c 0246     	 mov r2,r0
 1082 036e 0B46     	 mov r3,r1
 1083 0370 1046     	 mov r0,r2
 1084 0372 1946     	 mov r1,r3
 1085 0374 4FF00002 	 mov r2,#0
 1086 0378 BA4B     	 ldr r3,.L87+60
 1087 037a FFF7FEFF 	 bl __aeabi_dmul
 1088 037e 0246     	 mov r2,r0
 1089 0380 0B46     	 mov r3,r1
 1090 0382 1046     	 mov r0,r2
 1091 0384 1946     	 mov r1,r3
 1092 0386 FFF7FEFF 	 bl __aeabi_d2f
 1093 038a 0246     	 mov r2,r0
 1094 038c B64B     	 ldr r3,.L87+64
 1095 038e 1A60     	 str r2,[r3]
 1096              	.L42:
 275:../main.c     **** 
 276:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% 
 277:../main.c     **** 
 278:../main.c     **** 		// Current read out over SPI
 279:../main.c     **** 		Current_U = readCurrent(ChipSelect_U);
 1097              	 .loc 3 279 0
 1098 0390 0620     	 movs r0,#6
 1099 0392 FFF7FEFF 	 bl readCurrent
 1100 0396 0246     	 mov r2,r0
 1101 0398 B44B     	 ldr r3,.L87+68
 1102 039a 1A60     	 str r2,[r3]
 280:../main.c     **** 		Current_V = readCurrent(ChipSelect_V);
 1103              	 .loc 3 280 0
 1104 039c 0520     	 movs r0,#5
 1105 039e FFF7FEFF 	 bl readCurrent
 1106 03a2 0246     	 mov r2,r0
 1107 03a4 B24B     	 ldr r3,.L87+72
 1108 03a6 1A60     	 str r2,[r3]
 281:../main.c     **** 		Current_W = readCurrent(ChipSelect_W);
 1109              	 .loc 3 281 0
 1110 03a8 0320     	 movs r0,#3
 1111 03aa FFF7FEFF 	 bl readCurrent
 1112 03ae 0246     	 mov r2,r0
 1113 03b0 B04B     	 ldr r3,.L87+76
 1114 03b2 1A60     	 str r2,[r3]
 282:../main.c     **** 
 283:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of th
 284:../main.c     **** 
 285:../main.c     **** 		// conversion from rad/s to degree
 286:../main.c     **** 		float angle_phi_rad = angle_phi*Pi180;
 1115              	 .loc 3 286 0
 1116 03b4 B04B     	 ldr r3,.L87+80
 1117 03b6 1B68     	 ldr r3,[r3]
 1118 03b8 1846     	 mov r0,r3
 1119 03ba FFF7FEFF 	 bl __aeabi_f2d
 1120 03be 0246     	 mov r2,r0
 1121 03c0 0B46     	 mov r3,r1
 1122 03c2 1046     	 mov r0,r2
 1123 03c4 1946     	 mov r1,r3
 1124 03c6 9AA3     	 adr r3,.L87+8
 1125 03c8 D3E90023 	 ldrd r2,[r3]
 1126 03cc FFF7FEFF 	 bl __aeabi_dmul
 1127 03d0 0246     	 mov r2,r0
 1128 03d2 0B46     	 mov r3,r1
 1129 03d4 1046     	 mov r0,r2
 1130 03d6 1946     	 mov r1,r3
 1131 03d8 FFF7FEFF 	 bl __aeabi_d2f
 1132 03dc 0346     	 mov r3,r0
 1133 03de BB60     	 str r3,[r7,#8]
 287:../main.c     **** 
 288:../main.c     **** 		// to decrease multiple calculations and computational effort
 289:../main.c     **** 		float cos_phi = cosf(angle_phi_rad);
 1134              	 .loc 3 289 0
 1135 03e0 B868     	 ldr r0,[r7,#8]
 1136 03e2 FFF7FEFF 	 bl cosf
 1137 03e6 7860     	 str r0,[r7,#4]
 290:../main.c     **** 		float sin_phi = sinf(angle_phi_rad);
 1138              	 .loc 3 290 0
 1139 03e8 B868     	 ldr r0,[r7,#8]
 1140 03ea FFF7FEFF 	 bl sinf
 1141 03ee 3860     	 str r0,[r7]
 291:../main.c     **** 
 292:../main.c     **** 		// Clark-Park transformation (from U,V,W to dq)
 293:../main.c     **** 		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-
 1142              	 .loc 3 293 0
 1143 03f0 9E4B     	 ldr r3,.L87+68
 1144 03f2 93ED007A 	 flds s14,[r3]
 1145 03f6 D7ED017A 	 flds s15,[r7,#4]
 1146 03fa 27EE278A 	 fmuls s16,s14,s15
 1147 03fe B868     	 ldr r0,[r7,#8]
 1148 0400 FFF7FEFF 	 bl __aeabi_f2d
 1149 0404 0246     	 mov r2,r0
 1150 0406 0B46     	 mov r3,r1
 1151 0408 1046     	 mov r0,r2
 1152 040a 1946     	 mov r1,r3
 1153 040c 8AA3     	 adr r3,.L87+16
 1154 040e D3E90023 	 ldrd r2,[r3]
 1155 0412 FFF7FEFF 	 bl __aeabi_dsub
 1156 0416 0246     	 mov r2,r0
 1157 0418 0B46     	 mov r3,r1
 1158 041a 1046     	 mov r0,r2
 1159 041c 1946     	 mov r1,r3
 1160 041e FFF7FEFF 	 bl __aeabi_d2f
 1161 0422 0346     	 mov r3,r0
 1162 0424 1846     	 mov r0,r3
 1163 0426 FFF7FEFF 	 bl cosf
 1164 042a 07EE100A 	 fmsr s14,r0
 1165 042e 904B     	 ldr r3,.L87+72
 1166 0430 D3ED007A 	 flds s15,[r3]
 1167 0434 67EE277A 	 fmuls s15,s14,s15
 1168 0438 38EE278A 	 fadds s16,s16,s15
 1169 043c B868     	 ldr r0,[r7,#8]
 1170 043e FFF7FEFF 	 bl __aeabi_f2d
 1171 0442 0246     	 mov r2,r0
 1172 0444 0B46     	 mov r3,r1
 1173 0446 1046     	 mov r0,r2
 1174 0448 1946     	 mov r1,r3
 1175 044a 7DA3     	 adr r3,.L87+24
 1176 044c D3E90023 	 ldrd r2,[r3]
 1177 0450 FFF7FEFF 	 bl __aeabi_dsub
 1178 0454 0246     	 mov r2,r0
 1179 0456 0B46     	 mov r3,r1
 1180 0458 1046     	 mov r0,r2
 1181 045a 1946     	 mov r1,r3
 1182 045c FFF7FEFF 	 bl __aeabi_d2f
 1183 0460 0346     	 mov r3,r0
 1184 0462 1846     	 mov r0,r3
 1185 0464 FFF7FEFF 	 bl cosf
 1186 0468 07EE100A 	 fmsr s14,r0
 1187 046c 814B     	 ldr r3,.L87+76
 1188 046e D3ED007A 	 flds s15,[r3]
 1189 0472 67EE277A 	 fmuls s15,s14,s15
 1190 0476 78EE277A 	 fadds s15,s16,s15
 1191 047a 17EE900A 	 fmrs r0,s15
 1192 047e FFF7FEFF 	 bl __aeabi_f2d
 1193 0482 0246     	 mov r2,r0
 1194 0484 0B46     	 mov r3,r1
 1195 0486 1046     	 mov r0,r2
 1196 0488 1946     	 mov r1,r3
 1197 048a 6FA3     	 adr r3,.L87+32
 1198 048c D3E90023 	 ldrd r2,[r3]
 1199 0490 FFF7FEFF 	 bl __aeabi_dmul
 1200 0494 0246     	 mov r2,r0
 1201 0496 0B46     	 mov r3,r1
 1202 0498 1046     	 mov r0,r2
 1203 049a 1946     	 mov r1,r3
 1204 049c FFF7FEFF 	 bl __aeabi_d2f
 1205 04a0 0246     	 mov r2,r0
 1206 04a2 764B     	 ldr r3,.L87+84
 1207 04a4 1A60     	 str r2,[r3]
 294:../main.c     **** 		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad
 1208              	 .loc 3 294 0
 1209 04a6 D7ED007A 	 flds s15,[r7]
 1210 04aa B1EE677A 	 fnegs s14,s15
 1211 04ae 6F4B     	 ldr r3,.L87+68
 1212 04b0 D3ED007A 	 flds s15,[r3]
 1213 04b4 27EE278A 	 fmuls s16,s14,s15
 1214 04b8 B868     	 ldr r0,[r7,#8]
 1215 04ba FFF7FEFF 	 bl __aeabi_f2d
 1216 04be 0246     	 mov r2,r0
 1217 04c0 0B46     	 mov r3,r1
 1218 04c2 1046     	 mov r0,r2
 1219 04c4 1946     	 mov r1,r3
 1220 04c6 5CA3     	 adr r3,.L87+16
 1221 04c8 D3E90023 	 ldrd r2,[r3]
 1222 04cc FFF7FEFF 	 bl __aeabi_dsub
 1223 04d0 0246     	 mov r2,r0
 1224 04d2 0B46     	 mov r3,r1
 1225 04d4 1046     	 mov r0,r2
 1226 04d6 1946     	 mov r1,r3
 1227 04d8 FFF7FEFF 	 bl __aeabi_d2f
 1228 04dc 0346     	 mov r3,r0
 1229 04de 1846     	 mov r0,r3
 1230 04e0 FFF7FEFF 	 bl sinf
 1231 04e4 07EE100A 	 fmsr s14,r0
 1232 04e8 614B     	 ldr r3,.L87+72
 1233 04ea D3ED007A 	 flds s15,[r3]
 1234 04ee 67EE277A 	 fmuls s15,s14,s15
 1235 04f2 38EE678A 	 fsubs s16,s16,s15
 1236 04f6 B868     	 ldr r0,[r7,#8]
 1237 04f8 FFF7FEFF 	 bl __aeabi_f2d
 1238 04fc 0246     	 mov r2,r0
 1239 04fe 0B46     	 mov r3,r1
 1240 0500 1046     	 mov r0,r2
 1241 0502 1946     	 mov r1,r3
 1242 0504 4EA3     	 adr r3,.L87+24
 1243 0506 D3E90023 	 ldrd r2,[r3]
 1244 050a FFF7FEFF 	 bl __aeabi_dsub
 1245 050e 0246     	 mov r2,r0
 1246 0510 0B46     	 mov r3,r1
 1247 0512 1046     	 mov r0,r2
 1248 0514 1946     	 mov r1,r3
 1249 0516 FFF7FEFF 	 bl __aeabi_d2f
 1250 051a 0346     	 mov r3,r0
 1251 051c 1846     	 mov r0,r3
 1252 051e FFF7FEFF 	 bl sinf
 1253 0522 07EE100A 	 fmsr s14,r0
 1254 0526 534B     	 ldr r3,.L87+76
 1255 0528 D3ED007A 	 flds s15,[r3]
 1256 052c 67EE277A 	 fmuls s15,s14,s15
 1257 0530 78EE677A 	 fsubs s15,s16,s15
 1258 0534 17EE900A 	 fmrs r0,s15
 1259 0538 FFF7FEFF 	 bl __aeabi_f2d
 1260 053c 0246     	 mov r2,r0
 1261 053e 0B46     	 mov r3,r1
 1262 0540 1046     	 mov r0,r2
 1263 0542 1946     	 mov r1,r3
 1264 0544 40A3     	 adr r3,.L87+32
 1265 0546 D3E90023 	 ldrd r2,[r3]
 1266 054a FFF7FEFF 	 bl __aeabi_dmul
 1267 054e 0246     	 mov r2,r0
 1268 0550 0B46     	 mov r3,r1
 1269 0552 1046     	 mov r0,r2
 1270 0554 1946     	 mov r1,r3
 1271 0556 FFF7FEFF 	 bl __aeabi_d2f
 1272 055a 0246     	 mov r2,r0
 1273 055c 484B     	 ldr r3,.L87+88
 1274 055e 1A60     	 str r2,[r3]
 295:../main.c     **** 
 296:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of
 297:../main.c     **** 
 298:../main.c     **** 		if(CAN_control == 1){// can control
 1275              	 .loc 3 298 0
 1276 0560 484B     	 ldr r3,.L87+92
 1277 0562 1B78     	 ldrb r3,[r3]
 1278 0564 012B     	 cmp r3,#1
 1279 0566 3CD1     	 bne .L43
 299:../main.c     **** 
 300:../main.c     **** 			if(CAN_new_meassage == 1){
 1280              	 .loc 3 300 0
 1281 0568 474B     	 ldr r3,.L87+96
 1282 056a 1B78     	 ldrb r3,[r3]
 1283 056c 012B     	 cmp r3,#1
 1284 056e 07D1     	 bne .L44
 301:../main.c     **** 				speed_ref = CAN_speed_ref;
 1285              	 .loc 3 301 0
 1286 0570 464B     	 ldr r3,.L87+100
 1287 0572 1B68     	 ldr r3,[r3]
 1288 0574 464A     	 ldr r2,.L87+104
 1289 0576 1360     	 str r3,[r2]
 302:../main.c     **** 				CAN_new_meassage = 0;
 1290              	 .loc 3 302 0
 1291 0578 434B     	 ldr r3,.L87+96
 1292 057a 0022     	 movs r2,#0
 1293 057c 1A70     	 strb r2,[r3]
 1294 057e 05E0     	 b .L45
 1295              	.L44:
 303:../main.c     **** 			}
 304:../main.c     **** 			else{
 305:../main.c     **** 				CAN_no_com_counter ++;
 1296              	 .loc 3 305 0
 1297 0580 444B     	 ldr r3,.L87+108
 1298 0582 1B78     	 ldrb r3,[r3]
 1299 0584 0133     	 adds r3,r3,#1
 1300 0586 DAB2     	 uxtb r2,r3
 1301 0588 424B     	 ldr r3,.L87+108
 1302 058a 1A70     	 strb r2,[r3]
 1303              	.L45:
 306:../main.c     **** 			}
 307:../main.c     **** 
 308:../main.c     **** 			if(CAN_no_com_counter > CAN_NO_COM_TH){
 1304              	 .loc 3 308 0
 1305 058c 414B     	 ldr r3,.L87+108
 1306 058e 1B78     	 ldrb r3,[r3]
 1307 0590 FA2B     	 cmp r3,#250
 1308 0592 06D9     	 bls .L46
 309:../main.c     **** 				//CAN_new_meassage = 0;
 310:../main.c     **** 				CAN_no_com_counter = CAN_NO_COM_TH;
 1309              	 .loc 3 310 0
 1310 0594 3F4B     	 ldr r3,.L87+108
 1311 0596 FA22     	 movs r2,#250
 1312 0598 1A70     	 strb r2,[r3]
 311:../main.c     **** 				speed_ref = 0;
 1313              	 .loc 3 311 0
 1314 059a 3D4B     	 ldr r3,.L87+104
 1315 059c 4FF00002 	 mov r2,#0
 1316 05a0 1A60     	 str r2,[r3]
 1317              	.L46:
 312:../main.c     **** 			}
 313:../main.c     **** 			omega_mech_rps_ref = (speed_ref / WHEEL_R) / (2 * PI);
 1318              	 .loc 3 313 0
 1319 05a2 3B4B     	 ldr r3,.L87+104
 1320 05a4 1B68     	 ldr r3,[r3]
 1321 05a6 1846     	 mov r0,r3
 1322 05a8 FFF7FEFF 	 bl __aeabi_f2d
 1323 05ac 0246     	 mov r2,r0
 1324 05ae 0B46     	 mov r3,r1
 1325 05b0 1046     	 mov r0,r2
 1326 05b2 1946     	 mov r1,r3
 1327 05b4 26A3     	 adr r3,.L87+40
 1328 05b6 D3E90023 	 ldrd r2,[r3]
 1329 05ba FFF7FEFF 	 bl __aeabi_ddiv
 1330 05be 0246     	 mov r2,r0
 1331 05c0 0B46     	 mov r3,r1
 1332 05c2 1046     	 mov r0,r2
 1333 05c4 1946     	 mov r1,r3
 1334 05c6 24A3     	 adr r3,.L87+48
 1335 05c8 D3E90023 	 ldrd r2,[r3]
 1336 05cc FFF7FEFF 	 bl __aeabi_ddiv
 1337 05d0 0246     	 mov r2,r0
 1338 05d2 0B46     	 mov r3,r1
 1339 05d4 1046     	 mov r0,r2
 1340 05d6 1946     	 mov r1,r3
 1341 05d8 FFF7FEFF 	 bl __aeabi_d2f
 1342 05dc 0246     	 mov r2,r0
 1343 05de 2E4B     	 ldr r3,.L87+112
 1344 05e0 1A60     	 str r2,[r3]
 1345              	.L43:
 314:../main.c     **** 		}
 315:../main.c     **** 
 316:../main.c     **** 		// Always run speed controll calc
 317:../main.c     **** 		if(omega_mech_rps_ref == 0  && (( -2 < omega_mech_rps) && (omega_mech_rps < 2))){ // no contorl i
 1346              	 .loc 3 317 0
 1347 05e2 2D4B     	 ldr r3,.L87+112
 1348 05e4 D3ED007A 	 flds s15,[r3]
 1349 05e8 F5EE407A 	 fcmpzs s15
 1350 05ec F1EE10FA 	 fmstat
 1351 05f0 56D1     	 bne .L47
 1352              	 .loc 3 317 0 is_stmt 0 discriminator 1
 1353 05f2 1B4B     	 ldr r3,.L87+56
 1354 05f4 D3ED007A 	 flds s15,[r3]
 1355 05f8 B8EE007A 	 fconsts s14,#128
 1356 05fc F4EEC77A 	 fcmpes s15,s14
 1357 0600 F1EE10FA 	 fmstat
 1358 0604 4CDD     	 ble .L47
 1359              	 .loc 3 317 0 discriminator 2
 1360 0606 164B     	 ldr r3,.L87+56
 1361 0608 D3ED007A 	 flds s15,[r3]
 1362 060c B0EE007A 	 fconsts s14,#0
 1363 0610 F4EEC77A 	 fcmpes s15,s14
 1364 0614 F1EE10FA 	 fmstat
 1365 0618 42D5     	 bpl .L47
 318:../main.c     **** 			T_ref_controlled = 0;
 1366              	 .loc 3 318 0 is_stmt 1
 1367 061a 204B     	 ldr r3,.L87+116
 1368 061c 4FF00002 	 mov r2,#0
 1369 0620 1A60     	 str r2,[r3]
 1370 0622 D4E0     	 b .L50
 1371              	.L88:
 1372 0624 AFF30080 	 .align 3
 1373              	.L87:
 1374 0628 F1D4C853 	 .word 1405670641
 1375 062c FB210940 	 .word 1074340347
 1376 0630 4DC90777 	 .word 1996998989
 1377 0634 46DF913F 	 .word 1066524486
 1378 0638 A038DB37 	 .word 937113760
 1379 063c 52C10040 	 .word 1073791314
 1380 0640 A038DB37 	 .word 937113760
 1381 0644 52C11040 	 .word 1074839890
 1382 0648 93761F57 	 .word 1461679763
 1383 064c 5555E53F 	 .word 1071994197
 1384 0650 48E17A14 	 .word 343597384
 1385 0654 AE47B13F 	 .word 1068582830
 1386 0658 F1D4C853 	 .word 1405670641
 1387 065c FB211940 	 .word 1075388923
 1388 0660 00000000 	 .word omega_mech_rps
 1389 0664 00002640 	 .word 1076232192
 1390 0668 00000000 	 .word omega_ele_rads
 1391 066c 00000000 	 .word Current_U
 1392 0670 00000000 	 .word Current_V
 1393 0674 00000000 	 .word Current_W
 1394 0678 00000000 	 .word angle_phi
 1395 067c 00000000 	 .word id
 1396 0680 00000000 	 .word iq
 1397 0684 00000000 	 .word CAN_control
 1398 0688 00000000 	 .word CAN_new_meassage
 1399 068c 00000000 	 .word CAN_speed_ref
 1400 0690 00000000 	 .word speed_ref
 1401 0694 00000000 	 .word CAN_no_com_counter
 1402 0698 00000000 	 .word omega_mech_rps_ref
 1403 069c 00000000 	 .word T_ref_controlled
 1404              	.L47:
 319:../main.c     **** 		}
 320:../main.c     **** 		else{
 321:../main.c     **** 			T_ref_controlled = PI_Controller(omega_mech_rps_ref,omega_mech_rps,&omega_param); // outer contr
 1405              	 .loc 3 321 0
 1406 06a0 AD4B     	 ldr r3,.L89+24
 1407 06a2 1A68     	 ldr r2,[r3]
 1408 06a4 AD4B     	 ldr r3,.L89+28
 1409 06a6 1B68     	 ldr r3,[r3]
 1410 06a8 1046     	 mov r0,r2
 1411 06aa 1946     	 mov r1,r3
 1412 06ac AC4A     	 ldr r2,.L89+32
 1413 06ae FFF7FEFF 	 bl PI_Controller
 1414 06b2 0246     	 mov r2,r0
 1415 06b4 AB4B     	 ldr r3,.L89+36
 1416 06b6 1A60     	 str r2,[r3]
 322:../main.c     **** 
 323:../main.c     **** 			if(start_help == 1 ){
 1417              	 .loc 3 323 0
 1418 06b8 AB4B     	 ldr r3,.L89+40
 1419 06ba 1B78     	 ldrb r3,[r3]
 1420 06bc 012B     	 cmp r3,#1
 1421 06be 40F08680 	 bne .L50
 324:../main.c     **** 				// start help
 325:../main.c     **** 				if(omega_mech_rps_ref != 0 && (copysign(1,omega_mech_rps_ref) != copysign(1,omega_mech_rps) || 
 1422              	 .loc 3 325 0
 1423 06c2 A54B     	 ldr r3,.L89+24
 1424 06c4 D3ED007A 	 flds s15,[r3]
 1425 06c8 F5EE407A 	 fcmpzs s15
 1426 06cc F1EE10FA 	 fmstat
 1427 06d0 2DD0     	 beq .L51
 1428              	 .loc 3 325 0 is_stmt 0 discriminator 1
 1429 06d2 A14B     	 ldr r3,.L89+24
 1430 06d4 1B68     	 ldr r3,[r3]
 1431 06d6 1846     	 mov r0,r3
 1432 06d8 FFF7FEFF 	 bl __aeabi_f2d
 1433 06dc 0246     	 mov r2,r0
 1434 06de 0B46     	 mov r3,r1
 1435 06e0 4FF00000 	 mov r0,#0
 1436 06e4 A149     	 ldr r1,.L89+44
 1437 06e6 FFF7FEFF 	 bl copysign
 1438 06ea 0446     	 mov r4,r0
 1439 06ec 0D46     	 mov r5,r1
 1440 06ee 9B4B     	 ldr r3,.L89+28
 1441 06f0 1B68     	 ldr r3,[r3]
 1442 06f2 1846     	 mov r0,r3
 1443 06f4 FFF7FEFF 	 bl __aeabi_f2d
 1444 06f8 0246     	 mov r2,r0
 1445 06fa 0B46     	 mov r3,r1
 1446 06fc 4FF00000 	 mov r0,#0
 1447 0700 9A49     	 ldr r1,.L89+44
 1448 0702 FFF7FEFF 	 bl copysign
 1449 0706 0246     	 mov r2,r0
 1450 0708 0B46     	 mov r3,r1
 1451 070a 2046     	 mov r0,r4
 1452 070c 2946     	 mov r1,r5
 1453 070e FFF7FEFF 	 bl __aeabi_dcmpeq
 1454 0712 0346     	 mov r3,r0
 1455 0714 002B     	 cmp r3,#0
 1456 0716 07D0     	 beq .L52
 1457              	 .loc 3 325 0 discriminator 2
 1458 0718 904B     	 ldr r3,.L89+28
 1459 071a D3ED007A 	 flds s15,[r3]
 1460 071e F5EE407A 	 fcmpzs s15
 1461 0722 F1EE10FA 	 fmstat
 1462 0726 02D1     	 bne .L51
 1463              	.L52:
 326:../main.c     **** 					start_help_count = 10;
 1464              	 .loc 3 326 0 is_stmt 1
 1465 0728 914B     	 ldr r3,.L89+48
 1466 072a 0A22     	 movs r2,#10
 1467 072c 1A70     	 strb r2,[r3]
 1468              	.L51:
 327:../main.c     **** 				}
 328:../main.c     **** 
 329:../main.c     **** 				if(start_help_count > 0){
 1469              	 .loc 3 329 0
 1470 072e 904B     	 ldr r3,.L89+48
 1471 0730 1B78     	 ldrb r3,[r3]
 1472 0732 002B     	 cmp r3,#0
 1473 0734 4BD0     	 beq .L50
 330:../main.c     **** 					start_help_flag = 1;
 1474              	 .loc 3 330 0
 1475 0736 8F4B     	 ldr r3,.L89+52
 1476 0738 0122     	 movs r2,#1
 1477 073a 1A70     	 strb r2,[r3]
 331:../main.c     **** 					start_help_count --;
 1478              	 .loc 3 331 0
 1479 073c 8C4B     	 ldr r3,.L89+48
 1480 073e 1B78     	 ldrb r3,[r3]
 1481 0740 013B     	 subs r3,r3,#1
 1482 0742 DAB2     	 uxtb r2,r3
 1483 0744 8A4B     	 ldr r3,.L89+48
 1484 0746 1A70     	 strb r2,[r3]
 332:../main.c     **** 					if(omega_mech_rps_ref > 0)T_ref_controlled += START_HELP_T;
 1485              	 .loc 3 332 0
 1486 0748 834B     	 ldr r3,.L89+24
 1487 074a D3ED007A 	 flds s15,[r3]
 1488 074e F5EEC07A 	 fcmpezs s15
 1489 0752 F1EE10FA 	 fmstat
 1490 0756 17DD     	 ble .L83
 1491              	 .loc 3 332 0 is_stmt 0 discriminator 1
 1492 0758 824B     	 ldr r3,.L89+36
 1493 075a 1B68     	 ldr r3,[r3]
 1494 075c 1846     	 mov r0,r3
 1495 075e FFF7FEFF 	 bl __aeabi_f2d
 1496 0762 0246     	 mov r2,r0
 1497 0764 0B46     	 mov r3,r1
 1498 0766 1046     	 mov r0,r2
 1499 0768 1946     	 mov r1,r3
 1500 076a 75A3     	 adr r3,.L89
 1501 076c D3E90023 	 ldrd r2,[r3]
 1502 0770 FFF7FEFF 	 bl __aeabi_dadd
 1503 0774 0246     	 mov r2,r0
 1504 0776 0B46     	 mov r3,r1
 1505 0778 1046     	 mov r0,r2
 1506 077a 1946     	 mov r1,r3
 1507 077c FFF7FEFF 	 bl __aeabi_d2f
 1508 0780 0246     	 mov r2,r0
 1509 0782 784B     	 ldr r3,.L89+36
 1510 0784 1A60     	 str r2,[r3]
 1511 0786 22E0     	 b .L50
 1512              	.L83:
 333:../main.c     **** 					else if(omega_mech_rps_ref < 0)T_ref = T_ref_controlled -= START_HELP_T;
 1513              	 .loc 3 333 0 is_stmt 1
 1514 0788 734B     	 ldr r3,.L89+24
 1515 078a D3ED007A 	 flds s15,[r3]
 1516 078e F5EEC07A 	 fcmpezs s15
 1517 0792 F1EE10FA 	 fmstat
 1518 0796 1AD5     	 bpl .L50
 1519              	 .loc 3 333 0 is_stmt 0 discriminator 1
 1520 0798 724B     	 ldr r3,.L89+36
 1521 079a 1B68     	 ldr r3,[r3]
 1522 079c 1846     	 mov r0,r3
 1523 079e FFF7FEFF 	 bl __aeabi_f2d
 1524 07a2 0246     	 mov r2,r0
 1525 07a4 0B46     	 mov r3,r1
 1526 07a6 1046     	 mov r0,r2
 1527 07a8 1946     	 mov r1,r3
 1528 07aa 65A3     	 adr r3,.L89
 1529 07ac D3E90023 	 ldrd r2,[r3]
 1530 07b0 FFF7FEFF 	 bl __aeabi_dsub
 1531 07b4 0246     	 mov r2,r0
 1532 07b6 0B46     	 mov r3,r1
 1533 07b8 1046     	 mov r0,r2
 1534 07ba 1946     	 mov r1,r3
 1535 07bc FFF7FEFF 	 bl __aeabi_d2f
 1536 07c0 0246     	 mov r2,r0
 1537 07c2 684B     	 ldr r3,.L89+36
 1538 07c4 1A60     	 str r2,[r3]
 1539 07c6 674B     	 ldr r3,.L89+36
 1540 07c8 1B68     	 ldr r3,[r3]
 1541 07ca 6B4A     	 ldr r2,.L89+56
 1542 07cc 1360     	 str r3,[r2]
 1543              	.L50:
 334:../main.c     **** 				}
 335:../main.c     **** 			}
 336:../main.c     **** 		}
 337:../main.c     **** 
 338:../main.c     **** 		if (Speed_control == 1){// activation of speed control
 1544              	 .loc 3 338 0 is_stmt 1
 1545 07ce 6B4B     	 ldr r3,.L89+60
 1546 07d0 1B78     	 ldrb r3,[r3]
 1547 07d2 012B     	 cmp r3,#1
 1548 07d4 03D1     	 bne .L56
 339:../main.c     **** 			T_ref = T_ref_controlled;
 1549              	 .loc 3 339 0
 1550 07d6 634B     	 ldr r3,.L89+36
 1551 07d8 1B68     	 ldr r3,[r3]
 1552 07da 674A     	 ldr r2,.L89+56
 1553 07dc 1360     	 str r3,[r2]
 1554              	.L56:
 340:../main.c     **** 		}
 341:../main.c     **** 
 342:../main.c     **** 		if(Torque_control == 1){
 1555              	 .loc 3 342 0
 1556 07de 684B     	 ldr r3,.L89+64
 1557 07e0 1B78     	 ldrb r3,[r3]
 1558 07e2 012B     	 cmp r3,#1
 1559 07e4 4CD1     	 bne .L57
 343:../main.c     **** 
 344:../main.c     **** 			if(MOTOR_NUM == 1 || MOTOR_NUM == 10) {
 345:../main.c     **** 				iq_ref =  T_ref / K_T; // dirction for motor 1
 346:../main.c     **** 			}
 347:../main.c     **** 			else{
 348:../main.c     **** 				iq_ref = - T_ref / K_T;// dirction for motor not 1
 1560              	 .loc 3 348 0
 1561 07e6 644B     	 ldr r3,.L89+56
 1562 07e8 D3ED007A 	 flds s15,[r3]
 1563 07ec F1EE677A 	 fnegs s15,s15
 1564 07f0 17EE903A 	 fmrs r3,s15
 1565 07f4 1846     	 mov r0,r3
 1566 07f6 FFF7FEFF 	 bl __aeabi_f2d
 1567 07fa 0246     	 mov r2,r0
 1568 07fc 0B46     	 mov r3,r1
 1569 07fe 1046     	 mov r0,r2
 1570 0800 1946     	 mov r1,r3
 1571 0802 51A3     	 adr r3,.L89+8
 1572 0804 D3E90023 	 ldrd r2,[r3]
 1573 0808 FFF7FEFF 	 bl __aeabi_ddiv
 1574 080c 0246     	 mov r2,r0
 1575 080e 0B46     	 mov r3,r1
 1576 0810 1046     	 mov r0,r2
 1577 0812 1946     	 mov r1,r3
 1578 0814 FFF7FEFF 	 bl __aeabi_d2f
 1579 0818 0246     	 mov r2,r0
 1580 081a 5A4B     	 ldr r3,.L89+68
 1581 081c 1A60     	 str r2,[r3]
 349:../main.c     **** 			}
 350:../main.c     **** 
 351:../main.c     **** 
 352:../main.c     **** 			//limit to IQ_REF_MAx limit
 353:../main.c     **** 			if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 1582              	 .loc 3 353 0
 1583 081e 594B     	 ldr r3,.L89+68
 1584 0820 D3ED007A 	 flds s15,[r3]
 1585 0824 B9EE047A 	 fconsts s14,#148
 1586 0828 F4EEC77A 	 fcmpes s15,s14
 1587 082c F1EE10FA 	 fmstat
 1588 0830 02D5     	 bpl .L58
 1589              	 .loc 3 353 0 is_stmt 0 discriminator 1
 1590 0832 544B     	 ldr r3,.L89+68
 1591 0834 544A     	 ldr r2,.L89+72
 1592 0836 1A60     	 str r2,[r3]
 1593              	.L58:
 354:../main.c     **** 			if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 1594              	 .loc 3 354 0 is_stmt 1
 1595 0838 524B     	 ldr r3,.L89+68
 1596 083a D3ED007A 	 flds s15,[r3]
 1597 083e B1EE047A 	 fconsts s14,#20
 1598 0842 F4EEC77A 	 fcmpes s15,s14
 1599 0846 F1EE10FA 	 fmstat
 1600 084a 02DD     	 ble .L60
 1601              	 .loc 3 354 0 is_stmt 0 discriminator 1
 1602 084c 4D4B     	 ldr r3,.L89+68
 1603 084e 4F4A     	 ldr r2,.L89+76
 1604 0850 1A60     	 str r2,[r3]
 1605              	.L60:
 355:../main.c     **** 
 356:../main.c     **** 
 357:../main.c     **** 			Vd = PI_Controller(0.0,id,&Id_param);
 1606              	 .loc 3 357 0 is_stmt 1
 1607 0852 4F4B     	 ldr r3,.L89+80
 1608 0854 1B68     	 ldr r3,[r3]
 1609 0856 4FF00000 	 mov r0,#0
 1610 085a 1946     	 mov r1,r3
 1611 085c 4D4A     	 ldr r2,.L89+84
 1612 085e FFF7FEFF 	 bl PI_Controller
 1613 0862 0246     	 mov r2,r0
 1614 0864 4C4B     	 ldr r3,.L89+88
 1615 0866 1A60     	 str r2,[r3]
 358:../main.c     **** 			Vq = PI_Controller(iq_ref,iq,&Iq_param); // toque controll
 1616              	 .loc 3 358 0
 1617 0868 464B     	 ldr r3,.L89+68
 1618 086a 1A68     	 ldr r2,[r3]
 1619 086c 4B4B     	 ldr r3,.L89+92
 1620 086e 1B68     	 ldr r3,[r3]
 1621 0870 1046     	 mov r0,r2
 1622 0872 1946     	 mov r1,r3
 1623 0874 4A4A     	 ldr r2,.L89+96
 1624 0876 FFF7FEFF 	 bl PI_Controller
 1625 087a 0246     	 mov r2,r0
 1626 087c 494B     	 ldr r3,.L89+100
 1627 087e 1A60     	 str r2,[r3]
 1628              	.L57:
 359:../main.c     **** 		}
 360:../main.c     **** 
 361:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9
 362:../main.c     **** 
 363:../main.c     **** 		// dq to alpha beta for voltage
 364:../main.c     **** 		Valpha = Vd*cos_phi - Vq*sin_phi;
 1629              	 .loc 3 364 0
 1630 0880 454B     	 ldr r3,.L89+88
 1631 0882 93ED007A 	 flds s14,[r3]
 1632 0886 D7ED017A 	 flds s15,[r7,#4]
 1633 088a 27EE277A 	 fmuls s14,s14,s15
 1634 088e 454B     	 ldr r3,.L89+100
 1635 0890 D3ED006A 	 flds s13,[r3]
 1636 0894 D7ED007A 	 flds s15,[r7]
 1637 0898 66EEA77A 	 fmuls s15,s13,s15
 1638 089c 77EE677A 	 fsubs s15,s14,s15
 1639 08a0 414B     	 ldr r3,.L89+104
 1640 08a2 C3ED007A 	 fsts s15,[r3]
 365:../main.c     **** 		Vbeta = Vd*sin_phi + Vq*cos_phi;
 1641              	 .loc 3 365 0
 1642 08a6 3C4B     	 ldr r3,.L89+88
 1643 08a8 93ED007A 	 flds s14,[r3]
 1644 08ac D7ED007A 	 flds s15,[r7]
 1645 08b0 27EE277A 	 fmuls s14,s14,s15
 1646 08b4 3B4B     	 ldr r3,.L89+100
 1647 08b6 D3ED006A 	 flds s13,[r3]
 1648 08ba D7ED017A 	 flds s15,[r7,#4]
 1649 08be 66EEA77A 	 fmuls s15,s13,s15
 1650 08c2 77EE277A 	 fadds s15,s14,s15
 1651 08c6 394B     	 ldr r3,.L89+108
 1652 08c8 C3ED007A 	 fsts s15,[r3]
 366:../main.c     **** 
 367:../main.c     **** 		// calc angle for SVM app
 368:../main.c     **** 		angle_ab_rad = atanf(Vbeta/Valpha);
 1653              	 .loc 3 368 0
 1654 08cc 374B     	 ldr r3,.L89+108
 1655 08ce 93ED007A 	 flds s14,[r3]
 1656 08d2 354B     	 ldr r3,.L89+104
 1657 08d4 D3ED007A 	 flds s15,[r3]
 1658 08d8 C7EE277A 	 fdivs s15,s14,s15
 1659 08dc 17EE900A 	 fmrs r0,s15
 1660 08e0 FFF7FEFF 	 bl atanf
 1661 08e4 0246     	 mov r2,r0
 1662 08e6 324B     	 ldr r3,.L89+112
 1663 08e8 1A60     	 str r2,[r3]
 369:../main.c     **** 		angle_ab = angle_ab_rad/Pi180;
 1664              	 .loc 3 369 0
 1665 08ea 314B     	 ldr r3,.L89+112
 1666 08ec 1B68     	 ldr r3,[r3]
 1667 08ee 1846     	 mov r0,r3
 1668 08f0 FFF7FEFF 	 bl __aeabi_f2d
 1669 08f4 0246     	 mov r2,r0
 1670 08f6 0B46     	 mov r3,r1
 1671 08f8 1046     	 mov r0,r2
 1672 08fa 1946     	 mov r1,r3
 1673 08fc 14A3     	 adr r3,.L89+16
 1674 08fe D3E90023 	 ldrd r2,[r3]
 1675 0902 FFF7FEFF 	 bl __aeabi_ddiv
 1676 0906 0246     	 mov r2,r0
 1677 0908 0B46     	 mov r3,r1
 1678 090a 1046     	 mov r0,r2
 1679 090c 1946     	 mov r1,r3
 1680 090e FFF7FEFF 	 bl __aeabi_d2f
 1681 0912 0246     	 mov r2,r0
 1682 0914 274B     	 ldr r3,.L89+116
 1683 0916 1A60     	 str r2,[r3]
 370:../main.c     **** 
 371:../main.c     **** 		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 1684              	 .loc 3 371 0
 1685 0918 234B     	 ldr r3,.L89+104
 1686 091a D3ED007A 	 flds s15,[r3]
 1687 091e F5EEC07A 	 fcmpezs s15
 1688 0922 F1EE10FA 	 fmstat
 1689 0926 49D5     	 bpl .L84
 1690              	 .loc 3 371 0 is_stmt 0 discriminator 1
 1691 0928 224B     	 ldr r3,.L89+116
 1692 092a D3ED007A 	 flds s15,[r3]
 1693 092e 9FED227A 	 flds s14,.L89+120
 1694 0932 77EE877A 	 fadds s15,s15,s14
 1695 0936 1F4B     	 ldr r3,.L89+116
 1696 0938 C3ED007A 	 fsts s15,[r3]
 1697 093c 50E0     	 b .L64
 1698              	.L90:
 1699 093e 00BF     	 .align 3
 1700              	.L89:
 1701 0940 9A999999 	 .word -1717986918
 1702 0944 9999B93F 	 .word 1069128089
 1703 0948 E17A14AE 	 .word -1374389535
 1704 094c 47E1CA3F 	 .word 1070260551
 1705 0950 4DC90777 	 .word 1996998989
 1706 0954 46DF913F 	 .word 1066524486
 1707 0958 00000000 	 .word omega_mech_rps_ref
 1708 095c 00000000 	 .word omega_mech_rps
 1709 0960 00000000 	 .word omega_param
 1710 0964 00000000 	 .word T_ref_controlled
 1711 0968 00000000 	 .word start_help
 1712 096c 0000F03F 	 .word 1072693248
 1713 0970 00000000 	 .word start_help_count
 1714 0974 00000000 	 .word start_help_flag
 1715 0978 00000000 	 .word T_ref
 1716 097c 00000000 	 .word Speed_control
 1717 0980 00000000 	 .word Torque_control
 1718 0984 00000000 	 .word iq_ref
 1719 0988 0000A0C0 	 .word -1063256064
 1720 098c 0000A040 	 .word 1084227584
 1721 0990 00000000 	 .word id
 1722 0994 00000000 	 .word Id_param
 1723 0998 00000000 	 .word Vd
 1724 099c 00000000 	 .word iq
 1725 09a0 00000000 	 .word Iq_param
 1726 09a4 00000000 	 .word Vq
 1727 09a8 00000000 	 .word Valpha
 1728 09ac 00000000 	 .word Vbeta
 1729 09b0 00000000 	 .word angle_ab_rad
 1730 09b4 00000000 	 .word angle_ab
 1731 09b8 00003443 	 .word 1127481344
 1732              	.L84:
 372:../main.c     **** 		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 1733              	 .loc 3 372 0 is_stmt 1
 1734 09bc 3C4B     	 ldr r3,.L91+8
 1735 09be D3ED007A 	 flds s15,[r3]
 1736 09c2 F5EEC07A 	 fcmpezs s15
 1737 09c6 F1EE10FA 	 fmstat
 1738 09ca 09D5     	 bpl .L64
 1739              	 .loc 3 372 0 is_stmt 0 discriminator 1
 1740 09cc 394B     	 ldr r3,.L91+12
 1741 09ce D3ED007A 	 flds s15,[r3]
 1742 09d2 9FED397A 	 flds s14,.L91+16
 1743 09d6 77EE877A 	 fadds s15,s15,s14
 1744 09da 364B     	 ldr r3,.L91+12
 1745 09dc C3ED007A 	 fsts s15,[r3]
 1746              	.L64:
 373:../main.c     **** 
 374:../main.c     **** 		// shortend to one line
 375:../main.c     **** 		// amplitude calculation
 376:../main.c     **** 		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 1747              	 .loc 3 376 0 is_stmt 1
 1748 09e0 364B     	 ldr r3,.L91+20
 1749 09e2 93ED007A 	 flds s14,[r3]
 1750 09e6 354B     	 ldr r3,.L91+20
 1751 09e8 D3ED007A 	 flds s15,[r3]
 1752 09ec 27EE277A 	 fmuls s14,s14,s15
 1753 09f0 2F4B     	 ldr r3,.L91+8
 1754 09f2 D3ED006A 	 flds s13,[r3]
 1755 09f6 2E4B     	 ldr r3,.L91+8
 1756 09f8 D3ED007A 	 flds s15,[r3]
 1757 09fc 66EEA77A 	 fmuls s15,s13,s15
 1758 0a00 77EE277A 	 fadds s15,s14,s15
 1759 0a04 17EE900A 	 fmrs r0,s15
 1760 0a08 FFF7FEFF 	 bl sqrtf
 1761 0a0c 0246     	 mov r2,r0
 1762 0a0e 2C4B     	 ldr r3,.L91+24
 1763 0a10 1A60     	 str r2,[r3]
 377:../main.c     **** 
 378:../main.c     **** 		//K_inv = V/m --> m = V / K_inv
 379:../main.c     **** 		//modulation_index = amplitude_ab/K_inv;
 380:../main.c     **** 
 381:../main.c     **** 		if(V_DC_link < 0 || V_DC_link > 50) V_DC_link = 14.8;  // plauseblyt check if not set to nom bat 
 1764              	 .loc 3 381 0
 1765 0a12 2C4B     	 ldr r3,.L91+28
 1766 0a14 D3ED007A 	 flds s15,[r3]
 1767 0a18 F5EEC07A 	 fcmpezs s15
 1768 0a1c F1EE10FA 	 fmstat
 1769 0a20 09D4     	 bmi .L66
 1770              	 .loc 3 381 0 is_stmt 0 discriminator 2
 1771 0a22 284B     	 ldr r3,.L91+28
 1772 0a24 D3ED007A 	 flds s15,[r3]
 1773 0a28 9FED277A 	 flds s14,.L91+32
 1774 0a2c F4EEC77A 	 fcmpes s15,s14
 1775 0a30 F1EE10FA 	 fmstat
 1776 0a34 02DD     	 ble .L67
 1777              	.L66:
 1778              	 .loc 3 381 0 discriminator 3
 1779 0a36 234B     	 ldr r3,.L91+28
 1780 0a38 244A     	 ldr r2,.L91+36
 1781 0a3a 1A60     	 str r2,[r3]
 1782              	.L67:
 382:../main.c     **** 		modulation_index = amplitude_ab/(V_DC_link /1.732);
 1783              	 .loc 3 382 0 is_stmt 1
 1784 0a3c 204B     	 ldr r3,.L91+24
 1785 0a3e 1B68     	 ldr r3,[r3]
 1786 0a40 1846     	 mov r0,r3
 1787 0a42 FFF7FEFF 	 bl __aeabi_f2d
 1788 0a46 0446     	 mov r4,r0
 1789 0a48 0D46     	 mov r5,r1
 1790 0a4a 1E4B     	 ldr r3,.L91+28
 1791 0a4c 1B68     	 ldr r3,[r3]
 1792 0a4e 1846     	 mov r0,r3
 1793 0a50 FFF7FEFF 	 bl __aeabi_f2d
 1794 0a54 0246     	 mov r2,r0
 1795 0a56 0B46     	 mov r3,r1
 1796 0a58 1046     	 mov r0,r2
 1797 0a5a 1946     	 mov r1,r3
 1798 0a5c 12A3     	 adr r3,.L91
 1799 0a5e D3E90023 	 ldrd r2,[r3]
 1800 0a62 FFF7FEFF 	 bl __aeabi_ddiv
 1801 0a66 0246     	 mov r2,r0
 1802 0a68 0B46     	 mov r3,r1
 1803 0a6a 2046     	 mov r0,r4
 1804 0a6c 2946     	 mov r1,r5
 1805 0a6e FFF7FEFF 	 bl __aeabi_ddiv
 1806 0a72 0246     	 mov r2,r0
 1807 0a74 0B46     	 mov r3,r1
 1808 0a76 1046     	 mov r0,r2
 1809 0a78 1946     	 mov r1,r3
 1810 0a7a FFF7FEFF 	 bl __aeabi_d2f
 1811 0a7e 0246     	 mov r2,r0
 1812 0a80 134B     	 ldr r3,.L91+40
 1813 0a82 1A60     	 str r2,[r3]
 383:../main.c     **** 
 384:../main.c     **** 		//scale maximum 1 to 10000 -->
 385:../main.c     **** 		modulation_index_scaled = 10000*modulation_index;
 1814              	 .loc 3 385 0
 1815 0a84 124B     	 ldr r3,.L91+40
 1816 0a86 D3ED007A 	 flds s15,[r3]
 1817 0a8a 9FED127A 	 flds s14,.L91+44
 1818 0a8e 67EE877A 	 fmuls s15,s15,s14
 1819 0a92 114B     	 ldr r3,.L91+48
 1820 0a94 C3ED007A 	 fsts s15,[r3]
 386:../main.c     **** 
 387:../main.c     **** 
 388:../main.c     **** 		// shortened ca 4% improvemnt
 389:../main.c     **** 		//modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;
 390:../main.c     **** 
 391:../main.c     **** 		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the ti
 1821              	 .loc 3 391 0
 1822 0a98 1048     	 ldr r0,.L91+52
 1823 0a9a FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 392:../main.c     **** 
 393:../main.c     **** }
 1824              	 .loc 3 393 0
 1825 0a9e 1037     	 adds r7,r7,#16
 1826              	.LCFI43:
 1827              	 .cfi_def_cfa_offset 24
 1828 0aa0 BD46     	 mov sp,r7
 1829              	.LCFI44:
 1830              	 .cfi_def_cfa_register 13
 1831              	 
 1832 0aa2 BDEC028B 	 fldmfdd sp!,{d8}
 1833              	.LCFI45:
 1834              	 .cfi_restore 80
 1835              	 .cfi_restore 81
 1836              	 .cfi_def_cfa_offset 16
 1837 0aa6 B0BD     	 pop {r4,r5,r7,pc}
 1838              	.L92:
 1839              	 .align 3
 1840              	.L91:
 1841 0aa8 83C0CAA1 	 .word -1580547965
 1842 0aac 45B6FB3F 	 .word 1073460805
 1843 0ab0 00000000 	 .word Vbeta
 1844 0ab4 00000000 	 .word angle_ab
 1845 0ab8 0000B443 	 .word 1135869952
 1846 0abc 00000000 	 .word Valpha
 1847 0ac0 00000000 	 .word amplitude_ab
 1848 0ac4 00000000 	 .word V_DC_link
 1849 0ac8 00004842 	 .word 1112014848
 1850 0acc CDCC6C41 	 .word 1097649357
 1851 0ad0 00000000 	 .word modulation_index
 1852 0ad4 00401C46 	 .word 1176256512
 1853 0ad8 00000000 	 .word modulation_index_scaled
 1854 0adc 00000000 	 .word status_LED_red_cal_time
 1855              	 .cfi_endproc
 1856              	.LFE556:
 1858              	 .text
 1859              	.Letext0:
 1860              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1861              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1862              	 .file 6 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1863              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 1864              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_scu.h"
 1865              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 1866              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_ccu8.h"
 1867              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 1868              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm.h"
 1869              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 1870              	 .file 14 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 1871              	 .file 15 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 1872              	 .file 16 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_vadc.h"
 1873              	 .file 17 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_ADC/global_adc.h"
 1874              	 .file 18 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/ADC_MEASUREMENT/adc_measurement.h"
 1875              	 .file 19 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DAVE.h"
 1876              	 .file 20 "../PI_Controller.h"
 1877              	 .file 21 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 1878              	 .file 22 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 1879              	 .file 23 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 1880              	 .file 24 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 1881              	 .file 25 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
 1882              	 .file 26 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/ADC_MEASUREMENT/adc_measurement_extern.h"
 1883              	 .file 27 "../Globals.h"
 1884              	 .file 28 "../Hall_Sensors.h"
 1885              	 .file 29 "../CAN.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:119    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:159    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:163    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:205    .data.Torque_control:00000000 Torque_control
    {standard input}:211    .bss.Speed_control:00000000 Speed_control
    {standard input}:212    .bss.Speed_control:00000000 $d
    {standard input}:217    .bss.CAN_control:00000000 CAN_control
    {standard input}:218    .bss.CAN_control:00000000 $d
                            *COM*:00000004 Current_U
                            *COM*:00000004 Current_V
                            *COM*:00000004 Current_W
    {standard input}:227    .data.time_180deg_cal:00000000 time_180deg_cal
    {standard input}:224    .data.time_180deg_cal:00000000 $d
    {standard input}:234    .data.angle_in_sector:00000000 angle_in_sector
    {standard input}:231    .data.angle_in_sector:00000000 $d
    {standard input}:241    .bss.angle_phi:00000000 angle_phi
    {standard input}:238    .bss.angle_phi:00000000 $d
                            *COM*:00000004 ialpha
                            *COM*:00000004 ibeta
                            *COM*:00000004 iq
                            *COM*:00000004 id
                            *COM*:00000004 Valpha
                            *COM*:00000004 Vbeta
    {standard input}:254    .bss.omega_mech_rps:00000000 omega_mech_rps
    {standard input}:251    .bss.omega_mech_rps:00000000 $d
    {standard input}:261    .bss.omega_mech_rps_temp:00000000 omega_mech_rps_temp
    {standard input}:258    .bss.omega_mech_rps_temp:00000000 $d
    {standard input}:268    .bss.speed_ref:00000000 speed_ref
    {standard input}:265    .bss.speed_ref:00000000 $d
    {standard input}:275    .bss.omega_ele_rads_ref:00000000 omega_ele_rads_ref
    {standard input}:272    .bss.omega_ele_rads_ref:00000000 $d
    {standard input}:282    .bss.iq_ref:00000000 iq_ref
    {standard input}:279    .bss.iq_ref:00000000 $d
    {standard input}:289    .bss.T_ref:00000000 T_ref
    {standard input}:286    .bss.T_ref:00000000 $d
                            *COM*:00000004 T_ref_controlled
    {standard input}:297    .bss.omega_mech_rps_ref:00000000 omega_mech_rps_ref
    {standard input}:294    .bss.omega_mech_rps_ref:00000000 $d
    {standard input}:304    .bss.Vd:00000000 Vd
    {standard input}:301    .bss.Vd:00000000 $d
    {standard input}:311    .bss.Vq:00000000 Vq
    {standard input}:308    .bss.Vq:00000000 $d
                            *COM*:00000004 modulation_index
                            *COM*:00000004 modulation_index_scaled
                            *COM*:00000004 angle_ab
                            *COM*:00000004 angle_ab_rad
                            *COM*:00000004 amplitude_ab
    {standard input}:323    .data.Ts:00000000 Ts
    {standard input}:320    .data.Ts:00000000 $d
    {standard input}:330    .data.Tcyc:00000000 Tcyc
    {standard input}:327    .data.Tcyc:00000000 $d
    {standard input}:337    .data.scaling_factor:00000000 scaling_factor
    {standard input}:334    .data.scaling_factor:00000000 $d
                            *COM*:00000004 amplitude_corrected
    {standard input}:344    .bss.count:00000000 count
    {standard input}:345    .bss.count:00000000 $d
    {standard input}:351    .data.offset_pos:00000000 offset_pos
    {standard input}:348    .data.offset_pos:00000000 $d
    {standard input}:358    .data.offset_neg:00000000 offset_neg
    {standard input}:355    .data.offset_neg:00000000 $d
    {standard input}:364    .bss.Speed_detection_OK:00000000 Speed_detection_OK
    {standard input}:365    .bss.Speed_detection_OK:00000000 $d
    {standard input}:371    .data.setting_cyc:00000000 setting_cyc
    {standard input}:368    .data.setting_cyc:00000000 $d
    {standard input}:378    .data.step_start:00000000 step_start
    {standard input}:375    .data.step_start:00000000 $d
    {standard input}:385    .data.step_to:00000000 step_to
    {standard input}:382    .data.step_to:00000000 $d
    {standard input}:391    .bss.start_help_count:00000000 start_help_count
    {standard input}:392    .bss.start_help_count:00000000 $d
    {standard input}:397    .bss.start_help:00000000 start_help
    {standard input}:398    .bss.start_help:00000000 $d
    {standard input}:403    .bss.start_help_flag:00000000 start_help_flag
    {standard input}:404    .bss.start_help_flag:00000000 $d
    {standard input}:410    .data.ADC_TO_DCLINK:00000000 ADC_TO_DCLINK
    {standard input}:407    .data.ADC_TO_DCLINK:00000000 $d
    {standard input}:418    .text.main:00000000 $t
    {standard input}:423    .text.main:00000000 main
    {standard input}:685    .text.Calculation:00000000 Calculation
    {standard input}:508    .text.main:00000078 $d
    {standard input}:520    .text.VADC0_C0_2_IRQHandler:00000000 $t
    {standard input}:525    .text.VADC0_C0_2_IRQHandler:00000000 VADC0_C0_2_IRQHandler
    {standard input}:559    .text.VADC0_C0_2_IRQHandler:00000018 $d
    {standard input}:564    .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:569    .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:597    .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:602    .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:663    .text.CCU80_3_IRQHandler:00000058 $d
    {standard input}:680    .text.Calculation:00000000 $t
    {standard input}:1040   .text.Calculation:000002dc $d
    {standard input}:1069   .text.Calculation:00000348 $t
    {standard input}:1374   .text.Calculation:00000628 $d
    {standard input}:1406   .text.Calculation:000006a0 $t
    {standard input}:1701   .text.Calculation:00000940 $d
    {standard input}:1734   .text.Calculation:000009bc $t
    {standard input}:1841   .text.Calculation:00000aa8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
DAVE_Init
Hall_init
CAN_NODE_Init
omega_param_selctor
PWM_SVM_Start
f_rec_data
ADC_MEASUREMENT_StartConversion
CAN_NODE_0
PWM_SVM_0
ADC_MEASUREMENT_0
ADC_MEASUREMENT_GetResult
ADC_MEASUREMENT_Channel_A_handle
PWM_SVM_SVMUpdate
__aeabi_f2d
__aeabi_ddiv
__aeabi_ui2d
__aeabi_dmul
__aeabi_d2f
__aeabi_i2d
__aeabi_dadd
__aeabi_dsub
__aeabi_dcmpeq
status_LED_red_cal_time
last_Hall_trig
time_since_A
time_since_B
time_since_C
time_180deg
direction
sector
omega_ele_rads
readCurrent
cosf
sinf
CAN_new_meassage
CAN_speed_ref
CAN_no_com_counter
PI_Controller
copysign
atanf
omega_param
Id_param
Iq_param
sqrtf
V_DC_link
