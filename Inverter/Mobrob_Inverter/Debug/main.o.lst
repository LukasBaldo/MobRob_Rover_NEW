   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB137:
  26              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE137:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB138:
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE138:
 114 0022 00BF     	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_GetInput:
 120              	.LFB140:
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 334 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 139              	 .loc 1 337 0
 140 000c 7B68     	 ldr r3,[r7,#4]
 141 000e 5A6A     	 ldr r2,[r3,#36]
 142 0010 FB78     	 ldrb r3,[r7,#3]
 143 0012 22FA03F3 	 lsr r3,r2,r3
 144 0016 03F00103 	 and r3,r3,#1
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 338 0
 146 001a 1846     	 mov r0,r3
 147 001c 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 001e BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0020 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0024 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE140:
 162 0026 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	DIGITAL_IO_SetOutputHigh:
 168              	.LFB145:
 169              	 .file 2 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 170              	 .loc 2 269 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 80B5     	 push {r7,lr}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 7,-8
 178              	 .cfi_offset 14,-4
 179 0002 82B0     	 sub sp,sp,#8
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 185 0006 7860     	 str r0,[r7,#4]
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 186              	 .loc 2 271 0
 187 0008 7B68     	 ldr r3,[r7,#4]
 188 000a 1A68     	 ldr r2,[r3]
 189 000c 7B68     	 ldr r3,[r7,#4]
 190 000e 1B7C     	 ldrb r3,[r3,#16]
 191 0010 1046     	 mov r0,r2
 192 0012 1946     	 mov r1,r3
 193 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 194              	 .loc 2 272 0
 195 0018 0837     	 adds r7,r7,#8
 196              	.LCFI21:
 197              	 .cfi_def_cfa_offset 8
 198 001a BD46     	 mov sp,r7
 199              	.LCFI22:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 001c 80BD     	 pop {r7,pc}
 203              	 .cfi_endproc
 204              	.LFE145:
 206 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	DIGITAL_IO_SetOutputLow:
 212              	.LFB146:
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 213              	 .loc 2 316 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217 0000 80B5     	 push {r7,lr}
 218              	.LCFI23:
 219              	 .cfi_def_cfa_offset 8
 220              	 .cfi_offset 7,-8
 221              	 .cfi_offset 14,-4
 222 0002 82B0     	 sub sp,sp,#8
 223              	.LCFI24:
 224              	 .cfi_def_cfa_offset 16
 225 0004 00AF     	 add r7,sp,#0
 226              	.LCFI25:
 227              	 .cfi_def_cfa_register 7
 228 0006 7860     	 str r0,[r7,#4]
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 229              	 .loc 2 318 0
 230 0008 7B68     	 ldr r3,[r7,#4]
 231 000a 1A68     	 ldr r2,[r3]
 232 000c 7B68     	 ldr r3,[r7,#4]
 233 000e 1B7C     	 ldrb r3,[r3,#16]
 234 0010 1046     	 mov r0,r2
 235 0012 1946     	 mov r1,r3
 236 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 237              	 .loc 2 319 0
 238 0018 0837     	 adds r7,r7,#8
 239              	.LCFI26:
 240              	 .cfi_def_cfa_offset 8
 241 001a BD46     	 mov sp,r7
 242              	.LCFI27:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 001c 80BD     	 pop {r7,pc}
 246              	 .cfi_endproc
 247              	.LFE146:
 249 001e 00BF     	 .section .text.PIN_INTERRUPT_GetPinValue,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	PIN_INTERRUPT_GetPinValue:
 255              	.LFB308:
 256              	 .file 3 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @file pin_interrupt.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @date 2016-03-02
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * NOTE:
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @cond
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT v4.0.2 - The PIN_INTERRUPT APP invokes user interrupt handler in a response to ris
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                        edge event signal on a pin.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Copyright (c) 2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * All rights reserved.                        
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * following conditions are met:   
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer.                        
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.     
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                         
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   products derived from this software without specific prior written permission. 
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * with Infineon Technologies AG (dave@infineon.com).         
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 2015-12-03:
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     - Initial version for DAVEv4. <BR>
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcond 
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifndef PIN_INTERRUPT_H
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #define PIN_INTERRUPT_H
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * HEADER FILES                                                                                    
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_scu.h>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_gpio.h>
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_eru.h>
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <DAVE_Common.h>
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include "pin_interrupt_conf.h"
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * MACROS                                                                                          
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_MINOR_VERSION >= 1U) && \
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_PATCH_VERSION >= 6U)))
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #error "PIN_INTERRUPT requires XMC Peripheral Library v2.1.6 or higher"
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup App_publicparam
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  @brief Initialization data structure for PIN_INTERRUPT APP
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ENUMS
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /*
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief enumeration for PIN_INTERRUPT APP
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_STATUS
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_SUCCESS = 0U,        /**<APP initialization is success */
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_FAILURE = 1U         /**<APP initialization is failure */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_STATUS_t;
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Defines trigger edge for the event generation by ETLx (Event Trigger Logic, x = [0 to 3]) unit, 
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * from ERSx(Event request source, x = [0 to 3]) unit.
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_EDGE
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_NONE = 0U, /**< no event enabled */
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_RISING = 1U,   /**< detection of rising edge generates the event */
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_FALLING = 2U,  /**< detection of falling edge generates the event */
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_BOTH = 3U      /**< detection of either edges generates the event */
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_EDGE_t;
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * DATA STRUCTURES
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** ***************************************************************************************************
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_datastructures
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Configuration structure for PIN_INTERRUPT APP
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef struct PIN_INTERRUPT
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_t *eru;  /**< Mapped ERU module */
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_PORT_t *port;  /**< Mapped port number */
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_CONFIG_t gpio_config;   /**< Initializes the input pin characteristics */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_ETL_CONFIG_t etl_config;  /**< reference to ERUx_ETLy (x = [0..1], y = [0..4])
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****                                                       module configuration */
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_SCU_IRQCTRL_t irqctrl;  /**< selects the interrupt source for a NVIC interrupt node*/
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   IRQn_Type IRQn;       /**< Mapped NVIC Node */
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_priority; 	  /**< Node Interrupt Priority */
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_FAMILY == XMC4)
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_subpriority;  /**< Node Interrupt SubPriority only valid for XMC4x */
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t etl; /*< ETLx channel (x = [0..3])*/
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t ogu; /*< OGUy channel (y = [0..3])*/
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t pin; /*< Mapped pin number */
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   bool enable_at_init;  /**< Interrupt enable for Node at initialization*/
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_t;
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifdef __cplusplus
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** extern "C" {
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * API Prototypes
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_apidoc
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Get PIN_INTERRUPT APP version
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description: </b><br>
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * The function can be used to check application software compatibility with a
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * specific version of the APP.
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void) {
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t init_status;
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_APP_VERSION_t version;
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // Initialize PIN_INTERRUPT APP:
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // PIN_INTERRUPT_Init() is called from within DAVE_Init().
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   init_status = DAVE_Init();
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if (DAVE_STATUS_SUCCESS == init_status)
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     version = PIN_INTERRUPT_GetAppVersion();
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     if (version.major != 4U) {
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *       // Probably, not the right version.
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     // More code here
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** DAVE_APP_VERSION_t PIN_INTERRUPT_GetAppVersion(void);
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Initializes a PIN_INTERRUPT APP instance
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_SUCCESS             : if initialization is successful\n
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_FAILURE             : if initialization is failed
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description:</b><br>
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT_Init API is called during initialization of DAVE APPS. This API Initializes input 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ERU and OGU hardware module initialization, Configures NVIC node and its priority in order to ge
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void)
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * {
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t status;
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle);
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Enables the IRQ.
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_EnableIRQ(handle->IRQn);
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Disables the IRQ.
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Disable(&PIN_INTERRUPT_0);
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Disable(const PIN_INTERRUPT_t *const handle)
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Disable: Handler null pointer", handle != NULL);
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_DisableIRQ(handle->IRQn);
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @brief Read input level of port pin.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @return uint32_t input logic level. Range:0-1
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * \par<b>Description:</b><br>
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * This function reads the Pn_IN register and returns the current logical value at the GPIO pin.
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * Example Usage:
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @code
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * int main(void)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * {
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   DAVE_STATUS_t status;
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   uint32_t pin_status;
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   status = DAVE_Init();   // (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0) is called within
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   if(status == DAVE_STATUS_SUCCESS)
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   else
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     while(1U)
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   while(1U)
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     pin_status = PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_0);
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     if(pin_status == 1)
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 339:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     else
 340:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 341:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 342:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 343:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 344:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   return (1);
 345:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * }
 346:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *  @endcode
 347:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** */
 348:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
 349:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 257              	 .loc 3 349 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI28:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI29:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI30:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
 350:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
 351:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   return (XMC_GPIO_GetInput(handle->port, handle->pin));
 273              	 .loc 3 351 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 5A68     	 ldr r2,[r3,#4]
 276 000c 7B68     	 ldr r3,[r7,#4]
 277 000e 93F82130 	 ldrb r3,[r3,#33]
 278 0012 1046     	 mov r0,r2
 279 0014 1946     	 mov r1,r3
 280 0016 FFF7FEFF 	 bl XMC_GPIO_GetInput
 281 001a 0346     	 mov r3,r0
 352:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 282              	 .loc 3 352 0
 283 001c 1846     	 mov r0,r3
 284 001e 0837     	 adds r7,r7,#8
 285              	.LCFI31:
 286              	 .cfi_def_cfa_offset 8
 287 0020 BD46     	 mov sp,r7
 288              	.LCFI32:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 0022 80BD     	 pop {r7,pc}
 292              	 .cfi_endproc
 293              	.LFE308:
 295              	 .global Speed_control
 296              	 .section .data.Speed_control,"aw",%progbits
 299              	Speed_control:
 300 0000 01       	 .byte 1
 301              	 .global CAN_control
 302              	 .section .data.CAN_control,"aw",%progbits
 305              	CAN_control:
 306 0000 01       	 .byte 1
 307              	 .comm Current_U,4,4
 308              	 .comm Current_V,4,4
 309              	 .comm Current_W,4,4
 310              	 .global lookup_table
 311              	 .section .data.lookup_table,"aw",%progbits
 312              	 .align 2
 315              	lookup_table:
 316 0000 00       	 .byte 0
 317 0001 00       	 .byte 0
 318 0002 00       	 .byte 0
 319 0003 00       	 .byte 0
 320 0004 00       	 .byte 0
 321 0005 00       	 .byte 0
 322 0006 00       	 .byte 0
 323 0007 00       	 .byte 0
 324 0008 00       	 .byte 0
 325 0009 00       	 .byte 0
 326 000a 00       	 .byte 0
 327 000b FF       	 .byte -1
 328 000c 00       	 .byte 0
 329 000d 01       	 .byte 1
 330 000e 00       	 .byte 0
 331 000f 00       	 .byte 0
 332 0010 00       	 .byte 0
 333 0011 00       	 .byte 0
 334 0012 00       	 .byte 0
 335 0013 01       	 .byte 1
 336 0014 00       	 .byte 0
 337 0015 00       	 .byte 0
 338 0016 FF       	 .byte -1
 339 0017 00       	 .byte 0
 340 0018 00       	 .byte 0
 341 0019 01       	 .byte 1
 342 001a FF       	 .byte -1
 343 001b 00       	 .byte 0
 344 001c 00       	 .byte 0
 345 001d 00       	 .byte 0
 346 001e 00       	 .byte 0
 347 001f 00       	 .byte 0
 348 0020 00       	 .byte 0
 349 0021 00       	 .byte 0
 350 0022 00       	 .byte 0
 351 0023 00       	 .byte 0
 352 0024 00       	 .byte 0
 353 0025 FF       	 .byte -1
 354 0026 01       	 .byte 1
 355 0027 00       	 .byte 0
 356 0028 00       	 .byte 0
 357 0029 FF       	 .byte -1
 358 002a 00       	 .byte 0
 359 002b 00       	 .byte 0
 360 002c 01       	 .byte 1
 361 002d 00       	 .byte 0
 362 002e 00       	 .byte 0
 363 002f 00       	 .byte 0
 364 0030 00       	 .byte 0
 365 0031 00       	 .byte 0
 366 0032 01       	 .byte 1
 367 0033 00       	 .byte 0
 368 0034 FF       	 .byte -1
 369 0035 00       	 .byte 0
 370 0036 00       	 .byte 0
 371 0037 00       	 .byte 0
 372 0038 00       	 .byte 0
 373 0039 00       	 .byte 0
 374 003a 00       	 .byte 0
 375 003b 00       	 .byte 0
 376 003c 00       	 .byte 0
 377 003d 00       	 .byte 0
 378 003e 00       	 .byte 0
 379 003f 00       	 .byte 0
 380              	 .global sector
 381              	 .section .bss.sector,"aw",%nobits
 384              	sector:
 385 0000 00       	 .space 1
 386              	 .global direction
 387              	 .section .bss.direction,"aw",%nobits
 390              	direction:
 391 0000 00       	 .space 1
 392              	 .global enc_val
 393              	 .section .bss.enc_val,"aw",%nobits
 394              	 .align 1
 397              	enc_val:
 398 0000 0000     	 .space 2
 399              	 .global time_since_A
 400              	 .section .bss.time_since_A,"aw",%nobits
 401              	 .align 2
 404              	time_since_A:
 405 0000 00000000 	 .space 4
 406              	 .global time_since_B
 407              	 .section .bss.time_since_B,"aw",%nobits
 408              	 .align 2
 411              	time_since_B:
 412 0000 00000000 	 .space 4
 413              	 .global time_since_C
 414              	 .section .bss.time_since_C,"aw",%nobits
 415              	 .align 2
 418              	time_since_C:
 419 0000 00000000 	 .space 4
 420              	 .global time_180deg
 421              	 .section .data.time_180deg,"aw",%progbits
 422              	 .align 2
 425              	time_180deg:
 426 0000 E8030000 	 .word 1000
 427              	 .global time_180deg_cal
 428              	 .section .data.time_180deg_cal,"aw",%progbits
 429              	 .align 2
 432              	time_180deg_cal:
 433 0000 E8030000 	 .word 1000
 434              	 .comm last_Hall_trig,1,1
 435              	 .global angle_in_sector
 436              	 .section .data.angle_in_sector,"aw",%progbits
 437              	 .align 2
 440              	angle_in_sector:
 441 0000 0000F041 	 .word 1106247680
 442              	 .global angle_phi
 443              	 .section .bss.angle_phi,"aw",%nobits
 444              	 .align 2
 447              	angle_phi:
 448 0000 00000000 	 .space 4
 449              	 .comm ialpha,4,4
 450              	 .comm ibeta,4,4
 451              	 .comm iq,4,4
 452              	 .comm id,4,4
 453              	 .comm Valpha,4,4
 454              	 .comm Vbeta,4,4
 455              	 .global omega_ele_rads
 456              	 .section .bss.omega_ele_rads,"aw",%nobits
 457              	 .align 2
 460              	omega_ele_rads:
 461 0000 00000000 	 .space 4
 462              	 .global omega_mech_rps
 463              	 .section .bss.omega_mech_rps,"aw",%nobits
 464              	 .align 2
 467              	omega_mech_rps:
 468 0000 00000000 	 .space 4
 469              	 .global omega_mech_rps_temp
 470              	 .section .bss.omega_mech_rps_temp,"aw",%nobits
 471              	 .align 2
 474              	omega_mech_rps_temp:
 475 0000 00000000 	 .space 4
 476              	 .global omega_ele_degs
 477              	 .section .bss.omega_ele_degs,"aw",%nobits
 478              	 .align 2
 481              	omega_ele_degs:
 482 0000 00000000 	 .space 4
 483              	 .global speed_ref
 484              	 .section .bss.speed_ref,"aw",%nobits
 485              	 .align 2
 488              	speed_ref:
 489 0000 00000000 	 .space 4
 490              	 .global omega_ele_rads_ref
 491              	 .section .bss.omega_ele_rads_ref,"aw",%nobits
 492              	 .align 2
 495              	omega_ele_rads_ref:
 496 0000 00000000 	 .space 4
 497              	 .global iq_ref
 498              	 .section .bss.iq_ref,"aw",%nobits
 499              	 .align 2
 502              	iq_ref:
 503 0000 00000000 	 .space 4
 504              	 .global T_ref
 505              	 .section .bss.T_ref,"aw",%nobits
 506              	 .align 2
 509              	T_ref:
 510 0000 00000000 	 .space 4
 511              	 .global Vd_ref
 512              	 .section .bss.Vd_ref,"aw",%nobits
 513              	 .align 2
 516              	Vd_ref:
 517 0000 00000000 	 .space 4
 518              	 .global Vq_ref
 519              	 .section .bss.Vq_ref,"aw",%nobits
 520              	 .align 2
 523              	Vq_ref:
 524 0000 00000000 	 .space 4
 525              	 .comm Speeds_int16_r,8,4
 526              	 .global CAN_speed_ref
 527              	 .section .bss.CAN_speed_ref,"aw",%nobits
 528              	 .align 2
 531              	CAN_speed_ref:
 532 0000 00000000 	 .space 4
 533              	 .global CAN_new_meassage
 534              	 .section .bss.CAN_new_meassage,"aw",%nobits
 537              	CAN_new_meassage:
 538 0000 00       	 .space 1
 539              	 .global CAN_no_com_counter
 540              	 .section .bss.CAN_no_com_counter,"aw",%nobits
 543              	CAN_no_com_counter:
 544 0000 00       	 .space 1
 545              	 .global distance_180deg_ele_count
 546              	 .section .bss.distance_180deg_ele_count,"aw",%nobits
 547              	 .align 2
 550              	distance_180deg_ele_count:
 551 0000 00000000 	 .space 4
 552              	 .global Speed_act
 553              	 .section .bss.Speed_act,"aw",%nobits
 554              	 .align 2
 557              	Speed_act:
 558 0000 00000000 	 .space 4
 559              	 .global distance
 560              	 .section .bss.distance,"aw",%nobits
 561              	 .align 2
 564              	distance:
 565 0000 00000000 	 .space 4
 566              	 .comm modulation_index,4,4
 567              	 .comm modulation_index_scaled,4,4
 568              	 .comm angle_ab,4,4
 569              	 .comm angle_ab_rad,4,4
 570              	 .comm amplitude_ab,4,4
 571              	 .global Ts
 572              	 .section .data.Ts,"aw",%progbits
 573              	 .align 2
 576              	Ts:
 577 0000 17B75138 	 .word 944879383
 578              	 .global Tcyc
 579              	 .section .data.Tcyc,"aw",%progbits
 580              	 .align 2
 583              	Tcyc:
 584 0000 17B75139 	 .word 961656599
 585              	 .global scaling_factor
 586              	 .section .data.scaling_factor,"aw",%progbits
 587              	 .align 2
 590              	scaling_factor:
 591 0000 00000743 	 .word 1124532224
 592              	 .comm amplitude_corrected,4,4
 593              	 .global count
 594              	 .section .bss.count,"aw",%nobits
 597              	count:
 598 0000 00       	 .space 1
 599              	 .global offset_pos
 600              	 .section .data.offset_pos,"aw",%progbits
 601              	 .align 2
 604              	offset_pos:
 605 0000 0000D8C1 	 .word -1042808832
 606              	 .global offset_neg
 607              	 .section .data.offset_neg,"aw",%progbits
 608              	 .align 2
 611              	offset_neg:
 612 0000 0000A0C1 	 .word -1046478848
 613              	 .global Iq_param
 614              	 .section .data.Iq_param,"aw",%progbits
 615              	 .align 2
 618              	Iq_param:
 619 0000 CDCC4C3D 	 .word 1028443341
 620 0004 0000C841 	 .word 1103626240
 621 0008 00000000 	 .word 0
 622 000c 0000C842 	 .word 1120403456
 623 0010 0000C8C2 	 .word -1027080192
 624 0014 00000000 	 .word 0
 625 0018 00000000 	 .word 0
 626 001c 00000000 	 .word 0
 627 0020 00000000 	 .space 4
 628              	 .global Id_param
 629              	 .section .data.Id_param,"aw",%progbits
 630              	 .align 2
 633              	Id_param:
 634 0000 CDCC4C3D 	 .word 1028443341
 635 0004 0000C841 	 .word 1103626240
 636 0008 00000000 	 .word 0
 637 000c 0000C842 	 .word 1120403456
 638 0010 0000C8C2 	 .word -1027080192
 639 0014 00000000 	 .word 0
 640 0018 00000000 	 .word 0
 641 001c 00000000 	 .word 0
 642 0020 00000000 	 .space 4
 643              	 .global T_param
 644              	 .section .data.T_param,"aw",%progbits
 645              	 .align 2
 648              	T_param:
 649 0000 0AD7233C 	 .word 1008981770
 650 0004 0AD7233C 	 .word 1008981770
 651 0008 00000000 	 .word 0
 652 000c 00000040 	 .word 1073741824
 653 0010 000000C0 	 .word -1073741824
 654 0014 00000000 	 .word 0
 655 0018 00000000 	 .word 0
 656 001c 00000000 	 .word 0
 657 0020 00000000 	 .space 4
 658              	 .global T_param_1
 659              	 .section .data.T_param_1,"aw",%progbits
 660              	 .align 2
 663              	T_param_1:
 664 0000 0AD7A33B 	 .word 1000593162
 665 0004 0AD7233C 	 .word 1008981770
 666 0008 00000000 	 .word 0
 667 000c 0000C03F 	 .word 1069547520
 668 0010 0000C0BF 	 .word -1077936128
 669 0014 00000000 	 .word 0
 670 0018 00000000 	 .word 0
 671 001c 00000000 	 .word 0
 672 0020 00000000 	 .space 4
 673              	 .section .text.main,"ax",%progbits
 674              	 .align 2
 675              	 .global main
 676              	 .thumb
 677              	 .thumb_func
 679              	main:
 680              	.LFB473:
 681              	 .file 4 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2020 Jan 02 10:21:43
   5:../main.c     ****  *  Author: Baldo
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** // status: 11.05.2022
   9:../main.c     **** 
  10:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  11:../main.c     **** #include <math.h>
  12:../main.c     **** #include <stdio.h> //for printf
  13:../main.c     **** 
  14:../main.c     **** //#######################
  15:../main.c     **** //FUNCTION DECLARATION
  16:../main.c     **** //########################
  17:../main.c     **** float readCurrent(uint8_t);
  18:../main.c     **** void Hall_init(void);
  19:../main.c     **** void HallSensor(void);
  20:../main.c     **** void Calculation(void);
  21:../main.c     **** 
  22:../main.c     **** //########################
  23:../main.c     **** //VARIABLE DECLARATION
  24:../main.c     **** //########################
  25:../main.c     **** 
  26:../main.c     **** // NEED to be set
  27:../main.c     **** //motor
  28:../main.c     **** #define MOTOR_NUM 6 // for trque dirction motro 1 differtn form rest so far
  29:../main.c     **** #define MOTOR_ON_ROVER 1// 0 front left 1 front right 2 back left 3 back right
  30:../main.c     **** 
  31:../main.c     **** //control type
  32:../main.c     **** uint8_t Speed_control = 1; //if 0 is torque control if 1 is speed control
  33:../main.c     **** uint8_t CAN_control = 1; // id 1 CAN speed controll aktive
  34:../main.c     **** 
  35:../main.c     **** #define IQ_REF_MAX 5
  36:../main.c     **** #define CAN_NO_COM_TH 250
  37:../main.c     **** #define MAX_Speed_CAN 2
  38:../main.c     **** #define SPEED_LIMIT_CTRL_TO_ZERO 100 //omega_ele rad/s
  39:../main.c     **** #define TIME_OMEGA_0  5000 //time since last hall before omgea set to 0 in 100us
  40:../main.c     **** 
  41:../main.c     **** // Define often used vaules to decrease computational effort
  42:../main.c     **** #define PI 3.14159265
  43:../main.c     **** #define TwoThird 0.66666667
  44:../main.c     **** #define TwoPiThird 2.0943951
  45:../main.c     **** #define FourPiThird 4.1887902
  46:../main.c     **** #define Pi180 0.01745329
  47:../main.c     **** 
  48:../main.c     **** #define ANGLE_ONE_DEGREE (46603U)
  49:../main.c     **** //#define ANGLE_60_DEGREE	 (2796203U)
  50:../main.c     **** //#define ANGLE_180_DEGREE (8388608U)
  51:../main.c     **** 
  52:../main.c     **** //#define ANGLE_LSB (9455) // 2^24 corresponds to 360°. For a timer interrupt delta time of 100us 
  53:../main.c     **** 
  54:../main.c     **** // Define Chip select Pins for Current measurement via SPI Interface
  55:../main.c     **** #define ChipSelect_U 0b110
  56:../main.c     **** #define ChipSelect_V 0b101
  57:../main.c     **** #define ChipSelect_W 0b011
  58:../main.c     **** #define J 0.0023064 //SK J = 1/2 * m_wheel * r_wheel^2 = 1/2*1.2kg*(62mm)^2
  59:../main.c     **** #define K_T 0.21 //SK torque constant in Nm/A
  60:../main.c     **** #define K_inv 30/1.732 // K_inv = V / m = V_DC / 2 * 2/sqrt(3) = V_DC/sqrt(3)
  61:../main.c     **** //#define Psi_p 0.0082  60/  (2 * PI) * 1.4142 // Psi_p = K_back_EMF = 0.0082 V / rpm_mech --> 60 t
  62:../main.c     **** //#define Ls 0.00088 // Ls = Lm*1.1 = 0.8mH * 1.1 = 0.00088H
  63:../main.c     **** #define PPZ 11
  64:../main.c     **** #define WHEEL_R 0.0675 //0.135/2 straigt vaule other thing casued problems
  65:../main.c     **** 
  66:../main.c     **** float Current_U;
  67:../main.c     **** float Current_V;
  68:../main.c     **** float Current_W;
  69:../main.c     **** 
  70:../main.c     **** // Declaration of Lookup Table
  71:../main.c     **** int8_t lookup_table[] = {0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,-1,0,0,1,-1,0,0,0,0,0,0,0,0,0
  72:../main.c     **** //access via the index in the  form of the 6 bits (3 previous hall states and 3 actual  hall states
  73:../main.c     **** //for each of the 2^6 possibilities of sequence of hall events  it has been thought about the wavef
  74:../main.c     **** 
  75:../main.c     **** volatile int8_t sector = 0;
  76:../main.c     **** volatile int8_t direction = 0;              // direction +1/-1 -> CW and CCW
  77:../main.c     **** volatile uint16_t enc_val = 0;          // old and new values of all Hall Sensors
  78:../main.c     **** volatile uint32_t time_since_A = 0;	// time between to edges Hall A
  79:../main.c     **** volatile uint32_t time_since_B = 0; // time between to edges Hall B
  80:../main.c     **** volatile uint32_t time_since_C = 0; // time between to edges Hall C
  81:../main.c     **** volatile uint32_t time_180deg = 1000;        // time which last triggered HAL sensor needed for 180
  82:../main.c     **** volatile uint32_t time_180deg_cal = 1000;
  83:../main.c     **** volatile char last_Hall_trig;			//last triggered Hall Sensor A/B/C
  84:../main.c     **** 
  85:../main.c     **** float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60°
  86:../main.c     **** //volatile uint32_t TIME_OMEGA_0 = 50000; // t over this therschold assumed to be zero
  87:../main.c     **** 
  88:../main.c     **** float angle_phi = 0;
  89:../main.c     **** float ialpha,ibeta,iq,id,Valpha,Vbeta;
  90:../main.c     **** 
  91:../main.c     **** volatile float omega_ele_rads = 0; 	// electrical rad / sec //current real velocity calculated from
  92:../main.c     **** volatile float omega_mech_rps = 0;	//SK	//mechanical rounds per second
  93:../main.c     **** volatile float omega_mech_rps_temp = 0; //SK	//since dividing through the incremental (counted up) 
  94:../main.c     **** //volatile float omega_ele_rads_ref = -2*69.11; //1*69.11; //SK		//target velocity electrical in ra
  95:../main.c     **** 
  96:../main.c     **** volatile float omega_ele_degs = 0;
  97:../main.c     **** 
  98:../main.c     **** // REF vaules given to PI controller
  99:../main.c     **** float speed_ref = 0.0; //meters per second
 100:../main.c     **** float omega_ele_rads_ref = 0.0; // electrical rad per second
 101:../main.c     **** float iq_ref = 0.0;
 102:../main.c     **** float T_ref = 0.0;
 103:../main.c     **** float Vd_ref = 0;
 104:../main.c     **** float Vq_ref = 0;
 105:../main.c     **** 
 106:../main.c     **** // CAN vars
 107:../main.c     **** int16_t Speeds_int16_r[4];
 108:../main.c     **** float CAN_speed_ref = 0.0;
 109:../main.c     **** uint8_t CAN_new_meassage = 0; // if 1 recived can data
 110:../main.c     **** uint8_t CAN_no_com_counter = 0;
 111:../main.c     **** // distacne vaule back over can
 112:../main.c     **** int distance_180deg_ele_count = 0;
 113:../main.c     **** float Speed_act = 0;
 114:../main.c     **** float distance = 0;
 115:../main.c     **** 
 116:../main.c     **** volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
 117:../main.c     **** volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which 
 118:../main.c     **** 
 119:../main.c     **** float angle_ab;
 120:../main.c     **** float angle_ab_rad;
 121:../main.c     **** float amplitude_ab;
 122:../main.c     **** 
 123:../main.c     **** float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
 124:../main.c     **** float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I
 125:../main.c     **** 
 126:../main.c     **** //float amp_limit_SVM_app = 2500;  Bo
 127:../main.c     **** 
 128:../main.c     **** // scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
 129:../main.c     **** float scaling_factor = 135;
 130:../main.c     **** float amplitude_corrected;
 131:../main.c     **** 
 132:../main.c     **** 
 133:../main.c     **** // Counter for calculation function -> only use a multiple of the SVM Interrupt
 134:../main.c     **** volatile uint8_t count = 0;
 135:../main.c     **** 
 136:../main.c     **** // Angle correction factor to align Current to Hall Sensor vuales form 14/04
 137:../main.c     **** float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
 138:../main.c     **** float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction
 139:../main.c     **** 
 140:../main.c     **** //################ PI
 141:../main.c     **** // PID Controller declaration for Id and Iq component
 142:../main.c     **** typedef struct{
 143:../main.c     **** 	float P,I,D;
 144:../main.c     **** 	float MaxLimit, MinLimit;
 145:../main.c     **** 	float Output;
 146:../main.c     **** 	float Deviation_old, Deviation_old2;
 147:../main.c     **** 	float Output_z;
 148:../main.c     **** }PID_param;
 149:../main.c     **** 
 150:../main.c     **** //Vuales 14/04 mit maurzio
 151:../main.c     **** //PID_param omegaq = {.P = 0.004, .I = 0.004, .D = 0.0, .MaxLimit =  0.5, .MinLimit = -0.5, .Output
 152:../main.c     **** PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output =
 153:../main.c     **** PID_param Id_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output =
 154:../main.c     **** PID_param T_param = {.P = 0.01, .I = 0.01, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Output = 0.0,
 155:../main.c     **** 
 156:../main.c     **** // for motro 1
 157:../main.c     **** PID_param T_param_1 = {.P = 0.005, .I = 0.01, .D = 0.0, .MaxLimit =  1.5, .MinLimit = -1.5, .Output
 158:../main.c     **** 
 159:../main.c     **** float PID_Controller(float,float,PID_param *param);
 160:../main.c     **** 
 161:../main.c     **** 
 162:../main.c     **** //########################
 163:../main.c     **** // MAIN
 164:../main.c     **** //########################
 165:../main.c     **** 
 166:../main.c     **** int main(void)
 167:../main.c     **** {
 682              	 .loc 4 167 0
 683              	 .cfi_startproc
 684              	 
 685              	 
 686 0000 80B5     	 push {r7,lr}
 687              	.LCFI33:
 688              	 .cfi_def_cfa_offset 8
 689              	 .cfi_offset 7,-8
 690              	 .cfi_offset 14,-4
 691 0002 82B0     	 sub sp,sp,#8
 692              	.LCFI34:
 693              	 .cfi_def_cfa_offset 16
 694 0004 00AF     	 add r7,sp,#0
 695              	.LCFI35:
 696              	 .cfi_def_cfa_register 7
 168:../main.c     ****   DAVE_STATUS_t status;
 169:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 697              	 .loc 4 169 0
 698 0006 FFF7FEFF 	 bl DAVE_Init
 699 000a 0346     	 mov r3,r0
 700 000c FB71     	 strb r3,[r7,#7]
 170:../main.c     **** 
 171:../main.c     ****   Hall_init();
 701              	 .loc 4 171 0
 702 000e FFF7FEFF 	 bl Hall_init
 172:../main.c     **** 
 173:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 703              	 .loc 4 173 0
 704 0012 FB79     	 ldrb r3,[r7,#7]
 705 0014 002B     	 cmp r3,#0
 706 0016 00D0     	 beq .L10
 707              	.L11:
 174:../main.c     ****   {
 175:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 176:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 177:../main.c     **** 
 178:../main.c     ****     while(1U)
 179:../main.c     ****     {
 180:../main.c     **** 
 181:../main.c     ****     }
 708              	 .loc 4 181 0 discriminator 1
 709 0018 FEE7     	 b .L11
 710              	.L10:
 182:../main.c     ****   }
 183:../main.c     **** 
 184:../main.c     ****   //Initialization of CAN
 185:../main.c     ****   	CAN_NODE_STATUS_t init_status;
 186:../main.c     ****   	init_status = CAN_NODE_Init(&CAN_NODE_0);
 711              	 .loc 4 186 0
 712 001a 0948     	 ldr r0,.L14
 713 001c FFF7FEFF 	 bl CAN_NODE_Init
 714 0020 0346     	 mov r3,r0
 715 0022 BB71     	 strb r3,[r7,#6]
 187:../main.c     **** 
 188:../main.c     ****   	if (init_status != CAN_NODE_STATUS_SUCCESS) {
 189:../main.c     ****   		XMC_DEBUG("CAN initialization failed\n");
 190:../main.c     ****   	}
 191:../main.c     **** 
 192:../main.c     ****   if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
 193:../main.c     **** 	  while(1U)
 194:../main.c     **** 	      {
 195:../main.c     **** 		//  printf("MOTOR_ON_ROVER number false");
 196:../main.c     **** 	      }
 197:../main.c     ****   }
 198:../main.c     **** 
 199:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 200:../main.c     ****   while(1U)
 201:../main.c     ****   {
 202:../main.c     **** 	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 716              	 .loc 4 202 0
 717 0024 0748     	 ldr r0,.L14+4
 718 0026 FFF7FEFF 	 bl PWM_SVM_Start
 719              	.L13:
 203:../main.c     **** 
 204:../main.c     **** 		  while(1U)
 205:../main.c     **** 		    {
 206:../main.c     **** 
 207:../main.c     **** 			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 720              	 .loc 4 207 0
 721 002a 074B     	 ldr r3,.L14+8
 722 002c 1B78     	 ldrb r3,[r3]
 723 002e DBB2     	 uxtb r3,r3
 724 0030 032B     	 cmp r3,#3
 725 0032 04D9     	 bls .L12
 208:../main.c     **** 			  {
 209:../main.c     **** 				  count=0;
 726              	 .loc 4 209 0
 727 0034 044B     	 ldr r3,.L14+8
 728 0036 0022     	 movs r2,#0
 729 0038 1A70     	 strb r2,[r3]
 210:../main.c     **** 				  Calculation();
 730              	 .loc 4 210 0
 731 003a FFF7FEFF 	 bl Calculation
 732              	.L12:
 211:../main.c     **** 			  }
 212:../main.c     **** 		    }
 733              	 .loc 4 212 0
 734 003e F4E7     	 b .L13
 735              	.L15:
 736              	 .align 2
 737              	.L14:
 738 0040 00000000 	 .word CAN_NODE_0
 739 0044 00000000 	 .word PWM_SVM_0
 740 0048 00000000 	 .word count
 741              	 .cfi_endproc
 742              	.LFE473:
 744              	 .section .text.CAN0_1_IRQHandler,"ax",%progbits
 745              	 .align 2
 746              	 .global CAN0_1_IRQHandler
 747              	 .thumb
 748              	 .thumb_func
 750              	CAN0_1_IRQHandler:
 751              	.LFB474:
 213:../main.c     ****   }
 214:../main.c     **** }
 215:../main.c     **** 
 216:../main.c     **** 
 217:../main.c     **** //########################
 218:../main.c     **** // INTERRUPTS
 219:../main.c     **** //########################
 220:../main.c     **** 
 221:../main.c     **** // CAN Communication
 222:../main.c     **** void CAN_RX_MO2_ISR(void){
 752              	 .loc 4 222 0
 753              	 .cfi_startproc
 754              	 
 755              	 
 756 0000 80B5     	 push {r7,lr}
 757              	.LCFI36:
 758              	 .cfi_def_cfa_offset 8
 759              	 .cfi_offset 7,-8
 760              	 .cfi_offset 14,-4
 761 0002 84B0     	 sub sp,sp,#16
 762              	.LCFI37:
 763              	 .cfi_def_cfa_offset 24
 764 0004 00AF     	 add r7,sp,#0
 765              	.LCFI38:
 766              	 .cfi_def_cfa_register 7
 223:../main.c     **** 		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
 767              	 .loc 4 223 0
 768 0006 3C4B     	 ldr r3,.L27
 769 0008 1B69     	 ldr r3,[r3,#16]
 770 000a 1B68     	 ldr r3,[r3]
 771 000c BB60     	 str r3,[r7,#8]
 224:../main.c     **** 		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
 772              	 .loc 4 224 0
 773 000e 3A4B     	 ldr r3,.L27
 774 0010 1B69     	 ldr r3,[r3,#16]
 775 0012 1846     	 mov r0,r3
 776 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 225:../main.c     **** 
 226:../main.c     **** 		uint8_t data_r[8];
 227:../main.c     **** 		 int i;
 228:../main.c     **** 		 for(i = 0 ; i < 8 ; i ++){
 777              	 .loc 4 228 0
 778 0018 0023     	 movs r3,#0
 779 001a FB60     	 str r3,[r7,#12]
 780 001c 0CE0     	 b .L17
 781              	.L18:
 229:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 782              	 .loc 4 229 0 discriminator 3
 783 001e BA68     	 ldr r2,[r7,#8]
 784 0020 FB68     	 ldr r3,[r7,#12]
 785 0022 1344     	 add r3,r3,r2
 786 0024 1033     	 adds r3,r3,#16
 787 0026 1978     	 ldrb r1,[r3]
 788 0028 3A46     	 mov r2,r7
 789 002a FB68     	 ldr r3,[r7,#12]
 790 002c 1344     	 add r3,r3,r2
 791 002e 0A46     	 mov r2,r1
 792 0030 1A70     	 strb r2,[r3]
 228:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 793              	 .loc 4 228 0 discriminator 3
 794 0032 FB68     	 ldr r3,[r7,#12]
 795 0034 0133     	 adds r3,r3,#1
 796 0036 FB60     	 str r3,[r7,#12]
 797              	.L17:
 228:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 798              	 .loc 4 228 0 is_stmt 0 discriminator 1
 799 0038 FB68     	 ldr r3,[r7,#12]
 800 003a 072B     	 cmp r3,#7
 801 003c EFDD     	 ble .L18
 230:../main.c     **** 		 }
 231:../main.c     **** 
 232:../main.c     **** 		 for(i = 0 ; i < 4 ; i ++){
 802              	 .loc 4 232 0 is_stmt 1
 803 003e 0023     	 movs r3,#0
 804 0040 FB60     	 str r3,[r7,#12]
 805 0042 1AE0     	 b .L19
 806              	.L20:
 233:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 807              	 .loc 4 233 0 discriminator 3
 808 0044 FB68     	 ldr r3,[r7,#12]
 809 0046 5B00     	 lsls r3,r3,#1
 810 0048 0133     	 adds r3,r3,#1
 811 004a 07F11002 	 add r2,r7,#16
 812 004e 1344     	 add r3,r3,r2
 813 0050 13F8103C 	 ldrb r3,[r3,#-16]
 814 0054 1B02     	 lsls r3,r3,#8
 815 0056 9AB2     	 uxth r2,r3
 816 0058 FB68     	 ldr r3,[r7,#12]
 817 005a 5B00     	 lsls r3,r3,#1
 818 005c 07F11001 	 add r1,r7,#16
 819 0060 0B44     	 add r3,r3,r1
 820 0062 13F8103C 	 ldrb r3,[r3,#-16]
 821 0066 9BB2     	 uxth r3,r3
 822 0068 1343     	 orrs r3,r3,r2
 823 006a 99B2     	 uxth r1,r3
 824 006c 234A     	 ldr r2,.L27+4
 825 006e FB68     	 ldr r3,[r7,#12]
 826 0070 22F81310 	 strh r1,[r2,r3,lsl#1]
 232:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 827              	 .loc 4 232 0 discriminator 3
 828 0074 FB68     	 ldr r3,[r7,#12]
 829 0076 0133     	 adds r3,r3,#1
 830 0078 FB60     	 str r3,[r7,#12]
 831              	.L19:
 232:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 832              	 .loc 4 232 0 is_stmt 0 discriminator 1
 833 007a FB68     	 ldr r3,[r7,#12]
 834 007c 032B     	 cmp r3,#3
 835 007e E1DD     	 ble .L20
 234:../main.c     **** 			 }
 235:../main.c     **** 
 236:../main.c     **** 		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 836              	 .loc 4 236 0 is_stmt 1
 837 0080 1E4B     	 ldr r3,.L27+4
 838 0082 5B88     	 ldrh r3,[r3,#2]
 839 0084 1BB2     	 sxth r3,r3
 840 0086 07EE903A 	 fmsr s15,r3
 841 008a F8EEE77A 	 fsitos s15,s15
 842 008e 9FED1C7A 	 flds s14,.L27+8
 843 0092 C7EE877A 	 fdivs s15,s15,s14
 844 0096 1B4B     	 ldr r3,.L27+12
 845 0098 C3ED007A 	 fsts s15,[r3]
 237:../main.c     **** 
 238:../main.c     **** 		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6
 846              	 .loc 4 238 0
 847 009c 194B     	 ldr r3,.L27+12
 848 009e D3ED007A 	 flds s15,[r3]
 849 00a2 F1EE677A 	 fnegs s15,s15
 850 00a6 174B     	 ldr r3,.L27+12
 851 00a8 C3ED007A 	 fsts s15,[r3]
 239:../main.c     **** 
 240:../main.c     **** 		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 852              	 .loc 4 240 0
 853 00ac 154B     	 ldr r3,.L27+12
 854 00ae D3ED007A 	 flds s15,[r3]
 855 00b2 B0EE007A 	 fconsts s14,#0
 856 00b6 F4EEC77A 	 fcmpes s15,s14
 857 00ba F1EE10FA 	 fmstat
 858 00be 03DD     	 ble .L21
 859              	 .loc 4 240 0 is_stmt 0 discriminator 1
 860 00c0 104B     	 ldr r3,.L27+12
 861 00c2 4FF08042 	 mov r2,#1073741824
 862 00c6 1A60     	 str r2,[r3]
 863              	.L21:
 241:../main.c     **** 		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 864              	 .loc 4 241 0 is_stmt 1
 865 00c8 0E4B     	 ldr r3,.L27+12
 866 00ca D3ED007A 	 flds s15,[r3]
 867 00ce B8EE007A 	 fconsts s14,#128
 868 00d2 F4EEC77A 	 fcmpes s15,s14
 869 00d6 F1EE10FA 	 fmstat
 870 00da 03D5     	 bpl .L23
 871              	 .loc 4 241 0 is_stmt 0 discriminator 1
 872 00dc 094B     	 ldr r3,.L27+12
 873 00de 4FF04042 	 mov r2,#-1073741824
 874 00e2 1A60     	 str r2,[r3]
 875              	.L23:
 242:../main.c     **** 
 243:../main.c     **** 		CAN_new_meassage = 1;
 876              	 .loc 4 243 0 is_stmt 1
 877 00e4 084B     	 ldr r3,.L27+16
 878 00e6 0122     	 movs r2,#1
 879 00e8 1A70     	 strb r2,[r3]
 244:../main.c     **** 		CAN_no_com_counter = 0;
 880              	 .loc 4 244 0
 881 00ea 084B     	 ldr r3,.L27+20
 882 00ec 0022     	 movs r2,#0
 883 00ee 1A70     	 strb r2,[r3]
 245:../main.c     **** }
 884              	 .loc 4 245 0
 885 00f0 1037     	 adds r7,r7,#16
 886              	.LCFI39:
 887              	 .cfi_def_cfa_offset 8
 888 00f2 BD46     	 mov sp,r7
 889              	.LCFI40:
 890              	 .cfi_def_cfa_register 13
 891              	 
 892 00f4 80BD     	 pop {r7,pc}
 893              	.L28:
 894 00f6 00BF     	 .align 2
 895              	.L27:
 896 00f8 00000000 	 .word CAN_NODE_0
 897 00fc 00000000 	 .word Speeds_int16_r
 898 0100 00007A44 	 .word 1148846080
 899 0104 00000000 	 .word CAN_speed_ref
 900 0108 00000000 	 .word CAN_new_meassage
 901 010c 00000000 	 .word CAN_no_com_counter
 902              	 .cfi_endproc
 903              	.LFE474:
 905              	 .section .text.CAN0_0_IRQHandler,"ax",%progbits
 906              	 .align 2
 907              	 .global CAN0_0_IRQHandler
 908              	 .thumb
 909              	 .thumb_func
 911              	CAN0_0_IRQHandler:
 912              	.LFB475:
 246:../main.c     **** 
 247:../main.c     **** //CAN RX reste distance
 248:../main.c     **** void CAN_RX_MO7_ISR(void){
 913              	 .loc 4 248 0
 914              	 .cfi_startproc
 915              	 
 916              	 
 917 0000 80B5     	 push {r7,lr}
 918              	.LCFI41:
 919              	 .cfi_def_cfa_offset 8
 920              	 .cfi_offset 7,-8
 921              	 .cfi_offset 14,-4
 922 0002 84B0     	 sub sp,sp,#16
 923              	.LCFI42:
 924              	 .cfi_def_cfa_offset 24
 925 0004 00AF     	 add r7,sp,#0
 926              	.LCFI43:
 927              	 .cfi_def_cfa_register 7
 249:../main.c     **** 	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 928              	 .loc 4 249 0
 929 0006 124B     	 ldr r3,.L33
 930 0008 5B6A     	 ldr r3,[r3,#36]
 931 000a 1B68     	 ldr r3,[r3]
 932 000c BB60     	 str r3,[r7,#8]
 250:../main.c     **** 	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 933              	 .loc 4 250 0
 934 000e 104B     	 ldr r3,.L33
 935 0010 5B6A     	 ldr r3,[r3,#36]
 936 0012 1846     	 mov r0,r3
 937 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 251:../main.c     **** 
 252:../main.c     **** 	uint8_t data_r[4];
 253:../main.c     **** 	 int i;
 254:../main.c     **** 	 for(i = 0 ; i < 4 ; i ++){
 938              	 .loc 4 254 0
 939 0018 0023     	 movs r3,#0
 940 001a FB60     	 str r3,[r7,#12]
 941 001c 0CE0     	 b .L30
 942              	.L31:
 255:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 943              	 .loc 4 255 0 discriminator 3
 944 001e BA68     	 ldr r2,[r7,#8]
 945 0020 FB68     	 ldr r3,[r7,#12]
 946 0022 1344     	 add r3,r3,r2
 947 0024 1033     	 adds r3,r3,#16
 948 0026 1978     	 ldrb r1,[r3]
 949 0028 3A1D     	 adds r2,r7,#4
 950 002a FB68     	 ldr r3,[r7,#12]
 951 002c 1344     	 add r3,r3,r2
 952 002e 0A46     	 mov r2,r1
 953 0030 1A70     	 strb r2,[r3]
 254:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 954              	 .loc 4 254 0 discriminator 3
 955 0032 FB68     	 ldr r3,[r7,#12]
 956 0034 0133     	 adds r3,r3,#1
 957 0036 FB60     	 str r3,[r7,#12]
 958              	.L30:
 254:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 959              	 .loc 4 254 0 is_stmt 0 discriminator 1
 960 0038 FB68     	 ldr r3,[r7,#12]
 961 003a 032B     	 cmp r3,#3
 962 003c EFDD     	 ble .L31
 256:../main.c     **** 	 }
 257:../main.c     **** 
 258:../main.c     **** 	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 963              	 .loc 4 258 0 is_stmt 1
 964 003e 7B79     	 ldrb r3,[r7,#5]
 965 0040 012B     	 cmp r3,#1
 966 0042 02D1     	 bne .L29
 967              	 .loc 4 258 0 is_stmt 0 discriminator 1
 968 0044 034B     	 ldr r3,.L33+4
 969 0046 0022     	 movs r2,#0
 970 0048 1A60     	 str r2,[r3]
 971              	.L29:
 259:../main.c     **** }
 972              	 .loc 4 259 0 is_stmt 1
 973 004a 1037     	 adds r7,r7,#16
 974              	.LCFI44:
 975              	 .cfi_def_cfa_offset 8
 976 004c BD46     	 mov sp,r7
 977              	.LCFI45:
 978              	 .cfi_def_cfa_register 13
 979              	 
 980 004e 80BD     	 pop {r7,pc}
 981              	.L34:
 982              	 .align 2
 983              	.L33:
 984 0050 00000000 	 .word CAN_NODE_0
 985 0054 00000000 	 .word distance_180deg_ele_count
 986              	 .cfi_endproc
 987              	.LFE475:
 989              	 .global __aeabi_f2d
 990              	 .global __aeabi_dmul
 991              	 .global __aeabi_ddiv
 992              	 .global __aeabi_d2f
 993              	 .global __aeabi_dadd
 994              	 .section .text.CCU43_0_IRQHandler,"ax",%progbits
 995              	 .align 2
 996              	 .global CCU43_0_IRQHandler
 997              	 .thumb
 998              	 .thumb_func
 1000              	CCU43_0_IRQHandler:
 1001              	.LFB476:
 260:../main.c     **** 
 261:../main.c     **** void CAN_TX_ISR(void){
 1002              	 .loc 4 261 0
 1003              	 .cfi_startproc
 1004              	 
 1005              	 
 1006 0000 80B5     	 push {r7,lr}
 1007              	.LCFI46:
 1008              	 .cfi_def_cfa_offset 8
 1009              	 .cfi_offset 7,-8
 1010              	 .cfi_offset 14,-4
 1011 0002 86B0     	 sub sp,sp,#24
 1012              	.LCFI47:
 1013              	 .cfi_def_cfa_offset 32
 1014 0004 00AF     	 add r7,sp,#0
 1015              	.LCFI48:
 1016              	 .cfi_def_cfa_register 7
 262:../main.c     **** 	int16_t Inverter_state[4] = {0};
 1017              	 .loc 4 262 0
 1018 0006 0023     	 movs r3,#0
 1019 0008 FB60     	 str r3,[r7,#12]
 1020 000a 0023     	 movs r3,#0
 1021 000c 3B61     	 str r3,[r7,#16]
 263:../main.c     **** 
 264:../main.c     **** 	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 1022              	 .loc 4 264 0
 1023 000e 0123     	 movs r3,#1
 1024 0010 BB81     	 strh r3,[r7,#12]
 265:../main.c     **** 
 266:../main.c     **** 	if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
 1025              	 .loc 4 266 0
 1026 0012 554B     	 ldr r3,.L38+16
 1027 0014 1B78     	 ldrb r3,[r3]
 1028 0016 FA2B     	 cmp r3,#250
 1029 0018 02D9     	 bls .L36
 1030              	 .loc 4 266 0 is_stmt 0 discriminator 1
 1031 001a 0023     	 movs r3,#0
 1032 001c BB81     	 strh r3,[r7,#12]
 1033 001e 01E0     	 b .L37
 1034              	.L36:
 267:../main.c     **** 	else Inverter_state[1] = 1;
 1035              	 .loc 4 267 0 is_stmt 1
 1036 0020 0123     	 movs r3,#1
 1037 0022 FB81     	 strh r3,[r7,#14]
 1038              	.L37:
 268:../main.c     **** 
 269:../main.c     **** 	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 1039              	 .loc 4 269 0
 1040 0024 514B     	 ldr r3,.L38+20
 1041 0026 1B68     	 ldr r3,[r3]
 1042 0028 1846     	 mov r0,r3
 1043 002a FFF7FEFF 	 bl __aeabi_f2d
 1044 002e 0246     	 mov r2,r0
 1045 0030 0B46     	 mov r3,r1
 1046 0032 1046     	 mov r0,r2
 1047 0034 1946     	 mov r1,r3
 1048 0036 48A3     	 adr r3,.L38
 1049 0038 D3E90023 	 ldrd r2,[r3]
 1050 003c FFF7FEFF 	 bl __aeabi_dmul
 1051 0040 0246     	 mov r2,r0
 1052 0042 0B46     	 mov r3,r1
 1053 0044 1046     	 mov r0,r2
 1054 0046 1946     	 mov r1,r3
 1055 0048 4FF00002 	 mov r2,#0
 1056 004c 484B     	 ldr r3,.L38+24
 1057 004e FFF7FEFF 	 bl __aeabi_ddiv
 1058 0052 0246     	 mov r2,r0
 1059 0054 0B46     	 mov r3,r1
 1060 0056 1046     	 mov r0,r2
 1061 0058 1946     	 mov r1,r3
 1062 005a FFF7FEFF 	 bl __aeabi_d2f
 1063 005e 0246     	 mov r2,r0
 1064 0060 444B     	 ldr r3,.L38+28
 1065 0062 1A60     	 str r2,[r3]
 270:../main.c     **** 	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
 1066              	 .loc 4 270 0
 1067 0064 434B     	 ldr r3,.L38+28
 1068 0066 D3ED007A 	 flds s15,[r3]
 1069 006a F1EE677A 	 fnegs s15,s15
 1070 006e 414B     	 ldr r3,.L38+28
 1071 0070 C3ED007A 	 fsts s15,[r3]
 271:../main.c     **** 	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 1072              	 .loc 4 271 0
 1073 0074 3F4B     	 ldr r3,.L38+28
 1074 0076 D3ED007A 	 flds s15,[r3]
 1075 007a 9FED3F7A 	 flds s14,.L38+32
 1076 007e 67EE877A 	 fmuls s15,s15,s14
 1077 0082 FDEEE77A 	 ftosizs s15,s15
 1078 0086 C7ED017A 	 fsts s15,[r7,#4]
 1079 008a BB88     	 ldrh r3,[r7,#4]
 1080 008c 9BB2     	 uxth r3,r3
 1081 008e 3B82     	 strh r3,[r7,#16]
 272:../main.c     **** 
 273:../main.c     **** 	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 1082              	 .loc 4 273 0
 1083 0090 3A4B     	 ldr r3,.L38+36
 1084 0092 1B68     	 ldr r3,[r3]
 1085 0094 07EE903A 	 fmsr s15,r3
 1086 0098 F8EEE77A 	 fsitos s15,s15
 1087 009c B0EE007A 	 fconsts s14,#0
 1088 00a0 C7EE877A 	 fdivs s15,s15,s14
 1089 00a4 B2EE067A 	 fconsts s14,#38
 1090 00a8 C7EE877A 	 fdivs s15,s15,s14
 1091 00ac 17EE900A 	 fmrs r0,s15
 1092 00b0 FFF7FEFF 	 bl __aeabi_f2d
 1093 00b4 0246     	 mov r2,r0
 1094 00b6 0B46     	 mov r3,r1
 1095 00b8 1046     	 mov r0,r2
 1096 00ba 1946     	 mov r1,r3
 1097 00bc 28A3     	 adr r3,.L38+8
 1098 00be D3E90023 	 ldrd r2,[r3]
 1099 00c2 FFF7FEFF 	 bl __aeabi_dmul
 1100 00c6 0246     	 mov r2,r0
 1101 00c8 0B46     	 mov r3,r1
 1102 00ca 1046     	 mov r0,r2
 1103 00cc 1946     	 mov r1,r3
 1104 00ce FFF7FEFF 	 bl __aeabi_dadd
 1105 00d2 0246     	 mov r2,r0
 1106 00d4 0B46     	 mov r3,r1
 1107 00d6 1046     	 mov r0,r2
 1108 00d8 1946     	 mov r1,r3
 1109 00da 1FA3     	 adr r3,.L38
 1110 00dc D3E90023 	 ldrd r2,[r3]
 1111 00e0 FFF7FEFF 	 bl __aeabi_dmul
 1112 00e4 0246     	 mov r2,r0
 1113 00e6 0B46     	 mov r3,r1
 1114 00e8 1046     	 mov r0,r2
 1115 00ea 1946     	 mov r1,r3
 1116 00ec FFF7FEFF 	 bl __aeabi_d2f
 1117 00f0 0246     	 mov r2,r0
 1118 00f2 234B     	 ldr r3,.L38+40
 1119 00f4 1A60     	 str r2,[r3]
 274:../main.c     **** 	if(MOTOR_NUM == 6) distance = -distance;
 1120              	 .loc 4 274 0
 1121 00f6 224B     	 ldr r3,.L38+40
 1122 00f8 D3ED007A 	 flds s15,[r3]
 1123 00fc F1EE677A 	 fnegs s15,s15
 1124 0100 1F4B     	 ldr r3,.L38+40
 1125 0102 C3ED007A 	 fsts s15,[r3]
 275:../main.c     **** 	Inverter_state[3] = distance * 1000; // to mm
 1126              	 .loc 4 275 0
 1127 0106 1E4B     	 ldr r3,.L38+40
 1128 0108 D3ED007A 	 flds s15,[r3]
 1129 010c 9FED1A7A 	 flds s14,.L38+32
 1130 0110 67EE877A 	 fmuls s15,s15,s14
 1131 0114 FDEEE77A 	 ftosizs s15,s15
 1132 0118 C7ED017A 	 fsts s15,[r7,#4]
 1133 011c BB88     	 ldrh r3,[r7,#4]
 1134 011e 9BB2     	 uxth r3,r3
 1135 0120 7B82     	 strh r3,[r7,#18]
 276:../main.c     **** 
 277:../main.c     **** 	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 1136              	 .loc 4 277 0
 1137 0122 0323     	 movs r3,#3
 1138 0124 FB75     	 strb r3,[r7,#23]
 278:../main.c     **** 	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 1139              	 .loc 4 278 0
 1140 0126 FB7D     	 ldrb r3,[r7,#23]
 1141 0128 164A     	 ldr r2,.L38+44
 1142 012a 0233     	 adds r3,r3,#2
 1143 012c 9B00     	 lsls r3,r3,#2
 1144 012e 1344     	 add r3,r3,r2
 1145 0130 5A68     	 ldr r2,[r3,#4]
 1146 0132 07F10C03 	 add r3,r7,#12
 1147 0136 1046     	 mov r0,r2
 1148 0138 1946     	 mov r1,r3
 1149 013a FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
 279:../main.c     **** 	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 1150              	 .loc 4 279 0
 1151 013e FB7D     	 ldrb r3,[r7,#23]
 1152 0140 104A     	 ldr r2,.L38+44
 1153 0142 0233     	 adds r3,r3,#2
 1154 0144 9B00     	 lsls r3,r3,#2
 1155 0146 1344     	 add r3,r3,r2
 1156 0148 5B68     	 ldr r3,[r3,#4]
 1157 014a 1846     	 mov r0,r3
 1158 014c FFF7FEFF 	 bl CAN_NODE_MO_Transmit
 280:../main.c     **** }
 1159              	 .loc 4 280 0
 1160 0150 1837     	 adds r7,r7,#24
 1161              	.LCFI49:
 1162              	 .cfi_def_cfa_offset 8
 1163 0152 BD46     	 mov sp,r7
 1164              	.LCFI50:
 1165              	 .cfi_def_cfa_register 13
 1166              	 
 1167 0154 80BD     	 pop {r7,pc}
 1168              	.L39:
 1169 0156 00BF     	 .align 3
 1170              	.L38:
 1171 0158 48E17A14 	 .word 343597384
 1172 015c AE47B13F 	 .word 1068582830
 1173 0160 F1D4C853 	 .word 1405670641
 1174 0164 FB210940 	 .word 1074340347
 1175 0168 00000000 	 .word CAN_no_com_counter
 1176 016c 00000000 	 .word omega_ele_rads
 1177 0170 00002640 	 .word 1076232192
 1178 0174 00000000 	 .word Speed_act
 1179 0178 00007A44 	 .word 1148846080
 1180 017c 00000000 	 .word distance_180deg_ele_count
 1181 0180 00000000 	 .word distance
 1182 0184 00000000 	 .word CAN_NODE_0
 1183              	 .cfi_endproc
 1184              	.LFE476:
 1186              	 .section .text.CCU43_3_IRQHandler,"ax",%progbits
 1187              	 .align 2
 1188              	 .global CCU43_3_IRQHandler
 1189              	 .thumb
 1190              	 .thumb_func
 1192              	CCU43_3_IRQHandler:
 1193              	.LFB477:
 281:../main.c     **** 
 282:../main.c     **** // 100us Timer for speed measurement
 283:../main.c     **** void TimeCounterISR(void){
 1194              	 .loc 4 283 0
 1195              	 .cfi_startproc
 1196              	 
 1197              	 
 1198              	 
 1199 0000 80B4     	 push {r7}
 1200              	.LCFI51:
 1201              	 .cfi_def_cfa_offset 4
 1202              	 .cfi_offset 7,-4
 1203 0002 00AF     	 add r7,sp,#0
 1204              	.LCFI52:
 1205              	 .cfi_def_cfa_register 7
 284:../main.c     **** 	time_since_A ++;
 1206              	 .loc 4 284 0
 1207 0004 094B     	 ldr r3,.L41
 1208 0006 1B68     	 ldr r3,[r3]
 1209 0008 0133     	 adds r3,r3,#1
 1210 000a 084A     	 ldr r2,.L41
 1211 000c 1360     	 str r3,[r2]
 285:../main.c     **** 	time_since_B ++;
 1212              	 .loc 4 285 0
 1213 000e 084B     	 ldr r3,.L41+4
 1214 0010 1B68     	 ldr r3,[r3]
 1215 0012 0133     	 adds r3,r3,#1
 1216 0014 064A     	 ldr r2,.L41+4
 1217 0016 1360     	 str r3,[r2]
 286:../main.c     **** 	time_since_C ++;
 1218              	 .loc 4 286 0
 1219 0018 064B     	 ldr r3,.L41+8
 1220 001a 1B68     	 ldr r3,[r3]
 1221 001c 0133     	 adds r3,r3,#1
 1222 001e 054A     	 ldr r2,.L41+8
 1223 0020 1360     	 str r3,[r2]
 287:../main.c     **** }
 1224              	 .loc 4 287 0
 1225 0022 BD46     	 mov sp,r7
 1226              	.LCFI53:
 1227              	 .cfi_def_cfa_register 13
 1228              	 
 1229 0024 5DF8047B 	 ldr r7,[sp],#4
 1230              	.LCFI54:
 1231              	 .cfi_restore 7
 1232              	 .cfi_def_cfa_offset 0
 1233 0028 7047     	 bx lr
 1234              	.L42:
 1235 002a 00BF     	 .align 2
 1236              	.L41:
 1237 002c 00000000 	 .word time_since_A
 1238 0030 00000000 	 .word time_since_B
 1239 0034 00000000 	 .word time_since_C
 1240              	 .cfi_endproc
 1241              	.LFE477:
 1243              	 .section .text.ERU1_2_IRQHandler,"ax",%progbits
 1244              	 .align 2
 1245              	 .global ERU1_2_IRQHandler
 1246              	 .thumb
 1247              	 .thumb_func
 1249              	ERU1_2_IRQHandler:
 1250              	.LFB478:
 288:../main.c     **** 
 289:../main.c     **** // Hall Sensors
 290:../main.c     **** void HallSensor_A_ISR(void){
 1251              	 .loc 4 290 0
 1252              	 .cfi_startproc
 1253              	 
 1254              	 
 1255 0000 80B5     	 push {r7,lr}
 1256              	.LCFI55:
 1257              	 .cfi_def_cfa_offset 8
 1258              	 .cfi_offset 7,-8
 1259              	 .cfi_offset 14,-4
 1260 0002 00AF     	 add r7,sp,#0
 1261              	.LCFI56:
 1262              	 .cfi_def_cfa_register 7
 291:../main.c     **** 	HallSensor();
 1263              	 .loc 4 291 0
 1264 0004 FFF7FEFF 	 bl HallSensor
 292:../main.c     **** 	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
 1265              	 .loc 4 292 0
 1266 0008 114B     	 ldr r3,.L46
 1267 000a 1B68     	 ldr r3,[r3]
 1268 000c 114A     	 ldr r2,.L46+4
 1269 000e 1360     	 str r3,[r2]
 293:../main.c     **** 	time_since_A = 0;						// measurement of speed -> time between change of Hall A
 1270              	 .loc 4 293 0
 1271 0010 0F4B     	 ldr r3,.L46
 1272 0012 0022     	 movs r2,#0
 1273 0014 1A60     	 str r2,[r3]
 294:../main.c     **** 	last_Hall_trig = 'A';
 1274              	 .loc 4 294 0
 1275 0016 104B     	 ldr r3,.L46+8
 1276 0018 4122     	 movs r2,#65
 1277 001a 1A70     	 strb r2,[r3]
 295:../main.c     **** 
 296:../main.c     **** 	if(direction == 1 ) distance_180deg_ele_count ++;
 1278              	 .loc 4 296 0
 1279 001c 0F4B     	 ldr r3,.L46+12
 1280 001e 1B78     	 ldrb r3,[r3]
 1281 0020 DBB2     	 uxtb r3,r3
 1282 0022 5BB2     	 sxtb r3,r3
 1283 0024 012B     	 cmp r3,#1
 1284 0026 05D1     	 bne .L44
 1285              	 .loc 4 296 0 is_stmt 0 discriminator 1
 1286 0028 0D4B     	 ldr r3,.L46+16
 1287 002a 1B68     	 ldr r3,[r3]
 1288 002c 0133     	 adds r3,r3,#1
 1289 002e 0C4A     	 ldr r2,.L46+16
 1290 0030 1360     	 str r3,[r2]
 1291 0032 0BE0     	 b .L43
 1292              	.L44:
 297:../main.c     **** 	else if(direction == -1 ) distance_180deg_ele_count --;
 1293              	 .loc 4 297 0 is_stmt 1
 1294 0034 094B     	 ldr r3,.L46+12
 1295 0036 1B78     	 ldrb r3,[r3]
 1296 0038 DBB2     	 uxtb r3,r3
 1297 003a 5BB2     	 sxtb r3,r3
 1298 003c B3F1FF3F 	 cmp r3,#-1
 1299 0040 04D1     	 bne .L43
 1300              	 .loc 4 297 0 is_stmt 0 discriminator 1
 1301 0042 074B     	 ldr r3,.L46+16
 1302 0044 1B68     	 ldr r3,[r3]
 1303 0046 013B     	 subs r3,r3,#1
 1304 0048 054A     	 ldr r2,.L46+16
 1305 004a 1360     	 str r3,[r2]
 1306              	.L43:
 298:../main.c     **** }
 1307              	 .loc 4 298 0 is_stmt 1
 1308 004c 80BD     	 pop {r7,pc}
 1309              	.L47:
 1310 004e 00BF     	 .align 2
 1311              	.L46:
 1312 0050 00000000 	 .word time_since_A
 1313 0054 00000000 	 .word time_180deg
 1314 0058 00000000 	 .word last_Hall_trig
 1315 005c 00000000 	 .word direction
 1316 0060 00000000 	 .word distance_180deg_ele_count
 1317              	 .cfi_endproc
 1318              	.LFE478:
 1320              	 .section .text.ERU1_0_IRQHandler,"ax",%progbits
 1321              	 .align 2
 1322              	 .global ERU1_0_IRQHandler
 1323              	 .thumb
 1324              	 .thumb_func
 1326              	ERU1_0_IRQHandler:
 1327              	.LFB479:
 299:../main.c     **** void HallSensor_B_ISR(void){
 1328              	 .loc 4 299 0
 1329              	 .cfi_startproc
 1330              	 
 1331              	 
 1332 0000 80B5     	 push {r7,lr}
 1333              	.LCFI57:
 1334              	 .cfi_def_cfa_offset 8
 1335              	 .cfi_offset 7,-8
 1336              	 .cfi_offset 14,-4
 1337 0002 00AF     	 add r7,sp,#0
 1338              	.LCFI58:
 1339              	 .cfi_def_cfa_register 7
 300:../main.c     **** 	HallSensor();
 1340              	 .loc 4 300 0
 1341 0004 FFF7FEFF 	 bl HallSensor
 301:../main.c     **** 	time_180deg = time_since_B;
 1342              	 .loc 4 301 0
 1343 0008 054B     	 ldr r3,.L49
 1344 000a 1B68     	 ldr r3,[r3]
 1345 000c 054A     	 ldr r2,.L49+4
 1346 000e 1360     	 str r3,[r2]
 302:../main.c     **** 	time_since_B = 0;
 1347              	 .loc 4 302 0
 1348 0010 034B     	 ldr r3,.L49
 1349 0012 0022     	 movs r2,#0
 1350 0014 1A60     	 str r2,[r3]
 303:../main.c     **** 	last_Hall_trig = 'B';
 1351              	 .loc 4 303 0
 1352 0016 044B     	 ldr r3,.L49+8
 1353 0018 4222     	 movs r2,#66
 1354 001a 1A70     	 strb r2,[r3]
 304:../main.c     **** }
 1355              	 .loc 4 304 0
 1356 001c 80BD     	 pop {r7,pc}
 1357              	.L50:
 1358 001e 00BF     	 .align 2
 1359              	.L49:
 1360 0020 00000000 	 .word time_since_B
 1361 0024 00000000 	 .word time_180deg
 1362 0028 00000000 	 .word last_Hall_trig
 1363              	 .cfi_endproc
 1364              	.LFE479:
 1366              	 .section .text.ERU1_3_IRQHandler,"ax",%progbits
 1367              	 .align 2
 1368              	 .global ERU1_3_IRQHandler
 1369              	 .thumb
 1370              	 .thumb_func
 1372              	ERU1_3_IRQHandler:
 1373              	.LFB480:
 305:../main.c     **** void HallSensor_C_ISR(void){
 1374              	 .loc 4 305 0
 1375              	 .cfi_startproc
 1376              	 
 1377              	 
 1378 0000 80B5     	 push {r7,lr}
 1379              	.LCFI59:
 1380              	 .cfi_def_cfa_offset 8
 1381              	 .cfi_offset 7,-8
 1382              	 .cfi_offset 14,-4
 1383 0002 00AF     	 add r7,sp,#0
 1384              	.LCFI60:
 1385              	 .cfi_def_cfa_register 7
 306:../main.c     **** 	HallSensor();
 1386              	 .loc 4 306 0
 1387 0004 FFF7FEFF 	 bl HallSensor
 307:../main.c     **** 	time_180deg = time_since_C;
 1388              	 .loc 4 307 0
 1389 0008 054B     	 ldr r3,.L52
 1390 000a 1B68     	 ldr r3,[r3]
 1391 000c 054A     	 ldr r2,.L52+4
 1392 000e 1360     	 str r3,[r2]
 308:../main.c     **** 	time_since_C = 0;
 1393              	 .loc 4 308 0
 1394 0010 034B     	 ldr r3,.L52
 1395 0012 0022     	 movs r2,#0
 1396 0014 1A60     	 str r2,[r3]
 309:../main.c     **** 	last_Hall_trig = 'C';
 1397              	 .loc 4 309 0
 1398 0016 044B     	 ldr r3,.L52+8
 1399 0018 4322     	 movs r2,#67
 1400 001a 1A70     	 strb r2,[r3]
 310:../main.c     **** }
 1401              	 .loc 4 310 0
 1402 001c 80BD     	 pop {r7,pc}
 1403              	.L53:
 1404 001e 00BF     	 .align 2
 1405              	.L52:
 1406 0020 00000000 	 .word time_since_C
 1407 0024 00000000 	 .word time_180deg
 1408 0028 00000000 	 .word last_Hall_trig
 1409              	 .cfi_endproc
 1410              	.LFE480:
 1412              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 1413              	 .align 2
 1414              	 .global CCU43_1_IRQHandler
 1415              	 .thumb
 1416              	 .thumb_func
 1418              	CCU43_1_IRQHandler:
 1419              	.LFB481:
 311:../main.c     **** 
 312:../main.c     **** /*
 313:../main.c     **** // Turn off driver at Overcurrent
 314:../main.c     **** void OverCurrent_U_ISR(void)
 315:../main.c     **** {
 316:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 317:../main.c     **** }
 318:../main.c     **** void OverCurrent_V_ISR(void)
 319:../main.c     **** {
 320:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 321:../main.c     **** }
 322:../main.c     **** void OverCurrent_W_ISR(void)
 323:../main.c     **** {
 324:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 325:../main.c     **** }
 326:../main.c     **** */
 327:../main.c     **** 
 328:../main.c     **** //ISR based on Timer_1 --> 100us time base
 329:../main.c     **** void ISR_INT1(void)
 330:../main.c     **** {
 1420              	 .loc 4 330 0
 1421              	 .cfi_startproc
 1422              	 
 1423              	 
 1424              	 
 1425 0000 80B4     	 push {r7}
 1426              	.LCFI61:
 1427              	 .cfi_def_cfa_offset 4
 1428              	 .cfi_offset 7,-4
 1429 0002 00AF     	 add r7,sp,#0
 1430              	.LCFI62:
 1431              	 .cfi_def_cfa_register 7
 331:../main.c     **** }
 1432              	 .loc 4 331 0
 1433 0004 BD46     	 mov sp,r7
 1434              	.LCFI63:
 1435              	 .cfi_def_cfa_register 13
 1436              	 
 1437 0006 5DF8047B 	 ldr r7,[sp],#4
 1438              	.LCFI64:
 1439              	 .cfi_restore 7
 1440              	 .cfi_def_cfa_offset 0
 1441 000a 7047     	 bx lr
 1442              	 .cfi_endproc
 1443              	.LFE481:
 1445              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 1446              	 .align 2
 1447              	 .global CCU80_3_IRQHandler
 1448              	 .thumb
 1449              	 .thumb_func
 1451              	CCU80_3_IRQHandler:
 1452              	.LFB482:
 332:../main.c     **** 
 333:../main.c     **** // ISR for Updating the SVM PWM -> 50us = 20kHz
 334:../main.c     **** void PeriodMatchInterruptHandler(void)
 335:../main.c     **** {
 1453              	 .loc 4 335 0
 1454              	 .cfi_startproc
 1455              	 
 1456              	 
 1457 0000 80B5     	 push {r7,lr}
 1458              	.LCFI65:
 1459              	 .cfi_def_cfa_offset 8
 1460              	 .cfi_offset 7,-8
 1461              	 .cfi_offset 14,-4
 1462 0002 82B0     	 sub sp,sp,#8
 1463              	.LCFI66:
 1464              	 .cfi_def_cfa_offset 16
 1465 0004 00AF     	 add r7,sp,#0
 1466              	.LCFI67:
 1467              	 .cfi_def_cfa_register 7
 336:../main.c     **** 	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 1468              	 .loc 4 336 0
 1469 0006 144B     	 ldr r3,.L57
 1470 0008 1B78     	 ldrb r3,[r3]
 1471 000a DBB2     	 uxtb r3,r3
 1472 000c 0133     	 adds r3,r3,#1
 1473 000e DAB2     	 uxtb r2,r3
 1474 0010 114B     	 ldr r3,.L57
 1475 0012 1A70     	 strb r2,[r3]
 337:../main.c     **** 	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 1476              	 .loc 4 337 0
 1477 0014 104B     	 ldr r3,.L57
 1478 0016 1B78     	 ldrb r3,[r3]
 1479 0018 DBB2     	 uxtb r3,r3
 1480 001a 012B     	 cmp r3,#1
 1481 001c 18D1     	 bne .L55
 338:../main.c     **** 		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_D
 1482              	 .loc 4 338 0
 1483 001e 0F4B     	 ldr r3,.L57+4
 1484 0020 D3ED007A 	 flds s15,[r3]
 1485 0024 FCEEE77A 	 ftouizs s15,s15
 1486 0028 C7ED017A 	 fsts s15,[r7,#4]
 1487 002c BB88     	 ldrh r3,[r7,#4]
 1488 002e 9AB2     	 uxth r2,r3
 1489 0030 0B4B     	 ldr r3,.L57+8
 1490 0032 D3ED007A 	 flds s15,[r3]
 1491 0036 FCEEE77A 	 ftouizs s15,s15
 1492 003a 17EE901A 	 fmrs r1,s15
 1493 003e 4BF20B63 	 movw r3,#46603
 1494 0042 03FB01F3 	 mul r3,r3,r1
 1495 0046 0748     	 ldr r0,.L57+12
 1496 0048 1146     	 mov r1,r2
 1497 004a 1A46     	 mov r2,r3
 1498 004c FFF7FEFF 	 bl PWM_SVM_SVMUpdate
 1499              	.L55:
 339:../main.c     **** 	}
 340:../main.c     **** }
 1500              	 .loc 4 340 0
 1501 0050 0837     	 adds r7,r7,#8
 1502              	.LCFI68:
 1503              	 .cfi_def_cfa_offset 8
 1504 0052 BD46     	 mov sp,r7
 1505              	.LCFI69:
 1506              	 .cfi_def_cfa_register 13
 1507              	 
 1508 0054 80BD     	 pop {r7,pc}
 1509              	.L58:
 1510 0056 00BF     	 .align 2
 1511              	.L57:
 1512 0058 00000000 	 .word count
 1513 005c 00000000 	 .word modulation_index_scaled
 1514 0060 00000000 	 .word angle_ab
 1515 0064 00000000 	 .word PWM_SVM_0
 1516              	 .cfi_endproc
 1517              	.LFE482:
 1519              	 .section .text.Hall_init,"ax",%progbits
 1520              	 .align 2
 1521              	 .global Hall_init
 1522              	 .thumb
 1523              	 .thumb_func
 1525              	Hall_init:
 1526              	.LFB483:
 341:../main.c     **** 
 342:../main.c     **** //########################
 343:../main.c     **** // FUNCTIONS
 344:../main.c     **** //########################
 345:../main.c     **** 
 346:../main.c     **** // Hall init -> readout of actual Hall pattern to determine the motor position
 347:../main.c     **** void Hall_init(void){
 1527              	 .loc 4 347 0
 1528              	 .cfi_startproc
 1529              	 
 1530              	 
 1531 0000 90B5     	 push {r4,r7,lr}
 1532              	.LCFI70:
 1533              	 .cfi_def_cfa_offset 12
 1534              	 .cfi_offset 4,-12
 1535              	 .cfi_offset 7,-8
 1536              	 .cfi_offset 14,-4
 1537 0002 83B0     	 sub sp,sp,#12
 1538              	.LCFI71:
 1539              	 .cfi_def_cfa_offset 24
 1540 0004 00AF     	 add r7,sp,#0
 1541              	.LCFI72:
 1542              	 .cfi_def_cfa_register 7
 348:../main.c     **** 
 349:../main.c     **** 	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinV
 1543              	 .loc 4 349 0
 1544 0006 2148     	 ldr r0,.L66
 1545 0008 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1546 000c 0346     	 mov r3,r0
 1547 000e DBB2     	 uxtb r3,r3
 1548 0010 5B00     	 lsls r3,r3,#1
 1549 0012 DCB2     	 uxtb r4,r3
 1550 0014 1E48     	 ldr r0,.L66+4
 1551 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1552 001a 0346     	 mov r3,r0
 1553 001c DBB2     	 uxtb r3,r3
 1554 001e 2343     	 orrs r3,r3,r4
 1555 0020 DBB2     	 uxtb r3,r3
 1556 0022 5B00     	 lsls r3,r3,#1
 1557 0024 DCB2     	 uxtb r4,r3
 1558 0026 1B48     	 ldr r0,.L66+8
 1559 0028 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1560 002c 0346     	 mov r3,r0
 1561 002e DBB2     	 uxtb r3,r3
 1562 0030 2343     	 orrs r3,r3,r4
 1563 0032 FB71     	 strb r3,[r7,#7]
 350:../main.c     **** 
 351:../main.c     **** 	 if(Hall_Initial == 0b100){sector = 0;}
 1564              	 .loc 4 351 0
 1565 0034 FB79     	 ldrb r3,[r7,#7]
 1566 0036 042B     	 cmp r3,#4
 1567 0038 03D1     	 bne .L60
 1568              	 .loc 4 351 0 is_stmt 0 discriminator 1
 1569 003a 174B     	 ldr r3,.L66+12
 1570 003c 0022     	 movs r2,#0
 1571 003e 1A70     	 strb r2,[r3]
 1572 0040 21E0     	 b .L59
 1573              	.L60:
 352:../main.c     **** 	 else if(Hall_Initial == 0b110){sector = 1;}
 1574              	 .loc 4 352 0 is_stmt 1
 1575 0042 FB79     	 ldrb r3,[r7,#7]
 1576 0044 062B     	 cmp r3,#6
 1577 0046 03D1     	 bne .L62
 1578              	 .loc 4 352 0 is_stmt 0 discriminator 1
 1579 0048 134B     	 ldr r3,.L66+12
 1580 004a 0122     	 movs r2,#1
 1581 004c 1A70     	 strb r2,[r3]
 1582 004e 1AE0     	 b .L59
 1583              	.L62:
 353:../main.c     **** 	 else if(Hall_Initial == 0b010){sector = 2;}
 1584              	 .loc 4 353 0 is_stmt 1
 1585 0050 FB79     	 ldrb r3,[r7,#7]
 1586 0052 022B     	 cmp r3,#2
 1587 0054 03D1     	 bne .L63
 1588              	 .loc 4 353 0 is_stmt 0 discriminator 1
 1589 0056 104B     	 ldr r3,.L66+12
 1590 0058 0222     	 movs r2,#2
 1591 005a 1A70     	 strb r2,[r3]
 1592 005c 13E0     	 b .L59
 1593              	.L63:
 354:../main.c     **** 	 else if(Hall_Initial == 0b011){sector = 3;}
 1594              	 .loc 4 354 0 is_stmt 1
 1595 005e FB79     	 ldrb r3,[r7,#7]
 1596 0060 032B     	 cmp r3,#3
 1597 0062 03D1     	 bne .L64
 1598              	 .loc 4 354 0 is_stmt 0 discriminator 1
 1599 0064 0C4B     	 ldr r3,.L66+12
 1600 0066 0322     	 movs r2,#3
 1601 0068 1A70     	 strb r2,[r3]
 1602 006a 0CE0     	 b .L59
 1603              	.L64:
 355:../main.c     **** 	 else if(Hall_Initial == 0b001){sector = 4;}
 1604              	 .loc 4 355 0 is_stmt 1
 1605 006c FB79     	 ldrb r3,[r7,#7]
 1606 006e 012B     	 cmp r3,#1
 1607 0070 03D1     	 bne .L65
 1608              	 .loc 4 355 0 is_stmt 0 discriminator 1
 1609 0072 094B     	 ldr r3,.L66+12
 1610 0074 0422     	 movs r2,#4
 1611 0076 1A70     	 strb r2,[r3]
 1612 0078 05E0     	 b .L59
 1613              	.L65:
 356:../main.c     **** 	 else if(Hall_Initial == 0b101){sector = 5;}
 1614              	 .loc 4 356 0 is_stmt 1
 1615 007a FB79     	 ldrb r3,[r7,#7]
 1616 007c 052B     	 cmp r3,#5
 1617 007e 02D1     	 bne .L59
 1618              	 .loc 4 356 0 is_stmt 0 discriminator 1
 1619 0080 054B     	 ldr r3,.L66+12
 1620 0082 0522     	 movs r2,#5
 1621 0084 1A70     	 strb r2,[r3]
 1622              	.L59:
 357:../main.c     **** }
 1623              	 .loc 4 357 0 is_stmt 1
 1624 0086 0C37     	 adds r7,r7,#12
 1625              	.LCFI73:
 1626              	 .cfi_def_cfa_offset 12
 1627 0088 BD46     	 mov sp,r7
 1628              	.LCFI74:
 1629              	 .cfi_def_cfa_register 13
 1630              	 
 1631 008a 90BD     	 pop {r4,r7,pc}
 1632              	.L67:
 1633              	 .align 2
 1634              	.L66:
 1635 008c 00000000 	 .word Hall_A_ISR
 1636 0090 00000000 	 .word Hall_B_ISR
 1637 0094 00000000 	 .word Hall_C_ISR
 1638 0098 00000000 	 .word sector
 1639              	 .cfi_endproc
 1640              	.LFE483:
 1642              	 .section .text.HallSensor,"ax",%progbits
 1643              	 .align 2
 1644              	 .global HallSensor
 1645              	 .thumb
 1646              	 .thumb_func
 1648              	HallSensor:
 1649              	.LFB484:
 358:../main.c     **** 
 359:../main.c     **** // Function to determine direction and current Sector
 360:../main.c     **** void HallSensor(void){
 1650              	 .loc 4 360 0
 1651              	 .cfi_startproc
 1652              	 
 1653              	 
 1654 0000 90B5     	 push {r4,r7,lr}
 1655              	.LCFI75:
 1656              	 .cfi_def_cfa_offset 12
 1657              	 .cfi_offset 4,-12
 1658              	 .cfi_offset 7,-8
 1659              	 .cfi_offset 14,-4
 1660 0002 83B0     	 sub sp,sp,#12
 1661              	.LCFI76:
 1662              	 .cfi_def_cfa_offset 24
 1663 0004 00AF     	 add r7,sp,#0
 1664              	.LCFI77:
 1665              	 .cfi_def_cfa_register 7
 361:../main.c     **** 	enc_val = enc_val << 3; //shift old values and make space for new ones
 1666              	 .loc 4 361 0
 1667 0006 2E4B     	 ldr r3,.L75
 1668 0008 1B88     	 ldrh r3,[r3]
 1669 000a 9BB2     	 uxth r3,r3
 1670 000c DB00     	 lsls r3,r3,#3
 1671 000e 9AB2     	 uxth r2,r3
 1672 0010 2B4B     	 ldr r3,.L75
 1673 0012 1A80     	 strh r2,[r3]
 362:../main.c     **** 	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(
 1674              	 .loc 4 362 0
 1675 0014 2B48     	 ldr r0,.L75+4
 1676 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1677 001a 0346     	 mov r3,r0
 1678 001c DBB2     	 uxtb r3,r3
 1679 001e 5B00     	 lsls r3,r3,#1
 1680 0020 DCB2     	 uxtb r4,r3
 1681 0022 2948     	 ldr r0,.L75+8
 1682 0024 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1683 0028 0346     	 mov r3,r0
 1684 002a DBB2     	 uxtb r3,r3
 1685 002c 2343     	 orrs r3,r3,r4
 1686 002e DBB2     	 uxtb r3,r3
 1687 0030 5B00     	 lsls r3,r3,#1
 1688 0032 DCB2     	 uxtb r4,r3
 1689 0034 2548     	 ldr r0,.L75+12
 1690 0036 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1691 003a 0346     	 mov r3,r0
 1692 003c DBB2     	 uxtb r3,r3
 1693 003e 2343     	 orrs r3,r3,r4
 1694 0040 FB71     	 strb r3,[r7,#7]
 363:../main.c     **** 	enc_val = enc_val | Hall_status; //read Sensor values and store them
 1695              	 .loc 4 363 0
 1696 0042 FB79     	 ldrb r3,[r7,#7]
 1697 0044 9AB2     	 uxth r2,r3
 1698 0046 1E4B     	 ldr r3,.L75
 1699 0048 1B88     	 ldrh r3,[r3]
 1700 004a 9BB2     	 uxth r3,r3
 1701 004c 1343     	 orrs r3,r3,r2
 1702 004e 9AB2     	 uxth r2,r3
 1703 0050 1B4B     	 ldr r3,.L75
 1704 0052 1A80     	 strh r2,[r3]
 364:../main.c     **** 	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual an
 1705              	 .loc 4 364 0
 1706 0054 1A4B     	 ldr r3,.L75
 1707 0056 1B88     	 ldrh r3,[r3]
 1708 0058 9BB2     	 uxth r3,r3
 1709 005a 03F03F03 	 and r3,r3,#63
 1710 005e 1C4A     	 ldr r2,.L75+16
 1711 0060 D25C     	 ldrb r2,[r2,r3]
 1712 0062 1C4B     	 ldr r3,.L75+20
 1713 0064 1A70     	 strb r2,[r3]
 365:../main.c     **** 
 366:../main.c     **** 	if(Hall_status == 0b100){sector = 0;}
 1714              	 .loc 4 366 0
 1715 0066 FB79     	 ldrb r3,[r7,#7]
 1716 0068 042B     	 cmp r3,#4
 1717 006a 03D1     	 bne .L69
 1718              	 .loc 4 366 0 is_stmt 0 discriminator 1
 1719 006c 1A4B     	 ldr r3,.L75+24
 1720 006e 0022     	 movs r2,#0
 1721 0070 1A70     	 strb r2,[r3]
 1722 0072 21E0     	 b .L68
 1723              	.L69:
 367:../main.c     **** 		 else if(Hall_status == 0b110){sector = 1;}
 1724              	 .loc 4 367 0 is_stmt 1
 1725 0074 FB79     	 ldrb r3,[r7,#7]
 1726 0076 062B     	 cmp r3,#6
 1727 0078 03D1     	 bne .L71
 1728              	 .loc 4 367 0 is_stmt 0 discriminator 1
 1729 007a 174B     	 ldr r3,.L75+24
 1730 007c 0122     	 movs r2,#1
 1731 007e 1A70     	 strb r2,[r3]
 1732 0080 1AE0     	 b .L68
 1733              	.L71:
 368:../main.c     **** 		 else if(Hall_status == 0b010){sector = 2;}
 1734              	 .loc 4 368 0 is_stmt 1
 1735 0082 FB79     	 ldrb r3,[r7,#7]
 1736 0084 022B     	 cmp r3,#2
 1737 0086 03D1     	 bne .L72
 1738              	 .loc 4 368 0 is_stmt 0 discriminator 1
 1739 0088 134B     	 ldr r3,.L75+24
 1740 008a 0222     	 movs r2,#2
 1741 008c 1A70     	 strb r2,[r3]
 1742 008e 13E0     	 b .L68
 1743              	.L72:
 369:../main.c     **** 		 else if(Hall_status == 0b011){sector = 3;}
 1744              	 .loc 4 369 0 is_stmt 1
 1745 0090 FB79     	 ldrb r3,[r7,#7]
 1746 0092 032B     	 cmp r3,#3
 1747 0094 03D1     	 bne .L73
 1748              	 .loc 4 369 0 is_stmt 0 discriminator 1
 1749 0096 104B     	 ldr r3,.L75+24
 1750 0098 0322     	 movs r2,#3
 1751 009a 1A70     	 strb r2,[r3]
 1752 009c 0CE0     	 b .L68
 1753              	.L73:
 370:../main.c     **** 		 else if(Hall_status == 0b001){sector = 4;}
 1754              	 .loc 4 370 0 is_stmt 1
 1755 009e FB79     	 ldrb r3,[r7,#7]
 1756 00a0 012B     	 cmp r3,#1
 1757 00a2 03D1     	 bne .L74
 1758              	 .loc 4 370 0 is_stmt 0 discriminator 1
 1759 00a4 0C4B     	 ldr r3,.L75+24
 1760 00a6 0422     	 movs r2,#4
 1761 00a8 1A70     	 strb r2,[r3]
 1762 00aa 05E0     	 b .L68
 1763              	.L74:
 371:../main.c     **** 		 else if(Hall_status == 0b101){sector = 5;}
 1764              	 .loc 4 371 0 is_stmt 1
 1765 00ac FB79     	 ldrb r3,[r7,#7]
 1766 00ae 052B     	 cmp r3,#5
 1767 00b0 02D1     	 bne .L68
 1768              	 .loc 4 371 0 is_stmt 0 discriminator 1
 1769 00b2 094B     	 ldr r3,.L75+24
 1770 00b4 0522     	 movs r2,#5
 1771 00b6 1A70     	 strb r2,[r3]
 1772              	.L68:
 372:../main.c     **** 
 373:../main.c     **** }
 1773              	 .loc 4 373 0 is_stmt 1
 1774 00b8 0C37     	 adds r7,r7,#12
 1775              	.LCFI78:
 1776              	 .cfi_def_cfa_offset 12
 1777 00ba BD46     	 mov sp,r7
 1778              	.LCFI79:
 1779              	 .cfi_def_cfa_register 13
 1780              	 
 1781 00bc 90BD     	 pop {r4,r7,pc}
 1782              	.L76:
 1783 00be 00BF     	 .align 2
 1784              	.L75:
 1785 00c0 00000000 	 .word enc_val
 1786 00c4 00000000 	 .word Hall_A_ISR
 1787 00c8 00000000 	 .word Hall_B_ISR
 1788 00cc 00000000 	 .word Hall_C_ISR
 1789 00d0 00000000 	 .word lookup_table
 1790 00d4 00000000 	 .word direction
 1791 00d8 00000000 	 .word sector
 1792              	 .cfi_endproc
 1793              	.LFE484:
 1795              	 .global __aeabi_ui2d
 1796              	 .global __aeabi_i2d
 1797              	 .global __aeabi_dsub
 1798              	 .section .text.Calculation,"ax",%progbits
 1799              	 .align 2
 1800              	 .global Calculation
 1801              	 .thumb
 1802              	 .thumb_func
 1804              	Calculation:
 1805              	.LFB485:
 374:../main.c     **** // Routine for calculation (sector, clark-Park trans.,...)
 375:../main.c     **** 
 376:../main.c     **** //5kHz loop since every 4th step of 50us --> 200us --> 5kHz
 377:../main.c     **** void Calculation(void){
 1806              	 .loc 4 377 0
 1807              	 .cfi_startproc
 1808              	 
 1809              	 
 1810 0000 B0B5     	 push {r4,r5,r7,lr}
 1811              	.LCFI80:
 1812              	 .cfi_def_cfa_offset 16
 1813              	 .cfi_offset 4,-16
 1814              	 .cfi_offset 5,-12
 1815              	 .cfi_offset 7,-8
 1816              	 .cfi_offset 14,-4
 1817 0002 2DED028B 	 fstmfdd sp!,{d8}
 1818              	.LCFI81:
 1819              	 .cfi_def_cfa_offset 24
 1820              	 .cfi_offset 80,-24
 1821              	 .cfi_offset 81,-20
 1822 0006 84B0     	 sub sp,sp,#16
 1823              	.LCFI82:
 1824              	 .cfi_def_cfa_offset 40
 1825 0008 00AF     	 add r7,sp,#0
 1826              	.LCFI83:
 1827              	 .cfi_def_cfa_register 7
 378:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 1828              	 .loc 4 378 0
 1829 000a AF48     	 ldr r0,.L129
 1830 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 379:../main.c     **** 		// Actual time since last angle update via Hall Sensor
 380:../main.c     **** 		uint32_t t;
 381:../main.c     **** 		if(last_Hall_trig == 'A') t = time_since_A;
 1831              	 .loc 4 381 0
 1832 0010 AE4B     	 ldr r3,.L129+4
 1833 0012 1B78     	 ldrb r3,[r3]
 1834 0014 DBB2     	 uxtb r3,r3
 1835 0016 412B     	 cmp r3,#65
 1836 0018 03D1     	 bne .L78
 1837              	 .loc 4 381 0 is_stmt 0 discriminator 1
 1838 001a AD4B     	 ldr r3,.L129+8
 1839 001c 1B68     	 ldr r3,[r3]
 1840 001e FB60     	 str r3,[r7,#12]
 1841 0020 10E0     	 b .L79
 1842              	.L78:
 382:../main.c     **** 		else if(last_Hall_trig == 'B') t = time_since_B;
 1843              	 .loc 4 382 0 is_stmt 1
 1844 0022 AA4B     	 ldr r3,.L129+4
 1845 0024 1B78     	 ldrb r3,[r3]
 1846 0026 DBB2     	 uxtb r3,r3
 1847 0028 422B     	 cmp r3,#66
 1848 002a 03D1     	 bne .L80
 1849              	 .loc 4 382 0 is_stmt 0 discriminator 1
 1850 002c A94B     	 ldr r3,.L129+12
 1851 002e 1B68     	 ldr r3,[r3]
 1852 0030 FB60     	 str r3,[r7,#12]
 1853 0032 07E0     	 b .L79
 1854              	.L80:
 383:../main.c     **** 		else if(last_Hall_trig == 'C') t = time_since_C;
 1855              	 .loc 4 383 0 is_stmt 1
 1856 0034 A54B     	 ldr r3,.L129+4
 1857 0036 1B78     	 ldrb r3,[r3]
 1858 0038 DBB2     	 uxtb r3,r3
 1859 003a 432B     	 cmp r3,#67
 1860 003c 02D1     	 bne .L79
 1861              	 .loc 4 383 0 is_stmt 0 discriminator 1
 1862 003e A64B     	 ldr r3,.L129+16
 1863 0040 1B68     	 ldr r3,[r3]
 1864 0042 FB60     	 str r3,[r7,#12]
 1865              	.L79:
 384:../main.c     **** 		time_180deg_cal = time_180deg;
 1866              	 .loc 4 384 0 is_stmt 1
 1867 0044 A54B     	 ldr r3,.L129+20
 1868 0046 1B68     	 ldr r3,[r3]
 1869 0048 A54A     	 ldr r2,.L129+24
 1870 004a 1360     	 str r3,[r2]
 385:../main.c     **** 		// not fixing sector for calc because if chainges better to do so
 386:../main.c     **** 
 387:../main.c     **** 		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 1871              	 .loc 4 387 0
 1872 004c A44B     	 ldr r3,.L129+24
 1873 004e 1B68     	 ldr r3,[r3]
 1874 0050 40F6C412 	 movw r2,#2500
 1875 0054 9342     	 cmp r3,r2
 1876 0056 04D9     	 bls .L81
 1877              	 .loc 4 387 0 is_stmt 0 discriminator 1
 1878 0058 A14B     	 ldr r3,.L129+24
 1879 005a 40F6C412 	 movw r2,#2500
 1880 005e 1A60     	 str r2,[r3]
 1881 0060 06E0     	 b .L82
 1882              	.L81:
 388:../main.c     **** 		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 1883              	 .loc 4 388 0 is_stmt 1
 1884 0062 9F4B     	 ldr r3,.L129+24
 1885 0064 1B68     	 ldr r3,[r3]
 1886 0066 012B     	 cmp r3,#1
 1887 0068 02D8     	 bhi .L82
 1888              	 .loc 4 388 0 is_stmt 0 discriminator 1
 1889 006a 9D4B     	 ldr r3,.L129+24
 1890 006c 0222     	 movs r2,#2
 1891 006e 1A60     	 str r2,[r3]
 1892              	.L82:
 389:../main.c     **** 
 390:../main.c     **** 		if(t < TIME_OMEGA_0){
 1893              	 .loc 4 390 0 is_stmt 1
 1894 0070 FB68     	 ldr r3,[r7,#12]
 1895 0072 41F28732 	 movw r2,#4999
 1896 0076 9342     	 cmp r3,r2
 1897 0078 35D8     	 bhi .L83
 391:../main.c     **** 			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 1898              	 .loc 4 391 0
 1899 007a 994B     	 ldr r3,.L129+24
 1900 007c 1B68     	 ldr r3,[r3]
 1901 007e 07EE903A 	 fmsr s15,r3
 1902 0082 F8EE677A 	 fuitos s15,s15
 1903 0086 17EE900A 	 fmrs r0,s15
 1904 008a FFF7FEFF 	 bl __aeabi_f2d
 1905 008e 0246     	 mov r2,r0
 1906 0090 0B46     	 mov r3,r1
 1907 0092 4FF00000 	 mov r0,#0
 1908 0096 9349     	 ldr r1,.L129+28
 1909 0098 FFF7FEFF 	 bl __aeabi_ddiv
 1910 009c 0246     	 mov r2,r0
 1911 009e 0B46     	 mov r3,r1
 1912 00a0 1446     	 mov r4,r2
 1913 00a2 1D46     	 mov r5,r3
 1914 00a4 F868     	 ldr r0,[r7,#12]
 1915 00a6 FFF7FEFF 	 bl __aeabi_ui2d
 1916 00aa 0246     	 mov r2,r0
 1917 00ac 0B46     	 mov r3,r1
 1918 00ae 2046     	 mov r0,r4
 1919 00b0 2946     	 mov r1,r5
 1920 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1921 00b6 0246     	 mov r2,r0
 1922 00b8 0B46     	 mov r3,r1
 1923 00ba 1046     	 mov r0,r2
 1924 00bc 1946     	 mov r1,r3
 1925 00be FFF7FEFF 	 bl __aeabi_d2f
 1926 00c2 0246     	 mov r2,r0
 1927 00c4 884B     	 ldr r3,.L129+32
 1928 00c6 1A60     	 str r2,[r3]
 392:../main.c     **** 			if(angle_in_sector > 60) angle_in_sector = 60;
 1929              	 .loc 4 392 0
 1930 00c8 874B     	 ldr r3,.L129+32
 1931 00ca D3ED007A 	 flds s15,[r3]
 1932 00ce 9FED877A 	 flds s14,.L129+36
 1933 00d2 F4EEC77A 	 fcmpes s15,s14
 1934 00d6 F1EE10FA 	 fmstat
 1935 00da 00DC     	 bgt .L116
 1936 00dc 06E0     	 b .L86
 1937              	.L116:
 1938              	 .loc 4 392 0 is_stmt 0 discriminator 1
 1939 00de 824B     	 ldr r3,.L129+32
 1940 00e0 834A     	 ldr r2,.L129+40
 1941 00e2 1A60     	 str r2,[r3]
 1942 00e4 02E0     	 b .L86
 1943              	.L83:
 393:../main.c     **** 		}
 394:../main.c     **** 		else{
 395:../main.c     **** 			angle_in_sector = 30; // standig still
 1944              	 .loc 4 395 0 is_stmt 1
 1945 00e6 804B     	 ldr r3,.L129+32
 1946 00e8 824A     	 ldr r2,.L129+44
 1947 00ea 1A60     	 str r2,[r3]
 1948              	.L86:
 396:../main.c     **** 		}
 397:../main.c     **** 
 398:../main.c     **** 		// CW
 399:../main.c     **** 		if(direction==1)
 1949              	 .loc 4 399 0
 1950 00ec 824B     	 ldr r3,.L129+48
 1951 00ee 1B78     	 ldrb r3,[r3]
 1952 00f0 DBB2     	 uxtb r3,r3
 1953 00f2 5BB2     	 sxtb r3,r3
 1954 00f4 012B     	 cmp r3,#1
 1955 00f6 54D1     	 bne .L87
 400:../main.c     **** 		{
 401:../main.c     **** 			angle_phi = (sector*60.0)+angle_in_sector;
 1956              	 .loc 4 401 0
 1957 00f8 804B     	 ldr r3,.L129+52
 1958 00fa 1B78     	 ldrb r3,[r3]
 1959 00fc DBB2     	 uxtb r3,r3
 1960 00fe 5BB2     	 sxtb r3,r3
 1961 0100 1846     	 mov r0,r3
 1962 0102 FFF7FEFF 	 bl __aeabi_i2d
 1963 0106 0246     	 mov r2,r0
 1964 0108 0B46     	 mov r3,r1
 1965 010a 1046     	 mov r0,r2
 1966 010c 1946     	 mov r1,r3
 1967 010e 4FF00002 	 mov r2,#0
 1968 0112 7B4B     	 ldr r3,.L129+56
 1969 0114 FFF7FEFF 	 bl __aeabi_dmul
 1970 0118 0246     	 mov r2,r0
 1971 011a 0B46     	 mov r3,r1
 1972 011c 1446     	 mov r4,r2
 1973 011e 1D46     	 mov r5,r3
 1974 0120 714B     	 ldr r3,.L129+32
 1975 0122 1B68     	 ldr r3,[r3]
 1976 0124 1846     	 mov r0,r3
 1977 0126 FFF7FEFF 	 bl __aeabi_f2d
 1978 012a 0246     	 mov r2,r0
 1979 012c 0B46     	 mov r3,r1
 1980 012e 2046     	 mov r0,r4
 1981 0130 2946     	 mov r1,r5
 1982 0132 FFF7FEFF 	 bl __aeabi_dadd
 1983 0136 0246     	 mov r2,r0
 1984 0138 0B46     	 mov r3,r1
 1985 013a 1046     	 mov r0,r2
 1986 013c 1946     	 mov r1,r3
 1987 013e FFF7FEFF 	 bl __aeabi_d2f
 1988 0142 0246     	 mov r2,r0
 1989 0144 6F4B     	 ldr r3,.L129+60
 1990 0146 1A60     	 str r2,[r3]
 402:../main.c     **** 			angle_phi=angle_phi+offset_pos;
 1991              	 .loc 4 402 0
 1992 0148 6E4B     	 ldr r3,.L129+60
 1993 014a 93ED007A 	 flds s14,[r3]
 1994 014e 6E4B     	 ldr r3,.L129+64
 1995 0150 D3ED007A 	 flds s15,[r3]
 1996 0154 77EE277A 	 fadds s15,s14,s15
 1997 0158 6A4B     	 ldr r3,.L129+60
 1998 015a C3ED007A 	 fsts s15,[r3]
 403:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 1999              	 .loc 4 403 0
 2000 015e 694B     	 ldr r3,.L129+60
 2001 0160 D3ED007A 	 flds s15,[r3]
 2002 0164 9FED697A 	 flds s14,.L129+68
 2003 0168 F4EEC77A 	 fcmpes s15,s14
 2004 016c F1EE10FA 	 fmstat
 2005 0170 09DD     	 ble .L88
 2006              	 .loc 4 403 0 is_stmt 0 discriminator 1
 2007 0172 644B     	 ldr r3,.L129+60
 2008 0174 D3ED007A 	 flds s15,[r3]
 2009 0178 9FED647A 	 flds s14,.L129+68
 2010 017c 77EEC77A 	 fsubs s15,s15,s14
 2011 0180 604B     	 ldr r3,.L129+60
 2012 0182 C3ED007A 	 fsts s15,[r3]
 2013              	.L88:
 404:../main.c     **** 
 405:../main.c     **** 			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
 2014              	 .loc 4 405 0 is_stmt 1
 2015 0186 564B     	 ldr r3,.L129+24
 2016 0188 1B68     	 ldr r3,[r3]
 2017 018a 07EE903A 	 fmsr s15,r3
 2018 018e F8EE677A 	 fuitos s15,s15
 2019 0192 9FED5F7A 	 flds s14,.L129+72
 2020 0196 C7EE277A 	 fdivs s15,s14,s15
 2021 019a 5E4B     	 ldr r3,.L129+76
 2022 019c C3ED007A 	 fsts s15,[r3]
 2023 01a0 6FE0     	 b .L90
 2024              	.L87:
 406:../main.c     **** 		}
 407:../main.c     **** 		// CCW
 408:../main.c     **** 		else{
 409:../main.c     **** 			angle_phi = (sector*60.0)-angle_in_sector;
 2025              	 .loc 4 409 0
 2026 01a2 564B     	 ldr r3,.L129+52
 2027 01a4 1B78     	 ldrb r3,[r3]
 2028 01a6 DBB2     	 uxtb r3,r3
 2029 01a8 5BB2     	 sxtb r3,r3
 2030 01aa 1846     	 mov r0,r3
 2031 01ac FFF7FEFF 	 bl __aeabi_i2d
 2032 01b0 0246     	 mov r2,r0
 2033 01b2 0B46     	 mov r3,r1
 2034 01b4 1046     	 mov r0,r2
 2035 01b6 1946     	 mov r1,r3
 2036 01b8 4FF00002 	 mov r2,#0
 2037 01bc 504B     	 ldr r3,.L129+56
 2038 01be FFF7FEFF 	 bl __aeabi_dmul
 2039 01c2 0246     	 mov r2,r0
 2040 01c4 0B46     	 mov r3,r1
 2041 01c6 1446     	 mov r4,r2
 2042 01c8 1D46     	 mov r5,r3
 2043 01ca 474B     	 ldr r3,.L129+32
 2044 01cc 1B68     	 ldr r3,[r3]
 2045 01ce 1846     	 mov r0,r3
 2046 01d0 FFF7FEFF 	 bl __aeabi_f2d
 2047 01d4 0246     	 mov r2,r0
 2048 01d6 0B46     	 mov r3,r1
 2049 01d8 2046     	 mov r0,r4
 2050 01da 2946     	 mov r1,r5
 2051 01dc FFF7FEFF 	 bl __aeabi_dsub
 2052 01e0 0246     	 mov r2,r0
 2053 01e2 0B46     	 mov r3,r1
 2054 01e4 1046     	 mov r0,r2
 2055 01e6 1946     	 mov r1,r3
 2056 01e8 FFF7FEFF 	 bl __aeabi_d2f
 2057 01ec 0246     	 mov r2,r0
 2058 01ee 454B     	 ldr r3,.L129+60
 2059 01f0 1A60     	 str r2,[r3]
 410:../main.c     **** 			angle_phi = angle_phi+60.0;
 2060              	 .loc 4 410 0
 2061 01f2 444B     	 ldr r3,.L129+60
 2062 01f4 D3ED007A 	 flds s15,[r3]
 2063 01f8 9FED3C7A 	 flds s14,.L129+36
 2064 01fc 77EE877A 	 fadds s15,s15,s14
 2065 0200 404B     	 ldr r3,.L129+60
 2066 0202 C3ED007A 	 fsts s15,[r3]
 411:../main.c     **** 			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 2067              	 .loc 4 411 0
 2068 0206 3F4B     	 ldr r3,.L129+60
 2069 0208 D3ED007A 	 flds s15,[r3]
 2070 020c F5EEC07A 	 fcmpezs s15
 2071 0210 F1EE10FA 	 fmstat
 2072 0214 09D5     	 bpl .L91
 2073              	 .loc 4 411 0 is_stmt 0 discriminator 1
 2074 0216 3B4B     	 ldr r3,.L129+60
 2075 0218 D3ED007A 	 flds s15,[r3]
 2076 021c 9FED3B7A 	 flds s14,.L129+68
 2077 0220 77EE877A 	 fadds s15,s15,s14
 2078 0224 374B     	 ldr r3,.L129+60
 2079 0226 C3ED007A 	 fsts s15,[r3]
 2080              	.L91:
 412:../main.c     **** 			angle_phi=angle_phi+offset_neg;
 2081              	 .loc 4 412 0 is_stmt 1
 2082 022a 364B     	 ldr r3,.L129+60
 2083 022c 93ED007A 	 flds s14,[r3]
 2084 0230 394B     	 ldr r3,.L129+80
 2085 0232 D3ED007A 	 flds s15,[r3]
 2086 0236 77EE277A 	 fadds s15,s14,s15
 2087 023a 324B     	 ldr r3,.L129+60
 2088 023c C3ED007A 	 fsts s15,[r3]
 413:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2089              	 .loc 4 413 0
 2090 0240 304B     	 ldr r3,.L129+60
 2091 0242 D3ED007A 	 flds s15,[r3]
 2092 0246 9FED317A 	 flds s14,.L129+68
 2093 024a F4EEC77A 	 fcmpes s15,s14
 2094 024e F1EE10FA 	 fmstat
 2095 0252 09DD     	 ble .L93
 2096              	 .loc 4 413 0 is_stmt 0 discriminator 1
 2097 0254 2B4B     	 ldr r3,.L129+60
 2098 0256 D3ED007A 	 flds s15,[r3]
 2099 025a 9FED2C7A 	 flds s14,.L129+68
 2100 025e 77EEC77A 	 fsubs s15,s15,s14
 2101 0262 284B     	 ldr r3,.L129+60
 2102 0264 C3ED007A 	 fsts s15,[r3]
 2103              	.L93:
 414:../main.c     **** 
 415:../main.c     **** 			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
 2104              	 .loc 4 415 0 is_stmt 1
 2105 0268 1D4B     	 ldr r3,.L129+24
 2106 026a 1B68     	 ldr r3,[r3]
 2107 026c 07EE903A 	 fmsr s15,r3
 2108 0270 F8EE677A 	 fuitos s15,s15
 2109 0274 9FED297A 	 flds s14,.L129+84
 2110 0278 C7EE277A 	 fdivs s15,s14,s15
 2111 027c 254B     	 ldr r3,.L129+76
 2112 027e C3ED007A 	 fsts s15,[r3]
 2113              	.L90:
 416:../main.c     **** 		}
 417:../main.c     **** 
 418:../main.c     **** 		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large pea
 2114              	 .loc 4 418 0
 2115 0282 244B     	 ldr r3,.L129+76
 2116 0284 D3ED007A 	 flds s15,[r3]
 2117 0288 9FED257A 	 flds s14,.L129+88
 2118 028c F4EEC77A 	 fcmpes s15,s14
 2119 0290 F1EE10FA 	 fmstat
 2120 0294 0DD5     	 bpl .L95
 2121              	 .loc 4 418 0 is_stmt 0 discriminator 1
 2122 0296 1F4B     	 ldr r3,.L129+76
 2123 0298 D3ED007A 	 flds s15,[r3]
 2124 029c 9FED217A 	 flds s14,.L129+92
 2125 02a0 F4EEC77A 	 fcmpes s15,s14
 2126 02a4 F1EE10FA 	 fmstat
 2127 02a8 03DD     	 ble .L95
 419:../main.c     **** 		{
 420:../main.c     **** 			omega_mech_rps = (float)omega_mech_rps_temp;
 2128              	 .loc 4 420 0 is_stmt 1
 2129 02aa 1A4B     	 ldr r3,.L129+76
 2130 02ac 1B68     	 ldr r3,[r3]
 2131 02ae 1E4A     	 ldr r2,.L129+96
 2132 02b0 1360     	 str r3,[r2]
 2133              	.L95:
 421:../main.c     **** 		}
 422:../main.c     **** 
 423:../main.c     **** 		if(t > TIME_OMEGA_0){omega_ele_rads = 0;} // set omega  to 0 if no more hall detected
 2134              	 .loc 4 423 0
 2135 02b2 FB68     	 ldr r3,[r7,#12]
 2136 02b4 41F28832 	 movw r2,#5000
 2137 02b8 9342     	 cmp r3,r2
 2138 02ba 39D9     	 bls .L98
 2139              	 .loc 4 423 0 is_stmt 0 discriminator 1
 2140 02bc 1B4B     	 ldr r3,.L129+100
 2141 02be 4FF00002 	 mov r2,#0
 2142 02c2 1A60     	 str r2,[r3]
 2143 02c4 58E0     	 b .L99
 2144              	.L130:
 2145 02c6 00BF     	 .align 2
 2146              	.L129:
 2147 02c8 00000000 	 .word status_LED_red_cal_time
 2148 02cc 00000000 	 .word last_Hall_trig
 2149 02d0 00000000 	 .word time_since_A
 2150 02d4 00000000 	 .word time_since_B
 2151 02d8 00000000 	 .word time_since_C
 2152 02dc 00000000 	 .word time_180deg
 2153 02e0 00000000 	 .word time_180deg_cal
 2154 02e4 00806640 	 .word 1080459264
 2155 02e8 00000000 	 .word angle_in_sector
 2156 02ec 00007042 	 .word 1114636288
 2157 02f0 00007042 	 .word 1114636288
 2158 02f4 0000F041 	 .word 1106247680
 2159 02f8 00000000 	 .word direction
 2160 02fc 00000000 	 .word sector
 2161 0300 00004E40 	 .word 1078853632
 2162 0304 00000000 	 .word angle_phi
 2163 0308 00000000 	 .word offset_pos
 2164 030c 0000B443 	 .word 1135869952
 2165 0310 0000E143 	 .word 1138819072
 2166 0314 00000000 	 .word omega_mech_rps_temp
 2167 0318 00000000 	 .word offset_neg
 2168 031c 0000E1C3 	 .word -1008664576
 2169 0320 00004843 	 .word 1128792064
 2170 0324 000048C3 	 .word -1018691584
 2171 0328 00000000 	 .word omega_mech_rps
 2172 032c 00000000 	 .word omega_ele_rads
 2173              	.L98:
 424:../main.c     **** 		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s
 2174              	 .loc 4 424 0 is_stmt 1
 2175 0330 A34B     	 ldr r3,.L131+40
 2176 0332 D3ED007A 	 flds s15,[r3]
 2177 0336 77EEA77A 	 fadds s15,s15,s15
 2178 033a 17EE900A 	 fmrs r0,s15
 2179 033e FFF7FEFF 	 bl __aeabi_f2d
 2180 0342 0246     	 mov r2,r0
 2181 0344 0B46     	 mov r3,r1
 2182 0346 1046     	 mov r0,r2
 2183 0348 1946     	 mov r1,r3
 2184 034a 93A3     	 adr r3,.L131
 2185 034c D3E90023 	 ldrd r2,[r3]
 2186 0350 FFF7FEFF 	 bl __aeabi_dmul
 2187 0354 0246     	 mov r2,r0
 2188 0356 0B46     	 mov r3,r1
 2189 0358 1046     	 mov r0,r2
 2190 035a 1946     	 mov r1,r3
 2191 035c 4FF00002 	 mov r2,#0
 2192 0360 984B     	 ldr r3,.L131+44
 2193 0362 FFF7FEFF 	 bl __aeabi_dmul
 2194 0366 0246     	 mov r2,r0
 2195 0368 0B46     	 mov r3,r1
 2196 036a 1046     	 mov r0,r2
 2197 036c 1946     	 mov r1,r3
 2198 036e FFF7FEFF 	 bl __aeabi_d2f
 2199 0372 0246     	 mov r2,r0
 2200 0374 944B     	 ldr r3,.L131+48
 2201 0376 1A60     	 str r2,[r3]
 2202              	.L99:
 425:../main.c     **** 
 426:../main.c     **** 		omega_ele_degs = omega_ele_rads / Pi180;
 2203              	 .loc 4 426 0
 2204 0378 934B     	 ldr r3,.L131+48
 2205 037a 1B68     	 ldr r3,[r3]
 2206 037c 1846     	 mov r0,r3
 2207 037e FFF7FEFF 	 bl __aeabi_f2d
 2208 0382 0246     	 mov r2,r0
 2209 0384 0B46     	 mov r3,r1
 2210 0386 1046     	 mov r0,r2
 2211 0388 1946     	 mov r1,r3
 2212 038a 85A3     	 adr r3,.L131+8
 2213 038c D3E90023 	 ldrd r2,[r3]
 2214 0390 FFF7FEFF 	 bl __aeabi_ddiv
 2215 0394 0246     	 mov r2,r0
 2216 0396 0B46     	 mov r3,r1
 2217 0398 1046     	 mov r0,r2
 2218 039a 1946     	 mov r1,r3
 2219 039c FFF7FEFF 	 bl __aeabi_d2f
 2220 03a0 0246     	 mov r2,r0
 2221 03a2 8A4B     	 ldr r3,.L131+52
 2222 03a4 1A60     	 str r2,[r3]
 427:../main.c     **** 
 428:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% 
 429:../main.c     **** 
 430:../main.c     **** 		// Current read out over SPI
 431:../main.c     **** 		Current_U = readCurrent(ChipSelect_U);
 2223              	 .loc 4 431 0
 2224 03a6 0620     	 movs r0,#6
 2225 03a8 FFF7FEFF 	 bl readCurrent
 2226 03ac 0246     	 mov r2,r0
 2227 03ae 884B     	 ldr r3,.L131+56
 2228 03b0 1A60     	 str r2,[r3]
 432:../main.c     **** 		Current_V = readCurrent(ChipSelect_V);
 2229              	 .loc 4 432 0
 2230 03b2 0520     	 movs r0,#5
 2231 03b4 FFF7FEFF 	 bl readCurrent
 2232 03b8 0246     	 mov r2,r0
 2233 03ba 864B     	 ldr r3,.L131+60
 2234 03bc 1A60     	 str r2,[r3]
 433:../main.c     **** 		Current_W = readCurrent(ChipSelect_W);
 2235              	 .loc 4 433 0
 2236 03be 0320     	 movs r0,#3
 2237 03c0 FFF7FEFF 	 bl readCurrent
 2238 03c4 0246     	 mov r2,r0
 2239 03c6 844B     	 ldr r3,.L131+64
 2240 03c8 1A60     	 str r2,[r3]
 434:../main.c     **** 
 435:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of th
 436:../main.c     **** 
 437:../main.c     **** 		// conversion from rad/s to degree
 438:../main.c     **** 		float angle_phi_rad = angle_phi*Pi180;
 2241              	 .loc 4 438 0
 2242 03ca 844B     	 ldr r3,.L131+68
 2243 03cc 1B68     	 ldr r3,[r3]
 2244 03ce 1846     	 mov r0,r3
 2245 03d0 FFF7FEFF 	 bl __aeabi_f2d
 2246 03d4 0246     	 mov r2,r0
 2247 03d6 0B46     	 mov r3,r1
 2248 03d8 1046     	 mov r0,r2
 2249 03da 1946     	 mov r1,r3
 2250 03dc 70A3     	 adr r3,.L131+8
 2251 03de D3E90023 	 ldrd r2,[r3]
 2252 03e2 FFF7FEFF 	 bl __aeabi_dmul
 2253 03e6 0246     	 mov r2,r0
 2254 03e8 0B46     	 mov r3,r1
 2255 03ea 1046     	 mov r0,r2
 2256 03ec 1946     	 mov r1,r3
 2257 03ee FFF7FEFF 	 bl __aeabi_d2f
 2258 03f2 0346     	 mov r3,r0
 2259 03f4 BB60     	 str r3,[r7,#8]
 439:../main.c     **** 
 440:../main.c     **** 		// to decrease multiple calculations and computational effort
 441:../main.c     **** 		float cos_phi = cosf(angle_phi_rad);
 2260              	 .loc 4 441 0
 2261 03f6 B868     	 ldr r0,[r7,#8]
 2262 03f8 FFF7FEFF 	 bl cosf
 2263 03fc 7860     	 str r0,[r7,#4]
 442:../main.c     **** 		float sin_phi = sinf(angle_phi_rad);
 2264              	 .loc 4 442 0
 2265 03fe B868     	 ldr r0,[r7,#8]
 2266 0400 FFF7FEFF 	 bl sinf
 2267 0404 3860     	 str r0,[r7]
 443:../main.c     **** 
 444:../main.c     **** 		// Clark-Park transformation (from U,V,W to dq)
 445:../main.c     **** 		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-
 2268              	 .loc 4 445 0
 2269 0406 724B     	 ldr r3,.L131+56
 2270 0408 93ED007A 	 flds s14,[r3]
 2271 040c D7ED017A 	 flds s15,[r7,#4]
 2272 0410 27EE278A 	 fmuls s16,s14,s15
 2273 0414 B868     	 ldr r0,[r7,#8]
 2274 0416 FFF7FEFF 	 bl __aeabi_f2d
 2275 041a 0246     	 mov r2,r0
 2276 041c 0B46     	 mov r3,r1
 2277 041e 1046     	 mov r0,r2
 2278 0420 1946     	 mov r1,r3
 2279 0422 61A3     	 adr r3,.L131+16
 2280 0424 D3E90023 	 ldrd r2,[r3]
 2281 0428 FFF7FEFF 	 bl __aeabi_dsub
 2282 042c 0246     	 mov r2,r0
 2283 042e 0B46     	 mov r3,r1
 2284 0430 1046     	 mov r0,r2
 2285 0432 1946     	 mov r1,r3
 2286 0434 FFF7FEFF 	 bl __aeabi_d2f
 2287 0438 0346     	 mov r3,r0
 2288 043a 1846     	 mov r0,r3
 2289 043c FFF7FEFF 	 bl cosf
 2290 0440 07EE100A 	 fmsr s14,r0
 2291 0444 634B     	 ldr r3,.L131+60
 2292 0446 D3ED007A 	 flds s15,[r3]
 2293 044a 67EE277A 	 fmuls s15,s14,s15
 2294 044e 38EE278A 	 fadds s16,s16,s15
 2295 0452 B868     	 ldr r0,[r7,#8]
 2296 0454 FFF7FEFF 	 bl __aeabi_f2d
 2297 0458 0246     	 mov r2,r0
 2298 045a 0B46     	 mov r3,r1
 2299 045c 1046     	 mov r0,r2
 2300 045e 1946     	 mov r1,r3
 2301 0460 53A3     	 adr r3,.L131+24
 2302 0462 D3E90023 	 ldrd r2,[r3]
 2303 0466 FFF7FEFF 	 bl __aeabi_dsub
 2304 046a 0246     	 mov r2,r0
 2305 046c 0B46     	 mov r3,r1
 2306 046e 1046     	 mov r0,r2
 2307 0470 1946     	 mov r1,r3
 2308 0472 FFF7FEFF 	 bl __aeabi_d2f
 2309 0476 0346     	 mov r3,r0
 2310 0478 1846     	 mov r0,r3
 2311 047a FFF7FEFF 	 bl cosf
 2312 047e 07EE100A 	 fmsr s14,r0
 2313 0482 554B     	 ldr r3,.L131+64
 2314 0484 D3ED007A 	 flds s15,[r3]
 2315 0488 67EE277A 	 fmuls s15,s14,s15
 2316 048c 78EE277A 	 fadds s15,s16,s15
 2317 0490 17EE900A 	 fmrs r0,s15
 2318 0494 FFF7FEFF 	 bl __aeabi_f2d
 2319 0498 0246     	 mov r2,r0
 2320 049a 0B46     	 mov r3,r1
 2321 049c 1046     	 mov r0,r2
 2322 049e 1946     	 mov r1,r3
 2323 04a0 45A3     	 adr r3,.L131+32
 2324 04a2 D3E90023 	 ldrd r2,[r3]
 2325 04a6 FFF7FEFF 	 bl __aeabi_dmul
 2326 04aa 0246     	 mov r2,r0
 2327 04ac 0B46     	 mov r3,r1
 2328 04ae 1046     	 mov r0,r2
 2329 04b0 1946     	 mov r1,r3
 2330 04b2 FFF7FEFF 	 bl __aeabi_d2f
 2331 04b6 0246     	 mov r2,r0
 2332 04b8 494B     	 ldr r3,.L131+72
 2333 04ba 1A60     	 str r2,[r3]
 446:../main.c     **** 		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad
 2334              	 .loc 4 446 0
 2335 04bc D7ED007A 	 flds s15,[r7]
 2336 04c0 B1EE677A 	 fnegs s14,s15
 2337 04c4 424B     	 ldr r3,.L131+56
 2338 04c6 D3ED007A 	 flds s15,[r3]
 2339 04ca 27EE278A 	 fmuls s16,s14,s15
 2340 04ce B868     	 ldr r0,[r7,#8]
 2341 04d0 FFF7FEFF 	 bl __aeabi_f2d
 2342 04d4 0246     	 mov r2,r0
 2343 04d6 0B46     	 mov r3,r1
 2344 04d8 1046     	 mov r0,r2
 2345 04da 1946     	 mov r1,r3
 2346 04dc 32A3     	 adr r3,.L131+16
 2347 04de D3E90023 	 ldrd r2,[r3]
 2348 04e2 FFF7FEFF 	 bl __aeabi_dsub
 2349 04e6 0246     	 mov r2,r0
 2350 04e8 0B46     	 mov r3,r1
 2351 04ea 1046     	 mov r0,r2
 2352 04ec 1946     	 mov r1,r3
 2353 04ee FFF7FEFF 	 bl __aeabi_d2f
 2354 04f2 0346     	 mov r3,r0
 2355 04f4 1846     	 mov r0,r3
 2356 04f6 FFF7FEFF 	 bl sinf
 2357 04fa 07EE100A 	 fmsr s14,r0
 2358 04fe 354B     	 ldr r3,.L131+60
 2359 0500 D3ED007A 	 flds s15,[r3]
 2360 0504 67EE277A 	 fmuls s15,s14,s15
 2361 0508 38EE678A 	 fsubs s16,s16,s15
 2362 050c B868     	 ldr r0,[r7,#8]
 2363 050e FFF7FEFF 	 bl __aeabi_f2d
 2364 0512 0246     	 mov r2,r0
 2365 0514 0B46     	 mov r3,r1
 2366 0516 1046     	 mov r0,r2
 2367 0518 1946     	 mov r1,r3
 2368 051a 25A3     	 adr r3,.L131+24
 2369 051c D3E90023 	 ldrd r2,[r3]
 2370 0520 FFF7FEFF 	 bl __aeabi_dsub
 2371 0524 0246     	 mov r2,r0
 2372 0526 0B46     	 mov r3,r1
 2373 0528 1046     	 mov r0,r2
 2374 052a 1946     	 mov r1,r3
 2375 052c FFF7FEFF 	 bl __aeabi_d2f
 2376 0530 0346     	 mov r3,r0
 2377 0532 1846     	 mov r0,r3
 2378 0534 FFF7FEFF 	 bl sinf
 2379 0538 07EE100A 	 fmsr s14,r0
 2380 053c 264B     	 ldr r3,.L131+64
 2381 053e D3ED007A 	 flds s15,[r3]
 2382 0542 67EE277A 	 fmuls s15,s14,s15
 2383 0546 78EE677A 	 fsubs s15,s16,s15
 2384 054a 17EE900A 	 fmrs r0,s15
 2385 054e FFF7FEFF 	 bl __aeabi_f2d
 2386 0552 0246     	 mov r2,r0
 2387 0554 0B46     	 mov r3,r1
 2388 0556 1046     	 mov r0,r2
 2389 0558 1946     	 mov r1,r3
 2390 055a 17A3     	 adr r3,.L131+32
 2391 055c D3E90023 	 ldrd r2,[r3]
 2392 0560 FFF7FEFF 	 bl __aeabi_dmul
 2393 0564 0246     	 mov r2,r0
 2394 0566 0B46     	 mov r3,r1
 2395 0568 1046     	 mov r0,r2
 2396 056a 1946     	 mov r1,r3
 2397 056c FFF7FEFF 	 bl __aeabi_d2f
 2398 0570 0246     	 mov r2,r0
 2399 0572 1C4B     	 ldr r3,.L131+76
 2400 0574 1A60     	 str r2,[r3]
 447:../main.c     **** 
 448:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of
 449:../main.c     **** 
 450:../main.c     **** 		if(CAN_control == 1){// can control
 2401              	 .loc 4 450 0
 2402 0576 1C4B     	 ldr r3,.L131+80
 2403 0578 1B78     	 ldrb r3,[r3]
 2404 057a 012B     	 cmp r3,#1
 2405 057c 50D1     	 bne .L100
 451:../main.c     **** 
 452:../main.c     **** 			if(CAN_new_meassage == 1){
 2406              	 .loc 4 452 0
 2407 057e 1B4B     	 ldr r3,.L131+84
 2408 0580 1B78     	 ldrb r3,[r3]
 2409 0582 012B     	 cmp r3,#1
 2410 0584 38D1     	 bne .L101
 453:../main.c     **** 				speed_ref = CAN_speed_ref;
 2411              	 .loc 4 453 0
 2412 0586 1A4B     	 ldr r3,.L131+88
 2413 0588 1B68     	 ldr r3,[r3]
 2414 058a 1A4A     	 ldr r2,.L131+92
 2415 058c 1360     	 str r3,[r2]
 454:../main.c     **** 				CAN_new_meassage = 0;
 2416              	 .loc 4 454 0
 2417 058e 174B     	 ldr r3,.L131+84
 2418 0590 0022     	 movs r2,#0
 2419 0592 1A70     	 strb r2,[r3]
 2420 0594 36E0     	 b .L102
 2421              	.L132:
 2422 0596 00BF     	 .align 3
 2423              	.L131:
 2424 0598 F1D4C853 	 .word 1405670641
 2425 059c FB210940 	 .word 1074340347
 2426 05a0 4DC90777 	 .word 1996998989
 2427 05a4 46DF913F 	 .word 1066524486
 2428 05a8 A038DB37 	 .word 937113760
 2429 05ac 52C10040 	 .word 1073791314
 2430 05b0 A038DB37 	 .word 937113760
 2431 05b4 52C11040 	 .word 1074839890
 2432 05b8 93761F57 	 .word 1461679763
 2433 05bc 5555E53F 	 .word 1071994197
 2434 05c0 00000000 	 .word omega_mech_rps
 2435 05c4 00002640 	 .word 1076232192
 2436 05c8 00000000 	 .word omega_ele_rads
 2437 05cc 00000000 	 .word omega_ele_degs
 2438 05d0 00000000 	 .word Current_U
 2439 05d4 00000000 	 .word Current_V
 2440 05d8 00000000 	 .word Current_W
 2441 05dc 00000000 	 .word angle_phi
 2442 05e0 00000000 	 .word id
 2443 05e4 00000000 	 .word iq
 2444 05e8 00000000 	 .word CAN_control
 2445 05ec 00000000 	 .word CAN_new_meassage
 2446 05f0 00000000 	 .word CAN_speed_ref
 2447 05f4 00000000 	 .word speed_ref
 2448              	.L101:
 455:../main.c     **** 			}
 456:../main.c     **** 			else{
 457:../main.c     **** 				CAN_no_com_counter ++;
 2449              	 .loc 4 457 0
 2450 05f8 B34B     	 ldr r3,.L133+32
 2451 05fa 1B78     	 ldrb r3,[r3]
 2452 05fc 0133     	 adds r3,r3,#1
 2453 05fe DAB2     	 uxtb r2,r3
 2454 0600 B14B     	 ldr r3,.L133+32
 2455 0602 1A70     	 strb r2,[r3]
 2456              	.L102:
 458:../main.c     **** 			}
 459:../main.c     **** 
 460:../main.c     **** 			if(CAN_no_com_counter > CAN_NO_COM_TH){
 2457              	 .loc 4 460 0
 2458 0604 B04B     	 ldr r3,.L133+32
 2459 0606 1B78     	 ldrb r3,[r3]
 2460 0608 FA2B     	 cmp r3,#250
 2461 060a 09D9     	 bls .L100
 461:../main.c     **** 				CAN_new_meassage = 0;
 2462              	 .loc 4 461 0
 2463 060c AF4B     	 ldr r3,.L133+36
 2464 060e 0022     	 movs r2,#0
 2465 0610 1A70     	 strb r2,[r3]
 462:../main.c     **** 				CAN_no_com_counter = CAN_NO_COM_TH;
 2466              	 .loc 4 462 0
 2467 0612 AD4B     	 ldr r3,.L133+32
 2468 0614 FA22     	 movs r2,#250
 2469 0616 1A70     	 strb r2,[r3]
 463:../main.c     **** 				speed_ref = 0;
 2470              	 .loc 4 463 0
 2471 0618 AD4B     	 ldr r3,.L133+40
 2472 061a 4FF00002 	 mov r2,#0
 2473 061e 1A60     	 str r2,[r3]
 2474              	.L100:
 464:../main.c     **** 			}
 465:../main.c     **** 		}
 466:../main.c     **** 
 467:../main.c     **** 		omega_ele_rads_ref = ( speed_ref * PPZ ) / WHEEL_R;
 2475              	 .loc 4 467 0
 2476 0620 AB4B     	 ldr r3,.L133+40
 2477 0622 D3ED007A 	 flds s15,[r3]
 2478 0626 B2EE067A 	 fconsts s14,#38
 2479 062a 67EE877A 	 fmuls s15,s15,s14
 2480 062e 17EE900A 	 fmrs r0,s15
 2481 0632 FFF7FEFF 	 bl __aeabi_f2d
 2482 0636 0246     	 mov r2,r0
 2483 0638 0B46     	 mov r3,r1
 2484 063a 1046     	 mov r0,r2
 2485 063c 1946     	 mov r1,r3
 2486 063e 9AA3     	 adr r3,.L133
 2487 0640 D3E90023 	 ldrd r2,[r3]
 2488 0644 FFF7FEFF 	 bl __aeabi_ddiv
 2489 0648 0246     	 mov r2,r0
 2490 064a 0B46     	 mov r3,r1
 2491 064c 1046     	 mov r0,r2
 2492 064e 1946     	 mov r1,r3
 2493 0650 FFF7FEFF 	 bl __aeabi_d2f
 2494 0654 0246     	 mov r2,r0
 2495 0656 9F4B     	 ldr r3,.L133+44
 2496 0658 1A60     	 str r2,[r3]
 468:../main.c     **** 
 469:../main.c     **** 		if((omega_ele_rads_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rad
 2497              	 .loc 4 469 0
 2498 065a 9E4B     	 ldr r3,.L133+44
 2499 065c D3ED007A 	 flds s15,[r3]
 2500 0660 F5EE407A 	 fcmpzs s15
 2501 0664 F1EE10FA 	 fmstat
 2502 0668 1CD1     	 bne .L103
 2503              	 .loc 4 469 0 is_stmt 0 discriminator 1
 2504 066a 9B4B     	 ldr r3,.L133+48
 2505 066c 1B78     	 ldrb r3,[r3]
 2506 066e 012B     	 cmp r3,#1
 2507 0670 18D1     	 bne .L103
 2508              	 .loc 4 469 0 discriminator 2
 2509 0672 9A4B     	 ldr r3,.L133+52
 2510 0674 D3ED007A 	 flds s15,[r3]
 2511 0678 9FED997A 	 flds s14,.L133+56
 2512 067c F4EEC77A 	 fcmpes s15,s14
 2513 0680 F1EE10FA 	 fmstat
 2514 0684 0EDD     	 ble .L103
 2515              	 .loc 4 469 0 discriminator 3
 2516 0686 954B     	 ldr r3,.L133+52
 2517 0688 D3ED007A 	 flds s15,[r3]
 2518 068c 9FED957A 	 flds s14,.L133+60
 2519 0690 F4EEC77A 	 fcmpes s15,s14
 2520 0694 F1EE10FA 	 fmstat
 2521 0698 04D5     	 bpl .L103
 470:../main.c     **** 			T_ref = 0;
 2522              	 .loc 4 470 0 is_stmt 1
 2523 069a 934B     	 ldr r3,.L133+64
 2524 069c 4FF00002 	 mov r2,#0
 2525 06a0 1A60     	 str r2,[r3]
 2526 06a2 0BE0     	 b .L106
 2527              	.L103:
 471:../main.c     **** 		}
 472:../main.c     **** 		else{
 473:../main.c     **** 			if(MOTOR_NUM == 1){
 474:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param_1); // outer control loop q f
 475:../main.c     **** 			}
 476:../main.c     **** 			else{
 477:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param);
 2528              	 .loc 4 477 0
 2529 06a4 8B4B     	 ldr r3,.L133+44
 2530 06a6 1A68     	 ldr r2,[r3]
 2531 06a8 8C4B     	 ldr r3,.L133+52
 2532 06aa 1B68     	 ldr r3,[r3]
 2533 06ac 1046     	 mov r0,r2
 2534 06ae 1946     	 mov r1,r3
 2535 06b0 8E4A     	 ldr r2,.L133+68
 2536 06b2 FFF7FEFF 	 bl PID_Controller
 2537 06b6 0246     	 mov r2,r0
 2538 06b8 8B4B     	 ldr r3,.L133+64
 2539 06ba 1A60     	 str r2,[r3]
 2540              	.L106:
 478:../main.c     **** 			}
 479:../main.c     **** 		}
 480:../main.c     **** 
 481:../main.c     **** 		if (Speed_control == 1){ // 1 speed contola aktive 0 not aktive torqe contol aktive
 2541              	 .loc 4 481 0
 2542 06bc 864B     	 ldr r3,.L133+48
 2543 06be 1B78     	 ldrb r3,[r3]
 2544 06c0 012B     	 cmp r3,#1
 2545 06c2 1BD1     	 bne .L107
 482:../main.c     **** 			if(MOTOR_NUM == 1) {
 483:../main.c     **** 				iq_ref =  T_ref / K_T; // dirction for motor 1
 484:../main.c     **** 			}
 485:../main.c     **** 			else{
 486:../main.c     **** 				iq_ref = - T_ref / K_T;// dirction for motor 1
 2546              	 .loc 4 486 0
 2547 06c4 884B     	 ldr r3,.L133+64
 2548 06c6 D3ED007A 	 flds s15,[r3]
 2549 06ca F1EE677A 	 fnegs s15,s15
 2550 06ce 17EE903A 	 fmrs r3,s15
 2551 06d2 1846     	 mov r0,r3
 2552 06d4 FFF7FEFF 	 bl __aeabi_f2d
 2553 06d8 0246     	 mov r2,r0
 2554 06da 0B46     	 mov r3,r1
 2555 06dc 1046     	 mov r0,r2
 2556 06de 1946     	 mov r1,r3
 2557 06e0 73A3     	 adr r3,.L133+8
 2558 06e2 D3E90023 	 ldrd r2,[r3]
 2559 06e6 FFF7FEFF 	 bl __aeabi_ddiv
 2560 06ea 0246     	 mov r2,r0
 2561 06ec 0B46     	 mov r3,r1
 2562 06ee 1046     	 mov r0,r2
 2563 06f0 1946     	 mov r1,r3
 2564 06f2 FFF7FEFF 	 bl __aeabi_d2f
 2565 06f6 0246     	 mov r2,r0
 2566 06f8 7D4B     	 ldr r3,.L133+72
 2567 06fa 1A60     	 str r2,[r3]
 2568              	.L107:
 487:../main.c     **** 			}
 488:../main.c     **** 		}
 489:../main.c     **** 
 490:../main.c     **** 		//saturation to IQ_REF_MAC limit
 491:../main.c     **** 		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 2569              	 .loc 4 491 0
 2570 06fc 7C4B     	 ldr r3,.L133+72
 2571 06fe D3ED007A 	 flds s15,[r3]
 2572 0702 B9EE047A 	 fconsts s14,#148
 2573 0706 F4EEC77A 	 fcmpes s15,s14
 2574 070a F1EE10FA 	 fmstat
 2575 070e 02D5     	 bpl .L108
 2576              	 .loc 4 491 0 is_stmt 0 discriminator 1
 2577 0710 774B     	 ldr r3,.L133+72
 2578 0712 784A     	 ldr r2,.L133+76
 2579 0714 1A60     	 str r2,[r3]
 2580              	.L108:
 492:../main.c     **** 		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 2581              	 .loc 4 492 0 is_stmt 1
 2582 0716 764B     	 ldr r3,.L133+72
 2583 0718 D3ED007A 	 flds s15,[r3]
 2584 071c B1EE047A 	 fconsts s14,#20
 2585 0720 F4EEC77A 	 fcmpes s15,s14
 2586 0724 F1EE10FA 	 fmstat
 2587 0728 02DD     	 ble .L110
 2588              	 .loc 4 492 0 is_stmt 0 discriminator 1
 2589 072a 714B     	 ldr r3,.L133+72
 2590 072c 724A     	 ldr r2,.L133+80
 2591 072e 1A60     	 str r2,[r3]
 2592              	.L110:
 493:../main.c     **** 
 494:../main.c     **** 		Vd_ref = PID_Controller(0.0,id,&Id_param);
 2593              	 .loc 4 494 0 is_stmt 1
 2594 0730 724B     	 ldr r3,.L133+84
 2595 0732 1B68     	 ldr r3,[r3]
 2596 0734 4FF00000 	 mov r0,#0
 2597 0738 1946     	 mov r1,r3
 2598 073a 714A     	 ldr r2,.L133+88
 2599 073c FFF7FEFF 	 bl PID_Controller
 2600 0740 0246     	 mov r2,r0
 2601 0742 704B     	 ldr r3,.L133+92
 2602 0744 1A60     	 str r2,[r3]
 495:../main.c     **** 		Vq_ref = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
 2603              	 .loc 4 495 0
 2604 0746 6A4B     	 ldr r3,.L133+72
 2605 0748 1A68     	 ldr r2,[r3]
 2606 074a 6F4B     	 ldr r3,.L133+96
 2607 074c 1B68     	 ldr r3,[r3]
 2608 074e 1046     	 mov r0,r2
 2609 0750 1946     	 mov r1,r3
 2610 0752 6E4A     	 ldr r2,.L133+100
 2611 0754 FFF7FEFF 	 bl PID_Controller
 2612 0758 0246     	 mov r2,r0
 2613 075a 6D4B     	 ldr r3,.L133+104
 2614 075c 1A60     	 str r2,[r3]
 496:../main.c     **** 
 497:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9
 498:../main.c     **** 
 499:../main.c     **** 		// dq to alpha beta for voltage
 500:../main.c     **** 		Valpha = Vd_ref*cos_phi - Vq_ref*sin_phi;
 2615              	 .loc 4 500 0
 2616 075e 694B     	 ldr r3,.L133+92
 2617 0760 93ED007A 	 flds s14,[r3]
 2618 0764 D7ED017A 	 flds s15,[r7,#4]
 2619 0768 27EE277A 	 fmuls s14,s14,s15
 2620 076c 684B     	 ldr r3,.L133+104
 2621 076e D3ED006A 	 flds s13,[r3]
 2622 0772 D7ED007A 	 flds s15,[r7]
 2623 0776 66EEA77A 	 fmuls s15,s13,s15
 2624 077a 77EE677A 	 fsubs s15,s14,s15
 2625 077e 654B     	 ldr r3,.L133+108
 2626 0780 C3ED007A 	 fsts s15,[r3]
 501:../main.c     **** 		Vbeta = Vd_ref*sin_phi + Vq_ref*cos_phi;
 2627              	 .loc 4 501 0
 2628 0784 5F4B     	 ldr r3,.L133+92
 2629 0786 93ED007A 	 flds s14,[r3]
 2630 078a D7ED007A 	 flds s15,[r7]
 2631 078e 27EE277A 	 fmuls s14,s14,s15
 2632 0792 5F4B     	 ldr r3,.L133+104
 2633 0794 D3ED006A 	 flds s13,[r3]
 2634 0798 D7ED017A 	 flds s15,[r7,#4]
 2635 079c 66EEA77A 	 fmuls s15,s13,s15
 2636 07a0 77EE277A 	 fadds s15,s14,s15
 2637 07a4 5C4B     	 ldr r3,.L133+112
 2638 07a6 C3ED007A 	 fsts s15,[r3]
 502:../main.c     **** 
 503:../main.c     **** 		// calc angle for SVM app
 504:../main.c     **** 		angle_ab_rad = atanf(Vbeta/Valpha);
 2639              	 .loc 4 504 0
 2640 07aa 5B4B     	 ldr r3,.L133+112
 2641 07ac 93ED007A 	 flds s14,[r3]
 2642 07b0 584B     	 ldr r3,.L133+108
 2643 07b2 D3ED007A 	 flds s15,[r3]
 2644 07b6 C7EE277A 	 fdivs s15,s14,s15
 2645 07ba 17EE900A 	 fmrs r0,s15
 2646 07be FFF7FEFF 	 bl atanf
 2647 07c2 0246     	 mov r2,r0
 2648 07c4 554B     	 ldr r3,.L133+116
 2649 07c6 1A60     	 str r2,[r3]
 505:../main.c     **** 		angle_ab = angle_ab_rad/Pi180;
 2650              	 .loc 4 505 0
 2651 07c8 544B     	 ldr r3,.L133+116
 2652 07ca 1B68     	 ldr r3,[r3]
 2653 07cc 1846     	 mov r0,r3
 2654 07ce FFF7FEFF 	 bl __aeabi_f2d
 2655 07d2 0246     	 mov r2,r0
 2656 07d4 0B46     	 mov r3,r1
 2657 07d6 1046     	 mov r0,r2
 2658 07d8 1946     	 mov r1,r3
 2659 07da 37A3     	 adr r3,.L133+16
 2660 07dc D3E90023 	 ldrd r2,[r3]
 2661 07e0 FFF7FEFF 	 bl __aeabi_ddiv
 2662 07e4 0246     	 mov r2,r0
 2663 07e6 0B46     	 mov r3,r1
 2664 07e8 1046     	 mov r0,r2
 2665 07ea 1946     	 mov r1,r3
 2666 07ec FFF7FEFF 	 bl __aeabi_d2f
 2667 07f0 0246     	 mov r2,r0
 2668 07f2 4B4B     	 ldr r3,.L133+120
 2669 07f4 1A60     	 str r2,[r3]
 506:../main.c     **** 
 507:../main.c     **** 		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 2670              	 .loc 4 507 0
 2671 07f6 474B     	 ldr r3,.L133+108
 2672 07f8 D3ED007A 	 flds s15,[r3]
 2673 07fc F5EEC07A 	 fcmpezs s15
 2674 0800 F1EE10FA 	 fmstat
 2675 0804 0AD5     	 bpl .L128
 2676              	 .loc 4 507 0 is_stmt 0 discriminator 1
 2677 0806 464B     	 ldr r3,.L133+120
 2678 0808 D3ED007A 	 flds s15,[r3]
 2679 080c 9FED457A 	 flds s14,.L133+124
 2680 0810 77EE877A 	 fadds s15,s15,s14
 2681 0814 424B     	 ldr r3,.L133+120
 2682 0816 C3ED007A 	 fsts s15,[r3]
 2683 081a 11E0     	 b .L114
 2684              	.L128:
 508:../main.c     **** 		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 2685              	 .loc 4 508 0 is_stmt 1
 2686 081c 3E4B     	 ldr r3,.L133+112
 2687 081e D3ED007A 	 flds s15,[r3]
 2688 0822 F5EEC07A 	 fcmpezs s15
 2689 0826 F1EE10FA 	 fmstat
 2690 082a 09D5     	 bpl .L114
 2691              	 .loc 4 508 0 is_stmt 0 discriminator 1
 2692 082c 3C4B     	 ldr r3,.L133+120
 2693 082e D3ED007A 	 flds s15,[r3]
 2694 0832 9FED3D7A 	 flds s14,.L133+128
 2695 0836 77EE877A 	 fadds s15,s15,s14
 2696 083a 394B     	 ldr r3,.L133+120
 2697 083c C3ED007A 	 fsts s15,[r3]
 2698              	.L114:
 509:../main.c     **** 
 510:../main.c     **** 		/*  shortend to one line
 511:../main.c     **** 		// amplitude calculation
 512:../main.c     **** 		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 513:../main.c     **** 
 514:../main.c     **** 		//K_inv = V/m --> m = V / K_inv
 515:../main.c     **** 		modulation_index = amplitude_ab/K_inv;
 516:../main.c     **** 
 517:../main.c     **** 		//scale maximum 1 to 10000 -->
 518:../main.c     **** 		modulation_index_scaled = 10000*modulation_index;
 519:../main.c     **** 
 520:../main.c     **** 		*/
 521:../main.c     **** 		// shortened ca 4% improvemnt
 522:../main.c     **** 		modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;
 2699              	 .loc 4 522 0 is_stmt 1
 2700 0840 344B     	 ldr r3,.L133+108
 2701 0842 93ED007A 	 flds s14,[r3]
 2702 0846 334B     	 ldr r3,.L133+108
 2703 0848 D3ED007A 	 flds s15,[r3]
 2704 084c 27EE277A 	 fmuls s14,s14,s15
 2705 0850 314B     	 ldr r3,.L133+112
 2706 0852 D3ED006A 	 flds s13,[r3]
 2707 0856 304B     	 ldr r3,.L133+112
 2708 0858 D3ED007A 	 flds s15,[r3]
 2709 085c 66EEA77A 	 fmuls s15,s13,s15
 2710 0860 77EE277A 	 fadds s15,s14,s15
 2711 0864 17EE900A 	 fmrs r0,s15
 2712 0868 FFF7FEFF 	 bl sqrtf
 2713 086c 0346     	 mov r3,r0
 2714 086e 1846     	 mov r0,r3
 2715 0870 FFF7FEFF 	 bl __aeabi_f2d
 2716 0874 0246     	 mov r2,r0
 2717 0876 0B46     	 mov r3,r1
 2718 0878 1046     	 mov r0,r2
 2719 087a 1946     	 mov r1,r3
 2720 087c 10A3     	 adr r3,.L133+24
 2721 087e D3E90023 	 ldrd r2,[r3]
 2722 0882 FFF7FEFF 	 bl __aeabi_dmul
 2723 0886 0246     	 mov r2,r0
 2724 0888 0B46     	 mov r3,r1
 2725 088a 1046     	 mov r0,r2
 2726 088c 1946     	 mov r1,r3
 2727 088e FFF7FEFF 	 bl __aeabi_d2f
 2728 0892 0246     	 mov r2,r0
 2729 0894 254B     	 ldr r3,.L133+132
 2730 0896 1A60     	 str r2,[r3]
 523:../main.c     **** 
 524:../main.c     **** 		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the ti
 2731              	 .loc 4 524 0
 2732 0898 2548     	 ldr r0,.L133+136
 2733 089a FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 525:../main.c     **** 
 526:../main.c     **** }
 2734              	 .loc 4 526 0
 2735 089e 1037     	 adds r7,r7,#16
 2736              	.LCFI84:
 2737              	 .cfi_def_cfa_offset 24
 2738 08a0 BD46     	 mov sp,r7
 2739              	.LCFI85:
 2740              	 .cfi_def_cfa_register 13
 2741              	 
 2742 08a2 BDEC028B 	 fldmfdd sp!,{d8}
 2743              	.LCFI86:
 2744              	 .cfi_restore 80
 2745              	 .cfi_restore 81
 2746              	 .cfi_def_cfa_offset 16
 2747 08a6 B0BD     	 pop {r4,r5,r7,pc}
 2748              	.L134:
 2749              	 .align 3
 2750              	.L133:
 2751 08a8 48E17A14 	 .word 343597384
 2752 08ac AE47B13F 	 .word 1068582830
 2753 08b0 E17A14AE 	 .word -1374389535
 2754 08b4 47E1CA3F 	 .word 1070260551
 2755 08b8 4DC90777 	 .word 1996998989
 2756 08bc 46DF913F 	 .word 1066524486
 2757 08c0 1361C3D3 	 .word -742170349
 2758 08c4 AB0A8240 	 .word 1082264235
 2759 08c8 00000000 	 .word CAN_no_com_counter
 2760 08cc 00000000 	 .word CAN_new_meassage
 2761 08d0 00000000 	 .word speed_ref
 2762 08d4 00000000 	 .word omega_ele_rads_ref
 2763 08d8 00000000 	 .word Speed_control
 2764 08dc 00000000 	 .word omega_ele_rads
 2765 08e0 000048C3 	 .word -1018691584
 2766 08e4 00004843 	 .word 1128792064
 2767 08e8 00000000 	 .word T_ref
 2768 08ec 00000000 	 .word T_param
 2769 08f0 00000000 	 .word iq_ref
 2770 08f4 0000A0C0 	 .word -1063256064
 2771 08f8 0000A040 	 .word 1084227584
 2772 08fc 00000000 	 .word id
 2773 0900 00000000 	 .word Id_param
 2774 0904 00000000 	 .word Vd_ref
 2775 0908 00000000 	 .word iq
 2776 090c 00000000 	 .word Iq_param
 2777 0910 00000000 	 .word Vq_ref
 2778 0914 00000000 	 .word Valpha
 2779 0918 00000000 	 .word Vbeta
 2780 091c 00000000 	 .word angle_ab_rad
 2781 0920 00000000 	 .word angle_ab
 2782 0924 00003443 	 .word 1127481344
 2783 0928 0000B443 	 .word 1135869952
 2784 092c 00000000 	 .word modulation_index_scaled
 2785 0930 00000000 	 .word status_LED_red_cal_time
 2786              	 .cfi_endproc
 2787              	.LFE485:
 2789 0934 AFF30080 	 .section .text.PID_Controller,"ax",%progbits
 2790              	 .align 2
 2791              	 .global PID_Controller
 2792              	 .thumb
 2793              	 .thumb_func
 2795              	PID_Controller:
 2796              	.LFB486:
 527:../main.c     **** 
 528:../main.c     **** // PID Controller
 529:../main.c     **** float PID_Controller(float SetPoint,float ActValue,PID_param *param){
 2797              	 .loc 4 529 0
 2798              	 .cfi_startproc
 2799              	 
 2800              	 
 2801              	 
 2802 0000 80B4     	 push {r7}
 2803              	.LCFI87:
 2804              	 .cfi_def_cfa_offset 4
 2805              	 .cfi_offset 7,-4
 2806 0002 89B0     	 sub sp,sp,#36
 2807              	.LCFI88:
 2808              	 .cfi_def_cfa_offset 40
 2809 0004 00AF     	 add r7,sp,#0
 2810              	.LCFI89:
 2811              	 .cfi_def_cfa_register 7
 2812 0006 F860     	 str r0,[r7,#12]
 2813 0008 B960     	 str r1,[r7,#8]
 2814 000a 7A60     	 str r2,[r7,#4]
 530:../main.c     **** 
 531:../main.c     **** 	float Deviation = SetPoint - ActValue;
 2815              	 .loc 4 531 0
 2816 000c 97ED037A 	 flds s14,[r7,#12]
 2817 0010 D7ED027A 	 flds s15,[r7,#8]
 2818 0014 77EE677A 	 fsubs s15,s14,s15
 2819 0018 C7ED067A 	 fsts s15,[r7,#24]
 532:../main.c     **** 	float temp1, temp2;
 533:../main.c     **** 
 534:../main.c     **** 	 temp1 = param->P*Deviation;
 2820              	 .loc 4 534 0
 2821 001c 7B68     	 ldr r3,[r7,#4]
 2822 001e 93ED007A 	 flds s14,[r3]
 2823 0022 D7ED067A 	 flds s15,[r7,#24]
 2824 0026 67EE277A 	 fmuls s15,s14,s15
 2825 002a C7ED057A 	 fsts s15,[r7,#20]
 535:../main.c     **** 	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;
 2826              	 .loc 4 535 0
 2827 002e 7B68     	 ldr r3,[r7,#4]
 2828 0030 93ED017A 	 flds s14,[r3,#4]
 2829 0034 214B     	 ldr r3,.L144
 2830 0036 D3ED007A 	 flds s15,[r3]
 2831 003a 27EE277A 	 fmuls s14,s14,s15
 2832 003e D7ED067A 	 flds s15,[r7,#24]
 2833 0042 27EE277A 	 fmuls s14,s14,s15
 2834 0046 D7ED057A 	 flds s15,[r7,#20]
 2835 004a 37EE277A 	 fadds s14,s14,s15
 2836 004e 7B68     	 ldr r3,[r7,#4]
 2837 0050 D3ED087A 	 flds s15,[r3,#32]
 2838 0054 77EE277A 	 fadds s15,s14,s15
 2839 0058 C7ED077A 	 fsts s15,[r7,#28]
 536:../main.c     **** 
 537:../main.c     **** 	 if (temp2 >= param->MaxLimit){
 2840              	 .loc 4 537 0
 2841 005c 7B68     	 ldr r3,[r7,#4]
 2842 005e 93ED037A 	 flds s14,[r3,#12]
 2843 0062 D7ED077A 	 flds s15,[r7,#28]
 2844 0066 B4EEE77A 	 fcmpes s14,s15
 2845 006a F1EE10FA 	 fmstat
 2846 006e 03D8     	 bhi .L143
 538:../main.c     **** 		 temp2 = param->MaxLimit;
 2847              	 .loc 4 538 0
 2848 0070 7B68     	 ldr r3,[r7,#4]
 2849 0072 DB68     	 ldr r3,[r3,#12]
 2850 0074 FB61     	 str r3,[r7,#28]
 2851 0076 0CE0     	 b .L138
 2852              	.L143:
 539:../main.c     **** 	 }
 540:../main.c     **** 	 else if (temp2 < param->MinLimit){
 2853              	 .loc 4 540 0
 2854 0078 7B68     	 ldr r3,[r7,#4]
 2855 007a 93ED047A 	 flds s14,[r3,#16]
 2856 007e D7ED077A 	 flds s15,[r7,#28]
 2857 0082 B4EEE77A 	 fcmpes s14,s15
 2858 0086 F1EE10FA 	 fmstat
 2859 008a 02DD     	 ble .L138
 541:../main.c     **** 		 temp2 = param->MinLimit;
 2860              	 .loc 4 541 0
 2861 008c 7B68     	 ldr r3,[r7,#4]
 2862 008e 1B69     	 ldr r3,[r3,#16]
 2863 0090 FB61     	 str r3,[r7,#28]
 2864              	.L138:
 542:../main.c     **** 	 }
 543:../main.c     **** 
 544:../main.c     **** 	 param->Output_z = temp2 - temp1;
 2865              	 .loc 4 544 0
 2866 0092 97ED077A 	 flds s14,[r7,#28]
 2867 0096 D7ED057A 	 flds s15,[r7,#20]
 2868 009a 77EE677A 	 fsubs s15,s14,s15
 2869 009e 7B68     	 ldr r3,[r7,#4]
 2870 00a0 C3ED087A 	 fsts s15,[r3,#32]
 545:../main.c     **** 
 546:../main.c     **** 	 param->Output = temp2;
 2871              	 .loc 4 546 0
 2872 00a4 7B68     	 ldr r3,[r7,#4]
 2873 00a6 FA69     	 ldr r2,[r7,#28]
 2874 00a8 5A61     	 str r2,[r3,#20]
 547:../main.c     **** 
 548:../main.c     **** 	return param->Output;
 2875              	 .loc 4 548 0
 2876 00aa 7B68     	 ldr r3,[r7,#4]
 2877 00ac 5B69     	 ldr r3,[r3,#20]
 549:../main.c     **** 
 550:../main.c     **** }
 2878              	 .loc 4 550 0
 2879 00ae 1846     	 mov r0,r3
 2880 00b0 2437     	 adds r7,r7,#36
 2881              	.LCFI90:
 2882              	 .cfi_def_cfa_offset 4
 2883 00b2 BD46     	 mov sp,r7
 2884              	.LCFI91:
 2885              	 .cfi_def_cfa_register 13
 2886              	 
 2887 00b4 5DF8047B 	 ldr r7,[sp],#4
 2888              	.LCFI92:
 2889              	 .cfi_restore 7
 2890              	 .cfi_def_cfa_offset 0
 2891 00b8 7047     	 bx lr
 2892              	.L145:
 2893 00ba 00BF     	 .align 2
 2894              	.L144:
 2895 00bc 00000000 	 .word Tcyc
 2896              	 .cfi_endproc
 2897              	.LFE486:
 2899              	 .section .text.readCurrent,"ax",%progbits
 2900              	 .align 2
 2901              	 .global readCurrent
 2902              	 .thumb
 2903              	 .thumb_func
 2905              	readCurrent:
 2906              	.LFB487:
 551:../main.c     **** 
 552:../main.c     **** 
 553:../main.c     **** //Read Current  via SPI-Interface
 554:../main.c     **** float readCurrent(uint8_t ChipSelect){
 2907              	 .loc 4 554 0
 2908              	 .cfi_startproc
 2909              	 
 2910              	 
 2911 0000 80B5     	 push {r7,lr}
 2912              	.LCFI93:
 2913              	 .cfi_def_cfa_offset 8
 2914              	 .cfi_offset 7,-8
 2915              	 .cfi_offset 14,-4
 2916 0002 86B0     	 sub sp,sp,#24
 2917              	.LCFI94:
 2918              	 .cfi_def_cfa_offset 32
 2919 0004 00AF     	 add r7,sp,#0
 2920              	.LCFI95:
 2921              	 .cfi_def_cfa_register 7
 2922 0006 0346     	 mov r3,r0
 2923 0008 FB71     	 strb r3,[r7,#7]
 555:../main.c     **** 	uint8_t ReadData[2];
 556:../main.c     **** 
 557:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, ChipSelect);
 2924              	 .loc 4 557 0
 2925 000a FB79     	 ldrb r3,[r7,#7]
 2926 000c 9BB2     	 uxth r3,r3
 2927 000e 2248     	 ldr r0,.L148
 2928 0010 1946     	 mov r1,r3
 2929 0012 FFF7FEFF 	 bl BUS_IO_Write
 558:../main.c     **** 	SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2U);
 2930              	 .loc 4 558 0
 2931 0016 07F10C03 	 add r3,r7,#12
 2932 001a 2048     	 ldr r0,.L148+4
 2933 001c 1946     	 mov r1,r3
 2934 001e 0222     	 movs r2,#2
 2935 0020 FFF7FEFF 	 bl SPI_MASTER_Receive
 559:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, 0b111);
 2936              	 .loc 4 559 0
 2937 0024 1C48     	 ldr r0,.L148
 2938 0026 0721     	 movs r1,#7
 2939 0028 FFF7FEFF 	 bl BUS_IO_Write
 560:../main.c     **** 	ReadData[0] = ReadData[0] & 0X1F; 									//cutting away the 3 info bits
 2940              	 .loc 4 560 0
 2941 002c 3B7B     	 ldrb r3,[r7,#12]
 2942 002e 03F01F03 	 and r3,r3,#31
 2943 0032 DBB2     	 uxtb r3,r3
 2944 0034 3B73     	 strb r3,[r7,#12]
 561:../main.c     **** 	uint16_t iCurrent = ReadData[0]<<8 | ReadData[1];					//combine Data
 2945              	 .loc 4 561 0
 2946 0036 3B7B     	 ldrb r3,[r7,#12]
 2947 0038 1B02     	 lsls r3,r3,#8
 2948 003a 9AB2     	 uxth r2,r3
 2949 003c 7B7B     	 ldrb r3,[r7,#13]
 2950 003e 9BB2     	 uxth r3,r3
 2951 0040 1343     	 orrs r3,r3,r2
 2952 0042 9BB2     	 uxth r3,r3
 2953 0044 FB82     	 strh r3,[r7,#22]
 562:../main.c     **** 
 563:../main.c     **** 	// calculation of the current
 564:../main.c     **** 	float fCurrent = ((float)iCurrent - 4096.0)/160.0;					// ATTENTION: value has to be divided by 16
 2954              	 .loc 4 564 0
 2955 0046 FB8A     	 ldrh r3,[r7,#22]
 2956 0048 07EE903A 	 fmsr s15,r3
 2957 004c F8EE677A 	 fuitos s15,s15
 2958 0050 17EE900A 	 fmrs r0,s15
 2959 0054 FFF7FEFF 	 bl __aeabi_f2d
 2960 0058 0246     	 mov r2,r0
 2961 005a 0B46     	 mov r3,r1
 2962 005c 1046     	 mov r0,r2
 2963 005e 1946     	 mov r1,r3
 2964 0060 4FF00002 	 mov r2,#0
 2965 0064 0E4B     	 ldr r3,.L148+8
 2966 0066 FFF7FEFF 	 bl __aeabi_dsub
 2967 006a 0246     	 mov r2,r0
 2968 006c 0B46     	 mov r3,r1
 2969 006e 1046     	 mov r0,r2
 2970 0070 1946     	 mov r1,r3
 2971 0072 4FF00002 	 mov r2,#0
 2972 0076 0B4B     	 ldr r3,.L148+12
 2973 0078 FFF7FEFF 	 bl __aeabi_ddiv
 2974 007c 0246     	 mov r2,r0
 2975 007e 0B46     	 mov r3,r1
 2976 0080 1046     	 mov r0,r2
 2977 0082 1946     	 mov r1,r3
 2978 0084 FFF7FEFF 	 bl __aeabi_d2f
 2979 0088 0346     	 mov r3,r0
 2980 008a 3B61     	 str r3,[r7,#16]
 565:../main.c     **** 
 566:../main.c     **** 	return fCurrent;
 2981              	 .loc 4 566 0
 2982 008c 3B69     	 ldr r3,[r7,#16]
 567:../main.c     **** }
 2983              	 .loc 4 567 0
 2984 008e 1846     	 mov r0,r3
 2985 0090 1837     	 adds r7,r7,#24
 2986              	.LCFI96:
 2987              	 .cfi_def_cfa_offset 8
 2988 0092 BD46     	 mov sp,r7
 2989              	.LCFI97:
 2990              	 .cfi_def_cfa_register 13
 2991              	 
 2992 0094 80BD     	 pop {r7,pc}
 2993              	.L149:
 2994 0096 00BF     	 .align 2
 2995              	.L148:
 2996 0098 00000000 	 .word SPI_ChipSelect
 2997 009c 00000000 	 .word SPI_MASTER_0
 2998 00a0 0000B040 	 .word 1085276160
 2999 00a4 00006440 	 .word 1080295424
 3000              	 .cfi_endproc
 3001              	.LFE487:
 3003              	 .text
 3004              	.Letext0:
 3005              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3006              	 .file 6 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3007              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3008              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 3009              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_scu.h"
 3010              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 3011              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_spi.h"
 3012              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master.h"
 3013              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io.h"
 3014              	 .file 14 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_eru.h"
 3015              	 .file 15 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_ccu8.h"
 3016              	 .file 16 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 3017              	 .file 17 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm.h"
 3018              	 .file 18 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 3019              	 .file 19 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 3020              	 .file 20 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 3021              	 .file 21 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DAVE.h"
 3022              	 .file 22 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 3023              	 .file 23 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 3024              	 .file 24 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 3025              	 .file 25 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master_extern.h"
 3026              	 .file 26 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io_extern.h"
 3027              	 .file 27 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt_extern.h"
 3028              	 .file 28 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 3029              	 .file 29 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:163    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:167    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:207    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:211    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:250    .text.PIN_INTERRUPT_GetPinValue:00000000 $t
    {standard input}:254    .text.PIN_INTERRUPT_GetPinValue:00000000 PIN_INTERRUPT_GetPinValue
    {standard input}:299    .data.Speed_control:00000000 Speed_control
    {standard input}:305    .data.CAN_control:00000000 CAN_control
                            *COM*:00000004 Current_U
                            *COM*:00000004 Current_V
                            *COM*:00000004 Current_W
    {standard input}:315    .data.lookup_table:00000000 lookup_table
    {standard input}:312    .data.lookup_table:00000000 $d
    {standard input}:384    .bss.sector:00000000 sector
    {standard input}:385    .bss.sector:00000000 $d
    {standard input}:390    .bss.direction:00000000 direction
    {standard input}:391    .bss.direction:00000000 $d
    {standard input}:397    .bss.enc_val:00000000 enc_val
    {standard input}:394    .bss.enc_val:00000000 $d
    {standard input}:404    .bss.time_since_A:00000000 time_since_A
    {standard input}:401    .bss.time_since_A:00000000 $d
    {standard input}:411    .bss.time_since_B:00000000 time_since_B
    {standard input}:408    .bss.time_since_B:00000000 $d
    {standard input}:418    .bss.time_since_C:00000000 time_since_C
    {standard input}:415    .bss.time_since_C:00000000 $d
    {standard input}:425    .data.time_180deg:00000000 time_180deg
    {standard input}:422    .data.time_180deg:00000000 $d
    {standard input}:432    .data.time_180deg_cal:00000000 time_180deg_cal
    {standard input}:429    .data.time_180deg_cal:00000000 $d
                            *COM*:00000001 last_Hall_trig
    {standard input}:440    .data.angle_in_sector:00000000 angle_in_sector
    {standard input}:437    .data.angle_in_sector:00000000 $d
    {standard input}:447    .bss.angle_phi:00000000 angle_phi
    {standard input}:444    .bss.angle_phi:00000000 $d
                            *COM*:00000004 ialpha
                            *COM*:00000004 ibeta
                            *COM*:00000004 iq
                            *COM*:00000004 id
                            *COM*:00000004 Valpha
                            *COM*:00000004 Vbeta
    {standard input}:460    .bss.omega_ele_rads:00000000 omega_ele_rads
    {standard input}:457    .bss.omega_ele_rads:00000000 $d
    {standard input}:467    .bss.omega_mech_rps:00000000 omega_mech_rps
    {standard input}:464    .bss.omega_mech_rps:00000000 $d
    {standard input}:474    .bss.omega_mech_rps_temp:00000000 omega_mech_rps_temp
    {standard input}:471    .bss.omega_mech_rps_temp:00000000 $d
    {standard input}:481    .bss.omega_ele_degs:00000000 omega_ele_degs
    {standard input}:478    .bss.omega_ele_degs:00000000 $d
    {standard input}:488    .bss.speed_ref:00000000 speed_ref
    {standard input}:485    .bss.speed_ref:00000000 $d
    {standard input}:495    .bss.omega_ele_rads_ref:00000000 omega_ele_rads_ref
    {standard input}:492    .bss.omega_ele_rads_ref:00000000 $d
    {standard input}:502    .bss.iq_ref:00000000 iq_ref
    {standard input}:499    .bss.iq_ref:00000000 $d
    {standard input}:509    .bss.T_ref:00000000 T_ref
    {standard input}:506    .bss.T_ref:00000000 $d
    {standard input}:516    .bss.Vd_ref:00000000 Vd_ref
    {standard input}:513    .bss.Vd_ref:00000000 $d
    {standard input}:523    .bss.Vq_ref:00000000 Vq_ref
    {standard input}:520    .bss.Vq_ref:00000000 $d
                            *COM*:00000008 Speeds_int16_r
    {standard input}:531    .bss.CAN_speed_ref:00000000 CAN_speed_ref
    {standard input}:528    .bss.CAN_speed_ref:00000000 $d
    {standard input}:537    .bss.CAN_new_meassage:00000000 CAN_new_meassage
    {standard input}:538    .bss.CAN_new_meassage:00000000 $d
    {standard input}:543    .bss.CAN_no_com_counter:00000000 CAN_no_com_counter
    {standard input}:544    .bss.CAN_no_com_counter:00000000 $d
    {standard input}:550    .bss.distance_180deg_ele_count:00000000 distance_180deg_ele_count
    {standard input}:547    .bss.distance_180deg_ele_count:00000000 $d
    {standard input}:557    .bss.Speed_act:00000000 Speed_act
    {standard input}:554    .bss.Speed_act:00000000 $d
    {standard input}:564    .bss.distance:00000000 distance
    {standard input}:561    .bss.distance:00000000 $d
                            *COM*:00000004 modulation_index
                            *COM*:00000004 modulation_index_scaled
                            *COM*:00000004 angle_ab
                            *COM*:00000004 angle_ab_rad
                            *COM*:00000004 amplitude_ab
    {standard input}:576    .data.Ts:00000000 Ts
    {standard input}:573    .data.Ts:00000000 $d
    {standard input}:583    .data.Tcyc:00000000 Tcyc
    {standard input}:580    .data.Tcyc:00000000 $d
    {standard input}:590    .data.scaling_factor:00000000 scaling_factor
    {standard input}:587    .data.scaling_factor:00000000 $d
                            *COM*:00000004 amplitude_corrected
    {standard input}:597    .bss.count:00000000 count
    {standard input}:598    .bss.count:00000000 $d
    {standard input}:604    .data.offset_pos:00000000 offset_pos
    {standard input}:601    .data.offset_pos:00000000 $d
    {standard input}:611    .data.offset_neg:00000000 offset_neg
    {standard input}:608    .data.offset_neg:00000000 $d
    {standard input}:618    .data.Iq_param:00000000 Iq_param
    {standard input}:615    .data.Iq_param:00000000 $d
    {standard input}:633    .data.Id_param:00000000 Id_param
    {standard input}:630    .data.Id_param:00000000 $d
    {standard input}:648    .data.T_param:00000000 T_param
    {standard input}:645    .data.T_param:00000000 $d
    {standard input}:663    .data.T_param_1:00000000 T_param_1
    {standard input}:660    .data.T_param_1:00000000 $d
    {standard input}:674    .text.main:00000000 $t
    {standard input}:679    .text.main:00000000 main
    {standard input}:1525   .text.Hall_init:00000000 Hall_init
    {standard input}:1804   .text.Calculation:00000000 Calculation
    {standard input}:738    .text.main:00000040 $d
    {standard input}:745    .text.CAN0_1_IRQHandler:00000000 $t
    {standard input}:750    .text.CAN0_1_IRQHandler:00000000 CAN0_1_IRQHandler
    {standard input}:896    .text.CAN0_1_IRQHandler:000000f8 $d
    {standard input}:906    .text.CAN0_0_IRQHandler:00000000 $t
    {standard input}:911    .text.CAN0_0_IRQHandler:00000000 CAN0_0_IRQHandler
    {standard input}:984    .text.CAN0_0_IRQHandler:00000050 $d
    {standard input}:995    .text.CCU43_0_IRQHandler:00000000 $t
    {standard input}:1000   .text.CCU43_0_IRQHandler:00000000 CCU43_0_IRQHandler
    {standard input}:1171   .text.CCU43_0_IRQHandler:00000158 $d
    {standard input}:1187   .text.CCU43_3_IRQHandler:00000000 $t
    {standard input}:1192   .text.CCU43_3_IRQHandler:00000000 CCU43_3_IRQHandler
    {standard input}:1237   .text.CCU43_3_IRQHandler:0000002c $d
    {standard input}:1244   .text.ERU1_2_IRQHandler:00000000 $t
    {standard input}:1249   .text.ERU1_2_IRQHandler:00000000 ERU1_2_IRQHandler
    {standard input}:1648   .text.HallSensor:00000000 HallSensor
    {standard input}:1312   .text.ERU1_2_IRQHandler:00000050 $d
    {standard input}:1321   .text.ERU1_0_IRQHandler:00000000 $t
    {standard input}:1326   .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
    {standard input}:1360   .text.ERU1_0_IRQHandler:00000020 $d
    {standard input}:1367   .text.ERU1_3_IRQHandler:00000000 $t
    {standard input}:1372   .text.ERU1_3_IRQHandler:00000000 ERU1_3_IRQHandler
    {standard input}:1406   .text.ERU1_3_IRQHandler:00000020 $d
    {standard input}:1413   .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:1418   .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:1446   .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:1451   .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:1512   .text.CCU80_3_IRQHandler:00000058 $d
    {standard input}:1520   .text.Hall_init:00000000 $t
    {standard input}:1635   .text.Hall_init:0000008c $d
    {standard input}:1643   .text.HallSensor:00000000 $t
    {standard input}:1785   .text.HallSensor:000000c0 $d
    {standard input}:1799   .text.Calculation:00000000 $t
    {standard input}:2147   .text.Calculation:000002c8 $d
    {standard input}:2175   .text.Calculation:00000330 $t
    {standard input}:2905   .text.readCurrent:00000000 readCurrent
    {standard input}:2424   .text.Calculation:00000598 $d
    {standard input}:2450   .text.Calculation:000005f8 $t
    {standard input}:2795   .text.PID_Controller:00000000 PID_Controller
    {standard input}:2751   .text.Calculation:000008a8 $d
    {standard input}:2790   .text.PID_Controller:00000000 $t
    {standard input}:2895   .text.PID_Controller:000000bc $d
    {standard input}:2900   .text.readCurrent:00000000 $t
    {standard input}:2996   .text.readCurrent:00000098 $d
                     .debug_frame:00000010 $d
    {standard input}:2789   .text.Calculation:00000934 $t

UNDEFINED SYMBOLS
DAVE_Init
CAN_NODE_Init
PWM_SVM_Start
CAN_NODE_0
PWM_SVM_0
CAN_NODE_MO_Receive
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_dadd
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
PWM_SVM_SVMUpdate
Hall_A_ISR
Hall_B_ISR
Hall_C_ISR
__aeabi_ui2d
__aeabi_i2d
__aeabi_dsub
status_LED_red_cal_time
cosf
sinf
atanf
sqrtf
BUS_IO_Write
SPI_MASTER_Receive
SPI_ChipSelect
SPI_MASTER_0
