   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB137:
  26              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE137:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB138:
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE138:
 114 0022 00BF     	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_GetInput:
 120              	.LFB140:
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 334 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 139              	 .loc 1 337 0
 140 000c 7B68     	 ldr r3,[r7,#4]
 141 000e 5A6A     	 ldr r2,[r3,#36]
 142 0010 FB78     	 ldrb r3,[r7,#3]
 143 0012 22FA03F3 	 lsr r3,r2,r3
 144 0016 03F00103 	 and r3,r3,#1
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 338 0
 146 001a 1846     	 mov r0,r3
 147 001c 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 001e BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0020 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0024 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE140:
 162 0026 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	DIGITAL_IO_SetOutputHigh:
 168              	.LFB145:
 169              	 .file 2 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 170              	 .loc 2 269 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 80B5     	 push {r7,lr}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 7,-8
 178              	 .cfi_offset 14,-4
 179 0002 82B0     	 sub sp,sp,#8
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 185 0006 7860     	 str r0,[r7,#4]
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 186              	 .loc 2 271 0
 187 0008 7B68     	 ldr r3,[r7,#4]
 188 000a 1A68     	 ldr r2,[r3]
 189 000c 7B68     	 ldr r3,[r7,#4]
 190 000e 1B7C     	 ldrb r3,[r3,#16]
 191 0010 1046     	 mov r0,r2
 192 0012 1946     	 mov r1,r3
 193 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 194              	 .loc 2 272 0
 195 0018 0837     	 adds r7,r7,#8
 196              	.LCFI21:
 197              	 .cfi_def_cfa_offset 8
 198 001a BD46     	 mov sp,r7
 199              	.LCFI22:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 001c 80BD     	 pop {r7,pc}
 203              	 .cfi_endproc
 204              	.LFE145:
 206 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	DIGITAL_IO_SetOutputLow:
 212              	.LFB146:
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 213              	 .loc 2 316 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217 0000 80B5     	 push {r7,lr}
 218              	.LCFI23:
 219              	 .cfi_def_cfa_offset 8
 220              	 .cfi_offset 7,-8
 221              	 .cfi_offset 14,-4
 222 0002 82B0     	 sub sp,sp,#8
 223              	.LCFI24:
 224              	 .cfi_def_cfa_offset 16
 225 0004 00AF     	 add r7,sp,#0
 226              	.LCFI25:
 227              	 .cfi_def_cfa_register 7
 228 0006 7860     	 str r0,[r7,#4]
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 229              	 .loc 2 318 0
 230 0008 7B68     	 ldr r3,[r7,#4]
 231 000a 1A68     	 ldr r2,[r3]
 232 000c 7B68     	 ldr r3,[r7,#4]
 233 000e 1B7C     	 ldrb r3,[r3,#16]
 234 0010 1046     	 mov r0,r2
 235 0012 1946     	 mov r1,r3
 236 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 237              	 .loc 2 319 0
 238 0018 0837     	 adds r7,r7,#8
 239              	.LCFI26:
 240              	 .cfi_def_cfa_offset 8
 241 001a BD46     	 mov sp,r7
 242              	.LCFI27:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 001c 80BD     	 pop {r7,pc}
 246              	 .cfi_endproc
 247              	.LFE146:
 249 001e 00BF     	 .section .text.PIN_INTERRUPT_GetPinValue,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	PIN_INTERRUPT_GetPinValue:
 255              	.LFB308:
 256              	 .file 3 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @file pin_interrupt.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @date 2016-03-02
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * NOTE:
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @cond
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT v4.0.2 - The PIN_INTERRUPT APP invokes user interrupt handler in a response to ris
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                        edge event signal on a pin.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Copyright (c) 2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * All rights reserved.                        
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * following conditions are met:   
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer.                        
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.     
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                         
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   products derived from this software without specific prior written permission. 
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * with Infineon Technologies AG (dave@infineon.com).         
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 2015-12-03:
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     - Initial version for DAVEv4. <BR>
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcond 
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifndef PIN_INTERRUPT_H
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #define PIN_INTERRUPT_H
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * HEADER FILES                                                                                    
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_scu.h>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_gpio.h>
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_eru.h>
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <DAVE_Common.h>
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include "pin_interrupt_conf.h"
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * MACROS                                                                                          
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_MINOR_VERSION >= 1U) && \
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_PATCH_VERSION >= 6U)))
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #error "PIN_INTERRUPT requires XMC Peripheral Library v2.1.6 or higher"
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup App_publicparam
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  @brief Initialization data structure for PIN_INTERRUPT APP
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ENUMS
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /*
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief enumeration for PIN_INTERRUPT APP
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_STATUS
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_SUCCESS = 0U,        /**<APP initialization is success */
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_FAILURE = 1U         /**<APP initialization is failure */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_STATUS_t;
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Defines trigger edge for the event generation by ETLx (Event Trigger Logic, x = [0 to 3]) unit, 
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * from ERSx(Event request source, x = [0 to 3]) unit.
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_EDGE
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_NONE = 0U, /**< no event enabled */
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_RISING = 1U,   /**< detection of rising edge generates the event */
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_FALLING = 2U,  /**< detection of falling edge generates the event */
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_BOTH = 3U      /**< detection of either edges generates the event */
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_EDGE_t;
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * DATA STRUCTURES
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** ***************************************************************************************************
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_datastructures
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Configuration structure for PIN_INTERRUPT APP
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef struct PIN_INTERRUPT
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_t *eru;  /**< Mapped ERU module */
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_PORT_t *port;  /**< Mapped port number */
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_CONFIG_t gpio_config;   /**< Initializes the input pin characteristics */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_ETL_CONFIG_t etl_config;  /**< reference to ERUx_ETLy (x = [0..1], y = [0..4])
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****                                                       module configuration */
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_SCU_IRQCTRL_t irqctrl;  /**< selects the interrupt source for a NVIC interrupt node*/
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   IRQn_Type IRQn;       /**< Mapped NVIC Node */
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_priority; 	  /**< Node Interrupt Priority */
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_FAMILY == XMC4)
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_subpriority;  /**< Node Interrupt SubPriority only valid for XMC4x */
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t etl; /*< ETLx channel (x = [0..3])*/
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t ogu; /*< OGUy channel (y = [0..3])*/
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t pin; /*< Mapped pin number */
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   bool enable_at_init;  /**< Interrupt enable for Node at initialization*/
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_t;
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifdef __cplusplus
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** extern "C" {
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * API Prototypes
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_apidoc
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Get PIN_INTERRUPT APP version
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description: </b><br>
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * The function can be used to check application software compatibility with a
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * specific version of the APP.
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void) {
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t init_status;
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_APP_VERSION_t version;
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // Initialize PIN_INTERRUPT APP:
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // PIN_INTERRUPT_Init() is called from within DAVE_Init().
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   init_status = DAVE_Init();
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if (DAVE_STATUS_SUCCESS == init_status)
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     version = PIN_INTERRUPT_GetAppVersion();
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     if (version.major != 4U) {
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *       // Probably, not the right version.
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     // More code here
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** DAVE_APP_VERSION_t PIN_INTERRUPT_GetAppVersion(void);
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Initializes a PIN_INTERRUPT APP instance
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_SUCCESS             : if initialization is successful\n
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_FAILURE             : if initialization is failed
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description:</b><br>
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT_Init API is called during initialization of DAVE APPS. This API Initializes input 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ERU and OGU hardware module initialization, Configures NVIC node and its priority in order to ge
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void)
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * {
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t status;
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle);
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Enables the IRQ.
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_EnableIRQ(handle->IRQn);
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Disables the IRQ.
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Disable(&PIN_INTERRUPT_0);
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Disable(const PIN_INTERRUPT_t *const handle)
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Disable: Handler null pointer", handle != NULL);
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_DisableIRQ(handle->IRQn);
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @brief Read input level of port pin.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @return uint32_t input logic level. Range:0-1
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * \par<b>Description:</b><br>
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * This function reads the Pn_IN register and returns the current logical value at the GPIO pin.
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * Example Usage:
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @code
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * int main(void)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * {
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   DAVE_STATUS_t status;
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   uint32_t pin_status;
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   status = DAVE_Init();   // (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0) is called within
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   if(status == DAVE_STATUS_SUCCESS)
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   else
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     while(1U)
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   while(1U)
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     pin_status = PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_0);
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     if(pin_status == 1)
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 339:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     else
 340:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 341:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 342:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 343:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 344:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   return (1);
 345:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * }
 346:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *  @endcode
 347:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** */
 348:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
 349:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 257              	 .loc 3 349 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI28:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI29:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI30:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
 350:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
 351:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   return (XMC_GPIO_GetInput(handle->port, handle->pin));
 273              	 .loc 3 351 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 5A68     	 ldr r2,[r3,#4]
 276 000c 7B68     	 ldr r3,[r7,#4]
 277 000e 93F82130 	 ldrb r3,[r3,#33]
 278 0012 1046     	 mov r0,r2
 279 0014 1946     	 mov r1,r3
 280 0016 FFF7FEFF 	 bl XMC_GPIO_GetInput
 281 001a 0346     	 mov r3,r0
 352:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 282              	 .loc 3 352 0
 283 001c 1846     	 mov r0,r3
 284 001e 0837     	 adds r7,r7,#8
 285              	.LCFI31:
 286              	 .cfi_def_cfa_offset 8
 287 0020 BD46     	 mov sp,r7
 288              	.LCFI32:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 0022 80BD     	 pop {r7,pc}
 292              	 .cfi_endproc
 293              	.LFE308:
 295              	 .global Torque_control
 296              	 .section .data.Torque_control,"aw",%progbits
 299              	Torque_control:
 300 0000 01       	 .byte 1
 301              	 .global Speed_control
 302              	 .section .data.Speed_control,"aw",%progbits
 305              	Speed_control:
 306 0000 01       	 .byte 1
 307              	 .global CAN_control
 308              	 .section .bss.CAN_control,"aw",%nobits
 311              	CAN_control:
 312 0000 00       	 .space 1
 313              	 .comm Current_U,4,4
 314              	 .comm Current_V,4,4
 315              	 .comm Current_W,4,4
 316              	 .global lookup_table
 317              	 .section .data.lookup_table,"aw",%progbits
 318              	 .align 2
 321              	lookup_table:
 322 0000 00       	 .byte 0
 323 0001 00       	 .byte 0
 324 0002 00       	 .byte 0
 325 0003 00       	 .byte 0
 326 0004 00       	 .byte 0
 327 0005 00       	 .byte 0
 328 0006 00       	 .byte 0
 329 0007 00       	 .byte 0
 330 0008 00       	 .byte 0
 331 0009 00       	 .byte 0
 332 000a 00       	 .byte 0
 333 000b FF       	 .byte -1
 334 000c 00       	 .byte 0
 335 000d 01       	 .byte 1
 336 000e 00       	 .byte 0
 337 000f 00       	 .byte 0
 338 0010 00       	 .byte 0
 339 0011 00       	 .byte 0
 340 0012 00       	 .byte 0
 341 0013 01       	 .byte 1
 342 0014 00       	 .byte 0
 343 0015 00       	 .byte 0
 344 0016 FF       	 .byte -1
 345 0017 00       	 .byte 0
 346 0018 00       	 .byte 0
 347 0019 01       	 .byte 1
 348 001a FF       	 .byte -1
 349 001b 00       	 .byte 0
 350 001c 00       	 .byte 0
 351 001d 00       	 .byte 0
 352 001e 00       	 .byte 0
 353 001f 00       	 .byte 0
 354 0020 00       	 .byte 0
 355 0021 00       	 .byte 0
 356 0022 00       	 .byte 0
 357 0023 00       	 .byte 0
 358 0024 00       	 .byte 0
 359 0025 FF       	 .byte -1
 360 0026 01       	 .byte 1
 361 0027 00       	 .byte 0
 362 0028 00       	 .byte 0
 363 0029 FF       	 .byte -1
 364 002a 00       	 .byte 0
 365 002b 00       	 .byte 0
 366 002c 01       	 .byte 1
 367 002d 00       	 .byte 0
 368 002e 00       	 .byte 0
 369 002f 00       	 .byte 0
 370 0030 00       	 .byte 0
 371 0031 00       	 .byte 0
 372 0032 01       	 .byte 1
 373 0033 00       	 .byte 0
 374 0034 FF       	 .byte -1
 375 0035 00       	 .byte 0
 376 0036 00       	 .byte 0
 377 0037 00       	 .byte 0
 378 0038 00       	 .byte 0
 379 0039 00       	 .byte 0
 380 003a 00       	 .byte 0
 381 003b 00       	 .byte 0
 382 003c 00       	 .byte 0
 383 003d 00       	 .byte 0
 384 003e 00       	 .byte 0
 385 003f 00       	 .byte 0
 386              	 .global sector
 387              	 .section .bss.sector,"aw",%nobits
 390              	sector:
 391 0000 00       	 .space 1
 392              	 .global direction
 393              	 .section .bss.direction,"aw",%nobits
 396              	direction:
 397 0000 00       	 .space 1
 398              	 .global enc_val
 399              	 .section .bss.enc_val,"aw",%nobits
 400              	 .align 1
 403              	enc_val:
 404 0000 0000     	 .space 2
 405              	 .global time_since_A
 406              	 .section .bss.time_since_A,"aw",%nobits
 407              	 .align 2
 410              	time_since_A:
 411 0000 00000000 	 .space 4
 412              	 .global time_since_B
 413              	 .section .bss.time_since_B,"aw",%nobits
 414              	 .align 2
 417              	time_since_B:
 418 0000 00000000 	 .space 4
 419              	 .global time_since_C
 420              	 .section .bss.time_since_C,"aw",%nobits
 421              	 .align 2
 424              	time_since_C:
 425 0000 00000000 	 .space 4
 426              	 .global time_180deg
 427              	 .section .data.time_180deg,"aw",%progbits
 428              	 .align 2
 431              	time_180deg:
 432 0000 E8030000 	 .word 1000
 433              	 .global time_180deg_cal
 434              	 .section .data.time_180deg_cal,"aw",%progbits
 435              	 .align 2
 438              	time_180deg_cal:
 439 0000 E8030000 	 .word 1000
 440              	 .comm last_Hall_trig,1,1
 441              	 .global angle_in_sector
 442              	 .section .data.angle_in_sector,"aw",%progbits
 443              	 .align 2
 446              	angle_in_sector:
 447 0000 0000F041 	 .word 1106247680
 448              	 .global angle_phi
 449              	 .section .bss.angle_phi,"aw",%nobits
 450              	 .align 2
 453              	angle_phi:
 454 0000 00000000 	 .space 4
 455              	 .comm ialpha,4,4
 456              	 .comm ibeta,4,4
 457              	 .comm iq,4,4
 458              	 .comm id,4,4
 459              	 .comm Valpha,4,4
 460              	 .comm Vbeta,4,4
 461              	 .global omega_mech_rps
 462              	 .section .bss.omega_mech_rps,"aw",%nobits
 463              	 .align 2
 466              	omega_mech_rps:
 467 0000 00000000 	 .space 4
 468              	 .global omega_mech_rps_temp
 469              	 .section .bss.omega_mech_rps_temp,"aw",%nobits
 470              	 .align 2
 473              	omega_mech_rps_temp:
 474 0000 00000000 	 .space 4
 475              	 .global omega_ele_degs
 476              	 .section .bss.omega_ele_degs,"aw",%nobits
 477              	 .align 2
 480              	omega_ele_degs:
 481 0000 00000000 	 .space 4
 482              	 .global speed_ref
 483              	 .section .bss.speed_ref,"aw",%nobits
 484              	 .align 2
 487              	speed_ref:
 488 0000 00000000 	 .space 4
 489              	 .global omega_ele_rads_ref
 490              	 .section .bss.omega_ele_rads_ref,"aw",%nobits
 491              	 .align 2
 494              	omega_ele_rads_ref:
 495 0000 00000000 	 .space 4
 496              	 .global iq_ref
 497              	 .section .bss.iq_ref,"aw",%nobits
 498              	 .align 2
 501              	iq_ref:
 502 0000 00000000 	 .space 4
 503              	 .global T_ref
 504              	 .section .bss.T_ref,"aw",%nobits
 505              	 .align 2
 508              	T_ref:
 509 0000 00000000 	 .space 4
 510              	 .global Vd
 511              	 .section .bss.Vd,"aw",%nobits
 512              	 .align 2
 515              	Vd:
 516 0000 00000000 	 .space 4
 517              	 .global Vq
 518              	 .section .bss.Vq,"aw",%nobits
 519              	 .align 2
 522              	Vq:
 523 0000 00000000 	 .space 4
 524              	 .global omega_mech_rps_ref
 525              	 .section .bss.omega_mech_rps_ref,"aw",%nobits
 526              	 .align 2
 529              	omega_mech_rps_ref:
 530 0000 00000000 	 .space 4
 531              	 .comm modulation_index,4,4
 532              	 .comm modulation_index_scaled,4,4
 533              	 .comm angle_ab,4,4
 534              	 .comm angle_ab_rad,4,4
 535              	 .comm amplitude_ab,4,4
 536              	 .global Ts
 537              	 .section .data.Ts,"aw",%progbits
 538              	 .align 2
 541              	Ts:
 542 0000 17B75138 	 .word 944879383
 543              	 .global Tcyc
 544              	 .section .data.Tcyc,"aw",%progbits
 545              	 .align 2
 548              	Tcyc:
 549 0000 17B75139 	 .word 961656599
 550              	 .global scaling_factor
 551              	 .section .data.scaling_factor,"aw",%progbits
 552              	 .align 2
 555              	scaling_factor:
 556 0000 00000743 	 .word 1124532224
 557              	 .comm amplitude_corrected,4,4
 558              	 .global count
 559              	 .section .bss.count,"aw",%nobits
 562              	count:
 563 0000 00       	 .space 1
 564              	 .global offset_pos
 565              	 .section .data.offset_pos,"aw",%progbits
 566              	 .align 2
 569              	offset_pos:
 570 0000 0000D8C1 	 .word -1042808832
 571              	 .global offset_neg
 572              	 .section .data.offset_neg,"aw",%progbits
 573              	 .align 2
 576              	offset_neg:
 577 0000 0000A0C1 	 .word -1046478848
 578              	 .global Iq_param
 579              	 .section .data.Iq_param,"aw",%progbits
 580              	 .align 2
 583              	Iq_param:
 584 0000 295C8F3E 	 .word 1049582633
 585 0004 00006843 	 .word 1130889216
 586 0008 00000000 	 .word 0
 587 000c 0000C842 	 .word 1120403456
 588 0010 0000C8C2 	 .word -1027080192
 589 0014 00000000 	 .word 0
 590 0018 00000000 	 .word 0
 591 001c 00000000 	 .word 0
 592 0020 00000000 	 .space 4
 593              	 .global Id_param
 594              	 .section .data.Id_param,"aw",%progbits
 595              	 .align 2
 598              	Id_param:
 599 0000 295C8F3E 	 .word 1049582633
 600 0004 00006843 	 .word 1130889216
 601 0008 00000000 	 .word 0
 602 000c 0000C842 	 .word 1120403456
 603 0010 0000C8C2 	 .word -1027080192
 604 0014 00000000 	 .word 0
 605 0018 00000000 	 .word 0
 606 001c 00000000 	 .word 0
 607 0020 00000000 	 .space 4
 608              	 .global omega_param
 609              	 .section .data.omega_param,"aw",%progbits
 610              	 .align 2
 613              	omega_param:
 614 0000 7C61923E 	 .word 1049780604
 615 0004 5DFE033E 	 .word 1040449117
 616 0008 00000000 	 .word 0
 617 000c 00000040 	 .word 1073741824
 618 0010 000000C0 	 .word -1073741824
 619 0014 00000000 	 .word 0
 620 0018 00000000 	 .word 0
 621 001c 00000000 	 .word 0
 622 0020 00000000 	 .space 4
 623              	 .global omega_param1
 624              	 .section .data.omega_param1,"aw",%progbits
 625              	 .align 2
 628              	omega_param1:
 629 0000 0AD7A33B 	 .word 1000593162
 630 0004 0AD7233C 	 .word 1008981770
 631 0008 00000000 	 .word 0
 632 000c 0000C03F 	 .word 1069547520
 633 0010 0000C0BF 	 .word -1077936128
 634 0014 00000000 	 .word 0
 635 0018 00000000 	 .word 0
 636 001c 00000000 	 .word 0
 637 0020 00000000 	 .space 4
 638              	 .global Speed_detection_OK
 639              	 .section .bss.Speed_detection_OK,"aw",%nobits
 642              	Speed_detection_OK:
 643 0000 00       	 .space 1
 644              	 .global setting_time_scalar
 645              	 .section .data.setting_time_scalar,"aw",%progbits
 646              	 .align 2
 649              	setting_time_scalar:
 650 0000 9A99193F 	 .word 1058642330
 651              	 .global step_start
 652              	 .section .bss.step_start,"aw",%nobits
 653              	 .align 2
 656              	step_start:
 657 0000 00000000 	 .space 4
 658              	 .global step
 659              	 .section .data.step,"aw",%progbits
 660              	 .align 2
 663              	step:
 664 0000 0000803F 	 .word 1065353216
 665              	 .global start_help_count
 666              	 .section .bss.start_help_count,"aw",%nobits
 669              	start_help_count:
 670 0000 00       	 .space 1
 671              	 .global start_help
 672              	 .section .bss.start_help,"aw",%nobits
 675              	start_help:
 676 0000 00       	 .space 1
 677              	 .global start_help_flag
 678              	 .section .bss.start_help_flag,"aw",%nobits
 681              	start_help_flag:
 682 0000 00       	 .space 1
 683              	 .global ADC_TO_DCLINK
 684              	 .section .data.ADC_TO_DCLINK,"aw",%progbits
 685              	 .align 2
 688              	ADC_TO_DCLINK:
 689 0000 6666A042 	 .word 1117808230
 690 0004 CDCCA042 	 .word 1117834445
 691 0008 00009A42 	 .word 1117388800
 692 000c 00009A42 	 .word 1117388800
 693 0010 00009A42 	 .word 1117388800
 694 0014 00009F42 	 .word 1117716480
 695              	 .section .text.main,"ax",%progbits
 696              	 .align 2
 697              	 .global main
 698              	 .thumb
 699              	 .thumb_func
 701              	main:
 702              	.LFB552:
 703              	 .file 4 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2020 Jan 02 10:21:43
   5:../main.c     ****  *  Author: Baldo
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** // status: 11.05.2022
   9:../main.c     **** 
  10:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  11:../main.c     **** #include <math.h>
  12:../main.c     **** #include <stdio.h> //for printf
  13:../main.c     **** 
  14:../main.c     **** #include "DEFINE.h"
  15:../main.c     **** #include "rec_data_function.h"
  16:../main.c     **** #include "Read_Current_Sensor.h"
  17:../main.c     **** #include "Globals.h"
  18:../main.c     **** 
  19:../main.c     **** //#######################
  20:../main.c     **** //FUNCTION DECLARATION
  21:../main.c     **** //########################
  22:../main.c     **** //float readCurrent(uint8_t);
  23:../main.c     **** void Hall_init(void);
  24:../main.c     **** void HallSensor(void);
  25:../main.c     **** void Calculation(void);
  26:../main.c     **** 
  27:../main.c     **** //########################
  28:../main.c     **** //VARIABLE DECLARATION
  29:../main.c     **** //########################
  30:../main.c     **** 
  31:../main.c     **** // NEED to be set
  32:../main.c     **** //motor
  33:../main.c     **** //#define MOTOR_NUM 2 // for trque dirction motro 1 differtn form rest so far
  34:../main.c     **** //#define MOTOR_ON_ROVER 0// 0 front left 1 front right 2 back left 3 back right
  35:../main.c     **** #define INVERTER_NUM 0 //witch board for ADC_TO_DCLINK factor version 2 boards: B3 right rear rover
  36:../main.c     **** 
  37:../main.c     **** //control type
  38:../main.c     **** uint8_t Torque_control = 1;
  39:../main.c     **** uint8_t Speed_control = 1; //if 0 is torque control if 1 is speed control
  40:../main.c     **** uint8_t CAN_control = 0; // id 1 CAN speed controll aktive
  41:../main.c     **** 
  42:../main.c     **** #define IQ_REF_MAX 5
  43:../main.c     **** //#define CAN_NO_COM_TH 250
  44:../main.c     **** #define MAX_Speed_CAN 2
  45:../main.c     **** //#define SPEED_LIMIT_CTRL_TO_ZERO 100 //omega_ele rad/s
  46:../main.c     **** #define TIME_OMEGA_0  5000 //time since last hall before omgea set to 0 in 100us
  47:../main.c     **** 
  48:../main.c     **** // Define often used vaules to decrease computational effort
  49:../main.c     **** //#define PI 3.14159265
  50:../main.c     **** #define TwoThird 0.66666667
  51:../main.c     **** #define TwoPiThird 2.0943951
  52:../main.c     **** #define FourPiThird 4.1887902
  53:../main.c     **** #define Pi180 0.01745329
  54:../main.c     **** 
  55:../main.c     **** #define ANGLE_ONE_DEGREE (46603U)
  56:../main.c     **** 
  57:../main.c     **** // Define Chip select Pins for Current measurement via SPI Interface
  58:../main.c     **** #define ChipSelect_U 0b110
  59:../main.c     **** #define ChipSelect_V 0b101
  60:../main.c     **** #define ChipSelect_W 0b011
  61:../main.c     **** 
  62:../main.c     **** float Current_U;
  63:../main.c     **** float Current_V;
  64:../main.c     **** float Current_W;
  65:../main.c     **** 
  66:../main.c     **** 
  67:../main.c     **** #define J 0.0023064 //SK J = 1/2 * m_wheel * r_wheel^2 = 1/2*1.2kg*(62mm)^2
  68:../main.c     **** #define K_T 0.21 //SK torque constant in Nm/A
  69:../main.c     **** #define K_inv (15.7/1.732) // K_inv = V / m = V_DC / 2 * 2/sqrt(3) = V_DC/sqrt(3)
  70:../main.c     **** //#define Psi_p 0.0082  60/  (2 * PI) * 1.4142 // Psi_p = K_back_EMF = 0.0082 V / rpm_mech --> 60 t
  71:../main.c     **** //#define Ls 0.00088 // Ls = Lm*1.1 = 0.8mH * 1.1 = 0.00088H
  72:../main.c     **** //#define PPZ 11
  73:../main.c     **** //#define WHEEL_R 0.0675 //0.135/2 straigt vaule other thing casued problems
  74:../main.c     **** 
  75:../main.c     **** 
  76:../main.c     **** // Declaration of Lookup Table
  77:../main.c     **** int8_t lookup_table[] = {0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,-1,0,0,1,-1,0,0,0,0,0,0,0,0,0
  78:../main.c     **** //access via the index in the  form of the 6 bits (3 previous hall states and 3 actual  hall states
  79:../main.c     **** //for each of the 2^6 possibilities of sequence of hall events  it has been thought about the wavef
  80:../main.c     **** 
  81:../main.c     **** volatile int8_t sector = 0;
  82:../main.c     **** volatile int8_t direction = 0;              // direction +1/-1 -> CW and CCW
  83:../main.c     **** volatile uint16_t enc_val = 0;          // old and new values of all Hall Sensors
  84:../main.c     **** volatile uint32_t time_since_A = 0;	// time between to edges Hall A
  85:../main.c     **** volatile uint32_t time_since_B = 0; // time between to edges Hall B
  86:../main.c     **** volatile uint32_t time_since_C = 0; // time between to edges Hall C
  87:../main.c     **** volatile uint32_t time_180deg = 1000;        // time which last triggered HAL sensor needed for 180
  88:../main.c     **** volatile uint32_t time_180deg_cal = 1000;
  89:../main.c     **** volatile char last_Hall_trig;			//last triggered Hall Sensor A/B/C
  90:../main.c     **** 
  91:../main.c     **** float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60°
  92:../main.c     **** //volatile uint32_t TIME_OMEGA_0 = 50000; // t over this therschold assumed to be zero
  93:../main.c     **** 
  94:../main.c     **** float angle_phi = 0;
  95:../main.c     **** float ialpha,ibeta,iq,id,Valpha,Vbeta;
  96:../main.c     **** 
  97:../main.c     **** //volatile float omega_ele_rads = 0; 	// electrical rad / sec //current real velocity calculated fr
  98:../main.c     **** volatile float omega_mech_rps = 0;	//SK	//mechanical rounds per second
  99:../main.c     **** volatile float omega_mech_rps_temp = 0; //SK	//since dividing through the incremental (counted up) 
 100:../main.c     **** //volatile float omega_ele_rads_ref = -2*69.11; //1*69.11; //SK		//target velocity electrical in ra
 101:../main.c     **** 
 102:../main.c     **** volatile float omega_ele_degs = 0;
 103:../main.c     **** 
 104:../main.c     **** // REF vaules given to PI controller
 105:../main.c     **** float speed_ref = 0.0; //meters per second
 106:../main.c     **** float omega_ele_rads_ref = 0.0; // electrical rad per second
 107:../main.c     **** float iq_ref = 0.0;
 108:../main.c     **** float T_ref = 0.0;
 109:../main.c     **** float Vd = 0;
 110:../main.c     **** float Vq = 0;
 111:../main.c     **** float omega_mech_rps_ref = 0;
 112:../main.c     **** 
 113:../main.c     **** /*
 114:../main.c     **** // CAN vars
 115:../main.c     **** //int16_t Speeds_int16_r[4];
 116:../main.c     **** float CAN_speed_ref = 0.0;
 117:../main.c     **** uint8_t CAN_new_meassage = 0; // if 1 recived can data
 118:../main.c     **** uint8_t CAN_no_com_counter = 0;
 119:../main.c     **** // distacne vaule back over can
 120:../main.c     **** int distance_180deg_ele_count = 0;
 121:../main.c     **** float Speed_act = 0;
 122:../main.c     **** float distance = 0;
 123:../main.c     **** */
 124:../main.c     **** 
 125:../main.c     **** volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
 126:../main.c     **** volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which 
 127:../main.c     **** 
 128:../main.c     **** float angle_ab;
 129:../main.c     **** float angle_ab_rad;
 130:../main.c     **** float amplitude_ab;
 131:../main.c     **** 
 132:../main.c     **** float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
 133:../main.c     **** float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I
 134:../main.c     **** 
 135:../main.c     **** //float amp_limit_SVM_app = 2500;  Bo
 136:../main.c     **** 
 137:../main.c     **** // scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
 138:../main.c     **** float scaling_factor = 135;
 139:../main.c     **** float amplitude_corrected;
 140:../main.c     **** 
 141:../main.c     **** 
 142:../main.c     **** // Counter for calculation function -> only use a multiple of the SVM Interrupt
 143:../main.c     **** volatile uint8_t count = 0;
 144:../main.c     **** 
 145:../main.c     **** // Angle correction factor to align Current to Hall Sensor vuales form 14/04
 146:../main.c     **** float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
 147:../main.c     **** float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction
 148:../main.c     **** 
 149:../main.c     **** //################ PI
 150:../main.c     **** // PID Controller declaration for Id and Iq component
 151:../main.c     **** typedef struct{
 152:../main.c     **** 	float P,I,D;
 153:../main.c     **** 	float MaxLimit, MinLimit;
 154:../main.c     **** 	float Output;
 155:../main.c     **** 	float Deviation_old, Deviation_old2;
 156:../main.c     **** 	float Output_z;
 157:../main.c     **** }PID_param;
 158:../main.c     **** 
 159:../main.c     **** //Vuales 14/04 mit maurzio
 160:../main.c     **** //PID_param omega_param = {.P = 0.004, .I = 0.004, .D = 0.0, .MaxLimit =  1, .MinLimit = -1, .Outpu
 161:../main.c     **** //PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 162:../main.c     **** //PID_param Id_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 163:../main.c     **** 
 164:../main.c     **** // max ested iq 100Hz wbw
 165:../main.c     **** //PID_param Iq_param = {.P = 0.56, .I = 465.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Outpu
 166:../main.c     **** //PID_param Id_param = {.P = 0.56, .I = 465.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Outpu
 167:../main.c     **** //PID_param omega_param = {.P = 0.2921, .I = 0.1213, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Out
 168:../main.c     **** 
 169:../main.c     **** // crretn best on motor 10 iq 50Hz wbw
 170:../main.c     **** PID_param Iq_param = {.P = 0.28, .I = 232.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output 
 171:../main.c     **** PID_param Id_param = {.P = 0.28, .I = 232.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output 
 172:../main.c     **** //PID_param omega_param10 = {.P = 0.3949, .I = 0.1619, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .O
 173:../main.c     **** 
 174:../main.c     **** PID_param omega_param = {.P = 0.2859, .I = 0.1289, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Outpu
 175:../main.c     **** 
 176:../main.c     **** // for motro 1
 177:../main.c     **** PID_param omega_param1 = {.P = 0.005, .I = 0.01, .D = 0.0, .MaxLimit =  1.5, .MinLimit = -1.5, .Out
 178:../main.c     **** 
 179:../main.c     **** 
 180:../main.c     **** float PID_Controller(float,float,PID_param *param);
 181:../main.c     **** 
 182:../main.c     **** uint8_t Speed_detection_OK = 0;
 183:../main.c     **** float setting_time_scalar = 0.6, step_start =0, step = 1;
 184:../main.c     **** 
 185:../main.c     **** uint8_t start_help_count = 0, start_help = 0, start_help_flag = 0;
 186:../main.c     **** #define START_HELP_T 0.1
 187:../main.c     **** 
 188:../main.c     **** //float V_DC_link = 14.8; // nominal batt voltage
 189:../main.c     **** float ADC_TO_DCLINK[6] = {80.2, 80.4, 77, 77, 77, 79.5}; // 77 defalft value
 190:../main.c     **** 
 191:../main.c     **** 
 192:../main.c     **** 
 193:../main.c     **** //########################
 194:../main.c     **** // MAIN
 195:../main.c     **** //########################
 196:../main.c     **** 
 197:../main.c     **** int main(void)
 198:../main.c     **** {
 704              	 .loc 4 198 0
 705              	 .cfi_startproc
 706              	 
 707              	 
 708 0000 80B5     	 push {r7,lr}
 709              	.LCFI33:
 710              	 .cfi_def_cfa_offset 8
 711              	 .cfi_offset 7,-8
 712              	 .cfi_offset 14,-4
 713 0002 84B0     	 sub sp,sp,#16
 714              	.LCFI34:
 715              	 .cfi_def_cfa_offset 24
 716 0004 02AF     	 add r7,sp,#8
 717              	.LCFI35:
 718              	 .cfi_def_cfa 7,16
 199:../main.c     ****   DAVE_STATUS_t status;
 200:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 719              	 .loc 4 200 0
 720 0006 FFF7FEFF 	 bl DAVE_Init
 721 000a 0346     	 mov r3,r0
 722 000c FB71     	 strb r3,[r7,#7]
 201:../main.c     **** 
 202:../main.c     ****   Hall_init();
 723              	 .loc 4 202 0
 724 000e FFF7FEFF 	 bl Hall_init
 203:../main.c     **** 
 204:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 725              	 .loc 4 204 0
 726 0012 FB79     	 ldrb r3,[r7,#7]
 727 0014 002B     	 cmp r3,#0
 728 0016 00D0     	 beq .L10
 729              	.L11:
 205:../main.c     ****   {
 206:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 207:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 208:../main.c     **** 
 209:../main.c     ****     while(1U)
 210:../main.c     ****     {
 211:../main.c     **** 
 212:../main.c     ****     }
 730              	 .loc 4 212 0 discriminator 1
 731 0018 FEE7     	 b .L11
 732              	.L10:
 213:../main.c     ****   }
 214:../main.c     **** 
 215:../main.c     ****   //Initialization of CAN
 216:../main.c     ****   	CAN_NODE_STATUS_t init_status;
 217:../main.c     ****   	init_status = CAN_NODE_Init(&CAN_NODE_0);
 733              	 .loc 4 217 0
 734 001a 1348     	 ldr r0,.L14
 735 001c FFF7FEFF 	 bl CAN_NODE_Init
 736 0020 0346     	 mov r3,r0
 737 0022 BB71     	 strb r3,[r7,#6]
 218:../main.c     **** 
 219:../main.c     ****   	if (init_status != CAN_NODE_STATUS_SUCCESS) {
 220:../main.c     ****   		XMC_DEBUG("CAN initialization failed\n");
 221:../main.c     ****   	}
 222:../main.c     **** 
 223:../main.c     ****   if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
 224:../main.c     **** 	  while(1U)
 225:../main.c     **** 	      {
 226:../main.c     **** 		//  printf("MOTOR_ON_ROVER number false");
 227:../main.c     **** 	      }
 228:../main.c     ****   }
 229:../main.c     **** 
 230:../main.c     ****   if((INVERTER_NUM > 6) || INVERTER_NUM < 0){ // if possibel number eneterd
 231:../main.c     ****  	  while(1U)
 232:../main.c     ****  	      {
 233:../main.c     ****  		//  printf("INVERTER_NUM num false");
 234:../main.c     ****  	      }
 235:../main.c     ****    }
 236:../main.c     **** 
 237:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 238:../main.c     ****   while(1U)
 239:../main.c     ****   {
 240:../main.c     **** 	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 738              	 .loc 4 240 0
 739 0024 1148     	 ldr r0,.L14+4
 740 0026 FFF7FEFF 	 bl PWM_SVM_Start
 741              	.L13:
 241:../main.c     **** 		  while(1U)
 242:../main.c     **** 		    {
 243:../main.c     **** 			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 742              	 .loc 4 243 0
 743 002a 114B     	 ldr r3,.L14+8
 744 002c 1B78     	 ldrb r3,[r3]
 745 002e DBB2     	 uxtb r3,r3
 746 0030 032B     	 cmp r3,#3
 747 0032 18D9     	 bls .L12
 244:../main.c     **** 			  {
 245:../main.c     **** 				  count=0;
 748              	 .loc 4 245 0
 749 0034 0E4B     	 ldr r3,.L14+8
 750 0036 0022     	 movs r2,#0
 751 0038 1A70     	 strb r2,[r3]
 246:../main.c     **** 				  Calculation();
 752              	 .loc 4 246 0
 753 003a FFF7FEFF 	 bl Calculation
 247:../main.c     **** 
 248:../main.c     **** 				  // f_rec_data(omega_mech_rps	,T_ref,&T_ref,0.12,0.16,10,10000);  //  tref speedd spech char
 249:../main.c     **** 
 250:../main.c     **** 				  //f_rec_data(omega_mech_rps	,T_ref,&omega_mech_rps_ref,step_start,step,2,5000);
 251:../main.c     **** 
 252:../main.c     **** 				   rec_step_from_0(omega_mech_rps, iq_ref,iq, &omega_mech_rps_ref, 1, 20); // start help test
 754              	 .loc 4 252 0
 755 003e 0D4B     	 ldr r3,.L14+12
 756 0040 1868     	 ldr r0,[r3]
 757 0042 0D4B     	 ldr r3,.L14+16
 758 0044 1968     	 ldr r1,[r3]
 759 0046 0D4B     	 ldr r3,.L14+20
 760 0048 1A68     	 ldr r2,[r3]
 761 004a 4FF07E53 	 mov r3,#1065353216
 762 004e 0093     	 str r3,[sp]
 763 0050 1423     	 movs r3,#20
 764 0052 0193     	 str r3,[sp,#4]
 765 0054 0A4B     	 ldr r3,.L14+24
 766 0056 FFF7FEFF 	 bl rec_step_from_0
 253:../main.c     **** 				   start_help_flag = 0;
 767              	 .loc 4 253 0
 768 005a 0A4B     	 ldr r3,.L14+28
 769 005c 0022     	 movs r2,#0
 770 005e 1A70     	 strb r2,[r3]
 254:../main.c     **** 
 255:../main.c     **** 				  ADC_MEASUREMENT_StartConversion(&ADC_MEASUREMENT_0);
 771              	 .loc 4 255 0
 772 0060 0948     	 ldr r0,.L14+32
 773 0062 FFF7FEFF 	 bl ADC_MEASUREMENT_StartConversion
 774              	.L12:
 256:../main.c     **** 			  }
 257:../main.c     **** 		    }
 775              	 .loc 4 257 0
 776 0066 E0E7     	 b .L13
 777              	.L15:
 778              	 .align 2
 779              	.L14:
 780 0068 00000000 	 .word CAN_NODE_0
 781 006c 00000000 	 .word PWM_SVM_0
 782 0070 00000000 	 .word count
 783 0074 00000000 	 .word omega_mech_rps
 784 0078 00000000 	 .word iq_ref
 785 007c 00000000 	 .word iq
 786 0080 00000000 	 .word omega_mech_rps_ref
 787 0084 00000000 	 .word start_help_flag
 788 0088 00000000 	 .word ADC_MEASUREMENT_0
 789              	 .cfi_endproc
 790              	.LFE552:
 792              	 .section .text.VADC0_C0_2_IRQHandler,"ax",%progbits
 793              	 .align 2
 794              	 .global VADC0_C0_2_IRQHandler
 795              	 .thumb
 796              	 .thumb_func
 798              	VADC0_C0_2_IRQHandler:
 799              	.LFB553:
 258:../main.c     ****   }
 259:../main.c     **** }
 260:../main.c     **** 
 261:../main.c     **** 
 262:../main.c     **** //########################
 263:../main.c     **** // INTERRUPTS
 264:../main.c     **** //########################
 265:../main.c     **** 
 266:../main.c     **** /*
 267:../main.c     **** // CAN Communication
 268:../main.c     **** void CAN_RX_MO2_ISR(void){
 269:../main.c     **** 		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
 270:../main.c     **** 		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
 271:../main.c     **** 
 272:../main.c     **** 		uint8_t data_r[8];
 273:../main.c     **** 		 int i;
 274:../main.c     **** 		 for(i = 0 ; i < 8 ; i ++){
 275:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 276:../main.c     **** 		 }
 277:../main.c     **** 
 278:../main.c     **** 		 for(i = 0 ; i < 4 ; i ++){
 279:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 280:../main.c     **** 			 }
 281:../main.c     **** 
 282:../main.c     **** 		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 283:../main.c     **** 
 284:../main.c     **** 		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6
 285:../main.c     **** 
 286:../main.c     **** 		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 287:../main.c     **** 		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 288:../main.c     **** 
 289:../main.c     **** 		CAN_new_meassage = 1;
 290:../main.c     **** 		CAN_no_com_counter = 0;
 291:../main.c     **** }
 292:../main.c     **** 
 293:../main.c     **** //CAN RX reste distance
 294:../main.c     **** void CAN_RX_MO7_ISR(void){
 295:../main.c     **** 	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 296:../main.c     **** 	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 297:../main.c     **** 
 298:../main.c     **** 	uint8_t data_r[4];
 299:../main.c     **** 	 int i;
 300:../main.c     **** 	 for(i = 0 ; i < 4 ; i ++){
 301:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 302:../main.c     **** 	 }
 303:../main.c     **** 
 304:../main.c     **** 	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 305:../main.c     **** }
 306:../main.c     **** 
 307:../main.c     **** void CAN_TX_ISR(void){
 308:../main.c     **** 	int16_t Inverter_state[4] = {0};
 309:../main.c     **** 
 310:../main.c     **** 	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 311:../main.c     **** 
 312:../main.c     **** 	//if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
 313:../main.c     **** 	//else Inverter_state[1] = 1;
 314:../main.c     **** 
 315:../main.c     **** 
 316:../main.c     **** 	Inverter_state[1] = V_DC_link * 100;  // *100 send  2 deciaml places
 317:../main.c     **** 
 318:../main.c     **** 	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 319:../main.c     **** 	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
 320:../main.c     **** 	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 321:../main.c     **** 
 322:../main.c     **** 	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 323:../main.c     **** 	if(MOTOR_NUM == 6) distance = -distance;
 324:../main.c     **** 	Inverter_state[3] = distance * 1000; // to mm
 325:../main.c     **** 
 326:../main.c     **** 	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 327:../main.c     **** 	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 328:../main.c     **** 	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 329:../main.c     **** }
 330:../main.c     **** */
 331:../main.c     **** 
 332:../main.c     **** void Adc_Measurement_Handler(void){
 800              	 .loc 4 332 0
 801              	 .cfi_startproc
 802              	 
 803              	 
 804 0000 80B5     	 push {r7,lr}
 805              	.LCFI36:
 806              	 .cfi_def_cfa_offset 8
 807              	 .cfi_offset 7,-8
 808              	 .cfi_offset 14,-4
 809 0002 82B0     	 sub sp,sp,#8
 810              	.LCFI37:
 811              	 .cfi_def_cfa_offset 16
 812 0004 00AF     	 add r7,sp,#0
 813              	.LCFI38:
 814              	 .cfi_def_cfa_register 7
 333:../main.c     **** 	uint32_t result  = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_A);
 815              	 .loc 4 333 0
 816 0006 0A48     	 ldr r0,.L17
 817 0008 FFF7FEFF 	 bl ADC_MEASUREMENT_GetResult
 818 000c 0346     	 mov r3,r0
 819 000e 7B60     	 str r3,[r7,#4]
 334:../main.c     **** 
 335:../main.c     **** 	V_DC_link =  result / ADC_TO_DCLINK[INVERTER_NUM]; // conversion to DClink
 820              	 .loc 4 335 0
 821 0010 7B68     	 ldr r3,[r7,#4]
 822 0012 07EE903A 	 fmsr s15,r3
 823 0016 B8EE677A 	 fuitos s14,s15
 824 001a 064B     	 ldr r3,.L17+4
 825 001c D3ED007A 	 flds s15,[r3]
 826 0020 C7EE277A 	 fdivs s15,s14,s15
 827 0024 044B     	 ldr r3,.L17+8
 828 0026 C3ED007A 	 fsts s15,[r3]
 336:../main.c     **** 
 337:../main.c     **** }
 829              	 .loc 4 337 0
 830 002a 0837     	 adds r7,r7,#8
 831              	.LCFI39:
 832              	 .cfi_def_cfa_offset 8
 833 002c BD46     	 mov sp,r7
 834              	.LCFI40:
 835              	 .cfi_def_cfa_register 13
 836              	 
 837 002e 80BD     	 pop {r7,pc}
 838              	.L18:
 839              	 .align 2
 840              	.L17:
 841 0030 00000000 	 .word ADC_MEASUREMENT_Channel_A_handle
 842 0034 00000000 	 .word ADC_TO_DCLINK
 843 0038 00000000 	 .word V_DC_link
 844              	 .cfi_endproc
 845              	.LFE553:
 847              	 .section .text.CCU43_3_IRQHandler,"ax",%progbits
 848              	 .align 2
 849              	 .global CCU43_3_IRQHandler
 850              	 .thumb
 851              	 .thumb_func
 853              	CCU43_3_IRQHandler:
 854              	.LFB554:
 338:../main.c     **** 
 339:../main.c     **** // 100us Timer for speed measurement
 340:../main.c     **** void TimeCounterISR(void){
 855              	 .loc 4 340 0
 856              	 .cfi_startproc
 857              	 
 858              	 
 859              	 
 860 0000 80B4     	 push {r7}
 861              	.LCFI41:
 862              	 .cfi_def_cfa_offset 4
 863              	 .cfi_offset 7,-4
 864 0002 00AF     	 add r7,sp,#0
 865              	.LCFI42:
 866              	 .cfi_def_cfa_register 7
 341:../main.c     **** 	time_since_A ++;
 867              	 .loc 4 341 0
 868 0004 094B     	 ldr r3,.L20
 869 0006 1B68     	 ldr r3,[r3]
 870 0008 0133     	 adds r3,r3,#1
 871 000a 084A     	 ldr r2,.L20
 872 000c 1360     	 str r3,[r2]
 342:../main.c     **** 	time_since_B ++;
 873              	 .loc 4 342 0
 874 000e 084B     	 ldr r3,.L20+4
 875 0010 1B68     	 ldr r3,[r3]
 876 0012 0133     	 adds r3,r3,#1
 877 0014 064A     	 ldr r2,.L20+4
 878 0016 1360     	 str r3,[r2]
 343:../main.c     **** 	time_since_C ++;
 879              	 .loc 4 343 0
 880 0018 064B     	 ldr r3,.L20+8
 881 001a 1B68     	 ldr r3,[r3]
 882 001c 0133     	 adds r3,r3,#1
 883 001e 054A     	 ldr r2,.L20+8
 884 0020 1360     	 str r3,[r2]
 344:../main.c     **** }
 885              	 .loc 4 344 0
 886 0022 BD46     	 mov sp,r7
 887              	.LCFI43:
 888              	 .cfi_def_cfa_register 13
 889              	 
 890 0024 5DF8047B 	 ldr r7,[sp],#4
 891              	.LCFI44:
 892              	 .cfi_restore 7
 893              	 .cfi_def_cfa_offset 0
 894 0028 7047     	 bx lr
 895              	.L21:
 896 002a 00BF     	 .align 2
 897              	.L20:
 898 002c 00000000 	 .word time_since_A
 899 0030 00000000 	 .word time_since_B
 900 0034 00000000 	 .word time_since_C
 901              	 .cfi_endproc
 902              	.LFE554:
 904              	 .section .text.ERU1_2_IRQHandler,"ax",%progbits
 905              	 .align 2
 906              	 .global ERU1_2_IRQHandler
 907              	 .thumb
 908              	 .thumb_func
 910              	ERU1_2_IRQHandler:
 911              	.LFB555:
 345:../main.c     **** 
 346:../main.c     **** // Hall Sensors
 347:../main.c     **** void HallSensor_A_ISR(void){
 912              	 .loc 4 347 0
 913              	 .cfi_startproc
 914              	 
 915              	 
 916 0000 80B5     	 push {r7,lr}
 917              	.LCFI45:
 918              	 .cfi_def_cfa_offset 8
 919              	 .cfi_offset 7,-8
 920              	 .cfi_offset 14,-4
 921 0002 00AF     	 add r7,sp,#0
 922              	.LCFI46:
 923              	 .cfi_def_cfa_register 7
 348:../main.c     **** 	HallSensor();
 924              	 .loc 4 348 0
 925 0004 FFF7FEFF 	 bl HallSensor
 349:../main.c     **** 	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
 926              	 .loc 4 349 0
 927 0008 114B     	 ldr r3,.L25
 928 000a 1B68     	 ldr r3,[r3]
 929 000c 114A     	 ldr r2,.L25+4
 930 000e 1360     	 str r3,[r2]
 350:../main.c     **** 	time_since_A = 0;						// measurement of speed -> time between change of Hall A
 931              	 .loc 4 350 0
 932 0010 0F4B     	 ldr r3,.L25
 933 0012 0022     	 movs r2,#0
 934 0014 1A60     	 str r2,[r3]
 351:../main.c     **** 	last_Hall_trig = 'A';
 935              	 .loc 4 351 0
 936 0016 104B     	 ldr r3,.L25+8
 937 0018 4122     	 movs r2,#65
 938 001a 1A70     	 strb r2,[r3]
 352:../main.c     **** 
 353:../main.c     **** 	if(direction == 1 ) distance_180deg_ele_count ++;
 939              	 .loc 4 353 0
 940 001c 0F4B     	 ldr r3,.L25+12
 941 001e 1B78     	 ldrb r3,[r3]
 942 0020 DBB2     	 uxtb r3,r3
 943 0022 5BB2     	 sxtb r3,r3
 944 0024 012B     	 cmp r3,#1
 945 0026 05D1     	 bne .L23
 946              	 .loc 4 353 0 is_stmt 0 discriminator 1
 947 0028 0D4B     	 ldr r3,.L25+16
 948 002a 1B68     	 ldr r3,[r3]
 949 002c 0133     	 adds r3,r3,#1
 950 002e 0C4A     	 ldr r2,.L25+16
 951 0030 1360     	 str r3,[r2]
 952 0032 0BE0     	 b .L22
 953              	.L23:
 354:../main.c     **** 	else if(direction == -1 ) distance_180deg_ele_count --;
 954              	 .loc 4 354 0 is_stmt 1
 955 0034 094B     	 ldr r3,.L25+12
 956 0036 1B78     	 ldrb r3,[r3]
 957 0038 DBB2     	 uxtb r3,r3
 958 003a 5BB2     	 sxtb r3,r3
 959 003c B3F1FF3F 	 cmp r3,#-1
 960 0040 04D1     	 bne .L22
 961              	 .loc 4 354 0 is_stmt 0 discriminator 1
 962 0042 074B     	 ldr r3,.L25+16
 963 0044 1B68     	 ldr r3,[r3]
 964 0046 013B     	 subs r3,r3,#1
 965 0048 054A     	 ldr r2,.L25+16
 966 004a 1360     	 str r3,[r2]
 967              	.L22:
 355:../main.c     **** }
 968              	 .loc 4 355 0 is_stmt 1
 969 004c 80BD     	 pop {r7,pc}
 970              	.L26:
 971 004e 00BF     	 .align 2
 972              	.L25:
 973 0050 00000000 	 .word time_since_A
 974 0054 00000000 	 .word time_180deg
 975 0058 00000000 	 .word last_Hall_trig
 976 005c 00000000 	 .word direction
 977 0060 00000000 	 .word distance_180deg_ele_count
 978              	 .cfi_endproc
 979              	.LFE555:
 981              	 .section .text.ERU1_0_IRQHandler,"ax",%progbits
 982              	 .align 2
 983              	 .global ERU1_0_IRQHandler
 984              	 .thumb
 985              	 .thumb_func
 987              	ERU1_0_IRQHandler:
 988              	.LFB556:
 356:../main.c     **** void HallSensor_B_ISR(void){
 989              	 .loc 4 356 0
 990              	 .cfi_startproc
 991              	 
 992              	 
 993 0000 80B5     	 push {r7,lr}
 994              	.LCFI47:
 995              	 .cfi_def_cfa_offset 8
 996              	 .cfi_offset 7,-8
 997              	 .cfi_offset 14,-4
 998 0002 00AF     	 add r7,sp,#0
 999              	.LCFI48:
 1000              	 .cfi_def_cfa_register 7
 357:../main.c     **** 	HallSensor();
 1001              	 .loc 4 357 0
 1002 0004 FFF7FEFF 	 bl HallSensor
 358:../main.c     **** 	time_180deg = time_since_B;
 1003              	 .loc 4 358 0
 1004 0008 054B     	 ldr r3,.L28
 1005 000a 1B68     	 ldr r3,[r3]
 1006 000c 054A     	 ldr r2,.L28+4
 1007 000e 1360     	 str r3,[r2]
 359:../main.c     **** 	time_since_B = 0;
 1008              	 .loc 4 359 0
 1009 0010 034B     	 ldr r3,.L28
 1010 0012 0022     	 movs r2,#0
 1011 0014 1A60     	 str r2,[r3]
 360:../main.c     **** 	last_Hall_trig = 'B';
 1012              	 .loc 4 360 0
 1013 0016 044B     	 ldr r3,.L28+8
 1014 0018 4222     	 movs r2,#66
 1015 001a 1A70     	 strb r2,[r3]
 361:../main.c     **** }
 1016              	 .loc 4 361 0
 1017 001c 80BD     	 pop {r7,pc}
 1018              	.L29:
 1019 001e 00BF     	 .align 2
 1020              	.L28:
 1021 0020 00000000 	 .word time_since_B
 1022 0024 00000000 	 .word time_180deg
 1023 0028 00000000 	 .word last_Hall_trig
 1024              	 .cfi_endproc
 1025              	.LFE556:
 1027              	 .section .text.ERU1_3_IRQHandler,"ax",%progbits
 1028              	 .align 2
 1029              	 .global ERU1_3_IRQHandler
 1030              	 .thumb
 1031              	 .thumb_func
 1033              	ERU1_3_IRQHandler:
 1034              	.LFB557:
 362:../main.c     **** void HallSensor_C_ISR(void){
 1035              	 .loc 4 362 0
 1036              	 .cfi_startproc
 1037              	 
 1038              	 
 1039 0000 80B5     	 push {r7,lr}
 1040              	.LCFI49:
 1041              	 .cfi_def_cfa_offset 8
 1042              	 .cfi_offset 7,-8
 1043              	 .cfi_offset 14,-4
 1044 0002 00AF     	 add r7,sp,#0
 1045              	.LCFI50:
 1046              	 .cfi_def_cfa_register 7
 363:../main.c     **** 	HallSensor();
 1047              	 .loc 4 363 0
 1048 0004 FFF7FEFF 	 bl HallSensor
 364:../main.c     **** 	time_180deg = time_since_C;
 1049              	 .loc 4 364 0
 1050 0008 054B     	 ldr r3,.L31
 1051 000a 1B68     	 ldr r3,[r3]
 1052 000c 054A     	 ldr r2,.L31+4
 1053 000e 1360     	 str r3,[r2]
 365:../main.c     **** 	time_since_C = 0;
 1054              	 .loc 4 365 0
 1055 0010 034B     	 ldr r3,.L31
 1056 0012 0022     	 movs r2,#0
 1057 0014 1A60     	 str r2,[r3]
 366:../main.c     **** 	last_Hall_trig = 'C';
 1058              	 .loc 4 366 0
 1059 0016 044B     	 ldr r3,.L31+8
 1060 0018 4322     	 movs r2,#67
 1061 001a 1A70     	 strb r2,[r3]
 367:../main.c     **** }
 1062              	 .loc 4 367 0
 1063 001c 80BD     	 pop {r7,pc}
 1064              	.L32:
 1065 001e 00BF     	 .align 2
 1066              	.L31:
 1067 0020 00000000 	 .word time_since_C
 1068 0024 00000000 	 .word time_180deg
 1069 0028 00000000 	 .word last_Hall_trig
 1070              	 .cfi_endproc
 1071              	.LFE557:
 1073              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 1074              	 .align 2
 1075              	 .global CCU43_1_IRQHandler
 1076              	 .thumb
 1077              	 .thumb_func
 1079              	CCU43_1_IRQHandler:
 1080              	.LFB558:
 368:../main.c     **** 
 369:../main.c     **** /*
 370:../main.c     **** // Turn off driver at Overcurrent
 371:../main.c     **** void OverCurrent_U_ISR(void)
 372:../main.c     **** {
 373:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 374:../main.c     **** }
 375:../main.c     **** void OverCurrent_V_ISR(void)
 376:../main.c     **** {
 377:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 378:../main.c     **** }
 379:../main.c     **** void OverCurrent_W_ISR(void)
 380:../main.c     **** {
 381:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 382:../main.c     **** }
 383:../main.c     **** */
 384:../main.c     **** 
 385:../main.c     **** //ISR based on Timer_1 --> 100us time base
 386:../main.c     **** void ISR_INT1(void)
 387:../main.c     **** {
 1081              	 .loc 4 387 0
 1082              	 .cfi_startproc
 1083              	 
 1084              	 
 1085              	 
 1086 0000 80B4     	 push {r7}
 1087              	.LCFI51:
 1088              	 .cfi_def_cfa_offset 4
 1089              	 .cfi_offset 7,-4
 1090 0002 00AF     	 add r7,sp,#0
 1091              	.LCFI52:
 1092              	 .cfi_def_cfa_register 7
 388:../main.c     **** }
 1093              	 .loc 4 388 0
 1094 0004 BD46     	 mov sp,r7
 1095              	.LCFI53:
 1096              	 .cfi_def_cfa_register 13
 1097              	 
 1098 0006 5DF8047B 	 ldr r7,[sp],#4
 1099              	.LCFI54:
 1100              	 .cfi_restore 7
 1101              	 .cfi_def_cfa_offset 0
 1102 000a 7047     	 bx lr
 1103              	 .cfi_endproc
 1104              	.LFE558:
 1106              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 1107              	 .align 2
 1108              	 .global CCU80_3_IRQHandler
 1109              	 .thumb
 1110              	 .thumb_func
 1112              	CCU80_3_IRQHandler:
 1113              	.LFB559:
 389:../main.c     **** 
 390:../main.c     **** // ISR for Updating the SVM PWM -> 50us = 20kHz
 391:../main.c     **** void PeriodMatchInterruptHandler(void)
 392:../main.c     **** {
 1114              	 .loc 4 392 0
 1115              	 .cfi_startproc
 1116              	 
 1117              	 
 1118 0000 80B5     	 push {r7,lr}
 1119              	.LCFI55:
 1120              	 .cfi_def_cfa_offset 8
 1121              	 .cfi_offset 7,-8
 1122              	 .cfi_offset 14,-4
 1123 0002 82B0     	 sub sp,sp,#8
 1124              	.LCFI56:
 1125              	 .cfi_def_cfa_offset 16
 1126 0004 00AF     	 add r7,sp,#0
 1127              	.LCFI57:
 1128              	 .cfi_def_cfa_register 7
 393:../main.c     **** 	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 1129              	 .loc 4 393 0
 1130 0006 144B     	 ldr r3,.L36
 1131 0008 1B78     	 ldrb r3,[r3]
 1132 000a DBB2     	 uxtb r3,r3
 1133 000c 0133     	 adds r3,r3,#1
 1134 000e DAB2     	 uxtb r2,r3
 1135 0010 114B     	 ldr r3,.L36
 1136 0012 1A70     	 strb r2,[r3]
 394:../main.c     **** 	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 1137              	 .loc 4 394 0
 1138 0014 104B     	 ldr r3,.L36
 1139 0016 1B78     	 ldrb r3,[r3]
 1140 0018 DBB2     	 uxtb r3,r3
 1141 001a 012B     	 cmp r3,#1
 1142 001c 18D1     	 bne .L34
 395:../main.c     **** 		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_D
 1143              	 .loc 4 395 0
 1144 001e 0F4B     	 ldr r3,.L36+4
 1145 0020 D3ED007A 	 flds s15,[r3]
 1146 0024 FCEEE77A 	 ftouizs s15,s15
 1147 0028 C7ED017A 	 fsts s15,[r7,#4]
 1148 002c BB88     	 ldrh r3,[r7,#4]
 1149 002e 9AB2     	 uxth r2,r3
 1150 0030 0B4B     	 ldr r3,.L36+8
 1151 0032 D3ED007A 	 flds s15,[r3]
 1152 0036 FCEEE77A 	 ftouizs s15,s15
 1153 003a 17EE901A 	 fmrs r1,s15
 1154 003e 4BF20B63 	 movw r3,#46603
 1155 0042 03FB01F3 	 mul r3,r3,r1
 1156 0046 0748     	 ldr r0,.L36+12
 1157 0048 1146     	 mov r1,r2
 1158 004a 1A46     	 mov r2,r3
 1159 004c FFF7FEFF 	 bl PWM_SVM_SVMUpdate
 1160              	.L34:
 396:../main.c     **** 	}
 397:../main.c     **** }
 1161              	 .loc 4 397 0
 1162 0050 0837     	 adds r7,r7,#8
 1163              	.LCFI58:
 1164              	 .cfi_def_cfa_offset 8
 1165 0052 BD46     	 mov sp,r7
 1166              	.LCFI59:
 1167              	 .cfi_def_cfa_register 13
 1168              	 
 1169 0054 80BD     	 pop {r7,pc}
 1170              	.L37:
 1171 0056 00BF     	 .align 2
 1172              	.L36:
 1173 0058 00000000 	 .word count
 1174 005c 00000000 	 .word modulation_index_scaled
 1175 0060 00000000 	 .word angle_ab
 1176 0064 00000000 	 .word PWM_SVM_0
 1177              	 .cfi_endproc
 1178              	.LFE559:
 1180              	 .section .text.Hall_init,"ax",%progbits
 1181              	 .align 2
 1182              	 .global Hall_init
 1183              	 .thumb
 1184              	 .thumb_func
 1186              	Hall_init:
 1187              	.LFB560:
 398:../main.c     **** 
 399:../main.c     **** //########################
 400:../main.c     **** // FUNCTIONS
 401:../main.c     **** //########################
 402:../main.c     **** 
 403:../main.c     **** // Hall init -> readout of actual Hall pattern to determine the motor position
 404:../main.c     **** void Hall_init(void){
 1188              	 .loc 4 404 0
 1189              	 .cfi_startproc
 1190              	 
 1191              	 
 1192 0000 90B5     	 push {r4,r7,lr}
 1193              	.LCFI60:
 1194              	 .cfi_def_cfa_offset 12
 1195              	 .cfi_offset 4,-12
 1196              	 .cfi_offset 7,-8
 1197              	 .cfi_offset 14,-4
 1198 0002 83B0     	 sub sp,sp,#12
 1199              	.LCFI61:
 1200              	 .cfi_def_cfa_offset 24
 1201 0004 00AF     	 add r7,sp,#0
 1202              	.LCFI62:
 1203              	 .cfi_def_cfa_register 7
 405:../main.c     **** 
 406:../main.c     **** 	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinV
 1204              	 .loc 4 406 0
 1205 0006 2148     	 ldr r0,.L45
 1206 0008 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1207 000c 0346     	 mov r3,r0
 1208 000e DBB2     	 uxtb r3,r3
 1209 0010 5B00     	 lsls r3,r3,#1
 1210 0012 DCB2     	 uxtb r4,r3
 1211 0014 1E48     	 ldr r0,.L45+4
 1212 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1213 001a 0346     	 mov r3,r0
 1214 001c DBB2     	 uxtb r3,r3
 1215 001e 2343     	 orrs r3,r3,r4
 1216 0020 DBB2     	 uxtb r3,r3
 1217 0022 5B00     	 lsls r3,r3,#1
 1218 0024 DCB2     	 uxtb r4,r3
 1219 0026 1B48     	 ldr r0,.L45+8
 1220 0028 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1221 002c 0346     	 mov r3,r0
 1222 002e DBB2     	 uxtb r3,r3
 1223 0030 2343     	 orrs r3,r3,r4
 1224 0032 FB71     	 strb r3,[r7,#7]
 407:../main.c     **** 
 408:../main.c     **** 	 if(Hall_Initial == 0b100){sector = 0;}
 1225              	 .loc 4 408 0
 1226 0034 FB79     	 ldrb r3,[r7,#7]
 1227 0036 042B     	 cmp r3,#4
 1228 0038 03D1     	 bne .L39
 1229              	 .loc 4 408 0 is_stmt 0 discriminator 1
 1230 003a 174B     	 ldr r3,.L45+12
 1231 003c 0022     	 movs r2,#0
 1232 003e 1A70     	 strb r2,[r3]
 1233 0040 21E0     	 b .L38
 1234              	.L39:
 409:../main.c     **** 	 else if(Hall_Initial == 0b110){sector = 1;}
 1235              	 .loc 4 409 0 is_stmt 1
 1236 0042 FB79     	 ldrb r3,[r7,#7]
 1237 0044 062B     	 cmp r3,#6
 1238 0046 03D1     	 bne .L41
 1239              	 .loc 4 409 0 is_stmt 0 discriminator 1
 1240 0048 134B     	 ldr r3,.L45+12
 1241 004a 0122     	 movs r2,#1
 1242 004c 1A70     	 strb r2,[r3]
 1243 004e 1AE0     	 b .L38
 1244              	.L41:
 410:../main.c     **** 	 else if(Hall_Initial == 0b010){sector = 2;}
 1245              	 .loc 4 410 0 is_stmt 1
 1246 0050 FB79     	 ldrb r3,[r7,#7]
 1247 0052 022B     	 cmp r3,#2
 1248 0054 03D1     	 bne .L42
 1249              	 .loc 4 410 0 is_stmt 0 discriminator 1
 1250 0056 104B     	 ldr r3,.L45+12
 1251 0058 0222     	 movs r2,#2
 1252 005a 1A70     	 strb r2,[r3]
 1253 005c 13E0     	 b .L38
 1254              	.L42:
 411:../main.c     **** 	 else if(Hall_Initial == 0b011){sector = 3;}
 1255              	 .loc 4 411 0 is_stmt 1
 1256 005e FB79     	 ldrb r3,[r7,#7]
 1257 0060 032B     	 cmp r3,#3
 1258 0062 03D1     	 bne .L43
 1259              	 .loc 4 411 0 is_stmt 0 discriminator 1
 1260 0064 0C4B     	 ldr r3,.L45+12
 1261 0066 0322     	 movs r2,#3
 1262 0068 1A70     	 strb r2,[r3]
 1263 006a 0CE0     	 b .L38
 1264              	.L43:
 412:../main.c     **** 	 else if(Hall_Initial == 0b001){sector = 4;}
 1265              	 .loc 4 412 0 is_stmt 1
 1266 006c FB79     	 ldrb r3,[r7,#7]
 1267 006e 012B     	 cmp r3,#1
 1268 0070 03D1     	 bne .L44
 1269              	 .loc 4 412 0 is_stmt 0 discriminator 1
 1270 0072 094B     	 ldr r3,.L45+12
 1271 0074 0422     	 movs r2,#4
 1272 0076 1A70     	 strb r2,[r3]
 1273 0078 05E0     	 b .L38
 1274              	.L44:
 413:../main.c     **** 	 else if(Hall_Initial == 0b101){sector = 5;}
 1275              	 .loc 4 413 0 is_stmt 1
 1276 007a FB79     	 ldrb r3,[r7,#7]
 1277 007c 052B     	 cmp r3,#5
 1278 007e 02D1     	 bne .L38
 1279              	 .loc 4 413 0 is_stmt 0 discriminator 1
 1280 0080 054B     	 ldr r3,.L45+12
 1281 0082 0522     	 movs r2,#5
 1282 0084 1A70     	 strb r2,[r3]
 1283              	.L38:
 414:../main.c     **** }
 1284              	 .loc 4 414 0 is_stmt 1
 1285 0086 0C37     	 adds r7,r7,#12
 1286              	.LCFI63:
 1287              	 .cfi_def_cfa_offset 12
 1288 0088 BD46     	 mov sp,r7
 1289              	.LCFI64:
 1290              	 .cfi_def_cfa_register 13
 1291              	 
 1292 008a 90BD     	 pop {r4,r7,pc}
 1293              	.L46:
 1294              	 .align 2
 1295              	.L45:
 1296 008c 00000000 	 .word Hall_A_ISR
 1297 0090 00000000 	 .word Hall_B_ISR
 1298 0094 00000000 	 .word Hall_C_ISR
 1299 0098 00000000 	 .word sector
 1300              	 .cfi_endproc
 1301              	.LFE560:
 1303              	 .section .text.HallSensor,"ax",%progbits
 1304              	 .align 2
 1305              	 .global HallSensor
 1306              	 .thumb
 1307              	 .thumb_func
 1309              	HallSensor:
 1310              	.LFB561:
 415:../main.c     **** 
 416:../main.c     **** // Function to determine direction and current Sector
 417:../main.c     **** void HallSensor(void){
 1311              	 .loc 4 417 0
 1312              	 .cfi_startproc
 1313              	 
 1314              	 
 1315 0000 90B5     	 push {r4,r7,lr}
 1316              	.LCFI65:
 1317              	 .cfi_def_cfa_offset 12
 1318              	 .cfi_offset 4,-12
 1319              	 .cfi_offset 7,-8
 1320              	 .cfi_offset 14,-4
 1321 0002 83B0     	 sub sp,sp,#12
 1322              	.LCFI66:
 1323              	 .cfi_def_cfa_offset 24
 1324 0004 00AF     	 add r7,sp,#0
 1325              	.LCFI67:
 1326              	 .cfi_def_cfa_register 7
 418:../main.c     **** 	enc_val = enc_val << 3; //shift old values and make space for new ones
 1327              	 .loc 4 418 0
 1328 0006 2E4B     	 ldr r3,.L54
 1329 0008 1B88     	 ldrh r3,[r3]
 1330 000a 9BB2     	 uxth r3,r3
 1331 000c DB00     	 lsls r3,r3,#3
 1332 000e 9AB2     	 uxth r2,r3
 1333 0010 2B4B     	 ldr r3,.L54
 1334 0012 1A80     	 strh r2,[r3]
 419:../main.c     **** 	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(
 1335              	 .loc 4 419 0
 1336 0014 2B48     	 ldr r0,.L54+4
 1337 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1338 001a 0346     	 mov r3,r0
 1339 001c DBB2     	 uxtb r3,r3
 1340 001e 5B00     	 lsls r3,r3,#1
 1341 0020 DCB2     	 uxtb r4,r3
 1342 0022 2948     	 ldr r0,.L54+8
 1343 0024 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1344 0028 0346     	 mov r3,r0
 1345 002a DBB2     	 uxtb r3,r3
 1346 002c 2343     	 orrs r3,r3,r4
 1347 002e DBB2     	 uxtb r3,r3
 1348 0030 5B00     	 lsls r3,r3,#1
 1349 0032 DCB2     	 uxtb r4,r3
 1350 0034 2548     	 ldr r0,.L54+12
 1351 0036 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1352 003a 0346     	 mov r3,r0
 1353 003c DBB2     	 uxtb r3,r3
 1354 003e 2343     	 orrs r3,r3,r4
 1355 0040 FB71     	 strb r3,[r7,#7]
 420:../main.c     **** 	enc_val = enc_val | Hall_status; //read Sensor values and store them
 1356              	 .loc 4 420 0
 1357 0042 FB79     	 ldrb r3,[r7,#7]
 1358 0044 9AB2     	 uxth r2,r3
 1359 0046 1E4B     	 ldr r3,.L54
 1360 0048 1B88     	 ldrh r3,[r3]
 1361 004a 9BB2     	 uxth r3,r3
 1362 004c 1343     	 orrs r3,r3,r2
 1363 004e 9AB2     	 uxth r2,r3
 1364 0050 1B4B     	 ldr r3,.L54
 1365 0052 1A80     	 strh r2,[r3]
 421:../main.c     **** 	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual an
 1366              	 .loc 4 421 0
 1367 0054 1A4B     	 ldr r3,.L54
 1368 0056 1B88     	 ldrh r3,[r3]
 1369 0058 9BB2     	 uxth r3,r3
 1370 005a 03F03F03 	 and r3,r3,#63
 1371 005e 1C4A     	 ldr r2,.L54+16
 1372 0060 D25C     	 ldrb r2,[r2,r3]
 1373 0062 1C4B     	 ldr r3,.L54+20
 1374 0064 1A70     	 strb r2,[r3]
 422:../main.c     **** 
 423:../main.c     **** 	if(Hall_status == 0b100){sector = 0;}
 1375              	 .loc 4 423 0
 1376 0066 FB79     	 ldrb r3,[r7,#7]
 1377 0068 042B     	 cmp r3,#4
 1378 006a 03D1     	 bne .L48
 1379              	 .loc 4 423 0 is_stmt 0 discriminator 1
 1380 006c 1A4B     	 ldr r3,.L54+24
 1381 006e 0022     	 movs r2,#0
 1382 0070 1A70     	 strb r2,[r3]
 1383 0072 21E0     	 b .L47
 1384              	.L48:
 424:../main.c     **** 		 else if(Hall_status == 0b110){sector = 1;}
 1385              	 .loc 4 424 0 is_stmt 1
 1386 0074 FB79     	 ldrb r3,[r7,#7]
 1387 0076 062B     	 cmp r3,#6
 1388 0078 03D1     	 bne .L50
 1389              	 .loc 4 424 0 is_stmt 0 discriminator 1
 1390 007a 174B     	 ldr r3,.L54+24
 1391 007c 0122     	 movs r2,#1
 1392 007e 1A70     	 strb r2,[r3]
 1393 0080 1AE0     	 b .L47
 1394              	.L50:
 425:../main.c     **** 		 else if(Hall_status == 0b010){sector = 2;}
 1395              	 .loc 4 425 0 is_stmt 1
 1396 0082 FB79     	 ldrb r3,[r7,#7]
 1397 0084 022B     	 cmp r3,#2
 1398 0086 03D1     	 bne .L51
 1399              	 .loc 4 425 0 is_stmt 0 discriminator 1
 1400 0088 134B     	 ldr r3,.L54+24
 1401 008a 0222     	 movs r2,#2
 1402 008c 1A70     	 strb r2,[r3]
 1403 008e 13E0     	 b .L47
 1404              	.L51:
 426:../main.c     **** 		 else if(Hall_status == 0b011){sector = 3;}
 1405              	 .loc 4 426 0 is_stmt 1
 1406 0090 FB79     	 ldrb r3,[r7,#7]
 1407 0092 032B     	 cmp r3,#3
 1408 0094 03D1     	 bne .L52
 1409              	 .loc 4 426 0 is_stmt 0 discriminator 1
 1410 0096 104B     	 ldr r3,.L54+24
 1411 0098 0322     	 movs r2,#3
 1412 009a 1A70     	 strb r2,[r3]
 1413 009c 0CE0     	 b .L47
 1414              	.L52:
 427:../main.c     **** 		 else if(Hall_status == 0b001){sector = 4;}
 1415              	 .loc 4 427 0 is_stmt 1
 1416 009e FB79     	 ldrb r3,[r7,#7]
 1417 00a0 012B     	 cmp r3,#1
 1418 00a2 03D1     	 bne .L53
 1419              	 .loc 4 427 0 is_stmt 0 discriminator 1
 1420 00a4 0C4B     	 ldr r3,.L54+24
 1421 00a6 0422     	 movs r2,#4
 1422 00a8 1A70     	 strb r2,[r3]
 1423 00aa 05E0     	 b .L47
 1424              	.L53:
 428:../main.c     **** 		 else if(Hall_status == 0b101){sector = 5;}
 1425              	 .loc 4 428 0 is_stmt 1
 1426 00ac FB79     	 ldrb r3,[r7,#7]
 1427 00ae 052B     	 cmp r3,#5
 1428 00b0 02D1     	 bne .L47
 1429              	 .loc 4 428 0 is_stmt 0 discriminator 1
 1430 00b2 094B     	 ldr r3,.L54+24
 1431 00b4 0522     	 movs r2,#5
 1432 00b6 1A70     	 strb r2,[r3]
 1433              	.L47:
 429:../main.c     **** 
 430:../main.c     **** }
 1434              	 .loc 4 430 0 is_stmt 1
 1435 00b8 0C37     	 adds r7,r7,#12
 1436              	.LCFI68:
 1437              	 .cfi_def_cfa_offset 12
 1438 00ba BD46     	 mov sp,r7
 1439              	.LCFI69:
 1440              	 .cfi_def_cfa_register 13
 1441              	 
 1442 00bc 90BD     	 pop {r4,r7,pc}
 1443              	.L55:
 1444 00be 00BF     	 .align 2
 1445              	.L54:
 1446 00c0 00000000 	 .word enc_val
 1447 00c4 00000000 	 .word Hall_A_ISR
 1448 00c8 00000000 	 .word Hall_B_ISR
 1449 00cc 00000000 	 .word Hall_C_ISR
 1450 00d0 00000000 	 .word lookup_table
 1451 00d4 00000000 	 .word direction
 1452 00d8 00000000 	 .word sector
 1453              	 .cfi_endproc
 1454              	.LFE561:
 1456              	 .global __aeabi_f2d
 1457              	 .global __aeabi_ddiv
 1458              	 .global __aeabi_ui2d
 1459              	 .global __aeabi_dmul
 1460              	 .global __aeabi_d2f
 1461              	 .global __aeabi_i2d
 1462              	 .global __aeabi_dadd
 1463              	 .global __aeabi_dsub
 1464              	 .global __aeabi_dcmpeq
 1465              	 .section .text.Calculation,"ax",%progbits
 1466              	 .align 2
 1467              	 .global Calculation
 1468              	 .thumb
 1469              	 .thumb_func
 1471              	Calculation:
 1472              	.LFB562:
 431:../main.c     **** // Routine for calculation (sector, clark-Park trans.,...)
 432:../main.c     **** 
 433:../main.c     **** //5kHz loop since every 4th step of 50us --> 200us --> 5kHz
 434:../main.c     **** void Calculation(void){
 1473              	 .loc 4 434 0
 1474              	 .cfi_startproc
 1475              	 
 1476              	 
 1477 0000 B0B5     	 push {r4,r5,r7,lr}
 1478              	.LCFI70:
 1479              	 .cfi_def_cfa_offset 16
 1480              	 .cfi_offset 4,-16
 1481              	 .cfi_offset 5,-12
 1482              	 .cfi_offset 7,-8
 1483              	 .cfi_offset 14,-4
 1484 0002 2DED028B 	 fstmfdd sp!,{d8}
 1485              	.LCFI71:
 1486              	 .cfi_def_cfa_offset 24
 1487              	 .cfi_offset 80,-24
 1488              	 .cfi_offset 81,-20
 1489 0006 84B0     	 sub sp,sp,#16
 1490              	.LCFI72:
 1491              	 .cfi_def_cfa_offset 40
 1492 0008 00AF     	 add r7,sp,#0
 1493              	.LCFI73:
 1494              	 .cfi_def_cfa_register 7
 435:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 1495              	 .loc 4 435 0
 1496 000a B448     	 ldr r0,.L120
 1497 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 436:../main.c     **** 		// Actual time since last angle update via Hall Sensor
 437:../main.c     **** 		uint32_t t;
 438:../main.c     **** 		if(last_Hall_trig == 'A') t = time_since_A;
 1498              	 .loc 4 438 0
 1499 0010 B34B     	 ldr r3,.L120+4
 1500 0012 1B78     	 ldrb r3,[r3]
 1501 0014 DBB2     	 uxtb r3,r3
 1502 0016 412B     	 cmp r3,#65
 1503 0018 03D1     	 bne .L57
 1504              	 .loc 4 438 0 is_stmt 0 discriminator 1
 1505 001a B24B     	 ldr r3,.L120+8
 1506 001c 1B68     	 ldr r3,[r3]
 1507 001e FB60     	 str r3,[r7,#12]
 1508 0020 10E0     	 b .L58
 1509              	.L57:
 439:../main.c     **** 		else if(last_Hall_trig == 'B') t = time_since_B;
 1510              	 .loc 4 439 0 is_stmt 1
 1511 0022 AF4B     	 ldr r3,.L120+4
 1512 0024 1B78     	 ldrb r3,[r3]
 1513 0026 DBB2     	 uxtb r3,r3
 1514 0028 422B     	 cmp r3,#66
 1515 002a 03D1     	 bne .L59
 1516              	 .loc 4 439 0 is_stmt 0 discriminator 1
 1517 002c AE4B     	 ldr r3,.L120+12
 1518 002e 1B68     	 ldr r3,[r3]
 1519 0030 FB60     	 str r3,[r7,#12]
 1520 0032 07E0     	 b .L58
 1521              	.L59:
 440:../main.c     **** 		else if(last_Hall_trig == 'C') t = time_since_C;
 1522              	 .loc 4 440 0 is_stmt 1
 1523 0034 AA4B     	 ldr r3,.L120+4
 1524 0036 1B78     	 ldrb r3,[r3]
 1525 0038 DBB2     	 uxtb r3,r3
 1526 003a 432B     	 cmp r3,#67
 1527 003c 02D1     	 bne .L58
 1528              	 .loc 4 440 0 is_stmt 0 discriminator 1
 1529 003e AB4B     	 ldr r3,.L120+16
 1530 0040 1B68     	 ldr r3,[r3]
 1531 0042 FB60     	 str r3,[r7,#12]
 1532              	.L58:
 441:../main.c     **** 		time_180deg_cal = time_180deg;
 1533              	 .loc 4 441 0 is_stmt 1
 1534 0044 AA4B     	 ldr r3,.L120+20
 1535 0046 1B68     	 ldr r3,[r3]
 1536 0048 AA4A     	 ldr r2,.L120+24
 1537 004a 1360     	 str r3,[r2]
 442:../main.c     **** 		// not fixing sector for calc because if chainges better to do so
 443:../main.c     **** 
 444:../main.c     **** 		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 1538              	 .loc 4 444 0
 1539 004c A94B     	 ldr r3,.L120+24
 1540 004e 1B68     	 ldr r3,[r3]
 1541 0050 40F6C412 	 movw r2,#2500
 1542 0054 9342     	 cmp r3,r2
 1543 0056 04D9     	 bls .L60
 1544              	 .loc 4 444 0 is_stmt 0 discriminator 1
 1545 0058 A64B     	 ldr r3,.L120+24
 1546 005a 40F6C412 	 movw r2,#2500
 1547 005e 1A60     	 str r2,[r3]
 1548 0060 06E0     	 b .L61
 1549              	.L60:
 445:../main.c     **** 		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 1550              	 .loc 4 445 0 is_stmt 1
 1551 0062 A44B     	 ldr r3,.L120+24
 1552 0064 1B68     	 ldr r3,[r3]
 1553 0066 012B     	 cmp r3,#1
 1554 0068 02D8     	 bhi .L61
 1555              	 .loc 4 445 0 is_stmt 0 discriminator 1
 1556 006a A24B     	 ldr r3,.L120+24
 1557 006c 0222     	 movs r2,#2
 1558 006e 1A60     	 str r2,[r3]
 1559              	.L61:
 446:../main.c     **** 
 447:../main.c     **** 		if(t < TIME_OMEGA_0){
 1560              	 .loc 4 447 0 is_stmt 1
 1561 0070 FB68     	 ldr r3,[r7,#12]
 1562 0072 41F28732 	 movw r2,#4999
 1563 0076 9342     	 cmp r3,r2
 1564 0078 35D8     	 bhi .L62
 448:../main.c     **** 			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 1565              	 .loc 4 448 0
 1566 007a 9E4B     	 ldr r3,.L120+24
 1567 007c 1B68     	 ldr r3,[r3]
 1568 007e 07EE903A 	 fmsr s15,r3
 1569 0082 F8EE677A 	 fuitos s15,s15
 1570 0086 17EE900A 	 fmrs r0,s15
 1571 008a FFF7FEFF 	 bl __aeabi_f2d
 1572 008e 0246     	 mov r2,r0
 1573 0090 0B46     	 mov r3,r1
 1574 0092 4FF00000 	 mov r0,#0
 1575 0096 9849     	 ldr r1,.L120+28
 1576 0098 FFF7FEFF 	 bl __aeabi_ddiv
 1577 009c 0246     	 mov r2,r0
 1578 009e 0B46     	 mov r3,r1
 1579 00a0 1446     	 mov r4,r2
 1580 00a2 1D46     	 mov r5,r3
 1581 00a4 F868     	 ldr r0,[r7,#12]
 1582 00a6 FFF7FEFF 	 bl __aeabi_ui2d
 1583 00aa 0246     	 mov r2,r0
 1584 00ac 0B46     	 mov r3,r1
 1585 00ae 2046     	 mov r0,r4
 1586 00b0 2946     	 mov r1,r5
 1587 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1588 00b6 0246     	 mov r2,r0
 1589 00b8 0B46     	 mov r3,r1
 1590 00ba 1046     	 mov r0,r2
 1591 00bc 1946     	 mov r1,r3
 1592 00be FFF7FEFF 	 bl __aeabi_d2f
 1593 00c2 0246     	 mov r2,r0
 1594 00c4 8D4B     	 ldr r3,.L120+32
 1595 00c6 1A60     	 str r2,[r3]
 449:../main.c     **** 			if(angle_in_sector > 60) angle_in_sector = 60;
 1596              	 .loc 4 449 0
 1597 00c8 8C4B     	 ldr r3,.L120+32
 1598 00ca D3ED007A 	 flds s15,[r3]
 1599 00ce 9FED8C7A 	 flds s14,.L120+36
 1600 00d2 F4EEC77A 	 fcmpes s15,s14
 1601 00d6 F1EE10FA 	 fmstat
 1602 00da 00DC     	 bgt .L104
 1603 00dc 06E0     	 b .L65
 1604              	.L104:
 1605              	 .loc 4 449 0 is_stmt 0 discriminator 1
 1606 00de 874B     	 ldr r3,.L120+32
 1607 00e0 884A     	 ldr r2,.L120+40
 1608 00e2 1A60     	 str r2,[r3]
 1609 00e4 02E0     	 b .L65
 1610              	.L62:
 450:../main.c     **** 		}
 451:../main.c     **** 		else{
 452:../main.c     **** 			angle_in_sector = 30; // standig still
 1611              	 .loc 4 452 0 is_stmt 1
 1612 00e6 854B     	 ldr r3,.L120+32
 1613 00e8 874A     	 ldr r2,.L120+44
 1614 00ea 1A60     	 str r2,[r3]
 1615              	.L65:
 453:../main.c     **** 		}
 454:../main.c     **** 
 455:../main.c     **** 		// CW
 456:../main.c     **** 		if(direction==1)
 1616              	 .loc 4 456 0
 1617 00ec 874B     	 ldr r3,.L120+48
 1618 00ee 1B78     	 ldrb r3,[r3]
 1619 00f0 DBB2     	 uxtb r3,r3
 1620 00f2 5BB2     	 sxtb r3,r3
 1621 00f4 012B     	 cmp r3,#1
 1622 00f6 54D1     	 bne .L66
 457:../main.c     **** 		{
 458:../main.c     **** 			angle_phi = (sector*60.0)+angle_in_sector;
 1623              	 .loc 4 458 0
 1624 00f8 854B     	 ldr r3,.L120+52
 1625 00fa 1B78     	 ldrb r3,[r3]
 1626 00fc DBB2     	 uxtb r3,r3
 1627 00fe 5BB2     	 sxtb r3,r3
 1628 0100 1846     	 mov r0,r3
 1629 0102 FFF7FEFF 	 bl __aeabi_i2d
 1630 0106 0246     	 mov r2,r0
 1631 0108 0B46     	 mov r3,r1
 1632 010a 1046     	 mov r0,r2
 1633 010c 1946     	 mov r1,r3
 1634 010e 4FF00002 	 mov r2,#0
 1635 0112 804B     	 ldr r3,.L120+56
 1636 0114 FFF7FEFF 	 bl __aeabi_dmul
 1637 0118 0246     	 mov r2,r0
 1638 011a 0B46     	 mov r3,r1
 1639 011c 1446     	 mov r4,r2
 1640 011e 1D46     	 mov r5,r3
 1641 0120 764B     	 ldr r3,.L120+32
 1642 0122 1B68     	 ldr r3,[r3]
 1643 0124 1846     	 mov r0,r3
 1644 0126 FFF7FEFF 	 bl __aeabi_f2d
 1645 012a 0246     	 mov r2,r0
 1646 012c 0B46     	 mov r3,r1
 1647 012e 2046     	 mov r0,r4
 1648 0130 2946     	 mov r1,r5
 1649 0132 FFF7FEFF 	 bl __aeabi_dadd
 1650 0136 0246     	 mov r2,r0
 1651 0138 0B46     	 mov r3,r1
 1652 013a 1046     	 mov r0,r2
 1653 013c 1946     	 mov r1,r3
 1654 013e FFF7FEFF 	 bl __aeabi_d2f
 1655 0142 0246     	 mov r2,r0
 1656 0144 744B     	 ldr r3,.L120+60
 1657 0146 1A60     	 str r2,[r3]
 459:../main.c     **** 			angle_phi=angle_phi+offset_pos;
 1658              	 .loc 4 459 0
 1659 0148 734B     	 ldr r3,.L120+60
 1660 014a 93ED007A 	 flds s14,[r3]
 1661 014e 734B     	 ldr r3,.L120+64
 1662 0150 D3ED007A 	 flds s15,[r3]
 1663 0154 77EE277A 	 fadds s15,s14,s15
 1664 0158 6F4B     	 ldr r3,.L120+60
 1665 015a C3ED007A 	 fsts s15,[r3]
 460:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 1666              	 .loc 4 460 0
 1667 015e 6E4B     	 ldr r3,.L120+60
 1668 0160 D3ED007A 	 flds s15,[r3]
 1669 0164 9FED6E7A 	 flds s14,.L120+68
 1670 0168 F4EEC77A 	 fcmpes s15,s14
 1671 016c F1EE10FA 	 fmstat
 1672 0170 09DD     	 ble .L67
 1673              	 .loc 4 460 0 is_stmt 0 discriminator 1
 1674 0172 694B     	 ldr r3,.L120+60
 1675 0174 D3ED007A 	 flds s15,[r3]
 1676 0178 9FED697A 	 flds s14,.L120+68
 1677 017c 77EEC77A 	 fsubs s15,s15,s14
 1678 0180 654B     	 ldr r3,.L120+60
 1679 0182 C3ED007A 	 fsts s15,[r3]
 1680              	.L67:
 461:../main.c     **** 
 462:../main.c     **** 			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
 1681              	 .loc 4 462 0 is_stmt 1
 1682 0186 5B4B     	 ldr r3,.L120+24
 1683 0188 1B68     	 ldr r3,[r3]
 1684 018a 07EE903A 	 fmsr s15,r3
 1685 018e F8EE677A 	 fuitos s15,s15
 1686 0192 9FED647A 	 flds s14,.L120+72
 1687 0196 C7EE277A 	 fdivs s15,s14,s15
 1688 019a 634B     	 ldr r3,.L120+76
 1689 019c C3ED007A 	 fsts s15,[r3]
 1690 01a0 6FE0     	 b .L69
 1691              	.L66:
 463:../main.c     **** 		}
 464:../main.c     **** 		// CCW
 465:../main.c     **** 		else{
 466:../main.c     **** 			angle_phi = (sector*60.0)-angle_in_sector;
 1692              	 .loc 4 466 0
 1693 01a2 5B4B     	 ldr r3,.L120+52
 1694 01a4 1B78     	 ldrb r3,[r3]
 1695 01a6 DBB2     	 uxtb r3,r3
 1696 01a8 5BB2     	 sxtb r3,r3
 1697 01aa 1846     	 mov r0,r3
 1698 01ac FFF7FEFF 	 bl __aeabi_i2d
 1699 01b0 0246     	 mov r2,r0
 1700 01b2 0B46     	 mov r3,r1
 1701 01b4 1046     	 mov r0,r2
 1702 01b6 1946     	 mov r1,r3
 1703 01b8 4FF00002 	 mov r2,#0
 1704 01bc 554B     	 ldr r3,.L120+56
 1705 01be FFF7FEFF 	 bl __aeabi_dmul
 1706 01c2 0246     	 mov r2,r0
 1707 01c4 0B46     	 mov r3,r1
 1708 01c6 1446     	 mov r4,r2
 1709 01c8 1D46     	 mov r5,r3
 1710 01ca 4C4B     	 ldr r3,.L120+32
 1711 01cc 1B68     	 ldr r3,[r3]
 1712 01ce 1846     	 mov r0,r3
 1713 01d0 FFF7FEFF 	 bl __aeabi_f2d
 1714 01d4 0246     	 mov r2,r0
 1715 01d6 0B46     	 mov r3,r1
 1716 01d8 2046     	 mov r0,r4
 1717 01da 2946     	 mov r1,r5
 1718 01dc FFF7FEFF 	 bl __aeabi_dsub
 1719 01e0 0246     	 mov r2,r0
 1720 01e2 0B46     	 mov r3,r1
 1721 01e4 1046     	 mov r0,r2
 1722 01e6 1946     	 mov r1,r3
 1723 01e8 FFF7FEFF 	 bl __aeabi_d2f
 1724 01ec 0246     	 mov r2,r0
 1725 01ee 4A4B     	 ldr r3,.L120+60
 1726 01f0 1A60     	 str r2,[r3]
 467:../main.c     **** 			angle_phi = angle_phi+60.0;
 1727              	 .loc 4 467 0
 1728 01f2 494B     	 ldr r3,.L120+60
 1729 01f4 D3ED007A 	 flds s15,[r3]
 1730 01f8 9FED417A 	 flds s14,.L120+36
 1731 01fc 77EE877A 	 fadds s15,s15,s14
 1732 0200 454B     	 ldr r3,.L120+60
 1733 0202 C3ED007A 	 fsts s15,[r3]
 468:../main.c     **** 			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 1734              	 .loc 4 468 0
 1735 0206 444B     	 ldr r3,.L120+60
 1736 0208 D3ED007A 	 flds s15,[r3]
 1737 020c F5EEC07A 	 fcmpezs s15
 1738 0210 F1EE10FA 	 fmstat
 1739 0214 09D5     	 bpl .L70
 1740              	 .loc 4 468 0 is_stmt 0 discriminator 1
 1741 0216 404B     	 ldr r3,.L120+60
 1742 0218 D3ED007A 	 flds s15,[r3]
 1743 021c 9FED407A 	 flds s14,.L120+68
 1744 0220 77EE877A 	 fadds s15,s15,s14
 1745 0224 3C4B     	 ldr r3,.L120+60
 1746 0226 C3ED007A 	 fsts s15,[r3]
 1747              	.L70:
 469:../main.c     **** 			angle_phi=angle_phi+offset_neg;
 1748              	 .loc 4 469 0 is_stmt 1
 1749 022a 3B4B     	 ldr r3,.L120+60
 1750 022c 93ED007A 	 flds s14,[r3]
 1751 0230 3E4B     	 ldr r3,.L120+80
 1752 0232 D3ED007A 	 flds s15,[r3]
 1753 0236 77EE277A 	 fadds s15,s14,s15
 1754 023a 374B     	 ldr r3,.L120+60
 1755 023c C3ED007A 	 fsts s15,[r3]
 470:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 1756              	 .loc 4 470 0
 1757 0240 354B     	 ldr r3,.L120+60
 1758 0242 D3ED007A 	 flds s15,[r3]
 1759 0246 9FED367A 	 flds s14,.L120+68
 1760 024a F4EEC77A 	 fcmpes s15,s14
 1761 024e F1EE10FA 	 fmstat
 1762 0252 09DD     	 ble .L72
 1763              	 .loc 4 470 0 is_stmt 0 discriminator 1
 1764 0254 304B     	 ldr r3,.L120+60
 1765 0256 D3ED007A 	 flds s15,[r3]
 1766 025a 9FED317A 	 flds s14,.L120+68
 1767 025e 77EEC77A 	 fsubs s15,s15,s14
 1768 0262 2D4B     	 ldr r3,.L120+60
 1769 0264 C3ED007A 	 fsts s15,[r3]
 1770              	.L72:
 471:../main.c     **** 
 472:../main.c     **** 			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
 1771              	 .loc 4 472 0 is_stmt 1
 1772 0268 224B     	 ldr r3,.L120+24
 1773 026a 1B68     	 ldr r3,[r3]
 1774 026c 07EE903A 	 fmsr s15,r3
 1775 0270 F8EE677A 	 fuitos s15,s15
 1776 0274 9FED2E7A 	 flds s14,.L120+84
 1777 0278 C7EE277A 	 fdivs s15,s14,s15
 1778 027c 2A4B     	 ldr r3,.L120+76
 1779 027e C3ED007A 	 fsts s15,[r3]
 1780              	.L69:
 473:../main.c     **** 		}
 474:../main.c     **** 
 475:../main.c     **** 		Speed_detection_OK = 0;
 1781              	 .loc 4 475 0
 1782 0282 2C4B     	 ldr r3,.L120+88
 1783 0284 0022     	 movs r2,#0
 1784 0286 1A70     	 strb r2,[r3]
 476:../main.c     **** 		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large pea
 1785              	 .loc 4 476 0
 1786 0288 274B     	 ldr r3,.L120+76
 1787 028a D3ED007A 	 flds s15,[r3]
 1788 028e 9FED2A7A 	 flds s14,.L120+92
 1789 0292 F4EEC77A 	 fcmpes s15,s14
 1790 0296 F1EE10FA 	 fmstat
 1791 029a 10D5     	 bpl .L74
 1792              	 .loc 4 476 0 is_stmt 0 discriminator 1
 1793 029c 224B     	 ldr r3,.L120+76
 1794 029e D3ED007A 	 flds s15,[r3]
 1795 02a2 9FED267A 	 flds s14,.L120+96
 1796 02a6 F4EEC77A 	 fcmpes s15,s14
 1797 02aa F1EE10FA 	 fmstat
 1798 02ae 06DD     	 ble .L74
 477:../main.c     **** 		{
 478:../main.c     **** 			omega_mech_rps = omega_mech_rps_temp;
 1799              	 .loc 4 478 0 is_stmt 1
 1800 02b0 1D4B     	 ldr r3,.L120+76
 1801 02b2 1B68     	 ldr r3,[r3]
 1802 02b4 224A     	 ldr r2,.L120+100
 1803 02b6 1360     	 str r3,[r2]
 479:../main.c     **** 			Speed_detection_OK = 1;
 1804              	 .loc 4 479 0
 1805 02b8 1E4B     	 ldr r3,.L120+88
 1806 02ba 0122     	 movs r2,#1
 1807 02bc 1A70     	 strb r2,[r3]
 1808              	.L74:
 480:../main.c     **** 		}
 481:../main.c     **** 
 482:../main.c     **** 		if(t > TIME_OMEGA_0){
 1809              	 .loc 4 482 0
 1810 02be FB68     	 ldr r3,[r7,#12]
 1811 02c0 41F28832 	 movw r2,#5000
 1812 02c4 9342     	 cmp r3,r2
 1813 02c6 3FD9     	 bls .L77
 483:../main.c     **** 			omega_ele_rads = 0;
 1814              	 .loc 4 483 0
 1815 02c8 1E4B     	 ldr r3,.L120+104
 1816 02ca 4FF00002 	 mov r2,#0
 1817 02ce 1A60     	 str r2,[r3]
 484:../main.c     **** 			omega_mech_rps = 0;
 1818              	 .loc 4 484 0
 1819 02d0 1B4B     	 ldr r3,.L120+100
 1820 02d2 4FF00002 	 mov r2,#0
 1821 02d6 1A60     	 str r2,[r3]
 1822 02d8 5AE0     	 b .L78
 1823              	.L121:
 1824 02da 00BF     	 .align 2
 1825              	.L120:
 1826 02dc 00000000 	 .word status_LED_red_cal_time
 1827 02e0 00000000 	 .word last_Hall_trig
 1828 02e4 00000000 	 .word time_since_A
 1829 02e8 00000000 	 .word time_since_B
 1830 02ec 00000000 	 .word time_since_C
 1831 02f0 00000000 	 .word time_180deg
 1832 02f4 00000000 	 .word time_180deg_cal
 1833 02f8 00806640 	 .word 1080459264
 1834 02fc 00000000 	 .word angle_in_sector
 1835 0300 00007042 	 .word 1114636288
 1836 0304 00007042 	 .word 1114636288
 1837 0308 0000F041 	 .word 1106247680
 1838 030c 00000000 	 .word direction
 1839 0310 00000000 	 .word sector
 1840 0314 00004E40 	 .word 1078853632
 1841 0318 00000000 	 .word angle_phi
 1842 031c 00000000 	 .word offset_pos
 1843 0320 0000B443 	 .word 1135869952
 1844 0324 0000E143 	 .word 1138819072
 1845 0328 00000000 	 .word omega_mech_rps_temp
 1846 032c 00000000 	 .word offset_neg
 1847 0330 0000E1C3 	 .word -1008664576
 1848 0334 00000000 	 .word Speed_detection_OK
 1849 0338 00004843 	 .word 1128792064
 1850 033c 000048C3 	 .word -1018691584
 1851 0340 00000000 	 .word omega_mech_rps
 1852 0344 00000000 	 .word omega_ele_rads
 1853              	.L77:
 485:../main.c     **** 		} // set omega  to 0 if no more hall detected
 486:../main.c     **** 		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s
 1854              	 .loc 4 486 0
 1855 0348 A34B     	 ldr r3,.L122+40
 1856 034a D3ED007A 	 flds s15,[r3]
 1857 034e 77EEA77A 	 fadds s15,s15,s15
 1858 0352 17EE900A 	 fmrs r0,s15
 1859 0356 FFF7FEFF 	 bl __aeabi_f2d
 1860 035a 0246     	 mov r2,r0
 1861 035c 0B46     	 mov r3,r1
 1862 035e 1046     	 mov r0,r2
 1863 0360 1946     	 mov r1,r3
 1864 0362 93A3     	 adr r3,.L122
 1865 0364 D3E90023 	 ldrd r2,[r3]
 1866 0368 FFF7FEFF 	 bl __aeabi_dmul
 1867 036c 0246     	 mov r2,r0
 1868 036e 0B46     	 mov r3,r1
 1869 0370 1046     	 mov r0,r2
 1870 0372 1946     	 mov r1,r3
 1871 0374 4FF00002 	 mov r2,#0
 1872 0378 984B     	 ldr r3,.L122+44
 1873 037a FFF7FEFF 	 bl __aeabi_dmul
 1874 037e 0246     	 mov r2,r0
 1875 0380 0B46     	 mov r3,r1
 1876 0382 1046     	 mov r0,r2
 1877 0384 1946     	 mov r1,r3
 1878 0386 FFF7FEFF 	 bl __aeabi_d2f
 1879 038a 0246     	 mov r2,r0
 1880 038c 944B     	 ldr r3,.L122+48
 1881 038e 1A60     	 str r2,[r3]
 1882              	.L78:
 487:../main.c     **** 
 488:../main.c     **** 		omega_ele_degs = omega_ele_rads / Pi180;
 1883              	 .loc 4 488 0
 1884 0390 934B     	 ldr r3,.L122+48
 1885 0392 1B68     	 ldr r3,[r3]
 1886 0394 1846     	 mov r0,r3
 1887 0396 FFF7FEFF 	 bl __aeabi_f2d
 1888 039a 0246     	 mov r2,r0
 1889 039c 0B46     	 mov r3,r1
 1890 039e 1046     	 mov r0,r2
 1891 03a0 1946     	 mov r1,r3
 1892 03a2 85A3     	 adr r3,.L122+8
 1893 03a4 D3E90023 	 ldrd r2,[r3]
 1894 03a8 FFF7FEFF 	 bl __aeabi_ddiv
 1895 03ac 0246     	 mov r2,r0
 1896 03ae 0B46     	 mov r3,r1
 1897 03b0 1046     	 mov r0,r2
 1898 03b2 1946     	 mov r1,r3
 1899 03b4 FFF7FEFF 	 bl __aeabi_d2f
 1900 03b8 0246     	 mov r2,r0
 1901 03ba 8A4B     	 ldr r3,.L122+52
 1902 03bc 1A60     	 str r2,[r3]
 489:../main.c     **** 
 490:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% 
 491:../main.c     **** 
 492:../main.c     **** 		// Current read out over SPI
 493:../main.c     **** 		Current_U = readCurrent(ChipSelect_U);
 1903              	 .loc 4 493 0
 1904 03be 0620     	 movs r0,#6
 1905 03c0 FFF7FEFF 	 bl readCurrent
 1906 03c4 0246     	 mov r2,r0
 1907 03c6 884B     	 ldr r3,.L122+56
 1908 03c8 1A60     	 str r2,[r3]
 494:../main.c     **** 		Current_V = readCurrent(ChipSelect_V);
 1909              	 .loc 4 494 0
 1910 03ca 0520     	 movs r0,#5
 1911 03cc FFF7FEFF 	 bl readCurrent
 1912 03d0 0246     	 mov r2,r0
 1913 03d2 864B     	 ldr r3,.L122+60
 1914 03d4 1A60     	 str r2,[r3]
 495:../main.c     **** 		Current_W = readCurrent(ChipSelect_W);
 1915              	 .loc 4 495 0
 1916 03d6 0320     	 movs r0,#3
 1917 03d8 FFF7FEFF 	 bl readCurrent
 1918 03dc 0246     	 mov r2,r0
 1919 03de 844B     	 ldr r3,.L122+64
 1920 03e0 1A60     	 str r2,[r3]
 496:../main.c     **** 
 497:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of th
 498:../main.c     **** 
 499:../main.c     **** 		// conversion from rad/s to degree
 500:../main.c     **** 		float angle_phi_rad = angle_phi*Pi180;
 1921              	 .loc 4 500 0
 1922 03e2 844B     	 ldr r3,.L122+68
 1923 03e4 1B68     	 ldr r3,[r3]
 1924 03e6 1846     	 mov r0,r3
 1925 03e8 FFF7FEFF 	 bl __aeabi_f2d
 1926 03ec 0246     	 mov r2,r0
 1927 03ee 0B46     	 mov r3,r1
 1928 03f0 1046     	 mov r0,r2
 1929 03f2 1946     	 mov r1,r3
 1930 03f4 70A3     	 adr r3,.L122+8
 1931 03f6 D3E90023 	 ldrd r2,[r3]
 1932 03fa FFF7FEFF 	 bl __aeabi_dmul
 1933 03fe 0246     	 mov r2,r0
 1934 0400 0B46     	 mov r3,r1
 1935 0402 1046     	 mov r0,r2
 1936 0404 1946     	 mov r1,r3
 1937 0406 FFF7FEFF 	 bl __aeabi_d2f
 1938 040a 0346     	 mov r3,r0
 1939 040c BB60     	 str r3,[r7,#8]
 501:../main.c     **** 
 502:../main.c     **** 		// to decrease multiple calculations and computational effort
 503:../main.c     **** 		float cos_phi = cosf(angle_phi_rad);
 1940              	 .loc 4 503 0
 1941 040e B868     	 ldr r0,[r7,#8]
 1942 0410 FFF7FEFF 	 bl cosf
 1943 0414 7860     	 str r0,[r7,#4]
 504:../main.c     **** 		float sin_phi = sinf(angle_phi_rad);
 1944              	 .loc 4 504 0
 1945 0416 B868     	 ldr r0,[r7,#8]
 1946 0418 FFF7FEFF 	 bl sinf
 1947 041c 3860     	 str r0,[r7]
 505:../main.c     **** 
 506:../main.c     **** 		// Clark-Park transformation (from U,V,W to dq)
 507:../main.c     **** 		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-
 1948              	 .loc 4 507 0
 1949 041e 724B     	 ldr r3,.L122+56
 1950 0420 93ED007A 	 flds s14,[r3]
 1951 0424 D7ED017A 	 flds s15,[r7,#4]
 1952 0428 27EE278A 	 fmuls s16,s14,s15
 1953 042c B868     	 ldr r0,[r7,#8]
 1954 042e FFF7FEFF 	 bl __aeabi_f2d
 1955 0432 0246     	 mov r2,r0
 1956 0434 0B46     	 mov r3,r1
 1957 0436 1046     	 mov r0,r2
 1958 0438 1946     	 mov r1,r3
 1959 043a 61A3     	 adr r3,.L122+16
 1960 043c D3E90023 	 ldrd r2,[r3]
 1961 0440 FFF7FEFF 	 bl __aeabi_dsub
 1962 0444 0246     	 mov r2,r0
 1963 0446 0B46     	 mov r3,r1
 1964 0448 1046     	 mov r0,r2
 1965 044a 1946     	 mov r1,r3
 1966 044c FFF7FEFF 	 bl __aeabi_d2f
 1967 0450 0346     	 mov r3,r0
 1968 0452 1846     	 mov r0,r3
 1969 0454 FFF7FEFF 	 bl cosf
 1970 0458 07EE100A 	 fmsr s14,r0
 1971 045c 634B     	 ldr r3,.L122+60
 1972 045e D3ED007A 	 flds s15,[r3]
 1973 0462 67EE277A 	 fmuls s15,s14,s15
 1974 0466 38EE278A 	 fadds s16,s16,s15
 1975 046a B868     	 ldr r0,[r7,#8]
 1976 046c FFF7FEFF 	 bl __aeabi_f2d
 1977 0470 0246     	 mov r2,r0
 1978 0472 0B46     	 mov r3,r1
 1979 0474 1046     	 mov r0,r2
 1980 0476 1946     	 mov r1,r3
 1981 0478 53A3     	 adr r3,.L122+24
 1982 047a D3E90023 	 ldrd r2,[r3]
 1983 047e FFF7FEFF 	 bl __aeabi_dsub
 1984 0482 0246     	 mov r2,r0
 1985 0484 0B46     	 mov r3,r1
 1986 0486 1046     	 mov r0,r2
 1987 0488 1946     	 mov r1,r3
 1988 048a FFF7FEFF 	 bl __aeabi_d2f
 1989 048e 0346     	 mov r3,r0
 1990 0490 1846     	 mov r0,r3
 1991 0492 FFF7FEFF 	 bl cosf
 1992 0496 07EE100A 	 fmsr s14,r0
 1993 049a 554B     	 ldr r3,.L122+64
 1994 049c D3ED007A 	 flds s15,[r3]
 1995 04a0 67EE277A 	 fmuls s15,s14,s15
 1996 04a4 78EE277A 	 fadds s15,s16,s15
 1997 04a8 17EE900A 	 fmrs r0,s15
 1998 04ac FFF7FEFF 	 bl __aeabi_f2d
 1999 04b0 0246     	 mov r2,r0
 2000 04b2 0B46     	 mov r3,r1
 2001 04b4 1046     	 mov r0,r2
 2002 04b6 1946     	 mov r1,r3
 2003 04b8 45A3     	 adr r3,.L122+32
 2004 04ba D3E90023 	 ldrd r2,[r3]
 2005 04be FFF7FEFF 	 bl __aeabi_dmul
 2006 04c2 0246     	 mov r2,r0
 2007 04c4 0B46     	 mov r3,r1
 2008 04c6 1046     	 mov r0,r2
 2009 04c8 1946     	 mov r1,r3
 2010 04ca FFF7FEFF 	 bl __aeabi_d2f
 2011 04ce 0246     	 mov r2,r0
 2012 04d0 494B     	 ldr r3,.L122+72
 2013 04d2 1A60     	 str r2,[r3]
 508:../main.c     **** 		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad
 2014              	 .loc 4 508 0
 2015 04d4 D7ED007A 	 flds s15,[r7]
 2016 04d8 B1EE677A 	 fnegs s14,s15
 2017 04dc 424B     	 ldr r3,.L122+56
 2018 04de D3ED007A 	 flds s15,[r3]
 2019 04e2 27EE278A 	 fmuls s16,s14,s15
 2020 04e6 B868     	 ldr r0,[r7,#8]
 2021 04e8 FFF7FEFF 	 bl __aeabi_f2d
 2022 04ec 0246     	 mov r2,r0
 2023 04ee 0B46     	 mov r3,r1
 2024 04f0 1046     	 mov r0,r2
 2025 04f2 1946     	 mov r1,r3
 2026 04f4 32A3     	 adr r3,.L122+16
 2027 04f6 D3E90023 	 ldrd r2,[r3]
 2028 04fa FFF7FEFF 	 bl __aeabi_dsub
 2029 04fe 0246     	 mov r2,r0
 2030 0500 0B46     	 mov r3,r1
 2031 0502 1046     	 mov r0,r2
 2032 0504 1946     	 mov r1,r3
 2033 0506 FFF7FEFF 	 bl __aeabi_d2f
 2034 050a 0346     	 mov r3,r0
 2035 050c 1846     	 mov r0,r3
 2036 050e FFF7FEFF 	 bl sinf
 2037 0512 07EE100A 	 fmsr s14,r0
 2038 0516 354B     	 ldr r3,.L122+60
 2039 0518 D3ED007A 	 flds s15,[r3]
 2040 051c 67EE277A 	 fmuls s15,s14,s15
 2041 0520 38EE678A 	 fsubs s16,s16,s15
 2042 0524 B868     	 ldr r0,[r7,#8]
 2043 0526 FFF7FEFF 	 bl __aeabi_f2d
 2044 052a 0246     	 mov r2,r0
 2045 052c 0B46     	 mov r3,r1
 2046 052e 1046     	 mov r0,r2
 2047 0530 1946     	 mov r1,r3
 2048 0532 25A3     	 adr r3,.L122+24
 2049 0534 D3E90023 	 ldrd r2,[r3]
 2050 0538 FFF7FEFF 	 bl __aeabi_dsub
 2051 053c 0246     	 mov r2,r0
 2052 053e 0B46     	 mov r3,r1
 2053 0540 1046     	 mov r0,r2
 2054 0542 1946     	 mov r1,r3
 2055 0544 FFF7FEFF 	 bl __aeabi_d2f
 2056 0548 0346     	 mov r3,r0
 2057 054a 1846     	 mov r0,r3
 2058 054c FFF7FEFF 	 bl sinf
 2059 0550 07EE100A 	 fmsr s14,r0
 2060 0554 264B     	 ldr r3,.L122+64
 2061 0556 D3ED007A 	 flds s15,[r3]
 2062 055a 67EE277A 	 fmuls s15,s14,s15
 2063 055e 78EE677A 	 fsubs s15,s16,s15
 2064 0562 17EE900A 	 fmrs r0,s15
 2065 0566 FFF7FEFF 	 bl __aeabi_f2d
 2066 056a 0246     	 mov r2,r0
 2067 056c 0B46     	 mov r3,r1
 2068 056e 1046     	 mov r0,r2
 2069 0570 1946     	 mov r1,r3
 2070 0572 17A3     	 adr r3,.L122+32
 2071 0574 D3E90023 	 ldrd r2,[r3]
 2072 0578 FFF7FEFF 	 bl __aeabi_dmul
 2073 057c 0246     	 mov r2,r0
 2074 057e 0B46     	 mov r3,r1
 2075 0580 1046     	 mov r0,r2
 2076 0582 1946     	 mov r1,r3
 2077 0584 FFF7FEFF 	 bl __aeabi_d2f
 2078 0588 0246     	 mov r2,r0
 2079 058a 1C4B     	 ldr r3,.L122+76
 2080 058c 1A60     	 str r2,[r3]
 509:../main.c     **** 
 510:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of
 511:../main.c     **** 
 512:../main.c     **** 		if(CAN_control == 1){// can control
 2081              	 .loc 4 512 0
 2082 058e 1C4B     	 ldr r3,.L122+80
 2083 0590 1B78     	 ldrb r3,[r3]
 2084 0592 012B     	 cmp r3,#1
 2085 0594 4DD1     	 bne .L79
 513:../main.c     **** 
 514:../main.c     **** 			if(CAN_new_meassage == 1){
 2086              	 .loc 4 514 0
 2087 0596 1B4B     	 ldr r3,.L122+84
 2088 0598 1B78     	 ldrb r3,[r3]
 2089 059a 012B     	 cmp r3,#1
 2090 059c 38D1     	 bne .L80
 515:../main.c     **** 				speed_ref = CAN_speed_ref;
 2091              	 .loc 4 515 0
 2092 059e 1A4B     	 ldr r3,.L122+88
 2093 05a0 1B68     	 ldr r3,[r3]
 2094 05a2 1A4A     	 ldr r2,.L122+92
 2095 05a4 1360     	 str r3,[r2]
 516:../main.c     **** 				CAN_new_meassage = 0;
 2096              	 .loc 4 516 0
 2097 05a6 174B     	 ldr r3,.L122+84
 2098 05a8 0022     	 movs r2,#0
 2099 05aa 1A70     	 strb r2,[r3]
 2100 05ac 36E0     	 b .L81
 2101              	.L123:
 2102 05ae 00BF     	 .align 3
 2103              	.L122:
 2104 05b0 F1D4C853 	 .word 1405670641
 2105 05b4 FB210940 	 .word 1074340347
 2106 05b8 4DC90777 	 .word 1996998989
 2107 05bc 46DF913F 	 .word 1066524486
 2108 05c0 A038DB37 	 .word 937113760
 2109 05c4 52C10040 	 .word 1073791314
 2110 05c8 A038DB37 	 .word 937113760
 2111 05cc 52C11040 	 .word 1074839890
 2112 05d0 93761F57 	 .word 1461679763
 2113 05d4 5555E53F 	 .word 1071994197
 2114 05d8 00000000 	 .word omega_mech_rps
 2115 05dc 00002640 	 .word 1076232192
 2116 05e0 00000000 	 .word omega_ele_rads
 2117 05e4 00000000 	 .word omega_ele_degs
 2118 05e8 00000000 	 .word Current_U
 2119 05ec 00000000 	 .word Current_V
 2120 05f0 00000000 	 .word Current_W
 2121 05f4 00000000 	 .word angle_phi
 2122 05f8 00000000 	 .word id
 2123 05fc 00000000 	 .word iq
 2124 0600 00000000 	 .word CAN_control
 2125 0604 00000000 	 .word CAN_new_meassage
 2126 0608 00000000 	 .word CAN_speed_ref
 2127 060c 00000000 	 .word speed_ref
 2128              	.L80:
 517:../main.c     **** 			}
 518:../main.c     **** 			else{
 519:../main.c     **** 				CAN_no_com_counter ++;
 2129              	 .loc 4 519 0
 2130 0610 674B     	 ldr r3,.L124+16
 2131 0612 1B78     	 ldrb r3,[r3]
 2132 0614 0133     	 adds r3,r3,#1
 2133 0616 DAB2     	 uxtb r2,r3
 2134 0618 654B     	 ldr r3,.L124+16
 2135 061a 1A70     	 strb r2,[r3]
 2136              	.L81:
 520:../main.c     **** 			}
 521:../main.c     **** 
 522:../main.c     **** 			if(CAN_no_com_counter > CAN_NO_COM_TH){
 2137              	 .loc 4 522 0
 2138 061c 644B     	 ldr r3,.L124+16
 2139 061e 1B78     	 ldrb r3,[r3]
 2140 0620 FA2B     	 cmp r3,#250
 2141 0622 06D9     	 bls .L79
 523:../main.c     **** 				//CAN_new_meassage = 0;
 524:../main.c     **** 				CAN_no_com_counter = CAN_NO_COM_TH;
 2142              	 .loc 4 524 0
 2143 0624 624B     	 ldr r3,.L124+16
 2144 0626 FA22     	 movs r2,#250
 2145 0628 1A70     	 strb r2,[r3]
 525:../main.c     **** 				speed_ref = 0;
 2146              	 .loc 4 525 0
 2147 062a 624B     	 ldr r3,.L124+20
 2148 062c 4FF00002 	 mov r2,#0
 2149 0630 1A60     	 str r2,[r3]
 2150              	.L79:
 526:../main.c     **** 			}
 527:../main.c     **** 		}
 528:../main.c     **** 
 529:../main.c     **** 		omega_ele_rads_ref = ( speed_ref * PPZ ) / WHEEL_R;
 2151              	 .loc 4 529 0
 2152 0632 604B     	 ldr r3,.L124+20
 2153 0634 D3ED007A 	 flds s15,[r3]
 2154 0638 B2EE067A 	 fconsts s14,#38
 2155 063c 67EE877A 	 fmuls s15,s15,s14
 2156 0640 17EE900A 	 fmrs r0,s15
 2157 0644 FFF7FEFF 	 bl __aeabi_f2d
 2158 0648 0246     	 mov r2,r0
 2159 064a 0B46     	 mov r3,r1
 2160 064c 1046     	 mov r0,r2
 2161 064e 1946     	 mov r1,r3
 2162 0650 53A3     	 adr r3,.L124
 2163 0652 D3E90023 	 ldrd r2,[r3]
 2164 0656 FFF7FEFF 	 bl __aeabi_ddiv
 2165 065a 0246     	 mov r2,r0
 2166 065c 0B46     	 mov r3,r1
 2167 065e 1046     	 mov r0,r2
 2168 0660 1946     	 mov r1,r3
 2169 0662 FFF7FEFF 	 bl __aeabi_d2f
 2170 0666 0246     	 mov r2,r0
 2171 0668 534B     	 ldr r3,.L124+24
 2172 066a 1A60     	 str r2,[r3]
 530:../main.c     **** 		 /*
 531:../main.c     **** 		if((omega_ele_rads_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rad
 532:../main.c     **** 			T_ref = 0;
 533:../main.c     **** 		}
 534:../main.c     **** 		else{
 535:../main.c     **** 			if(MOTOR_NUM == 1){
 536:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param_1); // outer control loop q f
 537:../main.c     **** 			}
 538:../main.c     **** 			else{
 539:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&omega_param);
 540:../main.c     **** 			}
 541:../main.c     **** 		}
 542:../main.c     **** 		*/
 543:../main.c     **** 
 544:../main.c     **** 
 545:../main.c     **** 		if(Speed_control == 1 && omega_mech_rps_ref == 0  && (( -2 < omega_mech_rps) && (omega_mech_rps <
 2173              	 .loc 4 545 0
 2174 066c 534B     	 ldr r3,.L124+28
 2175 066e 1B78     	 ldrb r3,[r3]
 2176 0670 012B     	 cmp r3,#1
 2177 0672 20D1     	 bne .L82
 2178              	 .loc 4 545 0 is_stmt 0 discriminator 1
 2179 0674 524B     	 ldr r3,.L124+32
 2180 0676 D3ED007A 	 flds s15,[r3]
 2181 067a F5EE407A 	 fcmpzs s15
 2182 067e F1EE10FA 	 fmstat
 2183 0682 18D1     	 bne .L82
 2184              	 .loc 4 545 0 discriminator 2
 2185 0684 4F4B     	 ldr r3,.L124+36
 2186 0686 D3ED007A 	 flds s15,[r3]
 2187 068a B8EE007A 	 fconsts s14,#128
 2188 068e F4EEC77A 	 fcmpes s15,s14
 2189 0692 F1EE10FA 	 fmstat
 2190 0696 0EDD     	 ble .L82
 2191              	 .loc 4 545 0 discriminator 3
 2192 0698 4A4B     	 ldr r3,.L124+36
 2193 069a D3ED007A 	 flds s15,[r3]
 2194 069e B0EE007A 	 fconsts s14,#0
 2195 06a2 F4EEC77A 	 fcmpes s15,s14
 2196 06a6 F1EE10FA 	 fmstat
 2197 06aa 04D5     	 bpl .L82
 546:../main.c     **** 				T_ref = 0;
 2198              	 .loc 4 546 0 is_stmt 1
 2199 06ac 464B     	 ldr r3,.L124+40
 2200 06ae 4FF00002 	 mov r2,#0
 2201 06b2 1A60     	 str r2,[r3]
 2202 06b4 B3E0     	 b .L85
 2203              	.L82:
 547:../main.c     **** 			}
 548:../main.c     **** 		else{
 549:../main.c     **** 			if(MOTOR_NUM == 1) T_ref = PID_Controller(omega_mech_rps_ref,omega_mech_rps,&omega_param1); // o
 550:../main.c     **** 			else T_ref = PID_Controller(omega_mech_rps_ref,omega_mech_rps,&omega_param);
 2204              	 .loc 4 550 0
 2205 06b6 424B     	 ldr r3,.L124+32
 2206 06b8 1A68     	 ldr r2,[r3]
 2207 06ba 424B     	 ldr r3,.L124+36
 2208 06bc 1B68     	 ldr r3,[r3]
 2209 06be 1046     	 mov r0,r2
 2210 06c0 1946     	 mov r1,r3
 2211 06c2 424A     	 ldr r2,.L124+44
 2212 06c4 FFF7FEFF 	 bl PID_Controller
 2213 06c8 0246     	 mov r2,r0
 2214 06ca 3F4B     	 ldr r3,.L124+40
 2215 06cc 1A60     	 str r2,[r3]
 551:../main.c     **** 
 552:../main.c     **** 			if(start_help ==1 ){
 2216              	 .loc 4 552 0
 2217 06ce 404B     	 ldr r3,.L124+48
 2218 06d0 1B78     	 ldrb r3,[r3]
 2219 06d2 012B     	 cmp r3,#1
 2220 06d4 40F0A380 	 bne .L85
 553:../main.c     **** 				// start help
 554:../main.c     **** 				if(omega_mech_rps_ref != 0 && (copysign(1,omega_mech_rps_ref) != copysign(1,omega_mech_rps) || 
 2221              	 .loc 4 554 0
 2222 06d8 394B     	 ldr r3,.L124+32
 2223 06da D3ED007A 	 flds s15,[r3]
 2224 06de F5EE407A 	 fcmpzs s15
 2225 06e2 F1EE10FA 	 fmstat
 2226 06e6 2DD0     	 beq .L86
 2227              	 .loc 4 554 0 is_stmt 0 discriminator 1
 2228 06e8 354B     	 ldr r3,.L124+32
 2229 06ea 1B68     	 ldr r3,[r3]
 2230 06ec 1846     	 mov r0,r3
 2231 06ee FFF7FEFF 	 bl __aeabi_f2d
 2232 06f2 0246     	 mov r2,r0
 2233 06f4 0B46     	 mov r3,r1
 2234 06f6 4FF00000 	 mov r0,#0
 2235 06fa 3649     	 ldr r1,.L124+52
 2236 06fc FFF7FEFF 	 bl copysign
 2237 0700 0446     	 mov r4,r0
 2238 0702 0D46     	 mov r5,r1
 2239 0704 2F4B     	 ldr r3,.L124+36
 2240 0706 1B68     	 ldr r3,[r3]
 2241 0708 1846     	 mov r0,r3
 2242 070a FFF7FEFF 	 bl __aeabi_f2d
 2243 070e 0246     	 mov r2,r0
 2244 0710 0B46     	 mov r3,r1
 2245 0712 4FF00000 	 mov r0,#0
 2246 0716 2F49     	 ldr r1,.L124+52
 2247 0718 FFF7FEFF 	 bl copysign
 2248 071c 0246     	 mov r2,r0
 2249 071e 0B46     	 mov r3,r1
 2250 0720 2046     	 mov r0,r4
 2251 0722 2946     	 mov r1,r5
 2252 0724 FFF7FEFF 	 bl __aeabi_dcmpeq
 2253 0728 0346     	 mov r3,r0
 2254 072a 002B     	 cmp r3,#0
 2255 072c 07D0     	 beq .L87
 2256              	 .loc 4 554 0 discriminator 2
 2257 072e 254B     	 ldr r3,.L124+36
 2258 0730 D3ED007A 	 flds s15,[r3]
 2259 0734 F5EE407A 	 fcmpzs s15
 2260 0738 F1EE10FA 	 fmstat
 2261 073c 02D1     	 bne .L86
 2262              	.L87:
 555:../main.c     **** 					start_help_count = 1;
 2263              	 .loc 4 555 0 is_stmt 1
 2264 073e 264B     	 ldr r3,.L124+56
 2265 0740 0122     	 movs r2,#1
 2266 0742 1A70     	 strb r2,[r3]
 2267              	.L86:
 556:../main.c     **** 				}
 557:../main.c     **** 
 558:../main.c     **** 				if(start_help_count > 0){
 2268              	 .loc 4 558 0
 2269 0744 244B     	 ldr r3,.L124+56
 2270 0746 1B78     	 ldrb r3,[r3]
 2271 0748 002B     	 cmp r3,#0
 2272 074a 68D0     	 beq .L85
 559:../main.c     **** 					start_help_flag = 1;
 2273              	 .loc 4 559 0
 2274 074c 234B     	 ldr r3,.L124+60
 2275 074e 0122     	 movs r2,#1
 2276 0750 1A70     	 strb r2,[r3]
 560:../main.c     **** 					start_help_count --;
 2277              	 .loc 4 560 0
 2278 0752 214B     	 ldr r3,.L124+56
 2279 0754 1B78     	 ldrb r3,[r3]
 2280 0756 013B     	 subs r3,r3,#1
 2281 0758 DAB2     	 uxtb r2,r3
 2282 075a 1F4B     	 ldr r3,.L124+56
 2283 075c 1A70     	 strb r2,[r3]
 561:../main.c     **** 					if(omega_mech_rps_ref > 0)T_ref = T_ref + START_HELP_T;
 2284              	 .loc 4 561 0
 2285 075e 184B     	 ldr r3,.L124+32
 2286 0760 D3ED007A 	 flds s15,[r3]
 2287 0764 F5EEC07A 	 fcmpezs s15
 2288 0768 F1EE10FA 	 fmstat
 2289 076c 38DD     	 ble .L118
 2290              	 .loc 4 561 0 is_stmt 0 discriminator 1
 2291 076e 164B     	 ldr r3,.L124+40
 2292 0770 1B68     	 ldr r3,[r3]
 2293 0772 1846     	 mov r0,r3
 2294 0774 FFF7FEFF 	 bl __aeabi_f2d
 2295 0778 0246     	 mov r2,r0
 2296 077a 0B46     	 mov r3,r1
 2297 077c 1046     	 mov r0,r2
 2298 077e 1946     	 mov r1,r3
 2299 0780 09A3     	 adr r3,.L124+8
 2300 0782 D3E90023 	 ldrd r2,[r3]
 2301 0786 FFF7FEFF 	 bl __aeabi_dadd
 2302 078a 0246     	 mov r2,r0
 2303 078c 0B46     	 mov r3,r1
 2304 078e 1046     	 mov r0,r2
 2305 0790 1946     	 mov r1,r3
 2306 0792 FFF7FEFF 	 bl __aeabi_d2f
 2307 0796 0246     	 mov r2,r0
 2308 0798 0B4B     	 ldr r3,.L124+40
 2309 079a 1A60     	 str r2,[r3]
 2310 079c 3FE0     	 b .L85
 2311              	.L125:
 2312 079e 00BF     	 .align 3
 2313              	.L124:
 2314 07a0 48E17A14 	 .word 343597384
 2315 07a4 AE47B13F 	 .word 1068582830
 2316 07a8 9A999999 	 .word -1717986918
 2317 07ac 9999B93F 	 .word 1069128089
 2318 07b0 00000000 	 .word CAN_no_com_counter
 2319 07b4 00000000 	 .word speed_ref
 2320 07b8 00000000 	 .word omega_ele_rads_ref
 2321 07bc 00000000 	 .word Speed_control
 2322 07c0 00000000 	 .word omega_mech_rps_ref
 2323 07c4 00000000 	 .word omega_mech_rps
 2324 07c8 00000000 	 .word T_ref
 2325 07cc 00000000 	 .word omega_param
 2326 07d0 00000000 	 .word start_help
 2327 07d4 0000F03F 	 .word 1072693248
 2328 07d8 00000000 	 .word start_help_count
 2329 07dc 00000000 	 .word start_help_flag
 2330              	.L118:
 562:../main.c     **** 					else if(omega_mech_rps_ref < 0)T_ref = T_ref - START_HELP_T;
 2331              	 .loc 4 562 0 is_stmt 1
 2332 07e0 AD4B     	 ldr r3,.L126+32
 2333 07e2 D3ED007A 	 flds s15,[r3]
 2334 07e6 F5EEC07A 	 fcmpezs s15
 2335 07ea F1EE10FA 	 fmstat
 2336 07ee 16D5     	 bpl .L85
 2337              	 .loc 4 562 0 is_stmt 0 discriminator 1
 2338 07f0 AA4B     	 ldr r3,.L126+36
 2339 07f2 1B68     	 ldr r3,[r3]
 2340 07f4 1846     	 mov r0,r3
 2341 07f6 FFF7FEFF 	 bl __aeabi_f2d
 2342 07fa 0246     	 mov r2,r0
 2343 07fc 0B46     	 mov r3,r1
 2344 07fe 1046     	 mov r0,r2
 2345 0800 1946     	 mov r1,r3
 2346 0802 9DA3     	 adr r3,.L126
 2347 0804 D3E90023 	 ldrd r2,[r3]
 2348 0808 FFF7FEFF 	 bl __aeabi_dsub
 2349 080c 0246     	 mov r2,r0
 2350 080e 0B46     	 mov r3,r1
 2351 0810 1046     	 mov r0,r2
 2352 0812 1946     	 mov r1,r3
 2353 0814 FFF7FEFF 	 bl __aeabi_d2f
 2354 0818 0246     	 mov r2,r0
 2355 081a A04B     	 ldr r3,.L126+36
 2356 081c 1A60     	 str r2,[r3]
 2357              	.L85:
 563:../main.c     **** 				}
 564:../main.c     **** 			}
 565:../main.c     **** 		}
 566:../main.c     **** 
 567:../main.c     **** 		if (Speed_control == 1){
 2358              	 .loc 4 567 0 is_stmt 1
 2359 081e A04B     	 ldr r3,.L126+40
 2360 0820 1B78     	 ldrb r3,[r3]
 2361 0822 012B     	 cmp r3,#1
 2362 0824 1BD1     	 bne .L91
 568:../main.c     **** 			if(MOTOR_NUM == 1 || MOTOR_NUM == 10) {
 569:../main.c     **** 				iq_ref =  T_ref / K_T; // dirction for motor 1
 570:../main.c     **** 			}
 571:../main.c     **** 			else{
 572:../main.c     **** 				iq_ref = - T_ref / K_T;// dirction for motor not 1
 2363              	 .loc 4 572 0
 2364 0826 9D4B     	 ldr r3,.L126+36
 2365 0828 D3ED007A 	 flds s15,[r3]
 2366 082c F1EE677A 	 fnegs s15,s15
 2367 0830 17EE903A 	 fmrs r3,s15
 2368 0834 1846     	 mov r0,r3
 2369 0836 FFF7FEFF 	 bl __aeabi_f2d
 2370 083a 0246     	 mov r2,r0
 2371 083c 0B46     	 mov r3,r1
 2372 083e 1046     	 mov r0,r2
 2373 0840 1946     	 mov r1,r3
 2374 0842 8FA3     	 adr r3,.L126+8
 2375 0844 D3E90023 	 ldrd r2,[r3]
 2376 0848 FFF7FEFF 	 bl __aeabi_ddiv
 2377 084c 0246     	 mov r2,r0
 2378 084e 0B46     	 mov r3,r1
 2379 0850 1046     	 mov r0,r2
 2380 0852 1946     	 mov r1,r3
 2381 0854 FFF7FEFF 	 bl __aeabi_d2f
 2382 0858 0246     	 mov r2,r0
 2383 085a 924B     	 ldr r3,.L126+44
 2384 085c 1A60     	 str r2,[r3]
 2385              	.L91:
 573:../main.c     **** 			}
 574:../main.c     **** 
 575:../main.c     **** 		}
 576:../main.c     **** 
 577:../main.c     **** 
 578:../main.c     **** 		//iq_ref = - T_ref / K_T;// dirction for motor 1
 579:../main.c     **** 
 580:../main.c     **** 		//limit to IQ_REF_MAx limit
 581:../main.c     **** 		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 2386              	 .loc 4 581 0
 2387 085e 914B     	 ldr r3,.L126+44
 2388 0860 D3ED007A 	 flds s15,[r3]
 2389 0864 B9EE047A 	 fconsts s14,#148
 2390 0868 F4EEC77A 	 fcmpes s15,s14
 2391 086c F1EE10FA 	 fmstat
 2392 0870 02D5     	 bpl .L92
 2393              	 .loc 4 581 0 is_stmt 0 discriminator 1
 2394 0872 8C4B     	 ldr r3,.L126+44
 2395 0874 8C4A     	 ldr r2,.L126+48
 2396 0876 1A60     	 str r2,[r3]
 2397              	.L92:
 582:../main.c     **** 		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 2398              	 .loc 4 582 0 is_stmt 1
 2399 0878 8A4B     	 ldr r3,.L126+44
 2400 087a D3ED007A 	 flds s15,[r3]
 2401 087e B1EE047A 	 fconsts s14,#20
 2402 0882 F4EEC77A 	 fcmpes s15,s14
 2403 0886 F1EE10FA 	 fmstat
 2404 088a 02DD     	 ble .L94
 2405              	 .loc 4 582 0 is_stmt 0 discriminator 1
 2406 088c 854B     	 ldr r3,.L126+44
 2407 088e 874A     	 ldr r2,.L126+52
 2408 0890 1A60     	 str r2,[r3]
 2409              	.L94:
 583:../main.c     **** 
 584:../main.c     **** 		if(Torque_control == 1){
 2410              	 .loc 4 584 0 is_stmt 1
 2411 0892 874B     	 ldr r3,.L126+56
 2412 0894 1B78     	 ldrb r3,[r3]
 2413 0896 012B     	 cmp r3,#1
 2414 0898 16D1     	 bne .L96
 585:../main.c     **** 			Vd = PID_Controller(0.0,id,&Id_param);
 2415              	 .loc 4 585 0
 2416 089a 864B     	 ldr r3,.L126+60
 2417 089c 1B68     	 ldr r3,[r3]
 2418 089e 4FF00000 	 mov r0,#0
 2419 08a2 1946     	 mov r1,r3
 2420 08a4 844A     	 ldr r2,.L126+64
 2421 08a6 FFF7FEFF 	 bl PID_Controller
 2422 08aa 0246     	 mov r2,r0
 2423 08ac 834B     	 ldr r3,.L126+68
 2424 08ae 1A60     	 str r2,[r3]
 586:../main.c     **** 			Vq = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
 2425              	 .loc 4 586 0
 2426 08b0 7C4B     	 ldr r3,.L126+44
 2427 08b2 1A68     	 ldr r2,[r3]
 2428 08b4 824B     	 ldr r3,.L126+72
 2429 08b6 1B68     	 ldr r3,[r3]
 2430 08b8 1046     	 mov r0,r2
 2431 08ba 1946     	 mov r1,r3
 2432 08bc 814A     	 ldr r2,.L126+76
 2433 08be FFF7FEFF 	 bl PID_Controller
 2434 08c2 0246     	 mov r2,r0
 2435 08c4 804B     	 ldr r3,.L126+80
 2436 08c6 1A60     	 str r2,[r3]
 2437              	.L96:
 587:../main.c     **** 		}
 588:../main.c     **** 
 589:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9
 590:../main.c     **** 
 591:../main.c     **** 		// dq to alpha beta for voltage
 592:../main.c     **** 		Valpha = Vd*cos_phi - Vq*sin_phi;
 2438              	 .loc 4 592 0
 2439 08c8 7C4B     	 ldr r3,.L126+68
 2440 08ca 93ED007A 	 flds s14,[r3]
 2441 08ce D7ED017A 	 flds s15,[r7,#4]
 2442 08d2 27EE277A 	 fmuls s14,s14,s15
 2443 08d6 7C4B     	 ldr r3,.L126+80
 2444 08d8 D3ED006A 	 flds s13,[r3]
 2445 08dc D7ED007A 	 flds s15,[r7]
 2446 08e0 66EEA77A 	 fmuls s15,s13,s15
 2447 08e4 77EE677A 	 fsubs s15,s14,s15
 2448 08e8 784B     	 ldr r3,.L126+84
 2449 08ea C3ED007A 	 fsts s15,[r3]
 593:../main.c     **** 		Vbeta = Vd*sin_phi + Vq*cos_phi;
 2450              	 .loc 4 593 0
 2451 08ee 734B     	 ldr r3,.L126+68
 2452 08f0 93ED007A 	 flds s14,[r3]
 2453 08f4 D7ED007A 	 flds s15,[r7]
 2454 08f8 27EE277A 	 fmuls s14,s14,s15
 2455 08fc 724B     	 ldr r3,.L126+80
 2456 08fe D3ED006A 	 flds s13,[r3]
 2457 0902 D7ED017A 	 flds s15,[r7,#4]
 2458 0906 66EEA77A 	 fmuls s15,s13,s15
 2459 090a 77EE277A 	 fadds s15,s14,s15
 2460 090e 704B     	 ldr r3,.L126+88
 2461 0910 C3ED007A 	 fsts s15,[r3]
 594:../main.c     **** 
 595:../main.c     **** 		// calc angle for SVM app
 596:../main.c     **** 		angle_ab_rad = atanf(Vbeta/Valpha);
 2462              	 .loc 4 596 0
 2463 0914 6E4B     	 ldr r3,.L126+88
 2464 0916 93ED007A 	 flds s14,[r3]
 2465 091a 6C4B     	 ldr r3,.L126+84
 2466 091c D3ED007A 	 flds s15,[r3]
 2467 0920 C7EE277A 	 fdivs s15,s14,s15
 2468 0924 17EE900A 	 fmrs r0,s15
 2469 0928 FFF7FEFF 	 bl atanf
 2470 092c 0246     	 mov r2,r0
 2471 092e 694B     	 ldr r3,.L126+92
 2472 0930 1A60     	 str r2,[r3]
 597:../main.c     **** 		angle_ab = angle_ab_rad/Pi180;
 2473              	 .loc 4 597 0
 2474 0932 684B     	 ldr r3,.L126+92
 2475 0934 1B68     	 ldr r3,[r3]
 2476 0936 1846     	 mov r0,r3
 2477 0938 FFF7FEFF 	 bl __aeabi_f2d
 2478 093c 0246     	 mov r2,r0
 2479 093e 0B46     	 mov r3,r1
 2480 0940 1046     	 mov r0,r2
 2481 0942 1946     	 mov r1,r3
 2482 0944 50A3     	 adr r3,.L126+16
 2483 0946 D3E90023 	 ldrd r2,[r3]
 2484 094a FFF7FEFF 	 bl __aeabi_ddiv
 2485 094e 0246     	 mov r2,r0
 2486 0950 0B46     	 mov r3,r1
 2487 0952 1046     	 mov r0,r2
 2488 0954 1946     	 mov r1,r3
 2489 0956 FFF7FEFF 	 bl __aeabi_d2f
 2490 095a 0246     	 mov r2,r0
 2491 095c 5E4B     	 ldr r3,.L126+96
 2492 095e 1A60     	 str r2,[r3]
 598:../main.c     **** 
 599:../main.c     **** 		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 2493              	 .loc 4 599 0
 2494 0960 5A4B     	 ldr r3,.L126+84
 2495 0962 D3ED007A 	 flds s15,[r3]
 2496 0966 F5EEC07A 	 fcmpezs s15
 2497 096a F1EE10FA 	 fmstat
 2498 096e 0AD5     	 bpl .L119
 2499              	 .loc 4 599 0 is_stmt 0 discriminator 1
 2500 0970 594B     	 ldr r3,.L126+96
 2501 0972 D3ED007A 	 flds s15,[r3]
 2502 0976 9FED597A 	 flds s14,.L126+100
 2503 097a 77EE877A 	 fadds s15,s15,s14
 2504 097e 564B     	 ldr r3,.L126+96
 2505 0980 C3ED007A 	 fsts s15,[r3]
 2506 0984 11E0     	 b .L99
 2507              	.L119:
 600:../main.c     **** 		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 2508              	 .loc 4 600 0 is_stmt 1
 2509 0986 524B     	 ldr r3,.L126+88
 2510 0988 D3ED007A 	 flds s15,[r3]
 2511 098c F5EEC07A 	 fcmpezs s15
 2512 0990 F1EE10FA 	 fmstat
 2513 0994 09D5     	 bpl .L99
 2514              	 .loc 4 600 0 is_stmt 0 discriminator 1
 2515 0996 504B     	 ldr r3,.L126+96
 2516 0998 D3ED007A 	 flds s15,[r3]
 2517 099c 9FED507A 	 flds s14,.L126+104
 2518 09a0 77EE877A 	 fadds s15,s15,s14
 2519 09a4 4C4B     	 ldr r3,.L126+96
 2520 09a6 C3ED007A 	 fsts s15,[r3]
 2521              	.L99:
 601:../main.c     **** 
 602:../main.c     **** 		// shortend to one line
 603:../main.c     **** 		// amplitude calculation
 604:../main.c     **** 		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 2522              	 .loc 4 604 0 is_stmt 1
 2523 09aa 484B     	 ldr r3,.L126+84
 2524 09ac 93ED007A 	 flds s14,[r3]
 2525 09b0 464B     	 ldr r3,.L126+84
 2526 09b2 D3ED007A 	 flds s15,[r3]
 2527 09b6 27EE277A 	 fmuls s14,s14,s15
 2528 09ba 454B     	 ldr r3,.L126+88
 2529 09bc D3ED006A 	 flds s13,[r3]
 2530 09c0 434B     	 ldr r3,.L126+88
 2531 09c2 D3ED007A 	 flds s15,[r3]
 2532 09c6 66EEA77A 	 fmuls s15,s13,s15
 2533 09ca 77EE277A 	 fadds s15,s14,s15
 2534 09ce 17EE900A 	 fmrs r0,s15
 2535 09d2 FFF7FEFF 	 bl sqrtf
 2536 09d6 0246     	 mov r2,r0
 2537 09d8 424B     	 ldr r3,.L126+108
 2538 09da 1A60     	 str r2,[r3]
 605:../main.c     **** 
 606:../main.c     **** 		//K_inv = V/m --> m = V / K_inv
 607:../main.c     **** 		//modulation_index = amplitude_ab/K_inv;
 608:../main.c     **** 
 609:../main.c     **** 		if(V_DC_link < 0 || V_DC_link > 50) V_DC_link = 14.8;  // plauseblyt check if not set to nom bat 
 2539              	 .loc 4 609 0
 2540 09dc 424B     	 ldr r3,.L126+112
 2541 09de D3ED007A 	 flds s15,[r3]
 2542 09e2 F5EEC07A 	 fcmpezs s15
 2543 09e6 F1EE10FA 	 fmstat
 2544 09ea 09D4     	 bmi .L101
 2545              	 .loc 4 609 0 is_stmt 0 discriminator 2
 2546 09ec 3E4B     	 ldr r3,.L126+112
 2547 09ee D3ED007A 	 flds s15,[r3]
 2548 09f2 9FED3E7A 	 flds s14,.L126+116
 2549 09f6 F4EEC77A 	 fcmpes s15,s14
 2550 09fa F1EE10FA 	 fmstat
 2551 09fe 02DD     	 ble .L102
 2552              	.L101:
 2553              	 .loc 4 609 0 discriminator 3
 2554 0a00 394B     	 ldr r3,.L126+112
 2555 0a02 3B4A     	 ldr r2,.L126+120
 2556 0a04 1A60     	 str r2,[r3]
 2557              	.L102:
 610:../main.c     **** 		modulation_index = amplitude_ab/(V_DC_link /1.732);
 2558              	 .loc 4 610 0 is_stmt 1
 2559 0a06 374B     	 ldr r3,.L126+108
 2560 0a08 1B68     	 ldr r3,[r3]
 2561 0a0a 1846     	 mov r0,r3
 2562 0a0c FFF7FEFF 	 bl __aeabi_f2d
 2563 0a10 0446     	 mov r4,r0
 2564 0a12 0D46     	 mov r5,r1
 2565 0a14 344B     	 ldr r3,.L126+112
 2566 0a16 1B68     	 ldr r3,[r3]
 2567 0a18 1846     	 mov r0,r3
 2568 0a1a FFF7FEFF 	 bl __aeabi_f2d
 2569 0a1e 0246     	 mov r2,r0
 2570 0a20 0B46     	 mov r3,r1
 2571 0a22 1046     	 mov r0,r2
 2572 0a24 1946     	 mov r1,r3
 2573 0a26 1AA3     	 adr r3,.L126+24
 2574 0a28 D3E90023 	 ldrd r2,[r3]
 2575 0a2c FFF7FEFF 	 bl __aeabi_ddiv
 2576 0a30 0246     	 mov r2,r0
 2577 0a32 0B46     	 mov r3,r1
 2578 0a34 2046     	 mov r0,r4
 2579 0a36 2946     	 mov r1,r5
 2580 0a38 FFF7FEFF 	 bl __aeabi_ddiv
 2581 0a3c 0246     	 mov r2,r0
 2582 0a3e 0B46     	 mov r3,r1
 2583 0a40 1046     	 mov r0,r2
 2584 0a42 1946     	 mov r1,r3
 2585 0a44 FFF7FEFF 	 bl __aeabi_d2f
 2586 0a48 0246     	 mov r2,r0
 2587 0a4a 2A4B     	 ldr r3,.L126+124
 2588 0a4c 1A60     	 str r2,[r3]
 611:../main.c     **** 
 612:../main.c     **** 		//scale maximum 1 to 10000 -->
 613:../main.c     **** 		modulation_index_scaled = 10000*modulation_index;
 2589              	 .loc 4 613 0
 2590 0a4e 294B     	 ldr r3,.L126+124
 2591 0a50 D3ED007A 	 flds s15,[r3]
 2592 0a54 9FED287A 	 flds s14,.L126+128
 2593 0a58 67EE877A 	 fmuls s15,s15,s14
 2594 0a5c 274B     	 ldr r3,.L126+132
 2595 0a5e C3ED007A 	 fsts s15,[r3]
 614:../main.c     **** 
 615:../main.c     **** 
 616:../main.c     **** 		// shortened ca 4% improvemnt
 617:../main.c     **** 		//modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;
 618:../main.c     **** 
 619:../main.c     **** 		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the ti
 2596              	 .loc 4 619 0
 2597 0a62 2748     	 ldr r0,.L126+136
 2598 0a64 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 620:../main.c     **** 
 621:../main.c     **** }
 2599              	 .loc 4 621 0
 2600 0a68 1037     	 adds r7,r7,#16
 2601              	.LCFI74:
 2602              	 .cfi_def_cfa_offset 24
 2603 0a6a BD46     	 mov sp,r7
 2604              	.LCFI75:
 2605              	 .cfi_def_cfa_register 13
 2606              	 
 2607 0a6c BDEC028B 	 fldmfdd sp!,{d8}
 2608              	.LCFI76:
 2609              	 .cfi_restore 80
 2610              	 .cfi_restore 81
 2611              	 .cfi_def_cfa_offset 16
 2612 0a70 B0BD     	 pop {r4,r5,r7,pc}
 2613              	.L127:
 2614 0a72 00BFAFF3 	 .align 3
 2614      0080
 2615              	.L126:
 2616 0a78 9A999999 	 .word -1717986918
 2617 0a7c 9999B93F 	 .word 1069128089
 2618 0a80 E17A14AE 	 .word -1374389535
 2619 0a84 47E1CA3F 	 .word 1070260551
 2620 0a88 4DC90777 	 .word 1996998989
 2621 0a8c 46DF913F 	 .word 1066524486
 2622 0a90 83C0CAA1 	 .word -1580547965
 2623 0a94 45B6FB3F 	 .word 1073460805
 2624 0a98 00000000 	 .word omega_mech_rps_ref
 2625 0a9c 00000000 	 .word T_ref
 2626 0aa0 00000000 	 .word Speed_control
 2627 0aa4 00000000 	 .word iq_ref
 2628 0aa8 0000A0C0 	 .word -1063256064
 2629 0aac 0000A040 	 .word 1084227584
 2630 0ab0 00000000 	 .word Torque_control
 2631 0ab4 00000000 	 .word id
 2632 0ab8 00000000 	 .word Id_param
 2633 0abc 00000000 	 .word Vd
 2634 0ac0 00000000 	 .word iq
 2635 0ac4 00000000 	 .word Iq_param
 2636 0ac8 00000000 	 .word Vq
 2637 0acc 00000000 	 .word Valpha
 2638 0ad0 00000000 	 .word Vbeta
 2639 0ad4 00000000 	 .word angle_ab_rad
 2640 0ad8 00000000 	 .word angle_ab
 2641 0adc 00003443 	 .word 1127481344
 2642 0ae0 0000B443 	 .word 1135869952
 2643 0ae4 00000000 	 .word amplitude_ab
 2644 0ae8 00000000 	 .word V_DC_link
 2645 0aec 00004842 	 .word 1112014848
 2646 0af0 CDCC6C41 	 .word 1097649357
 2647 0af4 00000000 	 .word modulation_index
 2648 0af8 00401C46 	 .word 1176256512
 2649 0afc 00000000 	 .word modulation_index_scaled
 2650 0b00 00000000 	 .word status_LED_red_cal_time
 2651              	 .cfi_endproc
 2652              	.LFE562:
 2654 0b04 AFF30080 	 .section .text.PID_Controller,"ax",%progbits
 2655              	 .align 2
 2656              	 .global PID_Controller
 2657              	 .thumb
 2658              	 .thumb_func
 2660              	PID_Controller:
 2661              	.LFB563:
 622:../main.c     **** 
 623:../main.c     **** // PID Controller
 624:../main.c     **** float PID_Controller(float SetPoint,float ActValue,PID_param *param){
 2662              	 .loc 4 624 0
 2663              	 .cfi_startproc
 2664              	 
 2665              	 
 2666              	 
 2667 0000 80B4     	 push {r7}
 2668              	.LCFI77:
 2669              	 .cfi_def_cfa_offset 4
 2670              	 .cfi_offset 7,-4
 2671 0002 89B0     	 sub sp,sp,#36
 2672              	.LCFI78:
 2673              	 .cfi_def_cfa_offset 40
 2674 0004 00AF     	 add r7,sp,#0
 2675              	.LCFI79:
 2676              	 .cfi_def_cfa_register 7
 2677 0006 F860     	 str r0,[r7,#12]
 2678 0008 B960     	 str r1,[r7,#8]
 2679 000a 7A60     	 str r2,[r7,#4]
 625:../main.c     **** 
 626:../main.c     **** 	float Deviation = SetPoint - ActValue;
 2680              	 .loc 4 626 0
 2681 000c 97ED037A 	 flds s14,[r7,#12]
 2682 0010 D7ED027A 	 flds s15,[r7,#8]
 2683 0014 77EE677A 	 fsubs s15,s14,s15
 2684 0018 C7ED067A 	 fsts s15,[r7,#24]
 627:../main.c     **** 	float temp1, temp2;
 628:../main.c     **** 
 629:../main.c     **** 	 temp1 = param->P*Deviation;
 2685              	 .loc 4 629 0
 2686 001c 7B68     	 ldr r3,[r7,#4]
 2687 001e 93ED007A 	 flds s14,[r3]
 2688 0022 D7ED067A 	 flds s15,[r7,#24]
 2689 0026 67EE277A 	 fmuls s15,s14,s15
 2690 002a C7ED057A 	 fsts s15,[r7,#20]
 630:../main.c     **** 	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;
 2691              	 .loc 4 630 0
 2692 002e 7B68     	 ldr r3,[r7,#4]
 2693 0030 93ED017A 	 flds s14,[r3,#4]
 2694 0034 214B     	 ldr r3,.L137
 2695 0036 D3ED007A 	 flds s15,[r3]
 2696 003a 27EE277A 	 fmuls s14,s14,s15
 2697 003e D7ED067A 	 flds s15,[r7,#24]
 2698 0042 27EE277A 	 fmuls s14,s14,s15
 2699 0046 D7ED057A 	 flds s15,[r7,#20]
 2700 004a 37EE277A 	 fadds s14,s14,s15
 2701 004e 7B68     	 ldr r3,[r7,#4]
 2702 0050 D3ED087A 	 flds s15,[r3,#32]
 2703 0054 77EE277A 	 fadds s15,s14,s15
 2704 0058 C7ED077A 	 fsts s15,[r7,#28]
 631:../main.c     **** 
 632:../main.c     **** 	 if (temp2 >= param->MaxLimit){
 2705              	 .loc 4 632 0
 2706 005c 7B68     	 ldr r3,[r7,#4]
 2707 005e 93ED037A 	 flds s14,[r3,#12]
 2708 0062 D7ED077A 	 flds s15,[r7,#28]
 2709 0066 B4EEE77A 	 fcmpes s14,s15
 2710 006a F1EE10FA 	 fmstat
 2711 006e 03D8     	 bhi .L136
 633:../main.c     **** 		 temp2 = param->MaxLimit;
 2712              	 .loc 4 633 0
 2713 0070 7B68     	 ldr r3,[r7,#4]
 2714 0072 DB68     	 ldr r3,[r3,#12]
 2715 0074 FB61     	 str r3,[r7,#28]
 2716 0076 0CE0     	 b .L131
 2717              	.L136:
 634:../main.c     **** 	 }
 635:../main.c     **** 	 else if (temp2 < param->MinLimit){
 2718              	 .loc 4 635 0
 2719 0078 7B68     	 ldr r3,[r7,#4]
 2720 007a 93ED047A 	 flds s14,[r3,#16]
 2721 007e D7ED077A 	 flds s15,[r7,#28]
 2722 0082 B4EEE77A 	 fcmpes s14,s15
 2723 0086 F1EE10FA 	 fmstat
 2724 008a 02DD     	 ble .L131
 636:../main.c     **** 		 temp2 = param->MinLimit;
 2725              	 .loc 4 636 0
 2726 008c 7B68     	 ldr r3,[r7,#4]
 2727 008e 1B69     	 ldr r3,[r3,#16]
 2728 0090 FB61     	 str r3,[r7,#28]
 2729              	.L131:
 637:../main.c     **** 	 }
 638:../main.c     **** 
 639:../main.c     **** 	 param->Output_z = temp2 - temp1;
 2730              	 .loc 4 639 0
 2731 0092 97ED077A 	 flds s14,[r7,#28]
 2732 0096 D7ED057A 	 flds s15,[r7,#20]
 2733 009a 77EE677A 	 fsubs s15,s14,s15
 2734 009e 7B68     	 ldr r3,[r7,#4]
 2735 00a0 C3ED087A 	 fsts s15,[r3,#32]
 640:../main.c     **** 
 641:../main.c     **** 	 param->Output = temp2;
 2736              	 .loc 4 641 0
 2737 00a4 7B68     	 ldr r3,[r7,#4]
 2738 00a6 FA69     	 ldr r2,[r7,#28]
 2739 00a8 5A61     	 str r2,[r3,#20]
 642:../main.c     **** 
 643:../main.c     **** 	return param->Output;
 2740              	 .loc 4 643 0
 2741 00aa 7B68     	 ldr r3,[r7,#4]
 2742 00ac 5B69     	 ldr r3,[r3,#20]
 644:../main.c     **** 
 645:../main.c     **** }
 2743              	 .loc 4 645 0
 2744 00ae 1846     	 mov r0,r3
 2745 00b0 2437     	 adds r7,r7,#36
 2746              	.LCFI80:
 2747              	 .cfi_def_cfa_offset 4
 2748 00b2 BD46     	 mov sp,r7
 2749              	.LCFI81:
 2750              	 .cfi_def_cfa_register 13
 2751              	 
 2752 00b4 5DF8047B 	 ldr r7,[sp],#4
 2753              	.LCFI82:
 2754              	 .cfi_restore 7
 2755              	 .cfi_def_cfa_offset 0
 2756 00b8 7047     	 bx lr
 2757              	.L138:
 2758 00ba 00BF     	 .align 2
 2759              	.L137:
 2760 00bc 00000000 	 .word Tcyc
 2761              	 .cfi_endproc
 2762              	.LFE563:
 2764              	 .text
 2765              	.Letext0:
 2766              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2767              	 .file 6 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2768              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2769              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 2770              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_scu.h"
 2771              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 2772              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_eru.h"
 2773              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_ccu8.h"
 2774              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 2775              	 .file 14 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm.h"
 2776              	 .file 15 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 2777              	 .file 16 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 2778              	 .file 17 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 2779              	 .file 18 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_vadc.h"
 2780              	 .file 19 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_ADC/global_adc.h"
 2781              	 .file 20 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/ADC_MEASUREMENT/adc_measurement.h"
 2782              	 .file 21 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DAVE.h"
 2783              	 .file 22 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 2784              	 .file 23 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 2785              	 .file 24 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 2786              	 .file 25 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt_extern.h"
 2787              	 .file 26 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 2788              	 .file 27 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
 2789              	 .file 28 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/ADC_MEASUREMENT/adc_measurement_extern.h"
 2790              	 .file 29 "../Globals.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:163    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:167    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:207    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:211    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:250    .text.PIN_INTERRUPT_GetPinValue:00000000 $t
    {standard input}:254    .text.PIN_INTERRUPT_GetPinValue:00000000 PIN_INTERRUPT_GetPinValue
    {standard input}:299    .data.Torque_control:00000000 Torque_control
    {standard input}:305    .data.Speed_control:00000000 Speed_control
    {standard input}:311    .bss.CAN_control:00000000 CAN_control
    {standard input}:312    .bss.CAN_control:00000000 $d
                            *COM*:00000004 Current_U
                            *COM*:00000004 Current_V
                            *COM*:00000004 Current_W
    {standard input}:321    .data.lookup_table:00000000 lookup_table
    {standard input}:318    .data.lookup_table:00000000 $d
    {standard input}:390    .bss.sector:00000000 sector
    {standard input}:391    .bss.sector:00000000 $d
    {standard input}:396    .bss.direction:00000000 direction
    {standard input}:397    .bss.direction:00000000 $d
    {standard input}:403    .bss.enc_val:00000000 enc_val
    {standard input}:400    .bss.enc_val:00000000 $d
    {standard input}:410    .bss.time_since_A:00000000 time_since_A
    {standard input}:407    .bss.time_since_A:00000000 $d
    {standard input}:417    .bss.time_since_B:00000000 time_since_B
    {standard input}:414    .bss.time_since_B:00000000 $d
    {standard input}:424    .bss.time_since_C:00000000 time_since_C
    {standard input}:421    .bss.time_since_C:00000000 $d
    {standard input}:431    .data.time_180deg:00000000 time_180deg
    {standard input}:428    .data.time_180deg:00000000 $d
    {standard input}:438    .data.time_180deg_cal:00000000 time_180deg_cal
    {standard input}:435    .data.time_180deg_cal:00000000 $d
                            *COM*:00000001 last_Hall_trig
    {standard input}:446    .data.angle_in_sector:00000000 angle_in_sector
    {standard input}:443    .data.angle_in_sector:00000000 $d
    {standard input}:453    .bss.angle_phi:00000000 angle_phi
    {standard input}:450    .bss.angle_phi:00000000 $d
                            *COM*:00000004 ialpha
                            *COM*:00000004 ibeta
                            *COM*:00000004 iq
                            *COM*:00000004 id
                            *COM*:00000004 Valpha
                            *COM*:00000004 Vbeta
    {standard input}:466    .bss.omega_mech_rps:00000000 omega_mech_rps
    {standard input}:463    .bss.omega_mech_rps:00000000 $d
    {standard input}:473    .bss.omega_mech_rps_temp:00000000 omega_mech_rps_temp
    {standard input}:470    .bss.omega_mech_rps_temp:00000000 $d
    {standard input}:480    .bss.omega_ele_degs:00000000 omega_ele_degs
    {standard input}:477    .bss.omega_ele_degs:00000000 $d
    {standard input}:487    .bss.speed_ref:00000000 speed_ref
    {standard input}:484    .bss.speed_ref:00000000 $d
    {standard input}:494    .bss.omega_ele_rads_ref:00000000 omega_ele_rads_ref
    {standard input}:491    .bss.omega_ele_rads_ref:00000000 $d
    {standard input}:501    .bss.iq_ref:00000000 iq_ref
    {standard input}:498    .bss.iq_ref:00000000 $d
    {standard input}:508    .bss.T_ref:00000000 T_ref
    {standard input}:505    .bss.T_ref:00000000 $d
    {standard input}:515    .bss.Vd:00000000 Vd
    {standard input}:512    .bss.Vd:00000000 $d
    {standard input}:522    .bss.Vq:00000000 Vq
    {standard input}:519    .bss.Vq:00000000 $d
    {standard input}:529    .bss.omega_mech_rps_ref:00000000 omega_mech_rps_ref
    {standard input}:526    .bss.omega_mech_rps_ref:00000000 $d
                            *COM*:00000004 modulation_index
                            *COM*:00000004 modulation_index_scaled
                            *COM*:00000004 angle_ab
                            *COM*:00000004 angle_ab_rad
                            *COM*:00000004 amplitude_ab
    {standard input}:541    .data.Ts:00000000 Ts
    {standard input}:538    .data.Ts:00000000 $d
    {standard input}:548    .data.Tcyc:00000000 Tcyc
    {standard input}:545    .data.Tcyc:00000000 $d
    {standard input}:555    .data.scaling_factor:00000000 scaling_factor
    {standard input}:552    .data.scaling_factor:00000000 $d
                            *COM*:00000004 amplitude_corrected
    {standard input}:562    .bss.count:00000000 count
    {standard input}:563    .bss.count:00000000 $d
    {standard input}:569    .data.offset_pos:00000000 offset_pos
    {standard input}:566    .data.offset_pos:00000000 $d
    {standard input}:576    .data.offset_neg:00000000 offset_neg
    {standard input}:573    .data.offset_neg:00000000 $d
    {standard input}:583    .data.Iq_param:00000000 Iq_param
    {standard input}:580    .data.Iq_param:00000000 $d
    {standard input}:598    .data.Id_param:00000000 Id_param
    {standard input}:595    .data.Id_param:00000000 $d
    {standard input}:613    .data.omega_param:00000000 omega_param
    {standard input}:610    .data.omega_param:00000000 $d
    {standard input}:628    .data.omega_param1:00000000 omega_param1
    {standard input}:625    .data.omega_param1:00000000 $d
    {standard input}:642    .bss.Speed_detection_OK:00000000 Speed_detection_OK
    {standard input}:643    .bss.Speed_detection_OK:00000000 $d
    {standard input}:649    .data.setting_time_scalar:00000000 setting_time_scalar
    {standard input}:646    .data.setting_time_scalar:00000000 $d
    {standard input}:656    .bss.step_start:00000000 step_start
    {standard input}:653    .bss.step_start:00000000 $d
    {standard input}:663    .data.step:00000000 step
    {standard input}:660    .data.step:00000000 $d
    {standard input}:669    .bss.start_help_count:00000000 start_help_count
    {standard input}:670    .bss.start_help_count:00000000 $d
    {standard input}:675    .bss.start_help:00000000 start_help
    {standard input}:676    .bss.start_help:00000000 $d
    {standard input}:681    .bss.start_help_flag:00000000 start_help_flag
    {standard input}:682    .bss.start_help_flag:00000000 $d
    {standard input}:688    .data.ADC_TO_DCLINK:00000000 ADC_TO_DCLINK
    {standard input}:685    .data.ADC_TO_DCLINK:00000000 $d
    {standard input}:696    .text.main:00000000 $t
    {standard input}:701    .text.main:00000000 main
    {standard input}:1186   .text.Hall_init:00000000 Hall_init
    {standard input}:1471   .text.Calculation:00000000 Calculation
    {standard input}:780    .text.main:00000068 $d
    {standard input}:793    .text.VADC0_C0_2_IRQHandler:00000000 $t
    {standard input}:798    .text.VADC0_C0_2_IRQHandler:00000000 VADC0_C0_2_IRQHandler
    {standard input}:841    .text.VADC0_C0_2_IRQHandler:00000030 $d
    {standard input}:848    .text.CCU43_3_IRQHandler:00000000 $t
    {standard input}:853    .text.CCU43_3_IRQHandler:00000000 CCU43_3_IRQHandler
    {standard input}:898    .text.CCU43_3_IRQHandler:0000002c $d
    {standard input}:905    .text.ERU1_2_IRQHandler:00000000 $t
    {standard input}:910    .text.ERU1_2_IRQHandler:00000000 ERU1_2_IRQHandler
    {standard input}:1309   .text.HallSensor:00000000 HallSensor
    {standard input}:973    .text.ERU1_2_IRQHandler:00000050 $d
    {standard input}:982    .text.ERU1_0_IRQHandler:00000000 $t
    {standard input}:987    .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
    {standard input}:1021   .text.ERU1_0_IRQHandler:00000020 $d
    {standard input}:1028   .text.ERU1_3_IRQHandler:00000000 $t
    {standard input}:1033   .text.ERU1_3_IRQHandler:00000000 ERU1_3_IRQHandler
    {standard input}:1067   .text.ERU1_3_IRQHandler:00000020 $d
    {standard input}:1074   .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:1079   .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:1107   .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:1112   .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:1173   .text.CCU80_3_IRQHandler:00000058 $d
    {standard input}:1181   .text.Hall_init:00000000 $t
    {standard input}:1296   .text.Hall_init:0000008c $d
    {standard input}:1304   .text.HallSensor:00000000 $t
    {standard input}:1446   .text.HallSensor:000000c0 $d
    {standard input}:1466   .text.Calculation:00000000 $t
    {standard input}:1826   .text.Calculation:000002dc $d
    {standard input}:1855   .text.Calculation:00000348 $t
    {standard input}:2104   .text.Calculation:000005b0 $d
    {standard input}:2130   .text.Calculation:00000610 $t
    {standard input}:2660   .text.PID_Controller:00000000 PID_Controller
    {standard input}:2314   .text.Calculation:000007a0 $d
    {standard input}:2332   .text.Calculation:000007e0 $t
    {standard input}:2616   .text.Calculation:00000a78 $d
    {standard input}:2655   .text.PID_Controller:00000000 $t
    {standard input}:2760   .text.PID_Controller:000000bc $d
                     .debug_frame:00000010 $d
    {standard input}:2654   .text.Calculation:00000b04 $t

UNDEFINED SYMBOLS
DAVE_Init
CAN_NODE_Init
PWM_SVM_Start
rec_step_from_0
ADC_MEASUREMENT_StartConversion
CAN_NODE_0
PWM_SVM_0
ADC_MEASUREMENT_0
ADC_MEASUREMENT_GetResult
ADC_MEASUREMENT_Channel_A_handle
V_DC_link
distance_180deg_ele_count
PWM_SVM_SVMUpdate
Hall_A_ISR
Hall_B_ISR
Hall_C_ISR
__aeabi_f2d
__aeabi_ddiv
__aeabi_ui2d
__aeabi_dmul
__aeabi_d2f
__aeabi_i2d
__aeabi_dadd
__aeabi_dsub
__aeabi_dcmpeq
status_LED_red_cal_time
omega_ele_rads
readCurrent
cosf
sinf
CAN_new_meassage
CAN_speed_ref
copysign
CAN_no_com_counter
atanf
sqrtf
