   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB137:
  26              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE137:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB138:
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE138:
 114 0022 00BF     	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_GetInput:
 120              	.LFB140:
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 334 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 139              	 .loc 1 337 0
 140 000c 7B68     	 ldr r3,[r7,#4]
 141 000e 5A6A     	 ldr r2,[r3,#36]
 142 0010 FB78     	 ldrb r3,[r7,#3]
 143 0012 22FA03F3 	 lsr r3,r2,r3
 144 0016 03F00103 	 and r3,r3,#1
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 338 0
 146 001a 1846     	 mov r0,r3
 147 001c 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 001e BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0020 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0024 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE140:
 162 0026 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	DIGITAL_IO_SetOutputHigh:
 168              	.LFB145:
 169              	 .file 2 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 170              	 .loc 2 269 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 80B5     	 push {r7,lr}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 7,-8
 178              	 .cfi_offset 14,-4
 179 0002 82B0     	 sub sp,sp,#8
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 185 0006 7860     	 str r0,[r7,#4]
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 186              	 .loc 2 271 0
 187 0008 7B68     	 ldr r3,[r7,#4]
 188 000a 1A68     	 ldr r2,[r3]
 189 000c 7B68     	 ldr r3,[r7,#4]
 190 000e 1B7C     	 ldrb r3,[r3,#16]
 191 0010 1046     	 mov r0,r2
 192 0012 1946     	 mov r1,r3
 193 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 194              	 .loc 2 272 0
 195 0018 0837     	 adds r7,r7,#8
 196              	.LCFI21:
 197              	 .cfi_def_cfa_offset 8
 198 001a BD46     	 mov sp,r7
 199              	.LCFI22:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 001c 80BD     	 pop {r7,pc}
 203              	 .cfi_endproc
 204              	.LFE145:
 206 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	DIGITAL_IO_SetOutputLow:
 212              	.LFB146:
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 213              	 .loc 2 316 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217 0000 80B5     	 push {r7,lr}
 218              	.LCFI23:
 219              	 .cfi_def_cfa_offset 8
 220              	 .cfi_offset 7,-8
 221              	 .cfi_offset 14,-4
 222 0002 82B0     	 sub sp,sp,#8
 223              	.LCFI24:
 224              	 .cfi_def_cfa_offset 16
 225 0004 00AF     	 add r7,sp,#0
 226              	.LCFI25:
 227              	 .cfi_def_cfa_register 7
 228 0006 7860     	 str r0,[r7,#4]
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 229              	 .loc 2 318 0
 230 0008 7B68     	 ldr r3,[r7,#4]
 231 000a 1A68     	 ldr r2,[r3]
 232 000c 7B68     	 ldr r3,[r7,#4]
 233 000e 1B7C     	 ldrb r3,[r3,#16]
 234 0010 1046     	 mov r0,r2
 235 0012 1946     	 mov r1,r3
 236 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 237              	 .loc 2 319 0
 238 0018 0837     	 adds r7,r7,#8
 239              	.LCFI26:
 240              	 .cfi_def_cfa_offset 8
 241 001a BD46     	 mov sp,r7
 242              	.LCFI27:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 001c 80BD     	 pop {r7,pc}
 246              	 .cfi_endproc
 247              	.LFE146:
 249 001e 00BF     	 .section .text.PIN_INTERRUPT_GetPinValue,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	PIN_INTERRUPT_GetPinValue:
 255              	.LFB308:
 256              	 .file 3 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @file pin_interrupt.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @date 2016-03-02
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * NOTE:
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @cond
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT v4.0.2 - The PIN_INTERRUPT APP invokes user interrupt handler in a response to ris
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                        edge event signal on a pin.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Copyright (c) 2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * All rights reserved.                        
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * following conditions are met:   
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer.                        
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.     
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                         
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   products derived from this software without specific prior written permission. 
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * with Infineon Technologies AG (dave@infineon.com).         
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 2015-12-03:
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     - Initial version for DAVEv4. <BR>
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcond 
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifndef PIN_INTERRUPT_H
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #define PIN_INTERRUPT_H
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * HEADER FILES                                                                                    
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_scu.h>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_gpio.h>
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_eru.h>
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <DAVE_Common.h>
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include "pin_interrupt_conf.h"
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * MACROS                                                                                          
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_MINOR_VERSION >= 1U) && \
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_PATCH_VERSION >= 6U)))
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #error "PIN_INTERRUPT requires XMC Peripheral Library v2.1.6 or higher"
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup App_publicparam
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  @brief Initialization data structure for PIN_INTERRUPT APP
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ENUMS
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /*
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief enumeration for PIN_INTERRUPT APP
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_STATUS
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_SUCCESS = 0U,        /**<APP initialization is success */
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_FAILURE = 1U         /**<APP initialization is failure */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_STATUS_t;
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Defines trigger edge for the event generation by ETLx (Event Trigger Logic, x = [0 to 3]) unit, 
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * from ERSx(Event request source, x = [0 to 3]) unit.
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_EDGE
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_NONE = 0U, /**< no event enabled */
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_RISING = 1U,   /**< detection of rising edge generates the event */
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_FALLING = 2U,  /**< detection of falling edge generates the event */
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_BOTH = 3U      /**< detection of either edges generates the event */
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_EDGE_t;
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * DATA STRUCTURES
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** ***************************************************************************************************
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_datastructures
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Configuration structure for PIN_INTERRUPT APP
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef struct PIN_INTERRUPT
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_t *eru;  /**< Mapped ERU module */
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_PORT_t *port;  /**< Mapped port number */
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_CONFIG_t gpio_config;   /**< Initializes the input pin characteristics */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_ETL_CONFIG_t etl_config;  /**< reference to ERUx_ETLy (x = [0..1], y = [0..4])
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****                                                       module configuration */
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_SCU_IRQCTRL_t irqctrl;  /**< selects the interrupt source for a NVIC interrupt node*/
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   IRQn_Type IRQn;       /**< Mapped NVIC Node */
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_priority; 	  /**< Node Interrupt Priority */
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_FAMILY == XMC4)
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_subpriority;  /**< Node Interrupt SubPriority only valid for XMC4x */
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t etl; /*< ETLx channel (x = [0..3])*/
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t ogu; /*< OGUy channel (y = [0..3])*/
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t pin; /*< Mapped pin number */
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   bool enable_at_init;  /**< Interrupt enable for Node at initialization*/
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_t;
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifdef __cplusplus
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** extern "C" {
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * API Prototypes
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_apidoc
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Get PIN_INTERRUPT APP version
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description: </b><br>
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * The function can be used to check application software compatibility with a
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * specific version of the APP.
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void) {
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t init_status;
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_APP_VERSION_t version;
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // Initialize PIN_INTERRUPT APP:
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // PIN_INTERRUPT_Init() is called from within DAVE_Init().
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   init_status = DAVE_Init();
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if (DAVE_STATUS_SUCCESS == init_status)
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     version = PIN_INTERRUPT_GetAppVersion();
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     if (version.major != 4U) {
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *       // Probably, not the right version.
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     // More code here
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** DAVE_APP_VERSION_t PIN_INTERRUPT_GetAppVersion(void);
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Initializes a PIN_INTERRUPT APP instance
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_SUCCESS             : if initialization is successful\n
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_FAILURE             : if initialization is failed
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description:</b><br>
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT_Init API is called during initialization of DAVE APPS. This API Initializes input 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ERU and OGU hardware module initialization, Configures NVIC node and its priority in order to ge
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void)
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * {
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t status;
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle);
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Enables the IRQ.
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_EnableIRQ(handle->IRQn);
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Disables the IRQ.
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Disable(&PIN_INTERRUPT_0);
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Disable(const PIN_INTERRUPT_t *const handle)
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Disable: Handler null pointer", handle != NULL);
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_DisableIRQ(handle->IRQn);
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @brief Read input level of port pin.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @return uint32_t input logic level. Range:0-1
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * \par<b>Description:</b><br>
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * This function reads the Pn_IN register and returns the current logical value at the GPIO pin.
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * Example Usage:
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @code
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * int main(void)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * {
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   DAVE_STATUS_t status;
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   uint32_t pin_status;
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   status = DAVE_Init();   // (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0) is called within
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   if(status == DAVE_STATUS_SUCCESS)
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   else
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     while(1U)
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   while(1U)
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     pin_status = PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_0);
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     if(pin_status == 1)
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 339:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     else
 340:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 341:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 342:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 343:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 344:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   return (1);
 345:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * }
 346:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *  @endcode
 347:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** */
 348:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
 349:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 257              	 .loc 3 349 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI28:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI29:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI30:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
 350:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
 351:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   return (XMC_GPIO_GetInput(handle->port, handle->pin));
 273              	 .loc 3 351 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 5A68     	 ldr r2,[r3,#4]
 276 000c 7B68     	 ldr r3,[r7,#4]
 277 000e 93F82130 	 ldrb r3,[r3,#33]
 278 0012 1046     	 mov r0,r2
 279 0014 1946     	 mov r1,r3
 280 0016 FFF7FEFF 	 bl XMC_GPIO_GetInput
 281 001a 0346     	 mov r3,r0
 352:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 282              	 .loc 3 352 0
 283 001c 1846     	 mov r0,r3
 284 001e 0837     	 adds r7,r7,#8
 285              	.LCFI31:
 286              	 .cfi_def_cfa_offset 8
 287 0020 BD46     	 mov sp,r7
 288              	.LCFI32:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 0022 80BD     	 pop {r7,pc}
 292              	 .cfi_endproc
 293              	.LFE308:
 295              	 .global Torque_control
 296              	 .section .data.Torque_control,"aw",%progbits
 299              	Torque_control:
 300 0000 01       	 .byte 1
 301              	 .global Speed_control
 302              	 .section .data.Speed_control,"aw",%progbits
 305              	Speed_control:
 306 0000 01       	 .byte 1
 307              	 .global CAN_control
 308              	 .section .bss.CAN_control,"aw",%nobits
 311              	CAN_control:
 312 0000 00       	 .space 1
 313              	 .comm Current_U,4,4
 314              	 .comm Current_V,4,4
 315              	 .comm Current_W,4,4
 316              	 .global lookup_table
 317              	 .section .data.lookup_table,"aw",%progbits
 318              	 .align 2
 321              	lookup_table:
 322 0000 00       	 .byte 0
 323 0001 00       	 .byte 0
 324 0002 00       	 .byte 0
 325 0003 00       	 .byte 0
 326 0004 00       	 .byte 0
 327 0005 00       	 .byte 0
 328 0006 00       	 .byte 0
 329 0007 00       	 .byte 0
 330 0008 00       	 .byte 0
 331 0009 00       	 .byte 0
 332 000a 00       	 .byte 0
 333 000b FF       	 .byte -1
 334 000c 00       	 .byte 0
 335 000d 01       	 .byte 1
 336 000e 00       	 .byte 0
 337 000f 00       	 .byte 0
 338 0010 00       	 .byte 0
 339 0011 00       	 .byte 0
 340 0012 00       	 .byte 0
 341 0013 01       	 .byte 1
 342 0014 00       	 .byte 0
 343 0015 00       	 .byte 0
 344 0016 FF       	 .byte -1
 345 0017 00       	 .byte 0
 346 0018 00       	 .byte 0
 347 0019 01       	 .byte 1
 348 001a FF       	 .byte -1
 349 001b 00       	 .byte 0
 350 001c 00       	 .byte 0
 351 001d 00       	 .byte 0
 352 001e 00       	 .byte 0
 353 001f 00       	 .byte 0
 354 0020 00       	 .byte 0
 355 0021 00       	 .byte 0
 356 0022 00       	 .byte 0
 357 0023 00       	 .byte 0
 358 0024 00       	 .byte 0
 359 0025 FF       	 .byte -1
 360 0026 01       	 .byte 1
 361 0027 00       	 .byte 0
 362 0028 00       	 .byte 0
 363 0029 FF       	 .byte -1
 364 002a 00       	 .byte 0
 365 002b 00       	 .byte 0
 366 002c 01       	 .byte 1
 367 002d 00       	 .byte 0
 368 002e 00       	 .byte 0
 369 002f 00       	 .byte 0
 370 0030 00       	 .byte 0
 371 0031 00       	 .byte 0
 372 0032 01       	 .byte 1
 373 0033 00       	 .byte 0
 374 0034 FF       	 .byte -1
 375 0035 00       	 .byte 0
 376 0036 00       	 .byte 0
 377 0037 00       	 .byte 0
 378 0038 00       	 .byte 0
 379 0039 00       	 .byte 0
 380 003a 00       	 .byte 0
 381 003b 00       	 .byte 0
 382 003c 00       	 .byte 0
 383 003d 00       	 .byte 0
 384 003e 00       	 .byte 0
 385 003f 00       	 .byte 0
 386              	 .global sector
 387              	 .section .bss.sector,"aw",%nobits
 390              	sector:
 391 0000 00       	 .space 1
 392              	 .global direction
 393              	 .section .bss.direction,"aw",%nobits
 396              	direction:
 397 0000 00       	 .space 1
 398              	 .global enc_val
 399              	 .section .bss.enc_val,"aw",%nobits
 400              	 .align 1
 403              	enc_val:
 404 0000 0000     	 .space 2
 405              	 .global time_since_A
 406              	 .section .bss.time_since_A,"aw",%nobits
 407              	 .align 2
 410              	time_since_A:
 411 0000 00000000 	 .space 4
 412              	 .global time_since_B
 413              	 .section .bss.time_since_B,"aw",%nobits
 414              	 .align 2
 417              	time_since_B:
 418 0000 00000000 	 .space 4
 419              	 .global time_since_C
 420              	 .section .bss.time_since_C,"aw",%nobits
 421              	 .align 2
 424              	time_since_C:
 425 0000 00000000 	 .space 4
 426              	 .global time_180deg
 427              	 .section .data.time_180deg,"aw",%progbits
 428              	 .align 2
 431              	time_180deg:
 432 0000 E8030000 	 .word 1000
 433              	 .global time_180deg_cal
 434              	 .section .data.time_180deg_cal,"aw",%progbits
 435              	 .align 2
 438              	time_180deg_cal:
 439 0000 E8030000 	 .word 1000
 440              	 .comm last_Hall_trig,1,1
 441              	 .global angle_in_sector
 442              	 .section .data.angle_in_sector,"aw",%progbits
 443              	 .align 2
 446              	angle_in_sector:
 447 0000 0000F041 	 .word 1106247680
 448              	 .global angle_phi
 449              	 .section .bss.angle_phi,"aw",%nobits
 450              	 .align 2
 453              	angle_phi:
 454 0000 00000000 	 .space 4
 455              	 .comm ialpha,4,4
 456              	 .comm ibeta,4,4
 457              	 .comm iq,4,4
 458              	 .comm id,4,4
 459              	 .comm Valpha,4,4
 460              	 .comm Vbeta,4,4
 461              	 .global omega_ele_rads
 462              	 .section .bss.omega_ele_rads,"aw",%nobits
 463              	 .align 2
 466              	omega_ele_rads:
 467 0000 00000000 	 .space 4
 468              	 .global omega_mech_rps
 469              	 .section .bss.omega_mech_rps,"aw",%nobits
 470              	 .align 2
 473              	omega_mech_rps:
 474 0000 00000000 	 .space 4
 475              	 .global omega_mech_rps_temp
 476              	 .section .bss.omega_mech_rps_temp,"aw",%nobits
 477              	 .align 2
 480              	omega_mech_rps_temp:
 481 0000 00000000 	 .space 4
 482              	 .global omega_ele_degs
 483              	 .section .bss.omega_ele_degs,"aw",%nobits
 484              	 .align 2
 487              	omega_ele_degs:
 488 0000 00000000 	 .space 4
 489              	 .global speed_ref
 490              	 .section .bss.speed_ref,"aw",%nobits
 491              	 .align 2
 494              	speed_ref:
 495 0000 00000000 	 .space 4
 496              	 .global omega_ele_rads_ref
 497              	 .section .bss.omega_ele_rads_ref,"aw",%nobits
 498              	 .align 2
 501              	omega_ele_rads_ref:
 502 0000 00000000 	 .space 4
 503              	 .global iq_ref
 504              	 .section .bss.iq_ref,"aw",%nobits
 505              	 .align 2
 508              	iq_ref:
 509 0000 00000000 	 .space 4
 510              	 .global T_ref
 511              	 .section .bss.T_ref,"aw",%nobits
 512              	 .align 2
 515              	T_ref:
 516 0000 00000000 	 .space 4
 517              	 .global Vd
 518              	 .section .bss.Vd,"aw",%nobits
 519              	 .align 2
 522              	Vd:
 523 0000 00000000 	 .space 4
 524              	 .global Vq
 525              	 .section .bss.Vq,"aw",%nobits
 526              	 .align 2
 529              	Vq:
 530 0000 00000000 	 .space 4
 531              	 .global omega_mech_rps_ref
 532              	 .section .bss.omega_mech_rps_ref,"aw",%nobits
 533              	 .align 2
 536              	omega_mech_rps_ref:
 537 0000 00000000 	 .space 4
 538              	 .comm Speeds_int16_r,8,4
 539              	 .global CAN_speed_ref
 540              	 .section .bss.CAN_speed_ref,"aw",%nobits
 541              	 .align 2
 544              	CAN_speed_ref:
 545 0000 00000000 	 .space 4
 546              	 .global CAN_new_meassage
 547              	 .section .bss.CAN_new_meassage,"aw",%nobits
 550              	CAN_new_meassage:
 551 0000 00       	 .space 1
 552              	 .global CAN_no_com_counter
 553              	 .section .bss.CAN_no_com_counter,"aw",%nobits
 556              	CAN_no_com_counter:
 557 0000 00       	 .space 1
 558              	 .global distance_180deg_ele_count
 559              	 .section .bss.distance_180deg_ele_count,"aw",%nobits
 560              	 .align 2
 563              	distance_180deg_ele_count:
 564 0000 00000000 	 .space 4
 565              	 .global Speed_act
 566              	 .section .bss.Speed_act,"aw",%nobits
 567              	 .align 2
 570              	Speed_act:
 571 0000 00000000 	 .space 4
 572              	 .global distance
 573              	 .section .bss.distance,"aw",%nobits
 574              	 .align 2
 577              	distance:
 578 0000 00000000 	 .space 4
 579              	 .comm modulation_index,4,4
 580              	 .comm modulation_index_scaled,4,4
 581              	 .comm angle_ab,4,4
 582              	 .comm angle_ab_rad,4,4
 583              	 .comm amplitude_ab,4,4
 584              	 .global Ts
 585              	 .section .data.Ts,"aw",%progbits
 586              	 .align 2
 589              	Ts:
 590 0000 17B75138 	 .word 944879383
 591              	 .global Tcyc
 592              	 .section .data.Tcyc,"aw",%progbits
 593              	 .align 2
 596              	Tcyc:
 597 0000 17B75139 	 .word 961656599
 598              	 .global scaling_factor
 599              	 .section .data.scaling_factor,"aw",%progbits
 600              	 .align 2
 603              	scaling_factor:
 604 0000 00000743 	 .word 1124532224
 605              	 .comm amplitude_corrected,4,4
 606              	 .global count
 607              	 .section .bss.count,"aw",%nobits
 610              	count:
 611 0000 00       	 .space 1
 612              	 .global offset_pos
 613              	 .section .data.offset_pos,"aw",%progbits
 614              	 .align 2
 617              	offset_pos:
 618 0000 0000D8C1 	 .word -1042808832
 619              	 .global offset_neg
 620              	 .section .data.offset_neg,"aw",%progbits
 621              	 .align 2
 624              	offset_neg:
 625 0000 0000A0C1 	 .word -1046478848
 626              	 .global Iq_param
 627              	 .section .data.Iq_param,"aw",%progbits
 628              	 .align 2
 631              	Iq_param:
 632 0000 295C8F3E 	 .word 1049582633
 633 0004 00006843 	 .word 1130889216
 634 0008 00000000 	 .word 0
 635 000c 0000C842 	 .word 1120403456
 636 0010 0000C8C2 	 .word -1027080192
 637 0014 00000000 	 .word 0
 638 0018 00000000 	 .word 0
 639 001c 00000000 	 .word 0
 640 0020 00000000 	 .space 4
 641              	 .global Id_param
 642              	 .section .data.Id_param,"aw",%progbits
 643              	 .align 2
 646              	Id_param:
 647 0000 295C8F3E 	 .word 1049582633
 648 0004 00006843 	 .word 1130889216
 649 0008 00000000 	 .word 0
 650 000c 0000C842 	 .word 1120403456
 651 0010 0000C8C2 	 .word -1027080192
 652 0014 00000000 	 .word 0
 653 0018 00000000 	 .word 0
 654 001c 00000000 	 .word 0
 655 0020 00000000 	 .space 4
 656              	 .global omega_param
 657              	 .section .data.omega_param,"aw",%progbits
 658              	 .align 2
 661              	omega_param:
 662 0000 8CB9CB3E 	 .word 1053538700
 663 0004 93A9423E 	 .word 1044556179
 664 0008 00000000 	 .word 0
 665 000c 00000040 	 .word 1073741824
 666 0010 000000C0 	 .word -1073741824
 667 0014 00000000 	 .word 0
 668 0018 00000000 	 .word 0
 669 001c 00000000 	 .word 0
 670 0020 00000000 	 .space 4
 671              	 .global T_param_1
 672              	 .section .data.T_param_1,"aw",%progbits
 673              	 .align 2
 676              	T_param_1:
 677 0000 0AD7A33B 	 .word 1000593162
 678 0004 0AD7233C 	 .word 1008981770
 679 0008 00000000 	 .word 0
 680 000c 0000C03F 	 .word 1069547520
 681 0010 0000C0BF 	 .word -1077936128
 682 0014 00000000 	 .word 0
 683 0018 00000000 	 .word 0
 684 001c 00000000 	 .word 0
 685 0020 00000000 	 .space 4
 686              	 .global falg_speed_not_new
 687              	 .section .bss.falg_speed_not_new,"aw",%nobits
 690              	falg_speed_not_new:
 691 0000 00       	 .space 1
 692              	 .section .text.main,"ax",%progbits
 693              	 .align 2
 694              	 .global main
 695              	 .thumb
 696              	 .thumb_func
 698              	main:
 699              	.LFB473:
 700              	 .file 4 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2020 Jan 02 10:21:43
   5:../main.c     ****  *  Author: Baldo
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** // status: 11.05.2022
   9:../main.c     **** 
  10:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  11:../main.c     **** #include <math.h>
  12:../main.c     **** #include <stdio.h> //for printf
  13:../main.c     **** #include "rec_data_function.h"
  14:../main.c     **** 
  15:../main.c     **** //#######################
  16:../main.c     **** //FUNCTION DECLARATION
  17:../main.c     **** //########################
  18:../main.c     **** float readCurrent(uint8_t);
  19:../main.c     **** void Hall_init(void);
  20:../main.c     **** void HallSensor(void);
  21:../main.c     **** void Calculation(void);
  22:../main.c     **** 
  23:../main.c     **** //########################
  24:../main.c     **** //VARIABLE DECLARATION
  25:../main.c     **** //########################
  26:../main.c     **** 
  27:../main.c     **** // NEED to be set
  28:../main.c     **** //motor
  29:../main.c     **** #define MOTOR_NUM 10 // for trque dirction motro 1 differtn form rest so far
  30:../main.c     **** #define MOTOR_ON_ROVER 3// 0 front left 1 front right 2 back left 3 back right
  31:../main.c     **** 
  32:../main.c     **** //control type
  33:../main.c     **** uint8_t Torque_control = 1;
  34:../main.c     **** uint8_t Speed_control = 1; //if 0 is torque control if 1 is speed control
  35:../main.c     **** uint8_t CAN_control = 0; // id 1 CAN speed controll aktive
  36:../main.c     **** 
  37:../main.c     **** 
  38:../main.c     **** #define IQ_REF_MAX 5
  39:../main.c     **** #define CAN_NO_COM_TH 250
  40:../main.c     **** #define MAX_Speed_CAN 2
  41:../main.c     **** #define SPEED_LIMIT_CTRL_TO_ZERO 100 //omega_ele rad/s
  42:../main.c     **** #define TIME_OMEGA_0  5000 //time since last hall before omgea set to 0 in 100us
  43:../main.c     **** 
  44:../main.c     **** // Define often used vaules to decrease computational effort
  45:../main.c     **** #define PI 3.14159265
  46:../main.c     **** #define TwoThird 0.66666667
  47:../main.c     **** #define TwoPiThird 2.0943951
  48:../main.c     **** #define FourPiThird 4.1887902
  49:../main.c     **** #define Pi180 0.01745329
  50:../main.c     **** 
  51:../main.c     **** #define ANGLE_ONE_DEGREE (46603U)
  52:../main.c     **** //#define ANGLE_60_DEGREE	 (2796203U)
  53:../main.c     **** //#define ANGLE_180_DEGREE (8388608U)
  54:../main.c     **** 
  55:../main.c     **** //#define ANGLE_LSB (9455) // 2^24 corresponds to 360°. For a timer interrupt delta time of 100us 
  56:../main.c     **** 
  57:../main.c     **** // Define Chip select Pins for Current measurement via SPI Interface
  58:../main.c     **** #define ChipSelect_U 0b110
  59:../main.c     **** #define ChipSelect_V 0b101
  60:../main.c     **** #define ChipSelect_W 0b011
  61:../main.c     **** #define J 0.0023064 //SK J = 1/2 * m_wheel * r_wheel^2 = 1/2*1.2kg*(62mm)^2
  62:../main.c     **** #define K_T 0.21 //SK torque constant in Nm/A
  63:../main.c     **** #define K_inv (15.7/1.732) // K_inv = V / m = V_DC / 2 * 2/sqrt(3) = V_DC/sqrt(3)
  64:../main.c     **** //#define Psi_p 0.0082  60/  (2 * PI) * 1.4142 // Psi_p = K_back_EMF = 0.0082 V / rpm_mech --> 60 t
  65:../main.c     **** //#define Ls 0.00088 // Ls = Lm*1.1 = 0.8mH * 1.1 = 0.00088H
  66:../main.c     **** #define PPZ 11
  67:../main.c     **** #define WHEEL_R 0.0675 //0.135/2 straigt vaule other thing casued problems
  68:../main.c     **** 
  69:../main.c     **** float Current_U;
  70:../main.c     **** float Current_V;
  71:../main.c     **** float Current_W;
  72:../main.c     **** 
  73:../main.c     **** // Declaration of Lookup Table
  74:../main.c     **** int8_t lookup_table[] = {0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,-1,0,0,1,-1,0,0,0,0,0,0,0,0,0
  75:../main.c     **** //access via the index in the  form of the 6 bits (3 previous hall states and 3 actual  hall states
  76:../main.c     **** //for each of the 2^6 possibilities of sequence of hall events  it has been thought about the wavef
  77:../main.c     **** 
  78:../main.c     **** volatile int8_t sector = 0;
  79:../main.c     **** volatile int8_t direction = 0;              // direction +1/-1 -> CW and CCW
  80:../main.c     **** volatile uint16_t enc_val = 0;          // old and new values of all Hall Sensors
  81:../main.c     **** volatile uint32_t time_since_A = 0;	// time between to edges Hall A
  82:../main.c     **** volatile uint32_t time_since_B = 0; // time between to edges Hall B
  83:../main.c     **** volatile uint32_t time_since_C = 0; // time between to edges Hall C
  84:../main.c     **** volatile uint32_t time_180deg = 1000;        // time which last triggered HAL sensor needed for 180
  85:../main.c     **** volatile uint32_t time_180deg_cal = 1000;
  86:../main.c     **** volatile char last_Hall_trig;			//last triggered Hall Sensor A/B/C
  87:../main.c     **** 
  88:../main.c     **** float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60°
  89:../main.c     **** //volatile uint32_t TIME_OMEGA_0 = 50000; // t over this therschold assumed to be zero
  90:../main.c     **** 
  91:../main.c     **** float angle_phi = 0;
  92:../main.c     **** float ialpha,ibeta,iq,id,Valpha,Vbeta;
  93:../main.c     **** 
  94:../main.c     **** volatile float omega_ele_rads = 0; 	// electrical rad / sec //current real velocity calculated from
  95:../main.c     **** volatile float omega_mech_rps = 0;	//SK	//mechanical rounds per second
  96:../main.c     **** volatile float omega_mech_rps_temp = 0; //SK	//since dividing through the incremental (counted up) 
  97:../main.c     **** //volatile float omega_ele_rads_ref = -2*69.11; //1*69.11; //SK		//target velocity electrical in ra
  98:../main.c     **** 
  99:../main.c     **** volatile float omega_ele_degs = 0;
 100:../main.c     **** 
 101:../main.c     **** // REF vaules given to PI controller
 102:../main.c     **** float speed_ref = 0.0; //meters per second
 103:../main.c     **** float omega_ele_rads_ref = 0.0; // electrical rad per second
 104:../main.c     **** float iq_ref = 0.0;
 105:../main.c     **** float T_ref = 0.0;
 106:../main.c     **** float Vd = 0;
 107:../main.c     **** float Vq = 0;
 108:../main.c     **** float omega_mech_rps_ref = 0;
 109:../main.c     **** 
 110:../main.c     **** // CAN vars
 111:../main.c     **** int16_t Speeds_int16_r[4];
 112:../main.c     **** float CAN_speed_ref = 0.0;
 113:../main.c     **** uint8_t CAN_new_meassage = 0; // if 1 recived can data
 114:../main.c     **** uint8_t CAN_no_com_counter = 0;
 115:../main.c     **** // distacne vaule back over can
 116:../main.c     **** int distance_180deg_ele_count = 0;
 117:../main.c     **** float Speed_act = 0;
 118:../main.c     **** float distance = 0;
 119:../main.c     **** 
 120:../main.c     **** volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
 121:../main.c     **** volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which 
 122:../main.c     **** 
 123:../main.c     **** float angle_ab;
 124:../main.c     **** float angle_ab_rad;
 125:../main.c     **** float amplitude_ab;
 126:../main.c     **** 
 127:../main.c     **** float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
 128:../main.c     **** float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I
 129:../main.c     **** 
 130:../main.c     **** //float amp_limit_SVM_app = 2500;  Bo
 131:../main.c     **** 
 132:../main.c     **** // scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
 133:../main.c     **** float scaling_factor = 135;
 134:../main.c     **** float amplitude_corrected;
 135:../main.c     **** 
 136:../main.c     **** 
 137:../main.c     **** // Counter for calculation function -> only use a multiple of the SVM Interrupt
 138:../main.c     **** volatile uint8_t count = 0;
 139:../main.c     **** 
 140:../main.c     **** // Angle correction factor to align Current to Hall Sensor vuales form 14/04
 141:../main.c     **** float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
 142:../main.c     **** float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction
 143:../main.c     **** 
 144:../main.c     **** //################ PI
 145:../main.c     **** // PID Controller declaration for Id and Iq component
 146:../main.c     **** typedef struct{
 147:../main.c     **** 	float P,I,D;
 148:../main.c     **** 	float MaxLimit, MinLimit;
 149:../main.c     **** 	float Output;
 150:../main.c     **** 	float Deviation_old, Deviation_old2;
 151:../main.c     **** 	float Output_z;
 152:../main.c     **** }PID_param;
 153:../main.c     **** 
 154:../main.c     **** //Vuales 14/04 mit maurzio
 155:../main.c     **** //PID_param omegaq = {.P = 0.004, .I = 0.004, .D = 0.0, .MaxLimit =  0.5, .MinLimit = -0.5, .Output
 156:../main.c     **** //PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 157:../main.c     **** //PID_param Id_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output
 158:../main.c     **** 
 159:../main.c     **** //PID_param Iq_param = {.P = 0.50, .I = 424.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Outpu
 160:../main.c     **** //PID_param Id_param = {.P = 0.50, .I = 424.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Outpu
 161:../main.c     **** PID_param Iq_param = {.P = 0.28, .I = 232.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output 
 162:../main.c     **** PID_param Id_param = {.P = 0.28, .I = 232.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output 
 163:../main.c     **** PID_param omega_param = {.P = 0.3979, .I = 0.1901, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Outpu
 164:../main.c     **** 
 165:../main.c     **** // for motro 1
 166:../main.c     **** PID_param T_param_1 = {.P = 0.005, .I = 0.01, .D = 0.0, .MaxLimit =  1.5, .MinLimit = -1.5, .Output
 167:../main.c     **** 
 168:../main.c     **** float PID_Controller(float,float,PID_param *param);
 169:../main.c     **** 
 170:../main.c     **** uint8_t falg_speed_not_new = 0;
 171:../main.c     **** //########################
 172:../main.c     **** // MAIN
 173:../main.c     **** //########################
 174:../main.c     **** 
 175:../main.c     **** int main(void)
 176:../main.c     **** {
 701              	 .loc 4 176 0
 702              	 .cfi_startproc
 703              	 
 704              	 
 705 0000 80B5     	 push {r7,lr}
 706              	.LCFI33:
 707              	 .cfi_def_cfa_offset 8
 708              	 .cfi_offset 7,-8
 709              	 .cfi_offset 14,-4
 710 0002 86B0     	 sub sp,sp,#24
 711              	.LCFI34:
 712              	 .cfi_def_cfa_offset 32
 713 0004 04AF     	 add r7,sp,#16
 714              	.LCFI35:
 715              	 .cfi_def_cfa 7,16
 177:../main.c     ****   DAVE_STATUS_t status;
 178:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 716              	 .loc 4 178 0
 717 0006 FFF7FEFF 	 bl DAVE_Init
 718 000a 0346     	 mov r3,r0
 719 000c FB71     	 strb r3,[r7,#7]
 179:../main.c     **** 
 180:../main.c     ****   Hall_init();
 720              	 .loc 4 180 0
 721 000e FFF7FEFF 	 bl Hall_init
 181:../main.c     **** 
 182:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 722              	 .loc 4 182 0
 723 0012 FB79     	 ldrb r3,[r7,#7]
 724 0014 002B     	 cmp r3,#0
 725 0016 00D0     	 beq .L10
 726              	.L11:
 183:../main.c     ****   {
 184:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 185:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 186:../main.c     **** 
 187:../main.c     ****     while(1U)
 188:../main.c     ****     {
 189:../main.c     **** 
 190:../main.c     ****     }
 727              	 .loc 4 190 0 discriminator 1
 728 0018 FEE7     	 b .L11
 729              	.L10:
 191:../main.c     ****   }
 192:../main.c     **** 
 193:../main.c     ****   //Initialization of CAN
 194:../main.c     ****   	CAN_NODE_STATUS_t init_status;
 195:../main.c     ****   	init_status = CAN_NODE_Init(&CAN_NODE_0);
 730              	 .loc 4 195 0
 731 001a 1248     	 ldr r0,.L14
 732 001c FFF7FEFF 	 bl CAN_NODE_Init
 733 0020 0346     	 mov r3,r0
 734 0022 BB71     	 strb r3,[r7,#6]
 196:../main.c     **** 
 197:../main.c     ****   	if (init_status != CAN_NODE_STATUS_SUCCESS) {
 198:../main.c     ****   		XMC_DEBUG("CAN initialization failed\n");
 199:../main.c     ****   	}
 200:../main.c     **** 
 201:../main.c     ****   if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
 202:../main.c     **** 	  while(1U)
 203:../main.c     **** 	      {
 204:../main.c     **** 		//  printf("MOTOR_ON_ROVER number false");
 205:../main.c     **** 	      }
 206:../main.c     ****   }
 207:../main.c     **** 
 208:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 209:../main.c     ****   while(1U)
 210:../main.c     ****   {
 211:../main.c     **** 	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 735              	 .loc 4 211 0
 736 0024 1048     	 ldr r0,.L14+4
 737 0026 FFF7FEFF 	 bl PWM_SVM_Start
 738              	.L13:
 212:../main.c     **** 		  while(1U)
 213:../main.c     **** 		    {
 214:../main.c     **** 			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 739              	 .loc 4 214 0
 740 002a 104B     	 ldr r3,.L14+8
 741 002c 1B78     	 ldrb r3,[r3]
 742 002e DBB2     	 uxtb r3,r3
 743 0030 032B     	 cmp r3,#3
 744 0032 16D9     	 bls .L12
 215:../main.c     **** 			  {
 216:../main.c     **** 				  count=0;
 745              	 .loc 4 216 0
 746 0034 0D4B     	 ldr r3,.L14+8
 747 0036 0022     	 movs r2,#0
 748 0038 1A70     	 strb r2,[r3]
 217:../main.c     **** 				  Calculation();
 749              	 .loc 4 217 0
 750 003a FFF7FEFF 	 bl Calculation
 218:../main.c     **** 
 219:../main.c     **** 				  f_rec_data(omega_mech_rps	,omega_mech_rps_ref,&omega_mech_rps_ref,2,4,10,0.6);
 751              	 .loc 4 219 0
 752 003e 0C4B     	 ldr r3,.L14+12
 753 0040 1968     	 ldr r1,[r3]
 754 0042 0C4B     	 ldr r3,.L14+16
 755 0044 1A68     	 ldr r2,[r3]
 756 0046 4FF08143 	 mov r3,#1082130432
 757 004a 0093     	 str r3,[sp]
 758 004c 0A23     	 movs r3,#10
 759 004e 0193     	 str r3,[sp,#4]
 760 0050 094B     	 ldr r3,.L14+20
 761 0052 0293     	 str r3,[sp,#8]
 762 0054 0846     	 mov r0,r1
 763 0056 1146     	 mov r1,r2
 764 0058 064A     	 ldr r2,.L14+16
 765 005a 4FF08043 	 mov r3,#1073741824
 766 005e FFF7FEFF 	 bl f_rec_data
 767              	.L12:
 220:../main.c     **** 			  }
 221:../main.c     **** 		    }
 768              	 .loc 4 221 0
 769 0062 E2E7     	 b .L13
 770              	.L15:
 771              	 .align 2
 772              	.L14:
 773 0064 00000000 	 .word CAN_NODE_0
 774 0068 00000000 	 .word PWM_SVM_0
 775 006c 00000000 	 .word count
 776 0070 00000000 	 .word omega_mech_rps
 777 0074 00000000 	 .word omega_mech_rps_ref
 778 0078 9A99193F 	 .word 1058642330
 779              	 .cfi_endproc
 780              	.LFE473:
 782              	 .section .text.CAN0_1_IRQHandler,"ax",%progbits
 783              	 .align 2
 784              	 .global CAN0_1_IRQHandler
 785              	 .thumb
 786              	 .thumb_func
 788              	CAN0_1_IRQHandler:
 789              	.LFB474:
 222:../main.c     ****   }
 223:../main.c     **** }
 224:../main.c     **** 
 225:../main.c     **** 
 226:../main.c     **** //########################
 227:../main.c     **** // INTERRUPTS
 228:../main.c     **** //########################
 229:../main.c     **** 
 230:../main.c     **** // CAN Communication
 231:../main.c     **** void CAN_RX_MO2_ISR(void){
 790              	 .loc 4 231 0
 791              	 .cfi_startproc
 792              	 
 793              	 
 794 0000 80B5     	 push {r7,lr}
 795              	.LCFI36:
 796              	 .cfi_def_cfa_offset 8
 797              	 .cfi_offset 7,-8
 798              	 .cfi_offset 14,-4
 799 0002 84B0     	 sub sp,sp,#16
 800              	.LCFI37:
 801              	 .cfi_def_cfa_offset 24
 802 0004 00AF     	 add r7,sp,#0
 803              	.LCFI38:
 804              	 .cfi_def_cfa_register 7
 232:../main.c     **** 		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
 805              	 .loc 4 232 0
 806 0006 384B     	 ldr r3,.L27
 807 0008 1B69     	 ldr r3,[r3,#16]
 808 000a 1B68     	 ldr r3,[r3]
 809 000c BB60     	 str r3,[r7,#8]
 233:../main.c     **** 		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
 810              	 .loc 4 233 0
 811 000e 364B     	 ldr r3,.L27
 812 0010 1B69     	 ldr r3,[r3,#16]
 813 0012 1846     	 mov r0,r3
 814 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 234:../main.c     **** 
 235:../main.c     **** 		uint8_t data_r[8];
 236:../main.c     **** 		 int i;
 237:../main.c     **** 		 for(i = 0 ; i < 8 ; i ++){
 815              	 .loc 4 237 0
 816 0018 0023     	 movs r3,#0
 817 001a FB60     	 str r3,[r7,#12]
 818 001c 0CE0     	 b .L17
 819              	.L18:
 238:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 820              	 .loc 4 238 0 discriminator 3
 821 001e BA68     	 ldr r2,[r7,#8]
 822 0020 FB68     	 ldr r3,[r7,#12]
 823 0022 1344     	 add r3,r3,r2
 824 0024 1033     	 adds r3,r3,#16
 825 0026 1978     	 ldrb r1,[r3]
 826 0028 3A46     	 mov r2,r7
 827 002a FB68     	 ldr r3,[r7,#12]
 828 002c 1344     	 add r3,r3,r2
 829 002e 0A46     	 mov r2,r1
 830 0030 1A70     	 strb r2,[r3]
 237:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 831              	 .loc 4 237 0 discriminator 3
 832 0032 FB68     	 ldr r3,[r7,#12]
 833 0034 0133     	 adds r3,r3,#1
 834 0036 FB60     	 str r3,[r7,#12]
 835              	.L17:
 237:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 836              	 .loc 4 237 0 is_stmt 0 discriminator 1
 837 0038 FB68     	 ldr r3,[r7,#12]
 838 003a 072B     	 cmp r3,#7
 839 003c EFDD     	 ble .L18
 239:../main.c     **** 		 }
 240:../main.c     **** 
 241:../main.c     **** 		 for(i = 0 ; i < 4 ; i ++){
 840              	 .loc 4 241 0 is_stmt 1
 841 003e 0023     	 movs r3,#0
 842 0040 FB60     	 str r3,[r7,#12]
 843 0042 1AE0     	 b .L19
 844              	.L20:
 242:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 845              	 .loc 4 242 0 discriminator 3
 846 0044 FB68     	 ldr r3,[r7,#12]
 847 0046 5B00     	 lsls r3,r3,#1
 848 0048 0133     	 adds r3,r3,#1
 849 004a 07F11002 	 add r2,r7,#16
 850 004e 1344     	 add r3,r3,r2
 851 0050 13F8103C 	 ldrb r3,[r3,#-16]
 852 0054 1B02     	 lsls r3,r3,#8
 853 0056 9AB2     	 uxth r2,r3
 854 0058 FB68     	 ldr r3,[r7,#12]
 855 005a 5B00     	 lsls r3,r3,#1
 856 005c 07F11001 	 add r1,r7,#16
 857 0060 0B44     	 add r3,r3,r1
 858 0062 13F8103C 	 ldrb r3,[r3,#-16]
 859 0066 9BB2     	 uxth r3,r3
 860 0068 1343     	 orrs r3,r3,r2
 861 006a 99B2     	 uxth r1,r3
 862 006c 1F4A     	 ldr r2,.L27+4
 863 006e FB68     	 ldr r3,[r7,#12]
 864 0070 22F81310 	 strh r1,[r2,r3,lsl#1]
 241:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 865              	 .loc 4 241 0 discriminator 3
 866 0074 FB68     	 ldr r3,[r7,#12]
 867 0076 0133     	 adds r3,r3,#1
 868 0078 FB60     	 str r3,[r7,#12]
 869              	.L19:
 241:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 870              	 .loc 4 241 0 is_stmt 0 discriminator 1
 871 007a FB68     	 ldr r3,[r7,#12]
 872 007c 032B     	 cmp r3,#3
 873 007e E1DD     	 ble .L20
 243:../main.c     **** 			 }
 244:../main.c     **** 
 245:../main.c     **** 		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 874              	 .loc 4 245 0 is_stmt 1
 875 0080 1A4B     	 ldr r3,.L27+4
 876 0082 DB88     	 ldrh r3,[r3,#6]
 877 0084 1BB2     	 sxth r3,r3
 878 0086 07EE903A 	 fmsr s15,r3
 879 008a F8EEE77A 	 fsitos s15,s15
 880 008e 9FED187A 	 flds s14,.L27+8
 881 0092 C7EE877A 	 fdivs s15,s15,s14
 882 0096 174B     	 ldr r3,.L27+12
 883 0098 C3ED007A 	 fsts s15,[r3]
 246:../main.c     **** 
 247:../main.c     **** 		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6
 248:../main.c     **** 
 249:../main.c     **** 		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 884              	 .loc 4 249 0
 885 009c 154B     	 ldr r3,.L27+12
 886 009e D3ED007A 	 flds s15,[r3]
 887 00a2 B0EE007A 	 fconsts s14,#0
 888 00a6 F4EEC77A 	 fcmpes s15,s14
 889 00aa F1EE10FA 	 fmstat
 890 00ae 03DD     	 ble .L21
 891              	 .loc 4 249 0 is_stmt 0 discriminator 1
 892 00b0 104B     	 ldr r3,.L27+12
 893 00b2 4FF08042 	 mov r2,#1073741824
 894 00b6 1A60     	 str r2,[r3]
 895              	.L21:
 250:../main.c     **** 		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 896              	 .loc 4 250 0 is_stmt 1
 897 00b8 0E4B     	 ldr r3,.L27+12
 898 00ba D3ED007A 	 flds s15,[r3]
 899 00be B8EE007A 	 fconsts s14,#128
 900 00c2 F4EEC77A 	 fcmpes s15,s14
 901 00c6 F1EE10FA 	 fmstat
 902 00ca 03D5     	 bpl .L23
 903              	 .loc 4 250 0 is_stmt 0 discriminator 1
 904 00cc 094B     	 ldr r3,.L27+12
 905 00ce 4FF04042 	 mov r2,#-1073741824
 906 00d2 1A60     	 str r2,[r3]
 907              	.L23:
 251:../main.c     **** 
 252:../main.c     **** 		CAN_new_meassage = 1;
 908              	 .loc 4 252 0 is_stmt 1
 909 00d4 084B     	 ldr r3,.L27+16
 910 00d6 0122     	 movs r2,#1
 911 00d8 1A70     	 strb r2,[r3]
 253:../main.c     **** 		CAN_no_com_counter = 0;
 912              	 .loc 4 253 0
 913 00da 084B     	 ldr r3,.L27+20
 914 00dc 0022     	 movs r2,#0
 915 00de 1A70     	 strb r2,[r3]
 254:../main.c     **** }
 916              	 .loc 4 254 0
 917 00e0 1037     	 adds r7,r7,#16
 918              	.LCFI39:
 919              	 .cfi_def_cfa_offset 8
 920 00e2 BD46     	 mov sp,r7
 921              	.LCFI40:
 922              	 .cfi_def_cfa_register 13
 923              	 
 924 00e4 80BD     	 pop {r7,pc}
 925              	.L28:
 926 00e6 00BF     	 .align 2
 927              	.L27:
 928 00e8 00000000 	 .word CAN_NODE_0
 929 00ec 00000000 	 .word Speeds_int16_r
 930 00f0 00007A44 	 .word 1148846080
 931 00f4 00000000 	 .word CAN_speed_ref
 932 00f8 00000000 	 .word CAN_new_meassage
 933 00fc 00000000 	 .word CAN_no_com_counter
 934              	 .cfi_endproc
 935              	.LFE474:
 937              	 .section .text.CAN0_0_IRQHandler,"ax",%progbits
 938              	 .align 2
 939              	 .global CAN0_0_IRQHandler
 940              	 .thumb
 941              	 .thumb_func
 943              	CAN0_0_IRQHandler:
 944              	.LFB475:
 255:../main.c     **** 
 256:../main.c     **** //CAN RX reste distance
 257:../main.c     **** void CAN_RX_MO7_ISR(void){
 945              	 .loc 4 257 0
 946              	 .cfi_startproc
 947              	 
 948              	 
 949 0000 80B5     	 push {r7,lr}
 950              	.LCFI41:
 951              	 .cfi_def_cfa_offset 8
 952              	 .cfi_offset 7,-8
 953              	 .cfi_offset 14,-4
 954 0002 84B0     	 sub sp,sp,#16
 955              	.LCFI42:
 956              	 .cfi_def_cfa_offset 24
 957 0004 00AF     	 add r7,sp,#0
 958              	.LCFI43:
 959              	 .cfi_def_cfa_register 7
 258:../main.c     **** 	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 960              	 .loc 4 258 0
 961 0006 124B     	 ldr r3,.L33
 962 0008 5B6A     	 ldr r3,[r3,#36]
 963 000a 1B68     	 ldr r3,[r3]
 964 000c BB60     	 str r3,[r7,#8]
 259:../main.c     **** 	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 965              	 .loc 4 259 0
 966 000e 104B     	 ldr r3,.L33
 967 0010 5B6A     	 ldr r3,[r3,#36]
 968 0012 1846     	 mov r0,r3
 969 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 260:../main.c     **** 
 261:../main.c     **** 	uint8_t data_r[4];
 262:../main.c     **** 	 int i;
 263:../main.c     **** 	 for(i = 0 ; i < 4 ; i ++){
 970              	 .loc 4 263 0
 971 0018 0023     	 movs r3,#0
 972 001a FB60     	 str r3,[r7,#12]
 973 001c 0CE0     	 b .L30
 974              	.L31:
 264:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 975              	 .loc 4 264 0 discriminator 3
 976 001e BA68     	 ldr r2,[r7,#8]
 977 0020 FB68     	 ldr r3,[r7,#12]
 978 0022 1344     	 add r3,r3,r2
 979 0024 1033     	 adds r3,r3,#16
 980 0026 1978     	 ldrb r1,[r3]
 981 0028 3A1D     	 adds r2,r7,#4
 982 002a FB68     	 ldr r3,[r7,#12]
 983 002c 1344     	 add r3,r3,r2
 984 002e 0A46     	 mov r2,r1
 985 0030 1A70     	 strb r2,[r3]
 263:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 986              	 .loc 4 263 0 discriminator 3
 987 0032 FB68     	 ldr r3,[r7,#12]
 988 0034 0133     	 adds r3,r3,#1
 989 0036 FB60     	 str r3,[r7,#12]
 990              	.L30:
 263:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 991              	 .loc 4 263 0 is_stmt 0 discriminator 1
 992 0038 FB68     	 ldr r3,[r7,#12]
 993 003a 032B     	 cmp r3,#3
 994 003c EFDD     	 ble .L31
 265:../main.c     **** 	 }
 266:../main.c     **** 
 267:../main.c     **** 	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 995              	 .loc 4 267 0 is_stmt 1
 996 003e FB79     	 ldrb r3,[r7,#7]
 997 0040 012B     	 cmp r3,#1
 998 0042 02D1     	 bne .L29
 999              	 .loc 4 267 0 is_stmt 0 discriminator 1
 1000 0044 034B     	 ldr r3,.L33+4
 1001 0046 0022     	 movs r2,#0
 1002 0048 1A60     	 str r2,[r3]
 1003              	.L29:
 268:../main.c     **** }
 1004              	 .loc 4 268 0 is_stmt 1
 1005 004a 1037     	 adds r7,r7,#16
 1006              	.LCFI44:
 1007              	 .cfi_def_cfa_offset 8
 1008 004c BD46     	 mov sp,r7
 1009              	.LCFI45:
 1010              	 .cfi_def_cfa_register 13
 1011              	 
 1012 004e 80BD     	 pop {r7,pc}
 1013              	.L34:
 1014              	 .align 2
 1015              	.L33:
 1016 0050 00000000 	 .word CAN_NODE_0
 1017 0054 00000000 	 .word distance_180deg_ele_count
 1018              	 .cfi_endproc
 1019              	.LFE475:
 1021              	 .global __aeabi_f2d
 1022              	 .global __aeabi_dmul
 1023              	 .global __aeabi_ddiv
 1024              	 .global __aeabi_d2f
 1025              	 .global __aeabi_dadd
 1026              	 .section .text.CCU43_0_IRQHandler,"ax",%progbits
 1027              	 .align 2
 1028              	 .global CCU43_0_IRQHandler
 1029              	 .thumb
 1030              	 .thumb_func
 1032              	CCU43_0_IRQHandler:
 1033              	.LFB476:
 269:../main.c     **** 
 270:../main.c     **** void CAN_TX_ISR(void){
 1034              	 .loc 4 270 0
 1035              	 .cfi_startproc
 1036              	 
 1037              	 
 1038 0000 80B5     	 push {r7,lr}
 1039              	.LCFI46:
 1040              	 .cfi_def_cfa_offset 8
 1041              	 .cfi_offset 7,-8
 1042              	 .cfi_offset 14,-4
 1043 0002 86B0     	 sub sp,sp,#24
 1044              	.LCFI47:
 1045              	 .cfi_def_cfa_offset 32
 1046 0004 00AF     	 add r7,sp,#0
 1047              	.LCFI48:
 1048              	 .cfi_def_cfa_register 7
 271:../main.c     **** 	int16_t Inverter_state[4] = {0};
 1049              	 .loc 4 271 0
 1050 0006 0023     	 movs r3,#0
 1051 0008 FB60     	 str r3,[r7,#12]
 1052 000a 0023     	 movs r3,#0
 1053 000c 3B61     	 str r3,[r7,#16]
 272:../main.c     **** 
 273:../main.c     **** 	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 1054              	 .loc 4 273 0
 1055 000e 0323     	 movs r3,#3
 1056 0010 BB81     	 strh r3,[r7,#12]
 274:../main.c     **** 
 275:../main.c     **** 	if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
 1057              	 .loc 4 275 0
 1058 0012 4D4B     	 ldr r3,.L38+16
 1059 0014 1B78     	 ldrb r3,[r3]
 1060 0016 FA2B     	 cmp r3,#250
 1061 0018 02D9     	 bls .L36
 1062              	 .loc 4 275 0 is_stmt 0 discriminator 1
 1063 001a 0023     	 movs r3,#0
 1064 001c BB81     	 strh r3,[r7,#12]
 1065 001e 01E0     	 b .L37
 1066              	.L36:
 276:../main.c     **** 	else Inverter_state[1] = 1;
 1067              	 .loc 4 276 0 is_stmt 1
 1068 0020 0123     	 movs r3,#1
 1069 0022 FB81     	 strh r3,[r7,#14]
 1070              	.L37:
 277:../main.c     **** 
 278:../main.c     **** 	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 1071              	 .loc 4 278 0
 1072 0024 494B     	 ldr r3,.L38+20
 1073 0026 1B68     	 ldr r3,[r3]
 1074 0028 1846     	 mov r0,r3
 1075 002a FFF7FEFF 	 bl __aeabi_f2d
 1076 002e 0246     	 mov r2,r0
 1077 0030 0B46     	 mov r3,r1
 1078 0032 1046     	 mov r0,r2
 1079 0034 1946     	 mov r1,r3
 1080 0036 40A3     	 adr r3,.L38
 1081 0038 D3E90023 	 ldrd r2,[r3]
 1082 003c FFF7FEFF 	 bl __aeabi_dmul
 1083 0040 0246     	 mov r2,r0
 1084 0042 0B46     	 mov r3,r1
 1085 0044 1046     	 mov r0,r2
 1086 0046 1946     	 mov r1,r3
 1087 0048 4FF00002 	 mov r2,#0
 1088 004c 404B     	 ldr r3,.L38+24
 1089 004e FFF7FEFF 	 bl __aeabi_ddiv
 1090 0052 0246     	 mov r2,r0
 1091 0054 0B46     	 mov r3,r1
 1092 0056 1046     	 mov r0,r2
 1093 0058 1946     	 mov r1,r3
 1094 005a FFF7FEFF 	 bl __aeabi_d2f
 1095 005e 0246     	 mov r2,r0
 1096 0060 3C4B     	 ldr r3,.L38+28
 1097 0062 1A60     	 str r2,[r3]
 279:../main.c     **** 	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
 280:../main.c     **** 	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 1098              	 .loc 4 280 0
 1099 0064 3B4B     	 ldr r3,.L38+28
 1100 0066 D3ED007A 	 flds s15,[r3]
 1101 006a 9FED3B7A 	 flds s14,.L38+32
 1102 006e 67EE877A 	 fmuls s15,s15,s14
 1103 0072 FDEEE77A 	 ftosizs s15,s15
 1104 0076 C7ED017A 	 fsts s15,[r7,#4]
 1105 007a BB88     	 ldrh r3,[r7,#4]
 1106 007c 9BB2     	 uxth r3,r3
 1107 007e 3B82     	 strh r3,[r7,#16]
 281:../main.c     **** 
 282:../main.c     **** 	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 1108              	 .loc 4 282 0
 1109 0080 364B     	 ldr r3,.L38+36
 1110 0082 1B68     	 ldr r3,[r3]
 1111 0084 07EE903A 	 fmsr s15,r3
 1112 0088 F8EEE77A 	 fsitos s15,s15
 1113 008c B0EE007A 	 fconsts s14,#0
 1114 0090 C7EE877A 	 fdivs s15,s15,s14
 1115 0094 B2EE067A 	 fconsts s14,#38
 1116 0098 C7EE877A 	 fdivs s15,s15,s14
 1117 009c 17EE900A 	 fmrs r0,s15
 1118 00a0 FFF7FEFF 	 bl __aeabi_f2d
 1119 00a4 0246     	 mov r2,r0
 1120 00a6 0B46     	 mov r3,r1
 1121 00a8 1046     	 mov r0,r2
 1122 00aa 1946     	 mov r1,r3
 1123 00ac 24A3     	 adr r3,.L38+8
 1124 00ae D3E90023 	 ldrd r2,[r3]
 1125 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1126 00b6 0246     	 mov r2,r0
 1127 00b8 0B46     	 mov r3,r1
 1128 00ba 1046     	 mov r0,r2
 1129 00bc 1946     	 mov r1,r3
 1130 00be FFF7FEFF 	 bl __aeabi_dadd
 1131 00c2 0246     	 mov r2,r0
 1132 00c4 0B46     	 mov r3,r1
 1133 00c6 1046     	 mov r0,r2
 1134 00c8 1946     	 mov r1,r3
 1135 00ca 1BA3     	 adr r3,.L38
 1136 00cc D3E90023 	 ldrd r2,[r3]
 1137 00d0 FFF7FEFF 	 bl __aeabi_dmul
 1138 00d4 0246     	 mov r2,r0
 1139 00d6 0B46     	 mov r3,r1
 1140 00d8 1046     	 mov r0,r2
 1141 00da 1946     	 mov r1,r3
 1142 00dc FFF7FEFF 	 bl __aeabi_d2f
 1143 00e0 0246     	 mov r2,r0
 1144 00e2 1F4B     	 ldr r3,.L38+40
 1145 00e4 1A60     	 str r2,[r3]
 283:../main.c     **** 	if(MOTOR_NUM == 6) distance = -distance;
 284:../main.c     **** 	Inverter_state[3] = distance * 1000; // to mm
 1146              	 .loc 4 284 0
 1147 00e6 1E4B     	 ldr r3,.L38+40
 1148 00e8 D3ED007A 	 flds s15,[r3]
 1149 00ec 9FED1A7A 	 flds s14,.L38+32
 1150 00f0 67EE877A 	 fmuls s15,s15,s14
 1151 00f4 FDEEE77A 	 ftosizs s15,s15
 1152 00f8 C7ED017A 	 fsts s15,[r7,#4]
 1153 00fc BB88     	 ldrh r3,[r7,#4]
 1154 00fe 9BB2     	 uxth r3,r3
 1155 0100 7B82     	 strh r3,[r7,#18]
 285:../main.c     **** 
 286:../main.c     **** 	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 1156              	 .loc 4 286 0
 1157 0102 0523     	 movs r3,#5
 1158 0104 FB75     	 strb r3,[r7,#23]
 287:../main.c     **** 	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 1159              	 .loc 4 287 0
 1160 0106 FB7D     	 ldrb r3,[r7,#23]
 1161 0108 164A     	 ldr r2,.L38+44
 1162 010a 0233     	 adds r3,r3,#2
 1163 010c 9B00     	 lsls r3,r3,#2
 1164 010e 1344     	 add r3,r3,r2
 1165 0110 5A68     	 ldr r2,[r3,#4]
 1166 0112 07F10C03 	 add r3,r7,#12
 1167 0116 1046     	 mov r0,r2
 1168 0118 1946     	 mov r1,r3
 1169 011a FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
 288:../main.c     **** 	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 1170              	 .loc 4 288 0
 1171 011e FB7D     	 ldrb r3,[r7,#23]
 1172 0120 104A     	 ldr r2,.L38+44
 1173 0122 0233     	 adds r3,r3,#2
 1174 0124 9B00     	 lsls r3,r3,#2
 1175 0126 1344     	 add r3,r3,r2
 1176 0128 5B68     	 ldr r3,[r3,#4]
 1177 012a 1846     	 mov r0,r3
 1178 012c FFF7FEFF 	 bl CAN_NODE_MO_Transmit
 289:../main.c     **** }
 1179              	 .loc 4 289 0
 1180 0130 1837     	 adds r7,r7,#24
 1181              	.LCFI49:
 1182              	 .cfi_def_cfa_offset 8
 1183 0132 BD46     	 mov sp,r7
 1184              	.LCFI50:
 1185              	 .cfi_def_cfa_register 13
 1186              	 
 1187 0134 80BD     	 pop {r7,pc}
 1188              	.L39:
 1189 0136 00BF     	 .align 3
 1190              	.L38:
 1191 0138 48E17A14 	 .word 343597384
 1192 013c AE47B13F 	 .word 1068582830
 1193 0140 F1D4C853 	 .word 1405670641
 1194 0144 FB210940 	 .word 1074340347
 1195 0148 00000000 	 .word CAN_no_com_counter
 1196 014c 00000000 	 .word omega_ele_rads
 1197 0150 00002640 	 .word 1076232192
 1198 0154 00000000 	 .word Speed_act
 1199 0158 00007A44 	 .word 1148846080
 1200 015c 00000000 	 .word distance_180deg_ele_count
 1201 0160 00000000 	 .word distance
 1202 0164 00000000 	 .word CAN_NODE_0
 1203              	 .cfi_endproc
 1204              	.LFE476:
 1206              	 .section .text.CCU43_3_IRQHandler,"ax",%progbits
 1207              	 .align 2
 1208              	 .global CCU43_3_IRQHandler
 1209              	 .thumb
 1210              	 .thumb_func
 1212              	CCU43_3_IRQHandler:
 1213              	.LFB477:
 290:../main.c     **** 
 291:../main.c     **** // 100us Timer for speed measurement
 292:../main.c     **** void TimeCounterISR(void){
 1214              	 .loc 4 292 0
 1215              	 .cfi_startproc
 1216              	 
 1217              	 
 1218              	 
 1219 0000 80B4     	 push {r7}
 1220              	.LCFI51:
 1221              	 .cfi_def_cfa_offset 4
 1222              	 .cfi_offset 7,-4
 1223 0002 00AF     	 add r7,sp,#0
 1224              	.LCFI52:
 1225              	 .cfi_def_cfa_register 7
 293:../main.c     **** 	time_since_A ++;
 1226              	 .loc 4 293 0
 1227 0004 094B     	 ldr r3,.L41
 1228 0006 1B68     	 ldr r3,[r3]
 1229 0008 0133     	 adds r3,r3,#1
 1230 000a 084A     	 ldr r2,.L41
 1231 000c 1360     	 str r3,[r2]
 294:../main.c     **** 	time_since_B ++;
 1232              	 .loc 4 294 0
 1233 000e 084B     	 ldr r3,.L41+4
 1234 0010 1B68     	 ldr r3,[r3]
 1235 0012 0133     	 adds r3,r3,#1
 1236 0014 064A     	 ldr r2,.L41+4
 1237 0016 1360     	 str r3,[r2]
 295:../main.c     **** 	time_since_C ++;
 1238              	 .loc 4 295 0
 1239 0018 064B     	 ldr r3,.L41+8
 1240 001a 1B68     	 ldr r3,[r3]
 1241 001c 0133     	 adds r3,r3,#1
 1242 001e 054A     	 ldr r2,.L41+8
 1243 0020 1360     	 str r3,[r2]
 296:../main.c     **** }
 1244              	 .loc 4 296 0
 1245 0022 BD46     	 mov sp,r7
 1246              	.LCFI53:
 1247              	 .cfi_def_cfa_register 13
 1248              	 
 1249 0024 5DF8047B 	 ldr r7,[sp],#4
 1250              	.LCFI54:
 1251              	 .cfi_restore 7
 1252              	 .cfi_def_cfa_offset 0
 1253 0028 7047     	 bx lr
 1254              	.L42:
 1255 002a 00BF     	 .align 2
 1256              	.L41:
 1257 002c 00000000 	 .word time_since_A
 1258 0030 00000000 	 .word time_since_B
 1259 0034 00000000 	 .word time_since_C
 1260              	 .cfi_endproc
 1261              	.LFE477:
 1263              	 .section .text.ERU1_2_IRQHandler,"ax",%progbits
 1264              	 .align 2
 1265              	 .global ERU1_2_IRQHandler
 1266              	 .thumb
 1267              	 .thumb_func
 1269              	ERU1_2_IRQHandler:
 1270              	.LFB478:
 297:../main.c     **** 
 298:../main.c     **** // Hall Sensors
 299:../main.c     **** void HallSensor_A_ISR(void){
 1271              	 .loc 4 299 0
 1272              	 .cfi_startproc
 1273              	 
 1274              	 
 1275 0000 80B5     	 push {r7,lr}
 1276              	.LCFI55:
 1277              	 .cfi_def_cfa_offset 8
 1278              	 .cfi_offset 7,-8
 1279              	 .cfi_offset 14,-4
 1280 0002 00AF     	 add r7,sp,#0
 1281              	.LCFI56:
 1282              	 .cfi_def_cfa_register 7
 300:../main.c     **** 	HallSensor();
 1283              	 .loc 4 300 0
 1284 0004 FFF7FEFF 	 bl HallSensor
 301:../main.c     **** 	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
 1285              	 .loc 4 301 0
 1286 0008 114B     	 ldr r3,.L46
 1287 000a 1B68     	 ldr r3,[r3]
 1288 000c 114A     	 ldr r2,.L46+4
 1289 000e 1360     	 str r3,[r2]
 302:../main.c     **** 	time_since_A = 0;						// measurement of speed -> time between change of Hall A
 1290              	 .loc 4 302 0
 1291 0010 0F4B     	 ldr r3,.L46
 1292 0012 0022     	 movs r2,#0
 1293 0014 1A60     	 str r2,[r3]
 303:../main.c     **** 	last_Hall_trig = 'A';
 1294              	 .loc 4 303 0
 1295 0016 104B     	 ldr r3,.L46+8
 1296 0018 4122     	 movs r2,#65
 1297 001a 1A70     	 strb r2,[r3]
 304:../main.c     **** 
 305:../main.c     **** 	if(direction == 1 ) distance_180deg_ele_count ++;
 1298              	 .loc 4 305 0
 1299 001c 0F4B     	 ldr r3,.L46+12
 1300 001e 1B78     	 ldrb r3,[r3]
 1301 0020 DBB2     	 uxtb r3,r3
 1302 0022 5BB2     	 sxtb r3,r3
 1303 0024 012B     	 cmp r3,#1
 1304 0026 05D1     	 bne .L44
 1305              	 .loc 4 305 0 is_stmt 0 discriminator 1
 1306 0028 0D4B     	 ldr r3,.L46+16
 1307 002a 1B68     	 ldr r3,[r3]
 1308 002c 0133     	 adds r3,r3,#1
 1309 002e 0C4A     	 ldr r2,.L46+16
 1310 0030 1360     	 str r3,[r2]
 1311 0032 0BE0     	 b .L43
 1312              	.L44:
 306:../main.c     **** 	else if(direction == -1 ) distance_180deg_ele_count --;
 1313              	 .loc 4 306 0 is_stmt 1
 1314 0034 094B     	 ldr r3,.L46+12
 1315 0036 1B78     	 ldrb r3,[r3]
 1316 0038 DBB2     	 uxtb r3,r3
 1317 003a 5BB2     	 sxtb r3,r3
 1318 003c B3F1FF3F 	 cmp r3,#-1
 1319 0040 04D1     	 bne .L43
 1320              	 .loc 4 306 0 is_stmt 0 discriminator 1
 1321 0042 074B     	 ldr r3,.L46+16
 1322 0044 1B68     	 ldr r3,[r3]
 1323 0046 013B     	 subs r3,r3,#1
 1324 0048 054A     	 ldr r2,.L46+16
 1325 004a 1360     	 str r3,[r2]
 1326              	.L43:
 307:../main.c     **** }
 1327              	 .loc 4 307 0 is_stmt 1
 1328 004c 80BD     	 pop {r7,pc}
 1329              	.L47:
 1330 004e 00BF     	 .align 2
 1331              	.L46:
 1332 0050 00000000 	 .word time_since_A
 1333 0054 00000000 	 .word time_180deg
 1334 0058 00000000 	 .word last_Hall_trig
 1335 005c 00000000 	 .word direction
 1336 0060 00000000 	 .word distance_180deg_ele_count
 1337              	 .cfi_endproc
 1338              	.LFE478:
 1340              	 .section .text.ERU1_0_IRQHandler,"ax",%progbits
 1341              	 .align 2
 1342              	 .global ERU1_0_IRQHandler
 1343              	 .thumb
 1344              	 .thumb_func
 1346              	ERU1_0_IRQHandler:
 1347              	.LFB479:
 308:../main.c     **** void HallSensor_B_ISR(void){
 1348              	 .loc 4 308 0
 1349              	 .cfi_startproc
 1350              	 
 1351              	 
 1352 0000 80B5     	 push {r7,lr}
 1353              	.LCFI57:
 1354              	 .cfi_def_cfa_offset 8
 1355              	 .cfi_offset 7,-8
 1356              	 .cfi_offset 14,-4
 1357 0002 00AF     	 add r7,sp,#0
 1358              	.LCFI58:
 1359              	 .cfi_def_cfa_register 7
 309:../main.c     **** 	HallSensor();
 1360              	 .loc 4 309 0
 1361 0004 FFF7FEFF 	 bl HallSensor
 310:../main.c     **** 	time_180deg = time_since_B;
 1362              	 .loc 4 310 0
 1363 0008 054B     	 ldr r3,.L49
 1364 000a 1B68     	 ldr r3,[r3]
 1365 000c 054A     	 ldr r2,.L49+4
 1366 000e 1360     	 str r3,[r2]
 311:../main.c     **** 	time_since_B = 0;
 1367              	 .loc 4 311 0
 1368 0010 034B     	 ldr r3,.L49
 1369 0012 0022     	 movs r2,#0
 1370 0014 1A60     	 str r2,[r3]
 312:../main.c     **** 	last_Hall_trig = 'B';
 1371              	 .loc 4 312 0
 1372 0016 044B     	 ldr r3,.L49+8
 1373 0018 4222     	 movs r2,#66
 1374 001a 1A70     	 strb r2,[r3]
 313:../main.c     **** }
 1375              	 .loc 4 313 0
 1376 001c 80BD     	 pop {r7,pc}
 1377              	.L50:
 1378 001e 00BF     	 .align 2
 1379              	.L49:
 1380 0020 00000000 	 .word time_since_B
 1381 0024 00000000 	 .word time_180deg
 1382 0028 00000000 	 .word last_Hall_trig
 1383              	 .cfi_endproc
 1384              	.LFE479:
 1386              	 .section .text.ERU1_3_IRQHandler,"ax",%progbits
 1387              	 .align 2
 1388              	 .global ERU1_3_IRQHandler
 1389              	 .thumb
 1390              	 .thumb_func
 1392              	ERU1_3_IRQHandler:
 1393              	.LFB480:
 314:../main.c     **** void HallSensor_C_ISR(void){
 1394              	 .loc 4 314 0
 1395              	 .cfi_startproc
 1396              	 
 1397              	 
 1398 0000 80B5     	 push {r7,lr}
 1399              	.LCFI59:
 1400              	 .cfi_def_cfa_offset 8
 1401              	 .cfi_offset 7,-8
 1402              	 .cfi_offset 14,-4
 1403 0002 00AF     	 add r7,sp,#0
 1404              	.LCFI60:
 1405              	 .cfi_def_cfa_register 7
 315:../main.c     **** 	HallSensor();
 1406              	 .loc 4 315 0
 1407 0004 FFF7FEFF 	 bl HallSensor
 316:../main.c     **** 	time_180deg = time_since_C;
 1408              	 .loc 4 316 0
 1409 0008 054B     	 ldr r3,.L52
 1410 000a 1B68     	 ldr r3,[r3]
 1411 000c 054A     	 ldr r2,.L52+4
 1412 000e 1360     	 str r3,[r2]
 317:../main.c     **** 	time_since_C = 0;
 1413              	 .loc 4 317 0
 1414 0010 034B     	 ldr r3,.L52
 1415 0012 0022     	 movs r2,#0
 1416 0014 1A60     	 str r2,[r3]
 318:../main.c     **** 	last_Hall_trig = 'C';
 1417              	 .loc 4 318 0
 1418 0016 044B     	 ldr r3,.L52+8
 1419 0018 4322     	 movs r2,#67
 1420 001a 1A70     	 strb r2,[r3]
 319:../main.c     **** }
 1421              	 .loc 4 319 0
 1422 001c 80BD     	 pop {r7,pc}
 1423              	.L53:
 1424 001e 00BF     	 .align 2
 1425              	.L52:
 1426 0020 00000000 	 .word time_since_C
 1427 0024 00000000 	 .word time_180deg
 1428 0028 00000000 	 .word last_Hall_trig
 1429              	 .cfi_endproc
 1430              	.LFE480:
 1432              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 1433              	 .align 2
 1434              	 .global CCU43_1_IRQHandler
 1435              	 .thumb
 1436              	 .thumb_func
 1438              	CCU43_1_IRQHandler:
 1439              	.LFB481:
 320:../main.c     **** 
 321:../main.c     **** /*
 322:../main.c     **** // Turn off driver at Overcurrent
 323:../main.c     **** void OverCurrent_U_ISR(void)
 324:../main.c     **** {
 325:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 326:../main.c     **** }
 327:../main.c     **** void OverCurrent_V_ISR(void)
 328:../main.c     **** {
 329:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 330:../main.c     **** }
 331:../main.c     **** void OverCurrent_W_ISR(void)
 332:../main.c     **** {
 333:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 334:../main.c     **** }
 335:../main.c     **** */
 336:../main.c     **** 
 337:../main.c     **** //ISR based on Timer_1 --> 100us time base
 338:../main.c     **** void ISR_INT1(void)
 339:../main.c     **** {
 1440              	 .loc 4 339 0
 1441              	 .cfi_startproc
 1442              	 
 1443              	 
 1444              	 
 1445 0000 80B4     	 push {r7}
 1446              	.LCFI61:
 1447              	 .cfi_def_cfa_offset 4
 1448              	 .cfi_offset 7,-4
 1449 0002 00AF     	 add r7,sp,#0
 1450              	.LCFI62:
 1451              	 .cfi_def_cfa_register 7
 340:../main.c     **** }
 1452              	 .loc 4 340 0
 1453 0004 BD46     	 mov sp,r7
 1454              	.LCFI63:
 1455              	 .cfi_def_cfa_register 13
 1456              	 
 1457 0006 5DF8047B 	 ldr r7,[sp],#4
 1458              	.LCFI64:
 1459              	 .cfi_restore 7
 1460              	 .cfi_def_cfa_offset 0
 1461 000a 7047     	 bx lr
 1462              	 .cfi_endproc
 1463              	.LFE481:
 1465              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 1466              	 .align 2
 1467              	 .global CCU80_3_IRQHandler
 1468              	 .thumb
 1469              	 .thumb_func
 1471              	CCU80_3_IRQHandler:
 1472              	.LFB482:
 341:../main.c     **** 
 342:../main.c     **** // ISR for Updating the SVM PWM -> 50us = 20kHz
 343:../main.c     **** void PeriodMatchInterruptHandler(void)
 344:../main.c     **** {
 1473              	 .loc 4 344 0
 1474              	 .cfi_startproc
 1475              	 
 1476              	 
 1477 0000 80B5     	 push {r7,lr}
 1478              	.LCFI65:
 1479              	 .cfi_def_cfa_offset 8
 1480              	 .cfi_offset 7,-8
 1481              	 .cfi_offset 14,-4
 1482 0002 82B0     	 sub sp,sp,#8
 1483              	.LCFI66:
 1484              	 .cfi_def_cfa_offset 16
 1485 0004 00AF     	 add r7,sp,#0
 1486              	.LCFI67:
 1487              	 .cfi_def_cfa_register 7
 345:../main.c     **** 	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 1488              	 .loc 4 345 0
 1489 0006 144B     	 ldr r3,.L57
 1490 0008 1B78     	 ldrb r3,[r3]
 1491 000a DBB2     	 uxtb r3,r3
 1492 000c 0133     	 adds r3,r3,#1
 1493 000e DAB2     	 uxtb r2,r3
 1494 0010 114B     	 ldr r3,.L57
 1495 0012 1A70     	 strb r2,[r3]
 346:../main.c     **** 	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 1496              	 .loc 4 346 0
 1497 0014 104B     	 ldr r3,.L57
 1498 0016 1B78     	 ldrb r3,[r3]
 1499 0018 DBB2     	 uxtb r3,r3
 1500 001a 012B     	 cmp r3,#1
 1501 001c 18D1     	 bne .L55
 347:../main.c     **** 		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_D
 1502              	 .loc 4 347 0
 1503 001e 0F4B     	 ldr r3,.L57+4
 1504 0020 D3ED007A 	 flds s15,[r3]
 1505 0024 FCEEE77A 	 ftouizs s15,s15
 1506 0028 C7ED017A 	 fsts s15,[r7,#4]
 1507 002c BB88     	 ldrh r3,[r7,#4]
 1508 002e 9AB2     	 uxth r2,r3
 1509 0030 0B4B     	 ldr r3,.L57+8
 1510 0032 D3ED007A 	 flds s15,[r3]
 1511 0036 FCEEE77A 	 ftouizs s15,s15
 1512 003a 17EE901A 	 fmrs r1,s15
 1513 003e 4BF20B63 	 movw r3,#46603
 1514 0042 03FB01F3 	 mul r3,r3,r1
 1515 0046 0748     	 ldr r0,.L57+12
 1516 0048 1146     	 mov r1,r2
 1517 004a 1A46     	 mov r2,r3
 1518 004c FFF7FEFF 	 bl PWM_SVM_SVMUpdate
 1519              	.L55:
 348:../main.c     **** 	}
 349:../main.c     **** }
 1520              	 .loc 4 349 0
 1521 0050 0837     	 adds r7,r7,#8
 1522              	.LCFI68:
 1523              	 .cfi_def_cfa_offset 8
 1524 0052 BD46     	 mov sp,r7
 1525              	.LCFI69:
 1526              	 .cfi_def_cfa_register 13
 1527              	 
 1528 0054 80BD     	 pop {r7,pc}
 1529              	.L58:
 1530 0056 00BF     	 .align 2
 1531              	.L57:
 1532 0058 00000000 	 .word count
 1533 005c 00000000 	 .word modulation_index_scaled
 1534 0060 00000000 	 .word angle_ab
 1535 0064 00000000 	 .word PWM_SVM_0
 1536              	 .cfi_endproc
 1537              	.LFE482:
 1539              	 .section .text.Hall_init,"ax",%progbits
 1540              	 .align 2
 1541              	 .global Hall_init
 1542              	 .thumb
 1543              	 .thumb_func
 1545              	Hall_init:
 1546              	.LFB483:
 350:../main.c     **** 
 351:../main.c     **** //########################
 352:../main.c     **** // FUNCTIONS
 353:../main.c     **** //########################
 354:../main.c     **** 
 355:../main.c     **** // Hall init -> readout of actual Hall pattern to determine the motor position
 356:../main.c     **** void Hall_init(void){
 1547              	 .loc 4 356 0
 1548              	 .cfi_startproc
 1549              	 
 1550              	 
 1551 0000 90B5     	 push {r4,r7,lr}
 1552              	.LCFI70:
 1553              	 .cfi_def_cfa_offset 12
 1554              	 .cfi_offset 4,-12
 1555              	 .cfi_offset 7,-8
 1556              	 .cfi_offset 14,-4
 1557 0002 83B0     	 sub sp,sp,#12
 1558              	.LCFI71:
 1559              	 .cfi_def_cfa_offset 24
 1560 0004 00AF     	 add r7,sp,#0
 1561              	.LCFI72:
 1562              	 .cfi_def_cfa_register 7
 357:../main.c     **** 
 358:../main.c     **** 	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinV
 1563              	 .loc 4 358 0
 1564 0006 2148     	 ldr r0,.L66
 1565 0008 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1566 000c 0346     	 mov r3,r0
 1567 000e DBB2     	 uxtb r3,r3
 1568 0010 5B00     	 lsls r3,r3,#1
 1569 0012 DCB2     	 uxtb r4,r3
 1570 0014 1E48     	 ldr r0,.L66+4
 1571 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1572 001a 0346     	 mov r3,r0
 1573 001c DBB2     	 uxtb r3,r3
 1574 001e 2343     	 orrs r3,r3,r4
 1575 0020 DBB2     	 uxtb r3,r3
 1576 0022 5B00     	 lsls r3,r3,#1
 1577 0024 DCB2     	 uxtb r4,r3
 1578 0026 1B48     	 ldr r0,.L66+8
 1579 0028 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1580 002c 0346     	 mov r3,r0
 1581 002e DBB2     	 uxtb r3,r3
 1582 0030 2343     	 orrs r3,r3,r4
 1583 0032 FB71     	 strb r3,[r7,#7]
 359:../main.c     **** 
 360:../main.c     **** 	 if(Hall_Initial == 0b100){sector = 0;}
 1584              	 .loc 4 360 0
 1585 0034 FB79     	 ldrb r3,[r7,#7]
 1586 0036 042B     	 cmp r3,#4
 1587 0038 03D1     	 bne .L60
 1588              	 .loc 4 360 0 is_stmt 0 discriminator 1
 1589 003a 174B     	 ldr r3,.L66+12
 1590 003c 0022     	 movs r2,#0
 1591 003e 1A70     	 strb r2,[r3]
 1592 0040 21E0     	 b .L59
 1593              	.L60:
 361:../main.c     **** 	 else if(Hall_Initial == 0b110){sector = 1;}
 1594              	 .loc 4 361 0 is_stmt 1
 1595 0042 FB79     	 ldrb r3,[r7,#7]
 1596 0044 062B     	 cmp r3,#6
 1597 0046 03D1     	 bne .L62
 1598              	 .loc 4 361 0 is_stmt 0 discriminator 1
 1599 0048 134B     	 ldr r3,.L66+12
 1600 004a 0122     	 movs r2,#1
 1601 004c 1A70     	 strb r2,[r3]
 1602 004e 1AE0     	 b .L59
 1603              	.L62:
 362:../main.c     **** 	 else if(Hall_Initial == 0b010){sector = 2;}
 1604              	 .loc 4 362 0 is_stmt 1
 1605 0050 FB79     	 ldrb r3,[r7,#7]
 1606 0052 022B     	 cmp r3,#2
 1607 0054 03D1     	 bne .L63
 1608              	 .loc 4 362 0 is_stmt 0 discriminator 1
 1609 0056 104B     	 ldr r3,.L66+12
 1610 0058 0222     	 movs r2,#2
 1611 005a 1A70     	 strb r2,[r3]
 1612 005c 13E0     	 b .L59
 1613              	.L63:
 363:../main.c     **** 	 else if(Hall_Initial == 0b011){sector = 3;}
 1614              	 .loc 4 363 0 is_stmt 1
 1615 005e FB79     	 ldrb r3,[r7,#7]
 1616 0060 032B     	 cmp r3,#3
 1617 0062 03D1     	 bne .L64
 1618              	 .loc 4 363 0 is_stmt 0 discriminator 1
 1619 0064 0C4B     	 ldr r3,.L66+12
 1620 0066 0322     	 movs r2,#3
 1621 0068 1A70     	 strb r2,[r3]
 1622 006a 0CE0     	 b .L59
 1623              	.L64:
 364:../main.c     **** 	 else if(Hall_Initial == 0b001){sector = 4;}
 1624              	 .loc 4 364 0 is_stmt 1
 1625 006c FB79     	 ldrb r3,[r7,#7]
 1626 006e 012B     	 cmp r3,#1
 1627 0070 03D1     	 bne .L65
 1628              	 .loc 4 364 0 is_stmt 0 discriminator 1
 1629 0072 094B     	 ldr r3,.L66+12
 1630 0074 0422     	 movs r2,#4
 1631 0076 1A70     	 strb r2,[r3]
 1632 0078 05E0     	 b .L59
 1633              	.L65:
 365:../main.c     **** 	 else if(Hall_Initial == 0b101){sector = 5;}
 1634              	 .loc 4 365 0 is_stmt 1
 1635 007a FB79     	 ldrb r3,[r7,#7]
 1636 007c 052B     	 cmp r3,#5
 1637 007e 02D1     	 bne .L59
 1638              	 .loc 4 365 0 is_stmt 0 discriminator 1
 1639 0080 054B     	 ldr r3,.L66+12
 1640 0082 0522     	 movs r2,#5
 1641 0084 1A70     	 strb r2,[r3]
 1642              	.L59:
 366:../main.c     **** }
 1643              	 .loc 4 366 0 is_stmt 1
 1644 0086 0C37     	 adds r7,r7,#12
 1645              	.LCFI73:
 1646              	 .cfi_def_cfa_offset 12
 1647 0088 BD46     	 mov sp,r7
 1648              	.LCFI74:
 1649              	 .cfi_def_cfa_register 13
 1650              	 
 1651 008a 90BD     	 pop {r4,r7,pc}
 1652              	.L67:
 1653              	 .align 2
 1654              	.L66:
 1655 008c 00000000 	 .word Hall_A_ISR
 1656 0090 00000000 	 .word Hall_B_ISR
 1657 0094 00000000 	 .word Hall_C_ISR
 1658 0098 00000000 	 .word sector
 1659              	 .cfi_endproc
 1660              	.LFE483:
 1662              	 .section .text.HallSensor,"ax",%progbits
 1663              	 .align 2
 1664              	 .global HallSensor
 1665              	 .thumb
 1666              	 .thumb_func
 1668              	HallSensor:
 1669              	.LFB484:
 367:../main.c     **** 
 368:../main.c     **** // Function to determine direction and current Sector
 369:../main.c     **** void HallSensor(void){
 1670              	 .loc 4 369 0
 1671              	 .cfi_startproc
 1672              	 
 1673              	 
 1674 0000 90B5     	 push {r4,r7,lr}
 1675              	.LCFI75:
 1676              	 .cfi_def_cfa_offset 12
 1677              	 .cfi_offset 4,-12
 1678              	 .cfi_offset 7,-8
 1679              	 .cfi_offset 14,-4
 1680 0002 83B0     	 sub sp,sp,#12
 1681              	.LCFI76:
 1682              	 .cfi_def_cfa_offset 24
 1683 0004 00AF     	 add r7,sp,#0
 1684              	.LCFI77:
 1685              	 .cfi_def_cfa_register 7
 370:../main.c     **** 	enc_val = enc_val << 3; //shift old values and make space for new ones
 1686              	 .loc 4 370 0
 1687 0006 2E4B     	 ldr r3,.L75
 1688 0008 1B88     	 ldrh r3,[r3]
 1689 000a 9BB2     	 uxth r3,r3
 1690 000c DB00     	 lsls r3,r3,#3
 1691 000e 9AB2     	 uxth r2,r3
 1692 0010 2B4B     	 ldr r3,.L75
 1693 0012 1A80     	 strh r2,[r3]
 371:../main.c     **** 	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(
 1694              	 .loc 4 371 0
 1695 0014 2B48     	 ldr r0,.L75+4
 1696 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1697 001a 0346     	 mov r3,r0
 1698 001c DBB2     	 uxtb r3,r3
 1699 001e 5B00     	 lsls r3,r3,#1
 1700 0020 DCB2     	 uxtb r4,r3
 1701 0022 2948     	 ldr r0,.L75+8
 1702 0024 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1703 0028 0346     	 mov r3,r0
 1704 002a DBB2     	 uxtb r3,r3
 1705 002c 2343     	 orrs r3,r3,r4
 1706 002e DBB2     	 uxtb r3,r3
 1707 0030 5B00     	 lsls r3,r3,#1
 1708 0032 DCB2     	 uxtb r4,r3
 1709 0034 2548     	 ldr r0,.L75+12
 1710 0036 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1711 003a 0346     	 mov r3,r0
 1712 003c DBB2     	 uxtb r3,r3
 1713 003e 2343     	 orrs r3,r3,r4
 1714 0040 FB71     	 strb r3,[r7,#7]
 372:../main.c     **** 	enc_val = enc_val | Hall_status; //read Sensor values and store them
 1715              	 .loc 4 372 0
 1716 0042 FB79     	 ldrb r3,[r7,#7]
 1717 0044 9AB2     	 uxth r2,r3
 1718 0046 1E4B     	 ldr r3,.L75
 1719 0048 1B88     	 ldrh r3,[r3]
 1720 004a 9BB2     	 uxth r3,r3
 1721 004c 1343     	 orrs r3,r3,r2
 1722 004e 9AB2     	 uxth r2,r3
 1723 0050 1B4B     	 ldr r3,.L75
 1724 0052 1A80     	 strh r2,[r3]
 373:../main.c     **** 	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual an
 1725              	 .loc 4 373 0
 1726 0054 1A4B     	 ldr r3,.L75
 1727 0056 1B88     	 ldrh r3,[r3]
 1728 0058 9BB2     	 uxth r3,r3
 1729 005a 03F03F03 	 and r3,r3,#63
 1730 005e 1C4A     	 ldr r2,.L75+16
 1731 0060 D25C     	 ldrb r2,[r2,r3]
 1732 0062 1C4B     	 ldr r3,.L75+20
 1733 0064 1A70     	 strb r2,[r3]
 374:../main.c     **** 
 375:../main.c     **** 	if(Hall_status == 0b100){sector = 0;}
 1734              	 .loc 4 375 0
 1735 0066 FB79     	 ldrb r3,[r7,#7]
 1736 0068 042B     	 cmp r3,#4
 1737 006a 03D1     	 bne .L69
 1738              	 .loc 4 375 0 is_stmt 0 discriminator 1
 1739 006c 1A4B     	 ldr r3,.L75+24
 1740 006e 0022     	 movs r2,#0
 1741 0070 1A70     	 strb r2,[r3]
 1742 0072 21E0     	 b .L68
 1743              	.L69:
 376:../main.c     **** 		 else if(Hall_status == 0b110){sector = 1;}
 1744              	 .loc 4 376 0 is_stmt 1
 1745 0074 FB79     	 ldrb r3,[r7,#7]
 1746 0076 062B     	 cmp r3,#6
 1747 0078 03D1     	 bne .L71
 1748              	 .loc 4 376 0 is_stmt 0 discriminator 1
 1749 007a 174B     	 ldr r3,.L75+24
 1750 007c 0122     	 movs r2,#1
 1751 007e 1A70     	 strb r2,[r3]
 1752 0080 1AE0     	 b .L68
 1753              	.L71:
 377:../main.c     **** 		 else if(Hall_status == 0b010){sector = 2;}
 1754              	 .loc 4 377 0 is_stmt 1
 1755 0082 FB79     	 ldrb r3,[r7,#7]
 1756 0084 022B     	 cmp r3,#2
 1757 0086 03D1     	 bne .L72
 1758              	 .loc 4 377 0 is_stmt 0 discriminator 1
 1759 0088 134B     	 ldr r3,.L75+24
 1760 008a 0222     	 movs r2,#2
 1761 008c 1A70     	 strb r2,[r3]
 1762 008e 13E0     	 b .L68
 1763              	.L72:
 378:../main.c     **** 		 else if(Hall_status == 0b011){sector = 3;}
 1764              	 .loc 4 378 0 is_stmt 1
 1765 0090 FB79     	 ldrb r3,[r7,#7]
 1766 0092 032B     	 cmp r3,#3
 1767 0094 03D1     	 bne .L73
 1768              	 .loc 4 378 0 is_stmt 0 discriminator 1
 1769 0096 104B     	 ldr r3,.L75+24
 1770 0098 0322     	 movs r2,#3
 1771 009a 1A70     	 strb r2,[r3]
 1772 009c 0CE0     	 b .L68
 1773              	.L73:
 379:../main.c     **** 		 else if(Hall_status == 0b001){sector = 4;}
 1774              	 .loc 4 379 0 is_stmt 1
 1775 009e FB79     	 ldrb r3,[r7,#7]
 1776 00a0 012B     	 cmp r3,#1
 1777 00a2 03D1     	 bne .L74
 1778              	 .loc 4 379 0 is_stmt 0 discriminator 1
 1779 00a4 0C4B     	 ldr r3,.L75+24
 1780 00a6 0422     	 movs r2,#4
 1781 00a8 1A70     	 strb r2,[r3]
 1782 00aa 05E0     	 b .L68
 1783              	.L74:
 380:../main.c     **** 		 else if(Hall_status == 0b101){sector = 5;}
 1784              	 .loc 4 380 0 is_stmt 1
 1785 00ac FB79     	 ldrb r3,[r7,#7]
 1786 00ae 052B     	 cmp r3,#5
 1787 00b0 02D1     	 bne .L68
 1788              	 .loc 4 380 0 is_stmt 0 discriminator 1
 1789 00b2 094B     	 ldr r3,.L75+24
 1790 00b4 0522     	 movs r2,#5
 1791 00b6 1A70     	 strb r2,[r3]
 1792              	.L68:
 381:../main.c     **** 
 382:../main.c     **** }
 1793              	 .loc 4 382 0 is_stmt 1
 1794 00b8 0C37     	 adds r7,r7,#12
 1795              	.LCFI78:
 1796              	 .cfi_def_cfa_offset 12
 1797 00ba BD46     	 mov sp,r7
 1798              	.LCFI79:
 1799              	 .cfi_def_cfa_register 13
 1800              	 
 1801 00bc 90BD     	 pop {r4,r7,pc}
 1802              	.L76:
 1803 00be 00BF     	 .align 2
 1804              	.L75:
 1805 00c0 00000000 	 .word enc_val
 1806 00c4 00000000 	 .word Hall_A_ISR
 1807 00c8 00000000 	 .word Hall_B_ISR
 1808 00cc 00000000 	 .word Hall_C_ISR
 1809 00d0 00000000 	 .word lookup_table
 1810 00d4 00000000 	 .word direction
 1811 00d8 00000000 	 .word sector
 1812              	 .cfi_endproc
 1813              	.LFE484:
 1815              	 .global __aeabi_ui2d
 1816              	 .global __aeabi_i2d
 1817              	 .global __aeabi_dsub
 1818              	 .section .text.Calculation,"ax",%progbits
 1819              	 .align 2
 1820              	 .global Calculation
 1821              	 .thumb
 1822              	 .thumb_func
 1824              	Calculation:
 1825              	.LFB485:
 383:../main.c     **** // Routine for calculation (sector, clark-Park trans.,...)
 384:../main.c     **** 
 385:../main.c     **** //5kHz loop since every 4th step of 50us --> 200us --> 5kHz
 386:../main.c     **** void Calculation(void){
 1826              	 .loc 4 386 0
 1827              	 .cfi_startproc
 1828              	 
 1829              	 
 1830 0000 B0B5     	 push {r4,r5,r7,lr}
 1831              	.LCFI80:
 1832              	 .cfi_def_cfa_offset 16
 1833              	 .cfi_offset 4,-16
 1834              	 .cfi_offset 5,-12
 1835              	 .cfi_offset 7,-8
 1836              	 .cfi_offset 14,-4
 1837 0002 2DED028B 	 fstmfdd sp!,{d8}
 1838              	.LCFI81:
 1839              	 .cfi_def_cfa_offset 24
 1840              	 .cfi_offset 80,-24
 1841              	 .cfi_offset 81,-20
 1842 0006 84B0     	 sub sp,sp,#16
 1843              	.LCFI82:
 1844              	 .cfi_def_cfa_offset 40
 1845 0008 00AF     	 add r7,sp,#0
 1846              	.LCFI83:
 1847              	 .cfi_def_cfa_register 7
 387:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 1848              	 .loc 4 387 0
 1849 000a B448     	 ldr r0,.L130
 1850 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 388:../main.c     **** 		// Actual time since last angle update via Hall Sensor
 389:../main.c     **** 		uint32_t t;
 390:../main.c     **** 		if(last_Hall_trig == 'A') t = time_since_A;
 1851              	 .loc 4 390 0
 1852 0010 B34B     	 ldr r3,.L130+4
 1853 0012 1B78     	 ldrb r3,[r3]
 1854 0014 DBB2     	 uxtb r3,r3
 1855 0016 412B     	 cmp r3,#65
 1856 0018 03D1     	 bne .L78
 1857              	 .loc 4 390 0 is_stmt 0 discriminator 1
 1858 001a B24B     	 ldr r3,.L130+8
 1859 001c 1B68     	 ldr r3,[r3]
 1860 001e FB60     	 str r3,[r7,#12]
 1861 0020 10E0     	 b .L79
 1862              	.L78:
 391:../main.c     **** 		else if(last_Hall_trig == 'B') t = time_since_B;
 1863              	 .loc 4 391 0 is_stmt 1
 1864 0022 AF4B     	 ldr r3,.L130+4
 1865 0024 1B78     	 ldrb r3,[r3]
 1866 0026 DBB2     	 uxtb r3,r3
 1867 0028 422B     	 cmp r3,#66
 1868 002a 03D1     	 bne .L80
 1869              	 .loc 4 391 0 is_stmt 0 discriminator 1
 1870 002c AE4B     	 ldr r3,.L130+12
 1871 002e 1B68     	 ldr r3,[r3]
 1872 0030 FB60     	 str r3,[r7,#12]
 1873 0032 07E0     	 b .L79
 1874              	.L80:
 392:../main.c     **** 		else if(last_Hall_trig == 'C') t = time_since_C;
 1875              	 .loc 4 392 0 is_stmt 1
 1876 0034 AA4B     	 ldr r3,.L130+4
 1877 0036 1B78     	 ldrb r3,[r3]
 1878 0038 DBB2     	 uxtb r3,r3
 1879 003a 432B     	 cmp r3,#67
 1880 003c 02D1     	 bne .L79
 1881              	 .loc 4 392 0 is_stmt 0 discriminator 1
 1882 003e AB4B     	 ldr r3,.L130+16
 1883 0040 1B68     	 ldr r3,[r3]
 1884 0042 FB60     	 str r3,[r7,#12]
 1885              	.L79:
 393:../main.c     **** 		time_180deg_cal = time_180deg;
 1886              	 .loc 4 393 0 is_stmt 1
 1887 0044 AA4B     	 ldr r3,.L130+20
 1888 0046 1B68     	 ldr r3,[r3]
 1889 0048 AA4A     	 ldr r2,.L130+24
 1890 004a 1360     	 str r3,[r2]
 394:../main.c     **** 		// not fixing sector for calc because if chainges better to do so
 395:../main.c     **** 
 396:../main.c     **** 		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 1891              	 .loc 4 396 0
 1892 004c A94B     	 ldr r3,.L130+24
 1893 004e 1B68     	 ldr r3,[r3]
 1894 0050 40F6C412 	 movw r2,#2500
 1895 0054 9342     	 cmp r3,r2
 1896 0056 04D9     	 bls .L81
 1897              	 .loc 4 396 0 is_stmt 0 discriminator 1
 1898 0058 A64B     	 ldr r3,.L130+24
 1899 005a 40F6C412 	 movw r2,#2500
 1900 005e 1A60     	 str r2,[r3]
 1901 0060 06E0     	 b .L82
 1902              	.L81:
 397:../main.c     **** 		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 1903              	 .loc 4 397 0 is_stmt 1
 1904 0062 A44B     	 ldr r3,.L130+24
 1905 0064 1B68     	 ldr r3,[r3]
 1906 0066 012B     	 cmp r3,#1
 1907 0068 02D8     	 bhi .L82
 1908              	 .loc 4 397 0 is_stmt 0 discriminator 1
 1909 006a A24B     	 ldr r3,.L130+24
 1910 006c 0222     	 movs r2,#2
 1911 006e 1A60     	 str r2,[r3]
 1912              	.L82:
 398:../main.c     **** 
 399:../main.c     **** 		if(t < TIME_OMEGA_0){
 1913              	 .loc 4 399 0 is_stmt 1
 1914 0070 FB68     	 ldr r3,[r7,#12]
 1915 0072 41F28732 	 movw r2,#4999
 1916 0076 9342     	 cmp r3,r2
 1917 0078 35D8     	 bhi .L83
 400:../main.c     **** 			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 1918              	 .loc 4 400 0
 1919 007a 9E4B     	 ldr r3,.L130+24
 1920 007c 1B68     	 ldr r3,[r3]
 1921 007e 07EE903A 	 fmsr s15,r3
 1922 0082 F8EE677A 	 fuitos s15,s15
 1923 0086 17EE900A 	 fmrs r0,s15
 1924 008a FFF7FEFF 	 bl __aeabi_f2d
 1925 008e 0246     	 mov r2,r0
 1926 0090 0B46     	 mov r3,r1
 1927 0092 4FF00000 	 mov r0,#0
 1928 0096 9849     	 ldr r1,.L130+28
 1929 0098 FFF7FEFF 	 bl __aeabi_ddiv
 1930 009c 0246     	 mov r2,r0
 1931 009e 0B46     	 mov r3,r1
 1932 00a0 1446     	 mov r4,r2
 1933 00a2 1D46     	 mov r5,r3
 1934 00a4 F868     	 ldr r0,[r7,#12]
 1935 00a6 FFF7FEFF 	 bl __aeabi_ui2d
 1936 00aa 0246     	 mov r2,r0
 1937 00ac 0B46     	 mov r3,r1
 1938 00ae 2046     	 mov r0,r4
 1939 00b0 2946     	 mov r1,r5
 1940 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1941 00b6 0246     	 mov r2,r0
 1942 00b8 0B46     	 mov r3,r1
 1943 00ba 1046     	 mov r0,r2
 1944 00bc 1946     	 mov r1,r3
 1945 00be FFF7FEFF 	 bl __aeabi_d2f
 1946 00c2 0246     	 mov r2,r0
 1947 00c4 8D4B     	 ldr r3,.L130+32
 1948 00c6 1A60     	 str r2,[r3]
 401:../main.c     **** 			if(angle_in_sector > 60) angle_in_sector = 60;
 1949              	 .loc 4 401 0
 1950 00c8 8C4B     	 ldr r3,.L130+32
 1951 00ca D3ED007A 	 flds s15,[r3]
 1952 00ce 9FED8C7A 	 flds s14,.L130+36
 1953 00d2 F4EEC77A 	 fcmpes s15,s14
 1954 00d6 F1EE10FA 	 fmstat
 1955 00da 00DC     	 bgt .L117
 1956 00dc 06E0     	 b .L86
 1957              	.L117:
 1958              	 .loc 4 401 0 is_stmt 0 discriminator 1
 1959 00de 874B     	 ldr r3,.L130+32
 1960 00e0 884A     	 ldr r2,.L130+40
 1961 00e2 1A60     	 str r2,[r3]
 1962 00e4 02E0     	 b .L86
 1963              	.L83:
 402:../main.c     **** 		}
 403:../main.c     **** 		else{
 404:../main.c     **** 			angle_in_sector = 30; // standig still
 1964              	 .loc 4 404 0 is_stmt 1
 1965 00e6 854B     	 ldr r3,.L130+32
 1966 00e8 874A     	 ldr r2,.L130+44
 1967 00ea 1A60     	 str r2,[r3]
 1968              	.L86:
 405:../main.c     **** 		}
 406:../main.c     **** 
 407:../main.c     **** 		// CW
 408:../main.c     **** 		if(direction==1)
 1969              	 .loc 4 408 0
 1970 00ec 874B     	 ldr r3,.L130+48
 1971 00ee 1B78     	 ldrb r3,[r3]
 1972 00f0 DBB2     	 uxtb r3,r3
 1973 00f2 5BB2     	 sxtb r3,r3
 1974 00f4 012B     	 cmp r3,#1
 1975 00f6 54D1     	 bne .L87
 409:../main.c     **** 		{
 410:../main.c     **** 			angle_phi = (sector*60.0)+angle_in_sector;
 1976              	 .loc 4 410 0
 1977 00f8 854B     	 ldr r3,.L130+52
 1978 00fa 1B78     	 ldrb r3,[r3]
 1979 00fc DBB2     	 uxtb r3,r3
 1980 00fe 5BB2     	 sxtb r3,r3
 1981 0100 1846     	 mov r0,r3
 1982 0102 FFF7FEFF 	 bl __aeabi_i2d
 1983 0106 0246     	 mov r2,r0
 1984 0108 0B46     	 mov r3,r1
 1985 010a 1046     	 mov r0,r2
 1986 010c 1946     	 mov r1,r3
 1987 010e 4FF00002 	 mov r2,#0
 1988 0112 804B     	 ldr r3,.L130+56
 1989 0114 FFF7FEFF 	 bl __aeabi_dmul
 1990 0118 0246     	 mov r2,r0
 1991 011a 0B46     	 mov r3,r1
 1992 011c 1446     	 mov r4,r2
 1993 011e 1D46     	 mov r5,r3
 1994 0120 764B     	 ldr r3,.L130+32
 1995 0122 1B68     	 ldr r3,[r3]
 1996 0124 1846     	 mov r0,r3
 1997 0126 FFF7FEFF 	 bl __aeabi_f2d
 1998 012a 0246     	 mov r2,r0
 1999 012c 0B46     	 mov r3,r1
 2000 012e 2046     	 mov r0,r4
 2001 0130 2946     	 mov r1,r5
 2002 0132 FFF7FEFF 	 bl __aeabi_dadd
 2003 0136 0246     	 mov r2,r0
 2004 0138 0B46     	 mov r3,r1
 2005 013a 1046     	 mov r0,r2
 2006 013c 1946     	 mov r1,r3
 2007 013e FFF7FEFF 	 bl __aeabi_d2f
 2008 0142 0246     	 mov r2,r0
 2009 0144 744B     	 ldr r3,.L130+60
 2010 0146 1A60     	 str r2,[r3]
 411:../main.c     **** 			angle_phi=angle_phi+offset_pos;
 2011              	 .loc 4 411 0
 2012 0148 734B     	 ldr r3,.L130+60
 2013 014a 93ED007A 	 flds s14,[r3]
 2014 014e 734B     	 ldr r3,.L130+64
 2015 0150 D3ED007A 	 flds s15,[r3]
 2016 0154 77EE277A 	 fadds s15,s14,s15
 2017 0158 6F4B     	 ldr r3,.L130+60
 2018 015a C3ED007A 	 fsts s15,[r3]
 412:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2019              	 .loc 4 412 0
 2020 015e 6E4B     	 ldr r3,.L130+60
 2021 0160 D3ED007A 	 flds s15,[r3]
 2022 0164 9FED6E7A 	 flds s14,.L130+68
 2023 0168 F4EEC77A 	 fcmpes s15,s14
 2024 016c F1EE10FA 	 fmstat
 2025 0170 09DD     	 ble .L88
 2026              	 .loc 4 412 0 is_stmt 0 discriminator 1
 2027 0172 694B     	 ldr r3,.L130+60
 2028 0174 D3ED007A 	 flds s15,[r3]
 2029 0178 9FED697A 	 flds s14,.L130+68
 2030 017c 77EEC77A 	 fsubs s15,s15,s14
 2031 0180 654B     	 ldr r3,.L130+60
 2032 0182 C3ED007A 	 fsts s15,[r3]
 2033              	.L88:
 413:../main.c     **** 
 414:../main.c     **** 			omega_mech_rps_temp = (float)450/((float)time_180deg_cal);
 2034              	 .loc 4 414 0 is_stmt 1
 2035 0186 5B4B     	 ldr r3,.L130+24
 2036 0188 1B68     	 ldr r3,[r3]
 2037 018a 07EE903A 	 fmsr s15,r3
 2038 018e F8EE677A 	 fuitos s15,s15
 2039 0192 9FED647A 	 flds s14,.L130+72
 2040 0196 C7EE277A 	 fdivs s15,s14,s15
 2041 019a 634B     	 ldr r3,.L130+76
 2042 019c C3ED007A 	 fsts s15,[r3]
 2043 01a0 6FE0     	 b .L90
 2044              	.L87:
 415:../main.c     **** 		}
 416:../main.c     **** 		// CCW
 417:../main.c     **** 		else{
 418:../main.c     **** 			angle_phi = (sector*60.0)-angle_in_sector;
 2045              	 .loc 4 418 0
 2046 01a2 5B4B     	 ldr r3,.L130+52
 2047 01a4 1B78     	 ldrb r3,[r3]
 2048 01a6 DBB2     	 uxtb r3,r3
 2049 01a8 5BB2     	 sxtb r3,r3
 2050 01aa 1846     	 mov r0,r3
 2051 01ac FFF7FEFF 	 bl __aeabi_i2d
 2052 01b0 0246     	 mov r2,r0
 2053 01b2 0B46     	 mov r3,r1
 2054 01b4 1046     	 mov r0,r2
 2055 01b6 1946     	 mov r1,r3
 2056 01b8 4FF00002 	 mov r2,#0
 2057 01bc 554B     	 ldr r3,.L130+56
 2058 01be FFF7FEFF 	 bl __aeabi_dmul
 2059 01c2 0246     	 mov r2,r0
 2060 01c4 0B46     	 mov r3,r1
 2061 01c6 1446     	 mov r4,r2
 2062 01c8 1D46     	 mov r5,r3
 2063 01ca 4C4B     	 ldr r3,.L130+32
 2064 01cc 1B68     	 ldr r3,[r3]
 2065 01ce 1846     	 mov r0,r3
 2066 01d0 FFF7FEFF 	 bl __aeabi_f2d
 2067 01d4 0246     	 mov r2,r0
 2068 01d6 0B46     	 mov r3,r1
 2069 01d8 2046     	 mov r0,r4
 2070 01da 2946     	 mov r1,r5
 2071 01dc FFF7FEFF 	 bl __aeabi_dsub
 2072 01e0 0246     	 mov r2,r0
 2073 01e2 0B46     	 mov r3,r1
 2074 01e4 1046     	 mov r0,r2
 2075 01e6 1946     	 mov r1,r3
 2076 01e8 FFF7FEFF 	 bl __aeabi_d2f
 2077 01ec 0246     	 mov r2,r0
 2078 01ee 4A4B     	 ldr r3,.L130+60
 2079 01f0 1A60     	 str r2,[r3]
 419:../main.c     **** 			angle_phi = angle_phi+60.0;
 2080              	 .loc 4 419 0
 2081 01f2 494B     	 ldr r3,.L130+60
 2082 01f4 D3ED007A 	 flds s15,[r3]
 2083 01f8 9FED417A 	 flds s14,.L130+36
 2084 01fc 77EE877A 	 fadds s15,s15,s14
 2085 0200 454B     	 ldr r3,.L130+60
 2086 0202 C3ED007A 	 fsts s15,[r3]
 420:../main.c     **** 			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 2087              	 .loc 4 420 0
 2088 0206 444B     	 ldr r3,.L130+60
 2089 0208 D3ED007A 	 flds s15,[r3]
 2090 020c F5EEC07A 	 fcmpezs s15
 2091 0210 F1EE10FA 	 fmstat
 2092 0214 09D5     	 bpl .L91
 2093              	 .loc 4 420 0 is_stmt 0 discriminator 1
 2094 0216 404B     	 ldr r3,.L130+60
 2095 0218 D3ED007A 	 flds s15,[r3]
 2096 021c 9FED407A 	 flds s14,.L130+68
 2097 0220 77EE877A 	 fadds s15,s15,s14
 2098 0224 3C4B     	 ldr r3,.L130+60
 2099 0226 C3ED007A 	 fsts s15,[r3]
 2100              	.L91:
 421:../main.c     **** 			angle_phi=angle_phi+offset_neg;
 2101              	 .loc 4 421 0 is_stmt 1
 2102 022a 3B4B     	 ldr r3,.L130+60
 2103 022c 93ED007A 	 flds s14,[r3]
 2104 0230 3E4B     	 ldr r3,.L130+80
 2105 0232 D3ED007A 	 flds s15,[r3]
 2106 0236 77EE277A 	 fadds s15,s14,s15
 2107 023a 374B     	 ldr r3,.L130+60
 2108 023c C3ED007A 	 fsts s15,[r3]
 422:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2109              	 .loc 4 422 0
 2110 0240 354B     	 ldr r3,.L130+60
 2111 0242 D3ED007A 	 flds s15,[r3]
 2112 0246 9FED367A 	 flds s14,.L130+68
 2113 024a F4EEC77A 	 fcmpes s15,s14
 2114 024e F1EE10FA 	 fmstat
 2115 0252 09DD     	 ble .L93
 2116              	 .loc 4 422 0 is_stmt 0 discriminator 1
 2117 0254 304B     	 ldr r3,.L130+60
 2118 0256 D3ED007A 	 flds s15,[r3]
 2119 025a 9FED317A 	 flds s14,.L130+68
 2120 025e 77EEC77A 	 fsubs s15,s15,s14
 2121 0262 2D4B     	 ldr r3,.L130+60
 2122 0264 C3ED007A 	 fsts s15,[r3]
 2123              	.L93:
 423:../main.c     **** 
 424:../main.c     **** 			omega_mech_rps_temp = -(float)450/((float)time_180deg_cal);
 2124              	 .loc 4 424 0 is_stmt 1
 2125 0268 224B     	 ldr r3,.L130+24
 2126 026a 1B68     	 ldr r3,[r3]
 2127 026c 07EE903A 	 fmsr s15,r3
 2128 0270 F8EE677A 	 fuitos s15,s15
 2129 0274 9FED2E7A 	 flds s14,.L130+84
 2130 0278 C7EE277A 	 fdivs s15,s14,s15
 2131 027c 2A4B     	 ldr r3,.L130+76
 2132 027e C3ED007A 	 fsts s15,[r3]
 2133              	.L90:
 425:../main.c     **** 		}
 426:../main.c     **** 
 427:../main.c     **** 		falg_speed_not_new = 0;
 2134              	 .loc 4 427 0
 2135 0282 2C4B     	 ldr r3,.L130+88
 2136 0284 0022     	 movs r2,#0
 2137 0286 1A70     	 strb r2,[r3]
 428:../main.c     **** 		if(omega_mech_rps_temp<200 && omega_mech_rps_temp>(-200)) //plausibility check to avoid large pea
 2138              	 .loc 4 428 0
 2139 0288 274B     	 ldr r3,.L130+76
 2140 028a D3ED007A 	 flds s15,[r3]
 2141 028e 9FED2A7A 	 flds s14,.L130+92
 2142 0292 F4EEC77A 	 fcmpes s15,s14
 2143 0296 F1EE10FA 	 fmstat
 2144 029a 10D5     	 bpl .L95
 2145              	 .loc 4 428 0 is_stmt 0 discriminator 1
 2146 029c 224B     	 ldr r3,.L130+76
 2147 029e D3ED007A 	 flds s15,[r3]
 2148 02a2 9FED267A 	 flds s14,.L130+96
 2149 02a6 F4EEC77A 	 fcmpes s15,s14
 2150 02aa F1EE10FA 	 fmstat
 2151 02ae 06DD     	 ble .L95
 429:../main.c     **** 		{
 430:../main.c     **** 			omega_mech_rps = omega_mech_rps_temp;
 2152              	 .loc 4 430 0 is_stmt 1
 2153 02b0 1D4B     	 ldr r3,.L130+76
 2154 02b2 1B68     	 ldr r3,[r3]
 2155 02b4 224A     	 ldr r2,.L130+100
 2156 02b6 1360     	 str r3,[r2]
 431:../main.c     **** 			falg_speed_not_new = 1;
 2157              	 .loc 4 431 0
 2158 02b8 1E4B     	 ldr r3,.L130+88
 2159 02ba 0122     	 movs r2,#1
 2160 02bc 1A70     	 strb r2,[r3]
 2161              	.L95:
 432:../main.c     **** 		}
 433:../main.c     **** 
 434:../main.c     **** 		if(t > TIME_OMEGA_0){
 2162              	 .loc 4 434 0
 2163 02be FB68     	 ldr r3,[r7,#12]
 2164 02c0 41F28832 	 movw r2,#5000
 2165 02c4 9342     	 cmp r3,r2
 2166 02c6 3FD9     	 bls .L98
 435:../main.c     **** 			omega_ele_rads = 0;
 2167              	 .loc 4 435 0
 2168 02c8 1E4B     	 ldr r3,.L130+104
 2169 02ca 4FF00002 	 mov r2,#0
 2170 02ce 1A60     	 str r2,[r3]
 436:../main.c     **** 			omega_mech_rps = 0;
 2171              	 .loc 4 436 0
 2172 02d0 1B4B     	 ldr r3,.L130+100
 2173 02d2 4FF00002 	 mov r2,#0
 2174 02d6 1A60     	 str r2,[r3]
 2175 02d8 5AE0     	 b .L99
 2176              	.L131:
 2177 02da 00BF     	 .align 2
 2178              	.L130:
 2179 02dc 00000000 	 .word status_LED_red_cal_time
 2180 02e0 00000000 	 .word last_Hall_trig
 2181 02e4 00000000 	 .word time_since_A
 2182 02e8 00000000 	 .word time_since_B
 2183 02ec 00000000 	 .word time_since_C
 2184 02f0 00000000 	 .word time_180deg
 2185 02f4 00000000 	 .word time_180deg_cal
 2186 02f8 00806640 	 .word 1080459264
 2187 02fc 00000000 	 .word angle_in_sector
 2188 0300 00007042 	 .word 1114636288
 2189 0304 00007042 	 .word 1114636288
 2190 0308 0000F041 	 .word 1106247680
 2191 030c 00000000 	 .word direction
 2192 0310 00000000 	 .word sector
 2193 0314 00004E40 	 .word 1078853632
 2194 0318 00000000 	 .word angle_phi
 2195 031c 00000000 	 .word offset_pos
 2196 0320 0000B443 	 .word 1135869952
 2197 0324 0000E143 	 .word 1138819072
 2198 0328 00000000 	 .word omega_mech_rps_temp
 2199 032c 00000000 	 .word offset_neg
 2200 0330 0000E1C3 	 .word -1008664576
 2201 0334 00000000 	 .word falg_speed_not_new
 2202 0338 00004843 	 .word 1128792064
 2203 033c 000048C3 	 .word -1018691584
 2204 0340 00000000 	 .word omega_mech_rps
 2205 0344 00000000 	 .word omega_ele_rads
 2206              	.L98:
 437:../main.c     **** 		} // set omega  to 0 if no more hall detected
 438:../main.c     **** 		else omega_ele_rads = omega_mech_rps*2*PI*PPZ; //omega_ electrica in rads / s
 2207              	 .loc 4 438 0
 2208 0348 A34B     	 ldr r3,.L132+40
 2209 034a D3ED007A 	 flds s15,[r3]
 2210 034e 77EEA77A 	 fadds s15,s15,s15
 2211 0352 17EE900A 	 fmrs r0,s15
 2212 0356 FFF7FEFF 	 bl __aeabi_f2d
 2213 035a 0246     	 mov r2,r0
 2214 035c 0B46     	 mov r3,r1
 2215 035e 1046     	 mov r0,r2
 2216 0360 1946     	 mov r1,r3
 2217 0362 93A3     	 adr r3,.L132
 2218 0364 D3E90023 	 ldrd r2,[r3]
 2219 0368 FFF7FEFF 	 bl __aeabi_dmul
 2220 036c 0246     	 mov r2,r0
 2221 036e 0B46     	 mov r3,r1
 2222 0370 1046     	 mov r0,r2
 2223 0372 1946     	 mov r1,r3
 2224 0374 4FF00002 	 mov r2,#0
 2225 0378 984B     	 ldr r3,.L132+44
 2226 037a FFF7FEFF 	 bl __aeabi_dmul
 2227 037e 0246     	 mov r2,r0
 2228 0380 0B46     	 mov r3,r1
 2229 0382 1046     	 mov r0,r2
 2230 0384 1946     	 mov r1,r3
 2231 0386 FFF7FEFF 	 bl __aeabi_d2f
 2232 038a 0246     	 mov r2,r0
 2233 038c 944B     	 ldr r3,.L132+48
 2234 038e 1A60     	 str r2,[r3]
 2235              	.L99:
 439:../main.c     **** 
 440:../main.c     **** 		omega_ele_degs = omega_ele_rads / Pi180;
 2236              	 .loc 4 440 0
 2237 0390 934B     	 ldr r3,.L132+48
 2238 0392 1B68     	 ldr r3,[r3]
 2239 0394 1846     	 mov r0,r3
 2240 0396 FFF7FEFF 	 bl __aeabi_f2d
 2241 039a 0246     	 mov r2,r0
 2242 039c 0B46     	 mov r3,r1
 2243 039e 1046     	 mov r0,r2
 2244 03a0 1946     	 mov r1,r3
 2245 03a2 85A3     	 adr r3,.L132+8
 2246 03a4 D3E90023 	 ldrd r2,[r3]
 2247 03a8 FFF7FEFF 	 bl __aeabi_ddiv
 2248 03ac 0246     	 mov r2,r0
 2249 03ae 0B46     	 mov r3,r1
 2250 03b0 1046     	 mov r0,r2
 2251 03b2 1946     	 mov r1,r3
 2252 03b4 FFF7FEFF 	 bl __aeabi_d2f
 2253 03b8 0246     	 mov r2,r0
 2254 03ba 8A4B     	 ldr r3,.L132+52
 2255 03bc 1A60     	 str r2,[r3]
 441:../main.c     **** 
 442:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% 
 443:../main.c     **** 
 444:../main.c     **** 		// Current read out over SPI
 445:../main.c     **** 		Current_U = readCurrent(ChipSelect_U);
 2256              	 .loc 4 445 0
 2257 03be 0620     	 movs r0,#6
 2258 03c0 FFF7FEFF 	 bl readCurrent
 2259 03c4 0246     	 mov r2,r0
 2260 03c6 884B     	 ldr r3,.L132+56
 2261 03c8 1A60     	 str r2,[r3]
 446:../main.c     **** 		Current_V = readCurrent(ChipSelect_V);
 2262              	 .loc 4 446 0
 2263 03ca 0520     	 movs r0,#5
 2264 03cc FFF7FEFF 	 bl readCurrent
 2265 03d0 0246     	 mov r2,r0
 2266 03d2 864B     	 ldr r3,.L132+60
 2267 03d4 1A60     	 str r2,[r3]
 447:../main.c     **** 		Current_W = readCurrent(ChipSelect_W);
 2268              	 .loc 4 447 0
 2269 03d6 0320     	 movs r0,#3
 2270 03d8 FFF7FEFF 	 bl readCurrent
 2271 03dc 0246     	 mov r2,r0
 2272 03de 844B     	 ldr r3,.L132+64
 2273 03e0 1A60     	 str r2,[r3]
 448:../main.c     **** 
 449:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of th
 450:../main.c     **** 
 451:../main.c     **** 		// conversion from rad/s to degree
 452:../main.c     **** 		float angle_phi_rad = angle_phi*Pi180;
 2274              	 .loc 4 452 0
 2275 03e2 844B     	 ldr r3,.L132+68
 2276 03e4 1B68     	 ldr r3,[r3]
 2277 03e6 1846     	 mov r0,r3
 2278 03e8 FFF7FEFF 	 bl __aeabi_f2d
 2279 03ec 0246     	 mov r2,r0
 2280 03ee 0B46     	 mov r3,r1
 2281 03f0 1046     	 mov r0,r2
 2282 03f2 1946     	 mov r1,r3
 2283 03f4 70A3     	 adr r3,.L132+8
 2284 03f6 D3E90023 	 ldrd r2,[r3]
 2285 03fa FFF7FEFF 	 bl __aeabi_dmul
 2286 03fe 0246     	 mov r2,r0
 2287 0400 0B46     	 mov r3,r1
 2288 0402 1046     	 mov r0,r2
 2289 0404 1946     	 mov r1,r3
 2290 0406 FFF7FEFF 	 bl __aeabi_d2f
 2291 040a 0346     	 mov r3,r0
 2292 040c BB60     	 str r3,[r7,#8]
 453:../main.c     **** 
 454:../main.c     **** 		// to decrease multiple calculations and computational effort
 455:../main.c     **** 		float cos_phi = cosf(angle_phi_rad);
 2293              	 .loc 4 455 0
 2294 040e B868     	 ldr r0,[r7,#8]
 2295 0410 FFF7FEFF 	 bl cosf
 2296 0414 7860     	 str r0,[r7,#4]
 456:../main.c     **** 		float sin_phi = sinf(angle_phi_rad);
 2297              	 .loc 4 456 0
 2298 0416 B868     	 ldr r0,[r7,#8]
 2299 0418 FFF7FEFF 	 bl sinf
 2300 041c 3860     	 str r0,[r7]
 457:../main.c     **** 
 458:../main.c     **** 		// Clark-Park transformation (from U,V,W to dq)
 459:../main.c     **** 		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-
 2301              	 .loc 4 459 0
 2302 041e 724B     	 ldr r3,.L132+56
 2303 0420 93ED007A 	 flds s14,[r3]
 2304 0424 D7ED017A 	 flds s15,[r7,#4]
 2305 0428 27EE278A 	 fmuls s16,s14,s15
 2306 042c B868     	 ldr r0,[r7,#8]
 2307 042e FFF7FEFF 	 bl __aeabi_f2d
 2308 0432 0246     	 mov r2,r0
 2309 0434 0B46     	 mov r3,r1
 2310 0436 1046     	 mov r0,r2
 2311 0438 1946     	 mov r1,r3
 2312 043a 61A3     	 adr r3,.L132+16
 2313 043c D3E90023 	 ldrd r2,[r3]
 2314 0440 FFF7FEFF 	 bl __aeabi_dsub
 2315 0444 0246     	 mov r2,r0
 2316 0446 0B46     	 mov r3,r1
 2317 0448 1046     	 mov r0,r2
 2318 044a 1946     	 mov r1,r3
 2319 044c FFF7FEFF 	 bl __aeabi_d2f
 2320 0450 0346     	 mov r3,r0
 2321 0452 1846     	 mov r0,r3
 2322 0454 FFF7FEFF 	 bl cosf
 2323 0458 07EE100A 	 fmsr s14,r0
 2324 045c 634B     	 ldr r3,.L132+60
 2325 045e D3ED007A 	 flds s15,[r3]
 2326 0462 67EE277A 	 fmuls s15,s14,s15
 2327 0466 38EE278A 	 fadds s16,s16,s15
 2328 046a B868     	 ldr r0,[r7,#8]
 2329 046c FFF7FEFF 	 bl __aeabi_f2d
 2330 0470 0246     	 mov r2,r0
 2331 0472 0B46     	 mov r3,r1
 2332 0474 1046     	 mov r0,r2
 2333 0476 1946     	 mov r1,r3
 2334 0478 53A3     	 adr r3,.L132+24
 2335 047a D3E90023 	 ldrd r2,[r3]
 2336 047e FFF7FEFF 	 bl __aeabi_dsub
 2337 0482 0246     	 mov r2,r0
 2338 0484 0B46     	 mov r3,r1
 2339 0486 1046     	 mov r0,r2
 2340 0488 1946     	 mov r1,r3
 2341 048a FFF7FEFF 	 bl __aeabi_d2f
 2342 048e 0346     	 mov r3,r0
 2343 0490 1846     	 mov r0,r3
 2344 0492 FFF7FEFF 	 bl cosf
 2345 0496 07EE100A 	 fmsr s14,r0
 2346 049a 554B     	 ldr r3,.L132+64
 2347 049c D3ED007A 	 flds s15,[r3]
 2348 04a0 67EE277A 	 fmuls s15,s14,s15
 2349 04a4 78EE277A 	 fadds s15,s16,s15
 2350 04a8 17EE900A 	 fmrs r0,s15
 2351 04ac FFF7FEFF 	 bl __aeabi_f2d
 2352 04b0 0246     	 mov r2,r0
 2353 04b2 0B46     	 mov r3,r1
 2354 04b4 1046     	 mov r0,r2
 2355 04b6 1946     	 mov r1,r3
 2356 04b8 45A3     	 adr r3,.L132+32
 2357 04ba D3E90023 	 ldrd r2,[r3]
 2358 04be FFF7FEFF 	 bl __aeabi_dmul
 2359 04c2 0246     	 mov r2,r0
 2360 04c4 0B46     	 mov r3,r1
 2361 04c6 1046     	 mov r0,r2
 2362 04c8 1946     	 mov r1,r3
 2363 04ca FFF7FEFF 	 bl __aeabi_d2f
 2364 04ce 0246     	 mov r2,r0
 2365 04d0 494B     	 ldr r3,.L132+72
 2366 04d2 1A60     	 str r2,[r3]
 460:../main.c     **** 		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad
 2367              	 .loc 4 460 0
 2368 04d4 D7ED007A 	 flds s15,[r7]
 2369 04d8 B1EE677A 	 fnegs s14,s15
 2370 04dc 424B     	 ldr r3,.L132+56
 2371 04de D3ED007A 	 flds s15,[r3]
 2372 04e2 27EE278A 	 fmuls s16,s14,s15
 2373 04e6 B868     	 ldr r0,[r7,#8]
 2374 04e8 FFF7FEFF 	 bl __aeabi_f2d
 2375 04ec 0246     	 mov r2,r0
 2376 04ee 0B46     	 mov r3,r1
 2377 04f0 1046     	 mov r0,r2
 2378 04f2 1946     	 mov r1,r3
 2379 04f4 32A3     	 adr r3,.L132+16
 2380 04f6 D3E90023 	 ldrd r2,[r3]
 2381 04fa FFF7FEFF 	 bl __aeabi_dsub
 2382 04fe 0246     	 mov r2,r0
 2383 0500 0B46     	 mov r3,r1
 2384 0502 1046     	 mov r0,r2
 2385 0504 1946     	 mov r1,r3
 2386 0506 FFF7FEFF 	 bl __aeabi_d2f
 2387 050a 0346     	 mov r3,r0
 2388 050c 1846     	 mov r0,r3
 2389 050e FFF7FEFF 	 bl sinf
 2390 0512 07EE100A 	 fmsr s14,r0
 2391 0516 354B     	 ldr r3,.L132+60
 2392 0518 D3ED007A 	 flds s15,[r3]
 2393 051c 67EE277A 	 fmuls s15,s14,s15
 2394 0520 38EE678A 	 fsubs s16,s16,s15
 2395 0524 B868     	 ldr r0,[r7,#8]
 2396 0526 FFF7FEFF 	 bl __aeabi_f2d
 2397 052a 0246     	 mov r2,r0
 2398 052c 0B46     	 mov r3,r1
 2399 052e 1046     	 mov r0,r2
 2400 0530 1946     	 mov r1,r3
 2401 0532 25A3     	 adr r3,.L132+24
 2402 0534 D3E90023 	 ldrd r2,[r3]
 2403 0538 FFF7FEFF 	 bl __aeabi_dsub
 2404 053c 0246     	 mov r2,r0
 2405 053e 0B46     	 mov r3,r1
 2406 0540 1046     	 mov r0,r2
 2407 0542 1946     	 mov r1,r3
 2408 0544 FFF7FEFF 	 bl __aeabi_d2f
 2409 0548 0346     	 mov r3,r0
 2410 054a 1846     	 mov r0,r3
 2411 054c FFF7FEFF 	 bl sinf
 2412 0550 07EE100A 	 fmsr s14,r0
 2413 0554 264B     	 ldr r3,.L132+64
 2414 0556 D3ED007A 	 flds s15,[r3]
 2415 055a 67EE277A 	 fmuls s15,s14,s15
 2416 055e 78EE677A 	 fsubs s15,s16,s15
 2417 0562 17EE900A 	 fmrs r0,s15
 2418 0566 FFF7FEFF 	 bl __aeabi_f2d
 2419 056a 0246     	 mov r2,r0
 2420 056c 0B46     	 mov r3,r1
 2421 056e 1046     	 mov r0,r2
 2422 0570 1946     	 mov r1,r3
 2423 0572 17A3     	 adr r3,.L132+32
 2424 0574 D3E90023 	 ldrd r2,[r3]
 2425 0578 FFF7FEFF 	 bl __aeabi_dmul
 2426 057c 0246     	 mov r2,r0
 2427 057e 0B46     	 mov r3,r1
 2428 0580 1046     	 mov r0,r2
 2429 0582 1946     	 mov r1,r3
 2430 0584 FFF7FEFF 	 bl __aeabi_d2f
 2431 0588 0246     	 mov r2,r0
 2432 058a 1C4B     	 ldr r3,.L132+76
 2433 058c 1A60     	 str r2,[r3]
 461:../main.c     **** 
 462:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of
 463:../main.c     **** 
 464:../main.c     **** 		if(CAN_control == 1){// can control
 2434              	 .loc 4 464 0
 2435 058e 1C4B     	 ldr r3,.L132+80
 2436 0590 1B78     	 ldrb r3,[r3]
 2437 0592 012B     	 cmp r3,#1
 2438 0594 4DD1     	 bne .L100
 465:../main.c     **** 
 466:../main.c     **** 			if(CAN_new_meassage == 1){
 2439              	 .loc 4 466 0
 2440 0596 1B4B     	 ldr r3,.L132+84
 2441 0598 1B78     	 ldrb r3,[r3]
 2442 059a 012B     	 cmp r3,#1
 2443 059c 38D1     	 bne .L101
 467:../main.c     **** 				speed_ref = CAN_speed_ref;
 2444              	 .loc 4 467 0
 2445 059e 1A4B     	 ldr r3,.L132+88
 2446 05a0 1B68     	 ldr r3,[r3]
 2447 05a2 1A4A     	 ldr r2,.L132+92
 2448 05a4 1360     	 str r3,[r2]
 468:../main.c     **** 				CAN_new_meassage = 0;
 2449              	 .loc 4 468 0
 2450 05a6 174B     	 ldr r3,.L132+84
 2451 05a8 0022     	 movs r2,#0
 2452 05aa 1A70     	 strb r2,[r3]
 2453 05ac 36E0     	 b .L102
 2454              	.L133:
 2455 05ae 00BF     	 .align 3
 2456              	.L132:
 2457 05b0 F1D4C853 	 .word 1405670641
 2458 05b4 FB210940 	 .word 1074340347
 2459 05b8 4DC90777 	 .word 1996998989
 2460 05bc 46DF913F 	 .word 1066524486
 2461 05c0 A038DB37 	 .word 937113760
 2462 05c4 52C10040 	 .word 1073791314
 2463 05c8 A038DB37 	 .word 937113760
 2464 05cc 52C11040 	 .word 1074839890
 2465 05d0 93761F57 	 .word 1461679763
 2466 05d4 5555E53F 	 .word 1071994197
 2467 05d8 00000000 	 .word omega_mech_rps
 2468 05dc 00002640 	 .word 1076232192
 2469 05e0 00000000 	 .word omega_ele_rads
 2470 05e4 00000000 	 .word omega_ele_degs
 2471 05e8 00000000 	 .word Current_U
 2472 05ec 00000000 	 .word Current_V
 2473 05f0 00000000 	 .word Current_W
 2474 05f4 00000000 	 .word angle_phi
 2475 05f8 00000000 	 .word id
 2476 05fc 00000000 	 .word iq
 2477 0600 00000000 	 .word CAN_control
 2478 0604 00000000 	 .word CAN_new_meassage
 2479 0608 00000000 	 .word CAN_speed_ref
 2480 060c 00000000 	 .word speed_ref
 2481              	.L101:
 469:../main.c     **** 			}
 470:../main.c     **** 			else{
 471:../main.c     **** 				CAN_no_com_counter ++;
 2482              	 .loc 4 471 0
 2483 0610 B74B     	 ldr r3,.L134+32
 2484 0612 1B78     	 ldrb r3,[r3]
 2485 0614 0133     	 adds r3,r3,#1
 2486 0616 DAB2     	 uxtb r2,r3
 2487 0618 B54B     	 ldr r3,.L134+32
 2488 061a 1A70     	 strb r2,[r3]
 2489              	.L102:
 472:../main.c     **** 			}
 473:../main.c     **** 
 474:../main.c     **** 			if(CAN_no_com_counter > CAN_NO_COM_TH){
 2490              	 .loc 4 474 0
 2491 061c B44B     	 ldr r3,.L134+32
 2492 061e 1B78     	 ldrb r3,[r3]
 2493 0620 FA2B     	 cmp r3,#250
 2494 0622 06D9     	 bls .L100
 475:../main.c     **** 				//CAN_new_meassage = 0;
 476:../main.c     **** 				CAN_no_com_counter = CAN_NO_COM_TH;
 2495              	 .loc 4 476 0
 2496 0624 B24B     	 ldr r3,.L134+32
 2497 0626 FA22     	 movs r2,#250
 2498 0628 1A70     	 strb r2,[r3]
 477:../main.c     **** 				speed_ref = 0;
 2499              	 .loc 4 477 0
 2500 062a B24B     	 ldr r3,.L134+36
 2501 062c 4FF00002 	 mov r2,#0
 2502 0630 1A60     	 str r2,[r3]
 2503              	.L100:
 478:../main.c     **** 			}
 479:../main.c     **** 		}
 480:../main.c     **** 
 481:../main.c     **** 		omega_ele_rads_ref = ( speed_ref * PPZ ) / WHEEL_R;
 2504              	 .loc 4 481 0
 2505 0632 B04B     	 ldr r3,.L134+36
 2506 0634 D3ED007A 	 flds s15,[r3]
 2507 0638 B2EE067A 	 fconsts s14,#38
 2508 063c 67EE877A 	 fmuls s15,s15,s14
 2509 0640 17EE900A 	 fmrs r0,s15
 2510 0644 FFF7FEFF 	 bl __aeabi_f2d
 2511 0648 0246     	 mov r2,r0
 2512 064a 0B46     	 mov r3,r1
 2513 064c 1046     	 mov r0,r2
 2514 064e 1946     	 mov r1,r3
 2515 0650 9FA3     	 adr r3,.L134
 2516 0652 D3E90023 	 ldrd r2,[r3]
 2517 0656 FFF7FEFF 	 bl __aeabi_ddiv
 2518 065a 0246     	 mov r2,r0
 2519 065c 0B46     	 mov r3,r1
 2520 065e 1046     	 mov r0,r2
 2521 0660 1946     	 mov r1,r3
 2522 0662 FFF7FEFF 	 bl __aeabi_d2f
 2523 0666 0246     	 mov r2,r0
 2524 0668 A34B     	 ldr r3,.L134+40
 2525 066a 1A60     	 str r2,[r3]
 482:../main.c     **** 		 /*
 483:../main.c     **** 		if((omega_ele_rads_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rad
 484:../main.c     **** 			T_ref = 0;
 485:../main.c     **** 		}
 486:../main.c     **** 		else{
 487:../main.c     **** 			if(MOTOR_NUM == 1){
 488:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&T_param_1); // outer control loop q f
 489:../main.c     **** 			}
 490:../main.c     **** 			else{
 491:../main.c     **** 				T_ref = PID_Controller(omega_ele_rads_ref,omega_ele_rads,&omega_param);
 492:../main.c     **** 			}
 493:../main.c     **** 		}
 494:../main.c     **** 		*/
 495:../main.c     **** 
 496:../main.c     **** 		if (Speed_control == 1){
 2526              	 .loc 4 496 0
 2527 066c A34B     	 ldr r3,.L134+44
 2528 066e 1B78     	 ldrb r3,[r3]
 2529 0670 012B     	 cmp r3,#1
 2530 0672 43D1     	 bne .L103
 497:../main.c     **** 			if(omega_mech_rps_ref == 0  && (( -2 < omega_mech_rps) && (omega_mech_rps < 2))){ // no contorl 
 2531              	 .loc 4 497 0
 2532 0674 A24B     	 ldr r3,.L134+48
 2533 0676 D3ED007A 	 flds s15,[r3]
 2534 067a F5EE407A 	 fcmpzs s15
 2535 067e F1EE10FA 	 fmstat
 2536 0682 18D1     	 bne .L104
 2537              	 .loc 4 497 0 is_stmt 0 discriminator 1
 2538 0684 9F4B     	 ldr r3,.L134+52
 2539 0686 D3ED007A 	 flds s15,[r3]
 2540 068a B8EE007A 	 fconsts s14,#128
 2541 068e F4EEC77A 	 fcmpes s15,s14
 2542 0692 F1EE10FA 	 fmstat
 2543 0696 0EDD     	 ble .L104
 2544              	 .loc 4 497 0 discriminator 2
 2545 0698 9A4B     	 ldr r3,.L134+52
 2546 069a D3ED007A 	 flds s15,[r3]
 2547 069e B0EE007A 	 fconsts s14,#0
 2548 06a2 F4EEC77A 	 fcmpes s15,s14
 2549 06a6 F1EE10FA 	 fmstat
 2550 06aa 04D5     	 bpl .L104
 498:../main.c     **** 					T_ref = 0;
 2551              	 .loc 4 498 0 is_stmt 1
 2552 06ac 964B     	 ldr r3,.L134+56
 2553 06ae 4FF00002 	 mov r2,#0
 2554 06b2 1A60     	 str r2,[r3]
 2555 06b4 0BE0     	 b .L107
 2556              	.L104:
 499:../main.c     **** 				}
 500:../main.c     **** 			else{
 501:../main.c     **** 				if(MOTOR_NUM == 1){
 502:../main.c     **** 					T_ref = PID_Controller(omega_mech_rps_ref,omega_mech_rps,&T_param_1); // outer control loop q 
 503:../main.c     **** 				}
 504:../main.c     **** 				else{
 505:../main.c     **** 					T_ref = PID_Controller(omega_mech_rps_ref,omega_mech_rps,&omega_param);
 2557              	 .loc 4 505 0
 2558 06b6 924B     	 ldr r3,.L134+48
 2559 06b8 1A68     	 ldr r2,[r3]
 2560 06ba 924B     	 ldr r3,.L134+52
 2561 06bc 1B68     	 ldr r3,[r3]
 2562 06be 1046     	 mov r0,r2
 2563 06c0 1946     	 mov r1,r3
 2564 06c2 924A     	 ldr r2,.L134+60
 2565 06c4 FFF7FEFF 	 bl PID_Controller
 2566 06c8 0246     	 mov r2,r0
 2567 06ca 8F4B     	 ldr r3,.L134+56
 2568 06cc 1A60     	 str r2,[r3]
 2569              	.L107:
 506:../main.c     **** 				}
 507:../main.c     **** 			}
 508:../main.c     **** 			/*
 509:../main.c     **** 			// start help
 510:../main.c     **** 			if(omega_mech_rps_ref != 0 && omega_mech_rps == 0){
 511:../main.c     **** 				//start_help_count
 512:../main.c     **** 
 513:../main.c     **** 				if(omega_mech_rps_ref > 0)T_ref = T_ref + 0.15;
 514:../main.c     **** 				else if(omega_mech_rps_ref > 0)T_ref = T_ref - 0.15;
 515:../main.c     **** 			}
 516:../main.c     **** 			*/
 517:../main.c     **** 
 518:../main.c     **** 			if(MOTOR_NUM == 1 || MOTOR_NUM == 10) {
 519:../main.c     **** 				iq_ref =  T_ref / K_T; // dirction for motor 1
 2570              	 .loc 4 519 0
 2571 06ce 8E4B     	 ldr r3,.L134+56
 2572 06d0 1B68     	 ldr r3,[r3]
 2573 06d2 1846     	 mov r0,r3
 2574 06d4 FFF7FEFF 	 bl __aeabi_f2d
 2575 06d8 0246     	 mov r2,r0
 2576 06da 0B46     	 mov r3,r1
 2577 06dc 1046     	 mov r0,r2
 2578 06de 1946     	 mov r1,r3
 2579 06e0 7DA3     	 adr r3,.L134+8
 2580 06e2 D3E90023 	 ldrd r2,[r3]
 2581 06e6 FFF7FEFF 	 bl __aeabi_ddiv
 2582 06ea 0246     	 mov r2,r0
 2583 06ec 0B46     	 mov r3,r1
 2584 06ee 1046     	 mov r0,r2
 2585 06f0 1946     	 mov r1,r3
 2586 06f2 FFF7FEFF 	 bl __aeabi_d2f
 2587 06f6 0246     	 mov r2,r0
 2588 06f8 854B     	 ldr r3,.L134+64
 2589 06fa 1A60     	 str r2,[r3]
 2590              	.L103:
 520:../main.c     **** 			}
 521:../main.c     **** 			else{
 522:../main.c     **** 				iq_ref = - T_ref / K_T;// dirction for motor not 1
 523:../main.c     **** 			}
 524:../main.c     **** 
 525:../main.c     **** 		}
 526:../main.c     **** 
 527:../main.c     **** 
 528:../main.c     **** 		//iq_ref = T_ref / K_T;// dirction for motor 1
 529:../main.c     **** 
 530:../main.c     **** 		//limit to IQ_REF_MAx limit
 531:../main.c     **** 		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 2591              	 .loc 4 531 0
 2592 06fc 844B     	 ldr r3,.L134+64
 2593 06fe D3ED007A 	 flds s15,[r3]
 2594 0702 B9EE047A 	 fconsts s14,#148
 2595 0706 F4EEC77A 	 fcmpes s15,s14
 2596 070a F1EE10FA 	 fmstat
 2597 070e 02D5     	 bpl .L108
 2598              	 .loc 4 531 0 is_stmt 0 discriminator 1
 2599 0710 7F4B     	 ldr r3,.L134+64
 2600 0712 804A     	 ldr r2,.L134+68
 2601 0714 1A60     	 str r2,[r3]
 2602              	.L108:
 532:../main.c     **** 		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 2603              	 .loc 4 532 0 is_stmt 1
 2604 0716 7E4B     	 ldr r3,.L134+64
 2605 0718 D3ED007A 	 flds s15,[r3]
 2606 071c B1EE047A 	 fconsts s14,#20
 2607 0720 F4EEC77A 	 fcmpes s15,s14
 2608 0724 F1EE10FA 	 fmstat
 2609 0728 02DD     	 ble .L110
 2610              	 .loc 4 532 0 is_stmt 0 discriminator 1
 2611 072a 794B     	 ldr r3,.L134+64
 2612 072c 7A4A     	 ldr r2,.L134+72
 2613 072e 1A60     	 str r2,[r3]
 2614              	.L110:
 533:../main.c     **** 
 534:../main.c     **** 		if(Torque_control == 1){
 2615              	 .loc 4 534 0 is_stmt 1
 2616 0730 7A4B     	 ldr r3,.L134+76
 2617 0732 1B78     	 ldrb r3,[r3]
 2618 0734 012B     	 cmp r3,#1
 2619 0736 16D1     	 bne .L112
 535:../main.c     **** 			Vd = PID_Controller(0.0,id,&Id_param);
 2620              	 .loc 4 535 0
 2621 0738 794B     	 ldr r3,.L134+80
 2622 073a 1B68     	 ldr r3,[r3]
 2623 073c 4FF00000 	 mov r0,#0
 2624 0740 1946     	 mov r1,r3
 2625 0742 784A     	 ldr r2,.L134+84
 2626 0744 FFF7FEFF 	 bl PID_Controller
 2627 0748 0246     	 mov r2,r0
 2628 074a 774B     	 ldr r3,.L134+88
 2629 074c 1A60     	 str r2,[r3]
 536:../main.c     **** 			Vq = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
 2630              	 .loc 4 536 0
 2631 074e 704B     	 ldr r3,.L134+64
 2632 0750 1A68     	 ldr r2,[r3]
 2633 0752 764B     	 ldr r3,.L134+92
 2634 0754 1B68     	 ldr r3,[r3]
 2635 0756 1046     	 mov r0,r2
 2636 0758 1946     	 mov r1,r3
 2637 075a 754A     	 ldr r2,.L134+96
 2638 075c FFF7FEFF 	 bl PID_Controller
 2639 0760 0246     	 mov r2,r0
 2640 0762 744B     	 ldr r3,.L134+100
 2641 0764 1A60     	 str r2,[r3]
 2642              	.L112:
 537:../main.c     **** 		}
 538:../main.c     **** 
 539:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9
 540:../main.c     **** 
 541:../main.c     **** 		// dq to alpha beta for voltage
 542:../main.c     **** 		Valpha = Vd*cos_phi - Vq*sin_phi;
 2643              	 .loc 4 542 0
 2644 0766 704B     	 ldr r3,.L134+88
 2645 0768 93ED007A 	 flds s14,[r3]
 2646 076c D7ED017A 	 flds s15,[r7,#4]
 2647 0770 27EE277A 	 fmuls s14,s14,s15
 2648 0774 6F4B     	 ldr r3,.L134+100
 2649 0776 D3ED006A 	 flds s13,[r3]
 2650 077a D7ED007A 	 flds s15,[r7]
 2651 077e 66EEA77A 	 fmuls s15,s13,s15
 2652 0782 77EE677A 	 fsubs s15,s14,s15
 2653 0786 6C4B     	 ldr r3,.L134+104
 2654 0788 C3ED007A 	 fsts s15,[r3]
 543:../main.c     **** 		Vbeta = Vd*sin_phi + Vq*cos_phi;
 2655              	 .loc 4 543 0
 2656 078c 664B     	 ldr r3,.L134+88
 2657 078e 93ED007A 	 flds s14,[r3]
 2658 0792 D7ED007A 	 flds s15,[r7]
 2659 0796 27EE277A 	 fmuls s14,s14,s15
 2660 079a 664B     	 ldr r3,.L134+100
 2661 079c D3ED006A 	 flds s13,[r3]
 2662 07a0 D7ED017A 	 flds s15,[r7,#4]
 2663 07a4 66EEA77A 	 fmuls s15,s13,s15
 2664 07a8 77EE277A 	 fadds s15,s14,s15
 2665 07ac 634B     	 ldr r3,.L134+108
 2666 07ae C3ED007A 	 fsts s15,[r3]
 544:../main.c     **** 
 545:../main.c     **** 		// calc angle for SVM app
 546:../main.c     **** 		angle_ab_rad = atanf(Vbeta/Valpha);
 2667              	 .loc 4 546 0
 2668 07b2 624B     	 ldr r3,.L134+108
 2669 07b4 93ED007A 	 flds s14,[r3]
 2670 07b8 5F4B     	 ldr r3,.L134+104
 2671 07ba D3ED007A 	 flds s15,[r3]
 2672 07be C7EE277A 	 fdivs s15,s14,s15
 2673 07c2 17EE900A 	 fmrs r0,s15
 2674 07c6 FFF7FEFF 	 bl atanf
 2675 07ca 0246     	 mov r2,r0
 2676 07cc 5C4B     	 ldr r3,.L134+112
 2677 07ce 1A60     	 str r2,[r3]
 547:../main.c     **** 		angle_ab = angle_ab_rad/Pi180;
 2678              	 .loc 4 547 0
 2679 07d0 5B4B     	 ldr r3,.L134+112
 2680 07d2 1B68     	 ldr r3,[r3]
 2681 07d4 1846     	 mov r0,r3
 2682 07d6 FFF7FEFF 	 bl __aeabi_f2d
 2683 07da 0246     	 mov r2,r0
 2684 07dc 0B46     	 mov r3,r1
 2685 07de 1046     	 mov r0,r2
 2686 07e0 1946     	 mov r1,r3
 2687 07e2 3FA3     	 adr r3,.L134+16
 2688 07e4 D3E90023 	 ldrd r2,[r3]
 2689 07e8 FFF7FEFF 	 bl __aeabi_ddiv
 2690 07ec 0246     	 mov r2,r0
 2691 07ee 0B46     	 mov r3,r1
 2692 07f0 1046     	 mov r0,r2
 2693 07f2 1946     	 mov r1,r3
 2694 07f4 FFF7FEFF 	 bl __aeabi_d2f
 2695 07f8 0246     	 mov r2,r0
 2696 07fa 524B     	 ldr r3,.L134+116
 2697 07fc 1A60     	 str r2,[r3]
 548:../main.c     **** 
 549:../main.c     **** 		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 2698              	 .loc 4 549 0
 2699 07fe 4E4B     	 ldr r3,.L134+104
 2700 0800 D3ED007A 	 flds s15,[r3]
 2701 0804 F5EEC07A 	 fcmpezs s15
 2702 0808 F1EE10FA 	 fmstat
 2703 080c 0AD5     	 bpl .L129
 2704              	 .loc 4 549 0 is_stmt 0 discriminator 1
 2705 080e 4D4B     	 ldr r3,.L134+116
 2706 0810 D3ED007A 	 flds s15,[r3]
 2707 0814 9FED4C7A 	 flds s14,.L134+120
 2708 0818 77EE877A 	 fadds s15,s15,s14
 2709 081c 494B     	 ldr r3,.L134+116
 2710 081e C3ED007A 	 fsts s15,[r3]
 2711 0822 11E0     	 b .L115
 2712              	.L129:
 550:../main.c     **** 		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 2713              	 .loc 4 550 0 is_stmt 1
 2714 0824 454B     	 ldr r3,.L134+108
 2715 0826 D3ED007A 	 flds s15,[r3]
 2716 082a F5EEC07A 	 fcmpezs s15
 2717 082e F1EE10FA 	 fmstat
 2718 0832 09D5     	 bpl .L115
 2719              	 .loc 4 550 0 is_stmt 0 discriminator 1
 2720 0834 434B     	 ldr r3,.L134+116
 2721 0836 D3ED007A 	 flds s15,[r3]
 2722 083a 9FED447A 	 flds s14,.L134+124
 2723 083e 77EE877A 	 fadds s15,s15,s14
 2724 0842 404B     	 ldr r3,.L134+116
 2725 0844 C3ED007A 	 fsts s15,[r3]
 2726              	.L115:
 551:../main.c     **** 
 552:../main.c     **** 		// shortend to one line
 553:../main.c     **** 		// amplitude calculation
 554:../main.c     **** 		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 2727              	 .loc 4 554 0 is_stmt 1
 2728 0848 3B4B     	 ldr r3,.L134+104
 2729 084a 93ED007A 	 flds s14,[r3]
 2730 084e 3A4B     	 ldr r3,.L134+104
 2731 0850 D3ED007A 	 flds s15,[r3]
 2732 0854 27EE277A 	 fmuls s14,s14,s15
 2733 0858 384B     	 ldr r3,.L134+108
 2734 085a D3ED006A 	 flds s13,[r3]
 2735 085e 374B     	 ldr r3,.L134+108
 2736 0860 D3ED007A 	 flds s15,[r3]
 2737 0864 66EEA77A 	 fmuls s15,s13,s15
 2738 0868 77EE277A 	 fadds s15,s14,s15
 2739 086c 17EE900A 	 fmrs r0,s15
 2740 0870 FFF7FEFF 	 bl sqrtf
 2741 0874 0246     	 mov r2,r0
 2742 0876 364B     	 ldr r3,.L134+128
 2743 0878 1A60     	 str r2,[r3]
 555:../main.c     **** 
 556:../main.c     **** 		//K_inv = V/m --> m = V / K_inv
 557:../main.c     **** 		modulation_index = amplitude_ab/K_inv;
 2744              	 .loc 4 557 0
 2745 087a 354B     	 ldr r3,.L134+128
 2746 087c 1B68     	 ldr r3,[r3]
 2747 087e 1846     	 mov r0,r3
 2748 0880 FFF7FEFF 	 bl __aeabi_f2d
 2749 0884 0246     	 mov r2,r0
 2750 0886 0B46     	 mov r3,r1
 2751 0888 1046     	 mov r0,r2
 2752 088a 1946     	 mov r1,r3
 2753 088c 16A3     	 adr r3,.L134+24
 2754 088e D3E90023 	 ldrd r2,[r3]
 2755 0892 FFF7FEFF 	 bl __aeabi_ddiv
 2756 0896 0246     	 mov r2,r0
 2757 0898 0B46     	 mov r3,r1
 2758 089a 1046     	 mov r0,r2
 2759 089c 1946     	 mov r1,r3
 2760 089e FFF7FEFF 	 bl __aeabi_d2f
 2761 08a2 0246     	 mov r2,r0
 2762 08a4 2B4B     	 ldr r3,.L134+132
 2763 08a6 1A60     	 str r2,[r3]
 558:../main.c     **** 
 559:../main.c     **** 		//scale maximum 1 to 10000 -->
 560:../main.c     **** 		modulation_index_scaled = 10000*modulation_index;
 2764              	 .loc 4 560 0
 2765 08a8 2A4B     	 ldr r3,.L134+132
 2766 08aa D3ED007A 	 flds s15,[r3]
 2767 08ae 9FED2A7A 	 flds s14,.L134+136
 2768 08b2 67EE877A 	 fmuls s15,s15,s14
 2769 08b6 294B     	 ldr r3,.L134+140
 2770 08b8 C3ED007A 	 fsts s15,[r3]
 561:../main.c     **** 
 562:../main.c     **** 
 563:../main.c     **** 		// shortened ca 4% improvemnt
 564:../main.c     **** 		//modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;
 565:../main.c     **** 
 566:../main.c     **** 		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the ti
 2771              	 .loc 4 566 0
 2772 08bc 2848     	 ldr r0,.L134+144
 2773 08be FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 567:../main.c     **** 
 568:../main.c     **** }
 2774              	 .loc 4 568 0
 2775 08c2 1037     	 adds r7,r7,#16
 2776              	.LCFI84:
 2777              	 .cfi_def_cfa_offset 24
 2778 08c4 BD46     	 mov sp,r7
 2779              	.LCFI85:
 2780              	 .cfi_def_cfa_register 13
 2781              	 
 2782 08c6 BDEC028B 	 fldmfdd sp!,{d8}
 2783              	.LCFI86:
 2784              	 .cfi_restore 80
 2785              	 .cfi_restore 81
 2786              	 .cfi_def_cfa_offset 16
 2787 08ca B0BD     	 pop {r4,r5,r7,pc}
 2788              	.L135:
 2789 08cc AFF30080 	 .align 3
 2790              	.L134:
 2791 08d0 48E17A14 	 .word 343597384
 2792 08d4 AE47B13F 	 .word 1068582830
 2793 08d8 E17A14AE 	 .word -1374389535
 2794 08dc 47E1CA3F 	 .word 1070260551
 2795 08e0 4DC90777 	 .word 1996998989
 2796 08e4 46DF913F 	 .word 1066524486
 2797 08e8 EE7D9BC9 	 .word -912556562
 2798 08ec 1B212240 	 .word 1075978523
 2799 08f0 00000000 	 .word CAN_no_com_counter
 2800 08f4 00000000 	 .word speed_ref
 2801 08f8 00000000 	 .word omega_ele_rads_ref
 2802 08fc 00000000 	 .word Speed_control
 2803 0900 00000000 	 .word omega_mech_rps_ref
 2804 0904 00000000 	 .word omega_mech_rps
 2805 0908 00000000 	 .word T_ref
 2806 090c 00000000 	 .word omega_param
 2807 0910 00000000 	 .word iq_ref
 2808 0914 0000A0C0 	 .word -1063256064
 2809 0918 0000A040 	 .word 1084227584
 2810 091c 00000000 	 .word Torque_control
 2811 0920 00000000 	 .word id
 2812 0924 00000000 	 .word Id_param
 2813 0928 00000000 	 .word Vd
 2814 092c 00000000 	 .word iq
 2815 0930 00000000 	 .word Iq_param
 2816 0934 00000000 	 .word Vq
 2817 0938 00000000 	 .word Valpha
 2818 093c 00000000 	 .word Vbeta
 2819 0940 00000000 	 .word angle_ab_rad
 2820 0944 00000000 	 .word angle_ab
 2821 0948 00003443 	 .word 1127481344
 2822 094c 0000B443 	 .word 1135869952
 2823 0950 00000000 	 .word amplitude_ab
 2824 0954 00000000 	 .word modulation_index
 2825 0958 00401C46 	 .word 1176256512
 2826 095c 00000000 	 .word modulation_index_scaled
 2827 0960 00000000 	 .word status_LED_red_cal_time
 2828              	 .cfi_endproc
 2829              	.LFE485:
 2831 0964 AFF30080 	 .section .text.PID_Controller,"ax",%progbits
 2832              	 .align 2
 2833              	 .global PID_Controller
 2834              	 .thumb
 2835              	 .thumb_func
 2837              	PID_Controller:
 2838              	.LFB486:
 569:../main.c     **** 
 570:../main.c     **** // PID Controller
 571:../main.c     **** float PID_Controller(float SetPoint,float ActValue,PID_param *param){
 2839              	 .loc 4 571 0
 2840              	 .cfi_startproc
 2841              	 
 2842              	 
 2843              	 
 2844 0000 80B4     	 push {r7}
 2845              	.LCFI87:
 2846              	 .cfi_def_cfa_offset 4
 2847              	 .cfi_offset 7,-4
 2848 0002 89B0     	 sub sp,sp,#36
 2849              	.LCFI88:
 2850              	 .cfi_def_cfa_offset 40
 2851 0004 00AF     	 add r7,sp,#0
 2852              	.LCFI89:
 2853              	 .cfi_def_cfa_register 7
 2854 0006 F860     	 str r0,[r7,#12]
 2855 0008 B960     	 str r1,[r7,#8]
 2856 000a 7A60     	 str r2,[r7,#4]
 572:../main.c     **** 
 573:../main.c     **** 	float Deviation = SetPoint - ActValue;
 2857              	 .loc 4 573 0
 2858 000c 97ED037A 	 flds s14,[r7,#12]
 2859 0010 D7ED027A 	 flds s15,[r7,#8]
 2860 0014 77EE677A 	 fsubs s15,s14,s15
 2861 0018 C7ED067A 	 fsts s15,[r7,#24]
 574:../main.c     **** 	float temp1, temp2;
 575:../main.c     **** 
 576:../main.c     **** 	 temp1 = param->P*Deviation;
 2862              	 .loc 4 576 0
 2863 001c 7B68     	 ldr r3,[r7,#4]
 2864 001e 93ED007A 	 flds s14,[r3]
 2865 0022 D7ED067A 	 flds s15,[r7,#24]
 2866 0026 67EE277A 	 fmuls s15,s14,s15
 2867 002a C7ED057A 	 fsts s15,[r7,#20]
 577:../main.c     **** 	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;
 2868              	 .loc 4 577 0
 2869 002e 7B68     	 ldr r3,[r7,#4]
 2870 0030 93ED017A 	 flds s14,[r3,#4]
 2871 0034 214B     	 ldr r3,.L145
 2872 0036 D3ED007A 	 flds s15,[r3]
 2873 003a 27EE277A 	 fmuls s14,s14,s15
 2874 003e D7ED067A 	 flds s15,[r7,#24]
 2875 0042 27EE277A 	 fmuls s14,s14,s15
 2876 0046 D7ED057A 	 flds s15,[r7,#20]
 2877 004a 37EE277A 	 fadds s14,s14,s15
 2878 004e 7B68     	 ldr r3,[r7,#4]
 2879 0050 D3ED087A 	 flds s15,[r3,#32]
 2880 0054 77EE277A 	 fadds s15,s14,s15
 2881 0058 C7ED077A 	 fsts s15,[r7,#28]
 578:../main.c     **** 
 579:../main.c     **** 	 if (temp2 >= param->MaxLimit){
 2882              	 .loc 4 579 0
 2883 005c 7B68     	 ldr r3,[r7,#4]
 2884 005e 93ED037A 	 flds s14,[r3,#12]
 2885 0062 D7ED077A 	 flds s15,[r7,#28]
 2886 0066 B4EEE77A 	 fcmpes s14,s15
 2887 006a F1EE10FA 	 fmstat
 2888 006e 03D8     	 bhi .L144
 580:../main.c     **** 		 temp2 = param->MaxLimit;
 2889              	 .loc 4 580 0
 2890 0070 7B68     	 ldr r3,[r7,#4]
 2891 0072 DB68     	 ldr r3,[r3,#12]
 2892 0074 FB61     	 str r3,[r7,#28]
 2893 0076 0CE0     	 b .L139
 2894              	.L144:
 581:../main.c     **** 	 }
 582:../main.c     **** 	 else if (temp2 < param->MinLimit){
 2895              	 .loc 4 582 0
 2896 0078 7B68     	 ldr r3,[r7,#4]
 2897 007a 93ED047A 	 flds s14,[r3,#16]
 2898 007e D7ED077A 	 flds s15,[r7,#28]
 2899 0082 B4EEE77A 	 fcmpes s14,s15
 2900 0086 F1EE10FA 	 fmstat
 2901 008a 02DD     	 ble .L139
 583:../main.c     **** 		 temp2 = param->MinLimit;
 2902              	 .loc 4 583 0
 2903 008c 7B68     	 ldr r3,[r7,#4]
 2904 008e 1B69     	 ldr r3,[r3,#16]
 2905 0090 FB61     	 str r3,[r7,#28]
 2906              	.L139:
 584:../main.c     **** 	 }
 585:../main.c     **** 
 586:../main.c     **** 	 param->Output_z = temp2 - temp1;
 2907              	 .loc 4 586 0
 2908 0092 97ED077A 	 flds s14,[r7,#28]
 2909 0096 D7ED057A 	 flds s15,[r7,#20]
 2910 009a 77EE677A 	 fsubs s15,s14,s15
 2911 009e 7B68     	 ldr r3,[r7,#4]
 2912 00a0 C3ED087A 	 fsts s15,[r3,#32]
 587:../main.c     **** 
 588:../main.c     **** 	 param->Output = temp2;
 2913              	 .loc 4 588 0
 2914 00a4 7B68     	 ldr r3,[r7,#4]
 2915 00a6 FA69     	 ldr r2,[r7,#28]
 2916 00a8 5A61     	 str r2,[r3,#20]
 589:../main.c     **** 
 590:../main.c     **** 	return param->Output;
 2917              	 .loc 4 590 0
 2918 00aa 7B68     	 ldr r3,[r7,#4]
 2919 00ac 5B69     	 ldr r3,[r3,#20]
 591:../main.c     **** 
 592:../main.c     **** }
 2920              	 .loc 4 592 0
 2921 00ae 1846     	 mov r0,r3
 2922 00b0 2437     	 adds r7,r7,#36
 2923              	.LCFI90:
 2924              	 .cfi_def_cfa_offset 4
 2925 00b2 BD46     	 mov sp,r7
 2926              	.LCFI91:
 2927              	 .cfi_def_cfa_register 13
 2928              	 
 2929 00b4 5DF8047B 	 ldr r7,[sp],#4
 2930              	.LCFI92:
 2931              	 .cfi_restore 7
 2932              	 .cfi_def_cfa_offset 0
 2933 00b8 7047     	 bx lr
 2934              	.L146:
 2935 00ba 00BF     	 .align 2
 2936              	.L145:
 2937 00bc 00000000 	 .word Tcyc
 2938              	 .cfi_endproc
 2939              	.LFE486:
 2941              	 .section .text.readCurrent,"ax",%progbits
 2942              	 .align 2
 2943              	 .global readCurrent
 2944              	 .thumb
 2945              	 .thumb_func
 2947              	readCurrent:
 2948              	.LFB487:
 593:../main.c     **** 
 594:../main.c     **** 
 595:../main.c     **** //Read Current  via SPI-Interface
 596:../main.c     **** float readCurrent(uint8_t ChipSelect){
 2949              	 .loc 4 596 0
 2950              	 .cfi_startproc
 2951              	 
 2952              	 
 2953 0000 80B5     	 push {r7,lr}
 2954              	.LCFI93:
 2955              	 .cfi_def_cfa_offset 8
 2956              	 .cfi_offset 7,-8
 2957              	 .cfi_offset 14,-4
 2958 0002 86B0     	 sub sp,sp,#24
 2959              	.LCFI94:
 2960              	 .cfi_def_cfa_offset 32
 2961 0004 00AF     	 add r7,sp,#0
 2962              	.LCFI95:
 2963              	 .cfi_def_cfa_register 7
 2964 0006 0346     	 mov r3,r0
 2965 0008 FB71     	 strb r3,[r7,#7]
 597:../main.c     **** 	uint8_t ReadData[2];
 598:../main.c     **** 
 599:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, ChipSelect);
 2966              	 .loc 4 599 0
 2967 000a FB79     	 ldrb r3,[r7,#7]
 2968 000c 9BB2     	 uxth r3,r3
 2969 000e 2248     	 ldr r0,.L149
 2970 0010 1946     	 mov r1,r3
 2971 0012 FFF7FEFF 	 bl BUS_IO_Write
 600:../main.c     **** 	SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2U);
 2972              	 .loc 4 600 0
 2973 0016 07F10C03 	 add r3,r7,#12
 2974 001a 2048     	 ldr r0,.L149+4
 2975 001c 1946     	 mov r1,r3
 2976 001e 0222     	 movs r2,#2
 2977 0020 FFF7FEFF 	 bl SPI_MASTER_Receive
 601:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, 0b111);
 2978              	 .loc 4 601 0
 2979 0024 1C48     	 ldr r0,.L149
 2980 0026 0721     	 movs r1,#7
 2981 0028 FFF7FEFF 	 bl BUS_IO_Write
 602:../main.c     **** 	ReadData[0] = ReadData[0] & 0X1F; 									//cutting away the 3 info bits
 2982              	 .loc 4 602 0
 2983 002c 3B7B     	 ldrb r3,[r7,#12]
 2984 002e 03F01F03 	 and r3,r3,#31
 2985 0032 DBB2     	 uxtb r3,r3
 2986 0034 3B73     	 strb r3,[r7,#12]
 603:../main.c     **** 	uint16_t iCurrent = ReadData[0]<<8 | ReadData[1];					//combine Data
 2987              	 .loc 4 603 0
 2988 0036 3B7B     	 ldrb r3,[r7,#12]
 2989 0038 1B02     	 lsls r3,r3,#8
 2990 003a 9AB2     	 uxth r2,r3
 2991 003c 7B7B     	 ldrb r3,[r7,#13]
 2992 003e 9BB2     	 uxth r3,r3
 2993 0040 1343     	 orrs r3,r3,r2
 2994 0042 9BB2     	 uxth r3,r3
 2995 0044 FB82     	 strh r3,[r7,#22]
 604:../main.c     **** 
 605:../main.c     **** 	// calculation of the current
 606:../main.c     **** 	float fCurrent = ((float)iCurrent - 4096.0)/160.0;					// ATTENTION: value has to be divided by 16
 2996              	 .loc 4 606 0
 2997 0046 FB8A     	 ldrh r3,[r7,#22]
 2998 0048 07EE903A 	 fmsr s15,r3
 2999 004c F8EE677A 	 fuitos s15,s15
 3000 0050 17EE900A 	 fmrs r0,s15
 3001 0054 FFF7FEFF 	 bl __aeabi_f2d
 3002 0058 0246     	 mov r2,r0
 3003 005a 0B46     	 mov r3,r1
 3004 005c 1046     	 mov r0,r2
 3005 005e 1946     	 mov r1,r3
 3006 0060 4FF00002 	 mov r2,#0
 3007 0064 0E4B     	 ldr r3,.L149+8
 3008 0066 FFF7FEFF 	 bl __aeabi_dsub
 3009 006a 0246     	 mov r2,r0
 3010 006c 0B46     	 mov r3,r1
 3011 006e 1046     	 mov r0,r2
 3012 0070 1946     	 mov r1,r3
 3013 0072 4FF00002 	 mov r2,#0
 3014 0076 0B4B     	 ldr r3,.L149+12
 3015 0078 FFF7FEFF 	 bl __aeabi_ddiv
 3016 007c 0246     	 mov r2,r0
 3017 007e 0B46     	 mov r3,r1
 3018 0080 1046     	 mov r0,r2
 3019 0082 1946     	 mov r1,r3
 3020 0084 FFF7FEFF 	 bl __aeabi_d2f
 3021 0088 0346     	 mov r3,r0
 3022 008a 3B61     	 str r3,[r7,#16]
 607:../main.c     **** 
 608:../main.c     **** 	return fCurrent;
 3023              	 .loc 4 608 0
 3024 008c 3B69     	 ldr r3,[r7,#16]
 609:../main.c     **** }
 3025              	 .loc 4 609 0
 3026 008e 1846     	 mov r0,r3
 3027 0090 1837     	 adds r7,r7,#24
 3028              	.LCFI96:
 3029              	 .cfi_def_cfa_offset 8
 3030 0092 BD46     	 mov sp,r7
 3031              	.LCFI97:
 3032              	 .cfi_def_cfa_register 13
 3033              	 
 3034 0094 80BD     	 pop {r7,pc}
 3035              	.L150:
 3036 0096 00BF     	 .align 2
 3037              	.L149:
 3038 0098 00000000 	 .word SPI_ChipSelect
 3039 009c 00000000 	 .word SPI_MASTER_0
 3040 00a0 0000B040 	 .word 1085276160
 3041 00a4 00006440 	 .word 1080295424
 3042              	 .cfi_endproc
 3043              	.LFE487:
 3045              	 .text
 3046              	.Letext0:
 3047              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3048              	 .file 6 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3049              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 3050              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 3051              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_scu.h"
 3052              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 3053              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_spi.h"
 3054              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master.h"
 3055              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io.h"
 3056              	 .file 14 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_eru.h"
 3057              	 .file 15 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_ccu8.h"
 3058              	 .file 16 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 3059              	 .file 17 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm.h"
 3060              	 .file 18 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 3061              	 .file 19 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 3062              	 .file 20 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 3063              	 .file 21 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DAVE.h"
 3064              	 .file 22 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 3065              	 .file 23 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 3066              	 .file 24 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 3067              	 .file 25 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master_extern.h"
 3068              	 .file 26 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io_extern.h"
 3069              	 .file 27 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt_extern.h"
 3070              	 .file 28 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 3071              	 .file 29 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:163    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:167    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:207    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:211    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:250    .text.PIN_INTERRUPT_GetPinValue:00000000 $t
    {standard input}:254    .text.PIN_INTERRUPT_GetPinValue:00000000 PIN_INTERRUPT_GetPinValue
    {standard input}:299    .data.Torque_control:00000000 Torque_control
    {standard input}:305    .data.Speed_control:00000000 Speed_control
    {standard input}:311    .bss.CAN_control:00000000 CAN_control
    {standard input}:312    .bss.CAN_control:00000000 $d
                            *COM*:00000004 Current_U
                            *COM*:00000004 Current_V
                            *COM*:00000004 Current_W
    {standard input}:321    .data.lookup_table:00000000 lookup_table
    {standard input}:318    .data.lookup_table:00000000 $d
    {standard input}:390    .bss.sector:00000000 sector
    {standard input}:391    .bss.sector:00000000 $d
    {standard input}:396    .bss.direction:00000000 direction
    {standard input}:397    .bss.direction:00000000 $d
    {standard input}:403    .bss.enc_val:00000000 enc_val
    {standard input}:400    .bss.enc_val:00000000 $d
    {standard input}:410    .bss.time_since_A:00000000 time_since_A
    {standard input}:407    .bss.time_since_A:00000000 $d
    {standard input}:417    .bss.time_since_B:00000000 time_since_B
    {standard input}:414    .bss.time_since_B:00000000 $d
    {standard input}:424    .bss.time_since_C:00000000 time_since_C
    {standard input}:421    .bss.time_since_C:00000000 $d
    {standard input}:431    .data.time_180deg:00000000 time_180deg
    {standard input}:428    .data.time_180deg:00000000 $d
    {standard input}:438    .data.time_180deg_cal:00000000 time_180deg_cal
    {standard input}:435    .data.time_180deg_cal:00000000 $d
                            *COM*:00000001 last_Hall_trig
    {standard input}:446    .data.angle_in_sector:00000000 angle_in_sector
    {standard input}:443    .data.angle_in_sector:00000000 $d
    {standard input}:453    .bss.angle_phi:00000000 angle_phi
    {standard input}:450    .bss.angle_phi:00000000 $d
                            *COM*:00000004 ialpha
                            *COM*:00000004 ibeta
                            *COM*:00000004 iq
                            *COM*:00000004 id
                            *COM*:00000004 Valpha
                            *COM*:00000004 Vbeta
    {standard input}:466    .bss.omega_ele_rads:00000000 omega_ele_rads
    {standard input}:463    .bss.omega_ele_rads:00000000 $d
    {standard input}:473    .bss.omega_mech_rps:00000000 omega_mech_rps
    {standard input}:470    .bss.omega_mech_rps:00000000 $d
    {standard input}:480    .bss.omega_mech_rps_temp:00000000 omega_mech_rps_temp
    {standard input}:477    .bss.omega_mech_rps_temp:00000000 $d
    {standard input}:487    .bss.omega_ele_degs:00000000 omega_ele_degs
    {standard input}:484    .bss.omega_ele_degs:00000000 $d
    {standard input}:494    .bss.speed_ref:00000000 speed_ref
    {standard input}:491    .bss.speed_ref:00000000 $d
    {standard input}:501    .bss.omega_ele_rads_ref:00000000 omega_ele_rads_ref
    {standard input}:498    .bss.omega_ele_rads_ref:00000000 $d
    {standard input}:508    .bss.iq_ref:00000000 iq_ref
    {standard input}:505    .bss.iq_ref:00000000 $d
    {standard input}:515    .bss.T_ref:00000000 T_ref
    {standard input}:512    .bss.T_ref:00000000 $d
    {standard input}:522    .bss.Vd:00000000 Vd
    {standard input}:519    .bss.Vd:00000000 $d
    {standard input}:529    .bss.Vq:00000000 Vq
    {standard input}:526    .bss.Vq:00000000 $d
    {standard input}:536    .bss.omega_mech_rps_ref:00000000 omega_mech_rps_ref
    {standard input}:533    .bss.omega_mech_rps_ref:00000000 $d
                            *COM*:00000008 Speeds_int16_r
    {standard input}:544    .bss.CAN_speed_ref:00000000 CAN_speed_ref
    {standard input}:541    .bss.CAN_speed_ref:00000000 $d
    {standard input}:550    .bss.CAN_new_meassage:00000000 CAN_new_meassage
    {standard input}:551    .bss.CAN_new_meassage:00000000 $d
    {standard input}:556    .bss.CAN_no_com_counter:00000000 CAN_no_com_counter
    {standard input}:557    .bss.CAN_no_com_counter:00000000 $d
    {standard input}:563    .bss.distance_180deg_ele_count:00000000 distance_180deg_ele_count
    {standard input}:560    .bss.distance_180deg_ele_count:00000000 $d
    {standard input}:570    .bss.Speed_act:00000000 Speed_act
    {standard input}:567    .bss.Speed_act:00000000 $d
    {standard input}:577    .bss.distance:00000000 distance
    {standard input}:574    .bss.distance:00000000 $d
                            *COM*:00000004 modulation_index
                            *COM*:00000004 modulation_index_scaled
                            *COM*:00000004 angle_ab
                            *COM*:00000004 angle_ab_rad
                            *COM*:00000004 amplitude_ab
    {standard input}:589    .data.Ts:00000000 Ts
    {standard input}:586    .data.Ts:00000000 $d
    {standard input}:596    .data.Tcyc:00000000 Tcyc
    {standard input}:593    .data.Tcyc:00000000 $d
    {standard input}:603    .data.scaling_factor:00000000 scaling_factor
    {standard input}:600    .data.scaling_factor:00000000 $d
                            *COM*:00000004 amplitude_corrected
    {standard input}:610    .bss.count:00000000 count
    {standard input}:611    .bss.count:00000000 $d
    {standard input}:617    .data.offset_pos:00000000 offset_pos
    {standard input}:614    .data.offset_pos:00000000 $d
    {standard input}:624    .data.offset_neg:00000000 offset_neg
    {standard input}:621    .data.offset_neg:00000000 $d
    {standard input}:631    .data.Iq_param:00000000 Iq_param
    {standard input}:628    .data.Iq_param:00000000 $d
    {standard input}:646    .data.Id_param:00000000 Id_param
    {standard input}:643    .data.Id_param:00000000 $d
    {standard input}:661    .data.omega_param:00000000 omega_param
    {standard input}:658    .data.omega_param:00000000 $d
    {standard input}:676    .data.T_param_1:00000000 T_param_1
    {standard input}:673    .data.T_param_1:00000000 $d
    {standard input}:690    .bss.falg_speed_not_new:00000000 falg_speed_not_new
    {standard input}:691    .bss.falg_speed_not_new:00000000 $d
    {standard input}:693    .text.main:00000000 $t
    {standard input}:698    .text.main:00000000 main
    {standard input}:1545   .text.Hall_init:00000000 Hall_init
    {standard input}:1824   .text.Calculation:00000000 Calculation
    {standard input}:773    .text.main:00000064 $d
    {standard input}:783    .text.CAN0_1_IRQHandler:00000000 $t
    {standard input}:788    .text.CAN0_1_IRQHandler:00000000 CAN0_1_IRQHandler
    {standard input}:928    .text.CAN0_1_IRQHandler:000000e8 $d
    {standard input}:938    .text.CAN0_0_IRQHandler:00000000 $t
    {standard input}:943    .text.CAN0_0_IRQHandler:00000000 CAN0_0_IRQHandler
    {standard input}:1016   .text.CAN0_0_IRQHandler:00000050 $d
    {standard input}:1027   .text.CCU43_0_IRQHandler:00000000 $t
    {standard input}:1032   .text.CCU43_0_IRQHandler:00000000 CCU43_0_IRQHandler
    {standard input}:1191   .text.CCU43_0_IRQHandler:00000138 $d
    {standard input}:1207   .text.CCU43_3_IRQHandler:00000000 $t
    {standard input}:1212   .text.CCU43_3_IRQHandler:00000000 CCU43_3_IRQHandler
    {standard input}:1257   .text.CCU43_3_IRQHandler:0000002c $d
    {standard input}:1264   .text.ERU1_2_IRQHandler:00000000 $t
    {standard input}:1269   .text.ERU1_2_IRQHandler:00000000 ERU1_2_IRQHandler
    {standard input}:1668   .text.HallSensor:00000000 HallSensor
    {standard input}:1332   .text.ERU1_2_IRQHandler:00000050 $d
    {standard input}:1341   .text.ERU1_0_IRQHandler:00000000 $t
    {standard input}:1346   .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
    {standard input}:1380   .text.ERU1_0_IRQHandler:00000020 $d
    {standard input}:1387   .text.ERU1_3_IRQHandler:00000000 $t
    {standard input}:1392   .text.ERU1_3_IRQHandler:00000000 ERU1_3_IRQHandler
    {standard input}:1426   .text.ERU1_3_IRQHandler:00000020 $d
    {standard input}:1433   .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:1438   .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:1466   .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:1471   .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:1532   .text.CCU80_3_IRQHandler:00000058 $d
    {standard input}:1540   .text.Hall_init:00000000 $t
    {standard input}:1655   .text.Hall_init:0000008c $d
    {standard input}:1663   .text.HallSensor:00000000 $t
    {standard input}:1805   .text.HallSensor:000000c0 $d
    {standard input}:1819   .text.Calculation:00000000 $t
    {standard input}:2179   .text.Calculation:000002dc $d
    {standard input}:2208   .text.Calculation:00000348 $t
    {standard input}:2947   .text.readCurrent:00000000 readCurrent
    {standard input}:2457   .text.Calculation:000005b0 $d
    {standard input}:2483   .text.Calculation:00000610 $t
    {standard input}:2837   .text.PID_Controller:00000000 PID_Controller
    {standard input}:2791   .text.Calculation:000008d0 $d
    {standard input}:2832   .text.PID_Controller:00000000 $t
    {standard input}:2937   .text.PID_Controller:000000bc $d
    {standard input}:2942   .text.readCurrent:00000000 $t
    {standard input}:3038   .text.readCurrent:00000098 $d
                     .debug_frame:00000010 $d
    {standard input}:2831   .text.Calculation:00000964 $t

UNDEFINED SYMBOLS
DAVE_Init
CAN_NODE_Init
PWM_SVM_Start
f_rec_data
CAN_NODE_0
PWM_SVM_0
CAN_NODE_MO_Receive
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_dadd
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
PWM_SVM_SVMUpdate
Hall_A_ISR
Hall_B_ISR
Hall_C_ISR
__aeabi_ui2d
__aeabi_i2d
__aeabi_dsub
status_LED_red_cal_time
cosf
sinf
atanf
sqrtf
BUS_IO_Write
SPI_MASTER_Receive
SPI_ChipSelect
SPI_MASTER_0
