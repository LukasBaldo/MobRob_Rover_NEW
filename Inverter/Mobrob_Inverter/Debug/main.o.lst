   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_GPIO_SetOutputHigh:
  25              	.LFB137:
  26              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_gpio.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  27              	 .loc 1 257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
  45              	 .loc 1 260 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 5A60     	 str r2,[r3,#4]
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  51              	 .loc 1 261 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE137:
  67              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_GPIO_SetOutputLow:
  73              	.LFB138:
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
  74              	 .loc 1 283 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a FB70     	 strb r3,[r7,#3]
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
  92              	 .loc 1 286 0
  93 000c FB78     	 ldrb r3,[r7,#3]
  94 000e 4FF48032 	 mov r2,#65536
  95 0012 9A40     	 lsls r2,r2,r3
  96 0014 7B68     	 ldr r3,[r7,#4]
  97 0016 5A60     	 str r2,[r3,#4]
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
  98              	 .loc 1 287 0
  99 0018 0C37     	 adds r7,r7,#12
 100              	.LCFI9:
 101              	 .cfi_def_cfa_offset 4
 102 001a BD46     	 mov sp,r7
 103              	.LCFI10:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 001c 5DF8047B 	 ldr r7,[sp],#4
 107              	.LCFI11:
 108              	 .cfi_restore 7
 109              	 .cfi_def_cfa_offset 0
 110 0020 7047     	 bx lr
 111              	 .cfi_endproc
 112              	.LFE138:
 114 0022 00BF     	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 115              	 .align 2
 116              	 .thumb
 117              	 .thumb_func
 119              	XMC_GPIO_GetInput:
 120              	.LFB140:
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** {
 121              	 .loc 1 334 0
 122              	 .cfi_startproc
 123              	 
 124              	 
 125              	 
 126 0000 80B4     	 push {r7}
 127              	.LCFI12:
 128              	 .cfi_def_cfa_offset 4
 129              	 .cfi_offset 7,-4
 130 0002 83B0     	 sub sp,sp,#12
 131              	.LCFI13:
 132              	 .cfi_def_cfa_offset 16
 133 0004 00AF     	 add r7,sp,#0
 134              	.LCFI14:
 135              	 .cfi_def_cfa_register 7
 136 0006 7860     	 str r0,[r7,#4]
 137 0008 0B46     	 mov r3,r1
 138 000a FB70     	 strb r3,[r7,#3]
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 139              	 .loc 1 337 0
 140 000c 7B68     	 ldr r3,[r7,#4]
 141 000e 5A6A     	 ldr r2,[r3,#36]
 142 0010 FB78     	 ldrb r3,[r7,#3]
 143 0012 22FA03F3 	 lsr r3,r2,r3
 144 0016 03F00103 	 and r3,r3,#1
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc\xmc_gpio.h **** }
 145              	 .loc 1 338 0
 146 001a 1846     	 mov r0,r3
 147 001c 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 001e BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0020 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0024 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE140:
 162 0026 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	DIGITAL_IO_SetOutputHigh:
 168              	.LFB145:
 169              	 .file 2 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2016-07-08
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.16 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <xmc_gpio.h>
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include <DAVE_Common.h>
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_MINOR_VERSION >= 0U) && \
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****        (XMC_LIB_PATCH_VERSION >= 0U)))
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 170              	 .loc 2 269 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174 0000 80B5     	 push {r7,lr}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 8
 177              	 .cfi_offset 7,-8
 178              	 .cfi_offset 14,-4
 179 0002 82B0     	 sub sp,sp,#8
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 185 0006 7860     	 str r0,[r7,#4]
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 186              	 .loc 2 271 0
 187 0008 7B68     	 ldr r3,[r7,#4]
 188 000a 1A68     	 ldr r2,[r3]
 189 000c 7B68     	 ldr r3,[r7,#4]
 190 000e 1B7C     	 ldrb r3,[r3,#16]
 191 0010 1046     	 mov r0,r2
 192 0012 1946     	 mov r1,r3
 193 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 194              	 .loc 2 272 0
 195 0018 0837     	 adds r7,r7,#8
 196              	.LCFI21:
 197              	 .cfi_def_cfa_offset 8
 198 001a BD46     	 mov sp,r7
 199              	.LCFI22:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 001c 80BD     	 pop {r7,pc}
 203              	 .cfi_endproc
 204              	.LFE145:
 206 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	DIGITAL_IO_SetOutputLow:
 212              	.LFB146:
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 213              	 .loc 2 316 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217 0000 80B5     	 push {r7,lr}
 218              	.LCFI23:
 219              	 .cfi_def_cfa_offset 8
 220              	 .cfi_offset 7,-8
 221              	 .cfi_offset 14,-4
 222 0002 82B0     	 sub sp,sp,#8
 223              	.LCFI24:
 224              	 .cfi_def_cfa_offset 16
 225 0004 00AF     	 add r7,sp,#0
 226              	.LCFI25:
 227              	 .cfi_def_cfa_register 7
 228 0006 7860     	 str r0,[r7,#4]
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 229              	 .loc 2 318 0
 230 0008 7B68     	 ldr r3,[r7,#4]
 231 000a 1A68     	 ldr r2,[r3]
 232 000c 7B68     	 ldr r3,[r7,#4]
 233 000e 1B7C     	 ldrb r3,[r3,#16]
 234 0010 1046     	 mov r0,r2
 235 0012 1946     	 mov r1,r3
 236 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 237              	 .loc 2 319 0
 238 0018 0837     	 adds r7,r7,#8
 239              	.LCFI26:
 240              	 .cfi_def_cfa_offset 8
 241 001a BD46     	 mov sp,r7
 242              	.LCFI27:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 001c 80BD     	 pop {r7,pc}
 246              	 .cfi_endproc
 247              	.LFE146:
 249 001e 00BF     	 .section .text.PIN_INTERRUPT_GetPinValue,"ax",%progbits
 250              	 .align 2
 251              	 .thumb
 252              	 .thumb_func
 254              	PIN_INTERRUPT_GetPinValue:
 255              	.LFB308:
 256              	 .file 3 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt.h"
   1:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @file pin_interrupt.h
   3:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @date 2016-03-02
   4:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * NOTE:
   6:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
   8:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @cond
   9:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  10:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT v4.0.2 - The PIN_INTERRUPT APP invokes user interrupt handler in a response to ris
  11:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                        edge event signal on a pin.
  12:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  13:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Copyright (c) 2016, Infineon Technologies AG
  14:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * All rights reserved.                        
  15:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  16:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * following conditions are met:   
  18:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  19:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer.                        
  21:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 
  22:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.     
  24:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                         
  25:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   products derived from this software without specific prior written permission. 
  27:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                             
  28:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *                                                                              
  36:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * with Infineon Technologies AG (dave@infineon.com).         
  38:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  39:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  40:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Change History
  41:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * --------------
  42:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * 2015-12-03:
  43:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     - Initial version for DAVEv4. <BR>
  44:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcond 
  45:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
  46:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  47:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  48:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifndef PIN_INTERRUPT_H
  49:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #define PIN_INTERRUPT_H
  50:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  51:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
  52:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * HEADER FILES                                                                                    
  53:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  54:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
  55:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_scu.h>
  56:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  57:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_gpio.h>
  58:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <xmc_eru.h>
  59:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include <DAVE_Common.h>
  60:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #include "pin_interrupt_conf.h"
  61:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  62:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * MACROS                                                                                          
  63:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  64:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (!((XMC_LIB_MAJOR_VERSION == 2U) && \
  65:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_MINOR_VERSION >= 1U) && \
  66:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****       (XMC_LIB_PATCH_VERSION >= 6U)))
  67:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #error "PIN_INTERRUPT requires XMC Peripheral Library v2.1.6 or higher"
  68:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
  69:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  70:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  71:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup App_publicparam
  72:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  73:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  74:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  75:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  @brief Initialization data structure for PIN_INTERRUPT APP
  76:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  77:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  78:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  79:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
  80:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  81:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  82:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  /*************************************************************************************************
  83:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ENUMS
  84:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
  85:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
  86:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_enumerations
  87:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
  88:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  89:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /*
  90:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief enumeration for PIN_INTERRUPT APP
  91:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_STATUS
  93:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
  94:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_SUCCESS = 0U,        /**<APP initialization is success */
  95:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_STATUS_FAILURE = 1U         /**<APP initialization is failure */
  96:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_STATUS_t;
  97:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  98:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
  99:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 100:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * Defines trigger edge for the event generation by ETLx (Event Trigger Logic, x = [0 to 3]) unit, 
 101:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * from ERSx(Event request source, x = [0 to 3]) unit.
 102:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 103:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef enum PIN_INTERRUPT_EDGE
 104:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 105:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_NONE = 0U, /**< no event enabled */
 106:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_RISING = 1U,   /**< detection of rising edge generates the event */
 107:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_FALLING = 2U,  /**< detection of falling edge generates the event */
 108:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   PIN_INTERRUPT_EDGE_BOTH = 3U      /**< detection of either edges generates the event */
 109:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_EDGE_t;
 110:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 111:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 112:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 113:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 114:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 115:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * DATA STRUCTURES
 116:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** ***************************************************************************************************
 117:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 118:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_datastructures
 119:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 120:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 121:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 123:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Configuration structure for PIN_INTERRUPT APP
 124:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 125:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** typedef struct PIN_INTERRUPT
 126:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 127:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_t *eru;  /**< Mapped ERU module */
 128:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_PORT_t *port;  /**< Mapped port number */
 129:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_GPIO_CONFIG_t gpio_config;   /**< Initializes the input pin characteristics */
 130:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ERU_ETL_CONFIG_t etl_config;  /**< reference to ERUx_ETLy (x = [0..1], y = [0..4])
 131:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****                                                       module configuration */
 132:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_SERIES == XMC14)
 133:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_SCU_IRQCTRL_t irqctrl;  /**< selects the interrupt source for a NVIC interrupt node*/
 134:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 135:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   IRQn_Type IRQn;       /**< Mapped NVIC Node */
 136:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_priority; 	  /**< Node Interrupt Priority */
 137:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #if (UC_FAMILY == XMC4)
 138:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t irq_subpriority;  /**< Node Interrupt SubPriority only valid for XMC4x */
 139:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 140:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t etl; /*< ETLx channel (x = [0..3])*/
 141:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t ogu; /*< OGUy channel (y = [0..3])*/
 142:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   uint8_t pin; /*< Mapped pin number */
 143:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   bool enable_at_init;  /**< Interrupt enable for Node at initialization*/
 144:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** } PIN_INTERRUPT_t;
 145:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 146:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @}
 147:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 148:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 149:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #ifdef __cplusplus
 150:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** extern "C" {
 151:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** #endif
 152:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**************************************************************************************************
 153:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * API Prototypes
 154:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  **************************************************************************************************
 155:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 156:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @ingroup PIN_INTERRUPT_apidoc
 157:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @{
 158:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 159:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 160:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Get PIN_INTERRUPT APP version
 161:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 162:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 163:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description: </b><br>
 164:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * The function can be used to check application software compatibility with a
 165:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * specific version of the APP.
 166:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 167:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 168:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 169:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 170:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 171:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 172:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void) {
 173:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t init_status;
 174:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_APP_VERSION_t version;
 175:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 176:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // Initialize PIN_INTERRUPT APP:
 177:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   // PIN_INTERRUPT_Init() is called from within DAVE_Init().
 178:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   init_status = DAVE_Init();
 179:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 180:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if (DAVE_STATUS_SUCCESS == init_status)
 181:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 182:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     version = PIN_INTERRUPT_GetAppVersion();
 183:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     if (version.major != 4U) {
 184:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *       // Probably, not the right version.
 185:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 186:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 187:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 188:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     // More code here
 189:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 190:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 191:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 192:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 193:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 194:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 195:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** DAVE_APP_VERSION_t PIN_INTERRUPT_GetAppVersion(void);
 197:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 198:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 199:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Initializes a PIN_INTERRUPT APP instance
 200:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 201:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return
 202:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_SUCCESS             : if initialization is successful\n
 203:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *            PIN_INTERRUPT_STATUS_FAILURE             : if initialization is failed
 204:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 205:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Description:</b><br>
 206:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * PIN_INTERRUPT_Init API is called during initialization of DAVE APPS. This API Initializes input 
 207:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * ERU and OGU hardware module initialization, Configures NVIC node and its priority in order to ge
 208:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 209:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * \par<b>Example Usage:</b><br>
 210:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 211:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 212:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * #include <DAVE.h>
 213:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 214:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * int main(void)
 215:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * {
 216:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   DAVE_STATUS_t status;
 217:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 218:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 219:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 220:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 221:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 222:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 223:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     while(1)
 224:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     {
 225:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 226:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *     }
 227:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 228:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   return (1);
 229:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * }
 230:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 231:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR>
 232:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 233:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle);
 234:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 235:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 236:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Enables the IRQ.
 237:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 238:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 239:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 240:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 241:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 242:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 243:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 244:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 245:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 246:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 247:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 248:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 249:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 250:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 251:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 252:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 253:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Enable(&PIN_INTERRUPT_0);
 254:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 255:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 256:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 257:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 258:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 259:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 260:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 261:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 262:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
 263:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 264:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
 265:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_EnableIRQ(handle->IRQn);
 266:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 267:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 268:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 269:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @brief Disables the IRQ.
 270:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 271:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @return None
 272:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * <BR><P ALIGN="LEFT"><B>Example:</B>
 273:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 274:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @code
 275:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  #include <DAVE.h>
 276:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 277:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  int main(void)
 278:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  {
 279:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 280:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    DAVE_STATUS_t status;
 281:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 282:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   status = DAVE_Init();  //  PIN_INTERRUPT_Init API is called during initialization of DAVE APPS
 283:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   if(DAVE_STATUS_SUCCESS == status)
 284:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   {
 285:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    // user code
 286:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 287:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    PIN_INTERRUPT_Disable(&PIN_INTERRUPT_0);
 288:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    while(1)
 289:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    {}
 290:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *   }
 291:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 292:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *    return (1);
 293:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *
 294:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  *  }
 295:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  * @endcode<BR> </p>
 296:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****  */
 297:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE void PIN_INTERRUPT_Disable(const PIN_INTERRUPT_t *const handle)
 298:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 299:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_Disable: Handler null pointer", handle != NULL);
 300:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   NVIC_DisableIRQ(handle->IRQn);
 301:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 302:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** 
 303:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** /**
 304:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @brief Read input level of port pin.
 305:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @param handle Pointer pointing to APP data structure. Refer @ref PIN_INTERRUPT_t for details.
 306:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @return uint32_t input logic level. Range:0-1
 307:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 308:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * \par<b>Description:</b><br>
 309:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * This function reads the Pn_IN register and returns the current logical value at the GPIO pin.
 310:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 311:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *
 312:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * Example Usage:
 313:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * @code
 314:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * #include <DAVE.h>//Declarations from DAVE Code Generation (includes SFR declaration)
 315:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * int main(void)
 316:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * {
 317:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   DAVE_STATUS_t status;
 318:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   uint32_t pin_status;
 319:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   status = DAVE_Init();   // (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0) is called within
 320:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   if(status == DAVE_STATUS_SUCCESS)
 321:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 322:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 323:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 324:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   else
 325:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 326:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 327:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     while(1U)
 328:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 329:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 330:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 331:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 332:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   while(1U)
 333:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   {
 334:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     pin_status = PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_0);
 335:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     if(pin_status == 1)
 336:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 337:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 338:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 339:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     else
 340:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     {
 341:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *       // Add application code here
 342:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *     }
 343:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   }
 344:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *   return (1);
 345:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** * }
 346:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** *  @endcode
 347:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** */
 348:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** __STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
 349:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** {
 257              	 .loc 3 349 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI28:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 82B0     	 sub sp,sp,#8
 267              	.LCFI29:
 268              	 .cfi_def_cfa_offset 16
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI30:
 271              	 .cfi_def_cfa_register 7
 272 0006 7860     	 str r0,[r7,#4]
 350:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
 351:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h ****   return (XMC_GPIO_GetInput(handle->port, handle->pin));
 273              	 .loc 3 351 0
 274 0008 7B68     	 ldr r3,[r7,#4]
 275 000a 5A68     	 ldr r2,[r3,#4]
 276 000c 7B68     	 ldr r3,[r7,#4]
 277 000e 93F82130 	 ldrb r3,[r3,#33]
 278 0012 1046     	 mov r0,r2
 279 0014 1946     	 mov r1,r3
 280 0016 FFF7FEFF 	 bl XMC_GPIO_GetInput
 281 001a 0346     	 mov r3,r0
 352:C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT\pin_interrupt.h **** }
 282              	 .loc 3 352 0
 283 001c 1846     	 mov r0,r3
 284 001e 0837     	 adds r7,r7,#8
 285              	.LCFI31:
 286              	 .cfi_def_cfa_offset 8
 287 0020 BD46     	 mov sp,r7
 288              	.LCFI32:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 0022 80BD     	 pop {r7,pc}
 292              	 .cfi_endproc
 293              	.LFE308:
 295              	 .global Speed_control
 296              	 .section .data.Speed_control,"aw",%progbits
 299              	Speed_control:
 300 0000 01       	 .byte 1
 301              	 .global CAN_control
 302              	 .section .data.CAN_control,"aw",%progbits
 305              	CAN_control:
 306 0000 01       	 .byte 1
 307              	 .comm Current_U,4,4
 308              	 .comm Current_V,4,4
 309              	 .comm Current_W,4,4
 310              	 .global lookup_table
 311              	 .section .data.lookup_table,"aw",%progbits
 312              	 .align 2
 315              	lookup_table:
 316 0000 00       	 .byte 0
 317 0001 00       	 .byte 0
 318 0002 00       	 .byte 0
 319 0003 00       	 .byte 0
 320 0004 00       	 .byte 0
 321 0005 00       	 .byte 0
 322 0006 00       	 .byte 0
 323 0007 00       	 .byte 0
 324 0008 00       	 .byte 0
 325 0009 00       	 .byte 0
 326 000a 00       	 .byte 0
 327 000b FF       	 .byte -1
 328 000c 00       	 .byte 0
 329 000d 01       	 .byte 1
 330 000e 00       	 .byte 0
 331 000f 00       	 .byte 0
 332 0010 00       	 .byte 0
 333 0011 00       	 .byte 0
 334 0012 00       	 .byte 0
 335 0013 01       	 .byte 1
 336 0014 00       	 .byte 0
 337 0015 00       	 .byte 0
 338 0016 FF       	 .byte -1
 339 0017 00       	 .byte 0
 340 0018 00       	 .byte 0
 341 0019 01       	 .byte 1
 342 001a FF       	 .byte -1
 343 001b 00       	 .byte 0
 344 001c 00       	 .byte 0
 345 001d 00       	 .byte 0
 346 001e 00       	 .byte 0
 347 001f 00       	 .byte 0
 348 0020 00       	 .byte 0
 349 0021 00       	 .byte 0
 350 0022 00       	 .byte 0
 351 0023 00       	 .byte 0
 352 0024 00       	 .byte 0
 353 0025 FF       	 .byte -1
 354 0026 01       	 .byte 1
 355 0027 00       	 .byte 0
 356 0028 00       	 .byte 0
 357 0029 FF       	 .byte -1
 358 002a 00       	 .byte 0
 359 002b 00       	 .byte 0
 360 002c 01       	 .byte 1
 361 002d 00       	 .byte 0
 362 002e 00       	 .byte 0
 363 002f 00       	 .byte 0
 364 0030 00       	 .byte 0
 365 0031 00       	 .byte 0
 366 0032 01       	 .byte 1
 367 0033 00       	 .byte 0
 368 0034 FF       	 .byte -1
 369 0035 00       	 .byte 0
 370 0036 00       	 .byte 0
 371 0037 00       	 .byte 0
 372 0038 00       	 .byte 0
 373 0039 00       	 .byte 0
 374 003a 00       	 .byte 0
 375 003b 00       	 .byte 0
 376 003c 00       	 .byte 0
 377 003d 00       	 .byte 0
 378 003e 00       	 .byte 0
 379 003f 00       	 .byte 0
 380              	 .global sector
 381              	 .section .bss.sector,"aw",%nobits
 384              	sector:
 385 0000 00       	 .space 1
 386              	 .global direction
 387              	 .section .bss.direction,"aw",%nobits
 390              	direction:
 391 0000 00       	 .space 1
 392              	 .global enc_val
 393              	 .section .bss.enc_val,"aw",%nobits
 394              	 .align 1
 397              	enc_val:
 398 0000 0000     	 .space 2
 399              	 .global time_since_A
 400              	 .section .bss.time_since_A,"aw",%nobits
 401              	 .align 2
 404              	time_since_A:
 405 0000 00000000 	 .space 4
 406              	 .global time_since_B
 407              	 .section .bss.time_since_B,"aw",%nobits
 408              	 .align 2
 411              	time_since_B:
 412 0000 00000000 	 .space 4
 413              	 .global time_since_C
 414              	 .section .bss.time_since_C,"aw",%nobits
 415              	 .align 2
 418              	time_since_C:
 419 0000 00000000 	 .space 4
 420              	 .global time_180deg
 421              	 .section .data.time_180deg,"aw",%progbits
 422              	 .align 2
 425              	time_180deg:
 426 0000 E8030000 	 .word 1000
 427              	 .global time_180deg_cal
 428              	 .section .data.time_180deg_cal,"aw",%progbits
 429              	 .align 2
 432              	time_180deg_cal:
 433 0000 E8030000 	 .word 1000
 434              	 .comm last_Hall_trig,1,1
 435              	 .global angle_in_sector
 436              	 .section .data.angle_in_sector,"aw",%progbits
 437              	 .align 2
 440              	angle_in_sector:
 441 0000 0000F041 	 .word 1106247680
 442              	 .global angle_phi
 443              	 .section .bss.angle_phi,"aw",%nobits
 444              	 .align 2
 447              	angle_phi:
 448 0000 00000000 	 .space 4
 449              	 .comm ialpha,4,4
 450              	 .comm ibeta,4,4
 451              	 .comm iq,4,4
 452              	 .comm id,4,4
 453              	 .comm Valpha,4,4
 454              	 .comm Vbeta,4,4
 455              	 .global omega_ele_rads
 456              	 .section .bss.omega_ele_rads,"aw",%nobits
 457              	 .align 2
 460              	omega_ele_rads:
 461 0000 00000000 	 .space 4
 462              	 .global omega_mech_rads_
 463              	 .section .bss.omega_mech_rads_,"aw",%nobits
 464              	 .align 2
 467              	omega_mech_rads_:
 468 0000 00000000 	 .space 4
 469              	 .global omega_mech_rads_temp
 470              	 .section .bss.omega_mech_rads_temp,"aw",%nobits
 471              	 .align 2
 474              	omega_mech_rads_temp:
 475 0000 00000000 	 .space 4
 476              	 .global speed_ref
 477              	 .section .bss.speed_ref,"aw",%nobits
 478              	 .align 2
 481              	speed_ref:
 482 0000 00000000 	 .space 4
 483              	 .global omega_ref
 484              	 .section .bss.omega_ref,"aw",%nobits
 485              	 .align 2
 488              	omega_ref:
 489 0000 00000000 	 .space 4
 490              	 .global iq_ref
 491              	 .section .bss.iq_ref,"aw",%nobits
 492              	 .align 2
 495              	iq_ref:
 496 0000 00000000 	 .space 4
 497              	 .global T_ref
 498              	 .section .bss.T_ref,"aw",%nobits
 499              	 .align 2
 502              	T_ref:
 503 0000 00000000 	 .space 4
 504              	 .global Vd_ref
 505              	 .section .bss.Vd_ref,"aw",%nobits
 506              	 .align 2
 509              	Vd_ref:
 510 0000 00000000 	 .space 4
 511              	 .global Vq_ref
 512              	 .section .bss.Vq_ref,"aw",%nobits
 513              	 .align 2
 516              	Vq_ref:
 517 0000 00000000 	 .space 4
 518              	 .comm Speeds_int16_r,8,4
 519              	 .global CAN_speed_ref
 520              	 .section .bss.CAN_speed_ref,"aw",%nobits
 521              	 .align 2
 524              	CAN_speed_ref:
 525 0000 00000000 	 .space 4
 526              	 .global CAN_new_meassage
 527              	 .section .bss.CAN_new_meassage,"aw",%nobits
 530              	CAN_new_meassage:
 531 0000 00       	 .space 1
 532              	 .global CAN_no_com_counter
 533              	 .section .bss.CAN_no_com_counter,"aw",%nobits
 536              	CAN_no_com_counter:
 537 0000 00       	 .space 1
 538              	 .global distance_180deg_ele_count
 539              	 .section .bss.distance_180deg_ele_count,"aw",%nobits
 540              	 .align 2
 543              	distance_180deg_ele_count:
 544 0000 00000000 	 .space 4
 545              	 .global Speed_act
 546              	 .section .bss.Speed_act,"aw",%nobits
 547              	 .align 2
 550              	Speed_act:
 551 0000 00000000 	 .space 4
 552              	 .global distance
 553              	 .section .bss.distance,"aw",%nobits
 554              	 .align 2
 557              	distance:
 558 0000 00000000 	 .space 4
 559              	 .comm modulation_index,4,4
 560              	 .comm modulation_index_scaled,4,4
 561              	 .comm angle_ab,4,4
 562              	 .comm angle_ab_rad,4,4
 563              	 .comm amplitude_ab,4,4
 564              	 .global Ts
 565              	 .section .data.Ts,"aw",%progbits
 566              	 .align 2
 569              	Ts:
 570 0000 17B75138 	 .word 944879383
 571              	 .global Tcyc
 572              	 .section .data.Tcyc,"aw",%progbits
 573              	 .align 2
 576              	Tcyc:
 577 0000 17B75139 	 .word 961656599
 578              	 .global scaling_factor
 579              	 .section .data.scaling_factor,"aw",%progbits
 580              	 .align 2
 583              	scaling_factor:
 584 0000 00000743 	 .word 1124532224
 585              	 .comm amplitude_corrected,4,4
 586              	 .global count
 587              	 .section .bss.count,"aw",%nobits
 590              	count:
 591 0000 00       	 .space 1
 592              	 .global offset_pos
 593              	 .section .data.offset_pos,"aw",%progbits
 594              	 .align 2
 597              	offset_pos:
 598 0000 0000D8C1 	 .word -1042808832
 599              	 .global offset_neg
 600              	 .section .data.offset_neg,"aw",%progbits
 601              	 .align 2
 604              	offset_neg:
 605 0000 0000A0C1 	 .word -1046478848
 606              	 .global Iq_param
 607              	 .section .data.Iq_param,"aw",%progbits
 608              	 .align 2
 611              	Iq_param:
 612 0000 CDCC4C3D 	 .word 1028443341
 613 0004 0000C841 	 .word 1103626240
 614 0008 00000000 	 .word 0
 615 000c 0000C842 	 .word 1120403456
 616 0010 0000C8C2 	 .word -1027080192
 617 0014 00000000 	 .word 0
 618 0018 00000000 	 .word 0
 619 001c 00000000 	 .word 0
 620 0020 00000000 	 .space 4
 621              	 .global Id_param
 622              	 .section .data.Id_param,"aw",%progbits
 623              	 .align 2
 626              	Id_param:
 627 0000 CDCC4C3D 	 .word 1028443341
 628 0004 0000C841 	 .word 1103626240
 629 0008 00000000 	 .word 0
 630 000c 0000C842 	 .word 1120403456
 631 0010 0000C8C2 	 .word -1027080192
 632 0014 00000000 	 .word 0
 633 0018 00000000 	 .word 0
 634 001c 00000000 	 .word 0
 635 0020 00000000 	 .space 4
 636              	 .global T_param
 637              	 .section .data.T_param,"aw",%progbits
 638              	 .align 2
 641              	T_param:
 642 0000 0AD7233C 	 .word 1008981770
 643 0004 0AD7233C 	 .word 1008981770
 644 0008 00000000 	 .word 0
 645 000c 00000040 	 .word 1073741824
 646 0010 000000C0 	 .word -1073741824
 647 0014 00000000 	 .word 0
 648 0018 00000000 	 .word 0
 649 001c 00000000 	 .word 0
 650 0020 00000000 	 .space 4
 651              	 .global T_param_1
 652              	 .section .data.T_param_1,"aw",%progbits
 653              	 .align 2
 656              	T_param_1:
 657 0000 0AD7A33B 	 .word 1000593162
 658 0004 0AD7233C 	 .word 1008981770
 659 0008 00000000 	 .word 0
 660 000c 0000C03F 	 .word 1069547520
 661 0010 0000C0BF 	 .word -1077936128
 662 0014 00000000 	 .word 0
 663 0018 00000000 	 .word 0
 664 001c 00000000 	 .word 0
 665 0020 00000000 	 .space 4
 666              	 .section .text.main,"ax",%progbits
 667              	 .align 2
 668              	 .global main
 669              	 .thumb
 670              	 .thumb_func
 672              	main:
 673              	.LFB473:
 674              	 .file 4 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2020 Jan 02 10:21:43
   5:../main.c     ****  *  Author: Baldo
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** // status: 11.05.2022
   9:../main.c     **** 
  10:../main.c     **** #include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaratio
  11:../main.c     **** #include <math.h>
  12:../main.c     **** #include <stdio.h> //for printf
  13:../main.c     **** 
  14:../main.c     **** //#######################
  15:../main.c     **** //FUNCTION DECLARATION
  16:../main.c     **** //########################
  17:../main.c     **** float readCurrent(uint8_t);
  18:../main.c     **** void Hall_init(void);
  19:../main.c     **** void HallSensor(void);
  20:../main.c     **** void Calculation(void);
  21:../main.c     **** 
  22:../main.c     **** //########################
  23:../main.c     **** //VARIABLE DECLARATION
  24:../main.c     **** //########################
  25:../main.c     **** 
  26:../main.c     **** // NEED to be set
  27:../main.c     **** //motor
  28:../main.c     **** #define MOTOR_NUM 1 // for trque dirction motro 1 differtn form rest so far
  29:../main.c     **** #define MOTOR_ON_ROVER 3// 0 front left 1 front right 2 back left 3 back right
  30:../main.c     **** 
  31:../main.c     **** //control type
  32:../main.c     **** uint8_t Speed_control = 1; //if 0 is torque control if 1 is speed control
  33:../main.c     **** uint8_t CAN_control = 1; // id 1 CAN speed controll aktive
  34:../main.c     **** 
  35:../main.c     **** #define IQ_REF_MAX 5
  36:../main.c     **** #define CAN_NO_COM_TH 250
  37:../main.c     **** #define MAX_Speed_CAN 2
  38:../main.c     **** #define SPEED_LIMIT_CTRL_TO_ZERO 100 //omega_ele rad/s
  39:../main.c     **** #define TIME_OMEGA_0  5000 //time since last hall before omgea set to 0 in 100us
  40:../main.c     **** 
  41:../main.c     **** // Define often used vaules to decrease computational effort
  42:../main.c     **** #define PI 3.14159265
  43:../main.c     **** #define TwoThird 0.66666667
  44:../main.c     **** #define TwoPiThird 2.0943951
  45:../main.c     **** #define FourPiThird 4.1887902
  46:../main.c     **** #define Pi180 0.01745329
  47:../main.c     **** 
  48:../main.c     **** #define ANGLE_ONE_DEGREE (46603U)
  49:../main.c     **** //#define ANGLE_60_DEGREE	 (2796203U)
  50:../main.c     **** //#define ANGLE_180_DEGREE (8388608U)
  51:../main.c     **** 
  52:../main.c     **** //#define ANGLE_LSB (9455) // 2^24 corresponds to 360°. For a timer interrupt delta time of 100us 
  53:../main.c     **** 
  54:../main.c     **** // Define Chip select Pins for Current measurement via SPI Interface
  55:../main.c     **** #define ChipSelect_U 0b110
  56:../main.c     **** #define ChipSelect_V 0b101
  57:../main.c     **** #define ChipSelect_W 0b011
  58:../main.c     **** #define J 0.0023064 //SK J = 1/2 * m_wheel * r_wheel^2 = 1/2*1.2kg*(62mm)^2
  59:../main.c     **** #define K_T 0.21 //SK torque constant in Nm/A
  60:../main.c     **** #define K_inv 30/1.732 // K_inv = V / m = V_DC / 2 * 2/sqrt(3) = V_DC/sqrt(3)
  61:../main.c     **** //#define Psi_p 0.0082  60/  (2 * PI) * 1.4142 // Psi_p = K_back_EMF = 0.0082 V / rpm_mech --> 60 t
  62:../main.c     **** //#define Ls 0.00088 // Ls = Lm*1.1 = 0.8mH * 1.1 = 0.00088H
  63:../main.c     **** #define PPZ 11
  64:../main.c     **** #define WHEEL_R 0.0675 //0.135/2 straigt vaule other thing casued problems
  65:../main.c     **** 
  66:../main.c     **** float Current_U;
  67:../main.c     **** float Current_V;
  68:../main.c     **** float Current_W;
  69:../main.c     **** 
  70:../main.c     **** // Declaration of Lookup Table
  71:../main.c     **** int8_t lookup_table[] = {0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,0,-1,0,0,1,-1,0,0,0,0,0,0,0,0,0
  72:../main.c     **** //access via the index in the  form of the 6 bits (3 previous hall states and 3 actual  hall states
  73:../main.c     **** //for each of the 2^6 possibilities of sequence of hall events  it has been thought about the wavef
  74:../main.c     **** 
  75:../main.c     **** volatile int8_t sector = 0;
  76:../main.c     **** volatile int8_t direction = 0;              // direction +1/-1 -> CW and CCW
  77:../main.c     **** volatile uint16_t enc_val = 0;          // old and new values of all Hall Sensors
  78:../main.c     **** volatile uint32_t time_since_A = 0;	// time between to edges Hall A
  79:../main.c     **** volatile uint32_t time_since_B = 0; // time between to edges Hall B
  80:../main.c     **** volatile uint32_t time_since_C = 0; // time between to edges Hall C
  81:../main.c     **** volatile uint32_t time_180deg = 1000;        // time which last triggered HAL sensor needed for 180
  82:../main.c     **** volatile uint32_t time_180deg_cal = 1000;
  83:../main.c     **** volatile char last_Hall_trig;			//last triggered Hall Sensor A/B/C
  84:../main.c     **** 
  85:../main.c     **** float angle_in_sector = 30;// in deg // 30 defalut becasue in the mideel of the 60°
  86:../main.c     **** //volatile uint32_t TIME_OMEGA_0 = 50000; // t over this therschold assumed to be zero
  87:../main.c     **** 
  88:../main.c     **** float angle_phi = 0;
  89:../main.c     **** float ialpha,ibeta,iq,id,Valpha,Vbeta;
  90:../main.c     **** 
  91:../main.c     **** volatile float omega_ele_rads = 0; //SK		// electrical rad / sec //current real velocity calculated
  92:../main.c     **** volatile float omega_mech_rads_ = 0;	//SK	//mechanical rounds per second
  93:../main.c     **** volatile float omega_mech_rads_temp = 0; //SK	//since dividing through the incremental (counted up)
  94:../main.c     **** //volatile float omega_ref = -2*69.11; //1*69.11; //SK		//target velocity electrical in rad/s --> 1
  95:../main.c     **** 
  96:../main.c     **** // REF vaules given to PI controller
  97:../main.c     **** float speed_ref = 0.0; //meters per second
  98:../main.c     **** float omega_ref = 0.0; // electrical rad per second
  99:../main.c     **** float iq_ref = 0.0;
 100:../main.c     **** float T_ref = 0.0;
 101:../main.c     **** float Vd_ref = 0;
 102:../main.c     **** float Vq_ref = 0;
 103:../main.c     **** 
 104:../main.c     **** // CAN vars
 105:../main.c     **** int16_t Speeds_int16_r[4];
 106:../main.c     **** float CAN_speed_ref = 0.0;
 107:../main.c     **** uint8_t CAN_new_meassage = 0; // if 1 recived can data
 108:../main.c     **** uint8_t CAN_no_com_counter = 0;
 109:../main.c     **** // distacne vaule back over can
 110:../main.c     **** int distance_180deg_ele_count = 0;
 111:../main.c     **** float Speed_act = 0;
 112:../main.c     **** float distance = 0;
 113:../main.c     **** 
 114:../main.c     **** volatile float modulation_index; //SK		// modulation index --> calculated via m = V / K_inv
 115:../main.c     **** volatile float modulation_index_scaled; //SK	//scaled from -1 to +1 towards -10000 to +10000 which 
 116:../main.c     **** 
 117:../main.c     **** float angle_ab;
 118:../main.c     **** float angle_ab_rad;
 119:../main.c     **** float amplitude_ab;
 120:../main.c     **** 
 121:../main.c     **** float Ts = 1.0 /20000.0; //T sample correspond to SPVM update rate
 122:../main.c     **** float Tcyc = 1.0 /5000.0; //Tcyc sample correspond to control update rate to PI controler for I
 123:../main.c     **** 
 124:../main.c     **** //float amp_limit_SVM_app = 2500;  Bo
 125:../main.c     **** 
 126:../main.c     **** // scaling factor for SVM Update -> amplitude scaling (max_amplitude = 16384U)
 127:../main.c     **** float scaling_factor = 135;
 128:../main.c     **** float amplitude_corrected;
 129:../main.c     **** 
 130:../main.c     **** 
 131:../main.c     **** // Counter for calculation function -> only use a multiple of the SVM Interrupt
 132:../main.c     **** volatile uint8_t count = 0;
 133:../main.c     **** 
 134:../main.c     **** // Angle correction factor to align Current to Hall Sensor vuales form 14/04
 135:../main.c     **** float offset_pos = -27.0;				//Offset to reduce Hall Sensor Offset in CW direction
 136:../main.c     **** float offset_neg = -20.0;			//Offset to reduce Hall Sensor Offset in CCW direction
 137:../main.c     **** 
 138:../main.c     **** //################ PI
 139:../main.c     **** // PID Controller declaration for Id and Iq component
 140:../main.c     **** typedef struct{
 141:../main.c     **** 	float P,I,D;
 142:../main.c     **** 	float MaxLimit, MinLimit;
 143:../main.c     **** 	float Output;
 144:../main.c     **** 	float Deviation_old, Deviation_old2;
 145:../main.c     **** 	float Output_z;
 146:../main.c     **** }PID_param;
 147:../main.c     **** 
 148:../main.c     **** //Vuales 14/04 mit maurzio
 149:../main.c     **** //PID_param omegaq = {.P = 0.004, .I = 0.004, .D = 0.0, .MaxLimit =  0.5, .MinLimit = -0.5, .Output
 150:../main.c     **** PID_param Iq_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output =
 151:../main.c     **** PID_param Id_param = {.P = 0.05, .I = 25.0, .D = 0.0, .MaxLimit =  100, .MinLimit = -100, .Output =
 152:../main.c     **** PID_param T_param = {.P = 0.01, .I = 0.01, .D = 0.0, .MaxLimit =  2, .MinLimit = -2, .Output = 0.0,
 153:../main.c     **** 
 154:../main.c     **** // for motro 1
 155:../main.c     **** PID_param T_param_1 = {.P = 0.005, .I = 0.01, .D = 0.0, .MaxLimit =  1.5, .MinLimit = -1.5, .Output
 156:../main.c     **** 
 157:../main.c     **** float PID_Controller(float,float,PID_param *param);
 158:../main.c     **** 
 159:../main.c     **** 
 160:../main.c     **** //########################
 161:../main.c     **** // MAIN
 162:../main.c     **** //########################
 163:../main.c     **** 
 164:../main.c     **** int main(void)
 165:../main.c     **** {
 675              	 .loc 4 165 0
 676              	 .cfi_startproc
 677              	 
 678              	 
 679 0000 80B5     	 push {r7,lr}
 680              	.LCFI33:
 681              	 .cfi_def_cfa_offset 8
 682              	 .cfi_offset 7,-8
 683              	 .cfi_offset 14,-4
 684 0002 82B0     	 sub sp,sp,#8
 685              	.LCFI34:
 686              	 .cfi_def_cfa_offset 16
 687 0004 00AF     	 add r7,sp,#0
 688              	.LCFI35:
 689              	 .cfi_def_cfa_register 7
 166:../main.c     ****   DAVE_STATUS_t status;
 167:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 690              	 .loc 4 167 0
 691 0006 FFF7FEFF 	 bl DAVE_Init
 692 000a 0346     	 mov r3,r0
 693 000c FB71     	 strb r3,[r7,#7]
 168:../main.c     **** 
 169:../main.c     ****   Hall_init();
 694              	 .loc 4 169 0
 695 000e FFF7FEFF 	 bl Hall_init
 170:../main.c     **** 
 171:../main.c     ****   if(status != DAVE_STATUS_SUCCESS)
 696              	 .loc 4 171 0
 697 0012 FB79     	 ldrb r3,[r7,#7]
 698 0014 002B     	 cmp r3,#0
 699 0016 00D0     	 beq .L10
 700              	.L11:
 172:../main.c     ****   {
 173:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
 174:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
 175:../main.c     **** 
 176:../main.c     ****     while(1U)
 177:../main.c     ****     {
 178:../main.c     **** 
 179:../main.c     ****     }
 701              	 .loc 4 179 0 discriminator 1
 702 0018 FEE7     	 b .L11
 703              	.L10:
 180:../main.c     ****   }
 181:../main.c     **** 
 182:../main.c     ****   //Initialization of CAN
 183:../main.c     ****   	CAN_NODE_STATUS_t init_status;
 184:../main.c     ****   	init_status = CAN_NODE_Init(&CAN_NODE_0);
 704              	 .loc 4 184 0
 705 001a 0948     	 ldr r0,.L14
 706 001c FFF7FEFF 	 bl CAN_NODE_Init
 707 0020 0346     	 mov r3,r0
 708 0022 BB71     	 strb r3,[r7,#6]
 185:../main.c     **** 
 186:../main.c     ****   	if (init_status != CAN_NODE_STATUS_SUCCESS) {
 187:../main.c     ****   		XMC_DEBUG("CAN initialization failed\n");
 188:../main.c     ****   	}
 189:../main.c     **** 
 190:../main.c     ****   if((MOTOR_ON_ROVER > 3) || MOTOR_ON_ROVER < 0){ // if possibel number eneterd
 191:../main.c     **** 	  while(1U)
 192:../main.c     **** 	      {
 193:../main.c     **** 		//  printf("MOTOR_ON_ROVER number false");
 194:../main.c     **** 	      }
 195:../main.c     ****   }
 196:../main.c     **** 
 197:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 198:../main.c     ****   while(1U)
 199:../main.c     ****   {
 200:../main.c     **** 	  PWM_SVM_Start(&PWM_SVM_0); // synchronous start for the CC8 slices.
 709              	 .loc 4 200 0
 710 0024 0748     	 ldr r0,.L14+4
 711 0026 FFF7FEFF 	 bl PWM_SVM_Start
 712              	.L13:
 201:../main.c     **** 
 202:../main.c     **** 		  while(1U)
 203:../main.c     **** 		    {
 204:../main.c     **** 
 205:../main.c     **** 			  if(count >=4)		//only calculate a multiple of 20kHz -> 4*50us=200us
 713              	 .loc 4 205 0
 714 002a 074B     	 ldr r3,.L14+8
 715 002c 1B78     	 ldrb r3,[r3]
 716 002e DBB2     	 uxtb r3,r3
 717 0030 032B     	 cmp r3,#3
 718 0032 04D9     	 bls .L12
 206:../main.c     **** 			  {
 207:../main.c     **** 				  count=0;
 719              	 .loc 4 207 0
 720 0034 044B     	 ldr r3,.L14+8
 721 0036 0022     	 movs r2,#0
 722 0038 1A70     	 strb r2,[r3]
 208:../main.c     **** 				  Calculation();
 723              	 .loc 4 208 0
 724 003a FFF7FEFF 	 bl Calculation
 725              	.L12:
 209:../main.c     **** 			  }
 210:../main.c     **** 		    }
 726              	 .loc 4 210 0
 727 003e F4E7     	 b .L13
 728              	.L15:
 729              	 .align 2
 730              	.L14:
 731 0040 00000000 	 .word CAN_NODE_0
 732 0044 00000000 	 .word PWM_SVM_0
 733 0048 00000000 	 .word count
 734              	 .cfi_endproc
 735              	.LFE473:
 737              	 .section .text.CAN0_1_IRQHandler,"ax",%progbits
 738              	 .align 2
 739              	 .global CAN0_1_IRQHandler
 740              	 .thumb
 741              	 .thumb_func
 743              	CAN0_1_IRQHandler:
 744              	.LFB474:
 211:../main.c     ****   }
 212:../main.c     **** }
 213:../main.c     **** 
 214:../main.c     **** 
 215:../main.c     **** //########################
 216:../main.c     **** // INTERRUPTS
 217:../main.c     **** //########################
 218:../main.c     **** 
 219:../main.c     **** // CAN Communication
 220:../main.c     **** void CAN_RX_MO2_ISR(void){
 745              	 .loc 4 220 0
 746              	 .cfi_startproc
 747              	 
 748              	 
 749 0000 80B5     	 push {r7,lr}
 750              	.LCFI36:
 751              	 .cfi_def_cfa_offset 8
 752              	 .cfi_offset 7,-8
 753              	 .cfi_offset 14,-4
 754 0002 84B0     	 sub sp,sp,#16
 755              	.LCFI37:
 756              	 .cfi_def_cfa_offset 24
 757 0004 00AF     	 add r7,sp,#0
 758              	.LCFI38:
 759              	 .cfi_def_cfa_register 7
 221:../main.c     **** 		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[1]->mo_ptr;
 760              	 .loc 4 221 0
 761 0006 384B     	 ldr r3,.L27
 762 0008 1B69     	 ldr r3,[r3,#16]
 763 000a 1B68     	 ldr r3,[r3]
 764 000c BB60     	 str r3,[r7,#8]
 222:../main.c     **** 		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[1]); // reset for incremental encoder
 765              	 .loc 4 222 0
 766 000e 364B     	 ldr r3,.L27
 767 0010 1B69     	 ldr r3,[r3,#16]
 768 0012 1846     	 mov r0,r3
 769 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 223:../main.c     **** 
 224:../main.c     **** 		uint8_t data_r[8];
 225:../main.c     **** 		 int i;
 226:../main.c     **** 		 for(i = 0 ; i < 8 ; i ++){
 770              	 .loc 4 226 0
 771 0018 0023     	 movs r3,#0
 772 001a FB60     	 str r3,[r7,#12]
 773 001c 0CE0     	 b .L17
 774              	.L18:
 227:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 775              	 .loc 4 227 0 discriminator 3
 776 001e BA68     	 ldr r2,[r7,#8]
 777 0020 FB68     	 ldr r3,[r7,#12]
 778 0022 1344     	 add r3,r3,r2
 779 0024 1033     	 adds r3,r3,#16
 780 0026 1978     	 ldrb r1,[r3]
 781 0028 3A46     	 mov r2,r7
 782 002a FB68     	 ldr r3,[r7,#12]
 783 002c 1344     	 add r3,r3,r2
 784 002e 0A46     	 mov r2,r1
 785 0030 1A70     	 strb r2,[r3]
 226:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 786              	 .loc 4 226 0 discriminator 3
 787 0032 FB68     	 ldr r3,[r7,#12]
 788 0034 0133     	 adds r3,r3,#1
 789 0036 FB60     	 str r3,[r7,#12]
 790              	.L17:
 226:../main.c     **** 			 data_r[i] = lmsgobjct_ptr_1->can_data_byte[i];
 791              	 .loc 4 226 0 is_stmt 0 discriminator 1
 792 0038 FB68     	 ldr r3,[r7,#12]
 793 003a 072B     	 cmp r3,#7
 794 003c EFDD     	 ble .L18
 228:../main.c     **** 		 }
 229:../main.c     **** 
 230:../main.c     **** 		 for(i = 0 ; i < 4 ; i ++){
 795              	 .loc 4 230 0 is_stmt 1
 796 003e 0023     	 movs r3,#0
 797 0040 FB60     	 str r3,[r7,#12]
 798 0042 1AE0     	 b .L19
 799              	.L20:
 231:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 800              	 .loc 4 231 0 discriminator 3
 801 0044 FB68     	 ldr r3,[r7,#12]
 802 0046 5B00     	 lsls r3,r3,#1
 803 0048 0133     	 adds r3,r3,#1
 804 004a 07F11002 	 add r2,r7,#16
 805 004e 1344     	 add r3,r3,r2
 806 0050 13F8103C 	 ldrb r3,[r3,#-16]
 807 0054 1B02     	 lsls r3,r3,#8
 808 0056 9AB2     	 uxth r2,r3
 809 0058 FB68     	 ldr r3,[r7,#12]
 810 005a 5B00     	 lsls r3,r3,#1
 811 005c 07F11001 	 add r1,r7,#16
 812 0060 0B44     	 add r3,r3,r1
 813 0062 13F8103C 	 ldrb r3,[r3,#-16]
 814 0066 9BB2     	 uxth r3,r3
 815 0068 1343     	 orrs r3,r3,r2
 816 006a 99B2     	 uxth r1,r3
 817 006c 1F4A     	 ldr r2,.L27+4
 818 006e FB68     	 ldr r3,[r7,#12]
 819 0070 22F81310 	 strh r1,[r2,r3,lsl#1]
 230:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 820              	 .loc 4 230 0 discriminator 3
 821 0074 FB68     	 ldr r3,[r7,#12]
 822 0076 0133     	 adds r3,r3,#1
 823 0078 FB60     	 str r3,[r7,#12]
 824              	.L19:
 230:../main.c     **** 			 Speeds_int16_r[i] = (data_r[i * 2 + 1] << 8) | data_r[i * 2];
 825              	 .loc 4 230 0 is_stmt 0 discriminator 1
 826 007a FB68     	 ldr r3,[r7,#12]
 827 007c 032B     	 cmp r3,#3
 828 007e E1DD     	 ble .L20
 232:../main.c     **** 			 }
 233:../main.c     **** 
 234:../main.c     **** 		CAN_speed_ref = (float)Speeds_int16_r[MOTOR_ON_ROVER] / 1000; // converting back from mm/s to m/s
 829              	 .loc 4 234 0 is_stmt 1
 830 0080 1A4B     	 ldr r3,.L27+4
 831 0082 DB88     	 ldrh r3,[r3,#6]
 832 0084 1BB2     	 sxth r3,r3
 833 0086 07EE903A 	 fmsr s15,r3
 834 008a F8EEE77A 	 fsitos s15,s15
 835 008e 9FED187A 	 flds s14,.L27+8
 836 0092 C7EE877A 	 fdivs s15,s15,s14
 837 0096 174B     	 ldr r3,.L27+12
 838 0098 C3ED007A 	 fsts s15,[r3]
 235:../main.c     **** 
 236:../main.c     **** 		if(MOTOR_NUM == 6)CAN_speed_ref = -CAN_speed_ref; // exeption for motor 6
 237:../main.c     **** 
 238:../main.c     **** 		if(CAN_speed_ref > MAX_Speed_CAN) CAN_speed_ref = MAX_Speed_CAN;
 839              	 .loc 4 238 0
 840 009c 154B     	 ldr r3,.L27+12
 841 009e D3ED007A 	 flds s15,[r3]
 842 00a2 B0EE007A 	 fconsts s14,#0
 843 00a6 F4EEC77A 	 fcmpes s15,s14
 844 00aa F1EE10FA 	 fmstat
 845 00ae 03DD     	 ble .L21
 846              	 .loc 4 238 0 is_stmt 0 discriminator 1
 847 00b0 104B     	 ldr r3,.L27+12
 848 00b2 4FF08042 	 mov r2,#1073741824
 849 00b6 1A60     	 str r2,[r3]
 850              	.L21:
 239:../main.c     **** 		if(CAN_speed_ref < -MAX_Speed_CAN) CAN_speed_ref = -MAX_Speed_CAN;
 851              	 .loc 4 239 0 is_stmt 1
 852 00b8 0E4B     	 ldr r3,.L27+12
 853 00ba D3ED007A 	 flds s15,[r3]
 854 00be B8EE007A 	 fconsts s14,#128
 855 00c2 F4EEC77A 	 fcmpes s15,s14
 856 00c6 F1EE10FA 	 fmstat
 857 00ca 03D5     	 bpl .L23
 858              	 .loc 4 239 0 is_stmt 0 discriminator 1
 859 00cc 094B     	 ldr r3,.L27+12
 860 00ce 4FF04042 	 mov r2,#-1073741824
 861 00d2 1A60     	 str r2,[r3]
 862              	.L23:
 240:../main.c     **** 
 241:../main.c     **** 		CAN_new_meassage = 1;
 863              	 .loc 4 241 0 is_stmt 1
 864 00d4 084B     	 ldr r3,.L27+16
 865 00d6 0122     	 movs r2,#1
 866 00d8 1A70     	 strb r2,[r3]
 242:../main.c     **** 		CAN_no_com_counter = 0;
 867              	 .loc 4 242 0
 868 00da 084B     	 ldr r3,.L27+20
 869 00dc 0022     	 movs r2,#0
 870 00de 1A70     	 strb r2,[r3]
 243:../main.c     **** }
 871              	 .loc 4 243 0
 872 00e0 1037     	 adds r7,r7,#16
 873              	.LCFI39:
 874              	 .cfi_def_cfa_offset 8
 875 00e2 BD46     	 mov sp,r7
 876              	.LCFI40:
 877              	 .cfi_def_cfa_register 13
 878              	 
 879 00e4 80BD     	 pop {r7,pc}
 880              	.L28:
 881 00e6 00BF     	 .align 2
 882              	.L27:
 883 00e8 00000000 	 .word CAN_NODE_0
 884 00ec 00000000 	 .word Speeds_int16_r
 885 00f0 00007A44 	 .word 1148846080
 886 00f4 00000000 	 .word CAN_speed_ref
 887 00f8 00000000 	 .word CAN_new_meassage
 888 00fc 00000000 	 .word CAN_no_com_counter
 889              	 .cfi_endproc
 890              	.LFE474:
 892              	 .section .text.CAN0_0_IRQHandler,"ax",%progbits
 893              	 .align 2
 894              	 .global CAN0_0_IRQHandler
 895              	 .thumb
 896              	 .thumb_func
 898              	CAN0_0_IRQHandler:
 899              	.LFB475:
 244:../main.c     **** 
 245:../main.c     **** //CAN RX reste distance
 246:../main.c     **** void CAN_RX_MO7_ISR(void){
 900              	 .loc 4 246 0
 901              	 .cfi_startproc
 902              	 
 903              	 
 904 0000 80B5     	 push {r7,lr}
 905              	.LCFI41:
 906              	 .cfi_def_cfa_offset 8
 907              	 .cfi_offset 7,-8
 908              	 .cfi_offset 14,-4
 909 0002 84B0     	 sub sp,sp,#16
 910              	.LCFI42:
 911              	 .cfi_def_cfa_offset 24
 912 0004 00AF     	 add r7,sp,#0
 913              	.LCFI43:
 914              	 .cfi_def_cfa_register 7
 247:../main.c     **** 	XMC_CAN_MO_t* lmsgobjct_ptr = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
 915              	 .loc 4 247 0
 916 0006 124B     	 ldr r3,.L33
 917 0008 5B6A     	 ldr r3,[r3,#36]
 918 000a 1B68     	 ldr r3,[r3]
 919 000c BB60     	 str r3,[r7,#8]
 248:../main.c     **** 	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]); // reset for incremental encoder
 920              	 .loc 4 248 0
 921 000e 104B     	 ldr r3,.L33
 922 0010 5B6A     	 ldr r3,[r3,#36]
 923 0012 1846     	 mov r0,r3
 924 0014 FFF7FEFF 	 bl CAN_NODE_MO_Receive
 249:../main.c     **** 
 250:../main.c     **** 	uint8_t data_r[4];
 251:../main.c     **** 	 int i;
 252:../main.c     **** 	 for(i = 0 ; i < 4 ; i ++){
 925              	 .loc 4 252 0
 926 0018 0023     	 movs r3,#0
 927 001a FB60     	 str r3,[r7,#12]
 928 001c 0CE0     	 b .L30
 929              	.L31:
 253:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 930              	 .loc 4 253 0 discriminator 3
 931 001e BA68     	 ldr r2,[r7,#8]
 932 0020 FB68     	 ldr r3,[r7,#12]
 933 0022 1344     	 add r3,r3,r2
 934 0024 1033     	 adds r3,r3,#16
 935 0026 1978     	 ldrb r1,[r3]
 936 0028 3A1D     	 adds r2,r7,#4
 937 002a FB68     	 ldr r3,[r7,#12]
 938 002c 1344     	 add r3,r3,r2
 939 002e 0A46     	 mov r2,r1
 940 0030 1A70     	 strb r2,[r3]
 252:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 941              	 .loc 4 252 0 discriminator 3
 942 0032 FB68     	 ldr r3,[r7,#12]
 943 0034 0133     	 adds r3,r3,#1
 944 0036 FB60     	 str r3,[r7,#12]
 945              	.L30:
 252:../main.c     **** 		 data_r[i] = lmsgobjct_ptr->can_data_byte[i];
 946              	 .loc 4 252 0 is_stmt 0 discriminator 1
 947 0038 FB68     	 ldr r3,[r7,#12]
 948 003a 032B     	 cmp r3,#3
 949 003c EFDD     	 ble .L31
 254:../main.c     **** 	 }
 255:../main.c     **** 
 256:../main.c     **** 	 if(data_r[MOTOR_ON_ROVER] == 1) distance_180deg_ele_count = 0;
 950              	 .loc 4 256 0 is_stmt 1
 951 003e FB79     	 ldrb r3,[r7,#7]
 952 0040 012B     	 cmp r3,#1
 953 0042 02D1     	 bne .L29
 954              	 .loc 4 256 0 is_stmt 0 discriminator 1
 955 0044 034B     	 ldr r3,.L33+4
 956 0046 0022     	 movs r2,#0
 957 0048 1A60     	 str r2,[r3]
 958              	.L29:
 257:../main.c     **** }
 959              	 .loc 4 257 0 is_stmt 1
 960 004a 1037     	 adds r7,r7,#16
 961              	.LCFI44:
 962              	 .cfi_def_cfa_offset 8
 963 004c BD46     	 mov sp,r7
 964              	.LCFI45:
 965              	 .cfi_def_cfa_register 13
 966              	 
 967 004e 80BD     	 pop {r7,pc}
 968              	.L34:
 969              	 .align 2
 970              	.L33:
 971 0050 00000000 	 .word CAN_NODE_0
 972 0054 00000000 	 .word distance_180deg_ele_count
 973              	 .cfi_endproc
 974              	.LFE475:
 976              	 .global __aeabi_f2d
 977              	 .global __aeabi_dmul
 978              	 .global __aeabi_ddiv
 979              	 .global __aeabi_d2f
 980              	 .global __aeabi_dadd
 981              	 .section .text.CCU43_0_IRQHandler,"ax",%progbits
 982              	 .align 2
 983              	 .global CCU43_0_IRQHandler
 984              	 .thumb
 985              	 .thumb_func
 987              	CCU43_0_IRQHandler:
 988              	.LFB476:
 258:../main.c     **** 
 259:../main.c     **** void CAN_TX_ISR(void){
 989              	 .loc 4 259 0
 990              	 .cfi_startproc
 991              	 
 992              	 
 993 0000 80B5     	 push {r7,lr}
 994              	.LCFI46:
 995              	 .cfi_def_cfa_offset 8
 996              	 .cfi_offset 7,-8
 997              	 .cfi_offset 14,-4
 998 0002 86B0     	 sub sp,sp,#24
 999              	.LCFI47:
 1000              	 .cfi_def_cfa_offset 32
 1001 0004 00AF     	 add r7,sp,#0
 1002              	.LCFI48:
 1003              	 .cfi_def_cfa_register 7
 260:../main.c     **** 	int16_t Inverter_state[4] = {0};
 1004              	 .loc 4 260 0
 1005 0006 0023     	 movs r3,#0
 1006 0008 FB60     	 str r3,[r7,#12]
 1007 000a 0023     	 movs r3,#0
 1008 000c 3B61     	 str r3,[r7,#16]
 261:../main.c     **** 
 262:../main.c     **** 	Inverter_state[0] = MOTOR_ON_ROVER; // for identification apart form CAN ID
 1009              	 .loc 4 262 0
 1010 000e 0323     	 movs r3,#3
 1011 0010 BB81     	 strh r3,[r7,#12]
 263:../main.c     **** 
 264:../main.c     **** 	if(CAN_no_com_counter > CAN_NO_COM_TH) Inverter_state[0] = 0;
 1012              	 .loc 4 264 0
 1013 0012 4D4B     	 ldr r3,.L38+16
 1014 0014 1B78     	 ldrb r3,[r3]
 1015 0016 FA2B     	 cmp r3,#250
 1016 0018 02D9     	 bls .L36
 1017              	 .loc 4 264 0 is_stmt 0 discriminator 1
 1018 001a 0023     	 movs r3,#0
 1019 001c BB81     	 strh r3,[r7,#12]
 1020 001e 01E0     	 b .L37
 1021              	.L36:
 265:../main.c     **** 	else Inverter_state[1] = 1;
 1022              	 .loc 4 265 0 is_stmt 1
 1023 0020 0123     	 movs r3,#1
 1024 0022 FB81     	 strh r3,[r7,#14]
 1025              	.L37:
 266:../main.c     **** 
 267:../main.c     **** 	Speed_act = omega_ele_rads * WHEEL_R / PPZ;
 1026              	 .loc 4 267 0
 1027 0024 494B     	 ldr r3,.L38+20
 1028 0026 1B68     	 ldr r3,[r3]
 1029 0028 1846     	 mov r0,r3
 1030 002a FFF7FEFF 	 bl __aeabi_f2d
 1031 002e 0246     	 mov r2,r0
 1032 0030 0B46     	 mov r3,r1
 1033 0032 1046     	 mov r0,r2
 1034 0034 1946     	 mov r1,r3
 1035 0036 40A3     	 adr r3,.L38
 1036 0038 D3E90023 	 ldrd r2,[r3]
 1037 003c FFF7FEFF 	 bl __aeabi_dmul
 1038 0040 0246     	 mov r2,r0
 1039 0042 0B46     	 mov r3,r1
 1040 0044 1046     	 mov r0,r2
 1041 0046 1946     	 mov r1,r3
 1042 0048 4FF00002 	 mov r2,#0
 1043 004c 404B     	 ldr r3,.L38+24
 1044 004e FFF7FEFF 	 bl __aeabi_ddiv
 1045 0052 0246     	 mov r2,r0
 1046 0054 0B46     	 mov r3,r1
 1047 0056 1046     	 mov r0,r2
 1048 0058 1946     	 mov r1,r3
 1049 005a FFF7FEFF 	 bl __aeabi_d2f
 1050 005e 0246     	 mov r2,r0
 1051 0060 3C4B     	 ldr r3,.L38+28
 1052 0062 1A60     	 str r2,[r3]
 268:../main.c     **** 	if(MOTOR_NUM == 6) Speed_act = -Speed_act;
 269:../main.c     **** 	Inverter_state[2] = Speed_act * 1000; // to mm/sconverstoion
 1053              	 .loc 4 269 0
 1054 0064 3B4B     	 ldr r3,.L38+28
 1055 0066 D3ED007A 	 flds s15,[r3]
 1056 006a 9FED3B7A 	 flds s14,.L38+32
 1057 006e 67EE877A 	 fmuls s15,s15,s14
 1058 0072 FDEEE77A 	 ftosizs s15,s15
 1059 0076 C7ED017A 	 fsts s15,[r7,#4]
 1060 007a BB88     	 ldrh r3,[r7,#4]
 1061 007c 9BB2     	 uxth r3,r3
 1062 007e 3B82     	 strh r3,[r7,#16]
 270:../main.c     **** 
 271:../main.c     **** 	distance = (((float)distance_180deg_ele_count / 2) / PPZ) * PI * 2 * WHEEL_R;
 1063              	 .loc 4 271 0
 1064 0080 364B     	 ldr r3,.L38+36
 1065 0082 1B68     	 ldr r3,[r3]
 1066 0084 07EE903A 	 fmsr s15,r3
 1067 0088 F8EEE77A 	 fsitos s15,s15
 1068 008c B0EE007A 	 fconsts s14,#0
 1069 0090 C7EE877A 	 fdivs s15,s15,s14
 1070 0094 B2EE067A 	 fconsts s14,#38
 1071 0098 C7EE877A 	 fdivs s15,s15,s14
 1072 009c 17EE900A 	 fmrs r0,s15
 1073 00a0 FFF7FEFF 	 bl __aeabi_f2d
 1074 00a4 0246     	 mov r2,r0
 1075 00a6 0B46     	 mov r3,r1
 1076 00a8 1046     	 mov r0,r2
 1077 00aa 1946     	 mov r1,r3
 1078 00ac 24A3     	 adr r3,.L38+8
 1079 00ae D3E90023 	 ldrd r2,[r3]
 1080 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1081 00b6 0246     	 mov r2,r0
 1082 00b8 0B46     	 mov r3,r1
 1083 00ba 1046     	 mov r0,r2
 1084 00bc 1946     	 mov r1,r3
 1085 00be FFF7FEFF 	 bl __aeabi_dadd
 1086 00c2 0246     	 mov r2,r0
 1087 00c4 0B46     	 mov r3,r1
 1088 00c6 1046     	 mov r0,r2
 1089 00c8 1946     	 mov r1,r3
 1090 00ca 1BA3     	 adr r3,.L38
 1091 00cc D3E90023 	 ldrd r2,[r3]
 1092 00d0 FFF7FEFF 	 bl __aeabi_dmul
 1093 00d4 0246     	 mov r2,r0
 1094 00d6 0B46     	 mov r3,r1
 1095 00d8 1046     	 mov r0,r2
 1096 00da 1946     	 mov r1,r3
 1097 00dc FFF7FEFF 	 bl __aeabi_d2f
 1098 00e0 0246     	 mov r2,r0
 1099 00e2 1F4B     	 ldr r3,.L38+40
 1100 00e4 1A60     	 str r2,[r3]
 272:../main.c     **** 	if(MOTOR_NUM == 6) distance = -distance;
 273:../main.c     **** 	Inverter_state[3] = distance * 1000; // to mm
 1101              	 .loc 4 273 0
 1102 00e6 1E4B     	 ldr r3,.L38+40
 1103 00e8 D3ED007A 	 flds s15,[r3]
 1104 00ec 9FED1A7A 	 flds s14,.L38+32
 1105 00f0 67EE877A 	 fmuls s15,s15,s14
 1106 00f4 FDEEE77A 	 ftosizs s15,s15
 1107 00f8 C7ED017A 	 fsts s15,[r7,#4]
 1108 00fc BB88     	 ldrh r3,[r7,#4]
 1109 00fe 9BB2     	 uxth r3,r3
 1110 0100 7B82     	 strh r3,[r7,#18]
 274:../main.c     **** 
 275:../main.c     **** 	uint8_t CAN_MO = MOTOR_ON_ROVER + 2;
 1111              	 .loc 4 275 0
 1112 0102 0523     	 movs r3,#5
 1113 0104 FB75     	 strb r3,[r7,#23]
 276:../main.c     **** 	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[CAN_MO], (uint8_t*)Inverter_state);
 1114              	 .loc 4 276 0
 1115 0106 FB7D     	 ldrb r3,[r7,#23]
 1116 0108 164A     	 ldr r2,.L38+44
 1117 010a 0233     	 adds r3,r3,#2
 1118 010c 9B00     	 lsls r3,r3,#2
 1119 010e 1344     	 add r3,r3,r2
 1120 0110 5A68     	 ldr r2,[r3,#4]
 1121 0112 07F10C03 	 add r3,r7,#12
 1122 0116 1046     	 mov r0,r2
 1123 0118 1946     	 mov r1,r3
 1124 011a FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
 277:../main.c     **** 	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[CAN_MO]); //Transmit the data of message object1
 1125              	 .loc 4 277 0
 1126 011e FB7D     	 ldrb r3,[r7,#23]
 1127 0120 104A     	 ldr r2,.L38+44
 1128 0122 0233     	 adds r3,r3,#2
 1129 0124 9B00     	 lsls r3,r3,#2
 1130 0126 1344     	 add r3,r3,r2
 1131 0128 5B68     	 ldr r3,[r3,#4]
 1132 012a 1846     	 mov r0,r3
 1133 012c FFF7FEFF 	 bl CAN_NODE_MO_Transmit
 278:../main.c     **** }
 1134              	 .loc 4 278 0
 1135 0130 1837     	 adds r7,r7,#24
 1136              	.LCFI49:
 1137              	 .cfi_def_cfa_offset 8
 1138 0132 BD46     	 mov sp,r7
 1139              	.LCFI50:
 1140              	 .cfi_def_cfa_register 13
 1141              	 
 1142 0134 80BD     	 pop {r7,pc}
 1143              	.L39:
 1144 0136 00BF     	 .align 3
 1145              	.L38:
 1146 0138 48E17A14 	 .word 343597384
 1147 013c AE47B13F 	 .word 1068582830
 1148 0140 F1D4C853 	 .word 1405670641
 1149 0144 FB210940 	 .word 1074340347
 1150 0148 00000000 	 .word CAN_no_com_counter
 1151 014c 00000000 	 .word omega_ele_rads
 1152 0150 00002640 	 .word 1076232192
 1153 0154 00000000 	 .word Speed_act
 1154 0158 00007A44 	 .word 1148846080
 1155 015c 00000000 	 .word distance_180deg_ele_count
 1156 0160 00000000 	 .word distance
 1157 0164 00000000 	 .word CAN_NODE_0
 1158              	 .cfi_endproc
 1159              	.LFE476:
 1161              	 .section .text.CCU43_3_IRQHandler,"ax",%progbits
 1162              	 .align 2
 1163              	 .global CCU43_3_IRQHandler
 1164              	 .thumb
 1165              	 .thumb_func
 1167              	CCU43_3_IRQHandler:
 1168              	.LFB477:
 279:../main.c     **** 
 280:../main.c     **** // 10us Timer for speed measurement
 281:../main.c     **** void TimeCounterISR(void){
 1169              	 .loc 4 281 0
 1170              	 .cfi_startproc
 1171              	 
 1172              	 
 1173              	 
 1174 0000 80B4     	 push {r7}
 1175              	.LCFI51:
 1176              	 .cfi_def_cfa_offset 4
 1177              	 .cfi_offset 7,-4
 1178 0002 00AF     	 add r7,sp,#0
 1179              	.LCFI52:
 1180              	 .cfi_def_cfa_register 7
 282:../main.c     **** 	time_since_A ++;
 1181              	 .loc 4 282 0
 1182 0004 094B     	 ldr r3,.L41
 1183 0006 1B68     	 ldr r3,[r3]
 1184 0008 0133     	 adds r3,r3,#1
 1185 000a 084A     	 ldr r2,.L41
 1186 000c 1360     	 str r3,[r2]
 283:../main.c     **** 	time_since_B ++;
 1187              	 .loc 4 283 0
 1188 000e 084B     	 ldr r3,.L41+4
 1189 0010 1B68     	 ldr r3,[r3]
 1190 0012 0133     	 adds r3,r3,#1
 1191 0014 064A     	 ldr r2,.L41+4
 1192 0016 1360     	 str r3,[r2]
 284:../main.c     **** 	time_since_C ++;
 1193              	 .loc 4 284 0
 1194 0018 064B     	 ldr r3,.L41+8
 1195 001a 1B68     	 ldr r3,[r3]
 1196 001c 0133     	 adds r3,r3,#1
 1197 001e 054A     	 ldr r2,.L41+8
 1198 0020 1360     	 str r3,[r2]
 285:../main.c     **** }
 1199              	 .loc 4 285 0
 1200 0022 BD46     	 mov sp,r7
 1201              	.LCFI53:
 1202              	 .cfi_def_cfa_register 13
 1203              	 
 1204 0024 5DF8047B 	 ldr r7,[sp],#4
 1205              	.LCFI54:
 1206              	 .cfi_restore 7
 1207              	 .cfi_def_cfa_offset 0
 1208 0028 7047     	 bx lr
 1209              	.L42:
 1210 002a 00BF     	 .align 2
 1211              	.L41:
 1212 002c 00000000 	 .word time_since_A
 1213 0030 00000000 	 .word time_since_B
 1214 0034 00000000 	 .word time_since_C
 1215              	 .cfi_endproc
 1216              	.LFE477:
 1218              	 .section .text.ERU1_2_IRQHandler,"ax",%progbits
 1219              	 .align 2
 1220              	 .global ERU1_2_IRQHandler
 1221              	 .thumb
 1222              	 .thumb_func
 1224              	ERU1_2_IRQHandler:
 1225              	.LFB478:
 286:../main.c     **** 
 287:../main.c     **** // Hall Sensors
 288:../main.c     **** void HallSensor_A_ISR(void){
 1226              	 .loc 4 288 0
 1227              	 .cfi_startproc
 1228              	 
 1229              	 
 1230 0000 80B5     	 push {r7,lr}
 1231              	.LCFI55:
 1232              	 .cfi_def_cfa_offset 8
 1233              	 .cfi_offset 7,-8
 1234              	 .cfi_offset 14,-4
 1235 0002 00AF     	 add r7,sp,#0
 1236              	.LCFI56:
 1237              	 .cfi_def_cfa_register 7
 289:../main.c     **** 	HallSensor();
 1238              	 .loc 4 289 0
 1239 0004 FFF7FEFF 	 bl HallSensor
 290:../main.c     **** 	time_180deg = time_since_A;				// Actual velocity value calculated with Hall A
 1240              	 .loc 4 290 0
 1241 0008 114B     	 ldr r3,.L46
 1242 000a 1B68     	 ldr r3,[r3]
 1243 000c 114A     	 ldr r2,.L46+4
 1244 000e 1360     	 str r3,[r2]
 291:../main.c     **** 	time_since_A = 0;						// measurement of speed -> time between change of Hall A
 1245              	 .loc 4 291 0
 1246 0010 0F4B     	 ldr r3,.L46
 1247 0012 0022     	 movs r2,#0
 1248 0014 1A60     	 str r2,[r3]
 292:../main.c     **** 	last_Hall_trig = 'A';
 1249              	 .loc 4 292 0
 1250 0016 104B     	 ldr r3,.L46+8
 1251 0018 4122     	 movs r2,#65
 1252 001a 1A70     	 strb r2,[r3]
 293:../main.c     **** 
 294:../main.c     **** 	if(direction == 1 ) distance_180deg_ele_count ++;
 1253              	 .loc 4 294 0
 1254 001c 0F4B     	 ldr r3,.L46+12
 1255 001e 1B78     	 ldrb r3,[r3]
 1256 0020 DBB2     	 uxtb r3,r3
 1257 0022 5BB2     	 sxtb r3,r3
 1258 0024 012B     	 cmp r3,#1
 1259 0026 05D1     	 bne .L44
 1260              	 .loc 4 294 0 is_stmt 0 discriminator 1
 1261 0028 0D4B     	 ldr r3,.L46+16
 1262 002a 1B68     	 ldr r3,[r3]
 1263 002c 0133     	 adds r3,r3,#1
 1264 002e 0C4A     	 ldr r2,.L46+16
 1265 0030 1360     	 str r3,[r2]
 1266 0032 0BE0     	 b .L43
 1267              	.L44:
 295:../main.c     **** 	else if(direction == -1 ) distance_180deg_ele_count --;
 1268              	 .loc 4 295 0 is_stmt 1
 1269 0034 094B     	 ldr r3,.L46+12
 1270 0036 1B78     	 ldrb r3,[r3]
 1271 0038 DBB2     	 uxtb r3,r3
 1272 003a 5BB2     	 sxtb r3,r3
 1273 003c B3F1FF3F 	 cmp r3,#-1
 1274 0040 04D1     	 bne .L43
 1275              	 .loc 4 295 0 is_stmt 0 discriminator 1
 1276 0042 074B     	 ldr r3,.L46+16
 1277 0044 1B68     	 ldr r3,[r3]
 1278 0046 013B     	 subs r3,r3,#1
 1279 0048 054A     	 ldr r2,.L46+16
 1280 004a 1360     	 str r3,[r2]
 1281              	.L43:
 296:../main.c     **** }
 1282              	 .loc 4 296 0 is_stmt 1
 1283 004c 80BD     	 pop {r7,pc}
 1284              	.L47:
 1285 004e 00BF     	 .align 2
 1286              	.L46:
 1287 0050 00000000 	 .word time_since_A
 1288 0054 00000000 	 .word time_180deg
 1289 0058 00000000 	 .word last_Hall_trig
 1290 005c 00000000 	 .word direction
 1291 0060 00000000 	 .word distance_180deg_ele_count
 1292              	 .cfi_endproc
 1293              	.LFE478:
 1295              	 .section .text.ERU1_0_IRQHandler,"ax",%progbits
 1296              	 .align 2
 1297              	 .global ERU1_0_IRQHandler
 1298              	 .thumb
 1299              	 .thumb_func
 1301              	ERU1_0_IRQHandler:
 1302              	.LFB479:
 297:../main.c     **** void HallSensor_B_ISR(void){
 1303              	 .loc 4 297 0
 1304              	 .cfi_startproc
 1305              	 
 1306              	 
 1307 0000 80B5     	 push {r7,lr}
 1308              	.LCFI57:
 1309              	 .cfi_def_cfa_offset 8
 1310              	 .cfi_offset 7,-8
 1311              	 .cfi_offset 14,-4
 1312 0002 00AF     	 add r7,sp,#0
 1313              	.LCFI58:
 1314              	 .cfi_def_cfa_register 7
 298:../main.c     **** 	HallSensor();
 1315              	 .loc 4 298 0
 1316 0004 FFF7FEFF 	 bl HallSensor
 299:../main.c     **** 	time_180deg = time_since_B;
 1317              	 .loc 4 299 0
 1318 0008 054B     	 ldr r3,.L49
 1319 000a 1B68     	 ldr r3,[r3]
 1320 000c 054A     	 ldr r2,.L49+4
 1321 000e 1360     	 str r3,[r2]
 300:../main.c     **** 	time_since_B = 0;
 1322              	 .loc 4 300 0
 1323 0010 034B     	 ldr r3,.L49
 1324 0012 0022     	 movs r2,#0
 1325 0014 1A60     	 str r2,[r3]
 301:../main.c     **** 	last_Hall_trig = 'B';
 1326              	 .loc 4 301 0
 1327 0016 044B     	 ldr r3,.L49+8
 1328 0018 4222     	 movs r2,#66
 1329 001a 1A70     	 strb r2,[r3]
 302:../main.c     **** }
 1330              	 .loc 4 302 0
 1331 001c 80BD     	 pop {r7,pc}
 1332              	.L50:
 1333 001e 00BF     	 .align 2
 1334              	.L49:
 1335 0020 00000000 	 .word time_since_B
 1336 0024 00000000 	 .word time_180deg
 1337 0028 00000000 	 .word last_Hall_trig
 1338              	 .cfi_endproc
 1339              	.LFE479:
 1341              	 .section .text.ERU1_3_IRQHandler,"ax",%progbits
 1342              	 .align 2
 1343              	 .global ERU1_3_IRQHandler
 1344              	 .thumb
 1345              	 .thumb_func
 1347              	ERU1_3_IRQHandler:
 1348              	.LFB480:
 303:../main.c     **** void HallSensor_C_ISR(void){
 1349              	 .loc 4 303 0
 1350              	 .cfi_startproc
 1351              	 
 1352              	 
 1353 0000 80B5     	 push {r7,lr}
 1354              	.LCFI59:
 1355              	 .cfi_def_cfa_offset 8
 1356              	 .cfi_offset 7,-8
 1357              	 .cfi_offset 14,-4
 1358 0002 00AF     	 add r7,sp,#0
 1359              	.LCFI60:
 1360              	 .cfi_def_cfa_register 7
 304:../main.c     **** 	HallSensor();
 1361              	 .loc 4 304 0
 1362 0004 FFF7FEFF 	 bl HallSensor
 305:../main.c     **** 	time_180deg = time_since_C;
 1363              	 .loc 4 305 0
 1364 0008 054B     	 ldr r3,.L52
 1365 000a 1B68     	 ldr r3,[r3]
 1366 000c 054A     	 ldr r2,.L52+4
 1367 000e 1360     	 str r3,[r2]
 306:../main.c     **** 	time_since_C = 0;
 1368              	 .loc 4 306 0
 1369 0010 034B     	 ldr r3,.L52
 1370 0012 0022     	 movs r2,#0
 1371 0014 1A60     	 str r2,[r3]
 307:../main.c     **** 	last_Hall_trig = 'C';
 1372              	 .loc 4 307 0
 1373 0016 044B     	 ldr r3,.L52+8
 1374 0018 4322     	 movs r2,#67
 1375 001a 1A70     	 strb r2,[r3]
 308:../main.c     **** }
 1376              	 .loc 4 308 0
 1377 001c 80BD     	 pop {r7,pc}
 1378              	.L53:
 1379 001e 00BF     	 .align 2
 1380              	.L52:
 1381 0020 00000000 	 .word time_since_C
 1382 0024 00000000 	 .word time_180deg
 1383 0028 00000000 	 .word last_Hall_trig
 1384              	 .cfi_endproc
 1385              	.LFE480:
 1387              	 .section .text.CCU43_1_IRQHandler,"ax",%progbits
 1388              	 .align 2
 1389              	 .global CCU43_1_IRQHandler
 1390              	 .thumb
 1391              	 .thumb_func
 1393              	CCU43_1_IRQHandler:
 1394              	.LFB481:
 309:../main.c     **** 
 310:../main.c     **** /*
 311:../main.c     **** // Turn off driver at Overcurrent
 312:../main.c     **** void OverCurrent_U_ISR(void)
 313:../main.c     **** {
 314:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 315:../main.c     **** }
 316:../main.c     **** void OverCurrent_V_ISR(void)
 317:../main.c     **** {
 318:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 319:../main.c     **** }
 320:../main.c     **** void OverCurrent_W_ISR(void)
 321:../main.c     **** {
 322:../main.c     **** 	//DIGITAL_IO_SetOutputLow(&Driver_U);	// switch off U driver
 323:../main.c     **** }
 324:../main.c     **** */
 325:../main.c     **** 
 326:../main.c     **** //ISR based on Timer_1 --> 100us time base
 327:../main.c     **** void ISR_INT1(void)
 328:../main.c     **** {
 1395              	 .loc 4 328 0
 1396              	 .cfi_startproc
 1397              	 
 1398              	 
 1399              	 
 1400 0000 80B4     	 push {r7}
 1401              	.LCFI61:
 1402              	 .cfi_def_cfa_offset 4
 1403              	 .cfi_offset 7,-4
 1404 0002 00AF     	 add r7,sp,#0
 1405              	.LCFI62:
 1406              	 .cfi_def_cfa_register 7
 329:../main.c     **** }
 1407              	 .loc 4 329 0
 1408 0004 BD46     	 mov sp,r7
 1409              	.LCFI63:
 1410              	 .cfi_def_cfa_register 13
 1411              	 
 1412 0006 5DF8047B 	 ldr r7,[sp],#4
 1413              	.LCFI64:
 1414              	 .cfi_restore 7
 1415              	 .cfi_def_cfa_offset 0
 1416 000a 7047     	 bx lr
 1417              	 .cfi_endproc
 1418              	.LFE481:
 1420              	 .section .text.CCU80_3_IRQHandler,"ax",%progbits
 1421              	 .align 2
 1422              	 .global CCU80_3_IRQHandler
 1423              	 .thumb
 1424              	 .thumb_func
 1426              	CCU80_3_IRQHandler:
 1427              	.LFB482:
 330:../main.c     **** 
 331:../main.c     **** // ISR for Updating the SVM PWM -> 50us = 20kHz
 332:../main.c     **** void PeriodMatchInterruptHandler(void)
 333:../main.c     **** {
 1428              	 .loc 4 333 0
 1429              	 .cfi_startproc
 1430              	 
 1431              	 
 1432 0000 80B5     	 push {r7,lr}
 1433              	.LCFI65:
 1434              	 .cfi_def_cfa_offset 8
 1435              	 .cfi_offset 7,-8
 1436              	 .cfi_offset 14,-4
 1437 0002 82B0     	 sub sp,sp,#8
 1438              	.LCFI66:
 1439              	 .cfi_def_cfa_offset 16
 1440 0004 00AF     	 add r7,sp,#0
 1441              	.LCFI67:
 1442              	 .cfi_def_cfa_register 7
 334:../main.c     **** 	count++;	// only use a multiple of the period match frequency 20*20kHz = 1ms
 1443              	 .loc 4 334 0
 1444 0006 144B     	 ldr r3,.L57
 1445 0008 1B78     	 ldrb r3,[r3]
 1446 000a DBB2     	 uxtb r3,r3
 1447 000c 0133     	 adds r3,r3,#1
 1448 000e DAB2     	 uxtb r2,r3
 1449 0010 114B     	 ldr r3,.L57
 1450 0012 1A70     	 strb r2,[r3]
 335:../main.c     **** 	if(count == 1){ // only updating evry time there is new data safes 5-8 % duty on the calculation
 1451              	 .loc 4 335 0
 1452 0014 104B     	 ldr r3,.L57
 1453 0016 1B78     	 ldrb r3,[r3]
 1454 0018 DBB2     	 uxtb r3,r3
 1455 001a 012B     	 cmp r3,#1
 1456 001c 18D1     	 bne .L55
 336:../main.c     **** 		PWM_SVM_SVMUpdate(&PWM_SVM_0, (uint16_t)modulation_index_scaled, (uint32_t)angle_ab * ANGLE_ONE_D
 1457              	 .loc 4 336 0
 1458 001e 0F4B     	 ldr r3,.L57+4
 1459 0020 D3ED007A 	 flds s15,[r3]
 1460 0024 FCEEE77A 	 ftouizs s15,s15
 1461 0028 C7ED017A 	 fsts s15,[r7,#4]
 1462 002c BB88     	 ldrh r3,[r7,#4]
 1463 002e 9AB2     	 uxth r2,r3
 1464 0030 0B4B     	 ldr r3,.L57+8
 1465 0032 D3ED007A 	 flds s15,[r3]
 1466 0036 FCEEE77A 	 ftouizs s15,s15
 1467 003a 17EE901A 	 fmrs r1,s15
 1468 003e 4BF20B63 	 movw r3,#46603
 1469 0042 03FB01F3 	 mul r3,r3,r1
 1470 0046 0748     	 ldr r0,.L57+12
 1471 0048 1146     	 mov r1,r2
 1472 004a 1A46     	 mov r2,r3
 1473 004c FFF7FEFF 	 bl PWM_SVM_SVMUpdate
 1474              	.L55:
 337:../main.c     **** 	}
 338:../main.c     **** }
 1475              	 .loc 4 338 0
 1476 0050 0837     	 adds r7,r7,#8
 1477              	.LCFI68:
 1478              	 .cfi_def_cfa_offset 8
 1479 0052 BD46     	 mov sp,r7
 1480              	.LCFI69:
 1481              	 .cfi_def_cfa_register 13
 1482              	 
 1483 0054 80BD     	 pop {r7,pc}
 1484              	.L58:
 1485 0056 00BF     	 .align 2
 1486              	.L57:
 1487 0058 00000000 	 .word count
 1488 005c 00000000 	 .word modulation_index_scaled
 1489 0060 00000000 	 .word angle_ab
 1490 0064 00000000 	 .word PWM_SVM_0
 1491              	 .cfi_endproc
 1492              	.LFE482:
 1494              	 .section .text.Hall_init,"ax",%progbits
 1495              	 .align 2
 1496              	 .global Hall_init
 1497              	 .thumb
 1498              	 .thumb_func
 1500              	Hall_init:
 1501              	.LFB483:
 339:../main.c     **** 
 340:../main.c     **** //########################
 341:../main.c     **** // FUNCTIONS
 342:../main.c     **** //########################
 343:../main.c     **** 
 344:../main.c     **** // Hall init -> readout of actual Hall pattern to determine the motor position
 345:../main.c     **** void Hall_init(void){
 1502              	 .loc 4 345 0
 1503              	 .cfi_startproc
 1504              	 
 1505              	 
 1506 0000 90B5     	 push {r4,r7,lr}
 1507              	.LCFI70:
 1508              	 .cfi_def_cfa_offset 12
 1509              	 .cfi_offset 4,-12
 1510              	 .cfi_offset 7,-8
 1511              	 .cfi_offset 14,-4
 1512 0002 83B0     	 sub sp,sp,#12
 1513              	.LCFI71:
 1514              	 .cfi_def_cfa_offset 24
 1515 0004 00AF     	 add r7,sp,#0
 1516              	.LCFI72:
 1517              	 .cfi_def_cfa_register 7
 346:../main.c     **** 
 347:../main.c     **** 	  uint8_t Hall_Initial =  ((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinV
 1518              	 .loc 4 347 0
 1519 0006 2148     	 ldr r0,.L66
 1520 0008 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1521 000c 0346     	 mov r3,r0
 1522 000e DBB2     	 uxtb r3,r3
 1523 0010 5B00     	 lsls r3,r3,#1
 1524 0012 DCB2     	 uxtb r4,r3
 1525 0014 1E48     	 ldr r0,.L66+4
 1526 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1527 001a 0346     	 mov r3,r0
 1528 001c DBB2     	 uxtb r3,r3
 1529 001e 2343     	 orrs r3,r3,r4
 1530 0020 DBB2     	 uxtb r3,r3
 1531 0022 5B00     	 lsls r3,r3,#1
 1532 0024 DCB2     	 uxtb r4,r3
 1533 0026 1B48     	 ldr r0,.L66+8
 1534 0028 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1535 002c 0346     	 mov r3,r0
 1536 002e DBB2     	 uxtb r3,r3
 1537 0030 2343     	 orrs r3,r3,r4
 1538 0032 FB71     	 strb r3,[r7,#7]
 348:../main.c     **** 
 349:../main.c     **** 	 if(Hall_Initial == 0b100){sector = 0;}
 1539              	 .loc 4 349 0
 1540 0034 FB79     	 ldrb r3,[r7,#7]
 1541 0036 042B     	 cmp r3,#4
 1542 0038 03D1     	 bne .L60
 1543              	 .loc 4 349 0 is_stmt 0 discriminator 1
 1544 003a 174B     	 ldr r3,.L66+12
 1545 003c 0022     	 movs r2,#0
 1546 003e 1A70     	 strb r2,[r3]
 1547 0040 21E0     	 b .L59
 1548              	.L60:
 350:../main.c     **** 	 else if(Hall_Initial == 0b110){sector = 1;}
 1549              	 .loc 4 350 0 is_stmt 1
 1550 0042 FB79     	 ldrb r3,[r7,#7]
 1551 0044 062B     	 cmp r3,#6
 1552 0046 03D1     	 bne .L62
 1553              	 .loc 4 350 0 is_stmt 0 discriminator 1
 1554 0048 134B     	 ldr r3,.L66+12
 1555 004a 0122     	 movs r2,#1
 1556 004c 1A70     	 strb r2,[r3]
 1557 004e 1AE0     	 b .L59
 1558              	.L62:
 351:../main.c     **** 	 else if(Hall_Initial == 0b010){sector = 2;}
 1559              	 .loc 4 351 0 is_stmt 1
 1560 0050 FB79     	 ldrb r3,[r7,#7]
 1561 0052 022B     	 cmp r3,#2
 1562 0054 03D1     	 bne .L63
 1563              	 .loc 4 351 0 is_stmt 0 discriminator 1
 1564 0056 104B     	 ldr r3,.L66+12
 1565 0058 0222     	 movs r2,#2
 1566 005a 1A70     	 strb r2,[r3]
 1567 005c 13E0     	 b .L59
 1568              	.L63:
 352:../main.c     **** 	 else if(Hall_Initial == 0b011){sector = 3;}
 1569              	 .loc 4 352 0 is_stmt 1
 1570 005e FB79     	 ldrb r3,[r7,#7]
 1571 0060 032B     	 cmp r3,#3
 1572 0062 03D1     	 bne .L64
 1573              	 .loc 4 352 0 is_stmt 0 discriminator 1
 1574 0064 0C4B     	 ldr r3,.L66+12
 1575 0066 0322     	 movs r2,#3
 1576 0068 1A70     	 strb r2,[r3]
 1577 006a 0CE0     	 b .L59
 1578              	.L64:
 353:../main.c     **** 	 else if(Hall_Initial == 0b001){sector = 4;}
 1579              	 .loc 4 353 0 is_stmt 1
 1580 006c FB79     	 ldrb r3,[r7,#7]
 1581 006e 012B     	 cmp r3,#1
 1582 0070 03D1     	 bne .L65
 1583              	 .loc 4 353 0 is_stmt 0 discriminator 1
 1584 0072 094B     	 ldr r3,.L66+12
 1585 0074 0422     	 movs r2,#4
 1586 0076 1A70     	 strb r2,[r3]
 1587 0078 05E0     	 b .L59
 1588              	.L65:
 354:../main.c     **** 	 else if(Hall_Initial == 0b101){sector = 5;}
 1589              	 .loc 4 354 0 is_stmt 1
 1590 007a FB79     	 ldrb r3,[r7,#7]
 1591 007c 052B     	 cmp r3,#5
 1592 007e 02D1     	 bne .L59
 1593              	 .loc 4 354 0 is_stmt 0 discriminator 1
 1594 0080 054B     	 ldr r3,.L66+12
 1595 0082 0522     	 movs r2,#5
 1596 0084 1A70     	 strb r2,[r3]
 1597              	.L59:
 355:../main.c     **** }
 1598              	 .loc 4 355 0 is_stmt 1
 1599 0086 0C37     	 adds r7,r7,#12
 1600              	.LCFI73:
 1601              	 .cfi_def_cfa_offset 12
 1602 0088 BD46     	 mov sp,r7
 1603              	.LCFI74:
 1604              	 .cfi_def_cfa_register 13
 1605              	 
 1606 008a 90BD     	 pop {r4,r7,pc}
 1607              	.L67:
 1608              	 .align 2
 1609              	.L66:
 1610 008c 00000000 	 .word Hall_A_ISR
 1611 0090 00000000 	 .word Hall_B_ISR
 1612 0094 00000000 	 .word Hall_C_ISR
 1613 0098 00000000 	 .word sector
 1614              	 .cfi_endproc
 1615              	.LFE483:
 1617              	 .section .text.HallSensor,"ax",%progbits
 1618              	 .align 2
 1619              	 .global HallSensor
 1620              	 .thumb
 1621              	 .thumb_func
 1623              	HallSensor:
 1624              	.LFB484:
 356:../main.c     **** 
 357:../main.c     **** // Function to determine direction and current Sector
 358:../main.c     **** void HallSensor(void){
 1625              	 .loc 4 358 0
 1626              	 .cfi_startproc
 1627              	 
 1628              	 
 1629 0000 90B5     	 push {r4,r7,lr}
 1630              	.LCFI75:
 1631              	 .cfi_def_cfa_offset 12
 1632              	 .cfi_offset 4,-12
 1633              	 .cfi_offset 7,-8
 1634              	 .cfi_offset 14,-4
 1635 0002 83B0     	 sub sp,sp,#12
 1636              	.LCFI76:
 1637              	 .cfi_def_cfa_offset 24
 1638 0004 00AF     	 add r7,sp,#0
 1639              	.LCFI77:
 1640              	 .cfi_def_cfa_register 7
 359:../main.c     **** 	enc_val = enc_val << 3; //shift old values and make space for new ones
 1641              	 .loc 4 359 0
 1642 0006 2E4B     	 ldr r3,.L75
 1643 0008 1B88     	 ldrh r3,[r3]
 1644 000a 9BB2     	 uxth r3,r3
 1645 000c DB00     	 lsls r3,r3,#3
 1646 000e 9AB2     	 uxth r2,r3
 1647 0010 2B4B     	 ldr r3,.L75
 1648 0012 1A80     	 strh r2,[r3]
 360:../main.c     **** 	uint8_t Hall_status =((((PIN_INTERRUPT_GetPinValue(&Hall_A_ISR) << 1) | PIN_INTERRUPT_GetPinValue(
 1649              	 .loc 4 360 0
 1650 0014 2B48     	 ldr r0,.L75+4
 1651 0016 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1652 001a 0346     	 mov r3,r0
 1653 001c DBB2     	 uxtb r3,r3
 1654 001e 5B00     	 lsls r3,r3,#1
 1655 0020 DCB2     	 uxtb r4,r3
 1656 0022 2948     	 ldr r0,.L75+8
 1657 0024 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1658 0028 0346     	 mov r3,r0
 1659 002a DBB2     	 uxtb r3,r3
 1660 002c 2343     	 orrs r3,r3,r4
 1661 002e DBB2     	 uxtb r3,r3
 1662 0030 5B00     	 lsls r3,r3,#1
 1663 0032 DCB2     	 uxtb r4,r3
 1664 0034 2548     	 ldr r0,.L75+12
 1665 0036 FFF7FEFF 	 bl PIN_INTERRUPT_GetPinValue
 1666 003a 0346     	 mov r3,r0
 1667 003c DBB2     	 uxtb r3,r3
 1668 003e 2343     	 orrs r3,r3,r4
 1669 0040 FB71     	 strb r3,[r7,#7]
 361:../main.c     **** 	enc_val = enc_val | Hall_status; //read Sensor values and store them
 1670              	 .loc 4 361 0
 1671 0042 FB79     	 ldrb r3,[r7,#7]
 1672 0044 9AB2     	 uxth r2,r3
 1673 0046 1E4B     	 ldr r3,.L75
 1674 0048 1B88     	 ldrh r3,[r3]
 1675 004a 9BB2     	 uxth r3,r3
 1676 004c 1343     	 orrs r3,r3,r2
 1677 004e 9AB2     	 uxth r2,r3
 1678 0050 1B4B     	 ldr r3,.L75
 1679 0052 1A80     	 strh r2,[r3]
 362:../main.c     **** 	direction = lookup_table[enc_val & 0b111111];  //direction due to look up table, look at actual an
 1680              	 .loc 4 362 0
 1681 0054 1A4B     	 ldr r3,.L75
 1682 0056 1B88     	 ldrh r3,[r3]
 1683 0058 9BB2     	 uxth r3,r3
 1684 005a 03F03F03 	 and r3,r3,#63
 1685 005e 1C4A     	 ldr r2,.L75+16
 1686 0060 D25C     	 ldrb r2,[r2,r3]
 1687 0062 1C4B     	 ldr r3,.L75+20
 1688 0064 1A70     	 strb r2,[r3]
 363:../main.c     **** 
 364:../main.c     **** 	if(Hall_status == 0b100){sector = 0;}
 1689              	 .loc 4 364 0
 1690 0066 FB79     	 ldrb r3,[r7,#7]
 1691 0068 042B     	 cmp r3,#4
 1692 006a 03D1     	 bne .L69
 1693              	 .loc 4 364 0 is_stmt 0 discriminator 1
 1694 006c 1A4B     	 ldr r3,.L75+24
 1695 006e 0022     	 movs r2,#0
 1696 0070 1A70     	 strb r2,[r3]
 1697 0072 21E0     	 b .L68
 1698              	.L69:
 365:../main.c     **** 		 else if(Hall_status == 0b110){sector = 1;}
 1699              	 .loc 4 365 0 is_stmt 1
 1700 0074 FB79     	 ldrb r3,[r7,#7]
 1701 0076 062B     	 cmp r3,#6
 1702 0078 03D1     	 bne .L71
 1703              	 .loc 4 365 0 is_stmt 0 discriminator 1
 1704 007a 174B     	 ldr r3,.L75+24
 1705 007c 0122     	 movs r2,#1
 1706 007e 1A70     	 strb r2,[r3]
 1707 0080 1AE0     	 b .L68
 1708              	.L71:
 366:../main.c     **** 		 else if(Hall_status == 0b010){sector = 2;}
 1709              	 .loc 4 366 0 is_stmt 1
 1710 0082 FB79     	 ldrb r3,[r7,#7]
 1711 0084 022B     	 cmp r3,#2
 1712 0086 03D1     	 bne .L72
 1713              	 .loc 4 366 0 is_stmt 0 discriminator 1
 1714 0088 134B     	 ldr r3,.L75+24
 1715 008a 0222     	 movs r2,#2
 1716 008c 1A70     	 strb r2,[r3]
 1717 008e 13E0     	 b .L68
 1718              	.L72:
 367:../main.c     **** 		 else if(Hall_status == 0b011){sector = 3;}
 1719              	 .loc 4 367 0 is_stmt 1
 1720 0090 FB79     	 ldrb r3,[r7,#7]
 1721 0092 032B     	 cmp r3,#3
 1722 0094 03D1     	 bne .L73
 1723              	 .loc 4 367 0 is_stmt 0 discriminator 1
 1724 0096 104B     	 ldr r3,.L75+24
 1725 0098 0322     	 movs r2,#3
 1726 009a 1A70     	 strb r2,[r3]
 1727 009c 0CE0     	 b .L68
 1728              	.L73:
 368:../main.c     **** 		 else if(Hall_status == 0b001){sector = 4;}
 1729              	 .loc 4 368 0 is_stmt 1
 1730 009e FB79     	 ldrb r3,[r7,#7]
 1731 00a0 012B     	 cmp r3,#1
 1732 00a2 03D1     	 bne .L74
 1733              	 .loc 4 368 0 is_stmt 0 discriminator 1
 1734 00a4 0C4B     	 ldr r3,.L75+24
 1735 00a6 0422     	 movs r2,#4
 1736 00a8 1A70     	 strb r2,[r3]
 1737 00aa 05E0     	 b .L68
 1738              	.L74:
 369:../main.c     **** 		 else if(Hall_status == 0b101){sector = 5;}
 1739              	 .loc 4 369 0 is_stmt 1
 1740 00ac FB79     	 ldrb r3,[r7,#7]
 1741 00ae 052B     	 cmp r3,#5
 1742 00b0 02D1     	 bne .L68
 1743              	 .loc 4 369 0 is_stmt 0 discriminator 1
 1744 00b2 094B     	 ldr r3,.L75+24
 1745 00b4 0522     	 movs r2,#5
 1746 00b6 1A70     	 strb r2,[r3]
 1747              	.L68:
 370:../main.c     **** 
 371:../main.c     **** }
 1748              	 .loc 4 371 0 is_stmt 1
 1749 00b8 0C37     	 adds r7,r7,#12
 1750              	.LCFI78:
 1751              	 .cfi_def_cfa_offset 12
 1752 00ba BD46     	 mov sp,r7
 1753              	.LCFI79:
 1754              	 .cfi_def_cfa_register 13
 1755              	 
 1756 00bc 90BD     	 pop {r4,r7,pc}
 1757              	.L76:
 1758 00be 00BF     	 .align 2
 1759              	.L75:
 1760 00c0 00000000 	 .word enc_val
 1761 00c4 00000000 	 .word Hall_A_ISR
 1762 00c8 00000000 	 .word Hall_B_ISR
 1763 00cc 00000000 	 .word Hall_C_ISR
 1764 00d0 00000000 	 .word lookup_table
 1765 00d4 00000000 	 .word direction
 1766 00d8 00000000 	 .word sector
 1767              	 .cfi_endproc
 1768              	.LFE484:
 1770              	 .global __aeabi_ui2d
 1771              	 .global __aeabi_i2d
 1772              	 .global __aeabi_dsub
 1773              	 .section .text.Calculation,"ax",%progbits
 1774              	 .align 2
 1775              	 .global Calculation
 1776              	 .thumb
 1777              	 .thumb_func
 1779              	Calculation:
 1780              	.LFB485:
 372:../main.c     **** // Routine for calculation (sector, clark-Park trans.,...)
 373:../main.c     **** 
 374:../main.c     **** //5kHz loop since every 4th step of 50us --> 200us --> 5kHz
 375:../main.c     **** void Calculation(void){
 1781              	 .loc 4 375 0
 1782              	 .cfi_startproc
 1783              	 
 1784              	 
 1785 0000 B0B5     	 push {r4,r5,r7,lr}
 1786              	.LCFI80:
 1787              	 .cfi_def_cfa_offset 16
 1788              	 .cfi_offset 4,-16
 1789              	 .cfi_offset 5,-12
 1790              	 .cfi_offset 7,-8
 1791              	 .cfi_offset 14,-4
 1792 0002 2DED028B 	 fstmfdd sp!,{d8}
 1793              	.LCFI81:
 1794              	 .cfi_def_cfa_offset 24
 1795              	 .cfi_offset 80,-24
 1796              	 .cfi_offset 81,-20
 1797 0006 84B0     	 sub sp,sp,#16
 1798              	.LCFI82:
 1799              	 .cfi_def_cfa_offset 40
 1800 0008 00AF     	 add r7,sp,#0
 1801              	.LCFI83:
 1802              	 .cfi_def_cfa_register 7
 376:../main.c     **** 		DIGITAL_IO_SetOutputHigh(&status_LED_red_cal_time);
 1803              	 .loc 4 376 0
 1804 000a 6648     	 ldr r0,.L128
 1805 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 377:../main.c     **** 		// Actual time since last angle update via Hall Sensor
 378:../main.c     **** 		uint32_t t;
 379:../main.c     **** 		if(last_Hall_trig == 'A') t = time_since_A;
 1806              	 .loc 4 379 0
 1807 0010 654B     	 ldr r3,.L128+4
 1808 0012 1B78     	 ldrb r3,[r3]
 1809 0014 DBB2     	 uxtb r3,r3
 1810 0016 412B     	 cmp r3,#65
 1811 0018 03D1     	 bne .L78
 1812              	 .loc 4 379 0 is_stmt 0 discriminator 1
 1813 001a 644B     	 ldr r3,.L128+8
 1814 001c 1B68     	 ldr r3,[r3]
 1815 001e FB60     	 str r3,[r7,#12]
 1816 0020 10E0     	 b .L79
 1817              	.L78:
 380:../main.c     **** 		else if(last_Hall_trig == 'B') t = time_since_B;
 1818              	 .loc 4 380 0 is_stmt 1
 1819 0022 614B     	 ldr r3,.L128+4
 1820 0024 1B78     	 ldrb r3,[r3]
 1821 0026 DBB2     	 uxtb r3,r3
 1822 0028 422B     	 cmp r3,#66
 1823 002a 03D1     	 bne .L80
 1824              	 .loc 4 380 0 is_stmt 0 discriminator 1
 1825 002c 604B     	 ldr r3,.L128+12
 1826 002e 1B68     	 ldr r3,[r3]
 1827 0030 FB60     	 str r3,[r7,#12]
 1828 0032 07E0     	 b .L79
 1829              	.L80:
 381:../main.c     **** 		else if(last_Hall_trig == 'C') t = time_since_C;
 1830              	 .loc 4 381 0 is_stmt 1
 1831 0034 5C4B     	 ldr r3,.L128+4
 1832 0036 1B78     	 ldrb r3,[r3]
 1833 0038 DBB2     	 uxtb r3,r3
 1834 003a 432B     	 cmp r3,#67
 1835 003c 02D1     	 bne .L79
 1836              	 .loc 4 381 0 is_stmt 0 discriminator 1
 1837 003e 5D4B     	 ldr r3,.L128+16
 1838 0040 1B68     	 ldr r3,[r3]
 1839 0042 FB60     	 str r3,[r7,#12]
 1840              	.L79:
 382:../main.c     **** 		time_180deg_cal = time_180deg;
 1841              	 .loc 4 382 0 is_stmt 1
 1842 0044 5C4B     	 ldr r3,.L128+20
 1843 0046 1B68     	 ldr r3,[r3]
 1844 0048 5C4A     	 ldr r2,.L128+24
 1845 004a 1360     	 str r3,[r2]
 383:../main.c     **** 		// not fixing sector for calc because if chainges better to do so
 384:../main.c     **** 
 385:../main.c     **** 		if(time_180deg_cal > 2500) time_180deg_cal = 2500;
 1846              	 .loc 4 385 0
 1847 004c 5B4B     	 ldr r3,.L128+24
 1848 004e 1B68     	 ldr r3,[r3]
 1849 0050 40F6C412 	 movw r2,#2500
 1850 0054 9342     	 cmp r3,r2
 1851 0056 04D9     	 bls .L81
 1852              	 .loc 4 385 0 is_stmt 0 discriminator 1
 1853 0058 584B     	 ldr r3,.L128+24
 1854 005a 40F6C412 	 movw r2,#2500
 1855 005e 1A60     	 str r2,[r3]
 1856 0060 06E0     	 b .L82
 1857              	.L81:
 386:../main.c     **** 		else if(time_180deg_cal < 2) time_180deg_cal = 2;
 1858              	 .loc 4 386 0 is_stmt 1
 1859 0062 564B     	 ldr r3,.L128+24
 1860 0064 1B68     	 ldr r3,[r3]
 1861 0066 012B     	 cmp r3,#1
 1862 0068 02D8     	 bhi .L82
 1863              	 .loc 4 386 0 is_stmt 0 discriminator 1
 1864 006a 544B     	 ldr r3,.L128+24
 1865 006c 0222     	 movs r2,#2
 1866 006e 1A60     	 str r2,[r3]
 1867              	.L82:
 387:../main.c     **** 
 388:../main.c     **** 		if(t < TIME_OMEGA_0){
 1868              	 .loc 4 388 0 is_stmt 1
 1869 0070 FB68     	 ldr r3,[r7,#12]
 1870 0072 41F28732 	 movw r2,#4999
 1871 0076 9342     	 cmp r3,r2
 1872 0078 35D8     	 bhi .L83
 389:../main.c     **** 			angle_in_sector = (180.0 / (float)time_180deg_cal) * t;
 1873              	 .loc 4 389 0
 1874 007a 504B     	 ldr r3,.L128+24
 1875 007c 1B68     	 ldr r3,[r3]
 1876 007e 07EE903A 	 fmsr s15,r3
 1877 0082 F8EE677A 	 fuitos s15,s15
 1878 0086 17EE900A 	 fmrs r0,s15
 1879 008a FFF7FEFF 	 bl __aeabi_f2d
 1880 008e 0246     	 mov r2,r0
 1881 0090 0B46     	 mov r3,r1
 1882 0092 4FF00000 	 mov r0,#0
 1883 0096 4A49     	 ldr r1,.L128+28
 1884 0098 FFF7FEFF 	 bl __aeabi_ddiv
 1885 009c 0246     	 mov r2,r0
 1886 009e 0B46     	 mov r3,r1
 1887 00a0 1446     	 mov r4,r2
 1888 00a2 1D46     	 mov r5,r3
 1889 00a4 F868     	 ldr r0,[r7,#12]
 1890 00a6 FFF7FEFF 	 bl __aeabi_ui2d
 1891 00aa 0246     	 mov r2,r0
 1892 00ac 0B46     	 mov r3,r1
 1893 00ae 2046     	 mov r0,r4
 1894 00b0 2946     	 mov r1,r5
 1895 00b2 FFF7FEFF 	 bl __aeabi_dmul
 1896 00b6 0246     	 mov r2,r0
 1897 00b8 0B46     	 mov r3,r1
 1898 00ba 1046     	 mov r0,r2
 1899 00bc 1946     	 mov r1,r3
 1900 00be FFF7FEFF 	 bl __aeabi_d2f
 1901 00c2 0246     	 mov r2,r0
 1902 00c4 3F4B     	 ldr r3,.L128+32
 1903 00c6 1A60     	 str r2,[r3]
 390:../main.c     **** 			if(angle_in_sector > 60) angle_in_sector = 60;
 1904              	 .loc 4 390 0
 1905 00c8 3E4B     	 ldr r3,.L128+32
 1906 00ca D3ED007A 	 flds s15,[r3]
 1907 00ce 9FED3E7A 	 flds s14,.L128+36
 1908 00d2 F4EEC77A 	 fcmpes s15,s14
 1909 00d6 F1EE10FA 	 fmstat
 1910 00da 00DC     	 bgt .L115
 1911 00dc 06E0     	 b .L86
 1912              	.L115:
 1913              	 .loc 4 390 0 is_stmt 0 discriminator 1
 1914 00de 394B     	 ldr r3,.L128+32
 1915 00e0 3A4A     	 ldr r2,.L128+40
 1916 00e2 1A60     	 str r2,[r3]
 1917 00e4 02E0     	 b .L86
 1918              	.L83:
 391:../main.c     **** 		}
 392:../main.c     **** 		else{
 393:../main.c     **** 			angle_in_sector = 30; // standig still
 1919              	 .loc 4 393 0 is_stmt 1
 1920 00e6 374B     	 ldr r3,.L128+32
 1921 00e8 394A     	 ldr r2,.L128+44
 1922 00ea 1A60     	 str r2,[r3]
 1923              	.L86:
 394:../main.c     **** 		}
 395:../main.c     **** 
 396:../main.c     **** 		// CW
 397:../main.c     **** 		if(direction==1)
 1924              	 .loc 4 397 0
 1925 00ec 394B     	 ldr r3,.L128+48
 1926 00ee 1B78     	 ldrb r3,[r3]
 1927 00f0 DBB2     	 uxtb r3,r3
 1928 00f2 5BB2     	 sxtb r3,r3
 1929 00f4 012B     	 cmp r3,#1
 1930 00f6 7DD1     	 bne .L87
 398:../main.c     **** 		{
 399:../main.c     **** 			angle_phi = (sector*60.0)+angle_in_sector;
 1931              	 .loc 4 399 0
 1932 00f8 374B     	 ldr r3,.L128+52
 1933 00fa 1B78     	 ldrb r3,[r3]
 1934 00fc DBB2     	 uxtb r3,r3
 1935 00fe 5BB2     	 sxtb r3,r3
 1936 0100 1846     	 mov r0,r3
 1937 0102 FFF7FEFF 	 bl __aeabi_i2d
 1938 0106 0246     	 mov r2,r0
 1939 0108 0B46     	 mov r3,r1
 1940 010a 1046     	 mov r0,r2
 1941 010c 1946     	 mov r1,r3
 1942 010e 4FF00002 	 mov r2,#0
 1943 0112 324B     	 ldr r3,.L128+56
 1944 0114 FFF7FEFF 	 bl __aeabi_dmul
 1945 0118 0246     	 mov r2,r0
 1946 011a 0B46     	 mov r3,r1
 1947 011c 1446     	 mov r4,r2
 1948 011e 1D46     	 mov r5,r3
 1949 0120 284B     	 ldr r3,.L128+32
 1950 0122 1B68     	 ldr r3,[r3]
 1951 0124 1846     	 mov r0,r3
 1952 0126 FFF7FEFF 	 bl __aeabi_f2d
 1953 012a 0246     	 mov r2,r0
 1954 012c 0B46     	 mov r3,r1
 1955 012e 2046     	 mov r0,r4
 1956 0130 2946     	 mov r1,r5
 1957 0132 FFF7FEFF 	 bl __aeabi_dadd
 1958 0136 0246     	 mov r2,r0
 1959 0138 0B46     	 mov r3,r1
 1960 013a 1046     	 mov r0,r2
 1961 013c 1946     	 mov r1,r3
 1962 013e FFF7FEFF 	 bl __aeabi_d2f
 1963 0142 0246     	 mov r2,r0
 1964 0144 264B     	 ldr r3,.L128+60
 1965 0146 1A60     	 str r2,[r3]
 400:../main.c     **** 			angle_phi=angle_phi+offset_pos;
 1966              	 .loc 4 400 0
 1967 0148 254B     	 ldr r3,.L128+60
 1968 014a 93ED007A 	 flds s14,[r3]
 1969 014e 254B     	 ldr r3,.L128+64
 1970 0150 D3ED007A 	 flds s15,[r3]
 1971 0154 77EE277A 	 fadds s15,s14,s15
 1972 0158 214B     	 ldr r3,.L128+60
 1973 015a C3ED007A 	 fsts s15,[r3]
 401:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 1974              	 .loc 4 401 0
 1975 015e 204B     	 ldr r3,.L128+60
 1976 0160 D3ED007A 	 flds s15,[r3]
 1977 0164 9FED207A 	 flds s14,.L128+68
 1978 0168 F4EEC77A 	 fcmpes s15,s14
 1979 016c F1EE10FA 	 fmstat
 1980 0170 09DD     	 ble .L88
 1981              	 .loc 4 401 0 is_stmt 0 discriminator 1
 1982 0172 1B4B     	 ldr r3,.L128+60
 1983 0174 D3ED007A 	 flds s15,[r3]
 1984 0178 9FED1B7A 	 flds s14,.L128+68
 1985 017c 77EEC77A 	 fsubs s15,s15,s14
 1986 0180 174B     	 ldr r3,.L128+60
 1987 0182 C3ED007A 	 fsts s15,[r3]
 1988              	.L88:
 402:../main.c     **** 
 403:../main.c     **** 			omega_mech_rads_temp = (float)450/((float)time_180deg_cal);
 1989              	 .loc 4 403 0 is_stmt 1
 1990 0186 0D4B     	 ldr r3,.L128+24
 1991 0188 1B68     	 ldr r3,[r3]
 1992 018a 07EE903A 	 fmsr s15,r3
 1993 018e F8EE677A 	 fuitos s15,s15
 1994 0192 9FED167A 	 flds s14,.L128+72
 1995 0196 C7EE277A 	 fdivs s15,s14,s15
 1996 019a 154B     	 ldr r3,.L128+76
 1997 019c C3ED007A 	 fsts s15,[r3]
 1998 01a0 98E0     	 b .L90
 1999              	.L129:
 2000 01a2 00BF     	 .align 2
 2001              	.L128:
 2002 01a4 00000000 	 .word status_LED_red_cal_time
 2003 01a8 00000000 	 .word last_Hall_trig
 2004 01ac 00000000 	 .word time_since_A
 2005 01b0 00000000 	 .word time_since_B
 2006 01b4 00000000 	 .word time_since_C
 2007 01b8 00000000 	 .word time_180deg
 2008 01bc 00000000 	 .word time_180deg_cal
 2009 01c0 00806640 	 .word 1080459264
 2010 01c4 00000000 	 .word angle_in_sector
 2011 01c8 00007042 	 .word 1114636288
 2012 01cc 00007042 	 .word 1114636288
 2013 01d0 0000F041 	 .word 1106247680
 2014 01d4 00000000 	 .word direction
 2015 01d8 00000000 	 .word sector
 2016 01dc 00004E40 	 .word 1078853632
 2017 01e0 00000000 	 .word angle_phi
 2018 01e4 00000000 	 .word offset_pos
 2019 01e8 0000B443 	 .word 1135869952
 2020 01ec 0000E143 	 .word 1138819072
 2021 01f0 00000000 	 .word omega_mech_rads_temp
 2022              	.L87:
 404:../main.c     **** 		}
 405:../main.c     **** 		// CCW
 406:../main.c     **** 		else{
 407:../main.c     **** 			angle_phi = (sector*60.0)-angle_in_sector;
 2023              	 .loc 4 407 0
 2024 01f4 D04B     	 ldr r3,.L130+40
 2025 01f6 1B78     	 ldrb r3,[r3]
 2026 01f8 DBB2     	 uxtb r3,r3
 2027 01fa 5BB2     	 sxtb r3,r3
 2028 01fc 1846     	 mov r0,r3
 2029 01fe FFF7FEFF 	 bl __aeabi_i2d
 2030 0202 0246     	 mov r2,r0
 2031 0204 0B46     	 mov r3,r1
 2032 0206 1046     	 mov r0,r2
 2033 0208 1946     	 mov r1,r3
 2034 020a 4FF00002 	 mov r2,#0
 2035 020e CB4B     	 ldr r3,.L130+44
 2036 0210 FFF7FEFF 	 bl __aeabi_dmul
 2037 0214 0246     	 mov r2,r0
 2038 0216 0B46     	 mov r3,r1
 2039 0218 1446     	 mov r4,r2
 2040 021a 1D46     	 mov r5,r3
 2041 021c C84B     	 ldr r3,.L130+48
 2042 021e 1B68     	 ldr r3,[r3]
 2043 0220 1846     	 mov r0,r3
 2044 0222 FFF7FEFF 	 bl __aeabi_f2d
 2045 0226 0246     	 mov r2,r0
 2046 0228 0B46     	 mov r3,r1
 2047 022a 2046     	 mov r0,r4
 2048 022c 2946     	 mov r1,r5
 2049 022e FFF7FEFF 	 bl __aeabi_dsub
 2050 0232 0246     	 mov r2,r0
 2051 0234 0B46     	 mov r3,r1
 2052 0236 1046     	 mov r0,r2
 2053 0238 1946     	 mov r1,r3
 2054 023a FFF7FEFF 	 bl __aeabi_d2f
 2055 023e 0246     	 mov r2,r0
 2056 0240 C04B     	 ldr r3,.L130+52
 2057 0242 1A60     	 str r2,[r3]
 408:../main.c     **** 			angle_phi = angle_phi+60.0;
 2058              	 .loc 4 408 0
 2059 0244 BF4B     	 ldr r3,.L130+52
 2060 0246 D3ED007A 	 flds s15,[r3]
 2061 024a 9FEDBF7A 	 flds s14,.L130+56
 2062 024e 77EE877A 	 fadds s15,s15,s14
 2063 0252 BC4B     	 ldr r3,.L130+52
 2064 0254 C3ED007A 	 fsts s15,[r3]
 409:../main.c     **** 			if(angle_phi < 0){angle_phi=angle_phi+360.0;}
 2065              	 .loc 4 409 0
 2066 0258 BA4B     	 ldr r3,.L130+52
 2067 025a D3ED007A 	 flds s15,[r3]
 2068 025e F5EEC07A 	 fcmpezs s15
 2069 0262 F1EE10FA 	 fmstat
 2070 0266 09D5     	 bpl .L91
 2071              	 .loc 4 409 0 is_stmt 0 discriminator 1
 2072 0268 B64B     	 ldr r3,.L130+52
 2073 026a D3ED007A 	 flds s15,[r3]
 2074 026e 9FEDB77A 	 flds s14,.L130+60
 2075 0272 77EE877A 	 fadds s15,s15,s14
 2076 0276 B34B     	 ldr r3,.L130+52
 2077 0278 C3ED007A 	 fsts s15,[r3]
 2078              	.L91:
 410:../main.c     **** 			angle_phi=angle_phi+offset_neg;
 2079              	 .loc 4 410 0 is_stmt 1
 2080 027c B14B     	 ldr r3,.L130+52
 2081 027e 93ED007A 	 flds s14,[r3]
 2082 0282 B34B     	 ldr r3,.L130+64
 2083 0284 D3ED007A 	 flds s15,[r3]
 2084 0288 77EE277A 	 fadds s15,s14,s15
 2085 028c AD4B     	 ldr r3,.L130+52
 2086 028e C3ED007A 	 fsts s15,[r3]
 411:../main.c     **** 			if(angle_phi > 360.0){angle_phi=angle_phi-360.0;}
 2087              	 .loc 4 411 0
 2088 0292 AC4B     	 ldr r3,.L130+52
 2089 0294 D3ED007A 	 flds s15,[r3]
 2090 0298 9FEDAC7A 	 flds s14,.L130+60
 2091 029c F4EEC77A 	 fcmpes s15,s14
 2092 02a0 F1EE10FA 	 fmstat
 2093 02a4 09DD     	 ble .L93
 2094              	 .loc 4 411 0 is_stmt 0 discriminator 1
 2095 02a6 A74B     	 ldr r3,.L130+52
 2096 02a8 D3ED007A 	 flds s15,[r3]
 2097 02ac 9FEDA77A 	 flds s14,.L130+60
 2098 02b0 77EEC77A 	 fsubs s15,s15,s14
 2099 02b4 A34B     	 ldr r3,.L130+52
 2100 02b6 C3ED007A 	 fsts s15,[r3]
 2101              	.L93:
 412:../main.c     **** 
 413:../main.c     **** 			omega_mech_rads_temp = -(float)450/((float)time_180deg_cal);
 2102              	 .loc 4 413 0 is_stmt 1
 2103 02ba A64B     	 ldr r3,.L130+68
 2104 02bc 1B68     	 ldr r3,[r3]
 2105 02be 07EE903A 	 fmsr s15,r3
 2106 02c2 F8EE677A 	 fuitos s15,s15
 2107 02c6 9FEDA47A 	 flds s14,.L130+72
 2108 02ca C7EE277A 	 fdivs s15,s14,s15
 2109 02ce A34B     	 ldr r3,.L130+76
 2110 02d0 C3ED007A 	 fsts s15,[r3]
 2111              	.L90:
 414:../main.c     **** 		}
 415:../main.c     **** 
 416:../main.c     **** 		if(omega_mech_rads_temp<200 && omega_mech_rads_temp>(-200)) //plausibility check to avoid large p
 2112              	 .loc 4 416 0
 2113 02d4 A14B     	 ldr r3,.L130+76
 2114 02d6 D3ED007A 	 flds s15,[r3]
 2115 02da 9FEDA17A 	 flds s14,.L130+80
 2116 02de F4EEC77A 	 fcmpes s15,s14
 2117 02e2 F1EE10FA 	 fmstat
 2118 02e6 0DD5     	 bpl .L95
 2119              	 .loc 4 416 0 is_stmt 0 discriminator 1
 2120 02e8 9C4B     	 ldr r3,.L130+76
 2121 02ea D3ED007A 	 flds s15,[r3]
 2122 02ee 9FED9D7A 	 flds s14,.L130+84
 2123 02f2 F4EEC77A 	 fcmpes s15,s14
 2124 02f6 F1EE10FA 	 fmstat
 2125 02fa 03DD     	 ble .L95
 417:../main.c     **** 		{
 418:../main.c     **** 			omega_mech_rads_ = (float)omega_mech_rads_temp;
 2126              	 .loc 4 418 0 is_stmt 1
 2127 02fc 974B     	 ldr r3,.L130+76
 2128 02fe 1B68     	 ldr r3,[r3]
 2129 0300 994A     	 ldr r2,.L130+88
 2130 0302 1360     	 str r3,[r2]
 2131              	.L95:
 419:../main.c     **** 		}
 420:../main.c     **** 
 421:../main.c     **** 		omega_ele_rads = omega_mech_rads_*2*PI*PPZ; //omega_is hall electrica in rads / s
 2132              	 .loc 4 421 0
 2133 0304 984B     	 ldr r3,.L130+88
 2134 0306 D3ED007A 	 flds s15,[r3]
 2135 030a 77EEA77A 	 fadds s15,s15,s15
 2136 030e 17EE900A 	 fmrs r0,s15
 2137 0312 FFF7FEFF 	 bl __aeabi_f2d
 2138 0316 0246     	 mov r2,r0
 2139 0318 0B46     	 mov r3,r1
 2140 031a 1046     	 mov r0,r2
 2141 031c 1946     	 mov r1,r3
 2142 031e 7CA3     	 adr r3,.L130
 2143 0320 D3E90023 	 ldrd r2,[r3]
 2144 0324 FFF7FEFF 	 bl __aeabi_dmul
 2145 0328 0246     	 mov r2,r0
 2146 032a 0B46     	 mov r3,r1
 2147 032c 1046     	 mov r0,r2
 2148 032e 1946     	 mov r1,r3
 2149 0330 4FF00002 	 mov r2,#0
 2150 0334 8D4B     	 ldr r3,.L130+92
 2151 0336 FFF7FEFF 	 bl __aeabi_dmul
 2152 033a 0246     	 mov r2,r0
 2153 033c 0B46     	 mov r3,r1
 2154 033e 1046     	 mov r0,r2
 2155 0340 1946     	 mov r1,r3
 2156 0342 FFF7FEFF 	 bl __aeabi_d2f
 2157 0346 0246     	 mov r2,r0
 2158 0348 894B     	 ldr r3,.L130+96
 2159 034a 1A60     	 str r2,[r3]
 422:../main.c     **** 
 423:../main.c     **** 		if(t > TIME_OMEGA_0){omega_ele_rads = 0;} // set omega  to 0 if no more hall detected
 2160              	 .loc 4 423 0
 2161 034c FB68     	 ldr r3,[r7,#12]
 2162 034e 41F28832 	 movw r2,#5000
 2163 0352 9342     	 cmp r3,r2
 2164 0354 03D9     	 bls .L98
 2165              	 .loc 4 423 0 is_stmt 0 discriminator 1
 2166 0356 864B     	 ldr r3,.L130+96
 2167 0358 4FF00002 	 mov r2,#0
 2168 035c 1A60     	 str r2,[r3]
 2169              	.L98:
 424:../main.c     **** 
 425:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 8% duyt  // change to angel_in secotr 7% 
 426:../main.c     **** 
 427:../main.c     **** 		// Current read out over SPI
 428:../main.c     **** 		Current_U = readCurrent(ChipSelect_U);
 2170              	 .loc 4 428 0 is_stmt 1
 2171 035e 0620     	 movs r0,#6
 2172 0360 FFF7FEFF 	 bl readCurrent
 2173 0364 0246     	 mov r2,r0
 2174 0366 834B     	 ldr r3,.L130+100
 2175 0368 1A60     	 str r2,[r3]
 429:../main.c     **** 		Current_V = readCurrent(ChipSelect_V);
 2176              	 .loc 4 429 0
 2177 036a 0520     	 movs r0,#5
 2178 036c FFF7FEFF 	 bl readCurrent
 2179 0370 0246     	 mov r2,r0
 2180 0372 814B     	 ldr r3,.L130+104
 2181 0374 1A60     	 str r2,[r3]
 430:../main.c     **** 		Current_W = readCurrent(ChipSelect_W);
 2182              	 .loc 4 430 0
 2183 0376 0320     	 movs r0,#3
 2184 0378 FFF7FEFF 	 bl readCurrent
 2185 037c 0246     	 mov r2,r0
 2186 037e 7F4B     	 ldr r3,.L130+108
 2187 0380 1A60     	 str r2,[r3]
 431:../main.c     **** 
 432:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 53% duyt   current sesing takes 45% of th
 433:../main.c     **** 
 434:../main.c     **** 		// conversion from rad/s to degree
 435:../main.c     **** 		float angle_phi_rad = angle_phi*Pi180;
 2188              	 .loc 4 435 0
 2189 0382 704B     	 ldr r3,.L130+52
 2190 0384 1B68     	 ldr r3,[r3]
 2191 0386 1846     	 mov r0,r3
 2192 0388 FFF7FEFF 	 bl __aeabi_f2d
 2193 038c 0246     	 mov r2,r0
 2194 038e 0B46     	 mov r3,r1
 2195 0390 1046     	 mov r0,r2
 2196 0392 1946     	 mov r1,r3
 2197 0394 60A3     	 adr r3,.L130+8
 2198 0396 D3E90023 	 ldrd r2,[r3]
 2199 039a FFF7FEFF 	 bl __aeabi_dmul
 2200 039e 0246     	 mov r2,r0
 2201 03a0 0B46     	 mov r3,r1
 2202 03a2 1046     	 mov r0,r2
 2203 03a4 1946     	 mov r1,r3
 2204 03a6 FFF7FEFF 	 bl __aeabi_d2f
 2205 03aa 0346     	 mov r3,r0
 2206 03ac BB60     	 str r3,[r7,#8]
 436:../main.c     **** 
 437:../main.c     **** 		// to decrease multiple calculations and computational effort
 438:../main.c     **** 		float cos_phi = cosf(angle_phi_rad);
 2207              	 .loc 4 438 0
 2208 03ae B868     	 ldr r0,[r7,#8]
 2209 03b0 FFF7FEFF 	 bl cosf
 2210 03b4 7860     	 str r0,[r7,#4]
 439:../main.c     **** 		float sin_phi = sinf(angle_phi_rad);
 2211              	 .loc 4 439 0
 2212 03b6 B868     	 ldr r0,[r7,#8]
 2213 03b8 FFF7FEFF 	 bl sinf
 2214 03bc 3860     	 str r0,[r7]
 440:../main.c     **** 
 441:../main.c     **** 		// Clark-Park transformation (from U,V,W to dq)
 442:../main.c     **** 		id = TwoThird*(cos_phi*Current_U	+ cosf(angle_phi_rad-TwoPiThird)*Current_V + cosf(angle_phi_rad-
 2215              	 .loc 4 442 0
 2216 03be 6D4B     	 ldr r3,.L130+100
 2217 03c0 93ED007A 	 flds s14,[r3]
 2218 03c4 D7ED017A 	 flds s15,[r7,#4]
 2219 03c8 27EE278A 	 fmuls s16,s14,s15
 2220 03cc B868     	 ldr r0,[r7,#8]
 2221 03ce FFF7FEFF 	 bl __aeabi_f2d
 2222 03d2 0246     	 mov r2,r0
 2223 03d4 0B46     	 mov r3,r1
 2224 03d6 1046     	 mov r0,r2
 2225 03d8 1946     	 mov r1,r3
 2226 03da 51A3     	 adr r3,.L130+16
 2227 03dc D3E90023 	 ldrd r2,[r3]
 2228 03e0 FFF7FEFF 	 bl __aeabi_dsub
 2229 03e4 0246     	 mov r2,r0
 2230 03e6 0B46     	 mov r3,r1
 2231 03e8 1046     	 mov r0,r2
 2232 03ea 1946     	 mov r1,r3
 2233 03ec FFF7FEFF 	 bl __aeabi_d2f
 2234 03f0 0346     	 mov r3,r0
 2235 03f2 1846     	 mov r0,r3
 2236 03f4 FFF7FEFF 	 bl cosf
 2237 03f8 07EE100A 	 fmsr s14,r0
 2238 03fc 5E4B     	 ldr r3,.L130+104
 2239 03fe D3ED007A 	 flds s15,[r3]
 2240 0402 67EE277A 	 fmuls s15,s14,s15
 2241 0406 38EE278A 	 fadds s16,s16,s15
 2242 040a B868     	 ldr r0,[r7,#8]
 2243 040c FFF7FEFF 	 bl __aeabi_f2d
 2244 0410 0246     	 mov r2,r0
 2245 0412 0B46     	 mov r3,r1
 2246 0414 1046     	 mov r0,r2
 2247 0416 1946     	 mov r1,r3
 2248 0418 43A3     	 adr r3,.L130+24
 2249 041a D3E90023 	 ldrd r2,[r3]
 2250 041e FFF7FEFF 	 bl __aeabi_dsub
 2251 0422 0246     	 mov r2,r0
 2252 0424 0B46     	 mov r3,r1
 2253 0426 1046     	 mov r0,r2
 2254 0428 1946     	 mov r1,r3
 2255 042a FFF7FEFF 	 bl __aeabi_d2f
 2256 042e 0346     	 mov r3,r0
 2257 0430 1846     	 mov r0,r3
 2258 0432 FFF7FEFF 	 bl cosf
 2259 0436 07EE100A 	 fmsr s14,r0
 2260 043a 504B     	 ldr r3,.L130+108
 2261 043c D3ED007A 	 flds s15,[r3]
 2262 0440 67EE277A 	 fmuls s15,s14,s15
 2263 0444 78EE277A 	 fadds s15,s16,s15
 2264 0448 17EE900A 	 fmrs r0,s15
 2265 044c FFF7FEFF 	 bl __aeabi_f2d
 2266 0450 0246     	 mov r2,r0
 2267 0452 0B46     	 mov r3,r1
 2268 0454 1046     	 mov r0,r2
 2269 0456 1946     	 mov r1,r3
 2270 0458 35A3     	 adr r3,.L130+32
 2271 045a D3E90023 	 ldrd r2,[r3]
 2272 045e FFF7FEFF 	 bl __aeabi_dmul
 2273 0462 0246     	 mov r2,r0
 2274 0464 0B46     	 mov r3,r1
 2275 0466 1046     	 mov r0,r2
 2276 0468 1946     	 mov r1,r3
 2277 046a FFF7FEFF 	 bl __aeabi_d2f
 2278 046e 0246     	 mov r2,r0
 2279 0470 434B     	 ldr r3,.L130+112
 2280 0472 1A60     	 str r2,[r3]
 443:../main.c     **** 		iq = TwoThird*(-sin_phi*Current_U	 -sinf(angle_phi_rad-TwoPiThird)*Current_V - sinf(angle_phi_rad
 2281              	 .loc 4 443 0
 2282 0474 D7ED007A 	 flds s15,[r7]
 2283 0478 B1EE677A 	 fnegs s14,s15
 2284 047c 3D4B     	 ldr r3,.L130+100
 2285 047e D3ED007A 	 flds s15,[r3]
 2286 0482 27EE278A 	 fmuls s16,s14,s15
 2287 0486 B868     	 ldr r0,[r7,#8]
 2288 0488 FFF7FEFF 	 bl __aeabi_f2d
 2289 048c 0246     	 mov r2,r0
 2290 048e 0B46     	 mov r3,r1
 2291 0490 1046     	 mov r0,r2
 2292 0492 1946     	 mov r1,r3
 2293 0494 22A3     	 adr r3,.L130+16
 2294 0496 D3E90023 	 ldrd r2,[r3]
 2295 049a FFF7FEFF 	 bl __aeabi_dsub
 2296 049e 0246     	 mov r2,r0
 2297 04a0 0B46     	 mov r3,r1
 2298 04a2 1046     	 mov r0,r2
 2299 04a4 1946     	 mov r1,r3
 2300 04a6 FFF7FEFF 	 bl __aeabi_d2f
 2301 04aa 0346     	 mov r3,r0
 2302 04ac 1846     	 mov r0,r3
 2303 04ae FFF7FEFF 	 bl sinf
 2304 04b2 07EE100A 	 fmsr s14,r0
 2305 04b6 304B     	 ldr r3,.L130+104
 2306 04b8 D3ED007A 	 flds s15,[r3]
 2307 04bc 67EE277A 	 fmuls s15,s14,s15
 2308 04c0 38EE678A 	 fsubs s16,s16,s15
 2309 04c4 B868     	 ldr r0,[r7,#8]
 2310 04c6 FFF7FEFF 	 bl __aeabi_f2d
 2311 04ca 0246     	 mov r2,r0
 2312 04cc 0B46     	 mov r3,r1
 2313 04ce 1046     	 mov r0,r2
 2314 04d0 1946     	 mov r1,r3
 2315 04d2 15A3     	 adr r3,.L130+24
 2316 04d4 D3E90023 	 ldrd r2,[r3]
 2317 04d8 FFF7FEFF 	 bl __aeabi_dsub
 2318 04dc 0246     	 mov r2,r0
 2319 04de 0B46     	 mov r3,r1
 2320 04e0 1046     	 mov r0,r2
 2321 04e2 1946     	 mov r1,r3
 2322 04e4 FFF7FEFF 	 bl __aeabi_d2f
 2323 04e8 0346     	 mov r3,r0
 2324 04ea 1846     	 mov r0,r3
 2325 04ec FFF7FEFF 	 bl sinf
 2326 04f0 07EE100A 	 fmsr s14,r0
 2327 04f4 214B     	 ldr r3,.L130+108
 2328 04f6 D3ED007A 	 flds s15,[r3]
 2329 04fa 67EE277A 	 fmuls s15,s14,s15
 2330 04fe 78EE677A 	 fsubs s15,s16,s15
 2331 0502 17EE900A 	 fmrs r0,s15
 2332 0506 FFF7FEFF 	 bl __aeabi_f2d
 2333 050a 0246     	 mov r2,r0
 2334 050c 0B46     	 mov r3,r1
 2335 050e 39E0     	 b .L131
 2336              	.L132:
 2337              	 .align 3
 2338              	.L130:
 2339 0510 F1D4C853 	 .word 1405670641
 2340 0514 FB210940 	 .word 1074340347
 2341 0518 4DC90777 	 .word 1996998989
 2342 051c 46DF913F 	 .word 1066524486
 2343 0520 A038DB37 	 .word 937113760
 2344 0524 52C10040 	 .word 1073791314
 2345 0528 A038DB37 	 .word 937113760
 2346 052c 52C11040 	 .word 1074839890
 2347 0530 93761F57 	 .word 1461679763
 2348 0534 5555E53F 	 .word 1071994197
 2349 0538 00000000 	 .word sector
 2350 053c 00004E40 	 .word 1078853632
 2351 0540 00000000 	 .word angle_in_sector
 2352 0544 00000000 	 .word angle_phi
 2353 0548 00007042 	 .word 1114636288
 2354 054c 0000B443 	 .word 1135869952
 2355 0550 00000000 	 .word offset_neg
 2356 0554 00000000 	 .word time_180deg_cal
 2357 0558 0000E1C3 	 .word -1008664576
 2358 055c 00000000 	 .word omega_mech_rads_temp
 2359 0560 00004843 	 .word 1128792064
 2360 0564 000048C3 	 .word -1018691584
 2361 0568 00000000 	 .word omega_mech_rads_
 2362 056c 00002640 	 .word 1076232192
 2363 0570 00000000 	 .word omega_ele_rads
 2364 0574 00000000 	 .word Current_U
 2365 0578 00000000 	 .word Current_V
 2366 057c 00000000 	 .word Current_W
 2367 0580 00000000 	 .word id
 2368              	.L131:
 2369 0584 1046     	 mov r0,r2
 2370 0586 1946     	 mov r1,r3
 2371 0588 DEA3     	 adr r3,.L133+148
 2372 058a D3E90023 	 ldrd r2,[r3]
 2373 058e FFF7FEFF 	 bl __aeabi_dmul
 2374 0592 0246     	 mov r2,r0
 2375 0594 0B46     	 mov r3,r1
 2376 0596 1046     	 mov r0,r2
 2377 0598 1946     	 mov r1,r3
 2378 059a FFF7FEFF 	 bl __aeabi_d2f
 2379 059e 0246     	 mov r2,r0
 2380 05a0 BB4B     	 ldr r3,.L133+32
 2381 05a2 1A60     	 str r2,[r3]
 444:../main.c     **** 
 445:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %63 duty Clark-Park transformation 10% of
 446:../main.c     **** 
 447:../main.c     **** 		if(CAN_control == 1){// can control
 2382              	 .loc 4 447 0
 2383 05a4 BB4B     	 ldr r3,.L133+36
 2384 05a6 1B78     	 ldrb r3,[r3]
 2385 05a8 012B     	 cmp r3,#1
 2386 05aa 1FD1     	 bne .L99
 448:../main.c     **** 
 449:../main.c     **** 			if(CAN_new_meassage == 1){
 2387              	 .loc 4 449 0
 2388 05ac BA4B     	 ldr r3,.L133+40
 2389 05ae 1B78     	 ldrb r3,[r3]
 2390 05b0 012B     	 cmp r3,#1
 2391 05b2 07D1     	 bne .L100
 450:../main.c     **** 				speed_ref = CAN_speed_ref;
 2392              	 .loc 4 450 0
 2393 05b4 B94B     	 ldr r3,.L133+44
 2394 05b6 1B68     	 ldr r3,[r3]
 2395 05b8 B94A     	 ldr r2,.L133+48
 2396 05ba 1360     	 str r3,[r2]
 451:../main.c     **** 				CAN_new_meassage = 0;
 2397              	 .loc 4 451 0
 2398 05bc B64B     	 ldr r3,.L133+40
 2399 05be 0022     	 movs r2,#0
 2400 05c0 1A70     	 strb r2,[r3]
 2401 05c2 05E0     	 b .L101
 2402              	.L100:
 452:../main.c     **** 			}
 453:../main.c     **** 			else{
 454:../main.c     **** 				CAN_no_com_counter ++;
 2403              	 .loc 4 454 0
 2404 05c4 B74B     	 ldr r3,.L133+52
 2405 05c6 1B78     	 ldrb r3,[r3]
 2406 05c8 0133     	 adds r3,r3,#1
 2407 05ca DAB2     	 uxtb r2,r3
 2408 05cc B54B     	 ldr r3,.L133+52
 2409 05ce 1A70     	 strb r2,[r3]
 2410              	.L101:
 455:../main.c     **** 			}
 456:../main.c     **** 
 457:../main.c     **** 			if(CAN_no_com_counter > CAN_NO_COM_TH){
 2411              	 .loc 4 457 0
 2412 05d0 B44B     	 ldr r3,.L133+52
 2413 05d2 1B78     	 ldrb r3,[r3]
 2414 05d4 FA2B     	 cmp r3,#250
 2415 05d6 09D9     	 bls .L99
 458:../main.c     **** 				CAN_new_meassage = 0;
 2416              	 .loc 4 458 0
 2417 05d8 AF4B     	 ldr r3,.L133+40
 2418 05da 0022     	 movs r2,#0
 2419 05dc 1A70     	 strb r2,[r3]
 459:../main.c     **** 				CAN_no_com_counter = CAN_NO_COM_TH;
 2420              	 .loc 4 459 0
 2421 05de B14B     	 ldr r3,.L133+52
 2422 05e0 FA22     	 movs r2,#250
 2423 05e2 1A70     	 strb r2,[r3]
 460:../main.c     **** 				speed_ref = 0;
 2424              	 .loc 4 460 0
 2425 05e4 AE4B     	 ldr r3,.L133+48
 2426 05e6 4FF00002 	 mov r2,#0
 2427 05ea 1A60     	 str r2,[r3]
 2428              	.L99:
 461:../main.c     **** 			}
 462:../main.c     **** 		}
 463:../main.c     **** 
 464:../main.c     **** 		omega_ref = ( speed_ref * PPZ ) / WHEEL_R;
 2429              	 .loc 4 464 0
 2430 05ec AC4B     	 ldr r3,.L133+48
 2431 05ee D3ED007A 	 flds s15,[r3]
 2432 05f2 B2EE067A 	 fconsts s14,#38
 2433 05f6 67EE877A 	 fmuls s15,s15,s14
 2434 05fa 17EE900A 	 fmrs r0,s15
 2435 05fe FFF7FEFF 	 bl __aeabi_f2d
 2436 0602 0246     	 mov r2,r0
 2437 0604 0B46     	 mov r3,r1
 2438 0606 1046     	 mov r0,r2
 2439 0608 1946     	 mov r1,r3
 2440 060a 99A3     	 adr r3,.L133
 2441 060c D3E90023 	 ldrd r2,[r3]
 2442 0610 FFF7FEFF 	 bl __aeabi_ddiv
 2443 0614 0246     	 mov r2,r0
 2444 0616 0B46     	 mov r3,r1
 2445 0618 1046     	 mov r0,r2
 2446 061a 1946     	 mov r1,r3
 2447 061c FFF7FEFF 	 bl __aeabi_d2f
 2448 0620 0246     	 mov r2,r0
 2449 0622 A14B     	 ldr r3,.L133+56
 2450 0624 1A60     	 str r2,[r3]
 465:../main.c     **** 
 466:../main.c     **** 		if((omega_ref == 0 && Speed_control == 1) && (( -200 < omega_ele_rads) && (omega_ele_rads < 200))
 2451              	 .loc 4 466 0
 2452 0626 A04B     	 ldr r3,.L133+56
 2453 0628 D3ED007A 	 flds s15,[r3]
 2454 062c F5EE407A 	 fcmpzs s15
 2455 0630 F1EE10FA 	 fmstat
 2456 0634 1CD1     	 bne .L102
 2457              	 .loc 4 466 0 is_stmt 0 discriminator 1
 2458 0636 9D4B     	 ldr r3,.L133+60
 2459 0638 1B78     	 ldrb r3,[r3]
 2460 063a 012B     	 cmp r3,#1
 2461 063c 18D1     	 bne .L102
 2462              	 .loc 4 466 0 discriminator 2
 2463 063e 9C4B     	 ldr r3,.L133+64
 2464 0640 D3ED007A 	 flds s15,[r3]
 2465 0644 9FED9B7A 	 flds s14,.L133+68
 2466 0648 F4EEC77A 	 fcmpes s15,s14
 2467 064c F1EE10FA 	 fmstat
 2468 0650 0EDD     	 ble .L102
 2469              	 .loc 4 466 0 discriminator 3
 2470 0652 974B     	 ldr r3,.L133+64
 2471 0654 D3ED007A 	 flds s15,[r3]
 2472 0658 9FED977A 	 flds s14,.L133+72
 2473 065c F4EEC77A 	 fcmpes s15,s14
 2474 0660 F1EE10FA 	 fmstat
 2475 0664 04D5     	 bpl .L102
 467:../main.c     **** 			T_ref = 0;
 2476              	 .loc 4 467 0 is_stmt 1
 2477 0666 954B     	 ldr r3,.L133+76
 2478 0668 4FF00002 	 mov r2,#0
 2479 066c 1A60     	 str r2,[r3]
 2480 066e 0BE0     	 b .L105
 2481              	.L102:
 468:../main.c     **** 		}
 469:../main.c     **** 		else{
 470:../main.c     **** 			if(MOTOR_NUM == 1){
 471:../main.c     **** 				T_ref = PID_Controller(omega_ref,omega_ele_rads,&T_param_1); // outer control loop q for omega
 2482              	 .loc 4 471 0
 2483 0670 8D4B     	 ldr r3,.L133+56
 2484 0672 1A68     	 ldr r2,[r3]
 2485 0674 8E4B     	 ldr r3,.L133+64
 2486 0676 1B68     	 ldr r3,[r3]
 2487 0678 1046     	 mov r0,r2
 2488 067a 1946     	 mov r1,r3
 2489 067c 904A     	 ldr r2,.L133+80
 2490 067e FFF7FEFF 	 bl PID_Controller
 2491 0682 0246     	 mov r2,r0
 2492 0684 8D4B     	 ldr r3,.L133+76
 2493 0686 1A60     	 str r2,[r3]
 2494              	.L105:
 472:../main.c     **** 			}
 473:../main.c     **** 			else{
 474:../main.c     **** 				T_ref = PID_Controller(omega_ref,omega_ele_rads,&T_param);
 475:../main.c     **** 			}
 476:../main.c     **** 		}
 477:../main.c     **** 
 478:../main.c     **** 		if (Speed_control == 1){ // 1 speed contola aktive 0 not aktive torqe contol aktive
 2495              	 .loc 4 478 0
 2496 0688 884B     	 ldr r3,.L133+60
 2497 068a 1B78     	 ldrb r3,[r3]
 2498 068c 012B     	 cmp r3,#1
 2499 068e 16D1     	 bne .L106
 479:../main.c     **** 			if(MOTOR_NUM == 1) {
 480:../main.c     **** 				iq_ref =  T_ref / K_T; // dirction for motor 1
 2500              	 .loc 4 480 0
 2501 0690 8A4B     	 ldr r3,.L133+76
 2502 0692 1B68     	 ldr r3,[r3]
 2503 0694 1846     	 mov r0,r3
 2504 0696 FFF7FEFF 	 bl __aeabi_f2d
 2505 069a 0246     	 mov r2,r0
 2506 069c 0B46     	 mov r3,r1
 2507 069e 1046     	 mov r0,r2
 2508 06a0 1946     	 mov r1,r3
 2509 06a2 75A3     	 adr r3,.L133+8
 2510 06a4 D3E90023 	 ldrd r2,[r3]
 2511 06a8 FFF7FEFF 	 bl __aeabi_ddiv
 2512 06ac 0246     	 mov r2,r0
 2513 06ae 0B46     	 mov r3,r1
 2514 06b0 1046     	 mov r0,r2
 2515 06b2 1946     	 mov r1,r3
 2516 06b4 FFF7FEFF 	 bl __aeabi_d2f
 2517 06b8 0246     	 mov r2,r0
 2518 06ba 824B     	 ldr r3,.L133+84
 2519 06bc 1A60     	 str r2,[r3]
 2520              	.L106:
 481:../main.c     **** 			}
 482:../main.c     **** 			else{
 483:../main.c     **** 				iq_ref = - T_ref / K_T;// dirction for motor 1
 484:../main.c     **** 			}
 485:../main.c     **** 		}
 486:../main.c     **** 
 487:../main.c     **** 		//saturation to IQ_REF_MAC limit
 488:../main.c     **** 		if(iq_ref < -IQ_REF_MAX) iq_ref = -IQ_REF_MAX;
 2521              	 .loc 4 488 0
 2522 06be 814B     	 ldr r3,.L133+84
 2523 06c0 D3ED007A 	 flds s15,[r3]
 2524 06c4 B9EE047A 	 fconsts s14,#148
 2525 06c8 F4EEC77A 	 fcmpes s15,s14
 2526 06cc F1EE10FA 	 fmstat
 2527 06d0 02D5     	 bpl .L107
 2528              	 .loc 4 488 0 is_stmt 0 discriminator 1
 2529 06d2 7C4B     	 ldr r3,.L133+84
 2530 06d4 7C4A     	 ldr r2,.L133+88
 2531 06d6 1A60     	 str r2,[r3]
 2532              	.L107:
 489:../main.c     **** 		if(iq_ref > IQ_REF_MAX) iq_ref = IQ_REF_MAX;
 2533              	 .loc 4 489 0 is_stmt 1
 2534 06d8 7A4B     	 ldr r3,.L133+84
 2535 06da D3ED007A 	 flds s15,[r3]
 2536 06de B1EE047A 	 fconsts s14,#20
 2537 06e2 F4EEC77A 	 fcmpes s15,s14
 2538 06e6 F1EE10FA 	 fmstat
 2539 06ea 02DD     	 ble .L109
 2540              	 .loc 4 489 0 is_stmt 0 discriminator 1
 2541 06ec 754B     	 ldr r3,.L133+84
 2542 06ee 774A     	 ldr r2,.L133+92
 2543 06f0 1A60     	 str r2,[r3]
 2544              	.L109:
 490:../main.c     **** 
 491:../main.c     **** 		Vd_ref = PID_Controller(0.0,id,&Id_param);
 2545              	 .loc 4 491 0 is_stmt 1
 2546 06f2 774B     	 ldr r3,.L133+96
 2547 06f4 1B68     	 ldr r3,[r3]
 2548 06f6 4FF00000 	 mov r0,#0
 2549 06fa 1946     	 mov r1,r3
 2550 06fc 754A     	 ldr r2,.L133+100
 2551 06fe FFF7FEFF 	 bl PID_Controller
 2552 0702 0246     	 mov r2,r0
 2553 0704 744B     	 ldr r3,.L133+104
 2554 0706 1A60     	 str r2,[r3]
 492:../main.c     **** 		Vq_ref = PID_Controller(iq_ref,iq,&Iq_param); // toque controll
 2555              	 .loc 4 492 0
 2556 0708 6E4B     	 ldr r3,.L133+84
 2557 070a 1A68     	 ldr r2,[r3]
 2558 070c 604B     	 ldr r3,.L133+32
 2559 070e 1B68     	 ldr r3,[r3]
 2560 0710 1046     	 mov r0,r2
 2561 0712 1946     	 mov r1,r3
 2562 0714 714A     	 ldr r2,.L133+108
 2563 0716 FFF7FEFF 	 bl PID_Controller
 2564 071a 0246     	 mov r2,r0
 2565 071c 704B     	 ldr r3,.L133+112
 2566 071e 1A60     	 str r2,[r3]
 493:../main.c     **** 
 494:../main.c     **** 		//DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // %67 duyt   control takes 4% of the time 9
 495:../main.c     **** 
 496:../main.c     **** 		// dq to alpha beta for voltage
 497:../main.c     **** 		Valpha = Vd_ref*cos_phi - Vq_ref*sin_phi;
 2567              	 .loc 4 497 0
 2568 0720 6D4B     	 ldr r3,.L133+104
 2569 0722 93ED007A 	 flds s14,[r3]
 2570 0726 D7ED017A 	 flds s15,[r7,#4]
 2571 072a 27EE277A 	 fmuls s14,s14,s15
 2572 072e 6C4B     	 ldr r3,.L133+112
 2573 0730 D3ED006A 	 flds s13,[r3]
 2574 0734 D7ED007A 	 flds s15,[r7]
 2575 0738 66EEA77A 	 fmuls s15,s13,s15
 2576 073c 77EE677A 	 fsubs s15,s14,s15
 2577 0740 684B     	 ldr r3,.L133+116
 2578 0742 C3ED007A 	 fsts s15,[r3]
 498:../main.c     **** 		Vbeta = Vd_ref*sin_phi + Vq_ref*cos_phi;
 2579              	 .loc 4 498 0
 2580 0746 644B     	 ldr r3,.L133+104
 2581 0748 93ED007A 	 flds s14,[r3]
 2582 074c D7ED007A 	 flds s15,[r7]
 2583 0750 27EE277A 	 fmuls s14,s14,s15
 2584 0754 624B     	 ldr r3,.L133+112
 2585 0756 D3ED006A 	 flds s13,[r3]
 2586 075a D7ED017A 	 flds s15,[r7,#4]
 2587 075e 66EEA77A 	 fmuls s15,s13,s15
 2588 0762 77EE277A 	 fadds s15,s14,s15
 2589 0766 604B     	 ldr r3,.L133+120
 2590 0768 C3ED007A 	 fsts s15,[r3]
 499:../main.c     **** 
 500:../main.c     **** 		// calc angle for SVM app
 501:../main.c     **** 		angle_ab_rad = atanf(Vbeta/Valpha);
 2591              	 .loc 4 501 0
 2592 076c 5E4B     	 ldr r3,.L133+120
 2593 076e 93ED007A 	 flds s14,[r3]
 2594 0772 5C4B     	 ldr r3,.L133+116
 2595 0774 D3ED007A 	 flds s15,[r3]
 2596 0778 C7EE277A 	 fdivs s15,s14,s15
 2597 077c 17EE900A 	 fmrs r0,s15
 2598 0780 FFF7FEFF 	 bl atanf
 2599 0784 0246     	 mov r2,r0
 2600 0786 594B     	 ldr r3,.L133+124
 2601 0788 1A60     	 str r2,[r3]
 502:../main.c     **** 		angle_ab = angle_ab_rad/Pi180;
 2602              	 .loc 4 502 0
 2603 078a 584B     	 ldr r3,.L133+124
 2604 078c 1B68     	 ldr r3,[r3]
 2605 078e 1846     	 mov r0,r3
 2606 0790 FFF7FEFF 	 bl __aeabi_f2d
 2607 0794 0246     	 mov r2,r0
 2608 0796 0B46     	 mov r3,r1
 2609 0798 1046     	 mov r0,r2
 2610 079a 1946     	 mov r1,r3
 2611 079c 38A3     	 adr r3,.L133+16
 2612 079e D3E90023 	 ldrd r2,[r3]
 2613 07a2 FFF7FEFF 	 bl __aeabi_ddiv
 2614 07a6 0246     	 mov r2,r0
 2615 07a8 0B46     	 mov r3,r1
 2616 07aa 1046     	 mov r0,r2
 2617 07ac 1946     	 mov r1,r3
 2618 07ae FFF7FEFF 	 bl __aeabi_d2f
 2619 07b2 0246     	 mov r2,r0
 2620 07b4 4E4B     	 ldr r3,.L133+128
 2621 07b6 1A60     	 str r2,[r3]
 503:../main.c     **** 
 504:../main.c     **** 		if(Valpha < 0.0){angle_ab = angle_ab + 180.0;}			// failure correction of angle (tangens)
 2622              	 .loc 4 504 0
 2623 07b8 4A4B     	 ldr r3,.L133+116
 2624 07ba D3ED007A 	 flds s15,[r3]
 2625 07be F5EEC07A 	 fcmpezs s15
 2626 07c2 F1EE10FA 	 fmstat
 2627 07c6 0AD5     	 bpl .L127
 2628              	 .loc 4 504 0 is_stmt 0 discriminator 1
 2629 07c8 494B     	 ldr r3,.L133+128
 2630 07ca D3ED007A 	 flds s15,[r3]
 2631 07ce 9FED497A 	 flds s14,.L133+132
 2632 07d2 77EE877A 	 fadds s15,s15,s14
 2633 07d6 464B     	 ldr r3,.L133+128
 2634 07d8 C3ED007A 	 fsts s15,[r3]
 2635 07dc 11E0     	 b .L113
 2636              	.L127:
 505:../main.c     **** 		else if(Vbeta < 0.0){angle_ab = angle_ab + 360.0;}
 2637              	 .loc 4 505 0 is_stmt 1
 2638 07de 424B     	 ldr r3,.L133+120
 2639 07e0 D3ED007A 	 flds s15,[r3]
 2640 07e4 F5EEC07A 	 fcmpezs s15
 2641 07e8 F1EE10FA 	 fmstat
 2642 07ec 09D5     	 bpl .L113
 2643              	 .loc 4 505 0 is_stmt 0 discriminator 1
 2644 07ee 404B     	 ldr r3,.L133+128
 2645 07f0 D3ED007A 	 flds s15,[r3]
 2646 07f4 9FED407A 	 flds s14,.L133+136
 2647 07f8 77EE877A 	 fadds s15,s15,s14
 2648 07fc 3C4B     	 ldr r3,.L133+128
 2649 07fe C3ED007A 	 fsts s15,[r3]
 2650              	.L113:
 506:../main.c     **** 
 507:../main.c     **** 		/*  shortend to one line
 508:../main.c     **** 		// amplitude calculation
 509:../main.c     **** 		amplitude_ab = sqrtf(Valpha*Valpha + Vbeta*Vbeta);
 510:../main.c     **** 
 511:../main.c     **** 		//K_inv = V/m --> m = V / K_inv
 512:../main.c     **** 		modulation_index = amplitude_ab/K_inv;
 513:../main.c     **** 
 514:../main.c     **** 		//scale maximum 1 to 10000 -->
 515:../main.c     **** 		modulation_index_scaled = 10000*modulation_index;
 516:../main.c     **** 
 517:../main.c     **** 		*/
 518:../main.c     **** 		// shortened ca 4% improvemnt
 519:../main.c     **** 		modulation_index_scaled = sqrtf(Valpha*Valpha + Vbeta*Vbeta) * 577.3339;
 2651              	 .loc 4 519 0 is_stmt 1
 2652 0802 384B     	 ldr r3,.L133+116
 2653 0804 93ED007A 	 flds s14,[r3]
 2654 0808 364B     	 ldr r3,.L133+116
 2655 080a D3ED007A 	 flds s15,[r3]
 2656 080e 27EE277A 	 fmuls s14,s14,s15
 2657 0812 354B     	 ldr r3,.L133+120
 2658 0814 D3ED006A 	 flds s13,[r3]
 2659 0818 334B     	 ldr r3,.L133+120
 2660 081a D3ED007A 	 flds s15,[r3]
 2661 081e 66EEA77A 	 fmuls s15,s13,s15
 2662 0822 77EE277A 	 fadds s15,s14,s15
 2663 0826 17EE900A 	 fmrs r0,s15
 2664 082a FFF7FEFF 	 bl sqrtf
 2665 082e 0346     	 mov r3,r0
 2666 0830 1846     	 mov r0,r3
 2667 0832 FFF7FEFF 	 bl __aeabi_f2d
 2668 0836 0246     	 mov r2,r0
 2669 0838 0B46     	 mov r3,r1
 2670 083a 1046     	 mov r0,r2
 2671 083c 1946     	 mov r1,r3
 2672 083e 12A3     	 adr r3,.L133+24
 2673 0840 D3E90023 	 ldrd r2,[r3]
 2674 0844 FFF7FEFF 	 bl __aeabi_dmul
 2675 0848 0246     	 mov r2,r0
 2676 084a 0B46     	 mov r3,r1
 2677 084c 1046     	 mov r0,r2
 2678 084e 1946     	 mov r1,r3
 2679 0850 FFF7FEFF 	 bl __aeabi_d2f
 2680 0854 0246     	 mov r2,r0
 2681 0856 294B     	 ldr r3,.L133+140
 2682 0858 1A60     	 str r2,[r3]
 520:../main.c     **** 
 521:../main.c     **** 		DIGITAL_IO_SetOutputLow(&status_LED_red_cal_time); // 83% duty amplitued calc takes 16% of the ti
 2683              	 .loc 4 521 0
 2684 085a 2948     	 ldr r0,.L133+144
 2685 085c FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 522:../main.c     **** 
 523:../main.c     **** }
 2686              	 .loc 4 523 0
 2687 0860 1037     	 adds r7,r7,#16
 2688              	.LCFI84:
 2689              	 .cfi_def_cfa_offset 24
 2690 0862 BD46     	 mov sp,r7
 2691              	.LCFI85:
 2692              	 .cfi_def_cfa_register 13
 2693              	 
 2694 0864 BDEC028B 	 fldmfdd sp!,{d8}
 2695              	.LCFI86:
 2696              	 .cfi_restore 80
 2697              	 .cfi_restore 81
 2698              	 .cfi_def_cfa_offset 16
 2699 0868 B0BD     	 pop {r4,r5,r7,pc}
 2700              	.L134:
 2701 086a 00BFAFF3 	 .align 3
 2701      0080
 2702              	.L133:
 2703 0870 48E17A14 	 .word 343597384
 2704 0874 AE47B13F 	 .word 1068582830
 2705 0878 E17A14AE 	 .word -1374389535
 2706 087c 47E1CA3F 	 .word 1070260551
 2707 0880 4DC90777 	 .word 1996998989
 2708 0884 46DF913F 	 .word 1066524486
 2709 0888 1361C3D3 	 .word -742170349
 2710 088c AB0A8240 	 .word 1082264235
 2711 0890 00000000 	 .word iq
 2712 0894 00000000 	 .word CAN_control
 2713 0898 00000000 	 .word CAN_new_meassage
 2714 089c 00000000 	 .word CAN_speed_ref
 2715 08a0 00000000 	 .word speed_ref
 2716 08a4 00000000 	 .word CAN_no_com_counter
 2717 08a8 00000000 	 .word omega_ref
 2718 08ac 00000000 	 .word Speed_control
 2719 08b0 00000000 	 .word omega_ele_rads
 2720 08b4 000048C3 	 .word -1018691584
 2721 08b8 00004843 	 .word 1128792064
 2722 08bc 00000000 	 .word T_ref
 2723 08c0 00000000 	 .word T_param_1
 2724 08c4 00000000 	 .word iq_ref
 2725 08c8 0000A0C0 	 .word -1063256064
 2726 08cc 0000A040 	 .word 1084227584
 2727 08d0 00000000 	 .word id
 2728 08d4 00000000 	 .word Id_param
 2729 08d8 00000000 	 .word Vd_ref
 2730 08dc 00000000 	 .word Iq_param
 2731 08e0 00000000 	 .word Vq_ref
 2732 08e4 00000000 	 .word Valpha
 2733 08e8 00000000 	 .word Vbeta
 2734 08ec 00000000 	 .word angle_ab_rad
 2735 08f0 00000000 	 .word angle_ab
 2736 08f4 00003443 	 .word 1127481344
 2737 08f8 0000B443 	 .word 1135869952
 2738 08fc 00000000 	 .word modulation_index_scaled
 2739 0900 00000000 	 .word status_LED_red_cal_time
 2740 0904 93761F57 	 .word 1461679763
 2741 0908 5555E53F 	 .word 1071994197
 2742              	 .cfi_endproc
 2743              	.LFE485:
 2745 090c AFF30080 	 .section .text.PID_Controller,"ax",%progbits
 2746              	 .align 2
 2747              	 .global PID_Controller
 2748              	 .thumb
 2749              	 .thumb_func
 2751              	PID_Controller:
 2752              	.LFB486:
 524:../main.c     **** 
 525:../main.c     **** // PID Controller
 526:../main.c     **** float PID_Controller(float SetPoint,float ActValue,PID_param *param){
 2753              	 .loc 4 526 0
 2754              	 .cfi_startproc
 2755              	 
 2756              	 
 2757              	 
 2758 0000 80B4     	 push {r7}
 2759              	.LCFI87:
 2760              	 .cfi_def_cfa_offset 4
 2761              	 .cfi_offset 7,-4
 2762 0002 89B0     	 sub sp,sp,#36
 2763              	.LCFI88:
 2764              	 .cfi_def_cfa_offset 40
 2765 0004 00AF     	 add r7,sp,#0
 2766              	.LCFI89:
 2767              	 .cfi_def_cfa_register 7
 2768 0006 F860     	 str r0,[r7,#12]
 2769 0008 B960     	 str r1,[r7,#8]
 2770 000a 7A60     	 str r2,[r7,#4]
 527:../main.c     **** 
 528:../main.c     **** 	float Deviation = SetPoint - ActValue;
 2771              	 .loc 4 528 0
 2772 000c 97ED037A 	 flds s14,[r7,#12]
 2773 0010 D7ED027A 	 flds s15,[r7,#8]
 2774 0014 77EE677A 	 fsubs s15,s14,s15
 2775 0018 C7ED067A 	 fsts s15,[r7,#24]
 529:../main.c     **** 	float temp1, temp2;
 530:../main.c     **** 
 531:../main.c     **** 	 temp1 = param->P*Deviation;
 2776              	 .loc 4 531 0
 2777 001c 7B68     	 ldr r3,[r7,#4]
 2778 001e 93ED007A 	 flds s14,[r3]
 2779 0022 D7ED067A 	 flds s15,[r7,#24]
 2780 0026 67EE277A 	 fmuls s15,s14,s15
 2781 002a C7ED057A 	 fsts s15,[r7,#20]
 532:../main.c     **** 	 temp2 = temp1 + param->I*Tcyc*Deviation + param->Output_z;
 2782              	 .loc 4 532 0
 2783 002e 7B68     	 ldr r3,[r7,#4]
 2784 0030 93ED017A 	 flds s14,[r3,#4]
 2785 0034 214B     	 ldr r3,.L144
 2786 0036 D3ED007A 	 flds s15,[r3]
 2787 003a 27EE277A 	 fmuls s14,s14,s15
 2788 003e D7ED067A 	 flds s15,[r7,#24]
 2789 0042 27EE277A 	 fmuls s14,s14,s15
 2790 0046 D7ED057A 	 flds s15,[r7,#20]
 2791 004a 37EE277A 	 fadds s14,s14,s15
 2792 004e 7B68     	 ldr r3,[r7,#4]
 2793 0050 D3ED087A 	 flds s15,[r3,#32]
 2794 0054 77EE277A 	 fadds s15,s14,s15
 2795 0058 C7ED077A 	 fsts s15,[r7,#28]
 533:../main.c     **** 
 534:../main.c     **** 	 if (temp2 >= param->MaxLimit){
 2796              	 .loc 4 534 0
 2797 005c 7B68     	 ldr r3,[r7,#4]
 2798 005e 93ED037A 	 flds s14,[r3,#12]
 2799 0062 D7ED077A 	 flds s15,[r7,#28]
 2800 0066 B4EEE77A 	 fcmpes s14,s15
 2801 006a F1EE10FA 	 fmstat
 2802 006e 03D8     	 bhi .L143
 535:../main.c     **** 		 temp2 = param->MaxLimit;
 2803              	 .loc 4 535 0
 2804 0070 7B68     	 ldr r3,[r7,#4]
 2805 0072 DB68     	 ldr r3,[r3,#12]
 2806 0074 FB61     	 str r3,[r7,#28]
 2807 0076 0CE0     	 b .L138
 2808              	.L143:
 536:../main.c     **** 	 }
 537:../main.c     **** 	 else if (temp2 < param->MinLimit){
 2809              	 .loc 4 537 0
 2810 0078 7B68     	 ldr r3,[r7,#4]
 2811 007a 93ED047A 	 flds s14,[r3,#16]
 2812 007e D7ED077A 	 flds s15,[r7,#28]
 2813 0082 B4EEE77A 	 fcmpes s14,s15
 2814 0086 F1EE10FA 	 fmstat
 2815 008a 02DD     	 ble .L138
 538:../main.c     **** 		 temp2 = param->MinLimit;
 2816              	 .loc 4 538 0
 2817 008c 7B68     	 ldr r3,[r7,#4]
 2818 008e 1B69     	 ldr r3,[r3,#16]
 2819 0090 FB61     	 str r3,[r7,#28]
 2820              	.L138:
 539:../main.c     **** 	 }
 540:../main.c     **** 
 541:../main.c     **** 	 param->Output_z = temp2 - temp1;
 2821              	 .loc 4 541 0
 2822 0092 97ED077A 	 flds s14,[r7,#28]
 2823 0096 D7ED057A 	 flds s15,[r7,#20]
 2824 009a 77EE677A 	 fsubs s15,s14,s15
 2825 009e 7B68     	 ldr r3,[r7,#4]
 2826 00a0 C3ED087A 	 fsts s15,[r3,#32]
 542:../main.c     **** 
 543:../main.c     **** 	 param->Output = temp2;
 2827              	 .loc 4 543 0
 2828 00a4 7B68     	 ldr r3,[r7,#4]
 2829 00a6 FA69     	 ldr r2,[r7,#28]
 2830 00a8 5A61     	 str r2,[r3,#20]
 544:../main.c     **** 
 545:../main.c     **** 	return param->Output;
 2831              	 .loc 4 545 0
 2832 00aa 7B68     	 ldr r3,[r7,#4]
 2833 00ac 5B69     	 ldr r3,[r3,#20]
 546:../main.c     **** 
 547:../main.c     **** }
 2834              	 .loc 4 547 0
 2835 00ae 1846     	 mov r0,r3
 2836 00b0 2437     	 adds r7,r7,#36
 2837              	.LCFI90:
 2838              	 .cfi_def_cfa_offset 4
 2839 00b2 BD46     	 mov sp,r7
 2840              	.LCFI91:
 2841              	 .cfi_def_cfa_register 13
 2842              	 
 2843 00b4 5DF8047B 	 ldr r7,[sp],#4
 2844              	.LCFI92:
 2845              	 .cfi_restore 7
 2846              	 .cfi_def_cfa_offset 0
 2847 00b8 7047     	 bx lr
 2848              	.L145:
 2849 00ba 00BF     	 .align 2
 2850              	.L144:
 2851 00bc 00000000 	 .word Tcyc
 2852              	 .cfi_endproc
 2853              	.LFE486:
 2855              	 .section .text.readCurrent,"ax",%progbits
 2856              	 .align 2
 2857              	 .global readCurrent
 2858              	 .thumb
 2859              	 .thumb_func
 2861              	readCurrent:
 2862              	.LFB487:
 548:../main.c     **** 
 549:../main.c     **** 
 550:../main.c     **** //Read Current  via SPI-Interface
 551:../main.c     **** float readCurrent(uint8_t ChipSelect){
 2863              	 .loc 4 551 0
 2864              	 .cfi_startproc
 2865              	 
 2866              	 
 2867 0000 80B5     	 push {r7,lr}
 2868              	.LCFI93:
 2869              	 .cfi_def_cfa_offset 8
 2870              	 .cfi_offset 7,-8
 2871              	 .cfi_offset 14,-4
 2872 0002 86B0     	 sub sp,sp,#24
 2873              	.LCFI94:
 2874              	 .cfi_def_cfa_offset 32
 2875 0004 00AF     	 add r7,sp,#0
 2876              	.LCFI95:
 2877              	 .cfi_def_cfa_register 7
 2878 0006 0346     	 mov r3,r0
 2879 0008 FB71     	 strb r3,[r7,#7]
 552:../main.c     **** 	uint8_t ReadData[2];
 553:../main.c     **** 
 554:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, ChipSelect);
 2880              	 .loc 4 554 0
 2881 000a FB79     	 ldrb r3,[r7,#7]
 2882 000c 9BB2     	 uxth r3,r3
 2883 000e 2248     	 ldr r0,.L148
 2884 0010 1946     	 mov r1,r3
 2885 0012 FFF7FEFF 	 bl BUS_IO_Write
 555:../main.c     **** 	SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2U);
 2886              	 .loc 4 555 0
 2887 0016 07F10C03 	 add r3,r7,#12
 2888 001a 2048     	 ldr r0,.L148+4
 2889 001c 1946     	 mov r1,r3
 2890 001e 0222     	 movs r2,#2
 2891 0020 FFF7FEFF 	 bl SPI_MASTER_Receive
 556:../main.c     **** 	BUS_IO_Write(&SPI_ChipSelect, 0b111);
 2892              	 .loc 4 556 0
 2893 0024 1C48     	 ldr r0,.L148
 2894 0026 0721     	 movs r1,#7
 2895 0028 FFF7FEFF 	 bl BUS_IO_Write
 557:../main.c     **** 	ReadData[0] = ReadData[0] & 0X1F; 									//cutting away the 3 info bits
 2896              	 .loc 4 557 0
 2897 002c 3B7B     	 ldrb r3,[r7,#12]
 2898 002e 03F01F03 	 and r3,r3,#31
 2899 0032 DBB2     	 uxtb r3,r3
 2900 0034 3B73     	 strb r3,[r7,#12]
 558:../main.c     **** 	uint16_t iCurrent = ReadData[0]<<8 | ReadData[1];					//combine Data
 2901              	 .loc 4 558 0
 2902 0036 3B7B     	 ldrb r3,[r7,#12]
 2903 0038 1B02     	 lsls r3,r3,#8
 2904 003a 9AB2     	 uxth r2,r3
 2905 003c 7B7B     	 ldrb r3,[r7,#13]
 2906 003e 9BB2     	 uxth r3,r3
 2907 0040 1343     	 orrs r3,r3,r2
 2908 0042 9BB2     	 uxth r3,r3
 2909 0044 FB82     	 strh r3,[r7,#22]
 559:../main.c     **** 
 560:../main.c     **** 	// calculation of the current
 561:../main.c     **** 	float fCurrent = ((float)iCurrent - 4096.0)/160.0;					// ATTENTION: value has to be divided by 16
 2910              	 .loc 4 561 0
 2911 0046 FB8A     	 ldrh r3,[r7,#22]
 2912 0048 07EE903A 	 fmsr s15,r3
 2913 004c F8EE677A 	 fuitos s15,s15
 2914 0050 17EE900A 	 fmrs r0,s15
 2915 0054 FFF7FEFF 	 bl __aeabi_f2d
 2916 0058 0246     	 mov r2,r0
 2917 005a 0B46     	 mov r3,r1
 2918 005c 1046     	 mov r0,r2
 2919 005e 1946     	 mov r1,r3
 2920 0060 4FF00002 	 mov r2,#0
 2921 0064 0E4B     	 ldr r3,.L148+8
 2922 0066 FFF7FEFF 	 bl __aeabi_dsub
 2923 006a 0246     	 mov r2,r0
 2924 006c 0B46     	 mov r3,r1
 2925 006e 1046     	 mov r0,r2
 2926 0070 1946     	 mov r1,r3
 2927 0072 4FF00002 	 mov r2,#0
 2928 0076 0B4B     	 ldr r3,.L148+12
 2929 0078 FFF7FEFF 	 bl __aeabi_ddiv
 2930 007c 0246     	 mov r2,r0
 2931 007e 0B46     	 mov r3,r1
 2932 0080 1046     	 mov r0,r2
 2933 0082 1946     	 mov r1,r3
 2934 0084 FFF7FEFF 	 bl __aeabi_d2f
 2935 0088 0346     	 mov r3,r0
 2936 008a 3B61     	 str r3,[r7,#16]
 562:../main.c     **** 
 563:../main.c     **** 	return fCurrent;
 2937              	 .loc 4 563 0
 2938 008c 3B69     	 ldr r3,[r7,#16]
 564:../main.c     **** }
 2939              	 .loc 4 564 0
 2940 008e 1846     	 mov r0,r3
 2941 0090 1837     	 adds r7,r7,#24
 2942              	.LCFI96:
 2943              	 .cfi_def_cfa_offset 8
 2944 0092 BD46     	 mov sp,r7
 2945              	.LCFI97:
 2946              	 .cfi_def_cfa_register 13
 2947              	 
 2948 0094 80BD     	 pop {r7,pc}
 2949              	.L149:
 2950 0096 00BF     	 .align 2
 2951              	.L148:
 2952 0098 00000000 	 .word SPI_ChipSelect
 2953 009c 00000000 	 .word SPI_MASTER_0
 2954 00a0 0000B040 	 .word 1085276160
 2955 00a4 00006440 	 .word 1080295424
 2956              	 .cfi_endproc
 2957              	.LFE487:
 2959              	 .text
 2960              	.Letext0:
 2961              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2962              	 .file 6 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2963              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2964              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_gpio.h"
 2965              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc4_scu.h"
 2966              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_usic.h"
 2967              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_spi.h"
 2968              	 .file 12 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master.h"
 2969              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io.h"
 2970              	 .file 14 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_eru.h"
 2971              	 .file 15 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_ccu8.h"
 2972              	 .file 16 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 2973              	 .file 17 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm.h"
 2974              	 .file 18 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/XMCLib/inc/xmc_can.h"
 2975              	 .file 19 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/GLOBAL_CAN/global_can.h"
 2976              	 .file 20 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node.h"
 2977              	 .file 21 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DAVE.h"
 2978              	 .file 22 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Include/core_cm4.h"
 2979              	 .file 23 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 2980              	 .file 24 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 2981              	 .file 25 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/SPI_MASTER/spi_master_extern.h"
 2982              	 .file 26 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/BUS_IO/bus_io_extern.h"
 2983              	 .file 27 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PIN_INTERRUPT/pin_interrupt_extern.h"
 2984              	 .file 28 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/PWM_SVM/pwm_svm_extern.h"
 2985              	 .file 29 "C:/GitHub/MobRob_Rover_NEW/Inverter/Mobrob_Inverter/Dave/Generated/CAN_NODE/can_node_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:24     .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:68     .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:72     .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:115    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:119    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:163    .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:167    .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:207    .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:211    .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
    {standard input}:250    .text.PIN_INTERRUPT_GetPinValue:00000000 $t
    {standard input}:254    .text.PIN_INTERRUPT_GetPinValue:00000000 PIN_INTERRUPT_GetPinValue
    {standard input}:299    .data.Speed_control:00000000 Speed_control
    {standard input}:305    .data.CAN_control:00000000 CAN_control
                            *COM*:00000004 Current_U
                            *COM*:00000004 Current_V
                            *COM*:00000004 Current_W
    {standard input}:315    .data.lookup_table:00000000 lookup_table
    {standard input}:312    .data.lookup_table:00000000 $d
    {standard input}:384    .bss.sector:00000000 sector
    {standard input}:385    .bss.sector:00000000 $d
    {standard input}:390    .bss.direction:00000000 direction
    {standard input}:391    .bss.direction:00000000 $d
    {standard input}:397    .bss.enc_val:00000000 enc_val
    {standard input}:394    .bss.enc_val:00000000 $d
    {standard input}:404    .bss.time_since_A:00000000 time_since_A
    {standard input}:401    .bss.time_since_A:00000000 $d
    {standard input}:411    .bss.time_since_B:00000000 time_since_B
    {standard input}:408    .bss.time_since_B:00000000 $d
    {standard input}:418    .bss.time_since_C:00000000 time_since_C
    {standard input}:415    .bss.time_since_C:00000000 $d
    {standard input}:425    .data.time_180deg:00000000 time_180deg
    {standard input}:422    .data.time_180deg:00000000 $d
    {standard input}:432    .data.time_180deg_cal:00000000 time_180deg_cal
    {standard input}:429    .data.time_180deg_cal:00000000 $d
                            *COM*:00000001 last_Hall_trig
    {standard input}:440    .data.angle_in_sector:00000000 angle_in_sector
    {standard input}:437    .data.angle_in_sector:00000000 $d
    {standard input}:447    .bss.angle_phi:00000000 angle_phi
    {standard input}:444    .bss.angle_phi:00000000 $d
                            *COM*:00000004 ialpha
                            *COM*:00000004 ibeta
                            *COM*:00000004 iq
                            *COM*:00000004 id
                            *COM*:00000004 Valpha
                            *COM*:00000004 Vbeta
    {standard input}:460    .bss.omega_ele_rads:00000000 omega_ele_rads
    {standard input}:457    .bss.omega_ele_rads:00000000 $d
    {standard input}:467    .bss.omega_mech_rads_:00000000 omega_mech_rads_
    {standard input}:464    .bss.omega_mech_rads_:00000000 $d
    {standard input}:474    .bss.omega_mech_rads_temp:00000000 omega_mech_rads_temp
    {standard input}:471    .bss.omega_mech_rads_temp:00000000 $d
    {standard input}:481    .bss.speed_ref:00000000 speed_ref
    {standard input}:478    .bss.speed_ref:00000000 $d
    {standard input}:488    .bss.omega_ref:00000000 omega_ref
    {standard input}:485    .bss.omega_ref:00000000 $d
    {standard input}:495    .bss.iq_ref:00000000 iq_ref
    {standard input}:492    .bss.iq_ref:00000000 $d
    {standard input}:502    .bss.T_ref:00000000 T_ref
    {standard input}:499    .bss.T_ref:00000000 $d
    {standard input}:509    .bss.Vd_ref:00000000 Vd_ref
    {standard input}:506    .bss.Vd_ref:00000000 $d
    {standard input}:516    .bss.Vq_ref:00000000 Vq_ref
    {standard input}:513    .bss.Vq_ref:00000000 $d
                            *COM*:00000008 Speeds_int16_r
    {standard input}:524    .bss.CAN_speed_ref:00000000 CAN_speed_ref
    {standard input}:521    .bss.CAN_speed_ref:00000000 $d
    {standard input}:530    .bss.CAN_new_meassage:00000000 CAN_new_meassage
    {standard input}:531    .bss.CAN_new_meassage:00000000 $d
    {standard input}:536    .bss.CAN_no_com_counter:00000000 CAN_no_com_counter
    {standard input}:537    .bss.CAN_no_com_counter:00000000 $d
    {standard input}:543    .bss.distance_180deg_ele_count:00000000 distance_180deg_ele_count
    {standard input}:540    .bss.distance_180deg_ele_count:00000000 $d
    {standard input}:550    .bss.Speed_act:00000000 Speed_act
    {standard input}:547    .bss.Speed_act:00000000 $d
    {standard input}:557    .bss.distance:00000000 distance
    {standard input}:554    .bss.distance:00000000 $d
                            *COM*:00000004 modulation_index
                            *COM*:00000004 modulation_index_scaled
                            *COM*:00000004 angle_ab
                            *COM*:00000004 angle_ab_rad
                            *COM*:00000004 amplitude_ab
    {standard input}:569    .data.Ts:00000000 Ts
    {standard input}:566    .data.Ts:00000000 $d
    {standard input}:576    .data.Tcyc:00000000 Tcyc
    {standard input}:573    .data.Tcyc:00000000 $d
    {standard input}:583    .data.scaling_factor:00000000 scaling_factor
    {standard input}:580    .data.scaling_factor:00000000 $d
                            *COM*:00000004 amplitude_corrected
    {standard input}:590    .bss.count:00000000 count
    {standard input}:591    .bss.count:00000000 $d
    {standard input}:597    .data.offset_pos:00000000 offset_pos
    {standard input}:594    .data.offset_pos:00000000 $d
    {standard input}:604    .data.offset_neg:00000000 offset_neg
    {standard input}:601    .data.offset_neg:00000000 $d
    {standard input}:611    .data.Iq_param:00000000 Iq_param
    {standard input}:608    .data.Iq_param:00000000 $d
    {standard input}:626    .data.Id_param:00000000 Id_param
    {standard input}:623    .data.Id_param:00000000 $d
    {standard input}:641    .data.T_param:00000000 T_param
    {standard input}:638    .data.T_param:00000000 $d
    {standard input}:656    .data.T_param_1:00000000 T_param_1
    {standard input}:653    .data.T_param_1:00000000 $d
    {standard input}:667    .text.main:00000000 $t
    {standard input}:672    .text.main:00000000 main
    {standard input}:1500   .text.Hall_init:00000000 Hall_init
    {standard input}:1779   .text.Calculation:00000000 Calculation
    {standard input}:731    .text.main:00000040 $d
    {standard input}:738    .text.CAN0_1_IRQHandler:00000000 $t
    {standard input}:743    .text.CAN0_1_IRQHandler:00000000 CAN0_1_IRQHandler
    {standard input}:883    .text.CAN0_1_IRQHandler:000000e8 $d
    {standard input}:893    .text.CAN0_0_IRQHandler:00000000 $t
    {standard input}:898    .text.CAN0_0_IRQHandler:00000000 CAN0_0_IRQHandler
    {standard input}:971    .text.CAN0_0_IRQHandler:00000050 $d
    {standard input}:982    .text.CCU43_0_IRQHandler:00000000 $t
    {standard input}:987    .text.CCU43_0_IRQHandler:00000000 CCU43_0_IRQHandler
    {standard input}:1146   .text.CCU43_0_IRQHandler:00000138 $d
    {standard input}:1162   .text.CCU43_3_IRQHandler:00000000 $t
    {standard input}:1167   .text.CCU43_3_IRQHandler:00000000 CCU43_3_IRQHandler
    {standard input}:1212   .text.CCU43_3_IRQHandler:0000002c $d
    {standard input}:1219   .text.ERU1_2_IRQHandler:00000000 $t
    {standard input}:1224   .text.ERU1_2_IRQHandler:00000000 ERU1_2_IRQHandler
    {standard input}:1623   .text.HallSensor:00000000 HallSensor
    {standard input}:1287   .text.ERU1_2_IRQHandler:00000050 $d
    {standard input}:1296   .text.ERU1_0_IRQHandler:00000000 $t
    {standard input}:1301   .text.ERU1_0_IRQHandler:00000000 ERU1_0_IRQHandler
    {standard input}:1335   .text.ERU1_0_IRQHandler:00000020 $d
    {standard input}:1342   .text.ERU1_3_IRQHandler:00000000 $t
    {standard input}:1347   .text.ERU1_3_IRQHandler:00000000 ERU1_3_IRQHandler
    {standard input}:1381   .text.ERU1_3_IRQHandler:00000020 $d
    {standard input}:1388   .text.CCU43_1_IRQHandler:00000000 $t
    {standard input}:1393   .text.CCU43_1_IRQHandler:00000000 CCU43_1_IRQHandler
    {standard input}:1421   .text.CCU80_3_IRQHandler:00000000 $t
    {standard input}:1426   .text.CCU80_3_IRQHandler:00000000 CCU80_3_IRQHandler
    {standard input}:1487   .text.CCU80_3_IRQHandler:00000058 $d
    {standard input}:1495   .text.Hall_init:00000000 $t
    {standard input}:1610   .text.Hall_init:0000008c $d
    {standard input}:1618   .text.HallSensor:00000000 $t
    {standard input}:1760   .text.HallSensor:000000c0 $d
    {standard input}:1774   .text.Calculation:00000000 $t
    {standard input}:2002   .text.Calculation:000001a4 $d
    {standard input}:2024   .text.Calculation:000001f4 $t
    {standard input}:2861   .text.readCurrent:00000000 readCurrent
    {standard input}:2339   .text.Calculation:00000510 $d
    {standard input}:2369   .text.Calculation:00000584 $t
    {standard input}:2751   .text.PID_Controller:00000000 PID_Controller
    {standard input}:2703   .text.Calculation:00000870 $d
    {standard input}:2746   .text.PID_Controller:00000000 $t
    {standard input}:2851   .text.PID_Controller:000000bc $d
    {standard input}:2856   .text.readCurrent:00000000 $t
    {standard input}:2952   .text.readCurrent:00000098 $d
                     .debug_frame:00000010 $d
    {standard input}:2745   .text.Calculation:0000090c $t

UNDEFINED SYMBOLS
DAVE_Init
CAN_NODE_Init
PWM_SVM_Start
CAN_NODE_0
PWM_SVM_0
CAN_NODE_MO_Receive
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_dadd
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
PWM_SVM_SVMUpdate
Hall_A_ISR
Hall_B_ISR
Hall_C_ISR
__aeabi_ui2d
__aeabi_i2d
__aeabi_dsub
status_LED_red_cal_time
cosf
sinf
atanf
sqrtf
BUS_IO_Write
SPI_MASTER_Receive
SPI_ChipSelect
SPI_MASTER_0
