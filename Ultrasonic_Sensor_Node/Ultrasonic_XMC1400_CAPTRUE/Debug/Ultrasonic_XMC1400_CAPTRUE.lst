
Ultrasonic_XMC1400_CAPTRUE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d38  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  10004d38  10004d38  00004d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .VENEER_Code  00000144  2000000c  10004d40  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  4 .data         00000120  20000550  10004e84  00008550  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000040  20000670  00000520  00008670  2**2
                  ALLOC
  6 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  7 .debug_aranges 00000a98  00000000  00000000  00008670  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000120b3  00000000  00000000  00009108  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002ba7  00000000  00000000  0001b1bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000069c8  00000000  00000000  0001dd62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002488  00000000  00000000  0002472c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00007852  00000000  00000000  00026bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003720  00000000  00000000  0002e406  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008b8  00000000  00000000  00031b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 000007ed  00000000  00000000  000323e0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10004d40 	.word	0x10004d40
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	10004e84 	.word	0x10004e84
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	20000670 	.word	0x20000670
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	10004fa4 	.word	0x10004fa4
	ldr	r2, =__ram_code_start
10001084:	20000670 	.word	0x20000670
	ldr	r3, =__ram_code_end
10001088:	20000670 	.word	0x20000670
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	20000670 	.word	0x20000670
	ldr	r2, =__bss_end
10001090:	200006ac 	.word	0x200006ac
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	10004b09 	.word	0x10004b09
    blx  r0
#endif

    ldr  r0, =main
10001098:	1000333d 	.word	0x1000333d

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f001 fa88 	bl	100025b8 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f001 fad4 	bl	10002654 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f000 ffe8 	bl	100020dc <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f000 ffd5 	bl	100020dc <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	20000670 	.word	0x20000670
10001168:	20000674 	.word	0x20000674
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001188:	b590      	push	{r4, r7, lr}
1000118a:	b085      	sub	sp, #20
1000118c:	af00      	add	r7, sp, #0
1000118e:	60f8      	str	r0, [r7, #12]
10001190:	607a      	str	r2, [r7, #4]
10001192:	230b      	movs	r3, #11
10001194:	18fb      	adds	r3, r7, r3
10001196:	1c0a      	adds	r2, r1, #0
10001198:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000119a:	230b      	movs	r3, #11
1000119c:	18fb      	adds	r3, r7, r3
1000119e:	781b      	ldrb	r3, [r3, #0]
100011a0:	089b      	lsrs	r3, r3, #2
100011a2:	b2db      	uxtb	r3, r3
100011a4:	1c18      	adds	r0, r3, #0
100011a6:	230b      	movs	r3, #11
100011a8:	18fb      	adds	r3, r7, r3
100011aa:	781b      	ldrb	r3, [r3, #0]
100011ac:	089b      	lsrs	r3, r3, #2
100011ae:	b2db      	uxtb	r3, r3
100011b0:	1c1a      	adds	r2, r3, #0
100011b2:	68fb      	ldr	r3, [r7, #12]
100011b4:	3204      	adds	r2, #4
100011b6:	0092      	lsls	r2, r2, #2
100011b8:	58d3      	ldr	r3, [r2, r3]
100011ba:	220b      	movs	r2, #11
100011bc:	18ba      	adds	r2, r7, r2
100011be:	7812      	ldrb	r2, [r2, #0]
100011c0:	2103      	movs	r1, #3
100011c2:	400a      	ands	r2, r1
100011c4:	00d2      	lsls	r2, r2, #3
100011c6:	1c11      	adds	r1, r2, #0
100011c8:	22fc      	movs	r2, #252	; 0xfc
100011ca:	408a      	lsls	r2, r1
100011cc:	43d2      	mvns	r2, r2
100011ce:	401a      	ands	r2, r3
100011d0:	1c11      	adds	r1, r2, #0
100011d2:	68fb      	ldr	r3, [r7, #12]
100011d4:	1d02      	adds	r2, r0, #4
100011d6:	0092      	lsls	r2, r2, #2
100011d8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011da:	68fb      	ldr	r3, [r7, #12]
100011dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011de:	220b      	movs	r2, #11
100011e0:	18ba      	adds	r2, r7, r2
100011e2:	7812      	ldrb	r2, [r2, #0]
100011e4:	0052      	lsls	r2, r2, #1
100011e6:	1c11      	adds	r1, r2, #0
100011e8:	2203      	movs	r2, #3
100011ea:	408a      	lsls	r2, r1
100011ec:	43d2      	mvns	r2, r2
100011ee:	401a      	ands	r2, r3
100011f0:	68fb      	ldr	r3, [r7, #12]
100011f2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
100011f4:	230b      	movs	r3, #11
100011f6:	18fb      	adds	r3, r7, r3
100011f8:	781b      	ldrb	r3, [r3, #0]
100011fa:	08db      	lsrs	r3, r3, #3
100011fc:	b2db      	uxtb	r3, r3
100011fe:	1c18      	adds	r0, r3, #0
10001200:	230b      	movs	r3, #11
10001202:	18fb      	adds	r3, r7, r3
10001204:	781b      	ldrb	r3, [r3, #0]
10001206:	08db      	lsrs	r3, r3, #3
10001208:	b2db      	uxtb	r3, r3
1000120a:	1c1a      	adds	r2, r3, #0
1000120c:	68fb      	ldr	r3, [r7, #12]
1000120e:	3210      	adds	r2, #16
10001210:	0092      	lsls	r2, r2, #2
10001212:	58d3      	ldr	r3, [r2, r3]
10001214:	220b      	movs	r2, #11
10001216:	18ba      	adds	r2, r7, r2
10001218:	7812      	ldrb	r2, [r2, #0]
1000121a:	2107      	movs	r1, #7
1000121c:	400a      	ands	r2, r1
1000121e:	0092      	lsls	r2, r2, #2
10001220:	1c11      	adds	r1, r2, #0
10001222:	2204      	movs	r2, #4
10001224:	408a      	lsls	r2, r1
10001226:	43d2      	mvns	r2, r2
10001228:	401a      	ands	r2, r3
1000122a:	1c11      	adds	r1, r2, #0
1000122c:	68fb      	ldr	r3, [r7, #12]
1000122e:	1c02      	adds	r2, r0, #0
10001230:	3210      	adds	r2, #16
10001232:	0092      	lsls	r2, r2, #2
10001234:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001236:	230b      	movs	r3, #11
10001238:	18fb      	adds	r3, r7, r3
1000123a:	781b      	ldrb	r3, [r3, #0]
1000123c:	08db      	lsrs	r3, r3, #3
1000123e:	b2db      	uxtb	r3, r3
10001240:	1c18      	adds	r0, r3, #0
10001242:	230b      	movs	r3, #11
10001244:	18fb      	adds	r3, r7, r3
10001246:	781b      	ldrb	r3, [r3, #0]
10001248:	08db      	lsrs	r3, r3, #3
1000124a:	b2db      	uxtb	r3, r3
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	68fb      	ldr	r3, [r7, #12]
10001250:	3210      	adds	r2, #16
10001252:	0092      	lsls	r2, r2, #2
10001254:	58d2      	ldr	r2, [r2, r3]
10001256:	687b      	ldr	r3, [r7, #4]
10001258:	785b      	ldrb	r3, [r3, #1]
1000125a:	1c1c      	adds	r4, r3, #0
1000125c:	230b      	movs	r3, #11
1000125e:	18fb      	adds	r3, r7, r3
10001260:	781b      	ldrb	r3, [r3, #0]
10001262:	2107      	movs	r1, #7
10001264:	400b      	ands	r3, r1
10001266:	009b      	lsls	r3, r3, #2
10001268:	409c      	lsls	r4, r3
1000126a:	1c23      	adds	r3, r4, #0
1000126c:	431a      	orrs	r2, r3
1000126e:	1c11      	adds	r1, r2, #0
10001270:	68fb      	ldr	r3, [r7, #12]
10001272:	1c02      	adds	r2, r0, #0
10001274:	3210      	adds	r2, #16
10001276:	0092      	lsls	r2, r2, #2
10001278:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	4a20      	ldr	r2, [pc, #128]	; (10001300 <XMC_GPIO_Init+0x178>)
1000127e:	4293      	cmp	r3, r2
10001280:	d10b      	bne.n	1000129a <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001282:	68fb      	ldr	r3, [r7, #12]
10001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001286:	220b      	movs	r2, #11
10001288:	18ba      	adds	r2, r7, r2
1000128a:	7812      	ldrb	r2, [r2, #0]
1000128c:	2101      	movs	r1, #1
1000128e:	4091      	lsls	r1, r2
10001290:	1c0a      	adds	r2, r1, #0
10001292:	43d2      	mvns	r2, r2
10001294:	401a      	ands	r2, r3
10001296:	68fb      	ldr	r3, [r7, #12]
10001298:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
1000129a:	687b      	ldr	r3, [r7, #4]
1000129c:	781b      	ldrb	r3, [r3, #0]
1000129e:	b2db      	uxtb	r3, r3
100012a0:	b25b      	sxtb	r3, r3
100012a2:	2b00      	cmp	r3, #0
100012a4:	da07      	bge.n	100012b6 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
100012a6:	687b      	ldr	r3, [r7, #4]
100012a8:	685a      	ldr	r2, [r3, #4]
100012aa:	230b      	movs	r3, #11
100012ac:	18fb      	adds	r3, r7, r3
100012ae:	781b      	ldrb	r3, [r3, #0]
100012b0:	409a      	lsls	r2, r3
100012b2:	68fb      	ldr	r3, [r7, #12]
100012b4:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012b6:	230b      	movs	r3, #11
100012b8:	18fb      	adds	r3, r7, r3
100012ba:	781b      	ldrb	r3, [r3, #0]
100012bc:	089b      	lsrs	r3, r3, #2
100012be:	b2db      	uxtb	r3, r3
100012c0:	1c18      	adds	r0, r3, #0
100012c2:	230b      	movs	r3, #11
100012c4:	18fb      	adds	r3, r7, r3
100012c6:	781b      	ldrb	r3, [r3, #0]
100012c8:	089b      	lsrs	r3, r3, #2
100012ca:	b2db      	uxtb	r3, r3
100012cc:	1c1a      	adds	r2, r3, #0
100012ce:	68fb      	ldr	r3, [r7, #12]
100012d0:	3204      	adds	r2, #4
100012d2:	0092      	lsls	r2, r2, #2
100012d4:	58d2      	ldr	r2, [r2, r3]
100012d6:	687b      	ldr	r3, [r7, #4]
100012d8:	781b      	ldrb	r3, [r3, #0]
100012da:	1c1c      	adds	r4, r3, #0
100012dc:	230b      	movs	r3, #11
100012de:	18fb      	adds	r3, r7, r3
100012e0:	781b      	ldrb	r3, [r3, #0]
100012e2:	2103      	movs	r1, #3
100012e4:	400b      	ands	r3, r1
100012e6:	00db      	lsls	r3, r3, #3
100012e8:	409c      	lsls	r4, r3
100012ea:	1c23      	adds	r3, r4, #0
100012ec:	431a      	orrs	r2, r3
100012ee:	1c11      	adds	r1, r2, #0
100012f0:	68fb      	ldr	r3, [r7, #12]
100012f2:	1d02      	adds	r2, r0, #4
100012f4:	0092      	lsls	r2, r2, #2
100012f6:	50d1      	str	r1, [r2, r3]
}
100012f8:	46bd      	mov	sp, r7
100012fa:	b005      	add	sp, #20
100012fc:	bd90      	pop	{r4, r7, pc}
100012fe:	46c0      	nop			; (mov r8, r8)
10001300:	40040200 	.word	0x40040200

10001304 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001304:	b580      	push	{r7, lr}
10001306:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001308:	4b02      	ldr	r3, [pc, #8]	; (10001314 <XMC_SCU_LockProtectedBits+0x10>)
1000130a:	22c3      	movs	r2, #195	; 0xc3
1000130c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000130e:	46bd      	mov	sp, r7
10001310:	bd80      	pop	{r7, pc}
10001312:	46c0      	nop			; (mov r8, r8)
10001314:	40010000 	.word	0x40010000

10001318 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001318:	b580      	push	{r7, lr}
1000131a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000131c:	4b05      	ldr	r3, [pc, #20]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000131e:	22c0      	movs	r2, #192	; 0xc0
10001320:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001322:	46c0      	nop			; (mov r8, r8)
10001324:	4b03      	ldr	r3, [pc, #12]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
10001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001328:	2204      	movs	r2, #4
1000132a:	4013      	ands	r3, r2
1000132c:	d1fa      	bne.n	10001324 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
1000132e:	46bd      	mov	sp, r7
10001330:	bd80      	pop	{r7, pc}
10001332:	46c0      	nop			; (mov r8, r8)
10001334:	40010000 	.word	0x40010000

10001338 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10001338:	b580      	push	{r7, lr}
1000133a:	b086      	sub	sp, #24
1000133c:	af00      	add	r7, sp, #0
1000133e:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10001340:	f7ff ffea 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10001344:	687b      	ldr	r3, [r7, #4]
10001346:	799b      	ldrb	r3, [r3, #6]
10001348:	2b30      	cmp	r3, #48	; 0x30
1000134a:	d053      	beq.n	100013f4 <XMC_SCU_CLOCK_Init+0xbc>
  {
    if (OSCHP_GetFrequency() > 20000000U)
1000134c:	f7ff ff14 	bl	10001178 <OSCHP_GetFrequency>
10001350:	1e02      	subs	r2, r0, #0
10001352:	4b49      	ldr	r3, [pc, #292]	; (10001478 <XMC_SCU_CLOCK_Init+0x140>)
10001354:	429a      	cmp	r2, r3
10001356:	d909      	bls.n	1000136c <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10001358:	4a48      	ldr	r2, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135a:	4948      	ldr	r1, [pc, #288]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000135c:	2390      	movs	r3, #144	; 0x90
1000135e:	5acb      	ldrh	r3, [r1, r3]
10001360:	b29b      	uxth	r3, r3
10001362:	2140      	movs	r1, #64	; 0x40
10001364:	430b      	orrs	r3, r1
10001366:	b299      	uxth	r1, r3
10001368:	2390      	movs	r3, #144	; 0x90
1000136a:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
1000136c:	4a43      	ldr	r2, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000136e:	4943      	ldr	r1, [pc, #268]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
10001370:	2390      	movs	r3, #144	; 0x90
10001372:	5acb      	ldrh	r3, [r1, r3]
10001374:	b29b      	uxth	r3, r3
10001376:	b29b      	uxth	r3, r3
10001378:	1c19      	adds	r1, r3, #0
1000137a:	2332      	movs	r3, #50	; 0x32
1000137c:	4399      	bics	r1, r3
1000137e:	1c0b      	adds	r3, r1, #0
10001380:	b299      	uxth	r1, r3
                               config->oschp_mode;
10001382:	687b      	ldr	r3, [r7, #4]
10001384:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001386:	b29b      	uxth	r3, r3
10001388:	430b      	orrs	r3, r1
1000138a:	b29b      	uxth	r3, r3
1000138c:	b299      	uxth	r1, r3
1000138e:	2390      	movs	r3, #144	; 0x90
10001390:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
10001392:	4b3b      	ldr	r3, [pc, #236]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
10001394:	2202      	movs	r2, #2
10001396:	629a      	str	r2, [r3, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog,
         keeping in between at least one DCO2 cycle */

      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10001398:	4b3a      	ldr	r3, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139a:	4a3a      	ldr	r2, [pc, #232]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000139c:	6952      	ldr	r2, [r2, #20]
1000139e:	493a      	ldr	r1, [pc, #232]	; (10001488 <XMC_SCU_CLOCK_Init+0x150>)
100013a0:	400a      	ands	r2, r1
100013a2:	615a      	str	r2, [r3, #20]
100013a4:	4b39      	ldr	r3, [pc, #228]	; (1000148c <XMC_SCU_CLOCK_Init+0x154>)
100013a6:	617b      	str	r3, [r7, #20]
100013a8:	e000      	b.n	100013ac <XMC_SCU_CLOCK_Init+0x74>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013aa:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013ac:	697b      	ldr	r3, [r7, #20]
100013ae:	3b01      	subs	r3, #1
100013b0:	617b      	str	r3, [r7, #20]
100013b2:	697b      	ldr	r3, [r7, #20]
100013b4:	2b00      	cmp	r3, #0
100013b6:	d1f8      	bne.n	100013aa <XMC_SCU_CLOCK_Init+0x72>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);

      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
100013b8:	4b32      	ldr	r3, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ba:	4a32      	ldr	r2, [pc, #200]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013bc:	6952      	ldr	r2, [r2, #20]
100013be:	21c0      	movs	r1, #192	; 0xc0
100013c0:	0489      	lsls	r1, r1, #18
100013c2:	430a      	orrs	r2, r1
100013c4:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
100013c6:	46c0      	nop			; (mov r8, r8)
100013c8:	4b2e      	ldr	r3, [pc, #184]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
100013ca:	695a      	ldr	r2, [r3, #20]
100013cc:	2380      	movs	r3, #128	; 0x80
100013ce:	045b      	lsls	r3, r3, #17
100013d0:	4013      	ands	r3, r2
100013d2:	d1f9      	bne.n	100013c8 <XMC_SCU_CLOCK_Init+0x90>
100013d4:	4b2e      	ldr	r3, [pc, #184]	; (10001490 <XMC_SCU_CLOCK_Init+0x158>)
100013d6:	613b      	str	r3, [r7, #16]
100013d8:	e000      	b.n	100013dc <XMC_SCU_CLOCK_Init+0xa4>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013da:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013dc:	693b      	ldr	r3, [r7, #16]
100013de:	3b01      	subs	r3, #1
100013e0:	613b      	str	r3, [r7, #16]
100013e2:	693b      	ldr	r3, [r7, #16]
100013e4:	2b00      	cmp	r3, #0
100013e6:	d1f8      	bne.n	100013da <XMC_SCU_CLOCK_Init+0xa2>
      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);

    }
    while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
100013e8:	4b25      	ldr	r3, [pc, #148]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
100013ea:	6a1b      	ldr	r3, [r3, #32]
100013ec:	2202      	movs	r2, #2
100013ee:	4013      	ands	r3, r2
100013f0:	d1cf      	bne.n	10001392 <XMC_SCU_CLOCK_Init+0x5a>
100013f2:	e009      	b.n	10001408 <XMC_SCU_CLOCK_Init+0xd0>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
100013f4:	4a21      	ldr	r2, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f6:	4921      	ldr	r1, [pc, #132]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013f8:	2390      	movs	r3, #144	; 0x90
100013fa:	5acb      	ldrh	r3, [r1, r3]
100013fc:	b29b      	uxth	r3, r3
100013fe:	2130      	movs	r1, #48	; 0x30
10001400:	430b      	orrs	r3, r1
10001402:	b299      	uxth	r1, r3
10001404:	2390      	movs	r3, #144	; 0x90
10001406:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
10001408:	4a1c      	ldr	r2, [pc, #112]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
1000140a:	687b      	ldr	r3, [r7, #4]
1000140c:	79db      	ldrb	r3, [r3, #7]
1000140e:	b299      	uxth	r1, r3
10001410:	238c      	movs	r3, #140	; 0x8c
10001412:	52d1      	strh	r1, [r2, r3]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
10001414:	687b      	ldr	r3, [r7, #4]
10001416:	79db      	ldrb	r3, [r3, #7]
10001418:	2b00      	cmp	r3, #0
1000141a:	d109      	bne.n	10001430 <XMC_SCU_CLOCK_Init+0xf8>
1000141c:	4b1d      	ldr	r3, [pc, #116]	; (10001494 <XMC_SCU_CLOCK_Init+0x15c>)
1000141e:	60fb      	str	r3, [r7, #12]
10001420:	e000      	b.n	10001424 <XMC_SCU_CLOCK_Init+0xec>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001422:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001424:	68fb      	ldr	r3, [r7, #12]
10001426:	3b01      	subs	r3, #1
10001428:	60fb      	str	r3, [r7, #12]
1000142a:	68fb      	ldr	r3, [r7, #12]
1000142c:	2b00      	cmp	r3, #0
1000142e:	d1f8      	bne.n	10001422 <XMC_SCU_CLOCK_Init+0xea>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
10001430:	4b14      	ldr	r3, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001432:	4a14      	ldr	r2, [pc, #80]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001434:	69d2      	ldr	r2, [r2, #28]
10001436:	4918      	ldr	r1, [pc, #96]	; (10001498 <XMC_SCU_CLOCK_Init+0x160>)
10001438:	400a      	ands	r2, r1
                    config->dclk_src;
1000143a:	6879      	ldr	r1, [r7, #4]
1000143c:	8889      	ldrh	r1, [r1, #4]
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
1000143e:	430a      	orrs	r2, r1
10001440:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001442:	4a10      	ldr	r2, [pc, #64]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001444:	4b0f      	ldr	r3, [pc, #60]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
10001446:	681b      	ldr	r3, [r3, #0]
10001448:	4914      	ldr	r1, [pc, #80]	; (1000149c <XMC_SCU_CLOCK_Init+0x164>)
1000144a:	4019      	ands	r1, r3
                   config->rtc_src |
1000144c:	687b      	ldr	r3, [r7, #4]
1000144e:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001450:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
10001452:	687b      	ldr	r3, [r7, #4]
10001454:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001456:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001458:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
1000145a:	f7ff ff53 	bl	10001304 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000145e:	687b      	ldr	r3, [r7, #4]
10001460:	789b      	ldrb	r3, [r3, #2]
10001462:	1c1a      	adds	r2, r3, #0
10001464:	687b      	ldr	r3, [r7, #4]
10001466:	881b      	ldrh	r3, [r3, #0]
10001468:	1c10      	adds	r0, r2, #0
1000146a:	1c19      	adds	r1, r3, #0
1000146c:	f000 f832 	bl	100014d4 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001470:	46bd      	mov	sp, r7
10001472:	b006      	add	sp, #24
10001474:	bd80      	pop	{r7, pc}
10001476:	46c0      	nop			; (mov r8, r8)
10001478:	01312d00 	.word	0x01312d00
1000147c:	40011000 	.word	0x40011000
10001480:	40010038 	.word	0x40010038
10001484:	40010300 	.word	0x40010300
10001488:	fdffffff 	.word	0xfdffffff
1000148c:	0000021a 	.word	0x0000021a
10001490:	00000a7d 	.word	0x00000a7d
10001494:	00632ea0 	.word	0x00632ea0
10001498:	fffffdff 	.word	0xfffffdff
1000149c:	fff0ffff 	.word	0xfff0ffff

100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100014a0:	b580      	push	{r7, lr}
100014a2:	b082      	sub	sp, #8
100014a4:	af00      	add	r7, sp, #0
100014a6:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
100014a8:	f7ff ff36 	bl	10001318 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
100014ac:	4b08      	ldr	r3, [pc, #32]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014ae:	4a08      	ldr	r2, [pc, #32]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014b0:	6911      	ldr	r1, [r2, #16]
100014b2:	687a      	ldr	r2, [r7, #4]
100014b4:	430a      	orrs	r2, r1
100014b6:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100014b8:	46c0      	nop			; (mov r8, r8)
100014ba:	4b05      	ldr	r3, [pc, #20]	; (100014d0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014bc:	681a      	ldr	r2, [r3, #0]
100014be:	2380      	movs	r3, #128	; 0x80
100014c0:	05db      	lsls	r3, r3, #23
100014c2:	4013      	ands	r3, r2
100014c4:	d1f9      	bne.n	100014ba <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
100014c6:	f7ff ff1d 	bl	10001304 <XMC_SCU_LockProtectedBits>
}
100014ca:	46bd      	mov	sp, r7
100014cc:	b002      	add	sp, #8
100014ce:	bd80      	pop	{r7, pc}
100014d0:	40010300 	.word	0x40010300

100014d4 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
100014d4:	b580      	push	{r7, lr}
100014d6:	b084      	sub	sp, #16
100014d8:	af00      	add	r7, sp, #0
100014da:	6078      	str	r0, [r7, #4]
100014dc:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
100014de:	f7ff ff1b 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100014e2:	4b27      	ldr	r3, [pc, #156]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014e4:	681a      	ldr	r2, [r3, #0]
100014e6:	23ff      	movs	r3, #255	; 0xff
100014e8:	021b      	lsls	r3, r3, #8
100014ea:	4013      	ands	r3, r2
100014ec:	0a1b      	lsrs	r3, r3, #8
100014ee:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
100014f0:	4b23      	ldr	r3, [pc, #140]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014f2:	4a23      	ldr	r2, [pc, #140]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014f4:	69d2      	ldr	r2, [r2, #28]
100014f6:	2103      	movs	r1, #3
100014f8:	438a      	bics	r2, r1
100014fa:	1c11      	adds	r1, r2, #0
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
100014fc:	683a      	ldr	r2, [r7, #0]
100014fe:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001500:	430a      	orrs	r2, r1
10001502:	61da      	str	r2, [r3, #28]
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001504:	4b1e      	ldr	r3, [pc, #120]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001506:	4a1e      	ldr	r2, [pc, #120]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001508:	6812      	ldr	r2, [r2, #0]
1000150a:	491e      	ldr	r1, [pc, #120]	; (10001584 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
1000150c:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
1000150e:	683a      	ldr	r2, [r7, #0]
10001510:	20ff      	movs	r0, #255	; 0xff
10001512:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001514:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10001516:	491c      	ldr	r1, [pc, #112]	; (10001588 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
10001518:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000151a:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000151c:	46c0      	nop			; (mov r8, r8)
1000151e:	4b18      	ldr	r3, [pc, #96]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001520:	681a      	ldr	r2, [r3, #0]
10001522:	2380      	movs	r3, #128	; 0x80
10001524:	05db      	lsls	r3, r3, #23
10001526:	4013      	ands	r3, r2
10001528:	d1f9      	bne.n	1000151e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
1000152a:	68fa      	ldr	r2, [r7, #12]
1000152c:	687b      	ldr	r3, [r7, #4]
1000152e:	429a      	cmp	r2, r3
10001530:	d806      	bhi.n	10001540 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10001532:	68fa      	ldr	r2, [r7, #12]
10001534:	687b      	ldr	r3, [r7, #4]
10001536:	1c10      	adds	r0, r2, #0
10001538:	1c19      	adds	r1, r3, #0
1000153a:	f000 f853 	bl	100015e4 <XMC_SCU_CLOCK_lFrequencyDownScaling>
1000153e:	e005      	b.n	1000154c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
10001540:	68fa      	ldr	r2, [r7, #12]
10001542:	687b      	ldr	r3, [r7, #4]
10001544:	1c10      	adds	r0, r2, #0
10001546:	1c19      	adds	r1, r3, #0
10001548:	f000 f822 	bl	10001590 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000154c:	4b0c      	ldr	r3, [pc, #48]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000154e:	4a0c      	ldr	r2, [pc, #48]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001550:	6812      	ldr	r2, [r2, #0]
10001552:	490e      	ldr	r1, [pc, #56]	; (1000158c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
10001554:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001556:	687a      	ldr	r2, [r7, #4]
10001558:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000155a:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
1000155c:	490a      	ldr	r1, [pc, #40]	; (10001588 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
1000155e:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001560:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001562:	46c0      	nop			; (mov r8, r8)
10001564:	4b06      	ldr	r3, [pc, #24]	; (10001580 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001566:	681a      	ldr	r2, [r3, #0]
10001568:	2380      	movs	r3, #128	; 0x80
1000156a:	05db      	lsls	r3, r3, #23
1000156c:	4013      	ands	r3, r2
1000156e:	d1f9      	bne.n	10001564 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
10001570:	f7ff fec8 	bl	10001304 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10001574:	f7ff fd9c 	bl	100010b0 <SystemCoreClockUpdate>

}
10001578:	46bd      	mov	sp, r7
1000157a:	b004      	add	sp, #16
1000157c:	bd80      	pop	{r7, pc}
1000157e:	46c0      	nop			; (mov r8, r8)
10001580:	40010300 	.word	0x40010300
10001584:	c00fff00 	.word	0xc00fff00
10001588:	3ff00000 	.word	0x3ff00000
1000158c:	c00f00ff 	.word	0xc00f00ff

10001590 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001590:	b580      	push	{r7, lr}
10001592:	b082      	sub	sp, #8
10001594:	af00      	add	r7, sp, #0
10001596:	6078      	str	r0, [r7, #4]
10001598:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
1000159a:	e014      	b.n	100015c6 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
1000159c:	687b      	ldr	r3, [r7, #4]
1000159e:	089b      	lsrs	r3, r3, #2
100015a0:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015a2:	4b0d      	ldr	r3, [pc, #52]	; (100015d8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015a4:	4a0c      	ldr	r2, [pc, #48]	; (100015d8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015a6:	6812      	ldr	r2, [r2, #0]
100015a8:	490c      	ldr	r1, [pc, #48]	; (100015dc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
100015aa:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015ac:	687a      	ldr	r2, [r7, #4]
100015ae:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015b0:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015b2:	490b      	ldr	r1, [pc, #44]	; (100015e0 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
100015b4:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015b6:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015b8:	46c0      	nop			; (mov r8, r8)
100015ba:	4b07      	ldr	r3, [pc, #28]	; (100015d8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015bc:	681a      	ldr	r2, [r3, #0]
100015be:	2380      	movs	r3, #128	; 0x80
100015c0:	05db      	lsls	r3, r3, #23
100015c2:	4013      	ands	r3, r2
100015c4:	d1f9      	bne.n	100015ba <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100015c6:	683b      	ldr	r3, [r7, #0]
100015c8:	009a      	lsls	r2, r3, #2
100015ca:	687b      	ldr	r3, [r7, #4]
100015cc:	429a      	cmp	r2, r3
100015ce:	d3e5      	bcc.n	1000159c <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
100015d0:	46bd      	mov	sp, r7
100015d2:	b002      	add	sp, #8
100015d4:	bd80      	pop	{r7, pc}
100015d6:	46c0      	nop			; (mov r8, r8)
100015d8:	40010300 	.word	0x40010300
100015dc:	c00f00ff 	.word	0xc00f00ff
100015e0:	3ff00000 	.word	0x3ff00000

100015e4 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100015e4:	b580      	push	{r7, lr}
100015e6:	b082      	sub	sp, #8
100015e8:	af00      	add	r7, sp, #0
100015ea:	6078      	str	r0, [r7, #4]
100015ec:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
100015ee:	e019      	b.n	10001624 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
100015f0:	687b      	ldr	r3, [r7, #4]
100015f2:	2b00      	cmp	r3, #0
100015f4:	d101      	bne.n	100015fa <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
100015f6:	2301      	movs	r3, #1
100015f8:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
100015fa:	687b      	ldr	r3, [r7, #4]
100015fc:	009b      	lsls	r3, r3, #2
100015fe:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001600:	4b0c      	ldr	r3, [pc, #48]	; (10001634 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001602:	4a0c      	ldr	r2, [pc, #48]	; (10001634 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001604:	6812      	ldr	r2, [r2, #0]
10001606:	490c      	ldr	r1, [pc, #48]	; (10001638 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
10001608:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000160a:	687a      	ldr	r2, [r7, #4]
1000160c:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000160e:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001610:	490a      	ldr	r1, [pc, #40]	; (1000163c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10001612:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001614:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001616:	46c0      	nop			; (mov r8, r8)
10001618:	4b06      	ldr	r3, [pc, #24]	; (10001634 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000161a:	681a      	ldr	r2, [r3, #0]
1000161c:	2380      	movs	r3, #128	; 0x80
1000161e:	05db      	lsls	r3, r3, #23
10001620:	4013      	ands	r3, r2
10001622:	d1f9      	bne.n	10001618 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001624:	687b      	ldr	r3, [r7, #4]
10001626:	009a      	lsls	r2, r3, #2
10001628:	683b      	ldr	r3, [r7, #0]
1000162a:	429a      	cmp	r2, r3
1000162c:	d3e0      	bcc.n	100015f0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
1000162e:	46bd      	mov	sp, r7
10001630:	b002      	add	sp, #8
10001632:	bd80      	pop	{r7, pc}
10001634:	40010300 	.word	0x40010300
10001638:	c00f00ff 	.word	0xc00f00ff
1000163c:	3ff00000 	.word	0x3ff00000

10001640 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
10001640:	b580      	push	{r7, lr}
10001642:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10001644:	4b02      	ldr	r3, [pc, #8]	; (10001650 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
10001646:	681b      	ldr	r3, [r3, #0]
}
10001648:	1c18      	adds	r0, r3, #0
1000164a:	46bd      	mov	sp, r7
1000164c:	bd80      	pop	{r7, pc}
1000164e:	46c0      	nop			; (mov r8, r8)
10001650:	20003ffc 	.word	0x20003ffc

10001654 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
10001654:	b580      	push	{r7, lr}
10001656:	b082      	sub	sp, #8
10001658:	af00      	add	r7, sp, #0
1000165a:	1c02      	adds	r2, r0, #0
1000165c:	1dfb      	adds	r3, r7, #7
1000165e:	701a      	strb	r2, [r3, #0]
10001660:	1d3b      	adds	r3, r7, #4
10001662:	1c0a      	adds	r2, r1, #0
10001664:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
10001666:	1d3b      	adds	r3, r7, #4
10001668:	1d3a      	adds	r2, r7, #4
1000166a:	8812      	ldrh	r2, [r2, #0]
1000166c:	2103      	movs	r1, #3
1000166e:	400a      	ands	r2, r1
10001670:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10001672:	1dfb      	adds	r3, r7, #7
10001674:	781b      	ldrb	r3, [r3, #0]
10001676:	2b0f      	cmp	r3, #15
10001678:	d813      	bhi.n	100016a2 <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000167a:	4b18      	ldr	r3, [pc, #96]	; (100016dc <XMC_SCU_SetInterruptControl+0x88>)
1000167c:	4a17      	ldr	r2, [pc, #92]	; (100016dc <XMC_SCU_SetInterruptControl+0x88>)
1000167e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
10001680:	1df9      	adds	r1, r7, #7
10001682:	7809      	ldrb	r1, [r1, #0]
10001684:	0049      	lsls	r1, r1, #1
10001686:	1c08      	adds	r0, r1, #0
10001688:	2103      	movs	r1, #3
1000168a:	4081      	lsls	r1, r0
1000168c:	43c9      	mvns	r1, r1
1000168e:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
10001690:	1d39      	adds	r1, r7, #4
10001692:	8809      	ldrh	r1, [r1, #0]
10001694:	1df8      	adds	r0, r7, #7
10001696:	7800      	ldrb	r0, [r0, #0]
10001698:	0040      	lsls	r0, r0, #1
1000169a:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000169c:	430a      	orrs	r2, r1
1000169e:	66da      	str	r2, [r3, #108]	; 0x6c
100016a0:	e018      	b.n	100016d4 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
100016a2:	1dfb      	adds	r3, r7, #7
100016a4:	1dfa      	adds	r2, r7, #7
100016a6:	7812      	ldrb	r2, [r2, #0]
100016a8:	210f      	movs	r1, #15
100016aa:	400a      	ands	r2, r1
100016ac:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016ae:	4b0b      	ldr	r3, [pc, #44]	; (100016dc <XMC_SCU_SetInterruptControl+0x88>)
100016b0:	4a0a      	ldr	r2, [pc, #40]	; (100016dc <XMC_SCU_SetInterruptControl+0x88>)
100016b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
100016b4:	1df9      	adds	r1, r7, #7
100016b6:	7809      	ldrb	r1, [r1, #0]
100016b8:	0049      	lsls	r1, r1, #1
100016ba:	1c08      	adds	r0, r1, #0
100016bc:	2103      	movs	r1, #3
100016be:	4081      	lsls	r1, r0
100016c0:	43c9      	mvns	r1, r1
100016c2:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
100016c4:	1d39      	adds	r1, r7, #4
100016c6:	8809      	ldrh	r1, [r1, #0]
100016c8:	1df8      	adds	r0, r7, #7
100016ca:	7800      	ldrb	r0, [r0, #0]
100016cc:	0040      	lsls	r0, r0, #1
100016ce:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016d0:	430a      	orrs	r2, r1
100016d2:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
100016d4:	46bd      	mov	sp, r7
100016d6:	b002      	add	sp, #8
100016d8:	bd80      	pop	{r7, pc}
100016da:	46c0      	nop			; (mov r8, r8)
100016dc:	40010000 	.word	0x40010000

100016e0 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
100016e0:	b580      	push	{r7, lr}
100016e2:	b082      	sub	sp, #8
100016e4:	af00      	add	r7, sp, #0
100016e6:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
100016e8:	687a      	ldr	r2, [r7, #4]
100016ea:	23e2      	movs	r3, #226	; 0xe2
100016ec:	005b      	lsls	r3, r3, #1
100016ee:	58d2      	ldr	r2, [r2, r3]
100016f0:	23c0      	movs	r3, #192	; 0xc0
100016f2:	009b      	lsls	r3, r3, #2
100016f4:	4013      	ands	r3, r2
100016f6:	425a      	negs	r2, r3
100016f8:	4153      	adcs	r3, r2
100016fa:	b2db      	uxtb	r3, r3
}
100016fc:	1c18      	adds	r0, r3, #0
100016fe:	46bd      	mov	sp, r7
10001700:	b002      	add	sp, #8
10001702:	bd80      	pop	{r7, pc}

10001704 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
10001704:	b590      	push	{r4, r7, lr}
10001706:	b083      	sub	sp, #12
10001708:	af00      	add	r7, sp, #0
1000170a:	6078      	str	r0, [r7, #4]
1000170c:	1c0c      	adds	r4, r1, #0
1000170e:	1c10      	adds	r0, r2, #0
10001710:	1c19      	adds	r1, r3, #0
10001712:	1cfb      	adds	r3, r7, #3
10001714:	1c22      	adds	r2, r4, #0
10001716:	701a      	strb	r2, [r3, #0]
10001718:	1cbb      	adds	r3, r7, #2
1000171a:	1c02      	adds	r2, r0, #0
1000171c:	701a      	strb	r2, [r3, #0]
1000171e:	1c7b      	adds	r3, r7, #1
10001720:	1c0a      	adds	r2, r1, #0
10001722:	701a      	strb	r2, [r3, #0]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001724:	1cfb      	adds	r3, r7, #3
10001726:	781a      	ldrb	r2, [r3, #0]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10001728:	1cbb      	adds	r3, r7, #2
1000172a:	781b      	ldrb	r3, [r3, #0]
1000172c:	0419      	lsls	r1, r3, #16
1000172e:	23ff      	movs	r3, #255	; 0xff
10001730:	041b      	lsls	r3, r3, #16
10001732:	400b      	ands	r3, r1
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001734:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
10001736:	1c7b      	adds	r3, r7, #1
10001738:	781b      	ldrb	r3, [r3, #0]
1000173a:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
1000173c:	431a      	orrs	r2, r3
1000173e:	1c11      	adds	r1, r2, #0
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001740:	687a      	ldr	r2, [r7, #4]
10001742:	23e2      	movs	r3, #226	; 0xe2
10001744:	005b      	lsls	r3, r3, #1
10001746:	50d1      	str	r1, [r2, r3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
10001748:	46bd      	mov	sp, r7
1000174a:	b003      	add	sp, #12
1000174c:	bd90      	pop	{r4, r7, pc}
1000174e:	46c0      	nop			; (mov r8, r8)

10001750 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10001750:	b580      	push	{r7, lr}
10001752:	b082      	sub	sp, #8
10001754:	af00      	add	r7, sp, #0
10001756:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
10001758:	687b      	ldr	r3, [r7, #4]
1000175a:	681b      	ldr	r3, [r3, #0]
1000175c:	2240      	movs	r2, #64	; 0x40
1000175e:	431a      	orrs	r2, r3
10001760:	687b      	ldr	r3, [r7, #4]
10001762:	601a      	str	r2, [r3, #0]
}
10001764:	46bd      	mov	sp, r7
10001766:	b002      	add	sp, #8
10001768:	bd80      	pop	{r7, pc}
1000176a:	46c0      	nop			; (mov r8, r8)

1000176c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
1000176c:	b580      	push	{r7, lr}
1000176e:	b082      	sub	sp, #8
10001770:	af00      	add	r7, sp, #0
10001772:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10001774:	687b      	ldr	r3, [r7, #4]
10001776:	681b      	ldr	r3, [r3, #0]
10001778:	2240      	movs	r2, #64	; 0x40
1000177a:	4393      	bics	r3, r2
1000177c:	1c1a      	adds	r2, r3, #0
1000177e:	687b      	ldr	r3, [r7, #4]
10001780:	601a      	str	r2, [r3, #0]
}
10001782:	46bd      	mov	sp, r7
10001784:	b002      	add	sp, #8
10001786:	bd80      	pop	{r7, pc}

10001788 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
10001788:	b580      	push	{r7, lr}
1000178a:	b082      	sub	sp, #8
1000178c:	af00      	add	r7, sp, #0
1000178e:	6078      	str	r0, [r7, #4]
10001790:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
10001792:	687a      	ldr	r2, [r7, #4]
10001794:	683b      	ldr	r3, [r7, #0]
10001796:	4293      	cmp	r3, r2
10001798:	d200      	bcs.n	1000179c <max+0x14>
1000179a:	1c13      	adds	r3, r2, #0
}
1000179c:	1c18      	adds	r0, r3, #0
1000179e:	46bd      	mov	sp, r7
100017a0:	b002      	add	sp, #8
100017a2:	bd80      	pop	{r7, pc}

100017a4 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
100017a4:	b580      	push	{r7, lr}
100017a6:	b082      	sub	sp, #8
100017a8:	af00      	add	r7, sp, #0
100017aa:	6078      	str	r0, [r7, #4]
100017ac:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
100017ae:	687a      	ldr	r2, [r7, #4]
100017b0:	683b      	ldr	r3, [r7, #0]
100017b2:	4293      	cmp	r3, r2
100017b4:	d900      	bls.n	100017b8 <min+0x14>
100017b6:	1c13      	adds	r3, r2, #0
}
100017b8:	1c18      	adds	r0, r3, #0
100017ba:	46bd      	mov	sp, r7
100017bc:	b002      	add	sp, #8
100017be:	bd80      	pop	{r7, pc}

100017c0 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
100017c0:	b580      	push	{r7, lr}
100017c2:	b088      	sub	sp, #32
100017c4:	af00      	add	r7, sp, #0
100017c6:	6078      	str	r0, [r7, #4]
100017c8:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
100017ca:	683b      	ldr	r3, [r7, #0]
100017cc:	681a      	ldr	r2, [r3, #0]
100017ce:	683b      	ldr	r3, [r7, #0]
100017d0:	685b      	ldr	r3, [r3, #4]
100017d2:	1c10      	adds	r0, r2, #0
100017d4:	1c19      	adds	r1, r3, #0
100017d6:	f000 fca9 	bl	1000212c <__aeabi_uidivmod>
100017da:	1e0b      	subs	r3, r1, #0
100017dc:	d000      	beq.n	100017e0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x20>
100017de:	e096      	b.n	1000190e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14e>
  {
    uint32_t prescaler = 0;
100017e0:	2300      	movs	r3, #0
100017e2:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
100017e4:	2300      	movs	r3, #0
100017e6:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
100017e8:	683b      	ldr	r3, [r7, #0]
100017ea:	681a      	ldr	r2, [r3, #0]
100017ec:	683b      	ldr	r3, [r7, #0]
100017ee:	685b      	ldr	r3, [r3, #4]
100017f0:	1c10      	adds	r0, r2, #0
100017f2:	1c19      	adds	r1, r3, #0
100017f4:	f000 fc72 	bl	100020dc <__aeabi_uidiv>
100017f8:	1c03      	adds	r3, r0, #0
100017fa:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
100017fc:	2319      	movs	r3, #25
100017fe:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
10001800:	2300      	movs	r3, #0
10001802:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
10001804:	2300      	movs	r3, #0
10001806:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
10001808:	e049      	b.n	1000189e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
1000180a:	68bb      	ldr	r3, [r7, #8]
1000180c:	1c18      	adds	r0, r3, #0
1000180e:	6979      	ldr	r1, [r7, #20]
10001810:	f000 fc8c 	bl	1000212c <__aeabi_uidivmod>
10001814:	1e0b      	subs	r3, r1, #0
10001816:	d13f      	bne.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
10001818:	2300      	movs	r3, #0
1000181a:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
1000181c:	68b8      	ldr	r0, [r7, #8]
1000181e:	6979      	ldr	r1, [r7, #20]
10001820:	f000 fc5c 	bl	100020dc <__aeabi_uidiv>
10001824:	1c03      	adds	r3, r0, #0
10001826:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
10001828:	69fb      	ldr	r3, [r7, #28]
1000182a:	2b00      	cmp	r3, #0
1000182c:	d034      	beq.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
1000182e:	69fa      	ldr	r2, [r7, #28]
10001830:	2380      	movs	r3, #128	; 0x80
10001832:	009b      	lsls	r3, r3, #2
10001834:	429a      	cmp	r2, r3
10001836:	d82f      	bhi.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
10001838:	69fb      	ldr	r3, [r7, #28]
1000183a:	2b3f      	cmp	r3, #63	; 0x3f
1000183c:	d909      	bls.n	10001852 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
1000183e:	69fb      	ldr	r3, [r7, #28]
10001840:	2207      	movs	r2, #7
10001842:	4013      	ands	r3, r2
10001844:	d003      	beq.n	1000184e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
10001846:	697b      	ldr	r3, [r7, #20]
10001848:	3b01      	subs	r3, #1
1000184a:	617b      	str	r3, [r7, #20]
              continue;
1000184c:	e027      	b.n	1000189e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
1000184e:	2301      	movs	r3, #1
10001850:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
10001852:	697b      	ldr	r3, [r7, #20]
10001854:	3b01      	subs	r3, #1
10001856:	683a      	ldr	r2, [r7, #0]
10001858:	8912      	ldrh	r2, [r2, #8]
1000185a:	4353      	muls	r3, r2
1000185c:	1c18      	adds	r0, r3, #0
1000185e:	492e      	ldr	r1, [pc, #184]	; (10001918 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x158>)
10001860:	f000 fc3c 	bl	100020dc <__aeabi_uidiv>
10001864:	1c03      	adds	r3, r0, #0
10001866:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
10001868:	697a      	ldr	r2, [r7, #20]
1000186a:	693b      	ldr	r3, [r7, #16]
1000186c:	1ad3      	subs	r3, r2, r3
1000186e:	3b01      	subs	r3, #1
10001870:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
10001872:	693b      	ldr	r3, [r7, #16]
10001874:	2b02      	cmp	r3, #2
10001876:	d90f      	bls.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001878:	693b      	ldr	r3, [r7, #16]
1000187a:	2b0f      	cmp	r3, #15
1000187c:	d80c      	bhi.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
1000187e:	68fb      	ldr	r3, [r7, #12]
10001880:	2b01      	cmp	r3, #1
10001882:	d909      	bls.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
10001884:	68fb      	ldr	r3, [r7, #12]
10001886:	2b06      	cmp	r3, #6
10001888:	d806      	bhi.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
1000188a:	683b      	ldr	r3, [r7, #0]
1000188c:	895b      	ldrh	r3, [r3, #10]
1000188e:	1e1a      	subs	r2, r3, #0
10001890:	68fb      	ldr	r3, [r7, #12]
10001892:	429a      	cmp	r2, r3
10001894:	d800      	bhi.n	10001898 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
10001896:	e005      	b.n	100018a4 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
10001898:	697b      	ldr	r3, [r7, #20]
1000189a:	3b01      	subs	r3, #1
1000189c:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
1000189e:	697b      	ldr	r3, [r7, #20]
100018a0:	2b07      	cmp	r3, #7
100018a2:	d8b2      	bhi.n	1000180a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x4a>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
100018a4:	697b      	ldr	r3, [r7, #20]
100018a6:	2b07      	cmp	r3, #7
100018a8:	d931      	bls.n	1000190e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14e>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
100018aa:	687b      	ldr	r3, [r7, #4]
100018ac:	1c18      	adds	r0, r3, #0
100018ae:	f7ff ff4f 	bl	10001750 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
100018b2:	68fb      	ldr	r3, [r7, #12]
100018b4:	3b01      	subs	r3, #1
100018b6:	031a      	lsls	r2, r3, #12
100018b8:	23e0      	movs	r3, #224	; 0xe0
100018ba:	01db      	lsls	r3, r3, #7
100018bc:	401a      	ands	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
100018be:	683b      	ldr	r3, [r7, #0]
100018c0:	895b      	ldrh	r3, [r3, #10]
100018c2:	3b01      	subs	r3, #1
100018c4:	019b      	lsls	r3, r3, #6
100018c6:	21ff      	movs	r1, #255	; 0xff
100018c8:	400b      	ands	r3, r1
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
100018ca:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
100018cc:	693b      	ldr	r3, [r7, #16]
100018ce:	3b01      	subs	r3, #1
100018d0:	0219      	lsls	r1, r3, #8
100018d2:	23f0      	movs	r3, #240	; 0xf0
100018d4:	011b      	lsls	r3, r3, #4
100018d6:	400b      	ands	r3, r1

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
100018d8:	431a      	orrs	r2, r3
100018da:	1c11      	adds	r1, r2, #0
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
100018dc:	69ba      	ldr	r2, [r7, #24]
100018de:	1c13      	adds	r3, r2, #0
100018e0:	005b      	lsls	r3, r3, #1
100018e2:	189b      	adds	r3, r3, r2
100018e4:	1c1a      	adds	r2, r3, #0
100018e6:	69fb      	ldr	r3, [r7, #28]
100018e8:	40d3      	lsrs	r3, r2
100018ea:	3b01      	subs	r3, #1
100018ec:	223f      	movs	r2, #63	; 0x3f
100018ee:	4013      	ands	r3, r2
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
100018f0:	1c0a      	adds	r2, r1, #0
100018f2:	431a      	orrs	r2, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
100018f4:	69bb      	ldr	r3, [r7, #24]
100018f6:	03db      	lsls	r3, r3, #15
100018f8:	041b      	lsls	r3, r3, #16
100018fa:	0c1b      	lsrs	r3, r3, #16

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
100018fc:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
100018fe:	687b      	ldr	r3, [r7, #4]
10001900:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
10001902:	687b      	ldr	r3, [r7, #4]
10001904:	1c18      	adds	r0, r3, #0
10001906:	f7ff ff31 	bl	1000176c <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
1000190a:	2300      	movs	r3, #0
1000190c:	e000      	b.n	10001910 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x150>
    }
  }

  return XMC_CAN_STATUS_ERROR;
1000190e:	2301      	movs	r3, #1
}
10001910:	1c18      	adds	r0, r3, #0
10001912:	46bd      	mov	sp, r7
10001914:	b008      	add	sp, #32
10001916:	bd80      	pop	{r7, pc}
10001918:	00002710 	.word	0x00002710

1000191c <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
1000191c:	b590      	push	{r4, r7, lr}
1000191e:	b083      	sub	sp, #12
10001920:	af00      	add	r7, sp, #0
10001922:	6078      	str	r0, [r7, #4]
10001924:	1c08      	adds	r0, r1, #0
10001926:	1c11      	adds	r1, r2, #0
10001928:	1cfb      	adds	r3, r7, #3
1000192a:	1c02      	adds	r2, r0, #0
1000192c:	701a      	strb	r2, [r3, #0]
1000192e:	1cbb      	adds	r3, r7, #2
10001930:	1c0a      	adds	r2, r1, #0
10001932:	701a      	strb	r2, [r3, #0]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
10001934:	46c0      	nop			; (mov r8, r8)
10001936:	687b      	ldr	r3, [r7, #4]
10001938:	1c18      	adds	r0, r3, #0
1000193a:	f7ff fed1 	bl	100016e0 <XMC_CAN_IsPanelControlReady>
1000193e:	1c03      	adds	r3, r0, #0
10001940:	1c1a      	adds	r2, r3, #0
10001942:	2301      	movs	r3, #1
10001944:	4053      	eors	r3, r2
10001946:	b2db      	uxtb	r3, r3
10001948:	2b00      	cmp	r3, #0
1000194a:	d1f4      	bne.n	10001936 <XMC_CAN_AllocateMOtoNodeList+0x1a>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
1000194c:	1cfb      	adds	r3, r7, #3
1000194e:	781b      	ldrb	r3, [r3, #0]
10001950:	3301      	adds	r3, #1
10001952:	b2dc      	uxtb	r4, r3
10001954:	687a      	ldr	r2, [r7, #4]
10001956:	1cbb      	adds	r3, r7, #2
10001958:	781b      	ldrb	r3, [r3, #0]
1000195a:	1c10      	adds	r0, r2, #0
1000195c:	2102      	movs	r1, #2
1000195e:	1c1a      	adds	r2, r3, #0
10001960:	1c23      	adds	r3, r4, #0
10001962:	f7ff fecf 	bl	10001704 <XMC_CAN_PanelControl>
}
10001966:	46bd      	mov	sp, r7
10001968:	b003      	add	sp, #12
1000196a:	bd90      	pop	{r4, r7, pc}

1000196c <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
1000196c:	b580      	push	{r7, lr}
1000196e:	b082      	sub	sp, #8
10001970:	af00      	add	r7, sp, #0
10001972:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
10001974:	2380      	movs	r3, #128	; 0x80
10001976:	039b      	lsls	r3, r3, #14
10001978:	1c18      	adds	r0, r3, #0
1000197a:	f7ff fd91 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
1000197e:	687b      	ldr	r3, [r7, #4]
10001980:	681b      	ldr	r3, [r3, #0]
10001982:	2201      	movs	r2, #1
10001984:	4393      	bics	r3, r2
10001986:	1c1a      	adds	r2, r3, #0
10001988:	687b      	ldr	r3, [r7, #4]
1000198a:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
1000198c:	46c0      	nop			; (mov r8, r8)
1000198e:	687b      	ldr	r3, [r7, #4]
10001990:	681b      	ldr	r3, [r3, #0]
10001992:	2202      	movs	r2, #2
10001994:	4013      	ands	r3, r2
10001996:	d1fa      	bne.n	1000198e <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
10001998:	46bd      	mov	sp, r7
1000199a:	b002      	add	sp, #8
1000199c:	bd80      	pop	{r7, pc}
1000199e:	46c0      	nop			; (mov r8, r8)

100019a0 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
100019a0:	b580      	push	{r7, lr}
100019a2:	b082      	sub	sp, #8
100019a4:	af00      	add	r7, sp, #0
100019a6:	6078      	str	r0, [r7, #4]
100019a8:	1c0a      	adds	r2, r1, #0
100019aa:	1cfb      	adds	r3, r7, #3
100019ac:	701a      	strb	r2, [r3, #0]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
100019ae:	687a      	ldr	r2, [r7, #4]
100019b0:	23e4      	movs	r3, #228	; 0xe4
100019b2:	005b      	lsls	r3, r3, #1
100019b4:	58d3      	ldr	r3, [r2, r3]
100019b6:	220f      	movs	r2, #15
100019b8:	4393      	bics	r3, r2
100019ba:	1c1a      	adds	r2, r3, #0
100019bc:	1cfb      	adds	r3, r7, #3
100019be:	781b      	ldrb	r3, [r3, #0]
100019c0:	431a      	orrs	r2, r3
100019c2:	1c11      	adds	r1, r2, #0
100019c4:	687a      	ldr	r2, [r7, #4]
100019c6:	23e4      	movs	r3, #228	; 0xe4
100019c8:	005b      	lsls	r3, r3, #1
100019ca:	50d1      	str	r1, [r2, r3]
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
100019cc:	46bd      	mov	sp, r7
100019ce:	b002      	add	sp, #8
100019d0:	bd80      	pop	{r7, pc}
100019d2:	46c0      	nop			; (mov r8, r8)

100019d4 <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
100019d4:	b580      	push	{r7, lr}
100019d6:	b082      	sub	sp, #8
100019d8:	af00      	add	r7, sp, #0
100019da:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
100019dc:	687a      	ldr	r2, [r7, #4]
100019de:	23e4      	movs	r3, #228	; 0xe4
100019e0:	005b      	lsls	r3, r3, #1
100019e2:	58d3      	ldr	r3, [r2, r3]
100019e4:	b2db      	uxtb	r3, r3
100019e6:	220f      	movs	r2, #15
100019e8:	4013      	ands	r3, r2
100019ea:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
100019ec:	1c18      	adds	r0, r3, #0
100019ee:	46bd      	mov	sp, r7
100019f0:	b002      	add	sp, #8
100019f2:	bd80      	pop	{r7, pc}

100019f4 <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
100019f4:	b580      	push	{r7, lr}
100019f6:	b084      	sub	sp, #16
100019f8:	af00      	add	r7, sp, #0
100019fa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
100019fc:	2300      	movs	r3, #0
100019fe:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
10001a00:	687b      	ldr	r3, [r7, #4]
10001a02:	1c18      	adds	r0, r3, #0
10001a04:	f7ff ffe6 	bl	100019d4 <XMC_CAN_GetBaudrateClockSource>
10001a08:	1e03      	subs	r3, r0, #0
10001a0a:	2b01      	cmp	r3, #1
10001a0c:	d002      	beq.n	10001a14 <XMC_CAN_GetBaudrateClockFrequency+0x20>
10001a0e:	2b02      	cmp	r3, #2
10001a10:	d005      	beq.n	10001a1e <XMC_CAN_GetBaudrateClockFrequency+0x2a>
10001a12:	e009      	b.n	10001a28 <XMC_CAN_GetBaudrateClockFrequency+0x34>
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#else
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10001a14:	f7ff fe14 	bl	10001640 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10001a18:	1c03      	adds	r3, r0, #0
10001a1a:	60fb      	str	r3, [r7, #12]
      break;
10001a1c:	e004      	b.n	10001a28 <XMC_CAN_GetBaudrateClockFrequency+0x34>
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
10001a1e:	f7ff fbab 	bl	10001178 <OSCHP_GetFrequency>
10001a22:	1c03      	adds	r3, r0, #0
10001a24:	60fb      	str	r3, [r7, #12]
      break;
10001a26:	46c0      	nop			; (mov r8, r8)
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
10001a28:	68fb      	ldr	r3, [r7, #12]
}
10001a2a:	1c18      	adds	r0, r3, #0
10001a2c:	46bd      	mov	sp, r7
10001a2e:	b004      	add	sp, #16
10001a30:	bd80      	pop	{r7, pc}
10001a32:	46c0      	nop			; (mov r8, r8)

10001a34 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
10001a34:	b580      	push	{r7, lr}
10001a36:	b088      	sub	sp, #32
10001a38:	af00      	add	r7, sp, #0
10001a3a:	60f8      	str	r0, [r7, #12]
10001a3c:	607a      	str	r2, [r7, #4]
10001a3e:	230b      	movs	r3, #11
10001a40:	18fb      	adds	r3, r7, r3
10001a42:	1c0a      	adds	r2, r1, #0
10001a44:	701a      	strb	r2, [r3, #0]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
10001a46:	68fb      	ldr	r3, [r7, #12]
10001a48:	1c18      	adds	r0, r3, #0
10001a4a:	f7ff ff8f 	bl	1000196c <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
10001a4e:	68fa      	ldr	r2, [r7, #12]
10001a50:	230b      	movs	r3, #11
10001a52:	18fb      	adds	r3, r7, r3
10001a54:	781b      	ldrb	r3, [r3, #0]
10001a56:	1c10      	adds	r0, r2, #0
10001a58:	1c19      	adds	r1, r3, #0
10001a5a:	f7ff ffa1 	bl	100019a0 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
10001a5e:	68fb      	ldr	r3, [r7, #12]
10001a60:	1c18      	adds	r0, r3, #0
10001a62:	f7ff ffc7 	bl	100019f4 <XMC_CAN_GetBaudrateClockFrequency>
10001a66:	1c03      	adds	r3, r0, #0
10001a68:	61fb      	str	r3, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
10001a6a:	69f8      	ldr	r0, [r7, #28]
10001a6c:	6879      	ldr	r1, [r7, #4]
10001a6e:	f000 fb35 	bl	100020dc <__aeabi_uidiv>
10001a72:	1c03      	adds	r3, r0, #0
10001a74:	1c1a      	adds	r2, r3, #0
10001a76:	2380      	movs	r3, #128	; 0x80
10001a78:	00db      	lsls	r3, r3, #3
10001a7a:	1a9b      	subs	r3, r3, r2
10001a7c:	2000      	movs	r0, #0
10001a7e:	1c19      	adds	r1, r3, #0
10001a80:	f7ff fe82 	bl	10001788 <max>
10001a84:	1c02      	adds	r2, r0, #0
10001a86:	4b12      	ldr	r3, [pc, #72]	; (10001ad0 <XMC_CAN_InitEx+0x9c>)
10001a88:	1c10      	adds	r0, r2, #0
10001a8a:	1c19      	adds	r1, r3, #0
10001a8c:	f7ff fe8a 	bl	100017a4 <min>
10001a90:	1c03      	adds	r3, r0, #0
10001a92:	61bb      	str	r3, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
10001a94:	69bb      	ldr	r3, [r7, #24]
10001a96:	2280      	movs	r2, #128	; 0x80
10001a98:	00d2      	lsls	r2, r2, #3
10001a9a:	1ad3      	subs	r3, r2, r3
10001a9c:	69f8      	ldr	r0, [r7, #28]
10001a9e:	1c19      	adds	r1, r3, #0
10001aa0:	f000 fb1c 	bl	100020dc <__aeabi_uidiv>
10001aa4:	1c03      	adds	r3, r0, #0
10001aa6:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
10001aa8:	68fb      	ldr	r3, [r7, #12]
10001aaa:	68db      	ldr	r3, [r3, #12]
10001aac:	4a09      	ldr	r2, [pc, #36]	; (10001ad4 <XMC_CAN_InitEx+0xa0>)
10001aae:	401a      	ands	r2, r3
10001ab0:	68fb      	ldr	r3, [r7, #12]
10001ab2:	60da      	str	r2, [r3, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
10001ab4:	68fb      	ldr	r3, [r7, #12]
10001ab6:	68da      	ldr	r2, [r3, #12]
10001ab8:	69bb      	ldr	r3, [r7, #24]
10001aba:	4313      	orrs	r3, r2
10001abc:	2280      	movs	r2, #128	; 0x80
10001abe:	01d2      	lsls	r2, r2, #7
10001ac0:	431a      	orrs	r2, r3
10001ac2:	68fb      	ldr	r3, [r7, #12]
10001ac4:	60da      	str	r2, [r3, #12]

  return freq_n;
10001ac6:	697b      	ldr	r3, [r7, #20]
}
10001ac8:	1c18      	adds	r0, r3, #0
10001aca:	46bd      	mov	sp, r7
10001acc:	b008      	add	sp, #32
10001ace:	bd80      	pop	{r7, pc}
10001ad0:	000003ff 	.word	0x000003ff
10001ad4:	ffff3c00 	.word	0xffff3c00

10001ad8 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
10001ad8:	b580      	push	{r7, lr}
10001ada:	b086      	sub	sp, #24
10001adc:	af00      	add	r7, sp, #0
10001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
10001ae0:	687b      	ldr	r3, [r7, #4]
10001ae2:	681b      	ldr	r3, [r3, #0]
10001ae4:	4a48      	ldr	r2, [pc, #288]	; (10001c08 <XMC_CAN_MO_Config+0x130>)
10001ae6:	4694      	mov	ip, r2
10001ae8:	4463      	add	r3, ip
10001aea:	095b      	lsrs	r3, r3, #5
10001aec:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
10001aee:	697b      	ldr	r3, [r7, #20]
10001af0:	095b      	lsrs	r3, r3, #5
10001af2:	035a      	lsls	r2, r3, #13
10001af4:	697b      	ldr	r3, [r7, #20]
10001af6:	211f      	movs	r1, #31
10001af8:	400b      	ands	r3, r1
10001afa:	021b      	lsls	r3, r3, #8
10001afc:	4313      	orrs	r3, r2
10001afe:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
10001b00:	687b      	ldr	r3, [r7, #4]
10001b02:	681b      	ldr	r3, [r3, #0]
10001b04:	687a      	ldr	r2, [r7, #4]
10001b06:	6812      	ldr	r2, [r2, #0]
10001b08:	6892      	ldr	r2, [r2, #8]
10001b0a:	4940      	ldr	r1, [pc, #256]	; (10001c0c <XMC_CAN_MO_Config+0x134>)
10001b0c:	400a      	ands	r2, r1
10001b0e:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
10001b10:	687b      	ldr	r3, [r7, #4]
10001b12:	681b      	ldr	r3, [r3, #0]
10001b14:	687a      	ldr	r2, [r7, #4]
10001b16:	6812      	ldr	r2, [r2, #0]
10001b18:	6891      	ldr	r1, [r2, #8]
10001b1a:	693a      	ldr	r2, [r7, #16]
10001b1c:	430a      	orrs	r2, r1
10001b1e:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10001b20:	687b      	ldr	r3, [r7, #4]
10001b22:	79db      	ldrb	r3, [r3, #7]
10001b24:	2220      	movs	r2, #32
10001b26:	4013      	ands	r3, r2
10001b28:	b2db      	uxtb	r3, r3
10001b2a:	2b00      	cmp	r3, #0
10001b2c:	d007      	beq.n	10001b3e <XMC_CAN_MO_Config+0x66>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10001b2e:	687b      	ldr	r3, [r7, #4]
10001b30:	79db      	ldrb	r3, [r3, #7]
10001b32:	2220      	movs	r2, #32
10001b34:	4013      	ands	r3, r2
10001b36:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10001b38:	2b00      	cmp	r3, #0
10001b3a:	d100      	bne.n	10001b3e <XMC_CAN_MO_Config+0x66>
10001b3c:	e061      	b.n	10001c02 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10001b3e:	687b      	ldr	r3, [r7, #4]
10001b40:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10001b42:	2b00      	cmp	r3, #0
10001b44:	d004      	beq.n	10001b50 <XMC_CAN_MO_Config+0x78>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
10001b46:	687b      	ldr	r3, [r7, #4]
10001b48:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10001b4a:	2b01      	cmp	r3, #1
10001b4c:	d000      	beq.n	10001b50 <XMC_CAN_MO_Config+0x78>
10001b4e:	e058      	b.n	10001c02 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001b50:	687b      	ldr	r3, [r7, #4]
10001b52:	681b      	ldr	r3, [r3, #0]
10001b54:	2220      	movs	r2, #32
10001b56:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
10001b58:	687b      	ldr	r3, [r7, #4]
10001b5a:	79db      	ldrb	r3, [r3, #7]
10001b5c:	2220      	movs	r2, #32
10001b5e:	4013      	ands	r3, r2
10001b60:	b2db      	uxtb	r3, r3
10001b62:	2b00      	cmp	r3, #0
10001b64:	d128      	bne.n	10001bb8 <XMC_CAN_MO_Config+0xe0>
    {
      reg = can_mo->mo_ar;
10001b66:	687b      	ldr	r3, [r7, #4]
10001b68:	685b      	ldr	r3, [r3, #4]
10001b6a:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
10001b6c:	68fb      	ldr	r3, [r7, #12]
10001b6e:	0f5b      	lsrs	r3, r3, #29
10001b70:	075b      	lsls	r3, r3, #29
10001b72:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
10001b74:	687b      	ldr	r3, [r7, #4]
10001b76:	685b      	ldr	r3, [r3, #4]
10001b78:	00db      	lsls	r3, r3, #3
10001b7a:	08db      	lsrs	r3, r3, #3
10001b7c:	049b      	lsls	r3, r3, #18
10001b7e:	1c1a      	adds	r2, r3, #0
10001b80:	68fb      	ldr	r3, [r7, #12]
10001b82:	4313      	orrs	r3, r2
10001b84:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
10001b86:	687b      	ldr	r3, [r7, #4]
10001b88:	681b      	ldr	r3, [r3, #0]
10001b8a:	68fa      	ldr	r2, [r7, #12]
10001b8c:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
10001b8e:	687b      	ldr	r3, [r7, #4]
10001b90:	689b      	ldr	r3, [r3, #8]
10001b92:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
10001b94:	68fb      	ldr	r3, [r7, #12]
10001b96:	0f5b      	lsrs	r3, r3, #29
10001b98:	075b      	lsls	r3, r3, #29
10001b9a:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
10001b9c:	687b      	ldr	r3, [r7, #4]
10001b9e:	689b      	ldr	r3, [r3, #8]
10001ba0:	00db      	lsls	r3, r3, #3
10001ba2:	08db      	lsrs	r3, r3, #3
10001ba4:	049b      	lsls	r3, r3, #18
10001ba6:	1c1a      	adds	r2, r3, #0
10001ba8:	68fb      	ldr	r3, [r7, #12]
10001baa:	4313      	orrs	r3, r2
10001bac:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
10001bae:	687b      	ldr	r3, [r7, #4]
10001bb0:	681b      	ldr	r3, [r3, #0]
10001bb2:	68fa      	ldr	r2, [r7, #12]
10001bb4:	60da      	str	r2, [r3, #12]
10001bb6:	e009      	b.n	10001bcc <XMC_CAN_MO_Config+0xf4>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
10001bb8:	687b      	ldr	r3, [r7, #4]
10001bba:	681b      	ldr	r3, [r3, #0]
10001bbc:	687a      	ldr	r2, [r7, #4]
10001bbe:	6852      	ldr	r2, [r2, #4]
10001bc0:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
10001bc2:	687b      	ldr	r3, [r7, #4]
10001bc4:	681b      	ldr	r3, [r3, #0]
10001bc6:	687a      	ldr	r2, [r7, #4]
10001bc8:	6892      	ldr	r2, [r2, #8]
10001bca:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001bcc:	687b      	ldr	r3, [r7, #4]
10001bce:	7e1b      	ldrb	r3, [r3, #24]
10001bd0:	2b01      	cmp	r3, #1
10001bd2:	d10d      	bne.n	10001bf0 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
10001bd4:	687b      	ldr	r3, [r7, #4]
10001bd6:	1c18      	adds	r0, r3, #0
10001bd8:	f000 f81e 	bl	10001c18 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
10001bdc:	687b      	ldr	r3, [r7, #4]
10001bde:	681b      	ldr	r3, [r3, #0]
10001be0:	2280      	movs	r2, #128	; 0x80
10001be2:	0512      	lsls	r2, r2, #20
10001be4:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001be6:	687b      	ldr	r3, [r7, #4]
10001be8:	681b      	ldr	r3, [r3, #0]
10001bea:	4a09      	ldr	r2, [pc, #36]	; (10001c10 <XMC_CAN_MO_Config+0x138>)
10001bec:	61da      	str	r2, [r3, #28]
10001bee:	e008      	b.n	10001c02 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
10001bf0:	687b      	ldr	r3, [r7, #4]
10001bf2:	681b      	ldr	r3, [r3, #0]
10001bf4:	2280      	movs	r2, #128	; 0x80
10001bf6:	0112      	lsls	r2, r2, #4
10001bf8:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001bfa:	687b      	ldr	r3, [r7, #4]
10001bfc:	681b      	ldr	r3, [r3, #0]
10001bfe:	4a05      	ldr	r2, [pc, #20]	; (10001c14 <XMC_CAN_MO_Config+0x13c>)
10001c00:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
10001c02:	46bd      	mov	sp, r7
10001c04:	b006      	add	sp, #24
10001c06:	bd80      	pop	{r7, pc}
10001c08:	affbf000 	.word	0xaffbf000
10001c0c:	ffff00ff 	.word	0xffff00ff
10001c10:	062000c0 	.word	0x062000c0
10001c14:	00a00640 	.word	0x00a00640

10001c18 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
10001c18:	b580      	push	{r7, lr}
10001c1a:	b084      	sub	sp, #16
10001c1c:	af00      	add	r7, sp, #0
10001c1e:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001c20:	230f      	movs	r3, #15
10001c22:	18fb      	adds	r3, r7, r3
10001c24:	2203      	movs	r2, #3
10001c26:	701a      	strb	r2, [r3, #0]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001c28:	687b      	ldr	r3, [r7, #4]
10001c2a:	7e1b      	ldrb	r3, [r3, #24]
10001c2c:	2b01      	cmp	r3, #1
10001c2e:	d125      	bne.n	10001c7c <XMC_CAN_MO_UpdateData+0x64>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001c30:	687b      	ldr	r3, [r7, #4]
10001c32:	681b      	ldr	r3, [r3, #0]
10001c34:	2220      	movs	r2, #32
10001c36:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001c38:	687b      	ldr	r3, [r7, #4]
10001c3a:	681b      	ldr	r3, [r3, #0]
10001c3c:	687a      	ldr	r2, [r7, #4]
10001c3e:	6812      	ldr	r2, [r2, #0]
10001c40:	6812      	ldr	r2, [r2, #0]
10001c42:	4914      	ldr	r1, [pc, #80]	; (10001c94 <XMC_CAN_MO_UpdateData+0x7c>)
10001c44:	4011      	ands	r1, r2
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
10001c46:	687a      	ldr	r2, [r7, #4]
10001c48:	7b12      	ldrb	r2, [r2, #12]
10001c4a:	0610      	lsls	r0, r2, #24
10001c4c:	22f0      	movs	r2, #240	; 0xf0
10001c4e:	0512      	lsls	r2, r2, #20
10001c50:	4002      	ands	r2, r0
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001c52:	430a      	orrs	r2, r1
10001c54:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
10001c56:	687b      	ldr	r3, [r7, #4]
10001c58:	681b      	ldr	r3, [r3, #0]
10001c5a:	687a      	ldr	r2, [r7, #4]
10001c5c:	6912      	ldr	r2, [r2, #16]
10001c5e:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
10001c60:	687b      	ldr	r3, [r7, #4]
10001c62:	681b      	ldr	r3, [r3, #0]
10001c64:	687a      	ldr	r2, [r7, #4]
10001c66:	6952      	ldr	r2, [r2, #20]
10001c68:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
10001c6a:	687b      	ldr	r3, [r7, #4]
10001c6c:	681b      	ldr	r3, [r3, #0]
10001c6e:	4a0a      	ldr	r2, [pc, #40]	; (10001c98 <XMC_CAN_MO_UpdateData+0x80>)
10001c70:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001c72:	230f      	movs	r3, #15
10001c74:	18fb      	adds	r3, r7, r3
10001c76:	2200      	movs	r2, #0
10001c78:	701a      	strb	r2, [r3, #0]
10001c7a:	e003      	b.n	10001c84 <XMC_CAN_MO_UpdateData+0x6c>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001c7c:	230f      	movs	r3, #15
10001c7e:	18fb      	adds	r3, r7, r3
10001c80:	2203      	movs	r2, #3
10001c82:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001c84:	230f      	movs	r3, #15
10001c86:	18fb      	adds	r3, r7, r3
10001c88:	781b      	ldrb	r3, [r3, #0]
}
10001c8a:	1c18      	adds	r0, r3, #0
10001c8c:	46bd      	mov	sp, r7
10001c8e:	b004      	add	sp, #16
10001c90:	bd80      	pop	{r7, pc}
10001c92:	46c0      	nop			; (mov r8, r8)
10001c94:	f0ffffff 	.word	0xf0ffffff
10001c98:	00280040 	.word	0x00280040

10001c9c <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
10001c9c:	b580      	push	{r7, lr}
10001c9e:	b086      	sub	sp, #24
10001ca0:	af00      	add	r7, sp, #0
10001ca2:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10001ca4:	2317      	movs	r3, #23
10001ca6:	18fb      	adds	r3, r7, r3
10001ca8:	2201      	movs	r2, #1
10001caa:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
10001cac:	687b      	ldr	r3, [r7, #4]
10001cae:	681b      	ldr	r3, [r3, #0]
10001cb0:	69db      	ldr	r3, [r3, #28]
10001cb2:	2220      	movs	r2, #32
10001cb4:	4013      	ands	r3, r2
10001cb6:	095b      	lsrs	r3, r3, #5
10001cb8:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
10001cba:	687b      	ldr	r3, [r7, #4]
10001cbc:	681b      	ldr	r3, [r3, #0]
10001cbe:	69da      	ldr	r2, [r3, #28]
10001cc0:	2380      	movs	r3, #128	; 0x80
10001cc2:	005b      	lsls	r3, r3, #1
10001cc4:	4013      	ands	r3, r2
10001cc6:	0a1b      	lsrs	r3, r3, #8
10001cc8:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
10001cca:	693b      	ldr	r3, [r7, #16]
10001ccc:	2b00      	cmp	r3, #0
10001cce:	d104      	bne.n	10001cda <XMC_CAN_MO_Transmit+0x3e>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
10001cd0:	2317      	movs	r3, #23
10001cd2:	18fb      	adds	r3, r7, r3
10001cd4:	2204      	movs	r2, #4
10001cd6:	701a      	strb	r2, [r3, #0]
10001cd8:	e010      	b.n	10001cfc <XMC_CAN_MO_Transmit+0x60>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
10001cda:	68fb      	ldr	r3, [r7, #12]
10001cdc:	2b01      	cmp	r3, #1
10001cde:	d104      	bne.n	10001cea <XMC_CAN_MO_Transmit+0x4e>
  {
    error = XMC_CAN_STATUS_BUSY;
10001ce0:	2317      	movs	r3, #23
10001ce2:	18fb      	adds	r3, r7, r3
10001ce4:	2202      	movs	r2, #2
10001ce6:	701a      	strb	r2, [r3, #0]
10001ce8:	e008      	b.n	10001cfc <XMC_CAN_MO_Transmit+0x60>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
10001cea:	687b      	ldr	r3, [r7, #4]
10001cec:	681b      	ldr	r3, [r3, #0]
10001cee:	22e0      	movs	r2, #224	; 0xe0
10001cf0:	04d2      	lsls	r2, r2, #19
10001cf2:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001cf4:	2317      	movs	r3, #23
10001cf6:	18fb      	adds	r3, r7, r3
10001cf8:	2200      	movs	r2, #0
10001cfa:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001cfc:	2317      	movs	r3, #23
10001cfe:	18fb      	adds	r3, r7, r3
10001d00:	781b      	ldrb	r3, [r3, #0]
}
10001d02:	1c18      	adds	r0, r3, #0
10001d04:	46bd      	mov	sp, r7
10001d06:	b006      	add	sp, #24
10001d08:	bd80      	pop	{r7, pc}
10001d0a:	46c0      	nop			; (mov r8, r8)

10001d0c <XMC_CAN_NODE_EnableEvent>:
  return error;
}

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
10001d0c:	b580      	push	{r7, lr}
10001d0e:	b082      	sub	sp, #8
10001d10:	af00      	add	r7, sp, #0
10001d12:	6078      	str	r0, [r7, #4]
10001d14:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
10001d16:	683a      	ldr	r2, [r7, #0]
10001d18:	2380      	movs	r3, #128	; 0x80
10001d1a:	03db      	lsls	r3, r3, #15
10001d1c:	429a      	cmp	r2, r3
10001d1e:	d006      	beq.n	10001d2e <XMC_CAN_NODE_EnableEvent+0x22>
  {
    can_node->NCR |= (uint32_t)event;
10001d20:	687b      	ldr	r3, [r7, #4]
10001d22:	681a      	ldr	r2, [r3, #0]
10001d24:	683b      	ldr	r3, [r7, #0]
10001d26:	431a      	orrs	r2, r3
10001d28:	687b      	ldr	r3, [r7, #4]
10001d2a:	601a      	str	r2, [r3, #0]
10001d2c:	e005      	b.n	10001d3a <XMC_CAN_NODE_EnableEvent+0x2e>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
10001d2e:	687b      	ldr	r3, [r7, #4]
10001d30:	699a      	ldr	r2, [r3, #24]
10001d32:	683b      	ldr	r3, [r7, #0]
10001d34:	431a      	orrs	r2, r3
10001d36:	687b      	ldr	r3, [r7, #4]
10001d38:	619a      	str	r2, [r3, #24]
  }
}
10001d3a:	46bd      	mov	sp, r7
10001d3c:	b002      	add	sp, #8
10001d3e:	bd80      	pop	{r7, pc}

10001d40 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10001d40:	b580      	push	{r7, lr}
10001d42:	b082      	sub	sp, #8
10001d44:	af00      	add	r7, sp, #0
10001d46:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10001d48:	687b      	ldr	r3, [r7, #4]
10001d4a:	2280      	movs	r2, #128	; 0x80
10001d4c:	0052      	lsls	r2, r2, #1
10001d4e:	60da      	str	r2, [r3, #12]
}
10001d50:	46bd      	mov	sp, r7
10001d52:	b002      	add	sp, #8
10001d54:	bd80      	pop	{r7, pc}
10001d56:	46c0      	nop			; (mov r8, r8)

10001d58 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
10001d58:	b580      	push	{r7, lr}
10001d5a:	b082      	sub	sp, #8
10001d5c:	af00      	add	r7, sp, #0
10001d5e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
10001d60:	687b      	ldr	r3, [r7, #4]
10001d62:	4a09      	ldr	r2, [pc, #36]	; (10001d88 <XMC_CCU4_lUngateClock+0x30>)
10001d64:	4293      	cmp	r3, r2
10001d66:	d103      	bne.n	10001d70 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
10001d68:	2004      	movs	r0, #4
10001d6a:	f7ff fb99 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
10001d6e:	e008      	b.n	10001d82 <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
10001d70:	687b      	ldr	r3, [r7, #4]
10001d72:	4a06      	ldr	r2, [pc, #24]	; (10001d8c <XMC_CCU4_lUngateClock+0x34>)
10001d74:	4293      	cmp	r3, r2
10001d76:	d104      	bne.n	10001d82 <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
10001d78:	2380      	movs	r3, #128	; 0x80
10001d7a:	029b      	lsls	r3, r3, #10
10001d7c:	1c18      	adds	r0, r3, #0
10001d7e:	f7ff fb8f 	bl	100014a0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
10001d82:	46bd      	mov	sp, r7
10001d84:	b002      	add	sp, #8
10001d86:	bd80      	pop	{r7, pc}
10001d88:	48040000 	.word	0x48040000
10001d8c:	48044000 	.word	0x48044000

10001d90 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
10001d90:	b580      	push	{r7, lr}
10001d92:	b082      	sub	sp, #8
10001d94:	af00      	add	r7, sp, #0
10001d96:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
10001d98:	687b      	ldr	r3, [r7, #4]
10001d9a:	1c18      	adds	r0, r3, #0
10001d9c:	f7ff ffdc 	bl	10001d58 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
10001da0:	46bd      	mov	sp, r7
10001da2:	b002      	add	sp, #8
10001da4:	bd80      	pop	{r7, pc}
10001da6:	46c0      	nop			; (mov r8, r8)

10001da8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
10001da8:	b580      	push	{r7, lr}
10001daa:	b084      	sub	sp, #16
10001dac:	af00      	add	r7, sp, #0
10001dae:	6078      	str	r0, [r7, #4]
10001db0:	1c0a      	adds	r2, r1, #0
10001db2:	1cfb      	adds	r3, r7, #3
10001db4:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
10001db6:	687b      	ldr	r3, [r7, #4]
10001db8:	1c18      	adds	r0, r3, #0
10001dba:	f7ff ffe9 	bl	10001d90 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
10001dbe:	687b      	ldr	r3, [r7, #4]
10001dc0:	1c18      	adds	r0, r3, #0
10001dc2:	f7ff ffbd 	bl	10001d40 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
10001dc6:	687b      	ldr	r3, [r7, #4]
10001dc8:	681b      	ldr	r3, [r3, #0]
10001dca:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001dcc:	68fb      	ldr	r3, [r7, #12]
10001dce:	4a07      	ldr	r2, [pc, #28]	; (10001dec <XMC_CCU4_Init+0x44>)
10001dd0:	4013      	ands	r3, r2
10001dd2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001dd4:	1cfb      	adds	r3, r7, #3
10001dd6:	781b      	ldrb	r3, [r3, #0]
10001dd8:	039b      	lsls	r3, r3, #14
10001dda:	68fa      	ldr	r2, [r7, #12]
10001ddc:	4313      	orrs	r3, r2
10001dde:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
10001de0:	687b      	ldr	r3, [r7, #4]
10001de2:	68fa      	ldr	r2, [r7, #12]
10001de4:	601a      	str	r2, [r3, #0]
}
10001de6:	46bd      	mov	sp, r7
10001de8:	b004      	add	sp, #16
10001dea:	bd80      	pop	{r7, pc}
10001dec:	ffff3fff 	.word	0xffff3fff

10001df0 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10001df0:	b580      	push	{r7, lr}
10001df2:	b082      	sub	sp, #8
10001df4:	af00      	add	r7, sp, #0
10001df6:	6078      	str	r0, [r7, #4]
10001df8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001dfa:	683b      	ldr	r3, [r7, #0]
10001dfc:	681a      	ldr	r2, [r3, #0]
10001dfe:	687b      	ldr	r3, [r7, #4]
10001e00:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10001e02:	683b      	ldr	r3, [r7, #0]
10001e04:	795b      	ldrb	r3, [r3, #5]
10001e06:	069b      	lsls	r3, r3, #26
10001e08:	0fdb      	lsrs	r3, r3, #31
10001e0a:	b2db      	uxtb	r3, r3
10001e0c:	051a      	lsls	r2, r3, #20
10001e0e:	687b      	ldr	r3, [r7, #4]
10001e10:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10001e12:	683b      	ldr	r3, [r7, #0]
10001e14:	791b      	ldrb	r3, [r3, #4]
10001e16:	071b      	lsls	r3, r3, #28
10001e18:	0f1b      	lsrs	r3, r3, #28
10001e1a:	b2db      	uxtb	r3, r3
10001e1c:	1c1a      	adds	r2, r3, #0
10001e1e:	687b      	ldr	r3, [r7, #4]
10001e20:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10001e22:	683b      	ldr	r3, [r7, #0]
10001e24:	795b      	ldrb	r3, [r3, #5]
10001e26:	071b      	lsls	r3, r3, #28
10001e28:	0f1b      	lsrs	r3, r3, #28
10001e2a:	b2db      	uxtb	r3, r3
10001e2c:	1c1a      	adds	r2, r3, #0
10001e2e:	687b      	ldr	r3, [r7, #4]
10001e30:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
10001e32:	683b      	ldr	r3, [r7, #0]
10001e34:	795b      	ldrb	r3, [r3, #5]
10001e36:	06db      	lsls	r3, r3, #27
10001e38:	0fdb      	lsrs	r3, r3, #31
10001e3a:	b2db      	uxtb	r3, r3
10001e3c:	1c1a      	adds	r2, r3, #0
10001e3e:	687b      	ldr	r3, [r7, #4]
10001e40:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10001e42:	683b      	ldr	r3, [r7, #0]
10001e44:	791b      	ldrb	r3, [r3, #4]
10001e46:	061b      	lsls	r3, r3, #24
10001e48:	0f1b      	lsrs	r3, r3, #28
10001e4a:	b2db      	uxtb	r3, r3
10001e4c:	1c1a      	adds	r2, r3, #0
10001e4e:	687b      	ldr	r3, [r7, #4]
10001e50:	62da      	str	r2, [r3, #44]	; 0x2c
}
10001e52:	46bd      	mov	sp, r7
10001e54:	b002      	add	sp, #8
10001e56:	bd80      	pop	{r7, pc}

10001e58 <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
10001e58:	b580      	push	{r7, lr}
10001e5a:	b082      	sub	sp, #8
10001e5c:	af00      	add	r7, sp, #0
10001e5e:	6078      	str	r0, [r7, #4]
10001e60:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
10001e62:	683b      	ldr	r3, [r7, #0]
10001e64:	681a      	ldr	r2, [r3, #0]
10001e66:	687b      	ldr	r3, [r7, #4]
10001e68:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10001e6a:	683b      	ldr	r3, [r7, #0]
10001e6c:	795b      	ldrb	r3, [r3, #5]
10001e6e:	07db      	lsls	r3, r3, #31
10001e70:	0fdb      	lsrs	r3, r3, #31
10001e72:	b2db      	uxtb	r3, r3
10001e74:	051a      	lsls	r2, r3, #20
10001e76:	687b      	ldr	r3, [r7, #4]
10001e78:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
10001e7a:	683b      	ldr	r3, [r7, #0]
10001e7c:	791b      	ldrb	r3, [r3, #4]
10001e7e:	071b      	lsls	r3, r3, #28
10001e80:	0f1b      	lsrs	r3, r3, #28
10001e82:	b2db      	uxtb	r3, r3
10001e84:	1c1a      	adds	r2, r3, #0
10001e86:	687b      	ldr	r3, [r7, #4]
10001e88:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
10001e8a:	683b      	ldr	r3, [r7, #0]
10001e8c:	791b      	ldrb	r3, [r3, #4]
10001e8e:	061b      	lsls	r3, r3, #24
10001e90:	0f1b      	lsrs	r3, r3, #28
10001e92:	b2db      	uxtb	r3, r3
10001e94:	1c1a      	adds	r2, r3, #0
10001e96:	687b      	ldr	r3, [r7, #4]
10001e98:	62da      	str	r2, [r3, #44]	; 0x2c
}
10001e9a:	46bd      	mov	sp, r7
10001e9c:	b002      	add	sp, #8
10001e9e:	bd80      	pop	{r7, pc}

10001ea0 <XMC_CCU4_SLICE_Capture0Config>:
  slice->CMC = cmc;
}

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001ea0:	b580      	push	{r7, lr}
10001ea2:	b084      	sub	sp, #16
10001ea4:	af00      	add	r7, sp, #0
10001ea6:	6078      	str	r0, [r7, #4]
10001ea8:	1c0a      	adds	r2, r1, #0
10001eaa:	1cfb      	adds	r3, r7, #3
10001eac:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
10001eae:	687b      	ldr	r3, [r7, #4]
10001eb0:	685b      	ldr	r3, [r3, #4]
10001eb2:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
10001eb4:	68fb      	ldr	r3, [r7, #12]
10001eb6:	2230      	movs	r2, #48	; 0x30
10001eb8:	4393      	bics	r3, r2
10001eba:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
10001ebc:	1cfb      	adds	r3, r7, #3
10001ebe:	781b      	ldrb	r3, [r3, #0]
10001ec0:	011b      	lsls	r3, r3, #4
10001ec2:	68fa      	ldr	r2, [r7, #12]
10001ec4:	4313      	orrs	r3, r2
10001ec6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001ec8:	687b      	ldr	r3, [r7, #4]
10001eca:	68fa      	ldr	r2, [r7, #12]
10001ecc:	605a      	str	r2, [r3, #4]
}
10001ece:	46bd      	mov	sp, r7
10001ed0:	b004      	add	sp, #16
10001ed2:	bd80      	pop	{r7, pc}

10001ed4 <XMC_CCU4_SLICE_Capture1Config>:

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10001ed4:	b580      	push	{r7, lr}
10001ed6:	b084      	sub	sp, #16
10001ed8:	af00      	add	r7, sp, #0
10001eda:	6078      	str	r0, [r7, #4]
10001edc:	1c0a      	adds	r2, r1, #0
10001ede:	1cfb      	adds	r3, r7, #3
10001ee0:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
10001ee2:	687b      	ldr	r3, [r7, #4]
10001ee4:	685b      	ldr	r3, [r3, #4]
10001ee6:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
10001ee8:	68fb      	ldr	r3, [r7, #12]
10001eea:	22c0      	movs	r2, #192	; 0xc0
10001eec:	4393      	bics	r3, r2
10001eee:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
10001ef0:	1cfb      	adds	r3, r7, #3
10001ef2:	781b      	ldrb	r3, [r3, #0]
10001ef4:	019b      	lsls	r3, r3, #6
10001ef6:	68fa      	ldr	r2, [r7, #12]
10001ef8:	4313      	orrs	r3, r2
10001efa:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001efc:	687b      	ldr	r3, [r7, #4]
10001efe:	68fa      	ldr	r2, [r7, #12]
10001f00:	605a      	str	r2, [r3, #4]
}
10001f02:	46bd      	mov	sp, r7
10001f04:	b004      	add	sp, #16
10001f06:	bd80      	pop	{r7, pc}

10001f08 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
10001f08:	b580      	push	{r7, lr}
10001f0a:	b088      	sub	sp, #32
10001f0c:	af00      	add	r7, sp, #0
10001f0e:	60f8      	str	r0, [r7, #12]
10001f10:	607a      	str	r2, [r7, #4]
10001f12:	230b      	movs	r3, #11
10001f14:	18fb      	adds	r3, r7, r3
10001f16:	1c0a      	adds	r2, r1, #0
10001f18:	701a      	strb	r2, [r3, #0]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) || \
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
10001f1a:	231f      	movs	r3, #31
10001f1c:	18fb      	adds	r3, r7, r3
10001f1e:	220b      	movs	r2, #11
10001f20:	18ba      	adds	r2, r7, r2
10001f22:	7812      	ldrb	r2, [r2, #0]
10001f24:	3a01      	subs	r2, #1
10001f26:	701a      	strb	r2, [r3, #0]

#if defined(CCU4V3) /* Defined for XMC1400 devices only */
  ins = slice->INS2;
10001f28:	68fb      	ldr	r3, [r7, #12]
10001f2a:	681b      	ldr	r3, [r3, #0]
10001f2c:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
10001f2e:	2317      	movs	r3, #23
10001f30:	18fb      	adds	r3, r7, r3
10001f32:	221f      	movs	r2, #31
10001f34:	18ba      	adds	r2, r7, r2
10001f36:	7812      	ldrb	r2, [r2, #0]
10001f38:	0092      	lsls	r2, r2, #2
10001f3a:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
10001f3c:	2317      	movs	r3, #23
10001f3e:	18fb      	adds	r3, r7, r3
10001f40:	781b      	ldrb	r3, [r3, #0]
10001f42:	2203      	movs	r2, #3
10001f44:	409a      	lsls	r2, r3
10001f46:	1c13      	adds	r3, r2, #0
10001f48:	43da      	mvns	r2, r3
10001f4a:	69bb      	ldr	r3, [r7, #24]
10001f4c:	4013      	ands	r3, r2
10001f4e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
10001f50:	687b      	ldr	r3, [r7, #4]
10001f52:	785b      	ldrb	r3, [r3, #1]
10001f54:	1c1a      	adds	r2, r3, #0
10001f56:	2317      	movs	r3, #23
10001f58:	18fb      	adds	r3, r7, r3
10001f5a:	781b      	ldrb	r3, [r3, #0]
10001f5c:	409a      	lsls	r2, r3
10001f5e:	1c13      	adds	r3, r2, #0
10001f60:	69ba      	ldr	r2, [r7, #24]
10001f62:	4313      	orrs	r3, r2
10001f64:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
10001f66:	231f      	movs	r3, #31
10001f68:	18fb      	adds	r3, r7, r3
10001f6a:	781b      	ldrb	r3, [r3, #0]
10001f6c:	009b      	lsls	r3, r3, #2
10001f6e:	b2da      	uxtb	r2, r3
10001f70:	2317      	movs	r3, #23
10001f72:	18fb      	adds	r3, r7, r3
10001f74:	3202      	adds	r2, #2
10001f76:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
10001f78:	2317      	movs	r3, #23
10001f7a:	18fb      	adds	r3, r7, r3
10001f7c:	781b      	ldrb	r3, [r3, #0]
10001f7e:	2201      	movs	r2, #1
10001f80:	409a      	lsls	r2, r3
10001f82:	1c13      	adds	r3, r2, #0
10001f84:	43da      	mvns	r2, r3
10001f86:	69bb      	ldr	r3, [r7, #24]
10001f88:	4013      	ands	r3, r2
10001f8a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
10001f8c:	687b      	ldr	r3, [r7, #4]
10001f8e:	789b      	ldrb	r3, [r3, #2]
10001f90:	1c1a      	adds	r2, r3, #0
10001f92:	2317      	movs	r3, #23
10001f94:	18fb      	adds	r3, r7, r3
10001f96:	781b      	ldrb	r3, [r3, #0]
10001f98:	409a      	lsls	r2, r3
10001f9a:	1c13      	adds	r3, r2, #0
10001f9c:	69ba      	ldr	r2, [r7, #24]
10001f9e:	4313      	orrs	r3, r2
10001fa0:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
10001fa2:	231f      	movs	r3, #31
10001fa4:	18fb      	adds	r3, r7, r3
10001fa6:	781b      	ldrb	r3, [r3, #0]
10001fa8:	009b      	lsls	r3, r3, #2
10001faa:	b2da      	uxtb	r2, r3
10001fac:	2317      	movs	r3, #23
10001fae:	18fb      	adds	r3, r7, r3
10001fb0:	3210      	adds	r2, #16
10001fb2:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10001fb4:	2317      	movs	r3, #23
10001fb6:	18fb      	adds	r3, r7, r3
10001fb8:	781b      	ldrb	r3, [r3, #0]
10001fba:	2203      	movs	r2, #3
10001fbc:	409a      	lsls	r2, r3
10001fbe:	1c13      	adds	r3, r2, #0
10001fc0:	43da      	mvns	r2, r3
10001fc2:	69bb      	ldr	r3, [r7, #24]
10001fc4:	4013      	ands	r3, r2
10001fc6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
10001fc8:	687b      	ldr	r3, [r7, #4]
10001fca:	78db      	ldrb	r3, [r3, #3]
10001fcc:	1c1a      	adds	r2, r3, #0
10001fce:	2317      	movs	r3, #23
10001fd0:	18fb      	adds	r3, r7, r3
10001fd2:	781b      	ldrb	r3, [r3, #0]
10001fd4:	409a      	lsls	r2, r3
10001fd6:	1c13      	adds	r3, r2, #0
10001fd8:	69ba      	ldr	r2, [r7, #24]
10001fda:	4313      	orrs	r3, r2
10001fdc:	61bb      	str	r3, [r7, #24]

  slice->INS2 = ins;
10001fde:	68fb      	ldr	r3, [r7, #12]
10001fe0:	69ba      	ldr	r2, [r7, #24]
10001fe2:	601a      	str	r2, [r3, #0]

  ins = slice->INS1;
10001fe4:	68fb      	ldr	r3, [r7, #12]
10001fe6:	22d8      	movs	r2, #216	; 0xd8
10001fe8:	589b      	ldr	r3, [r3, r2]
10001fea:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
10001fec:	2317      	movs	r3, #23
10001fee:	18fb      	adds	r3, r7, r3
10001ff0:	221f      	movs	r2, #31
10001ff2:	18ba      	adds	r2, r7, r2
10001ff4:	7812      	ldrb	r2, [r2, #0]
10001ff6:	00d2      	lsls	r2, r2, #3
10001ff8:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
10001ffa:	2317      	movs	r3, #23
10001ffc:	18fb      	adds	r3, r7, r3
10001ffe:	781b      	ldrb	r3, [r3, #0]
10002000:	223f      	movs	r2, #63	; 0x3f
10002002:	409a      	lsls	r2, r3
10002004:	1c13      	adds	r3, r2, #0
10002006:	43da      	mvns	r2, r3
10002008:	69bb      	ldr	r3, [r7, #24]
1000200a:	4013      	ands	r3, r2
1000200c:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
1000200e:	687b      	ldr	r3, [r7, #4]
10002010:	781b      	ldrb	r3, [r3, #0]
10002012:	1c1a      	adds	r2, r3, #0
10002014:	2317      	movs	r3, #23
10002016:	18fb      	adds	r3, r7, r3
10002018:	781b      	ldrb	r3, [r3, #0]
1000201a:	409a      	lsls	r2, r3
1000201c:	1c13      	adds	r3, r2, #0
1000201e:	69ba      	ldr	r2, [r7, #24]
10002020:	4313      	orrs	r3, r2
10002022:	61bb      	str	r3, [r7, #24]

  slice->INS1 = ins;
10002024:	68fb      	ldr	r3, [r7, #12]
10002026:	21d8      	movs	r1, #216	; 0xd8
10002028:	69ba      	ldr	r2, [r7, #24]
1000202a:	505a      	str	r2, [r3, r1]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS = ins;
#endif
}
1000202c:	46bd      	mov	sp, r7
1000202e:	b008      	add	sp, #32
10002030:	bd80      	pop	{r7, pc}
10002032:	46c0      	nop			; (mov r8, r8)

10002034 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10002034:	b580      	push	{r7, lr}
10002036:	b086      	sub	sp, #24
10002038:	af00      	add	r7, sp, #0
1000203a:	6078      	str	r0, [r7, #4]
1000203c:	1c08      	adds	r0, r1, #0
1000203e:	1c11      	adds	r1, r2, #0
10002040:	1cfb      	adds	r3, r7, #3
10002042:	1c02      	adds	r2, r0, #0
10002044:	701a      	strb	r2, [r3, #0]
10002046:	1cbb      	adds	r3, r7, #2
10002048:	1c0a      	adds	r2, r1, #0
1000204a:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
1000204c:	1cfb      	adds	r3, r7, #3
1000204e:	781b      	ldrb	r3, [r3, #0]
10002050:	2b0b      	cmp	r3, #11
10002052:	d820      	bhi.n	10002096 <XMC_CCU4_SLICE_SetInterruptNode+0x62>
10002054:	009a      	lsls	r2, r3, #2
10002056:	4b20      	ldr	r3, [pc, #128]	; (100020d8 <XMC_CCU4_SLICE_SetInterruptNode+0xa4>)
10002058:	18d3      	adds	r3, r2, r3
1000205a:	681b      	ldr	r3, [r3, #0]
1000205c:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
1000205e:	2303      	movs	r3, #3
10002060:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10002062:	2300      	movs	r3, #0
10002064:	617b      	str	r3, [r7, #20]
      break;
10002066:	e01b      	b.n	100020a0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10002068:	230c      	movs	r3, #12
1000206a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
1000206c:	2302      	movs	r3, #2
1000206e:	617b      	str	r3, [r7, #20]
      break;
10002070:	e016      	b.n	100020a0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10002072:	23c0      	movs	r3, #192	; 0xc0
10002074:	009b      	lsls	r3, r3, #2
10002076:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10002078:	2308      	movs	r3, #8
1000207a:	617b      	str	r3, [r7, #20]
      break;
1000207c:	e010      	b.n	100020a0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
1000207e:	23c0      	movs	r3, #192	; 0xc0
10002080:	011b      	lsls	r3, r3, #4
10002082:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10002084:	230a      	movs	r3, #10
10002086:	617b      	str	r3, [r7, #20]
      break;
10002088:	e00a      	b.n	100020a0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
1000208a:	23c0      	movs	r3, #192	; 0xc0
1000208c:	019b      	lsls	r3, r3, #6
1000208e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10002090:	230c      	movs	r3, #12
10002092:	617b      	str	r3, [r7, #20]
      break;
10002094:	e004      	b.n	100020a0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>
	  
	default:
	  mask = 0;
10002096:	2300      	movs	r3, #0
10002098:	613b      	str	r3, [r7, #16]
	  pos = 0;
1000209a:	2300      	movs	r3, #0
1000209c:	617b      	str	r3, [r7, #20]
	  break;
1000209e:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
100020a0:	693b      	ldr	r3, [r7, #16]
100020a2:	2b00      	cmp	r3, #0
100020a4:	d014      	beq.n	100020d0 <XMC_CCU4_SLICE_SetInterruptNode+0x9c>
  {
    srs = slice->SRS;
100020a6:	687b      	ldr	r3, [r7, #4]
100020a8:	22a8      	movs	r2, #168	; 0xa8
100020aa:	589b      	ldr	r3, [r3, r2]
100020ac:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
100020ae:	693b      	ldr	r3, [r7, #16]
100020b0:	43da      	mvns	r2, r3
100020b2:	68fb      	ldr	r3, [r7, #12]
100020b4:	4013      	ands	r3, r2
100020b6:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
100020b8:	1cbb      	adds	r3, r7, #2
100020ba:	781a      	ldrb	r2, [r3, #0]
100020bc:	697b      	ldr	r3, [r7, #20]
100020be:	409a      	lsls	r2, r3
100020c0:	1c13      	adds	r3, r2, #0
100020c2:	68fa      	ldr	r2, [r7, #12]
100020c4:	4313      	orrs	r3, r2
100020c6:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
100020c8:	687b      	ldr	r3, [r7, #4]
100020ca:	21a8      	movs	r1, #168	; 0xa8
100020cc:	68fa      	ldr	r2, [r7, #12]
100020ce:	505a      	str	r2, [r3, r1]
  }
}
100020d0:	46bd      	mov	sp, r7
100020d2:	b006      	add	sp, #24
100020d4:	bd80      	pop	{r7, pc}
100020d6:	46c0      	nop			; (mov r8, r8)
100020d8:	10004b54 	.word	0x10004b54

100020dc <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
100020dc:	b580      	push	{r7, lr}
100020de:	b088      	sub	sp, #32
100020e0:	af00      	add	r7, sp, #0
100020e2:	6078      	str	r0, [r7, #4]
100020e4:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100020e6:	f3ef 8310 	mrs	r3, PRIMASK
100020ea:	617b      	str	r3, [r7, #20]
  return(result);
100020ec:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
100020ee:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100020f0:	b672      	cpsid	i
  __disable_irq ();
  return status;
100020f2:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
100020f4:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100020f6:	4b0c      	ldr	r3, [pc, #48]	; (10002128 <__aeabi_uidiv+0x4c>)
100020f8:	2204      	movs	r2, #4
100020fa:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100020fc:	4b0a      	ldr	r3, [pc, #40]	; (10002128 <__aeabi_uidiv+0x4c>)
100020fe:	687a      	ldr	r2, [r7, #4]
10002100:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10002102:	4b09      	ldr	r3, [pc, #36]	; (10002128 <__aeabi_uidiv+0x4c>)
10002104:	683a      	ldr	r2, [r7, #0]
10002106:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10002108:	4b07      	ldr	r3, [pc, #28]	; (10002128 <__aeabi_uidiv+0x4c>)
1000210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000210c:	61bb      	str	r3, [r7, #24]
1000210e:	69fb      	ldr	r3, [r7, #28]
10002110:	60fb      	str	r3, [r7, #12]
10002112:	68fb      	ldr	r3, [r7, #12]
10002114:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002116:	68bb      	ldr	r3, [r7, #8]
10002118:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
1000211c:	69bb      	ldr	r3, [r7, #24]
}
1000211e:	1c18      	adds	r0, r3, #0
10002120:	46bd      	mov	sp, r7
10002122:	b008      	add	sp, #32
10002124:	bd80      	pop	{r7, pc}
10002126:	46c0      	nop			; (mov r8, r8)
10002128:	40030000 	.word	0x40030000

1000212c <__aeabi_uidivmod>:
  return result;
}

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
1000212c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000212e:	b08d      	sub	sp, #52	; 0x34
10002130:	af00      	add	r7, sp, #0
10002132:	6078      	str	r0, [r7, #4]
10002134:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10002136:	f3ef 8210 	mrs	r2, PRIMASK
1000213a:	617a      	str	r2, [r7, #20]
  return(result);
1000213c:	697a      	ldr	r2, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000213e:	613a      	str	r2, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10002140:	b672      	cpsid	i
  __disable_irq ();
  return status;
10002142:	693a      	ldr	r2, [r7, #16]
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
10002144:	62fa      	str	r2, [r7, #44]	; 0x2c

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10002146:	4a15      	ldr	r2, [pc, #84]	; (1000219c <__aeabi_uidivmod+0x70>)
10002148:	2104      	movs	r1, #4
1000214a:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
1000214c:	4a13      	ldr	r2, [pc, #76]	; (1000219c <__aeabi_uidivmod+0x70>)
1000214e:	6879      	ldr	r1, [r7, #4]
10002150:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
10002152:	4a12      	ldr	r2, [pc, #72]	; (1000219c <__aeabi_uidivmod+0x70>)
10002154:	6839      	ldr	r1, [r7, #0]
10002156:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;
10002158:	4a10      	ldr	r2, [pc, #64]	; (1000219c <__aeabi_uidivmod+0x70>)
1000215a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1000215c:	623a      	str	r2, [r7, #32]
1000215e:	2200      	movs	r2, #0
10002160:	627a      	str	r2, [r7, #36]	; 0x24
  quot = (uint64_t)MATH->QUOT;
10002162:	4a0e      	ldr	r2, [pc, #56]	; (1000219c <__aeabi_uidivmod+0x70>)
10002164:	6a92      	ldr	r2, [r2, #40]	; 0x28
10002166:	61ba      	str	r2, [r7, #24]
10002168:	2200      	movs	r2, #0
1000216a:	61fa      	str	r2, [r7, #28]
1000216c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000216e:	60fa      	str	r2, [r7, #12]
10002170:	68fa      	ldr	r2, [r7, #12]
10002172:	60ba      	str	r2, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002174:	68ba      	ldr	r2, [r7, #8]
10002176:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((remainder << 32) | quot);
1000217a:	6a3a      	ldr	r2, [r7, #32]
1000217c:	0014      	movs	r4, r2
1000217e:	2200      	movs	r2, #0
10002180:	1c13      	adds	r3, r2, #0
10002182:	69ba      	ldr	r2, [r7, #24]
10002184:	431a      	orrs	r2, r3
10002186:	1c15      	adds	r5, r2, #0
10002188:	69fa      	ldr	r2, [r7, #28]
1000218a:	4322      	orrs	r2, r4
1000218c:	1c16      	adds	r6, r2, #0
1000218e:	1c2b      	adds	r3, r5, #0
10002190:	1c34      	adds	r4, r6, #0
}
10002192:	1c18      	adds	r0, r3, #0
10002194:	1c21      	adds	r1, r4, #0
10002196:	46bd      	mov	sp, r7
10002198:	b00d      	add	sp, #52	; 0x34
1000219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000219c:	40030000 	.word	0x40030000

100021a0 <_init>:
  }
}

/* Init */
void _init(void)
{}
100021a0:	b580      	push	{r7, lr}
100021a2:	af00      	add	r7, sp, #0
100021a4:	46bd      	mov	sp, r7
100021a6:	bd80      	pop	{r7, pc}

100021a8 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
100021a8:	b580      	push	{r7, lr}
100021aa:	b082      	sub	sp, #8
100021ac:	af00      	add	r7, sp, #0
100021ae:	6078      	str	r0, [r7, #4]
100021b0:	1c0a      	adds	r2, r1, #0
100021b2:	1cfb      	adds	r3, r7, #3
100021b4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
100021b6:	1cfb      	adds	r3, r7, #3
100021b8:	781b      	ldrb	r3, [r3, #0]
100021ba:	2201      	movs	r2, #1
100021bc:	409a      	lsls	r2, r3
100021be:	687b      	ldr	r3, [r7, #4]
100021c0:	60da      	str	r2, [r3, #12]
}
100021c2:	46bd      	mov	sp, r7
100021c4:	b002      	add	sp, #8
100021c6:	bd80      	pop	{r7, pc}

100021c8 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
100021c8:	b580      	push	{r7, lr}
100021ca:	b082      	sub	sp, #8
100021cc:	af00      	add	r7, sp, #0
100021ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
100021d0:	687b      	ldr	r3, [r7, #4]
100021d2:	2201      	movs	r2, #1
100021d4:	60da      	str	r2, [r3, #12]
}
100021d6:	46bd      	mov	sp, r7
100021d8:	b002      	add	sp, #8
100021da:	bd80      	pop	{r7, pc}

100021dc <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
100021dc:	b580      	push	{r7, lr}
100021de:	b082      	sub	sp, #8
100021e0:	af00      	add	r7, sp, #0
100021e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
100021e4:	687b      	ldr	r3, [r7, #4]
100021e6:	2202      	movs	r2, #2
100021e8:	611a      	str	r2, [r3, #16]
}
100021ea:	46bd      	mov	sp, r7
100021ec:	b002      	add	sp, #8
100021ee:	bd80      	pop	{r7, pc}

100021f0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
100021f0:	b580      	push	{r7, lr}
100021f2:	b082      	sub	sp, #8
100021f4:	af00      	add	r7, sp, #0
100021f6:	6078      	str	r0, [r7, #4]
100021f8:	1c0a      	adds	r2, r1, #0
100021fa:	1cbb      	adds	r3, r7, #2
100021fc:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
100021fe:	1cbb      	adds	r3, r7, #2
10002200:	881a      	ldrh	r2, [r3, #0]
10002202:	687b      	ldr	r3, [r7, #4]
10002204:	635a      	str	r2, [r3, #52]	; 0x34
}
10002206:	46bd      	mov	sp, r7
10002208:	b002      	add	sp, #8
1000220a:	bd80      	pop	{r7, pc}

1000220c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
1000220c:	b580      	push	{r7, lr}
1000220e:	b082      	sub	sp, #8
10002210:	af00      	add	r7, sp, #0
10002212:	6078      	str	r0, [r7, #4]
10002214:	1c0a      	adds	r2, r1, #0
10002216:	1cbb      	adds	r3, r7, #2
10002218:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
1000221a:	1cbb      	adds	r3, r7, #2
1000221c:	881a      	ldrh	r2, [r3, #0]
1000221e:	687b      	ldr	r3, [r7, #4]
10002220:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002222:	46bd      	mov	sp, r7
10002224:	b002      	add	sp, #8
10002226:	bd80      	pop	{r7, pc}

10002228 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002228:	b580      	push	{r7, lr}
1000222a:	b082      	sub	sp, #8
1000222c:	af00      	add	r7, sp, #0
1000222e:	6078      	str	r0, [r7, #4]
10002230:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10002232:	687b      	ldr	r3, [r7, #4]
10002234:	683a      	ldr	r2, [r7, #0]
10002236:	611a      	str	r2, [r3, #16]
}
10002238:	46bd      	mov	sp, r7
1000223a:	b002      	add	sp, #8
1000223c:	bd80      	pop	{r7, pc}
1000223e:	46c0      	nop			; (mov r8, r8)

10002240 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10002240:	b580      	push	{r7, lr}
10002242:	b082      	sub	sp, #8
10002244:	af00      	add	r7, sp, #0
10002246:	6078      	str	r0, [r7, #4]
10002248:	1c0a      	adds	r2, r1, #0
1000224a:	1cfb      	adds	r3, r7, #3
1000224c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
1000224e:	687b      	ldr	r3, [r7, #4]
10002250:	22a4      	movs	r2, #164	; 0xa4
10002252:	589a      	ldr	r2, [r3, r2]
10002254:	1cfb      	adds	r3, r7, #3
10002256:	781b      	ldrb	r3, [r3, #0]
10002258:	2101      	movs	r1, #1
1000225a:	4099      	lsls	r1, r3
1000225c:	1c0b      	adds	r3, r1, #0
1000225e:	431a      	orrs	r2, r3
10002260:	687b      	ldr	r3, [r7, #4]
10002262:	21a4      	movs	r1, #164	; 0xa4
10002264:	505a      	str	r2, [r3, r1]
}
10002266:	46bd      	mov	sp, r7
10002268:	b002      	add	sp, #8
1000226a:	bd80      	pop	{r7, pc}

1000226c <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
1000226c:	b590      	push	{r4, r7, lr}
1000226e:	b085      	sub	sp, #20
10002270:	af00      	add	r7, sp, #0
10002272:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
10002274:	230f      	movs	r3, #15
10002276:	18fb      	adds	r3, r7, r3
10002278:	2200      	movs	r2, #0
1000227a:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
1000227c:	687b      	ldr	r3, [r7, #4]
1000227e:	2226      	movs	r2, #38	; 0x26
10002280:	5c9b      	ldrb	r3, [r3, r2]
10002282:	2201      	movs	r2, #1
10002284:	4053      	eors	r3, r2
10002286:	b2db      	uxtb	r3, r3
10002288:	2b00      	cmp	r3, #0
1000228a:	d00c      	beq.n	100022a6 <TIMER_Init+0x3a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000228c:	687b      	ldr	r3, [r7, #4]
1000228e:	2221      	movs	r2, #33	; 0x21
10002290:	5c9b      	ldrb	r3, [r3, r2]
10002292:	2b00      	cmp	r3, #0
10002294:	d107      	bne.n	100022a6 <TIMER_Init+0x3a>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
10002296:	230f      	movs	r3, #15
10002298:	18fc      	adds	r4, r7, r3
1000229a:	687b      	ldr	r3, [r7, #4]
1000229c:	1c18      	adds	r0, r3, #0
1000229e:	f000 f809 	bl	100022b4 <TIMER_CCU4_lInit>
100022a2:	1c03      	adds	r3, r0, #0
100022a4:	7023      	strb	r3, [r4, #0]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
100022a6:	230f      	movs	r3, #15
100022a8:	18fb      	adds	r3, r7, r3
100022aa:	781b      	ldrb	r3, [r3, #0]
}
100022ac:	1c18      	adds	r0, r3, #0
100022ae:	46bd      	mov	sp, r7
100022b0:	b005      	add	sp, #20
100022b2:	bd90      	pop	{r4, r7, pc}

100022b4 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
100022b4:	b590      	push	{r4, r7, lr}
100022b6:	b085      	sub	sp, #20
100022b8:	af00      	add	r7, sp, #0
100022ba:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
100022bc:	687b      	ldr	r3, [r7, #4]
100022be:	691b      	ldr	r3, [r3, #16]
100022c0:	220f      	movs	r2, #15
100022c2:	18bc      	adds	r4, r7, r2
100022c4:	1c18      	adds	r0, r3, #0
100022c6:	f000 f92f 	bl	10002528 <GLOBAL_CCU4_Init>
100022ca:	1c03      	adds	r3, r0, #0
100022cc:	7023      	strb	r3, [r4, #0]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
100022ce:	687b      	ldr	r3, [r7, #4]
100022d0:	691b      	ldr	r3, [r3, #16]
100022d2:	689a      	ldr	r2, [r3, #8]
100022d4:	687b      	ldr	r3, [r7, #4]
100022d6:	7e1b      	ldrb	r3, [r3, #24]
100022d8:	1c10      	adds	r0, r2, #0
100022da:	1c19      	adds	r1, r3, #0
100022dc:	f7ff ff64 	bl	100021a8 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
100022e0:	687b      	ldr	r3, [r7, #4]
100022e2:	695a      	ldr	r2, [r3, #20]
100022e4:	687b      	ldr	r3, [r7, #4]
100022e6:	69db      	ldr	r3, [r3, #28]
100022e8:	1c10      	adds	r0, r2, #0
100022ea:	1c19      	adds	r1, r3, #0
100022ec:	f7ff fd80 	bl	10001df0 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
100022f0:	687b      	ldr	r3, [r7, #4]
100022f2:	1c18      	adds	r0, r3, #0
100022f4:	f000 f830 	bl	10002358 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
100022f8:	687b      	ldr	r3, [r7, #4]
100022fa:	2225      	movs	r2, #37	; 0x25
100022fc:	5c9b      	ldrb	r3, [r3, r2]
100022fe:	2b00      	cmp	r3, #0
10002300:	d00f      	beq.n	10002322 <TIMER_CCU4_lInit+0x6e>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10002302:	687b      	ldr	r3, [r7, #4]
10002304:	6959      	ldr	r1, [r3, #20]
10002306:	687b      	ldr	r3, [r7, #4]
10002308:	2220      	movs	r2, #32
1000230a:	5c9b      	ldrb	r3, [r3, r2]
1000230c:	1c08      	adds	r0, r1, #0
1000230e:	2100      	movs	r1, #0
10002310:	1c1a      	adds	r2, r3, #0
10002312:	f7ff fe8f 	bl	10002034 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002316:	687b      	ldr	r3, [r7, #4]
10002318:	695b      	ldr	r3, [r3, #20]
1000231a:	1c18      	adds	r0, r3, #0
1000231c:	2100      	movs	r1, #0
1000231e:	f7ff ff8f 	bl	10002240 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
10002322:	687b      	ldr	r3, [r7, #4]
10002324:	695b      	ldr	r3, [r3, #20]
10002326:	1c18      	adds	r0, r3, #0
10002328:	f7ff ff58 	bl	100021dc <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
1000232c:	687b      	ldr	r3, [r7, #4]
1000232e:	2226      	movs	r2, #38	; 0x26
10002330:	2101      	movs	r1, #1
10002332:	5499      	strb	r1, [r3, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
10002334:	687b      	ldr	r3, [r7, #4]
10002336:	2224      	movs	r2, #36	; 0x24
10002338:	5c9b      	ldrb	r3, [r3, r2]
1000233a:	2b00      	cmp	r3, #0
1000233c:	d004      	beq.n	10002348 <TIMER_CCU4_lInit+0x94>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
1000233e:	687b      	ldr	r3, [r7, #4]
10002340:	695b      	ldr	r3, [r3, #20]
10002342:	1c18      	adds	r0, r3, #0
10002344:	f7ff ff40 	bl	100021c8 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
10002348:	230f      	movs	r3, #15
1000234a:	18fb      	adds	r3, r7, r3
1000234c:	781b      	ldrb	r3, [r3, #0]
}
1000234e:	1c18      	adds	r0, r3, #0
10002350:	46bd      	mov	sp, r7
10002352:	b005      	add	sp, #20
10002354:	bd90      	pop	{r4, r7, pc}
10002356:	46c0      	nop			; (mov r8, r8)

10002358 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
10002358:	b580      	push	{r7, lr}
1000235a:	b082      	sub	sp, #8
1000235c:	af00      	add	r7, sp, #0
1000235e:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
10002360:	687b      	ldr	r3, [r7, #4]
10002362:	695a      	ldr	r2, [r3, #20]
10002364:	687b      	ldr	r3, [r7, #4]
10002366:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
10002368:	1c10      	adds	r0, r2, #0
1000236a:	1c19      	adds	r1, r3, #0
1000236c:	f7ff ff40 	bl	100021f0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
10002370:	687b      	ldr	r3, [r7, #4]
10002372:	695b      	ldr	r3, [r3, #20]
10002374:	1c18      	adds	r0, r3, #0
10002376:	2100      	movs	r1, #0
10002378:	f7ff ff48 	bl	1000220c <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
1000237c:	687b      	ldr	r3, [r7, #4]
1000237e:	691b      	ldr	r3, [r3, #16]
10002380:	689a      	ldr	r2, [r3, #8]
10002382:	687b      	ldr	r3, [r7, #4]
10002384:	68db      	ldr	r3, [r3, #12]
10002386:	1c10      	adds	r0, r2, #0
10002388:	1c19      	adds	r1, r3, #0
1000238a:	f7ff ff4d 	bl	10002228 <XMC_CCU4_EnableShadowTransfer>
}
1000238e:	46bd      	mov	sp, r7
10002390:	b002      	add	sp, #8
10002392:	bd80      	pop	{r7, pc}

10002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002394:	b580      	push	{r7, lr}
10002396:	b082      	sub	sp, #8
10002398:	af00      	add	r7, sp, #0
1000239a:	1c02      	adds	r2, r0, #0
1000239c:	1dfb      	adds	r3, r7, #7
1000239e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100023a0:	1dfb      	adds	r3, r7, #7
100023a2:	781b      	ldrb	r3, [r3, #0]
100023a4:	2b7f      	cmp	r3, #127	; 0x7f
100023a6:	d809      	bhi.n	100023bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100023a8:	4b06      	ldr	r3, [pc, #24]	; (100023c4 <__NVIC_EnableIRQ+0x30>)
100023aa:	1dfa      	adds	r2, r7, #7
100023ac:	7812      	ldrb	r2, [r2, #0]
100023ae:	1c11      	adds	r1, r2, #0
100023b0:	221f      	movs	r2, #31
100023b2:	400a      	ands	r2, r1
100023b4:	2101      	movs	r1, #1
100023b6:	4091      	lsls	r1, r2
100023b8:	1c0a      	adds	r2, r1, #0
100023ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100023bc:	46bd      	mov	sp, r7
100023be:	b002      	add	sp, #8
100023c0:	bd80      	pop	{r7, pc}
100023c2:	46c0      	nop			; (mov r8, r8)
100023c4:	e000e100 	.word	0xe000e100

100023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100023c8:	b5b0      	push	{r4, r5, r7, lr}
100023ca:	b082      	sub	sp, #8
100023cc:	af00      	add	r7, sp, #0
100023ce:	1c02      	adds	r2, r0, #0
100023d0:	6039      	str	r1, [r7, #0]
100023d2:	1dfb      	adds	r3, r7, #7
100023d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100023d6:	1dfb      	adds	r3, r7, #7
100023d8:	781b      	ldrb	r3, [r3, #0]
100023da:	2b7f      	cmp	r3, #127	; 0x7f
100023dc:	d827      	bhi.n	1000242e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100023de:	4c2d      	ldr	r4, [pc, #180]	; (10002494 <__NVIC_SetPriority+0xcc>)
100023e0:	1dfb      	adds	r3, r7, #7
100023e2:	781b      	ldrb	r3, [r3, #0]
100023e4:	b25b      	sxtb	r3, r3
100023e6:	089b      	lsrs	r3, r3, #2
100023e8:	492a      	ldr	r1, [pc, #168]	; (10002494 <__NVIC_SetPriority+0xcc>)
100023ea:	1dfa      	adds	r2, r7, #7
100023ec:	7812      	ldrb	r2, [r2, #0]
100023ee:	b252      	sxtb	r2, r2
100023f0:	0892      	lsrs	r2, r2, #2
100023f2:	32c0      	adds	r2, #192	; 0xc0
100023f4:	0092      	lsls	r2, r2, #2
100023f6:	5852      	ldr	r2, [r2, r1]
100023f8:	1df9      	adds	r1, r7, #7
100023fa:	7809      	ldrb	r1, [r1, #0]
100023fc:	1c08      	adds	r0, r1, #0
100023fe:	2103      	movs	r1, #3
10002400:	4001      	ands	r1, r0
10002402:	00c9      	lsls	r1, r1, #3
10002404:	1c08      	adds	r0, r1, #0
10002406:	21ff      	movs	r1, #255	; 0xff
10002408:	4081      	lsls	r1, r0
1000240a:	43c9      	mvns	r1, r1
1000240c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000240e:	683a      	ldr	r2, [r7, #0]
10002410:	0192      	lsls	r2, r2, #6
10002412:	20ff      	movs	r0, #255	; 0xff
10002414:	4002      	ands	r2, r0
10002416:	1df8      	adds	r0, r7, #7
10002418:	7800      	ldrb	r0, [r0, #0]
1000241a:	1c05      	adds	r5, r0, #0
1000241c:	2003      	movs	r0, #3
1000241e:	4028      	ands	r0, r5
10002420:	00c0      	lsls	r0, r0, #3
10002422:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002424:	430a      	orrs	r2, r1
10002426:	33c0      	adds	r3, #192	; 0xc0
10002428:	009b      	lsls	r3, r3, #2
1000242a:	511a      	str	r2, [r3, r4]
1000242c:	e02e      	b.n	1000248c <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000242e:	4c1a      	ldr	r4, [pc, #104]	; (10002498 <__NVIC_SetPriority+0xd0>)
10002430:	1dfb      	adds	r3, r7, #7
10002432:	781b      	ldrb	r3, [r3, #0]
10002434:	1c1a      	adds	r2, r3, #0
10002436:	230f      	movs	r3, #15
10002438:	4013      	ands	r3, r2
1000243a:	3b08      	subs	r3, #8
1000243c:	0899      	lsrs	r1, r3, #2
1000243e:	4a16      	ldr	r2, [pc, #88]	; (10002498 <__NVIC_SetPriority+0xd0>)
10002440:	1dfb      	adds	r3, r7, #7
10002442:	781b      	ldrb	r3, [r3, #0]
10002444:	1c18      	adds	r0, r3, #0
10002446:	230f      	movs	r3, #15
10002448:	4003      	ands	r3, r0
1000244a:	3b08      	subs	r3, #8
1000244c:	089b      	lsrs	r3, r3, #2
1000244e:	3306      	adds	r3, #6
10002450:	009b      	lsls	r3, r3, #2
10002452:	18d3      	adds	r3, r2, r3
10002454:	685b      	ldr	r3, [r3, #4]
10002456:	1dfa      	adds	r2, r7, #7
10002458:	7812      	ldrb	r2, [r2, #0]
1000245a:	1c10      	adds	r0, r2, #0
1000245c:	2203      	movs	r2, #3
1000245e:	4002      	ands	r2, r0
10002460:	00d2      	lsls	r2, r2, #3
10002462:	1c10      	adds	r0, r2, #0
10002464:	22ff      	movs	r2, #255	; 0xff
10002466:	4082      	lsls	r2, r0
10002468:	43d2      	mvns	r2, r2
1000246a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000246c:	683b      	ldr	r3, [r7, #0]
1000246e:	019b      	lsls	r3, r3, #6
10002470:	20ff      	movs	r0, #255	; 0xff
10002472:	4003      	ands	r3, r0
10002474:	1df8      	adds	r0, r7, #7
10002476:	7800      	ldrb	r0, [r0, #0]
10002478:	1c05      	adds	r5, r0, #0
1000247a:	2003      	movs	r0, #3
1000247c:	4028      	ands	r0, r5
1000247e:	00c0      	lsls	r0, r0, #3
10002480:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002482:	431a      	orrs	r2, r3
10002484:	1d8b      	adds	r3, r1, #6
10002486:	009b      	lsls	r3, r3, #2
10002488:	18e3      	adds	r3, r4, r3
1000248a:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
1000248c:	46bd      	mov	sp, r7
1000248e:	b002      	add	sp, #8
10002490:	bdb0      	pop	{r4, r5, r7, pc}
10002492:	46c0      	nop			; (mov r8, r8)
10002494:	e000e100 	.word	0xe000e100
10002498:	e000ed00 	.word	0xe000ed00

1000249c <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
1000249c:	b580      	push	{r7, lr}
1000249e:	b082      	sub	sp, #8
100024a0:	af00      	add	r7, sp, #0
100024a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
100024a4:	687b      	ldr	r3, [r7, #4]
100024a6:	789b      	ldrb	r3, [r3, #2]
100024a8:	b25b      	sxtb	r3, r3
100024aa:	1c18      	adds	r0, r3, #0
100024ac:	f7ff ff72 	bl	10002394 <__NVIC_EnableIRQ>
}
100024b0:	46bd      	mov	sp, r7
100024b2:	b002      	add	sp, #8
100024b4:	bd80      	pop	{r7, pc}
100024b6:	46c0      	nop			; (mov r8, r8)

100024b8 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
100024b8:	b580      	push	{r7, lr}
100024ba:	b082      	sub	sp, #8
100024bc:	af00      	add	r7, sp, #0
100024be:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
100024c0:	687b      	ldr	r3, [r7, #4]
100024c2:	789a      	ldrb	r2, [r3, #2]
100024c4:	687b      	ldr	r3, [r7, #4]
100024c6:	78db      	ldrb	r3, [r3, #3]
100024c8:	1c19      	adds	r1, r3, #0
100024ca:	b253      	sxtb	r3, r2
100024cc:	1c18      	adds	r0, r3, #0
100024ce:	f7ff ff7b 	bl	100023c8 <__NVIC_SetPriority>
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
100024d2:	687b      	ldr	r3, [r7, #4]
100024d4:	789b      	ldrb	r3, [r3, #2]
100024d6:	b2da      	uxtb	r2, r3
100024d8:	687b      	ldr	r3, [r7, #4]
100024da:	789b      	ldrb	r3, [r3, #2]
100024dc:	b25b      	sxtb	r3, r3
100024de:	021b      	lsls	r3, r3, #8
100024e0:	b299      	uxth	r1, r3
100024e2:	687b      	ldr	r3, [r7, #4]
100024e4:	881b      	ldrh	r3, [r3, #0]
100024e6:	b29b      	uxth	r3, r3
100024e8:	430b      	orrs	r3, r1
100024ea:	b29b      	uxth	r3, r3
100024ec:	b29b      	uxth	r3, r3
100024ee:	1c10      	adds	r0, r2, #0
100024f0:	1c19      	adds	r1, r3, #0
100024f2:	f7ff f8af 	bl	10001654 <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
100024f6:	687b      	ldr	r3, [r7, #4]
100024f8:	791b      	ldrb	r3, [r3, #4]
100024fa:	2b00      	cmp	r3, #0
100024fc:	d003      	beq.n	10002506 <INTERRUPT_Init+0x4e>
  {
    INTERRUPT_Enable(handler);
100024fe:	687b      	ldr	r3, [r7, #4]
10002500:	1c18      	adds	r0, r3, #0
10002502:	f7ff ffcb 	bl	1000249c <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
10002506:	2300      	movs	r3, #0
}
10002508:	1c18      	adds	r0, r3, #0
1000250a:	46bd      	mov	sp, r7
1000250c:	b002      	add	sp, #8
1000250e:	bd80      	pop	{r7, pc}

10002510 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10002510:	b580      	push	{r7, lr}
10002512:	b082      	sub	sp, #8
10002514:	af00      	add	r7, sp, #0
10002516:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10002518:	687b      	ldr	r3, [r7, #4]
1000251a:	2280      	movs	r2, #128	; 0x80
1000251c:	0052      	lsls	r2, r2, #1
1000251e:	60da      	str	r2, [r3, #12]
}
10002520:	46bd      	mov	sp, r7
10002522:	b002      	add	sp, #8
10002524:	bd80      	pop	{r7, pc}
10002526:	46c0      	nop			; (mov r8, r8)

10002528 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10002528:	b580      	push	{r7, lr}
1000252a:	b082      	sub	sp, #8
1000252c:	af00      	add	r7, sp, #0
1000252e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10002530:	687b      	ldr	r3, [r7, #4]
10002532:	7b5b      	ldrb	r3, [r3, #13]
10002534:	2201      	movs	r2, #1
10002536:	4053      	eors	r3, r2
10002538:	b2db      	uxtb	r3, r3
1000253a:	2b00      	cmp	r3, #0
1000253c:	d00f      	beq.n	1000255e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
1000253e:	687b      	ldr	r3, [r7, #4]
10002540:	689a      	ldr	r2, [r3, #8]
10002542:	687b      	ldr	r3, [r7, #4]
10002544:	7b1b      	ldrb	r3, [r3, #12]
10002546:	1c10      	adds	r0, r2, #0
10002548:	1c19      	adds	r1, r3, #0
1000254a:	f7ff fc2d 	bl	10001da8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
1000254e:	687b      	ldr	r3, [r7, #4]
10002550:	689b      	ldr	r3, [r3, #8]
10002552:	1c18      	adds	r0, r3, #0
10002554:	f7ff ffdc 	bl	10002510 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
10002558:	687b      	ldr	r3, [r7, #4]
1000255a:	2201      	movs	r2, #1
1000255c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
1000255e:	2300      	movs	r3, #0
}
10002560:	1c18      	adds	r0, r3, #0
10002562:	46bd      	mov	sp, r7
10002564:	b002      	add	sp, #8
10002566:	bd80      	pop	{r7, pc}

10002568 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
10002568:	b580      	push	{r7, lr}
1000256a:	b084      	sub	sp, #16
1000256c:	af00      	add	r7, sp, #0
1000256e:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
10002570:	230f      	movs	r3, #15
10002572:	18fb      	adds	r3, r7, r3
10002574:	2200      	movs	r2, #0
10002576:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
10002578:	687b      	ldr	r3, [r7, #4]
1000257a:	7a5b      	ldrb	r3, [r3, #9]
1000257c:	2201      	movs	r2, #1
1000257e:	4053      	eors	r3, r2
10002580:	b2db      	uxtb	r3, r3
10002582:	2b00      	cmp	r3, #0
10002584:	d011      	beq.n	100025aa <GLOBAL_CAN_Init+0x42>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
10002586:	687b      	ldr	r3, [r7, #4]
10002588:	6859      	ldr	r1, [r3, #4]
1000258a:	687b      	ldr	r3, [r7, #4]
1000258c:	7a1a      	ldrb	r2, [r3, #8]
1000258e:	687b      	ldr	r3, [r7, #4]
10002590:	681b      	ldr	r3, [r3, #0]
10002592:	1c08      	adds	r0, r1, #0
10002594:	1c11      	adds	r1, r2, #0
10002596:	1c1a      	adds	r2, r3, #0
10002598:	f7ff fa4c 	bl	10001a34 <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
1000259c:	687b      	ldr	r3, [r7, #4]
1000259e:	2201      	movs	r2, #1
100025a0:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
100025a2:	230f      	movs	r3, #15
100025a4:	18fb      	adds	r3, r7, r3
100025a6:	2200      	movs	r2, #0
100025a8:	701a      	strb	r2, [r3, #0]
  }
  return (status);
100025aa:	230f      	movs	r3, #15
100025ac:	18fb      	adds	r3, r7, r3
100025ae:	781b      	ldrb	r3, [r3, #0]

}
100025b0:	1c18      	adds	r0, r3, #0
100025b2:	46bd      	mov	sp, r7
100025b4:	b004      	add	sp, #16
100025b6:	bd80      	pop	{r7, pc}

100025b8 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
100025b8:	b580      	push	{r7, lr}
100025ba:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
100025bc:	4b03      	ldr	r3, [pc, #12]	; (100025cc <SystemCoreSetup+0x14>)
100025be:	4a03      	ldr	r2, [pc, #12]	; (100025cc <SystemCoreSetup+0x14>)
100025c0:	6e92      	ldr	r2, [r2, #104]	; 0x68
100025c2:	2101      	movs	r1, #1
100025c4:	438a      	bics	r2, r1
100025c6:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
100025c8:	46bd      	mov	sp, r7
100025ca:	bd80      	pop	{r7, pc}
100025cc:	40010000 	.word	0x40010000

100025d0 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
100025d0:	b580      	push	{r7, lr}
100025d2:	b084      	sub	sp, #16
100025d4:	af00      	add	r7, sp, #0
100025d6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
100025d8:	230f      	movs	r3, #15
100025da:	18fb      	adds	r3, r7, r3
100025dc:	2200      	movs	r2, #0
100025de:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100025e0:	230e      	movs	r3, #14
100025e2:	18fb      	adds	r3, r7, r3
100025e4:	2200      	movs	r2, #0
100025e6:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
100025e8:	230d      	movs	r3, #13
100025ea:	18fb      	adds	r3, r7, r3
100025ec:	2200      	movs	r2, #0
100025ee:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100025f0:	230c      	movs	r3, #12
100025f2:	18fb      	adds	r3, r7, r3
100025f4:	2200      	movs	r2, #0
100025f6:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
100025f8:	230b      	movs	r3, #11
100025fa:	18fb      	adds	r3, r7, r3
100025fc:	2200      	movs	r2, #0
100025fe:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
10002600:	687b      	ldr	r3, [r7, #4]
10002602:	781b      	ldrb	r3, [r3, #0]
10002604:	2201      	movs	r2, #1
10002606:	4053      	eors	r3, r2
10002608:	b2db      	uxtb	r3, r3
1000260a:	2b00      	cmp	r3, #0
1000260c:	d01b      	beq.n	10002646 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
1000260e:	230e      	movs	r3, #14
10002610:	18fa      	adds	r2, r7, r3
10002612:	230d      	movs	r3, #13
10002614:	18fb      	adds	r3, r7, r3
10002616:	7812      	ldrb	r2, [r2, #0]
10002618:	781b      	ldrb	r3, [r3, #0]
1000261a:	4313      	orrs	r3, r2
1000261c:	b2da      	uxtb	r2, r3
1000261e:	230c      	movs	r3, #12
10002620:	18fb      	adds	r3, r7, r3
10002622:	781b      	ldrb	r3, [r3, #0]
10002624:	4313      	orrs	r3, r2
10002626:	b2d9      	uxtb	r1, r3
10002628:	230f      	movs	r3, #15
1000262a:	18fb      	adds	r3, r7, r3
1000262c:	220b      	movs	r2, #11
1000262e:	18ba      	adds	r2, r7, r2
10002630:	7812      	ldrb	r2, [r2, #0]
10002632:	430a      	orrs	r2, r1
10002634:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
10002636:	230f      	movs	r3, #15
10002638:	18fb      	adds	r3, r7, r3
1000263a:	781b      	ldrb	r3, [r3, #0]
1000263c:	2b00      	cmp	r3, #0
1000263e:	d102      	bne.n	10002646 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10002640:	687b      	ldr	r3, [r7, #4]
10002642:	2201      	movs	r2, #1
10002644:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10002646:	230f      	movs	r3, #15
10002648:	18fb      	adds	r3, r7, r3
1000264a:	781b      	ldrb	r3, [r3, #0]
}
1000264c:	1c18      	adds	r0, r3, #0
1000264e:	46bd      	mov	sp, r7
10002650:	b004      	add	sp, #16
10002652:	bd80      	pop	{r7, pc}

10002654 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10002654:	b590      	push	{r4, r7, lr}
10002656:	b085      	sub	sp, #20
10002658:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
1000265a:	1c3b      	adds	r3, r7, #0
1000265c:	4a05      	ldr	r2, [pc, #20]	; (10002674 <SystemCoreClockSetup+0x20>)
1000265e:	ca13      	ldmia	r2!, {r0, r1, r4}
10002660:	c313      	stmia	r3!, {r0, r1, r4}
10002662:	6812      	ldr	r2, [r2, #0]
10002664:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10002666:	1c3b      	adds	r3, r7, #0
10002668:	1c18      	adds	r0, r3, #0
1000266a:	f7fe fe65 	bl	10001338 <XMC_SCU_CLOCK_Init>
}
1000266e:	46bd      	mov	sp, r7
10002670:	b005      	add	sp, #20
10002672:	bd90      	pop	{r4, r7, pc}
10002674:	10004b8c 	.word	0x10004b8c

10002678 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10002678:	b580      	push	{r7, lr}
1000267a:	b082      	sub	sp, #8
1000267c:	af00      	add	r7, sp, #0
1000267e:	6078      	str	r0, [r7, #4]
10002680:	1c0a      	adds	r2, r1, #0
10002682:	1cfb      	adds	r3, r7, #3
10002684:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
10002686:	1cfb      	adds	r3, r7, #3
10002688:	781b      	ldrb	r3, [r3, #0]
1000268a:	2201      	movs	r2, #1
1000268c:	409a      	lsls	r2, r3
1000268e:	687b      	ldr	r3, [r7, #4]
10002690:	60da      	str	r2, [r3, #12]
}
10002692:	46bd      	mov	sp, r7
10002694:	b002      	add	sp, #8
10002696:	bd80      	pop	{r7, pc}

10002698 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10002698:	b580      	push	{r7, lr}
1000269a:	b082      	sub	sp, #8
1000269c:	af00      	add	r7, sp, #0
1000269e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
100026a0:	687b      	ldr	r3, [r7, #4]
100026a2:	2201      	movs	r2, #1
100026a4:	60da      	str	r2, [r3, #12]
}
100026a6:	46bd      	mov	sp, r7
100026a8:	b002      	add	sp, #8
100026aa:	bd80      	pop	{r7, pc}

100026ac <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
100026ac:	b580      	push	{r7, lr}
100026ae:	b082      	sub	sp, #8
100026b0:	af00      	add	r7, sp, #0
100026b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
100026b4:	687b      	ldr	r3, [r7, #4]
100026b6:	2202      	movs	r2, #2
100026b8:	611a      	str	r2, [r3, #16]
}
100026ba:	46bd      	mov	sp, r7
100026bc:	b002      	add	sp, #8
100026be:	bd80      	pop	{r7, pc}

100026c0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
100026c0:	b580      	push	{r7, lr}
100026c2:	b082      	sub	sp, #8
100026c4:	af00      	add	r7, sp, #0
100026c6:	6078      	str	r0, [r7, #4]
100026c8:	1c0a      	adds	r2, r1, #0
100026ca:	1cbb      	adds	r3, r7, #2
100026cc:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
100026ce:	1cbb      	adds	r3, r7, #2
100026d0:	881a      	ldrh	r2, [r3, #0]
100026d2:	687b      	ldr	r3, [r7, #4]
100026d4:	635a      	str	r2, [r3, #52]	; 0x34
}
100026d6:	46bd      	mov	sp, r7
100026d8:	b002      	add	sp, #8
100026da:	bd80      	pop	{r7, pc}

100026dc <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
100026dc:	b580      	push	{r7, lr}
100026de:	b082      	sub	sp, #8
100026e0:	af00      	add	r7, sp, #0
100026e2:	6078      	str	r0, [r7, #4]
100026e4:	1c0a      	adds	r2, r1, #0
100026e6:	1cbb      	adds	r3, r7, #2
100026e8:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
100026ea:	1cbb      	adds	r3, r7, #2
100026ec:	881a      	ldrh	r2, [r3, #0]
100026ee:	687b      	ldr	r3, [r7, #4]
100026f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
100026f2:	46bd      	mov	sp, r7
100026f4:	b002      	add	sp, #8
100026f6:	bd80      	pop	{r7, pc}

100026f8 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
100026f8:	b580      	push	{r7, lr}
100026fa:	b082      	sub	sp, #8
100026fc:	af00      	add	r7, sp, #0
100026fe:	6078      	str	r0, [r7, #4]
10002700:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10002702:	687b      	ldr	r3, [r7, #4]
10002704:	683a      	ldr	r2, [r7, #0]
10002706:	611a      	str	r2, [r3, #16]
}
10002708:	46bd      	mov	sp, r7
1000270a:	b002      	add	sp, #8
1000270c:	bd80      	pop	{r7, pc}
1000270e:	46c0      	nop			; (mov r8, r8)

10002710 <CAPTURE_Init>:
  return version;
}

/* This function initializes a capture APP based on user configuration. */
CAPTURE_STATUS_t CAPTURE_Init(CAPTURE_t *const handler)
{
10002710:	b590      	push	{r4, r7, lr}
10002712:	b085      	sub	sp, #20
10002714:	af00      	add	r7, sp, #0
10002716:	6078      	str	r0, [r7, #4]
  CAPTURE_STATUS_t status;

  XMC_ASSERT ("CAPTURE_Init:handler NULL", (handler != NULL));

  status = CAPTURE_STATUS_SUCCESS;
10002718:	230f      	movs	r3, #15
1000271a:	18fb      	adds	r3, r7, r3
1000271c:	2200      	movs	r2, #0
1000271e:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handler->initialized)
10002720:	687b      	ldr	r3, [r7, #4]
10002722:	2231      	movs	r2, #49	; 0x31
10002724:	5c9b      	ldrb	r3, [r3, r2]
10002726:	2201      	movs	r2, #1
10002728:	4053      	eors	r3, r2
1000272a:	b2db      	uxtb	r3, r3
1000272c:	2b00      	cmp	r3, #0
1000272e:	d038      	beq.n	100027a2 <CAPTURE_Init+0x92>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
10002730:	687b      	ldr	r3, [r7, #4]
10002732:	222d      	movs	r2, #45	; 0x2d
10002734:	5c9b      	ldrb	r3, [r3, r2]
10002736:	2b00      	cmp	r3, #0
10002738:	d111      	bne.n	1000275e <CAPTURE_Init+0x4e>
    {
      status = (CAPTURE_STATUS_t) GLOBAL_CCU4_Init (handler->global_ccu4_handler);
1000273a:	687b      	ldr	r3, [r7, #4]
1000273c:	695b      	ldr	r3, [r3, #20]
1000273e:	220f      	movs	r2, #15
10002740:	18bc      	adds	r4, r7, r2
10002742:	1c18      	adds	r0, r3, #0
10002744:	f7ff fef0 	bl	10002528 <GLOBAL_CCU4_Init>
10002748:	1c03      	adds	r3, r0, #0
1000274a:	7023      	strb	r3, [r4, #0]
      if (status == CAPTURE_STATUS_SUCCESS)
1000274c:	230f      	movs	r3, #15
1000274e:	18fb      	adds	r3, r7, r3
10002750:	781b      	ldrb	r3, [r3, #0]
10002752:	2b00      	cmp	r3, #0
10002754:	d103      	bne.n	1000275e <CAPTURE_Init+0x4e>
      {
        /* Configure CCU4 capture for the required time tick settings */
        CAPTURE_CCU4_lInit (handler);
10002756:	687b      	ldr	r3, [r7, #4]
10002758:	1c18      	adds	r0, r3, #0
1000275a:	f000 f8fb 	bl	10002954 <CAPTURE_CCU4_lInit>
      }
    }
#endif

#ifdef CAPTURE_GPIO_USED
    if (handler->input != NULL)
1000275e:	687b      	ldr	r3, [r7, #4]
10002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002762:	2b00      	cmp	r3, #0
10002764:	d00c      	beq.n	10002780 <CAPTURE_Init+0x70>
    {
      XMC_GPIO_Init (handler->input->port, handler->input->pin, handler->input_pin_config);
10002766:	687b      	ldr	r3, [r7, #4]
10002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000276a:	6819      	ldr	r1, [r3, #0]
1000276c:	687b      	ldr	r3, [r7, #4]
1000276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002770:	791a      	ldrb	r2, [r3, #4]
10002772:	687b      	ldr	r3, [r7, #4]
10002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002776:	1c08      	adds	r0, r1, #0
10002778:	1c11      	adds	r1, r2, #0
1000277a:	1c1a      	adds	r2, r3, #0
1000277c:	f7fe fd04 	bl	10001188 <XMC_GPIO_Init>

    }
#endif

    /* update the initialization flag as true for particular instance. */
    handler->initialized = true;
10002780:	687b      	ldr	r3, [r7, #4]
10002782:	2231      	movs	r2, #49	; 0x31
10002784:	2101      	movs	r1, #1
10002786:	5499      	strb	r1, [r3, r2]

    /* Check whether the start of the timer is enabled during initialization or not */
    if (handler->start_control == true)
10002788:	687b      	ldr	r3, [r7, #4]
1000278a:	222f      	movs	r2, #47	; 0x2f
1000278c:	5c9b      	ldrb	r3, [r3, r2]
1000278e:	2b00      	cmp	r3, #0
10002790:	d007      	beq.n	100027a2 <CAPTURE_Init+0x92>
    {
      status = CAPTURE_Start(handler);
10002792:	230f      	movs	r3, #15
10002794:	18fc      	adds	r4, r7, r3
10002796:	687b      	ldr	r3, [r7, #4]
10002798:	1c18      	adds	r0, r3, #0
1000279a:	f000 f809 	bl	100027b0 <CAPTURE_Start>
1000279e:	1c03      	adds	r3, r0, #0
100027a0:	7023      	strb	r3, [r4, #0]
    }
  }

  return (status);
100027a2:	230f      	movs	r3, #15
100027a4:	18fb      	adds	r3, r7, r3
100027a6:	781b      	ldrb	r3, [r3, #0]
}
100027a8:	1c18      	adds	r0, r3, #0
100027aa:	46bd      	mov	sp, r7
100027ac:	b005      	add	sp, #20
100027ae:	bd90      	pop	{r4, r7, pc}

100027b0 <CAPTURE_Start>:

/* This function starts the capture timer. */
CAPTURE_STATUS_t CAPTURE_Start(const CAPTURE_t *const handler)
{
100027b0:	b580      	push	{r7, lr}
100027b2:	b084      	sub	sp, #16
100027b4:	af00      	add	r7, sp, #0
100027b6:	6078      	str	r0, [r7, #4]
  CAPTURE_STATUS_t status;

  XMC_ASSERT ("CAPTURE_Start:handler NULL", (handler != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handler->initialized)
100027b8:	687b      	ldr	r3, [r7, #4]
100027ba:	2231      	movs	r2, #49	; 0x31
100027bc:	5c9b      	ldrb	r3, [r3, r2]
100027be:	2b00      	cmp	r3, #0
100027c0:	d020      	beq.n	10002804 <CAPTURE_Start+0x54>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
100027c2:	687b      	ldr	r3, [r7, #4]
100027c4:	222d      	movs	r2, #45	; 0x2d
100027c6:	5c9b      	ldrb	r3, [r3, r2]
100027c8:	2b00      	cmp	r3, #0
100027ca:	d116      	bne.n	100027fa <CAPTURE_Start+0x4a>
    {
      (void)handler->ccu4_slice_ptr->CV[0];
100027cc:	687b      	ldr	r3, [r7, #4]
100027ce:	699b      	ldr	r3, [r3, #24]
100027d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      (void)handler->ccu4_slice_ptr->CV[1];
100027d2:	687b      	ldr	r3, [r7, #4]
100027d4:	699b      	ldr	r3, [r3, #24]
100027d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      (void)handler->ccu4_slice_ptr->CV[2];
100027d8:	687b      	ldr	r3, [r7, #4]
100027da:	699b      	ldr	r3, [r3, #24]
100027dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
      (void)handler->ccu4_slice_ptr->CV[3];
100027de:	687b      	ldr	r3, [r7, #4]
100027e0:	699b      	ldr	r3, [r3, #24]
100027e2:	2280      	movs	r2, #128	; 0x80
100027e4:	589b      	ldr	r3, [r3, r2]

      /* Start the capture manually */
      XMC_CCU4_SLICE_ClearTimer (handler->ccu4_slice_ptr);
100027e6:	687b      	ldr	r3, [r7, #4]
100027e8:	699b      	ldr	r3, [r3, #24]
100027ea:	1c18      	adds	r0, r3, #0
100027ec:	f7ff ff5e 	bl	100026ac <XMC_CCU4_SLICE_ClearTimer>
      /* Start the capture manually */
      XMC_CCU4_SLICE_StartTimer (handler->ccu4_slice_ptr);
100027f0:	687b      	ldr	r3, [r7, #4]
100027f2:	699b      	ldr	r3, [r3, #24]
100027f4:	1c18      	adds	r0, r3, #0
100027f6:	f7ff ff4f 	bl	10002698 <XMC_CCU4_SLICE_StartTimer>
      XMC_CCU8_SLICE_ClearTimer (handler->ccu8_slice_ptr);
      /* Start the capture manually */
      XMC_CCU8_SLICE_StartTimer (handler->ccu8_slice_ptr);
    }
#endif
    status = CAPTURE_STATUS_SUCCESS;
100027fa:	230f      	movs	r3, #15
100027fc:	18fb      	adds	r3, r7, r3
100027fe:	2200      	movs	r2, #0
10002800:	701a      	strb	r2, [r3, #0]
10002802:	e003      	b.n	1000280c <CAPTURE_Start+0x5c>
    }
#endif
  }
  else
  {
    status = CAPTURE_STATUS_FAILURE;
10002804:	230f      	movs	r3, #15
10002806:	18fb      	adds	r3, r7, r3
10002808:	2201      	movs	r2, #1
1000280a:	701a      	strb	r2, [r3, #0]
  }

  return (status);
1000280c:	230f      	movs	r3, #15
1000280e:	18fb      	adds	r3, r7, r3
10002810:	781b      	ldrb	r3, [r3, #0]
}
10002812:	1c18      	adds	r0, r3, #0
10002814:	46bd      	mov	sp, r7
10002816:	b004      	add	sp, #16
10002818:	bd80      	pop	{r7, pc}
1000281a:	46c0      	nop			; (mov r8, r8)

1000281c <CAPTURE_GetCapturedTimeInNanoSec>:
  return (status);
}


CAPTURE_STATUS_t CAPTURE_GetCapturedTimeInNanoSec(const CAPTURE_t *const handler, uint32_t *const captured_time)
{
1000281c:	b590      	push	{r4, r7, lr}
1000281e:	b087      	sub	sp, #28
10002820:	af00      	add	r7, sp, #0
10002822:	6078      	str	r0, [r7, #4]
10002824:	6039      	str	r1, [r7, #0]
  CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
10002826:	2317      	movs	r3, #23
10002828:	18fb      	adds	r3, r7, r3
1000282a:	2200      	movs	r2, #0
1000282c:	701a      	strb	r2, [r3, #0]
  CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
1000282e:	2316      	movs	r3, #22
10002830:	18fb      	adds	r3, r7, r3
10002832:	2200      	movs	r2, #0
10002834:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT ("CAPTURE_GetCapturedTimeInNanoSec:handler NULL", (handler != NULL));
  XMC_ASSERT ("CAPTURE_GetCapturedTimeInNanoSec:NULL data pointer", (captured_time != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handler->initialized)
10002836:	687b      	ldr	r3, [r7, #4]
10002838:	2231      	movs	r2, #49	; 0x31
1000283a:	5c9b      	ldrb	r3, [r3, r2]
1000283c:	2b00      	cmp	r3, #0
1000283e:	d100      	bne.n	10002842 <CAPTURE_GetCapturedTimeInNanoSec+0x26>
10002840:	e07c      	b.n	1000293c <CAPTURE_GetCapturedTimeInNanoSec+0x120>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
10002842:	687b      	ldr	r3, [r7, #4]
10002844:	222d      	movs	r2, #45	; 0x2d
10002846:	5c9b      	ldrb	r3, [r3, r2]
10002848:	2b00      	cmp	r3, #0
1000284a:	d000      	beq.n	1000284e <CAPTURE_GetCapturedTimeInNanoSec+0x32>
1000284c:	e07a      	b.n	10002944 <CAPTURE_GetCapturedTimeInNanoSec+0x128>
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
1000284e:	687b      	ldr	r3, [r7, #4]
10002850:	222e      	movs	r2, #46	; 0x2e
10002852:	5c9b      	ldrb	r3, [r3, r2]
10002854:	2b00      	cmp	r3, #0
10002856:	d004      	beq.n	10002862 <CAPTURE_GetCapturedTimeInNanoSec+0x46>
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
10002858:	687b      	ldr	r3, [r7, #4]
1000285a:	222e      	movs	r2, #46	; 0x2e
1000285c:	5c9b      	ldrb	r3, [r3, r2]
  if (true == handler->initialized)
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
1000285e:	2b03      	cmp	r3, #3
10002860:	d14d      	bne.n	100028fe <CAPTURE_GetCapturedTimeInNanoSec+0xe2>
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
      {
        uint32_t captured_time_low_reg = 0U;
10002862:	2300      	movs	r3, #0
10002864:	613b      	str	r3, [r7, #16]
        uint32_t captured_time_high_reg = 0U;
10002866:	2300      	movs	r3, #0
10002868:	60fb      	str	r3, [r7, #12]

        status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
1000286a:	687b      	ldr	r3, [r7, #4]
1000286c:	699a      	ldr	r2, [r3, #24]
1000286e:	2317      	movs	r3, #23
10002870:	18fc      	adds	r4, r7, r3
10002872:	2310      	movs	r3, #16
10002874:	18fb      	adds	r3, r7, r3
10002876:	1c10      	adds	r0, r2, #0
10002878:	2100      	movs	r1, #0
1000287a:	1c1a      	adds	r2, r3, #0
1000287c:	f000 f99a 	bl	10002bb4 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
10002880:	1c03      	adds	r3, r0, #0
10002882:	7023      	strb	r3, [r4, #0]
                                                                  XMC_CCU4_SLICE_CAP_REG_SET_LOW,
                                                                  &captured_time_low_reg);

        status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
10002884:	687b      	ldr	r3, [r7, #4]
10002886:	699a      	ldr	r2, [r3, #24]
10002888:	2316      	movs	r3, #22
1000288a:	18fc      	adds	r4, r7, r3
1000288c:	230c      	movs	r3, #12
1000288e:	18fb      	adds	r3, r7, r3
10002890:	1c10      	adds	r0, r2, #0
10002892:	2101      	movs	r1, #1
10002894:	1c1a      	adds	r2, r3, #0
10002896:	f000 f98d 	bl	10002bb4 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
1000289a:	1c03      	adds	r3, r0, #0
1000289c:	7023      	strb	r3, [r4, #0]
                                                                   XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
                                                                   &captured_time_high_reg);

        /*calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_low_reg, true);
1000289e:	687a      	ldr	r2, [r7, #4]
100028a0:	2310      	movs	r3, #16
100028a2:	18fb      	adds	r3, r7, r3
100028a4:	1c10      	adds	r0, r2, #0
100028a6:	1c19      	adds	r1, r3, #0
100028a8:	2201      	movs	r2, #1
100028aa:	f000 f8af 	bl	10002a0c <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
        captured_time_low_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_time_low_reg);
100028ae:	693b      	ldr	r3, [r7, #16]
100028b0:	687a      	ldr	r2, [r7, #4]
100028b2:	1c10      	adds	r0, r2, #0
100028b4:	1c19      	adds	r1, r3, #0
100028b6:	f000 f911 	bl	10002adc <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
100028ba:	1c03      	adds	r3, r0, #0
100028bc:	613b      	str	r3, [r7, #16]

        /* calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_high_reg, false);
100028be:	687a      	ldr	r2, [r7, #4]
100028c0:	230c      	movs	r3, #12
100028c2:	18fb      	adds	r3, r7, r3
100028c4:	1c10      	adds	r0, r2, #0
100028c6:	1c19      	adds	r1, r3, #0
100028c8:	2200      	movs	r2, #0
100028ca:	f000 f89f 	bl	10002a0c <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured_time_high_reg**/
        captured_time_high_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_time_high_reg);
100028ce:	68fb      	ldr	r3, [r7, #12]
100028d0:	687a      	ldr	r2, [r7, #4]
100028d2:	1c10      	adds	r0, r2, #0
100028d4:	1c19      	adds	r1, r3, #0
100028d6:	f000 f901 	bl	10002adc <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
100028da:	1c03      	adds	r3, r0, #0
100028dc:	60fb      	str	r3, [r7, #12]

        /* add both high and lower register value*/
        *captured_time = captured_time_low_reg + captured_time_high_reg;
100028de:	693a      	ldr	r2, [r7, #16]
100028e0:	68fb      	ldr	r3, [r7, #12]
100028e2:	18d2      	adds	r2, r2, r3
100028e4:	683b      	ldr	r3, [r7, #0]
100028e6:	601a      	str	r2, [r3, #0]

        if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
100028e8:	2316      	movs	r3, #22
100028ea:	18fb      	adds	r3, r7, r3
100028ec:	781b      	ldrb	r3, [r3, #0]
100028ee:	2b02      	cmp	r3, #2
100028f0:	d104      	bne.n	100028fc <CAPTURE_GetCapturedTimeInNanoSec+0xe0>
        {
          status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
100028f2:	2317      	movs	r3, #23
100028f4:	18fb      	adds	r3, r7, r3
100028f6:	2202      	movs	r2, #2
100028f8:	701a      	strb	r2, [r3, #0]
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
      {
100028fa:	e01e      	b.n	1000293a <CAPTURE_GetCapturedTimeInNanoSec+0x11e>
100028fc:	e01d      	b.n	1000293a <CAPTURE_GetCapturedTimeInNanoSec+0x11e>
          status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
        }
      }
      else
      {
        status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
100028fe:	687b      	ldr	r3, [r7, #4]
10002900:	699a      	ldr	r2, [r3, #24]
10002902:	2317      	movs	r3, #23
10002904:	18fc      	adds	r4, r7, r3
10002906:	683b      	ldr	r3, [r7, #0]
10002908:	1c10      	adds	r0, r2, #0
1000290a:	2101      	movs	r1, #1
1000290c:	1c1a      	adds	r2, r3, #0
1000290e:	f000 f951 	bl	10002bb4 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
10002912:	1c03      	adds	r3, r0, #0
10002914:	7023      	strb	r3, [r4, #0]
                                                                  XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
                                                                  captured_time);

        /* calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, captured_time, true);
10002916:	687a      	ldr	r2, [r7, #4]
10002918:	683b      	ldr	r3, [r7, #0]
1000291a:	1c10      	adds	r0, r2, #0
1000291c:	1c19      	adds	r1, r3, #0
1000291e:	2201      	movs	r2, #1
10002920:	f000 f874 	bl	10002a0c <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
        *captured_time = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, *captured_time);
10002924:	683b      	ldr	r3, [r7, #0]
10002926:	681b      	ldr	r3, [r3, #0]
10002928:	687a      	ldr	r2, [r7, #4]
1000292a:	1c10      	adds	r0, r2, #0
1000292c:	1c19      	adds	r1, r3, #0
1000292e:	f000 f8d5 	bl	10002adc <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
10002932:	1c02      	adds	r2, r0, #0
10002934:	683b      	ldr	r3, [r7, #0]
10002936:	601a      	str	r2, [r3, #0]
10002938:	e004      	b.n	10002944 <CAPTURE_GetCapturedTimeInNanoSec+0x128>
1000293a:	e003      	b.n	10002944 <CAPTURE_GetCapturedTimeInNanoSec+0x128>
    }
#endif
  }
  else
  {
    status = CAPTURE_STATUS_FAILURE;
1000293c:	2317      	movs	r3, #23
1000293e:	18fb      	adds	r3, r7, r3
10002940:	2201      	movs	r2, #1
10002942:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10002944:	2317      	movs	r3, #23
10002946:	18fb      	adds	r3, r7, r3
10002948:	781b      	ldrb	r3, [r3, #0]
}
1000294a:	1c18      	adds	r0, r3, #0
1000294c:	46bd      	mov	sp, r7
1000294e:	b007      	add	sp, #28
10002950:	bd90      	pop	{r4, r7, pc}
10002952:	46c0      	nop			; (mov r8, r8)

10002954 <CAPTURE_CCU4_lInit>:
/*********************************************************************************************************************
* PRIVATE API IMPLEMENTATION
**********************************************************************************************************************/
#ifdef CAPTURE_CCU4_USED
static void CAPTURE_CCU4_lInit(const CAPTURE_t *const handler)
{
10002954:	b580      	push	{r7, lr}
10002956:	b082      	sub	sp, #8
10002958:	af00      	add	r7, sp, #0
1000295a:	6078      	str	r0, [r7, #4]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CaptureInit(handler->ccu4_slice_ptr, handler->ccu4_slice_config_ptr);
1000295c:	687b      	ldr	r3, [r7, #4]
1000295e:	699a      	ldr	r2, [r3, #24]
10002960:	687b      	ldr	r3, [r7, #4]
10002962:	69db      	ldr	r3, [r3, #28]
10002964:	1c10      	adds	r0, r2, #0
10002966:	1c19      	adds	r1, r3, #0
10002968:	f7ff fa76 	bl	10001e58 <XMC_CCU4_SLICE_CaptureInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  CAPTURE_CCU4_lShadowTransfer(handler);
1000296c:	687b      	ldr	r3, [r7, #4]
1000296e:	1c18      	adds	r0, r3, #0
10002970:	f000 f82c 	bl	100029cc <CAPTURE_CCU4_lShadowTransfer>

  /************Configure External Events***************/
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0, handler->ccu4_event0_ptr);
10002974:	687b      	ldr	r3, [r7, #4]
10002976:	699a      	ldr	r2, [r3, #24]
10002978:	687b      	ldr	r3, [r7, #4]
1000297a:	68db      	ldr	r3, [r3, #12]
1000297c:	1c10      	adds	r0, r2, #0
1000297e:	2101      	movs	r1, #1
10002980:	1c1a      	adds	r2, r3, #0
10002982:	f7ff fac1 	bl	10001f08 <XMC_CCU4_SLICE_ConfigureEvent>
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1, handler->ccu4_event1_ptr);
10002986:	687b      	ldr	r3, [r7, #4]
10002988:	699a      	ldr	r2, [r3, #24]
1000298a:	687b      	ldr	r3, [r7, #4]
1000298c:	691b      	ldr	r3, [r3, #16]
1000298e:	1c10      	adds	r0, r2, #0
10002990:	2102      	movs	r1, #2
10002992:	1c1a      	adds	r2, r3, #0
10002994:	f7ff fab8 	bl	10001f08 <XMC_CCU4_SLICE_ConfigureEvent>
  XMC_CCU4_SLICE_Capture0Config(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0);
10002998:	687b      	ldr	r3, [r7, #4]
1000299a:	699b      	ldr	r3, [r3, #24]
1000299c:	1c18      	adds	r0, r3, #0
1000299e:	2101      	movs	r1, #1
100029a0:	f7ff fa7e 	bl	10001ea0 <XMC_CCU4_SLICE_Capture0Config>
  XMC_CCU4_SLICE_Capture1Config(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1);
100029a4:	687b      	ldr	r3, [r7, #4]
100029a6:	699b      	ldr	r3, [r3, #24]
100029a8:	1c18      	adds	r0, r3, #0
100029aa:	2102      	movs	r1, #2
100029ac:	f7ff fa92 	bl	10001ed4 <XMC_CCU4_SLICE_Capture1Config>
    XMC_CCU4_SLICE_EnableEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
  }
  #endif

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handler->global_ccu4_handler->module_ptr, handler->ccu_slice_number);
100029b0:	687b      	ldr	r3, [r7, #4]
100029b2:	695b      	ldr	r3, [r3, #20]
100029b4:	6899      	ldr	r1, [r3, #8]
100029b6:	687b      	ldr	r3, [r7, #4]
100029b8:	222c      	movs	r2, #44	; 0x2c
100029ba:	5c9b      	ldrb	r3, [r3, r2]
100029bc:	1c08      	adds	r0, r1, #0
100029be:	1c19      	adds	r1, r3, #0
100029c0:	f7ff fe5a 	bl	10002678 <XMC_CCU4_EnableClock>
}
100029c4:	46bd      	mov	sp, r7
100029c6:	b002      	add	sp, #8
100029c8:	bd80      	pop	{r7, pc}
100029ca:	46c0      	nop			; (mov r8, r8)

100029cc <CAPTURE_CCU4_lShadowTransfer>:

static void CAPTURE_CCU4_lShadowTransfer(const CAPTURE_t *const handler)
{
100029cc:	b580      	push	{r7, lr}
100029ce:	b082      	sub	sp, #8
100029d0:	af00      	add	r7, sp, #0
100029d2:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handler->ccu4_slice_ptr, CAPTURE_PERIOD_16BIT_MAX);
100029d4:	687b      	ldr	r3, [r7, #4]
100029d6:	699b      	ldr	r3, [r3, #24]
100029d8:	4a0b      	ldr	r2, [pc, #44]	; (10002a08 <CAPTURE_CCU4_lShadowTransfer+0x3c>)
100029da:	1c18      	adds	r0, r3, #0
100029dc:	1c11      	adds	r1, r2, #0
100029de:	f7ff fe6f 	bl	100026c0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handler->ccu4_slice_ptr, 0x0U);
100029e2:	687b      	ldr	r3, [r7, #4]
100029e4:	699b      	ldr	r3, [r3, #24]
100029e6:	1c18      	adds	r0, r3, #0
100029e8:	2100      	movs	r1, #0
100029ea:	f7ff fe77 	bl	100026dc <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handler->global_ccu4_handler->module_ptr, handler->shadow_mask);
100029ee:	687b      	ldr	r3, [r7, #4]
100029f0:	695b      	ldr	r3, [r3, #20]
100029f2:	689a      	ldr	r2, [r3, #8]
100029f4:	687b      	ldr	r3, [r7, #4]
100029f6:	689b      	ldr	r3, [r3, #8]
100029f8:	1c10      	adds	r0, r2, #0
100029fa:	1c19      	adds	r1, r3, #0
100029fc:	f7ff fe7c 	bl	100026f8 <XMC_CCU4_EnableShadowTransfer>
}
10002a00:	46bd      	mov	sp, r7
10002a02:	b002      	add	sp, #8
10002a04:	bd80      	pop	{r7, pc}
10002a06:	46c0      	nop			; (mov r8, r8)
10002a08:	0000ffff 	.word	0x0000ffff

10002a0c <CAPTURE_lCalculateTimeTickFromTimerValue>:
#endif

static void CAPTURE_lCalculateTimeTickFromTimerValue(const CAPTURE_t *const handler,
                                                     uint32_t *const timer_val_ptr,
                                                     bool is_increment)
{
10002a0c:	b580      	push	{r7, lr}
10002a0e:	b08c      	sub	sp, #48	; 0x30
10002a10:	af00      	add	r7, sp, #0
10002a12:	60f8      	str	r0, [r7, #12]
10002a14:	60b9      	str	r1, [r7, #8]
10002a16:	1dfb      	adds	r3, r7, #7
10002a18:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  uint32_t psc_psiv_val = 0U;
10002a1a:	2300      	movs	r3, #0
10002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool is_float_prescaler = false;
10002a1e:	232b      	movs	r3, #43	; 0x2b
10002a20:	18fb      	adds	r3, r7, r3
10002a22:	2200      	movs	r2, #0
10002a24:	701a      	strb	r2, [r3, #0]
  uint32_t cxv_captv_val = (uint32_t)((uint32_t)*timer_val_ptr & 0xFFFFU);
10002a26:	68bb      	ldr	r3, [r7, #8]
10002a28:	681b      	ldr	r3, [r3, #0]
10002a2a:	041b      	lsls	r3, r3, #16
10002a2c:	0c1b      	lsrs	r3, r3, #16
10002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cxv_fpcv_val = (uint32_t)((uint32_t)*timer_val_ptr >> 16U) & 0xFU;
10002a30:	68bb      	ldr	r3, [r7, #8]
10002a32:	681b      	ldr	r3, [r3, #0]
10002a34:	0c1b      	lsrs	r3, r3, #16
10002a36:	220f      	movs	r2, #15
10002a38:	4013      	ands	r3, r2
10002a3a:	61bb      	str	r3, [r7, #24]

  /* Period measured should be added 1 to get actual value*/
  if (is_increment == true)
10002a3c:	1dfb      	adds	r3, r7, #7
10002a3e:	781b      	ldrb	r3, [r3, #0]
10002a40:	2b00      	cmp	r3, #0
10002a42:	d002      	beq.n	10002a4a <CAPTURE_lCalculateTimeTickFromTimerValue+0x3e>
  {
    cxv_captv_val = cxv_captv_val + 1U;
10002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002a46:	3301      	adds	r3, #1
10002a48:	627b      	str	r3, [r7, #36]	; 0x24
  }
#ifdef CAPTURE_CCU4_USED
  if (CAPTURE_MODULE_CCU4 == handler->capture_module)
10002a4a:	68fb      	ldr	r3, [r7, #12]
10002a4c:	222d      	movs	r2, #45	; 0x2d
10002a4e:	5c9b      	ldrb	r3, [r3, r2]
10002a50:	2b00      	cmp	r3, #0
10002a52:	d112      	bne.n	10002a7a <CAPTURE_lCalculateTimeTickFromTimerValue+0x6e>
  {
    psc_psiv_val = handler->ccu4_slice_config_ptr->prescaler_initval;
10002a54:	68fb      	ldr	r3, [r7, #12]
10002a56:	69db      	ldr	r3, [r3, #28]
10002a58:	791b      	ldrb	r3, [r3, #4]
10002a5a:	071b      	lsls	r3, r3, #28
10002a5c:	0f1b      	lsrs	r3, r3, #28
10002a5e:	b2db      	uxtb	r3, r3
10002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (handler->ccu4_slice_config_ptr->prescaler_mode == (uint32_t)XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT)
10002a62:	68fb      	ldr	r3, [r7, #12]
10002a64:	69db      	ldr	r3, [r3, #28]
10002a66:	789b      	ldrb	r3, [r3, #2]
10002a68:	2201      	movs	r2, #1
10002a6a:	4013      	ands	r3, r2
10002a6c:	b2db      	uxtb	r3, r3
10002a6e:	2b00      	cmp	r3, #0
10002a70:	d003      	beq.n	10002a7a <CAPTURE_lCalculateTimeTickFromTimerValue+0x6e>
    {
      is_float_prescaler =  true;
10002a72:	232b      	movs	r3, #43	; 0x2b
10002a74:	18fb      	adds	r3, r7, r3
10002a76:	2201      	movs	r2, #1
10002a78:	701a      	strb	r2, [r3, #0]
      is_float_prescaler =  true;
    }
  }
#endif

  if (is_float_prescaler == true)
10002a7a:	232b      	movs	r3, #43	; 0x2b
10002a7c:	18fb      	adds	r3, r7, r3
10002a7e:	781b      	ldrb	r3, [r3, #0]
10002a80:	2b00      	cmp	r3, #0
10002a82:	d023      	beq.n	10002acc <CAPTURE_lCalculateTimeTickFromTimerValue+0xc0>
  {
    int32_t loop = 0;
10002a84:	2300      	movs	r3, #0
10002a86:	623b      	str	r3, [r7, #32]
    uint32_t prescaler_value;
    uint32_t timer_val = 0U;
10002a88:	2300      	movs	r3, #0
10002a8a:	61fb      	str	r3, [r7, #28]

    prescaler_value = cxv_fpcv_val - psc_psiv_val;
10002a8c:	69ba      	ldr	r2, [r7, #24]
10002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002a90:	1ad3      	subs	r3, r2, r3
10002a92:	617b      	str	r3, [r7, #20]

    for (loop = (int32_t)prescaler_value; loop > 0; loop--)
10002a94:	697b      	ldr	r3, [r7, #20]
10002a96:	623b      	str	r3, [r7, #32]
10002a98:	e00a      	b.n	10002ab0 <CAPTURE_lCalculateTimeTickFromTimerValue+0xa4>
    {
      timer_val = (uint32_t)timer_val << 1U;
10002a9a:	69fb      	ldr	r3, [r7, #28]
10002a9c:	005b      	lsls	r3, r3, #1
10002a9e:	61fb      	str	r3, [r7, #28]
      timer_val += 65535U;
10002aa0:	69fb      	ldr	r3, [r7, #28]
10002aa2:	4a0d      	ldr	r2, [pc, #52]	; (10002ad8 <CAPTURE_lCalculateTimeTickFromTimerValue+0xcc>)
10002aa4:	4694      	mov	ip, r2
10002aa6:	4463      	add	r3, ip
10002aa8:	61fb      	str	r3, [r7, #28]
    uint32_t prescaler_value;
    uint32_t timer_val = 0U;

    prescaler_value = cxv_fpcv_val - psc_psiv_val;

    for (loop = (int32_t)prescaler_value; loop > 0; loop--)
10002aaa:	6a3b      	ldr	r3, [r7, #32]
10002aac:	3b01      	subs	r3, #1
10002aae:	623b      	str	r3, [r7, #32]
10002ab0:	6a3b      	ldr	r3, [r7, #32]
10002ab2:	2b00      	cmp	r3, #0
10002ab4:	dcf1      	bgt.n	10002a9a <CAPTURE_lCalculateTimeTickFromTimerValue+0x8e>
    {
      timer_val = (uint32_t)timer_val << 1U;
      timer_val += 65535U;
    }

    timer_val += (uint32_t)(cxv_captv_val * (1UL << prescaler_value));
10002ab6:	697b      	ldr	r3, [r7, #20]
10002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10002aba:	409a      	lsls	r2, r3
10002abc:	1c13      	adds	r3, r2, #0
10002abe:	69fa      	ldr	r2, [r7, #28]
10002ac0:	18d3      	adds	r3, r2, r3
10002ac2:	61fb      	str	r3, [r7, #28]
    *timer_val_ptr = timer_val;
10002ac4:	68bb      	ldr	r3, [r7, #8]
10002ac6:	69fa      	ldr	r2, [r7, #28]
10002ac8:	601a      	str	r2, [r3, #0]
10002aca:	e002      	b.n	10002ad2 <CAPTURE_lCalculateTimeTickFromTimerValue+0xc6>
  }
  else
  {
    *timer_val_ptr = cxv_captv_val;
10002acc:	68bb      	ldr	r3, [r7, #8]
10002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10002ad0:	601a      	str	r2, [r3, #0]
  }
}
10002ad2:	46bd      	mov	sp, r7
10002ad4:	b00c      	add	sp, #48	; 0x30
10002ad6:	bd80      	pop	{r7, pc}
10002ad8:	0000ffff 	.word	0x0000ffff

10002adc <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>:

static uint32_t CAPTURE_lCalculateTimeInNanoSecFromTimerTick(const CAPTURE_t *const handler, uint32_t timer_val)
{
10002adc:	b5b0      	push	{r4, r5, r7, lr}
10002ade:	b08e      	sub	sp, #56	; 0x38
10002ae0:	af00      	add	r7, sp, #0
10002ae2:	60f8      	str	r0, [r7, #12]
10002ae4:	60b9      	str	r1, [r7, #8]
  uint64_t singal_period_long_long;
  uint32_t inv_sig_resolution_in_sec = 1U;
10002ae6:	2301      	movs	r3, #1
10002ae8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t norm_timer_val;
  uint32_t norm_inv_sig_resolution_in_sec;
  uint32_t min_norm;
  uint32_t psc_psiv_val = 0U;
10002aea:	2300      	movs	r3, #0
10002aec:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifdef CAPTURE_CCU4_USED
  if (CAPTURE_MODULE_CCU4 == handler->capture_module)
10002aee:	68fb      	ldr	r3, [r7, #12]
10002af0:	222d      	movs	r2, #45	; 0x2d
10002af2:	5c9b      	ldrb	r3, [r3, r2]
10002af4:	2b00      	cmp	r3, #0
10002af6:	d10d      	bne.n	10002b14 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x38>
  {
    psc_psiv_val = handler->ccu4_slice_config_ptr->prescaler_initval;
10002af8:	68fb      	ldr	r3, [r7, #12]
10002afa:	69db      	ldr	r3, [r3, #28]
10002afc:	791b      	ldrb	r3, [r3, #4]
10002afe:	071b      	lsls	r3, r3, #28
10002b00:	0f1b      	lsrs	r3, r3, #28
10002b02:	b2db      	uxtb	r3, r3
10002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    inv_sig_resolution_in_sec = handler->global_ccu4_handler->module_frequency >> psc_psiv_val;
10002b06:	68fb      	ldr	r3, [r7, #12]
10002b08:	695b      	ldr	r3, [r3, #20]
10002b0a:	681a      	ldr	r2, [r3, #0]
10002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002b0e:	40da      	lsrs	r2, r3
10002b10:	1c13      	adds	r3, r2, #0
10002b12:	637b      	str	r3, [r7, #52]	; 0x34
10002b14:	68bb      	ldr	r3, [r7, #8]
10002b16:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
10002b18:	697b      	ldr	r3, [r7, #20]
10002b1a:	2b00      	cmp	r3, #0
10002b1c:	d101      	bne.n	10002b22 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x46>
  {
    return 32U;
10002b1e:	2320      	movs	r3, #32
10002b20:	e004      	b.n	10002b2c <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x50>
  }
  return __builtin_clz(value);
10002b22:	6978      	ldr	r0, [r7, #20]
10002b24:	f000 fdae 	bl	10003684 <__clzsi2>
10002b28:	1c03      	adds	r3, r0, #0
10002b2a:	b2db      	uxtb	r3, r3
    psc_psiv_val = handler->ccu8_slice_config_ptr->prescaler_initval;
    inv_sig_resolution_in_sec = handler->global_ccu8_handler->module_frequency >> psc_psiv_val;
  }
#endif

  norm_timer_val = (uint32_t)__CLZ(timer_val);
10002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
10002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002b30:	613b      	str	r3, [r7, #16]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
10002b32:	693b      	ldr	r3, [r7, #16]
10002b34:	2b00      	cmp	r3, #0
10002b36:	d101      	bne.n	10002b3c <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x60>
  {
    return 32U;
10002b38:	2320      	movs	r3, #32
10002b3a:	e004      	b.n	10002b46 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x6a>
  }
  return __builtin_clz(value);
10002b3c:	6938      	ldr	r0, [r7, #16]
10002b3e:	f000 fda1 	bl	10003684 <__clzsi2>
10002b42:	1c03      	adds	r3, r0, #0
10002b44:	b2db      	uxtb	r3, r3
  norm_inv_sig_resolution_in_sec = (uint32_t)__CLZ(inv_sig_resolution_in_sec);
10002b46:	627b      	str	r3, [r7, #36]	; 0x24

  if (norm_timer_val > norm_inv_sig_resolution_in_sec)
10002b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
10002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002b4c:	429a      	cmp	r2, r3
10002b4e:	d902      	bls.n	10002b56 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x7a>
  {
    min_norm = norm_inv_sig_resolution_in_sec;
10002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002b52:	633b      	str	r3, [r7, #48]	; 0x30
10002b54:	e001      	b.n	10002b5a <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x7e>
  }
  else
  {
    min_norm = norm_timer_val;
10002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002b58:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Normalized the value to get better precision*/
  timer_val = timer_val << min_norm;
10002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002b5c:	68ba      	ldr	r2, [r7, #8]
10002b5e:	409a      	lsls	r2, r3
10002b60:	1c13      	adds	r3, r2, #0
10002b62:	60bb      	str	r3, [r7, #8]
  inv_sig_resolution_in_sec = inv_sig_resolution_in_sec << min_norm;
10002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10002b68:	409a      	lsls	r2, r3
10002b6a:	1c13      	adds	r3, r2, #0
10002b6c:	637b      	str	r3, [r7, #52]	; 0x34

  singal_period_long_long = (((uint64_t) timer_val) * 1000000000U) / inv_sig_resolution_in_sec;
10002b6e:	68bb      	ldr	r3, [r7, #8]
10002b70:	603b      	str	r3, [r7, #0]
10002b72:	2300      	movs	r3, #0
10002b74:	607b      	str	r3, [r7, #4]
10002b76:	6838      	ldr	r0, [r7, #0]
10002b78:	6879      	ldr	r1, [r7, #4]
10002b7a:	4a0d      	ldr	r2, [pc, #52]	; (10002bb0 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0xd4>)
10002b7c:	2300      	movs	r3, #0
10002b7e:	f000 fdbf 	bl	10003700 <__aeabi_lmul>
10002b82:	1c02      	adds	r2, r0, #0
10002b84:	1c0b      	adds	r3, r1, #0
10002b86:	1c11      	adds	r1, r2, #0
10002b88:	1c1a      	adds	r2, r3, #0
10002b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002b8c:	1c1c      	adds	r4, r3, #0
10002b8e:	2300      	movs	r3, #0
10002b90:	1c1d      	adds	r5, r3, #0
10002b92:	1c08      	adds	r0, r1, #0
10002b94:	1c11      	adds	r1, r2, #0
10002b96:	1c22      	adds	r2, r4, #0
10002b98:	1c2b      	adds	r3, r5, #0
10002b9a:	f000 fd91 	bl	100036c0 <__aeabi_uldivmod>
10002b9e:	1c03      	adds	r3, r0, #0
10002ba0:	1c0c      	adds	r4, r1, #0
10002ba2:	61bb      	str	r3, [r7, #24]
10002ba4:	61fc      	str	r4, [r7, #28]

  return ((uint32_t)singal_period_long_long);
10002ba6:	69bb      	ldr	r3, [r7, #24]
}
10002ba8:	1c18      	adds	r0, r3, #0
10002baa:	46bd      	mov	sp, r7
10002bac:	b00e      	add	sp, #56	; 0x38
10002bae:	bdb0      	pop	{r4, r5, r7, pc}
10002bb0:	3b9aca00 	.word	0x3b9aca00

10002bb4 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>:
#ifdef  CAPTURE_CCU4_USED
/* @brief Retrieves the latest captured timer value from CCU4*/
static CAPTURE_STATUS_t CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(const XMC_CCU4_SLICE_t * const slice,
                                                                         const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                                         uint32_t * const val_ptr)
{
10002bb4:	b580      	push	{r7, lr}
10002bb6:	b088      	sub	sp, #32
10002bb8:	af00      	add	r7, sp, #0
10002bba:	60f8      	str	r0, [r7, #12]
10002bbc:	607a      	str	r2, [r7, #4]
10002bbe:	230b      	movs	r3, #11
10002bc0:	18fb      	adds	r3, r7, r3
10002bc2:	1c0a      	adds	r2, r1, #0
10002bc4:	701a      	strb	r2, [r3, #0]
              ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) || (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));

  XMC_ASSERT ("CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue:Invalid Extended Capture Mode ",
              ((slice->TC) & CCU4_CC4_TC_ECM_Msk) == 0);

  retval = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
10002bc6:	231f      	movs	r3, #31
10002bc8:	18fb      	adds	r3, r7, r3
10002bca:	2202      	movs	r2, #2
10002bcc:	701a      	strb	r2, [r3, #0]

  if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
10002bce:	230b      	movs	r3, #11
10002bd0:	18fb      	adds	r3, r7, r3
10002bd2:	781b      	ldrb	r3, [r3, #0]
10002bd4:	2b01      	cmp	r3, #1
10002bd6:	d120      	bne.n	10002c1a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x66>
  {
    /* read capture values*/
    *val_ptr = slice->CV[CAPTURE_SLICE_CAP_REGISTER_3];
10002bd8:	68fb      	ldr	r3, [r7, #12]
10002bda:	2280      	movs	r2, #128	; 0x80
10002bdc:	589a      	ldr	r2, [r3, r2]
10002bde:	687b      	ldr	r3, [r7, #4]
10002be0:	601a      	str	r2, [r3, #0]
    /* check for new data or full Flag*/
    if ((*val_ptr) & CCU4_CC4_CV_FFL_Msk)
10002be2:	687b      	ldr	r3, [r7, #4]
10002be4:	681a      	ldr	r2, [r3, #0]
10002be6:	2380      	movs	r3, #128	; 0x80
10002be8:	035b      	lsls	r3, r3, #13
10002bea:	4013      	ands	r3, r2
10002bec:	d004      	beq.n	10002bf8 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x44>
    {
      retval = CAPTURE_STATUS_SUCCESS;
10002bee:	231f      	movs	r3, #31
10002bf0:	18fb      	adds	r3, r7, r3
10002bf2:	2200      	movs	r2, #0
10002bf4:	701a      	strb	r2, [r3, #0]
10002bf6:	e02e      	b.n	10002c56 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
    }
    else
    {
      volatile uint32_t capture_reg_value_low;
      capture_reg_value_low = slice->CV[CAPTURE_SLICE_CAP_REGISTER_2];
10002bf8:	68fb      	ldr	r3, [r7, #12]
10002bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10002bfc:	61bb      	str	r3, [r7, #24]
      /* check for new data or full Flag*/
      if (capture_reg_value_low & CCU4_CC4_CV_FFL_Msk)
10002bfe:	69ba      	ldr	r2, [r7, #24]
10002c00:	2380      	movs	r3, #128	; 0x80
10002c02:	035b      	lsls	r3, r3, #13
10002c04:	4013      	ands	r3, r2
10002c06:	d007      	beq.n	10002c18 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x64>
      {
        retval = CAPTURE_STATUS_SUCCESS;
10002c08:	231f      	movs	r3, #31
10002c0a:	18fb      	adds	r3, r7, r3
10002c0c:	2200      	movs	r2, #0
10002c0e:	701a      	strb	r2, [r3, #0]
        *val_ptr = capture_reg_value_low;
10002c10:	69ba      	ldr	r2, [r7, #24]
10002c12:	687b      	ldr	r3, [r7, #4]
10002c14:	601a      	str	r2, [r3, #0]
10002c16:	e01e      	b.n	10002c56 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
10002c18:	e01d      	b.n	10002c56 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
    }
  }
  else
  {
    /* read capture values*/
    *val_ptr = slice->CV[CAPTURE_SLICE_CAP_REGISTER_1];
10002c1a:	68fb      	ldr	r3, [r7, #12]
10002c1c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
10002c1e:	687b      	ldr	r3, [r7, #4]
10002c20:	601a      	str	r2, [r3, #0]
    /* check for new data or full Flag*/
    if ((*val_ptr) & CCU4_CC4_CV_FFL_Msk)
10002c22:	687b      	ldr	r3, [r7, #4]
10002c24:	681a      	ldr	r2, [r3, #0]
10002c26:	2380      	movs	r3, #128	; 0x80
10002c28:	035b      	lsls	r3, r3, #13
10002c2a:	4013      	ands	r3, r2
10002c2c:	d004      	beq.n	10002c38 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x84>
    {
      retval = CAPTURE_STATUS_SUCCESS;
10002c2e:	231f      	movs	r3, #31
10002c30:	18fb      	adds	r3, r7, r3
10002c32:	2200      	movs	r2, #0
10002c34:	701a      	strb	r2, [r3, #0]
10002c36:	e00e      	b.n	10002c56 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
    }
    else
    {
      volatile uint32_t capture_reg_value_low;
      capture_reg_value_low = slice->CV[CAPTURE_SLICE_CAP_REGISTER_0];
10002c38:	68fb      	ldr	r3, [r7, #12]
10002c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10002c3c:	617b      	str	r3, [r7, #20]
      /* check for new data or full Flag*/
      if (capture_reg_value_low & CCU4_CC4_CV_FFL_Msk)
10002c3e:	697a      	ldr	r2, [r7, #20]
10002c40:	2380      	movs	r3, #128	; 0x80
10002c42:	035b      	lsls	r3, r3, #13
10002c44:	4013      	ands	r3, r2
10002c46:	d006      	beq.n	10002c56 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
      {
        retval = CAPTURE_STATUS_SUCCESS;
10002c48:	231f      	movs	r3, #31
10002c4a:	18fb      	adds	r3, r7, r3
10002c4c:	2200      	movs	r2, #0
10002c4e:	701a      	strb	r2, [r3, #0]
        *val_ptr = capture_reg_value_low;
10002c50:	697a      	ldr	r2, [r7, #20]
10002c52:	687b      	ldr	r3, [r7, #4]
10002c54:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return retval;
10002c56:	231f      	movs	r3, #31
10002c58:	18fb      	adds	r3, r7, r3
10002c5a:	781b      	ldrb	r3, [r3, #0]
}
10002c5c:	1c18      	adds	r0, r3, #0
10002c5e:	46bd      	mov	sp, r7
10002c60:	b008      	add	sp, #32
10002c62:	bd80      	pop	{r7, pc}

10002c64 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
10002c64:	b580      	push	{r7, lr}
10002c66:	b084      	sub	sp, #16
10002c68:	af00      	add	r7, sp, #0
10002c6a:	60f8      	str	r0, [r7, #12]
10002c6c:	607a      	str	r2, [r7, #4]
10002c6e:	230b      	movs	r3, #11
10002c70:	18fb      	adds	r3, r7, r3
10002c72:	1c0a      	adds	r2, r1, #0
10002c74:	701a      	strb	r2, [r3, #0]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
10002c76:	68fb      	ldr	r3, [r7, #12]
10002c78:	689b      	ldr	r3, [r3, #8]
10002c7a:	220b      	movs	r2, #11
10002c7c:	18ba      	adds	r2, r7, r2
10002c7e:	7812      	ldrb	r2, [r2, #0]
10002c80:	2107      	movs	r1, #7
10002c82:	4091      	lsls	r1, r2
10002c84:	1c0a      	adds	r2, r1, #0
10002c86:	43d2      	mvns	r2, r2
10002c88:	401a      	ands	r2, r3
10002c8a:	230b      	movs	r3, #11
10002c8c:	18fb      	adds	r3, r7, r3
10002c8e:	781b      	ldrb	r3, [r3, #0]
10002c90:	6879      	ldr	r1, [r7, #4]
10002c92:	4099      	lsls	r1, r3
10002c94:	1c0b      	adds	r3, r1, #0
10002c96:	431a      	orrs	r2, r3
10002c98:	68fb      	ldr	r3, [r7, #12]
10002c9a:	609a      	str	r2, [r3, #8]
}
10002c9c:	46bd      	mov	sp, r7
10002c9e:	b004      	add	sp, #16
10002ca0:	bd80      	pop	{r7, pc}
10002ca2:	46c0      	nop			; (mov r8, r8)

10002ca4 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
10002ca4:	b580      	push	{r7, lr}
10002ca6:	b082      	sub	sp, #8
10002ca8:	af00      	add	r7, sp, #0
10002caa:	6078      	str	r0, [r7, #4]
10002cac:	1c0a      	adds	r2, r1, #0
10002cae:	1cfb      	adds	r3, r7, #3
10002cb0:	701a      	strb	r2, [r3, #0]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10002cb2:	687b      	ldr	r3, [r7, #4]
10002cb4:	68db      	ldr	r3, [r3, #12]
10002cb6:	2207      	movs	r2, #7
10002cb8:	4393      	bics	r3, r2
10002cba:	1c1a      	adds	r2, r3, #0
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
10002cbc:	1cfb      	adds	r3, r7, #3
10002cbe:	781b      	ldrb	r3, [r3, #0]
10002cc0:	2107      	movs	r1, #7
10002cc2:	400b      	ands	r3, r1
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10002cc4:	431a      	orrs	r2, r3
10002cc6:	687b      	ldr	r3, [r7, #4]
10002cc8:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
10002cca:	46bd      	mov	sp, r7
10002ccc:	b002      	add	sp, #8
10002cce:	bd80      	pop	{r7, pc}

10002cd0 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
10002cd0:	b580      	push	{r7, lr}
10002cd2:	b082      	sub	sp, #8
10002cd4:	af00      	add	r7, sp, #0
10002cd6:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
10002cd8:	687b      	ldr	r3, [r7, #4]
10002cda:	68db      	ldr	r3, [r3, #12]
10002cdc:	2280      	movs	r2, #128	; 0x80
10002cde:	0052      	lsls	r2, r2, #1
10002ce0:	431a      	orrs	r2, r3
10002ce2:	687b      	ldr	r3, [r7, #4]
10002ce4:	60da      	str	r2, [r3, #12]
}
10002ce6:	46bd      	mov	sp, r7
10002ce8:	b002      	add	sp, #8
10002cea:	bd80      	pop	{r7, pc}

10002cec <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10002cec:	b580      	push	{r7, lr}
10002cee:	b082      	sub	sp, #8
10002cf0:	af00      	add	r7, sp, #0
10002cf2:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
10002cf4:	687b      	ldr	r3, [r7, #4]
10002cf6:	681b      	ldr	r3, [r3, #0]
10002cf8:	2240      	movs	r2, #64	; 0x40
10002cfa:	431a      	orrs	r2, r3
10002cfc:	687b      	ldr	r3, [r7, #4]
10002cfe:	601a      	str	r2, [r3, #0]
}
10002d00:	46bd      	mov	sp, r7
10002d02:	b002      	add	sp, #8
10002d04:	bd80      	pop	{r7, pc}
10002d06:	46c0      	nop			; (mov r8, r8)

10002d08 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10002d08:	b580      	push	{r7, lr}
10002d0a:	b082      	sub	sp, #8
10002d0c:	af00      	add	r7, sp, #0
10002d0e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10002d10:	687b      	ldr	r3, [r7, #4]
10002d12:	681b      	ldr	r3, [r3, #0]
10002d14:	2240      	movs	r2, #64	; 0x40
10002d16:	4393      	bics	r3, r2
10002d18:	1c1a      	adds	r2, r3, #0
10002d1a:	687b      	ldr	r3, [r7, #4]
10002d1c:	601a      	str	r2, [r3, #0]
}
10002d1e:	46bd      	mov	sp, r7
10002d20:	b002      	add	sp, #8
10002d22:	bd80      	pop	{r7, pc}

10002d24 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
10002d24:	b580      	push	{r7, lr}
10002d26:	b082      	sub	sp, #8
10002d28:	af00      	add	r7, sp, #0
10002d2a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
10002d2c:	687b      	ldr	r3, [r7, #4]
10002d2e:	681b      	ldr	r3, [r3, #0]
10002d30:	2201      	movs	r2, #1
10002d32:	431a      	orrs	r2, r3
10002d34:	687b      	ldr	r3, [r7, #4]
10002d36:	601a      	str	r2, [r3, #0]
}
10002d38:	46bd      	mov	sp, r7
10002d3a:	b002      	add	sp, #8
10002d3c:	bd80      	pop	{r7, pc}
10002d3e:	46c0      	nop			; (mov r8, r8)

10002d40 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
10002d40:	b580      	push	{r7, lr}
10002d42:	b082      	sub	sp, #8
10002d44:	af00      	add	r7, sp, #0
10002d46:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
10002d48:	687b      	ldr	r3, [r7, #4]
10002d4a:	681b      	ldr	r3, [r3, #0]
10002d4c:	2201      	movs	r2, #1
10002d4e:	4393      	bics	r3, r2
10002d50:	1c1a      	adds	r2, r3, #0
10002d52:	687b      	ldr	r3, [r7, #4]
10002d54:	601a      	str	r2, [r3, #0]
}
10002d56:	46bd      	mov	sp, r7
10002d58:	b002      	add	sp, #8
10002d5a:	bd80      	pop	{r7, pc}

10002d5c <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
10002d5c:	b580      	push	{r7, lr}
10002d5e:	b082      	sub	sp, #8
10002d60:	af00      	add	r7, sp, #0
10002d62:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
10002d64:	687b      	ldr	r3, [r7, #4]
10002d66:	681b      	ldr	r3, [r3, #0]
10002d68:	2280      	movs	r2, #128	; 0x80
10002d6a:	4393      	bics	r3, r2
10002d6c:	1c1a      	adds	r2, r3, #0
10002d6e:	687b      	ldr	r3, [r7, #4]
10002d70:	601a      	str	r2, [r3, #0]
}
10002d72:	46bd      	mov	sp, r7
10002d74:	b002      	add	sp, #8
10002d76:	bd80      	pop	{r7, pc}

10002d78 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
10002d78:	b580      	push	{r7, lr}
10002d7a:	b084      	sub	sp, #16
10002d7c:	af00      	add	r7, sp, #0
10002d7e:	60f8      	str	r0, [r7, #12]
10002d80:	607a      	str	r2, [r7, #4]
10002d82:	230b      	movs	r3, #11
10002d84:	18fb      	adds	r3, r7, r3
10002d86:	1c0a      	adds	r2, r1, #0
10002d88:	701a      	strb	r2, [r3, #0]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
10002d8a:	68fb      	ldr	r3, [r7, #12]
10002d8c:	681b      	ldr	r3, [r3, #0]
10002d8e:	68fa      	ldr	r2, [r7, #12]
10002d90:	6812      	ldr	r2, [r2, #0]
10002d92:	6892      	ldr	r2, [r2, #8]
10002d94:	210b      	movs	r1, #11
10002d96:	1879      	adds	r1, r7, r1
10002d98:	7809      	ldrb	r1, [r1, #0]
10002d9a:	2007      	movs	r0, #7
10002d9c:	4088      	lsls	r0, r1
10002d9e:	1c01      	adds	r1, r0, #0
10002da0:	43c9      	mvns	r1, r1
10002da2:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
10002da4:	220b      	movs	r2, #11
10002da6:	18ba      	adds	r2, r7, r2
10002da8:	7812      	ldrb	r2, [r2, #0]
10002daa:	6878      	ldr	r0, [r7, #4]
10002dac:	4090      	lsls	r0, r2
10002dae:	1c02      	adds	r2, r0, #0

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
10002db0:	430a      	orrs	r2, r1
10002db2:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
10002db4:	46bd      	mov	sp, r7
10002db6:	b004      	add	sp, #16
10002db8:	bd80      	pop	{r7, pc}
10002dba:	46c0      	nop			; (mov r8, r8)

10002dbc <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
10002dbc:	b580      	push	{r7, lr}
10002dbe:	b082      	sub	sp, #8
10002dc0:	af00      	add	r7, sp, #0
10002dc2:	6078      	str	r0, [r7, #4]
10002dc4:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
10002dc6:	687b      	ldr	r3, [r7, #4]
10002dc8:	681b      	ldr	r3, [r3, #0]
10002dca:	687a      	ldr	r2, [r7, #4]
10002dcc:	6812      	ldr	r2, [r2, #0]
10002dce:	6811      	ldr	r1, [r2, #0]
10002dd0:	683a      	ldr	r2, [r7, #0]
10002dd2:	430a      	orrs	r2, r1
10002dd4:	601a      	str	r2, [r3, #0]
}
10002dd6:	46bd      	mov	sp, r7
10002dd8:	b002      	add	sp, #8
10002dda:	bd80      	pop	{r7, pc}

10002ddc <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
10002ddc:	b580      	push	{r7, lr}
10002dde:	b082      	sub	sp, #8
10002de0:	af00      	add	r7, sp, #0
10002de2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
10002de4:	687b      	ldr	r3, [r7, #4]
10002de6:	681a      	ldr	r2, [r3, #0]
10002de8:	2380      	movs	r3, #128	; 0x80
10002dea:	029b      	lsls	r3, r3, #10
10002dec:	1c10      	adds	r0, r2, #0
10002dee:	1c19      	adds	r1, r3, #0
10002df0:	f7ff ffe4 	bl	10002dbc <XMC_CAN_MO_EnableEvent>
}
10002df4:	46bd      	mov	sp, r7
10002df6:	b002      	add	sp, #8
10002df8:	bd80      	pop	{r7, pc}
10002dfa:	46c0      	nop			; (mov r8, r8)

10002dfc <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
10002dfc:	b580      	push	{r7, lr}
10002dfe:	b082      	sub	sp, #8
10002e00:	af00      	add	r7, sp, #0
10002e02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
10002e04:	687b      	ldr	r3, [r7, #4]
10002e06:	681a      	ldr	r2, [r3, #0]
10002e08:	2380      	movs	r3, #128	; 0x80
10002e0a:	025b      	lsls	r3, r3, #9
10002e0c:	1c10      	adds	r0, r2, #0
10002e0e:	1c19      	adds	r1, r3, #0
10002e10:	f7ff ffd4 	bl	10002dbc <XMC_CAN_MO_EnableEvent>
}
10002e14:	46bd      	mov	sp, r7
10002e16:	b002      	add	sp, #8
10002e18:	bd80      	pop	{r7, pc}
10002e1a:	46c0      	nop			; (mov r8, r8)

10002e1c <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
10002e1c:	b580      	push	{r7, lr}
10002e1e:	b084      	sub	sp, #16
10002e20:	af00      	add	r7, sp, #0
10002e22:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
10002e24:	2300      	movs	r3, #0
10002e26:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
10002e28:	687b      	ldr	r3, [r7, #4]
10002e2a:	1c18      	adds	r0, r3, #0
10002e2c:	f000 f832 	bl	10002e94 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
10002e30:	687b      	ldr	r3, [r7, #4]
10002e32:	22a4      	movs	r2, #164	; 0xa4
10002e34:	5c9b      	ldrb	r3, [r3, r2]
10002e36:	2b00      	cmp	r3, #0
10002e38:	d003      	beq.n	10002e42 <CAN_NODE_SetNodeEvents+0x26>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
10002e3a:	68fb      	ldr	r3, [r7, #12]
10002e3c:	2202      	movs	r2, #2
10002e3e:	4313      	orrs	r3, r2
10002e40:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
10002e42:	687b      	ldr	r3, [r7, #4]
10002e44:	22a3      	movs	r2, #163	; 0xa3
10002e46:	5c9b      	ldrb	r3, [r3, r2]
10002e48:	2b00      	cmp	r3, #0
10002e4a:	d003      	beq.n	10002e54 <CAN_NODE_SetNodeEvents+0x38>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
10002e4c:	68fb      	ldr	r3, [r7, #12]
10002e4e:	2204      	movs	r2, #4
10002e50:	4313      	orrs	r3, r2
10002e52:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
10002e54:	687b      	ldr	r3, [r7, #4]
10002e56:	22a5      	movs	r2, #165	; 0xa5
10002e58:	5c9b      	ldrb	r3, [r3, r2]
10002e5a:	2b00      	cmp	r3, #0
10002e5c:	d003      	beq.n	10002e66 <CAN_NODE_SetNodeEvents+0x4a>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
10002e5e:	68fb      	ldr	r3, [r7, #12]
10002e60:	2208      	movs	r2, #8
10002e62:	4313      	orrs	r3, r2
10002e64:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
10002e66:	687b      	ldr	r3, [r7, #4]
10002e68:	685a      	ldr	r2, [r3, #4]
10002e6a:	68fb      	ldr	r3, [r7, #12]
10002e6c:	1c10      	adds	r0, r2, #0
10002e6e:	1c19      	adds	r1, r3, #0
10002e70:	f7fe ff4c 	bl	10001d0c <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
10002e74:	687b      	ldr	r3, [r7, #4]
10002e76:	22a6      	movs	r2, #166	; 0xa6
10002e78:	5c9b      	ldrb	r3, [r3, r2]
10002e7a:	2b00      	cmp	r3, #0
10002e7c:	d007      	beq.n	10002e8e <CAN_NODE_SetNodeEvents+0x72>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
10002e7e:	687b      	ldr	r3, [r7, #4]
10002e80:	685a      	ldr	r2, [r3, #4]
10002e82:	2380      	movs	r3, #128	; 0x80
10002e84:	03db      	lsls	r3, r3, #15
10002e86:	1c10      	adds	r0, r2, #0
10002e88:	1c19      	adds	r1, r3, #0
10002e8a:	f7fe ff3f 	bl	10001d0c <XMC_CAN_NODE_EnableEvent>
  }

}
10002e8e:	46bd      	mov	sp, r7
10002e90:	b004      	add	sp, #16
10002e92:	bd80      	pop	{r7, pc}

10002e94 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
10002e94:	b580      	push	{r7, lr}
10002e96:	b082      	sub	sp, #8
10002e98:	af00      	add	r7, sp, #0
10002e9a:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
10002e9c:	687b      	ldr	r3, [r7, #4]
10002e9e:	6859      	ldr	r1, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
10002ea0:	687b      	ldr	r3, [r7, #4]
10002ea2:	228c      	movs	r2, #140	; 0x8c
10002ea4:	589b      	ldr	r3, [r3, r2]
10002ea6:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
10002ea8:	1c08      	adds	r0, r1, #0
10002eaa:	2100      	movs	r1, #0
10002eac:	1c1a      	adds	r2, r3, #0
10002eae:	f7ff fed9 	bl	10002c64 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
10002eb2:	687b      	ldr	r3, [r7, #4]
10002eb4:	6859      	ldr	r1, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
10002eb6:	687b      	ldr	r3, [r7, #4]
10002eb8:	228c      	movs	r2, #140	; 0x8c
10002eba:	589b      	ldr	r3, [r3, r2]
10002ebc:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
10002ebe:	1c08      	adds	r0, r1, #0
10002ec0:	2104      	movs	r1, #4
10002ec2:	1c1a      	adds	r2, r3, #0
10002ec4:	f7ff fece 	bl	10002c64 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
10002ec8:	687b      	ldr	r3, [r7, #4]
10002eca:	6859      	ldr	r1, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
10002ecc:	687b      	ldr	r3, [r7, #4]
10002ece:	228c      	movs	r2, #140	; 0x8c
10002ed0:	589b      	ldr	r3, [r3, r2]
10002ed2:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
10002ed4:	1c08      	adds	r0, r1, #0
10002ed6:	2108      	movs	r1, #8
10002ed8:	1c1a      	adds	r2, r3, #0
10002eda:	f7ff fec3 	bl	10002c64 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
10002ede:	687b      	ldr	r3, [r7, #4]
10002ee0:	6859      	ldr	r1, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
10002ee2:	687b      	ldr	r3, [r7, #4]
10002ee4:	228c      	movs	r2, #140	; 0x8c
10002ee6:	589b      	ldr	r3, [r3, r2]
10002ee8:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
10002eea:	1c08      	adds	r0, r1, #0
10002eec:	210c      	movs	r1, #12
10002eee:	1c1a      	adds	r2, r3, #0
10002ef0:	f7ff feb8 	bl	10002c64 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
10002ef4:	46bd      	mov	sp, r7
10002ef6:	b002      	add	sp, #8
10002ef8:	bd80      	pop	{r7, pc}
10002efa:	46c0      	nop			; (mov r8, r8)

10002efc <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
10002efc:	b580      	push	{r7, lr}
10002efe:	b082      	sub	sp, #8
10002f00:	af00      	add	r7, sp, #0
10002f02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
10002f04:	687b      	ldr	r3, [r7, #4]
10002f06:	681b      	ldr	r3, [r3, #0]
10002f08:	1c18      	adds	r0, r3, #0
10002f0a:	f7fe fde5 	bl	10001ad8 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
10002f0e:	687b      	ldr	r3, [r7, #4]
10002f10:	79db      	ldrb	r3, [r3, #7]
10002f12:	2b00      	cmp	r3, #0
10002f14:	d00c      	beq.n	10002f30 <CAN_NODE_MO_Init+0x34>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
10002f16:	687b      	ldr	r3, [r7, #4]
10002f18:	681a      	ldr	r2, [r3, #0]
10002f1a:	687b      	ldr	r3, [r7, #4]
10002f1c:	795b      	ldrb	r3, [r3, #5]
10002f1e:	1c10      	adds	r0, r2, #0
10002f20:	2104      	movs	r1, #4
10002f22:	1c1a      	adds	r2, r3, #0
10002f24:	f7ff ff28 	bl	10002d78 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
10002f28:	687b      	ldr	r3, [r7, #4]
10002f2a:	1c18      	adds	r0, r3, #0
10002f2c:	f7ff ff56 	bl	10002ddc <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
10002f30:	687b      	ldr	r3, [r7, #4]
10002f32:	7a1b      	ldrb	r3, [r3, #8]
10002f34:	2b00      	cmp	r3, #0
10002f36:	d00c      	beq.n	10002f52 <CAN_NODE_MO_Init+0x56>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
10002f38:	687b      	ldr	r3, [r7, #4]
10002f3a:	681a      	ldr	r2, [r3, #0]
10002f3c:	687b      	ldr	r3, [r7, #4]
10002f3e:	799b      	ldrb	r3, [r3, #6]
10002f40:	1c10      	adds	r0, r2, #0
10002f42:	2100      	movs	r1, #0
10002f44:	1c1a      	adds	r2, r3, #0
10002f46:	f7ff ff17 	bl	10002d78 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
10002f4a:	687b      	ldr	r3, [r7, #4]
10002f4c:	1c18      	adds	r0, r3, #0
10002f4e:	f7ff ff55 	bl	10002dfc <CAN_NODE_MO_EnableRxEvent>
  }

}
10002f52:	46bd      	mov	sp, r7
10002f54:	b002      	add	sp, #8
10002f56:	bd80      	pop	{r7, pc}

10002f58 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
10002f58:	b590      	push	{r4, r7, lr}
10002f5a:	b085      	sub	sp, #20
10002f5c:	af00      	add	r7, sp, #0
10002f5e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10002f60:	230f      	movs	r3, #15
10002f62:	18fb      	adds	r3, r7, r3
10002f64:	2200      	movs	r2, #0
10002f66:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
10002f68:	687b      	ldr	r3, [r7, #4]
10002f6a:	681b      	ldr	r3, [r3, #0]
10002f6c:	220f      	movs	r2, #15
10002f6e:	18bc      	adds	r4, r7, r2
10002f70:	1c18      	adds	r0, r3, #0
10002f72:	f7fe fe93 	bl	10001c9c <XMC_CAN_MO_Transmit>
10002f76:	1c03      	adds	r3, r0, #0
10002f78:	7023      	strb	r3, [r4, #0]
  return (status);
10002f7a:	230f      	movs	r3, #15
10002f7c:	18fb      	adds	r3, r7, r3
10002f7e:	781b      	ldrb	r3, [r3, #0]
}
10002f80:	1c18      	adds	r0, r3, #0
10002f82:	46bd      	mov	sp, r7
10002f84:	b005      	add	sp, #20
10002f86:	bd90      	pop	{r4, r7, pc}

10002f88 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
10002f88:	b590      	push	{r4, r7, lr}
10002f8a:	b085      	sub	sp, #20
10002f8c:	af00      	add	r7, sp, #0
10002f8e:	6078      	str	r0, [r7, #4]
10002f90:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10002f92:	230f      	movs	r3, #15
10002f94:	18fb      	adds	r3, r7, r3
10002f96:	2200      	movs	r2, #0
10002f98:	701a      	strb	r2, [r3, #0]
  uint32_t *data_pointer = (uint32_t*) array_data;
10002f9a:	683b      	ldr	r3, [r7, #0]
10002f9c:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
10002f9e:	687b      	ldr	r3, [r7, #4]
10002fa0:	681b      	ldr	r3, [r3, #0]
10002fa2:	68ba      	ldr	r2, [r7, #8]
10002fa4:	6812      	ldr	r2, [r2, #0]
10002fa6:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
10002fa8:	687b      	ldr	r3, [r7, #4]
10002faa:	681b      	ldr	r3, [r3, #0]
10002fac:	68ba      	ldr	r2, [r7, #8]
10002fae:	6852      	ldr	r2, [r2, #4]
10002fb0:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
10002fb2:	687b      	ldr	r3, [r7, #4]
10002fb4:	681b      	ldr	r3, [r3, #0]
10002fb6:	220f      	movs	r2, #15
10002fb8:	18bc      	adds	r4, r7, r2
10002fba:	1c18      	adds	r0, r3, #0
10002fbc:	f7fe fe2c 	bl	10001c18 <XMC_CAN_MO_UpdateData>
10002fc0:	1c03      	adds	r3, r0, #0
10002fc2:	7023      	strb	r3, [r4, #0]
  return (status);
10002fc4:	230f      	movs	r3, #15
10002fc6:	18fb      	adds	r3, r7, r3
10002fc8:	781b      	ldrb	r3, [r3, #0]
}
10002fca:	1c18      	adds	r0, r3, #0
10002fcc:	46bd      	mov	sp, r7
10002fce:	b005      	add	sp, #20
10002fd0:	bd90      	pop	{r4, r7, pc}
10002fd2:	46c0      	nop			; (mov r8, r8)

10002fd4 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
10002fd4:	b590      	push	{r4, r7, lr}
10002fd6:	b087      	sub	sp, #28
10002fd8:	af00      	add	r7, sp, #0
10002fda:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10002fdc:	2317      	movs	r3, #23
10002fde:	18fb      	adds	r3, r7, r3
10002fe0:	2200      	movs	r2, #0
10002fe2:	701a      	strb	r2, [r3, #0]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
10002fe4:	687b      	ldr	r3, [r7, #4]
10002fe6:	2290      	movs	r2, #144	; 0x90
10002fe8:	589b      	ldr	r3, [r3, r2]
10002fea:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
10002fec:	687b      	ldr	r3, [r7, #4]
10002fee:	681b      	ldr	r3, [r3, #0]
10002ff0:	2217      	movs	r2, #23
10002ff2:	18bc      	adds	r4, r7, r2
10002ff4:	1c18      	adds	r0, r3, #0
10002ff6:	f7ff fab7 	bl	10002568 <GLOBAL_CAN_Init>
10002ffa:	1c03      	adds	r3, r0, #0
10002ffc:	7023      	strb	r3, [r4, #0]

  if (status == CAN_NODE_STATUS_SUCCESS)
10002ffe:	2317      	movs	r3, #23
10003000:	18fb      	adds	r3, r7, r3
10003002:	781b      	ldrb	r3, [r3, #0]
10003004:	2b00      	cmp	r3, #0
10003006:	d000      	beq.n	1000300a <CAN_NODE_Init+0x36>
10003008:	e085      	b.n	10003116 <CAN_NODE_Init+0x142>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
1000300a:	687b      	ldr	r3, [r7, #4]
1000300c:	685a      	ldr	r2, [r3, #4]
1000300e:	687b      	ldr	r3, [r7, #4]
10003010:	689b      	ldr	r3, [r3, #8]
10003012:	1c10      	adds	r0, r2, #0
10003014:	1c19      	adds	r1, r3, #0
10003016:	f7fe fbd3 	bl	100017c0 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
1000301a:	1e03      	subs	r3, r0, #0
1000301c:	d176      	bne.n	1000310c <CAN_NODE_Init+0x138>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
1000301e:	687b      	ldr	r3, [r7, #4]
10003020:	685b      	ldr	r3, [r3, #4]
10003022:	1c18      	adds	r0, r3, #0
10003024:	f7ff fe62 	bl	10002cec <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
10003028:	687b      	ldr	r3, [r7, #4]
1000302a:	685b      	ldr	r3, [r3, #4]
1000302c:	1c18      	adds	r0, r3, #0
1000302e:	f7ff fe79 	bl	10002d24 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
10003032:	687b      	ldr	r3, [r7, #4]
10003034:	685b      	ldr	r3, [r3, #4]
10003036:	1c18      	adds	r0, r3, #0
10003038:	f7ff fe90 	bl	10002d5c <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
1000303c:	687b      	ldr	r3, [r7, #4]
1000303e:	22a7      	movs	r2, #167	; 0xa7
10003040:	5c9b      	ldrb	r3, [r3, r2]
10003042:	2b00      	cmp	r3, #0
10003044:	d005      	beq.n	10003052 <CAN_NODE_Init+0x7e>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
10003046:	687b      	ldr	r3, [r7, #4]
10003048:	685b      	ldr	r3, [r3, #4]
1000304a:	1c18      	adds	r0, r3, #0
1000304c:	f7ff fe40 	bl	10002cd0 <XMC_CAN_NODE_EnableLoopBack>
10003050:	e016      	b.n	10003080 <CAN_NODE_Init+0xac>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
10003052:	687b      	ldr	r3, [r7, #4]
10003054:	2298      	movs	r2, #152	; 0x98
10003056:	589b      	ldr	r3, [r3, r2]
10003058:	6818      	ldr	r0, [r3, #0]
1000305a:	687b      	ldr	r3, [r7, #4]
1000305c:	2298      	movs	r2, #152	; 0x98
1000305e:	589b      	ldr	r3, [r3, r2]
10003060:	7919      	ldrb	r1, [r3, #4]
10003062:	687b      	ldr	r3, [r7, #4]
10003064:	229c      	movs	r2, #156	; 0x9c
10003066:	589b      	ldr	r3, [r3, r2]
10003068:	1c1a      	adds	r2, r3, #0
1000306a:	f7fe f88d 	bl	10001188 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
1000306e:	687b      	ldr	r3, [r7, #4]
10003070:	6859      	ldr	r1, [r3, #4]
10003072:	687b      	ldr	r3, [r7, #4]
10003074:	22a0      	movs	r2, #160	; 0xa0
10003076:	5c9b      	ldrb	r3, [r3, r2]
10003078:	1c08      	adds	r0, r1, #0
1000307a:	1c19      	adds	r1, r3, #0
1000307c:	f7ff fe12 	bl	10002ca4 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
10003080:	687b      	ldr	r3, [r7, #4]
10003082:	1c18      	adds	r0, r3, #0
10003084:	f7ff feca 	bl	10002e1c <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
10003088:	2300      	movs	r3, #0
1000308a:	613b      	str	r3, [r7, #16]
1000308c:	e01a      	b.n	100030c4 <CAN_NODE_Init+0xf0>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
1000308e:	687a      	ldr	r2, [r7, #4]
10003090:	693b      	ldr	r3, [r7, #16]
10003092:	3302      	adds	r3, #2
10003094:	009b      	lsls	r3, r3, #2
10003096:	18d3      	adds	r3, r2, r3
10003098:	685b      	ldr	r3, [r3, #4]
1000309a:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
1000309c:	687b      	ldr	r3, [r7, #4]
1000309e:	681b      	ldr	r3, [r3, #0]
100030a0:	6859      	ldr	r1, [r3, #4]
100030a2:	687b      	ldr	r3, [r7, #4]
100030a4:	22a1      	movs	r2, #161	; 0xa1
100030a6:	5c9a      	ldrb	r2, [r3, r2]
100030a8:	68bb      	ldr	r3, [r7, #8]
100030aa:	791b      	ldrb	r3, [r3, #4]
100030ac:	1c08      	adds	r0, r1, #0
100030ae:	1c11      	adds	r1, r2, #0
100030b0:	1c1a      	adds	r2, r3, #0
100030b2:	f7fe fc33 	bl	1000191c <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
100030b6:	68bb      	ldr	r3, [r7, #8]
100030b8:	1c18      	adds	r0, r3, #0
100030ba:	f7ff ff1f 	bl	10002efc <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
100030be:	693b      	ldr	r3, [r7, #16]
100030c0:	3301      	adds	r3, #1
100030c2:	613b      	str	r3, [r7, #16]
100030c4:	687b      	ldr	r3, [r7, #4]
100030c6:	22a2      	movs	r2, #162	; 0xa2
100030c8:	5c9b      	ldrb	r3, [r3, r2]
100030ca:	1e1a      	subs	r2, r3, #0
100030cc:	693b      	ldr	r3, [r7, #16]
100030ce:	429a      	cmp	r2, r3
100030d0:	d8dd      	bhi.n	1000308e <CAN_NODE_Init+0xba>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
100030d2:	687b      	ldr	r3, [r7, #4]
100030d4:	685b      	ldr	r3, [r3, #4]
100030d6:	1c18      	adds	r0, r3, #0
100030d8:	f7ff fe16 	bl	10002d08 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
100030dc:	687b      	ldr	r3, [r7, #4]
100030de:	685b      	ldr	r3, [r3, #4]
100030e0:	1c18      	adds	r0, r3, #0
100030e2:	f7ff fe2d 	bl	10002d40 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
100030e6:	687b      	ldr	r3, [r7, #4]
100030e8:	22a7      	movs	r2, #167	; 0xa7
100030ea:	5c9b      	ldrb	r3, [r3, r2]
100030ec:	2201      	movs	r2, #1
100030ee:	4053      	eors	r3, r2
100030f0:	b2db      	uxtb	r3, r3
100030f2:	2b00      	cmp	r3, #0
100030f4:	d013      	beq.n	1000311e <CAN_NODE_Init+0x14a>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
100030f6:	68fb      	ldr	r3, [r7, #12]
100030f8:	6818      	ldr	r0, [r3, #0]
100030fa:	68fb      	ldr	r3, [r7, #12]
100030fc:	7919      	ldrb	r1, [r3, #4]
100030fe:	687b      	ldr	r3, [r7, #4]
10003100:	2294      	movs	r2, #148	; 0x94
10003102:	589b      	ldr	r3, [r3, r2]
10003104:	1c1a      	adds	r2, r3, #0
10003106:	f7fe f83f 	bl	10001188 <XMC_GPIO_Init>
1000310a:	e008      	b.n	1000311e <CAN_NODE_Init+0x14a>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
1000310c:	2317      	movs	r3, #23
1000310e:	18fb      	adds	r3, r7, r3
10003110:	2201      	movs	r2, #1
10003112:	701a      	strb	r2, [r3, #0]
10003114:	e003      	b.n	1000311e <CAN_NODE_Init+0x14a>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
10003116:	2317      	movs	r3, #23
10003118:	18fb      	adds	r3, r7, r3
1000311a:	2201      	movs	r2, #1
1000311c:	701a      	strb	r2, [r3, #0]
  }

  return (status);
1000311e:	2317      	movs	r3, #23
10003120:	18fb      	adds	r3, r7, r3
10003122:	781b      	ldrb	r3, [r3, #0]
}
10003124:	1c18      	adds	r0, r3, #0
10003126:	46bd      	mov	sp, r7
10003128:	b007      	add	sp, #28
1000312a:	bd90      	pop	{r4, r7, pc}

1000312c <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
1000312c:	b580      	push	{r7, lr}
1000312e:	b084      	sub	sp, #16
10003130:	af00      	add	r7, sp, #0
10003132:	60f8      	str	r0, [r7, #12]
10003134:	607a      	str	r2, [r7, #4]
10003136:	230b      	movs	r3, #11
10003138:	18fb      	adds	r3, r7, r3
1000313a:	1c0a      	adds	r2, r1, #0
1000313c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));

  port->OMR = (uint32_t)level << pin;
1000313e:	230b      	movs	r3, #11
10003140:	18fb      	adds	r3, r7, r3
10003142:	781b      	ldrb	r3, [r3, #0]
10003144:	687a      	ldr	r2, [r7, #4]
10003146:	409a      	lsls	r2, r3
10003148:	68fb      	ldr	r3, [r7, #12]
1000314a:	605a      	str	r2, [r3, #4]
}
1000314c:	46bd      	mov	sp, r7
1000314e:	b004      	add	sp, #16
10003150:	bd80      	pop	{r7, pc}
10003152:	46c0      	nop			; (mov r8, r8)

10003154 <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
10003154:	b580      	push	{r7, lr}
10003156:	b084      	sub	sp, #16
10003158:	af00      	add	r7, sp, #0
1000315a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
1000315c:	687b      	ldr	r3, [r7, #4]
1000315e:	7b5b      	ldrb	r3, [r3, #13]
10003160:	2201      	movs	r2, #1
10003162:	4053      	eors	r3, r2
10003164:	b2db      	uxtb	r3, r3
10003166:	2b00      	cmp	r3, #0
10003168:	d02c      	beq.n	100031c4 <BUS_IO_Init+0x70>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
1000316a:	230f      	movs	r3, #15
1000316c:	18fb      	adds	r3, r7, r3
1000316e:	2200      	movs	r2, #0
10003170:	701a      	strb	r2, [r3, #0]
10003172:	e01d      	b.n	100031b0 <BUS_IO_Init+0x5c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
10003174:	687b      	ldr	r3, [r7, #4]
10003176:	681a      	ldr	r2, [r3, #0]
10003178:	230f      	movs	r3, #15
1000317a:	18fb      	adds	r3, r7, r3
1000317c:	781b      	ldrb	r3, [r3, #0]
1000317e:	00db      	lsls	r3, r3, #3
10003180:	18d3      	adds	r3, r2, r3
10003182:	6819      	ldr	r1, [r3, #0]
10003184:	687b      	ldr	r3, [r7, #4]
10003186:	681a      	ldr	r2, [r3, #0]
10003188:	230f      	movs	r3, #15
1000318a:	18fb      	adds	r3, r7, r3
1000318c:	781b      	ldrb	r3, [r3, #0]
1000318e:	00db      	lsls	r3, r3, #3
10003190:	18d3      	adds	r3, r2, r3
10003192:	791a      	ldrb	r2, [r3, #4]
10003194:	687b      	ldr	r3, [r7, #4]
10003196:	3304      	adds	r3, #4
10003198:	1c08      	adds	r0, r1, #0
1000319a:	1c11      	adds	r1, r2, #0
1000319c:	1c1a      	adds	r2, r3, #0
1000319e:	f7fd fff3 	bl	10001188 <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
100031a2:	230f      	movs	r3, #15
100031a4:	18fb      	adds	r3, r7, r3
100031a6:	781a      	ldrb	r2, [r3, #0]
100031a8:	230f      	movs	r3, #15
100031aa:	18fb      	adds	r3, r7, r3
100031ac:	3201      	adds	r2, #1
100031ae:	701a      	strb	r2, [r3, #0]
100031b0:	687b      	ldr	r3, [r7, #4]
100031b2:	7b1b      	ldrb	r3, [r3, #12]
100031b4:	220f      	movs	r2, #15
100031b6:	18ba      	adds	r2, r7, r2
100031b8:	7812      	ldrb	r2, [r2, #0]
100031ba:	429a      	cmp	r2, r3
100031bc:	d3da      	bcc.n	10003174 <BUS_IO_Init+0x20>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
100031be:	687b      	ldr	r3, [r7, #4]
100031c0:	2201      	movs	r2, #1
100031c2:	735a      	strb	r2, [r3, #13]
  }
  return (BUS_IO_STATUS_OK);
100031c4:	2300      	movs	r3, #0
}
100031c6:	1c18      	adds	r0, r3, #0
100031c8:	46bd      	mov	sp, r7
100031ca:	b004      	add	sp, #16
100031cc:	bd80      	pop	{r7, pc}
100031ce:	46c0      	nop			; (mov r8, r8)

100031d0 <BUS_IO_Write>:
  return(count);
}

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
100031d0:	b580      	push	{r7, lr}
100031d2:	b084      	sub	sp, #16
100031d4:	af00      	add	r7, sp, #0
100031d6:	6078      	str	r0, [r7, #4]
100031d8:	1c0a      	adds	r2, r1, #0
100031da:	1cbb      	adds	r3, r7, #2
100031dc:	801a      	strh	r2, [r3, #0]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
100031de:	687b      	ldr	r3, [r7, #4]
100031e0:	681b      	ldr	r3, [r3, #0]
100031e2:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
100031e4:	230f      	movs	r3, #15
100031e6:	18fb      	adds	r3, r7, r3
100031e8:	2200      	movs	r2, #0
100031ea:	701a      	strb	r2, [r3, #0]
100031ec:	e02b      	b.n	10003246 <BUS_IO_Write+0x76>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
100031ee:	230f      	movs	r3, #15
100031f0:	18fb      	adds	r3, r7, r3
100031f2:	781b      	ldrb	r3, [r3, #0]
100031f4:	2201      	movs	r2, #1
100031f6:	409a      	lsls	r2, r3
100031f8:	1c13      	adds	r3, r2, #0
100031fa:	b29b      	uxth	r3, r3
100031fc:	1cba      	adds	r2, r7, #2
100031fe:	8812      	ldrh	r2, [r2, #0]
10003200:	4013      	ands	r3, r2
10003202:	b29b      	uxth	r3, r3
10003204:	2b00      	cmp	r3, #0
10003206:	d009      	beq.n	1000321c <BUS_IO_Write+0x4c>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10003208:	68bb      	ldr	r3, [r7, #8]
1000320a:	681a      	ldr	r2, [r3, #0]
1000320c:	68bb      	ldr	r3, [r7, #8]
1000320e:	791b      	ldrb	r3, [r3, #4]
10003210:	1c10      	adds	r0, r2, #0
10003212:	1c19      	adds	r1, r3, #0
10003214:	2201      	movs	r2, #1
10003216:	f7ff ff89 	bl	1000312c <XMC_GPIO_SetOutputLevel>
1000321a:	e00a      	b.n	10003232 <BUS_IO_Write+0x62>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
1000321c:	68bb      	ldr	r3, [r7, #8]
1000321e:	6819      	ldr	r1, [r3, #0]
10003220:	68bb      	ldr	r3, [r7, #8]
10003222:	791a      	ldrb	r2, [r3, #4]
10003224:	2380      	movs	r3, #128	; 0x80
10003226:	025b      	lsls	r3, r3, #9
10003228:	1c08      	adds	r0, r1, #0
1000322a:	1c11      	adds	r1, r2, #0
1000322c:	1c1a      	adds	r2, r3, #0
1000322e:	f7ff ff7d 	bl	1000312c <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
10003232:	68bb      	ldr	r3, [r7, #8]
10003234:	3308      	adds	r3, #8
10003236:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
10003238:	230f      	movs	r3, #15
1000323a:	18fb      	adds	r3, r7, r3
1000323c:	781a      	ldrb	r2, [r3, #0]
1000323e:	230f      	movs	r3, #15
10003240:	18fb      	adds	r3, r7, r3
10003242:	3201      	adds	r2, #1
10003244:	701a      	strb	r2, [r3, #0]
10003246:	687b      	ldr	r3, [r7, #4]
10003248:	7b1b      	ldrb	r3, [r3, #12]
1000324a:	220f      	movs	r2, #15
1000324c:	18ba      	adds	r2, r7, r2
1000324e:	7812      	ldrb	r2, [r2, #0]
10003250:	429a      	cmp	r2, r3
10003252:	d3cc      	bcc.n	100031ee <BUS_IO_Write+0x1e>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
10003254:	46bd      	mov	sp, r7
10003256:	b004      	add	sp, #16
10003258:	bd80      	pop	{r7, pc}
1000325a:	46c0      	nop			; (mov r8, r8)

1000325c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
1000325c:	b590      	push	{r4, r7, lr}
1000325e:	b083      	sub	sp, #12
10003260:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10003262:	1dfb      	adds	r3, r7, #7
10003264:	2200      	movs	r2, #0
10003266:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10003268:	1dfc      	adds	r4, r7, #7
1000326a:	4b2c      	ldr	r3, [pc, #176]	; (1000331c <DAVE_Init+0xc0>)
1000326c:	1c18      	adds	r0, r3, #0
1000326e:	f7ff f9af 	bl	100025d0 <CLOCK_XMC1_Init>
10003272:	1c03      	adds	r3, r0, #0
10003274:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10003276:	1dfb      	adds	r3, r7, #7
10003278:	781b      	ldrb	r3, [r3, #0]
1000327a:	2b00      	cmp	r3, #0
1000327c:	d106      	bne.n	1000328c <DAVE_Init+0x30>
  {
	 /**  Initialization of CAPTURE APP instance CAPTURE_C */
	 init_status = (DAVE_STATUS_t)CAPTURE_Init(&CAPTURE_C); 
1000327e:	1dfc      	adds	r4, r7, #7
10003280:	4b27      	ldr	r3, [pc, #156]	; (10003320 <DAVE_Init+0xc4>)
10003282:	1c18      	adds	r0, r3, #0
10003284:	f7ff fa44 	bl	10002710 <CAPTURE_Init>
10003288:	1c03      	adds	r3, r0, #0
1000328a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000328c:	1dfb      	adds	r3, r7, #7
1000328e:	781b      	ldrb	r3, [r3, #0]
10003290:	2b00      	cmp	r3, #0
10003292:	d106      	bne.n	100032a2 <DAVE_Init+0x46>
  {
	 /**  Initialization of CAPTURE APP instance CAPTURE_R */
	 init_status = (DAVE_STATUS_t)CAPTURE_Init(&CAPTURE_R); 
10003294:	1dfc      	adds	r4, r7, #7
10003296:	4b23      	ldr	r3, [pc, #140]	; (10003324 <DAVE_Init+0xc8>)
10003298:	1c18      	adds	r0, r3, #0
1000329a:	f7ff fa39 	bl	10002710 <CAPTURE_Init>
1000329e:	1c03      	adds	r3, r0, #0
100032a0:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100032a2:	1dfb      	adds	r3, r7, #7
100032a4:	781b      	ldrb	r3, [r3, #0]
100032a6:	2b00      	cmp	r3, #0
100032a8:	d106      	bne.n	100032b8 <DAVE_Init+0x5c>
  {
	 /**  Initialization of CAPTURE APP instance CAPTURE_L */
	 init_status = (DAVE_STATUS_t)CAPTURE_Init(&CAPTURE_L); 
100032aa:	1dfc      	adds	r4, r7, #7
100032ac:	4b1e      	ldr	r3, [pc, #120]	; (10003328 <DAVE_Init+0xcc>)
100032ae:	1c18      	adds	r0, r3, #0
100032b0:	f7ff fa2e 	bl	10002710 <CAPTURE_Init>
100032b4:	1c03      	adds	r3, r0, #0
100032b6:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100032b8:	1dfb      	adds	r3, r7, #7
100032ba:	781b      	ldrb	r3, [r3, #0]
100032bc:	2b00      	cmp	r3, #0
100032be:	d106      	bne.n	100032ce <DAVE_Init+0x72>
  {
	 /**  Initialization of TIMER APP instance TIMER_100us */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_100us); 
100032c0:	1dfc      	adds	r4, r7, #7
100032c2:	4b1a      	ldr	r3, [pc, #104]	; (1000332c <DAVE_Init+0xd0>)
100032c4:	1c18      	adds	r0, r3, #0
100032c6:	f7fe ffd1 	bl	1000226c <TIMER_Init>
100032ca:	1c03      	adds	r3, r0, #0
100032cc:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100032ce:	1dfb      	adds	r3, r7, #7
100032d0:	781b      	ldrb	r3, [r3, #0]
100032d2:	2b00      	cmp	r3, #0
100032d4:	d106      	bne.n	100032e4 <DAVE_Init+0x88>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO_TRIGGER */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO_TRIGGER); 
100032d6:	1dfc      	adds	r4, r7, #7
100032d8:	4b15      	ldr	r3, [pc, #84]	; (10003330 <DAVE_Init+0xd4>)
100032da:	1c18      	adds	r0, r3, #0
100032dc:	f7ff ff3a 	bl	10003154 <BUS_IO_Init>
100032e0:	1c03      	adds	r3, r0, #0
100032e2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100032e4:	1dfb      	adds	r3, r7, #7
100032e6:	781b      	ldrb	r3, [r3, #0]
100032e8:	2b00      	cmp	r3, #0
100032ea:	d106      	bne.n	100032fa <DAVE_Init+0x9e>
  {
	 /**  Initialization of INTERRUPT APP instance TIMER_100us_INT */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&TIMER_100us_INT); 
100032ec:	1dfc      	adds	r4, r7, #7
100032ee:	4b11      	ldr	r3, [pc, #68]	; (10003334 <DAVE_Init+0xd8>)
100032f0:	1c18      	adds	r0, r3, #0
100032f2:	f7ff f8e1 	bl	100024b8 <INTERRUPT_Init>
100032f6:	1c03      	adds	r3, r0, #0
100032f8:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100032fa:	1dfb      	adds	r3, r7, #7
100032fc:	781b      	ldrb	r3, [r3, #0]
100032fe:	2b00      	cmp	r3, #0
10003300:	d106      	bne.n	10003310 <DAVE_Init+0xb4>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
10003302:	1dfc      	adds	r4, r7, #7
10003304:	4b0c      	ldr	r3, [pc, #48]	; (10003338 <DAVE_Init+0xdc>)
10003306:	1c18      	adds	r0, r3, #0
10003308:	f7ff fe64 	bl	10002fd4 <CAN_NODE_Init>
1000330c:	1c03      	adds	r3, r0, #0
1000330e:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10003310:	1dfb      	adds	r3, r7, #7
10003312:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
10003314:	1c18      	adds	r0, r3, #0
10003316:	46bd      	mov	sp, r7
10003318:	b003      	add	sp, #12
1000331a:	bd90      	pop	{r4, r7, pc}
1000331c:	20000680 	.word	0x20000680
10003320:	200005a4 	.word	0x200005a4
10003324:	200005d8 	.word	0x200005d8
10003328:	2000060c 	.word	0x2000060c
1000332c:	20000550 	.word	0x20000550
10003330:	20000660 	.word	0x20000660
10003334:	10004b84 	.word	0x10004b84
10003338:	10004c38 	.word	0x10004c38

1000333c <main>:
void Capture_read();
void CAN_send_vaules(uint16_t distance_C_CAN, uint16_t distance_L_CAN, uint16_t distance_R_CAN );
bool within_MAX_MIN_check_int(int x, int MAX, int MIN);

int main(void)
{
1000333c:	b590      	push	{r4, r7, lr}
1000333e:	b083      	sub	sp, #12
10003340:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
10003342:	1dfc      	adds	r4, r7, #7
10003344:	f7ff ff8a 	bl	1000325c <DAVE_Init>
10003348:	1c03      	adds	r3, r0, #0
1000334a:	7023      	strb	r3, [r4, #0]

  if (status != DAVE_STATUS_SUCCESS)
1000334c:	1dfb      	adds	r3, r7, #7
1000334e:	781b      	ldrb	r3, [r3, #0]
10003350:	2b00      	cmp	r3, #0
10003352:	d000      	beq.n	10003356 <main+0x1a>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
10003354:	e7fe      	b.n	10003354 <main+0x18>
  }

  //Initialization of CAN
 	//CAN_NODE_STATUS_t init_status;
 	init_status = CAN_NODE_Init(&CAN_NODE_0);
10003356:	4b08      	ldr	r3, [pc, #32]	; (10003378 <main+0x3c>)
10003358:	1c18      	adds	r0, r3, #0
1000335a:	f7ff fe3b 	bl	10002fd4 <CAN_NODE_Init>
1000335e:	1c03      	adds	r3, r0, #0
10003360:	1c1a      	adds	r2, r3, #0
10003362:	4b06      	ldr	r3, [pc, #24]	; (1000337c <main+0x40>)
10003364:	701a      	strb	r2, [r3, #0]

 	if (init_status != CAN_NODE_STATUS_SUCCESS) {
10003366:	4b05      	ldr	r3, [pc, #20]	; (1000337c <main+0x40>)
10003368:	781b      	ldrb	r3, [r3, #0]
1000336a:	2b00      	cmp	r3, #0
1000336c:	d102      	bne.n	10003374 <main+0x38>
 		XMC_DEBUG("CAN initialization failed\n");
 	}
 	else{
 		CAN_OK = 1;
1000336e:	4b04      	ldr	r3, [pc, #16]	; (10003380 <main+0x44>)
10003370:	2201      	movs	r2, #1
10003372:	701a      	strb	r2, [r3, #0]

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
10003374:	e7fe      	b.n	10003374 <main+0x38>
10003376:	46c0      	nop			; (mov r8, r8)
10003378:	10004c38 	.word	0x10004c38
1000337c:	200006a8 	.word	0x200006a8
10003380:	20000684 	.word	0x20000684

10003384 <IRQ21_Handler>:
}

void TIMER_100us_ISR(){
10003384:	b580      	push	{r7, lr}
10003386:	af00      	add	r7, sp, #0
	t_100us_count ++;
10003388:	4b20      	ldr	r3, [pc, #128]	; (1000340c <IRQ21_Handler+0x88>)
1000338a:	881b      	ldrh	r3, [r3, #0]
1000338c:	b29b      	uxth	r3, r3
1000338e:	3301      	adds	r3, #1
10003390:	b29a      	uxth	r2, r3
10003392:	4b1e      	ldr	r3, [pc, #120]	; (1000340c <IRQ21_Handler+0x88>)
10003394:	801a      	strh	r2, [r3, #0]

	if(t_100us_count == 1){
10003396:	4b1d      	ldr	r3, [pc, #116]	; (1000340c <IRQ21_Handler+0x88>)
10003398:	881b      	ldrh	r3, [r3, #0]
1000339a:	b29b      	uxth	r3, r3
1000339c:	2b01      	cmp	r3, #1
1000339e:	d111      	bne.n	100033c4 <IRQ21_Handler+0x40>
		 BUS_IO_Write(&BUS_IO_TRIGGER,0b111);
100033a0:	4b1b      	ldr	r3, [pc, #108]	; (10003410 <IRQ21_Handler+0x8c>)
100033a2:	1c18      	adds	r0, r3, #0
100033a4:	2107      	movs	r1, #7
100033a6:	f7ff ff13 	bl	100031d0 <BUS_IO_Write>

		CAPTURE_Start(&CAPTURE_C);
100033aa:	4b1a      	ldr	r3, [pc, #104]	; (10003414 <IRQ21_Handler+0x90>)
100033ac:	1c18      	adds	r0, r3, #0
100033ae:	f7ff f9ff 	bl	100027b0 <CAPTURE_Start>
		CAPTURE_Start(&CAPTURE_L);
100033b2:	4b19      	ldr	r3, [pc, #100]	; (10003418 <IRQ21_Handler+0x94>)
100033b4:	1c18      	adds	r0, r3, #0
100033b6:	f7ff f9fb 	bl	100027b0 <CAPTURE_Start>
		CAPTURE_Start(&CAPTURE_R);
100033ba:	4b18      	ldr	r3, [pc, #96]	; (1000341c <IRQ21_Handler+0x98>)
100033bc:	1c18      	adds	r0, r3, #0
100033be:	f7ff f9f7 	bl	100027b0 <CAPTURE_Start>
100033c2:	e021      	b.n	10003408 <IRQ21_Handler+0x84>
	}
	else if (t_100us_count == 2) {
100033c4:	4b11      	ldr	r3, [pc, #68]	; (1000340c <IRQ21_Handler+0x88>)
100033c6:	881b      	ldrh	r3, [r3, #0]
100033c8:	b29b      	uxth	r3, r3
100033ca:	2b02      	cmp	r3, #2
100033cc:	d105      	bne.n	100033da <IRQ21_Handler+0x56>
		 BUS_IO_Write(&BUS_IO_TRIGGER,0b000);
100033ce:	4b10      	ldr	r3, [pc, #64]	; (10003410 <IRQ21_Handler+0x8c>)
100033d0:	1c18      	adds	r0, r3, #0
100033d2:	2100      	movs	r1, #0
100033d4:	f7ff fefc 	bl	100031d0 <BUS_IO_Write>
100033d8:	e016      	b.n	10003408 <IRQ21_Handler+0x84>
	}
	else if (t_100us_count == 280) { // runnig at 35 Hz no probelm with long distasnce anymore
100033da:	4b0c      	ldr	r3, [pc, #48]	; (1000340c <IRQ21_Handler+0x88>)
100033dc:	881b      	ldrh	r3, [r3, #0]
100033de:	b29a      	uxth	r2, r3
100033e0:	238c      	movs	r3, #140	; 0x8c
100033e2:	005b      	lsls	r3, r3, #1
100033e4:	429a      	cmp	r2, r3
100033e6:	d10f      	bne.n	10003408 <IRQ21_Handler+0x84>
		Capture_read();
100033e8:	f000 f820 	bl	1000342c <Capture_read>
		CAN_send_vaules(distance_C, distance_L, distance_R );
100033ec:	4b0c      	ldr	r3, [pc, #48]	; (10003420 <IRQ21_Handler+0x9c>)
100033ee:	8819      	ldrh	r1, [r3, #0]
100033f0:	4b0c      	ldr	r3, [pc, #48]	; (10003424 <IRQ21_Handler+0xa0>)
100033f2:	881a      	ldrh	r2, [r3, #0]
100033f4:	4b0c      	ldr	r3, [pc, #48]	; (10003428 <IRQ21_Handler+0xa4>)
100033f6:	881b      	ldrh	r3, [r3, #0]
100033f8:	1c08      	adds	r0, r1, #0
100033fa:	1c11      	adds	r1, r2, #0
100033fc:	1c1a      	adds	r2, r3, #0
100033fe:	f000 f909 	bl	10003614 <CAN_send_vaules>
		t_100us_count = 0;
10003402:	4b02      	ldr	r3, [pc, #8]	; (1000340c <IRQ21_Handler+0x88>)
10003404:	2200      	movs	r2, #0
10003406:	801a      	strh	r2, [r3, #0]
	}
}
10003408:	46bd      	mov	sp, r7
1000340a:	bd80      	pop	{r7, pc}
1000340c:	20000686 	.word	0x20000686
10003410:	20000660 	.word	0x20000660
10003414:	200005a4 	.word	0x200005a4
10003418:	2000060c 	.word	0x2000060c
1000341c:	200005d8 	.word	0x200005d8
10003420:	20000690 	.word	0x20000690
10003424:	20000698 	.word	0x20000698
10003428:	200006a0 	.word	0x200006a0

1000342c <Capture_read>:

void Capture_read(){
1000342c:	b598      	push	{r3, r4, r7, lr}
1000342e:	af00      	add	r7, sp, #0

	if(CAPTURE_GetCapturedTimeInNanoSec(&CAPTURE_C, &captured_time) == CAPTURE_STATUS_SUCCESS){
10003430:	4a5c      	ldr	r2, [pc, #368]	; (100035a4 <Capture_read+0x178>)
10003432:	4b5d      	ldr	r3, [pc, #372]	; (100035a8 <Capture_read+0x17c>)
10003434:	1c10      	adds	r0, r2, #0
10003436:	1c19      	adds	r1, r3, #0
10003438:	f7ff f9f0 	bl	1000281c <CAPTURE_GetCapturedTimeInNanoSec>
1000343c:	1e03      	subs	r3, r0, #0
1000343e:	d12e      	bne.n	1000349e <Capture_read+0x72>
		echo_time_C = captured_time;
10003440:	4b59      	ldr	r3, [pc, #356]	; (100035a8 <Capture_read+0x17c>)
10003442:	681a      	ldr	r2, [r3, #0]
10003444:	4b59      	ldr	r3, [pc, #356]	; (100035ac <Capture_read+0x180>)
10003446:	601a      	str	r2, [r3, #0]
		flag_C = 0;
10003448:	4b59      	ldr	r3, [pc, #356]	; (100035b0 <Capture_read+0x184>)
1000344a:	2200      	movs	r2, #0
1000344c:	701a      	strb	r2, [r3, #0]

		if(within_MAX_MIN_check_int(echo_time_C, ECHO_TIME_MAX, ECHO_TIME_MIN))	distance_C = echo_time_C * ECHO_TIME_ns_TO_DISTANCE_cm;
1000344e:	4b57      	ldr	r3, [pc, #348]	; (100035ac <Capture_read+0x180>)
10003450:	681b      	ldr	r3, [r3, #0]
10003452:	1c19      	adds	r1, r3, #0
10003454:	4a57      	ldr	r2, [pc, #348]	; (100035b4 <Capture_read+0x188>)
10003456:	4b58      	ldr	r3, [pc, #352]	; (100035b8 <Capture_read+0x18c>)
10003458:	1c08      	adds	r0, r1, #0
1000345a:	1c11      	adds	r1, r2, #0
1000345c:	1c1a      	adds	r2, r3, #0
1000345e:	f000 f8c3 	bl	100035e8 <within_MAX_MIN_check_int>
10003462:	1e03      	subs	r3, r0, #0
10003464:	d017      	beq.n	10003496 <Capture_read+0x6a>
10003466:	4b51      	ldr	r3, [pc, #324]	; (100035ac <Capture_read+0x180>)
10003468:	681b      	ldr	r3, [r3, #0]
1000346a:	1c18      	adds	r0, r3, #0
1000346c:	f001 f810 	bl	10004490 <__aeabi_ui2d>
10003470:	1c03      	adds	r3, r0, #0
10003472:	1c0c      	adds	r4, r1, #0
10003474:	1c18      	adds	r0, r3, #0
10003476:	1c21      	adds	r1, r4, #0
10003478:	4a50      	ldr	r2, [pc, #320]	; (100035bc <Capture_read+0x190>)
1000347a:	4b51      	ldr	r3, [pc, #324]	; (100035c0 <Capture_read+0x194>)
1000347c:	f000 f9be 	bl	100037fc <__aeabi_dmul>
10003480:	1c03      	adds	r3, r0, #0
10003482:	1c0c      	adds	r4, r1, #0
10003484:	1c18      	adds	r0, r3, #0
10003486:	1c21      	adds	r1, r4, #0
10003488:	f000 f964 	bl	10003754 <__aeabi_d2uiz>
1000348c:	1c03      	adds	r3, r0, #0
1000348e:	b29a      	uxth	r2, r3
10003490:	4b4c      	ldr	r3, [pc, #304]	; (100035c4 <Capture_read+0x198>)
10003492:	801a      	strh	r2, [r3, #0]
10003494:	e009      	b.n	100034aa <Capture_read+0x7e>
		else distance_C = 0;
10003496:	4b4b      	ldr	r3, [pc, #300]	; (100035c4 <Capture_read+0x198>)
10003498:	2200      	movs	r2, #0
1000349a:	801a      	strh	r2, [r3, #0]
1000349c:	e005      	b.n	100034aa <Capture_read+0x7e>
	}
	else{
		flag_C = 1;
1000349e:	4b44      	ldr	r3, [pc, #272]	; (100035b0 <Capture_read+0x184>)
100034a0:	2201      	movs	r2, #1
100034a2:	701a      	strb	r2, [r3, #0]
		distance_C = 0;
100034a4:	4b47      	ldr	r3, [pc, #284]	; (100035c4 <Capture_read+0x198>)
100034a6:	2200      	movs	r2, #0
100034a8:	801a      	strh	r2, [r3, #0]
	}

	if(CAPTURE_GetCapturedTimeInNanoSec(&CAPTURE_L, &captured_time) == CAPTURE_STATUS_SUCCESS){
100034aa:	4a47      	ldr	r2, [pc, #284]	; (100035c8 <Capture_read+0x19c>)
100034ac:	4b3e      	ldr	r3, [pc, #248]	; (100035a8 <Capture_read+0x17c>)
100034ae:	1c10      	adds	r0, r2, #0
100034b0:	1c19      	adds	r1, r3, #0
100034b2:	f7ff f9b3 	bl	1000281c <CAPTURE_GetCapturedTimeInNanoSec>
100034b6:	1e03      	subs	r3, r0, #0
100034b8:	d12e      	bne.n	10003518 <Capture_read+0xec>
			echo_time_L = captured_time;
100034ba:	4b3b      	ldr	r3, [pc, #236]	; (100035a8 <Capture_read+0x17c>)
100034bc:	681a      	ldr	r2, [r3, #0]
100034be:	4b43      	ldr	r3, [pc, #268]	; (100035cc <Capture_read+0x1a0>)
100034c0:	601a      	str	r2, [r3, #0]
			flag_L = 0;
100034c2:	4b43      	ldr	r3, [pc, #268]	; (100035d0 <Capture_read+0x1a4>)
100034c4:	2200      	movs	r2, #0
100034c6:	701a      	strb	r2, [r3, #0]

			if(within_MAX_MIN_check_int(echo_time_L, ECHO_TIME_MAX, ECHO_TIME_MIN))	distance_L = echo_time_L * ECHO_TIME_ns_TO_DISTANCE_cm;
100034c8:	4b40      	ldr	r3, [pc, #256]	; (100035cc <Capture_read+0x1a0>)
100034ca:	681b      	ldr	r3, [r3, #0]
100034cc:	1c19      	adds	r1, r3, #0
100034ce:	4a39      	ldr	r2, [pc, #228]	; (100035b4 <Capture_read+0x188>)
100034d0:	4b39      	ldr	r3, [pc, #228]	; (100035b8 <Capture_read+0x18c>)
100034d2:	1c08      	adds	r0, r1, #0
100034d4:	1c11      	adds	r1, r2, #0
100034d6:	1c1a      	adds	r2, r3, #0
100034d8:	f000 f886 	bl	100035e8 <within_MAX_MIN_check_int>
100034dc:	1e03      	subs	r3, r0, #0
100034de:	d017      	beq.n	10003510 <Capture_read+0xe4>
100034e0:	4b3a      	ldr	r3, [pc, #232]	; (100035cc <Capture_read+0x1a0>)
100034e2:	681b      	ldr	r3, [r3, #0]
100034e4:	1c18      	adds	r0, r3, #0
100034e6:	f000 ffd3 	bl	10004490 <__aeabi_ui2d>
100034ea:	1c03      	adds	r3, r0, #0
100034ec:	1c0c      	adds	r4, r1, #0
100034ee:	1c18      	adds	r0, r3, #0
100034f0:	1c21      	adds	r1, r4, #0
100034f2:	4a32      	ldr	r2, [pc, #200]	; (100035bc <Capture_read+0x190>)
100034f4:	4b32      	ldr	r3, [pc, #200]	; (100035c0 <Capture_read+0x194>)
100034f6:	f000 f981 	bl	100037fc <__aeabi_dmul>
100034fa:	1c03      	adds	r3, r0, #0
100034fc:	1c0c      	adds	r4, r1, #0
100034fe:	1c18      	adds	r0, r3, #0
10003500:	1c21      	adds	r1, r4, #0
10003502:	f000 f927 	bl	10003754 <__aeabi_d2uiz>
10003506:	1c03      	adds	r3, r0, #0
10003508:	b29a      	uxth	r2, r3
1000350a:	4b32      	ldr	r3, [pc, #200]	; (100035d4 <Capture_read+0x1a8>)
1000350c:	801a      	strh	r2, [r3, #0]
1000350e:	e009      	b.n	10003524 <Capture_read+0xf8>
			else distance_L = 0;
10003510:	4b30      	ldr	r3, [pc, #192]	; (100035d4 <Capture_read+0x1a8>)
10003512:	2200      	movs	r2, #0
10003514:	801a      	strh	r2, [r3, #0]
10003516:	e005      	b.n	10003524 <Capture_read+0xf8>
		}
		else{
			flag_L = 1;
10003518:	4b2d      	ldr	r3, [pc, #180]	; (100035d0 <Capture_read+0x1a4>)
1000351a:	2201      	movs	r2, #1
1000351c:	701a      	strb	r2, [r3, #0]
			distance_L = 0;
1000351e:	4b2d      	ldr	r3, [pc, #180]	; (100035d4 <Capture_read+0x1a8>)
10003520:	2200      	movs	r2, #0
10003522:	801a      	strh	r2, [r3, #0]
		}


	if(CAPTURE_GetCapturedTimeInNanoSec(&CAPTURE_R, &captured_time) == CAPTURE_STATUS_SUCCESS){
10003524:	4a2c      	ldr	r2, [pc, #176]	; (100035d8 <Capture_read+0x1ac>)
10003526:	4b20      	ldr	r3, [pc, #128]	; (100035a8 <Capture_read+0x17c>)
10003528:	1c10      	adds	r0, r2, #0
1000352a:	1c19      	adds	r1, r3, #0
1000352c:	f7ff f976 	bl	1000281c <CAPTURE_GetCapturedTimeInNanoSec>
10003530:	1e03      	subs	r3, r0, #0
10003532:	d12e      	bne.n	10003592 <Capture_read+0x166>
			echo_time_R = captured_time;
10003534:	4b1c      	ldr	r3, [pc, #112]	; (100035a8 <Capture_read+0x17c>)
10003536:	681a      	ldr	r2, [r3, #0]
10003538:	4b28      	ldr	r3, [pc, #160]	; (100035dc <Capture_read+0x1b0>)
1000353a:	601a      	str	r2, [r3, #0]
			flag_R = 0;
1000353c:	4b28      	ldr	r3, [pc, #160]	; (100035e0 <Capture_read+0x1b4>)
1000353e:	2200      	movs	r2, #0
10003540:	701a      	strb	r2, [r3, #0]

			if(within_MAX_MIN_check_int(echo_time_R, ECHO_TIME_MAX, ECHO_TIME_MIN))	distance_R = echo_time_R * ECHO_TIME_ns_TO_DISTANCE_cm;
10003542:	4b26      	ldr	r3, [pc, #152]	; (100035dc <Capture_read+0x1b0>)
10003544:	681b      	ldr	r3, [r3, #0]
10003546:	1c19      	adds	r1, r3, #0
10003548:	4a1a      	ldr	r2, [pc, #104]	; (100035b4 <Capture_read+0x188>)
1000354a:	4b1b      	ldr	r3, [pc, #108]	; (100035b8 <Capture_read+0x18c>)
1000354c:	1c08      	adds	r0, r1, #0
1000354e:	1c11      	adds	r1, r2, #0
10003550:	1c1a      	adds	r2, r3, #0
10003552:	f000 f849 	bl	100035e8 <within_MAX_MIN_check_int>
10003556:	1e03      	subs	r3, r0, #0
10003558:	d017      	beq.n	1000358a <Capture_read+0x15e>
1000355a:	4b20      	ldr	r3, [pc, #128]	; (100035dc <Capture_read+0x1b0>)
1000355c:	681b      	ldr	r3, [r3, #0]
1000355e:	1c18      	adds	r0, r3, #0
10003560:	f000 ff96 	bl	10004490 <__aeabi_ui2d>
10003564:	1c03      	adds	r3, r0, #0
10003566:	1c0c      	adds	r4, r1, #0
10003568:	1c18      	adds	r0, r3, #0
1000356a:	1c21      	adds	r1, r4, #0
1000356c:	4a13      	ldr	r2, [pc, #76]	; (100035bc <Capture_read+0x190>)
1000356e:	4b14      	ldr	r3, [pc, #80]	; (100035c0 <Capture_read+0x194>)
10003570:	f000 f944 	bl	100037fc <__aeabi_dmul>
10003574:	1c03      	adds	r3, r0, #0
10003576:	1c0c      	adds	r4, r1, #0
10003578:	1c18      	adds	r0, r3, #0
1000357a:	1c21      	adds	r1, r4, #0
1000357c:	f000 f8ea 	bl	10003754 <__aeabi_d2uiz>
10003580:	1c03      	adds	r3, r0, #0
10003582:	b29a      	uxth	r2, r3
10003584:	4b17      	ldr	r3, [pc, #92]	; (100035e4 <Capture_read+0x1b8>)
10003586:	801a      	strh	r2, [r3, #0]
10003588:	e009      	b.n	1000359e <Capture_read+0x172>
			else distance_R = 0;
1000358a:	4b16      	ldr	r3, [pc, #88]	; (100035e4 <Capture_read+0x1b8>)
1000358c:	2200      	movs	r2, #0
1000358e:	801a      	strh	r2, [r3, #0]
10003590:	e005      	b.n	1000359e <Capture_read+0x172>
		}
		else{
			flag_R = 1;
10003592:	4b13      	ldr	r3, [pc, #76]	; (100035e0 <Capture_read+0x1b4>)
10003594:	2201      	movs	r2, #1
10003596:	701a      	strb	r2, [r3, #0]
			distance_R = 0;
10003598:	4b12      	ldr	r3, [pc, #72]	; (100035e4 <Capture_read+0x1b8>)
1000359a:	2200      	movs	r2, #0
1000359c:	801a      	strh	r2, [r3, #0]
		}
}
1000359e:	46bd      	mov	sp, r7
100035a0:	bd98      	pop	{r3, r4, r7, pc}
100035a2:	46c0      	nop			; (mov r8, r8)
100035a4:	200005a4 	.word	0x200005a4
100035a8:	20000688 	.word	0x20000688
100035ac:	20000694 	.word	0x20000694
100035b0:	2000068c 	.word	0x2000068c
100035b4:	01312d00 	.word	0x01312d00
100035b8:	00030d40 	.word	0x00030d40
100035bc:	1ac14c66 	.word	0x1ac14c66
100035c0:	3ef1d367 	.word	0x3ef1d367
100035c4:	20000690 	.word	0x20000690
100035c8:	2000060c 	.word	0x2000060c
100035cc:	2000069c 	.word	0x2000069c
100035d0:	2000068d 	.word	0x2000068d
100035d4:	20000698 	.word	0x20000698
100035d8:	200005d8 	.word	0x200005d8
100035dc:	200006a4 	.word	0x200006a4
100035e0:	2000068e 	.word	0x2000068e
100035e4:	200006a0 	.word	0x200006a0

100035e8 <within_MAX_MIN_check_int>:

bool within_MAX_MIN_check_int(int x, int MAX, int MIN)
{
100035e8:	b580      	push	{r7, lr}
100035ea:	b084      	sub	sp, #16
100035ec:	af00      	add	r7, sp, #0
100035ee:	60f8      	str	r0, [r7, #12]
100035f0:	60b9      	str	r1, [r7, #8]
100035f2:	607a      	str	r2, [r7, #4]
	if((x - MIN) * (x - MAX) <= 0) return 1;
100035f4:	68fa      	ldr	r2, [r7, #12]
100035f6:	687b      	ldr	r3, [r7, #4]
100035f8:	1ad3      	subs	r3, r2, r3
100035fa:	68f9      	ldr	r1, [r7, #12]
100035fc:	68ba      	ldr	r2, [r7, #8]
100035fe:	1a8a      	subs	r2, r1, r2
10003600:	4353      	muls	r3, r2
10003602:	2b00      	cmp	r3, #0
10003604:	dc01      	bgt.n	1000360a <within_MAX_MIN_check_int+0x22>
10003606:	2301      	movs	r3, #1
10003608:	e000      	b.n	1000360c <within_MAX_MIN_check_int+0x24>
	else return 0;
1000360a:	2300      	movs	r3, #0

}
1000360c:	1c18      	adds	r0, r3, #0
1000360e:	46bd      	mov	sp, r7
10003610:	b004      	add	sp, #16
10003612:	bd80      	pop	{r7, pc}

10003614 <CAN_send_vaules>:

void CAN_send_vaules(uint16_t distance_C_CAN, uint16_t distance_L_CAN, uint16_t distance_R_CAN ){
10003614:	b590      	push	{r4, r7, lr}
10003616:	b085      	sub	sp, #20
10003618:	af00      	add	r7, sp, #0
1000361a:	1c04      	adds	r4, r0, #0
1000361c:	1c08      	adds	r0, r1, #0
1000361e:	1c11      	adds	r1, r2, #0
10003620:	1dbb      	adds	r3, r7, #6
10003622:	1c22      	adds	r2, r4, #0
10003624:	801a      	strh	r2, [r3, #0]
10003626:	1d3b      	adds	r3, r7, #4
10003628:	1c02      	adds	r2, r0, #0
1000362a:	801a      	strh	r2, [r3, #0]
1000362c:	1cbb      	adds	r3, r7, #2
1000362e:	1c0a      	adds	r2, r1, #0
10003630:	801a      	strh	r2, [r3, #0]

	uint16_t RX_Data[4] ={CAN_OK, distance_C_CAN, distance_L_CAN, distance_R_CAN}; // in int16_t mm/s converter back on inverter
10003632:	4b12      	ldr	r3, [pc, #72]	; (1000367c <CAN_send_vaules+0x68>)
10003634:	781b      	ldrb	r3, [r3, #0]
10003636:	b29a      	uxth	r2, r3
10003638:	2308      	movs	r3, #8
1000363a:	18fb      	adds	r3, r7, r3
1000363c:	801a      	strh	r2, [r3, #0]
1000363e:	2308      	movs	r3, #8
10003640:	18fb      	adds	r3, r7, r3
10003642:	1dba      	adds	r2, r7, #6
10003644:	8812      	ldrh	r2, [r2, #0]
10003646:	805a      	strh	r2, [r3, #2]
10003648:	2308      	movs	r3, #8
1000364a:	18fb      	adds	r3, r7, r3
1000364c:	1d3a      	adds	r2, r7, #4
1000364e:	8812      	ldrh	r2, [r2, #0]
10003650:	809a      	strh	r2, [r3, #4]
10003652:	2308      	movs	r3, #8
10003654:	18fb      	adds	r3, r7, r3
10003656:	1cba      	adds	r2, r7, #2
10003658:	8812      	ldrh	r2, [r2, #0]
1000365a:	80da      	strh	r2, [r3, #6]

	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[0], (uint8_t*)RX_Data);
1000365c:	4b08      	ldr	r3, [pc, #32]	; (10003680 <CAN_send_vaules+0x6c>)
1000365e:	68da      	ldr	r2, [r3, #12]
10003660:	2308      	movs	r3, #8
10003662:	18fb      	adds	r3, r7, r3
10003664:	1c10      	adds	r0, r2, #0
10003666:	1c19      	adds	r1, r3, #0
10003668:	f7ff fc8e 	bl	10002f88 <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[0]); //Transmit the data of message object1
1000366c:	4b04      	ldr	r3, [pc, #16]	; (10003680 <CAN_send_vaules+0x6c>)
1000366e:	68db      	ldr	r3, [r3, #12]
10003670:	1c18      	adds	r0, r3, #0
10003672:	f7ff fc71 	bl	10002f58 <CAN_NODE_MO_Transmit>
}
10003676:	46bd      	mov	sp, r7
10003678:	b005      	add	sp, #20
1000367a:	bd90      	pop	{r4, r7, pc}
1000367c:	20000684 	.word	0x20000684
10003680:	10004c38 	.word	0x10004c38

10003684 <__clzsi2>:
10003684:	211c      	movs	r1, #28
10003686:	2301      	movs	r3, #1
10003688:	041b      	lsls	r3, r3, #16
1000368a:	4298      	cmp	r0, r3
1000368c:	d301      	bcc.n	10003692 <__clzsi2+0xe>
1000368e:	0c00      	lsrs	r0, r0, #16
10003690:	3910      	subs	r1, #16
10003692:	0a1b      	lsrs	r3, r3, #8
10003694:	4298      	cmp	r0, r3
10003696:	d301      	bcc.n	1000369c <__clzsi2+0x18>
10003698:	0a00      	lsrs	r0, r0, #8
1000369a:	3908      	subs	r1, #8
1000369c:	091b      	lsrs	r3, r3, #4
1000369e:	4298      	cmp	r0, r3
100036a0:	d301      	bcc.n	100036a6 <__clzsi2+0x22>
100036a2:	0900      	lsrs	r0, r0, #4
100036a4:	3904      	subs	r1, #4
100036a6:	a202      	add	r2, pc, #8	; (adr r2, 100036b0 <__clzsi2+0x2c>)
100036a8:	5c10      	ldrb	r0, [r2, r0]
100036aa:	1840      	adds	r0, r0, r1
100036ac:	4770      	bx	lr
100036ae:	46c0      	nop			; (mov r8, r8)
100036b0:	02020304 	.word	0x02020304
100036b4:	01010101 	.word	0x01010101
	...

100036c0 <__aeabi_uldivmod>:
100036c0:	2b00      	cmp	r3, #0
100036c2:	d111      	bne.n	100036e8 <__aeabi_uldivmod+0x28>
100036c4:	2a00      	cmp	r2, #0
100036c6:	d10f      	bne.n	100036e8 <__aeabi_uldivmod+0x28>
100036c8:	2900      	cmp	r1, #0
100036ca:	d100      	bne.n	100036ce <__aeabi_uldivmod+0xe>
100036cc:	2800      	cmp	r0, #0
100036ce:	d002      	beq.n	100036d6 <__aeabi_uldivmod+0x16>
100036d0:	2100      	movs	r1, #0
100036d2:	43c9      	mvns	r1, r1
100036d4:	1c08      	adds	r0, r1, #0
100036d6:	b407      	push	{r0, r1, r2}
100036d8:	4802      	ldr	r0, [pc, #8]	; (100036e4 <__aeabi_uldivmod+0x24>)
100036da:	a102      	add	r1, pc, #8	; (adr r1, 100036e4 <__aeabi_uldivmod+0x24>)
100036dc:	1840      	adds	r0, r0, r1
100036de:	9002      	str	r0, [sp, #8]
100036e0:	bd03      	pop	{r0, r1, pc}
100036e2:	46c0      	nop			; (mov r8, r8)
100036e4:	00000e11 	.word	0x00000e11
100036e8:	b403      	push	{r0, r1}
100036ea:	4668      	mov	r0, sp
100036ec:	b501      	push	{r0, lr}
100036ee:	9802      	ldr	r0, [sp, #8]
100036f0:	f000 f86a 	bl	100037c8 <__gnu_uldivmod_helper>
100036f4:	9b01      	ldr	r3, [sp, #4]
100036f6:	469e      	mov	lr, r3
100036f8:	b002      	add	sp, #8
100036fa:	bc0c      	pop	{r2, r3}
100036fc:	4770      	bx	lr
100036fe:	46c0      	nop			; (mov r8, r8)

10003700 <__aeabi_lmul>:
10003700:	b5f0      	push	{r4, r5, r6, r7, lr}
10003702:	464f      	mov	r7, r9
10003704:	4646      	mov	r6, r8
10003706:	0405      	lsls	r5, r0, #16
10003708:	0c2d      	lsrs	r5, r5, #16
1000370a:	1c2c      	adds	r4, r5, #0
1000370c:	b4c0      	push	{r6, r7}
1000370e:	0417      	lsls	r7, r2, #16
10003710:	0c16      	lsrs	r6, r2, #16
10003712:	0c3f      	lsrs	r7, r7, #16
10003714:	4699      	mov	r9, r3
10003716:	0c03      	lsrs	r3, r0, #16
10003718:	437c      	muls	r4, r7
1000371a:	4375      	muls	r5, r6
1000371c:	435f      	muls	r7, r3
1000371e:	4373      	muls	r3, r6
10003720:	197d      	adds	r5, r7, r5
10003722:	0c26      	lsrs	r6, r4, #16
10003724:	19ad      	adds	r5, r5, r6
10003726:	469c      	mov	ip, r3
10003728:	42af      	cmp	r7, r5
1000372a:	d903      	bls.n	10003734 <__aeabi_lmul+0x34>
1000372c:	2380      	movs	r3, #128	; 0x80
1000372e:	025b      	lsls	r3, r3, #9
10003730:	4698      	mov	r8, r3
10003732:	44c4      	add	ip, r8
10003734:	464b      	mov	r3, r9
10003736:	4351      	muls	r1, r2
10003738:	4343      	muls	r3, r0
1000373a:	0424      	lsls	r4, r4, #16
1000373c:	0c2e      	lsrs	r6, r5, #16
1000373e:	0c24      	lsrs	r4, r4, #16
10003740:	042d      	lsls	r5, r5, #16
10003742:	4466      	add	r6, ip
10003744:	192c      	adds	r4, r5, r4
10003746:	1859      	adds	r1, r3, r1
10003748:	1989      	adds	r1, r1, r6
1000374a:	1c20      	adds	r0, r4, #0
1000374c:	bc0c      	pop	{r2, r3}
1000374e:	4690      	mov	r8, r2
10003750:	4699      	mov	r9, r3
10003752:	bdf0      	pop	{r4, r5, r6, r7, pc}

10003754 <__aeabi_d2uiz>:
10003754:	b538      	push	{r3, r4, r5, lr}
10003756:	2200      	movs	r2, #0
10003758:	4b0c      	ldr	r3, [pc, #48]	; (1000378c <__aeabi_d2uiz+0x38>)
1000375a:	1c04      	adds	r4, r0, #0
1000375c:	1c0d      	adds	r5, r1, #0
1000375e:	f000 feff 	bl	10004560 <__aeabi_dcmpge>
10003762:	2800      	cmp	r0, #0
10003764:	d104      	bne.n	10003770 <__aeabi_d2uiz+0x1c>
10003766:	1c20      	adds	r0, r4, #0
10003768:	1c29      	adds	r1, r5, #0
1000376a:	f000 fe5b 	bl	10004424 <__aeabi_d2iz>
1000376e:	bd38      	pop	{r3, r4, r5, pc}
10003770:	4b06      	ldr	r3, [pc, #24]	; (1000378c <__aeabi_d2uiz+0x38>)
10003772:	2200      	movs	r2, #0
10003774:	1c20      	adds	r0, r4, #0
10003776:	1c29      	adds	r1, r5, #0
10003778:	f000 fada 	bl	10003d30 <__aeabi_dsub>
1000377c:	f000 fe52 	bl	10004424 <__aeabi_d2iz>
10003780:	2380      	movs	r3, #128	; 0x80
10003782:	061b      	lsls	r3, r3, #24
10003784:	469c      	mov	ip, r3
10003786:	4460      	add	r0, ip
10003788:	e7f1      	b.n	1000376e <__aeabi_d2uiz+0x1a>
1000378a:	46c0      	nop			; (mov r8, r8)
1000378c:	41e00000 	.word	0x41e00000

10003790 <__gnu_ldivmod_helper>:
10003790:	b5f0      	push	{r4, r5, r6, r7, lr}
10003792:	b083      	sub	sp, #12
10003794:	1c16      	adds	r6, r2, #0
10003796:	1c1f      	adds	r7, r3, #0
10003798:	9000      	str	r0, [sp, #0]
1000379a:	9101      	str	r1, [sp, #4]
1000379c:	f000 feea 	bl	10004574 <__divdi3>
100037a0:	1c04      	adds	r4, r0, #0
100037a2:	1c0d      	adds	r5, r1, #0
100037a4:	1c22      	adds	r2, r4, #0
100037a6:	1c2b      	adds	r3, r5, #0
100037a8:	1c30      	adds	r0, r6, #0
100037aa:	1c39      	adds	r1, r7, #0
100037ac:	f7ff ffa8 	bl	10003700 <__aeabi_lmul>
100037b0:	9a00      	ldr	r2, [sp, #0]
100037b2:	9b01      	ldr	r3, [sp, #4]
100037b4:	1a12      	subs	r2, r2, r0
100037b6:	418b      	sbcs	r3, r1
100037b8:	9908      	ldr	r1, [sp, #32]
100037ba:	1c20      	adds	r0, r4, #0
100037bc:	600a      	str	r2, [r1, #0]
100037be:	604b      	str	r3, [r1, #4]
100037c0:	1c29      	adds	r1, r5, #0
100037c2:	b003      	add	sp, #12
100037c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100037c6:	46c0      	nop			; (mov r8, r8)

100037c8 <__gnu_uldivmod_helper>:
100037c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100037ca:	1c14      	adds	r4, r2, #0
100037cc:	b083      	sub	sp, #12
100037ce:	1c1d      	adds	r5, r3, #0
100037d0:	9000      	str	r0, [sp, #0]
100037d2:	9101      	str	r1, [sp, #4]
100037d4:	f000 ffc6 	bl	10004764 <__udivdi3>
100037d8:	1c22      	adds	r2, r4, #0
100037da:	1c2b      	adds	r3, r5, #0
100037dc:	1c06      	adds	r6, r0, #0
100037de:	1c0f      	adds	r7, r1, #0
100037e0:	f7ff ff8e 	bl	10003700 <__aeabi_lmul>
100037e4:	9a00      	ldr	r2, [sp, #0]
100037e6:	9b01      	ldr	r3, [sp, #4]
100037e8:	1a12      	subs	r2, r2, r0
100037ea:	418b      	sbcs	r3, r1
100037ec:	9908      	ldr	r1, [sp, #32]
100037ee:	1c30      	adds	r0, r6, #0
100037f0:	600a      	str	r2, [r1, #0]
100037f2:	604b      	str	r3, [r1, #4]
100037f4:	1c39      	adds	r1, r7, #0
100037f6:	b003      	add	sp, #12
100037f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100037fa:	46c0      	nop			; (mov r8, r8)

100037fc <__aeabi_dmul>:
100037fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100037fe:	465f      	mov	r7, fp
10003800:	4656      	mov	r6, sl
10003802:	464d      	mov	r5, r9
10003804:	4644      	mov	r4, r8
10003806:	b4f0      	push	{r4, r5, r6, r7}
10003808:	1c05      	adds	r5, r0, #0
1000380a:	1c06      	adds	r6, r0, #0
1000380c:	0308      	lsls	r0, r1, #12
1000380e:	b087      	sub	sp, #28
10003810:	4699      	mov	r9, r3
10003812:	004f      	lsls	r7, r1, #1
10003814:	0b03      	lsrs	r3, r0, #12
10003816:	0fcc      	lsrs	r4, r1, #31
10003818:	4692      	mov	sl, r2
1000381a:	469b      	mov	fp, r3
1000381c:	0d7f      	lsrs	r7, r7, #21
1000381e:	9401      	str	r4, [sp, #4]
10003820:	d067      	beq.n	100038f2 <__aeabi_dmul+0xf6>
10003822:	4b6c      	ldr	r3, [pc, #432]	; (100039d4 <__aeabi_dmul+0x1d8>)
10003824:	429f      	cmp	r7, r3
10003826:	d036      	beq.n	10003896 <__aeabi_dmul+0x9a>
10003828:	2080      	movs	r0, #128	; 0x80
1000382a:	465b      	mov	r3, fp
1000382c:	0340      	lsls	r0, r0, #13
1000382e:	4318      	orrs	r0, r3
10003830:	00c0      	lsls	r0, r0, #3
10003832:	0f6b      	lsrs	r3, r5, #29
10003834:	4318      	orrs	r0, r3
10003836:	4b68      	ldr	r3, [pc, #416]	; (100039d8 <__aeabi_dmul+0x1dc>)
10003838:	4683      	mov	fp, r0
1000383a:	469c      	mov	ip, r3
1000383c:	2300      	movs	r3, #0
1000383e:	4698      	mov	r8, r3
10003840:	00ee      	lsls	r6, r5, #3
10003842:	4467      	add	r7, ip
10003844:	9300      	str	r3, [sp, #0]
10003846:	464b      	mov	r3, r9
10003848:	4649      	mov	r1, r9
1000384a:	031d      	lsls	r5, r3, #12
1000384c:	0fc9      	lsrs	r1, r1, #31
1000384e:	005b      	lsls	r3, r3, #1
10003850:	4652      	mov	r2, sl
10003852:	0b2d      	lsrs	r5, r5, #12
10003854:	0d5b      	lsrs	r3, r3, #21
10003856:	4689      	mov	r9, r1
10003858:	d100      	bne.n	1000385c <__aeabi_dmul+0x60>
1000385a:	e06e      	b.n	1000393a <__aeabi_dmul+0x13e>
1000385c:	495d      	ldr	r1, [pc, #372]	; (100039d4 <__aeabi_dmul+0x1d8>)
1000385e:	428b      	cmp	r3, r1
10003860:	d064      	beq.n	1000392c <__aeabi_dmul+0x130>
10003862:	2080      	movs	r0, #128	; 0x80
10003864:	495c      	ldr	r1, [pc, #368]	; (100039d8 <__aeabi_dmul+0x1dc>)
10003866:	0340      	lsls	r0, r0, #13
10003868:	468c      	mov	ip, r1
1000386a:	2100      	movs	r1, #0
1000386c:	4305      	orrs	r5, r0
1000386e:	00ed      	lsls	r5, r5, #3
10003870:	0f50      	lsrs	r0, r2, #29
10003872:	4305      	orrs	r5, r0
10003874:	00d2      	lsls	r2, r2, #3
10003876:	4463      	add	r3, ip
10003878:	4648      	mov	r0, r9
1000387a:	18ff      	adds	r7, r7, r3
1000387c:	1c7b      	adds	r3, r7, #1
1000387e:	469a      	mov	sl, r3
10003880:	9b00      	ldr	r3, [sp, #0]
10003882:	4060      	eors	r0, r4
10003884:	9002      	str	r0, [sp, #8]
10003886:	430b      	orrs	r3, r1
10003888:	2b0f      	cmp	r3, #15
1000388a:	d900      	bls.n	1000388e <__aeabi_dmul+0x92>
1000388c:	e0ac      	b.n	100039e8 <__aeabi_dmul+0x1ec>
1000388e:	4853      	ldr	r0, [pc, #332]	; (100039dc <__aeabi_dmul+0x1e0>)
10003890:	009b      	lsls	r3, r3, #2
10003892:	58c3      	ldr	r3, [r0, r3]
10003894:	469f      	mov	pc, r3
10003896:	465b      	mov	r3, fp
10003898:	431d      	orrs	r5, r3
1000389a:	d000      	beq.n	1000389e <__aeabi_dmul+0xa2>
1000389c:	e082      	b.n	100039a4 <__aeabi_dmul+0x1a8>
1000389e:	2308      	movs	r3, #8
100038a0:	9300      	str	r3, [sp, #0]
100038a2:	2300      	movs	r3, #0
100038a4:	469b      	mov	fp, r3
100038a6:	3302      	adds	r3, #2
100038a8:	2600      	movs	r6, #0
100038aa:	4698      	mov	r8, r3
100038ac:	e7cb      	b.n	10003846 <__aeabi_dmul+0x4a>
100038ae:	9b02      	ldr	r3, [sp, #8]
100038b0:	9301      	str	r3, [sp, #4]
100038b2:	4643      	mov	r3, r8
100038b4:	2b02      	cmp	r3, #2
100038b6:	d159      	bne.n	1000396c <__aeabi_dmul+0x170>
100038b8:	2401      	movs	r4, #1
100038ba:	2500      	movs	r5, #0
100038bc:	2600      	movs	r6, #0
100038be:	9b01      	ldr	r3, [sp, #4]
100038c0:	401c      	ands	r4, r3
100038c2:	4b44      	ldr	r3, [pc, #272]	; (100039d4 <__aeabi_dmul+0x1d8>)
100038c4:	2100      	movs	r1, #0
100038c6:	032d      	lsls	r5, r5, #12
100038c8:	0d0a      	lsrs	r2, r1, #20
100038ca:	0512      	lsls	r2, r2, #20
100038cc:	0b2d      	lsrs	r5, r5, #12
100038ce:	4315      	orrs	r5, r2
100038d0:	4a43      	ldr	r2, [pc, #268]	; (100039e0 <__aeabi_dmul+0x1e4>)
100038d2:	051b      	lsls	r3, r3, #20
100038d4:	4015      	ands	r5, r2
100038d6:	431d      	orrs	r5, r3
100038d8:	006d      	lsls	r5, r5, #1
100038da:	07e4      	lsls	r4, r4, #31
100038dc:	086d      	lsrs	r5, r5, #1
100038de:	4325      	orrs	r5, r4
100038e0:	1c30      	adds	r0, r6, #0
100038e2:	1c29      	adds	r1, r5, #0
100038e4:	b007      	add	sp, #28
100038e6:	bc3c      	pop	{r2, r3, r4, r5}
100038e8:	4690      	mov	r8, r2
100038ea:	4699      	mov	r9, r3
100038ec:	46a2      	mov	sl, r4
100038ee:	46ab      	mov	fp, r5
100038f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100038f2:	432b      	orrs	r3, r5
100038f4:	d04e      	beq.n	10003994 <__aeabi_dmul+0x198>
100038f6:	465b      	mov	r3, fp
100038f8:	2b00      	cmp	r3, #0
100038fa:	d100      	bne.n	100038fe <__aeabi_dmul+0x102>
100038fc:	e185      	b.n	10003c0a <__aeabi_dmul+0x40e>
100038fe:	4658      	mov	r0, fp
10003900:	f7ff fec0 	bl	10003684 <__clzsi2>
10003904:	1c02      	adds	r2, r0, #0
10003906:	2328      	movs	r3, #40	; 0x28
10003908:	1c29      	adds	r1, r5, #0
1000390a:	1a9b      	subs	r3, r3, r2
1000390c:	1c16      	adds	r6, r2, #0
1000390e:	4658      	mov	r0, fp
10003910:	40d9      	lsrs	r1, r3
10003912:	3e08      	subs	r6, #8
10003914:	40b0      	lsls	r0, r6
10003916:	1c0b      	adds	r3, r1, #0
10003918:	40b5      	lsls	r5, r6
1000391a:	4303      	orrs	r3, r0
1000391c:	469b      	mov	fp, r3
1000391e:	1c2e      	adds	r6, r5, #0
10003920:	2300      	movs	r3, #0
10003922:	4f30      	ldr	r7, [pc, #192]	; (100039e4 <__aeabi_dmul+0x1e8>)
10003924:	9300      	str	r3, [sp, #0]
10003926:	1abf      	subs	r7, r7, r2
10003928:	4698      	mov	r8, r3
1000392a:	e78c      	b.n	10003846 <__aeabi_dmul+0x4a>
1000392c:	4651      	mov	r1, sl
1000392e:	4329      	orrs	r1, r5
10003930:	d12e      	bne.n	10003990 <__aeabi_dmul+0x194>
10003932:	2500      	movs	r5, #0
10003934:	2200      	movs	r2, #0
10003936:	2102      	movs	r1, #2
10003938:	e79e      	b.n	10003878 <__aeabi_dmul+0x7c>
1000393a:	4651      	mov	r1, sl
1000393c:	4329      	orrs	r1, r5
1000393e:	d023      	beq.n	10003988 <__aeabi_dmul+0x18c>
10003940:	2d00      	cmp	r5, #0
10003942:	d100      	bne.n	10003946 <__aeabi_dmul+0x14a>
10003944:	e154      	b.n	10003bf0 <__aeabi_dmul+0x3f4>
10003946:	1c28      	adds	r0, r5, #0
10003948:	f7ff fe9c 	bl	10003684 <__clzsi2>
1000394c:	1c03      	adds	r3, r0, #0
1000394e:	2128      	movs	r1, #40	; 0x28
10003950:	4650      	mov	r0, sl
10003952:	1ac9      	subs	r1, r1, r3
10003954:	1c1a      	adds	r2, r3, #0
10003956:	40c8      	lsrs	r0, r1
10003958:	4651      	mov	r1, sl
1000395a:	3a08      	subs	r2, #8
1000395c:	4091      	lsls	r1, r2
1000395e:	4095      	lsls	r5, r2
10003960:	1c0a      	adds	r2, r1, #0
10003962:	4305      	orrs	r5, r0
10003964:	481f      	ldr	r0, [pc, #124]	; (100039e4 <__aeabi_dmul+0x1e8>)
10003966:	2100      	movs	r1, #0
10003968:	1ac3      	subs	r3, r0, r3
1000396a:	e785      	b.n	10003878 <__aeabi_dmul+0x7c>
1000396c:	2b03      	cmp	r3, #3
1000396e:	d100      	bne.n	10003972 <__aeabi_dmul+0x176>
10003970:	e1c2      	b.n	10003cf8 <__aeabi_dmul+0x4fc>
10003972:	2b01      	cmp	r3, #1
10003974:	d000      	beq.n	10003978 <__aeabi_dmul+0x17c>
10003976:	e16d      	b.n	10003c54 <__aeabi_dmul+0x458>
10003978:	4644      	mov	r4, r8
1000397a:	9b01      	ldr	r3, [sp, #4]
1000397c:	2500      	movs	r5, #0
1000397e:	401c      	ands	r4, r3
10003980:	b2e4      	uxtb	r4, r4
10003982:	2300      	movs	r3, #0
10003984:	2600      	movs	r6, #0
10003986:	e79d      	b.n	100038c4 <__aeabi_dmul+0xc8>
10003988:	2500      	movs	r5, #0
1000398a:	2200      	movs	r2, #0
1000398c:	2101      	movs	r1, #1
1000398e:	e773      	b.n	10003878 <__aeabi_dmul+0x7c>
10003990:	2103      	movs	r1, #3
10003992:	e771      	b.n	10003878 <__aeabi_dmul+0x7c>
10003994:	2304      	movs	r3, #4
10003996:	9300      	str	r3, [sp, #0]
10003998:	2300      	movs	r3, #0
1000399a:	469b      	mov	fp, r3
1000399c:	3301      	adds	r3, #1
1000399e:	2600      	movs	r6, #0
100039a0:	4698      	mov	r8, r3
100039a2:	e750      	b.n	10003846 <__aeabi_dmul+0x4a>
100039a4:	230c      	movs	r3, #12
100039a6:	9300      	str	r3, [sp, #0]
100039a8:	3b09      	subs	r3, #9
100039aa:	4698      	mov	r8, r3
100039ac:	e74b      	b.n	10003846 <__aeabi_dmul+0x4a>
100039ae:	2580      	movs	r5, #128	; 0x80
100039b0:	2400      	movs	r4, #0
100039b2:	032d      	lsls	r5, r5, #12
100039b4:	2600      	movs	r6, #0
100039b6:	4b07      	ldr	r3, [pc, #28]	; (100039d4 <__aeabi_dmul+0x1d8>)
100039b8:	e784      	b.n	100038c4 <__aeabi_dmul+0xc8>
100039ba:	464b      	mov	r3, r9
100039bc:	46ab      	mov	fp, r5
100039be:	1c16      	adds	r6, r2, #0
100039c0:	9301      	str	r3, [sp, #4]
100039c2:	4688      	mov	r8, r1
100039c4:	e775      	b.n	100038b2 <__aeabi_dmul+0xb6>
100039c6:	9b02      	ldr	r3, [sp, #8]
100039c8:	46ab      	mov	fp, r5
100039ca:	1c16      	adds	r6, r2, #0
100039cc:	9301      	str	r3, [sp, #4]
100039ce:	4688      	mov	r8, r1
100039d0:	e76f      	b.n	100038b2 <__aeabi_dmul+0xb6>
100039d2:	46c0      	nop			; (mov r8, r8)
100039d4:	000007ff 	.word	0x000007ff
100039d8:	fffffc01 	.word	0xfffffc01
100039dc:	10004cf8 	.word	0x10004cf8
100039e0:	800fffff 	.word	0x800fffff
100039e4:	fffffc0d 	.word	0xfffffc0d
100039e8:	0c33      	lsrs	r3, r6, #16
100039ea:	0436      	lsls	r6, r6, #16
100039ec:	0c36      	lsrs	r6, r6, #16
100039ee:	469c      	mov	ip, r3
100039f0:	1c33      	adds	r3, r6, #0
100039f2:	0c14      	lsrs	r4, r2, #16
100039f4:	0412      	lsls	r2, r2, #16
100039f6:	0c12      	lsrs	r2, r2, #16
100039f8:	4353      	muls	r3, r2
100039fa:	4698      	mov	r8, r3
100039fc:	4663      	mov	r3, ip
100039fe:	4353      	muls	r3, r2
10003a00:	4699      	mov	r9, r3
10003a02:	4663      	mov	r3, ip
10003a04:	4363      	muls	r3, r4
10003a06:	9301      	str	r3, [sp, #4]
10003a08:	1c33      	adds	r3, r6, #0
10003a0a:	4641      	mov	r1, r8
10003a0c:	4363      	muls	r3, r4
10003a0e:	0c09      	lsrs	r1, r1, #16
10003a10:	444b      	add	r3, r9
10003a12:	185b      	adds	r3, r3, r1
10003a14:	4599      	cmp	r9, r3
10003a16:	d905      	bls.n	10003a24 <__aeabi_dmul+0x228>
10003a18:	2080      	movs	r0, #128	; 0x80
10003a1a:	0240      	lsls	r0, r0, #9
10003a1c:	4681      	mov	r9, r0
10003a1e:	9901      	ldr	r1, [sp, #4]
10003a20:	4449      	add	r1, r9
10003a22:	9101      	str	r1, [sp, #4]
10003a24:	0c19      	lsrs	r1, r3, #16
10003a26:	9103      	str	r1, [sp, #12]
10003a28:	4641      	mov	r1, r8
10003a2a:	0409      	lsls	r1, r1, #16
10003a2c:	0c09      	lsrs	r1, r1, #16
10003a2e:	041b      	lsls	r3, r3, #16
10003a30:	185b      	adds	r3, r3, r1
10003a32:	9304      	str	r3, [sp, #16]
10003a34:	0c2b      	lsrs	r3, r5, #16
10003a36:	4698      	mov	r8, r3
10003a38:	1c33      	adds	r3, r6, #0
10003a3a:	042d      	lsls	r5, r5, #16
10003a3c:	0c29      	lsrs	r1, r5, #16
10003a3e:	434b      	muls	r3, r1
10003a40:	4660      	mov	r0, ip
10003a42:	9300      	str	r3, [sp, #0]
10003a44:	4643      	mov	r3, r8
10003a46:	4665      	mov	r5, ip
10003a48:	4358      	muls	r0, r3
10003a4a:	435e      	muls	r6, r3
10003a4c:	9b00      	ldr	r3, [sp, #0]
10003a4e:	434d      	muls	r5, r1
10003a50:	0c1b      	lsrs	r3, r3, #16
10003a52:	4699      	mov	r9, r3
10003a54:	19ae      	adds	r6, r5, r6
10003a56:	444e      	add	r6, r9
10003a58:	4684      	mov	ip, r0
10003a5a:	42b5      	cmp	r5, r6
10003a5c:	d903      	bls.n	10003a66 <__aeabi_dmul+0x26a>
10003a5e:	2380      	movs	r3, #128	; 0x80
10003a60:	025b      	lsls	r3, r3, #9
10003a62:	4699      	mov	r9, r3
10003a64:	44cc      	add	ip, r9
10003a66:	0c35      	lsrs	r5, r6, #16
10003a68:	1c2b      	adds	r3, r5, #0
10003a6a:	9803      	ldr	r0, [sp, #12]
10003a6c:	4463      	add	r3, ip
10003a6e:	4684      	mov	ip, r0
10003a70:	9305      	str	r3, [sp, #20]
10003a72:	9b00      	ldr	r3, [sp, #0]
10003a74:	0436      	lsls	r6, r6, #16
10003a76:	041b      	lsls	r3, r3, #16
10003a78:	0c1b      	lsrs	r3, r3, #16
10003a7a:	18f3      	adds	r3, r6, r3
10003a7c:	449c      	add	ip, r3
10003a7e:	4660      	mov	r0, ip
10003a80:	9003      	str	r0, [sp, #12]
10003a82:	4658      	mov	r0, fp
10003a84:	0405      	lsls	r5, r0, #16
10003a86:	0c06      	lsrs	r6, r0, #16
10003a88:	0c28      	lsrs	r0, r5, #16
10003a8a:	4684      	mov	ip, r0
10003a8c:	4350      	muls	r0, r2
10003a8e:	1c35      	adds	r5, r6, #0
10003a90:	4681      	mov	r9, r0
10003a92:	4660      	mov	r0, ip
10003a94:	4365      	muls	r5, r4
10003a96:	4344      	muls	r4, r0
10003a98:	4648      	mov	r0, r9
10003a9a:	0c00      	lsrs	r0, r0, #16
10003a9c:	4683      	mov	fp, r0
10003a9e:	4372      	muls	r2, r6
10003aa0:	1914      	adds	r4, r2, r4
10003aa2:	445c      	add	r4, fp
10003aa4:	42a2      	cmp	r2, r4
10003aa6:	d903      	bls.n	10003ab0 <__aeabi_dmul+0x2b4>
10003aa8:	2280      	movs	r2, #128	; 0x80
10003aaa:	0252      	lsls	r2, r2, #9
10003aac:	4693      	mov	fp, r2
10003aae:	445d      	add	r5, fp
10003ab0:	0c22      	lsrs	r2, r4, #16
10003ab2:	18ad      	adds	r5, r5, r2
10003ab4:	464a      	mov	r2, r9
10003ab6:	0412      	lsls	r2, r2, #16
10003ab8:	0c12      	lsrs	r2, r2, #16
10003aba:	0424      	lsls	r4, r4, #16
10003abc:	4640      	mov	r0, r8
10003abe:	18a4      	adds	r4, r4, r2
10003ac0:	4662      	mov	r2, ip
10003ac2:	434a      	muls	r2, r1
10003ac4:	4371      	muls	r1, r6
10003ac6:	4346      	muls	r6, r0
10003ac8:	4660      	mov	r0, ip
10003aca:	9600      	str	r6, [sp, #0]
10003acc:	4646      	mov	r6, r8
10003ace:	4370      	muls	r0, r6
10003ad0:	4680      	mov	r8, r0
10003ad2:	0c10      	lsrs	r0, r2, #16
10003ad4:	4684      	mov	ip, r0
10003ad6:	4488      	add	r8, r1
10003ad8:	44e0      	add	r8, ip
10003ada:	4541      	cmp	r1, r8
10003adc:	d905      	bls.n	10003aea <__aeabi_dmul+0x2ee>
10003ade:	2180      	movs	r1, #128	; 0x80
10003ae0:	0249      	lsls	r1, r1, #9
10003ae2:	468c      	mov	ip, r1
10003ae4:	9900      	ldr	r1, [sp, #0]
10003ae6:	4461      	add	r1, ip
10003ae8:	9100      	str	r1, [sp, #0]
10003aea:	9801      	ldr	r0, [sp, #4]
10003aec:	9903      	ldr	r1, [sp, #12]
10003aee:	4684      	mov	ip, r0
10003af0:	4461      	add	r1, ip
10003af2:	4299      	cmp	r1, r3
10003af4:	419b      	sbcs	r3, r3
10003af6:	425b      	negs	r3, r3
10003af8:	4699      	mov	r9, r3
10003afa:	9805      	ldr	r0, [sp, #20]
10003afc:	4643      	mov	r3, r8
10003afe:	4684      	mov	ip, r0
10003b00:	0412      	lsls	r2, r2, #16
10003b02:	0c12      	lsrs	r2, r2, #16
10003b04:	041b      	lsls	r3, r3, #16
10003b06:	189b      	adds	r3, r3, r2
10003b08:	4463      	add	r3, ip
10003b0a:	469c      	mov	ip, r3
10003b0c:	46ab      	mov	fp, r5
10003b0e:	4283      	cmp	r3, r0
10003b10:	419b      	sbcs	r3, r3
10003b12:	4640      	mov	r0, r8
10003b14:	190a      	adds	r2, r1, r4
10003b16:	44cc      	add	ip, r9
10003b18:	42a2      	cmp	r2, r4
10003b1a:	4189      	sbcs	r1, r1
10003b1c:	44e3      	add	fp, ip
10003b1e:	45cc      	cmp	ip, r9
10003b20:	41b6      	sbcs	r6, r6
10003b22:	465c      	mov	r4, fp
10003b24:	0c00      	lsrs	r0, r0, #16
10003b26:	4680      	mov	r8, r0
10003b28:	4249      	negs	r1, r1
10003b2a:	4276      	negs	r6, r6
10003b2c:	425b      	negs	r3, r3
10003b2e:	1864      	adds	r4, r4, r1
10003b30:	4333      	orrs	r3, r6
10003b32:	4498      	add	r8, r3
10003b34:	428c      	cmp	r4, r1
10003b36:	4189      	sbcs	r1, r1
10003b38:	45ab      	cmp	fp, r5
10003b3a:	419b      	sbcs	r3, r3
10003b3c:	4249      	negs	r1, r1
10003b3e:	425b      	negs	r3, r3
10003b40:	4319      	orrs	r1, r3
10003b42:	1c0d      	adds	r5, r1, #0
10003b44:	9b00      	ldr	r3, [sp, #0]
10003b46:	4445      	add	r5, r8
10003b48:	18ee      	adds	r6, r5, r3
10003b4a:	0276      	lsls	r6, r6, #9
10003b4c:	0de5      	lsrs	r5, r4, #23
10003b4e:	432e      	orrs	r6, r5
10003b50:	46b3      	mov	fp, r6
10003b52:	9b04      	ldr	r3, [sp, #16]
10003b54:	0256      	lsls	r6, r2, #9
10003b56:	431e      	orrs	r6, r3
10003b58:	1e73      	subs	r3, r6, #1
10003b5a:	419e      	sbcs	r6, r3
10003b5c:	465b      	mov	r3, fp
10003b5e:	0dd2      	lsrs	r2, r2, #23
10003b60:	4332      	orrs	r2, r6
10003b62:	0266      	lsls	r6, r4, #9
10003b64:	4316      	orrs	r6, r2
10003b66:	01db      	lsls	r3, r3, #7
10003b68:	d50a      	bpl.n	10003b80 <__aeabi_dmul+0x384>
10003b6a:	2301      	movs	r3, #1
10003b6c:	4033      	ands	r3, r6
10003b6e:	0876      	lsrs	r6, r6, #1
10003b70:	431e      	orrs	r6, r3
10003b72:	465b      	mov	r3, fp
10003b74:	07db      	lsls	r3, r3, #31
10003b76:	431e      	orrs	r6, r3
10003b78:	465b      	mov	r3, fp
10003b7a:	085b      	lsrs	r3, r3, #1
10003b7c:	469b      	mov	fp, r3
10003b7e:	4657      	mov	r7, sl
10003b80:	4b63      	ldr	r3, [pc, #396]	; (10003d10 <__aeabi_dmul+0x514>)
10003b82:	18fb      	adds	r3, r7, r3
10003b84:	2b00      	cmp	r3, #0
10003b86:	dd5a      	ble.n	10003c3e <__aeabi_dmul+0x442>
10003b88:	0772      	lsls	r2, r6, #29
10003b8a:	d009      	beq.n	10003ba0 <__aeabi_dmul+0x3a4>
10003b8c:	220f      	movs	r2, #15
10003b8e:	4032      	ands	r2, r6
10003b90:	2a04      	cmp	r2, #4
10003b92:	d005      	beq.n	10003ba0 <__aeabi_dmul+0x3a4>
10003b94:	1d32      	adds	r2, r6, #4
10003b96:	42b2      	cmp	r2, r6
10003b98:	41b6      	sbcs	r6, r6
10003b9a:	4276      	negs	r6, r6
10003b9c:	44b3      	add	fp, r6
10003b9e:	1c16      	adds	r6, r2, #0
10003ba0:	465a      	mov	r2, fp
10003ba2:	01d2      	lsls	r2, r2, #7
10003ba4:	d506      	bpl.n	10003bb4 <__aeabi_dmul+0x3b8>
10003ba6:	465a      	mov	r2, fp
10003ba8:	4b5a      	ldr	r3, [pc, #360]	; (10003d14 <__aeabi_dmul+0x518>)
10003baa:	401a      	ands	r2, r3
10003bac:	2380      	movs	r3, #128	; 0x80
10003bae:	4693      	mov	fp, r2
10003bb0:	00db      	lsls	r3, r3, #3
10003bb2:	18fb      	adds	r3, r7, r3
10003bb4:	4a58      	ldr	r2, [pc, #352]	; (10003d18 <__aeabi_dmul+0x51c>)
10003bb6:	4293      	cmp	r3, r2
10003bb8:	dd34      	ble.n	10003c24 <__aeabi_dmul+0x428>
10003bba:	2401      	movs	r4, #1
10003bbc:	9b02      	ldr	r3, [sp, #8]
10003bbe:	2500      	movs	r5, #0
10003bc0:	401c      	ands	r4, r3
10003bc2:	2600      	movs	r6, #0
10003bc4:	4b55      	ldr	r3, [pc, #340]	; (10003d1c <__aeabi_dmul+0x520>)
10003bc6:	e67d      	b.n	100038c4 <__aeabi_dmul+0xc8>
10003bc8:	2080      	movs	r0, #128	; 0x80
10003bca:	465b      	mov	r3, fp
10003bcc:	0300      	lsls	r0, r0, #12
10003bce:	4203      	tst	r3, r0
10003bd0:	d008      	beq.n	10003be4 <__aeabi_dmul+0x3e8>
10003bd2:	4205      	tst	r5, r0
10003bd4:	d106      	bne.n	10003be4 <__aeabi_dmul+0x3e8>
10003bd6:	4305      	orrs	r5, r0
10003bd8:	032d      	lsls	r5, r5, #12
10003bda:	0b2d      	lsrs	r5, r5, #12
10003bdc:	464c      	mov	r4, r9
10003bde:	1c16      	adds	r6, r2, #0
10003be0:	4b4e      	ldr	r3, [pc, #312]	; (10003d1c <__aeabi_dmul+0x520>)
10003be2:	e66f      	b.n	100038c4 <__aeabi_dmul+0xc8>
10003be4:	465d      	mov	r5, fp
10003be6:	4305      	orrs	r5, r0
10003be8:	032d      	lsls	r5, r5, #12
10003bea:	0b2d      	lsrs	r5, r5, #12
10003bec:	4b4b      	ldr	r3, [pc, #300]	; (10003d1c <__aeabi_dmul+0x520>)
10003bee:	e669      	b.n	100038c4 <__aeabi_dmul+0xc8>
10003bf0:	4650      	mov	r0, sl
10003bf2:	f7ff fd47 	bl	10003684 <__clzsi2>
10003bf6:	1c03      	adds	r3, r0, #0
10003bf8:	3320      	adds	r3, #32
10003bfa:	2b27      	cmp	r3, #39	; 0x27
10003bfc:	dc00      	bgt.n	10003c00 <__aeabi_dmul+0x404>
10003bfe:	e6a6      	b.n	1000394e <__aeabi_dmul+0x152>
10003c00:	4655      	mov	r5, sl
10003c02:	3808      	subs	r0, #8
10003c04:	4085      	lsls	r5, r0
10003c06:	2200      	movs	r2, #0
10003c08:	e6ac      	b.n	10003964 <__aeabi_dmul+0x168>
10003c0a:	1c28      	adds	r0, r5, #0
10003c0c:	f7ff fd3a 	bl	10003684 <__clzsi2>
10003c10:	1c02      	adds	r2, r0, #0
10003c12:	3220      	adds	r2, #32
10003c14:	2a27      	cmp	r2, #39	; 0x27
10003c16:	dc00      	bgt.n	10003c1a <__aeabi_dmul+0x41e>
10003c18:	e675      	b.n	10003906 <__aeabi_dmul+0x10a>
10003c1a:	3808      	subs	r0, #8
10003c1c:	4085      	lsls	r5, r0
10003c1e:	2600      	movs	r6, #0
10003c20:	46ab      	mov	fp, r5
10003c22:	e67d      	b.n	10003920 <__aeabi_dmul+0x124>
10003c24:	465a      	mov	r2, fp
10003c26:	08f6      	lsrs	r6, r6, #3
10003c28:	0752      	lsls	r2, r2, #29
10003c2a:	4316      	orrs	r6, r2
10003c2c:	465a      	mov	r2, fp
10003c2e:	2401      	movs	r4, #1
10003c30:	0255      	lsls	r5, r2, #9
10003c32:	9a02      	ldr	r2, [sp, #8]
10003c34:	055b      	lsls	r3, r3, #21
10003c36:	0b2d      	lsrs	r5, r5, #12
10003c38:	0d5b      	lsrs	r3, r3, #21
10003c3a:	4014      	ands	r4, r2
10003c3c:	e642      	b.n	100038c4 <__aeabi_dmul+0xc8>
10003c3e:	4d38      	ldr	r5, [pc, #224]	; (10003d20 <__aeabi_dmul+0x524>)
10003c40:	1bed      	subs	r5, r5, r7
10003c42:	2d38      	cmp	r5, #56	; 0x38
10003c44:	dd0a      	ble.n	10003c5c <__aeabi_dmul+0x460>
10003c46:	2401      	movs	r4, #1
10003c48:	9b02      	ldr	r3, [sp, #8]
10003c4a:	2500      	movs	r5, #0
10003c4c:	401c      	ands	r4, r3
10003c4e:	2600      	movs	r6, #0
10003c50:	2300      	movs	r3, #0
10003c52:	e637      	b.n	100038c4 <__aeabi_dmul+0xc8>
10003c54:	9b01      	ldr	r3, [sp, #4]
10003c56:	4657      	mov	r7, sl
10003c58:	9302      	str	r3, [sp, #8]
10003c5a:	e791      	b.n	10003b80 <__aeabi_dmul+0x384>
10003c5c:	2d1f      	cmp	r5, #31
10003c5e:	dc25      	bgt.n	10003cac <__aeabi_dmul+0x4b0>
10003c60:	4b30      	ldr	r3, [pc, #192]	; (10003d24 <__aeabi_dmul+0x528>)
10003c62:	1c32      	adds	r2, r6, #0
10003c64:	469c      	mov	ip, r3
10003c66:	4467      	add	r7, ip
10003c68:	40be      	lsls	r6, r7
10003c6a:	465b      	mov	r3, fp
10003c6c:	40bb      	lsls	r3, r7
10003c6e:	1c37      	adds	r7, r6, #0
10003c70:	40ea      	lsrs	r2, r5
10003c72:	1e7e      	subs	r6, r7, #1
10003c74:	41b7      	sbcs	r7, r6
10003c76:	4313      	orrs	r3, r2
10003c78:	433b      	orrs	r3, r7
10003c7a:	1c1e      	adds	r6, r3, #0
10003c7c:	465b      	mov	r3, fp
10003c7e:	40eb      	lsrs	r3, r5
10003c80:	1c1d      	adds	r5, r3, #0
10003c82:	0773      	lsls	r3, r6, #29
10003c84:	d009      	beq.n	10003c9a <__aeabi_dmul+0x49e>
10003c86:	230f      	movs	r3, #15
10003c88:	4033      	ands	r3, r6
10003c8a:	2b04      	cmp	r3, #4
10003c8c:	d005      	beq.n	10003c9a <__aeabi_dmul+0x49e>
10003c8e:	1d33      	adds	r3, r6, #4
10003c90:	42b3      	cmp	r3, r6
10003c92:	41b6      	sbcs	r6, r6
10003c94:	4276      	negs	r6, r6
10003c96:	19ad      	adds	r5, r5, r6
10003c98:	1c1e      	adds	r6, r3, #0
10003c9a:	022b      	lsls	r3, r5, #8
10003c9c:	d520      	bpl.n	10003ce0 <__aeabi_dmul+0x4e4>
10003c9e:	2401      	movs	r4, #1
10003ca0:	9b02      	ldr	r3, [sp, #8]
10003ca2:	2500      	movs	r5, #0
10003ca4:	401c      	ands	r4, r3
10003ca6:	2600      	movs	r6, #0
10003ca8:	2301      	movs	r3, #1
10003caa:	e60b      	b.n	100038c4 <__aeabi_dmul+0xc8>
10003cac:	465a      	mov	r2, fp
10003cae:	4b1e      	ldr	r3, [pc, #120]	; (10003d28 <__aeabi_dmul+0x52c>)
10003cb0:	1bdb      	subs	r3, r3, r7
10003cb2:	40da      	lsrs	r2, r3
10003cb4:	1c13      	adds	r3, r2, #0
10003cb6:	2d20      	cmp	r5, #32
10003cb8:	d01c      	beq.n	10003cf4 <__aeabi_dmul+0x4f8>
10003cba:	4a1c      	ldr	r2, [pc, #112]	; (10003d2c <__aeabi_dmul+0x530>)
10003cbc:	4694      	mov	ip, r2
10003cbe:	465a      	mov	r2, fp
10003cc0:	4467      	add	r7, ip
10003cc2:	40ba      	lsls	r2, r7
10003cc4:	1c17      	adds	r7, r2, #0
10003cc6:	433e      	orrs	r6, r7
10003cc8:	1e72      	subs	r2, r6, #1
10003cca:	4196      	sbcs	r6, r2
10003ccc:	431e      	orrs	r6, r3
10003cce:	2307      	movs	r3, #7
10003cd0:	2500      	movs	r5, #0
10003cd2:	4033      	ands	r3, r6
10003cd4:	d007      	beq.n	10003ce6 <__aeabi_dmul+0x4ea>
10003cd6:	230f      	movs	r3, #15
10003cd8:	2500      	movs	r5, #0
10003cda:	4033      	ands	r3, r6
10003cdc:	2b04      	cmp	r3, #4
10003cde:	d1d6      	bne.n	10003c8e <__aeabi_dmul+0x492>
10003ce0:	076b      	lsls	r3, r5, #29
10003ce2:	026d      	lsls	r5, r5, #9
10003ce4:	0b2d      	lsrs	r5, r5, #12
10003ce6:	2401      	movs	r4, #1
10003ce8:	08f6      	lsrs	r6, r6, #3
10003cea:	431e      	orrs	r6, r3
10003cec:	9b02      	ldr	r3, [sp, #8]
10003cee:	401c      	ands	r4, r3
10003cf0:	2300      	movs	r3, #0
10003cf2:	e5e7      	b.n	100038c4 <__aeabi_dmul+0xc8>
10003cf4:	2700      	movs	r7, #0
10003cf6:	e7e6      	b.n	10003cc6 <__aeabi_dmul+0x4ca>
10003cf8:	2580      	movs	r5, #128	; 0x80
10003cfa:	465b      	mov	r3, fp
10003cfc:	2401      	movs	r4, #1
10003cfe:	032d      	lsls	r5, r5, #12
10003d00:	431d      	orrs	r5, r3
10003d02:	9b01      	ldr	r3, [sp, #4]
10003d04:	032d      	lsls	r5, r5, #12
10003d06:	4023      	ands	r3, r4
10003d08:	1c1c      	adds	r4, r3, #0
10003d0a:	0b2d      	lsrs	r5, r5, #12
10003d0c:	4b03      	ldr	r3, [pc, #12]	; (10003d1c <__aeabi_dmul+0x520>)
10003d0e:	e5d9      	b.n	100038c4 <__aeabi_dmul+0xc8>
10003d10:	000003ff 	.word	0x000003ff
10003d14:	feffffff 	.word	0xfeffffff
10003d18:	000007fe 	.word	0x000007fe
10003d1c:	000007ff 	.word	0x000007ff
10003d20:	fffffc02 	.word	0xfffffc02
10003d24:	0000041e 	.word	0x0000041e
10003d28:	fffffbe2 	.word	0xfffffbe2
10003d2c:	0000043e 	.word	0x0000043e

10003d30 <__aeabi_dsub>:
10003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
10003d32:	464d      	mov	r5, r9
10003d34:	4644      	mov	r4, r8
10003d36:	465f      	mov	r7, fp
10003d38:	4656      	mov	r6, sl
10003d3a:	b4f0      	push	{r4, r5, r6, r7}
10003d3c:	1c0e      	adds	r6, r1, #0
10003d3e:	1c11      	adds	r1, r2, #0
10003d40:	0332      	lsls	r2, r6, #12
10003d42:	0a52      	lsrs	r2, r2, #9
10003d44:	0f47      	lsrs	r7, r0, #29
10003d46:	4317      	orrs	r7, r2
10003d48:	00c5      	lsls	r5, r0, #3
10003d4a:	031a      	lsls	r2, r3, #12
10003d4c:	0058      	lsls	r0, r3, #1
10003d4e:	0fdb      	lsrs	r3, r3, #31
10003d50:	4699      	mov	r9, r3
10003d52:	0a52      	lsrs	r2, r2, #9
10003d54:	0f4b      	lsrs	r3, r1, #29
10003d56:	b083      	sub	sp, #12
10003d58:	431a      	orrs	r2, r3
10003d5a:	00cb      	lsls	r3, r1, #3
10003d5c:	9301      	str	r3, [sp, #4]
10003d5e:	4bcf      	ldr	r3, [pc, #828]	; (1000409c <__aeabi_dsub+0x36c>)
10003d60:	0074      	lsls	r4, r6, #1
10003d62:	0ff6      	lsrs	r6, r6, #31
10003d64:	0d64      	lsrs	r4, r4, #21
10003d66:	46b0      	mov	r8, r6
10003d68:	0d40      	lsrs	r0, r0, #21
10003d6a:	4298      	cmp	r0, r3
10003d6c:	d100      	bne.n	10003d70 <__aeabi_dsub+0x40>
10003d6e:	e0e8      	b.n	10003f42 <__aeabi_dsub+0x212>
10003d70:	2301      	movs	r3, #1
10003d72:	4649      	mov	r1, r9
10003d74:	4059      	eors	r1, r3
10003d76:	1c0b      	adds	r3, r1, #0
10003d78:	429e      	cmp	r6, r3
10003d7a:	d100      	bne.n	10003d7e <__aeabi_dsub+0x4e>
10003d7c:	e0b1      	b.n	10003ee2 <__aeabi_dsub+0x1b2>
10003d7e:	1a26      	subs	r6, r4, r0
10003d80:	2e00      	cmp	r6, #0
10003d82:	dc00      	bgt.n	10003d86 <__aeabi_dsub+0x56>
10003d84:	e11c      	b.n	10003fc0 <__aeabi_dsub+0x290>
10003d86:	2800      	cmp	r0, #0
10003d88:	d142      	bne.n	10003e10 <__aeabi_dsub+0xe0>
10003d8a:	1c13      	adds	r3, r2, #0
10003d8c:	9901      	ldr	r1, [sp, #4]
10003d8e:	430b      	orrs	r3, r1
10003d90:	d000      	beq.n	10003d94 <__aeabi_dsub+0x64>
10003d92:	e0e6      	b.n	10003f62 <__aeabi_dsub+0x232>
10003d94:	076b      	lsls	r3, r5, #29
10003d96:	d100      	bne.n	10003d9a <__aeabi_dsub+0x6a>
10003d98:	e08e      	b.n	10003eb8 <__aeabi_dsub+0x188>
10003d9a:	230f      	movs	r3, #15
10003d9c:	402b      	ands	r3, r5
10003d9e:	2b04      	cmp	r3, #4
10003da0:	d100      	bne.n	10003da4 <__aeabi_dsub+0x74>
10003da2:	e089      	b.n	10003eb8 <__aeabi_dsub+0x188>
10003da4:	1d2a      	adds	r2, r5, #4
10003da6:	42aa      	cmp	r2, r5
10003da8:	41ad      	sbcs	r5, r5
10003daa:	2380      	movs	r3, #128	; 0x80
10003dac:	2601      	movs	r6, #1
10003dae:	4641      	mov	r1, r8
10003db0:	426d      	negs	r5, r5
10003db2:	197f      	adds	r7, r7, r5
10003db4:	041b      	lsls	r3, r3, #16
10003db6:	403b      	ands	r3, r7
10003db8:	400e      	ands	r6, r1
10003dba:	1c15      	adds	r5, r2, #0
10003dbc:	2b00      	cmp	r3, #0
10003dbe:	d100      	bne.n	10003dc2 <__aeabi_dsub+0x92>
10003dc0:	e083      	b.n	10003eca <__aeabi_dsub+0x19a>
10003dc2:	4bb6      	ldr	r3, [pc, #728]	; (1000409c <__aeabi_dsub+0x36c>)
10003dc4:	3401      	adds	r4, #1
10003dc6:	429c      	cmp	r4, r3
10003dc8:	d100      	bne.n	10003dcc <__aeabi_dsub+0x9c>
10003dca:	e116      	b.n	10003ffa <__aeabi_dsub+0x2ca>
10003dcc:	1c3a      	adds	r2, r7, #0
10003dce:	4bb4      	ldr	r3, [pc, #720]	; (100040a0 <__aeabi_dsub+0x370>)
10003dd0:	08ed      	lsrs	r5, r5, #3
10003dd2:	401a      	ands	r2, r3
10003dd4:	0750      	lsls	r0, r2, #29
10003dd6:	0564      	lsls	r4, r4, #21
10003dd8:	0252      	lsls	r2, r2, #9
10003dda:	4305      	orrs	r5, r0
10003ddc:	0b12      	lsrs	r2, r2, #12
10003dde:	0d64      	lsrs	r4, r4, #21
10003de0:	2100      	movs	r1, #0
10003de2:	0312      	lsls	r2, r2, #12
10003de4:	0d0b      	lsrs	r3, r1, #20
10003de6:	051b      	lsls	r3, r3, #20
10003de8:	0564      	lsls	r4, r4, #21
10003dea:	0b12      	lsrs	r2, r2, #12
10003dec:	431a      	orrs	r2, r3
10003dee:	0863      	lsrs	r3, r4, #1
10003df0:	4cac      	ldr	r4, [pc, #688]	; (100040a4 <__aeabi_dsub+0x374>)
10003df2:	07f6      	lsls	r6, r6, #31
10003df4:	4014      	ands	r4, r2
10003df6:	431c      	orrs	r4, r3
10003df8:	0064      	lsls	r4, r4, #1
10003dfa:	0864      	lsrs	r4, r4, #1
10003dfc:	4334      	orrs	r4, r6
10003dfe:	1c28      	adds	r0, r5, #0
10003e00:	1c21      	adds	r1, r4, #0
10003e02:	b003      	add	sp, #12
10003e04:	bc3c      	pop	{r2, r3, r4, r5}
10003e06:	4690      	mov	r8, r2
10003e08:	4699      	mov	r9, r3
10003e0a:	46a2      	mov	sl, r4
10003e0c:	46ab      	mov	fp, r5
10003e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003e10:	4ba2      	ldr	r3, [pc, #648]	; (1000409c <__aeabi_dsub+0x36c>)
10003e12:	429c      	cmp	r4, r3
10003e14:	d0be      	beq.n	10003d94 <__aeabi_dsub+0x64>
10003e16:	2380      	movs	r3, #128	; 0x80
10003e18:	041b      	lsls	r3, r3, #16
10003e1a:	431a      	orrs	r2, r3
10003e1c:	2e38      	cmp	r6, #56	; 0x38
10003e1e:	dd00      	ble.n	10003e22 <__aeabi_dsub+0xf2>
10003e20:	e103      	b.n	1000402a <__aeabi_dsub+0x2fa>
10003e22:	2e1f      	cmp	r6, #31
10003e24:	dd00      	ble.n	10003e28 <__aeabi_dsub+0xf8>
10003e26:	e13f      	b.n	100040a8 <__aeabi_dsub+0x378>
10003e28:	2020      	movs	r0, #32
10003e2a:	1b83      	subs	r3, r0, r6
10003e2c:	4699      	mov	r9, r3
10003e2e:	1c13      	adds	r3, r2, #0
10003e30:	4649      	mov	r1, r9
10003e32:	408b      	lsls	r3, r1
10003e34:	469c      	mov	ip, r3
10003e36:	9b01      	ldr	r3, [sp, #4]
10003e38:	4660      	mov	r0, ip
10003e3a:	40f3      	lsrs	r3, r6
10003e3c:	4303      	orrs	r3, r0
10003e3e:	9801      	ldr	r0, [sp, #4]
10003e40:	40f2      	lsrs	r2, r6
10003e42:	4088      	lsls	r0, r1
10003e44:	1c01      	adds	r1, r0, #0
10003e46:	1e48      	subs	r0, r1, #1
10003e48:	4181      	sbcs	r1, r0
10003e4a:	430b      	orrs	r3, r1
10003e4c:	1aeb      	subs	r3, r5, r3
10003e4e:	429d      	cmp	r5, r3
10003e50:	4180      	sbcs	r0, r0
10003e52:	1c1d      	adds	r5, r3, #0
10003e54:	1aba      	subs	r2, r7, r2
10003e56:	4240      	negs	r0, r0
10003e58:	1a17      	subs	r7, r2, r0
10003e5a:	023b      	lsls	r3, r7, #8
10003e5c:	d400      	bmi.n	10003e60 <__aeabi_dsub+0x130>
10003e5e:	e0a8      	b.n	10003fb2 <__aeabi_dsub+0x282>
10003e60:	027a      	lsls	r2, r7, #9
10003e62:	0a56      	lsrs	r6, r2, #9
10003e64:	2e00      	cmp	r6, #0
10003e66:	d100      	bne.n	10003e6a <__aeabi_dsub+0x13a>
10003e68:	e0ca      	b.n	10004000 <__aeabi_dsub+0x2d0>
10003e6a:	1c30      	adds	r0, r6, #0
10003e6c:	f7ff fc0a 	bl	10003684 <__clzsi2>
10003e70:	1c03      	adds	r3, r0, #0
10003e72:	3b08      	subs	r3, #8
10003e74:	2b1f      	cmp	r3, #31
10003e76:	dd00      	ble.n	10003e7a <__aeabi_dsub+0x14a>
10003e78:	e0cb      	b.n	10004012 <__aeabi_dsub+0x2e2>
10003e7a:	2228      	movs	r2, #40	; 0x28
10003e7c:	1c29      	adds	r1, r5, #0
10003e7e:	1a12      	subs	r2, r2, r0
10003e80:	40d1      	lsrs	r1, r2
10003e82:	409e      	lsls	r6, r3
10003e84:	1c0a      	adds	r2, r1, #0
10003e86:	409d      	lsls	r5, r3
10003e88:	4332      	orrs	r2, r6
10003e8a:	429c      	cmp	r4, r3
10003e8c:	dd00      	ble.n	10003e90 <__aeabi_dsub+0x160>
10003e8e:	e0c8      	b.n	10004022 <__aeabi_dsub+0x2f2>
10003e90:	1b1c      	subs	r4, r3, r4
10003e92:	1c67      	adds	r7, r4, #1
10003e94:	2f1f      	cmp	r7, #31
10003e96:	dd00      	ble.n	10003e9a <__aeabi_dsub+0x16a>
10003e98:	e0ed      	b.n	10004076 <__aeabi_dsub+0x346>
10003e9a:	231f      	movs	r3, #31
10003e9c:	1c29      	adds	r1, r5, #0
10003e9e:	1b1c      	subs	r4, r3, r4
10003ea0:	1c13      	adds	r3, r2, #0
10003ea2:	40a5      	lsls	r5, r4
10003ea4:	40a3      	lsls	r3, r4
10003ea6:	40f9      	lsrs	r1, r7
10003ea8:	1e6c      	subs	r4, r5, #1
10003eaa:	41a5      	sbcs	r5, r4
10003eac:	40fa      	lsrs	r2, r7
10003eae:	4319      	orrs	r1, r3
10003eb0:	430d      	orrs	r5, r1
10003eb2:	1c17      	adds	r7, r2, #0
10003eb4:	2400      	movs	r4, #0
10003eb6:	e76d      	b.n	10003d94 <__aeabi_dsub+0x64>
10003eb8:	2380      	movs	r3, #128	; 0x80
10003eba:	2601      	movs	r6, #1
10003ebc:	4642      	mov	r2, r8
10003ebe:	041b      	lsls	r3, r3, #16
10003ec0:	403b      	ands	r3, r7
10003ec2:	4016      	ands	r6, r2
10003ec4:	2b00      	cmp	r3, #0
10003ec6:	d000      	beq.n	10003eca <__aeabi_dsub+0x19a>
10003ec8:	e77b      	b.n	10003dc2 <__aeabi_dsub+0x92>
10003eca:	4b74      	ldr	r3, [pc, #464]	; (1000409c <__aeabi_dsub+0x36c>)
10003ecc:	08ed      	lsrs	r5, r5, #3
10003ece:	0778      	lsls	r0, r7, #29
10003ed0:	4305      	orrs	r5, r0
10003ed2:	08fa      	lsrs	r2, r7, #3
10003ed4:	429c      	cmp	r4, r3
10003ed6:	d03b      	beq.n	10003f50 <__aeabi_dsub+0x220>
10003ed8:	0312      	lsls	r2, r2, #12
10003eda:	0564      	lsls	r4, r4, #21
10003edc:	0b12      	lsrs	r2, r2, #12
10003ede:	0d64      	lsrs	r4, r4, #21
10003ee0:	e77e      	b.n	10003de0 <__aeabi_dsub+0xb0>
10003ee2:	1a23      	subs	r3, r4, r0
10003ee4:	469a      	mov	sl, r3
10003ee6:	2b00      	cmp	r3, #0
10003ee8:	dc00      	bgt.n	10003eec <__aeabi_dsub+0x1bc>
10003eea:	e0a5      	b.n	10004038 <__aeabi_dsub+0x308>
10003eec:	2800      	cmp	r0, #0
10003eee:	d044      	beq.n	10003f7a <__aeabi_dsub+0x24a>
10003ef0:	486a      	ldr	r0, [pc, #424]	; (1000409c <__aeabi_dsub+0x36c>)
10003ef2:	4284      	cmp	r4, r0
10003ef4:	d100      	bne.n	10003ef8 <__aeabi_dsub+0x1c8>
10003ef6:	e74d      	b.n	10003d94 <__aeabi_dsub+0x64>
10003ef8:	2080      	movs	r0, #128	; 0x80
10003efa:	0400      	lsls	r0, r0, #16
10003efc:	4302      	orrs	r2, r0
10003efe:	4653      	mov	r3, sl
10003f00:	2b38      	cmp	r3, #56	; 0x38
10003f02:	dc00      	bgt.n	10003f06 <__aeabi_dsub+0x1d6>
10003f04:	e11c      	b.n	10004140 <__aeabi_dsub+0x410>
10003f06:	9b01      	ldr	r3, [sp, #4]
10003f08:	431a      	orrs	r2, r3
10003f0a:	1e51      	subs	r1, r2, #1
10003f0c:	418a      	sbcs	r2, r1
10003f0e:	b2d1      	uxtb	r1, r2
10003f10:	2200      	movs	r2, #0
10003f12:	1949      	adds	r1, r1, r5
10003f14:	42a9      	cmp	r1, r5
10003f16:	4180      	sbcs	r0, r0
10003f18:	1c0d      	adds	r5, r1, #0
10003f1a:	19d2      	adds	r2, r2, r7
10003f1c:	4240      	negs	r0, r0
10003f1e:	1817      	adds	r7, r2, r0
10003f20:	023b      	lsls	r3, r7, #8
10003f22:	d546      	bpl.n	10003fb2 <__aeabi_dsub+0x282>
10003f24:	4b5d      	ldr	r3, [pc, #372]	; (1000409c <__aeabi_dsub+0x36c>)
10003f26:	3401      	adds	r4, #1
10003f28:	429c      	cmp	r4, r3
10003f2a:	d100      	bne.n	10003f2e <__aeabi_dsub+0x1fe>
10003f2c:	e169      	b.n	10004202 <__aeabi_dsub+0x4d2>
10003f2e:	2001      	movs	r0, #1
10003f30:	4a5b      	ldr	r2, [pc, #364]	; (100040a0 <__aeabi_dsub+0x370>)
10003f32:	086b      	lsrs	r3, r5, #1
10003f34:	403a      	ands	r2, r7
10003f36:	4028      	ands	r0, r5
10003f38:	4318      	orrs	r0, r3
10003f3a:	07d5      	lsls	r5, r2, #31
10003f3c:	4305      	orrs	r5, r0
10003f3e:	0857      	lsrs	r7, r2, #1
10003f40:	e728      	b.n	10003d94 <__aeabi_dsub+0x64>
10003f42:	1c13      	adds	r3, r2, #0
10003f44:	9901      	ldr	r1, [sp, #4]
10003f46:	430b      	orrs	r3, r1
10003f48:	d100      	bne.n	10003f4c <__aeabi_dsub+0x21c>
10003f4a:	e711      	b.n	10003d70 <__aeabi_dsub+0x40>
10003f4c:	464b      	mov	r3, r9
10003f4e:	e713      	b.n	10003d78 <__aeabi_dsub+0x48>
10003f50:	1c2b      	adds	r3, r5, #0
10003f52:	4313      	orrs	r3, r2
10003f54:	d051      	beq.n	10003ffa <__aeabi_dsub+0x2ca>
10003f56:	2380      	movs	r3, #128	; 0x80
10003f58:	031b      	lsls	r3, r3, #12
10003f5a:	431a      	orrs	r2, r3
10003f5c:	0312      	lsls	r2, r2, #12
10003f5e:	0b12      	lsrs	r2, r2, #12
10003f60:	e73e      	b.n	10003de0 <__aeabi_dsub+0xb0>
10003f62:	3e01      	subs	r6, #1
10003f64:	2e00      	cmp	r6, #0
10003f66:	d000      	beq.n	10003f6a <__aeabi_dsub+0x23a>
10003f68:	e080      	b.n	1000406c <__aeabi_dsub+0x33c>
10003f6a:	1a69      	subs	r1, r5, r1
10003f6c:	428d      	cmp	r5, r1
10003f6e:	419b      	sbcs	r3, r3
10003f70:	1aba      	subs	r2, r7, r2
10003f72:	425b      	negs	r3, r3
10003f74:	1ad7      	subs	r7, r2, r3
10003f76:	1c0d      	adds	r5, r1, #0
10003f78:	e76f      	b.n	10003e5a <__aeabi_dsub+0x12a>
10003f7a:	1c10      	adds	r0, r2, #0
10003f7c:	9b01      	ldr	r3, [sp, #4]
10003f7e:	4318      	orrs	r0, r3
10003f80:	d100      	bne.n	10003f84 <__aeabi_dsub+0x254>
10003f82:	e707      	b.n	10003d94 <__aeabi_dsub+0x64>
10003f84:	2301      	movs	r3, #1
10003f86:	425b      	negs	r3, r3
10003f88:	469c      	mov	ip, r3
10003f8a:	44e2      	add	sl, ip
10003f8c:	4653      	mov	r3, sl
10003f8e:	2b00      	cmp	r3, #0
10003f90:	d000      	beq.n	10003f94 <__aeabi_dsub+0x264>
10003f92:	e102      	b.n	1000419a <__aeabi_dsub+0x46a>
10003f94:	9b01      	ldr	r3, [sp, #4]
10003f96:	19d2      	adds	r2, r2, r7
10003f98:	1959      	adds	r1, r3, r5
10003f9a:	42a9      	cmp	r1, r5
10003f9c:	419b      	sbcs	r3, r3
10003f9e:	425b      	negs	r3, r3
10003fa0:	18d7      	adds	r7, r2, r3
10003fa2:	1c0d      	adds	r5, r1, #0
10003fa4:	e7bc      	b.n	10003f20 <__aeabi_dsub+0x1f0>
10003fa6:	4663      	mov	r3, ip
10003fa8:	4303      	orrs	r3, r0
10003faa:	d100      	bne.n	10003fae <__aeabi_dsub+0x27e>
10003fac:	e128      	b.n	10004200 <__aeabi_dsub+0x4d0>
10003fae:	1c07      	adds	r7, r0, #0
10003fb0:	4665      	mov	r5, ip
10003fb2:	076b      	lsls	r3, r5, #29
10003fb4:	d000      	beq.n	10003fb8 <__aeabi_dsub+0x288>
10003fb6:	e6f0      	b.n	10003d9a <__aeabi_dsub+0x6a>
10003fb8:	2601      	movs	r6, #1
10003fba:	4643      	mov	r3, r8
10003fbc:	401e      	ands	r6, r3
10003fbe:	e784      	b.n	10003eca <__aeabi_dsub+0x19a>
10003fc0:	2e00      	cmp	r6, #0
10003fc2:	d000      	beq.n	10003fc6 <__aeabi_dsub+0x296>
10003fc4:	e081      	b.n	100040ca <__aeabi_dsub+0x39a>
10003fc6:	1c60      	adds	r0, r4, #1
10003fc8:	0540      	lsls	r0, r0, #21
10003fca:	0d40      	lsrs	r0, r0, #21
10003fcc:	2801      	cmp	r0, #1
10003fce:	dc00      	bgt.n	10003fd2 <__aeabi_dsub+0x2a2>
10003fd0:	e107      	b.n	100041e2 <__aeabi_dsub+0x4b2>
10003fd2:	9901      	ldr	r1, [sp, #4]
10003fd4:	1a68      	subs	r0, r5, r1
10003fd6:	4684      	mov	ip, r0
10003fd8:	4565      	cmp	r5, ip
10003fda:	41b6      	sbcs	r6, r6
10003fdc:	1ab8      	subs	r0, r7, r2
10003fde:	4276      	negs	r6, r6
10003fe0:	1b86      	subs	r6, r0, r6
10003fe2:	0230      	lsls	r0, r6, #8
10003fe4:	d400      	bmi.n	10003fe8 <__aeabi_dsub+0x2b8>
10003fe6:	e0a1      	b.n	1000412c <__aeabi_dsub+0x3fc>
10003fe8:	468c      	mov	ip, r1
10003fea:	1b4d      	subs	r5, r1, r5
10003fec:	45ac      	cmp	ip, r5
10003fee:	4189      	sbcs	r1, r1
10003ff0:	1bd2      	subs	r2, r2, r7
10003ff2:	4249      	negs	r1, r1
10003ff4:	1a56      	subs	r6, r2, r1
10003ff6:	4698      	mov	r8, r3
10003ff8:	e734      	b.n	10003e64 <__aeabi_dsub+0x134>
10003ffa:	2200      	movs	r2, #0
10003ffc:	2500      	movs	r5, #0
10003ffe:	e6ef      	b.n	10003de0 <__aeabi_dsub+0xb0>
10004000:	1c28      	adds	r0, r5, #0
10004002:	f7ff fb3f 	bl	10003684 <__clzsi2>
10004006:	3020      	adds	r0, #32
10004008:	1c03      	adds	r3, r0, #0
1000400a:	3b08      	subs	r3, #8
1000400c:	2b1f      	cmp	r3, #31
1000400e:	dc00      	bgt.n	10004012 <__aeabi_dsub+0x2e2>
10004010:	e733      	b.n	10003e7a <__aeabi_dsub+0x14a>
10004012:	1c02      	adds	r2, r0, #0
10004014:	3a28      	subs	r2, #40	; 0x28
10004016:	4095      	lsls	r5, r2
10004018:	1c2a      	adds	r2, r5, #0
1000401a:	2500      	movs	r5, #0
1000401c:	429c      	cmp	r4, r3
1000401e:	dc00      	bgt.n	10004022 <__aeabi_dsub+0x2f2>
10004020:	e736      	b.n	10003e90 <__aeabi_dsub+0x160>
10004022:	4f1f      	ldr	r7, [pc, #124]	; (100040a0 <__aeabi_dsub+0x370>)
10004024:	1ae4      	subs	r4, r4, r3
10004026:	4017      	ands	r7, r2
10004028:	e6b4      	b.n	10003d94 <__aeabi_dsub+0x64>
1000402a:	9b01      	ldr	r3, [sp, #4]
1000402c:	431a      	orrs	r2, r3
1000402e:	1e51      	subs	r1, r2, #1
10004030:	418a      	sbcs	r2, r1
10004032:	b2d3      	uxtb	r3, r2
10004034:	2200      	movs	r2, #0
10004036:	e709      	b.n	10003e4c <__aeabi_dsub+0x11c>
10004038:	2b00      	cmp	r3, #0
1000403a:	d000      	beq.n	1000403e <__aeabi_dsub+0x30e>
1000403c:	e101      	b.n	10004242 <__aeabi_dsub+0x512>
1000403e:	1c60      	adds	r0, r4, #1
10004040:	0543      	lsls	r3, r0, #21
10004042:	0d5b      	lsrs	r3, r3, #21
10004044:	2b01      	cmp	r3, #1
10004046:	dc00      	bgt.n	1000404a <__aeabi_dsub+0x31a>
10004048:	e0b0      	b.n	100041ac <__aeabi_dsub+0x47c>
1000404a:	4b14      	ldr	r3, [pc, #80]	; (1000409c <__aeabi_dsub+0x36c>)
1000404c:	4298      	cmp	r0, r3
1000404e:	d100      	bne.n	10004052 <__aeabi_dsub+0x322>
10004050:	e11e      	b.n	10004290 <__aeabi_dsub+0x560>
10004052:	9b01      	ldr	r3, [sp, #4]
10004054:	19d2      	adds	r2, r2, r7
10004056:	1959      	adds	r1, r3, r5
10004058:	42a9      	cmp	r1, r5
1000405a:	419b      	sbcs	r3, r3
1000405c:	425b      	negs	r3, r3
1000405e:	18d2      	adds	r2, r2, r3
10004060:	0849      	lsrs	r1, r1, #1
10004062:	07d5      	lsls	r5, r2, #31
10004064:	430d      	orrs	r5, r1
10004066:	0857      	lsrs	r7, r2, #1
10004068:	1c04      	adds	r4, r0, #0
1000406a:	e693      	b.n	10003d94 <__aeabi_dsub+0x64>
1000406c:	4b0b      	ldr	r3, [pc, #44]	; (1000409c <__aeabi_dsub+0x36c>)
1000406e:	429c      	cmp	r4, r3
10004070:	d000      	beq.n	10004074 <__aeabi_dsub+0x344>
10004072:	e6d3      	b.n	10003e1c <__aeabi_dsub+0xec>
10004074:	e68e      	b.n	10003d94 <__aeabi_dsub+0x64>
10004076:	1c21      	adds	r1, r4, #0
10004078:	1c13      	adds	r3, r2, #0
1000407a:	391f      	subs	r1, #31
1000407c:	40cb      	lsrs	r3, r1
1000407e:	1c19      	adds	r1, r3, #0
10004080:	2f20      	cmp	r7, #32
10004082:	d100      	bne.n	10004086 <__aeabi_dsub+0x356>
10004084:	e08e      	b.n	100041a4 <__aeabi_dsub+0x474>
10004086:	233f      	movs	r3, #63	; 0x3f
10004088:	1b1c      	subs	r4, r3, r4
1000408a:	40a2      	lsls	r2, r4
1000408c:	4315      	orrs	r5, r2
1000408e:	1e6a      	subs	r2, r5, #1
10004090:	4195      	sbcs	r5, r2
10004092:	2700      	movs	r7, #0
10004094:	430d      	orrs	r5, r1
10004096:	2400      	movs	r4, #0
10004098:	e78b      	b.n	10003fb2 <__aeabi_dsub+0x282>
1000409a:	46c0      	nop			; (mov r8, r8)
1000409c:	000007ff 	.word	0x000007ff
100040a0:	ff7fffff 	.word	0xff7fffff
100040a4:	800fffff 	.word	0x800fffff
100040a8:	1c33      	adds	r3, r6, #0
100040aa:	1c10      	adds	r0, r2, #0
100040ac:	3b20      	subs	r3, #32
100040ae:	40d8      	lsrs	r0, r3
100040b0:	2e20      	cmp	r6, #32
100040b2:	d079      	beq.n	100041a8 <__aeabi_dsub+0x478>
100040b4:	2340      	movs	r3, #64	; 0x40
100040b6:	1b9b      	subs	r3, r3, r6
100040b8:	409a      	lsls	r2, r3
100040ba:	1c13      	adds	r3, r2, #0
100040bc:	9a01      	ldr	r2, [sp, #4]
100040be:	4313      	orrs	r3, r2
100040c0:	1e59      	subs	r1, r3, #1
100040c2:	418b      	sbcs	r3, r1
100040c4:	2200      	movs	r2, #0
100040c6:	4303      	orrs	r3, r0
100040c8:	e6c0      	b.n	10003e4c <__aeabi_dsub+0x11c>
100040ca:	2c00      	cmp	r4, #0
100040cc:	d053      	beq.n	10004176 <__aeabi_dsub+0x446>
100040ce:	4cc7      	ldr	r4, [pc, #796]	; (100043ec <__aeabi_dsub+0x6bc>)
100040d0:	42a0      	cmp	r0, r4
100040d2:	d100      	bne.n	100040d6 <__aeabi_dsub+0x3a6>
100040d4:	e0b0      	b.n	10004238 <__aeabi_dsub+0x508>
100040d6:	2480      	movs	r4, #128	; 0x80
100040d8:	4271      	negs	r1, r6
100040da:	4689      	mov	r9, r1
100040dc:	0424      	lsls	r4, r4, #16
100040de:	4327      	orrs	r7, r4
100040e0:	4649      	mov	r1, r9
100040e2:	2938      	cmp	r1, #56	; 0x38
100040e4:	dd00      	ble.n	100040e8 <__aeabi_dsub+0x3b8>
100040e6:	e0cd      	b.n	10004284 <__aeabi_dsub+0x554>
100040e8:	291f      	cmp	r1, #31
100040ea:	dd00      	ble.n	100040ee <__aeabi_dsub+0x3be>
100040ec:	e159      	b.n	100043a2 <__aeabi_dsub+0x672>
100040ee:	2420      	movs	r4, #32
100040f0:	1c3e      	adds	r6, r7, #0
100040f2:	1a61      	subs	r1, r4, r1
100040f4:	408e      	lsls	r6, r1
100040f6:	468a      	mov	sl, r1
100040f8:	46b0      	mov	r8, r6
100040fa:	4649      	mov	r1, r9
100040fc:	1c2e      	adds	r6, r5, #0
100040fe:	40ce      	lsrs	r6, r1
10004100:	4651      	mov	r1, sl
10004102:	46b4      	mov	ip, r6
10004104:	408d      	lsls	r5, r1
10004106:	4664      	mov	r4, ip
10004108:	4646      	mov	r6, r8
1000410a:	4649      	mov	r1, r9
1000410c:	4326      	orrs	r6, r4
1000410e:	1e6c      	subs	r4, r5, #1
10004110:	41a5      	sbcs	r5, r4
10004112:	40cf      	lsrs	r7, r1
10004114:	4335      	orrs	r5, r6
10004116:	9901      	ldr	r1, [sp, #4]
10004118:	1bd7      	subs	r7, r2, r7
1000411a:	468c      	mov	ip, r1
1000411c:	1b4d      	subs	r5, r1, r5
1000411e:	45ac      	cmp	ip, r5
10004120:	4192      	sbcs	r2, r2
10004122:	4252      	negs	r2, r2
10004124:	1abf      	subs	r7, r7, r2
10004126:	1c04      	adds	r4, r0, #0
10004128:	4698      	mov	r8, r3
1000412a:	e696      	b.n	10003e5a <__aeabi_dsub+0x12a>
1000412c:	4663      	mov	r3, ip
1000412e:	4665      	mov	r5, ip
10004130:	4333      	orrs	r3, r6
10004132:	d000      	beq.n	10004136 <__aeabi_dsub+0x406>
10004134:	e696      	b.n	10003e64 <__aeabi_dsub+0x134>
10004136:	2600      	movs	r6, #0
10004138:	2700      	movs	r7, #0
1000413a:	2400      	movs	r4, #0
1000413c:	2500      	movs	r5, #0
1000413e:	e6c4      	b.n	10003eca <__aeabi_dsub+0x19a>
10004140:	2b1f      	cmp	r3, #31
10004142:	dc61      	bgt.n	10004208 <__aeabi_dsub+0x4d8>
10004144:	2020      	movs	r0, #32
10004146:	1ac3      	subs	r3, r0, r3
10004148:	469b      	mov	fp, r3
1000414a:	1c13      	adds	r3, r2, #0
1000414c:	4659      	mov	r1, fp
1000414e:	408b      	lsls	r3, r1
10004150:	4651      	mov	r1, sl
10004152:	4699      	mov	r9, r3
10004154:	9b01      	ldr	r3, [sp, #4]
10004156:	40cb      	lsrs	r3, r1
10004158:	469c      	mov	ip, r3
1000415a:	464b      	mov	r3, r9
1000415c:	4660      	mov	r0, ip
1000415e:	4303      	orrs	r3, r0
10004160:	469c      	mov	ip, r3
10004162:	465b      	mov	r3, fp
10004164:	9901      	ldr	r1, [sp, #4]
10004166:	4099      	lsls	r1, r3
10004168:	4663      	mov	r3, ip
1000416a:	1e48      	subs	r0, r1, #1
1000416c:	4181      	sbcs	r1, r0
1000416e:	4319      	orrs	r1, r3
10004170:	4653      	mov	r3, sl
10004172:	40da      	lsrs	r2, r3
10004174:	e6cd      	b.n	10003f12 <__aeabi_dsub+0x1e2>
10004176:	1c3c      	adds	r4, r7, #0
10004178:	432c      	orrs	r4, r5
1000417a:	d05d      	beq.n	10004238 <__aeabi_dsub+0x508>
1000417c:	43f1      	mvns	r1, r6
1000417e:	4689      	mov	r9, r1
10004180:	2900      	cmp	r1, #0
10004182:	d155      	bne.n	10004230 <__aeabi_dsub+0x500>
10004184:	9901      	ldr	r1, [sp, #4]
10004186:	1bd2      	subs	r2, r2, r7
10004188:	468c      	mov	ip, r1
1000418a:	1b4d      	subs	r5, r1, r5
1000418c:	45ac      	cmp	ip, r5
1000418e:	4189      	sbcs	r1, r1
10004190:	4249      	negs	r1, r1
10004192:	1a57      	subs	r7, r2, r1
10004194:	1c04      	adds	r4, r0, #0
10004196:	4698      	mov	r8, r3
10004198:	e65f      	b.n	10003e5a <__aeabi_dsub+0x12a>
1000419a:	4894      	ldr	r0, [pc, #592]	; (100043ec <__aeabi_dsub+0x6bc>)
1000419c:	4284      	cmp	r4, r0
1000419e:	d000      	beq.n	100041a2 <__aeabi_dsub+0x472>
100041a0:	e6ad      	b.n	10003efe <__aeabi_dsub+0x1ce>
100041a2:	e5f7      	b.n	10003d94 <__aeabi_dsub+0x64>
100041a4:	2200      	movs	r2, #0
100041a6:	e771      	b.n	1000408c <__aeabi_dsub+0x35c>
100041a8:	2300      	movs	r3, #0
100041aa:	e787      	b.n	100040bc <__aeabi_dsub+0x38c>
100041ac:	1c3b      	adds	r3, r7, #0
100041ae:	432b      	orrs	r3, r5
100041b0:	2c00      	cmp	r4, #0
100041b2:	d000      	beq.n	100041b6 <__aeabi_dsub+0x486>
100041b4:	e0da      	b.n	1000436c <__aeabi_dsub+0x63c>
100041b6:	2b00      	cmp	r3, #0
100041b8:	d100      	bne.n	100041bc <__aeabi_dsub+0x48c>
100041ba:	e113      	b.n	100043e4 <__aeabi_dsub+0x6b4>
100041bc:	1c13      	adds	r3, r2, #0
100041be:	9901      	ldr	r1, [sp, #4]
100041c0:	430b      	orrs	r3, r1
100041c2:	d100      	bne.n	100041c6 <__aeabi_dsub+0x496>
100041c4:	e5e6      	b.n	10003d94 <__aeabi_dsub+0x64>
100041c6:	1949      	adds	r1, r1, r5
100041c8:	42a9      	cmp	r1, r5
100041ca:	419b      	sbcs	r3, r3
100041cc:	19d2      	adds	r2, r2, r7
100041ce:	425b      	negs	r3, r3
100041d0:	18d7      	adds	r7, r2, r3
100041d2:	023b      	lsls	r3, r7, #8
100041d4:	d400      	bmi.n	100041d8 <__aeabi_dsub+0x4a8>
100041d6:	e121      	b.n	1000441c <__aeabi_dsub+0x6ec>
100041d8:	4b85      	ldr	r3, [pc, #532]	; (100043f0 <__aeabi_dsub+0x6c0>)
100041da:	1c0d      	adds	r5, r1, #0
100041dc:	401f      	ands	r7, r3
100041de:	1c04      	adds	r4, r0, #0
100041e0:	e5d8      	b.n	10003d94 <__aeabi_dsub+0x64>
100041e2:	1c38      	adds	r0, r7, #0
100041e4:	4328      	orrs	r0, r5
100041e6:	2c00      	cmp	r4, #0
100041e8:	d140      	bne.n	1000426c <__aeabi_dsub+0x53c>
100041ea:	2800      	cmp	r0, #0
100041ec:	d000      	beq.n	100041f0 <__aeabi_dsub+0x4c0>
100041ee:	e083      	b.n	100042f8 <__aeabi_dsub+0x5c8>
100041f0:	1c10      	adds	r0, r2, #0
100041f2:	9901      	ldr	r1, [sp, #4]
100041f4:	4308      	orrs	r0, r1
100041f6:	d003      	beq.n	10004200 <__aeabi_dsub+0x4d0>
100041f8:	1c17      	adds	r7, r2, #0
100041fa:	1c0d      	adds	r5, r1, #0
100041fc:	4698      	mov	r8, r3
100041fe:	e5c9      	b.n	10003d94 <__aeabi_dsub+0x64>
10004200:	2600      	movs	r6, #0
10004202:	2700      	movs	r7, #0
10004204:	2500      	movs	r5, #0
10004206:	e660      	b.n	10003eca <__aeabi_dsub+0x19a>
10004208:	4650      	mov	r0, sl
1000420a:	1c13      	adds	r3, r2, #0
1000420c:	3820      	subs	r0, #32
1000420e:	40c3      	lsrs	r3, r0
10004210:	1c18      	adds	r0, r3, #0
10004212:	4653      	mov	r3, sl
10004214:	2b20      	cmp	r3, #32
10004216:	d100      	bne.n	1000421a <__aeabi_dsub+0x4ea>
10004218:	e0c1      	b.n	1000439e <__aeabi_dsub+0x66e>
1000421a:	2340      	movs	r3, #64	; 0x40
1000421c:	4651      	mov	r1, sl
1000421e:	1a5b      	subs	r3, r3, r1
10004220:	409a      	lsls	r2, r3
10004222:	9901      	ldr	r1, [sp, #4]
10004224:	4311      	orrs	r1, r2
10004226:	1e4a      	subs	r2, r1, #1
10004228:	4191      	sbcs	r1, r2
1000422a:	2200      	movs	r2, #0
1000422c:	4301      	orrs	r1, r0
1000422e:	e670      	b.n	10003f12 <__aeabi_dsub+0x1e2>
10004230:	4c6e      	ldr	r4, [pc, #440]	; (100043ec <__aeabi_dsub+0x6bc>)
10004232:	42a0      	cmp	r0, r4
10004234:	d000      	beq.n	10004238 <__aeabi_dsub+0x508>
10004236:	e753      	b.n	100040e0 <__aeabi_dsub+0x3b0>
10004238:	1c17      	adds	r7, r2, #0
1000423a:	9d01      	ldr	r5, [sp, #4]
1000423c:	1c04      	adds	r4, r0, #0
1000423e:	4698      	mov	r8, r3
10004240:	e5a8      	b.n	10003d94 <__aeabi_dsub+0x64>
10004242:	2c00      	cmp	r4, #0
10004244:	d128      	bne.n	10004298 <__aeabi_dsub+0x568>
10004246:	1c3c      	adds	r4, r7, #0
10004248:	432c      	orrs	r4, r5
1000424a:	d100      	bne.n	1000424e <__aeabi_dsub+0x51e>
1000424c:	e08a      	b.n	10004364 <__aeabi_dsub+0x634>
1000424e:	43db      	mvns	r3, r3
10004250:	469a      	mov	sl, r3
10004252:	2b00      	cmp	r3, #0
10004254:	d000      	beq.n	10004258 <__aeabi_dsub+0x528>
10004256:	e082      	b.n	1000435e <__aeabi_dsub+0x62e>
10004258:	9b01      	ldr	r3, [sp, #4]
1000425a:	19d2      	adds	r2, r2, r7
1000425c:	469c      	mov	ip, r3
1000425e:	4465      	add	r5, ip
10004260:	429d      	cmp	r5, r3
10004262:	4189      	sbcs	r1, r1
10004264:	4249      	negs	r1, r1
10004266:	1857      	adds	r7, r2, r1
10004268:	1c04      	adds	r4, r0, #0
1000426a:	e659      	b.n	10003f20 <__aeabi_dsub+0x1f0>
1000426c:	2800      	cmp	r0, #0
1000426e:	d15b      	bne.n	10004328 <__aeabi_dsub+0x5f8>
10004270:	1c10      	adds	r0, r2, #0
10004272:	9901      	ldr	r1, [sp, #4]
10004274:	4308      	orrs	r0, r1
10004276:	d100      	bne.n	1000427a <__aeabi_dsub+0x54a>
10004278:	e0a4      	b.n	100043c4 <__aeabi_dsub+0x694>
1000427a:	1c17      	adds	r7, r2, #0
1000427c:	1c0d      	adds	r5, r1, #0
1000427e:	4698      	mov	r8, r3
10004280:	4c5a      	ldr	r4, [pc, #360]	; (100043ec <__aeabi_dsub+0x6bc>)
10004282:	e587      	b.n	10003d94 <__aeabi_dsub+0x64>
10004284:	433d      	orrs	r5, r7
10004286:	1e6f      	subs	r7, r5, #1
10004288:	41bd      	sbcs	r5, r7
1000428a:	2700      	movs	r7, #0
1000428c:	b2ed      	uxtb	r5, r5
1000428e:	e742      	b.n	10004116 <__aeabi_dsub+0x3e6>
10004290:	1c04      	adds	r4, r0, #0
10004292:	2700      	movs	r7, #0
10004294:	2500      	movs	r5, #0
10004296:	e618      	b.n	10003eca <__aeabi_dsub+0x19a>
10004298:	4c54      	ldr	r4, [pc, #336]	; (100043ec <__aeabi_dsub+0x6bc>)
1000429a:	42a0      	cmp	r0, r4
1000429c:	d062      	beq.n	10004364 <__aeabi_dsub+0x634>
1000429e:	4653      	mov	r3, sl
100042a0:	2480      	movs	r4, #128	; 0x80
100042a2:	425b      	negs	r3, r3
100042a4:	469a      	mov	sl, r3
100042a6:	0424      	lsls	r4, r4, #16
100042a8:	4327      	orrs	r7, r4
100042aa:	4653      	mov	r3, sl
100042ac:	2b38      	cmp	r3, #56	; 0x38
100042ae:	dd00      	ble.n	100042b2 <__aeabi_dsub+0x582>
100042b0:	e08e      	b.n	100043d0 <__aeabi_dsub+0x6a0>
100042b2:	2b1f      	cmp	r3, #31
100042b4:	dd00      	ble.n	100042b8 <__aeabi_dsub+0x588>
100042b6:	e09d      	b.n	100043f4 <__aeabi_dsub+0x6c4>
100042b8:	2420      	movs	r4, #32
100042ba:	1ae3      	subs	r3, r4, r3
100042bc:	469b      	mov	fp, r3
100042be:	1c3b      	adds	r3, r7, #0
100042c0:	4659      	mov	r1, fp
100042c2:	408b      	lsls	r3, r1
100042c4:	4651      	mov	r1, sl
100042c6:	4699      	mov	r9, r3
100042c8:	1c2b      	adds	r3, r5, #0
100042ca:	40cb      	lsrs	r3, r1
100042cc:	469c      	mov	ip, r3
100042ce:	464b      	mov	r3, r9
100042d0:	4664      	mov	r4, ip
100042d2:	4323      	orrs	r3, r4
100042d4:	469c      	mov	ip, r3
100042d6:	465b      	mov	r3, fp
100042d8:	409d      	lsls	r5, r3
100042da:	4663      	mov	r3, ip
100042dc:	1e6c      	subs	r4, r5, #1
100042de:	41a5      	sbcs	r5, r4
100042e0:	40cf      	lsrs	r7, r1
100042e2:	431d      	orrs	r5, r3
100042e4:	9b01      	ldr	r3, [sp, #4]
100042e6:	18bf      	adds	r7, r7, r2
100042e8:	469c      	mov	ip, r3
100042ea:	4465      	add	r5, ip
100042ec:	429d      	cmp	r5, r3
100042ee:	4192      	sbcs	r2, r2
100042f0:	4252      	negs	r2, r2
100042f2:	18bf      	adds	r7, r7, r2
100042f4:	1c04      	adds	r4, r0, #0
100042f6:	e613      	b.n	10003f20 <__aeabi_dsub+0x1f0>
100042f8:	1c10      	adds	r0, r2, #0
100042fa:	9901      	ldr	r1, [sp, #4]
100042fc:	4308      	orrs	r0, r1
100042fe:	d100      	bne.n	10004302 <__aeabi_dsub+0x5d2>
10004300:	e548      	b.n	10003d94 <__aeabi_dsub+0x64>
10004302:	1a68      	subs	r0, r5, r1
10004304:	4684      	mov	ip, r0
10004306:	4285      	cmp	r5, r0
10004308:	4180      	sbcs	r0, r0
1000430a:	1abe      	subs	r6, r7, r2
1000430c:	4240      	negs	r0, r0
1000430e:	1a30      	subs	r0, r6, r0
10004310:	0206      	lsls	r6, r0, #8
10004312:	d400      	bmi.n	10004316 <__aeabi_dsub+0x5e6>
10004314:	e647      	b.n	10003fa6 <__aeabi_dsub+0x276>
10004316:	468c      	mov	ip, r1
10004318:	1b4d      	subs	r5, r1, r5
1000431a:	45ac      	cmp	ip, r5
1000431c:	4189      	sbcs	r1, r1
1000431e:	1bd2      	subs	r2, r2, r7
10004320:	4249      	negs	r1, r1
10004322:	1a57      	subs	r7, r2, r1
10004324:	4698      	mov	r8, r3
10004326:	e535      	b.n	10003d94 <__aeabi_dsub+0x64>
10004328:	1c10      	adds	r0, r2, #0
1000432a:	9901      	ldr	r1, [sp, #4]
1000432c:	4308      	orrs	r0, r1
1000432e:	d034      	beq.n	1000439a <__aeabi_dsub+0x66a>
10004330:	2480      	movs	r4, #128	; 0x80
10004332:	0778      	lsls	r0, r7, #29
10004334:	08ed      	lsrs	r5, r5, #3
10004336:	08ff      	lsrs	r7, r7, #3
10004338:	0324      	lsls	r4, r4, #12
1000433a:	4328      	orrs	r0, r5
1000433c:	4227      	tst	r7, r4
1000433e:	d008      	beq.n	10004352 <__aeabi_dsub+0x622>
10004340:	08d6      	lsrs	r6, r2, #3
10004342:	4226      	tst	r6, r4
10004344:	d105      	bne.n	10004352 <__aeabi_dsub+0x622>
10004346:	08c9      	lsrs	r1, r1, #3
10004348:	0752      	lsls	r2, r2, #29
1000434a:	430a      	orrs	r2, r1
1000434c:	1c10      	adds	r0, r2, #0
1000434e:	1c37      	adds	r7, r6, #0
10004350:	4698      	mov	r8, r3
10004352:	00ff      	lsls	r7, r7, #3
10004354:	0f42      	lsrs	r2, r0, #29
10004356:	4317      	orrs	r7, r2
10004358:	00c5      	lsls	r5, r0, #3
1000435a:	4c24      	ldr	r4, [pc, #144]	; (100043ec <__aeabi_dsub+0x6bc>)
1000435c:	e51a      	b.n	10003d94 <__aeabi_dsub+0x64>
1000435e:	4c23      	ldr	r4, [pc, #140]	; (100043ec <__aeabi_dsub+0x6bc>)
10004360:	42a0      	cmp	r0, r4
10004362:	d1a2      	bne.n	100042aa <__aeabi_dsub+0x57a>
10004364:	1c17      	adds	r7, r2, #0
10004366:	9d01      	ldr	r5, [sp, #4]
10004368:	1c04      	adds	r4, r0, #0
1000436a:	e513      	b.n	10003d94 <__aeabi_dsub+0x64>
1000436c:	2b00      	cmp	r3, #0
1000436e:	d035      	beq.n	100043dc <__aeabi_dsub+0x6ac>
10004370:	1c13      	adds	r3, r2, #0
10004372:	9901      	ldr	r1, [sp, #4]
10004374:	430b      	orrs	r3, r1
10004376:	d010      	beq.n	1000439a <__aeabi_dsub+0x66a>
10004378:	2480      	movs	r4, #128	; 0x80
1000437a:	0778      	lsls	r0, r7, #29
1000437c:	08ed      	lsrs	r5, r5, #3
1000437e:	08ff      	lsrs	r7, r7, #3
10004380:	0324      	lsls	r4, r4, #12
10004382:	4328      	orrs	r0, r5
10004384:	4227      	tst	r7, r4
10004386:	d0e4      	beq.n	10004352 <__aeabi_dsub+0x622>
10004388:	08d3      	lsrs	r3, r2, #3
1000438a:	4223      	tst	r3, r4
1000438c:	d1e1      	bne.n	10004352 <__aeabi_dsub+0x622>
1000438e:	08c9      	lsrs	r1, r1, #3
10004390:	0752      	lsls	r2, r2, #29
10004392:	430a      	orrs	r2, r1
10004394:	1c10      	adds	r0, r2, #0
10004396:	1c1f      	adds	r7, r3, #0
10004398:	e7db      	b.n	10004352 <__aeabi_dsub+0x622>
1000439a:	4c14      	ldr	r4, [pc, #80]	; (100043ec <__aeabi_dsub+0x6bc>)
1000439c:	e4fa      	b.n	10003d94 <__aeabi_dsub+0x64>
1000439e:	2200      	movs	r2, #0
100043a0:	e73f      	b.n	10004222 <__aeabi_dsub+0x4f2>
100043a2:	464c      	mov	r4, r9
100043a4:	1c3e      	adds	r6, r7, #0
100043a6:	3c20      	subs	r4, #32
100043a8:	40e6      	lsrs	r6, r4
100043aa:	4649      	mov	r1, r9
100043ac:	1c34      	adds	r4, r6, #0
100043ae:	2920      	cmp	r1, #32
100043b0:	d032      	beq.n	10004418 <__aeabi_dsub+0x6e8>
100043b2:	2640      	movs	r6, #64	; 0x40
100043b4:	1a76      	subs	r6, r6, r1
100043b6:	40b7      	lsls	r7, r6
100043b8:	433d      	orrs	r5, r7
100043ba:	1e6f      	subs	r7, r5, #1
100043bc:	41bd      	sbcs	r5, r7
100043be:	2700      	movs	r7, #0
100043c0:	4325      	orrs	r5, r4
100043c2:	e6a8      	b.n	10004116 <__aeabi_dsub+0x3e6>
100043c4:	2780      	movs	r7, #128	; 0x80
100043c6:	2600      	movs	r6, #0
100043c8:	03ff      	lsls	r7, r7, #15
100043ca:	4c08      	ldr	r4, [pc, #32]	; (100043ec <__aeabi_dsub+0x6bc>)
100043cc:	2500      	movs	r5, #0
100043ce:	e57c      	b.n	10003eca <__aeabi_dsub+0x19a>
100043d0:	433d      	orrs	r5, r7
100043d2:	1e6f      	subs	r7, r5, #1
100043d4:	41bd      	sbcs	r5, r7
100043d6:	2700      	movs	r7, #0
100043d8:	b2ed      	uxtb	r5, r5
100043da:	e783      	b.n	100042e4 <__aeabi_dsub+0x5b4>
100043dc:	1c17      	adds	r7, r2, #0
100043de:	9d01      	ldr	r5, [sp, #4]
100043e0:	4c02      	ldr	r4, [pc, #8]	; (100043ec <__aeabi_dsub+0x6bc>)
100043e2:	e4d7      	b.n	10003d94 <__aeabi_dsub+0x64>
100043e4:	1c17      	adds	r7, r2, #0
100043e6:	9d01      	ldr	r5, [sp, #4]
100043e8:	e4d4      	b.n	10003d94 <__aeabi_dsub+0x64>
100043ea:	46c0      	nop			; (mov r8, r8)
100043ec:	000007ff 	.word	0x000007ff
100043f0:	ff7fffff 	.word	0xff7fffff
100043f4:	4654      	mov	r4, sl
100043f6:	1c3b      	adds	r3, r7, #0
100043f8:	3c20      	subs	r4, #32
100043fa:	40e3      	lsrs	r3, r4
100043fc:	1c1c      	adds	r4, r3, #0
100043fe:	4653      	mov	r3, sl
10004400:	2b20      	cmp	r3, #32
10004402:	d00d      	beq.n	10004420 <__aeabi_dsub+0x6f0>
10004404:	2340      	movs	r3, #64	; 0x40
10004406:	4651      	mov	r1, sl
10004408:	1a5b      	subs	r3, r3, r1
1000440a:	409f      	lsls	r7, r3
1000440c:	433d      	orrs	r5, r7
1000440e:	1e6f      	subs	r7, r5, #1
10004410:	41bd      	sbcs	r5, r7
10004412:	2700      	movs	r7, #0
10004414:	4325      	orrs	r5, r4
10004416:	e765      	b.n	100042e4 <__aeabi_dsub+0x5b4>
10004418:	2700      	movs	r7, #0
1000441a:	e7cd      	b.n	100043b8 <__aeabi_dsub+0x688>
1000441c:	1c0d      	adds	r5, r1, #0
1000441e:	e5c8      	b.n	10003fb2 <__aeabi_dsub+0x282>
10004420:	2700      	movs	r7, #0
10004422:	e7f3      	b.n	1000440c <__aeabi_dsub+0x6dc>

10004424 <__aeabi_d2iz>:
10004424:	030b      	lsls	r3, r1, #12
10004426:	b530      	push	{r4, r5, lr}
10004428:	4c13      	ldr	r4, [pc, #76]	; (10004478 <__aeabi_d2iz+0x54>)
1000442a:	0b1a      	lsrs	r2, r3, #12
1000442c:	004b      	lsls	r3, r1, #1
1000442e:	1c05      	adds	r5, r0, #0
10004430:	0d5b      	lsrs	r3, r3, #21
10004432:	0fc9      	lsrs	r1, r1, #31
10004434:	2000      	movs	r0, #0
10004436:	42a3      	cmp	r3, r4
10004438:	dd10      	ble.n	1000445c <__aeabi_d2iz+0x38>
1000443a:	4810      	ldr	r0, [pc, #64]	; (1000447c <__aeabi_d2iz+0x58>)
1000443c:	4283      	cmp	r3, r0
1000443e:	dc0e      	bgt.n	1000445e <__aeabi_d2iz+0x3a>
10004440:	2080      	movs	r0, #128	; 0x80
10004442:	4c0f      	ldr	r4, [pc, #60]	; (10004480 <__aeabi_d2iz+0x5c>)
10004444:	0340      	lsls	r0, r0, #13
10004446:	4302      	orrs	r2, r0
10004448:	1ae4      	subs	r4, r4, r3
1000444a:	2c1f      	cmp	r4, #31
1000444c:	dd0a      	ble.n	10004464 <__aeabi_d2iz+0x40>
1000444e:	480d      	ldr	r0, [pc, #52]	; (10004484 <__aeabi_d2iz+0x60>)
10004450:	1ac3      	subs	r3, r0, r3
10004452:	40da      	lsrs	r2, r3
10004454:	1c13      	adds	r3, r2, #0
10004456:	4248      	negs	r0, r1
10004458:	4043      	eors	r3, r0
1000445a:	1858      	adds	r0, r3, r1
1000445c:	bd30      	pop	{r4, r5, pc}
1000445e:	4b0a      	ldr	r3, [pc, #40]	; (10004488 <__aeabi_d2iz+0x64>)
10004460:	18c8      	adds	r0, r1, r3
10004462:	e7fb      	b.n	1000445c <__aeabi_d2iz+0x38>
10004464:	1c28      	adds	r0, r5, #0
10004466:	40e0      	lsrs	r0, r4
10004468:	4c08      	ldr	r4, [pc, #32]	; (1000448c <__aeabi_d2iz+0x68>)
1000446a:	46a4      	mov	ip, r4
1000446c:	4463      	add	r3, ip
1000446e:	409a      	lsls	r2, r3
10004470:	1c13      	adds	r3, r2, #0
10004472:	4303      	orrs	r3, r0
10004474:	e7ef      	b.n	10004456 <__aeabi_d2iz+0x32>
10004476:	46c0      	nop			; (mov r8, r8)
10004478:	000003fe 	.word	0x000003fe
1000447c:	0000041d 	.word	0x0000041d
10004480:	00000433 	.word	0x00000433
10004484:	00000413 	.word	0x00000413
10004488:	7fffffff 	.word	0x7fffffff
1000448c:	fffffbed 	.word	0xfffffbed

10004490 <__aeabi_ui2d>:
10004490:	b510      	push	{r4, lr}
10004492:	1e04      	subs	r4, r0, #0
10004494:	d010      	beq.n	100044b8 <__aeabi_ui2d+0x28>
10004496:	f7ff f8f5 	bl	10003684 <__clzsi2>
1000449a:	4a14      	ldr	r2, [pc, #80]	; (100044ec <__aeabi_ui2d+0x5c>)
1000449c:	1a12      	subs	r2, r2, r0
1000449e:	280a      	cmp	r0, #10
100044a0:	dc1a      	bgt.n	100044d8 <__aeabi_ui2d+0x48>
100044a2:	230b      	movs	r3, #11
100044a4:	1c21      	adds	r1, r4, #0
100044a6:	1a1b      	subs	r3, r3, r0
100044a8:	40d9      	lsrs	r1, r3
100044aa:	3015      	adds	r0, #21
100044ac:	030b      	lsls	r3, r1, #12
100044ae:	0552      	lsls	r2, r2, #21
100044b0:	4084      	lsls	r4, r0
100044b2:	0b1b      	lsrs	r3, r3, #12
100044b4:	0d52      	lsrs	r2, r2, #21
100044b6:	e001      	b.n	100044bc <__aeabi_ui2d+0x2c>
100044b8:	2200      	movs	r2, #0
100044ba:	2300      	movs	r3, #0
100044bc:	2100      	movs	r1, #0
100044be:	031b      	lsls	r3, r3, #12
100044c0:	1c20      	adds	r0, r4, #0
100044c2:	0b1c      	lsrs	r4, r3, #12
100044c4:	0d0b      	lsrs	r3, r1, #20
100044c6:	051b      	lsls	r3, r3, #20
100044c8:	4323      	orrs	r3, r4
100044ca:	4c09      	ldr	r4, [pc, #36]	; (100044f0 <__aeabi_ui2d+0x60>)
100044cc:	0512      	lsls	r2, r2, #20
100044ce:	4023      	ands	r3, r4
100044d0:	4313      	orrs	r3, r2
100044d2:	005b      	lsls	r3, r3, #1
100044d4:	0859      	lsrs	r1, r3, #1
100044d6:	bd10      	pop	{r4, pc}
100044d8:	1c03      	adds	r3, r0, #0
100044da:	3b0b      	subs	r3, #11
100044dc:	409c      	lsls	r4, r3
100044de:	0552      	lsls	r2, r2, #21
100044e0:	0323      	lsls	r3, r4, #12
100044e2:	0b1b      	lsrs	r3, r3, #12
100044e4:	0d52      	lsrs	r2, r2, #21
100044e6:	2400      	movs	r4, #0
100044e8:	e7e8      	b.n	100044bc <__aeabi_ui2d+0x2c>
100044ea:	46c0      	nop			; (mov r8, r8)
100044ec:	0000041e 	.word	0x0000041e
100044f0:	800fffff 	.word	0x800fffff

100044f4 <__aeabi_idiv0>:
100044f4:	4770      	bx	lr
100044f6:	46c0      	nop			; (mov r8, r8)

100044f8 <__aeabi_cdrcmple>:
100044f8:	4684      	mov	ip, r0
100044fa:	1c10      	adds	r0, r2, #0
100044fc:	4662      	mov	r2, ip
100044fe:	468c      	mov	ip, r1
10004500:	1c19      	adds	r1, r3, #0
10004502:	4663      	mov	r3, ip
10004504:	e000      	b.n	10004508 <__aeabi_cdcmpeq>
10004506:	46c0      	nop			; (mov r8, r8)

10004508 <__aeabi_cdcmpeq>:
10004508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000450a:	f000 fa8b 	bl	10004a24 <__ledf2>
1000450e:	2800      	cmp	r0, #0
10004510:	d401      	bmi.n	10004516 <__aeabi_cdcmpeq+0xe>
10004512:	2100      	movs	r1, #0
10004514:	42c8      	cmn	r0, r1
10004516:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10004518 <__aeabi_dcmpeq>:
10004518:	b510      	push	{r4, lr}
1000451a:	f000 f9cf 	bl	100048bc <__eqdf2>
1000451e:	4240      	negs	r0, r0
10004520:	3001      	adds	r0, #1
10004522:	bd10      	pop	{r4, pc}

10004524 <__aeabi_dcmplt>:
10004524:	b510      	push	{r4, lr}
10004526:	f000 fa7d 	bl	10004a24 <__ledf2>
1000452a:	2800      	cmp	r0, #0
1000452c:	db01      	blt.n	10004532 <__aeabi_dcmplt+0xe>
1000452e:	2000      	movs	r0, #0
10004530:	bd10      	pop	{r4, pc}
10004532:	2001      	movs	r0, #1
10004534:	bd10      	pop	{r4, pc}
10004536:	46c0      	nop			; (mov r8, r8)

10004538 <__aeabi_dcmple>:
10004538:	b510      	push	{r4, lr}
1000453a:	f000 fa73 	bl	10004a24 <__ledf2>
1000453e:	2800      	cmp	r0, #0
10004540:	dd01      	ble.n	10004546 <__aeabi_dcmple+0xe>
10004542:	2000      	movs	r0, #0
10004544:	bd10      	pop	{r4, pc}
10004546:	2001      	movs	r0, #1
10004548:	bd10      	pop	{r4, pc}
1000454a:	46c0      	nop			; (mov r8, r8)

1000454c <__aeabi_dcmpgt>:
1000454c:	b510      	push	{r4, lr}
1000454e:	f000 f9f9 	bl	10004944 <__gedf2>
10004552:	2800      	cmp	r0, #0
10004554:	dc01      	bgt.n	1000455a <__aeabi_dcmpgt+0xe>
10004556:	2000      	movs	r0, #0
10004558:	bd10      	pop	{r4, pc}
1000455a:	2001      	movs	r0, #1
1000455c:	bd10      	pop	{r4, pc}
1000455e:	46c0      	nop			; (mov r8, r8)

10004560 <__aeabi_dcmpge>:
10004560:	b510      	push	{r4, lr}
10004562:	f000 f9ef 	bl	10004944 <__gedf2>
10004566:	2800      	cmp	r0, #0
10004568:	da01      	bge.n	1000456e <__aeabi_dcmpge+0xe>
1000456a:	2000      	movs	r0, #0
1000456c:	bd10      	pop	{r4, pc}
1000456e:	2001      	movs	r0, #1
10004570:	bd10      	pop	{r4, pc}
10004572:	46c0      	nop			; (mov r8, r8)

10004574 <__divdi3>:
10004574:	b5f0      	push	{r4, r5, r6, r7, lr}
10004576:	4644      	mov	r4, r8
10004578:	465f      	mov	r7, fp
1000457a:	4656      	mov	r6, sl
1000457c:	464d      	mov	r5, r9
1000457e:	b4f0      	push	{r4, r5, r6, r7}
10004580:	1c1c      	adds	r4, r3, #0
10004582:	b085      	sub	sp, #20
10004584:	2900      	cmp	r1, #0
10004586:	da00      	bge.n	1000458a <__divdi3+0x16>
10004588:	e0a9      	b.n	100046de <__divdi3+0x16a>
1000458a:	1c0f      	adds	r7, r1, #0
1000458c:	2100      	movs	r1, #0
1000458e:	1c06      	adds	r6, r0, #0
10004590:	4688      	mov	r8, r1
10004592:	1c10      	adds	r0, r2, #0
10004594:	1c19      	adds	r1, r3, #0
10004596:	2c00      	cmp	r4, #0
10004598:	da00      	bge.n	1000459c <__divdi3+0x28>
1000459a:	e097      	b.n	100046cc <__divdi3+0x158>
1000459c:	1c34      	adds	r4, r6, #0
1000459e:	1c3d      	adds	r5, r7, #0
100045a0:	4682      	mov	sl, r0
100045a2:	4689      	mov	r9, r1
100045a4:	42b9      	cmp	r1, r7
100045a6:	d873      	bhi.n	10004690 <__divdi3+0x11c>
100045a8:	d070      	beq.n	1000468c <__divdi3+0x118>
100045aa:	4649      	mov	r1, r9
100045ac:	4650      	mov	r0, sl
100045ae:	f000 fa9f 	bl	10004af0 <__clzdi2>
100045b2:	4683      	mov	fp, r0
100045b4:	1c39      	adds	r1, r7, #0
100045b6:	1c30      	adds	r0, r6, #0
100045b8:	f000 fa9a 	bl	10004af0 <__clzdi2>
100045bc:	465b      	mov	r3, fp
100045be:	1a18      	subs	r0, r3, r0
100045c0:	1c03      	adds	r3, r0, #0
100045c2:	4683      	mov	fp, r0
100045c4:	3b20      	subs	r3, #32
100045c6:	469c      	mov	ip, r3
100045c8:	d500      	bpl.n	100045cc <__divdi3+0x58>
100045ca:	e09c      	b.n	10004706 <__divdi3+0x192>
100045cc:	2300      	movs	r3, #0
100045ce:	2200      	movs	r2, #0
100045d0:	4651      	mov	r1, sl
100045d2:	9200      	str	r2, [sp, #0]
100045d4:	9301      	str	r3, [sp, #4]
100045d6:	4663      	mov	r3, ip
100045d8:	4099      	lsls	r1, r3
100045da:	9101      	str	r1, [sp, #4]
100045dc:	4651      	mov	r1, sl
100045de:	4081      	lsls	r1, r0
100045e0:	9b01      	ldr	r3, [sp, #4]
100045e2:	9100      	str	r1, [sp, #0]
100045e4:	42bb      	cmp	r3, r7
100045e6:	d900      	bls.n	100045ea <__divdi3+0x76>
100045e8:	e083      	b.n	100046f2 <__divdi3+0x17e>
100045ea:	d100      	bne.n	100045ee <__divdi3+0x7a>
100045ec:	e07e      	b.n	100046ec <__divdi3+0x178>
100045ee:	9a00      	ldr	r2, [sp, #0]
100045f0:	9b01      	ldr	r3, [sp, #4]
100045f2:	1c34      	adds	r4, r6, #0
100045f4:	1c3d      	adds	r5, r7, #0
100045f6:	1aa4      	subs	r4, r4, r2
100045f8:	419d      	sbcs	r5, r3
100045fa:	4663      	mov	r3, ip
100045fc:	2b00      	cmp	r3, #0
100045fe:	da00      	bge.n	10004602 <__divdi3+0x8e>
10004600:	e09a      	b.n	10004738 <__divdi3+0x1c4>
10004602:	2600      	movs	r6, #0
10004604:	2700      	movs	r7, #0
10004606:	9602      	str	r6, [sp, #8]
10004608:	9703      	str	r7, [sp, #12]
1000460a:	3601      	adds	r6, #1
1000460c:	409e      	lsls	r6, r3
1000460e:	9603      	str	r6, [sp, #12]
10004610:	2601      	movs	r6, #1
10004612:	4086      	lsls	r6, r0
10004614:	9602      	str	r6, [sp, #8]
10004616:	2800      	cmp	r0, #0
10004618:	d100      	bne.n	1000461c <__divdi3+0xa8>
1000461a:	e071      	b.n	10004700 <__divdi3+0x18c>
1000461c:	9900      	ldr	r1, [sp, #0]
1000461e:	9a01      	ldr	r2, [sp, #4]
10004620:	07d3      	lsls	r3, r2, #31
10004622:	4699      	mov	r9, r3
10004624:	464b      	mov	r3, r9
10004626:	084e      	lsrs	r6, r1, #1
10004628:	431e      	orrs	r6, r3
1000462a:	0857      	lsrs	r7, r2, #1
1000462c:	2300      	movs	r3, #0
1000462e:	2201      	movs	r2, #1
10004630:	e00c      	b.n	1000464c <__divdi3+0xd8>
10004632:	42af      	cmp	r7, r5
10004634:	d101      	bne.n	1000463a <__divdi3+0xc6>
10004636:	42a6      	cmp	r6, r4
10004638:	d80a      	bhi.n	10004650 <__divdi3+0xdc>
1000463a:	1ba4      	subs	r4, r4, r6
1000463c:	41bd      	sbcs	r5, r7
1000463e:	1924      	adds	r4, r4, r4
10004640:	416d      	adcs	r5, r5
10004642:	3801      	subs	r0, #1
10004644:	18a4      	adds	r4, r4, r2
10004646:	415d      	adcs	r5, r3
10004648:	2800      	cmp	r0, #0
1000464a:	d006      	beq.n	1000465a <__divdi3+0xe6>
1000464c:	42af      	cmp	r7, r5
1000464e:	d9f0      	bls.n	10004632 <__divdi3+0xbe>
10004650:	3801      	subs	r0, #1
10004652:	1924      	adds	r4, r4, r4
10004654:	416d      	adcs	r5, r5
10004656:	2800      	cmp	r0, #0
10004658:	d1f8      	bne.n	1000464c <__divdi3+0xd8>
1000465a:	2220      	movs	r2, #32
1000465c:	9e02      	ldr	r6, [sp, #8]
1000465e:	9f03      	ldr	r7, [sp, #12]
10004660:	465b      	mov	r3, fp
10004662:	4252      	negs	r2, r2
10004664:	1936      	adds	r6, r6, r4
10004666:	416f      	adcs	r7, r5
10004668:	1899      	adds	r1, r3, r2
1000466a:	d45a      	bmi.n	10004722 <__divdi3+0x1ae>
1000466c:	1c28      	adds	r0, r5, #0
1000466e:	40c8      	lsrs	r0, r1
10004670:	1c2c      	adds	r4, r5, #0
10004672:	465b      	mov	r3, fp
10004674:	40dc      	lsrs	r4, r3
10004676:	2900      	cmp	r1, #0
10004678:	db68      	blt.n	1000474c <__divdi3+0x1d8>
1000467a:	1c04      	adds	r4, r0, #0
1000467c:	408c      	lsls	r4, r1
1000467e:	1c23      	adds	r3, r4, #0
10004680:	4659      	mov	r1, fp
10004682:	4088      	lsls	r0, r1
10004684:	1c02      	adds	r2, r0, #0
10004686:	1ab6      	subs	r6, r6, r2
10004688:	419f      	sbcs	r7, r3
1000468a:	e003      	b.n	10004694 <__divdi3+0x120>
1000468c:	42b0      	cmp	r0, r6
1000468e:	d98c      	bls.n	100045aa <__divdi3+0x36>
10004690:	2600      	movs	r6, #0
10004692:	2700      	movs	r7, #0
10004694:	4641      	mov	r1, r8
10004696:	1e4b      	subs	r3, r1, #1
10004698:	4199      	sbcs	r1, r3
1000469a:	2300      	movs	r3, #0
1000469c:	9100      	str	r1, [sp, #0]
1000469e:	9301      	str	r3, [sp, #4]
100046a0:	9a00      	ldr	r2, [sp, #0]
100046a2:	9b01      	ldr	r3, [sp, #4]
100046a4:	2500      	movs	r5, #0
100046a6:	4254      	negs	r4, r2
100046a8:	419d      	sbcs	r5, r3
100046aa:	1c33      	adds	r3, r6, #0
100046ac:	4063      	eors	r3, r4
100046ae:	1c18      	adds	r0, r3, #0
100046b0:	1c3b      	adds	r3, r7, #0
100046b2:	406b      	eors	r3, r5
100046b4:	1c19      	adds	r1, r3, #0
100046b6:	9b00      	ldr	r3, [sp, #0]
100046b8:	9c01      	ldr	r4, [sp, #4]
100046ba:	18c0      	adds	r0, r0, r3
100046bc:	4161      	adcs	r1, r4
100046be:	b005      	add	sp, #20
100046c0:	bc3c      	pop	{r2, r3, r4, r5}
100046c2:	4690      	mov	r8, r2
100046c4:	4699      	mov	r9, r3
100046c6:	46a2      	mov	sl, r4
100046c8:	46ab      	mov	fp, r5
100046ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100046cc:	4643      	mov	r3, r8
100046ce:	43db      	mvns	r3, r3
100046d0:	1c0c      	adds	r4, r1, #0
100046d2:	4698      	mov	r8, r3
100046d4:	1c13      	adds	r3, r2, #0
100046d6:	2100      	movs	r1, #0
100046d8:	4258      	negs	r0, r3
100046da:	41a1      	sbcs	r1, r4
100046dc:	e75e      	b.n	1000459c <__divdi3+0x28>
100046de:	2700      	movs	r7, #0
100046e0:	4246      	negs	r6, r0
100046e2:	418f      	sbcs	r7, r1
100046e4:	2101      	movs	r1, #1
100046e6:	4249      	negs	r1, r1
100046e8:	4688      	mov	r8, r1
100046ea:	e752      	b.n	10004592 <__divdi3+0x1e>
100046ec:	42b1      	cmp	r1, r6
100046ee:	d800      	bhi.n	100046f2 <__divdi3+0x17e>
100046f0:	e77d      	b.n	100045ee <__divdi3+0x7a>
100046f2:	2600      	movs	r6, #0
100046f4:	2700      	movs	r7, #0
100046f6:	9602      	str	r6, [sp, #8]
100046f8:	9703      	str	r7, [sp, #12]
100046fa:	2800      	cmp	r0, #0
100046fc:	d000      	beq.n	10004700 <__divdi3+0x18c>
100046fe:	e78d      	b.n	1000461c <__divdi3+0xa8>
10004700:	9e02      	ldr	r6, [sp, #8]
10004702:	9f03      	ldr	r7, [sp, #12]
10004704:	e7c6      	b.n	10004694 <__divdi3+0x120>
10004706:	2120      	movs	r1, #32
10004708:	4653      	mov	r3, sl
1000470a:	1a09      	subs	r1, r1, r0
1000470c:	40cb      	lsrs	r3, r1
1000470e:	2200      	movs	r2, #0
10004710:	1c19      	adds	r1, r3, #0
10004712:	2300      	movs	r3, #0
10004714:	9200      	str	r2, [sp, #0]
10004716:	9301      	str	r3, [sp, #4]
10004718:	464b      	mov	r3, r9
1000471a:	4083      	lsls	r3, r0
1000471c:	430b      	orrs	r3, r1
1000471e:	9301      	str	r3, [sp, #4]
10004720:	e75c      	b.n	100045dc <__divdi3+0x68>
10004722:	465a      	mov	r2, fp
10004724:	2320      	movs	r3, #32
10004726:	1a9b      	subs	r3, r3, r2
10004728:	1c2a      	adds	r2, r5, #0
1000472a:	409a      	lsls	r2, r3
1000472c:	1c20      	adds	r0, r4, #0
1000472e:	1c13      	adds	r3, r2, #0
10004730:	465a      	mov	r2, fp
10004732:	40d0      	lsrs	r0, r2
10004734:	4318      	orrs	r0, r3
10004736:	e79b      	b.n	10004670 <__divdi3+0xfc>
10004738:	2620      	movs	r6, #32
1000473a:	2700      	movs	r7, #0
1000473c:	1a33      	subs	r3, r6, r0
1000473e:	2600      	movs	r6, #0
10004740:	9602      	str	r6, [sp, #8]
10004742:	9703      	str	r7, [sp, #12]
10004744:	2701      	movs	r7, #1
10004746:	40df      	lsrs	r7, r3
10004748:	9703      	str	r7, [sp, #12]
1000474a:	e761      	b.n	10004610 <__divdi3+0x9c>
1000474c:	465b      	mov	r3, fp
1000474e:	2120      	movs	r1, #32
10004750:	465d      	mov	r5, fp
10004752:	1ac9      	subs	r1, r1, r3
10004754:	1c03      	adds	r3, r0, #0
10004756:	40ac      	lsls	r4, r5
10004758:	40cb      	lsrs	r3, r1
1000475a:	1c19      	adds	r1, r3, #0
1000475c:	1c23      	adds	r3, r4, #0
1000475e:	430b      	orrs	r3, r1
10004760:	e78e      	b.n	10004680 <__divdi3+0x10c>
10004762:	46c0      	nop			; (mov r8, r8)

10004764 <__udivdi3>:
10004764:	b5f0      	push	{r4, r5, r6, r7, lr}
10004766:	4645      	mov	r5, r8
10004768:	464e      	mov	r6, r9
1000476a:	4657      	mov	r7, sl
1000476c:	b4e0      	push	{r5, r6, r7}
1000476e:	1c04      	adds	r4, r0, #0
10004770:	b082      	sub	sp, #8
10004772:	1c0d      	adds	r5, r1, #0
10004774:	4691      	mov	r9, r2
10004776:	4698      	mov	r8, r3
10004778:	428b      	cmp	r3, r1
1000477a:	d862      	bhi.n	10004842 <__udivdi3+0xde>
1000477c:	d05f      	beq.n	1000483e <__udivdi3+0xda>
1000477e:	4641      	mov	r1, r8
10004780:	4648      	mov	r0, r9
10004782:	f000 f9b5 	bl	10004af0 <__clzdi2>
10004786:	1c29      	adds	r1, r5, #0
10004788:	1c06      	adds	r6, r0, #0
1000478a:	1c20      	adds	r0, r4, #0
1000478c:	f000 f9b0 	bl	10004af0 <__clzdi2>
10004790:	2320      	movs	r3, #32
10004792:	1a31      	subs	r1, r6, r0
10004794:	425b      	negs	r3, r3
10004796:	468a      	mov	sl, r1
10004798:	18c8      	adds	r0, r1, r3
1000479a:	d465      	bmi.n	10004868 <__udivdi3+0x104>
1000479c:	464b      	mov	r3, r9
1000479e:	4083      	lsls	r3, r0
100047a0:	1c1f      	adds	r7, r3, #0
100047a2:	464b      	mov	r3, r9
100047a4:	408b      	lsls	r3, r1
100047a6:	1c1e      	adds	r6, r3, #0
100047a8:	42af      	cmp	r7, r5
100047aa:	d858      	bhi.n	1000485e <__udivdi3+0xfa>
100047ac:	d055      	beq.n	1000485a <__udivdi3+0xf6>
100047ae:	1ba4      	subs	r4, r4, r6
100047b0:	41bd      	sbcs	r5, r7
100047b2:	2800      	cmp	r0, #0
100047b4:	da00      	bge.n	100047b8 <__udivdi3+0x54>
100047b6:	e077      	b.n	100048a8 <__udivdi3+0x144>
100047b8:	2200      	movs	r2, #0
100047ba:	2300      	movs	r3, #0
100047bc:	9200      	str	r2, [sp, #0]
100047be:	9301      	str	r3, [sp, #4]
100047c0:	3201      	adds	r2, #1
100047c2:	4082      	lsls	r2, r0
100047c4:	9201      	str	r2, [sp, #4]
100047c6:	2301      	movs	r3, #1
100047c8:	408b      	lsls	r3, r1
100047ca:	9300      	str	r3, [sp, #0]
100047cc:	2900      	cmp	r1, #0
100047ce:	d03c      	beq.n	1000484a <__udivdi3+0xe6>
100047d0:	07fb      	lsls	r3, r7, #31
100047d2:	4698      	mov	r8, r3
100047d4:	4640      	mov	r0, r8
100047d6:	0872      	lsrs	r2, r6, #1
100047d8:	087b      	lsrs	r3, r7, #1
100047da:	4302      	orrs	r2, r0
100047dc:	2601      	movs	r6, #1
100047de:	2700      	movs	r7, #0
100047e0:	e00c      	b.n	100047fc <__udivdi3+0x98>
100047e2:	42ab      	cmp	r3, r5
100047e4:	d101      	bne.n	100047ea <__udivdi3+0x86>
100047e6:	42a2      	cmp	r2, r4
100047e8:	d80a      	bhi.n	10004800 <__udivdi3+0x9c>
100047ea:	1aa4      	subs	r4, r4, r2
100047ec:	419d      	sbcs	r5, r3
100047ee:	1924      	adds	r4, r4, r4
100047f0:	416d      	adcs	r5, r5
100047f2:	3901      	subs	r1, #1
100047f4:	19a4      	adds	r4, r4, r6
100047f6:	417d      	adcs	r5, r7
100047f8:	2900      	cmp	r1, #0
100047fa:	d006      	beq.n	1000480a <__udivdi3+0xa6>
100047fc:	42ab      	cmp	r3, r5
100047fe:	d9f0      	bls.n	100047e2 <__udivdi3+0x7e>
10004800:	3901      	subs	r1, #1
10004802:	1924      	adds	r4, r4, r4
10004804:	416d      	adcs	r5, r5
10004806:	2900      	cmp	r1, #0
10004808:	d1f8      	bne.n	100047fc <__udivdi3+0x98>
1000480a:	2220      	movs	r2, #32
1000480c:	9800      	ldr	r0, [sp, #0]
1000480e:	9901      	ldr	r1, [sp, #4]
10004810:	4653      	mov	r3, sl
10004812:	4252      	negs	r2, r2
10004814:	1900      	adds	r0, r0, r4
10004816:	4169      	adcs	r1, r5
10004818:	189e      	adds	r6, r3, r2
1000481a:	d43a      	bmi.n	10004892 <__udivdi3+0x12e>
1000481c:	1c2f      	adds	r7, r5, #0
1000481e:	40f7      	lsrs	r7, r6
10004820:	4653      	mov	r3, sl
10004822:	40dd      	lsrs	r5, r3
10004824:	2e00      	cmp	r6, #0
10004826:	db29      	blt.n	1000487c <__udivdi3+0x118>
10004828:	1c3c      	adds	r4, r7, #0
1000482a:	40b4      	lsls	r4, r6
1000482c:	1c23      	adds	r3, r4, #0
1000482e:	4654      	mov	r4, sl
10004830:	40a7      	lsls	r7, r4
10004832:	1c3a      	adds	r2, r7, #0
10004834:	1a80      	subs	r0, r0, r2
10004836:	4199      	sbcs	r1, r3
10004838:	9000      	str	r0, [sp, #0]
1000483a:	9101      	str	r1, [sp, #4]
1000483c:	e005      	b.n	1000484a <__udivdi3+0xe6>
1000483e:	4282      	cmp	r2, r0
10004840:	d99d      	bls.n	1000477e <__udivdi3+0x1a>
10004842:	2300      	movs	r3, #0
10004844:	2400      	movs	r4, #0
10004846:	9300      	str	r3, [sp, #0]
10004848:	9401      	str	r4, [sp, #4]
1000484a:	9800      	ldr	r0, [sp, #0]
1000484c:	9901      	ldr	r1, [sp, #4]
1000484e:	b002      	add	sp, #8
10004850:	bc1c      	pop	{r2, r3, r4}
10004852:	4690      	mov	r8, r2
10004854:	4699      	mov	r9, r3
10004856:	46a2      	mov	sl, r4
10004858:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000485a:	42a3      	cmp	r3, r4
1000485c:	d9a7      	bls.n	100047ae <__udivdi3+0x4a>
1000485e:	2200      	movs	r2, #0
10004860:	2300      	movs	r3, #0
10004862:	9200      	str	r2, [sp, #0]
10004864:	9301      	str	r3, [sp, #4]
10004866:	e7b1      	b.n	100047cc <__udivdi3+0x68>
10004868:	2220      	movs	r2, #32
1000486a:	464b      	mov	r3, r9
1000486c:	1a52      	subs	r2, r2, r1
1000486e:	40d3      	lsrs	r3, r2
10004870:	1c1a      	adds	r2, r3, #0
10004872:	4643      	mov	r3, r8
10004874:	408b      	lsls	r3, r1
10004876:	1c1f      	adds	r7, r3, #0
10004878:	4317      	orrs	r7, r2
1000487a:	e792      	b.n	100047a2 <__udivdi3+0x3e>
1000487c:	4653      	mov	r3, sl
1000487e:	2420      	movs	r4, #32
10004880:	4656      	mov	r6, sl
10004882:	1ae4      	subs	r4, r4, r3
10004884:	1c3b      	adds	r3, r7, #0
10004886:	40b5      	lsls	r5, r6
10004888:	40e3      	lsrs	r3, r4
1000488a:	1c1c      	adds	r4, r3, #0
1000488c:	1c2b      	adds	r3, r5, #0
1000488e:	4323      	orrs	r3, r4
10004890:	e7cd      	b.n	1000482e <__udivdi3+0xca>
10004892:	4652      	mov	r2, sl
10004894:	2320      	movs	r3, #32
10004896:	1a9b      	subs	r3, r3, r2
10004898:	1c2a      	adds	r2, r5, #0
1000489a:	409a      	lsls	r2, r3
1000489c:	1c27      	adds	r7, r4, #0
1000489e:	1c13      	adds	r3, r2, #0
100048a0:	4652      	mov	r2, sl
100048a2:	40d7      	lsrs	r7, r2
100048a4:	431f      	orrs	r7, r3
100048a6:	e7bb      	b.n	10004820 <__udivdi3+0xbc>
100048a8:	2320      	movs	r3, #32
100048aa:	2200      	movs	r2, #0
100048ac:	1a58      	subs	r0, r3, r1
100048ae:	2300      	movs	r3, #0
100048b0:	9200      	str	r2, [sp, #0]
100048b2:	9301      	str	r3, [sp, #4]
100048b4:	3201      	adds	r2, #1
100048b6:	40c2      	lsrs	r2, r0
100048b8:	9201      	str	r2, [sp, #4]
100048ba:	e784      	b.n	100047c6 <__udivdi3+0x62>

100048bc <__eqdf2>:
100048bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100048be:	465f      	mov	r7, fp
100048c0:	464d      	mov	r5, r9
100048c2:	4644      	mov	r4, r8
100048c4:	4656      	mov	r6, sl
100048c6:	b4f0      	push	{r4, r5, r6, r7}
100048c8:	031f      	lsls	r7, r3, #12
100048ca:	005c      	lsls	r4, r3, #1
100048cc:	0fdb      	lsrs	r3, r3, #31
100048ce:	4699      	mov	r9, r3
100048d0:	4b1b      	ldr	r3, [pc, #108]	; (10004940 <__eqdf2+0x84>)
100048d2:	030e      	lsls	r6, r1, #12
100048d4:	004d      	lsls	r5, r1, #1
100048d6:	0fc9      	lsrs	r1, r1, #31
100048d8:	4684      	mov	ip, r0
100048da:	0b36      	lsrs	r6, r6, #12
100048dc:	0d6d      	lsrs	r5, r5, #21
100048de:	468b      	mov	fp, r1
100048e0:	4690      	mov	r8, r2
100048e2:	0b3f      	lsrs	r7, r7, #12
100048e4:	0d64      	lsrs	r4, r4, #21
100048e6:	429d      	cmp	r5, r3
100048e8:	d00c      	beq.n	10004904 <__eqdf2+0x48>
100048ea:	4b15      	ldr	r3, [pc, #84]	; (10004940 <__eqdf2+0x84>)
100048ec:	429c      	cmp	r4, r3
100048ee:	d010      	beq.n	10004912 <__eqdf2+0x56>
100048f0:	2301      	movs	r3, #1
100048f2:	42a5      	cmp	r5, r4
100048f4:	d014      	beq.n	10004920 <__eqdf2+0x64>
100048f6:	1c18      	adds	r0, r3, #0
100048f8:	bc3c      	pop	{r2, r3, r4, r5}
100048fa:	4690      	mov	r8, r2
100048fc:	4699      	mov	r9, r3
100048fe:	46a2      	mov	sl, r4
10004900:	46ab      	mov	fp, r5
10004902:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004904:	1c31      	adds	r1, r6, #0
10004906:	2301      	movs	r3, #1
10004908:	4301      	orrs	r1, r0
1000490a:	d1f4      	bne.n	100048f6 <__eqdf2+0x3a>
1000490c:	4b0c      	ldr	r3, [pc, #48]	; (10004940 <__eqdf2+0x84>)
1000490e:	429c      	cmp	r4, r3
10004910:	d1ee      	bne.n	100048f0 <__eqdf2+0x34>
10004912:	433a      	orrs	r2, r7
10004914:	2301      	movs	r3, #1
10004916:	2a00      	cmp	r2, #0
10004918:	d1ed      	bne.n	100048f6 <__eqdf2+0x3a>
1000491a:	2301      	movs	r3, #1
1000491c:	42a5      	cmp	r5, r4
1000491e:	d1ea      	bne.n	100048f6 <__eqdf2+0x3a>
10004920:	42be      	cmp	r6, r7
10004922:	d1e8      	bne.n	100048f6 <__eqdf2+0x3a>
10004924:	45c4      	cmp	ip, r8
10004926:	d1e6      	bne.n	100048f6 <__eqdf2+0x3a>
10004928:	45cb      	cmp	fp, r9
1000492a:	d006      	beq.n	1000493a <__eqdf2+0x7e>
1000492c:	2d00      	cmp	r5, #0
1000492e:	d1e2      	bne.n	100048f6 <__eqdf2+0x3a>
10004930:	4330      	orrs	r0, r6
10004932:	1c03      	adds	r3, r0, #0
10004934:	1e58      	subs	r0, r3, #1
10004936:	4183      	sbcs	r3, r0
10004938:	e7dd      	b.n	100048f6 <__eqdf2+0x3a>
1000493a:	2300      	movs	r3, #0
1000493c:	e7db      	b.n	100048f6 <__eqdf2+0x3a>
1000493e:	46c0      	nop			; (mov r8, r8)
10004940:	000007ff 	.word	0x000007ff

10004944 <__gedf2>:
10004944:	b5f0      	push	{r4, r5, r6, r7, lr}
10004946:	4657      	mov	r7, sl
10004948:	4645      	mov	r5, r8
1000494a:	464e      	mov	r6, r9
1000494c:	b4e0      	push	{r5, r6, r7}
1000494e:	030f      	lsls	r7, r1, #12
10004950:	004e      	lsls	r6, r1, #1
10004952:	0fc9      	lsrs	r1, r1, #31
10004954:	468a      	mov	sl, r1
10004956:	4932      	ldr	r1, [pc, #200]	; (10004a20 <__gedf2+0xdc>)
10004958:	031d      	lsls	r5, r3, #12
1000495a:	005c      	lsls	r4, r3, #1
1000495c:	4684      	mov	ip, r0
1000495e:	0b3f      	lsrs	r7, r7, #12
10004960:	0d76      	lsrs	r6, r6, #21
10004962:	4690      	mov	r8, r2
10004964:	0b2d      	lsrs	r5, r5, #12
10004966:	0d64      	lsrs	r4, r4, #21
10004968:	0fdb      	lsrs	r3, r3, #31
1000496a:	428e      	cmp	r6, r1
1000496c:	d00f      	beq.n	1000498e <__gedf2+0x4a>
1000496e:	428c      	cmp	r4, r1
10004970:	d039      	beq.n	100049e6 <__gedf2+0xa2>
10004972:	2e00      	cmp	r6, #0
10004974:	d110      	bne.n	10004998 <__gedf2+0x54>
10004976:	4338      	orrs	r0, r7
10004978:	4241      	negs	r1, r0
1000497a:	4141      	adcs	r1, r0
1000497c:	4689      	mov	r9, r1
1000497e:	2c00      	cmp	r4, #0
10004980:	d127      	bne.n	100049d2 <__gedf2+0x8e>
10004982:	432a      	orrs	r2, r5
10004984:	d125      	bne.n	100049d2 <__gedf2+0x8e>
10004986:	2000      	movs	r0, #0
10004988:	2900      	cmp	r1, #0
1000498a:	d10e      	bne.n	100049aa <__gedf2+0x66>
1000498c:	e008      	b.n	100049a0 <__gedf2+0x5c>
1000498e:	1c39      	adds	r1, r7, #0
10004990:	4301      	orrs	r1, r0
10004992:	d12e      	bne.n	100049f2 <__gedf2+0xae>
10004994:	42b4      	cmp	r4, r6
10004996:	d026      	beq.n	100049e6 <__gedf2+0xa2>
10004998:	2c00      	cmp	r4, #0
1000499a:	d00b      	beq.n	100049b4 <__gedf2+0x70>
1000499c:	459a      	cmp	sl, r3
1000499e:	d00d      	beq.n	100049bc <__gedf2+0x78>
100049a0:	4653      	mov	r3, sl
100049a2:	4259      	negs	r1, r3
100049a4:	2301      	movs	r3, #1
100049a6:	4319      	orrs	r1, r3
100049a8:	1c08      	adds	r0, r1, #0
100049aa:	bc1c      	pop	{r2, r3, r4}
100049ac:	4690      	mov	r8, r2
100049ae:	4699      	mov	r9, r3
100049b0:	46a2      	mov	sl, r4
100049b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100049b4:	432a      	orrs	r2, r5
100049b6:	d0f3      	beq.n	100049a0 <__gedf2+0x5c>
100049b8:	459a      	cmp	sl, r3
100049ba:	d1f1      	bne.n	100049a0 <__gedf2+0x5c>
100049bc:	42a6      	cmp	r6, r4
100049be:	dcef      	bgt.n	100049a0 <__gedf2+0x5c>
100049c0:	da1a      	bge.n	100049f8 <__gedf2+0xb4>
100049c2:	4650      	mov	r0, sl
100049c4:	4241      	negs	r1, r0
100049c6:	4148      	adcs	r0, r1
100049c8:	2301      	movs	r3, #1
100049ca:	4241      	negs	r1, r0
100049cc:	4319      	orrs	r1, r3
100049ce:	1c08      	adds	r0, r1, #0
100049d0:	e7eb      	b.n	100049aa <__gedf2+0x66>
100049d2:	464a      	mov	r2, r9
100049d4:	2a00      	cmp	r2, #0
100049d6:	d0e1      	beq.n	1000499c <__gedf2+0x58>
100049d8:	4258      	negs	r0, r3
100049da:	4158      	adcs	r0, r3
100049dc:	2201      	movs	r2, #1
100049de:	4241      	negs	r1, r0
100049e0:	4311      	orrs	r1, r2
100049e2:	1c08      	adds	r0, r1, #0
100049e4:	e7e1      	b.n	100049aa <__gedf2+0x66>
100049e6:	1c29      	adds	r1, r5, #0
100049e8:	4311      	orrs	r1, r2
100049ea:	d102      	bne.n	100049f2 <__gedf2+0xae>
100049ec:	2e00      	cmp	r6, #0
100049ee:	d0c2      	beq.n	10004976 <__gedf2+0x32>
100049f0:	e7d4      	b.n	1000499c <__gedf2+0x58>
100049f2:	2002      	movs	r0, #2
100049f4:	4240      	negs	r0, r0
100049f6:	e7d8      	b.n	100049aa <__gedf2+0x66>
100049f8:	42af      	cmp	r7, r5
100049fa:	d8d1      	bhi.n	100049a0 <__gedf2+0x5c>
100049fc:	d009      	beq.n	10004a12 <__gedf2+0xce>
100049fe:	2000      	movs	r0, #0
10004a00:	42af      	cmp	r7, r5
10004a02:	d2d2      	bcs.n	100049aa <__gedf2+0x66>
10004a04:	4650      	mov	r0, sl
10004a06:	4241      	negs	r1, r0
10004a08:	4148      	adcs	r0, r1
10004a0a:	2301      	movs	r3, #1
10004a0c:	4240      	negs	r0, r0
10004a0e:	4318      	orrs	r0, r3
10004a10:	e7cb      	b.n	100049aa <__gedf2+0x66>
10004a12:	45c4      	cmp	ip, r8
10004a14:	d8c4      	bhi.n	100049a0 <__gedf2+0x5c>
10004a16:	2000      	movs	r0, #0
10004a18:	45c4      	cmp	ip, r8
10004a1a:	d3f3      	bcc.n	10004a04 <__gedf2+0xc0>
10004a1c:	e7c5      	b.n	100049aa <__gedf2+0x66>
10004a1e:	46c0      	nop			; (mov r8, r8)
10004a20:	000007ff 	.word	0x000007ff

10004a24 <__ledf2>:
10004a24:	b5f0      	push	{r4, r5, r6, r7, lr}
10004a26:	465f      	mov	r7, fp
10004a28:	464d      	mov	r5, r9
10004a2a:	4644      	mov	r4, r8
10004a2c:	4656      	mov	r6, sl
10004a2e:	4680      	mov	r8, r0
10004a30:	b4f0      	push	{r4, r5, r6, r7}
10004a32:	1c06      	adds	r6, r0, #0
10004a34:	0308      	lsls	r0, r1, #12
10004a36:	0b00      	lsrs	r0, r0, #12
10004a38:	4684      	mov	ip, r0
10004a3a:	482c      	ldr	r0, [pc, #176]	; (10004aec <__ledf2+0xc8>)
10004a3c:	004c      	lsls	r4, r1, #1
10004a3e:	031f      	lsls	r7, r3, #12
10004a40:	005d      	lsls	r5, r3, #1
10004a42:	0fc9      	lsrs	r1, r1, #31
10004a44:	0d64      	lsrs	r4, r4, #21
10004a46:	468b      	mov	fp, r1
10004a48:	4691      	mov	r9, r2
10004a4a:	0b3f      	lsrs	r7, r7, #12
10004a4c:	0d6d      	lsrs	r5, r5, #21
10004a4e:	0fdb      	lsrs	r3, r3, #31
10004a50:	4284      	cmp	r4, r0
10004a52:	d012      	beq.n	10004a7a <__ledf2+0x56>
10004a54:	4285      	cmp	r5, r0
10004a56:	d025      	beq.n	10004aa4 <__ledf2+0x80>
10004a58:	2c00      	cmp	r4, #0
10004a5a:	d114      	bne.n	10004a86 <__ledf2+0x62>
10004a5c:	4661      	mov	r1, ip
10004a5e:	430e      	orrs	r6, r1
10004a60:	4270      	negs	r0, r6
10004a62:	4146      	adcs	r6, r0
10004a64:	2d00      	cmp	r5, #0
10004a66:	d035      	beq.n	10004ad4 <__ledf2+0xb0>
10004a68:	2e00      	cmp	r6, #0
10004a6a:	d021      	beq.n	10004ab0 <__ledf2+0x8c>
10004a6c:	4258      	negs	r0, r3
10004a6e:	4158      	adcs	r0, r3
10004a70:	2101      	movs	r1, #1
10004a72:	4243      	negs	r3, r0
10004a74:	430b      	orrs	r3, r1
10004a76:	1c18      	adds	r0, r3, #0
10004a78:	e00e      	b.n	10004a98 <__ledf2+0x74>
10004a7a:	4661      	mov	r1, ip
10004a7c:	2002      	movs	r0, #2
10004a7e:	4331      	orrs	r1, r6
10004a80:	d10a      	bne.n	10004a98 <__ledf2+0x74>
10004a82:	42a5      	cmp	r5, r4
10004a84:	d00e      	beq.n	10004aa4 <__ledf2+0x80>
10004a86:	2d00      	cmp	r5, #0
10004a88:	d112      	bne.n	10004ab0 <__ledf2+0x8c>
10004a8a:	433a      	orrs	r2, r7
10004a8c:	d110      	bne.n	10004ab0 <__ledf2+0x8c>
10004a8e:	465b      	mov	r3, fp
10004a90:	4259      	negs	r1, r3
10004a92:	2301      	movs	r3, #1
10004a94:	4319      	orrs	r1, r3
10004a96:	1c08      	adds	r0, r1, #0
10004a98:	bc3c      	pop	{r2, r3, r4, r5}
10004a9a:	4690      	mov	r8, r2
10004a9c:	4699      	mov	r9, r3
10004a9e:	46a2      	mov	sl, r4
10004aa0:	46ab      	mov	fp, r5
10004aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004aa4:	1c39      	adds	r1, r7, #0
10004aa6:	2002      	movs	r0, #2
10004aa8:	4311      	orrs	r1, r2
10004aaa:	d1f5      	bne.n	10004a98 <__ledf2+0x74>
10004aac:	2c00      	cmp	r4, #0
10004aae:	d0d5      	beq.n	10004a5c <__ledf2+0x38>
10004ab0:	459b      	cmp	fp, r3
10004ab2:	d1ec      	bne.n	10004a8e <__ledf2+0x6a>
10004ab4:	42ac      	cmp	r4, r5
10004ab6:	dcea      	bgt.n	10004a8e <__ledf2+0x6a>
10004ab8:	db05      	blt.n	10004ac6 <__ledf2+0xa2>
10004aba:	45bc      	cmp	ip, r7
10004abc:	d8e7      	bhi.n	10004a8e <__ledf2+0x6a>
10004abe:	d00f      	beq.n	10004ae0 <__ledf2+0xbc>
10004ac0:	2000      	movs	r0, #0
10004ac2:	45bc      	cmp	ip, r7
10004ac4:	d2e8      	bcs.n	10004a98 <__ledf2+0x74>
10004ac6:	4658      	mov	r0, fp
10004ac8:	4241      	negs	r1, r0
10004aca:	4148      	adcs	r0, r1
10004acc:	4241      	negs	r1, r0
10004ace:	2001      	movs	r0, #1
10004ad0:	4308      	orrs	r0, r1
10004ad2:	e7e1      	b.n	10004a98 <__ledf2+0x74>
10004ad4:	433a      	orrs	r2, r7
10004ad6:	d1c7      	bne.n	10004a68 <__ledf2+0x44>
10004ad8:	2000      	movs	r0, #0
10004ada:	2e00      	cmp	r6, #0
10004adc:	d1dc      	bne.n	10004a98 <__ledf2+0x74>
10004ade:	e7d6      	b.n	10004a8e <__ledf2+0x6a>
10004ae0:	45c8      	cmp	r8, r9
10004ae2:	d8d4      	bhi.n	10004a8e <__ledf2+0x6a>
10004ae4:	2000      	movs	r0, #0
10004ae6:	45c8      	cmp	r8, r9
10004ae8:	d3ed      	bcc.n	10004ac6 <__ledf2+0xa2>
10004aea:	e7d5      	b.n	10004a98 <__ledf2+0x74>
10004aec:	000007ff 	.word	0x000007ff

10004af0 <__clzdi2>:
10004af0:	b510      	push	{r4, lr}
10004af2:	2900      	cmp	r1, #0
10004af4:	d103      	bne.n	10004afe <__clzdi2+0xe>
10004af6:	f7fe fdc5 	bl	10003684 <__clzsi2>
10004afa:	3020      	adds	r0, #32
10004afc:	e002      	b.n	10004b04 <__clzdi2+0x14>
10004afe:	1c08      	adds	r0, r1, #0
10004b00:	f7fe fdc0 	bl	10003684 <__clzsi2>
10004b04:	bd10      	pop	{r4, pc}
10004b06:	46c0      	nop			; (mov r8, r8)

10004b08 <__libc_init_array>:
10004b08:	4b0e      	ldr	r3, [pc, #56]	; (10004b44 <__libc_init_array+0x3c>)
10004b0a:	b570      	push	{r4, r5, r6, lr}
10004b0c:	2500      	movs	r5, #0
10004b0e:	1c1e      	adds	r6, r3, #0
10004b10:	4c0d      	ldr	r4, [pc, #52]	; (10004b48 <__libc_init_array+0x40>)
10004b12:	1ae4      	subs	r4, r4, r3
10004b14:	10a4      	asrs	r4, r4, #2
10004b16:	42a5      	cmp	r5, r4
10004b18:	d004      	beq.n	10004b24 <__libc_init_array+0x1c>
10004b1a:	00ab      	lsls	r3, r5, #2
10004b1c:	58f3      	ldr	r3, [r6, r3]
10004b1e:	4798      	blx	r3
10004b20:	3501      	adds	r5, #1
10004b22:	e7f8      	b.n	10004b16 <__libc_init_array+0xe>
10004b24:	f7fd fb3c 	bl	100021a0 <_init>
10004b28:	4b08      	ldr	r3, [pc, #32]	; (10004b4c <__libc_init_array+0x44>)
10004b2a:	2500      	movs	r5, #0
10004b2c:	1c1e      	adds	r6, r3, #0
10004b2e:	4c08      	ldr	r4, [pc, #32]	; (10004b50 <__libc_init_array+0x48>)
10004b30:	1ae4      	subs	r4, r4, r3
10004b32:	10a4      	asrs	r4, r4, #2
10004b34:	42a5      	cmp	r5, r4
10004b36:	d004      	beq.n	10004b42 <__libc_init_array+0x3a>
10004b38:	00ab      	lsls	r3, r5, #2
10004b3a:	58f3      	ldr	r3, [r6, r3]
10004b3c:	4798      	blx	r3
10004b3e:	3501      	adds	r5, #1
10004b40:	e7f8      	b.n	10004b34 <__libc_init_array+0x2c>
10004b42:	bd70      	pop	{r4, r5, r6, pc}
10004b44:	20000670 	.word	0x20000670
10004b48:	20000670 	.word	0x20000670
10004b4c:	20000670 	.word	0x20000670
10004b50:	20000670 	.word	0x20000670
10004b54:	1000205e 	.word	0x1000205e
10004b58:	1000205e 	.word	0x1000205e
10004b5c:	10002068 	.word	0x10002068
10004b60:	10002068 	.word	0x10002068
10004b64:	10002096 	.word	0x10002096
10004b68:	10002096 	.word	0x10002096
10004b6c:	10002096 	.word	0x10002096
10004b70:	10002096 	.word	0x10002096
10004b74:	10002072 	.word	0x10002072
10004b78:	1000207e 	.word	0x1000207e
10004b7c:	1000208a 	.word	0x1000208a
10004b80:	1000208a 	.word	0x1000208a

10004b84 <TIMER_100us_INT>:
10004b84:	03150001 00000001 00010000 03300000     ..............0.
10004b94:	00010000 00000000                       ........

10004b9c <CAPTURE_C_input>:
10004b9c:	40040000 00000000                       ...@....

10004ba4 <CAPTURE_C_input_pin_config>:
	...

10004bac <CAPTURE_C_event0_config>:
10004bac:	00000102                                ....

10004bb0 <CAPTURE_C_event1_config>:
10004bb0:	00000202                                ....

10004bb4 <CAPTURE_C_config>:
10004bb4:	00011060 000000f0                       `.......

10004bbc <CAPTURE_R_input>:
10004bbc:	40040000 00000002                       ...@....

10004bc4 <CAPTURE_R_input_pin_config>:
	...

10004bcc <CAPTURE_R_event0_config>:
10004bcc:	00000102                                ....

10004bd0 <CAPTURE_R_event1_config>:
10004bd0:	00000202                                ....

10004bd4 <CAPTURE_R_config>:
10004bd4:	00011060 000000f0                       `.......

10004bdc <CAPTURE_L_input>:
10004bdc:	40040000 00000001                       ...@....

10004be4 <CAPTURE_L_input_pin_config>:
	...

10004bec <CAPTURE_L_event0_config>:
10004bec:	00000102                                ....

10004bf0 <CAPTURE_L_event1_config>:
10004bf0:	00000202                                ....

10004bf4 <CAPTURE_L_config>:
10004bf4:	00011060 000000f0                       `.......

10004bfc <CAN_NODE_0_gpio_out>:
10004bfc:	40040400 00000009                       ...@....

10004c04 <CAN_NODE_0_gpio_out_config>:
10004c04:	000000a4 00000001                       ........

10004c0c <CAN_NODE_0_gpio_in>:
10004c0c:	40040400 00000008                       ...@....

10004c14 <CAN_NODE_0_gpio_in_config>:
	...

10004c1c <CAN_NODE_0_BitTimeConfig>:
10004c1c:	02dc6c00 0007a120 00011f40              .l.. ...@...

10004c28 <CAN_NODE_0_sr>:
10004c28:	00000000                                ....

10004c2c <CAN_NODE_0_LMO_01_Config>:
10004c2c:	20000640 00000013 00000000              @.. ........

10004c38 <CAN_NODE_0>:
10004c38:	20000598 50040300 10004c1c 10004c2c     ... ...P.L..,L..
	...
10004cc4:	10004c28 10004bfc 10004c04 10004c0c     (L...K...L...L..
10004cd4:	10004c14 00010102 00000000              .L..........

10004ce0 <BUS_IO_TRIGGER_pin_list>:
10004ce0:	40040100 00000004 40040100 00000006     ...@.......@....
10004cf0:	40040100 00000005 100039e8 100039c6     ...@.....9...9..
10004d00:	100039c6 100039ba 100038ae 100038ae     .9...9...8...8..
10004d10:	100039ae 100039ba 100038ae 100039ae     .9...9...8...9..
10004d20:	100038ae 100039ba 100038b2 100038b2     .8...9...8...8..
10004d30:	100038b2 10003bc8                       .8...;..

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ12	
20000100:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	10003385 	.word	0x10003385
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
