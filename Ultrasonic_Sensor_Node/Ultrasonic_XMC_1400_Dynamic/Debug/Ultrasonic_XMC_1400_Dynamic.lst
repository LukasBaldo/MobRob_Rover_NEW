
Ultrasonic_XMC_1400_Dynamic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004438  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000144  2000000c  10005438  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  3 .data         000000e8  20000550  1000557c  00008550  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000060  20000638  000004e8  00008638  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  6 .debug_aranges 00000c30  00000000  00000000  00008638  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00014af8  00000000  00000000  00009268  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036bb  00000000  00000000  0001dd60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007f06  00000000  00000000  0002141b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000027e8  00000000  00000000  00029324  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000081d0  00000000  00000000  0002bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c50  00000000  00000000  00033cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009c0  00000000  00000000  00037930  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 0000091b  00000000  00000000  000382f0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10005438 	.word	0x10005438
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	1000557c 	.word	0x1000557c
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	20000638 	.word	0x20000638
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	10005664 	.word	0x10005664
	ldr	r2, =__ram_code_start
10001084:	20000638 	.word	0x20000638
	ldr	r3, =__ram_code_end
10001088:	20000638 	.word	0x20000638
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	20000638 	.word	0x20000638
	ldr	r2, =__bss_end
10001090:	20000694 	.word	0x20000694
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	1000517d 	.word	0x1000517d
    blx  r0
#endif

    ldr  r0, =main
10001098:	10003071 	.word	0x10003071

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f001 fb60 	bl	10002768 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f001 fbac 	bl	10002804 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f000 ff78 	bl	10001ffc <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f000 ff65 	bl	10001ffc <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	20000638 	.word	0x20000638
10001168:	2000063c 	.word	0x2000063c
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
10001188:	b580      	push	{r7, lr}
1000118a:	b082      	sub	sp, #8
1000118c:	af00      	add	r7, sp, #0
1000118e:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(eru);
}
10001190:	46bd      	mov	sp, r7
10001192:	b002      	add	sp, #8
10001194:	bd80      	pop	{r7, pc}
10001196:	46c0      	nop			; (mov r8, r8)

10001198 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001198:	b590      	push	{r4, r7, lr}
1000119a:	b085      	sub	sp, #20
1000119c:	af00      	add	r7, sp, #0
1000119e:	60f8      	str	r0, [r7, #12]
100011a0:	607a      	str	r2, [r7, #4]
100011a2:	230b      	movs	r3, #11
100011a4:	18fb      	adds	r3, r7, r3
100011a6:	1c0a      	adds	r2, r1, #0
100011a8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100011aa:	230b      	movs	r3, #11
100011ac:	18fb      	adds	r3, r7, r3
100011ae:	781b      	ldrb	r3, [r3, #0]
100011b0:	089b      	lsrs	r3, r3, #2
100011b2:	b2db      	uxtb	r3, r3
100011b4:	1c18      	adds	r0, r3, #0
100011b6:	230b      	movs	r3, #11
100011b8:	18fb      	adds	r3, r7, r3
100011ba:	781b      	ldrb	r3, [r3, #0]
100011bc:	089b      	lsrs	r3, r3, #2
100011be:	b2db      	uxtb	r3, r3
100011c0:	1c1a      	adds	r2, r3, #0
100011c2:	68fb      	ldr	r3, [r7, #12]
100011c4:	3204      	adds	r2, #4
100011c6:	0092      	lsls	r2, r2, #2
100011c8:	58d3      	ldr	r3, [r2, r3]
100011ca:	220b      	movs	r2, #11
100011cc:	18ba      	adds	r2, r7, r2
100011ce:	7812      	ldrb	r2, [r2, #0]
100011d0:	2103      	movs	r1, #3
100011d2:	400a      	ands	r2, r1
100011d4:	00d2      	lsls	r2, r2, #3
100011d6:	1c11      	adds	r1, r2, #0
100011d8:	22fc      	movs	r2, #252	; 0xfc
100011da:	408a      	lsls	r2, r1
100011dc:	43d2      	mvns	r2, r2
100011de:	401a      	ands	r2, r3
100011e0:	1c11      	adds	r1, r2, #0
100011e2:	68fb      	ldr	r3, [r7, #12]
100011e4:	1d02      	adds	r2, r0, #4
100011e6:	0092      	lsls	r2, r2, #2
100011e8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011ea:	68fb      	ldr	r3, [r7, #12]
100011ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011ee:	220b      	movs	r2, #11
100011f0:	18ba      	adds	r2, r7, r2
100011f2:	7812      	ldrb	r2, [r2, #0]
100011f4:	0052      	lsls	r2, r2, #1
100011f6:	1c11      	adds	r1, r2, #0
100011f8:	2203      	movs	r2, #3
100011fa:	408a      	lsls	r2, r1
100011fc:	43d2      	mvns	r2, r2
100011fe:	401a      	ands	r2, r3
10001200:	68fb      	ldr	r3, [r7, #12]
10001202:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001204:	230b      	movs	r3, #11
10001206:	18fb      	adds	r3, r7, r3
10001208:	781b      	ldrb	r3, [r3, #0]
1000120a:	08db      	lsrs	r3, r3, #3
1000120c:	b2db      	uxtb	r3, r3
1000120e:	1c18      	adds	r0, r3, #0
10001210:	230b      	movs	r3, #11
10001212:	18fb      	adds	r3, r7, r3
10001214:	781b      	ldrb	r3, [r3, #0]
10001216:	08db      	lsrs	r3, r3, #3
10001218:	b2db      	uxtb	r3, r3
1000121a:	1c1a      	adds	r2, r3, #0
1000121c:	68fb      	ldr	r3, [r7, #12]
1000121e:	3210      	adds	r2, #16
10001220:	0092      	lsls	r2, r2, #2
10001222:	58d3      	ldr	r3, [r2, r3]
10001224:	220b      	movs	r2, #11
10001226:	18ba      	adds	r2, r7, r2
10001228:	7812      	ldrb	r2, [r2, #0]
1000122a:	2107      	movs	r1, #7
1000122c:	400a      	ands	r2, r1
1000122e:	0092      	lsls	r2, r2, #2
10001230:	1c11      	adds	r1, r2, #0
10001232:	2204      	movs	r2, #4
10001234:	408a      	lsls	r2, r1
10001236:	43d2      	mvns	r2, r2
10001238:	401a      	ands	r2, r3
1000123a:	1c11      	adds	r1, r2, #0
1000123c:	68fb      	ldr	r3, [r7, #12]
1000123e:	1c02      	adds	r2, r0, #0
10001240:	3210      	adds	r2, #16
10001242:	0092      	lsls	r2, r2, #2
10001244:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001246:	230b      	movs	r3, #11
10001248:	18fb      	adds	r3, r7, r3
1000124a:	781b      	ldrb	r3, [r3, #0]
1000124c:	08db      	lsrs	r3, r3, #3
1000124e:	b2db      	uxtb	r3, r3
10001250:	1c18      	adds	r0, r3, #0
10001252:	230b      	movs	r3, #11
10001254:	18fb      	adds	r3, r7, r3
10001256:	781b      	ldrb	r3, [r3, #0]
10001258:	08db      	lsrs	r3, r3, #3
1000125a:	b2db      	uxtb	r3, r3
1000125c:	1c1a      	adds	r2, r3, #0
1000125e:	68fb      	ldr	r3, [r7, #12]
10001260:	3210      	adds	r2, #16
10001262:	0092      	lsls	r2, r2, #2
10001264:	58d2      	ldr	r2, [r2, r3]
10001266:	687b      	ldr	r3, [r7, #4]
10001268:	785b      	ldrb	r3, [r3, #1]
1000126a:	1c1c      	adds	r4, r3, #0
1000126c:	230b      	movs	r3, #11
1000126e:	18fb      	adds	r3, r7, r3
10001270:	781b      	ldrb	r3, [r3, #0]
10001272:	2107      	movs	r1, #7
10001274:	400b      	ands	r3, r1
10001276:	009b      	lsls	r3, r3, #2
10001278:	409c      	lsls	r4, r3
1000127a:	1c23      	adds	r3, r4, #0
1000127c:	431a      	orrs	r2, r3
1000127e:	1c11      	adds	r1, r2, #0
10001280:	68fb      	ldr	r3, [r7, #12]
10001282:	1c02      	adds	r2, r0, #0
10001284:	3210      	adds	r2, #16
10001286:	0092      	lsls	r2, r2, #2
10001288:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000128a:	68fb      	ldr	r3, [r7, #12]
1000128c:	4a20      	ldr	r2, [pc, #128]	; (10001310 <XMC_GPIO_Init+0x178>)
1000128e:	4293      	cmp	r3, r2
10001290:	d10b      	bne.n	100012aa <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001292:	68fb      	ldr	r3, [r7, #12]
10001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001296:	220b      	movs	r2, #11
10001298:	18ba      	adds	r2, r7, r2
1000129a:	7812      	ldrb	r2, [r2, #0]
1000129c:	2101      	movs	r1, #1
1000129e:	4091      	lsls	r1, r2
100012a0:	1c0a      	adds	r2, r1, #0
100012a2:	43d2      	mvns	r2, r2
100012a4:	401a      	ands	r2, r3
100012a6:	68fb      	ldr	r3, [r7, #12]
100012a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
100012aa:	687b      	ldr	r3, [r7, #4]
100012ac:	781b      	ldrb	r3, [r3, #0]
100012ae:	b2db      	uxtb	r3, r3
100012b0:	b25b      	sxtb	r3, r3
100012b2:	2b00      	cmp	r3, #0
100012b4:	da07      	bge.n	100012c6 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
100012b6:	687b      	ldr	r3, [r7, #4]
100012b8:	685a      	ldr	r2, [r3, #4]
100012ba:	230b      	movs	r3, #11
100012bc:	18fb      	adds	r3, r7, r3
100012be:	781b      	ldrb	r3, [r3, #0]
100012c0:	409a      	lsls	r2, r3
100012c2:	68fb      	ldr	r3, [r7, #12]
100012c4:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012c6:	230b      	movs	r3, #11
100012c8:	18fb      	adds	r3, r7, r3
100012ca:	781b      	ldrb	r3, [r3, #0]
100012cc:	089b      	lsrs	r3, r3, #2
100012ce:	b2db      	uxtb	r3, r3
100012d0:	1c18      	adds	r0, r3, #0
100012d2:	230b      	movs	r3, #11
100012d4:	18fb      	adds	r3, r7, r3
100012d6:	781b      	ldrb	r3, [r3, #0]
100012d8:	089b      	lsrs	r3, r3, #2
100012da:	b2db      	uxtb	r3, r3
100012dc:	1c1a      	adds	r2, r3, #0
100012de:	68fb      	ldr	r3, [r7, #12]
100012e0:	3204      	adds	r2, #4
100012e2:	0092      	lsls	r2, r2, #2
100012e4:	58d2      	ldr	r2, [r2, r3]
100012e6:	687b      	ldr	r3, [r7, #4]
100012e8:	781b      	ldrb	r3, [r3, #0]
100012ea:	1c1c      	adds	r4, r3, #0
100012ec:	230b      	movs	r3, #11
100012ee:	18fb      	adds	r3, r7, r3
100012f0:	781b      	ldrb	r3, [r3, #0]
100012f2:	2103      	movs	r1, #3
100012f4:	400b      	ands	r3, r1
100012f6:	00db      	lsls	r3, r3, #3
100012f8:	409c      	lsls	r4, r3
100012fa:	1c23      	adds	r3, r4, #0
100012fc:	431a      	orrs	r2, r3
100012fe:	1c11      	adds	r1, r2, #0
10001300:	68fb      	ldr	r3, [r7, #12]
10001302:	1d02      	adds	r2, r0, #4
10001304:	0092      	lsls	r2, r2, #2
10001306:	50d1      	str	r1, [r2, r3]
}
10001308:	46bd      	mov	sp, r7
1000130a:	b005      	add	sp, #20
1000130c:	bd90      	pop	{r4, r7, pc}
1000130e:	46c0      	nop			; (mov r8, r8)
10001310:	40040200 	.word	0x40040200

10001314 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001314:	b580      	push	{r7, lr}
10001316:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001318:	4b02      	ldr	r3, [pc, #8]	; (10001324 <XMC_SCU_LockProtectedBits+0x10>)
1000131a:	22c3      	movs	r2, #195	; 0xc3
1000131c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000131e:	46bd      	mov	sp, r7
10001320:	bd80      	pop	{r7, pc}
10001322:	46c0      	nop			; (mov r8, r8)
10001324:	40010000 	.word	0x40010000

10001328 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001328:	b580      	push	{r7, lr}
1000132a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000132c:	4b05      	ldr	r3, [pc, #20]	; (10001344 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000132e:	22c0      	movs	r2, #192	; 0xc0
10001330:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001332:	46c0      	nop			; (mov r8, r8)
10001334:	4b03      	ldr	r3, [pc, #12]	; (10001344 <XMC_SCU_UnlockProtectedBits+0x1c>)
10001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001338:	2204      	movs	r2, #4
1000133a:	4013      	ands	r3, r2
1000133c:	d1fa      	bne.n	10001334 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
1000133e:	46bd      	mov	sp, r7
10001340:	bd80      	pop	{r7, pc}
10001342:	46c0      	nop			; (mov r8, r8)
10001344:	40010000 	.word	0x40010000

10001348 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10001348:	b580      	push	{r7, lr}
1000134a:	b086      	sub	sp, #24
1000134c:	af00      	add	r7, sp, #0
1000134e:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10001350:	f7ff ffea 	bl	10001328 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10001354:	687b      	ldr	r3, [r7, #4]
10001356:	799b      	ldrb	r3, [r3, #6]
10001358:	2b30      	cmp	r3, #48	; 0x30
1000135a:	d053      	beq.n	10001404 <XMC_SCU_CLOCK_Init+0xbc>
  {
    if (OSCHP_GetFrequency() > 20000000U)
1000135c:	f7ff ff0c 	bl	10001178 <OSCHP_GetFrequency>
10001360:	1e02      	subs	r2, r0, #0
10001362:	4b49      	ldr	r3, [pc, #292]	; (10001488 <XMC_SCU_CLOCK_Init+0x140>)
10001364:	429a      	cmp	r2, r3
10001366:	d909      	bls.n	1000137c <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10001368:	4a48      	ldr	r2, [pc, #288]	; (1000148c <XMC_SCU_CLOCK_Init+0x144>)
1000136a:	4948      	ldr	r1, [pc, #288]	; (1000148c <XMC_SCU_CLOCK_Init+0x144>)
1000136c:	2390      	movs	r3, #144	; 0x90
1000136e:	5acb      	ldrh	r3, [r1, r3]
10001370:	b29b      	uxth	r3, r3
10001372:	2140      	movs	r1, #64	; 0x40
10001374:	430b      	orrs	r3, r1
10001376:	b299      	uxth	r1, r3
10001378:	2390      	movs	r3, #144	; 0x90
1000137a:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
1000137c:	4a43      	ldr	r2, [pc, #268]	; (1000148c <XMC_SCU_CLOCK_Init+0x144>)
1000137e:	4943      	ldr	r1, [pc, #268]	; (1000148c <XMC_SCU_CLOCK_Init+0x144>)
10001380:	2390      	movs	r3, #144	; 0x90
10001382:	5acb      	ldrh	r3, [r1, r3]
10001384:	b29b      	uxth	r3, r3
10001386:	b29b      	uxth	r3, r3
10001388:	1c19      	adds	r1, r3, #0
1000138a:	2332      	movs	r3, #50	; 0x32
1000138c:	4399      	bics	r1, r3
1000138e:	1c0b      	adds	r3, r1, #0
10001390:	b299      	uxth	r1, r3
                               config->oschp_mode;
10001392:	687b      	ldr	r3, [r7, #4]
10001394:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001396:	b29b      	uxth	r3, r3
10001398:	430b      	orrs	r3, r1
1000139a:	b29b      	uxth	r3, r3
1000139c:	b299      	uxth	r1, r3
1000139e:	2390      	movs	r3, #144	; 0x90
100013a0:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
100013a2:	4b3b      	ldr	r3, [pc, #236]	; (10001490 <XMC_SCU_CLOCK_Init+0x148>)
100013a4:	2202      	movs	r2, #2
100013a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog,
         keeping in between at least one DCO2 cycle */

      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
100013a8:	4b3a      	ldr	r3, [pc, #232]	; (10001494 <XMC_SCU_CLOCK_Init+0x14c>)
100013aa:	4a3a      	ldr	r2, [pc, #232]	; (10001494 <XMC_SCU_CLOCK_Init+0x14c>)
100013ac:	6952      	ldr	r2, [r2, #20]
100013ae:	493a      	ldr	r1, [pc, #232]	; (10001498 <XMC_SCU_CLOCK_Init+0x150>)
100013b0:	400a      	ands	r2, r1
100013b2:	615a      	str	r2, [r3, #20]
100013b4:	4b39      	ldr	r3, [pc, #228]	; (1000149c <XMC_SCU_CLOCK_Init+0x154>)
100013b6:	617b      	str	r3, [r7, #20]
100013b8:	e000      	b.n	100013bc <XMC_SCU_CLOCK_Init+0x74>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013ba:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013bc:	697b      	ldr	r3, [r7, #20]
100013be:	3b01      	subs	r3, #1
100013c0:	617b      	str	r3, [r7, #20]
100013c2:	697b      	ldr	r3, [r7, #20]
100013c4:	2b00      	cmp	r3, #0
100013c6:	d1f8      	bne.n	100013ba <XMC_SCU_CLOCK_Init+0x72>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);

      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
100013c8:	4b32      	ldr	r3, [pc, #200]	; (10001494 <XMC_SCU_CLOCK_Init+0x14c>)
100013ca:	4a32      	ldr	r2, [pc, #200]	; (10001494 <XMC_SCU_CLOCK_Init+0x14c>)
100013cc:	6952      	ldr	r2, [r2, #20]
100013ce:	21c0      	movs	r1, #192	; 0xc0
100013d0:	0489      	lsls	r1, r1, #18
100013d2:	430a      	orrs	r2, r1
100013d4:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
100013d6:	46c0      	nop			; (mov r8, r8)
100013d8:	4b2e      	ldr	r3, [pc, #184]	; (10001494 <XMC_SCU_CLOCK_Init+0x14c>)
100013da:	695a      	ldr	r2, [r3, #20]
100013dc:	2380      	movs	r3, #128	; 0x80
100013de:	045b      	lsls	r3, r3, #17
100013e0:	4013      	ands	r3, r2
100013e2:	d1f9      	bne.n	100013d8 <XMC_SCU_CLOCK_Init+0x90>
100013e4:	4b2e      	ldr	r3, [pc, #184]	; (100014a0 <XMC_SCU_CLOCK_Init+0x158>)
100013e6:	613b      	str	r3, [r7, #16]
100013e8:	e000      	b.n	100013ec <XMC_SCU_CLOCK_Init+0xa4>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100013ea:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100013ec:	693b      	ldr	r3, [r7, #16]
100013ee:	3b01      	subs	r3, #1
100013f0:	613b      	str	r3, [r7, #16]
100013f2:	693b      	ldr	r3, [r7, #16]
100013f4:	2b00      	cmp	r3, #0
100013f6:	d1f8      	bne.n	100013ea <XMC_SCU_CLOCK_Init+0xa2>
      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);

    }
    while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
100013f8:	4b25      	ldr	r3, [pc, #148]	; (10001490 <XMC_SCU_CLOCK_Init+0x148>)
100013fa:	6a1b      	ldr	r3, [r3, #32]
100013fc:	2202      	movs	r2, #2
100013fe:	4013      	ands	r3, r2
10001400:	d1cf      	bne.n	100013a2 <XMC_SCU_CLOCK_Init+0x5a>
10001402:	e009      	b.n	10001418 <XMC_SCU_CLOCK_Init+0xd0>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
10001404:	4a21      	ldr	r2, [pc, #132]	; (1000148c <XMC_SCU_CLOCK_Init+0x144>)
10001406:	4921      	ldr	r1, [pc, #132]	; (1000148c <XMC_SCU_CLOCK_Init+0x144>)
10001408:	2390      	movs	r3, #144	; 0x90
1000140a:	5acb      	ldrh	r3, [r1, r3]
1000140c:	b29b      	uxth	r3, r3
1000140e:	2130      	movs	r1, #48	; 0x30
10001410:	430b      	orrs	r3, r1
10001412:	b299      	uxth	r1, r3
10001414:	2390      	movs	r3, #144	; 0x90
10001416:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
10001418:	4a1c      	ldr	r2, [pc, #112]	; (1000148c <XMC_SCU_CLOCK_Init+0x144>)
1000141a:	687b      	ldr	r3, [r7, #4]
1000141c:	79db      	ldrb	r3, [r3, #7]
1000141e:	b299      	uxth	r1, r3
10001420:	238c      	movs	r3, #140	; 0x8c
10001422:	52d1      	strh	r1, [r2, r3]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
10001424:	687b      	ldr	r3, [r7, #4]
10001426:	79db      	ldrb	r3, [r3, #7]
10001428:	2b00      	cmp	r3, #0
1000142a:	d109      	bne.n	10001440 <XMC_SCU_CLOCK_Init+0xf8>
1000142c:	4b1d      	ldr	r3, [pc, #116]	; (100014a4 <XMC_SCU_CLOCK_Init+0x15c>)
1000142e:	60fb      	str	r3, [r7, #12]
10001430:	e000      	b.n	10001434 <XMC_SCU_CLOCK_Init+0xec>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001432:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001434:	68fb      	ldr	r3, [r7, #12]
10001436:	3b01      	subs	r3, #1
10001438:	60fb      	str	r3, [r7, #12]
1000143a:	68fb      	ldr	r3, [r7, #12]
1000143c:	2b00      	cmp	r3, #0
1000143e:	d1f8      	bne.n	10001432 <XMC_SCU_CLOCK_Init+0xea>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
10001440:	4b14      	ldr	r3, [pc, #80]	; (10001494 <XMC_SCU_CLOCK_Init+0x14c>)
10001442:	4a14      	ldr	r2, [pc, #80]	; (10001494 <XMC_SCU_CLOCK_Init+0x14c>)
10001444:	69d2      	ldr	r2, [r2, #28]
10001446:	4918      	ldr	r1, [pc, #96]	; (100014a8 <XMC_SCU_CLOCK_Init+0x160>)
10001448:	400a      	ands	r2, r1
                    config->dclk_src;
1000144a:	6879      	ldr	r1, [r7, #4]
1000144c:	8889      	ldrh	r1, [r1, #4]
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
1000144e:	430a      	orrs	r2, r1
10001450:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001452:	4a10      	ldr	r2, [pc, #64]	; (10001494 <XMC_SCU_CLOCK_Init+0x14c>)
10001454:	4b0f      	ldr	r3, [pc, #60]	; (10001494 <XMC_SCU_CLOCK_Init+0x14c>)
10001456:	681b      	ldr	r3, [r3, #0]
10001458:	4914      	ldr	r1, [pc, #80]	; (100014ac <XMC_SCU_CLOCK_Init+0x164>)
1000145a:	4019      	ands	r1, r3
                   config->rtc_src |
1000145c:	687b      	ldr	r3, [r7, #4]
1000145e:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001460:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
10001462:	687b      	ldr	r3, [r7, #4]
10001464:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001466:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001468:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
1000146a:	f7ff ff53 	bl	10001314 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000146e:	687b      	ldr	r3, [r7, #4]
10001470:	789b      	ldrb	r3, [r3, #2]
10001472:	1c1a      	adds	r2, r3, #0
10001474:	687b      	ldr	r3, [r7, #4]
10001476:	881b      	ldrh	r3, [r3, #0]
10001478:	1c10      	adds	r0, r2, #0
1000147a:	1c19      	adds	r1, r3, #0
1000147c:	f000 f832 	bl	100014e4 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001480:	46bd      	mov	sp, r7
10001482:	b006      	add	sp, #24
10001484:	bd80      	pop	{r7, pc}
10001486:	46c0      	nop			; (mov r8, r8)
10001488:	01312d00 	.word	0x01312d00
1000148c:	40011000 	.word	0x40011000
10001490:	40010038 	.word	0x40010038
10001494:	40010300 	.word	0x40010300
10001498:	fdffffff 	.word	0xfdffffff
1000149c:	0000021a 	.word	0x0000021a
100014a0:	00000a7d 	.word	0x00000a7d
100014a4:	00632ea0 	.word	0x00632ea0
100014a8:	fffffdff 	.word	0xfffffdff
100014ac:	fff0ffff 	.word	0xfff0ffff

100014b0 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
100014b0:	b580      	push	{r7, lr}
100014b2:	b082      	sub	sp, #8
100014b4:	af00      	add	r7, sp, #0
100014b6:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
100014b8:	f7ff ff36 	bl	10001328 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
100014bc:	4b08      	ldr	r3, [pc, #32]	; (100014e0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014be:	4a08      	ldr	r2, [pc, #32]	; (100014e0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014c0:	6911      	ldr	r1, [r2, #16]
100014c2:	687a      	ldr	r2, [r7, #4]
100014c4:	430a      	orrs	r2, r1
100014c6:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100014c8:	46c0      	nop			; (mov r8, r8)
100014ca:	4b05      	ldr	r3, [pc, #20]	; (100014e0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014cc:	681a      	ldr	r2, [r3, #0]
100014ce:	2380      	movs	r3, #128	; 0x80
100014d0:	05db      	lsls	r3, r3, #23
100014d2:	4013      	ands	r3, r2
100014d4:	d1f9      	bne.n	100014ca <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
100014d6:	f7ff ff1d 	bl	10001314 <XMC_SCU_LockProtectedBits>
}
100014da:	46bd      	mov	sp, r7
100014dc:	b002      	add	sp, #8
100014de:	bd80      	pop	{r7, pc}
100014e0:	40010300 	.word	0x40010300

100014e4 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
100014e4:	b580      	push	{r7, lr}
100014e6:	b084      	sub	sp, #16
100014e8:	af00      	add	r7, sp, #0
100014ea:	6078      	str	r0, [r7, #4]
100014ec:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
100014ee:	f7ff ff1b 	bl	10001328 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100014f2:	4b27      	ldr	r3, [pc, #156]	; (10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014f4:	681a      	ldr	r2, [r3, #0]
100014f6:	23ff      	movs	r3, #255	; 0xff
100014f8:	021b      	lsls	r3, r3, #8
100014fa:	4013      	ands	r3, r2
100014fc:	0a1b      	lsrs	r3, r3, #8
100014fe:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001500:	4b23      	ldr	r3, [pc, #140]	; (10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001502:	4a23      	ldr	r2, [pc, #140]	; (10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001504:	69d2      	ldr	r2, [r2, #28]
10001506:	2103      	movs	r1, #3
10001508:	438a      	bics	r2, r1
1000150a:	1c11      	adds	r1, r2, #0
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
1000150c:	683a      	ldr	r2, [r7, #0]
1000150e:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001510:	430a      	orrs	r2, r1
10001512:	61da      	str	r2, [r3, #28]
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001514:	4b1e      	ldr	r3, [pc, #120]	; (10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001516:	4a1e      	ldr	r2, [pc, #120]	; (10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001518:	6812      	ldr	r2, [r2, #0]
1000151a:	491e      	ldr	r1, [pc, #120]	; (10001594 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
1000151c:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
1000151e:	683a      	ldr	r2, [r7, #0]
10001520:	20ff      	movs	r0, #255	; 0xff
10001522:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001524:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10001526:	491c      	ldr	r1, [pc, #112]	; (10001598 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
10001528:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000152a:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000152c:	46c0      	nop			; (mov r8, r8)
1000152e:	4b18      	ldr	r3, [pc, #96]	; (10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001530:	681a      	ldr	r2, [r3, #0]
10001532:	2380      	movs	r3, #128	; 0x80
10001534:	05db      	lsls	r3, r3, #23
10001536:	4013      	ands	r3, r2
10001538:	d1f9      	bne.n	1000152e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
1000153a:	68fa      	ldr	r2, [r7, #12]
1000153c:	687b      	ldr	r3, [r7, #4]
1000153e:	429a      	cmp	r2, r3
10001540:	d806      	bhi.n	10001550 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10001542:	68fa      	ldr	r2, [r7, #12]
10001544:	687b      	ldr	r3, [r7, #4]
10001546:	1c10      	adds	r0, r2, #0
10001548:	1c19      	adds	r1, r3, #0
1000154a:	f000 f853 	bl	100015f4 <XMC_SCU_CLOCK_lFrequencyDownScaling>
1000154e:	e005      	b.n	1000155c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
10001550:	68fa      	ldr	r2, [r7, #12]
10001552:	687b      	ldr	r3, [r7, #4]
10001554:	1c10      	adds	r0, r2, #0
10001556:	1c19      	adds	r1, r3, #0
10001558:	f000 f822 	bl	100015a0 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000155c:	4b0c      	ldr	r3, [pc, #48]	; (10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000155e:	4a0c      	ldr	r2, [pc, #48]	; (10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001560:	6812      	ldr	r2, [r2, #0]
10001562:	490e      	ldr	r1, [pc, #56]	; (1000159c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
10001564:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001566:	687a      	ldr	r2, [r7, #4]
10001568:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000156a:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
1000156c:	490a      	ldr	r1, [pc, #40]	; (10001598 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
1000156e:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001570:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001572:	46c0      	nop			; (mov r8, r8)
10001574:	4b06      	ldr	r3, [pc, #24]	; (10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001576:	681a      	ldr	r2, [r3, #0]
10001578:	2380      	movs	r3, #128	; 0x80
1000157a:	05db      	lsls	r3, r3, #23
1000157c:	4013      	ands	r3, r2
1000157e:	d1f9      	bne.n	10001574 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
10001580:	f7ff fec8 	bl	10001314 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10001584:	f7ff fd94 	bl	100010b0 <SystemCoreClockUpdate>

}
10001588:	46bd      	mov	sp, r7
1000158a:	b004      	add	sp, #16
1000158c:	bd80      	pop	{r7, pc}
1000158e:	46c0      	nop			; (mov r8, r8)
10001590:	40010300 	.word	0x40010300
10001594:	c00fff00 	.word	0xc00fff00
10001598:	3ff00000 	.word	0x3ff00000
1000159c:	c00f00ff 	.word	0xc00f00ff

100015a0 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100015a0:	b580      	push	{r7, lr}
100015a2:	b082      	sub	sp, #8
100015a4:	af00      	add	r7, sp, #0
100015a6:	6078      	str	r0, [r7, #4]
100015a8:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
100015aa:	e014      	b.n	100015d6 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
100015ac:	687b      	ldr	r3, [r7, #4]
100015ae:	089b      	lsrs	r3, r3, #2
100015b0:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015b2:	4b0d      	ldr	r3, [pc, #52]	; (100015e8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015b4:	4a0c      	ldr	r2, [pc, #48]	; (100015e8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015b6:	6812      	ldr	r2, [r2, #0]
100015b8:	490c      	ldr	r1, [pc, #48]	; (100015ec <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
100015ba:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015bc:	687a      	ldr	r2, [r7, #4]
100015be:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015c0:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015c2:	490b      	ldr	r1, [pc, #44]	; (100015f0 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
100015c4:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015c6:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015c8:	46c0      	nop			; (mov r8, r8)
100015ca:	4b07      	ldr	r3, [pc, #28]	; (100015e8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015cc:	681a      	ldr	r2, [r3, #0]
100015ce:	2380      	movs	r3, #128	; 0x80
100015d0:	05db      	lsls	r3, r3, #23
100015d2:	4013      	ands	r3, r2
100015d4:	d1f9      	bne.n	100015ca <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100015d6:	683b      	ldr	r3, [r7, #0]
100015d8:	009a      	lsls	r2, r3, #2
100015da:	687b      	ldr	r3, [r7, #4]
100015dc:	429a      	cmp	r2, r3
100015de:	d3e5      	bcc.n	100015ac <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
100015e0:	46bd      	mov	sp, r7
100015e2:	b002      	add	sp, #8
100015e4:	bd80      	pop	{r7, pc}
100015e6:	46c0      	nop			; (mov r8, r8)
100015e8:	40010300 	.word	0x40010300
100015ec:	c00f00ff 	.word	0xc00f00ff
100015f0:	3ff00000 	.word	0x3ff00000

100015f4 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100015f4:	b580      	push	{r7, lr}
100015f6:	b082      	sub	sp, #8
100015f8:	af00      	add	r7, sp, #0
100015fa:	6078      	str	r0, [r7, #4]
100015fc:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
100015fe:	e019      	b.n	10001634 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
10001600:	687b      	ldr	r3, [r7, #4]
10001602:	2b00      	cmp	r3, #0
10001604:	d101      	bne.n	1000160a <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
10001606:	2301      	movs	r3, #1
10001608:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
1000160a:	687b      	ldr	r3, [r7, #4]
1000160c:	009b      	lsls	r3, r3, #2
1000160e:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001610:	4b0c      	ldr	r3, [pc, #48]	; (10001644 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001612:	4a0c      	ldr	r2, [pc, #48]	; (10001644 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001614:	6812      	ldr	r2, [r2, #0]
10001616:	490c      	ldr	r1, [pc, #48]	; (10001648 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
10001618:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000161a:	687a      	ldr	r2, [r7, #4]
1000161c:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000161e:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001620:	490a      	ldr	r1, [pc, #40]	; (1000164c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10001622:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001624:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001626:	46c0      	nop			; (mov r8, r8)
10001628:	4b06      	ldr	r3, [pc, #24]	; (10001644 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000162a:	681a      	ldr	r2, [r3, #0]
1000162c:	2380      	movs	r3, #128	; 0x80
1000162e:	05db      	lsls	r3, r3, #23
10001630:	4013      	ands	r3, r2
10001632:	d1f9      	bne.n	10001628 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001634:	687b      	ldr	r3, [r7, #4]
10001636:	009a      	lsls	r2, r3, #2
10001638:	683b      	ldr	r3, [r7, #0]
1000163a:	429a      	cmp	r2, r3
1000163c:	d3e0      	bcc.n	10001600 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
1000163e:	46bd      	mov	sp, r7
10001640:	b002      	add	sp, #8
10001642:	bd80      	pop	{r7, pc}
10001644:	40010300 	.word	0x40010300
10001648:	c00f00ff 	.word	0xc00f00ff
1000164c:	3ff00000 	.word	0x3ff00000

10001650 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
10001650:	b580      	push	{r7, lr}
10001652:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10001654:	4b02      	ldr	r3, [pc, #8]	; (10001660 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
10001656:	681b      	ldr	r3, [r3, #0]
}
10001658:	1c18      	adds	r0, r3, #0
1000165a:	46bd      	mov	sp, r7
1000165c:	bd80      	pop	{r7, pc}
1000165e:	46c0      	nop			; (mov r8, r8)
10001660:	20003ffc 	.word	0x20003ffc

10001664 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
10001664:	b580      	push	{r7, lr}
10001666:	b082      	sub	sp, #8
10001668:	af00      	add	r7, sp, #0
1000166a:	1c02      	adds	r2, r0, #0
1000166c:	1dfb      	adds	r3, r7, #7
1000166e:	701a      	strb	r2, [r3, #0]
10001670:	1d3b      	adds	r3, r7, #4
10001672:	1c0a      	adds	r2, r1, #0
10001674:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
10001676:	1d3b      	adds	r3, r7, #4
10001678:	1d3a      	adds	r2, r7, #4
1000167a:	8812      	ldrh	r2, [r2, #0]
1000167c:	2103      	movs	r1, #3
1000167e:	400a      	ands	r2, r1
10001680:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10001682:	1dfb      	adds	r3, r7, #7
10001684:	781b      	ldrb	r3, [r3, #0]
10001686:	2b0f      	cmp	r3, #15
10001688:	d813      	bhi.n	100016b2 <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
1000168a:	4b18      	ldr	r3, [pc, #96]	; (100016ec <XMC_SCU_SetInterruptControl+0x88>)
1000168c:	4a17      	ldr	r2, [pc, #92]	; (100016ec <XMC_SCU_SetInterruptControl+0x88>)
1000168e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
10001690:	1df9      	adds	r1, r7, #7
10001692:	7809      	ldrb	r1, [r1, #0]
10001694:	0049      	lsls	r1, r1, #1
10001696:	1c08      	adds	r0, r1, #0
10001698:	2103      	movs	r1, #3
1000169a:	4081      	lsls	r1, r0
1000169c:	43c9      	mvns	r1, r1
1000169e:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
100016a0:	1d39      	adds	r1, r7, #4
100016a2:	8809      	ldrh	r1, [r1, #0]
100016a4:	1df8      	adds	r0, r7, #7
100016a6:	7800      	ldrb	r0, [r0, #0]
100016a8:	0040      	lsls	r0, r0, #1
100016aa:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016ac:	430a      	orrs	r2, r1
100016ae:	66da      	str	r2, [r3, #108]	; 0x6c
100016b0:	e018      	b.n	100016e4 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
100016b2:	1dfb      	adds	r3, r7, #7
100016b4:	1dfa      	adds	r2, r7, #7
100016b6:	7812      	ldrb	r2, [r2, #0]
100016b8:	210f      	movs	r1, #15
100016ba:	400a      	ands	r2, r1
100016bc:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016be:	4b0b      	ldr	r3, [pc, #44]	; (100016ec <XMC_SCU_SetInterruptControl+0x88>)
100016c0:	4a0a      	ldr	r2, [pc, #40]	; (100016ec <XMC_SCU_SetInterruptControl+0x88>)
100016c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
100016c4:	1df9      	adds	r1, r7, #7
100016c6:	7809      	ldrb	r1, [r1, #0]
100016c8:	0049      	lsls	r1, r1, #1
100016ca:	1c08      	adds	r0, r1, #0
100016cc:	2103      	movs	r1, #3
100016ce:	4081      	lsls	r1, r0
100016d0:	43c9      	mvns	r1, r1
100016d2:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
100016d4:	1d39      	adds	r1, r7, #4
100016d6:	8809      	ldrh	r1, [r1, #0]
100016d8:	1df8      	adds	r0, r7, #7
100016da:	7800      	ldrb	r0, [r0, #0]
100016dc:	0040      	lsls	r0, r0, #1
100016de:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016e0:	430a      	orrs	r2, r1
100016e2:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
100016e4:	46bd      	mov	sp, r7
100016e6:	b002      	add	sp, #8
100016e8:	bd80      	pop	{r7, pc}
100016ea:	46c0      	nop			; (mov r8, r8)
100016ec:	40010000 	.word	0x40010000

100016f0 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
100016f0:	b580      	push	{r7, lr}
100016f2:	b082      	sub	sp, #8
100016f4:	af00      	add	r7, sp, #0
100016f6:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
100016f8:	687a      	ldr	r2, [r7, #4]
100016fa:	23e2      	movs	r3, #226	; 0xe2
100016fc:	005b      	lsls	r3, r3, #1
100016fe:	58d2      	ldr	r2, [r2, r3]
10001700:	23c0      	movs	r3, #192	; 0xc0
10001702:	009b      	lsls	r3, r3, #2
10001704:	4013      	ands	r3, r2
10001706:	425a      	negs	r2, r3
10001708:	4153      	adcs	r3, r2
1000170a:	b2db      	uxtb	r3, r3
}
1000170c:	1c18      	adds	r0, r3, #0
1000170e:	46bd      	mov	sp, r7
10001710:	b002      	add	sp, #8
10001712:	bd80      	pop	{r7, pc}

10001714 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
10001714:	b590      	push	{r4, r7, lr}
10001716:	b083      	sub	sp, #12
10001718:	af00      	add	r7, sp, #0
1000171a:	6078      	str	r0, [r7, #4]
1000171c:	1c0c      	adds	r4, r1, #0
1000171e:	1c10      	adds	r0, r2, #0
10001720:	1c19      	adds	r1, r3, #0
10001722:	1cfb      	adds	r3, r7, #3
10001724:	1c22      	adds	r2, r4, #0
10001726:	701a      	strb	r2, [r3, #0]
10001728:	1cbb      	adds	r3, r7, #2
1000172a:	1c02      	adds	r2, r0, #0
1000172c:	701a      	strb	r2, [r3, #0]
1000172e:	1c7b      	adds	r3, r7, #1
10001730:	1c0a      	adds	r2, r1, #0
10001732:	701a      	strb	r2, [r3, #0]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001734:	1cfb      	adds	r3, r7, #3
10001736:	781a      	ldrb	r2, [r3, #0]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10001738:	1cbb      	adds	r3, r7, #2
1000173a:	781b      	ldrb	r3, [r3, #0]
1000173c:	0419      	lsls	r1, r3, #16
1000173e:	23ff      	movs	r3, #255	; 0xff
10001740:	041b      	lsls	r3, r3, #16
10001742:	400b      	ands	r3, r1
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001744:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
10001746:	1c7b      	adds	r3, r7, #1
10001748:	781b      	ldrb	r3, [r3, #0]
1000174a:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
1000174c:	431a      	orrs	r2, r3
1000174e:	1c11      	adds	r1, r2, #0
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001750:	687a      	ldr	r2, [r7, #4]
10001752:	23e2      	movs	r3, #226	; 0xe2
10001754:	005b      	lsls	r3, r3, #1
10001756:	50d1      	str	r1, [r2, r3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
10001758:	46bd      	mov	sp, r7
1000175a:	b003      	add	sp, #12
1000175c:	bd90      	pop	{r4, r7, pc}
1000175e:	46c0      	nop			; (mov r8, r8)

10001760 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10001760:	b580      	push	{r7, lr}
10001762:	b082      	sub	sp, #8
10001764:	af00      	add	r7, sp, #0
10001766:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
10001768:	687b      	ldr	r3, [r7, #4]
1000176a:	681b      	ldr	r3, [r3, #0]
1000176c:	2240      	movs	r2, #64	; 0x40
1000176e:	431a      	orrs	r2, r3
10001770:	687b      	ldr	r3, [r7, #4]
10001772:	601a      	str	r2, [r3, #0]
}
10001774:	46bd      	mov	sp, r7
10001776:	b002      	add	sp, #8
10001778:	bd80      	pop	{r7, pc}
1000177a:	46c0      	nop			; (mov r8, r8)

1000177c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
1000177c:	b580      	push	{r7, lr}
1000177e:	b082      	sub	sp, #8
10001780:	af00      	add	r7, sp, #0
10001782:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10001784:	687b      	ldr	r3, [r7, #4]
10001786:	681b      	ldr	r3, [r3, #0]
10001788:	2240      	movs	r2, #64	; 0x40
1000178a:	4393      	bics	r3, r2
1000178c:	1c1a      	adds	r2, r3, #0
1000178e:	687b      	ldr	r3, [r7, #4]
10001790:	601a      	str	r2, [r3, #0]
}
10001792:	46bd      	mov	sp, r7
10001794:	b002      	add	sp, #8
10001796:	bd80      	pop	{r7, pc}

10001798 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
10001798:	b580      	push	{r7, lr}
1000179a:	b082      	sub	sp, #8
1000179c:	af00      	add	r7, sp, #0
1000179e:	6078      	str	r0, [r7, #4]
100017a0:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
100017a2:	687a      	ldr	r2, [r7, #4]
100017a4:	683b      	ldr	r3, [r7, #0]
100017a6:	4293      	cmp	r3, r2
100017a8:	d200      	bcs.n	100017ac <max+0x14>
100017aa:	1c13      	adds	r3, r2, #0
}
100017ac:	1c18      	adds	r0, r3, #0
100017ae:	46bd      	mov	sp, r7
100017b0:	b002      	add	sp, #8
100017b2:	bd80      	pop	{r7, pc}

100017b4 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
100017b4:	b580      	push	{r7, lr}
100017b6:	b082      	sub	sp, #8
100017b8:	af00      	add	r7, sp, #0
100017ba:	6078      	str	r0, [r7, #4]
100017bc:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
100017be:	687a      	ldr	r2, [r7, #4]
100017c0:	683b      	ldr	r3, [r7, #0]
100017c2:	4293      	cmp	r3, r2
100017c4:	d900      	bls.n	100017c8 <min+0x14>
100017c6:	1c13      	adds	r3, r2, #0
}
100017c8:	1c18      	adds	r0, r3, #0
100017ca:	46bd      	mov	sp, r7
100017cc:	b002      	add	sp, #8
100017ce:	bd80      	pop	{r7, pc}

100017d0 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
100017d0:	b580      	push	{r7, lr}
100017d2:	b088      	sub	sp, #32
100017d4:	af00      	add	r7, sp, #0
100017d6:	6078      	str	r0, [r7, #4]
100017d8:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
100017da:	683b      	ldr	r3, [r7, #0]
100017dc:	681a      	ldr	r2, [r3, #0]
100017de:	683b      	ldr	r3, [r7, #0]
100017e0:	685b      	ldr	r3, [r3, #4]
100017e2:	1c10      	adds	r0, r2, #0
100017e4:	1c19      	adds	r1, r3, #0
100017e6:	f000 fc31 	bl	1000204c <__aeabi_uidivmod>
100017ea:	1e0b      	subs	r3, r1, #0
100017ec:	d000      	beq.n	100017f0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x20>
100017ee:	e096      	b.n	1000191e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14e>
  {
    uint32_t prescaler = 0;
100017f0:	2300      	movs	r3, #0
100017f2:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
100017f4:	2300      	movs	r3, #0
100017f6:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
100017f8:	683b      	ldr	r3, [r7, #0]
100017fa:	681a      	ldr	r2, [r3, #0]
100017fc:	683b      	ldr	r3, [r7, #0]
100017fe:	685b      	ldr	r3, [r3, #4]
10001800:	1c10      	adds	r0, r2, #0
10001802:	1c19      	adds	r1, r3, #0
10001804:	f000 fbfa 	bl	10001ffc <__aeabi_uidiv>
10001808:	1c03      	adds	r3, r0, #0
1000180a:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
1000180c:	2319      	movs	r3, #25
1000180e:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
10001810:	2300      	movs	r3, #0
10001812:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
10001814:	2300      	movs	r3, #0
10001816:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
10001818:	e049      	b.n	100018ae <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
1000181a:	68bb      	ldr	r3, [r7, #8]
1000181c:	1c18      	adds	r0, r3, #0
1000181e:	6979      	ldr	r1, [r7, #20]
10001820:	f000 fc14 	bl	1000204c <__aeabi_uidivmod>
10001824:	1e0b      	subs	r3, r1, #0
10001826:	d13f      	bne.n	100018a8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
10001828:	2300      	movs	r3, #0
1000182a:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
1000182c:	68b8      	ldr	r0, [r7, #8]
1000182e:	6979      	ldr	r1, [r7, #20]
10001830:	f000 fbe4 	bl	10001ffc <__aeabi_uidiv>
10001834:	1c03      	adds	r3, r0, #0
10001836:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
10001838:	69fb      	ldr	r3, [r7, #28]
1000183a:	2b00      	cmp	r3, #0
1000183c:	d034      	beq.n	100018a8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
1000183e:	69fa      	ldr	r2, [r7, #28]
10001840:	2380      	movs	r3, #128	; 0x80
10001842:	009b      	lsls	r3, r3, #2
10001844:	429a      	cmp	r2, r3
10001846:	d82f      	bhi.n	100018a8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
10001848:	69fb      	ldr	r3, [r7, #28]
1000184a:	2b3f      	cmp	r3, #63	; 0x3f
1000184c:	d909      	bls.n	10001862 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
1000184e:	69fb      	ldr	r3, [r7, #28]
10001850:	2207      	movs	r2, #7
10001852:	4013      	ands	r3, r2
10001854:	d003      	beq.n	1000185e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
10001856:	697b      	ldr	r3, [r7, #20]
10001858:	3b01      	subs	r3, #1
1000185a:	617b      	str	r3, [r7, #20]
              continue;
1000185c:	e027      	b.n	100018ae <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
1000185e:	2301      	movs	r3, #1
10001860:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
10001862:	697b      	ldr	r3, [r7, #20]
10001864:	3b01      	subs	r3, #1
10001866:	683a      	ldr	r2, [r7, #0]
10001868:	8912      	ldrh	r2, [r2, #8]
1000186a:	4353      	muls	r3, r2
1000186c:	1c18      	adds	r0, r3, #0
1000186e:	492e      	ldr	r1, [pc, #184]	; (10001928 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x158>)
10001870:	f000 fbc4 	bl	10001ffc <__aeabi_uidiv>
10001874:	1c03      	adds	r3, r0, #0
10001876:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
10001878:	697a      	ldr	r2, [r7, #20]
1000187a:	693b      	ldr	r3, [r7, #16]
1000187c:	1ad3      	subs	r3, r2, r3
1000187e:	3b01      	subs	r3, #1
10001880:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
10001882:	693b      	ldr	r3, [r7, #16]
10001884:	2b02      	cmp	r3, #2
10001886:	d90f      	bls.n	100018a8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001888:	693b      	ldr	r3, [r7, #16]
1000188a:	2b0f      	cmp	r3, #15
1000188c:	d80c      	bhi.n	100018a8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
1000188e:	68fb      	ldr	r3, [r7, #12]
10001890:	2b01      	cmp	r3, #1
10001892:	d909      	bls.n	100018a8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
10001894:	68fb      	ldr	r3, [r7, #12]
10001896:	2b06      	cmp	r3, #6
10001898:	d806      	bhi.n	100018a8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
1000189a:	683b      	ldr	r3, [r7, #0]
1000189c:	895b      	ldrh	r3, [r3, #10]
1000189e:	1e1a      	subs	r2, r3, #0
100018a0:	68fb      	ldr	r3, [r7, #12]
100018a2:	429a      	cmp	r2, r3
100018a4:	d800      	bhi.n	100018a8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
100018a6:	e005      	b.n	100018b4 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
100018a8:	697b      	ldr	r3, [r7, #20]
100018aa:	3b01      	subs	r3, #1
100018ac:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
100018ae:	697b      	ldr	r3, [r7, #20]
100018b0:	2b07      	cmp	r3, #7
100018b2:	d8b2      	bhi.n	1000181a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x4a>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
100018b4:	697b      	ldr	r3, [r7, #20]
100018b6:	2b07      	cmp	r3, #7
100018b8:	d931      	bls.n	1000191e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14e>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
100018ba:	687b      	ldr	r3, [r7, #4]
100018bc:	1c18      	adds	r0, r3, #0
100018be:	f7ff ff4f 	bl	10001760 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
100018c2:	68fb      	ldr	r3, [r7, #12]
100018c4:	3b01      	subs	r3, #1
100018c6:	031a      	lsls	r2, r3, #12
100018c8:	23e0      	movs	r3, #224	; 0xe0
100018ca:	01db      	lsls	r3, r3, #7
100018cc:	401a      	ands	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
100018ce:	683b      	ldr	r3, [r7, #0]
100018d0:	895b      	ldrh	r3, [r3, #10]
100018d2:	3b01      	subs	r3, #1
100018d4:	019b      	lsls	r3, r3, #6
100018d6:	21ff      	movs	r1, #255	; 0xff
100018d8:	400b      	ands	r3, r1
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
100018da:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
100018dc:	693b      	ldr	r3, [r7, #16]
100018de:	3b01      	subs	r3, #1
100018e0:	0219      	lsls	r1, r3, #8
100018e2:	23f0      	movs	r3, #240	; 0xf0
100018e4:	011b      	lsls	r3, r3, #4
100018e6:	400b      	ands	r3, r1

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
100018e8:	431a      	orrs	r2, r3
100018ea:	1c11      	adds	r1, r2, #0
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
100018ec:	69ba      	ldr	r2, [r7, #24]
100018ee:	1c13      	adds	r3, r2, #0
100018f0:	005b      	lsls	r3, r3, #1
100018f2:	189b      	adds	r3, r3, r2
100018f4:	1c1a      	adds	r2, r3, #0
100018f6:	69fb      	ldr	r3, [r7, #28]
100018f8:	40d3      	lsrs	r3, r2
100018fa:	3b01      	subs	r3, #1
100018fc:	223f      	movs	r2, #63	; 0x3f
100018fe:	4013      	ands	r3, r2
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
10001900:	1c0a      	adds	r2, r1, #0
10001902:	431a      	orrs	r2, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
10001904:	69bb      	ldr	r3, [r7, #24]
10001906:	03db      	lsls	r3, r3, #15
10001908:	041b      	lsls	r3, r3, #16
1000190a:	0c1b      	lsrs	r3, r3, #16

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
1000190c:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
1000190e:	687b      	ldr	r3, [r7, #4]
10001910:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
10001912:	687b      	ldr	r3, [r7, #4]
10001914:	1c18      	adds	r0, r3, #0
10001916:	f7ff ff31 	bl	1000177c <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
1000191a:	2300      	movs	r3, #0
1000191c:	e000      	b.n	10001920 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x150>
    }
  }

  return XMC_CAN_STATUS_ERROR;
1000191e:	2301      	movs	r3, #1
}
10001920:	1c18      	adds	r0, r3, #0
10001922:	46bd      	mov	sp, r7
10001924:	b008      	add	sp, #32
10001926:	bd80      	pop	{r7, pc}
10001928:	00002710 	.word	0x00002710

1000192c <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
1000192c:	b590      	push	{r4, r7, lr}
1000192e:	b083      	sub	sp, #12
10001930:	af00      	add	r7, sp, #0
10001932:	6078      	str	r0, [r7, #4]
10001934:	1c08      	adds	r0, r1, #0
10001936:	1c11      	adds	r1, r2, #0
10001938:	1cfb      	adds	r3, r7, #3
1000193a:	1c02      	adds	r2, r0, #0
1000193c:	701a      	strb	r2, [r3, #0]
1000193e:	1cbb      	adds	r3, r7, #2
10001940:	1c0a      	adds	r2, r1, #0
10001942:	701a      	strb	r2, [r3, #0]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
10001944:	46c0      	nop			; (mov r8, r8)
10001946:	687b      	ldr	r3, [r7, #4]
10001948:	1c18      	adds	r0, r3, #0
1000194a:	f7ff fed1 	bl	100016f0 <XMC_CAN_IsPanelControlReady>
1000194e:	1c03      	adds	r3, r0, #0
10001950:	1c1a      	adds	r2, r3, #0
10001952:	2301      	movs	r3, #1
10001954:	4053      	eors	r3, r2
10001956:	b2db      	uxtb	r3, r3
10001958:	2b00      	cmp	r3, #0
1000195a:	d1f4      	bne.n	10001946 <XMC_CAN_AllocateMOtoNodeList+0x1a>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
1000195c:	1cfb      	adds	r3, r7, #3
1000195e:	781b      	ldrb	r3, [r3, #0]
10001960:	3301      	adds	r3, #1
10001962:	b2dc      	uxtb	r4, r3
10001964:	687a      	ldr	r2, [r7, #4]
10001966:	1cbb      	adds	r3, r7, #2
10001968:	781b      	ldrb	r3, [r3, #0]
1000196a:	1c10      	adds	r0, r2, #0
1000196c:	2102      	movs	r1, #2
1000196e:	1c1a      	adds	r2, r3, #0
10001970:	1c23      	adds	r3, r4, #0
10001972:	f7ff fecf 	bl	10001714 <XMC_CAN_PanelControl>
}
10001976:	46bd      	mov	sp, r7
10001978:	b003      	add	sp, #12
1000197a:	bd90      	pop	{r4, r7, pc}

1000197c <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
1000197c:	b580      	push	{r7, lr}
1000197e:	b082      	sub	sp, #8
10001980:	af00      	add	r7, sp, #0
10001982:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
10001984:	2380      	movs	r3, #128	; 0x80
10001986:	039b      	lsls	r3, r3, #14
10001988:	1c18      	adds	r0, r3, #0
1000198a:	f7ff fd91 	bl	100014b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
1000198e:	687b      	ldr	r3, [r7, #4]
10001990:	681b      	ldr	r3, [r3, #0]
10001992:	2201      	movs	r2, #1
10001994:	4393      	bics	r3, r2
10001996:	1c1a      	adds	r2, r3, #0
10001998:	687b      	ldr	r3, [r7, #4]
1000199a:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
1000199c:	46c0      	nop			; (mov r8, r8)
1000199e:	687b      	ldr	r3, [r7, #4]
100019a0:	681b      	ldr	r3, [r3, #0]
100019a2:	2202      	movs	r2, #2
100019a4:	4013      	ands	r3, r2
100019a6:	d1fa      	bne.n	1000199e <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
100019a8:	46bd      	mov	sp, r7
100019aa:	b002      	add	sp, #8
100019ac:	bd80      	pop	{r7, pc}
100019ae:	46c0      	nop			; (mov r8, r8)

100019b0 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
100019b0:	b580      	push	{r7, lr}
100019b2:	b082      	sub	sp, #8
100019b4:	af00      	add	r7, sp, #0
100019b6:	6078      	str	r0, [r7, #4]
100019b8:	1c0a      	adds	r2, r1, #0
100019ba:	1cfb      	adds	r3, r7, #3
100019bc:	701a      	strb	r2, [r3, #0]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
100019be:	687a      	ldr	r2, [r7, #4]
100019c0:	23e4      	movs	r3, #228	; 0xe4
100019c2:	005b      	lsls	r3, r3, #1
100019c4:	58d3      	ldr	r3, [r2, r3]
100019c6:	220f      	movs	r2, #15
100019c8:	4393      	bics	r3, r2
100019ca:	1c1a      	adds	r2, r3, #0
100019cc:	1cfb      	adds	r3, r7, #3
100019ce:	781b      	ldrb	r3, [r3, #0]
100019d0:	431a      	orrs	r2, r3
100019d2:	1c11      	adds	r1, r2, #0
100019d4:	687a      	ldr	r2, [r7, #4]
100019d6:	23e4      	movs	r3, #228	; 0xe4
100019d8:	005b      	lsls	r3, r3, #1
100019da:	50d1      	str	r1, [r2, r3]
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
100019dc:	46bd      	mov	sp, r7
100019de:	b002      	add	sp, #8
100019e0:	bd80      	pop	{r7, pc}
100019e2:	46c0      	nop			; (mov r8, r8)

100019e4 <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
100019e4:	b580      	push	{r7, lr}
100019e6:	b082      	sub	sp, #8
100019e8:	af00      	add	r7, sp, #0
100019ea:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
100019ec:	687a      	ldr	r2, [r7, #4]
100019ee:	23e4      	movs	r3, #228	; 0xe4
100019f0:	005b      	lsls	r3, r3, #1
100019f2:	58d3      	ldr	r3, [r2, r3]
100019f4:	b2db      	uxtb	r3, r3
100019f6:	220f      	movs	r2, #15
100019f8:	4013      	ands	r3, r2
100019fa:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
100019fc:	1c18      	adds	r0, r3, #0
100019fe:	46bd      	mov	sp, r7
10001a00:	b002      	add	sp, #8
10001a02:	bd80      	pop	{r7, pc}

10001a04 <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
10001a04:	b580      	push	{r7, lr}
10001a06:	b084      	sub	sp, #16
10001a08:	af00      	add	r7, sp, #0
10001a0a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
10001a0c:	2300      	movs	r3, #0
10001a0e:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
10001a10:	687b      	ldr	r3, [r7, #4]
10001a12:	1c18      	adds	r0, r3, #0
10001a14:	f7ff ffe6 	bl	100019e4 <XMC_CAN_GetBaudrateClockSource>
10001a18:	1e03      	subs	r3, r0, #0
10001a1a:	2b01      	cmp	r3, #1
10001a1c:	d002      	beq.n	10001a24 <XMC_CAN_GetBaudrateClockFrequency+0x20>
10001a1e:	2b02      	cmp	r3, #2
10001a20:	d005      	beq.n	10001a2e <XMC_CAN_GetBaudrateClockFrequency+0x2a>
10001a22:	e009      	b.n	10001a38 <XMC_CAN_GetBaudrateClockFrequency+0x34>
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#else
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10001a24:	f7ff fe14 	bl	10001650 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10001a28:	1c03      	adds	r3, r0, #0
10001a2a:	60fb      	str	r3, [r7, #12]
      break;
10001a2c:	e004      	b.n	10001a38 <XMC_CAN_GetBaudrateClockFrequency+0x34>
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
10001a2e:	f7ff fba3 	bl	10001178 <OSCHP_GetFrequency>
10001a32:	1c03      	adds	r3, r0, #0
10001a34:	60fb      	str	r3, [r7, #12]
      break;
10001a36:	46c0      	nop			; (mov r8, r8)
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
10001a38:	68fb      	ldr	r3, [r7, #12]
}
10001a3a:	1c18      	adds	r0, r3, #0
10001a3c:	46bd      	mov	sp, r7
10001a3e:	b004      	add	sp, #16
10001a40:	bd80      	pop	{r7, pc}
10001a42:	46c0      	nop			; (mov r8, r8)

10001a44 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
10001a44:	b580      	push	{r7, lr}
10001a46:	b088      	sub	sp, #32
10001a48:	af00      	add	r7, sp, #0
10001a4a:	60f8      	str	r0, [r7, #12]
10001a4c:	607a      	str	r2, [r7, #4]
10001a4e:	230b      	movs	r3, #11
10001a50:	18fb      	adds	r3, r7, r3
10001a52:	1c0a      	adds	r2, r1, #0
10001a54:	701a      	strb	r2, [r3, #0]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
10001a56:	68fb      	ldr	r3, [r7, #12]
10001a58:	1c18      	adds	r0, r3, #0
10001a5a:	f7ff ff8f 	bl	1000197c <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
10001a5e:	68fa      	ldr	r2, [r7, #12]
10001a60:	230b      	movs	r3, #11
10001a62:	18fb      	adds	r3, r7, r3
10001a64:	781b      	ldrb	r3, [r3, #0]
10001a66:	1c10      	adds	r0, r2, #0
10001a68:	1c19      	adds	r1, r3, #0
10001a6a:	f7ff ffa1 	bl	100019b0 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
10001a6e:	68fb      	ldr	r3, [r7, #12]
10001a70:	1c18      	adds	r0, r3, #0
10001a72:	f7ff ffc7 	bl	10001a04 <XMC_CAN_GetBaudrateClockFrequency>
10001a76:	1c03      	adds	r3, r0, #0
10001a78:	61fb      	str	r3, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
10001a7a:	69f8      	ldr	r0, [r7, #28]
10001a7c:	6879      	ldr	r1, [r7, #4]
10001a7e:	f000 fabd 	bl	10001ffc <__aeabi_uidiv>
10001a82:	1c03      	adds	r3, r0, #0
10001a84:	1c1a      	adds	r2, r3, #0
10001a86:	2380      	movs	r3, #128	; 0x80
10001a88:	00db      	lsls	r3, r3, #3
10001a8a:	1a9b      	subs	r3, r3, r2
10001a8c:	2000      	movs	r0, #0
10001a8e:	1c19      	adds	r1, r3, #0
10001a90:	f7ff fe82 	bl	10001798 <max>
10001a94:	1c02      	adds	r2, r0, #0
10001a96:	4b12      	ldr	r3, [pc, #72]	; (10001ae0 <XMC_CAN_InitEx+0x9c>)
10001a98:	1c10      	adds	r0, r2, #0
10001a9a:	1c19      	adds	r1, r3, #0
10001a9c:	f7ff fe8a 	bl	100017b4 <min>
10001aa0:	1c03      	adds	r3, r0, #0
10001aa2:	61bb      	str	r3, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
10001aa4:	69bb      	ldr	r3, [r7, #24]
10001aa6:	2280      	movs	r2, #128	; 0x80
10001aa8:	00d2      	lsls	r2, r2, #3
10001aaa:	1ad3      	subs	r3, r2, r3
10001aac:	69f8      	ldr	r0, [r7, #28]
10001aae:	1c19      	adds	r1, r3, #0
10001ab0:	f000 faa4 	bl	10001ffc <__aeabi_uidiv>
10001ab4:	1c03      	adds	r3, r0, #0
10001ab6:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
10001ab8:	68fb      	ldr	r3, [r7, #12]
10001aba:	68db      	ldr	r3, [r3, #12]
10001abc:	4a09      	ldr	r2, [pc, #36]	; (10001ae4 <XMC_CAN_InitEx+0xa0>)
10001abe:	401a      	ands	r2, r3
10001ac0:	68fb      	ldr	r3, [r7, #12]
10001ac2:	60da      	str	r2, [r3, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
10001ac4:	68fb      	ldr	r3, [r7, #12]
10001ac6:	68da      	ldr	r2, [r3, #12]
10001ac8:	69bb      	ldr	r3, [r7, #24]
10001aca:	4313      	orrs	r3, r2
10001acc:	2280      	movs	r2, #128	; 0x80
10001ace:	01d2      	lsls	r2, r2, #7
10001ad0:	431a      	orrs	r2, r3
10001ad2:	68fb      	ldr	r3, [r7, #12]
10001ad4:	60da      	str	r2, [r3, #12]

  return freq_n;
10001ad6:	697b      	ldr	r3, [r7, #20]
}
10001ad8:	1c18      	adds	r0, r3, #0
10001ada:	46bd      	mov	sp, r7
10001adc:	b008      	add	sp, #32
10001ade:	bd80      	pop	{r7, pc}
10001ae0:	000003ff 	.word	0x000003ff
10001ae4:	ffff3c00 	.word	0xffff3c00

10001ae8 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
10001ae8:	b580      	push	{r7, lr}
10001aea:	b086      	sub	sp, #24
10001aec:	af00      	add	r7, sp, #0
10001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
10001af0:	687b      	ldr	r3, [r7, #4]
10001af2:	681b      	ldr	r3, [r3, #0]
10001af4:	4a48      	ldr	r2, [pc, #288]	; (10001c18 <XMC_CAN_MO_Config+0x130>)
10001af6:	4694      	mov	ip, r2
10001af8:	4463      	add	r3, ip
10001afa:	095b      	lsrs	r3, r3, #5
10001afc:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
10001afe:	697b      	ldr	r3, [r7, #20]
10001b00:	095b      	lsrs	r3, r3, #5
10001b02:	035a      	lsls	r2, r3, #13
10001b04:	697b      	ldr	r3, [r7, #20]
10001b06:	211f      	movs	r1, #31
10001b08:	400b      	ands	r3, r1
10001b0a:	021b      	lsls	r3, r3, #8
10001b0c:	4313      	orrs	r3, r2
10001b0e:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
10001b10:	687b      	ldr	r3, [r7, #4]
10001b12:	681b      	ldr	r3, [r3, #0]
10001b14:	687a      	ldr	r2, [r7, #4]
10001b16:	6812      	ldr	r2, [r2, #0]
10001b18:	6892      	ldr	r2, [r2, #8]
10001b1a:	4940      	ldr	r1, [pc, #256]	; (10001c1c <XMC_CAN_MO_Config+0x134>)
10001b1c:	400a      	ands	r2, r1
10001b1e:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
10001b20:	687b      	ldr	r3, [r7, #4]
10001b22:	681b      	ldr	r3, [r3, #0]
10001b24:	687a      	ldr	r2, [r7, #4]
10001b26:	6812      	ldr	r2, [r2, #0]
10001b28:	6891      	ldr	r1, [r2, #8]
10001b2a:	693a      	ldr	r2, [r7, #16]
10001b2c:	430a      	orrs	r2, r1
10001b2e:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10001b30:	687b      	ldr	r3, [r7, #4]
10001b32:	79db      	ldrb	r3, [r3, #7]
10001b34:	2220      	movs	r2, #32
10001b36:	4013      	ands	r3, r2
10001b38:	b2db      	uxtb	r3, r3
10001b3a:	2b00      	cmp	r3, #0
10001b3c:	d007      	beq.n	10001b4e <XMC_CAN_MO_Config+0x66>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10001b3e:	687b      	ldr	r3, [r7, #4]
10001b40:	79db      	ldrb	r3, [r3, #7]
10001b42:	2220      	movs	r2, #32
10001b44:	4013      	ands	r3, r2
10001b46:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10001b48:	2b00      	cmp	r3, #0
10001b4a:	d100      	bne.n	10001b4e <XMC_CAN_MO_Config+0x66>
10001b4c:	e061      	b.n	10001c12 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10001b4e:	687b      	ldr	r3, [r7, #4]
10001b50:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10001b52:	2b00      	cmp	r3, #0
10001b54:	d004      	beq.n	10001b60 <XMC_CAN_MO_Config+0x78>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
10001b56:	687b      	ldr	r3, [r7, #4]
10001b58:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10001b5a:	2b01      	cmp	r3, #1
10001b5c:	d000      	beq.n	10001b60 <XMC_CAN_MO_Config+0x78>
10001b5e:	e058      	b.n	10001c12 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001b60:	687b      	ldr	r3, [r7, #4]
10001b62:	681b      	ldr	r3, [r3, #0]
10001b64:	2220      	movs	r2, #32
10001b66:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
10001b68:	687b      	ldr	r3, [r7, #4]
10001b6a:	79db      	ldrb	r3, [r3, #7]
10001b6c:	2220      	movs	r2, #32
10001b6e:	4013      	ands	r3, r2
10001b70:	b2db      	uxtb	r3, r3
10001b72:	2b00      	cmp	r3, #0
10001b74:	d128      	bne.n	10001bc8 <XMC_CAN_MO_Config+0xe0>
    {
      reg = can_mo->mo_ar;
10001b76:	687b      	ldr	r3, [r7, #4]
10001b78:	685b      	ldr	r3, [r3, #4]
10001b7a:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
10001b7c:	68fb      	ldr	r3, [r7, #12]
10001b7e:	0f5b      	lsrs	r3, r3, #29
10001b80:	075b      	lsls	r3, r3, #29
10001b82:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
10001b84:	687b      	ldr	r3, [r7, #4]
10001b86:	685b      	ldr	r3, [r3, #4]
10001b88:	00db      	lsls	r3, r3, #3
10001b8a:	08db      	lsrs	r3, r3, #3
10001b8c:	049b      	lsls	r3, r3, #18
10001b8e:	1c1a      	adds	r2, r3, #0
10001b90:	68fb      	ldr	r3, [r7, #12]
10001b92:	4313      	orrs	r3, r2
10001b94:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
10001b96:	687b      	ldr	r3, [r7, #4]
10001b98:	681b      	ldr	r3, [r3, #0]
10001b9a:	68fa      	ldr	r2, [r7, #12]
10001b9c:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
10001b9e:	687b      	ldr	r3, [r7, #4]
10001ba0:	689b      	ldr	r3, [r3, #8]
10001ba2:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
10001ba4:	68fb      	ldr	r3, [r7, #12]
10001ba6:	0f5b      	lsrs	r3, r3, #29
10001ba8:	075b      	lsls	r3, r3, #29
10001baa:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
10001bac:	687b      	ldr	r3, [r7, #4]
10001bae:	689b      	ldr	r3, [r3, #8]
10001bb0:	00db      	lsls	r3, r3, #3
10001bb2:	08db      	lsrs	r3, r3, #3
10001bb4:	049b      	lsls	r3, r3, #18
10001bb6:	1c1a      	adds	r2, r3, #0
10001bb8:	68fb      	ldr	r3, [r7, #12]
10001bba:	4313      	orrs	r3, r2
10001bbc:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
10001bbe:	687b      	ldr	r3, [r7, #4]
10001bc0:	681b      	ldr	r3, [r3, #0]
10001bc2:	68fa      	ldr	r2, [r7, #12]
10001bc4:	60da      	str	r2, [r3, #12]
10001bc6:	e009      	b.n	10001bdc <XMC_CAN_MO_Config+0xf4>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
10001bc8:	687b      	ldr	r3, [r7, #4]
10001bca:	681b      	ldr	r3, [r3, #0]
10001bcc:	687a      	ldr	r2, [r7, #4]
10001bce:	6852      	ldr	r2, [r2, #4]
10001bd0:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
10001bd2:	687b      	ldr	r3, [r7, #4]
10001bd4:	681b      	ldr	r3, [r3, #0]
10001bd6:	687a      	ldr	r2, [r7, #4]
10001bd8:	6892      	ldr	r2, [r2, #8]
10001bda:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001bdc:	687b      	ldr	r3, [r7, #4]
10001bde:	7e1b      	ldrb	r3, [r3, #24]
10001be0:	2b01      	cmp	r3, #1
10001be2:	d10d      	bne.n	10001c00 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
10001be4:	687b      	ldr	r3, [r7, #4]
10001be6:	1c18      	adds	r0, r3, #0
10001be8:	f000 f81e 	bl	10001c28 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
10001bec:	687b      	ldr	r3, [r7, #4]
10001bee:	681b      	ldr	r3, [r3, #0]
10001bf0:	2280      	movs	r2, #128	; 0x80
10001bf2:	0512      	lsls	r2, r2, #20
10001bf4:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001bf6:	687b      	ldr	r3, [r7, #4]
10001bf8:	681b      	ldr	r3, [r3, #0]
10001bfa:	4a09      	ldr	r2, [pc, #36]	; (10001c20 <XMC_CAN_MO_Config+0x138>)
10001bfc:	61da      	str	r2, [r3, #28]
10001bfe:	e008      	b.n	10001c12 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
10001c00:	687b      	ldr	r3, [r7, #4]
10001c02:	681b      	ldr	r3, [r3, #0]
10001c04:	2280      	movs	r2, #128	; 0x80
10001c06:	0112      	lsls	r2, r2, #4
10001c08:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001c0a:	687b      	ldr	r3, [r7, #4]
10001c0c:	681b      	ldr	r3, [r3, #0]
10001c0e:	4a05      	ldr	r2, [pc, #20]	; (10001c24 <XMC_CAN_MO_Config+0x13c>)
10001c10:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
10001c12:	46bd      	mov	sp, r7
10001c14:	b006      	add	sp, #24
10001c16:	bd80      	pop	{r7, pc}
10001c18:	affbf000 	.word	0xaffbf000
10001c1c:	ffff00ff 	.word	0xffff00ff
10001c20:	062000c0 	.word	0x062000c0
10001c24:	00a00640 	.word	0x00a00640

10001c28 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
10001c28:	b580      	push	{r7, lr}
10001c2a:	b084      	sub	sp, #16
10001c2c:	af00      	add	r7, sp, #0
10001c2e:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001c30:	230f      	movs	r3, #15
10001c32:	18fb      	adds	r3, r7, r3
10001c34:	2203      	movs	r2, #3
10001c36:	701a      	strb	r2, [r3, #0]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001c38:	687b      	ldr	r3, [r7, #4]
10001c3a:	7e1b      	ldrb	r3, [r3, #24]
10001c3c:	2b01      	cmp	r3, #1
10001c3e:	d125      	bne.n	10001c8c <XMC_CAN_MO_UpdateData+0x64>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001c40:	687b      	ldr	r3, [r7, #4]
10001c42:	681b      	ldr	r3, [r3, #0]
10001c44:	2220      	movs	r2, #32
10001c46:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001c48:	687b      	ldr	r3, [r7, #4]
10001c4a:	681b      	ldr	r3, [r3, #0]
10001c4c:	687a      	ldr	r2, [r7, #4]
10001c4e:	6812      	ldr	r2, [r2, #0]
10001c50:	6812      	ldr	r2, [r2, #0]
10001c52:	4914      	ldr	r1, [pc, #80]	; (10001ca4 <XMC_CAN_MO_UpdateData+0x7c>)
10001c54:	4011      	ands	r1, r2
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
10001c56:	687a      	ldr	r2, [r7, #4]
10001c58:	7b12      	ldrb	r2, [r2, #12]
10001c5a:	0610      	lsls	r0, r2, #24
10001c5c:	22f0      	movs	r2, #240	; 0xf0
10001c5e:	0512      	lsls	r2, r2, #20
10001c60:	4002      	ands	r2, r0
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001c62:	430a      	orrs	r2, r1
10001c64:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
10001c66:	687b      	ldr	r3, [r7, #4]
10001c68:	681b      	ldr	r3, [r3, #0]
10001c6a:	687a      	ldr	r2, [r7, #4]
10001c6c:	6912      	ldr	r2, [r2, #16]
10001c6e:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
10001c70:	687b      	ldr	r3, [r7, #4]
10001c72:	681b      	ldr	r3, [r3, #0]
10001c74:	687a      	ldr	r2, [r7, #4]
10001c76:	6952      	ldr	r2, [r2, #20]
10001c78:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
10001c7a:	687b      	ldr	r3, [r7, #4]
10001c7c:	681b      	ldr	r3, [r3, #0]
10001c7e:	4a0a      	ldr	r2, [pc, #40]	; (10001ca8 <XMC_CAN_MO_UpdateData+0x80>)
10001c80:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001c82:	230f      	movs	r3, #15
10001c84:	18fb      	adds	r3, r7, r3
10001c86:	2200      	movs	r2, #0
10001c88:	701a      	strb	r2, [r3, #0]
10001c8a:	e003      	b.n	10001c94 <XMC_CAN_MO_UpdateData+0x6c>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001c8c:	230f      	movs	r3, #15
10001c8e:	18fb      	adds	r3, r7, r3
10001c90:	2203      	movs	r2, #3
10001c92:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001c94:	230f      	movs	r3, #15
10001c96:	18fb      	adds	r3, r7, r3
10001c98:	781b      	ldrb	r3, [r3, #0]
}
10001c9a:	1c18      	adds	r0, r3, #0
10001c9c:	46bd      	mov	sp, r7
10001c9e:	b004      	add	sp, #16
10001ca0:	bd80      	pop	{r7, pc}
10001ca2:	46c0      	nop			; (mov r8, r8)
10001ca4:	f0ffffff 	.word	0xf0ffffff
10001ca8:	00280040 	.word	0x00280040

10001cac <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
10001cac:	b580      	push	{r7, lr}
10001cae:	b086      	sub	sp, #24
10001cb0:	af00      	add	r7, sp, #0
10001cb2:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10001cb4:	2317      	movs	r3, #23
10001cb6:	18fb      	adds	r3, r7, r3
10001cb8:	2201      	movs	r2, #1
10001cba:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
10001cbc:	687b      	ldr	r3, [r7, #4]
10001cbe:	681b      	ldr	r3, [r3, #0]
10001cc0:	69db      	ldr	r3, [r3, #28]
10001cc2:	2220      	movs	r2, #32
10001cc4:	4013      	ands	r3, r2
10001cc6:	095b      	lsrs	r3, r3, #5
10001cc8:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
10001cca:	687b      	ldr	r3, [r7, #4]
10001ccc:	681b      	ldr	r3, [r3, #0]
10001cce:	69da      	ldr	r2, [r3, #28]
10001cd0:	2380      	movs	r3, #128	; 0x80
10001cd2:	005b      	lsls	r3, r3, #1
10001cd4:	4013      	ands	r3, r2
10001cd6:	0a1b      	lsrs	r3, r3, #8
10001cd8:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
10001cda:	693b      	ldr	r3, [r7, #16]
10001cdc:	2b00      	cmp	r3, #0
10001cde:	d104      	bne.n	10001cea <XMC_CAN_MO_Transmit+0x3e>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
10001ce0:	2317      	movs	r3, #23
10001ce2:	18fb      	adds	r3, r7, r3
10001ce4:	2204      	movs	r2, #4
10001ce6:	701a      	strb	r2, [r3, #0]
10001ce8:	e010      	b.n	10001d0c <XMC_CAN_MO_Transmit+0x60>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
10001cea:	68fb      	ldr	r3, [r7, #12]
10001cec:	2b01      	cmp	r3, #1
10001cee:	d104      	bne.n	10001cfa <XMC_CAN_MO_Transmit+0x4e>
  {
    error = XMC_CAN_STATUS_BUSY;
10001cf0:	2317      	movs	r3, #23
10001cf2:	18fb      	adds	r3, r7, r3
10001cf4:	2202      	movs	r2, #2
10001cf6:	701a      	strb	r2, [r3, #0]
10001cf8:	e008      	b.n	10001d0c <XMC_CAN_MO_Transmit+0x60>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
10001cfa:	687b      	ldr	r3, [r7, #4]
10001cfc:	681b      	ldr	r3, [r3, #0]
10001cfe:	22e0      	movs	r2, #224	; 0xe0
10001d00:	04d2      	lsls	r2, r2, #19
10001d02:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001d04:	2317      	movs	r3, #23
10001d06:	18fb      	adds	r3, r7, r3
10001d08:	2200      	movs	r2, #0
10001d0a:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001d0c:	2317      	movs	r3, #23
10001d0e:	18fb      	adds	r3, r7, r3
10001d10:	781b      	ldrb	r3, [r3, #0]
}
10001d12:	1c18      	adds	r0, r3, #0
10001d14:	46bd      	mov	sp, r7
10001d16:	b006      	add	sp, #24
10001d18:	bd80      	pop	{r7, pc}
10001d1a:	46c0      	nop			; (mov r8, r8)

10001d1c <XMC_CAN_NODE_EnableEvent>:
  return error;
}

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
10001d1c:	b580      	push	{r7, lr}
10001d1e:	b082      	sub	sp, #8
10001d20:	af00      	add	r7, sp, #0
10001d22:	6078      	str	r0, [r7, #4]
10001d24:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
10001d26:	683a      	ldr	r2, [r7, #0]
10001d28:	2380      	movs	r3, #128	; 0x80
10001d2a:	03db      	lsls	r3, r3, #15
10001d2c:	429a      	cmp	r2, r3
10001d2e:	d006      	beq.n	10001d3e <XMC_CAN_NODE_EnableEvent+0x22>
  {
    can_node->NCR |= (uint32_t)event;
10001d30:	687b      	ldr	r3, [r7, #4]
10001d32:	681a      	ldr	r2, [r3, #0]
10001d34:	683b      	ldr	r3, [r7, #0]
10001d36:	431a      	orrs	r2, r3
10001d38:	687b      	ldr	r3, [r7, #4]
10001d3a:	601a      	str	r2, [r3, #0]
10001d3c:	e005      	b.n	10001d4a <XMC_CAN_NODE_EnableEvent+0x2e>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
10001d3e:	687b      	ldr	r3, [r7, #4]
10001d40:	699a      	ldr	r2, [r3, #24]
10001d42:	683b      	ldr	r3, [r7, #0]
10001d44:	431a      	orrs	r2, r3
10001d46:	687b      	ldr	r3, [r7, #4]
10001d48:	619a      	str	r2, [r3, #24]
  }
}
10001d4a:	46bd      	mov	sp, r7
10001d4c:	b002      	add	sp, #8
10001d4e:	bd80      	pop	{r7, pc}

10001d50 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10001d50:	b580      	push	{r7, lr}
10001d52:	b082      	sub	sp, #8
10001d54:	af00      	add	r7, sp, #0
10001d56:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10001d58:	687b      	ldr	r3, [r7, #4]
10001d5a:	2280      	movs	r2, #128	; 0x80
10001d5c:	0052      	lsls	r2, r2, #1
10001d5e:	60da      	str	r2, [r3, #12]
}
10001d60:	46bd      	mov	sp, r7
10001d62:	b002      	add	sp, #8
10001d64:	bd80      	pop	{r7, pc}
10001d66:	46c0      	nop			; (mov r8, r8)

10001d68 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
10001d68:	b580      	push	{r7, lr}
10001d6a:	b082      	sub	sp, #8
10001d6c:	af00      	add	r7, sp, #0
10001d6e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
10001d70:	687b      	ldr	r3, [r7, #4]
10001d72:	4a09      	ldr	r2, [pc, #36]	; (10001d98 <XMC_CCU4_lUngateClock+0x30>)
10001d74:	4293      	cmp	r3, r2
10001d76:	d103      	bne.n	10001d80 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
10001d78:	2004      	movs	r0, #4
10001d7a:	f7ff fb99 	bl	100014b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
10001d7e:	e008      	b.n	10001d92 <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
10001d80:	687b      	ldr	r3, [r7, #4]
10001d82:	4a06      	ldr	r2, [pc, #24]	; (10001d9c <XMC_CCU4_lUngateClock+0x34>)
10001d84:	4293      	cmp	r3, r2
10001d86:	d104      	bne.n	10001d92 <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
10001d88:	2380      	movs	r3, #128	; 0x80
10001d8a:	029b      	lsls	r3, r3, #10
10001d8c:	1c18      	adds	r0, r3, #0
10001d8e:	f7ff fb8f 	bl	100014b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
10001d92:	46bd      	mov	sp, r7
10001d94:	b002      	add	sp, #8
10001d96:	bd80      	pop	{r7, pc}
10001d98:	48040000 	.word	0x48040000
10001d9c:	48044000 	.word	0x48044000

10001da0 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
10001da0:	b580      	push	{r7, lr}
10001da2:	b082      	sub	sp, #8
10001da4:	af00      	add	r7, sp, #0
10001da6:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
10001da8:	687b      	ldr	r3, [r7, #4]
10001daa:	1c18      	adds	r0, r3, #0
10001dac:	f7ff ffdc 	bl	10001d68 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
10001db0:	46bd      	mov	sp, r7
10001db2:	b002      	add	sp, #8
10001db4:	bd80      	pop	{r7, pc}
10001db6:	46c0      	nop			; (mov r8, r8)

10001db8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
10001db8:	b580      	push	{r7, lr}
10001dba:	b084      	sub	sp, #16
10001dbc:	af00      	add	r7, sp, #0
10001dbe:	6078      	str	r0, [r7, #4]
10001dc0:	1c0a      	adds	r2, r1, #0
10001dc2:	1cfb      	adds	r3, r7, #3
10001dc4:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
10001dc6:	687b      	ldr	r3, [r7, #4]
10001dc8:	1c18      	adds	r0, r3, #0
10001dca:	f7ff ffe9 	bl	10001da0 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
10001dce:	687b      	ldr	r3, [r7, #4]
10001dd0:	1c18      	adds	r0, r3, #0
10001dd2:	f7ff ffbd 	bl	10001d50 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
10001dd6:	687b      	ldr	r3, [r7, #4]
10001dd8:	681b      	ldr	r3, [r3, #0]
10001dda:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001ddc:	68fb      	ldr	r3, [r7, #12]
10001dde:	4a07      	ldr	r2, [pc, #28]	; (10001dfc <XMC_CCU4_Init+0x44>)
10001de0:	4013      	ands	r3, r2
10001de2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001de4:	1cfb      	adds	r3, r7, #3
10001de6:	781b      	ldrb	r3, [r3, #0]
10001de8:	039b      	lsls	r3, r3, #14
10001dea:	68fa      	ldr	r2, [r7, #12]
10001dec:	4313      	orrs	r3, r2
10001dee:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
10001df0:	687b      	ldr	r3, [r7, #4]
10001df2:	68fa      	ldr	r2, [r7, #12]
10001df4:	601a      	str	r2, [r3, #0]
}
10001df6:	46bd      	mov	sp, r7
10001df8:	b004      	add	sp, #16
10001dfa:	bd80      	pop	{r7, pc}
10001dfc:	ffff3fff 	.word	0xffff3fff

10001e00 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10001e00:	b580      	push	{r7, lr}
10001e02:	b082      	sub	sp, #8
10001e04:	af00      	add	r7, sp, #0
10001e06:	6078      	str	r0, [r7, #4]
10001e08:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001e0a:	683b      	ldr	r3, [r7, #0]
10001e0c:	681a      	ldr	r2, [r3, #0]
10001e0e:	687b      	ldr	r3, [r7, #4]
10001e10:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10001e12:	683b      	ldr	r3, [r7, #0]
10001e14:	795b      	ldrb	r3, [r3, #5]
10001e16:	069b      	lsls	r3, r3, #26
10001e18:	0fdb      	lsrs	r3, r3, #31
10001e1a:	b2db      	uxtb	r3, r3
10001e1c:	051a      	lsls	r2, r3, #20
10001e1e:	687b      	ldr	r3, [r7, #4]
10001e20:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10001e22:	683b      	ldr	r3, [r7, #0]
10001e24:	791b      	ldrb	r3, [r3, #4]
10001e26:	071b      	lsls	r3, r3, #28
10001e28:	0f1b      	lsrs	r3, r3, #28
10001e2a:	b2db      	uxtb	r3, r3
10001e2c:	1c1a      	adds	r2, r3, #0
10001e2e:	687b      	ldr	r3, [r7, #4]
10001e30:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10001e32:	683b      	ldr	r3, [r7, #0]
10001e34:	795b      	ldrb	r3, [r3, #5]
10001e36:	071b      	lsls	r3, r3, #28
10001e38:	0f1b      	lsrs	r3, r3, #28
10001e3a:	b2db      	uxtb	r3, r3
10001e3c:	1c1a      	adds	r2, r3, #0
10001e3e:	687b      	ldr	r3, [r7, #4]
10001e40:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
10001e42:	683b      	ldr	r3, [r7, #0]
10001e44:	795b      	ldrb	r3, [r3, #5]
10001e46:	06db      	lsls	r3, r3, #27
10001e48:	0fdb      	lsrs	r3, r3, #31
10001e4a:	b2db      	uxtb	r3, r3
10001e4c:	1c1a      	adds	r2, r3, #0
10001e4e:	687b      	ldr	r3, [r7, #4]
10001e50:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10001e52:	683b      	ldr	r3, [r7, #0]
10001e54:	791b      	ldrb	r3, [r3, #4]
10001e56:	061b      	lsls	r3, r3, #24
10001e58:	0f1b      	lsrs	r3, r3, #28
10001e5a:	b2db      	uxtb	r3, r3
10001e5c:	1c1a      	adds	r2, r3, #0
10001e5e:	687b      	ldr	r3, [r7, #4]
10001e60:	62da      	str	r2, [r3, #44]	; 0x2c
}
10001e62:	46bd      	mov	sp, r7
10001e64:	b002      	add	sp, #8
10001e66:	bd80      	pop	{r7, pc}

10001e68 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10001e68:	b580      	push	{r7, lr}
10001e6a:	b086      	sub	sp, #24
10001e6c:	af00      	add	r7, sp, #0
10001e6e:	6078      	str	r0, [r7, #4]
10001e70:	1c08      	adds	r0, r1, #0
10001e72:	1c11      	adds	r1, r2, #0
10001e74:	1cfb      	adds	r3, r7, #3
10001e76:	1c02      	adds	r2, r0, #0
10001e78:	701a      	strb	r2, [r3, #0]
10001e7a:	1cbb      	adds	r3, r7, #2
10001e7c:	1c0a      	adds	r2, r1, #0
10001e7e:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
10001e80:	1cfb      	adds	r3, r7, #3
10001e82:	781b      	ldrb	r3, [r3, #0]
10001e84:	2b0b      	cmp	r3, #11
10001e86:	d820      	bhi.n	10001eca <XMC_CCU4_SLICE_SetInterruptNode+0x62>
10001e88:	009a      	lsls	r2, r3, #2
10001e8a:	4b20      	ldr	r3, [pc, #128]	; (10001f0c <XMC_CCU4_SLICE_SetInterruptNode+0xa4>)
10001e8c:	18d3      	adds	r3, r2, r3
10001e8e:	681b      	ldr	r3, [r3, #0]
10001e90:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001e92:	2303      	movs	r3, #3
10001e94:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10001e96:	2300      	movs	r3, #0
10001e98:	617b      	str	r3, [r7, #20]
      break;
10001e9a:	e01b      	b.n	10001ed4 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001e9c:	230c      	movs	r3, #12
10001e9e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001ea0:	2302      	movs	r3, #2
10001ea2:	617b      	str	r3, [r7, #20]
      break;
10001ea4:	e016      	b.n	10001ed4 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10001ea6:	23c0      	movs	r3, #192	; 0xc0
10001ea8:	009b      	lsls	r3, r3, #2
10001eaa:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001eac:	2308      	movs	r3, #8
10001eae:	617b      	str	r3, [r7, #20]
      break;
10001eb0:	e010      	b.n	10001ed4 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001eb2:	23c0      	movs	r3, #192	; 0xc0
10001eb4:	011b      	lsls	r3, r3, #4
10001eb6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10001eb8:	230a      	movs	r3, #10
10001eba:	617b      	str	r3, [r7, #20]
      break;
10001ebc:	e00a      	b.n	10001ed4 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001ebe:	23c0      	movs	r3, #192	; 0xc0
10001ec0:	019b      	lsls	r3, r3, #6
10001ec2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001ec4:	230c      	movs	r3, #12
10001ec6:	617b      	str	r3, [r7, #20]
      break;
10001ec8:	e004      	b.n	10001ed4 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>
	  
	default:
	  mask = 0;
10001eca:	2300      	movs	r3, #0
10001ecc:	613b      	str	r3, [r7, #16]
	  pos = 0;
10001ece:	2300      	movs	r3, #0
10001ed0:	617b      	str	r3, [r7, #20]
	  break;
10001ed2:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
10001ed4:	693b      	ldr	r3, [r7, #16]
10001ed6:	2b00      	cmp	r3, #0
10001ed8:	d014      	beq.n	10001f04 <XMC_CCU4_SLICE_SetInterruptNode+0x9c>
  {
    srs = slice->SRS;
10001eda:	687b      	ldr	r3, [r7, #4]
10001edc:	22a8      	movs	r2, #168	; 0xa8
10001ede:	589b      	ldr	r3, [r3, r2]
10001ee0:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
10001ee2:	693b      	ldr	r3, [r7, #16]
10001ee4:	43da      	mvns	r2, r3
10001ee6:	68fb      	ldr	r3, [r7, #12]
10001ee8:	4013      	ands	r3, r2
10001eea:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
10001eec:	1cbb      	adds	r3, r7, #2
10001eee:	781a      	ldrb	r2, [r3, #0]
10001ef0:	697b      	ldr	r3, [r7, #20]
10001ef2:	409a      	lsls	r2, r3
10001ef4:	1c13      	adds	r3, r2, #0
10001ef6:	68fa      	ldr	r2, [r7, #12]
10001ef8:	4313      	orrs	r3, r2
10001efa:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
10001efc:	687b      	ldr	r3, [r7, #4]
10001efe:	21a8      	movs	r1, #168	; 0xa8
10001f00:	68fa      	ldr	r2, [r7, #12]
10001f02:	505a      	str	r2, [r3, r1]
  }
}
10001f04:	46bd      	mov	sp, r7
10001f06:	b006      	add	sp, #24
10001f08:	bd80      	pop	{r7, pc}
10001f0a:	46c0      	nop			; (mov r8, r8)
10001f0c:	100051c8 	.word	0x100051c8

10001f10 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
10001f10:	b580      	push	{r7, lr}
10001f12:	b084      	sub	sp, #16
10001f14:	af00      	add	r7, sp, #0
10001f16:	60f8      	str	r0, [r7, #12]
10001f18:	607a      	str	r2, [r7, #4]
10001f1a:	230b      	movs	r3, #11
10001f1c:	18fb      	adds	r3, r7, r3
10001f1e:	1c0a      	adds	r2, r1, #0
10001f20:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
10001f22:	68fb      	ldr	r3, [r7, #12]
10001f24:	1c18      	adds	r0, r3, #0
10001f26:	f7ff f92f 	bl	10001188 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
10001f2a:	68fb      	ldr	r3, [r7, #12]
10001f2c:	681b      	ldr	r3, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
10001f2e:	220b      	movs	r2, #11
10001f30:	18ba      	adds	r2, r7, r2
10001f32:	7812      	ldrb	r2, [r2, #0]
10001f34:	0092      	lsls	r2, r2, #2
10001f36:	1c11      	adds	r1, r2, #0
10001f38:	220f      	movs	r2, #15
10001f3a:	408a      	lsls	r2, r1
10001f3c:	43d2      	mvns	r2, r2
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
10001f3e:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
10001f40:	687b      	ldr	r3, [r7, #4]
10001f42:	681b      	ldr	r3, [r3, #0]
10001f44:	210b      	movs	r1, #11
10001f46:	1879      	adds	r1, r7, r1
10001f48:	7809      	ldrb	r1, [r1, #0]
10001f4a:	0089      	lsls	r1, r1, #2
10001f4c:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
10001f4e:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
10001f50:	68fb      	ldr	r3, [r7, #12]
10001f52:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));

  eru->EXICON[channel] = config->raw;
10001f54:	230b      	movs	r3, #11
10001f56:	18fb      	adds	r3, r7, r3
10001f58:	781a      	ldrb	r2, [r3, #0]
10001f5a:	687b      	ldr	r3, [r7, #4]
10001f5c:	6859      	ldr	r1, [r3, #4]
10001f5e:	68fb      	ldr	r3, [r7, #12]
10001f60:	3204      	adds	r2, #4
10001f62:	0092      	lsls	r2, r2, #2
10001f64:	50d1      	str	r1, [r2, r3]
}
10001f66:	46bd      	mov	sp, r7
10001f68:	b004      	add	sp, #16
10001f6a:	bd80      	pop	{r7, pc}

10001f6c <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
10001f6c:	b590      	push	{r4, r7, lr}
10001f6e:	b083      	sub	sp, #12
10001f70:	af00      	add	r7, sp, #0
10001f72:	6078      	str	r0, [r7, #4]
10001f74:	1c08      	adds	r0, r1, #0
10001f76:	1c11      	adds	r1, r2, #0
10001f78:	1cfb      	adds	r3, r7, #3
10001f7a:	1c02      	adds	r2, r0, #0
10001f7c:	701a      	strb	r2, [r3, #0]
10001f7e:	1cbb      	adds	r3, r7, #2
10001f80:	1c0a      	adds	r2, r1, #0
10001f82:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
10001f84:	1cfb      	adds	r3, r7, #3
10001f86:	781a      	ldrb	r2, [r3, #0]
10001f88:	1cbb      	adds	r3, r7, #2
10001f8a:	781b      	ldrb	r3, [r3, #0]
10001f8c:	2103      	movs	r1, #3
10001f8e:	400b      	ands	r3, r1
10001f90:	b2d9      	uxtb	r1, r3
10001f92:	687b      	ldr	r3, [r7, #4]
10001f94:	3208      	adds	r2, #8
10001f96:	0092      	lsls	r2, r2, #2
10001f98:	2003      	movs	r0, #3
10001f9a:	4001      	ands	r1, r0
10001f9c:	0109      	lsls	r1, r1, #4
10001f9e:	58d0      	ldr	r0, [r2, r3]
10001fa0:	2430      	movs	r4, #48	; 0x30
10001fa2:	43a0      	bics	r0, r4
10001fa4:	4301      	orrs	r1, r0
10001fa6:	50d1      	str	r1, [r2, r3]

}
10001fa8:	46bd      	mov	sp, r7
10001faa:	b003      	add	sp, #12
10001fac:	bd90      	pop	{r4, r7, pc}
10001fae:	46c0      	nop			; (mov r8, r8)

10001fb0 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
10001fb0:	b580      	push	{r7, lr}
10001fb2:	b082      	sub	sp, #8
10001fb4:	af00      	add	r7, sp, #0
10001fb6:	6078      	str	r0, [r7, #4]
10001fb8:	1c08      	adds	r0, r1, #0
10001fba:	1c11      	adds	r1, r2, #0
10001fbc:	1cfb      	adds	r3, r7, #3
10001fbe:	1c02      	adds	r2, r0, #0
10001fc0:	701a      	strb	r2, [r3, #0]
10001fc2:	1cbb      	adds	r3, r7, #2
10001fc4:	1c0a      	adds	r2, r1, #0
10001fc6:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001fc8:	687b      	ldr	r3, [r7, #4]
10001fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001fcc:	1cfa      	adds	r2, r7, #3
10001fce:	7812      	ldrb	r2, [r2, #0]
10001fd0:	0052      	lsls	r2, r2, #1
10001fd2:	1c11      	adds	r1, r2, #0
10001fd4:	2203      	movs	r2, #3
10001fd6:	408a      	lsls	r2, r1
10001fd8:	43d2      	mvns	r2, r2
10001fda:	401a      	ands	r2, r3
10001fdc:	687b      	ldr	r3, [r7, #4]
10001fde:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
10001fe0:	687b      	ldr	r3, [r7, #4]
10001fe2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10001fe4:	1cbb      	adds	r3, r7, #2
10001fe6:	781b      	ldrb	r3, [r3, #0]
10001fe8:	1cf9      	adds	r1, r7, #3
10001fea:	7809      	ldrb	r1, [r1, #0]
10001fec:	0049      	lsls	r1, r1, #1
10001fee:	408b      	lsls	r3, r1
10001ff0:	431a      	orrs	r2, r3
10001ff2:	687b      	ldr	r3, [r7, #4]
10001ff4:	675a      	str	r2, [r3, #116]	; 0x74
}
10001ff6:	46bd      	mov	sp, r7
10001ff8:	b002      	add	sp, #8
10001ffa:	bd80      	pop	{r7, pc}

10001ffc <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
10001ffc:	b580      	push	{r7, lr}
10001ffe:	b088      	sub	sp, #32
10002000:	af00      	add	r7, sp, #0
10002002:	6078      	str	r0, [r7, #4]
10002004:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10002006:	f3ef 8310 	mrs	r3, PRIMASK
1000200a:	617b      	str	r3, [r7, #20]
  return(result);
1000200c:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000200e:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10002010:	b672      	cpsid	i
  __disable_irq ();
  return status;
10002012:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10002014:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10002016:	4b0c      	ldr	r3, [pc, #48]	; (10002048 <__aeabi_uidiv+0x4c>)
10002018:	2204      	movs	r2, #4
1000201a:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
1000201c:	4b0a      	ldr	r3, [pc, #40]	; (10002048 <__aeabi_uidiv+0x4c>)
1000201e:	687a      	ldr	r2, [r7, #4]
10002020:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10002022:	4b09      	ldr	r3, [pc, #36]	; (10002048 <__aeabi_uidiv+0x4c>)
10002024:	683a      	ldr	r2, [r7, #0]
10002026:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10002028:	4b07      	ldr	r3, [pc, #28]	; (10002048 <__aeabi_uidiv+0x4c>)
1000202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000202c:	61bb      	str	r3, [r7, #24]
1000202e:	69fb      	ldr	r3, [r7, #28]
10002030:	60fb      	str	r3, [r7, #12]
10002032:	68fb      	ldr	r3, [r7, #12]
10002034:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002036:	68bb      	ldr	r3, [r7, #8]
10002038:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
1000203c:	69bb      	ldr	r3, [r7, #24]
}
1000203e:	1c18      	adds	r0, r3, #0
10002040:	46bd      	mov	sp, r7
10002042:	b008      	add	sp, #32
10002044:	bd80      	pop	{r7, pc}
10002046:	46c0      	nop			; (mov r8, r8)
10002048:	40030000 	.word	0x40030000

1000204c <__aeabi_uidivmod>:
  return result;
}

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
1000204c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000204e:	b08d      	sub	sp, #52	; 0x34
10002050:	af00      	add	r7, sp, #0
10002052:	6078      	str	r0, [r7, #4]
10002054:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10002056:	f3ef 8210 	mrs	r2, PRIMASK
1000205a:	617a      	str	r2, [r7, #20]
  return(result);
1000205c:	697a      	ldr	r2, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000205e:	613a      	str	r2, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10002060:	b672      	cpsid	i
  __disable_irq ();
  return status;
10002062:	693a      	ldr	r2, [r7, #16]
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
10002064:	62fa      	str	r2, [r7, #44]	; 0x2c

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10002066:	4a15      	ldr	r2, [pc, #84]	; (100020bc <__aeabi_uidivmod+0x70>)
10002068:	2104      	movs	r1, #4
1000206a:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
1000206c:	4a13      	ldr	r2, [pc, #76]	; (100020bc <__aeabi_uidivmod+0x70>)
1000206e:	6879      	ldr	r1, [r7, #4]
10002070:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
10002072:	4a12      	ldr	r2, [pc, #72]	; (100020bc <__aeabi_uidivmod+0x70>)
10002074:	6839      	ldr	r1, [r7, #0]
10002076:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;
10002078:	4a10      	ldr	r2, [pc, #64]	; (100020bc <__aeabi_uidivmod+0x70>)
1000207a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1000207c:	623a      	str	r2, [r7, #32]
1000207e:	2200      	movs	r2, #0
10002080:	627a      	str	r2, [r7, #36]	; 0x24
  quot = (uint64_t)MATH->QUOT;
10002082:	4a0e      	ldr	r2, [pc, #56]	; (100020bc <__aeabi_uidivmod+0x70>)
10002084:	6a92      	ldr	r2, [r2, #40]	; 0x28
10002086:	61ba      	str	r2, [r7, #24]
10002088:	2200      	movs	r2, #0
1000208a:	61fa      	str	r2, [r7, #28]
1000208c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000208e:	60fa      	str	r2, [r7, #12]
10002090:	68fa      	ldr	r2, [r7, #12]
10002092:	60ba      	str	r2, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002094:	68ba      	ldr	r2, [r7, #8]
10002096:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((remainder << 32) | quot);
1000209a:	6a3a      	ldr	r2, [r7, #32]
1000209c:	0014      	movs	r4, r2
1000209e:	2200      	movs	r2, #0
100020a0:	1c13      	adds	r3, r2, #0
100020a2:	69ba      	ldr	r2, [r7, #24]
100020a4:	431a      	orrs	r2, r3
100020a6:	1c15      	adds	r5, r2, #0
100020a8:	69fa      	ldr	r2, [r7, #28]
100020aa:	4322      	orrs	r2, r4
100020ac:	1c16      	adds	r6, r2, #0
100020ae:	1c2b      	adds	r3, r5, #0
100020b0:	1c34      	adds	r4, r6, #0
}
100020b2:	1c18      	adds	r0, r3, #0
100020b4:	1c21      	adds	r1, r4, #0
100020b6:	46bd      	mov	sp, r7
100020b8:	b00d      	add	sp, #52	; 0x34
100020ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100020bc:	40030000 	.word	0x40030000

100020c0 <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
100020c0:	b580      	push	{r7, lr}
100020c2:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
100020c4:	2380      	movs	r3, #128	; 0x80
100020c6:	009b      	lsls	r3, r3, #2
100020c8:	1c18      	adds	r0, r3, #0
100020ca:	f7ff f9f1 	bl	100014b0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
#endif
}
100020ce:	46bd      	mov	sp, r7
100020d0:	bd80      	pop	{r7, pc}
100020d2:	46c0      	nop			; (mov r8, r8)

100020d4 <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
100020d4:	b580      	push	{r7, lr}
100020d6:	b082      	sub	sp, #8
100020d8:	af00      	add	r7, sp, #0
100020da:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
100020dc:	f7ff fff0 	bl	100020c0 <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
100020e0:	4a07      	ldr	r2, [pc, #28]	; (10002100 <XMC_WDT_Init+0x2c>)
100020e2:	687b      	ldr	r3, [r7, #4]
100020e4:	689b      	ldr	r3, [r3, #8]
100020e6:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
100020e8:	4a05      	ldr	r2, [pc, #20]	; (10002100 <XMC_WDT_Init+0x2c>)
100020ea:	687b      	ldr	r3, [r7, #4]
100020ec:	685b      	ldr	r3, [r3, #4]
100020ee:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
100020f0:	4a03      	ldr	r2, [pc, #12]	; (10002100 <XMC_WDT_Init+0x2c>)
100020f2:	687b      	ldr	r3, [r7, #4]
100020f4:	681b      	ldr	r3, [r3, #0]
100020f6:	6153      	str	r3, [r2, #20]
}
100020f8:	46bd      	mov	sp, r7
100020fa:	b002      	add	sp, #8
100020fc:	bd80      	pop	{r7, pc}
100020fe:	46c0      	nop			; (mov r8, r8)
10002100:	40020000 	.word	0x40020000

10002104 <_init>:
  }
}

/* Init */
void _init(void)
{}
10002104:	b580      	push	{r7, lr}
10002106:	af00      	add	r7, sp, #0
10002108:	46bd      	mov	sp, r7
1000210a:	bd80      	pop	{r7, pc}

1000210c <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
1000210c:	b580      	push	{r7, lr}
1000210e:	b084      	sub	sp, #16
10002110:	af00      	add	r7, sp, #0
10002112:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
10002114:	230f      	movs	r3, #15
10002116:	18fb      	adds	r3, r7, r3
10002118:	2200      	movs	r2, #0
1000211a:	701a      	strb	r2, [r3, #0]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
1000211c:	687b      	ldr	r3, [r7, #4]
1000211e:	791b      	ldrb	r3, [r3, #4]
10002120:	2201      	movs	r2, #1
10002122:	4053      	eors	r3, r2
10002124:	b2db      	uxtb	r3, r3
10002126:	2b00      	cmp	r3, #0
10002128:	d007      	beq.n	1000213a <WATCHDOG_Init+0x2e>
      status = WATCHDOG_lPrewarning_Configure(handle);
      if(WATCHDOG_STATUS_FAILURE != status)
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
1000212a:	687b      	ldr	r3, [r7, #4]
1000212c:	681b      	ldr	r3, [r3, #0]
1000212e:	1c18      	adds	r0, r3, #0
10002130:	f7ff ffd0 	bl	100020d4 <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
10002134:	687b      	ldr	r3, [r7, #4]
10002136:	2201      	movs	r2, #1
10002138:	711a      	strb	r2, [r3, #4]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
1000213a:	230f      	movs	r3, #15
1000213c:	18fb      	adds	r3, r7, r3
1000213e:	781b      	ldrb	r3, [r3, #0]
}
10002140:	1c18      	adds	r0, r3, #0
10002142:	46bd      	mov	sp, r7
10002144:	b004      	add	sp, #16
10002146:	bd80      	pop	{r7, pc}

10002148 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10002148:	b580      	push	{r7, lr}
1000214a:	b082      	sub	sp, #8
1000214c:	af00      	add	r7, sp, #0
1000214e:	6078      	str	r0, [r7, #4]
10002150:	1c0a      	adds	r2, r1, #0
10002152:	1cfb      	adds	r3, r7, #3
10002154:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
10002156:	1cfb      	adds	r3, r7, #3
10002158:	781b      	ldrb	r3, [r3, #0]
1000215a:	2201      	movs	r2, #1
1000215c:	409a      	lsls	r2, r3
1000215e:	687b      	ldr	r3, [r7, #4]
10002160:	60da      	str	r2, [r3, #12]
}
10002162:	46bd      	mov	sp, r7
10002164:	b002      	add	sp, #8
10002166:	bd80      	pop	{r7, pc}

10002168 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10002168:	b580      	push	{r7, lr}
1000216a:	b082      	sub	sp, #8
1000216c:	af00      	add	r7, sp, #0
1000216e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10002170:	687b      	ldr	r3, [r7, #4]
10002172:	2201      	movs	r2, #1
10002174:	60da      	str	r2, [r3, #12]
}
10002176:	46bd      	mov	sp, r7
10002178:	b002      	add	sp, #8
1000217a:	bd80      	pop	{r7, pc}

1000217c <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
1000217c:	b580      	push	{r7, lr}
1000217e:	b082      	sub	sp, #8
10002180:	af00      	add	r7, sp, #0
10002182:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
10002184:	687b      	ldr	r3, [r7, #4]
10002186:	2202      	movs	r2, #2
10002188:	611a      	str	r2, [r3, #16]
}
1000218a:	46bd      	mov	sp, r7
1000218c:	b002      	add	sp, #8
1000218e:	bd80      	pop	{r7, pc}

10002190 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10002190:	b580      	push	{r7, lr}
10002192:	b082      	sub	sp, #8
10002194:	af00      	add	r7, sp, #0
10002196:	6078      	str	r0, [r7, #4]
10002198:	1c0a      	adds	r2, r1, #0
1000219a:	1cbb      	adds	r3, r7, #2
1000219c:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
1000219e:	1cbb      	adds	r3, r7, #2
100021a0:	881a      	ldrh	r2, [r3, #0]
100021a2:	687b      	ldr	r3, [r7, #4]
100021a4:	635a      	str	r2, [r3, #52]	; 0x34
}
100021a6:	46bd      	mov	sp, r7
100021a8:	b002      	add	sp, #8
100021aa:	bd80      	pop	{r7, pc}

100021ac <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
100021ac:	b580      	push	{r7, lr}
100021ae:	b082      	sub	sp, #8
100021b0:	af00      	add	r7, sp, #0
100021b2:	6078      	str	r0, [r7, #4]
100021b4:	1c0a      	adds	r2, r1, #0
100021b6:	1cbb      	adds	r3, r7, #2
100021b8:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
100021ba:	1cbb      	adds	r3, r7, #2
100021bc:	881a      	ldrh	r2, [r3, #0]
100021be:	687b      	ldr	r3, [r7, #4]
100021c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
100021c2:	46bd      	mov	sp, r7
100021c4:	b002      	add	sp, #8
100021c6:	bd80      	pop	{r7, pc}

100021c8 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
100021c8:	b580      	push	{r7, lr}
100021ca:	b082      	sub	sp, #8
100021cc:	af00      	add	r7, sp, #0
100021ce:	6078      	str	r0, [r7, #4]
100021d0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
100021d2:	687b      	ldr	r3, [r7, #4]
100021d4:	683a      	ldr	r2, [r7, #0]
100021d6:	611a      	str	r2, [r3, #16]
}
100021d8:	46bd      	mov	sp, r7
100021da:	b002      	add	sp, #8
100021dc:	bd80      	pop	{r7, pc}
100021de:	46c0      	nop			; (mov r8, r8)

100021e0 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
100021e0:	b580      	push	{r7, lr}
100021e2:	b082      	sub	sp, #8
100021e4:	af00      	add	r7, sp, #0
100021e6:	6078      	str	r0, [r7, #4]
100021e8:	1c0a      	adds	r2, r1, #0
100021ea:	1cfb      	adds	r3, r7, #3
100021ec:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
100021ee:	687b      	ldr	r3, [r7, #4]
100021f0:	22a4      	movs	r2, #164	; 0xa4
100021f2:	589a      	ldr	r2, [r3, r2]
100021f4:	1cfb      	adds	r3, r7, #3
100021f6:	781b      	ldrb	r3, [r3, #0]
100021f8:	2101      	movs	r1, #1
100021fa:	4099      	lsls	r1, r3
100021fc:	1c0b      	adds	r3, r1, #0
100021fe:	431a      	orrs	r2, r3
10002200:	687b      	ldr	r3, [r7, #4]
10002202:	21a4      	movs	r1, #164	; 0xa4
10002204:	505a      	str	r2, [r3, r1]
}
10002206:	46bd      	mov	sp, r7
10002208:	b002      	add	sp, #8
1000220a:	bd80      	pop	{r7, pc}

1000220c <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
1000220c:	b590      	push	{r4, r7, lr}
1000220e:	b085      	sub	sp, #20
10002210:	af00      	add	r7, sp, #0
10002212:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
10002214:	230f      	movs	r3, #15
10002216:	18fb      	adds	r3, r7, r3
10002218:	2200      	movs	r2, #0
1000221a:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
1000221c:	687b      	ldr	r3, [r7, #4]
1000221e:	2226      	movs	r2, #38	; 0x26
10002220:	5c9b      	ldrb	r3, [r3, r2]
10002222:	2201      	movs	r2, #1
10002224:	4053      	eors	r3, r2
10002226:	b2db      	uxtb	r3, r3
10002228:	2b00      	cmp	r3, #0
1000222a:	d00c      	beq.n	10002246 <TIMER_Init+0x3a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000222c:	687b      	ldr	r3, [r7, #4]
1000222e:	2221      	movs	r2, #33	; 0x21
10002230:	5c9b      	ldrb	r3, [r3, r2]
10002232:	2b00      	cmp	r3, #0
10002234:	d107      	bne.n	10002246 <TIMER_Init+0x3a>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
10002236:	230f      	movs	r3, #15
10002238:	18fc      	adds	r4, r7, r3
1000223a:	687b      	ldr	r3, [r7, #4]
1000223c:	1c18      	adds	r0, r3, #0
1000223e:	f000 f809 	bl	10002254 <TIMER_CCU4_lInit>
10002242:	1c03      	adds	r3, r0, #0
10002244:	7023      	strb	r3, [r4, #0]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
10002246:	230f      	movs	r3, #15
10002248:	18fb      	adds	r3, r7, r3
1000224a:	781b      	ldrb	r3, [r3, #0]
}
1000224c:	1c18      	adds	r0, r3, #0
1000224e:	46bd      	mov	sp, r7
10002250:	b005      	add	sp, #20
10002252:	bd90      	pop	{r4, r7, pc}

10002254 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
10002254:	b590      	push	{r4, r7, lr}
10002256:	b085      	sub	sp, #20
10002258:	af00      	add	r7, sp, #0
1000225a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
1000225c:	687b      	ldr	r3, [r7, #4]
1000225e:	691b      	ldr	r3, [r3, #16]
10002260:	220f      	movs	r2, #15
10002262:	18bc      	adds	r4, r7, r2
10002264:	1c18      	adds	r0, r3, #0
10002266:	f000 fa17 	bl	10002698 <GLOBAL_CCU4_Init>
1000226a:	1c03      	adds	r3, r0, #0
1000226c:	7023      	strb	r3, [r4, #0]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
1000226e:	687b      	ldr	r3, [r7, #4]
10002270:	691b      	ldr	r3, [r3, #16]
10002272:	689a      	ldr	r2, [r3, #8]
10002274:	687b      	ldr	r3, [r7, #4]
10002276:	7e1b      	ldrb	r3, [r3, #24]
10002278:	1c10      	adds	r0, r2, #0
1000227a:	1c19      	adds	r1, r3, #0
1000227c:	f7ff ff64 	bl	10002148 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
10002280:	687b      	ldr	r3, [r7, #4]
10002282:	695a      	ldr	r2, [r3, #20]
10002284:	687b      	ldr	r3, [r7, #4]
10002286:	69db      	ldr	r3, [r3, #28]
10002288:	1c10      	adds	r0, r2, #0
1000228a:	1c19      	adds	r1, r3, #0
1000228c:	f7ff fdb8 	bl	10001e00 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
10002290:	687b      	ldr	r3, [r7, #4]
10002292:	1c18      	adds	r0, r3, #0
10002294:	f000 f830 	bl	100022f8 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
10002298:	687b      	ldr	r3, [r7, #4]
1000229a:	2225      	movs	r2, #37	; 0x25
1000229c:	5c9b      	ldrb	r3, [r3, r2]
1000229e:	2b00      	cmp	r3, #0
100022a0:	d00f      	beq.n	100022c2 <TIMER_CCU4_lInit+0x6e>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
100022a2:	687b      	ldr	r3, [r7, #4]
100022a4:	6959      	ldr	r1, [r3, #20]
100022a6:	687b      	ldr	r3, [r7, #4]
100022a8:	2220      	movs	r2, #32
100022aa:	5c9b      	ldrb	r3, [r3, r2]
100022ac:	1c08      	adds	r0, r1, #0
100022ae:	2100      	movs	r1, #0
100022b0:	1c1a      	adds	r2, r3, #0
100022b2:	f7ff fdd9 	bl	10001e68 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100022b6:	687b      	ldr	r3, [r7, #4]
100022b8:	695b      	ldr	r3, [r3, #20]
100022ba:	1c18      	adds	r0, r3, #0
100022bc:	2100      	movs	r1, #0
100022be:	f7ff ff8f 	bl	100021e0 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
100022c2:	687b      	ldr	r3, [r7, #4]
100022c4:	695b      	ldr	r3, [r3, #20]
100022c6:	1c18      	adds	r0, r3, #0
100022c8:	f7ff ff58 	bl	1000217c <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
100022cc:	687b      	ldr	r3, [r7, #4]
100022ce:	2226      	movs	r2, #38	; 0x26
100022d0:	2101      	movs	r1, #1
100022d2:	5499      	strb	r1, [r3, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
100022d4:	687b      	ldr	r3, [r7, #4]
100022d6:	2224      	movs	r2, #36	; 0x24
100022d8:	5c9b      	ldrb	r3, [r3, r2]
100022da:	2b00      	cmp	r3, #0
100022dc:	d004      	beq.n	100022e8 <TIMER_CCU4_lInit+0x94>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
100022de:	687b      	ldr	r3, [r7, #4]
100022e0:	695b      	ldr	r3, [r3, #20]
100022e2:	1c18      	adds	r0, r3, #0
100022e4:	f7ff ff40 	bl	10002168 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
100022e8:	230f      	movs	r3, #15
100022ea:	18fb      	adds	r3, r7, r3
100022ec:	781b      	ldrb	r3, [r3, #0]
}
100022ee:	1c18      	adds	r0, r3, #0
100022f0:	46bd      	mov	sp, r7
100022f2:	b005      	add	sp, #20
100022f4:	bd90      	pop	{r4, r7, pc}
100022f6:	46c0      	nop			; (mov r8, r8)

100022f8 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
100022f8:	b580      	push	{r7, lr}
100022fa:	b082      	sub	sp, #8
100022fc:	af00      	add	r7, sp, #0
100022fe:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
10002300:	687b      	ldr	r3, [r7, #4]
10002302:	695a      	ldr	r2, [r3, #20]
10002304:	687b      	ldr	r3, [r7, #4]
10002306:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
10002308:	1c10      	adds	r0, r2, #0
1000230a:	1c19      	adds	r1, r3, #0
1000230c:	f7ff ff40 	bl	10002190 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
10002310:	687b      	ldr	r3, [r7, #4]
10002312:	695b      	ldr	r3, [r3, #20]
10002314:	1c18      	adds	r0, r3, #0
10002316:	2100      	movs	r1, #0
10002318:	f7ff ff48 	bl	100021ac <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
1000231c:	687b      	ldr	r3, [r7, #4]
1000231e:	691b      	ldr	r3, [r3, #16]
10002320:	689a      	ldr	r2, [r3, #8]
10002322:	687b      	ldr	r3, [r7, #4]
10002324:	68db      	ldr	r3, [r3, #12]
10002326:	1c10      	adds	r0, r2, #0
10002328:	1c19      	adds	r1, r3, #0
1000232a:	f7ff ff4d 	bl	100021c8 <XMC_CCU4_EnableShadowTransfer>
}
1000232e:	46bd      	mov	sp, r7
10002330:	b002      	add	sp, #8
10002332:	bd80      	pop	{r7, pc}

10002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002334:	b580      	push	{r7, lr}
10002336:	b082      	sub	sp, #8
10002338:	af00      	add	r7, sp, #0
1000233a:	1c02      	adds	r2, r0, #0
1000233c:	1dfb      	adds	r3, r7, #7
1000233e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002340:	1dfb      	adds	r3, r7, #7
10002342:	781b      	ldrb	r3, [r3, #0]
10002344:	2b7f      	cmp	r3, #127	; 0x7f
10002346:	d809      	bhi.n	1000235c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002348:	4b06      	ldr	r3, [pc, #24]	; (10002364 <__NVIC_EnableIRQ+0x30>)
1000234a:	1dfa      	adds	r2, r7, #7
1000234c:	7812      	ldrb	r2, [r2, #0]
1000234e:	1c11      	adds	r1, r2, #0
10002350:	221f      	movs	r2, #31
10002352:	400a      	ands	r2, r1
10002354:	2101      	movs	r1, #1
10002356:	4091      	lsls	r1, r2
10002358:	1c0a      	adds	r2, r1, #0
1000235a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
1000235c:	46bd      	mov	sp, r7
1000235e:	b002      	add	sp, #8
10002360:	bd80      	pop	{r7, pc}
10002362:	46c0      	nop			; (mov r8, r8)
10002364:	e000e100 	.word	0xe000e100

10002368 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10002368:	b580      	push	{r7, lr}
1000236a:	b082      	sub	sp, #8
1000236c:	af00      	add	r7, sp, #0
1000236e:	1c02      	adds	r2, r0, #0
10002370:	1dfb      	adds	r3, r7, #7
10002372:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002374:	1dfb      	adds	r3, r7, #7
10002376:	781b      	ldrb	r3, [r3, #0]
10002378:	2b7f      	cmp	r3, #127	; 0x7f
1000237a:	d80a      	bhi.n	10002392 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000237c:	4906      	ldr	r1, [pc, #24]	; (10002398 <__NVIC_ClearPendingIRQ+0x30>)
1000237e:	1dfb      	adds	r3, r7, #7
10002380:	781b      	ldrb	r3, [r3, #0]
10002382:	1c1a      	adds	r2, r3, #0
10002384:	231f      	movs	r3, #31
10002386:	4013      	ands	r3, r2
10002388:	2201      	movs	r2, #1
1000238a:	409a      	lsls	r2, r3
1000238c:	23c0      	movs	r3, #192	; 0xc0
1000238e:	005b      	lsls	r3, r3, #1
10002390:	50ca      	str	r2, [r1, r3]
  }
}
10002392:	46bd      	mov	sp, r7
10002394:	b002      	add	sp, #8
10002396:	bd80      	pop	{r7, pc}
10002398:	e000e100 	.word	0xe000e100

1000239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000239c:	b5b0      	push	{r4, r5, r7, lr}
1000239e:	b082      	sub	sp, #8
100023a0:	af00      	add	r7, sp, #0
100023a2:	1c02      	adds	r2, r0, #0
100023a4:	6039      	str	r1, [r7, #0]
100023a6:	1dfb      	adds	r3, r7, #7
100023a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100023aa:	1dfb      	adds	r3, r7, #7
100023ac:	781b      	ldrb	r3, [r3, #0]
100023ae:	2b7f      	cmp	r3, #127	; 0x7f
100023b0:	d827      	bhi.n	10002402 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100023b2:	4c2d      	ldr	r4, [pc, #180]	; (10002468 <__NVIC_SetPriority+0xcc>)
100023b4:	1dfb      	adds	r3, r7, #7
100023b6:	781b      	ldrb	r3, [r3, #0]
100023b8:	b25b      	sxtb	r3, r3
100023ba:	089b      	lsrs	r3, r3, #2
100023bc:	492a      	ldr	r1, [pc, #168]	; (10002468 <__NVIC_SetPriority+0xcc>)
100023be:	1dfa      	adds	r2, r7, #7
100023c0:	7812      	ldrb	r2, [r2, #0]
100023c2:	b252      	sxtb	r2, r2
100023c4:	0892      	lsrs	r2, r2, #2
100023c6:	32c0      	adds	r2, #192	; 0xc0
100023c8:	0092      	lsls	r2, r2, #2
100023ca:	5852      	ldr	r2, [r2, r1]
100023cc:	1df9      	adds	r1, r7, #7
100023ce:	7809      	ldrb	r1, [r1, #0]
100023d0:	1c08      	adds	r0, r1, #0
100023d2:	2103      	movs	r1, #3
100023d4:	4001      	ands	r1, r0
100023d6:	00c9      	lsls	r1, r1, #3
100023d8:	1c08      	adds	r0, r1, #0
100023da:	21ff      	movs	r1, #255	; 0xff
100023dc:	4081      	lsls	r1, r0
100023de:	43c9      	mvns	r1, r1
100023e0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100023e2:	683a      	ldr	r2, [r7, #0]
100023e4:	0192      	lsls	r2, r2, #6
100023e6:	20ff      	movs	r0, #255	; 0xff
100023e8:	4002      	ands	r2, r0
100023ea:	1df8      	adds	r0, r7, #7
100023ec:	7800      	ldrb	r0, [r0, #0]
100023ee:	1c05      	adds	r5, r0, #0
100023f0:	2003      	movs	r0, #3
100023f2:	4028      	ands	r0, r5
100023f4:	00c0      	lsls	r0, r0, #3
100023f6:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100023f8:	430a      	orrs	r2, r1
100023fa:	33c0      	adds	r3, #192	; 0xc0
100023fc:	009b      	lsls	r3, r3, #2
100023fe:	511a      	str	r2, [r3, r4]
10002400:	e02e      	b.n	10002460 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002402:	4c1a      	ldr	r4, [pc, #104]	; (1000246c <__NVIC_SetPriority+0xd0>)
10002404:	1dfb      	adds	r3, r7, #7
10002406:	781b      	ldrb	r3, [r3, #0]
10002408:	1c1a      	adds	r2, r3, #0
1000240a:	230f      	movs	r3, #15
1000240c:	4013      	ands	r3, r2
1000240e:	3b08      	subs	r3, #8
10002410:	0899      	lsrs	r1, r3, #2
10002412:	4a16      	ldr	r2, [pc, #88]	; (1000246c <__NVIC_SetPriority+0xd0>)
10002414:	1dfb      	adds	r3, r7, #7
10002416:	781b      	ldrb	r3, [r3, #0]
10002418:	1c18      	adds	r0, r3, #0
1000241a:	230f      	movs	r3, #15
1000241c:	4003      	ands	r3, r0
1000241e:	3b08      	subs	r3, #8
10002420:	089b      	lsrs	r3, r3, #2
10002422:	3306      	adds	r3, #6
10002424:	009b      	lsls	r3, r3, #2
10002426:	18d3      	adds	r3, r2, r3
10002428:	685b      	ldr	r3, [r3, #4]
1000242a:	1dfa      	adds	r2, r7, #7
1000242c:	7812      	ldrb	r2, [r2, #0]
1000242e:	1c10      	adds	r0, r2, #0
10002430:	2203      	movs	r2, #3
10002432:	4002      	ands	r2, r0
10002434:	00d2      	lsls	r2, r2, #3
10002436:	1c10      	adds	r0, r2, #0
10002438:	22ff      	movs	r2, #255	; 0xff
1000243a:	4082      	lsls	r2, r0
1000243c:	43d2      	mvns	r2, r2
1000243e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002440:	683b      	ldr	r3, [r7, #0]
10002442:	019b      	lsls	r3, r3, #6
10002444:	20ff      	movs	r0, #255	; 0xff
10002446:	4003      	ands	r3, r0
10002448:	1df8      	adds	r0, r7, #7
1000244a:	7800      	ldrb	r0, [r0, #0]
1000244c:	1c05      	adds	r5, r0, #0
1000244e:	2003      	movs	r0, #3
10002450:	4028      	ands	r0, r5
10002452:	00c0      	lsls	r0, r0, #3
10002454:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002456:	431a      	orrs	r2, r3
10002458:	1d8b      	adds	r3, r1, #6
1000245a:	009b      	lsls	r3, r3, #2
1000245c:	18e3      	adds	r3, r4, r3
1000245e:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002460:	46bd      	mov	sp, r7
10002462:	b002      	add	sp, #8
10002464:	bdb0      	pop	{r4, r5, r7, pc}
10002466:	46c0      	nop			; (mov r8, r8)
10002468:	e000e100 	.word	0xe000e100
1000246c:	e000ed00 	.word	0xe000ed00

10002470 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
10002470:	b580      	push	{r7, lr}
10002472:	b082      	sub	sp, #8
10002474:	af00      	add	r7, sp, #0
10002476:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
10002478:	687b      	ldr	r3, [r7, #4]
1000247a:	6859      	ldr	r1, [r3, #4]
1000247c:	687b      	ldr	r3, [r7, #4]
1000247e:	7f9a      	ldrb	r2, [r3, #30]
10002480:	687b      	ldr	r3, [r7, #4]
10002482:	3308      	adds	r3, #8
10002484:	1c08      	adds	r0, r1, #0
10002486:	1c11      	adds	r1, r2, #0
10002488:	1c1a      	adds	r2, r3, #0
1000248a:	f7fe fe85 	bl	10001198 <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
1000248e:	687b      	ldr	r3, [r7, #4]
10002490:	6819      	ldr	r1, [r3, #0]
10002492:	687b      	ldr	r3, [r7, #4]
10002494:	7f1a      	ldrb	r2, [r3, #28]
10002496:	687b      	ldr	r3, [r7, #4]
10002498:	3310      	adds	r3, #16
1000249a:	1c08      	adds	r0, r1, #0
1000249c:	1c11      	adds	r1, r2, #0
1000249e:	1c1a      	adds	r2, r3, #0
100024a0:	f7ff fd36 	bl	10001f10 <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
100024a4:	687b      	ldr	r3, [r7, #4]
100024a6:	681a      	ldr	r2, [r3, #0]
100024a8:	687b      	ldr	r3, [r7, #4]
100024aa:	7f5b      	ldrb	r3, [r3, #29]
100024ac:	1c10      	adds	r0, r2, #0
100024ae:	1c19      	adds	r1, r3, #0
100024b0:	2201      	movs	r2, #1
100024b2:	f7ff fd5b 	bl	10001f6c <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
100024b6:	687b      	ldr	r3, [r7, #4]
100024b8:	7e9a      	ldrb	r2, [r3, #26]
100024ba:	687b      	ldr	r3, [r7, #4]
100024bc:	7edb      	ldrb	r3, [r3, #27]
100024be:	1c19      	adds	r1, r3, #0
100024c0:	b253      	sxtb	r3, r2
100024c2:	1c18      	adds	r0, r3, #0
100024c4:	f7ff ff6a 	bl	1000239c <__NVIC_SetPriority>
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
100024c8:	687b      	ldr	r3, [r7, #4]
100024ca:	7e9b      	ldrb	r3, [r3, #26]
100024cc:	b2da      	uxtb	r2, r3
100024ce:	687b      	ldr	r3, [r7, #4]
100024d0:	8b1b      	ldrh	r3, [r3, #24]
100024d2:	1c10      	adds	r0, r2, #0
100024d4:	1c19      	adds	r1, r3, #0
100024d6:	f7ff f8c5 	bl	10001664 <XMC_SCU_SetInterruptControl>
#endif
  if (true == handle->enable_at_init)
100024da:	687b      	ldr	r3, [r7, #4]
100024dc:	7fdb      	ldrb	r3, [r3, #31]
100024de:	2b00      	cmp	r3, #0
100024e0:	d00b      	beq.n	100024fa <PIN_INTERRUPT_Init+0x8a>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
100024e2:	687b      	ldr	r3, [r7, #4]
100024e4:	7e9b      	ldrb	r3, [r3, #26]
100024e6:	b25b      	sxtb	r3, r3
100024e8:	1c18      	adds	r0, r3, #0
100024ea:	f7ff ff3d 	bl	10002368 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
100024ee:	687b      	ldr	r3, [r7, #4]
100024f0:	7e9b      	ldrb	r3, [r3, #26]
100024f2:	b25b      	sxtb	r3, r3
100024f4:	1c18      	adds	r0, r3, #0
100024f6:	f7ff ff1d 	bl	10002334 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
100024fa:	2300      	movs	r3, #0
}
100024fc:	1c18      	adds	r0, r3, #0
100024fe:	46bd      	mov	sp, r7
10002500:	b002      	add	sp, #8
10002502:	bd80      	pop	{r7, pc}

10002504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002504:	b580      	push	{r7, lr}
10002506:	b082      	sub	sp, #8
10002508:	af00      	add	r7, sp, #0
1000250a:	1c02      	adds	r2, r0, #0
1000250c:	1dfb      	adds	r3, r7, #7
1000250e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002510:	1dfb      	adds	r3, r7, #7
10002512:	781b      	ldrb	r3, [r3, #0]
10002514:	2b7f      	cmp	r3, #127	; 0x7f
10002516:	d809      	bhi.n	1000252c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002518:	4b06      	ldr	r3, [pc, #24]	; (10002534 <__NVIC_EnableIRQ+0x30>)
1000251a:	1dfa      	adds	r2, r7, #7
1000251c:	7812      	ldrb	r2, [r2, #0]
1000251e:	1c11      	adds	r1, r2, #0
10002520:	221f      	movs	r2, #31
10002522:	400a      	ands	r2, r1
10002524:	2101      	movs	r1, #1
10002526:	4091      	lsls	r1, r2
10002528:	1c0a      	adds	r2, r1, #0
1000252a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
1000252c:	46bd      	mov	sp, r7
1000252e:	b002      	add	sp, #8
10002530:	bd80      	pop	{r7, pc}
10002532:	46c0      	nop			; (mov r8, r8)
10002534:	e000e100 	.word	0xe000e100

10002538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002538:	b5b0      	push	{r4, r5, r7, lr}
1000253a:	b082      	sub	sp, #8
1000253c:	af00      	add	r7, sp, #0
1000253e:	1c02      	adds	r2, r0, #0
10002540:	6039      	str	r1, [r7, #0]
10002542:	1dfb      	adds	r3, r7, #7
10002544:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002546:	1dfb      	adds	r3, r7, #7
10002548:	781b      	ldrb	r3, [r3, #0]
1000254a:	2b7f      	cmp	r3, #127	; 0x7f
1000254c:	d827      	bhi.n	1000259e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000254e:	4c2d      	ldr	r4, [pc, #180]	; (10002604 <__NVIC_SetPriority+0xcc>)
10002550:	1dfb      	adds	r3, r7, #7
10002552:	781b      	ldrb	r3, [r3, #0]
10002554:	b25b      	sxtb	r3, r3
10002556:	089b      	lsrs	r3, r3, #2
10002558:	492a      	ldr	r1, [pc, #168]	; (10002604 <__NVIC_SetPriority+0xcc>)
1000255a:	1dfa      	adds	r2, r7, #7
1000255c:	7812      	ldrb	r2, [r2, #0]
1000255e:	b252      	sxtb	r2, r2
10002560:	0892      	lsrs	r2, r2, #2
10002562:	32c0      	adds	r2, #192	; 0xc0
10002564:	0092      	lsls	r2, r2, #2
10002566:	5852      	ldr	r2, [r2, r1]
10002568:	1df9      	adds	r1, r7, #7
1000256a:	7809      	ldrb	r1, [r1, #0]
1000256c:	1c08      	adds	r0, r1, #0
1000256e:	2103      	movs	r1, #3
10002570:	4001      	ands	r1, r0
10002572:	00c9      	lsls	r1, r1, #3
10002574:	1c08      	adds	r0, r1, #0
10002576:	21ff      	movs	r1, #255	; 0xff
10002578:	4081      	lsls	r1, r0
1000257a:	43c9      	mvns	r1, r1
1000257c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000257e:	683a      	ldr	r2, [r7, #0]
10002580:	0192      	lsls	r2, r2, #6
10002582:	20ff      	movs	r0, #255	; 0xff
10002584:	4002      	ands	r2, r0
10002586:	1df8      	adds	r0, r7, #7
10002588:	7800      	ldrb	r0, [r0, #0]
1000258a:	1c05      	adds	r5, r0, #0
1000258c:	2003      	movs	r0, #3
1000258e:	4028      	ands	r0, r5
10002590:	00c0      	lsls	r0, r0, #3
10002592:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002594:	430a      	orrs	r2, r1
10002596:	33c0      	adds	r3, #192	; 0xc0
10002598:	009b      	lsls	r3, r3, #2
1000259a:	511a      	str	r2, [r3, r4]
1000259c:	e02e      	b.n	100025fc <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000259e:	4c1a      	ldr	r4, [pc, #104]	; (10002608 <__NVIC_SetPriority+0xd0>)
100025a0:	1dfb      	adds	r3, r7, #7
100025a2:	781b      	ldrb	r3, [r3, #0]
100025a4:	1c1a      	adds	r2, r3, #0
100025a6:	230f      	movs	r3, #15
100025a8:	4013      	ands	r3, r2
100025aa:	3b08      	subs	r3, #8
100025ac:	0899      	lsrs	r1, r3, #2
100025ae:	4a16      	ldr	r2, [pc, #88]	; (10002608 <__NVIC_SetPriority+0xd0>)
100025b0:	1dfb      	adds	r3, r7, #7
100025b2:	781b      	ldrb	r3, [r3, #0]
100025b4:	1c18      	adds	r0, r3, #0
100025b6:	230f      	movs	r3, #15
100025b8:	4003      	ands	r3, r0
100025ba:	3b08      	subs	r3, #8
100025bc:	089b      	lsrs	r3, r3, #2
100025be:	3306      	adds	r3, #6
100025c0:	009b      	lsls	r3, r3, #2
100025c2:	18d3      	adds	r3, r2, r3
100025c4:	685b      	ldr	r3, [r3, #4]
100025c6:	1dfa      	adds	r2, r7, #7
100025c8:	7812      	ldrb	r2, [r2, #0]
100025ca:	1c10      	adds	r0, r2, #0
100025cc:	2203      	movs	r2, #3
100025ce:	4002      	ands	r2, r0
100025d0:	00d2      	lsls	r2, r2, #3
100025d2:	1c10      	adds	r0, r2, #0
100025d4:	22ff      	movs	r2, #255	; 0xff
100025d6:	4082      	lsls	r2, r0
100025d8:	43d2      	mvns	r2, r2
100025da:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100025dc:	683b      	ldr	r3, [r7, #0]
100025de:	019b      	lsls	r3, r3, #6
100025e0:	20ff      	movs	r0, #255	; 0xff
100025e2:	4003      	ands	r3, r0
100025e4:	1df8      	adds	r0, r7, #7
100025e6:	7800      	ldrb	r0, [r0, #0]
100025e8:	1c05      	adds	r5, r0, #0
100025ea:	2003      	movs	r0, #3
100025ec:	4028      	ands	r0, r5
100025ee:	00c0      	lsls	r0, r0, #3
100025f0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100025f2:	431a      	orrs	r2, r3
100025f4:	1d8b      	adds	r3, r1, #6
100025f6:	009b      	lsls	r3, r3, #2
100025f8:	18e3      	adds	r3, r4, r3
100025fa:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100025fc:	46bd      	mov	sp, r7
100025fe:	b002      	add	sp, #8
10002600:	bdb0      	pop	{r4, r5, r7, pc}
10002602:	46c0      	nop			; (mov r8, r8)
10002604:	e000e100 	.word	0xe000e100
10002608:	e000ed00 	.word	0xe000ed00

1000260c <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
1000260c:	b580      	push	{r7, lr}
1000260e:	b082      	sub	sp, #8
10002610:	af00      	add	r7, sp, #0
10002612:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
10002614:	687b      	ldr	r3, [r7, #4]
10002616:	789b      	ldrb	r3, [r3, #2]
10002618:	b25b      	sxtb	r3, r3
1000261a:	1c18      	adds	r0, r3, #0
1000261c:	f7ff ff72 	bl	10002504 <__NVIC_EnableIRQ>
}
10002620:	46bd      	mov	sp, r7
10002622:	b002      	add	sp, #8
10002624:	bd80      	pop	{r7, pc}
10002626:	46c0      	nop			; (mov r8, r8)

10002628 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
10002628:	b580      	push	{r7, lr}
1000262a:	b082      	sub	sp, #8
1000262c:	af00      	add	r7, sp, #0
1000262e:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
10002630:	687b      	ldr	r3, [r7, #4]
10002632:	789a      	ldrb	r2, [r3, #2]
10002634:	687b      	ldr	r3, [r7, #4]
10002636:	78db      	ldrb	r3, [r3, #3]
10002638:	1c19      	adds	r1, r3, #0
1000263a:	b253      	sxtb	r3, r2
1000263c:	1c18      	adds	r0, r3, #0
1000263e:	f7ff ff7b 	bl	10002538 <__NVIC_SetPriority>
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
10002642:	687b      	ldr	r3, [r7, #4]
10002644:	789b      	ldrb	r3, [r3, #2]
10002646:	b2da      	uxtb	r2, r3
10002648:	687b      	ldr	r3, [r7, #4]
1000264a:	789b      	ldrb	r3, [r3, #2]
1000264c:	b25b      	sxtb	r3, r3
1000264e:	021b      	lsls	r3, r3, #8
10002650:	b299      	uxth	r1, r3
10002652:	687b      	ldr	r3, [r7, #4]
10002654:	881b      	ldrh	r3, [r3, #0]
10002656:	b29b      	uxth	r3, r3
10002658:	430b      	orrs	r3, r1
1000265a:	b29b      	uxth	r3, r3
1000265c:	b29b      	uxth	r3, r3
1000265e:	1c10      	adds	r0, r2, #0
10002660:	1c19      	adds	r1, r3, #0
10002662:	f7fe ffff 	bl	10001664 <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
10002666:	687b      	ldr	r3, [r7, #4]
10002668:	791b      	ldrb	r3, [r3, #4]
1000266a:	2b00      	cmp	r3, #0
1000266c:	d003      	beq.n	10002676 <INTERRUPT_Init+0x4e>
  {
    INTERRUPT_Enable(handler);
1000266e:	687b      	ldr	r3, [r7, #4]
10002670:	1c18      	adds	r0, r3, #0
10002672:	f7ff ffcb 	bl	1000260c <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
10002676:	2300      	movs	r3, #0
}
10002678:	1c18      	adds	r0, r3, #0
1000267a:	46bd      	mov	sp, r7
1000267c:	b002      	add	sp, #8
1000267e:	bd80      	pop	{r7, pc}

10002680 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10002680:	b580      	push	{r7, lr}
10002682:	b082      	sub	sp, #8
10002684:	af00      	add	r7, sp, #0
10002686:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10002688:	687b      	ldr	r3, [r7, #4]
1000268a:	2280      	movs	r2, #128	; 0x80
1000268c:	0052      	lsls	r2, r2, #1
1000268e:	60da      	str	r2, [r3, #12]
}
10002690:	46bd      	mov	sp, r7
10002692:	b002      	add	sp, #8
10002694:	bd80      	pop	{r7, pc}
10002696:	46c0      	nop			; (mov r8, r8)

10002698 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10002698:	b580      	push	{r7, lr}
1000269a:	b082      	sub	sp, #8
1000269c:	af00      	add	r7, sp, #0
1000269e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
100026a0:	687b      	ldr	r3, [r7, #4]
100026a2:	7b5b      	ldrb	r3, [r3, #13]
100026a4:	2201      	movs	r2, #1
100026a6:	4053      	eors	r3, r2
100026a8:	b2db      	uxtb	r3, r3
100026aa:	2b00      	cmp	r3, #0
100026ac:	d00f      	beq.n	100026ce <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
100026ae:	687b      	ldr	r3, [r7, #4]
100026b0:	689a      	ldr	r2, [r3, #8]
100026b2:	687b      	ldr	r3, [r7, #4]
100026b4:	7b1b      	ldrb	r3, [r3, #12]
100026b6:	1c10      	adds	r0, r2, #0
100026b8:	1c19      	adds	r1, r3, #0
100026ba:	f7ff fb7d 	bl	10001db8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
100026be:	687b      	ldr	r3, [r7, #4]
100026c0:	689b      	ldr	r3, [r3, #8]
100026c2:	1c18      	adds	r0, r3, #0
100026c4:	f7ff ffdc 	bl	10002680 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
100026c8:	687b      	ldr	r3, [r7, #4]
100026ca:	2201      	movs	r2, #1
100026cc:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
100026ce:	2300      	movs	r3, #0
}
100026d0:	1c18      	adds	r0, r3, #0
100026d2:	46bd      	mov	sp, r7
100026d4:	b002      	add	sp, #8
100026d6:	bd80      	pop	{r7, pc}

100026d8 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
100026d8:	b580      	push	{r7, lr}
100026da:	b084      	sub	sp, #16
100026dc:	af00      	add	r7, sp, #0
100026de:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
100026e0:	230f      	movs	r3, #15
100026e2:	18fb      	adds	r3, r7, r3
100026e4:	2200      	movs	r2, #0
100026e6:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
100026e8:	687b      	ldr	r3, [r7, #4]
100026ea:	7a5b      	ldrb	r3, [r3, #9]
100026ec:	2201      	movs	r2, #1
100026ee:	4053      	eors	r3, r2
100026f0:	b2db      	uxtb	r3, r3
100026f2:	2b00      	cmp	r3, #0
100026f4:	d011      	beq.n	1000271a <GLOBAL_CAN_Init+0x42>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
100026f6:	687b      	ldr	r3, [r7, #4]
100026f8:	6859      	ldr	r1, [r3, #4]
100026fa:	687b      	ldr	r3, [r7, #4]
100026fc:	7a1a      	ldrb	r2, [r3, #8]
100026fe:	687b      	ldr	r3, [r7, #4]
10002700:	681b      	ldr	r3, [r3, #0]
10002702:	1c08      	adds	r0, r1, #0
10002704:	1c11      	adds	r1, r2, #0
10002706:	1c1a      	adds	r2, r3, #0
10002708:	f7ff f99c 	bl	10001a44 <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
1000270c:	687b      	ldr	r3, [r7, #4]
1000270e:	2201      	movs	r2, #1
10002710:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
10002712:	230f      	movs	r3, #15
10002714:	18fb      	adds	r3, r7, r3
10002716:	2200      	movs	r2, #0
10002718:	701a      	strb	r2, [r3, #0]
  }
  return (status);
1000271a:	230f      	movs	r3, #15
1000271c:	18fb      	adds	r3, r7, r3
1000271e:	781b      	ldrb	r3, [r3, #0]

}
10002720:	1c18      	adds	r0, r3, #0
10002722:	46bd      	mov	sp, r7
10002724:	b004      	add	sp, #16
10002726:	bd80      	pop	{r7, pc}

10002728 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
10002728:	b580      	push	{r7, lr}
1000272a:	b082      	sub	sp, #8
1000272c:	af00      	add	r7, sp, #0
1000272e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10002730:	687b      	ldr	r3, [r7, #4]
10002732:	6819      	ldr	r1, [r3, #0]
10002734:	687b      	ldr	r3, [r7, #4]
10002736:	7b1a      	ldrb	r2, [r3, #12]
10002738:	687b      	ldr	r3, [r7, #4]
1000273a:	3304      	adds	r3, #4
1000273c:	1c08      	adds	r0, r1, #0
1000273e:	1c11      	adds	r1, r2, #0
10002740:	1c1a      	adds	r2, r3, #0
10002742:	f7fe fd29 	bl	10001198 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
10002746:	687b      	ldr	r3, [r7, #4]
10002748:	6819      	ldr	r1, [r3, #0]
1000274a:	687b      	ldr	r3, [r7, #4]
1000274c:	7b1a      	ldrb	r2, [r3, #12]
1000274e:	687b      	ldr	r3, [r7, #4]
10002750:	7b5b      	ldrb	r3, [r3, #13]
10002752:	1c08      	adds	r0, r1, #0
10002754:	1c11      	adds	r1, r2, #0
10002756:	1c1a      	adds	r2, r3, #0
10002758:	f7ff fc2a 	bl	10001fb0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
1000275c:	2300      	movs	r3, #0
}
1000275e:	1c18      	adds	r0, r3, #0
10002760:	46bd      	mov	sp, r7
10002762:	b002      	add	sp, #8
10002764:	bd80      	pop	{r7, pc}
10002766:	46c0      	nop			; (mov r8, r8)

10002768 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
10002768:	b580      	push	{r7, lr}
1000276a:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
1000276c:	4b03      	ldr	r3, [pc, #12]	; (1000277c <SystemCoreSetup+0x14>)
1000276e:	4a03      	ldr	r2, [pc, #12]	; (1000277c <SystemCoreSetup+0x14>)
10002770:	6e92      	ldr	r2, [r2, #104]	; 0x68
10002772:	2101      	movs	r1, #1
10002774:	438a      	bics	r2, r1
10002776:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
10002778:	46bd      	mov	sp, r7
1000277a:	bd80      	pop	{r7, pc}
1000277c:	40010000 	.word	0x40010000

10002780 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
10002780:	b580      	push	{r7, lr}
10002782:	b084      	sub	sp, #16
10002784:	af00      	add	r7, sp, #0
10002786:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10002788:	230f      	movs	r3, #15
1000278a:	18fb      	adds	r3, r7, r3
1000278c:	2200      	movs	r2, #0
1000278e:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10002790:	230e      	movs	r3, #14
10002792:	18fb      	adds	r3, r7, r3
10002794:	2200      	movs	r2, #0
10002796:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10002798:	230d      	movs	r3, #13
1000279a:	18fb      	adds	r3, r7, r3
1000279c:	2200      	movs	r2, #0
1000279e:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100027a0:	230c      	movs	r3, #12
100027a2:	18fb      	adds	r3, r7, r3
100027a4:	2200      	movs	r2, #0
100027a6:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
100027a8:	230b      	movs	r3, #11
100027aa:	18fb      	adds	r3, r7, r3
100027ac:	2200      	movs	r2, #0
100027ae:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
100027b0:	687b      	ldr	r3, [r7, #4]
100027b2:	781b      	ldrb	r3, [r3, #0]
100027b4:	2201      	movs	r2, #1
100027b6:	4053      	eors	r3, r2
100027b8:	b2db      	uxtb	r3, r3
100027ba:	2b00      	cmp	r3, #0
100027bc:	d01b      	beq.n	100027f6 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
100027be:	230e      	movs	r3, #14
100027c0:	18fa      	adds	r2, r7, r3
100027c2:	230d      	movs	r3, #13
100027c4:	18fb      	adds	r3, r7, r3
100027c6:	7812      	ldrb	r2, [r2, #0]
100027c8:	781b      	ldrb	r3, [r3, #0]
100027ca:	4313      	orrs	r3, r2
100027cc:	b2da      	uxtb	r2, r3
100027ce:	230c      	movs	r3, #12
100027d0:	18fb      	adds	r3, r7, r3
100027d2:	781b      	ldrb	r3, [r3, #0]
100027d4:	4313      	orrs	r3, r2
100027d6:	b2d9      	uxtb	r1, r3
100027d8:	230f      	movs	r3, #15
100027da:	18fb      	adds	r3, r7, r3
100027dc:	220b      	movs	r2, #11
100027de:	18ba      	adds	r2, r7, r2
100027e0:	7812      	ldrb	r2, [r2, #0]
100027e2:	430a      	orrs	r2, r1
100027e4:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
100027e6:	230f      	movs	r3, #15
100027e8:	18fb      	adds	r3, r7, r3
100027ea:	781b      	ldrb	r3, [r3, #0]
100027ec:	2b00      	cmp	r3, #0
100027ee:	d102      	bne.n	100027f6 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
100027f0:	687b      	ldr	r3, [r7, #4]
100027f2:	2201      	movs	r2, #1
100027f4:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
100027f6:	230f      	movs	r3, #15
100027f8:	18fb      	adds	r3, r7, r3
100027fa:	781b      	ldrb	r3, [r3, #0]
}
100027fc:	1c18      	adds	r0, r3, #0
100027fe:	46bd      	mov	sp, r7
10002800:	b004      	add	sp, #16
10002802:	bd80      	pop	{r7, pc}

10002804 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10002804:	b590      	push	{r4, r7, lr}
10002806:	b085      	sub	sp, #20
10002808:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
1000280a:	1c3b      	adds	r3, r7, #0
1000280c:	4a05      	ldr	r2, [pc, #20]	; (10002824 <SystemCoreClockSetup+0x20>)
1000280e:	ca13      	ldmia	r2!, {r0, r1, r4}
10002810:	c313      	stmia	r3!, {r0, r1, r4}
10002812:	6812      	ldr	r2, [r2, #0]
10002814:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10002816:	1c3b      	adds	r3, r7, #0
10002818:	1c18      	adds	r0, r3, #0
1000281a:	f7fe fd95 	bl	10001348 <XMC_SCU_CLOCK_Init>
}
1000281e:	46bd      	mov	sp, r7
10002820:	b005      	add	sp, #20
10002822:	bd90      	pop	{r4, r7, pc}
10002824:	100052a0 	.word	0x100052a0

10002828 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
10002828:	b580      	push	{r7, lr}
1000282a:	b084      	sub	sp, #16
1000282c:	af00      	add	r7, sp, #0
1000282e:	60f8      	str	r0, [r7, #12]
10002830:	607a      	str	r2, [r7, #4]
10002832:	230b      	movs	r3, #11
10002834:	18fb      	adds	r3, r7, r3
10002836:	1c0a      	adds	r2, r1, #0
10002838:	701a      	strb	r2, [r3, #0]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
1000283a:	68fb      	ldr	r3, [r7, #12]
1000283c:	689b      	ldr	r3, [r3, #8]
1000283e:	220b      	movs	r2, #11
10002840:	18ba      	adds	r2, r7, r2
10002842:	7812      	ldrb	r2, [r2, #0]
10002844:	2107      	movs	r1, #7
10002846:	4091      	lsls	r1, r2
10002848:	1c0a      	adds	r2, r1, #0
1000284a:	43d2      	mvns	r2, r2
1000284c:	401a      	ands	r2, r3
1000284e:	230b      	movs	r3, #11
10002850:	18fb      	adds	r3, r7, r3
10002852:	781b      	ldrb	r3, [r3, #0]
10002854:	6879      	ldr	r1, [r7, #4]
10002856:	4099      	lsls	r1, r3
10002858:	1c0b      	adds	r3, r1, #0
1000285a:	431a      	orrs	r2, r3
1000285c:	68fb      	ldr	r3, [r7, #12]
1000285e:	609a      	str	r2, [r3, #8]
}
10002860:	46bd      	mov	sp, r7
10002862:	b004      	add	sp, #16
10002864:	bd80      	pop	{r7, pc}
10002866:	46c0      	nop			; (mov r8, r8)

10002868 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
10002868:	b580      	push	{r7, lr}
1000286a:	b082      	sub	sp, #8
1000286c:	af00      	add	r7, sp, #0
1000286e:	6078      	str	r0, [r7, #4]
10002870:	1c0a      	adds	r2, r1, #0
10002872:	1cfb      	adds	r3, r7, #3
10002874:	701a      	strb	r2, [r3, #0]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10002876:	687b      	ldr	r3, [r7, #4]
10002878:	68db      	ldr	r3, [r3, #12]
1000287a:	2207      	movs	r2, #7
1000287c:	4393      	bics	r3, r2
1000287e:	1c1a      	adds	r2, r3, #0
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
10002880:	1cfb      	adds	r3, r7, #3
10002882:	781b      	ldrb	r3, [r3, #0]
10002884:	2107      	movs	r1, #7
10002886:	400b      	ands	r3, r1
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10002888:	431a      	orrs	r2, r3
1000288a:	687b      	ldr	r3, [r7, #4]
1000288c:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
1000288e:	46bd      	mov	sp, r7
10002890:	b002      	add	sp, #8
10002892:	bd80      	pop	{r7, pc}

10002894 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
10002894:	b580      	push	{r7, lr}
10002896:	b082      	sub	sp, #8
10002898:	af00      	add	r7, sp, #0
1000289a:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
1000289c:	687b      	ldr	r3, [r7, #4]
1000289e:	68db      	ldr	r3, [r3, #12]
100028a0:	2280      	movs	r2, #128	; 0x80
100028a2:	0052      	lsls	r2, r2, #1
100028a4:	431a      	orrs	r2, r3
100028a6:	687b      	ldr	r3, [r7, #4]
100028a8:	60da      	str	r2, [r3, #12]
}
100028aa:	46bd      	mov	sp, r7
100028ac:	b002      	add	sp, #8
100028ae:	bd80      	pop	{r7, pc}

100028b0 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
100028b0:	b580      	push	{r7, lr}
100028b2:	b082      	sub	sp, #8
100028b4:	af00      	add	r7, sp, #0
100028b6:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
100028b8:	687b      	ldr	r3, [r7, #4]
100028ba:	681b      	ldr	r3, [r3, #0]
100028bc:	2240      	movs	r2, #64	; 0x40
100028be:	431a      	orrs	r2, r3
100028c0:	687b      	ldr	r3, [r7, #4]
100028c2:	601a      	str	r2, [r3, #0]
}
100028c4:	46bd      	mov	sp, r7
100028c6:	b002      	add	sp, #8
100028c8:	bd80      	pop	{r7, pc}
100028ca:	46c0      	nop			; (mov r8, r8)

100028cc <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
100028cc:	b580      	push	{r7, lr}
100028ce:	b082      	sub	sp, #8
100028d0:	af00      	add	r7, sp, #0
100028d2:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
100028d4:	687b      	ldr	r3, [r7, #4]
100028d6:	681b      	ldr	r3, [r3, #0]
100028d8:	2240      	movs	r2, #64	; 0x40
100028da:	4393      	bics	r3, r2
100028dc:	1c1a      	adds	r2, r3, #0
100028de:	687b      	ldr	r3, [r7, #4]
100028e0:	601a      	str	r2, [r3, #0]
}
100028e2:	46bd      	mov	sp, r7
100028e4:	b002      	add	sp, #8
100028e6:	bd80      	pop	{r7, pc}

100028e8 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
100028e8:	b580      	push	{r7, lr}
100028ea:	b082      	sub	sp, #8
100028ec:	af00      	add	r7, sp, #0
100028ee:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
100028f0:	687b      	ldr	r3, [r7, #4]
100028f2:	681b      	ldr	r3, [r3, #0]
100028f4:	2201      	movs	r2, #1
100028f6:	431a      	orrs	r2, r3
100028f8:	687b      	ldr	r3, [r7, #4]
100028fa:	601a      	str	r2, [r3, #0]
}
100028fc:	46bd      	mov	sp, r7
100028fe:	b002      	add	sp, #8
10002900:	bd80      	pop	{r7, pc}
10002902:	46c0      	nop			; (mov r8, r8)

10002904 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
10002904:	b580      	push	{r7, lr}
10002906:	b082      	sub	sp, #8
10002908:	af00      	add	r7, sp, #0
1000290a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
1000290c:	687b      	ldr	r3, [r7, #4]
1000290e:	681b      	ldr	r3, [r3, #0]
10002910:	2201      	movs	r2, #1
10002912:	4393      	bics	r3, r2
10002914:	1c1a      	adds	r2, r3, #0
10002916:	687b      	ldr	r3, [r7, #4]
10002918:	601a      	str	r2, [r3, #0]
}
1000291a:	46bd      	mov	sp, r7
1000291c:	b002      	add	sp, #8
1000291e:	bd80      	pop	{r7, pc}

10002920 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
10002920:	b580      	push	{r7, lr}
10002922:	b082      	sub	sp, #8
10002924:	af00      	add	r7, sp, #0
10002926:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
10002928:	687b      	ldr	r3, [r7, #4]
1000292a:	681b      	ldr	r3, [r3, #0]
1000292c:	2280      	movs	r2, #128	; 0x80
1000292e:	4393      	bics	r3, r2
10002930:	1c1a      	adds	r2, r3, #0
10002932:	687b      	ldr	r3, [r7, #4]
10002934:	601a      	str	r2, [r3, #0]
}
10002936:	46bd      	mov	sp, r7
10002938:	b002      	add	sp, #8
1000293a:	bd80      	pop	{r7, pc}

1000293c <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
1000293c:	b580      	push	{r7, lr}
1000293e:	b084      	sub	sp, #16
10002940:	af00      	add	r7, sp, #0
10002942:	60f8      	str	r0, [r7, #12]
10002944:	607a      	str	r2, [r7, #4]
10002946:	230b      	movs	r3, #11
10002948:	18fb      	adds	r3, r7, r3
1000294a:	1c0a      	adds	r2, r1, #0
1000294c:	701a      	strb	r2, [r3, #0]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
1000294e:	68fb      	ldr	r3, [r7, #12]
10002950:	681b      	ldr	r3, [r3, #0]
10002952:	68fa      	ldr	r2, [r7, #12]
10002954:	6812      	ldr	r2, [r2, #0]
10002956:	6892      	ldr	r2, [r2, #8]
10002958:	210b      	movs	r1, #11
1000295a:	1879      	adds	r1, r7, r1
1000295c:	7809      	ldrb	r1, [r1, #0]
1000295e:	2007      	movs	r0, #7
10002960:	4088      	lsls	r0, r1
10002962:	1c01      	adds	r1, r0, #0
10002964:	43c9      	mvns	r1, r1
10002966:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
10002968:	220b      	movs	r2, #11
1000296a:	18ba      	adds	r2, r7, r2
1000296c:	7812      	ldrb	r2, [r2, #0]
1000296e:	6878      	ldr	r0, [r7, #4]
10002970:	4090      	lsls	r0, r2
10002972:	1c02      	adds	r2, r0, #0

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
10002974:	430a      	orrs	r2, r1
10002976:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
10002978:	46bd      	mov	sp, r7
1000297a:	b004      	add	sp, #16
1000297c:	bd80      	pop	{r7, pc}
1000297e:	46c0      	nop			; (mov r8, r8)

10002980 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
10002980:	b580      	push	{r7, lr}
10002982:	b082      	sub	sp, #8
10002984:	af00      	add	r7, sp, #0
10002986:	6078      	str	r0, [r7, #4]
10002988:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
1000298a:	687b      	ldr	r3, [r7, #4]
1000298c:	681b      	ldr	r3, [r3, #0]
1000298e:	687a      	ldr	r2, [r7, #4]
10002990:	6812      	ldr	r2, [r2, #0]
10002992:	6811      	ldr	r1, [r2, #0]
10002994:	683a      	ldr	r2, [r7, #0]
10002996:	430a      	orrs	r2, r1
10002998:	601a      	str	r2, [r3, #0]
}
1000299a:	46bd      	mov	sp, r7
1000299c:	b002      	add	sp, #8
1000299e:	bd80      	pop	{r7, pc}

100029a0 <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
100029a0:	b580      	push	{r7, lr}
100029a2:	b082      	sub	sp, #8
100029a4:	af00      	add	r7, sp, #0
100029a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
100029a8:	687b      	ldr	r3, [r7, #4]
100029aa:	681a      	ldr	r2, [r3, #0]
100029ac:	2380      	movs	r3, #128	; 0x80
100029ae:	029b      	lsls	r3, r3, #10
100029b0:	1c10      	adds	r0, r2, #0
100029b2:	1c19      	adds	r1, r3, #0
100029b4:	f7ff ffe4 	bl	10002980 <XMC_CAN_MO_EnableEvent>
}
100029b8:	46bd      	mov	sp, r7
100029ba:	b002      	add	sp, #8
100029bc:	bd80      	pop	{r7, pc}
100029be:	46c0      	nop			; (mov r8, r8)

100029c0 <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
100029c0:	b580      	push	{r7, lr}
100029c2:	b082      	sub	sp, #8
100029c4:	af00      	add	r7, sp, #0
100029c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
100029c8:	687b      	ldr	r3, [r7, #4]
100029ca:	681a      	ldr	r2, [r3, #0]
100029cc:	2380      	movs	r3, #128	; 0x80
100029ce:	025b      	lsls	r3, r3, #9
100029d0:	1c10      	adds	r0, r2, #0
100029d2:	1c19      	adds	r1, r3, #0
100029d4:	f7ff ffd4 	bl	10002980 <XMC_CAN_MO_EnableEvent>
}
100029d8:	46bd      	mov	sp, r7
100029da:	b002      	add	sp, #8
100029dc:	bd80      	pop	{r7, pc}
100029de:	46c0      	nop			; (mov r8, r8)

100029e0 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
100029e0:	b580      	push	{r7, lr}
100029e2:	b084      	sub	sp, #16
100029e4:	af00      	add	r7, sp, #0
100029e6:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
100029e8:	2300      	movs	r3, #0
100029ea:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
100029ec:	687b      	ldr	r3, [r7, #4]
100029ee:	1c18      	adds	r0, r3, #0
100029f0:	f000 f832 	bl	10002a58 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
100029f4:	687b      	ldr	r3, [r7, #4]
100029f6:	22a4      	movs	r2, #164	; 0xa4
100029f8:	5c9b      	ldrb	r3, [r3, r2]
100029fa:	2b00      	cmp	r3, #0
100029fc:	d003      	beq.n	10002a06 <CAN_NODE_SetNodeEvents+0x26>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
100029fe:	68fb      	ldr	r3, [r7, #12]
10002a00:	2202      	movs	r2, #2
10002a02:	4313      	orrs	r3, r2
10002a04:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
10002a06:	687b      	ldr	r3, [r7, #4]
10002a08:	22a3      	movs	r2, #163	; 0xa3
10002a0a:	5c9b      	ldrb	r3, [r3, r2]
10002a0c:	2b00      	cmp	r3, #0
10002a0e:	d003      	beq.n	10002a18 <CAN_NODE_SetNodeEvents+0x38>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
10002a10:	68fb      	ldr	r3, [r7, #12]
10002a12:	2204      	movs	r2, #4
10002a14:	4313      	orrs	r3, r2
10002a16:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
10002a18:	687b      	ldr	r3, [r7, #4]
10002a1a:	22a5      	movs	r2, #165	; 0xa5
10002a1c:	5c9b      	ldrb	r3, [r3, r2]
10002a1e:	2b00      	cmp	r3, #0
10002a20:	d003      	beq.n	10002a2a <CAN_NODE_SetNodeEvents+0x4a>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
10002a22:	68fb      	ldr	r3, [r7, #12]
10002a24:	2208      	movs	r2, #8
10002a26:	4313      	orrs	r3, r2
10002a28:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
10002a2a:	687b      	ldr	r3, [r7, #4]
10002a2c:	685a      	ldr	r2, [r3, #4]
10002a2e:	68fb      	ldr	r3, [r7, #12]
10002a30:	1c10      	adds	r0, r2, #0
10002a32:	1c19      	adds	r1, r3, #0
10002a34:	f7ff f972 	bl	10001d1c <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
10002a38:	687b      	ldr	r3, [r7, #4]
10002a3a:	22a6      	movs	r2, #166	; 0xa6
10002a3c:	5c9b      	ldrb	r3, [r3, r2]
10002a3e:	2b00      	cmp	r3, #0
10002a40:	d007      	beq.n	10002a52 <CAN_NODE_SetNodeEvents+0x72>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
10002a42:	687b      	ldr	r3, [r7, #4]
10002a44:	685a      	ldr	r2, [r3, #4]
10002a46:	2380      	movs	r3, #128	; 0x80
10002a48:	03db      	lsls	r3, r3, #15
10002a4a:	1c10      	adds	r0, r2, #0
10002a4c:	1c19      	adds	r1, r3, #0
10002a4e:	f7ff f965 	bl	10001d1c <XMC_CAN_NODE_EnableEvent>
  }

}
10002a52:	46bd      	mov	sp, r7
10002a54:	b004      	add	sp, #16
10002a56:	bd80      	pop	{r7, pc}

10002a58 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
10002a58:	b580      	push	{r7, lr}
10002a5a:	b082      	sub	sp, #8
10002a5c:	af00      	add	r7, sp, #0
10002a5e:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
10002a60:	687b      	ldr	r3, [r7, #4]
10002a62:	6859      	ldr	r1, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
10002a64:	687b      	ldr	r3, [r7, #4]
10002a66:	228c      	movs	r2, #140	; 0x8c
10002a68:	589b      	ldr	r3, [r3, r2]
10002a6a:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
10002a6c:	1c08      	adds	r0, r1, #0
10002a6e:	2100      	movs	r1, #0
10002a70:	1c1a      	adds	r2, r3, #0
10002a72:	f7ff fed9 	bl	10002828 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
10002a76:	687b      	ldr	r3, [r7, #4]
10002a78:	6859      	ldr	r1, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
10002a7a:	687b      	ldr	r3, [r7, #4]
10002a7c:	228c      	movs	r2, #140	; 0x8c
10002a7e:	589b      	ldr	r3, [r3, r2]
10002a80:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
10002a82:	1c08      	adds	r0, r1, #0
10002a84:	2104      	movs	r1, #4
10002a86:	1c1a      	adds	r2, r3, #0
10002a88:	f7ff fece 	bl	10002828 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
10002a8c:	687b      	ldr	r3, [r7, #4]
10002a8e:	6859      	ldr	r1, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
10002a90:	687b      	ldr	r3, [r7, #4]
10002a92:	228c      	movs	r2, #140	; 0x8c
10002a94:	589b      	ldr	r3, [r3, r2]
10002a96:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
10002a98:	1c08      	adds	r0, r1, #0
10002a9a:	2108      	movs	r1, #8
10002a9c:	1c1a      	adds	r2, r3, #0
10002a9e:	f7ff fec3 	bl	10002828 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
10002aa2:	687b      	ldr	r3, [r7, #4]
10002aa4:	6859      	ldr	r1, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
10002aa6:	687b      	ldr	r3, [r7, #4]
10002aa8:	228c      	movs	r2, #140	; 0x8c
10002aaa:	589b      	ldr	r3, [r3, r2]
10002aac:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
10002aae:	1c08      	adds	r0, r1, #0
10002ab0:	210c      	movs	r1, #12
10002ab2:	1c1a      	adds	r2, r3, #0
10002ab4:	f7ff feb8 	bl	10002828 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
10002ab8:	46bd      	mov	sp, r7
10002aba:	b002      	add	sp, #8
10002abc:	bd80      	pop	{r7, pc}
10002abe:	46c0      	nop			; (mov r8, r8)

10002ac0 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
10002ac0:	b580      	push	{r7, lr}
10002ac2:	b082      	sub	sp, #8
10002ac4:	af00      	add	r7, sp, #0
10002ac6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
10002ac8:	687b      	ldr	r3, [r7, #4]
10002aca:	681b      	ldr	r3, [r3, #0]
10002acc:	1c18      	adds	r0, r3, #0
10002ace:	f7ff f80b 	bl	10001ae8 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
10002ad2:	687b      	ldr	r3, [r7, #4]
10002ad4:	79db      	ldrb	r3, [r3, #7]
10002ad6:	2b00      	cmp	r3, #0
10002ad8:	d00c      	beq.n	10002af4 <CAN_NODE_MO_Init+0x34>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
10002ada:	687b      	ldr	r3, [r7, #4]
10002adc:	681a      	ldr	r2, [r3, #0]
10002ade:	687b      	ldr	r3, [r7, #4]
10002ae0:	795b      	ldrb	r3, [r3, #5]
10002ae2:	1c10      	adds	r0, r2, #0
10002ae4:	2104      	movs	r1, #4
10002ae6:	1c1a      	adds	r2, r3, #0
10002ae8:	f7ff ff28 	bl	1000293c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
10002aec:	687b      	ldr	r3, [r7, #4]
10002aee:	1c18      	adds	r0, r3, #0
10002af0:	f7ff ff56 	bl	100029a0 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
10002af4:	687b      	ldr	r3, [r7, #4]
10002af6:	7a1b      	ldrb	r3, [r3, #8]
10002af8:	2b00      	cmp	r3, #0
10002afa:	d00c      	beq.n	10002b16 <CAN_NODE_MO_Init+0x56>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
10002afc:	687b      	ldr	r3, [r7, #4]
10002afe:	681a      	ldr	r2, [r3, #0]
10002b00:	687b      	ldr	r3, [r7, #4]
10002b02:	799b      	ldrb	r3, [r3, #6]
10002b04:	1c10      	adds	r0, r2, #0
10002b06:	2100      	movs	r1, #0
10002b08:	1c1a      	adds	r2, r3, #0
10002b0a:	f7ff ff17 	bl	1000293c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
10002b0e:	687b      	ldr	r3, [r7, #4]
10002b10:	1c18      	adds	r0, r3, #0
10002b12:	f7ff ff55 	bl	100029c0 <CAN_NODE_MO_EnableRxEvent>
  }

}
10002b16:	46bd      	mov	sp, r7
10002b18:	b002      	add	sp, #8
10002b1a:	bd80      	pop	{r7, pc}

10002b1c <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
10002b1c:	b590      	push	{r4, r7, lr}
10002b1e:	b085      	sub	sp, #20
10002b20:	af00      	add	r7, sp, #0
10002b22:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10002b24:	230f      	movs	r3, #15
10002b26:	18fb      	adds	r3, r7, r3
10002b28:	2200      	movs	r2, #0
10002b2a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
10002b2c:	687b      	ldr	r3, [r7, #4]
10002b2e:	681b      	ldr	r3, [r3, #0]
10002b30:	220f      	movs	r2, #15
10002b32:	18bc      	adds	r4, r7, r2
10002b34:	1c18      	adds	r0, r3, #0
10002b36:	f7ff f8b9 	bl	10001cac <XMC_CAN_MO_Transmit>
10002b3a:	1c03      	adds	r3, r0, #0
10002b3c:	7023      	strb	r3, [r4, #0]
  return (status);
10002b3e:	230f      	movs	r3, #15
10002b40:	18fb      	adds	r3, r7, r3
10002b42:	781b      	ldrb	r3, [r3, #0]
}
10002b44:	1c18      	adds	r0, r3, #0
10002b46:	46bd      	mov	sp, r7
10002b48:	b005      	add	sp, #20
10002b4a:	bd90      	pop	{r4, r7, pc}

10002b4c <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
10002b4c:	b590      	push	{r4, r7, lr}
10002b4e:	b085      	sub	sp, #20
10002b50:	af00      	add	r7, sp, #0
10002b52:	6078      	str	r0, [r7, #4]
10002b54:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10002b56:	230f      	movs	r3, #15
10002b58:	18fb      	adds	r3, r7, r3
10002b5a:	2200      	movs	r2, #0
10002b5c:	701a      	strb	r2, [r3, #0]
  uint32_t *data_pointer = (uint32_t*) array_data;
10002b5e:	683b      	ldr	r3, [r7, #0]
10002b60:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
10002b62:	687b      	ldr	r3, [r7, #4]
10002b64:	681b      	ldr	r3, [r3, #0]
10002b66:	68ba      	ldr	r2, [r7, #8]
10002b68:	6812      	ldr	r2, [r2, #0]
10002b6a:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
10002b6c:	687b      	ldr	r3, [r7, #4]
10002b6e:	681b      	ldr	r3, [r3, #0]
10002b70:	68ba      	ldr	r2, [r7, #8]
10002b72:	6852      	ldr	r2, [r2, #4]
10002b74:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
10002b76:	687b      	ldr	r3, [r7, #4]
10002b78:	681b      	ldr	r3, [r3, #0]
10002b7a:	220f      	movs	r2, #15
10002b7c:	18bc      	adds	r4, r7, r2
10002b7e:	1c18      	adds	r0, r3, #0
10002b80:	f7ff f852 	bl	10001c28 <XMC_CAN_MO_UpdateData>
10002b84:	1c03      	adds	r3, r0, #0
10002b86:	7023      	strb	r3, [r4, #0]
  return (status);
10002b88:	230f      	movs	r3, #15
10002b8a:	18fb      	adds	r3, r7, r3
10002b8c:	781b      	ldrb	r3, [r3, #0]
}
10002b8e:	1c18      	adds	r0, r3, #0
10002b90:	46bd      	mov	sp, r7
10002b92:	b005      	add	sp, #20
10002b94:	bd90      	pop	{r4, r7, pc}
10002b96:	46c0      	nop			; (mov r8, r8)

10002b98 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
10002b98:	b590      	push	{r4, r7, lr}
10002b9a:	b087      	sub	sp, #28
10002b9c:	af00      	add	r7, sp, #0
10002b9e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10002ba0:	2317      	movs	r3, #23
10002ba2:	18fb      	adds	r3, r7, r3
10002ba4:	2200      	movs	r2, #0
10002ba6:	701a      	strb	r2, [r3, #0]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
10002ba8:	687b      	ldr	r3, [r7, #4]
10002baa:	2290      	movs	r2, #144	; 0x90
10002bac:	589b      	ldr	r3, [r3, r2]
10002bae:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
10002bb0:	687b      	ldr	r3, [r7, #4]
10002bb2:	681b      	ldr	r3, [r3, #0]
10002bb4:	2217      	movs	r2, #23
10002bb6:	18bc      	adds	r4, r7, r2
10002bb8:	1c18      	adds	r0, r3, #0
10002bba:	f7ff fd8d 	bl	100026d8 <GLOBAL_CAN_Init>
10002bbe:	1c03      	adds	r3, r0, #0
10002bc0:	7023      	strb	r3, [r4, #0]

  if (status == CAN_NODE_STATUS_SUCCESS)
10002bc2:	2317      	movs	r3, #23
10002bc4:	18fb      	adds	r3, r7, r3
10002bc6:	781b      	ldrb	r3, [r3, #0]
10002bc8:	2b00      	cmp	r3, #0
10002bca:	d000      	beq.n	10002bce <CAN_NODE_Init+0x36>
10002bcc:	e085      	b.n	10002cda <CAN_NODE_Init+0x142>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
10002bce:	687b      	ldr	r3, [r7, #4]
10002bd0:	685a      	ldr	r2, [r3, #4]
10002bd2:	687b      	ldr	r3, [r7, #4]
10002bd4:	689b      	ldr	r3, [r3, #8]
10002bd6:	1c10      	adds	r0, r2, #0
10002bd8:	1c19      	adds	r1, r3, #0
10002bda:	f7fe fdf9 	bl	100017d0 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
10002bde:	1e03      	subs	r3, r0, #0
10002be0:	d176      	bne.n	10002cd0 <CAN_NODE_Init+0x138>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
10002be2:	687b      	ldr	r3, [r7, #4]
10002be4:	685b      	ldr	r3, [r3, #4]
10002be6:	1c18      	adds	r0, r3, #0
10002be8:	f7ff fe62 	bl	100028b0 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
10002bec:	687b      	ldr	r3, [r7, #4]
10002bee:	685b      	ldr	r3, [r3, #4]
10002bf0:	1c18      	adds	r0, r3, #0
10002bf2:	f7ff fe79 	bl	100028e8 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
10002bf6:	687b      	ldr	r3, [r7, #4]
10002bf8:	685b      	ldr	r3, [r3, #4]
10002bfa:	1c18      	adds	r0, r3, #0
10002bfc:	f7ff fe90 	bl	10002920 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
10002c00:	687b      	ldr	r3, [r7, #4]
10002c02:	22a7      	movs	r2, #167	; 0xa7
10002c04:	5c9b      	ldrb	r3, [r3, r2]
10002c06:	2b00      	cmp	r3, #0
10002c08:	d005      	beq.n	10002c16 <CAN_NODE_Init+0x7e>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
10002c0a:	687b      	ldr	r3, [r7, #4]
10002c0c:	685b      	ldr	r3, [r3, #4]
10002c0e:	1c18      	adds	r0, r3, #0
10002c10:	f7ff fe40 	bl	10002894 <XMC_CAN_NODE_EnableLoopBack>
10002c14:	e016      	b.n	10002c44 <CAN_NODE_Init+0xac>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
10002c16:	687b      	ldr	r3, [r7, #4]
10002c18:	2298      	movs	r2, #152	; 0x98
10002c1a:	589b      	ldr	r3, [r3, r2]
10002c1c:	6818      	ldr	r0, [r3, #0]
10002c1e:	687b      	ldr	r3, [r7, #4]
10002c20:	2298      	movs	r2, #152	; 0x98
10002c22:	589b      	ldr	r3, [r3, r2]
10002c24:	7919      	ldrb	r1, [r3, #4]
10002c26:	687b      	ldr	r3, [r7, #4]
10002c28:	229c      	movs	r2, #156	; 0x9c
10002c2a:	589b      	ldr	r3, [r3, r2]
10002c2c:	1c1a      	adds	r2, r3, #0
10002c2e:	f7fe fab3 	bl	10001198 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
10002c32:	687b      	ldr	r3, [r7, #4]
10002c34:	6859      	ldr	r1, [r3, #4]
10002c36:	687b      	ldr	r3, [r7, #4]
10002c38:	22a0      	movs	r2, #160	; 0xa0
10002c3a:	5c9b      	ldrb	r3, [r3, r2]
10002c3c:	1c08      	adds	r0, r1, #0
10002c3e:	1c19      	adds	r1, r3, #0
10002c40:	f7ff fe12 	bl	10002868 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
10002c44:	687b      	ldr	r3, [r7, #4]
10002c46:	1c18      	adds	r0, r3, #0
10002c48:	f7ff feca 	bl	100029e0 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
10002c4c:	2300      	movs	r3, #0
10002c4e:	613b      	str	r3, [r7, #16]
10002c50:	e01a      	b.n	10002c88 <CAN_NODE_Init+0xf0>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
10002c52:	687a      	ldr	r2, [r7, #4]
10002c54:	693b      	ldr	r3, [r7, #16]
10002c56:	3302      	adds	r3, #2
10002c58:	009b      	lsls	r3, r3, #2
10002c5a:	18d3      	adds	r3, r2, r3
10002c5c:	685b      	ldr	r3, [r3, #4]
10002c5e:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
10002c60:	687b      	ldr	r3, [r7, #4]
10002c62:	681b      	ldr	r3, [r3, #0]
10002c64:	6859      	ldr	r1, [r3, #4]
10002c66:	687b      	ldr	r3, [r7, #4]
10002c68:	22a1      	movs	r2, #161	; 0xa1
10002c6a:	5c9a      	ldrb	r2, [r3, r2]
10002c6c:	68bb      	ldr	r3, [r7, #8]
10002c6e:	791b      	ldrb	r3, [r3, #4]
10002c70:	1c08      	adds	r0, r1, #0
10002c72:	1c11      	adds	r1, r2, #0
10002c74:	1c1a      	adds	r2, r3, #0
10002c76:	f7fe fe59 	bl	1000192c <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
10002c7a:	68bb      	ldr	r3, [r7, #8]
10002c7c:	1c18      	adds	r0, r3, #0
10002c7e:	f7ff ff1f 	bl	10002ac0 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
10002c82:	693b      	ldr	r3, [r7, #16]
10002c84:	3301      	adds	r3, #1
10002c86:	613b      	str	r3, [r7, #16]
10002c88:	687b      	ldr	r3, [r7, #4]
10002c8a:	22a2      	movs	r2, #162	; 0xa2
10002c8c:	5c9b      	ldrb	r3, [r3, r2]
10002c8e:	1e1a      	subs	r2, r3, #0
10002c90:	693b      	ldr	r3, [r7, #16]
10002c92:	429a      	cmp	r2, r3
10002c94:	d8dd      	bhi.n	10002c52 <CAN_NODE_Init+0xba>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
10002c96:	687b      	ldr	r3, [r7, #4]
10002c98:	685b      	ldr	r3, [r3, #4]
10002c9a:	1c18      	adds	r0, r3, #0
10002c9c:	f7ff fe16 	bl	100028cc <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
10002ca0:	687b      	ldr	r3, [r7, #4]
10002ca2:	685b      	ldr	r3, [r3, #4]
10002ca4:	1c18      	adds	r0, r3, #0
10002ca6:	f7ff fe2d 	bl	10002904 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
10002caa:	687b      	ldr	r3, [r7, #4]
10002cac:	22a7      	movs	r2, #167	; 0xa7
10002cae:	5c9b      	ldrb	r3, [r3, r2]
10002cb0:	2201      	movs	r2, #1
10002cb2:	4053      	eors	r3, r2
10002cb4:	b2db      	uxtb	r3, r3
10002cb6:	2b00      	cmp	r3, #0
10002cb8:	d013      	beq.n	10002ce2 <CAN_NODE_Init+0x14a>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
10002cba:	68fb      	ldr	r3, [r7, #12]
10002cbc:	6818      	ldr	r0, [r3, #0]
10002cbe:	68fb      	ldr	r3, [r7, #12]
10002cc0:	7919      	ldrb	r1, [r3, #4]
10002cc2:	687b      	ldr	r3, [r7, #4]
10002cc4:	2294      	movs	r2, #148	; 0x94
10002cc6:	589b      	ldr	r3, [r3, r2]
10002cc8:	1c1a      	adds	r2, r3, #0
10002cca:	f7fe fa65 	bl	10001198 <XMC_GPIO_Init>
10002cce:	e008      	b.n	10002ce2 <CAN_NODE_Init+0x14a>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
10002cd0:	2317      	movs	r3, #23
10002cd2:	18fb      	adds	r3, r7, r3
10002cd4:	2201      	movs	r2, #1
10002cd6:	701a      	strb	r2, [r3, #0]
10002cd8:	e003      	b.n	10002ce2 <CAN_NODE_Init+0x14a>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
10002cda:	2317      	movs	r3, #23
10002cdc:	18fb      	adds	r3, r7, r3
10002cde:	2201      	movs	r2, #1
10002ce0:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10002ce2:	2317      	movs	r3, #23
10002ce4:	18fb      	adds	r3, r7, r3
10002ce6:	781b      	ldrb	r3, [r3, #0]
}
10002ce8:	1c18      	adds	r0, r3, #0
10002cea:	46bd      	mov	sp, r7
10002cec:	b007      	add	sp, #28
10002cee:	bd90      	pop	{r4, r7, pc}

10002cf0 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
10002cf0:	b580      	push	{r7, lr}
10002cf2:	b084      	sub	sp, #16
10002cf4:	af00      	add	r7, sp, #0
10002cf6:	60f8      	str	r0, [r7, #12]
10002cf8:	607a      	str	r2, [r7, #4]
10002cfa:	230b      	movs	r3, #11
10002cfc:	18fb      	adds	r3, r7, r3
10002cfe:	1c0a      	adds	r2, r1, #0
10002d00:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));

  port->OMR = (uint32_t)level << pin;
10002d02:	230b      	movs	r3, #11
10002d04:	18fb      	adds	r3, r7, r3
10002d06:	781b      	ldrb	r3, [r3, #0]
10002d08:	687a      	ldr	r2, [r7, #4]
10002d0a:	409a      	lsls	r2, r3
10002d0c:	68fb      	ldr	r3, [r7, #12]
10002d0e:	605a      	str	r2, [r3, #4]
}
10002d10:	46bd      	mov	sp, r7
10002d12:	b004      	add	sp, #16
10002d14:	bd80      	pop	{r7, pc}
10002d16:	46c0      	nop			; (mov r8, r8)

10002d18 <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
10002d18:	b580      	push	{r7, lr}
10002d1a:	b084      	sub	sp, #16
10002d1c:	af00      	add	r7, sp, #0
10002d1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
10002d20:	687b      	ldr	r3, [r7, #4]
10002d22:	7b5b      	ldrb	r3, [r3, #13]
10002d24:	2201      	movs	r2, #1
10002d26:	4053      	eors	r3, r2
10002d28:	b2db      	uxtb	r3, r3
10002d2a:	2b00      	cmp	r3, #0
10002d2c:	d02c      	beq.n	10002d88 <BUS_IO_Init+0x70>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
10002d2e:	230f      	movs	r3, #15
10002d30:	18fb      	adds	r3, r7, r3
10002d32:	2200      	movs	r2, #0
10002d34:	701a      	strb	r2, [r3, #0]
10002d36:	e01d      	b.n	10002d74 <BUS_IO_Init+0x5c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
10002d38:	687b      	ldr	r3, [r7, #4]
10002d3a:	681a      	ldr	r2, [r3, #0]
10002d3c:	230f      	movs	r3, #15
10002d3e:	18fb      	adds	r3, r7, r3
10002d40:	781b      	ldrb	r3, [r3, #0]
10002d42:	00db      	lsls	r3, r3, #3
10002d44:	18d3      	adds	r3, r2, r3
10002d46:	6819      	ldr	r1, [r3, #0]
10002d48:	687b      	ldr	r3, [r7, #4]
10002d4a:	681a      	ldr	r2, [r3, #0]
10002d4c:	230f      	movs	r3, #15
10002d4e:	18fb      	adds	r3, r7, r3
10002d50:	781b      	ldrb	r3, [r3, #0]
10002d52:	00db      	lsls	r3, r3, #3
10002d54:	18d3      	adds	r3, r2, r3
10002d56:	791a      	ldrb	r2, [r3, #4]
10002d58:	687b      	ldr	r3, [r7, #4]
10002d5a:	3304      	adds	r3, #4
10002d5c:	1c08      	adds	r0, r1, #0
10002d5e:	1c11      	adds	r1, r2, #0
10002d60:	1c1a      	adds	r2, r3, #0
10002d62:	f7fe fa19 	bl	10001198 <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
10002d66:	230f      	movs	r3, #15
10002d68:	18fb      	adds	r3, r7, r3
10002d6a:	781a      	ldrb	r2, [r3, #0]
10002d6c:	230f      	movs	r3, #15
10002d6e:	18fb      	adds	r3, r7, r3
10002d70:	3201      	adds	r2, #1
10002d72:	701a      	strb	r2, [r3, #0]
10002d74:	687b      	ldr	r3, [r7, #4]
10002d76:	7b1b      	ldrb	r3, [r3, #12]
10002d78:	220f      	movs	r2, #15
10002d7a:	18ba      	adds	r2, r7, r2
10002d7c:	7812      	ldrb	r2, [r2, #0]
10002d7e:	429a      	cmp	r2, r3
10002d80:	d3da      	bcc.n	10002d38 <BUS_IO_Init+0x20>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
10002d82:	687b      	ldr	r3, [r7, #4]
10002d84:	2201      	movs	r2, #1
10002d86:	735a      	strb	r2, [r3, #13]
  }
  return (BUS_IO_STATUS_OK);
10002d88:	2300      	movs	r3, #0
}
10002d8a:	1c18      	adds	r0, r3, #0
10002d8c:	46bd      	mov	sp, r7
10002d8e:	b004      	add	sp, #16
10002d90:	bd80      	pop	{r7, pc}
10002d92:	46c0      	nop			; (mov r8, r8)

10002d94 <BUS_IO_Write>:
  return(count);
}

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
10002d94:	b580      	push	{r7, lr}
10002d96:	b084      	sub	sp, #16
10002d98:	af00      	add	r7, sp, #0
10002d9a:	6078      	str	r0, [r7, #4]
10002d9c:	1c0a      	adds	r2, r1, #0
10002d9e:	1cbb      	adds	r3, r7, #2
10002da0:	801a      	strh	r2, [r3, #0]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
10002da2:	687b      	ldr	r3, [r7, #4]
10002da4:	681b      	ldr	r3, [r3, #0]
10002da6:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
10002da8:	230f      	movs	r3, #15
10002daa:	18fb      	adds	r3, r7, r3
10002dac:	2200      	movs	r2, #0
10002dae:	701a      	strb	r2, [r3, #0]
10002db0:	e02b      	b.n	10002e0a <BUS_IO_Write+0x76>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
10002db2:	230f      	movs	r3, #15
10002db4:	18fb      	adds	r3, r7, r3
10002db6:	781b      	ldrb	r3, [r3, #0]
10002db8:	2201      	movs	r2, #1
10002dba:	409a      	lsls	r2, r3
10002dbc:	1c13      	adds	r3, r2, #0
10002dbe:	b29b      	uxth	r3, r3
10002dc0:	1cba      	adds	r2, r7, #2
10002dc2:	8812      	ldrh	r2, [r2, #0]
10002dc4:	4013      	ands	r3, r2
10002dc6:	b29b      	uxth	r3, r3
10002dc8:	2b00      	cmp	r3, #0
10002dca:	d009      	beq.n	10002de0 <BUS_IO_Write+0x4c>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10002dcc:	68bb      	ldr	r3, [r7, #8]
10002dce:	681a      	ldr	r2, [r3, #0]
10002dd0:	68bb      	ldr	r3, [r7, #8]
10002dd2:	791b      	ldrb	r3, [r3, #4]
10002dd4:	1c10      	adds	r0, r2, #0
10002dd6:	1c19      	adds	r1, r3, #0
10002dd8:	2201      	movs	r2, #1
10002dda:	f7ff ff89 	bl	10002cf0 <XMC_GPIO_SetOutputLevel>
10002dde:	e00a      	b.n	10002df6 <BUS_IO_Write+0x62>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
10002de0:	68bb      	ldr	r3, [r7, #8]
10002de2:	6819      	ldr	r1, [r3, #0]
10002de4:	68bb      	ldr	r3, [r7, #8]
10002de6:	791a      	ldrb	r2, [r3, #4]
10002de8:	2380      	movs	r3, #128	; 0x80
10002dea:	025b      	lsls	r3, r3, #9
10002dec:	1c08      	adds	r0, r1, #0
10002dee:	1c11      	adds	r1, r2, #0
10002df0:	1c1a      	adds	r2, r3, #0
10002df2:	f7ff ff7d 	bl	10002cf0 <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
10002df6:	68bb      	ldr	r3, [r7, #8]
10002df8:	3308      	adds	r3, #8
10002dfa:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
10002dfc:	230f      	movs	r3, #15
10002dfe:	18fb      	adds	r3, r7, r3
10002e00:	781a      	ldrb	r2, [r3, #0]
10002e02:	230f      	movs	r3, #15
10002e04:	18fb      	adds	r3, r7, r3
10002e06:	3201      	adds	r2, #1
10002e08:	701a      	strb	r2, [r3, #0]
10002e0a:	687b      	ldr	r3, [r7, #4]
10002e0c:	7b1b      	ldrb	r3, [r3, #12]
10002e0e:	220f      	movs	r2, #15
10002e10:	18ba      	adds	r2, r7, r2
10002e12:	7812      	ldrb	r2, [r2, #0]
10002e14:	429a      	cmp	r2, r3
10002e16:	d3cc      	bcc.n	10002db2 <BUS_IO_Write+0x1e>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
10002e18:	46bd      	mov	sp, r7
10002e1a:	b004      	add	sp, #16
10002e1c:	bd80      	pop	{r7, pc}
10002e1e:	46c0      	nop			; (mov r8, r8)

10002e20 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
10002e20:	b590      	push	{r4, r7, lr}
10002e22:	b083      	sub	sp, #12
10002e24:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10002e26:	1dfb      	adds	r3, r7, #7
10002e28:	2200      	movs	r2, #0
10002e2a:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10002e2c:	1dfc      	adds	r4, r7, #7
10002e2e:	4b4d      	ldr	r3, [pc, #308]	; (10002f64 <DAVE_Init+0x144>)
10002e30:	1c18      	adds	r0, r3, #0
10002e32:	f7ff fca5 	bl	10002780 <CLOCK_XMC1_Init>
10002e36:	1c03      	adds	r3, r0, #0
10002e38:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10002e3a:	1dfb      	adds	r3, r7, #7
10002e3c:	781b      	ldrb	r3, [r3, #0]
10002e3e:	2b00      	cmp	r3, #0
10002e40:	d106      	bne.n	10002e50 <DAVE_Init+0x30>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
10002e42:	1dfc      	adds	r4, r7, #7
10002e44:	4b48      	ldr	r3, [pc, #288]	; (10002f68 <DAVE_Init+0x148>)
10002e46:	1c18      	adds	r0, r3, #0
10002e48:	f7ff f9e0 	bl	1000220c <TIMER_Init>
10002e4c:	1c03      	adds	r3, r0, #0
10002e4e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e50:	1dfb      	adds	r3, r7, #7
10002e52:	781b      	ldrb	r3, [r3, #0]
10002e54:	2b00      	cmp	r3, #0
10002e56:	d106      	bne.n	10002e66 <DAVE_Init+0x46>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
10002e58:	1dfc      	adds	r4, r7, #7
10002e5a:	4b44      	ldr	r3, [pc, #272]	; (10002f6c <DAVE_Init+0x14c>)
10002e5c:	1c18      	adds	r0, r3, #0
10002e5e:	f7ff fbe3 	bl	10002628 <INTERRUPT_Init>
10002e62:	1c03      	adds	r3, r0, #0
10002e64:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e66:	1dfb      	adds	r3, r7, #7
10002e68:	781b      	ldrb	r3, [r3, #0]
10002e6a:	2b00      	cmp	r3, #0
10002e6c:	d106      	bne.n	10002e7c <DAVE_Init+0x5c>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance ECHO_C */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&ECHO_C); 
10002e6e:	1dfc      	adds	r4, r7, #7
10002e70:	4b3f      	ldr	r3, [pc, #252]	; (10002f70 <DAVE_Init+0x150>)
10002e72:	1c18      	adds	r0, r3, #0
10002e74:	f7ff fafc 	bl	10002470 <PIN_INTERRUPT_Init>
10002e78:	1c03      	adds	r3, r0, #0
10002e7a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e7c:	1dfb      	adds	r3, r7, #7
10002e7e:	781b      	ldrb	r3, [r3, #0]
10002e80:	2b00      	cmp	r3, #0
10002e82:	d106      	bne.n	10002e92 <DAVE_Init+0x72>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance ECHO_L */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&ECHO_L); 
10002e84:	1dfc      	adds	r4, r7, #7
10002e86:	4b3b      	ldr	r3, [pc, #236]	; (10002f74 <DAVE_Init+0x154>)
10002e88:	1c18      	adds	r0, r3, #0
10002e8a:	f7ff faf1 	bl	10002470 <PIN_INTERRUPT_Init>
10002e8e:	1c03      	adds	r3, r0, #0
10002e90:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002e92:	1dfb      	adds	r3, r7, #7
10002e94:	781b      	ldrb	r3, [r3, #0]
10002e96:	2b00      	cmp	r3, #0
10002e98:	d106      	bne.n	10002ea8 <DAVE_Init+0x88>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance ECHO_R */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&ECHO_R); 
10002e9a:	1dfc      	adds	r4, r7, #7
10002e9c:	4b36      	ldr	r3, [pc, #216]	; (10002f78 <DAVE_Init+0x158>)
10002e9e:	1c18      	adds	r0, r3, #0
10002ea0:	f7ff fae6 	bl	10002470 <PIN_INTERRUPT_Init>
10002ea4:	1c03      	adds	r3, r0, #0
10002ea6:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002ea8:	1dfb      	adds	r3, r7, #7
10002eaa:	781b      	ldrb	r3, [r3, #0]
10002eac:	2b00      	cmp	r3, #0
10002eae:	d106      	bne.n	10002ebe <DAVE_Init+0x9e>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_3 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_3); 
10002eb0:	1dfc      	adds	r4, r7, #7
10002eb2:	4b32      	ldr	r3, [pc, #200]	; (10002f7c <DAVE_Init+0x15c>)
10002eb4:	1c18      	adds	r0, r3, #0
10002eb6:	f7ff fadb 	bl	10002470 <PIN_INTERRUPT_Init>
10002eba:	1c03      	adds	r3, r0, #0
10002ebc:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002ebe:	1dfb      	adds	r3, r7, #7
10002ec0:	781b      	ldrb	r3, [r3, #0]
10002ec2:	2b00      	cmp	r3, #0
10002ec4:	d106      	bne.n	10002ed4 <DAVE_Init+0xb4>
  {
	 /**  Initialization of BUS_IO APP instance BUS_IO_0 */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&BUS_IO_0); 
10002ec6:	1dfc      	adds	r4, r7, #7
10002ec8:	4b2d      	ldr	r3, [pc, #180]	; (10002f80 <DAVE_Init+0x160>)
10002eca:	1c18      	adds	r0, r3, #0
10002ecc:	f7ff ff24 	bl	10002d18 <BUS_IO_Init>
10002ed0:	1c03      	adds	r3, r0, #0
10002ed2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002ed4:	1dfb      	adds	r3, r7, #7
10002ed6:	781b      	ldrb	r3, [r3, #0]
10002ed8:	2b00      	cmp	r3, #0
10002eda:	d106      	bne.n	10002eea <DAVE_Init+0xca>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
10002edc:	1dfc      	adds	r4, r7, #7
10002ede:	4b29      	ldr	r3, [pc, #164]	; (10002f84 <DAVE_Init+0x164>)
10002ee0:	1c18      	adds	r0, r3, #0
10002ee2:	f7ff fe59 	bl	10002b98 <CAN_NODE_Init>
10002ee6:	1c03      	adds	r3, r0, #0
10002ee8:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002eea:	1dfb      	adds	r3, r7, #7
10002eec:	781b      	ldrb	r3, [r3, #0]
10002eee:	2b00      	cmp	r3, #0
10002ef0:	d106      	bne.n	10002f00 <DAVE_Init+0xe0>
  {
	 /**  Initialization of TIMER APP instance TIMER_1s */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_1s); 
10002ef2:	1dfc      	adds	r4, r7, #7
10002ef4:	4b24      	ldr	r3, [pc, #144]	; (10002f88 <DAVE_Init+0x168>)
10002ef6:	1c18      	adds	r0, r3, #0
10002ef8:	f7ff f988 	bl	1000220c <TIMER_Init>
10002efc:	1c03      	adds	r3, r0, #0
10002efe:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002f00:	1dfb      	adds	r3, r7, #7
10002f02:	781b      	ldrb	r3, [r3, #0]
10002f04:	2b00      	cmp	r3, #0
10002f06:	d106      	bne.n	10002f16 <DAVE_Init+0xf6>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_1s */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_1s); 
10002f08:	1dfc      	adds	r4, r7, #7
10002f0a:	4b20      	ldr	r3, [pc, #128]	; (10002f8c <DAVE_Init+0x16c>)
10002f0c:	1c18      	adds	r0, r3, #0
10002f0e:	f7ff fb8b 	bl	10002628 <INTERRUPT_Init>
10002f12:	1c03      	adds	r3, r0, #0
10002f14:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002f16:	1dfb      	adds	r3, r7, #7
10002f18:	781b      	ldrb	r3, [r3, #0]
10002f1a:	2b00      	cmp	r3, #0
10002f1c:	d106      	bne.n	10002f2c <DAVE_Init+0x10c>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG_0 */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG_0); 
10002f1e:	1dfc      	adds	r4, r7, #7
10002f20:	4b1b      	ldr	r3, [pc, #108]	; (10002f90 <DAVE_Init+0x170>)
10002f22:	1c18      	adds	r0, r3, #0
10002f24:	f7ff f8f2 	bl	1000210c <WATCHDOG_Init>
10002f28:	1c03      	adds	r3, r0, #0
10002f2a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002f2c:	1dfb      	adds	r3, r7, #7
10002f2e:	781b      	ldrb	r3, [r3, #0]
10002f30:	2b00      	cmp	r3, #0
10002f32:	d106      	bne.n	10002f42 <DAVE_Init+0x122>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
10002f34:	1dfc      	adds	r4, r7, #7
10002f36:	4b17      	ldr	r3, [pc, #92]	; (10002f94 <DAVE_Init+0x174>)
10002f38:	1c18      	adds	r0, r3, #0
10002f3a:	f7ff fbf5 	bl	10002728 <DIGITAL_IO_Init>
10002f3e:	1c03      	adds	r3, r0, #0
10002f40:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002f42:	1dfb      	adds	r3, r7, #7
10002f44:	781b      	ldrb	r3, [r3, #0]
10002f46:	2b00      	cmp	r3, #0
10002f48:	d106      	bne.n	10002f58 <DAVE_Init+0x138>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_CAN_RX */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_CAN_RX); 
10002f4a:	1dfc      	adds	r4, r7, #7
10002f4c:	4b12      	ldr	r3, [pc, #72]	; (10002f98 <DAVE_Init+0x178>)
10002f4e:	1c18      	adds	r0, r3, #0
10002f50:	f7ff fb6a 	bl	10002628 <INTERRUPT_Init>
10002f54:	1c03      	adds	r3, r0, #0
10002f56:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10002f58:	1dfb      	adds	r3, r7, #7
10002f5a:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
10002f5c:	1c18      	adds	r0, r3, #0
10002f5e:	46bd      	mov	sp, r7
10002f60:	b003      	add	sp, #12
10002f62:	bd90      	pop	{r4, r7, pc}
10002f64:	20000648 	.word	0x20000648
10002f68:	20000564 	.word	0x20000564
10002f6c:	10005278 	.word	0x10005278
10002f70:	100051f8 	.word	0x100051f8
10002f74:	10005218 	.word	0x10005218
10002f78:	10005238 	.word	0x10005238
10002f7c:	10005258 	.word	0x10005258
10002f80:	20000618 	.word	0x20000618
10002f84:	100052f8 	.word	0x100052f8
10002f88:	20000594 	.word	0x20000594
10002f8c:	10005280 	.word	0x10005280
10002f90:	2000055c 	.word	0x2000055c
10002f94:	10005290 	.word	0x10005290
10002f98:	10005288 	.word	0x10005288

10002f9c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10002f9c:	b580      	push	{r7, lr}
10002f9e:	b082      	sub	sp, #8
10002fa0:	af00      	add	r7, sp, #0
10002fa2:	6078      	str	r0, [r7, #4]
10002fa4:	1c0a      	adds	r2, r1, #0
10002fa6:	1cfb      	adds	r3, r7, #3
10002fa8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10002faa:	1cfb      	adds	r3, r7, #3
10002fac:	781b      	ldrb	r3, [r3, #0]
10002fae:	2201      	movs	r2, #1
10002fb0:	409a      	lsls	r2, r3
10002fb2:	687b      	ldr	r3, [r7, #4]
10002fb4:	605a      	str	r2, [r3, #4]
}
10002fb6:	46bd      	mov	sp, r7
10002fb8:	b002      	add	sp, #8
10002fba:	bd80      	pop	{r7, pc}

10002fbc <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10002fbc:	b580      	push	{r7, lr}
10002fbe:	b082      	sub	sp, #8
10002fc0:	af00      	add	r7, sp, #0
10002fc2:	6078      	str	r0, [r7, #4]
10002fc4:	1c0a      	adds	r2, r1, #0
10002fc6:	1cfb      	adds	r3, r7, #3
10002fc8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
10002fca:	687b      	ldr	r3, [r7, #4]
10002fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002fce:	1cfb      	adds	r3, r7, #3
10002fd0:	781b      	ldrb	r3, [r3, #0]
10002fd2:	40da      	lsrs	r2, r3
10002fd4:	1c13      	adds	r3, r2, #0
10002fd6:	2201      	movs	r2, #1
10002fd8:	4013      	ands	r3, r2
}
10002fda:	1c18      	adds	r0, r3, #0
10002fdc:	46bd      	mov	sp, r7
10002fde:	b002      	add	sp, #8
10002fe0:	bd80      	pop	{r7, pc}
10002fe2:	46c0      	nop			; (mov r8, r8)

10002fe4 <PIN_INTERRUPT_GetPinValue>:
*   return (1);
* }
*  @endcode
*/
__STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
{
10002fe4:	b580      	push	{r7, lr}
10002fe6:	b082      	sub	sp, #8
10002fe8:	af00      	add	r7, sp, #0
10002fea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
  return (XMC_GPIO_GetInput(handle->port, handle->pin));
10002fec:	687b      	ldr	r3, [r7, #4]
10002fee:	685a      	ldr	r2, [r3, #4]
10002ff0:	687b      	ldr	r3, [r7, #4]
10002ff2:	7f9b      	ldrb	r3, [r3, #30]
10002ff4:	1c10      	adds	r0, r2, #0
10002ff6:	1c19      	adds	r1, r3, #0
10002ff8:	f7ff ffe0 	bl	10002fbc <XMC_GPIO_GetInput>
10002ffc:	1c03      	adds	r3, r0, #0
}
10002ffe:	1c18      	adds	r0, r3, #0
10003000:	46bd      	mov	sp, r7
10003002:	b002      	add	sp, #8
10003004:	bd80      	pop	{r7, pc}
10003006:	46c0      	nop			; (mov r8, r8)

10003008 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
10003008:	b580      	push	{r7, lr}
1000300a:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
1000300c:	4b03      	ldr	r3, [pc, #12]	; (1000301c <XMC_WDT_Start+0x14>)
1000300e:	4a03      	ldr	r2, [pc, #12]	; (1000301c <XMC_WDT_Start+0x14>)
10003010:	6852      	ldr	r2, [r2, #4]
10003012:	2101      	movs	r1, #1
10003014:	430a      	orrs	r2, r1
10003016:	605a      	str	r2, [r3, #4]
}
10003018:	46bd      	mov	sp, r7
1000301a:	bd80      	pop	{r7, pc}
1000301c:	40020000 	.word	0x40020000

10003020 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
10003020:	b580      	push	{r7, lr}
10003022:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
10003024:	4b02      	ldr	r3, [pc, #8]	; (10003030 <XMC_WDT_Service+0x10>)
10003026:	4a03      	ldr	r2, [pc, #12]	; (10003034 <XMC_WDT_Service+0x14>)
10003028:	609a      	str	r2, [r3, #8]
}
1000302a:	46bd      	mov	sp, r7
1000302c:	bd80      	pop	{r7, pc}
1000302e:	46c0      	nop			; (mov r8, r8)
10003030:	40020000 	.word	0x40020000
10003034:	abadcafe 	.word	0xabadcafe

10003038 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
10003038:	b580      	push	{r7, lr}
1000303a:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
1000303c:	f7ff ffe4 	bl	10003008 <XMC_WDT_Start>
}
10003040:	46bd      	mov	sp, r7
10003042:	bd80      	pop	{r7, pc}

10003044 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
10003044:	b580      	push	{r7, lr}
10003046:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
10003048:	f7ff ffea 	bl	10003020 <XMC_WDT_Service>
}
1000304c:	46bd      	mov	sp, r7
1000304e:	bd80      	pop	{r7, pc}

10003050 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10003050:	b580      	push	{r7, lr}
10003052:	b082      	sub	sp, #8
10003054:	af00      	add	r7, sp, #0
10003056:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10003058:	687b      	ldr	r3, [r7, #4]
1000305a:	681a      	ldr	r2, [r3, #0]
1000305c:	687b      	ldr	r3, [r7, #4]
1000305e:	7b1b      	ldrb	r3, [r3, #12]
10003060:	1c10      	adds	r0, r2, #0
10003062:	1c19      	adds	r1, r3, #0
10003064:	f7ff ff9a 	bl	10002f9c <XMC_GPIO_SetOutputHigh>
}
10003068:	46bd      	mov	sp, r7
1000306a:	b002      	add	sp, #8
1000306c:	bd80      	pop	{r7, pc}
1000306e:	46c0      	nop			; (mov r8, r8)

10003070 <main>:
float Exp_moving_average(float new_value, float value, float ALPHA);
bool within_MAX_MIN_check_int(int x, int MAX, int MIN);
uint16_t saturation_to_MIN_MAX(uint16_t value, uint16_t MAX, uint16_t MIN);

int main(void)
{
10003070:	b590      	push	{r4, r7, lr}
10003072:	b083      	sub	sp, #12
10003074:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
10003076:	1dfc      	adds	r4, r7, #7
10003078:	f7ff fed2 	bl	10002e20 <DAVE_Init>
1000307c:	1c03      	adds	r3, r0, #0
1000307e:	7023      	strb	r3, [r4, #0]

  if (status != DAVE_STATUS_SUCCESS)
10003080:	1dfb      	adds	r3, r7, #7
10003082:	781b      	ldrb	r3, [r3, #0]
10003084:	2b00      	cmp	r3, #0
10003086:	d000      	beq.n	1000308a <main+0x1a>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
10003088:	e7fe      	b.n	10003088 <main+0x18>
  }
  //Initialization of CAN
  	//CAN_NODE_STATUS_t init_status;
  	init_status = CAN_NODE_Init(&CAN_NODE_0);
1000308a:	4b09      	ldr	r3, [pc, #36]	; (100030b0 <main+0x40>)
1000308c:	1c18      	adds	r0, r3, #0
1000308e:	f7ff fd83 	bl	10002b98 <CAN_NODE_Init>
10003092:	1c03      	adds	r3, r0, #0
10003094:	1c1a      	adds	r2, r3, #0
10003096:	4b07      	ldr	r3, [pc, #28]	; (100030b4 <main+0x44>)
10003098:	701a      	strb	r2, [r3, #0]

  	if (init_status != CAN_NODE_STATUS_SUCCESS) {
1000309a:	4b06      	ldr	r3, [pc, #24]	; (100030b4 <main+0x44>)
1000309c:	781b      	ldrb	r3, [r3, #0]
1000309e:	2b00      	cmp	r3, #0
100030a0:	d102      	bne.n	100030a8 <main+0x38>
  		XMC_DEBUG("CAN initialization failed\n");
  	}
  	else{
  		CAN_OK = 1;
100030a2:	4b05      	ldr	r3, [pc, #20]	; (100030b8 <main+0x48>)
100030a4:	2201      	movs	r2, #1
100030a6:	701a      	strb	r2, [r3, #0]
  	}

  	WATCHDOG_Start(); // watchdog restart if CAN not working
100030a8:	f7ff ffc6 	bl	10003038 <WATCHDOG_Start>
  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {


  }
100030ac:	e7fe      	b.n	100030ac <main+0x3c>
100030ae:	46c0      	nop			; (mov r8, r8)
100030b0:	100052f8 	.word	0x100052f8
100030b4:	20000690 	.word	0x20000690
100030b8:	2000064c 	.word	0x2000064c

100030bc <IRQ8_Handler>:
}


void ISR_10us_TIMER(){
100030bc:	b580      	push	{r7, lr}
100030be:	af00      	add	r7, sp, #0
	if(reset_done == 1){ // make sure its finished
100030c0:	4b41      	ldr	r3, [pc, #260]	; (100031c8 <IRQ8_Handler+0x10c>)
100030c2:	781b      	ldrb	r3, [r3, #0]
100030c4:	b2db      	uxtb	r3, r3
100030c6:	2b01      	cmp	r3, #1
100030c8:	d000      	beq.n	100030cc <IRQ8_Handler+0x10>
100030ca:	e07b      	b.n	100031c4 <IRQ8_Handler+0x108>
		t_10us_count ++;
100030cc:	4b3f      	ldr	r3, [pc, #252]	; (100031cc <IRQ8_Handler+0x110>)
100030ce:	681b      	ldr	r3, [r3, #0]
100030d0:	1c5a      	adds	r2, r3, #1
100030d2:	4b3e      	ldr	r3, [pc, #248]	; (100031cc <IRQ8_Handler+0x110>)
100030d4:	601a      	str	r2, [r3, #0]
		if (echo_count_control == 1) echo_t_10us ++;
100030d6:	4b3e      	ldr	r3, [pc, #248]	; (100031d0 <IRQ8_Handler+0x114>)
100030d8:	781b      	ldrb	r3, [r3, #0]
100030da:	b2db      	uxtb	r3, r3
100030dc:	2b01      	cmp	r3, #1
100030de:	d104      	bne.n	100030ea <IRQ8_Handler+0x2e>
100030e0:	4b3c      	ldr	r3, [pc, #240]	; (100031d4 <IRQ8_Handler+0x118>)
100030e2:	681b      	ldr	r3, [r3, #0]
100030e4:	1c5a      	adds	r2, r3, #1
100030e6:	4b3b      	ldr	r3, [pc, #236]	; (100031d4 <IRQ8_Handler+0x118>)
100030e8:	601a      	str	r2, [r3, #0]

		if(t_10us_count == 1)BUS_IO_Write(&BUS_IO_0,Now_Sensor);  // set trigger high
100030ea:	4b38      	ldr	r3, [pc, #224]	; (100031cc <IRQ8_Handler+0x110>)
100030ec:	681b      	ldr	r3, [r3, #0]
100030ee:	2b01      	cmp	r3, #1
100030f0:	d109      	bne.n	10003106 <IRQ8_Handler+0x4a>
100030f2:	4b39      	ldr	r3, [pc, #228]	; (100031d8 <IRQ8_Handler+0x11c>)
100030f4:	781b      	ldrb	r3, [r3, #0]
100030f6:	b2db      	uxtb	r3, r3
100030f8:	b29b      	uxth	r3, r3
100030fa:	4a38      	ldr	r2, [pc, #224]	; (100031dc <IRQ8_Handler+0x120>)
100030fc:	1c10      	adds	r0, r2, #0
100030fe:	1c19      	adds	r1, r3, #0
10003100:	f7ff fe48 	bl	10002d94 <BUS_IO_Write>
10003104:	e05e      	b.n	100031c4 <IRQ8_Handler+0x108>
		else if (t_10us_count == 11) BUS_IO_Write(&BUS_IO_0,0b000); // set tigger low
10003106:	4b31      	ldr	r3, [pc, #196]	; (100031cc <IRQ8_Handler+0x110>)
10003108:	681b      	ldr	r3, [r3, #0]
1000310a:	2b0b      	cmp	r3, #11
1000310c:	d105      	bne.n	1000311a <IRQ8_Handler+0x5e>
1000310e:	4b33      	ldr	r3, [pc, #204]	; (100031dc <IRQ8_Handler+0x120>)
10003110:	1c18      	adds	r0, r3, #0
10003112:	2100      	movs	r1, #0
10003114:	f7ff fe3e 	bl	10002d94 <BUS_IO_Write>
10003118:	e054      	b.n	100031c4 <IRQ8_Handler+0x108>

		else if (t_10us_count == 20) {
1000311a:	4b2c      	ldr	r3, [pc, #176]	; (100031cc <IRQ8_Handler+0x110>)
1000311c:	681b      	ldr	r3, [r3, #0]
1000311e:	2b14      	cmp	r3, #20
10003120:	d148      	bne.n	100031b4 <IRQ8_Handler+0xf8>
				switch(Now_Sensor){
10003122:	4b2d      	ldr	r3, [pc, #180]	; (100031d8 <IRQ8_Handler+0x11c>)
10003124:	781b      	ldrb	r3, [r3, #0]
10003126:	b2db      	uxtb	r3, r3
10003128:	2b02      	cmp	r3, #2
1000312a:	d00c      	beq.n	10003146 <IRQ8_Handler+0x8a>
1000312c:	2b04      	cmp	r3, #4
1000312e:	d013      	beq.n	10003158 <IRQ8_Handler+0x9c>
10003130:	2b01      	cmp	r3, #1
10003132:	d11a      	bne.n	1000316a <IRQ8_Handler+0xae>
					case CENTER:
						echo_state = PIN_INTERRUPT_GetPinValue(&ECHO_C);
10003134:	4b2a      	ldr	r3, [pc, #168]	; (100031e0 <IRQ8_Handler+0x124>)
10003136:	1c18      	adds	r0, r3, #0
10003138:	f7ff ff54 	bl	10002fe4 <PIN_INTERRUPT_GetPinValue>
1000313c:	1c03      	adds	r3, r0, #0
1000313e:	b2da      	uxtb	r2, r3
10003140:	4b28      	ldr	r3, [pc, #160]	; (100031e4 <IRQ8_Handler+0x128>)
10003142:	701a      	strb	r2, [r3, #0]
						break;
10003144:	e011      	b.n	1000316a <IRQ8_Handler+0xae>
					case LEFT:
						echo_state = PIN_INTERRUPT_GetPinValue(&ECHO_L);
10003146:	4b28      	ldr	r3, [pc, #160]	; (100031e8 <IRQ8_Handler+0x12c>)
10003148:	1c18      	adds	r0, r3, #0
1000314a:	f7ff ff4b 	bl	10002fe4 <PIN_INTERRUPT_GetPinValue>
1000314e:	1c03      	adds	r3, r0, #0
10003150:	b2da      	uxtb	r2, r3
10003152:	4b24      	ldr	r3, [pc, #144]	; (100031e4 <IRQ8_Handler+0x128>)
10003154:	701a      	strb	r2, [r3, #0]
						break;
10003156:	e008      	b.n	1000316a <IRQ8_Handler+0xae>
					case RIGHT:
						echo_state = PIN_INTERRUPT_GetPinValue(&ECHO_R);
10003158:	4b24      	ldr	r3, [pc, #144]	; (100031ec <IRQ8_Handler+0x130>)
1000315a:	1c18      	adds	r0, r3, #0
1000315c:	f7ff ff42 	bl	10002fe4 <PIN_INTERRUPT_GetPinValue>
10003160:	1c03      	adds	r3, r0, #0
10003162:	b2da      	uxtb	r2, r3
10003164:	4b1f      	ldr	r3, [pc, #124]	; (100031e4 <IRQ8_Handler+0x128>)
10003166:	701a      	strb	r2, [r3, #0]
						break;
10003168:	46c0      	nop			; (mov r8, r8)
				}
				if(echo_state != 0) {
1000316a:	4b1e      	ldr	r3, [pc, #120]	; (100031e4 <IRQ8_Handler+0x128>)
1000316c:	781b      	ldrb	r3, [r3, #0]
1000316e:	b2db      	uxtb	r3, r3
10003170:	2b00      	cmp	r3, #0
10003172:	d01b      	beq.n	100031ac <IRQ8_Handler+0xf0>
					echo_not_low_count ++ ;
10003174:	4b1e      	ldr	r3, [pc, #120]	; (100031f0 <IRQ8_Handler+0x134>)
10003176:	681b      	ldr	r3, [r3, #0]
10003178:	1c5a      	adds	r2, r3, #1
1000317a:	4b1d      	ldr	r3, [pc, #116]	; (100031f0 <IRQ8_Handler+0x134>)
1000317c:	601a      	str	r2, [r3, #0]
					  reset_at = t_10us_count + RESET_IN_10us_AFTER_ECHO_LOW_FAIL; // reset(); // check if echo low
1000317e:	4b1d      	ldr	r3, [pc, #116]	; (100031f4 <IRQ8_Handler+0x138>)
10003180:	881b      	ldrh	r3, [r3, #0]
10003182:	1c1a      	adds	r2, r3, #0
10003184:	4b11      	ldr	r3, [pc, #68]	; (100031cc <IRQ8_Handler+0x110>)
10003186:	681b      	ldr	r3, [r3, #0]
10003188:	18d2      	adds	r2, r2, r3
1000318a:	4b1b      	ldr	r3, [pc, #108]	; (100031f8 <IRQ8_Handler+0x13c>)
1000318c:	601a      	str	r2, [r3, #0]
				      reset_at = saturation_to_MIN_MAX(reset_at,MAX_RESET,MIN_RESET);
1000318e:	4b1a      	ldr	r3, [pc, #104]	; (100031f8 <IRQ8_Handler+0x13c>)
10003190:	681b      	ldr	r3, [r3, #0]
10003192:	b29a      	uxth	r2, r3
10003194:	4b19      	ldr	r3, [pc, #100]	; (100031fc <IRQ8_Handler+0x140>)
10003196:	881b      	ldrh	r3, [r3, #0]
10003198:	4919      	ldr	r1, [pc, #100]	; (10003200 <IRQ8_Handler+0x144>)
1000319a:	1c10      	adds	r0, r2, #0
1000319c:	1c1a      	adds	r2, r3, #0
1000319e:	f000 fa93 	bl	100036c8 <saturation_to_MIN_MAX>
100031a2:	1c03      	adds	r3, r0, #0
100031a4:	1c1a      	adds	r2, r3, #0
100031a6:	4b14      	ldr	r3, [pc, #80]	; (100031f8 <IRQ8_Handler+0x13c>)
100031a8:	601a      	str	r2, [r3, #0]
100031aa:	e00b      	b.n	100031c4 <IRQ8_Handler+0x108>
				}
				else wait_echo = 1;
100031ac:	4b15      	ldr	r3, [pc, #84]	; (10003204 <IRQ8_Handler+0x148>)
100031ae:	2201      	movs	r2, #1
100031b0:	701a      	strb	r2, [r3, #0]
100031b2:	e007      	b.n	100031c4 <IRQ8_Handler+0x108>
			}

		else if (t_10us_count > reset_at) reset();//no ech in expüecte time error start again // 25000us 40Hz
100031b4:	4b05      	ldr	r3, [pc, #20]	; (100031cc <IRQ8_Handler+0x110>)
100031b6:	681a      	ldr	r2, [r3, #0]
100031b8:	4b0f      	ldr	r3, [pc, #60]	; (100031f8 <IRQ8_Handler+0x13c>)
100031ba:	681b      	ldr	r3, [r3, #0]
100031bc:	429a      	cmp	r2, r3
100031be:	d901      	bls.n	100031c4 <IRQ8_Handler+0x108>
100031c0:	f000 f822 	bl	10003208 <reset>
	}
}
100031c4:	46bd      	mov	sp, r7
100031c6:	bd80      	pop	{r7, pc}
100031c8:	2000062e 	.word	0x2000062e
100031cc:	20000650 	.word	0x20000650
100031d0:	2000064f 	.word	0x2000064f
100031d4:	20000654 	.word	0x20000654
100031d8:	20000634 	.word	0x20000634
100031dc:	20000618 	.word	0x20000618
100031e0:	100051f8 	.word	0x100051f8
100031e4:	2000064d 	.word	0x2000064d
100031e8:	10005218 	.word	0x10005218
100031ec:	10005238 	.word	0x10005238
100031f0:	20000680 	.word	0x20000680
100031f4:	2000062a 	.word	0x2000062a
100031f8:	20000630 	.word	0x20000630
100031fc:	2000062c 	.word	0x2000062c
10003200:	00000a8c 	.word	0x00000a8c
10003204:	2000064e 	.word	0x2000064e

10003208 <reset>:

void reset(){
10003208:	b580      	push	{r7, lr}
1000320a:	af00      	add	r7, sp, #0
	reset_done = 0;
1000320c:	4b17      	ldr	r3, [pc, #92]	; (1000326c <reset+0x64>)
1000320e:	2200      	movs	r2, #0
10003210:	701a      	strb	r2, [r3, #0]

	// set values values back
	t_10us_count = 0;
10003212:	4b17      	ldr	r3, [pc, #92]	; (10003270 <reset+0x68>)
10003214:	2200      	movs	r2, #0
10003216:	601a      	str	r2, [r3, #0]
	wait_echo = 0;
10003218:	4b16      	ldr	r3, [pc, #88]	; (10003274 <reset+0x6c>)
1000321a:	2200      	movs	r2, #0
1000321c:	701a      	strb	r2, [r3, #0]
	echo_count_control = 0;
1000321e:	4b16      	ldr	r3, [pc, #88]	; (10003278 <reset+0x70>)
10003220:	2200      	movs	r2, #0
10003222:	701a      	strb	r2, [r3, #0]
	echo_t_10us = 0;
10003224:	4b15      	ldr	r3, [pc, #84]	; (1000327c <reset+0x74>)
10003226:	2200      	movs	r2, #0
10003228:	601a      	str	r2, [r3, #0]
	reset_at = MAX_RESET;
1000322a:	4b15      	ldr	r3, [pc, #84]	; (10003280 <reset+0x78>)
1000322c:	4a15      	ldr	r2, [pc, #84]	; (10003284 <reset+0x7c>)
1000322e:	601a      	str	r2, [r3, #0]

	//switch to next sensor
	Now_Sensor = Now_Sensor << 1;
10003230:	4b15      	ldr	r3, [pc, #84]	; (10003288 <reset+0x80>)
10003232:	781b      	ldrb	r3, [r3, #0]
10003234:	b2db      	uxtb	r3, r3
10003236:	18db      	adds	r3, r3, r3
10003238:	b2da      	uxtb	r2, r3
1000323a:	4b13      	ldr	r3, [pc, #76]	; (10003288 <reset+0x80>)
1000323c:	701a      	strb	r2, [r3, #0]
	if(Now_Sensor > NUM_SENSORS){
1000323e:	4b12      	ldr	r3, [pc, #72]	; (10003288 <reset+0x80>)
10003240:	781b      	ldrb	r3, [r3, #0]
10003242:	b2db      	uxtb	r3, r3
10003244:	2b04      	cmp	r3, #4
10003246:	d906      	bls.n	10003256 <reset+0x4e>
		Now_Sensor = CENTER;
10003248:	4b0f      	ldr	r3, [pc, #60]	; (10003288 <reset+0x80>)
1000324a:	2201      	movs	r2, #1
1000324c:	701a      	strb	r2, [r3, #0]
		avg_distances();
1000324e:	f000 fa9d 	bl	1000378c <avg_distances>
		CAN_send_values(); //send results
10003252:	f000 fa61 	bl	10003718 <CAN_send_values>
	}
	// sampelr rater counter
	restet_count++;
10003256:	4b0d      	ldr	r3, [pc, #52]	; (1000328c <reset+0x84>)
10003258:	681b      	ldr	r3, [r3, #0]
1000325a:	1c5a      	adds	r2, r3, #1
1000325c:	4b0b      	ldr	r3, [pc, #44]	; (1000328c <reset+0x84>)
1000325e:	601a      	str	r2, [r3, #0]

	reset_done = 1;
10003260:	4b02      	ldr	r3, [pc, #8]	; (1000326c <reset+0x64>)
10003262:	2201      	movs	r2, #1
10003264:	701a      	strb	r2, [r3, #0]
}
10003266:	46bd      	mov	sp, r7
10003268:	bd80      	pop	{r7, pc}
1000326a:	46c0      	nop			; (mov r8, r8)
1000326c:	2000062e 	.word	0x2000062e
10003270:	20000650 	.word	0x20000650
10003274:	2000064e 	.word	0x2000064e
10003278:	2000064f 	.word	0x2000064f
1000327c:	20000654 	.word	0x20000654
10003280:	20000630 	.word	0x20000630
10003284:	00000a8c 	.word	0x00000a8c
10003288:	20000634 	.word	0x20000634
1000328c:	20000670 	.word	0x20000670

10003290 <IRQ5_Handler>:

void ISR_ECHO_C(void){
10003290:	b598      	push	{r3, r4, r7, lr}
10003292:	af00      	add	r7, sp, #0
	if(Now_Sensor == CENTER){
10003294:	4b36      	ldr	r3, [pc, #216]	; (10003370 <IRQ5_Handler+0xe0>)
10003296:	781b      	ldrb	r3, [r3, #0]
10003298:	b2db      	uxtb	r3, r3
1000329a:	2b01      	cmp	r3, #1
1000329c:	d166      	bne.n	1000336c <IRQ5_Handler+0xdc>
		echo_state = PIN_INTERRUPT_GetPinValue(&ECHO_C);
1000329e:	4b35      	ldr	r3, [pc, #212]	; (10003374 <IRQ5_Handler+0xe4>)
100032a0:	1c18      	adds	r0, r3, #0
100032a2:	f7ff fe9f 	bl	10002fe4 <PIN_INTERRUPT_GetPinValue>
100032a6:	1c03      	adds	r3, r0, #0
100032a8:	b2da      	uxtb	r2, r3
100032aa:	4b33      	ldr	r3, [pc, #204]	; (10003378 <IRQ5_Handler+0xe8>)
100032ac:	701a      	strb	r2, [r3, #0]
		if(wait_echo == 1 && echo_state == 1) echo_count_control = 1;
100032ae:	4b33      	ldr	r3, [pc, #204]	; (1000337c <IRQ5_Handler+0xec>)
100032b0:	781b      	ldrb	r3, [r3, #0]
100032b2:	b2db      	uxtb	r3, r3
100032b4:	2b01      	cmp	r3, #1
100032b6:	d108      	bne.n	100032ca <IRQ5_Handler+0x3a>
100032b8:	4b2f      	ldr	r3, [pc, #188]	; (10003378 <IRQ5_Handler+0xe8>)
100032ba:	781b      	ldrb	r3, [r3, #0]
100032bc:	b2db      	uxtb	r3, r3
100032be:	2b01      	cmp	r3, #1
100032c0:	d103      	bne.n	100032ca <IRQ5_Handler+0x3a>
100032c2:	4b2f      	ldr	r3, [pc, #188]	; (10003380 <IRQ5_Handler+0xf0>)
100032c4:	2201      	movs	r2, #1
100032c6:	701a      	strb	r2, [r3, #0]
100032c8:	e050      	b.n	1000336c <IRQ5_Handler+0xdc>
		else if(echo_state == 0 && echo_count_control == 1){
100032ca:	4b2b      	ldr	r3, [pc, #172]	; (10003378 <IRQ5_Handler+0xe8>)
100032cc:	781b      	ldrb	r3, [r3, #0]
100032ce:	b2db      	uxtb	r3, r3
100032d0:	2b00      	cmp	r3, #0
100032d2:	d14b      	bne.n	1000336c <IRQ5_Handler+0xdc>
100032d4:	4b2a      	ldr	r3, [pc, #168]	; (10003380 <IRQ5_Handler+0xf0>)
100032d6:	781b      	ldrb	r3, [r3, #0]
100032d8:	b2db      	uxtb	r3, r3
100032da:	2b01      	cmp	r3, #1
100032dc:	d146      	bne.n	1000336c <IRQ5_Handler+0xdc>
			echo_time = echo_t_10us;
100032de:	4b29      	ldr	r3, [pc, #164]	; (10003384 <IRQ5_Handler+0xf4>)
100032e0:	681a      	ldr	r2, [r3, #0]
100032e2:	4b29      	ldr	r3, [pc, #164]	; (10003388 <IRQ5_Handler+0xf8>)
100032e4:	601a      	str	r2, [r3, #0]
			if(within_MAX_MIN_check_int(echo_time, ECHO_TIME_MAX, ECHO_TIME_MIN)){
100032e6:	4b28      	ldr	r3, [pc, #160]	; (10003388 <IRQ5_Handler+0xf8>)
100032e8:	681b      	ldr	r3, [r3, #0]
100032ea:	1c1a      	adds	r2, r3, #0
100032ec:	4b27      	ldr	r3, [pc, #156]	; (1000338c <IRQ5_Handler+0xfc>)
100032ee:	1c10      	adds	r0, r2, #0
100032f0:	1c19      	adds	r1, r3, #0
100032f2:	220a      	movs	r2, #10
100032f4:	f000 f9d2 	bl	1000369c <within_MAX_MIN_check_int>
100032f8:	1e03      	subs	r3, r0, #0
100032fa:	d01c      	beq.n	10003336 <IRQ5_Handler+0xa6>
				distance_C = echo_time * ECHO_TIME_10us_TO_DISTANCE_cm;
100032fc:	4b22      	ldr	r3, [pc, #136]	; (10003388 <IRQ5_Handler+0xf8>)
100032fe:	681b      	ldr	r3, [r3, #0]
10003300:	1c18      	adds	r0, r3, #0
10003302:	f001 fd93 	bl	10004e2c <__aeabi_ui2d>
10003306:	1c03      	adds	r3, r0, #0
10003308:	1c0c      	adds	r4, r1, #0
1000330a:	1c18      	adds	r0, r3, #0
1000330c:	1c21      	adds	r1, r4, #0
1000330e:	4a20      	ldr	r2, [pc, #128]	; (10003390 <IRQ5_Handler+0x100>)
10003310:	4b20      	ldr	r3, [pc, #128]	; (10003394 <IRQ5_Handler+0x104>)
10003312:	f000 ff41 	bl	10004198 <__aeabi_dmul>
10003316:	1c03      	adds	r3, r0, #0
10003318:	1c0c      	adds	r4, r1, #0
1000331a:	1c18      	adds	r0, r3, #0
1000331c:	1c21      	adds	r1, r4, #0
1000331e:	f000 faa9 	bl	10003874 <__aeabi_d2uiz>
10003322:	1c03      	adds	r3, r0, #0
10003324:	b29a      	uxth	r2, r3
10003326:	4b1c      	ldr	r3, [pc, #112]	; (10003398 <IRQ5_Handler+0x108>)
10003328:	801a      	strh	r2, [r3, #0]
				sample_count++; // sampelr rater counter
1000332a:	4b1c      	ldr	r3, [pc, #112]	; (1000339c <IRQ5_Handler+0x10c>)
1000332c:	681b      	ldr	r3, [r3, #0]
1000332e:	1c5a      	adds	r2, r3, #1
10003330:	4b1a      	ldr	r3, [pc, #104]	; (1000339c <IRQ5_Handler+0x10c>)
10003332:	601a      	str	r2, [r3, #0]
10003334:	e004      	b.n	10003340 <IRQ5_Handler+0xb0>
			}
			else limit_fail_count ++;
10003336:	4b1a      	ldr	r3, [pc, #104]	; (100033a0 <IRQ5_Handler+0x110>)
10003338:	681b      	ldr	r3, [r3, #0]
1000333a:	1c5a      	adds	r2, r3, #1
1000333c:	4b18      	ldr	r3, [pc, #96]	; (100033a0 <IRQ5_Handler+0x110>)
1000333e:	601a      	str	r2, [r3, #0]
			 reset_at = t_10us_count + RESET_IN_10us_AFTER_SUCSSES;
10003340:	4b18      	ldr	r3, [pc, #96]	; (100033a4 <IRQ5_Handler+0x114>)
10003342:	881b      	ldrh	r3, [r3, #0]
10003344:	1c1a      	adds	r2, r3, #0
10003346:	4b18      	ldr	r3, [pc, #96]	; (100033a8 <IRQ5_Handler+0x118>)
10003348:	681b      	ldr	r3, [r3, #0]
1000334a:	18d2      	adds	r2, r2, r3
1000334c:	4b17      	ldr	r3, [pc, #92]	; (100033ac <IRQ5_Handler+0x11c>)
1000334e:	601a      	str	r2, [r3, #0]
			 reset_at = saturation_to_MIN_MAX(reset_at,MAX_RESET,MIN_RESET);
10003350:	4b16      	ldr	r3, [pc, #88]	; (100033ac <IRQ5_Handler+0x11c>)
10003352:	681b      	ldr	r3, [r3, #0]
10003354:	b29a      	uxth	r2, r3
10003356:	4b16      	ldr	r3, [pc, #88]	; (100033b0 <IRQ5_Handler+0x120>)
10003358:	881b      	ldrh	r3, [r3, #0]
1000335a:	4916      	ldr	r1, [pc, #88]	; (100033b4 <IRQ5_Handler+0x124>)
1000335c:	1c10      	adds	r0, r2, #0
1000335e:	1c1a      	adds	r2, r3, #0
10003360:	f000 f9b2 	bl	100036c8 <saturation_to_MIN_MAX>
10003364:	1c03      	adds	r3, r0, #0
10003366:	1c1a      	adds	r2, r3, #0
10003368:	4b10      	ldr	r3, [pc, #64]	; (100033ac <IRQ5_Handler+0x11c>)
1000336a:	601a      	str	r2, [r3, #0]
		}
	}
}
1000336c:	46bd      	mov	sp, r7
1000336e:	bd98      	pop	{r3, r4, r7, pc}
10003370:	20000634 	.word	0x20000634
10003374:	100051f8 	.word	0x100051f8
10003378:	2000064d 	.word	0x2000064d
1000337c:	2000064e 	.word	0x2000064e
10003380:	2000064f 	.word	0x2000064f
10003384:	20000654 	.word	0x20000654
10003388:	20000658 	.word	0x20000658
1000338c:	00000a28 	.word	0x00000a28
10003390:	5c28f5c3 	.word	0x5c28f5c3
10003394:	3fc5c28f 	.word	0x3fc5c28f
10003398:	2000065c 	.word	0x2000065c
1000339c:	20000674 	.word	0x20000674
100033a0:	2000068c 	.word	0x2000068c
100033a4:	20000628 	.word	0x20000628
100033a8:	20000650 	.word	0x20000650
100033ac:	20000630 	.word	0x20000630
100033b0:	2000062c 	.word	0x2000062c
100033b4:	00000a8c 	.word	0x00000a8c

100033b8 <IRQ3_Handler>:

void ISR_ECHO_L(void){
100033b8:	b598      	push	{r3, r4, r7, lr}
100033ba:	af00      	add	r7, sp, #0
	if(Now_Sensor == LEFT){
100033bc:	4b36      	ldr	r3, [pc, #216]	; (10003498 <IRQ3_Handler+0xe0>)
100033be:	781b      	ldrb	r3, [r3, #0]
100033c0:	b2db      	uxtb	r3, r3
100033c2:	2b02      	cmp	r3, #2
100033c4:	d166      	bne.n	10003494 <IRQ3_Handler+0xdc>
		echo_state = PIN_INTERRUPT_GetPinValue(&ECHO_L);
100033c6:	4b35      	ldr	r3, [pc, #212]	; (1000349c <IRQ3_Handler+0xe4>)
100033c8:	1c18      	adds	r0, r3, #0
100033ca:	f7ff fe0b 	bl	10002fe4 <PIN_INTERRUPT_GetPinValue>
100033ce:	1c03      	adds	r3, r0, #0
100033d0:	b2da      	uxtb	r2, r3
100033d2:	4b33      	ldr	r3, [pc, #204]	; (100034a0 <IRQ3_Handler+0xe8>)
100033d4:	701a      	strb	r2, [r3, #0]
		if(wait_echo == 1 && echo_state == 1) echo_count_control = 1;
100033d6:	4b33      	ldr	r3, [pc, #204]	; (100034a4 <IRQ3_Handler+0xec>)
100033d8:	781b      	ldrb	r3, [r3, #0]
100033da:	b2db      	uxtb	r3, r3
100033dc:	2b01      	cmp	r3, #1
100033de:	d108      	bne.n	100033f2 <IRQ3_Handler+0x3a>
100033e0:	4b2f      	ldr	r3, [pc, #188]	; (100034a0 <IRQ3_Handler+0xe8>)
100033e2:	781b      	ldrb	r3, [r3, #0]
100033e4:	b2db      	uxtb	r3, r3
100033e6:	2b01      	cmp	r3, #1
100033e8:	d103      	bne.n	100033f2 <IRQ3_Handler+0x3a>
100033ea:	4b2f      	ldr	r3, [pc, #188]	; (100034a8 <IRQ3_Handler+0xf0>)
100033ec:	2201      	movs	r2, #1
100033ee:	701a      	strb	r2, [r3, #0]
100033f0:	e050      	b.n	10003494 <IRQ3_Handler+0xdc>
		else if(echo_state == 0 && echo_count_control == 1){
100033f2:	4b2b      	ldr	r3, [pc, #172]	; (100034a0 <IRQ3_Handler+0xe8>)
100033f4:	781b      	ldrb	r3, [r3, #0]
100033f6:	b2db      	uxtb	r3, r3
100033f8:	2b00      	cmp	r3, #0
100033fa:	d14b      	bne.n	10003494 <IRQ3_Handler+0xdc>
100033fc:	4b2a      	ldr	r3, [pc, #168]	; (100034a8 <IRQ3_Handler+0xf0>)
100033fe:	781b      	ldrb	r3, [r3, #0]
10003400:	b2db      	uxtb	r3, r3
10003402:	2b01      	cmp	r3, #1
10003404:	d146      	bne.n	10003494 <IRQ3_Handler+0xdc>
			echo_time = echo_t_10us;
10003406:	4b29      	ldr	r3, [pc, #164]	; (100034ac <IRQ3_Handler+0xf4>)
10003408:	681a      	ldr	r2, [r3, #0]
1000340a:	4b29      	ldr	r3, [pc, #164]	; (100034b0 <IRQ3_Handler+0xf8>)
1000340c:	601a      	str	r2, [r3, #0]
			if(within_MAX_MIN_check_int(echo_time, ECHO_TIME_MAX, ECHO_TIME_MIN)){
1000340e:	4b28      	ldr	r3, [pc, #160]	; (100034b0 <IRQ3_Handler+0xf8>)
10003410:	681b      	ldr	r3, [r3, #0]
10003412:	1c1a      	adds	r2, r3, #0
10003414:	4b27      	ldr	r3, [pc, #156]	; (100034b4 <IRQ3_Handler+0xfc>)
10003416:	1c10      	adds	r0, r2, #0
10003418:	1c19      	adds	r1, r3, #0
1000341a:	220a      	movs	r2, #10
1000341c:	f000 f93e 	bl	1000369c <within_MAX_MIN_check_int>
10003420:	1e03      	subs	r3, r0, #0
10003422:	d01c      	beq.n	1000345e <IRQ3_Handler+0xa6>
				distance_L = echo_time * ECHO_TIME_10us_TO_DISTANCE_cm;
10003424:	4b22      	ldr	r3, [pc, #136]	; (100034b0 <IRQ3_Handler+0xf8>)
10003426:	681b      	ldr	r3, [r3, #0]
10003428:	1c18      	adds	r0, r3, #0
1000342a:	f001 fcff 	bl	10004e2c <__aeabi_ui2d>
1000342e:	1c03      	adds	r3, r0, #0
10003430:	1c0c      	adds	r4, r1, #0
10003432:	1c18      	adds	r0, r3, #0
10003434:	1c21      	adds	r1, r4, #0
10003436:	4a20      	ldr	r2, [pc, #128]	; (100034b8 <IRQ3_Handler+0x100>)
10003438:	4b20      	ldr	r3, [pc, #128]	; (100034bc <IRQ3_Handler+0x104>)
1000343a:	f000 fead 	bl	10004198 <__aeabi_dmul>
1000343e:	1c03      	adds	r3, r0, #0
10003440:	1c0c      	adds	r4, r1, #0
10003442:	1c18      	adds	r0, r3, #0
10003444:	1c21      	adds	r1, r4, #0
10003446:	f000 fa15 	bl	10003874 <__aeabi_d2uiz>
1000344a:	1c03      	adds	r3, r0, #0
1000344c:	b29a      	uxth	r2, r3
1000344e:	4b1c      	ldr	r3, [pc, #112]	; (100034c0 <IRQ3_Handler+0x108>)
10003450:	801a      	strh	r2, [r3, #0]
				sample_count++; // sampelr rater counter
10003452:	4b1c      	ldr	r3, [pc, #112]	; (100034c4 <IRQ3_Handler+0x10c>)
10003454:	681b      	ldr	r3, [r3, #0]
10003456:	1c5a      	adds	r2, r3, #1
10003458:	4b1a      	ldr	r3, [pc, #104]	; (100034c4 <IRQ3_Handler+0x10c>)
1000345a:	601a      	str	r2, [r3, #0]
1000345c:	e004      	b.n	10003468 <IRQ3_Handler+0xb0>
			}
			else limit_fail_count ++;
1000345e:	4b1a      	ldr	r3, [pc, #104]	; (100034c8 <IRQ3_Handler+0x110>)
10003460:	681b      	ldr	r3, [r3, #0]
10003462:	1c5a      	adds	r2, r3, #1
10003464:	4b18      	ldr	r3, [pc, #96]	; (100034c8 <IRQ3_Handler+0x110>)
10003466:	601a      	str	r2, [r3, #0]
			 reset_at = t_10us_count + RESET_IN_10us_AFTER_SUCSSES;
10003468:	4b18      	ldr	r3, [pc, #96]	; (100034cc <IRQ3_Handler+0x114>)
1000346a:	881b      	ldrh	r3, [r3, #0]
1000346c:	1c1a      	adds	r2, r3, #0
1000346e:	4b18      	ldr	r3, [pc, #96]	; (100034d0 <IRQ3_Handler+0x118>)
10003470:	681b      	ldr	r3, [r3, #0]
10003472:	18d2      	adds	r2, r2, r3
10003474:	4b17      	ldr	r3, [pc, #92]	; (100034d4 <IRQ3_Handler+0x11c>)
10003476:	601a      	str	r2, [r3, #0]
			 reset_at = saturation_to_MIN_MAX(reset_at,MAX_RESET,MIN_RESET);
10003478:	4b16      	ldr	r3, [pc, #88]	; (100034d4 <IRQ3_Handler+0x11c>)
1000347a:	681b      	ldr	r3, [r3, #0]
1000347c:	b29a      	uxth	r2, r3
1000347e:	4b16      	ldr	r3, [pc, #88]	; (100034d8 <IRQ3_Handler+0x120>)
10003480:	881b      	ldrh	r3, [r3, #0]
10003482:	4916      	ldr	r1, [pc, #88]	; (100034dc <IRQ3_Handler+0x124>)
10003484:	1c10      	adds	r0, r2, #0
10003486:	1c1a      	adds	r2, r3, #0
10003488:	f000 f91e 	bl	100036c8 <saturation_to_MIN_MAX>
1000348c:	1c03      	adds	r3, r0, #0
1000348e:	1c1a      	adds	r2, r3, #0
10003490:	4b10      	ldr	r3, [pc, #64]	; (100034d4 <IRQ3_Handler+0x11c>)
10003492:	601a      	str	r2, [r3, #0]
		}
	}
}
10003494:	46bd      	mov	sp, r7
10003496:	bd98      	pop	{r3, r4, r7, pc}
10003498:	20000634 	.word	0x20000634
1000349c:	10005218 	.word	0x10005218
100034a0:	2000064d 	.word	0x2000064d
100034a4:	2000064e 	.word	0x2000064e
100034a8:	2000064f 	.word	0x2000064f
100034ac:	20000654 	.word	0x20000654
100034b0:	20000658 	.word	0x20000658
100034b4:	00000a28 	.word	0x00000a28
100034b8:	5c28f5c3 	.word	0x5c28f5c3
100034bc:	3fc5c28f 	.word	0x3fc5c28f
100034c0:	2000065e 	.word	0x2000065e
100034c4:	20000674 	.word	0x20000674
100034c8:	2000068c 	.word	0x2000068c
100034cc:	20000628 	.word	0x20000628
100034d0:	20000650 	.word	0x20000650
100034d4:	20000630 	.word	0x20000630
100034d8:	2000062c 	.word	0x2000062c
100034dc:	00000a8c 	.word	0x00000a8c

100034e0 <IRQ6_Handler>:

void ISR_ECHO_R(void){
100034e0:	b598      	push	{r3, r4, r7, lr}
100034e2:	af00      	add	r7, sp, #0
	if(Now_Sensor == RIGHT){
100034e4:	4b36      	ldr	r3, [pc, #216]	; (100035c0 <IRQ6_Handler+0xe0>)
100034e6:	781b      	ldrb	r3, [r3, #0]
100034e8:	b2db      	uxtb	r3, r3
100034ea:	2b04      	cmp	r3, #4
100034ec:	d166      	bne.n	100035bc <IRQ6_Handler+0xdc>
		echo_state = PIN_INTERRUPT_GetPinValue(&ECHO_R);
100034ee:	4b35      	ldr	r3, [pc, #212]	; (100035c4 <IRQ6_Handler+0xe4>)
100034f0:	1c18      	adds	r0, r3, #0
100034f2:	f7ff fd77 	bl	10002fe4 <PIN_INTERRUPT_GetPinValue>
100034f6:	1c03      	adds	r3, r0, #0
100034f8:	b2da      	uxtb	r2, r3
100034fa:	4b33      	ldr	r3, [pc, #204]	; (100035c8 <IRQ6_Handler+0xe8>)
100034fc:	701a      	strb	r2, [r3, #0]
		if(wait_echo == 1 && echo_state == 1) echo_count_control = 1;
100034fe:	4b33      	ldr	r3, [pc, #204]	; (100035cc <IRQ6_Handler+0xec>)
10003500:	781b      	ldrb	r3, [r3, #0]
10003502:	b2db      	uxtb	r3, r3
10003504:	2b01      	cmp	r3, #1
10003506:	d108      	bne.n	1000351a <IRQ6_Handler+0x3a>
10003508:	4b2f      	ldr	r3, [pc, #188]	; (100035c8 <IRQ6_Handler+0xe8>)
1000350a:	781b      	ldrb	r3, [r3, #0]
1000350c:	b2db      	uxtb	r3, r3
1000350e:	2b01      	cmp	r3, #1
10003510:	d103      	bne.n	1000351a <IRQ6_Handler+0x3a>
10003512:	4b2f      	ldr	r3, [pc, #188]	; (100035d0 <IRQ6_Handler+0xf0>)
10003514:	2201      	movs	r2, #1
10003516:	701a      	strb	r2, [r3, #0]
10003518:	e050      	b.n	100035bc <IRQ6_Handler+0xdc>
		else if(echo_state == 0 && echo_count_control == 1){
1000351a:	4b2b      	ldr	r3, [pc, #172]	; (100035c8 <IRQ6_Handler+0xe8>)
1000351c:	781b      	ldrb	r3, [r3, #0]
1000351e:	b2db      	uxtb	r3, r3
10003520:	2b00      	cmp	r3, #0
10003522:	d14b      	bne.n	100035bc <IRQ6_Handler+0xdc>
10003524:	4b2a      	ldr	r3, [pc, #168]	; (100035d0 <IRQ6_Handler+0xf0>)
10003526:	781b      	ldrb	r3, [r3, #0]
10003528:	b2db      	uxtb	r3, r3
1000352a:	2b01      	cmp	r3, #1
1000352c:	d146      	bne.n	100035bc <IRQ6_Handler+0xdc>
			echo_time = echo_t_10us;
1000352e:	4b29      	ldr	r3, [pc, #164]	; (100035d4 <IRQ6_Handler+0xf4>)
10003530:	681a      	ldr	r2, [r3, #0]
10003532:	4b29      	ldr	r3, [pc, #164]	; (100035d8 <IRQ6_Handler+0xf8>)
10003534:	601a      	str	r2, [r3, #0]
			if(within_MAX_MIN_check_int(echo_time, ECHO_TIME_MAX, ECHO_TIME_MIN)){
10003536:	4b28      	ldr	r3, [pc, #160]	; (100035d8 <IRQ6_Handler+0xf8>)
10003538:	681b      	ldr	r3, [r3, #0]
1000353a:	1c1a      	adds	r2, r3, #0
1000353c:	4b27      	ldr	r3, [pc, #156]	; (100035dc <IRQ6_Handler+0xfc>)
1000353e:	1c10      	adds	r0, r2, #0
10003540:	1c19      	adds	r1, r3, #0
10003542:	220a      	movs	r2, #10
10003544:	f000 f8aa 	bl	1000369c <within_MAX_MIN_check_int>
10003548:	1e03      	subs	r3, r0, #0
1000354a:	d01c      	beq.n	10003586 <IRQ6_Handler+0xa6>
				distance_R = echo_time * ECHO_TIME_10us_TO_DISTANCE_cm;
1000354c:	4b22      	ldr	r3, [pc, #136]	; (100035d8 <IRQ6_Handler+0xf8>)
1000354e:	681b      	ldr	r3, [r3, #0]
10003550:	1c18      	adds	r0, r3, #0
10003552:	f001 fc6b 	bl	10004e2c <__aeabi_ui2d>
10003556:	1c03      	adds	r3, r0, #0
10003558:	1c0c      	adds	r4, r1, #0
1000355a:	1c18      	adds	r0, r3, #0
1000355c:	1c21      	adds	r1, r4, #0
1000355e:	4a20      	ldr	r2, [pc, #128]	; (100035e0 <IRQ6_Handler+0x100>)
10003560:	4b20      	ldr	r3, [pc, #128]	; (100035e4 <IRQ6_Handler+0x104>)
10003562:	f000 fe19 	bl	10004198 <__aeabi_dmul>
10003566:	1c03      	adds	r3, r0, #0
10003568:	1c0c      	adds	r4, r1, #0
1000356a:	1c18      	adds	r0, r3, #0
1000356c:	1c21      	adds	r1, r4, #0
1000356e:	f000 f981 	bl	10003874 <__aeabi_d2uiz>
10003572:	1c03      	adds	r3, r0, #0
10003574:	b29a      	uxth	r2, r3
10003576:	4b1c      	ldr	r3, [pc, #112]	; (100035e8 <IRQ6_Handler+0x108>)
10003578:	801a      	strh	r2, [r3, #0]
				sample_count++; // sampelr rater counter
1000357a:	4b1c      	ldr	r3, [pc, #112]	; (100035ec <IRQ6_Handler+0x10c>)
1000357c:	681b      	ldr	r3, [r3, #0]
1000357e:	1c5a      	adds	r2, r3, #1
10003580:	4b1a      	ldr	r3, [pc, #104]	; (100035ec <IRQ6_Handler+0x10c>)
10003582:	601a      	str	r2, [r3, #0]
10003584:	e004      	b.n	10003590 <IRQ6_Handler+0xb0>
			}
			else limit_fail_count ++;
10003586:	4b1a      	ldr	r3, [pc, #104]	; (100035f0 <IRQ6_Handler+0x110>)
10003588:	681b      	ldr	r3, [r3, #0]
1000358a:	1c5a      	adds	r2, r3, #1
1000358c:	4b18      	ldr	r3, [pc, #96]	; (100035f0 <IRQ6_Handler+0x110>)
1000358e:	601a      	str	r2, [r3, #0]
			 reset_at = t_10us_count + RESET_IN_10us_AFTER_SUCSSES;
10003590:	4b18      	ldr	r3, [pc, #96]	; (100035f4 <IRQ6_Handler+0x114>)
10003592:	881b      	ldrh	r3, [r3, #0]
10003594:	1c1a      	adds	r2, r3, #0
10003596:	4b18      	ldr	r3, [pc, #96]	; (100035f8 <IRQ6_Handler+0x118>)
10003598:	681b      	ldr	r3, [r3, #0]
1000359a:	18d2      	adds	r2, r2, r3
1000359c:	4b17      	ldr	r3, [pc, #92]	; (100035fc <IRQ6_Handler+0x11c>)
1000359e:	601a      	str	r2, [r3, #0]
			 reset_at = saturation_to_MIN_MAX(reset_at,MAX_RESET,MIN_RESET);
100035a0:	4b16      	ldr	r3, [pc, #88]	; (100035fc <IRQ6_Handler+0x11c>)
100035a2:	681b      	ldr	r3, [r3, #0]
100035a4:	b29a      	uxth	r2, r3
100035a6:	4b16      	ldr	r3, [pc, #88]	; (10003600 <IRQ6_Handler+0x120>)
100035a8:	881b      	ldrh	r3, [r3, #0]
100035aa:	4916      	ldr	r1, [pc, #88]	; (10003604 <IRQ6_Handler+0x124>)
100035ac:	1c10      	adds	r0, r2, #0
100035ae:	1c1a      	adds	r2, r3, #0
100035b0:	f000 f88a 	bl	100036c8 <saturation_to_MIN_MAX>
100035b4:	1c03      	adds	r3, r0, #0
100035b6:	1c1a      	adds	r2, r3, #0
100035b8:	4b10      	ldr	r3, [pc, #64]	; (100035fc <IRQ6_Handler+0x11c>)
100035ba:	601a      	str	r2, [r3, #0]
		}
	}
}
100035bc:	46bd      	mov	sp, r7
100035be:	bd98      	pop	{r3, r4, r7, pc}
100035c0:	20000634 	.word	0x20000634
100035c4:	10005238 	.word	0x10005238
100035c8:	2000064d 	.word	0x2000064d
100035cc:	2000064e 	.word	0x2000064e
100035d0:	2000064f 	.word	0x2000064f
100035d4:	20000654 	.word	0x20000654
100035d8:	20000658 	.word	0x20000658
100035dc:	00000a28 	.word	0x00000a28
100035e0:	5c28f5c3 	.word	0x5c28f5c3
100035e4:	3fc5c28f 	.word	0x3fc5c28f
100035e8:	20000660 	.word	0x20000660
100035ec:	20000674 	.word	0x20000674
100035f0:	2000068c 	.word	0x2000068c
100035f4:	20000628 	.word	0x20000628
100035f8:	20000650 	.word	0x20000650
100035fc:	20000630 	.word	0x20000630
10003600:	2000062c 	.word	0x2000062c
10003604:	00000a8c 	.word	0x00000a8c

10003608 <IRQ7_Handler>:


void ISR_1s_TIMER(){ //for diagnostics
10003608:	b580      	push	{r7, lr}
1000360a:	af00      	add	r7, sp, #0
	sample_rate_Hz = sample_count;
1000360c:	4b15      	ldr	r3, [pc, #84]	; (10003664 <IRQ7_Handler+0x5c>)
1000360e:	681a      	ldr	r2, [r3, #0]
10003610:	4b15      	ldr	r3, [pc, #84]	; (10003668 <IRQ7_Handler+0x60>)
10003612:	601a      	str	r2, [r3, #0]
	if(restet_count > sample_count) failed_count = restet_count - sample_count;
10003614:	4b15      	ldr	r3, [pc, #84]	; (1000366c <IRQ7_Handler+0x64>)
10003616:	681a      	ldr	r2, [r3, #0]
10003618:	4b12      	ldr	r3, [pc, #72]	; (10003664 <IRQ7_Handler+0x5c>)
1000361a:	681b      	ldr	r3, [r3, #0]
1000361c:	429a      	cmp	r2, r3
1000361e:	d907      	bls.n	10003630 <IRQ7_Handler+0x28>
10003620:	4b12      	ldr	r3, [pc, #72]	; (1000366c <IRQ7_Handler+0x64>)
10003622:	681a      	ldr	r2, [r3, #0]
10003624:	4b0f      	ldr	r3, [pc, #60]	; (10003664 <IRQ7_Handler+0x5c>)
10003626:	681b      	ldr	r3, [r3, #0]
10003628:	1ad2      	subs	r2, r2, r3
1000362a:	4b11      	ldr	r3, [pc, #68]	; (10003670 <IRQ7_Handler+0x68>)
1000362c:	601a      	str	r2, [r3, #0]
1000362e:	e002      	b.n	10003636 <IRQ7_Handler+0x2e>
	else failed_count = 0;
10003630:	4b0f      	ldr	r3, [pc, #60]	; (10003670 <IRQ7_Handler+0x68>)
10003632:	2200      	movs	r2, #0
10003634:	601a      	str	r2, [r3, #0]
	echo_not_low_count_1 = echo_not_low_count;
10003636:	4b0f      	ldr	r3, [pc, #60]	; (10003674 <IRQ7_Handler+0x6c>)
10003638:	681a      	ldr	r2, [r3, #0]
1000363a:	4b0f      	ldr	r3, [pc, #60]	; (10003678 <IRQ7_Handler+0x70>)
1000363c:	601a      	str	r2, [r3, #0]
	limit_fail_num = limit_fail_count;
1000363e:	4b0f      	ldr	r3, [pc, #60]	; (1000367c <IRQ7_Handler+0x74>)
10003640:	681a      	ldr	r2, [r3, #0]
10003642:	4b0f      	ldr	r3, [pc, #60]	; (10003680 <IRQ7_Handler+0x78>)
10003644:	601a      	str	r2, [r3, #0]
	sample_count = 0;
10003646:	4b07      	ldr	r3, [pc, #28]	; (10003664 <IRQ7_Handler+0x5c>)
10003648:	2200      	movs	r2, #0
1000364a:	601a      	str	r2, [r3, #0]
	restet_count = 0;
1000364c:	4b07      	ldr	r3, [pc, #28]	; (1000366c <IRQ7_Handler+0x64>)
1000364e:	2200      	movs	r2, #0
10003650:	601a      	str	r2, [r3, #0]
	limit_fail_count = 0;
10003652:	4b0a      	ldr	r3, [pc, #40]	; (1000367c <IRQ7_Handler+0x74>)
10003654:	2200      	movs	r2, #0
10003656:	601a      	str	r2, [r3, #0]
	echo_not_low_count = 0;
10003658:	4b06      	ldr	r3, [pc, #24]	; (10003674 <IRQ7_Handler+0x6c>)
1000365a:	2200      	movs	r2, #0
1000365c:	601a      	str	r2, [r3, #0]
}
1000365e:	46bd      	mov	sp, r7
10003660:	bd80      	pop	{r7, pc}
10003662:	46c0      	nop			; (mov r8, r8)
10003664:	20000674 	.word	0x20000674
10003668:	20000678 	.word	0x20000678
1000366c:	20000670 	.word	0x20000670
10003670:	2000067c 	.word	0x2000067c
10003674:	20000680 	.word	0x20000680
10003678:	20000684 	.word	0x20000684
1000367c:	2000068c 	.word	0x2000068c
10003680:	20000688 	.word	0x20000688

10003684 <IRQ0_Handler>:
  WATCHDOG_ClearAlarm(); /* Clear the alarm event */
  DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 // DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
}

void CAN_RX_ISR(void){
10003684:	b580      	push	{r7, lr}
10003686:	af00      	add	r7, sp, #0
	WATCHDOG_Service();
10003688:	f7ff fcdc 	bl	10003044 <WATCHDOG_Service>
	//DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
1000368c:	4b02      	ldr	r3, [pc, #8]	; (10003698 <IRQ0_Handler+0x14>)
1000368e:	1c18      	adds	r0, r3, #0
10003690:	f7ff fcde 	bl	10003050 <DIGITAL_IO_SetOutputHigh>
}
10003694:	46bd      	mov	sp, r7
10003696:	bd80      	pop	{r7, pc}
10003698:	10005290 	.word	0x10005290

1000369c <within_MAX_MIN_check_int>:
bool within_MAX_MIN_check_int(int x, int MAX, int MIN){
1000369c:	b580      	push	{r7, lr}
1000369e:	b084      	sub	sp, #16
100036a0:	af00      	add	r7, sp, #0
100036a2:	60f8      	str	r0, [r7, #12]
100036a4:	60b9      	str	r1, [r7, #8]
100036a6:	607a      	str	r2, [r7, #4]
	if((x - MIN) * (x - MAX) <= 0) return 1;
100036a8:	68fa      	ldr	r2, [r7, #12]
100036aa:	687b      	ldr	r3, [r7, #4]
100036ac:	1ad3      	subs	r3, r2, r3
100036ae:	68f9      	ldr	r1, [r7, #12]
100036b0:	68ba      	ldr	r2, [r7, #8]
100036b2:	1a8a      	subs	r2, r1, r2
100036b4:	4353      	muls	r3, r2
100036b6:	2b00      	cmp	r3, #0
100036b8:	dc01      	bgt.n	100036be <within_MAX_MIN_check_int+0x22>
100036ba:	2301      	movs	r3, #1
100036bc:	e000      	b.n	100036c0 <within_MAX_MIN_check_int+0x24>
	else return 0;
100036be:	2300      	movs	r3, #0
}
100036c0:	1c18      	adds	r0, r3, #0
100036c2:	46bd      	mov	sp, r7
100036c4:	b004      	add	sp, #16
100036c6:	bd80      	pop	{r7, pc}

100036c8 <saturation_to_MIN_MAX>:

uint16_t saturation_to_MIN_MAX(uint16_t value, uint16_t MAX, uint16_t MIN){
100036c8:	b590      	push	{r4, r7, lr}
100036ca:	b083      	sub	sp, #12
100036cc:	af00      	add	r7, sp, #0
100036ce:	1c04      	adds	r4, r0, #0
100036d0:	1c08      	adds	r0, r1, #0
100036d2:	1c11      	adds	r1, r2, #0
100036d4:	1dbb      	adds	r3, r7, #6
100036d6:	1c22      	adds	r2, r4, #0
100036d8:	801a      	strh	r2, [r3, #0]
100036da:	1d3b      	adds	r3, r7, #4
100036dc:	1c02      	adds	r2, r0, #0
100036de:	801a      	strh	r2, [r3, #0]
100036e0:	1cbb      	adds	r3, r7, #2
100036e2:	1c0a      	adds	r2, r1, #0
100036e4:	801a      	strh	r2, [r3, #0]
	if(value < MIN) return  MIN;
100036e6:	1dba      	adds	r2, r7, #6
100036e8:	1cbb      	adds	r3, r7, #2
100036ea:	8812      	ldrh	r2, [r2, #0]
100036ec:	881b      	ldrh	r3, [r3, #0]
100036ee:	429a      	cmp	r2, r3
100036f0:	d202      	bcs.n	100036f8 <saturation_to_MIN_MAX+0x30>
100036f2:	1cbb      	adds	r3, r7, #2
100036f4:	881b      	ldrh	r3, [r3, #0]
100036f6:	e00a      	b.n	1000370e <saturation_to_MIN_MAX+0x46>
	else if(value > MAX) return MAX;
100036f8:	1dba      	adds	r2, r7, #6
100036fa:	1d3b      	adds	r3, r7, #4
100036fc:	8812      	ldrh	r2, [r2, #0]
100036fe:	881b      	ldrh	r3, [r3, #0]
10003700:	429a      	cmp	r2, r3
10003702:	d902      	bls.n	1000370a <saturation_to_MIN_MAX+0x42>
10003704:	1d3b      	adds	r3, r7, #4
10003706:	881b      	ldrh	r3, [r3, #0]
10003708:	e001      	b.n	1000370e <saturation_to_MIN_MAX+0x46>
	else return value;
1000370a:	1dbb      	adds	r3, r7, #6
1000370c:	881b      	ldrh	r3, [r3, #0]
}
1000370e:	1c18      	adds	r0, r3, #0
10003710:	46bd      	mov	sp, r7
10003712:	b003      	add	sp, #12
10003714:	bd90      	pop	{r4, r7, pc}
10003716:	46c0      	nop			; (mov r8, r8)

10003718 <CAN_send_values>:

void CAN_send_values(){
10003718:	b580      	push	{r7, lr}
1000371a:	b082      	sub	sp, #8
1000371c:	af00      	add	r7, sp, #0
	uint16_t RX_Data[4] ={CAN_OK, distance_C, distance_L, distance_R}; // in int16_t mm/s converter back on inverter
1000371e:	4b16      	ldr	r3, [pc, #88]	; (10003778 <CAN_send_values+0x60>)
10003720:	781b      	ldrb	r3, [r3, #0]
10003722:	b29a      	uxth	r2, r3
10003724:	1c3b      	adds	r3, r7, #0
10003726:	801a      	strh	r2, [r3, #0]
10003728:	4b14      	ldr	r3, [pc, #80]	; (1000377c <CAN_send_values+0x64>)
1000372a:	881b      	ldrh	r3, [r3, #0]
1000372c:	b29a      	uxth	r2, r3
1000372e:	1c3b      	adds	r3, r7, #0
10003730:	805a      	strh	r2, [r3, #2]
10003732:	4b13      	ldr	r3, [pc, #76]	; (10003780 <CAN_send_values+0x68>)
10003734:	881b      	ldrh	r3, [r3, #0]
10003736:	b29a      	uxth	r2, r3
10003738:	1c3b      	adds	r3, r7, #0
1000373a:	809a      	strh	r2, [r3, #4]
1000373c:	4b11      	ldr	r3, [pc, #68]	; (10003784 <CAN_send_values+0x6c>)
1000373e:	881b      	ldrh	r3, [r3, #0]
10003740:	b29a      	uxth	r2, r3
10003742:	1c3b      	adds	r3, r7, #0
10003744:	80da      	strh	r2, [r3, #6]

	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[0], (uint8_t*)RX_Data);
10003746:	4b10      	ldr	r3, [pc, #64]	; (10003788 <CAN_send_values+0x70>)
10003748:	68da      	ldr	r2, [r3, #12]
1000374a:	1c3b      	adds	r3, r7, #0
1000374c:	1c10      	adds	r0, r2, #0
1000374e:	1c19      	adds	r1, r3, #0
10003750:	f7ff f9fc 	bl	10002b4c <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[0]); //Transmit the data of message object1
10003754:	4b0c      	ldr	r3, [pc, #48]	; (10003788 <CAN_send_values+0x70>)
10003756:	68db      	ldr	r3, [r3, #12]
10003758:	1c18      	adds	r0, r3, #0
1000375a:	f7ff f9df 	bl	10002b1c <CAN_NODE_MO_Transmit>

	// reset
	distance_C = 0;
1000375e:	4b07      	ldr	r3, [pc, #28]	; (1000377c <CAN_send_values+0x64>)
10003760:	2200      	movs	r2, #0
10003762:	801a      	strh	r2, [r3, #0]
	distance_L = 0;
10003764:	4b06      	ldr	r3, [pc, #24]	; (10003780 <CAN_send_values+0x68>)
10003766:	2200      	movs	r2, #0
10003768:	801a      	strh	r2, [r3, #0]
	distance_R = 0;
1000376a:	4b06      	ldr	r3, [pc, #24]	; (10003784 <CAN_send_values+0x6c>)
1000376c:	2200      	movs	r2, #0
1000376e:	801a      	strh	r2, [r3, #0]
}
10003770:	46bd      	mov	sp, r7
10003772:	b002      	add	sp, #8
10003774:	bd80      	pop	{r7, pc}
10003776:	46c0      	nop			; (mov r8, r8)
10003778:	2000064c 	.word	0x2000064c
1000377c:	2000065c 	.word	0x2000065c
10003780:	2000065e 	.word	0x2000065e
10003784:	20000660 	.word	0x20000660
10003788:	100052f8 	.word	0x100052f8

1000378c <avg_distances>:

void avg_distances(){
1000378c:	b580      	push	{r7, lr}
1000378e:	af00      	add	r7, sp, #0
	if(distance_C != 0) avg_distance_C = Exp_moving_average((float)distance_C,avg_distance_C,ALPHA_DISTANCE);
10003790:	4b21      	ldr	r3, [pc, #132]	; (10003818 <avg_distances+0x8c>)
10003792:	881b      	ldrh	r3, [r3, #0]
10003794:	b29b      	uxth	r3, r3
10003796:	2b00      	cmp	r3, #0
10003798:	d010      	beq.n	100037bc <avg_distances+0x30>
1000379a:	4b1f      	ldr	r3, [pc, #124]	; (10003818 <avg_distances+0x8c>)
1000379c:	881b      	ldrh	r3, [r3, #0]
1000379e:	b29b      	uxth	r3, r3
100037a0:	1c18      	adds	r0, r3, #0
100037a2:	f000 fcb1 	bl	10004108 <__aeabi_ui2f>
100037a6:	1c01      	adds	r1, r0, #0
100037a8:	4b1c      	ldr	r3, [pc, #112]	; (1000381c <avg_distances+0x90>)
100037aa:	681b      	ldr	r3, [r3, #0]
100037ac:	4a1c      	ldr	r2, [pc, #112]	; (10003820 <avg_distances+0x94>)
100037ae:	1c08      	adds	r0, r1, #0
100037b0:	1c19      	adds	r1, r3, #0
100037b2:	f000 f83f 	bl	10003834 <Exp_moving_average>
100037b6:	1c02      	adds	r2, r0, #0
100037b8:	4b18      	ldr	r3, [pc, #96]	; (1000381c <avg_distances+0x90>)
100037ba:	601a      	str	r2, [r3, #0]
	if(distance_L != 0) avg_distance_L = Exp_moving_average((float)distance_L,avg_distance_L,ALPHA_DISTANCE);
100037bc:	4b19      	ldr	r3, [pc, #100]	; (10003824 <avg_distances+0x98>)
100037be:	881b      	ldrh	r3, [r3, #0]
100037c0:	b29b      	uxth	r3, r3
100037c2:	2b00      	cmp	r3, #0
100037c4:	d010      	beq.n	100037e8 <avg_distances+0x5c>
100037c6:	4b17      	ldr	r3, [pc, #92]	; (10003824 <avg_distances+0x98>)
100037c8:	881b      	ldrh	r3, [r3, #0]
100037ca:	b29b      	uxth	r3, r3
100037cc:	1c18      	adds	r0, r3, #0
100037ce:	f000 fc9b 	bl	10004108 <__aeabi_ui2f>
100037d2:	1c01      	adds	r1, r0, #0
100037d4:	4b14      	ldr	r3, [pc, #80]	; (10003828 <avg_distances+0x9c>)
100037d6:	681b      	ldr	r3, [r3, #0]
100037d8:	4a11      	ldr	r2, [pc, #68]	; (10003820 <avg_distances+0x94>)
100037da:	1c08      	adds	r0, r1, #0
100037dc:	1c19      	adds	r1, r3, #0
100037de:	f000 f829 	bl	10003834 <Exp_moving_average>
100037e2:	1c02      	adds	r2, r0, #0
100037e4:	4b10      	ldr	r3, [pc, #64]	; (10003828 <avg_distances+0x9c>)
100037e6:	601a      	str	r2, [r3, #0]
	if(distance_R != 0) avg_distance_R = Exp_moving_average((float)distance_R,avg_distance_R,ALPHA_DISTANCE);
100037e8:	4b10      	ldr	r3, [pc, #64]	; (1000382c <avg_distances+0xa0>)
100037ea:	881b      	ldrh	r3, [r3, #0]
100037ec:	b29b      	uxth	r3, r3
100037ee:	2b00      	cmp	r3, #0
100037f0:	d010      	beq.n	10003814 <avg_distances+0x88>
100037f2:	4b0e      	ldr	r3, [pc, #56]	; (1000382c <avg_distances+0xa0>)
100037f4:	881b      	ldrh	r3, [r3, #0]
100037f6:	b29b      	uxth	r3, r3
100037f8:	1c18      	adds	r0, r3, #0
100037fa:	f000 fc85 	bl	10004108 <__aeabi_ui2f>
100037fe:	1c01      	adds	r1, r0, #0
10003800:	4b0b      	ldr	r3, [pc, #44]	; (10003830 <avg_distances+0xa4>)
10003802:	681b      	ldr	r3, [r3, #0]
10003804:	4a06      	ldr	r2, [pc, #24]	; (10003820 <avg_distances+0x94>)
10003806:	1c08      	adds	r0, r1, #0
10003808:	1c19      	adds	r1, r3, #0
1000380a:	f000 f813 	bl	10003834 <Exp_moving_average>
1000380e:	1c02      	adds	r2, r0, #0
10003810:	4b07      	ldr	r3, [pc, #28]	; (10003830 <avg_distances+0xa4>)
10003812:	601a      	str	r2, [r3, #0]
}
10003814:	46bd      	mov	sp, r7
10003816:	bd80      	pop	{r7, pc}
10003818:	2000065c 	.word	0x2000065c
1000381c:	20000664 	.word	0x20000664
10003820:	3f4ccccd 	.word	0x3f4ccccd
10003824:	2000065e 	.word	0x2000065e
10003828:	20000668 	.word	0x20000668
1000382c:	20000660 	.word	0x20000660
10003830:	2000066c 	.word	0x2000066c

10003834 <Exp_moving_average>:


float Exp_moving_average(float new_value, float value, float ALPHA){
10003834:	b590      	push	{r4, r7, lr}
10003836:	b085      	sub	sp, #20
10003838:	af00      	add	r7, sp, #0
1000383a:	60f8      	str	r0, [r7, #12]
1000383c:	60b9      	str	r1, [r7, #8]
1000383e:	607a      	str	r2, [r7, #4]
	return ((new_value * ALPHA) + ((1 - ALPHA) * value));
10003840:	68f8      	ldr	r0, [r7, #12]
10003842:	6879      	ldr	r1, [r7, #4]
10003844:	f000 f9b0 	bl	10003ba8 <__aeabi_fmul>
10003848:	1c03      	adds	r3, r0, #0
1000384a:	1c1c      	adds	r4, r3, #0
1000384c:	20fe      	movs	r0, #254	; 0xfe
1000384e:	0580      	lsls	r0, r0, #22
10003850:	6879      	ldr	r1, [r7, #4]
10003852:	f000 fadb 	bl	10003e0c <__aeabi_fsub>
10003856:	1c03      	adds	r3, r0, #0
10003858:	1c18      	adds	r0, r3, #0
1000385a:	68b9      	ldr	r1, [r7, #8]
1000385c:	f000 f9a4 	bl	10003ba8 <__aeabi_fmul>
10003860:	1c03      	adds	r3, r0, #0
10003862:	1c20      	adds	r0, r4, #0
10003864:	1c19      	adds	r1, r3, #0
10003866:	f000 f823 	bl	100038b0 <__aeabi_fadd>
1000386a:	1c03      	adds	r3, r0, #0
}
1000386c:	1c18      	adds	r0, r3, #0
1000386e:	46bd      	mov	sp, r7
10003870:	b005      	add	sp, #20
10003872:	bd90      	pop	{r4, r7, pc}

10003874 <__aeabi_d2uiz>:
10003874:	b538      	push	{r3, r4, r5, lr}
10003876:	2200      	movs	r2, #0
10003878:	4b0c      	ldr	r3, [pc, #48]	; (100038ac <__aeabi_d2uiz+0x38>)
1000387a:	1c04      	adds	r4, r0, #0
1000387c:	1c0d      	adds	r5, r1, #0
1000387e:	f001 fb3b 	bl	10004ef8 <__aeabi_dcmpge>
10003882:	2800      	cmp	r0, #0
10003884:	d104      	bne.n	10003890 <__aeabi_d2uiz+0x1c>
10003886:	1c20      	adds	r0, r4, #0
10003888:	1c29      	adds	r1, r5, #0
1000388a:	f001 fa99 	bl	10004dc0 <__aeabi_d2iz>
1000388e:	bd38      	pop	{r3, r4, r5, pc}
10003890:	4b06      	ldr	r3, [pc, #24]	; (100038ac <__aeabi_d2uiz+0x38>)
10003892:	2200      	movs	r2, #0
10003894:	1c20      	adds	r0, r4, #0
10003896:	1c29      	adds	r1, r5, #0
10003898:	f000 ff18 	bl	100046cc <__aeabi_dsub>
1000389c:	f001 fa90 	bl	10004dc0 <__aeabi_d2iz>
100038a0:	2380      	movs	r3, #128	; 0x80
100038a2:	061b      	lsls	r3, r3, #24
100038a4:	469c      	mov	ip, r3
100038a6:	4460      	add	r0, ip
100038a8:	e7f1      	b.n	1000388e <__aeabi_d2uiz+0x1a>
100038aa:	46c0      	nop			; (mov r8, r8)
100038ac:	41e00000 	.word	0x41e00000

100038b0 <__aeabi_fadd>:
100038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100038b2:	004a      	lsls	r2, r1, #1
100038b4:	0243      	lsls	r3, r0, #9
100038b6:	0044      	lsls	r4, r0, #1
100038b8:	024e      	lsls	r6, r1, #9
100038ba:	0fc5      	lsrs	r5, r0, #31
100038bc:	0e24      	lsrs	r4, r4, #24
100038be:	1c28      	adds	r0, r5, #0
100038c0:	099b      	lsrs	r3, r3, #6
100038c2:	0e12      	lsrs	r2, r2, #24
100038c4:	0fc9      	lsrs	r1, r1, #31
100038c6:	09b7      	lsrs	r7, r6, #6
100038c8:	428d      	cmp	r5, r1
100038ca:	d040      	beq.n	1000394e <__aeabi_fadd+0x9e>
100038cc:	1aa0      	subs	r0, r4, r2
100038ce:	2800      	cmp	r0, #0
100038d0:	dc00      	bgt.n	100038d4 <__aeabi_fadd+0x24>
100038d2:	e084      	b.n	100039de <__aeabi_fadd+0x12e>
100038d4:	2a00      	cmp	r2, #0
100038d6:	d11c      	bne.n	10003912 <__aeabi_fadd+0x62>
100038d8:	2f00      	cmp	r7, #0
100038da:	d15c      	bne.n	10003996 <__aeabi_fadd+0xe6>
100038dc:	075a      	lsls	r2, r3, #29
100038de:	d004      	beq.n	100038ea <__aeabi_fadd+0x3a>
100038e0:	220f      	movs	r2, #15
100038e2:	401a      	ands	r2, r3
100038e4:	2a04      	cmp	r2, #4
100038e6:	d000      	beq.n	100038ea <__aeabi_fadd+0x3a>
100038e8:	3304      	adds	r3, #4
100038ea:	2280      	movs	r2, #128	; 0x80
100038ec:	04d2      	lsls	r2, r2, #19
100038ee:	401a      	ands	r2, r3
100038f0:	1c28      	adds	r0, r5, #0
100038f2:	2a00      	cmp	r2, #0
100038f4:	d024      	beq.n	10003940 <__aeabi_fadd+0x90>
100038f6:	3401      	adds	r4, #1
100038f8:	2cff      	cmp	r4, #255	; 0xff
100038fa:	d100      	bne.n	100038fe <__aeabi_fadd+0x4e>
100038fc:	e07b      	b.n	100039f6 <__aeabi_fadd+0x146>
100038fe:	019b      	lsls	r3, r3, #6
10003900:	0a5b      	lsrs	r3, r3, #9
10003902:	b2e4      	uxtb	r4, r4
10003904:	025b      	lsls	r3, r3, #9
10003906:	05e4      	lsls	r4, r4, #23
10003908:	0a5b      	lsrs	r3, r3, #9
1000390a:	4323      	orrs	r3, r4
1000390c:	07c0      	lsls	r0, r0, #31
1000390e:	4318      	orrs	r0, r3
10003910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003912:	2cff      	cmp	r4, #255	; 0xff
10003914:	d0e2      	beq.n	100038dc <__aeabi_fadd+0x2c>
10003916:	2280      	movs	r2, #128	; 0x80
10003918:	04d2      	lsls	r2, r2, #19
1000391a:	4317      	orrs	r7, r2
1000391c:	2601      	movs	r6, #1
1000391e:	281b      	cmp	r0, #27
10003920:	dc08      	bgt.n	10003934 <__aeabi_fadd+0x84>
10003922:	1c39      	adds	r1, r7, #0
10003924:	2220      	movs	r2, #32
10003926:	1c3e      	adds	r6, r7, #0
10003928:	40c1      	lsrs	r1, r0
1000392a:	1a10      	subs	r0, r2, r0
1000392c:	4086      	lsls	r6, r0
1000392e:	1e77      	subs	r7, r6, #1
10003930:	41be      	sbcs	r6, r7
10003932:	430e      	orrs	r6, r1
10003934:	1b9b      	subs	r3, r3, r6
10003936:	015a      	lsls	r2, r3, #5
10003938:	d433      	bmi.n	100039a2 <__aeabi_fadd+0xf2>
1000393a:	1c28      	adds	r0, r5, #0
1000393c:	075a      	lsls	r2, r3, #29
1000393e:	d1cf      	bne.n	100038e0 <__aeabi_fadd+0x30>
10003940:	08db      	lsrs	r3, r3, #3
10003942:	2cff      	cmp	r4, #255	; 0xff
10003944:	d01e      	beq.n	10003984 <__aeabi_fadd+0xd4>
10003946:	025b      	lsls	r3, r3, #9
10003948:	0a5b      	lsrs	r3, r3, #9
1000394a:	b2e4      	uxtb	r4, r4
1000394c:	e7da      	b.n	10003904 <__aeabi_fadd+0x54>
1000394e:	1aa1      	subs	r1, r4, r2
10003950:	2900      	cmp	r1, #0
10003952:	dd57      	ble.n	10003a04 <__aeabi_fadd+0x154>
10003954:	2a00      	cmp	r2, #0
10003956:	d03a      	beq.n	100039ce <__aeabi_fadd+0x11e>
10003958:	2cff      	cmp	r4, #255	; 0xff
1000395a:	d0bf      	beq.n	100038dc <__aeabi_fadd+0x2c>
1000395c:	2280      	movs	r2, #128	; 0x80
1000395e:	04d2      	lsls	r2, r2, #19
10003960:	4317      	orrs	r7, r2
10003962:	2601      	movs	r6, #1
10003964:	291b      	cmp	r1, #27
10003966:	dd72      	ble.n	10003a4e <__aeabi_fadd+0x19e>
10003968:	199b      	adds	r3, r3, r6
1000396a:	015a      	lsls	r2, r3, #5
1000396c:	d5e5      	bpl.n	1000393a <__aeabi_fadd+0x8a>
1000396e:	3401      	adds	r4, #1
10003970:	2cff      	cmp	r4, #255	; 0xff
10003972:	d100      	bne.n	10003976 <__aeabi_fadd+0xc6>
10003974:	e087      	b.n	10003a86 <__aeabi_fadd+0x1d6>
10003976:	2101      	movs	r1, #1
10003978:	4a8a      	ldr	r2, [pc, #552]	; (10003ba4 <__aeabi_fadd+0x2f4>)
1000397a:	4019      	ands	r1, r3
1000397c:	4013      	ands	r3, r2
1000397e:	085b      	lsrs	r3, r3, #1
10003980:	430b      	orrs	r3, r1
10003982:	e7ab      	b.n	100038dc <__aeabi_fadd+0x2c>
10003984:	2b00      	cmp	r3, #0
10003986:	d036      	beq.n	100039f6 <__aeabi_fadd+0x146>
10003988:	2280      	movs	r2, #128	; 0x80
1000398a:	03d2      	lsls	r2, r2, #15
1000398c:	4313      	orrs	r3, r2
1000398e:	025b      	lsls	r3, r3, #9
10003990:	0a5b      	lsrs	r3, r3, #9
10003992:	24ff      	movs	r4, #255	; 0xff
10003994:	e7b6      	b.n	10003904 <__aeabi_fadd+0x54>
10003996:	3801      	subs	r0, #1
10003998:	2800      	cmp	r0, #0
1000399a:	d13f      	bne.n	10003a1c <__aeabi_fadd+0x16c>
1000399c:	1bdb      	subs	r3, r3, r7
1000399e:	015a      	lsls	r2, r3, #5
100039a0:	d5cb      	bpl.n	1000393a <__aeabi_fadd+0x8a>
100039a2:	019b      	lsls	r3, r3, #6
100039a4:	099e      	lsrs	r6, r3, #6
100039a6:	1c30      	adds	r0, r6, #0
100039a8:	f001 fab0 	bl	10004f0c <__clzsi2>
100039ac:	3805      	subs	r0, #5
100039ae:	4086      	lsls	r6, r0
100039b0:	4284      	cmp	r4, r0
100039b2:	dc23      	bgt.n	100039fc <__aeabi_fadd+0x14c>
100039b4:	1b00      	subs	r0, r0, r4
100039b6:	241f      	movs	r4, #31
100039b8:	1c32      	adds	r2, r6, #0
100039ba:	1c43      	adds	r3, r0, #1
100039bc:	1a20      	subs	r0, r4, r0
100039be:	40da      	lsrs	r2, r3
100039c0:	4086      	lsls	r6, r0
100039c2:	1c13      	adds	r3, r2, #0
100039c4:	1e74      	subs	r4, r6, #1
100039c6:	41a6      	sbcs	r6, r4
100039c8:	2400      	movs	r4, #0
100039ca:	4333      	orrs	r3, r6
100039cc:	e786      	b.n	100038dc <__aeabi_fadd+0x2c>
100039ce:	2f00      	cmp	r7, #0
100039d0:	d100      	bne.n	100039d4 <__aeabi_fadd+0x124>
100039d2:	e783      	b.n	100038dc <__aeabi_fadd+0x2c>
100039d4:	3901      	subs	r1, #1
100039d6:	2900      	cmp	r1, #0
100039d8:	d150      	bne.n	10003a7c <__aeabi_fadd+0x1cc>
100039da:	19db      	adds	r3, r3, r7
100039dc:	e7c5      	b.n	1000396a <__aeabi_fadd+0xba>
100039de:	2800      	cmp	r0, #0
100039e0:	d120      	bne.n	10003a24 <__aeabi_fadd+0x174>
100039e2:	1c62      	adds	r2, r4, #1
100039e4:	b2d2      	uxtb	r2, r2
100039e6:	2a01      	cmp	r2, #1
100039e8:	dd5e      	ble.n	10003aa8 <__aeabi_fadd+0x1f8>
100039ea:	1bde      	subs	r6, r3, r7
100039ec:	0172      	lsls	r2, r6, #5
100039ee:	d528      	bpl.n	10003a42 <__aeabi_fadd+0x192>
100039f0:	1afe      	subs	r6, r7, r3
100039f2:	1c0d      	adds	r5, r1, #0
100039f4:	e7d7      	b.n	100039a6 <__aeabi_fadd+0xf6>
100039f6:	24ff      	movs	r4, #255	; 0xff
100039f8:	2300      	movs	r3, #0
100039fa:	e783      	b.n	10003904 <__aeabi_fadd+0x54>
100039fc:	4b69      	ldr	r3, [pc, #420]	; (10003ba4 <__aeabi_fadd+0x2f4>)
100039fe:	1a24      	subs	r4, r4, r0
10003a00:	4033      	ands	r3, r6
10003a02:	e76b      	b.n	100038dc <__aeabi_fadd+0x2c>
10003a04:	2900      	cmp	r1, #0
10003a06:	d158      	bne.n	10003aba <__aeabi_fadd+0x20a>
10003a08:	1c62      	adds	r2, r4, #1
10003a0a:	b2d1      	uxtb	r1, r2
10003a0c:	2901      	cmp	r1, #1
10003a0e:	dd3c      	ble.n	10003a8a <__aeabi_fadd+0x1da>
10003a10:	2aff      	cmp	r2, #255	; 0xff
10003a12:	d037      	beq.n	10003a84 <__aeabi_fadd+0x1d4>
10003a14:	18fb      	adds	r3, r7, r3
10003a16:	085b      	lsrs	r3, r3, #1
10003a18:	1c14      	adds	r4, r2, #0
10003a1a:	e75f      	b.n	100038dc <__aeabi_fadd+0x2c>
10003a1c:	2cff      	cmp	r4, #255	; 0xff
10003a1e:	d000      	beq.n	10003a22 <__aeabi_fadd+0x172>
10003a20:	e77c      	b.n	1000391c <__aeabi_fadd+0x6c>
10003a22:	e75b      	b.n	100038dc <__aeabi_fadd+0x2c>
10003a24:	2c00      	cmp	r4, #0
10003a26:	d01e      	beq.n	10003a66 <__aeabi_fadd+0x1b6>
10003a28:	2aff      	cmp	r2, #255	; 0xff
10003a2a:	d023      	beq.n	10003a74 <__aeabi_fadd+0x1c4>
10003a2c:	2480      	movs	r4, #128	; 0x80
10003a2e:	04e4      	lsls	r4, r4, #19
10003a30:	4240      	negs	r0, r0
10003a32:	4323      	orrs	r3, r4
10003a34:	281b      	cmp	r0, #27
10003a36:	dd5b      	ble.n	10003af0 <__aeabi_fadd+0x240>
10003a38:	2301      	movs	r3, #1
10003a3a:	1afb      	subs	r3, r7, r3
10003a3c:	1c14      	adds	r4, r2, #0
10003a3e:	1c0d      	adds	r5, r1, #0
10003a40:	e7ad      	b.n	1000399e <__aeabi_fadd+0xee>
10003a42:	2e00      	cmp	r6, #0
10003a44:	d1af      	bne.n	100039a6 <__aeabi_fadd+0xf6>
10003a46:	2300      	movs	r3, #0
10003a48:	2000      	movs	r0, #0
10003a4a:	2400      	movs	r4, #0
10003a4c:	e778      	b.n	10003940 <__aeabi_fadd+0x90>
10003a4e:	1c3a      	adds	r2, r7, #0
10003a50:	40ca      	lsrs	r2, r1
10003a52:	4694      	mov	ip, r2
10003a54:	2220      	movs	r2, #32
10003a56:	1c3e      	adds	r6, r7, #0
10003a58:	1a51      	subs	r1, r2, r1
10003a5a:	408e      	lsls	r6, r1
10003a5c:	4662      	mov	r2, ip
10003a5e:	1e77      	subs	r7, r6, #1
10003a60:	41be      	sbcs	r6, r7
10003a62:	4316      	orrs	r6, r2
10003a64:	e780      	b.n	10003968 <__aeabi_fadd+0xb8>
10003a66:	2b00      	cmp	r3, #0
10003a68:	d03e      	beq.n	10003ae8 <__aeabi_fadd+0x238>
10003a6a:	43c0      	mvns	r0, r0
10003a6c:	2800      	cmp	r0, #0
10003a6e:	d0e4      	beq.n	10003a3a <__aeabi_fadd+0x18a>
10003a70:	2aff      	cmp	r2, #255	; 0xff
10003a72:	d1df      	bne.n	10003a34 <__aeabi_fadd+0x184>
10003a74:	1c3b      	adds	r3, r7, #0
10003a76:	24ff      	movs	r4, #255	; 0xff
10003a78:	1c0d      	adds	r5, r1, #0
10003a7a:	e72f      	b.n	100038dc <__aeabi_fadd+0x2c>
10003a7c:	2cff      	cmp	r4, #255	; 0xff
10003a7e:	d000      	beq.n	10003a82 <__aeabi_fadd+0x1d2>
10003a80:	e76f      	b.n	10003962 <__aeabi_fadd+0xb2>
10003a82:	e72b      	b.n	100038dc <__aeabi_fadd+0x2c>
10003a84:	24ff      	movs	r4, #255	; 0xff
10003a86:	2300      	movs	r3, #0
10003a88:	e75a      	b.n	10003940 <__aeabi_fadd+0x90>
10003a8a:	2c00      	cmp	r4, #0
10003a8c:	d15a      	bne.n	10003b44 <__aeabi_fadd+0x294>
10003a8e:	2b00      	cmp	r3, #0
10003a90:	d07f      	beq.n	10003b92 <__aeabi_fadd+0x2e2>
10003a92:	2f00      	cmp	r7, #0
10003a94:	d100      	bne.n	10003a98 <__aeabi_fadd+0x1e8>
10003a96:	e721      	b.n	100038dc <__aeabi_fadd+0x2c>
10003a98:	19db      	adds	r3, r3, r7
10003a9a:	015a      	lsls	r2, r3, #5
10003a9c:	d400      	bmi.n	10003aa0 <__aeabi_fadd+0x1f0>
10003a9e:	e74c      	b.n	1000393a <__aeabi_fadd+0x8a>
10003aa0:	4a40      	ldr	r2, [pc, #256]	; (10003ba4 <__aeabi_fadd+0x2f4>)
10003aa2:	3401      	adds	r4, #1
10003aa4:	4013      	ands	r3, r2
10003aa6:	e719      	b.n	100038dc <__aeabi_fadd+0x2c>
10003aa8:	2c00      	cmp	r4, #0
10003aaa:	d115      	bne.n	10003ad8 <__aeabi_fadd+0x228>
10003aac:	2b00      	cmp	r3, #0
10003aae:	d12f      	bne.n	10003b10 <__aeabi_fadd+0x260>
10003ab0:	2f00      	cmp	r7, #0
10003ab2:	d05d      	beq.n	10003b70 <__aeabi_fadd+0x2c0>
10003ab4:	1c3b      	adds	r3, r7, #0
10003ab6:	1c0d      	adds	r5, r1, #0
10003ab8:	e710      	b.n	100038dc <__aeabi_fadd+0x2c>
10003aba:	2c00      	cmp	r4, #0
10003abc:	d121      	bne.n	10003b02 <__aeabi_fadd+0x252>
10003abe:	2b00      	cmp	r3, #0
10003ac0:	d053      	beq.n	10003b6a <__aeabi_fadd+0x2ba>
10003ac2:	43c9      	mvns	r1, r1
10003ac4:	2900      	cmp	r1, #0
10003ac6:	d004      	beq.n	10003ad2 <__aeabi_fadd+0x222>
10003ac8:	2aff      	cmp	r2, #255	; 0xff
10003aca:	d04b      	beq.n	10003b64 <__aeabi_fadd+0x2b4>
10003acc:	291b      	cmp	r1, #27
10003ace:	dd57      	ble.n	10003b80 <__aeabi_fadd+0x2d0>
10003ad0:	2301      	movs	r3, #1
10003ad2:	19db      	adds	r3, r3, r7
10003ad4:	1c14      	adds	r4, r2, #0
10003ad6:	e748      	b.n	1000396a <__aeabi_fadd+0xba>
10003ad8:	2b00      	cmp	r3, #0
10003ada:	d122      	bne.n	10003b22 <__aeabi_fadd+0x272>
10003adc:	2f00      	cmp	r7, #0
10003ade:	d04a      	beq.n	10003b76 <__aeabi_fadd+0x2c6>
10003ae0:	1c3b      	adds	r3, r7, #0
10003ae2:	1c0d      	adds	r5, r1, #0
10003ae4:	24ff      	movs	r4, #255	; 0xff
10003ae6:	e6f9      	b.n	100038dc <__aeabi_fadd+0x2c>
10003ae8:	1c3b      	adds	r3, r7, #0
10003aea:	1c14      	adds	r4, r2, #0
10003aec:	1c0d      	adds	r5, r1, #0
10003aee:	e6f5      	b.n	100038dc <__aeabi_fadd+0x2c>
10003af0:	1c1d      	adds	r5, r3, #0
10003af2:	2420      	movs	r4, #32
10003af4:	40c5      	lsrs	r5, r0
10003af6:	1a20      	subs	r0, r4, r0
10003af8:	4083      	lsls	r3, r0
10003afa:	1e58      	subs	r0, r3, #1
10003afc:	4183      	sbcs	r3, r0
10003afe:	432b      	orrs	r3, r5
10003b00:	e79b      	b.n	10003a3a <__aeabi_fadd+0x18a>
10003b02:	2aff      	cmp	r2, #255	; 0xff
10003b04:	d02e      	beq.n	10003b64 <__aeabi_fadd+0x2b4>
10003b06:	2480      	movs	r4, #128	; 0x80
10003b08:	04e4      	lsls	r4, r4, #19
10003b0a:	4249      	negs	r1, r1
10003b0c:	4323      	orrs	r3, r4
10003b0e:	e7dd      	b.n	10003acc <__aeabi_fadd+0x21c>
10003b10:	2f00      	cmp	r7, #0
10003b12:	d100      	bne.n	10003b16 <__aeabi_fadd+0x266>
10003b14:	e6e2      	b.n	100038dc <__aeabi_fadd+0x2c>
10003b16:	1bda      	subs	r2, r3, r7
10003b18:	0150      	lsls	r0, r2, #5
10003b1a:	d53c      	bpl.n	10003b96 <__aeabi_fadd+0x2e6>
10003b1c:	1afb      	subs	r3, r7, r3
10003b1e:	1c0d      	adds	r5, r1, #0
10003b20:	e6dc      	b.n	100038dc <__aeabi_fadd+0x2c>
10003b22:	24ff      	movs	r4, #255	; 0xff
10003b24:	2f00      	cmp	r7, #0
10003b26:	d100      	bne.n	10003b2a <__aeabi_fadd+0x27a>
10003b28:	e6d8      	b.n	100038dc <__aeabi_fadd+0x2c>
10003b2a:	2280      	movs	r2, #128	; 0x80
10003b2c:	08db      	lsrs	r3, r3, #3
10003b2e:	03d2      	lsls	r2, r2, #15
10003b30:	4213      	tst	r3, r2
10003b32:	d004      	beq.n	10003b3e <__aeabi_fadd+0x28e>
10003b34:	08fe      	lsrs	r6, r7, #3
10003b36:	4216      	tst	r6, r2
10003b38:	d101      	bne.n	10003b3e <__aeabi_fadd+0x28e>
10003b3a:	1c33      	adds	r3, r6, #0
10003b3c:	1c0d      	adds	r5, r1, #0
10003b3e:	00db      	lsls	r3, r3, #3
10003b40:	24ff      	movs	r4, #255	; 0xff
10003b42:	e6cb      	b.n	100038dc <__aeabi_fadd+0x2c>
10003b44:	2b00      	cmp	r3, #0
10003b46:	d00d      	beq.n	10003b64 <__aeabi_fadd+0x2b4>
10003b48:	24ff      	movs	r4, #255	; 0xff
10003b4a:	2f00      	cmp	r7, #0
10003b4c:	d100      	bne.n	10003b50 <__aeabi_fadd+0x2a0>
10003b4e:	e6c5      	b.n	100038dc <__aeabi_fadd+0x2c>
10003b50:	2280      	movs	r2, #128	; 0x80
10003b52:	08db      	lsrs	r3, r3, #3
10003b54:	03d2      	lsls	r2, r2, #15
10003b56:	4213      	tst	r3, r2
10003b58:	d0f1      	beq.n	10003b3e <__aeabi_fadd+0x28e>
10003b5a:	08fe      	lsrs	r6, r7, #3
10003b5c:	4216      	tst	r6, r2
10003b5e:	d1ee      	bne.n	10003b3e <__aeabi_fadd+0x28e>
10003b60:	1c33      	adds	r3, r6, #0
10003b62:	e7ec      	b.n	10003b3e <__aeabi_fadd+0x28e>
10003b64:	1c3b      	adds	r3, r7, #0
10003b66:	24ff      	movs	r4, #255	; 0xff
10003b68:	e6b8      	b.n	100038dc <__aeabi_fadd+0x2c>
10003b6a:	1c3b      	adds	r3, r7, #0
10003b6c:	1c14      	adds	r4, r2, #0
10003b6e:	e6b5      	b.n	100038dc <__aeabi_fadd+0x2c>
10003b70:	1c23      	adds	r3, r4, #0
10003b72:	2000      	movs	r0, #0
10003b74:	e6e4      	b.n	10003940 <__aeabi_fadd+0x90>
10003b76:	2380      	movs	r3, #128	; 0x80
10003b78:	2000      	movs	r0, #0
10003b7a:	049b      	lsls	r3, r3, #18
10003b7c:	24ff      	movs	r4, #255	; 0xff
10003b7e:	e6df      	b.n	10003940 <__aeabi_fadd+0x90>
10003b80:	1c1e      	adds	r6, r3, #0
10003b82:	2420      	movs	r4, #32
10003b84:	40ce      	lsrs	r6, r1
10003b86:	1a61      	subs	r1, r4, r1
10003b88:	408b      	lsls	r3, r1
10003b8a:	1e59      	subs	r1, r3, #1
10003b8c:	418b      	sbcs	r3, r1
10003b8e:	4333      	orrs	r3, r6
10003b90:	e79f      	b.n	10003ad2 <__aeabi_fadd+0x222>
10003b92:	1c3b      	adds	r3, r7, #0
10003b94:	e6a2      	b.n	100038dc <__aeabi_fadd+0x2c>
10003b96:	1e13      	subs	r3, r2, #0
10003b98:	d000      	beq.n	10003b9c <__aeabi_fadd+0x2ec>
10003b9a:	e6ce      	b.n	1000393a <__aeabi_fadd+0x8a>
10003b9c:	2300      	movs	r3, #0
10003b9e:	2000      	movs	r0, #0
10003ba0:	e6ce      	b.n	10003940 <__aeabi_fadd+0x90>
10003ba2:	46c0      	nop			; (mov r8, r8)
10003ba4:	fbffffff 	.word	0xfbffffff

10003ba8 <__aeabi_fmul>:
10003ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
10003baa:	465f      	mov	r7, fp
10003bac:	4656      	mov	r6, sl
10003bae:	464d      	mov	r5, r9
10003bb0:	4644      	mov	r4, r8
10003bb2:	b4f0      	push	{r4, r5, r6, r7}
10003bb4:	0245      	lsls	r5, r0, #9
10003bb6:	0046      	lsls	r6, r0, #1
10003bb8:	0fc4      	lsrs	r4, r0, #31
10003bba:	b083      	sub	sp, #12
10003bbc:	1c0f      	adds	r7, r1, #0
10003bbe:	0a6d      	lsrs	r5, r5, #9
10003bc0:	0e36      	lsrs	r6, r6, #24
10003bc2:	46a3      	mov	fp, r4
10003bc4:	d045      	beq.n	10003c52 <__aeabi_fmul+0xaa>
10003bc6:	2eff      	cmp	r6, #255	; 0xff
10003bc8:	d025      	beq.n	10003c16 <__aeabi_fmul+0x6e>
10003bca:	2380      	movs	r3, #128	; 0x80
10003bcc:	041b      	lsls	r3, r3, #16
10003bce:	431d      	orrs	r5, r3
10003bd0:	2300      	movs	r3, #0
10003bd2:	469a      	mov	sl, r3
10003bd4:	00ed      	lsls	r5, r5, #3
10003bd6:	3e7f      	subs	r6, #127	; 0x7f
10003bd8:	9301      	str	r3, [sp, #4]
10003bda:	027b      	lsls	r3, r7, #9
10003bdc:	0a5b      	lsrs	r3, r3, #9
10003bde:	4698      	mov	r8, r3
10003be0:	0078      	lsls	r0, r7, #1
10003be2:	0ffb      	lsrs	r3, r7, #31
10003be4:	0e00      	lsrs	r0, r0, #24
10003be6:	4699      	mov	r9, r3
10003be8:	d040      	beq.n	10003c6c <__aeabi_fmul+0xc4>
10003bea:	28ff      	cmp	r0, #255	; 0xff
10003bec:	d038      	beq.n	10003c60 <__aeabi_fmul+0xb8>
10003bee:	2380      	movs	r3, #128	; 0x80
10003bf0:	4642      	mov	r2, r8
10003bf2:	041b      	lsls	r3, r3, #16
10003bf4:	4313      	orrs	r3, r2
10003bf6:	00db      	lsls	r3, r3, #3
10003bf8:	4698      	mov	r8, r3
10003bfa:	2300      	movs	r3, #0
10003bfc:	387f      	subs	r0, #127	; 0x7f
10003bfe:	464a      	mov	r2, r9
10003c00:	9f01      	ldr	r7, [sp, #4]
10003c02:	1830      	adds	r0, r6, r0
10003c04:	4062      	eors	r2, r4
10003c06:	1c41      	adds	r1, r0, #1
10003c08:	431f      	orrs	r7, r3
10003c0a:	2f0f      	cmp	r7, #15
10003c0c:	d869      	bhi.n	10003ce2 <__aeabi_fmul+0x13a>
10003c0e:	4e7d      	ldr	r6, [pc, #500]	; (10003e04 <__aeabi_fmul+0x25c>)
10003c10:	00bf      	lsls	r7, r7, #2
10003c12:	59f6      	ldr	r6, [r6, r7]
10003c14:	46b7      	mov	pc, r6
10003c16:	2d00      	cmp	r5, #0
10003c18:	d145      	bne.n	10003ca6 <__aeabi_fmul+0xfe>
10003c1a:	2308      	movs	r3, #8
10003c1c:	9301      	str	r3, [sp, #4]
10003c1e:	3b06      	subs	r3, #6
10003c20:	469a      	mov	sl, r3
10003c22:	e7da      	b.n	10003bda <__aeabi_fmul+0x32>
10003c24:	4693      	mov	fp, r2
10003c26:	4653      	mov	r3, sl
10003c28:	2b02      	cmp	r3, #2
10003c2a:	d12f      	bne.n	10003c8c <__aeabi_fmul+0xe4>
10003c2c:	465b      	mov	r3, fp
10003c2e:	2401      	movs	r4, #1
10003c30:	2500      	movs	r5, #0
10003c32:	401c      	ands	r4, r3
10003c34:	23ff      	movs	r3, #255	; 0xff
10003c36:	026d      	lsls	r5, r5, #9
10003c38:	05db      	lsls	r3, r3, #23
10003c3a:	0a6d      	lsrs	r5, r5, #9
10003c3c:	07e4      	lsls	r4, r4, #31
10003c3e:	431d      	orrs	r5, r3
10003c40:	4325      	orrs	r5, r4
10003c42:	1c28      	adds	r0, r5, #0
10003c44:	b003      	add	sp, #12
10003c46:	bc3c      	pop	{r2, r3, r4, r5}
10003c48:	4690      	mov	r8, r2
10003c4a:	4699      	mov	r9, r3
10003c4c:	46a2      	mov	sl, r4
10003c4e:	46ab      	mov	fp, r5
10003c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003c52:	2d00      	cmp	r5, #0
10003c54:	d12c      	bne.n	10003cb0 <__aeabi_fmul+0x108>
10003c56:	2304      	movs	r3, #4
10003c58:	9301      	str	r3, [sp, #4]
10003c5a:	3b03      	subs	r3, #3
10003c5c:	469a      	mov	sl, r3
10003c5e:	e7bc      	b.n	10003bda <__aeabi_fmul+0x32>
10003c60:	4643      	mov	r3, r8
10003c62:	425a      	negs	r2, r3
10003c64:	4153      	adcs	r3, r2
10003c66:	2203      	movs	r2, #3
10003c68:	1ad3      	subs	r3, r2, r3
10003c6a:	e7c8      	b.n	10003bfe <__aeabi_fmul+0x56>
10003c6c:	4642      	mov	r2, r8
10003c6e:	2301      	movs	r3, #1
10003c70:	2a00      	cmp	r2, #0
10003c72:	d0c4      	beq.n	10003bfe <__aeabi_fmul+0x56>
10003c74:	4640      	mov	r0, r8
10003c76:	f001 f949 	bl	10004f0c <__clzsi2>
10003c7a:	4642      	mov	r2, r8
10003c7c:	1f43      	subs	r3, r0, #5
10003c7e:	409a      	lsls	r2, r3
10003c80:	2376      	movs	r3, #118	; 0x76
10003c82:	425b      	negs	r3, r3
10003c84:	1a18      	subs	r0, r3, r0
10003c86:	4690      	mov	r8, r2
10003c88:	2300      	movs	r3, #0
10003c8a:	e7b8      	b.n	10003bfe <__aeabi_fmul+0x56>
10003c8c:	2b03      	cmp	r3, #3
10003c8e:	d100      	bne.n	10003c92 <__aeabi_fmul+0xea>
10003c90:	e0ad      	b.n	10003dee <__aeabi_fmul+0x246>
10003c92:	2b01      	cmp	r3, #1
10003c94:	d000      	beq.n	10003c98 <__aeabi_fmul+0xf0>
10003c96:	e08c      	b.n	10003db2 <__aeabi_fmul+0x20a>
10003c98:	465b      	mov	r3, fp
10003c9a:	4654      	mov	r4, sl
10003c9c:	401c      	ands	r4, r3
10003c9e:	b2e4      	uxtb	r4, r4
10003ca0:	2300      	movs	r3, #0
10003ca2:	2500      	movs	r5, #0
10003ca4:	e7c7      	b.n	10003c36 <__aeabi_fmul+0x8e>
10003ca6:	230c      	movs	r3, #12
10003ca8:	9301      	str	r3, [sp, #4]
10003caa:	3b09      	subs	r3, #9
10003cac:	469a      	mov	sl, r3
10003cae:	e794      	b.n	10003bda <__aeabi_fmul+0x32>
10003cb0:	1c28      	adds	r0, r5, #0
10003cb2:	f001 f92b 	bl	10004f0c <__clzsi2>
10003cb6:	2676      	movs	r6, #118	; 0x76
10003cb8:	1f43      	subs	r3, r0, #5
10003cba:	409d      	lsls	r5, r3
10003cbc:	2300      	movs	r3, #0
10003cbe:	4276      	negs	r6, r6
10003cc0:	1a36      	subs	r6, r6, r0
10003cc2:	9301      	str	r3, [sp, #4]
10003cc4:	469a      	mov	sl, r3
10003cc6:	e788      	b.n	10003bda <__aeabi_fmul+0x32>
10003cc8:	2580      	movs	r5, #128	; 0x80
10003cca:	2400      	movs	r4, #0
10003ccc:	03ed      	lsls	r5, r5, #15
10003cce:	23ff      	movs	r3, #255	; 0xff
10003cd0:	e7b1      	b.n	10003c36 <__aeabi_fmul+0x8e>
10003cd2:	4645      	mov	r5, r8
10003cd4:	46cb      	mov	fp, r9
10003cd6:	469a      	mov	sl, r3
10003cd8:	e7a5      	b.n	10003c26 <__aeabi_fmul+0x7e>
10003cda:	4645      	mov	r5, r8
10003cdc:	4693      	mov	fp, r2
10003cde:	469a      	mov	sl, r3
10003ce0:	e7a1      	b.n	10003c26 <__aeabi_fmul+0x7e>
10003ce2:	4643      	mov	r3, r8
10003ce4:	042c      	lsls	r4, r5, #16
10003ce6:	0c1b      	lsrs	r3, r3, #16
10003ce8:	469c      	mov	ip, r3
10003cea:	0c23      	lsrs	r3, r4, #16
10003cec:	4644      	mov	r4, r8
10003cee:	0426      	lsls	r6, r4, #16
10003cf0:	1c1c      	adds	r4, r3, #0
10003cf2:	0c36      	lsrs	r6, r6, #16
10003cf4:	0c2f      	lsrs	r7, r5, #16
10003cf6:	4374      	muls	r4, r6
10003cf8:	1c35      	adds	r5, r6, #0
10003cfa:	4666      	mov	r6, ip
10003cfc:	437d      	muls	r5, r7
10003cfe:	4373      	muls	r3, r6
10003d00:	4377      	muls	r7, r6
10003d02:	18eb      	adds	r3, r5, r3
10003d04:	0c26      	lsrs	r6, r4, #16
10003d06:	199e      	adds	r6, r3, r6
10003d08:	42b5      	cmp	r5, r6
10003d0a:	d903      	bls.n	10003d14 <__aeabi_fmul+0x16c>
10003d0c:	2380      	movs	r3, #128	; 0x80
10003d0e:	025b      	lsls	r3, r3, #9
10003d10:	469c      	mov	ip, r3
10003d12:	4467      	add	r7, ip
10003d14:	0424      	lsls	r4, r4, #16
10003d16:	0433      	lsls	r3, r6, #16
10003d18:	0c24      	lsrs	r4, r4, #16
10003d1a:	191b      	adds	r3, r3, r4
10003d1c:	019d      	lsls	r5, r3, #6
10003d1e:	1e6c      	subs	r4, r5, #1
10003d20:	41a5      	sbcs	r5, r4
10003d22:	0e9b      	lsrs	r3, r3, #26
10003d24:	0c36      	lsrs	r6, r6, #16
10003d26:	432b      	orrs	r3, r5
10003d28:	19bd      	adds	r5, r7, r6
10003d2a:	01ad      	lsls	r5, r5, #6
10003d2c:	431d      	orrs	r5, r3
10003d2e:	012b      	lsls	r3, r5, #4
10003d30:	d504      	bpl.n	10003d3c <__aeabi_fmul+0x194>
10003d32:	2301      	movs	r3, #1
10003d34:	0868      	lsrs	r0, r5, #1
10003d36:	401d      	ands	r5, r3
10003d38:	4305      	orrs	r5, r0
10003d3a:	1c08      	adds	r0, r1, #0
10003d3c:	1c03      	adds	r3, r0, #0
10003d3e:	337f      	adds	r3, #127	; 0x7f
10003d40:	2b00      	cmp	r3, #0
10003d42:	dd2c      	ble.n	10003d9e <__aeabi_fmul+0x1f6>
10003d44:	0769      	lsls	r1, r5, #29
10003d46:	d004      	beq.n	10003d52 <__aeabi_fmul+0x1aa>
10003d48:	210f      	movs	r1, #15
10003d4a:	4029      	ands	r1, r5
10003d4c:	2904      	cmp	r1, #4
10003d4e:	d000      	beq.n	10003d52 <__aeabi_fmul+0x1aa>
10003d50:	3504      	adds	r5, #4
10003d52:	0129      	lsls	r1, r5, #4
10003d54:	d503      	bpl.n	10003d5e <__aeabi_fmul+0x1b6>
10003d56:	4b2c      	ldr	r3, [pc, #176]	; (10003e08 <__aeabi_fmul+0x260>)
10003d58:	401d      	ands	r5, r3
10003d5a:	1c03      	adds	r3, r0, #0
10003d5c:	3380      	adds	r3, #128	; 0x80
10003d5e:	2bfe      	cmp	r3, #254	; 0xfe
10003d60:	dd17      	ble.n	10003d92 <__aeabi_fmul+0x1ea>
10003d62:	2401      	movs	r4, #1
10003d64:	23ff      	movs	r3, #255	; 0xff
10003d66:	4014      	ands	r4, r2
10003d68:	2500      	movs	r5, #0
10003d6a:	e764      	b.n	10003c36 <__aeabi_fmul+0x8e>
10003d6c:	2080      	movs	r0, #128	; 0x80
10003d6e:	03c0      	lsls	r0, r0, #15
10003d70:	4205      	tst	r5, r0
10003d72:	d009      	beq.n	10003d88 <__aeabi_fmul+0x1e0>
10003d74:	4643      	mov	r3, r8
10003d76:	4203      	tst	r3, r0
10003d78:	d106      	bne.n	10003d88 <__aeabi_fmul+0x1e0>
10003d7a:	4645      	mov	r5, r8
10003d7c:	4305      	orrs	r5, r0
10003d7e:	026d      	lsls	r5, r5, #9
10003d80:	0a6d      	lsrs	r5, r5, #9
10003d82:	464c      	mov	r4, r9
10003d84:	23ff      	movs	r3, #255	; 0xff
10003d86:	e756      	b.n	10003c36 <__aeabi_fmul+0x8e>
10003d88:	4305      	orrs	r5, r0
10003d8a:	026d      	lsls	r5, r5, #9
10003d8c:	0a6d      	lsrs	r5, r5, #9
10003d8e:	23ff      	movs	r3, #255	; 0xff
10003d90:	e751      	b.n	10003c36 <__aeabi_fmul+0x8e>
10003d92:	2401      	movs	r4, #1
10003d94:	01ad      	lsls	r5, r5, #6
10003d96:	0a6d      	lsrs	r5, r5, #9
10003d98:	b2db      	uxtb	r3, r3
10003d9a:	4014      	ands	r4, r2
10003d9c:	e74b      	b.n	10003c36 <__aeabi_fmul+0x8e>
10003d9e:	237e      	movs	r3, #126	; 0x7e
10003da0:	425b      	negs	r3, r3
10003da2:	1a1b      	subs	r3, r3, r0
10003da4:	2b1b      	cmp	r3, #27
10003da6:	dd07      	ble.n	10003db8 <__aeabi_fmul+0x210>
10003da8:	2401      	movs	r4, #1
10003daa:	2300      	movs	r3, #0
10003dac:	4014      	ands	r4, r2
10003dae:	2500      	movs	r5, #0
10003db0:	e741      	b.n	10003c36 <__aeabi_fmul+0x8e>
10003db2:	1c08      	adds	r0, r1, #0
10003db4:	465a      	mov	r2, fp
10003db6:	e7c1      	b.n	10003d3c <__aeabi_fmul+0x194>
10003db8:	309e      	adds	r0, #158	; 0x9e
10003dba:	1c29      	adds	r1, r5, #0
10003dbc:	4085      	lsls	r5, r0
10003dbe:	40d9      	lsrs	r1, r3
10003dc0:	1e68      	subs	r0, r5, #1
10003dc2:	4185      	sbcs	r5, r0
10003dc4:	430d      	orrs	r5, r1
10003dc6:	076b      	lsls	r3, r5, #29
10003dc8:	d004      	beq.n	10003dd4 <__aeabi_fmul+0x22c>
10003dca:	230f      	movs	r3, #15
10003dcc:	402b      	ands	r3, r5
10003dce:	2b04      	cmp	r3, #4
10003dd0:	d000      	beq.n	10003dd4 <__aeabi_fmul+0x22c>
10003dd2:	3504      	adds	r5, #4
10003dd4:	016b      	lsls	r3, r5, #5
10003dd6:	d504      	bpl.n	10003de2 <__aeabi_fmul+0x23a>
10003dd8:	2401      	movs	r4, #1
10003dda:	2301      	movs	r3, #1
10003ddc:	4014      	ands	r4, r2
10003dde:	2500      	movs	r5, #0
10003de0:	e729      	b.n	10003c36 <__aeabi_fmul+0x8e>
10003de2:	2401      	movs	r4, #1
10003de4:	01ad      	lsls	r5, r5, #6
10003de6:	0a6d      	lsrs	r5, r5, #9
10003de8:	4014      	ands	r4, r2
10003dea:	2300      	movs	r3, #0
10003dec:	e723      	b.n	10003c36 <__aeabi_fmul+0x8e>
10003dee:	2380      	movs	r3, #128	; 0x80
10003df0:	03db      	lsls	r3, r3, #15
10003df2:	431d      	orrs	r5, r3
10003df4:	2401      	movs	r4, #1
10003df6:	465b      	mov	r3, fp
10003df8:	026d      	lsls	r5, r5, #9
10003dfa:	4023      	ands	r3, r4
10003dfc:	1c1c      	adds	r4, r3, #0
10003dfe:	0a6d      	lsrs	r5, r5, #9
10003e00:	23ff      	movs	r3, #255	; 0xff
10003e02:	e718      	b.n	10003c36 <__aeabi_fmul+0x8e>
10003e04:	100053b8 	.word	0x100053b8
10003e08:	f7ffffff 	.word	0xf7ffffff

10003e0c <__aeabi_fsub>:
10003e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003e0e:	004a      	lsls	r2, r1, #1
10003e10:	0243      	lsls	r3, r0, #9
10003e12:	0044      	lsls	r4, r0, #1
10003e14:	024d      	lsls	r5, r1, #9
10003e16:	0fc0      	lsrs	r0, r0, #31
10003e18:	0e24      	lsrs	r4, r4, #24
10003e1a:	1c06      	adds	r6, r0, #0
10003e1c:	099b      	lsrs	r3, r3, #6
10003e1e:	0e12      	lsrs	r2, r2, #24
10003e20:	0fc9      	lsrs	r1, r1, #31
10003e22:	09ad      	lsrs	r5, r5, #6
10003e24:	2aff      	cmp	r2, #255	; 0xff
10003e26:	d100      	bne.n	10003e2a <__aeabi_fsub+0x1e>
10003e28:	e075      	b.n	10003f16 <__aeabi_fsub+0x10a>
10003e2a:	2701      	movs	r7, #1
10003e2c:	4079      	eors	r1, r7
10003e2e:	4288      	cmp	r0, r1
10003e30:	d050      	beq.n	10003ed4 <__aeabi_fsub+0xc8>
10003e32:	1aa0      	subs	r0, r4, r2
10003e34:	2800      	cmp	r0, #0
10003e36:	dc00      	bgt.n	10003e3a <__aeabi_fsub+0x2e>
10003e38:	e08f      	b.n	10003f5a <__aeabi_fsub+0x14e>
10003e3a:	2a00      	cmp	r2, #0
10003e3c:	d11e      	bne.n	10003e7c <__aeabi_fsub+0x70>
10003e3e:	2d00      	cmp	r5, #0
10003e40:	d000      	beq.n	10003e44 <__aeabi_fsub+0x38>
10003e42:	e075      	b.n	10003f30 <__aeabi_fsub+0x124>
10003e44:	075a      	lsls	r2, r3, #29
10003e46:	d004      	beq.n	10003e52 <__aeabi_fsub+0x46>
10003e48:	220f      	movs	r2, #15
10003e4a:	401a      	ands	r2, r3
10003e4c:	2a04      	cmp	r2, #4
10003e4e:	d000      	beq.n	10003e52 <__aeabi_fsub+0x46>
10003e50:	3304      	adds	r3, #4
10003e52:	2280      	movs	r2, #128	; 0x80
10003e54:	2001      	movs	r0, #1
10003e56:	04d2      	lsls	r2, r2, #19
10003e58:	401a      	ands	r2, r3
10003e5a:	4030      	ands	r0, r6
10003e5c:	2a00      	cmp	r2, #0
10003e5e:	d032      	beq.n	10003ec6 <__aeabi_fsub+0xba>
10003e60:	3401      	adds	r4, #1
10003e62:	2cff      	cmp	r4, #255	; 0xff
10003e64:	d100      	bne.n	10003e68 <__aeabi_fsub+0x5c>
10003e66:	e084      	b.n	10003f72 <__aeabi_fsub+0x166>
10003e68:	019b      	lsls	r3, r3, #6
10003e6a:	0a5b      	lsrs	r3, r3, #9
10003e6c:	b2e4      	uxtb	r4, r4
10003e6e:	025b      	lsls	r3, r3, #9
10003e70:	05e4      	lsls	r4, r4, #23
10003e72:	0a5b      	lsrs	r3, r3, #9
10003e74:	4323      	orrs	r3, r4
10003e76:	07c0      	lsls	r0, r0, #31
10003e78:	4318      	orrs	r0, r3
10003e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003e7c:	2cff      	cmp	r4, #255	; 0xff
10003e7e:	d0e1      	beq.n	10003e44 <__aeabi_fsub+0x38>
10003e80:	2280      	movs	r2, #128	; 0x80
10003e82:	04d2      	lsls	r2, r2, #19
10003e84:	4315      	orrs	r5, r2
10003e86:	281b      	cmp	r0, #27
10003e88:	dd7a      	ble.n	10003f80 <__aeabi_fsub+0x174>
10003e8a:	2501      	movs	r5, #1
10003e8c:	1b5b      	subs	r3, r3, r5
10003e8e:	015a      	lsls	r2, r3, #5
10003e90:	d55d      	bpl.n	10003f4e <__aeabi_fsub+0x142>
10003e92:	019b      	lsls	r3, r3, #6
10003e94:	099f      	lsrs	r7, r3, #6
10003e96:	1c38      	adds	r0, r7, #0
10003e98:	f001 f838 	bl	10004f0c <__clzsi2>
10003e9c:	3805      	subs	r0, #5
10003e9e:	4087      	lsls	r7, r0
10003ea0:	4284      	cmp	r4, r0
10003ea2:	dc69      	bgt.n	10003f78 <__aeabi_fsub+0x16c>
10003ea4:	1b00      	subs	r0, r0, r4
10003ea6:	241f      	movs	r4, #31
10003ea8:	1c3a      	adds	r2, r7, #0
10003eaa:	1c43      	adds	r3, r0, #1
10003eac:	1a20      	subs	r0, r4, r0
10003eae:	40da      	lsrs	r2, r3
10003eb0:	4087      	lsls	r7, r0
10003eb2:	1c13      	adds	r3, r2, #0
10003eb4:	1e7c      	subs	r4, r7, #1
10003eb6:	41a7      	sbcs	r7, r4
10003eb8:	2400      	movs	r4, #0
10003eba:	433b      	orrs	r3, r7
10003ebc:	e7c2      	b.n	10003e44 <__aeabi_fsub+0x38>
10003ebe:	1e13      	subs	r3, r2, #0
10003ec0:	d145      	bne.n	10003f4e <__aeabi_fsub+0x142>
10003ec2:	2300      	movs	r3, #0
10003ec4:	2000      	movs	r0, #0
10003ec6:	08db      	lsrs	r3, r3, #3
10003ec8:	2cff      	cmp	r4, #255	; 0xff
10003eca:	d028      	beq.n	10003f1e <__aeabi_fsub+0x112>
10003ecc:	025b      	lsls	r3, r3, #9
10003ece:	0a5b      	lsrs	r3, r3, #9
10003ed0:	b2e4      	uxtb	r4, r4
10003ed2:	e7cc      	b.n	10003e6e <__aeabi_fsub+0x62>
10003ed4:	1aa1      	subs	r1, r4, r2
10003ed6:	2900      	cmp	r1, #0
10003ed8:	dd5b      	ble.n	10003f92 <__aeabi_fsub+0x186>
10003eda:	2a00      	cmp	r2, #0
10003edc:	d02e      	beq.n	10003f3c <__aeabi_fsub+0x130>
10003ede:	2cff      	cmp	r4, #255	; 0xff
10003ee0:	d0b0      	beq.n	10003e44 <__aeabi_fsub+0x38>
10003ee2:	2280      	movs	r2, #128	; 0x80
10003ee4:	04d2      	lsls	r2, r2, #19
10003ee6:	4315      	orrs	r5, r2
10003ee8:	291b      	cmp	r1, #27
10003eea:	dc74      	bgt.n	10003fd6 <__aeabi_fsub+0x1ca>
10003eec:	1c2f      	adds	r7, r5, #0
10003eee:	2220      	movs	r2, #32
10003ef0:	40cf      	lsrs	r7, r1
10003ef2:	1a51      	subs	r1, r2, r1
10003ef4:	408d      	lsls	r5, r1
10003ef6:	1e69      	subs	r1, r5, #1
10003ef8:	418d      	sbcs	r5, r1
10003efa:	433d      	orrs	r5, r7
10003efc:	195b      	adds	r3, r3, r5
10003efe:	015a      	lsls	r2, r3, #5
10003f00:	d525      	bpl.n	10003f4e <__aeabi_fsub+0x142>
10003f02:	3401      	adds	r4, #1
10003f04:	2cff      	cmp	r4, #255	; 0xff
10003f06:	d074      	beq.n	10003ff2 <__aeabi_fsub+0x1e6>
10003f08:	2101      	movs	r1, #1
10003f0a:	4a7e      	ldr	r2, [pc, #504]	; (10004104 <__aeabi_fsub+0x2f8>)
10003f0c:	4019      	ands	r1, r3
10003f0e:	4013      	ands	r3, r2
10003f10:	085b      	lsrs	r3, r3, #1
10003f12:	430b      	orrs	r3, r1
10003f14:	e796      	b.n	10003e44 <__aeabi_fsub+0x38>
10003f16:	2d00      	cmp	r5, #0
10003f18:	d000      	beq.n	10003f1c <__aeabi_fsub+0x110>
10003f1a:	e788      	b.n	10003e2e <__aeabi_fsub+0x22>
10003f1c:	e785      	b.n	10003e2a <__aeabi_fsub+0x1e>
10003f1e:	2b00      	cmp	r3, #0
10003f20:	d027      	beq.n	10003f72 <__aeabi_fsub+0x166>
10003f22:	2280      	movs	r2, #128	; 0x80
10003f24:	03d2      	lsls	r2, r2, #15
10003f26:	4313      	orrs	r3, r2
10003f28:	025b      	lsls	r3, r3, #9
10003f2a:	0a5b      	lsrs	r3, r3, #9
10003f2c:	24ff      	movs	r4, #255	; 0xff
10003f2e:	e79e      	b.n	10003e6e <__aeabi_fsub+0x62>
10003f30:	3801      	subs	r0, #1
10003f32:	2800      	cmp	r0, #0
10003f34:	d0aa      	beq.n	10003e8c <__aeabi_fsub+0x80>
10003f36:	2cff      	cmp	r4, #255	; 0xff
10003f38:	d1a5      	bne.n	10003e86 <__aeabi_fsub+0x7a>
10003f3a:	e783      	b.n	10003e44 <__aeabi_fsub+0x38>
10003f3c:	2d00      	cmp	r5, #0
10003f3e:	d100      	bne.n	10003f42 <__aeabi_fsub+0x136>
10003f40:	e780      	b.n	10003e44 <__aeabi_fsub+0x38>
10003f42:	3901      	subs	r1, #1
10003f44:	2900      	cmp	r1, #0
10003f46:	d0d9      	beq.n	10003efc <__aeabi_fsub+0xf0>
10003f48:	2cff      	cmp	r4, #255	; 0xff
10003f4a:	d1cd      	bne.n	10003ee8 <__aeabi_fsub+0xdc>
10003f4c:	e77a      	b.n	10003e44 <__aeabi_fsub+0x38>
10003f4e:	075a      	lsls	r2, r3, #29
10003f50:	d000      	beq.n	10003f54 <__aeabi_fsub+0x148>
10003f52:	e779      	b.n	10003e48 <__aeabi_fsub+0x3c>
10003f54:	2001      	movs	r0, #1
10003f56:	4030      	ands	r0, r6
10003f58:	e7b5      	b.n	10003ec6 <__aeabi_fsub+0xba>
10003f5a:	2800      	cmp	r0, #0
10003f5c:	d125      	bne.n	10003faa <__aeabi_fsub+0x19e>
10003f5e:	1c62      	adds	r2, r4, #1
10003f60:	b2d2      	uxtb	r2, r2
10003f62:	2a01      	cmp	r2, #1
10003f64:	dd55      	ble.n	10004012 <__aeabi_fsub+0x206>
10003f66:	1b5f      	subs	r7, r3, r5
10003f68:	017a      	lsls	r2, r7, #5
10003f6a:	d52d      	bpl.n	10003fc8 <__aeabi_fsub+0x1bc>
10003f6c:	1aef      	subs	r7, r5, r3
10003f6e:	1c0e      	adds	r6, r1, #0
10003f70:	e791      	b.n	10003e96 <__aeabi_fsub+0x8a>
10003f72:	24ff      	movs	r4, #255	; 0xff
10003f74:	2300      	movs	r3, #0
10003f76:	e77a      	b.n	10003e6e <__aeabi_fsub+0x62>
10003f78:	4b62      	ldr	r3, [pc, #392]	; (10004104 <__aeabi_fsub+0x2f8>)
10003f7a:	1a24      	subs	r4, r4, r0
10003f7c:	403b      	ands	r3, r7
10003f7e:	e761      	b.n	10003e44 <__aeabi_fsub+0x38>
10003f80:	1c29      	adds	r1, r5, #0
10003f82:	2220      	movs	r2, #32
10003f84:	40c1      	lsrs	r1, r0
10003f86:	1a10      	subs	r0, r2, r0
10003f88:	4085      	lsls	r5, r0
10003f8a:	1e68      	subs	r0, r5, #1
10003f8c:	4185      	sbcs	r5, r0
10003f8e:	430d      	orrs	r5, r1
10003f90:	e77c      	b.n	10003e8c <__aeabi_fsub+0x80>
10003f92:	2900      	cmp	r1, #0
10003f94:	d146      	bne.n	10004024 <__aeabi_fsub+0x218>
10003f96:	1c62      	adds	r2, r4, #1
10003f98:	b2d1      	uxtb	r1, r2
10003f9a:	2901      	cmp	r1, #1
10003f9c:	dd2b      	ble.n	10003ff6 <__aeabi_fsub+0x1ea>
10003f9e:	2aff      	cmp	r2, #255	; 0xff
10003fa0:	d026      	beq.n	10003ff0 <__aeabi_fsub+0x1e4>
10003fa2:	18eb      	adds	r3, r5, r3
10003fa4:	085b      	lsrs	r3, r3, #1
10003fa6:	1c14      	adds	r4, r2, #0
10003fa8:	e74c      	b.n	10003e44 <__aeabi_fsub+0x38>
10003faa:	2c00      	cmp	r4, #0
10003fac:	d015      	beq.n	10003fda <__aeabi_fsub+0x1ce>
10003fae:	2aff      	cmp	r2, #255	; 0xff
10003fb0:	d01a      	beq.n	10003fe8 <__aeabi_fsub+0x1dc>
10003fb2:	2480      	movs	r4, #128	; 0x80
10003fb4:	04e4      	lsls	r4, r4, #19
10003fb6:	4240      	negs	r0, r0
10003fb8:	4323      	orrs	r3, r4
10003fba:	281b      	cmp	r0, #27
10003fbc:	dd4d      	ble.n	1000405a <__aeabi_fsub+0x24e>
10003fbe:	2301      	movs	r3, #1
10003fc0:	1aeb      	subs	r3, r5, r3
10003fc2:	1c14      	adds	r4, r2, #0
10003fc4:	1c0e      	adds	r6, r1, #0
10003fc6:	e762      	b.n	10003e8e <__aeabi_fsub+0x82>
10003fc8:	2f00      	cmp	r7, #0
10003fca:	d000      	beq.n	10003fce <__aeabi_fsub+0x1c2>
10003fcc:	e763      	b.n	10003e96 <__aeabi_fsub+0x8a>
10003fce:	2300      	movs	r3, #0
10003fd0:	2000      	movs	r0, #0
10003fd2:	2400      	movs	r4, #0
10003fd4:	e777      	b.n	10003ec6 <__aeabi_fsub+0xba>
10003fd6:	2501      	movs	r5, #1
10003fd8:	e790      	b.n	10003efc <__aeabi_fsub+0xf0>
10003fda:	2b00      	cmp	r3, #0
10003fdc:	d039      	beq.n	10004052 <__aeabi_fsub+0x246>
10003fde:	43c0      	mvns	r0, r0
10003fe0:	2800      	cmp	r0, #0
10003fe2:	d0ed      	beq.n	10003fc0 <__aeabi_fsub+0x1b4>
10003fe4:	2aff      	cmp	r2, #255	; 0xff
10003fe6:	d1e8      	bne.n	10003fba <__aeabi_fsub+0x1ae>
10003fe8:	1c2b      	adds	r3, r5, #0
10003fea:	24ff      	movs	r4, #255	; 0xff
10003fec:	1c0e      	adds	r6, r1, #0
10003fee:	e729      	b.n	10003e44 <__aeabi_fsub+0x38>
10003ff0:	24ff      	movs	r4, #255	; 0xff
10003ff2:	2300      	movs	r3, #0
10003ff4:	e767      	b.n	10003ec6 <__aeabi_fsub+0xba>
10003ff6:	2c00      	cmp	r4, #0
10003ff8:	d15a      	bne.n	100040b0 <__aeabi_fsub+0x2a4>
10003ffa:	2b00      	cmp	r3, #0
10003ffc:	d07f      	beq.n	100040fe <__aeabi_fsub+0x2f2>
10003ffe:	2d00      	cmp	r5, #0
10004000:	d100      	bne.n	10004004 <__aeabi_fsub+0x1f8>
10004002:	e71f      	b.n	10003e44 <__aeabi_fsub+0x38>
10004004:	195b      	adds	r3, r3, r5
10004006:	015a      	lsls	r2, r3, #5
10004008:	d5a1      	bpl.n	10003f4e <__aeabi_fsub+0x142>
1000400a:	4a3e      	ldr	r2, [pc, #248]	; (10004104 <__aeabi_fsub+0x2f8>)
1000400c:	3401      	adds	r4, #1
1000400e:	4013      	ands	r3, r2
10004010:	e718      	b.n	10003e44 <__aeabi_fsub+0x38>
10004012:	2c00      	cmp	r4, #0
10004014:	d115      	bne.n	10004042 <__aeabi_fsub+0x236>
10004016:	2b00      	cmp	r3, #0
10004018:	d12f      	bne.n	1000407a <__aeabi_fsub+0x26e>
1000401a:	2d00      	cmp	r5, #0
1000401c:	d05e      	beq.n	100040dc <__aeabi_fsub+0x2d0>
1000401e:	1c2b      	adds	r3, r5, #0
10004020:	1c0e      	adds	r6, r1, #0
10004022:	e70f      	b.n	10003e44 <__aeabi_fsub+0x38>
10004024:	2c00      	cmp	r4, #0
10004026:	d121      	bne.n	1000406c <__aeabi_fsub+0x260>
10004028:	2b00      	cmp	r3, #0
1000402a:	d054      	beq.n	100040d6 <__aeabi_fsub+0x2ca>
1000402c:	43c9      	mvns	r1, r1
1000402e:	2900      	cmp	r1, #0
10004030:	d004      	beq.n	1000403c <__aeabi_fsub+0x230>
10004032:	2aff      	cmp	r2, #255	; 0xff
10004034:	d04c      	beq.n	100040d0 <__aeabi_fsub+0x2c4>
10004036:	291b      	cmp	r1, #27
10004038:	dd58      	ble.n	100040ec <__aeabi_fsub+0x2e0>
1000403a:	2301      	movs	r3, #1
1000403c:	195b      	adds	r3, r3, r5
1000403e:	1c14      	adds	r4, r2, #0
10004040:	e75d      	b.n	10003efe <__aeabi_fsub+0xf2>
10004042:	2b00      	cmp	r3, #0
10004044:	d123      	bne.n	1000408e <__aeabi_fsub+0x282>
10004046:	2d00      	cmp	r5, #0
10004048:	d04b      	beq.n	100040e2 <__aeabi_fsub+0x2d6>
1000404a:	1c2b      	adds	r3, r5, #0
1000404c:	1c0e      	adds	r6, r1, #0
1000404e:	24ff      	movs	r4, #255	; 0xff
10004050:	e6f8      	b.n	10003e44 <__aeabi_fsub+0x38>
10004052:	1c2b      	adds	r3, r5, #0
10004054:	1c14      	adds	r4, r2, #0
10004056:	1c0e      	adds	r6, r1, #0
10004058:	e6f4      	b.n	10003e44 <__aeabi_fsub+0x38>
1000405a:	1c1e      	adds	r6, r3, #0
1000405c:	2420      	movs	r4, #32
1000405e:	40c6      	lsrs	r6, r0
10004060:	1a20      	subs	r0, r4, r0
10004062:	4083      	lsls	r3, r0
10004064:	1e58      	subs	r0, r3, #1
10004066:	4183      	sbcs	r3, r0
10004068:	4333      	orrs	r3, r6
1000406a:	e7a9      	b.n	10003fc0 <__aeabi_fsub+0x1b4>
1000406c:	2aff      	cmp	r2, #255	; 0xff
1000406e:	d02f      	beq.n	100040d0 <__aeabi_fsub+0x2c4>
10004070:	2480      	movs	r4, #128	; 0x80
10004072:	04e4      	lsls	r4, r4, #19
10004074:	4249      	negs	r1, r1
10004076:	4323      	orrs	r3, r4
10004078:	e7dd      	b.n	10004036 <__aeabi_fsub+0x22a>
1000407a:	2d00      	cmp	r5, #0
1000407c:	d100      	bne.n	10004080 <__aeabi_fsub+0x274>
1000407e:	e6e1      	b.n	10003e44 <__aeabi_fsub+0x38>
10004080:	1b5a      	subs	r2, r3, r5
10004082:	0150      	lsls	r0, r2, #5
10004084:	d400      	bmi.n	10004088 <__aeabi_fsub+0x27c>
10004086:	e71a      	b.n	10003ebe <__aeabi_fsub+0xb2>
10004088:	1aeb      	subs	r3, r5, r3
1000408a:	1c0e      	adds	r6, r1, #0
1000408c:	e6da      	b.n	10003e44 <__aeabi_fsub+0x38>
1000408e:	24ff      	movs	r4, #255	; 0xff
10004090:	2d00      	cmp	r5, #0
10004092:	d100      	bne.n	10004096 <__aeabi_fsub+0x28a>
10004094:	e6d6      	b.n	10003e44 <__aeabi_fsub+0x38>
10004096:	2280      	movs	r2, #128	; 0x80
10004098:	08db      	lsrs	r3, r3, #3
1000409a:	03d2      	lsls	r2, r2, #15
1000409c:	4213      	tst	r3, r2
1000409e:	d004      	beq.n	100040aa <__aeabi_fsub+0x29e>
100040a0:	08ed      	lsrs	r5, r5, #3
100040a2:	4215      	tst	r5, r2
100040a4:	d101      	bne.n	100040aa <__aeabi_fsub+0x29e>
100040a6:	1c2b      	adds	r3, r5, #0
100040a8:	1c0e      	adds	r6, r1, #0
100040aa:	00db      	lsls	r3, r3, #3
100040ac:	24ff      	movs	r4, #255	; 0xff
100040ae:	e6c9      	b.n	10003e44 <__aeabi_fsub+0x38>
100040b0:	2b00      	cmp	r3, #0
100040b2:	d00d      	beq.n	100040d0 <__aeabi_fsub+0x2c4>
100040b4:	24ff      	movs	r4, #255	; 0xff
100040b6:	2d00      	cmp	r5, #0
100040b8:	d100      	bne.n	100040bc <__aeabi_fsub+0x2b0>
100040ba:	e6c3      	b.n	10003e44 <__aeabi_fsub+0x38>
100040bc:	2280      	movs	r2, #128	; 0x80
100040be:	08db      	lsrs	r3, r3, #3
100040c0:	03d2      	lsls	r2, r2, #15
100040c2:	4213      	tst	r3, r2
100040c4:	d0f1      	beq.n	100040aa <__aeabi_fsub+0x29e>
100040c6:	08ed      	lsrs	r5, r5, #3
100040c8:	4215      	tst	r5, r2
100040ca:	d1ee      	bne.n	100040aa <__aeabi_fsub+0x29e>
100040cc:	1c2b      	adds	r3, r5, #0
100040ce:	e7ec      	b.n	100040aa <__aeabi_fsub+0x29e>
100040d0:	1c2b      	adds	r3, r5, #0
100040d2:	24ff      	movs	r4, #255	; 0xff
100040d4:	e6b6      	b.n	10003e44 <__aeabi_fsub+0x38>
100040d6:	1c2b      	adds	r3, r5, #0
100040d8:	1c14      	adds	r4, r2, #0
100040da:	e6b3      	b.n	10003e44 <__aeabi_fsub+0x38>
100040dc:	1c23      	adds	r3, r4, #0
100040de:	2000      	movs	r0, #0
100040e0:	e6f1      	b.n	10003ec6 <__aeabi_fsub+0xba>
100040e2:	2380      	movs	r3, #128	; 0x80
100040e4:	2000      	movs	r0, #0
100040e6:	049b      	lsls	r3, r3, #18
100040e8:	24ff      	movs	r4, #255	; 0xff
100040ea:	e6ec      	b.n	10003ec6 <__aeabi_fsub+0xba>
100040ec:	1c1f      	adds	r7, r3, #0
100040ee:	2420      	movs	r4, #32
100040f0:	40cf      	lsrs	r7, r1
100040f2:	1a61      	subs	r1, r4, r1
100040f4:	408b      	lsls	r3, r1
100040f6:	1e59      	subs	r1, r3, #1
100040f8:	418b      	sbcs	r3, r1
100040fa:	433b      	orrs	r3, r7
100040fc:	e79e      	b.n	1000403c <__aeabi_fsub+0x230>
100040fe:	1c2b      	adds	r3, r5, #0
10004100:	e6a0      	b.n	10003e44 <__aeabi_fsub+0x38>
10004102:	46c0      	nop			; (mov r8, r8)
10004104:	fbffffff 	.word	0xfbffffff

10004108 <__aeabi_ui2f>:
10004108:	b510      	push	{r4, lr}
1000410a:	1e04      	subs	r4, r0, #0
1000410c:	d035      	beq.n	1000417a <__aeabi_ui2f+0x72>
1000410e:	f000 fefd 	bl	10004f0c <__clzsi2>
10004112:	219e      	movs	r1, #158	; 0x9e
10004114:	1a09      	subs	r1, r1, r0
10004116:	2996      	cmp	r1, #150	; 0x96
10004118:	dc09      	bgt.n	1000412e <__aeabi_ui2f+0x26>
1000411a:	2808      	cmp	r0, #8
1000411c:	dd30      	ble.n	10004180 <__aeabi_ui2f+0x78>
1000411e:	1c02      	adds	r2, r0, #0
10004120:	1c23      	adds	r3, r4, #0
10004122:	3a08      	subs	r2, #8
10004124:	4093      	lsls	r3, r2
10004126:	025b      	lsls	r3, r3, #9
10004128:	0a5b      	lsrs	r3, r3, #9
1000412a:	b2c8      	uxtb	r0, r1
1000412c:	e020      	b.n	10004170 <__aeabi_ui2f+0x68>
1000412e:	2999      	cmp	r1, #153	; 0x99
10004130:	dd0c      	ble.n	1000414c <__aeabi_ui2f+0x44>
10004132:	2205      	movs	r2, #5
10004134:	1c23      	adds	r3, r4, #0
10004136:	1a12      	subs	r2, r2, r0
10004138:	40d3      	lsrs	r3, r2
1000413a:	1c1a      	adds	r2, r3, #0
1000413c:	1c03      	adds	r3, r0, #0
1000413e:	331b      	adds	r3, #27
10004140:	409c      	lsls	r4, r3
10004142:	1c23      	adds	r3, r4, #0
10004144:	1e5c      	subs	r4, r3, #1
10004146:	41a3      	sbcs	r3, r4
10004148:	4313      	orrs	r3, r2
1000414a:	1c1c      	adds	r4, r3, #0
1000414c:	2805      	cmp	r0, #5
1000414e:	dd01      	ble.n	10004154 <__aeabi_ui2f+0x4c>
10004150:	1f43      	subs	r3, r0, #5
10004152:	409c      	lsls	r4, r3
10004154:	4b0f      	ldr	r3, [pc, #60]	; (10004194 <__aeabi_ui2f+0x8c>)
10004156:	4023      	ands	r3, r4
10004158:	0762      	lsls	r2, r4, #29
1000415a:	d004      	beq.n	10004166 <__aeabi_ui2f+0x5e>
1000415c:	220f      	movs	r2, #15
1000415e:	4014      	ands	r4, r2
10004160:	2c04      	cmp	r4, #4
10004162:	d000      	beq.n	10004166 <__aeabi_ui2f+0x5e>
10004164:	3304      	adds	r3, #4
10004166:	015a      	lsls	r2, r3, #5
10004168:	d40e      	bmi.n	10004188 <__aeabi_ui2f+0x80>
1000416a:	019b      	lsls	r3, r3, #6
1000416c:	0a5b      	lsrs	r3, r3, #9
1000416e:	b2c8      	uxtb	r0, r1
10004170:	025b      	lsls	r3, r3, #9
10004172:	0a5b      	lsrs	r3, r3, #9
10004174:	05c0      	lsls	r0, r0, #23
10004176:	4318      	orrs	r0, r3
10004178:	bd10      	pop	{r4, pc}
1000417a:	2000      	movs	r0, #0
1000417c:	2300      	movs	r3, #0
1000417e:	e7f7      	b.n	10004170 <__aeabi_ui2f+0x68>
10004180:	0263      	lsls	r3, r4, #9
10004182:	0a5b      	lsrs	r3, r3, #9
10004184:	b2c8      	uxtb	r0, r1
10004186:	e7f3      	b.n	10004170 <__aeabi_ui2f+0x68>
10004188:	219f      	movs	r1, #159	; 0x9f
1000418a:	4a02      	ldr	r2, [pc, #8]	; (10004194 <__aeabi_ui2f+0x8c>)
1000418c:	1a09      	subs	r1, r1, r0
1000418e:	4013      	ands	r3, r2
10004190:	e7eb      	b.n	1000416a <__aeabi_ui2f+0x62>
10004192:	46c0      	nop			; (mov r8, r8)
10004194:	fbffffff 	.word	0xfbffffff

10004198 <__aeabi_dmul>:
10004198:	b5f0      	push	{r4, r5, r6, r7, lr}
1000419a:	465f      	mov	r7, fp
1000419c:	4656      	mov	r6, sl
1000419e:	464d      	mov	r5, r9
100041a0:	4644      	mov	r4, r8
100041a2:	b4f0      	push	{r4, r5, r6, r7}
100041a4:	1c05      	adds	r5, r0, #0
100041a6:	1c06      	adds	r6, r0, #0
100041a8:	0308      	lsls	r0, r1, #12
100041aa:	b087      	sub	sp, #28
100041ac:	4699      	mov	r9, r3
100041ae:	004f      	lsls	r7, r1, #1
100041b0:	0b03      	lsrs	r3, r0, #12
100041b2:	0fcc      	lsrs	r4, r1, #31
100041b4:	4692      	mov	sl, r2
100041b6:	469b      	mov	fp, r3
100041b8:	0d7f      	lsrs	r7, r7, #21
100041ba:	9401      	str	r4, [sp, #4]
100041bc:	d067      	beq.n	1000428e <__aeabi_dmul+0xf6>
100041be:	4b6c      	ldr	r3, [pc, #432]	; (10004370 <__aeabi_dmul+0x1d8>)
100041c0:	429f      	cmp	r7, r3
100041c2:	d036      	beq.n	10004232 <__aeabi_dmul+0x9a>
100041c4:	2080      	movs	r0, #128	; 0x80
100041c6:	465b      	mov	r3, fp
100041c8:	0340      	lsls	r0, r0, #13
100041ca:	4318      	orrs	r0, r3
100041cc:	00c0      	lsls	r0, r0, #3
100041ce:	0f6b      	lsrs	r3, r5, #29
100041d0:	4318      	orrs	r0, r3
100041d2:	4b68      	ldr	r3, [pc, #416]	; (10004374 <__aeabi_dmul+0x1dc>)
100041d4:	4683      	mov	fp, r0
100041d6:	469c      	mov	ip, r3
100041d8:	2300      	movs	r3, #0
100041da:	4698      	mov	r8, r3
100041dc:	00ee      	lsls	r6, r5, #3
100041de:	4467      	add	r7, ip
100041e0:	9300      	str	r3, [sp, #0]
100041e2:	464b      	mov	r3, r9
100041e4:	4649      	mov	r1, r9
100041e6:	031d      	lsls	r5, r3, #12
100041e8:	0fc9      	lsrs	r1, r1, #31
100041ea:	005b      	lsls	r3, r3, #1
100041ec:	4652      	mov	r2, sl
100041ee:	0b2d      	lsrs	r5, r5, #12
100041f0:	0d5b      	lsrs	r3, r3, #21
100041f2:	4689      	mov	r9, r1
100041f4:	d100      	bne.n	100041f8 <__aeabi_dmul+0x60>
100041f6:	e06e      	b.n	100042d6 <__aeabi_dmul+0x13e>
100041f8:	495d      	ldr	r1, [pc, #372]	; (10004370 <__aeabi_dmul+0x1d8>)
100041fa:	428b      	cmp	r3, r1
100041fc:	d064      	beq.n	100042c8 <__aeabi_dmul+0x130>
100041fe:	2080      	movs	r0, #128	; 0x80
10004200:	495c      	ldr	r1, [pc, #368]	; (10004374 <__aeabi_dmul+0x1dc>)
10004202:	0340      	lsls	r0, r0, #13
10004204:	468c      	mov	ip, r1
10004206:	2100      	movs	r1, #0
10004208:	4305      	orrs	r5, r0
1000420a:	00ed      	lsls	r5, r5, #3
1000420c:	0f50      	lsrs	r0, r2, #29
1000420e:	4305      	orrs	r5, r0
10004210:	00d2      	lsls	r2, r2, #3
10004212:	4463      	add	r3, ip
10004214:	4648      	mov	r0, r9
10004216:	18ff      	adds	r7, r7, r3
10004218:	1c7b      	adds	r3, r7, #1
1000421a:	469a      	mov	sl, r3
1000421c:	9b00      	ldr	r3, [sp, #0]
1000421e:	4060      	eors	r0, r4
10004220:	9002      	str	r0, [sp, #8]
10004222:	430b      	orrs	r3, r1
10004224:	2b0f      	cmp	r3, #15
10004226:	d900      	bls.n	1000422a <__aeabi_dmul+0x92>
10004228:	e0ac      	b.n	10004384 <__aeabi_dmul+0x1ec>
1000422a:	4853      	ldr	r0, [pc, #332]	; (10004378 <__aeabi_dmul+0x1e0>)
1000422c:	009b      	lsls	r3, r3, #2
1000422e:	58c3      	ldr	r3, [r0, r3]
10004230:	469f      	mov	pc, r3
10004232:	465b      	mov	r3, fp
10004234:	431d      	orrs	r5, r3
10004236:	d000      	beq.n	1000423a <__aeabi_dmul+0xa2>
10004238:	e082      	b.n	10004340 <__aeabi_dmul+0x1a8>
1000423a:	2308      	movs	r3, #8
1000423c:	9300      	str	r3, [sp, #0]
1000423e:	2300      	movs	r3, #0
10004240:	469b      	mov	fp, r3
10004242:	3302      	adds	r3, #2
10004244:	2600      	movs	r6, #0
10004246:	4698      	mov	r8, r3
10004248:	e7cb      	b.n	100041e2 <__aeabi_dmul+0x4a>
1000424a:	9b02      	ldr	r3, [sp, #8]
1000424c:	9301      	str	r3, [sp, #4]
1000424e:	4643      	mov	r3, r8
10004250:	2b02      	cmp	r3, #2
10004252:	d159      	bne.n	10004308 <__aeabi_dmul+0x170>
10004254:	2401      	movs	r4, #1
10004256:	2500      	movs	r5, #0
10004258:	2600      	movs	r6, #0
1000425a:	9b01      	ldr	r3, [sp, #4]
1000425c:	401c      	ands	r4, r3
1000425e:	4b44      	ldr	r3, [pc, #272]	; (10004370 <__aeabi_dmul+0x1d8>)
10004260:	2100      	movs	r1, #0
10004262:	032d      	lsls	r5, r5, #12
10004264:	0d0a      	lsrs	r2, r1, #20
10004266:	0512      	lsls	r2, r2, #20
10004268:	0b2d      	lsrs	r5, r5, #12
1000426a:	4315      	orrs	r5, r2
1000426c:	4a43      	ldr	r2, [pc, #268]	; (1000437c <__aeabi_dmul+0x1e4>)
1000426e:	051b      	lsls	r3, r3, #20
10004270:	4015      	ands	r5, r2
10004272:	431d      	orrs	r5, r3
10004274:	006d      	lsls	r5, r5, #1
10004276:	07e4      	lsls	r4, r4, #31
10004278:	086d      	lsrs	r5, r5, #1
1000427a:	4325      	orrs	r5, r4
1000427c:	1c30      	adds	r0, r6, #0
1000427e:	1c29      	adds	r1, r5, #0
10004280:	b007      	add	sp, #28
10004282:	bc3c      	pop	{r2, r3, r4, r5}
10004284:	4690      	mov	r8, r2
10004286:	4699      	mov	r9, r3
10004288:	46a2      	mov	sl, r4
1000428a:	46ab      	mov	fp, r5
1000428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000428e:	432b      	orrs	r3, r5
10004290:	d04e      	beq.n	10004330 <__aeabi_dmul+0x198>
10004292:	465b      	mov	r3, fp
10004294:	2b00      	cmp	r3, #0
10004296:	d100      	bne.n	1000429a <__aeabi_dmul+0x102>
10004298:	e185      	b.n	100045a6 <__aeabi_dmul+0x40e>
1000429a:	4658      	mov	r0, fp
1000429c:	f000 fe36 	bl	10004f0c <__clzsi2>
100042a0:	1c02      	adds	r2, r0, #0
100042a2:	2328      	movs	r3, #40	; 0x28
100042a4:	1c29      	adds	r1, r5, #0
100042a6:	1a9b      	subs	r3, r3, r2
100042a8:	1c16      	adds	r6, r2, #0
100042aa:	4658      	mov	r0, fp
100042ac:	40d9      	lsrs	r1, r3
100042ae:	3e08      	subs	r6, #8
100042b0:	40b0      	lsls	r0, r6
100042b2:	1c0b      	adds	r3, r1, #0
100042b4:	40b5      	lsls	r5, r6
100042b6:	4303      	orrs	r3, r0
100042b8:	469b      	mov	fp, r3
100042ba:	1c2e      	adds	r6, r5, #0
100042bc:	2300      	movs	r3, #0
100042be:	4f30      	ldr	r7, [pc, #192]	; (10004380 <__aeabi_dmul+0x1e8>)
100042c0:	9300      	str	r3, [sp, #0]
100042c2:	1abf      	subs	r7, r7, r2
100042c4:	4698      	mov	r8, r3
100042c6:	e78c      	b.n	100041e2 <__aeabi_dmul+0x4a>
100042c8:	4651      	mov	r1, sl
100042ca:	4329      	orrs	r1, r5
100042cc:	d12e      	bne.n	1000432c <__aeabi_dmul+0x194>
100042ce:	2500      	movs	r5, #0
100042d0:	2200      	movs	r2, #0
100042d2:	2102      	movs	r1, #2
100042d4:	e79e      	b.n	10004214 <__aeabi_dmul+0x7c>
100042d6:	4651      	mov	r1, sl
100042d8:	4329      	orrs	r1, r5
100042da:	d023      	beq.n	10004324 <__aeabi_dmul+0x18c>
100042dc:	2d00      	cmp	r5, #0
100042de:	d100      	bne.n	100042e2 <__aeabi_dmul+0x14a>
100042e0:	e154      	b.n	1000458c <__aeabi_dmul+0x3f4>
100042e2:	1c28      	adds	r0, r5, #0
100042e4:	f000 fe12 	bl	10004f0c <__clzsi2>
100042e8:	1c03      	adds	r3, r0, #0
100042ea:	2128      	movs	r1, #40	; 0x28
100042ec:	4650      	mov	r0, sl
100042ee:	1ac9      	subs	r1, r1, r3
100042f0:	1c1a      	adds	r2, r3, #0
100042f2:	40c8      	lsrs	r0, r1
100042f4:	4651      	mov	r1, sl
100042f6:	3a08      	subs	r2, #8
100042f8:	4091      	lsls	r1, r2
100042fa:	4095      	lsls	r5, r2
100042fc:	1c0a      	adds	r2, r1, #0
100042fe:	4305      	orrs	r5, r0
10004300:	481f      	ldr	r0, [pc, #124]	; (10004380 <__aeabi_dmul+0x1e8>)
10004302:	2100      	movs	r1, #0
10004304:	1ac3      	subs	r3, r0, r3
10004306:	e785      	b.n	10004214 <__aeabi_dmul+0x7c>
10004308:	2b03      	cmp	r3, #3
1000430a:	d100      	bne.n	1000430e <__aeabi_dmul+0x176>
1000430c:	e1c2      	b.n	10004694 <__aeabi_dmul+0x4fc>
1000430e:	2b01      	cmp	r3, #1
10004310:	d000      	beq.n	10004314 <__aeabi_dmul+0x17c>
10004312:	e16d      	b.n	100045f0 <__aeabi_dmul+0x458>
10004314:	4644      	mov	r4, r8
10004316:	9b01      	ldr	r3, [sp, #4]
10004318:	2500      	movs	r5, #0
1000431a:	401c      	ands	r4, r3
1000431c:	b2e4      	uxtb	r4, r4
1000431e:	2300      	movs	r3, #0
10004320:	2600      	movs	r6, #0
10004322:	e79d      	b.n	10004260 <__aeabi_dmul+0xc8>
10004324:	2500      	movs	r5, #0
10004326:	2200      	movs	r2, #0
10004328:	2101      	movs	r1, #1
1000432a:	e773      	b.n	10004214 <__aeabi_dmul+0x7c>
1000432c:	2103      	movs	r1, #3
1000432e:	e771      	b.n	10004214 <__aeabi_dmul+0x7c>
10004330:	2304      	movs	r3, #4
10004332:	9300      	str	r3, [sp, #0]
10004334:	2300      	movs	r3, #0
10004336:	469b      	mov	fp, r3
10004338:	3301      	adds	r3, #1
1000433a:	2600      	movs	r6, #0
1000433c:	4698      	mov	r8, r3
1000433e:	e750      	b.n	100041e2 <__aeabi_dmul+0x4a>
10004340:	230c      	movs	r3, #12
10004342:	9300      	str	r3, [sp, #0]
10004344:	3b09      	subs	r3, #9
10004346:	4698      	mov	r8, r3
10004348:	e74b      	b.n	100041e2 <__aeabi_dmul+0x4a>
1000434a:	2580      	movs	r5, #128	; 0x80
1000434c:	2400      	movs	r4, #0
1000434e:	032d      	lsls	r5, r5, #12
10004350:	2600      	movs	r6, #0
10004352:	4b07      	ldr	r3, [pc, #28]	; (10004370 <__aeabi_dmul+0x1d8>)
10004354:	e784      	b.n	10004260 <__aeabi_dmul+0xc8>
10004356:	464b      	mov	r3, r9
10004358:	46ab      	mov	fp, r5
1000435a:	1c16      	adds	r6, r2, #0
1000435c:	9301      	str	r3, [sp, #4]
1000435e:	4688      	mov	r8, r1
10004360:	e775      	b.n	1000424e <__aeabi_dmul+0xb6>
10004362:	9b02      	ldr	r3, [sp, #8]
10004364:	46ab      	mov	fp, r5
10004366:	1c16      	adds	r6, r2, #0
10004368:	9301      	str	r3, [sp, #4]
1000436a:	4688      	mov	r8, r1
1000436c:	e76f      	b.n	1000424e <__aeabi_dmul+0xb6>
1000436e:	46c0      	nop			; (mov r8, r8)
10004370:	000007ff 	.word	0x000007ff
10004374:	fffffc01 	.word	0xfffffc01
10004378:	100053f8 	.word	0x100053f8
1000437c:	800fffff 	.word	0x800fffff
10004380:	fffffc0d 	.word	0xfffffc0d
10004384:	0c33      	lsrs	r3, r6, #16
10004386:	0436      	lsls	r6, r6, #16
10004388:	0c36      	lsrs	r6, r6, #16
1000438a:	469c      	mov	ip, r3
1000438c:	1c33      	adds	r3, r6, #0
1000438e:	0c14      	lsrs	r4, r2, #16
10004390:	0412      	lsls	r2, r2, #16
10004392:	0c12      	lsrs	r2, r2, #16
10004394:	4353      	muls	r3, r2
10004396:	4698      	mov	r8, r3
10004398:	4663      	mov	r3, ip
1000439a:	4353      	muls	r3, r2
1000439c:	4699      	mov	r9, r3
1000439e:	4663      	mov	r3, ip
100043a0:	4363      	muls	r3, r4
100043a2:	9301      	str	r3, [sp, #4]
100043a4:	1c33      	adds	r3, r6, #0
100043a6:	4641      	mov	r1, r8
100043a8:	4363      	muls	r3, r4
100043aa:	0c09      	lsrs	r1, r1, #16
100043ac:	444b      	add	r3, r9
100043ae:	185b      	adds	r3, r3, r1
100043b0:	4599      	cmp	r9, r3
100043b2:	d905      	bls.n	100043c0 <__aeabi_dmul+0x228>
100043b4:	2080      	movs	r0, #128	; 0x80
100043b6:	0240      	lsls	r0, r0, #9
100043b8:	4681      	mov	r9, r0
100043ba:	9901      	ldr	r1, [sp, #4]
100043bc:	4449      	add	r1, r9
100043be:	9101      	str	r1, [sp, #4]
100043c0:	0c19      	lsrs	r1, r3, #16
100043c2:	9103      	str	r1, [sp, #12]
100043c4:	4641      	mov	r1, r8
100043c6:	0409      	lsls	r1, r1, #16
100043c8:	0c09      	lsrs	r1, r1, #16
100043ca:	041b      	lsls	r3, r3, #16
100043cc:	185b      	adds	r3, r3, r1
100043ce:	9304      	str	r3, [sp, #16]
100043d0:	0c2b      	lsrs	r3, r5, #16
100043d2:	4698      	mov	r8, r3
100043d4:	1c33      	adds	r3, r6, #0
100043d6:	042d      	lsls	r5, r5, #16
100043d8:	0c29      	lsrs	r1, r5, #16
100043da:	434b      	muls	r3, r1
100043dc:	4660      	mov	r0, ip
100043de:	9300      	str	r3, [sp, #0]
100043e0:	4643      	mov	r3, r8
100043e2:	4665      	mov	r5, ip
100043e4:	4358      	muls	r0, r3
100043e6:	435e      	muls	r6, r3
100043e8:	9b00      	ldr	r3, [sp, #0]
100043ea:	434d      	muls	r5, r1
100043ec:	0c1b      	lsrs	r3, r3, #16
100043ee:	4699      	mov	r9, r3
100043f0:	19ae      	adds	r6, r5, r6
100043f2:	444e      	add	r6, r9
100043f4:	4684      	mov	ip, r0
100043f6:	42b5      	cmp	r5, r6
100043f8:	d903      	bls.n	10004402 <__aeabi_dmul+0x26a>
100043fa:	2380      	movs	r3, #128	; 0x80
100043fc:	025b      	lsls	r3, r3, #9
100043fe:	4699      	mov	r9, r3
10004400:	44cc      	add	ip, r9
10004402:	0c35      	lsrs	r5, r6, #16
10004404:	1c2b      	adds	r3, r5, #0
10004406:	9803      	ldr	r0, [sp, #12]
10004408:	4463      	add	r3, ip
1000440a:	4684      	mov	ip, r0
1000440c:	9305      	str	r3, [sp, #20]
1000440e:	9b00      	ldr	r3, [sp, #0]
10004410:	0436      	lsls	r6, r6, #16
10004412:	041b      	lsls	r3, r3, #16
10004414:	0c1b      	lsrs	r3, r3, #16
10004416:	18f3      	adds	r3, r6, r3
10004418:	449c      	add	ip, r3
1000441a:	4660      	mov	r0, ip
1000441c:	9003      	str	r0, [sp, #12]
1000441e:	4658      	mov	r0, fp
10004420:	0405      	lsls	r5, r0, #16
10004422:	0c06      	lsrs	r6, r0, #16
10004424:	0c28      	lsrs	r0, r5, #16
10004426:	4684      	mov	ip, r0
10004428:	4350      	muls	r0, r2
1000442a:	1c35      	adds	r5, r6, #0
1000442c:	4681      	mov	r9, r0
1000442e:	4660      	mov	r0, ip
10004430:	4365      	muls	r5, r4
10004432:	4344      	muls	r4, r0
10004434:	4648      	mov	r0, r9
10004436:	0c00      	lsrs	r0, r0, #16
10004438:	4683      	mov	fp, r0
1000443a:	4372      	muls	r2, r6
1000443c:	1914      	adds	r4, r2, r4
1000443e:	445c      	add	r4, fp
10004440:	42a2      	cmp	r2, r4
10004442:	d903      	bls.n	1000444c <__aeabi_dmul+0x2b4>
10004444:	2280      	movs	r2, #128	; 0x80
10004446:	0252      	lsls	r2, r2, #9
10004448:	4693      	mov	fp, r2
1000444a:	445d      	add	r5, fp
1000444c:	0c22      	lsrs	r2, r4, #16
1000444e:	18ad      	adds	r5, r5, r2
10004450:	464a      	mov	r2, r9
10004452:	0412      	lsls	r2, r2, #16
10004454:	0c12      	lsrs	r2, r2, #16
10004456:	0424      	lsls	r4, r4, #16
10004458:	4640      	mov	r0, r8
1000445a:	18a4      	adds	r4, r4, r2
1000445c:	4662      	mov	r2, ip
1000445e:	434a      	muls	r2, r1
10004460:	4371      	muls	r1, r6
10004462:	4346      	muls	r6, r0
10004464:	4660      	mov	r0, ip
10004466:	9600      	str	r6, [sp, #0]
10004468:	4646      	mov	r6, r8
1000446a:	4370      	muls	r0, r6
1000446c:	4680      	mov	r8, r0
1000446e:	0c10      	lsrs	r0, r2, #16
10004470:	4684      	mov	ip, r0
10004472:	4488      	add	r8, r1
10004474:	44e0      	add	r8, ip
10004476:	4541      	cmp	r1, r8
10004478:	d905      	bls.n	10004486 <__aeabi_dmul+0x2ee>
1000447a:	2180      	movs	r1, #128	; 0x80
1000447c:	0249      	lsls	r1, r1, #9
1000447e:	468c      	mov	ip, r1
10004480:	9900      	ldr	r1, [sp, #0]
10004482:	4461      	add	r1, ip
10004484:	9100      	str	r1, [sp, #0]
10004486:	9801      	ldr	r0, [sp, #4]
10004488:	9903      	ldr	r1, [sp, #12]
1000448a:	4684      	mov	ip, r0
1000448c:	4461      	add	r1, ip
1000448e:	4299      	cmp	r1, r3
10004490:	419b      	sbcs	r3, r3
10004492:	425b      	negs	r3, r3
10004494:	4699      	mov	r9, r3
10004496:	9805      	ldr	r0, [sp, #20]
10004498:	4643      	mov	r3, r8
1000449a:	4684      	mov	ip, r0
1000449c:	0412      	lsls	r2, r2, #16
1000449e:	0c12      	lsrs	r2, r2, #16
100044a0:	041b      	lsls	r3, r3, #16
100044a2:	189b      	adds	r3, r3, r2
100044a4:	4463      	add	r3, ip
100044a6:	469c      	mov	ip, r3
100044a8:	46ab      	mov	fp, r5
100044aa:	4283      	cmp	r3, r0
100044ac:	419b      	sbcs	r3, r3
100044ae:	4640      	mov	r0, r8
100044b0:	190a      	adds	r2, r1, r4
100044b2:	44cc      	add	ip, r9
100044b4:	42a2      	cmp	r2, r4
100044b6:	4189      	sbcs	r1, r1
100044b8:	44e3      	add	fp, ip
100044ba:	45cc      	cmp	ip, r9
100044bc:	41b6      	sbcs	r6, r6
100044be:	465c      	mov	r4, fp
100044c0:	0c00      	lsrs	r0, r0, #16
100044c2:	4680      	mov	r8, r0
100044c4:	4249      	negs	r1, r1
100044c6:	4276      	negs	r6, r6
100044c8:	425b      	negs	r3, r3
100044ca:	1864      	adds	r4, r4, r1
100044cc:	4333      	orrs	r3, r6
100044ce:	4498      	add	r8, r3
100044d0:	428c      	cmp	r4, r1
100044d2:	4189      	sbcs	r1, r1
100044d4:	45ab      	cmp	fp, r5
100044d6:	419b      	sbcs	r3, r3
100044d8:	4249      	negs	r1, r1
100044da:	425b      	negs	r3, r3
100044dc:	4319      	orrs	r1, r3
100044de:	1c0d      	adds	r5, r1, #0
100044e0:	9b00      	ldr	r3, [sp, #0]
100044e2:	4445      	add	r5, r8
100044e4:	18ee      	adds	r6, r5, r3
100044e6:	0276      	lsls	r6, r6, #9
100044e8:	0de5      	lsrs	r5, r4, #23
100044ea:	432e      	orrs	r6, r5
100044ec:	46b3      	mov	fp, r6
100044ee:	9b04      	ldr	r3, [sp, #16]
100044f0:	0256      	lsls	r6, r2, #9
100044f2:	431e      	orrs	r6, r3
100044f4:	1e73      	subs	r3, r6, #1
100044f6:	419e      	sbcs	r6, r3
100044f8:	465b      	mov	r3, fp
100044fa:	0dd2      	lsrs	r2, r2, #23
100044fc:	4332      	orrs	r2, r6
100044fe:	0266      	lsls	r6, r4, #9
10004500:	4316      	orrs	r6, r2
10004502:	01db      	lsls	r3, r3, #7
10004504:	d50a      	bpl.n	1000451c <__aeabi_dmul+0x384>
10004506:	2301      	movs	r3, #1
10004508:	4033      	ands	r3, r6
1000450a:	0876      	lsrs	r6, r6, #1
1000450c:	431e      	orrs	r6, r3
1000450e:	465b      	mov	r3, fp
10004510:	07db      	lsls	r3, r3, #31
10004512:	431e      	orrs	r6, r3
10004514:	465b      	mov	r3, fp
10004516:	085b      	lsrs	r3, r3, #1
10004518:	469b      	mov	fp, r3
1000451a:	4657      	mov	r7, sl
1000451c:	4b63      	ldr	r3, [pc, #396]	; (100046ac <__aeabi_dmul+0x514>)
1000451e:	18fb      	adds	r3, r7, r3
10004520:	2b00      	cmp	r3, #0
10004522:	dd5a      	ble.n	100045da <__aeabi_dmul+0x442>
10004524:	0772      	lsls	r2, r6, #29
10004526:	d009      	beq.n	1000453c <__aeabi_dmul+0x3a4>
10004528:	220f      	movs	r2, #15
1000452a:	4032      	ands	r2, r6
1000452c:	2a04      	cmp	r2, #4
1000452e:	d005      	beq.n	1000453c <__aeabi_dmul+0x3a4>
10004530:	1d32      	adds	r2, r6, #4
10004532:	42b2      	cmp	r2, r6
10004534:	41b6      	sbcs	r6, r6
10004536:	4276      	negs	r6, r6
10004538:	44b3      	add	fp, r6
1000453a:	1c16      	adds	r6, r2, #0
1000453c:	465a      	mov	r2, fp
1000453e:	01d2      	lsls	r2, r2, #7
10004540:	d506      	bpl.n	10004550 <__aeabi_dmul+0x3b8>
10004542:	465a      	mov	r2, fp
10004544:	4b5a      	ldr	r3, [pc, #360]	; (100046b0 <__aeabi_dmul+0x518>)
10004546:	401a      	ands	r2, r3
10004548:	2380      	movs	r3, #128	; 0x80
1000454a:	4693      	mov	fp, r2
1000454c:	00db      	lsls	r3, r3, #3
1000454e:	18fb      	adds	r3, r7, r3
10004550:	4a58      	ldr	r2, [pc, #352]	; (100046b4 <__aeabi_dmul+0x51c>)
10004552:	4293      	cmp	r3, r2
10004554:	dd34      	ble.n	100045c0 <__aeabi_dmul+0x428>
10004556:	2401      	movs	r4, #1
10004558:	9b02      	ldr	r3, [sp, #8]
1000455a:	2500      	movs	r5, #0
1000455c:	401c      	ands	r4, r3
1000455e:	2600      	movs	r6, #0
10004560:	4b55      	ldr	r3, [pc, #340]	; (100046b8 <__aeabi_dmul+0x520>)
10004562:	e67d      	b.n	10004260 <__aeabi_dmul+0xc8>
10004564:	2080      	movs	r0, #128	; 0x80
10004566:	465b      	mov	r3, fp
10004568:	0300      	lsls	r0, r0, #12
1000456a:	4203      	tst	r3, r0
1000456c:	d008      	beq.n	10004580 <__aeabi_dmul+0x3e8>
1000456e:	4205      	tst	r5, r0
10004570:	d106      	bne.n	10004580 <__aeabi_dmul+0x3e8>
10004572:	4305      	orrs	r5, r0
10004574:	032d      	lsls	r5, r5, #12
10004576:	0b2d      	lsrs	r5, r5, #12
10004578:	464c      	mov	r4, r9
1000457a:	1c16      	adds	r6, r2, #0
1000457c:	4b4e      	ldr	r3, [pc, #312]	; (100046b8 <__aeabi_dmul+0x520>)
1000457e:	e66f      	b.n	10004260 <__aeabi_dmul+0xc8>
10004580:	465d      	mov	r5, fp
10004582:	4305      	orrs	r5, r0
10004584:	032d      	lsls	r5, r5, #12
10004586:	0b2d      	lsrs	r5, r5, #12
10004588:	4b4b      	ldr	r3, [pc, #300]	; (100046b8 <__aeabi_dmul+0x520>)
1000458a:	e669      	b.n	10004260 <__aeabi_dmul+0xc8>
1000458c:	4650      	mov	r0, sl
1000458e:	f000 fcbd 	bl	10004f0c <__clzsi2>
10004592:	1c03      	adds	r3, r0, #0
10004594:	3320      	adds	r3, #32
10004596:	2b27      	cmp	r3, #39	; 0x27
10004598:	dc00      	bgt.n	1000459c <__aeabi_dmul+0x404>
1000459a:	e6a6      	b.n	100042ea <__aeabi_dmul+0x152>
1000459c:	4655      	mov	r5, sl
1000459e:	3808      	subs	r0, #8
100045a0:	4085      	lsls	r5, r0
100045a2:	2200      	movs	r2, #0
100045a4:	e6ac      	b.n	10004300 <__aeabi_dmul+0x168>
100045a6:	1c28      	adds	r0, r5, #0
100045a8:	f000 fcb0 	bl	10004f0c <__clzsi2>
100045ac:	1c02      	adds	r2, r0, #0
100045ae:	3220      	adds	r2, #32
100045b0:	2a27      	cmp	r2, #39	; 0x27
100045b2:	dc00      	bgt.n	100045b6 <__aeabi_dmul+0x41e>
100045b4:	e675      	b.n	100042a2 <__aeabi_dmul+0x10a>
100045b6:	3808      	subs	r0, #8
100045b8:	4085      	lsls	r5, r0
100045ba:	2600      	movs	r6, #0
100045bc:	46ab      	mov	fp, r5
100045be:	e67d      	b.n	100042bc <__aeabi_dmul+0x124>
100045c0:	465a      	mov	r2, fp
100045c2:	08f6      	lsrs	r6, r6, #3
100045c4:	0752      	lsls	r2, r2, #29
100045c6:	4316      	orrs	r6, r2
100045c8:	465a      	mov	r2, fp
100045ca:	2401      	movs	r4, #1
100045cc:	0255      	lsls	r5, r2, #9
100045ce:	9a02      	ldr	r2, [sp, #8]
100045d0:	055b      	lsls	r3, r3, #21
100045d2:	0b2d      	lsrs	r5, r5, #12
100045d4:	0d5b      	lsrs	r3, r3, #21
100045d6:	4014      	ands	r4, r2
100045d8:	e642      	b.n	10004260 <__aeabi_dmul+0xc8>
100045da:	4d38      	ldr	r5, [pc, #224]	; (100046bc <__aeabi_dmul+0x524>)
100045dc:	1bed      	subs	r5, r5, r7
100045de:	2d38      	cmp	r5, #56	; 0x38
100045e0:	dd0a      	ble.n	100045f8 <__aeabi_dmul+0x460>
100045e2:	2401      	movs	r4, #1
100045e4:	9b02      	ldr	r3, [sp, #8]
100045e6:	2500      	movs	r5, #0
100045e8:	401c      	ands	r4, r3
100045ea:	2600      	movs	r6, #0
100045ec:	2300      	movs	r3, #0
100045ee:	e637      	b.n	10004260 <__aeabi_dmul+0xc8>
100045f0:	9b01      	ldr	r3, [sp, #4]
100045f2:	4657      	mov	r7, sl
100045f4:	9302      	str	r3, [sp, #8]
100045f6:	e791      	b.n	1000451c <__aeabi_dmul+0x384>
100045f8:	2d1f      	cmp	r5, #31
100045fa:	dc25      	bgt.n	10004648 <__aeabi_dmul+0x4b0>
100045fc:	4b30      	ldr	r3, [pc, #192]	; (100046c0 <__aeabi_dmul+0x528>)
100045fe:	1c32      	adds	r2, r6, #0
10004600:	469c      	mov	ip, r3
10004602:	4467      	add	r7, ip
10004604:	40be      	lsls	r6, r7
10004606:	465b      	mov	r3, fp
10004608:	40bb      	lsls	r3, r7
1000460a:	1c37      	adds	r7, r6, #0
1000460c:	40ea      	lsrs	r2, r5
1000460e:	1e7e      	subs	r6, r7, #1
10004610:	41b7      	sbcs	r7, r6
10004612:	4313      	orrs	r3, r2
10004614:	433b      	orrs	r3, r7
10004616:	1c1e      	adds	r6, r3, #0
10004618:	465b      	mov	r3, fp
1000461a:	40eb      	lsrs	r3, r5
1000461c:	1c1d      	adds	r5, r3, #0
1000461e:	0773      	lsls	r3, r6, #29
10004620:	d009      	beq.n	10004636 <__aeabi_dmul+0x49e>
10004622:	230f      	movs	r3, #15
10004624:	4033      	ands	r3, r6
10004626:	2b04      	cmp	r3, #4
10004628:	d005      	beq.n	10004636 <__aeabi_dmul+0x49e>
1000462a:	1d33      	adds	r3, r6, #4
1000462c:	42b3      	cmp	r3, r6
1000462e:	41b6      	sbcs	r6, r6
10004630:	4276      	negs	r6, r6
10004632:	19ad      	adds	r5, r5, r6
10004634:	1c1e      	adds	r6, r3, #0
10004636:	022b      	lsls	r3, r5, #8
10004638:	d520      	bpl.n	1000467c <__aeabi_dmul+0x4e4>
1000463a:	2401      	movs	r4, #1
1000463c:	9b02      	ldr	r3, [sp, #8]
1000463e:	2500      	movs	r5, #0
10004640:	401c      	ands	r4, r3
10004642:	2600      	movs	r6, #0
10004644:	2301      	movs	r3, #1
10004646:	e60b      	b.n	10004260 <__aeabi_dmul+0xc8>
10004648:	465a      	mov	r2, fp
1000464a:	4b1e      	ldr	r3, [pc, #120]	; (100046c4 <__aeabi_dmul+0x52c>)
1000464c:	1bdb      	subs	r3, r3, r7
1000464e:	40da      	lsrs	r2, r3
10004650:	1c13      	adds	r3, r2, #0
10004652:	2d20      	cmp	r5, #32
10004654:	d01c      	beq.n	10004690 <__aeabi_dmul+0x4f8>
10004656:	4a1c      	ldr	r2, [pc, #112]	; (100046c8 <__aeabi_dmul+0x530>)
10004658:	4694      	mov	ip, r2
1000465a:	465a      	mov	r2, fp
1000465c:	4467      	add	r7, ip
1000465e:	40ba      	lsls	r2, r7
10004660:	1c17      	adds	r7, r2, #0
10004662:	433e      	orrs	r6, r7
10004664:	1e72      	subs	r2, r6, #1
10004666:	4196      	sbcs	r6, r2
10004668:	431e      	orrs	r6, r3
1000466a:	2307      	movs	r3, #7
1000466c:	2500      	movs	r5, #0
1000466e:	4033      	ands	r3, r6
10004670:	d007      	beq.n	10004682 <__aeabi_dmul+0x4ea>
10004672:	230f      	movs	r3, #15
10004674:	2500      	movs	r5, #0
10004676:	4033      	ands	r3, r6
10004678:	2b04      	cmp	r3, #4
1000467a:	d1d6      	bne.n	1000462a <__aeabi_dmul+0x492>
1000467c:	076b      	lsls	r3, r5, #29
1000467e:	026d      	lsls	r5, r5, #9
10004680:	0b2d      	lsrs	r5, r5, #12
10004682:	2401      	movs	r4, #1
10004684:	08f6      	lsrs	r6, r6, #3
10004686:	431e      	orrs	r6, r3
10004688:	9b02      	ldr	r3, [sp, #8]
1000468a:	401c      	ands	r4, r3
1000468c:	2300      	movs	r3, #0
1000468e:	e5e7      	b.n	10004260 <__aeabi_dmul+0xc8>
10004690:	2700      	movs	r7, #0
10004692:	e7e6      	b.n	10004662 <__aeabi_dmul+0x4ca>
10004694:	2580      	movs	r5, #128	; 0x80
10004696:	465b      	mov	r3, fp
10004698:	2401      	movs	r4, #1
1000469a:	032d      	lsls	r5, r5, #12
1000469c:	431d      	orrs	r5, r3
1000469e:	9b01      	ldr	r3, [sp, #4]
100046a0:	032d      	lsls	r5, r5, #12
100046a2:	4023      	ands	r3, r4
100046a4:	1c1c      	adds	r4, r3, #0
100046a6:	0b2d      	lsrs	r5, r5, #12
100046a8:	4b03      	ldr	r3, [pc, #12]	; (100046b8 <__aeabi_dmul+0x520>)
100046aa:	e5d9      	b.n	10004260 <__aeabi_dmul+0xc8>
100046ac:	000003ff 	.word	0x000003ff
100046b0:	feffffff 	.word	0xfeffffff
100046b4:	000007fe 	.word	0x000007fe
100046b8:	000007ff 	.word	0x000007ff
100046bc:	fffffc02 	.word	0xfffffc02
100046c0:	0000041e 	.word	0x0000041e
100046c4:	fffffbe2 	.word	0xfffffbe2
100046c8:	0000043e 	.word	0x0000043e

100046cc <__aeabi_dsub>:
100046cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100046ce:	464d      	mov	r5, r9
100046d0:	4644      	mov	r4, r8
100046d2:	465f      	mov	r7, fp
100046d4:	4656      	mov	r6, sl
100046d6:	b4f0      	push	{r4, r5, r6, r7}
100046d8:	1c0e      	adds	r6, r1, #0
100046da:	1c11      	adds	r1, r2, #0
100046dc:	0332      	lsls	r2, r6, #12
100046de:	0a52      	lsrs	r2, r2, #9
100046e0:	0f47      	lsrs	r7, r0, #29
100046e2:	4317      	orrs	r7, r2
100046e4:	00c5      	lsls	r5, r0, #3
100046e6:	031a      	lsls	r2, r3, #12
100046e8:	0058      	lsls	r0, r3, #1
100046ea:	0fdb      	lsrs	r3, r3, #31
100046ec:	4699      	mov	r9, r3
100046ee:	0a52      	lsrs	r2, r2, #9
100046f0:	0f4b      	lsrs	r3, r1, #29
100046f2:	b083      	sub	sp, #12
100046f4:	431a      	orrs	r2, r3
100046f6:	00cb      	lsls	r3, r1, #3
100046f8:	9301      	str	r3, [sp, #4]
100046fa:	4bcf      	ldr	r3, [pc, #828]	; (10004a38 <__aeabi_dsub+0x36c>)
100046fc:	0074      	lsls	r4, r6, #1
100046fe:	0ff6      	lsrs	r6, r6, #31
10004700:	0d64      	lsrs	r4, r4, #21
10004702:	46b0      	mov	r8, r6
10004704:	0d40      	lsrs	r0, r0, #21
10004706:	4298      	cmp	r0, r3
10004708:	d100      	bne.n	1000470c <__aeabi_dsub+0x40>
1000470a:	e0e8      	b.n	100048de <__aeabi_dsub+0x212>
1000470c:	2301      	movs	r3, #1
1000470e:	4649      	mov	r1, r9
10004710:	4059      	eors	r1, r3
10004712:	1c0b      	adds	r3, r1, #0
10004714:	429e      	cmp	r6, r3
10004716:	d100      	bne.n	1000471a <__aeabi_dsub+0x4e>
10004718:	e0b1      	b.n	1000487e <__aeabi_dsub+0x1b2>
1000471a:	1a26      	subs	r6, r4, r0
1000471c:	2e00      	cmp	r6, #0
1000471e:	dc00      	bgt.n	10004722 <__aeabi_dsub+0x56>
10004720:	e11c      	b.n	1000495c <__aeabi_dsub+0x290>
10004722:	2800      	cmp	r0, #0
10004724:	d142      	bne.n	100047ac <__aeabi_dsub+0xe0>
10004726:	1c13      	adds	r3, r2, #0
10004728:	9901      	ldr	r1, [sp, #4]
1000472a:	430b      	orrs	r3, r1
1000472c:	d000      	beq.n	10004730 <__aeabi_dsub+0x64>
1000472e:	e0e6      	b.n	100048fe <__aeabi_dsub+0x232>
10004730:	076b      	lsls	r3, r5, #29
10004732:	d100      	bne.n	10004736 <__aeabi_dsub+0x6a>
10004734:	e08e      	b.n	10004854 <__aeabi_dsub+0x188>
10004736:	230f      	movs	r3, #15
10004738:	402b      	ands	r3, r5
1000473a:	2b04      	cmp	r3, #4
1000473c:	d100      	bne.n	10004740 <__aeabi_dsub+0x74>
1000473e:	e089      	b.n	10004854 <__aeabi_dsub+0x188>
10004740:	1d2a      	adds	r2, r5, #4
10004742:	42aa      	cmp	r2, r5
10004744:	41ad      	sbcs	r5, r5
10004746:	2380      	movs	r3, #128	; 0x80
10004748:	2601      	movs	r6, #1
1000474a:	4641      	mov	r1, r8
1000474c:	426d      	negs	r5, r5
1000474e:	197f      	adds	r7, r7, r5
10004750:	041b      	lsls	r3, r3, #16
10004752:	403b      	ands	r3, r7
10004754:	400e      	ands	r6, r1
10004756:	1c15      	adds	r5, r2, #0
10004758:	2b00      	cmp	r3, #0
1000475a:	d100      	bne.n	1000475e <__aeabi_dsub+0x92>
1000475c:	e083      	b.n	10004866 <__aeabi_dsub+0x19a>
1000475e:	4bb6      	ldr	r3, [pc, #728]	; (10004a38 <__aeabi_dsub+0x36c>)
10004760:	3401      	adds	r4, #1
10004762:	429c      	cmp	r4, r3
10004764:	d100      	bne.n	10004768 <__aeabi_dsub+0x9c>
10004766:	e116      	b.n	10004996 <__aeabi_dsub+0x2ca>
10004768:	1c3a      	adds	r2, r7, #0
1000476a:	4bb4      	ldr	r3, [pc, #720]	; (10004a3c <__aeabi_dsub+0x370>)
1000476c:	08ed      	lsrs	r5, r5, #3
1000476e:	401a      	ands	r2, r3
10004770:	0750      	lsls	r0, r2, #29
10004772:	0564      	lsls	r4, r4, #21
10004774:	0252      	lsls	r2, r2, #9
10004776:	4305      	orrs	r5, r0
10004778:	0b12      	lsrs	r2, r2, #12
1000477a:	0d64      	lsrs	r4, r4, #21
1000477c:	2100      	movs	r1, #0
1000477e:	0312      	lsls	r2, r2, #12
10004780:	0d0b      	lsrs	r3, r1, #20
10004782:	051b      	lsls	r3, r3, #20
10004784:	0564      	lsls	r4, r4, #21
10004786:	0b12      	lsrs	r2, r2, #12
10004788:	431a      	orrs	r2, r3
1000478a:	0863      	lsrs	r3, r4, #1
1000478c:	4cac      	ldr	r4, [pc, #688]	; (10004a40 <__aeabi_dsub+0x374>)
1000478e:	07f6      	lsls	r6, r6, #31
10004790:	4014      	ands	r4, r2
10004792:	431c      	orrs	r4, r3
10004794:	0064      	lsls	r4, r4, #1
10004796:	0864      	lsrs	r4, r4, #1
10004798:	4334      	orrs	r4, r6
1000479a:	1c28      	adds	r0, r5, #0
1000479c:	1c21      	adds	r1, r4, #0
1000479e:	b003      	add	sp, #12
100047a0:	bc3c      	pop	{r2, r3, r4, r5}
100047a2:	4690      	mov	r8, r2
100047a4:	4699      	mov	r9, r3
100047a6:	46a2      	mov	sl, r4
100047a8:	46ab      	mov	fp, r5
100047aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100047ac:	4ba2      	ldr	r3, [pc, #648]	; (10004a38 <__aeabi_dsub+0x36c>)
100047ae:	429c      	cmp	r4, r3
100047b0:	d0be      	beq.n	10004730 <__aeabi_dsub+0x64>
100047b2:	2380      	movs	r3, #128	; 0x80
100047b4:	041b      	lsls	r3, r3, #16
100047b6:	431a      	orrs	r2, r3
100047b8:	2e38      	cmp	r6, #56	; 0x38
100047ba:	dd00      	ble.n	100047be <__aeabi_dsub+0xf2>
100047bc:	e103      	b.n	100049c6 <__aeabi_dsub+0x2fa>
100047be:	2e1f      	cmp	r6, #31
100047c0:	dd00      	ble.n	100047c4 <__aeabi_dsub+0xf8>
100047c2:	e13f      	b.n	10004a44 <__aeabi_dsub+0x378>
100047c4:	2020      	movs	r0, #32
100047c6:	1b83      	subs	r3, r0, r6
100047c8:	4699      	mov	r9, r3
100047ca:	1c13      	adds	r3, r2, #0
100047cc:	4649      	mov	r1, r9
100047ce:	408b      	lsls	r3, r1
100047d0:	469c      	mov	ip, r3
100047d2:	9b01      	ldr	r3, [sp, #4]
100047d4:	4660      	mov	r0, ip
100047d6:	40f3      	lsrs	r3, r6
100047d8:	4303      	orrs	r3, r0
100047da:	9801      	ldr	r0, [sp, #4]
100047dc:	40f2      	lsrs	r2, r6
100047de:	4088      	lsls	r0, r1
100047e0:	1c01      	adds	r1, r0, #0
100047e2:	1e48      	subs	r0, r1, #1
100047e4:	4181      	sbcs	r1, r0
100047e6:	430b      	orrs	r3, r1
100047e8:	1aeb      	subs	r3, r5, r3
100047ea:	429d      	cmp	r5, r3
100047ec:	4180      	sbcs	r0, r0
100047ee:	1c1d      	adds	r5, r3, #0
100047f0:	1aba      	subs	r2, r7, r2
100047f2:	4240      	negs	r0, r0
100047f4:	1a17      	subs	r7, r2, r0
100047f6:	023b      	lsls	r3, r7, #8
100047f8:	d400      	bmi.n	100047fc <__aeabi_dsub+0x130>
100047fa:	e0a8      	b.n	1000494e <__aeabi_dsub+0x282>
100047fc:	027a      	lsls	r2, r7, #9
100047fe:	0a56      	lsrs	r6, r2, #9
10004800:	2e00      	cmp	r6, #0
10004802:	d100      	bne.n	10004806 <__aeabi_dsub+0x13a>
10004804:	e0ca      	b.n	1000499c <__aeabi_dsub+0x2d0>
10004806:	1c30      	adds	r0, r6, #0
10004808:	f000 fb80 	bl	10004f0c <__clzsi2>
1000480c:	1c03      	adds	r3, r0, #0
1000480e:	3b08      	subs	r3, #8
10004810:	2b1f      	cmp	r3, #31
10004812:	dd00      	ble.n	10004816 <__aeabi_dsub+0x14a>
10004814:	e0cb      	b.n	100049ae <__aeabi_dsub+0x2e2>
10004816:	2228      	movs	r2, #40	; 0x28
10004818:	1c29      	adds	r1, r5, #0
1000481a:	1a12      	subs	r2, r2, r0
1000481c:	40d1      	lsrs	r1, r2
1000481e:	409e      	lsls	r6, r3
10004820:	1c0a      	adds	r2, r1, #0
10004822:	409d      	lsls	r5, r3
10004824:	4332      	orrs	r2, r6
10004826:	429c      	cmp	r4, r3
10004828:	dd00      	ble.n	1000482c <__aeabi_dsub+0x160>
1000482a:	e0c8      	b.n	100049be <__aeabi_dsub+0x2f2>
1000482c:	1b1c      	subs	r4, r3, r4
1000482e:	1c67      	adds	r7, r4, #1
10004830:	2f1f      	cmp	r7, #31
10004832:	dd00      	ble.n	10004836 <__aeabi_dsub+0x16a>
10004834:	e0ed      	b.n	10004a12 <__aeabi_dsub+0x346>
10004836:	231f      	movs	r3, #31
10004838:	1c29      	adds	r1, r5, #0
1000483a:	1b1c      	subs	r4, r3, r4
1000483c:	1c13      	adds	r3, r2, #0
1000483e:	40a5      	lsls	r5, r4
10004840:	40a3      	lsls	r3, r4
10004842:	40f9      	lsrs	r1, r7
10004844:	1e6c      	subs	r4, r5, #1
10004846:	41a5      	sbcs	r5, r4
10004848:	40fa      	lsrs	r2, r7
1000484a:	4319      	orrs	r1, r3
1000484c:	430d      	orrs	r5, r1
1000484e:	1c17      	adds	r7, r2, #0
10004850:	2400      	movs	r4, #0
10004852:	e76d      	b.n	10004730 <__aeabi_dsub+0x64>
10004854:	2380      	movs	r3, #128	; 0x80
10004856:	2601      	movs	r6, #1
10004858:	4642      	mov	r2, r8
1000485a:	041b      	lsls	r3, r3, #16
1000485c:	403b      	ands	r3, r7
1000485e:	4016      	ands	r6, r2
10004860:	2b00      	cmp	r3, #0
10004862:	d000      	beq.n	10004866 <__aeabi_dsub+0x19a>
10004864:	e77b      	b.n	1000475e <__aeabi_dsub+0x92>
10004866:	4b74      	ldr	r3, [pc, #464]	; (10004a38 <__aeabi_dsub+0x36c>)
10004868:	08ed      	lsrs	r5, r5, #3
1000486a:	0778      	lsls	r0, r7, #29
1000486c:	4305      	orrs	r5, r0
1000486e:	08fa      	lsrs	r2, r7, #3
10004870:	429c      	cmp	r4, r3
10004872:	d03b      	beq.n	100048ec <__aeabi_dsub+0x220>
10004874:	0312      	lsls	r2, r2, #12
10004876:	0564      	lsls	r4, r4, #21
10004878:	0b12      	lsrs	r2, r2, #12
1000487a:	0d64      	lsrs	r4, r4, #21
1000487c:	e77e      	b.n	1000477c <__aeabi_dsub+0xb0>
1000487e:	1a23      	subs	r3, r4, r0
10004880:	469a      	mov	sl, r3
10004882:	2b00      	cmp	r3, #0
10004884:	dc00      	bgt.n	10004888 <__aeabi_dsub+0x1bc>
10004886:	e0a5      	b.n	100049d4 <__aeabi_dsub+0x308>
10004888:	2800      	cmp	r0, #0
1000488a:	d044      	beq.n	10004916 <__aeabi_dsub+0x24a>
1000488c:	486a      	ldr	r0, [pc, #424]	; (10004a38 <__aeabi_dsub+0x36c>)
1000488e:	4284      	cmp	r4, r0
10004890:	d100      	bne.n	10004894 <__aeabi_dsub+0x1c8>
10004892:	e74d      	b.n	10004730 <__aeabi_dsub+0x64>
10004894:	2080      	movs	r0, #128	; 0x80
10004896:	0400      	lsls	r0, r0, #16
10004898:	4302      	orrs	r2, r0
1000489a:	4653      	mov	r3, sl
1000489c:	2b38      	cmp	r3, #56	; 0x38
1000489e:	dc00      	bgt.n	100048a2 <__aeabi_dsub+0x1d6>
100048a0:	e11c      	b.n	10004adc <__aeabi_dsub+0x410>
100048a2:	9b01      	ldr	r3, [sp, #4]
100048a4:	431a      	orrs	r2, r3
100048a6:	1e51      	subs	r1, r2, #1
100048a8:	418a      	sbcs	r2, r1
100048aa:	b2d1      	uxtb	r1, r2
100048ac:	2200      	movs	r2, #0
100048ae:	1949      	adds	r1, r1, r5
100048b0:	42a9      	cmp	r1, r5
100048b2:	4180      	sbcs	r0, r0
100048b4:	1c0d      	adds	r5, r1, #0
100048b6:	19d2      	adds	r2, r2, r7
100048b8:	4240      	negs	r0, r0
100048ba:	1817      	adds	r7, r2, r0
100048bc:	023b      	lsls	r3, r7, #8
100048be:	d546      	bpl.n	1000494e <__aeabi_dsub+0x282>
100048c0:	4b5d      	ldr	r3, [pc, #372]	; (10004a38 <__aeabi_dsub+0x36c>)
100048c2:	3401      	adds	r4, #1
100048c4:	429c      	cmp	r4, r3
100048c6:	d100      	bne.n	100048ca <__aeabi_dsub+0x1fe>
100048c8:	e169      	b.n	10004b9e <__aeabi_dsub+0x4d2>
100048ca:	2001      	movs	r0, #1
100048cc:	4a5b      	ldr	r2, [pc, #364]	; (10004a3c <__aeabi_dsub+0x370>)
100048ce:	086b      	lsrs	r3, r5, #1
100048d0:	403a      	ands	r2, r7
100048d2:	4028      	ands	r0, r5
100048d4:	4318      	orrs	r0, r3
100048d6:	07d5      	lsls	r5, r2, #31
100048d8:	4305      	orrs	r5, r0
100048da:	0857      	lsrs	r7, r2, #1
100048dc:	e728      	b.n	10004730 <__aeabi_dsub+0x64>
100048de:	1c13      	adds	r3, r2, #0
100048e0:	9901      	ldr	r1, [sp, #4]
100048e2:	430b      	orrs	r3, r1
100048e4:	d100      	bne.n	100048e8 <__aeabi_dsub+0x21c>
100048e6:	e711      	b.n	1000470c <__aeabi_dsub+0x40>
100048e8:	464b      	mov	r3, r9
100048ea:	e713      	b.n	10004714 <__aeabi_dsub+0x48>
100048ec:	1c2b      	adds	r3, r5, #0
100048ee:	4313      	orrs	r3, r2
100048f0:	d051      	beq.n	10004996 <__aeabi_dsub+0x2ca>
100048f2:	2380      	movs	r3, #128	; 0x80
100048f4:	031b      	lsls	r3, r3, #12
100048f6:	431a      	orrs	r2, r3
100048f8:	0312      	lsls	r2, r2, #12
100048fa:	0b12      	lsrs	r2, r2, #12
100048fc:	e73e      	b.n	1000477c <__aeabi_dsub+0xb0>
100048fe:	3e01      	subs	r6, #1
10004900:	2e00      	cmp	r6, #0
10004902:	d000      	beq.n	10004906 <__aeabi_dsub+0x23a>
10004904:	e080      	b.n	10004a08 <__aeabi_dsub+0x33c>
10004906:	1a69      	subs	r1, r5, r1
10004908:	428d      	cmp	r5, r1
1000490a:	419b      	sbcs	r3, r3
1000490c:	1aba      	subs	r2, r7, r2
1000490e:	425b      	negs	r3, r3
10004910:	1ad7      	subs	r7, r2, r3
10004912:	1c0d      	adds	r5, r1, #0
10004914:	e76f      	b.n	100047f6 <__aeabi_dsub+0x12a>
10004916:	1c10      	adds	r0, r2, #0
10004918:	9b01      	ldr	r3, [sp, #4]
1000491a:	4318      	orrs	r0, r3
1000491c:	d100      	bne.n	10004920 <__aeabi_dsub+0x254>
1000491e:	e707      	b.n	10004730 <__aeabi_dsub+0x64>
10004920:	2301      	movs	r3, #1
10004922:	425b      	negs	r3, r3
10004924:	469c      	mov	ip, r3
10004926:	44e2      	add	sl, ip
10004928:	4653      	mov	r3, sl
1000492a:	2b00      	cmp	r3, #0
1000492c:	d000      	beq.n	10004930 <__aeabi_dsub+0x264>
1000492e:	e102      	b.n	10004b36 <__aeabi_dsub+0x46a>
10004930:	9b01      	ldr	r3, [sp, #4]
10004932:	19d2      	adds	r2, r2, r7
10004934:	1959      	adds	r1, r3, r5
10004936:	42a9      	cmp	r1, r5
10004938:	419b      	sbcs	r3, r3
1000493a:	425b      	negs	r3, r3
1000493c:	18d7      	adds	r7, r2, r3
1000493e:	1c0d      	adds	r5, r1, #0
10004940:	e7bc      	b.n	100048bc <__aeabi_dsub+0x1f0>
10004942:	4663      	mov	r3, ip
10004944:	4303      	orrs	r3, r0
10004946:	d100      	bne.n	1000494a <__aeabi_dsub+0x27e>
10004948:	e128      	b.n	10004b9c <__aeabi_dsub+0x4d0>
1000494a:	1c07      	adds	r7, r0, #0
1000494c:	4665      	mov	r5, ip
1000494e:	076b      	lsls	r3, r5, #29
10004950:	d000      	beq.n	10004954 <__aeabi_dsub+0x288>
10004952:	e6f0      	b.n	10004736 <__aeabi_dsub+0x6a>
10004954:	2601      	movs	r6, #1
10004956:	4643      	mov	r3, r8
10004958:	401e      	ands	r6, r3
1000495a:	e784      	b.n	10004866 <__aeabi_dsub+0x19a>
1000495c:	2e00      	cmp	r6, #0
1000495e:	d000      	beq.n	10004962 <__aeabi_dsub+0x296>
10004960:	e081      	b.n	10004a66 <__aeabi_dsub+0x39a>
10004962:	1c60      	adds	r0, r4, #1
10004964:	0540      	lsls	r0, r0, #21
10004966:	0d40      	lsrs	r0, r0, #21
10004968:	2801      	cmp	r0, #1
1000496a:	dc00      	bgt.n	1000496e <__aeabi_dsub+0x2a2>
1000496c:	e107      	b.n	10004b7e <__aeabi_dsub+0x4b2>
1000496e:	9901      	ldr	r1, [sp, #4]
10004970:	1a68      	subs	r0, r5, r1
10004972:	4684      	mov	ip, r0
10004974:	4565      	cmp	r5, ip
10004976:	41b6      	sbcs	r6, r6
10004978:	1ab8      	subs	r0, r7, r2
1000497a:	4276      	negs	r6, r6
1000497c:	1b86      	subs	r6, r0, r6
1000497e:	0230      	lsls	r0, r6, #8
10004980:	d400      	bmi.n	10004984 <__aeabi_dsub+0x2b8>
10004982:	e0a1      	b.n	10004ac8 <__aeabi_dsub+0x3fc>
10004984:	468c      	mov	ip, r1
10004986:	1b4d      	subs	r5, r1, r5
10004988:	45ac      	cmp	ip, r5
1000498a:	4189      	sbcs	r1, r1
1000498c:	1bd2      	subs	r2, r2, r7
1000498e:	4249      	negs	r1, r1
10004990:	1a56      	subs	r6, r2, r1
10004992:	4698      	mov	r8, r3
10004994:	e734      	b.n	10004800 <__aeabi_dsub+0x134>
10004996:	2200      	movs	r2, #0
10004998:	2500      	movs	r5, #0
1000499a:	e6ef      	b.n	1000477c <__aeabi_dsub+0xb0>
1000499c:	1c28      	adds	r0, r5, #0
1000499e:	f000 fab5 	bl	10004f0c <__clzsi2>
100049a2:	3020      	adds	r0, #32
100049a4:	1c03      	adds	r3, r0, #0
100049a6:	3b08      	subs	r3, #8
100049a8:	2b1f      	cmp	r3, #31
100049aa:	dc00      	bgt.n	100049ae <__aeabi_dsub+0x2e2>
100049ac:	e733      	b.n	10004816 <__aeabi_dsub+0x14a>
100049ae:	1c02      	adds	r2, r0, #0
100049b0:	3a28      	subs	r2, #40	; 0x28
100049b2:	4095      	lsls	r5, r2
100049b4:	1c2a      	adds	r2, r5, #0
100049b6:	2500      	movs	r5, #0
100049b8:	429c      	cmp	r4, r3
100049ba:	dc00      	bgt.n	100049be <__aeabi_dsub+0x2f2>
100049bc:	e736      	b.n	1000482c <__aeabi_dsub+0x160>
100049be:	4f1f      	ldr	r7, [pc, #124]	; (10004a3c <__aeabi_dsub+0x370>)
100049c0:	1ae4      	subs	r4, r4, r3
100049c2:	4017      	ands	r7, r2
100049c4:	e6b4      	b.n	10004730 <__aeabi_dsub+0x64>
100049c6:	9b01      	ldr	r3, [sp, #4]
100049c8:	431a      	orrs	r2, r3
100049ca:	1e51      	subs	r1, r2, #1
100049cc:	418a      	sbcs	r2, r1
100049ce:	b2d3      	uxtb	r3, r2
100049d0:	2200      	movs	r2, #0
100049d2:	e709      	b.n	100047e8 <__aeabi_dsub+0x11c>
100049d4:	2b00      	cmp	r3, #0
100049d6:	d000      	beq.n	100049da <__aeabi_dsub+0x30e>
100049d8:	e101      	b.n	10004bde <__aeabi_dsub+0x512>
100049da:	1c60      	adds	r0, r4, #1
100049dc:	0543      	lsls	r3, r0, #21
100049de:	0d5b      	lsrs	r3, r3, #21
100049e0:	2b01      	cmp	r3, #1
100049e2:	dc00      	bgt.n	100049e6 <__aeabi_dsub+0x31a>
100049e4:	e0b0      	b.n	10004b48 <__aeabi_dsub+0x47c>
100049e6:	4b14      	ldr	r3, [pc, #80]	; (10004a38 <__aeabi_dsub+0x36c>)
100049e8:	4298      	cmp	r0, r3
100049ea:	d100      	bne.n	100049ee <__aeabi_dsub+0x322>
100049ec:	e11e      	b.n	10004c2c <__aeabi_dsub+0x560>
100049ee:	9b01      	ldr	r3, [sp, #4]
100049f0:	19d2      	adds	r2, r2, r7
100049f2:	1959      	adds	r1, r3, r5
100049f4:	42a9      	cmp	r1, r5
100049f6:	419b      	sbcs	r3, r3
100049f8:	425b      	negs	r3, r3
100049fa:	18d2      	adds	r2, r2, r3
100049fc:	0849      	lsrs	r1, r1, #1
100049fe:	07d5      	lsls	r5, r2, #31
10004a00:	430d      	orrs	r5, r1
10004a02:	0857      	lsrs	r7, r2, #1
10004a04:	1c04      	adds	r4, r0, #0
10004a06:	e693      	b.n	10004730 <__aeabi_dsub+0x64>
10004a08:	4b0b      	ldr	r3, [pc, #44]	; (10004a38 <__aeabi_dsub+0x36c>)
10004a0a:	429c      	cmp	r4, r3
10004a0c:	d000      	beq.n	10004a10 <__aeabi_dsub+0x344>
10004a0e:	e6d3      	b.n	100047b8 <__aeabi_dsub+0xec>
10004a10:	e68e      	b.n	10004730 <__aeabi_dsub+0x64>
10004a12:	1c21      	adds	r1, r4, #0
10004a14:	1c13      	adds	r3, r2, #0
10004a16:	391f      	subs	r1, #31
10004a18:	40cb      	lsrs	r3, r1
10004a1a:	1c19      	adds	r1, r3, #0
10004a1c:	2f20      	cmp	r7, #32
10004a1e:	d100      	bne.n	10004a22 <__aeabi_dsub+0x356>
10004a20:	e08e      	b.n	10004b40 <__aeabi_dsub+0x474>
10004a22:	233f      	movs	r3, #63	; 0x3f
10004a24:	1b1c      	subs	r4, r3, r4
10004a26:	40a2      	lsls	r2, r4
10004a28:	4315      	orrs	r5, r2
10004a2a:	1e6a      	subs	r2, r5, #1
10004a2c:	4195      	sbcs	r5, r2
10004a2e:	2700      	movs	r7, #0
10004a30:	430d      	orrs	r5, r1
10004a32:	2400      	movs	r4, #0
10004a34:	e78b      	b.n	1000494e <__aeabi_dsub+0x282>
10004a36:	46c0      	nop			; (mov r8, r8)
10004a38:	000007ff 	.word	0x000007ff
10004a3c:	ff7fffff 	.word	0xff7fffff
10004a40:	800fffff 	.word	0x800fffff
10004a44:	1c33      	adds	r3, r6, #0
10004a46:	1c10      	adds	r0, r2, #0
10004a48:	3b20      	subs	r3, #32
10004a4a:	40d8      	lsrs	r0, r3
10004a4c:	2e20      	cmp	r6, #32
10004a4e:	d079      	beq.n	10004b44 <__aeabi_dsub+0x478>
10004a50:	2340      	movs	r3, #64	; 0x40
10004a52:	1b9b      	subs	r3, r3, r6
10004a54:	409a      	lsls	r2, r3
10004a56:	1c13      	adds	r3, r2, #0
10004a58:	9a01      	ldr	r2, [sp, #4]
10004a5a:	4313      	orrs	r3, r2
10004a5c:	1e59      	subs	r1, r3, #1
10004a5e:	418b      	sbcs	r3, r1
10004a60:	2200      	movs	r2, #0
10004a62:	4303      	orrs	r3, r0
10004a64:	e6c0      	b.n	100047e8 <__aeabi_dsub+0x11c>
10004a66:	2c00      	cmp	r4, #0
10004a68:	d053      	beq.n	10004b12 <__aeabi_dsub+0x446>
10004a6a:	4cc7      	ldr	r4, [pc, #796]	; (10004d88 <__aeabi_dsub+0x6bc>)
10004a6c:	42a0      	cmp	r0, r4
10004a6e:	d100      	bne.n	10004a72 <__aeabi_dsub+0x3a6>
10004a70:	e0b0      	b.n	10004bd4 <__aeabi_dsub+0x508>
10004a72:	2480      	movs	r4, #128	; 0x80
10004a74:	4271      	negs	r1, r6
10004a76:	4689      	mov	r9, r1
10004a78:	0424      	lsls	r4, r4, #16
10004a7a:	4327      	orrs	r7, r4
10004a7c:	4649      	mov	r1, r9
10004a7e:	2938      	cmp	r1, #56	; 0x38
10004a80:	dd00      	ble.n	10004a84 <__aeabi_dsub+0x3b8>
10004a82:	e0cd      	b.n	10004c20 <__aeabi_dsub+0x554>
10004a84:	291f      	cmp	r1, #31
10004a86:	dd00      	ble.n	10004a8a <__aeabi_dsub+0x3be>
10004a88:	e159      	b.n	10004d3e <__aeabi_dsub+0x672>
10004a8a:	2420      	movs	r4, #32
10004a8c:	1c3e      	adds	r6, r7, #0
10004a8e:	1a61      	subs	r1, r4, r1
10004a90:	408e      	lsls	r6, r1
10004a92:	468a      	mov	sl, r1
10004a94:	46b0      	mov	r8, r6
10004a96:	4649      	mov	r1, r9
10004a98:	1c2e      	adds	r6, r5, #0
10004a9a:	40ce      	lsrs	r6, r1
10004a9c:	4651      	mov	r1, sl
10004a9e:	46b4      	mov	ip, r6
10004aa0:	408d      	lsls	r5, r1
10004aa2:	4664      	mov	r4, ip
10004aa4:	4646      	mov	r6, r8
10004aa6:	4649      	mov	r1, r9
10004aa8:	4326      	orrs	r6, r4
10004aaa:	1e6c      	subs	r4, r5, #1
10004aac:	41a5      	sbcs	r5, r4
10004aae:	40cf      	lsrs	r7, r1
10004ab0:	4335      	orrs	r5, r6
10004ab2:	9901      	ldr	r1, [sp, #4]
10004ab4:	1bd7      	subs	r7, r2, r7
10004ab6:	468c      	mov	ip, r1
10004ab8:	1b4d      	subs	r5, r1, r5
10004aba:	45ac      	cmp	ip, r5
10004abc:	4192      	sbcs	r2, r2
10004abe:	4252      	negs	r2, r2
10004ac0:	1abf      	subs	r7, r7, r2
10004ac2:	1c04      	adds	r4, r0, #0
10004ac4:	4698      	mov	r8, r3
10004ac6:	e696      	b.n	100047f6 <__aeabi_dsub+0x12a>
10004ac8:	4663      	mov	r3, ip
10004aca:	4665      	mov	r5, ip
10004acc:	4333      	orrs	r3, r6
10004ace:	d000      	beq.n	10004ad2 <__aeabi_dsub+0x406>
10004ad0:	e696      	b.n	10004800 <__aeabi_dsub+0x134>
10004ad2:	2600      	movs	r6, #0
10004ad4:	2700      	movs	r7, #0
10004ad6:	2400      	movs	r4, #0
10004ad8:	2500      	movs	r5, #0
10004ada:	e6c4      	b.n	10004866 <__aeabi_dsub+0x19a>
10004adc:	2b1f      	cmp	r3, #31
10004ade:	dc61      	bgt.n	10004ba4 <__aeabi_dsub+0x4d8>
10004ae0:	2020      	movs	r0, #32
10004ae2:	1ac3      	subs	r3, r0, r3
10004ae4:	469b      	mov	fp, r3
10004ae6:	1c13      	adds	r3, r2, #0
10004ae8:	4659      	mov	r1, fp
10004aea:	408b      	lsls	r3, r1
10004aec:	4651      	mov	r1, sl
10004aee:	4699      	mov	r9, r3
10004af0:	9b01      	ldr	r3, [sp, #4]
10004af2:	40cb      	lsrs	r3, r1
10004af4:	469c      	mov	ip, r3
10004af6:	464b      	mov	r3, r9
10004af8:	4660      	mov	r0, ip
10004afa:	4303      	orrs	r3, r0
10004afc:	469c      	mov	ip, r3
10004afe:	465b      	mov	r3, fp
10004b00:	9901      	ldr	r1, [sp, #4]
10004b02:	4099      	lsls	r1, r3
10004b04:	4663      	mov	r3, ip
10004b06:	1e48      	subs	r0, r1, #1
10004b08:	4181      	sbcs	r1, r0
10004b0a:	4319      	orrs	r1, r3
10004b0c:	4653      	mov	r3, sl
10004b0e:	40da      	lsrs	r2, r3
10004b10:	e6cd      	b.n	100048ae <__aeabi_dsub+0x1e2>
10004b12:	1c3c      	adds	r4, r7, #0
10004b14:	432c      	orrs	r4, r5
10004b16:	d05d      	beq.n	10004bd4 <__aeabi_dsub+0x508>
10004b18:	43f1      	mvns	r1, r6
10004b1a:	4689      	mov	r9, r1
10004b1c:	2900      	cmp	r1, #0
10004b1e:	d155      	bne.n	10004bcc <__aeabi_dsub+0x500>
10004b20:	9901      	ldr	r1, [sp, #4]
10004b22:	1bd2      	subs	r2, r2, r7
10004b24:	468c      	mov	ip, r1
10004b26:	1b4d      	subs	r5, r1, r5
10004b28:	45ac      	cmp	ip, r5
10004b2a:	4189      	sbcs	r1, r1
10004b2c:	4249      	negs	r1, r1
10004b2e:	1a57      	subs	r7, r2, r1
10004b30:	1c04      	adds	r4, r0, #0
10004b32:	4698      	mov	r8, r3
10004b34:	e65f      	b.n	100047f6 <__aeabi_dsub+0x12a>
10004b36:	4894      	ldr	r0, [pc, #592]	; (10004d88 <__aeabi_dsub+0x6bc>)
10004b38:	4284      	cmp	r4, r0
10004b3a:	d000      	beq.n	10004b3e <__aeabi_dsub+0x472>
10004b3c:	e6ad      	b.n	1000489a <__aeabi_dsub+0x1ce>
10004b3e:	e5f7      	b.n	10004730 <__aeabi_dsub+0x64>
10004b40:	2200      	movs	r2, #0
10004b42:	e771      	b.n	10004a28 <__aeabi_dsub+0x35c>
10004b44:	2300      	movs	r3, #0
10004b46:	e787      	b.n	10004a58 <__aeabi_dsub+0x38c>
10004b48:	1c3b      	adds	r3, r7, #0
10004b4a:	432b      	orrs	r3, r5
10004b4c:	2c00      	cmp	r4, #0
10004b4e:	d000      	beq.n	10004b52 <__aeabi_dsub+0x486>
10004b50:	e0da      	b.n	10004d08 <__aeabi_dsub+0x63c>
10004b52:	2b00      	cmp	r3, #0
10004b54:	d100      	bne.n	10004b58 <__aeabi_dsub+0x48c>
10004b56:	e113      	b.n	10004d80 <__aeabi_dsub+0x6b4>
10004b58:	1c13      	adds	r3, r2, #0
10004b5a:	9901      	ldr	r1, [sp, #4]
10004b5c:	430b      	orrs	r3, r1
10004b5e:	d100      	bne.n	10004b62 <__aeabi_dsub+0x496>
10004b60:	e5e6      	b.n	10004730 <__aeabi_dsub+0x64>
10004b62:	1949      	adds	r1, r1, r5
10004b64:	42a9      	cmp	r1, r5
10004b66:	419b      	sbcs	r3, r3
10004b68:	19d2      	adds	r2, r2, r7
10004b6a:	425b      	negs	r3, r3
10004b6c:	18d7      	adds	r7, r2, r3
10004b6e:	023b      	lsls	r3, r7, #8
10004b70:	d400      	bmi.n	10004b74 <__aeabi_dsub+0x4a8>
10004b72:	e121      	b.n	10004db8 <__aeabi_dsub+0x6ec>
10004b74:	4b85      	ldr	r3, [pc, #532]	; (10004d8c <__aeabi_dsub+0x6c0>)
10004b76:	1c0d      	adds	r5, r1, #0
10004b78:	401f      	ands	r7, r3
10004b7a:	1c04      	adds	r4, r0, #0
10004b7c:	e5d8      	b.n	10004730 <__aeabi_dsub+0x64>
10004b7e:	1c38      	adds	r0, r7, #0
10004b80:	4328      	orrs	r0, r5
10004b82:	2c00      	cmp	r4, #0
10004b84:	d140      	bne.n	10004c08 <__aeabi_dsub+0x53c>
10004b86:	2800      	cmp	r0, #0
10004b88:	d000      	beq.n	10004b8c <__aeabi_dsub+0x4c0>
10004b8a:	e083      	b.n	10004c94 <__aeabi_dsub+0x5c8>
10004b8c:	1c10      	adds	r0, r2, #0
10004b8e:	9901      	ldr	r1, [sp, #4]
10004b90:	4308      	orrs	r0, r1
10004b92:	d003      	beq.n	10004b9c <__aeabi_dsub+0x4d0>
10004b94:	1c17      	adds	r7, r2, #0
10004b96:	1c0d      	adds	r5, r1, #0
10004b98:	4698      	mov	r8, r3
10004b9a:	e5c9      	b.n	10004730 <__aeabi_dsub+0x64>
10004b9c:	2600      	movs	r6, #0
10004b9e:	2700      	movs	r7, #0
10004ba0:	2500      	movs	r5, #0
10004ba2:	e660      	b.n	10004866 <__aeabi_dsub+0x19a>
10004ba4:	4650      	mov	r0, sl
10004ba6:	1c13      	adds	r3, r2, #0
10004ba8:	3820      	subs	r0, #32
10004baa:	40c3      	lsrs	r3, r0
10004bac:	1c18      	adds	r0, r3, #0
10004bae:	4653      	mov	r3, sl
10004bb0:	2b20      	cmp	r3, #32
10004bb2:	d100      	bne.n	10004bb6 <__aeabi_dsub+0x4ea>
10004bb4:	e0c1      	b.n	10004d3a <__aeabi_dsub+0x66e>
10004bb6:	2340      	movs	r3, #64	; 0x40
10004bb8:	4651      	mov	r1, sl
10004bba:	1a5b      	subs	r3, r3, r1
10004bbc:	409a      	lsls	r2, r3
10004bbe:	9901      	ldr	r1, [sp, #4]
10004bc0:	4311      	orrs	r1, r2
10004bc2:	1e4a      	subs	r2, r1, #1
10004bc4:	4191      	sbcs	r1, r2
10004bc6:	2200      	movs	r2, #0
10004bc8:	4301      	orrs	r1, r0
10004bca:	e670      	b.n	100048ae <__aeabi_dsub+0x1e2>
10004bcc:	4c6e      	ldr	r4, [pc, #440]	; (10004d88 <__aeabi_dsub+0x6bc>)
10004bce:	42a0      	cmp	r0, r4
10004bd0:	d000      	beq.n	10004bd4 <__aeabi_dsub+0x508>
10004bd2:	e753      	b.n	10004a7c <__aeabi_dsub+0x3b0>
10004bd4:	1c17      	adds	r7, r2, #0
10004bd6:	9d01      	ldr	r5, [sp, #4]
10004bd8:	1c04      	adds	r4, r0, #0
10004bda:	4698      	mov	r8, r3
10004bdc:	e5a8      	b.n	10004730 <__aeabi_dsub+0x64>
10004bde:	2c00      	cmp	r4, #0
10004be0:	d128      	bne.n	10004c34 <__aeabi_dsub+0x568>
10004be2:	1c3c      	adds	r4, r7, #0
10004be4:	432c      	orrs	r4, r5
10004be6:	d100      	bne.n	10004bea <__aeabi_dsub+0x51e>
10004be8:	e08a      	b.n	10004d00 <__aeabi_dsub+0x634>
10004bea:	43db      	mvns	r3, r3
10004bec:	469a      	mov	sl, r3
10004bee:	2b00      	cmp	r3, #0
10004bf0:	d000      	beq.n	10004bf4 <__aeabi_dsub+0x528>
10004bf2:	e082      	b.n	10004cfa <__aeabi_dsub+0x62e>
10004bf4:	9b01      	ldr	r3, [sp, #4]
10004bf6:	19d2      	adds	r2, r2, r7
10004bf8:	469c      	mov	ip, r3
10004bfa:	4465      	add	r5, ip
10004bfc:	429d      	cmp	r5, r3
10004bfe:	4189      	sbcs	r1, r1
10004c00:	4249      	negs	r1, r1
10004c02:	1857      	adds	r7, r2, r1
10004c04:	1c04      	adds	r4, r0, #0
10004c06:	e659      	b.n	100048bc <__aeabi_dsub+0x1f0>
10004c08:	2800      	cmp	r0, #0
10004c0a:	d15b      	bne.n	10004cc4 <__aeabi_dsub+0x5f8>
10004c0c:	1c10      	adds	r0, r2, #0
10004c0e:	9901      	ldr	r1, [sp, #4]
10004c10:	4308      	orrs	r0, r1
10004c12:	d100      	bne.n	10004c16 <__aeabi_dsub+0x54a>
10004c14:	e0a4      	b.n	10004d60 <__aeabi_dsub+0x694>
10004c16:	1c17      	adds	r7, r2, #0
10004c18:	1c0d      	adds	r5, r1, #0
10004c1a:	4698      	mov	r8, r3
10004c1c:	4c5a      	ldr	r4, [pc, #360]	; (10004d88 <__aeabi_dsub+0x6bc>)
10004c1e:	e587      	b.n	10004730 <__aeabi_dsub+0x64>
10004c20:	433d      	orrs	r5, r7
10004c22:	1e6f      	subs	r7, r5, #1
10004c24:	41bd      	sbcs	r5, r7
10004c26:	2700      	movs	r7, #0
10004c28:	b2ed      	uxtb	r5, r5
10004c2a:	e742      	b.n	10004ab2 <__aeabi_dsub+0x3e6>
10004c2c:	1c04      	adds	r4, r0, #0
10004c2e:	2700      	movs	r7, #0
10004c30:	2500      	movs	r5, #0
10004c32:	e618      	b.n	10004866 <__aeabi_dsub+0x19a>
10004c34:	4c54      	ldr	r4, [pc, #336]	; (10004d88 <__aeabi_dsub+0x6bc>)
10004c36:	42a0      	cmp	r0, r4
10004c38:	d062      	beq.n	10004d00 <__aeabi_dsub+0x634>
10004c3a:	4653      	mov	r3, sl
10004c3c:	2480      	movs	r4, #128	; 0x80
10004c3e:	425b      	negs	r3, r3
10004c40:	469a      	mov	sl, r3
10004c42:	0424      	lsls	r4, r4, #16
10004c44:	4327      	orrs	r7, r4
10004c46:	4653      	mov	r3, sl
10004c48:	2b38      	cmp	r3, #56	; 0x38
10004c4a:	dd00      	ble.n	10004c4e <__aeabi_dsub+0x582>
10004c4c:	e08e      	b.n	10004d6c <__aeabi_dsub+0x6a0>
10004c4e:	2b1f      	cmp	r3, #31
10004c50:	dd00      	ble.n	10004c54 <__aeabi_dsub+0x588>
10004c52:	e09d      	b.n	10004d90 <__aeabi_dsub+0x6c4>
10004c54:	2420      	movs	r4, #32
10004c56:	1ae3      	subs	r3, r4, r3
10004c58:	469b      	mov	fp, r3
10004c5a:	1c3b      	adds	r3, r7, #0
10004c5c:	4659      	mov	r1, fp
10004c5e:	408b      	lsls	r3, r1
10004c60:	4651      	mov	r1, sl
10004c62:	4699      	mov	r9, r3
10004c64:	1c2b      	adds	r3, r5, #0
10004c66:	40cb      	lsrs	r3, r1
10004c68:	469c      	mov	ip, r3
10004c6a:	464b      	mov	r3, r9
10004c6c:	4664      	mov	r4, ip
10004c6e:	4323      	orrs	r3, r4
10004c70:	469c      	mov	ip, r3
10004c72:	465b      	mov	r3, fp
10004c74:	409d      	lsls	r5, r3
10004c76:	4663      	mov	r3, ip
10004c78:	1e6c      	subs	r4, r5, #1
10004c7a:	41a5      	sbcs	r5, r4
10004c7c:	40cf      	lsrs	r7, r1
10004c7e:	431d      	orrs	r5, r3
10004c80:	9b01      	ldr	r3, [sp, #4]
10004c82:	18bf      	adds	r7, r7, r2
10004c84:	469c      	mov	ip, r3
10004c86:	4465      	add	r5, ip
10004c88:	429d      	cmp	r5, r3
10004c8a:	4192      	sbcs	r2, r2
10004c8c:	4252      	negs	r2, r2
10004c8e:	18bf      	adds	r7, r7, r2
10004c90:	1c04      	adds	r4, r0, #0
10004c92:	e613      	b.n	100048bc <__aeabi_dsub+0x1f0>
10004c94:	1c10      	adds	r0, r2, #0
10004c96:	9901      	ldr	r1, [sp, #4]
10004c98:	4308      	orrs	r0, r1
10004c9a:	d100      	bne.n	10004c9e <__aeabi_dsub+0x5d2>
10004c9c:	e548      	b.n	10004730 <__aeabi_dsub+0x64>
10004c9e:	1a68      	subs	r0, r5, r1
10004ca0:	4684      	mov	ip, r0
10004ca2:	4285      	cmp	r5, r0
10004ca4:	4180      	sbcs	r0, r0
10004ca6:	1abe      	subs	r6, r7, r2
10004ca8:	4240      	negs	r0, r0
10004caa:	1a30      	subs	r0, r6, r0
10004cac:	0206      	lsls	r6, r0, #8
10004cae:	d400      	bmi.n	10004cb2 <__aeabi_dsub+0x5e6>
10004cb0:	e647      	b.n	10004942 <__aeabi_dsub+0x276>
10004cb2:	468c      	mov	ip, r1
10004cb4:	1b4d      	subs	r5, r1, r5
10004cb6:	45ac      	cmp	ip, r5
10004cb8:	4189      	sbcs	r1, r1
10004cba:	1bd2      	subs	r2, r2, r7
10004cbc:	4249      	negs	r1, r1
10004cbe:	1a57      	subs	r7, r2, r1
10004cc0:	4698      	mov	r8, r3
10004cc2:	e535      	b.n	10004730 <__aeabi_dsub+0x64>
10004cc4:	1c10      	adds	r0, r2, #0
10004cc6:	9901      	ldr	r1, [sp, #4]
10004cc8:	4308      	orrs	r0, r1
10004cca:	d034      	beq.n	10004d36 <__aeabi_dsub+0x66a>
10004ccc:	2480      	movs	r4, #128	; 0x80
10004cce:	0778      	lsls	r0, r7, #29
10004cd0:	08ed      	lsrs	r5, r5, #3
10004cd2:	08ff      	lsrs	r7, r7, #3
10004cd4:	0324      	lsls	r4, r4, #12
10004cd6:	4328      	orrs	r0, r5
10004cd8:	4227      	tst	r7, r4
10004cda:	d008      	beq.n	10004cee <__aeabi_dsub+0x622>
10004cdc:	08d6      	lsrs	r6, r2, #3
10004cde:	4226      	tst	r6, r4
10004ce0:	d105      	bne.n	10004cee <__aeabi_dsub+0x622>
10004ce2:	08c9      	lsrs	r1, r1, #3
10004ce4:	0752      	lsls	r2, r2, #29
10004ce6:	430a      	orrs	r2, r1
10004ce8:	1c10      	adds	r0, r2, #0
10004cea:	1c37      	adds	r7, r6, #0
10004cec:	4698      	mov	r8, r3
10004cee:	00ff      	lsls	r7, r7, #3
10004cf0:	0f42      	lsrs	r2, r0, #29
10004cf2:	4317      	orrs	r7, r2
10004cf4:	00c5      	lsls	r5, r0, #3
10004cf6:	4c24      	ldr	r4, [pc, #144]	; (10004d88 <__aeabi_dsub+0x6bc>)
10004cf8:	e51a      	b.n	10004730 <__aeabi_dsub+0x64>
10004cfa:	4c23      	ldr	r4, [pc, #140]	; (10004d88 <__aeabi_dsub+0x6bc>)
10004cfc:	42a0      	cmp	r0, r4
10004cfe:	d1a2      	bne.n	10004c46 <__aeabi_dsub+0x57a>
10004d00:	1c17      	adds	r7, r2, #0
10004d02:	9d01      	ldr	r5, [sp, #4]
10004d04:	1c04      	adds	r4, r0, #0
10004d06:	e513      	b.n	10004730 <__aeabi_dsub+0x64>
10004d08:	2b00      	cmp	r3, #0
10004d0a:	d035      	beq.n	10004d78 <__aeabi_dsub+0x6ac>
10004d0c:	1c13      	adds	r3, r2, #0
10004d0e:	9901      	ldr	r1, [sp, #4]
10004d10:	430b      	orrs	r3, r1
10004d12:	d010      	beq.n	10004d36 <__aeabi_dsub+0x66a>
10004d14:	2480      	movs	r4, #128	; 0x80
10004d16:	0778      	lsls	r0, r7, #29
10004d18:	08ed      	lsrs	r5, r5, #3
10004d1a:	08ff      	lsrs	r7, r7, #3
10004d1c:	0324      	lsls	r4, r4, #12
10004d1e:	4328      	orrs	r0, r5
10004d20:	4227      	tst	r7, r4
10004d22:	d0e4      	beq.n	10004cee <__aeabi_dsub+0x622>
10004d24:	08d3      	lsrs	r3, r2, #3
10004d26:	4223      	tst	r3, r4
10004d28:	d1e1      	bne.n	10004cee <__aeabi_dsub+0x622>
10004d2a:	08c9      	lsrs	r1, r1, #3
10004d2c:	0752      	lsls	r2, r2, #29
10004d2e:	430a      	orrs	r2, r1
10004d30:	1c10      	adds	r0, r2, #0
10004d32:	1c1f      	adds	r7, r3, #0
10004d34:	e7db      	b.n	10004cee <__aeabi_dsub+0x622>
10004d36:	4c14      	ldr	r4, [pc, #80]	; (10004d88 <__aeabi_dsub+0x6bc>)
10004d38:	e4fa      	b.n	10004730 <__aeabi_dsub+0x64>
10004d3a:	2200      	movs	r2, #0
10004d3c:	e73f      	b.n	10004bbe <__aeabi_dsub+0x4f2>
10004d3e:	464c      	mov	r4, r9
10004d40:	1c3e      	adds	r6, r7, #0
10004d42:	3c20      	subs	r4, #32
10004d44:	40e6      	lsrs	r6, r4
10004d46:	4649      	mov	r1, r9
10004d48:	1c34      	adds	r4, r6, #0
10004d4a:	2920      	cmp	r1, #32
10004d4c:	d032      	beq.n	10004db4 <__aeabi_dsub+0x6e8>
10004d4e:	2640      	movs	r6, #64	; 0x40
10004d50:	1a76      	subs	r6, r6, r1
10004d52:	40b7      	lsls	r7, r6
10004d54:	433d      	orrs	r5, r7
10004d56:	1e6f      	subs	r7, r5, #1
10004d58:	41bd      	sbcs	r5, r7
10004d5a:	2700      	movs	r7, #0
10004d5c:	4325      	orrs	r5, r4
10004d5e:	e6a8      	b.n	10004ab2 <__aeabi_dsub+0x3e6>
10004d60:	2780      	movs	r7, #128	; 0x80
10004d62:	2600      	movs	r6, #0
10004d64:	03ff      	lsls	r7, r7, #15
10004d66:	4c08      	ldr	r4, [pc, #32]	; (10004d88 <__aeabi_dsub+0x6bc>)
10004d68:	2500      	movs	r5, #0
10004d6a:	e57c      	b.n	10004866 <__aeabi_dsub+0x19a>
10004d6c:	433d      	orrs	r5, r7
10004d6e:	1e6f      	subs	r7, r5, #1
10004d70:	41bd      	sbcs	r5, r7
10004d72:	2700      	movs	r7, #0
10004d74:	b2ed      	uxtb	r5, r5
10004d76:	e783      	b.n	10004c80 <__aeabi_dsub+0x5b4>
10004d78:	1c17      	adds	r7, r2, #0
10004d7a:	9d01      	ldr	r5, [sp, #4]
10004d7c:	4c02      	ldr	r4, [pc, #8]	; (10004d88 <__aeabi_dsub+0x6bc>)
10004d7e:	e4d7      	b.n	10004730 <__aeabi_dsub+0x64>
10004d80:	1c17      	adds	r7, r2, #0
10004d82:	9d01      	ldr	r5, [sp, #4]
10004d84:	e4d4      	b.n	10004730 <__aeabi_dsub+0x64>
10004d86:	46c0      	nop			; (mov r8, r8)
10004d88:	000007ff 	.word	0x000007ff
10004d8c:	ff7fffff 	.word	0xff7fffff
10004d90:	4654      	mov	r4, sl
10004d92:	1c3b      	adds	r3, r7, #0
10004d94:	3c20      	subs	r4, #32
10004d96:	40e3      	lsrs	r3, r4
10004d98:	1c1c      	adds	r4, r3, #0
10004d9a:	4653      	mov	r3, sl
10004d9c:	2b20      	cmp	r3, #32
10004d9e:	d00d      	beq.n	10004dbc <__aeabi_dsub+0x6f0>
10004da0:	2340      	movs	r3, #64	; 0x40
10004da2:	4651      	mov	r1, sl
10004da4:	1a5b      	subs	r3, r3, r1
10004da6:	409f      	lsls	r7, r3
10004da8:	433d      	orrs	r5, r7
10004daa:	1e6f      	subs	r7, r5, #1
10004dac:	41bd      	sbcs	r5, r7
10004dae:	2700      	movs	r7, #0
10004db0:	4325      	orrs	r5, r4
10004db2:	e765      	b.n	10004c80 <__aeabi_dsub+0x5b4>
10004db4:	2700      	movs	r7, #0
10004db6:	e7cd      	b.n	10004d54 <__aeabi_dsub+0x688>
10004db8:	1c0d      	adds	r5, r1, #0
10004dba:	e5c8      	b.n	1000494e <__aeabi_dsub+0x282>
10004dbc:	2700      	movs	r7, #0
10004dbe:	e7f3      	b.n	10004da8 <__aeabi_dsub+0x6dc>

10004dc0 <__aeabi_d2iz>:
10004dc0:	030b      	lsls	r3, r1, #12
10004dc2:	b530      	push	{r4, r5, lr}
10004dc4:	4c13      	ldr	r4, [pc, #76]	; (10004e14 <__aeabi_d2iz+0x54>)
10004dc6:	0b1a      	lsrs	r2, r3, #12
10004dc8:	004b      	lsls	r3, r1, #1
10004dca:	1c05      	adds	r5, r0, #0
10004dcc:	0d5b      	lsrs	r3, r3, #21
10004dce:	0fc9      	lsrs	r1, r1, #31
10004dd0:	2000      	movs	r0, #0
10004dd2:	42a3      	cmp	r3, r4
10004dd4:	dd10      	ble.n	10004df8 <__aeabi_d2iz+0x38>
10004dd6:	4810      	ldr	r0, [pc, #64]	; (10004e18 <__aeabi_d2iz+0x58>)
10004dd8:	4283      	cmp	r3, r0
10004dda:	dc0e      	bgt.n	10004dfa <__aeabi_d2iz+0x3a>
10004ddc:	2080      	movs	r0, #128	; 0x80
10004dde:	4c0f      	ldr	r4, [pc, #60]	; (10004e1c <__aeabi_d2iz+0x5c>)
10004de0:	0340      	lsls	r0, r0, #13
10004de2:	4302      	orrs	r2, r0
10004de4:	1ae4      	subs	r4, r4, r3
10004de6:	2c1f      	cmp	r4, #31
10004de8:	dd0a      	ble.n	10004e00 <__aeabi_d2iz+0x40>
10004dea:	480d      	ldr	r0, [pc, #52]	; (10004e20 <__aeabi_d2iz+0x60>)
10004dec:	1ac3      	subs	r3, r0, r3
10004dee:	40da      	lsrs	r2, r3
10004df0:	1c13      	adds	r3, r2, #0
10004df2:	4248      	negs	r0, r1
10004df4:	4043      	eors	r3, r0
10004df6:	1858      	adds	r0, r3, r1
10004df8:	bd30      	pop	{r4, r5, pc}
10004dfa:	4b0a      	ldr	r3, [pc, #40]	; (10004e24 <__aeabi_d2iz+0x64>)
10004dfc:	18c8      	adds	r0, r1, r3
10004dfe:	e7fb      	b.n	10004df8 <__aeabi_d2iz+0x38>
10004e00:	1c28      	adds	r0, r5, #0
10004e02:	40e0      	lsrs	r0, r4
10004e04:	4c08      	ldr	r4, [pc, #32]	; (10004e28 <__aeabi_d2iz+0x68>)
10004e06:	46a4      	mov	ip, r4
10004e08:	4463      	add	r3, ip
10004e0a:	409a      	lsls	r2, r3
10004e0c:	1c13      	adds	r3, r2, #0
10004e0e:	4303      	orrs	r3, r0
10004e10:	e7ef      	b.n	10004df2 <__aeabi_d2iz+0x32>
10004e12:	46c0      	nop			; (mov r8, r8)
10004e14:	000003fe 	.word	0x000003fe
10004e18:	0000041d 	.word	0x0000041d
10004e1c:	00000433 	.word	0x00000433
10004e20:	00000413 	.word	0x00000413
10004e24:	7fffffff 	.word	0x7fffffff
10004e28:	fffffbed 	.word	0xfffffbed

10004e2c <__aeabi_ui2d>:
10004e2c:	b510      	push	{r4, lr}
10004e2e:	1e04      	subs	r4, r0, #0
10004e30:	d010      	beq.n	10004e54 <__aeabi_ui2d+0x28>
10004e32:	f000 f86b 	bl	10004f0c <__clzsi2>
10004e36:	4a14      	ldr	r2, [pc, #80]	; (10004e88 <__aeabi_ui2d+0x5c>)
10004e38:	1a12      	subs	r2, r2, r0
10004e3a:	280a      	cmp	r0, #10
10004e3c:	dc1a      	bgt.n	10004e74 <__aeabi_ui2d+0x48>
10004e3e:	230b      	movs	r3, #11
10004e40:	1c21      	adds	r1, r4, #0
10004e42:	1a1b      	subs	r3, r3, r0
10004e44:	40d9      	lsrs	r1, r3
10004e46:	3015      	adds	r0, #21
10004e48:	030b      	lsls	r3, r1, #12
10004e4a:	0552      	lsls	r2, r2, #21
10004e4c:	4084      	lsls	r4, r0
10004e4e:	0b1b      	lsrs	r3, r3, #12
10004e50:	0d52      	lsrs	r2, r2, #21
10004e52:	e001      	b.n	10004e58 <__aeabi_ui2d+0x2c>
10004e54:	2200      	movs	r2, #0
10004e56:	2300      	movs	r3, #0
10004e58:	2100      	movs	r1, #0
10004e5a:	031b      	lsls	r3, r3, #12
10004e5c:	1c20      	adds	r0, r4, #0
10004e5e:	0b1c      	lsrs	r4, r3, #12
10004e60:	0d0b      	lsrs	r3, r1, #20
10004e62:	051b      	lsls	r3, r3, #20
10004e64:	4323      	orrs	r3, r4
10004e66:	4c09      	ldr	r4, [pc, #36]	; (10004e8c <__aeabi_ui2d+0x60>)
10004e68:	0512      	lsls	r2, r2, #20
10004e6a:	4023      	ands	r3, r4
10004e6c:	4313      	orrs	r3, r2
10004e6e:	005b      	lsls	r3, r3, #1
10004e70:	0859      	lsrs	r1, r3, #1
10004e72:	bd10      	pop	{r4, pc}
10004e74:	1c03      	adds	r3, r0, #0
10004e76:	3b0b      	subs	r3, #11
10004e78:	409c      	lsls	r4, r3
10004e7a:	0552      	lsls	r2, r2, #21
10004e7c:	0323      	lsls	r3, r4, #12
10004e7e:	0b1b      	lsrs	r3, r3, #12
10004e80:	0d52      	lsrs	r2, r2, #21
10004e82:	2400      	movs	r4, #0
10004e84:	e7e8      	b.n	10004e58 <__aeabi_ui2d+0x2c>
10004e86:	46c0      	nop			; (mov r8, r8)
10004e88:	0000041e 	.word	0x0000041e
10004e8c:	800fffff 	.word	0x800fffff

10004e90 <__aeabi_cdrcmple>:
10004e90:	4684      	mov	ip, r0
10004e92:	1c10      	adds	r0, r2, #0
10004e94:	4662      	mov	r2, ip
10004e96:	468c      	mov	ip, r1
10004e98:	1c19      	adds	r1, r3, #0
10004e9a:	4663      	mov	r3, ip
10004e9c:	e000      	b.n	10004ea0 <__aeabi_cdcmpeq>
10004e9e:	46c0      	nop			; (mov r8, r8)

10004ea0 <__aeabi_cdcmpeq>:
10004ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10004ea2:	f000 f905 	bl	100050b0 <__ledf2>
10004ea6:	2800      	cmp	r0, #0
10004ea8:	d401      	bmi.n	10004eae <__aeabi_cdcmpeq+0xe>
10004eaa:	2100      	movs	r1, #0
10004eac:	42c8      	cmn	r0, r1
10004eae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10004eb0 <__aeabi_dcmpeq>:
10004eb0:	b510      	push	{r4, lr}
10004eb2:	f000 f849 	bl	10004f48 <__eqdf2>
10004eb6:	4240      	negs	r0, r0
10004eb8:	3001      	adds	r0, #1
10004eba:	bd10      	pop	{r4, pc}

10004ebc <__aeabi_dcmplt>:
10004ebc:	b510      	push	{r4, lr}
10004ebe:	f000 f8f7 	bl	100050b0 <__ledf2>
10004ec2:	2800      	cmp	r0, #0
10004ec4:	db01      	blt.n	10004eca <__aeabi_dcmplt+0xe>
10004ec6:	2000      	movs	r0, #0
10004ec8:	bd10      	pop	{r4, pc}
10004eca:	2001      	movs	r0, #1
10004ecc:	bd10      	pop	{r4, pc}
10004ece:	46c0      	nop			; (mov r8, r8)

10004ed0 <__aeabi_dcmple>:
10004ed0:	b510      	push	{r4, lr}
10004ed2:	f000 f8ed 	bl	100050b0 <__ledf2>
10004ed6:	2800      	cmp	r0, #0
10004ed8:	dd01      	ble.n	10004ede <__aeabi_dcmple+0xe>
10004eda:	2000      	movs	r0, #0
10004edc:	bd10      	pop	{r4, pc}
10004ede:	2001      	movs	r0, #1
10004ee0:	bd10      	pop	{r4, pc}
10004ee2:	46c0      	nop			; (mov r8, r8)

10004ee4 <__aeabi_dcmpgt>:
10004ee4:	b510      	push	{r4, lr}
10004ee6:	f000 f873 	bl	10004fd0 <__gedf2>
10004eea:	2800      	cmp	r0, #0
10004eec:	dc01      	bgt.n	10004ef2 <__aeabi_dcmpgt+0xe>
10004eee:	2000      	movs	r0, #0
10004ef0:	bd10      	pop	{r4, pc}
10004ef2:	2001      	movs	r0, #1
10004ef4:	bd10      	pop	{r4, pc}
10004ef6:	46c0      	nop			; (mov r8, r8)

10004ef8 <__aeabi_dcmpge>:
10004ef8:	b510      	push	{r4, lr}
10004efa:	f000 f869 	bl	10004fd0 <__gedf2>
10004efe:	2800      	cmp	r0, #0
10004f00:	da01      	bge.n	10004f06 <__aeabi_dcmpge+0xe>
10004f02:	2000      	movs	r0, #0
10004f04:	bd10      	pop	{r4, pc}
10004f06:	2001      	movs	r0, #1
10004f08:	bd10      	pop	{r4, pc}
10004f0a:	46c0      	nop			; (mov r8, r8)

10004f0c <__clzsi2>:
10004f0c:	211c      	movs	r1, #28
10004f0e:	2301      	movs	r3, #1
10004f10:	041b      	lsls	r3, r3, #16
10004f12:	4298      	cmp	r0, r3
10004f14:	d301      	bcc.n	10004f1a <__clzsi2+0xe>
10004f16:	0c00      	lsrs	r0, r0, #16
10004f18:	3910      	subs	r1, #16
10004f1a:	0a1b      	lsrs	r3, r3, #8
10004f1c:	4298      	cmp	r0, r3
10004f1e:	d301      	bcc.n	10004f24 <__clzsi2+0x18>
10004f20:	0a00      	lsrs	r0, r0, #8
10004f22:	3908      	subs	r1, #8
10004f24:	091b      	lsrs	r3, r3, #4
10004f26:	4298      	cmp	r0, r3
10004f28:	d301      	bcc.n	10004f2e <__clzsi2+0x22>
10004f2a:	0900      	lsrs	r0, r0, #4
10004f2c:	3904      	subs	r1, #4
10004f2e:	a202      	add	r2, pc, #8	; (adr r2, 10004f38 <__clzsi2+0x2c>)
10004f30:	5c10      	ldrb	r0, [r2, r0]
10004f32:	1840      	adds	r0, r0, r1
10004f34:	4770      	bx	lr
10004f36:	46c0      	nop			; (mov r8, r8)
10004f38:	02020304 	.word	0x02020304
10004f3c:	01010101 	.word	0x01010101
	...

10004f48 <__eqdf2>:
10004f48:	b5f0      	push	{r4, r5, r6, r7, lr}
10004f4a:	465f      	mov	r7, fp
10004f4c:	464d      	mov	r5, r9
10004f4e:	4644      	mov	r4, r8
10004f50:	4656      	mov	r6, sl
10004f52:	b4f0      	push	{r4, r5, r6, r7}
10004f54:	031f      	lsls	r7, r3, #12
10004f56:	005c      	lsls	r4, r3, #1
10004f58:	0fdb      	lsrs	r3, r3, #31
10004f5a:	4699      	mov	r9, r3
10004f5c:	4b1b      	ldr	r3, [pc, #108]	; (10004fcc <__eqdf2+0x84>)
10004f5e:	030e      	lsls	r6, r1, #12
10004f60:	004d      	lsls	r5, r1, #1
10004f62:	0fc9      	lsrs	r1, r1, #31
10004f64:	4684      	mov	ip, r0
10004f66:	0b36      	lsrs	r6, r6, #12
10004f68:	0d6d      	lsrs	r5, r5, #21
10004f6a:	468b      	mov	fp, r1
10004f6c:	4690      	mov	r8, r2
10004f6e:	0b3f      	lsrs	r7, r7, #12
10004f70:	0d64      	lsrs	r4, r4, #21
10004f72:	429d      	cmp	r5, r3
10004f74:	d00c      	beq.n	10004f90 <__eqdf2+0x48>
10004f76:	4b15      	ldr	r3, [pc, #84]	; (10004fcc <__eqdf2+0x84>)
10004f78:	429c      	cmp	r4, r3
10004f7a:	d010      	beq.n	10004f9e <__eqdf2+0x56>
10004f7c:	2301      	movs	r3, #1
10004f7e:	42a5      	cmp	r5, r4
10004f80:	d014      	beq.n	10004fac <__eqdf2+0x64>
10004f82:	1c18      	adds	r0, r3, #0
10004f84:	bc3c      	pop	{r2, r3, r4, r5}
10004f86:	4690      	mov	r8, r2
10004f88:	4699      	mov	r9, r3
10004f8a:	46a2      	mov	sl, r4
10004f8c:	46ab      	mov	fp, r5
10004f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004f90:	1c31      	adds	r1, r6, #0
10004f92:	2301      	movs	r3, #1
10004f94:	4301      	orrs	r1, r0
10004f96:	d1f4      	bne.n	10004f82 <__eqdf2+0x3a>
10004f98:	4b0c      	ldr	r3, [pc, #48]	; (10004fcc <__eqdf2+0x84>)
10004f9a:	429c      	cmp	r4, r3
10004f9c:	d1ee      	bne.n	10004f7c <__eqdf2+0x34>
10004f9e:	433a      	orrs	r2, r7
10004fa0:	2301      	movs	r3, #1
10004fa2:	2a00      	cmp	r2, #0
10004fa4:	d1ed      	bne.n	10004f82 <__eqdf2+0x3a>
10004fa6:	2301      	movs	r3, #1
10004fa8:	42a5      	cmp	r5, r4
10004faa:	d1ea      	bne.n	10004f82 <__eqdf2+0x3a>
10004fac:	42be      	cmp	r6, r7
10004fae:	d1e8      	bne.n	10004f82 <__eqdf2+0x3a>
10004fb0:	45c4      	cmp	ip, r8
10004fb2:	d1e6      	bne.n	10004f82 <__eqdf2+0x3a>
10004fb4:	45cb      	cmp	fp, r9
10004fb6:	d006      	beq.n	10004fc6 <__eqdf2+0x7e>
10004fb8:	2d00      	cmp	r5, #0
10004fba:	d1e2      	bne.n	10004f82 <__eqdf2+0x3a>
10004fbc:	4330      	orrs	r0, r6
10004fbe:	1c03      	adds	r3, r0, #0
10004fc0:	1e58      	subs	r0, r3, #1
10004fc2:	4183      	sbcs	r3, r0
10004fc4:	e7dd      	b.n	10004f82 <__eqdf2+0x3a>
10004fc6:	2300      	movs	r3, #0
10004fc8:	e7db      	b.n	10004f82 <__eqdf2+0x3a>
10004fca:	46c0      	nop			; (mov r8, r8)
10004fcc:	000007ff 	.word	0x000007ff

10004fd0 <__gedf2>:
10004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10004fd2:	4657      	mov	r7, sl
10004fd4:	4645      	mov	r5, r8
10004fd6:	464e      	mov	r6, r9
10004fd8:	b4e0      	push	{r5, r6, r7}
10004fda:	030f      	lsls	r7, r1, #12
10004fdc:	004e      	lsls	r6, r1, #1
10004fde:	0fc9      	lsrs	r1, r1, #31
10004fe0:	468a      	mov	sl, r1
10004fe2:	4932      	ldr	r1, [pc, #200]	; (100050ac <__gedf2+0xdc>)
10004fe4:	031d      	lsls	r5, r3, #12
10004fe6:	005c      	lsls	r4, r3, #1
10004fe8:	4684      	mov	ip, r0
10004fea:	0b3f      	lsrs	r7, r7, #12
10004fec:	0d76      	lsrs	r6, r6, #21
10004fee:	4690      	mov	r8, r2
10004ff0:	0b2d      	lsrs	r5, r5, #12
10004ff2:	0d64      	lsrs	r4, r4, #21
10004ff4:	0fdb      	lsrs	r3, r3, #31
10004ff6:	428e      	cmp	r6, r1
10004ff8:	d00f      	beq.n	1000501a <__gedf2+0x4a>
10004ffa:	428c      	cmp	r4, r1
10004ffc:	d039      	beq.n	10005072 <__gedf2+0xa2>
10004ffe:	2e00      	cmp	r6, #0
10005000:	d110      	bne.n	10005024 <__gedf2+0x54>
10005002:	4338      	orrs	r0, r7
10005004:	4241      	negs	r1, r0
10005006:	4141      	adcs	r1, r0
10005008:	4689      	mov	r9, r1
1000500a:	2c00      	cmp	r4, #0
1000500c:	d127      	bne.n	1000505e <__gedf2+0x8e>
1000500e:	432a      	orrs	r2, r5
10005010:	d125      	bne.n	1000505e <__gedf2+0x8e>
10005012:	2000      	movs	r0, #0
10005014:	2900      	cmp	r1, #0
10005016:	d10e      	bne.n	10005036 <__gedf2+0x66>
10005018:	e008      	b.n	1000502c <__gedf2+0x5c>
1000501a:	1c39      	adds	r1, r7, #0
1000501c:	4301      	orrs	r1, r0
1000501e:	d12e      	bne.n	1000507e <__gedf2+0xae>
10005020:	42b4      	cmp	r4, r6
10005022:	d026      	beq.n	10005072 <__gedf2+0xa2>
10005024:	2c00      	cmp	r4, #0
10005026:	d00b      	beq.n	10005040 <__gedf2+0x70>
10005028:	459a      	cmp	sl, r3
1000502a:	d00d      	beq.n	10005048 <__gedf2+0x78>
1000502c:	4653      	mov	r3, sl
1000502e:	4259      	negs	r1, r3
10005030:	2301      	movs	r3, #1
10005032:	4319      	orrs	r1, r3
10005034:	1c08      	adds	r0, r1, #0
10005036:	bc1c      	pop	{r2, r3, r4}
10005038:	4690      	mov	r8, r2
1000503a:	4699      	mov	r9, r3
1000503c:	46a2      	mov	sl, r4
1000503e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005040:	432a      	orrs	r2, r5
10005042:	d0f3      	beq.n	1000502c <__gedf2+0x5c>
10005044:	459a      	cmp	sl, r3
10005046:	d1f1      	bne.n	1000502c <__gedf2+0x5c>
10005048:	42a6      	cmp	r6, r4
1000504a:	dcef      	bgt.n	1000502c <__gedf2+0x5c>
1000504c:	da1a      	bge.n	10005084 <__gedf2+0xb4>
1000504e:	4650      	mov	r0, sl
10005050:	4241      	negs	r1, r0
10005052:	4148      	adcs	r0, r1
10005054:	2301      	movs	r3, #1
10005056:	4241      	negs	r1, r0
10005058:	4319      	orrs	r1, r3
1000505a:	1c08      	adds	r0, r1, #0
1000505c:	e7eb      	b.n	10005036 <__gedf2+0x66>
1000505e:	464a      	mov	r2, r9
10005060:	2a00      	cmp	r2, #0
10005062:	d0e1      	beq.n	10005028 <__gedf2+0x58>
10005064:	4258      	negs	r0, r3
10005066:	4158      	adcs	r0, r3
10005068:	2201      	movs	r2, #1
1000506a:	4241      	negs	r1, r0
1000506c:	4311      	orrs	r1, r2
1000506e:	1c08      	adds	r0, r1, #0
10005070:	e7e1      	b.n	10005036 <__gedf2+0x66>
10005072:	1c29      	adds	r1, r5, #0
10005074:	4311      	orrs	r1, r2
10005076:	d102      	bne.n	1000507e <__gedf2+0xae>
10005078:	2e00      	cmp	r6, #0
1000507a:	d0c2      	beq.n	10005002 <__gedf2+0x32>
1000507c:	e7d4      	b.n	10005028 <__gedf2+0x58>
1000507e:	2002      	movs	r0, #2
10005080:	4240      	negs	r0, r0
10005082:	e7d8      	b.n	10005036 <__gedf2+0x66>
10005084:	42af      	cmp	r7, r5
10005086:	d8d1      	bhi.n	1000502c <__gedf2+0x5c>
10005088:	d009      	beq.n	1000509e <__gedf2+0xce>
1000508a:	2000      	movs	r0, #0
1000508c:	42af      	cmp	r7, r5
1000508e:	d2d2      	bcs.n	10005036 <__gedf2+0x66>
10005090:	4650      	mov	r0, sl
10005092:	4241      	negs	r1, r0
10005094:	4148      	adcs	r0, r1
10005096:	2301      	movs	r3, #1
10005098:	4240      	negs	r0, r0
1000509a:	4318      	orrs	r0, r3
1000509c:	e7cb      	b.n	10005036 <__gedf2+0x66>
1000509e:	45c4      	cmp	ip, r8
100050a0:	d8c4      	bhi.n	1000502c <__gedf2+0x5c>
100050a2:	2000      	movs	r0, #0
100050a4:	45c4      	cmp	ip, r8
100050a6:	d3f3      	bcc.n	10005090 <__gedf2+0xc0>
100050a8:	e7c5      	b.n	10005036 <__gedf2+0x66>
100050aa:	46c0      	nop			; (mov r8, r8)
100050ac:	000007ff 	.word	0x000007ff

100050b0 <__ledf2>:
100050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100050b2:	465f      	mov	r7, fp
100050b4:	464d      	mov	r5, r9
100050b6:	4644      	mov	r4, r8
100050b8:	4656      	mov	r6, sl
100050ba:	4680      	mov	r8, r0
100050bc:	b4f0      	push	{r4, r5, r6, r7}
100050be:	1c06      	adds	r6, r0, #0
100050c0:	0308      	lsls	r0, r1, #12
100050c2:	0b00      	lsrs	r0, r0, #12
100050c4:	4684      	mov	ip, r0
100050c6:	482c      	ldr	r0, [pc, #176]	; (10005178 <__ledf2+0xc8>)
100050c8:	004c      	lsls	r4, r1, #1
100050ca:	031f      	lsls	r7, r3, #12
100050cc:	005d      	lsls	r5, r3, #1
100050ce:	0fc9      	lsrs	r1, r1, #31
100050d0:	0d64      	lsrs	r4, r4, #21
100050d2:	468b      	mov	fp, r1
100050d4:	4691      	mov	r9, r2
100050d6:	0b3f      	lsrs	r7, r7, #12
100050d8:	0d6d      	lsrs	r5, r5, #21
100050da:	0fdb      	lsrs	r3, r3, #31
100050dc:	4284      	cmp	r4, r0
100050de:	d012      	beq.n	10005106 <__ledf2+0x56>
100050e0:	4285      	cmp	r5, r0
100050e2:	d025      	beq.n	10005130 <__ledf2+0x80>
100050e4:	2c00      	cmp	r4, #0
100050e6:	d114      	bne.n	10005112 <__ledf2+0x62>
100050e8:	4661      	mov	r1, ip
100050ea:	430e      	orrs	r6, r1
100050ec:	4270      	negs	r0, r6
100050ee:	4146      	adcs	r6, r0
100050f0:	2d00      	cmp	r5, #0
100050f2:	d035      	beq.n	10005160 <__ledf2+0xb0>
100050f4:	2e00      	cmp	r6, #0
100050f6:	d021      	beq.n	1000513c <__ledf2+0x8c>
100050f8:	4258      	negs	r0, r3
100050fa:	4158      	adcs	r0, r3
100050fc:	2101      	movs	r1, #1
100050fe:	4243      	negs	r3, r0
10005100:	430b      	orrs	r3, r1
10005102:	1c18      	adds	r0, r3, #0
10005104:	e00e      	b.n	10005124 <__ledf2+0x74>
10005106:	4661      	mov	r1, ip
10005108:	2002      	movs	r0, #2
1000510a:	4331      	orrs	r1, r6
1000510c:	d10a      	bne.n	10005124 <__ledf2+0x74>
1000510e:	42a5      	cmp	r5, r4
10005110:	d00e      	beq.n	10005130 <__ledf2+0x80>
10005112:	2d00      	cmp	r5, #0
10005114:	d112      	bne.n	1000513c <__ledf2+0x8c>
10005116:	433a      	orrs	r2, r7
10005118:	d110      	bne.n	1000513c <__ledf2+0x8c>
1000511a:	465b      	mov	r3, fp
1000511c:	4259      	negs	r1, r3
1000511e:	2301      	movs	r3, #1
10005120:	4319      	orrs	r1, r3
10005122:	1c08      	adds	r0, r1, #0
10005124:	bc3c      	pop	{r2, r3, r4, r5}
10005126:	4690      	mov	r8, r2
10005128:	4699      	mov	r9, r3
1000512a:	46a2      	mov	sl, r4
1000512c:	46ab      	mov	fp, r5
1000512e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005130:	1c39      	adds	r1, r7, #0
10005132:	2002      	movs	r0, #2
10005134:	4311      	orrs	r1, r2
10005136:	d1f5      	bne.n	10005124 <__ledf2+0x74>
10005138:	2c00      	cmp	r4, #0
1000513a:	d0d5      	beq.n	100050e8 <__ledf2+0x38>
1000513c:	459b      	cmp	fp, r3
1000513e:	d1ec      	bne.n	1000511a <__ledf2+0x6a>
10005140:	42ac      	cmp	r4, r5
10005142:	dcea      	bgt.n	1000511a <__ledf2+0x6a>
10005144:	db05      	blt.n	10005152 <__ledf2+0xa2>
10005146:	45bc      	cmp	ip, r7
10005148:	d8e7      	bhi.n	1000511a <__ledf2+0x6a>
1000514a:	d00f      	beq.n	1000516c <__ledf2+0xbc>
1000514c:	2000      	movs	r0, #0
1000514e:	45bc      	cmp	ip, r7
10005150:	d2e8      	bcs.n	10005124 <__ledf2+0x74>
10005152:	4658      	mov	r0, fp
10005154:	4241      	negs	r1, r0
10005156:	4148      	adcs	r0, r1
10005158:	4241      	negs	r1, r0
1000515a:	2001      	movs	r0, #1
1000515c:	4308      	orrs	r0, r1
1000515e:	e7e1      	b.n	10005124 <__ledf2+0x74>
10005160:	433a      	orrs	r2, r7
10005162:	d1c7      	bne.n	100050f4 <__ledf2+0x44>
10005164:	2000      	movs	r0, #0
10005166:	2e00      	cmp	r6, #0
10005168:	d1dc      	bne.n	10005124 <__ledf2+0x74>
1000516a:	e7d6      	b.n	1000511a <__ledf2+0x6a>
1000516c:	45c8      	cmp	r8, r9
1000516e:	d8d4      	bhi.n	1000511a <__ledf2+0x6a>
10005170:	2000      	movs	r0, #0
10005172:	45c8      	cmp	r8, r9
10005174:	d3ed      	bcc.n	10005152 <__ledf2+0xa2>
10005176:	e7d5      	b.n	10005124 <__ledf2+0x74>
10005178:	000007ff 	.word	0x000007ff

1000517c <__libc_init_array>:
1000517c:	4b0e      	ldr	r3, [pc, #56]	; (100051b8 <__libc_init_array+0x3c>)
1000517e:	b570      	push	{r4, r5, r6, lr}
10005180:	2500      	movs	r5, #0
10005182:	1c1e      	adds	r6, r3, #0
10005184:	4c0d      	ldr	r4, [pc, #52]	; (100051bc <__libc_init_array+0x40>)
10005186:	1ae4      	subs	r4, r4, r3
10005188:	10a4      	asrs	r4, r4, #2
1000518a:	42a5      	cmp	r5, r4
1000518c:	d004      	beq.n	10005198 <__libc_init_array+0x1c>
1000518e:	00ab      	lsls	r3, r5, #2
10005190:	58f3      	ldr	r3, [r6, r3]
10005192:	4798      	blx	r3
10005194:	3501      	adds	r5, #1
10005196:	e7f8      	b.n	1000518a <__libc_init_array+0xe>
10005198:	f7fc ffb4 	bl	10002104 <_init>
1000519c:	4b08      	ldr	r3, [pc, #32]	; (100051c0 <__libc_init_array+0x44>)
1000519e:	2500      	movs	r5, #0
100051a0:	1c1e      	adds	r6, r3, #0
100051a2:	4c08      	ldr	r4, [pc, #32]	; (100051c4 <__libc_init_array+0x48>)
100051a4:	1ae4      	subs	r4, r4, r3
100051a6:	10a4      	asrs	r4, r4, #2
100051a8:	42a5      	cmp	r5, r4
100051aa:	d004      	beq.n	100051b6 <__libc_init_array+0x3a>
100051ac:	00ab      	lsls	r3, r5, #2
100051ae:	58f3      	ldr	r3, [r6, r3]
100051b0:	4798      	blx	r3
100051b2:	3501      	adds	r5, #1
100051b4:	e7f8      	b.n	100051a8 <__libc_init_array+0x2c>
100051b6:	bd70      	pop	{r4, r5, r6, pc}
100051b8:	20000638 	.word	0x20000638
100051bc:	20000638 	.word	0x20000638
100051c0:	20000638 	.word	0x20000638
100051c4:	20000638 	.word	0x20000638
100051c8:	10001e92 	.word	0x10001e92
100051cc:	10001e92 	.word	0x10001e92
100051d0:	10001e9c 	.word	0x10001e9c
100051d4:	10001e9c 	.word	0x10001e9c
100051d8:	10001eca 	.word	0x10001eca
100051dc:	10001eca 	.word	0x10001eca
100051e0:	10001eca 	.word	0x10001eca
100051e4:	10001eca 	.word	0x10001eca
100051e8:	10001ea6 	.word	0x10001ea6
100051ec:	10001eb2 	.word	0x10001eb2
100051f0:	10001ebe 	.word	0x10001ebe
100051f4:	10001ebe 	.word	0x10001ebe

100051f8 <ECHO_C>:
100051f8:	40010600 40040200 00000000 00000000     ...@...@........
10005208:	00000001 0000002d 02050000 01060202     ....-...........

10005218 <ECHO_L>:
10005218:	40010600 40040200 00000000 00000000     ...@...@........
10005228:	00000004 0000010d 02030000 01080003     ................

10005238 <ECHO_R>:
10005238:	40010600 40040200 00000000 00000000     ...@...@........
10005248:	00000000 0000013d 02060000 01000300     ....=...........

10005258 <PIN_INTERRUPT_3>:
10005258:	40010600 40040200 00000000 00000000     ...@...@........
10005268:	00000001 00000015 03040000 00050101     ................

10005278 <INTERRUPT_0>:
10005278:	01080001 00000001                       ........

10005280 <INTERRUPT_1s>:
10005280:	03070002 00000001                       ........

10005288 <INTERRUPT_CAN_RX>:
10005288:	03000001 00000001                       ........

10005290 <DIGITAL_IO_0>:
10005290:	40040400 00000080 00010000 00000000     ...@............
100052a0:	00010000 03300000 00010000 00000000     ......0.........

100052b0 <CAN_NODE_0_gpio_out>:
100052b0:	40040400 00000009                       ...@....

100052b8 <CAN_NODE_0_gpio_out_config>:
100052b8:	000000a4 00000001                       ........

100052c0 <CAN_NODE_0_gpio_in>:
100052c0:	40040400 00000008                       ...@....

100052c8 <CAN_NODE_0_gpio_in_config>:
	...

100052d0 <CAN_NODE_0_BitTimeConfig>:
100052d0:	02dc6c00 0007a120 00011f40              .l.. ...@...

100052dc <CAN_NODE_0_sr>:
100052dc:	00000000                                ....

100052e0 <CAN_NODE_0_LMO_01_Config>:
100052e0:	200005d8 00000011 00000000              ... ........

100052ec <CAN_NODE_0_LMO_02_Config>:
100052ec:	200005f8 00000013 00000001              ... ........

100052f8 <CAN_NODE_0>:
100052f8:	200005cc 50040300 100052d0 100052e0     ... ...P.R...R..
10005308:	100052ec 00000000 00000000 00000000     .R..............
	...
10005384:	100052dc 100052b0 100052b8 100052c0     .R...R...R...R..
10005394:	100052c8 00020102 00000000              .R..........

100053a0 <BUS_IO_0_pin_list>:
100053a0:	40040100 00000004 40040100 00000005     ...@.......@....
100053b0:	40040100 00000006 10003ce2 10003cda     ...@.....<...<..
100053c0:	10003cda 10003cd2 10003c24 10003c24     .<...<..$<..$<..
100053d0:	10003cc8 10003cd2 10003c24 10003cc8     .<...<..$<...<..
100053e0:	10003c24 10003cd2 10003c26 10003c26     $<...<..&<..&<..
100053f0:	10003c26 10003d6c 10004384 10004362     &<..l=...C..bC..
10005400:	10004362 10004356 1000424a 1000424a     bC..VC..JB..JB..
10005410:	1000434a 10004356 1000424a 1000434a     JC..VC..JB..JC..
10005420:	1000424a 10004356 1000424e 1000424e     JB..VC..NB..NB..
10005430:	1000424e 10004564                       NB..dE..

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	10003685 	.word	0x10003685
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	100033b9 	.word	0x100033b9
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	10003291 	.word	0x10003291
	Insert_InterruptVeener IRQ6	
200000e8:	100034e1 	.word	0x100034e1
	Insert_InterruptVeener IRQ7	
200000ec:	10003609 	.word	0x10003609
	Insert_InterruptVeener IRQ8	
200000f0:	100030bd 	.word	0x100030bd
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ12	
20000100:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
