   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "other_functions.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .global __aeabi_fsub
  18              	 .global __aeabi_fmul
  19              	 .global __aeabi_fcmple
  20              	 .section .text.within_MAX_MIN,"ax",%progbits
  21              	 .align 2
  22              	 .global within_MAX_MIN
  23              	 .code 16
  24              	 .thumb_func
  26              	within_MAX_MIN:
  27              	.LFB0:
  28              	 .file 1 "../other_functions.c"
   1:../other_functions.c **** /*
   2:../other_functions.c ****  * other_functions.c
   3:../other_functions.c ****  *
   4:../other_functions.c ****  *  Created on: 13 Jun 2022
   5:../other_functions.c ****  *      Author: lukas
   6:../other_functions.c ****  */
   7:../other_functions.c **** 
   8:../other_functions.c **** #include "other_functions.h"
   9:../other_functions.c **** /* Always include the header file that declares something
  10:../other_functions.c ****                      * in the C file that defines it. This makes sure that the
  11:../other_functions.c ****                      * declaration and definition are always in-sync.  Put this
  12:../other_functions.c ****                      * header first in foo.c to ensure the header is self-contained.
  13:../other_functions.c ****                      */
  14:../other_functions.c **** 
  15:../other_functions.c **** 
  16:../other_functions.c **** /**
  17:../other_functions.c ****  * This is the function definition.
  18:../other_functions.c ****  * It is the actual body of the function which was declared elsewhere.
  19:../other_functions.c ****  */
  20:../other_functions.c **** bool within_MAX_MIN(float num, float max, float min){
  29              	 .loc 1 20 0
  30              	 .cfi_startproc
  31 0000 90B5     	 push {r4,r7,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 12
  34              	 .cfi_offset 4,-12
  35              	 .cfi_offset 7,-8
  36              	 .cfi_offset 14,-4
  37 0002 85B0     	 sub sp,sp,#20
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 32
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  21:../other_functions.c **** 	if((num-min)*(num-max) <= 0) return 1;
  46              	 .loc 1 21 0
  47 000c F868     	 ldr r0,[r7,#12]
  48 000e 7968     	 ldr r1,[r7,#4]
  49 0010 FFF7FEFF 	 bl __aeabi_fsub
  50 0014 031C     	 add r3,r0,#0
  51 0016 1C1C     	 add r4,r3,#0
  52 0018 F868     	 ldr r0,[r7,#12]
  53 001a B968     	 ldr r1,[r7,#8]
  54 001c FFF7FEFF 	 bl __aeabi_fsub
  55 0020 031C     	 add r3,r0,#0
  56 0022 201C     	 add r0,r4,#0
  57 0024 191C     	 add r1,r3,#0
  58 0026 FFF7FEFF 	 bl __aeabi_fmul
  59 002a 031C     	 add r3,r0,#0
  60 002c 181C     	 add r0,r3,#0
  61 002e 0021     	 mov r1,#0
  62 0030 FFF7FEFF 	 bl __aeabi_fcmple
  63 0034 031E     	 sub r3,r0,#0
  64 0036 01D0     	 beq .L6
  65              	 .loc 1 21 0 is_stmt 0 discriminator 1
  66 0038 0123     	 mov r3,#1
  67 003a 00E0     	 b .L4
  68              	.L6:
  22:../other_functions.c **** 	else return 0;
  69              	 .loc 1 22 0 is_stmt 1
  70 003c 0023     	 mov r3,#0
  71              	.L4:
  23:../other_functions.c **** }
  72              	 .loc 1 23 0
  73 003e 181C     	 mov r0,r3
  74 0040 BD46     	 mov sp,r7
  75 0042 05B0     	 add sp,sp,#20
  76              	 
  77 0044 90BD     	 pop {r4,r7,pc}
  78              	 .cfi_endproc
  79              	.LFE0:
  81              	 .global __aeabi_fadd
  82              	 .global __aeabi_f2d
  83              	 .global __aeabi_dadd
  84              	 .global __aeabi_ddiv
  85              	 .global __aeabi_d2f
  86 0046 C046     	 .section .text.distance_trajectory_obstacel,"ax",%progbits
  87              	 .align 2
  88              	 .global distance_trajectory_obstacel
  89              	 .code 16
  90              	 .thumb_func
  92              	distance_trajectory_obstacel:
  93              	.LFB1:
  24:../other_functions.c **** 
  25:../other_functions.c **** 
  26:../other_functions.c **** float distance_trajectory_obstacel(float a, float b, float o_x, float o_y){
  94              	 .loc 1 26 0
  95              	 .cfi_startproc
  96 0000 F0B5     	 push {r4,r5,r6,r7,lr}
  97              	.LCFI3:
  98              	 .cfi_def_cfa_offset 20
  99              	 .cfi_offset 4,-20
 100              	 .cfi_offset 5,-16
 101              	 .cfi_offset 6,-12
 102              	 .cfi_offset 7,-8
 103              	 .cfi_offset 14,-4
 104 0002 87B0     	 sub sp,sp,#28
 105              	.LCFI4:
 106              	 .cfi_def_cfa_offset 48
 107 0004 00AF     	 add r7,sp,#0
 108              	.LCFI5:
 109              	 .cfi_def_cfa_register 7
 110 0006 7861     	 str r0,[r7,#20]
 111 0008 3961     	 str r1,[r7,#16]
 112 000a FA60     	 str r2,[r7,#12]
 113 000c BB60     	 str r3,[r7,#8]
  27:../other_functions.c **** 	return fabs(a * o_x +  b* o_y) / sqrt(pow(a,2) + pow(b,2));
 114              	 .loc 1 27 0
 115 000e 7869     	 ldr r0,[r7,#20]
 116 0010 F968     	 ldr r1,[r7,#12]
 117 0012 FFF7FEFF 	 bl __aeabi_fmul
 118 0016 031C     	 add r3,r0,#0
 119 0018 1C1C     	 add r4,r3,#0
 120 001a 3869     	 ldr r0,[r7,#16]
 121 001c B968     	 ldr r1,[r7,#8]
 122 001e FFF7FEFF 	 bl __aeabi_fmul
 123 0022 031C     	 add r3,r0,#0
 124 0024 201C     	 add r0,r4,#0
 125 0026 191C     	 add r1,r3,#0
 126 0028 FFF7FEFF 	 bl __aeabi_fadd
 127 002c 031C     	 add r3,r0,#0
 128 002e 5B00     	 lsl r3,r3,#1
 129 0030 5B08     	 lsr r3,r3,#1
 130 0032 181C     	 add r0,r3,#0
 131 0034 FFF7FEFF 	 bl __aeabi_f2d
 132 0038 051C     	 mov r5,r0
 133 003a 0E1C     	 mov r6,r1
 134 003c 7869     	 ldr r0,[r7,#20]
 135 003e FFF7FEFF 	 bl __aeabi_f2d
 136 0042 0A1C     	 mov r2,r1
 137 0044 011C     	 mov r1,r0
 138 0046 0023     	 mov r3,#0
 139 0048 8024     	 mov r4,#128
 140 004a E405     	 lsl r4,r4,#23
 141 004c 081C     	 mov r0,r1
 142 004e 111C     	 mov r1,r2
 143 0050 1A1C     	 mov r2,r3
 144 0052 231C     	 mov r3,r4
 145 0054 FFF7FEFF 	 bl pow
 146 0058 3860     	 str r0,[r7]
 147 005a 7960     	 str r1,[r7,#4]
 148 005c 3869     	 ldr r0,[r7,#16]
 149 005e FFF7FEFF 	 bl __aeabi_f2d
 150 0062 0A1C     	 mov r2,r1
 151 0064 011C     	 mov r1,r0
 152 0066 0023     	 mov r3,#0
 153 0068 8024     	 mov r4,#128
 154 006a E405     	 lsl r4,r4,#23
 155 006c 081C     	 mov r0,r1
 156 006e 111C     	 mov r1,r2
 157 0070 1A1C     	 mov r2,r3
 158 0072 231C     	 mov r3,r4
 159 0074 FFF7FEFF 	 bl pow
 160 0078 031C     	 mov r3,r0
 161 007a 0C1C     	 mov r4,r1
 162 007c 3868     	 ldr r0,[r7]
 163 007e 7968     	 ldr r1,[r7,#4]
 164 0080 1A1C     	 mov r2,r3
 165 0082 231C     	 mov r3,r4
 166 0084 FFF7FEFF 	 bl __aeabi_dadd
 167 0088 031C     	 mov r3,r0
 168 008a 0C1C     	 mov r4,r1
 169 008c 181C     	 mov r0,r3
 170 008e 211C     	 mov r1,r4
 171 0090 FFF7FEFF 	 bl sqrt
 172 0094 031C     	 mov r3,r0
 173 0096 0C1C     	 mov r4,r1
 174 0098 281C     	 mov r0,r5
 175 009a 311C     	 mov r1,r6
 176 009c 1A1C     	 mov r2,r3
 177 009e 231C     	 mov r3,r4
 178 00a0 FFF7FEFF 	 bl __aeabi_ddiv
 179 00a4 031C     	 mov r3,r0
 180 00a6 0C1C     	 mov r4,r1
 181 00a8 181C     	 mov r0,r3
 182 00aa 211C     	 mov r1,r4
 183 00ac FFF7FEFF 	 bl __aeabi_d2f
 184 00b0 031C     	 add r3,r0,#0
  28:../other_functions.c **** }
 185              	 .loc 1 28 0
 186 00b2 181C     	 add r0,r3,#0
 187 00b4 BD46     	 mov sp,r7
 188 00b6 07B0     	 add sp,sp,#28
 189              	 
 190 00b8 F0BD     	 pop {r4,r5,r6,r7,pc}
 191              	 .cfi_endproc
 192              	.LFE1:
 194 00ba C046     	 .section .text.pythagoras,"ax",%progbits
 195              	 .align 2
 196              	 .global pythagoras
 197              	 .code 16
 198              	 .thumb_func
 200              	pythagoras:
 201              	.LFB2:
  29:../other_functions.c **** 
  30:../other_functions.c **** float pythagoras(float a, float b){
 202              	 .loc 1 30 0
 203              	 .cfi_startproc
 204 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 205              	.LCFI6:
 206              	 .cfi_def_cfa_offset 20
 207              	 .cfi_offset 4,-20
 208              	 .cfi_offset 5,-16
 209              	 .cfi_offset 6,-12
 210              	 .cfi_offset 7,-8
 211              	 .cfi_offset 14,-4
 212 0002 83B0     	 sub sp,sp,#12
 213              	.LCFI7:
 214              	 .cfi_def_cfa_offset 32
 215 0004 00AF     	 add r7,sp,#0
 216              	.LCFI8:
 217              	 .cfi_def_cfa_register 7
 218 0006 7860     	 str r0,[r7,#4]
 219 0008 3960     	 str r1,[r7]
  31:../other_functions.c **** 	return sqrt(pow(a,2) + pow(b,2));
 220              	 .loc 1 31 0
 221 000a 7868     	 ldr r0,[r7,#4]
 222 000c FFF7FEFF 	 bl __aeabi_f2d
 223 0010 0A1C     	 mov r2,r1
 224 0012 011C     	 mov r1,r0
 225 0014 0023     	 mov r3,#0
 226 0016 8024     	 mov r4,#128
 227 0018 E405     	 lsl r4,r4,#23
 228 001a 081C     	 mov r0,r1
 229 001c 111C     	 mov r1,r2
 230 001e 1A1C     	 mov r2,r3
 231 0020 231C     	 mov r3,r4
 232 0022 FFF7FEFF 	 bl pow
 233 0026 051C     	 mov r5,r0
 234 0028 0E1C     	 mov r6,r1
 235 002a 3868     	 ldr r0,[r7]
 236 002c FFF7FEFF 	 bl __aeabi_f2d
 237 0030 0A1C     	 mov r2,r1
 238 0032 011C     	 mov r1,r0
 239 0034 0023     	 mov r3,#0
 240 0036 8024     	 mov r4,#128
 241 0038 E405     	 lsl r4,r4,#23
 242 003a 081C     	 mov r0,r1
 243 003c 111C     	 mov r1,r2
 244 003e 1A1C     	 mov r2,r3
 245 0040 231C     	 mov r3,r4
 246 0042 FFF7FEFF 	 bl pow
 247 0046 031C     	 mov r3,r0
 248 0048 0C1C     	 mov r4,r1
 249 004a 281C     	 mov r0,r5
 250 004c 311C     	 mov r1,r6
 251 004e 1A1C     	 mov r2,r3
 252 0050 231C     	 mov r3,r4
 253 0052 FFF7FEFF 	 bl __aeabi_dadd
 254 0056 031C     	 mov r3,r0
 255 0058 0C1C     	 mov r4,r1
 256 005a 181C     	 mov r0,r3
 257 005c 211C     	 mov r1,r4
 258 005e FFF7FEFF 	 bl sqrt
 259 0062 031C     	 mov r3,r0
 260 0064 0C1C     	 mov r4,r1
 261 0066 181C     	 mov r0,r3
 262 0068 211C     	 mov r1,r4
 263 006a FFF7FEFF 	 bl __aeabi_d2f
 264 006e 031C     	 add r3,r0,#0
  32:../other_functions.c **** }
 265              	 .loc 1 32 0
 266 0070 181C     	 add r0,r3,#0
 267 0072 BD46     	 mov sp,r7
 268 0074 03B0     	 add sp,sp,#12
 269              	 
 270 0076 F0BD     	 pop {r4,r5,r6,r7,pc}
 271              	 .cfi_endproc
 272              	.LFE2:
 274              	 .section .text.vector_abs_value,"ax",%progbits
 275              	 .align 2
 276              	 .global vector_abs_value
 277              	 .code 16
 278              	 .thumb_func
 280              	vector_abs_value:
 281              	.LFB3:
  33:../other_functions.c **** 
  34:../other_functions.c **** float vector_abs_value(float a[2]){
 282              	 .loc 1 34 0
 283              	 .cfi_startproc
 284 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 285              	.LCFI9:
 286              	 .cfi_def_cfa_offset 20
 287              	 .cfi_offset 4,-20
 288              	 .cfi_offset 5,-16
 289              	 .cfi_offset 6,-12
 290              	 .cfi_offset 7,-8
 291              	 .cfi_offset 14,-4
 292 0002 83B0     	 sub sp,sp,#12
 293              	.LCFI10:
 294              	 .cfi_def_cfa_offset 32
 295 0004 00AF     	 add r7,sp,#0
 296              	.LCFI11:
 297              	 .cfi_def_cfa_register 7
 298 0006 7860     	 str r0,[r7,#4]
  35:../other_functions.c **** 	return sqrt(pow(a[0],2) + pow(a[1],2));
 299              	 .loc 1 35 0
 300 0008 7B68     	 ldr r3,[r7,#4]
 301 000a 1B68     	 ldr r3,[r3]
 302 000c 181C     	 add r0,r3,#0
 303 000e FFF7FEFF 	 bl __aeabi_f2d
 304 0012 0A1C     	 mov r2,r1
 305 0014 011C     	 mov r1,r0
 306 0016 0023     	 mov r3,#0
 307 0018 8024     	 mov r4,#128
 308 001a E405     	 lsl r4,r4,#23
 309 001c 081C     	 mov r0,r1
 310 001e 111C     	 mov r1,r2
 311 0020 1A1C     	 mov r2,r3
 312 0022 231C     	 mov r3,r4
 313 0024 FFF7FEFF 	 bl pow
 314 0028 051C     	 mov r5,r0
 315 002a 0E1C     	 mov r6,r1
 316 002c 7B68     	 ldr r3,[r7,#4]
 317 002e 0433     	 add r3,r3,#4
 318 0030 1B68     	 ldr r3,[r3]
 319 0032 181C     	 add r0,r3,#0
 320 0034 FFF7FEFF 	 bl __aeabi_f2d
 321 0038 0A1C     	 mov r2,r1
 322 003a 011C     	 mov r1,r0
 323 003c 0023     	 mov r3,#0
 324 003e 8024     	 mov r4,#128
 325 0040 E405     	 lsl r4,r4,#23
 326 0042 081C     	 mov r0,r1
 327 0044 111C     	 mov r1,r2
 328 0046 1A1C     	 mov r2,r3
 329 0048 231C     	 mov r3,r4
 330 004a FFF7FEFF 	 bl pow
 331 004e 031C     	 mov r3,r0
 332 0050 0C1C     	 mov r4,r1
 333 0052 281C     	 mov r0,r5
 334 0054 311C     	 mov r1,r6
 335 0056 1A1C     	 mov r2,r3
 336 0058 231C     	 mov r3,r4
 337 005a FFF7FEFF 	 bl __aeabi_dadd
 338 005e 031C     	 mov r3,r0
 339 0060 0C1C     	 mov r4,r1
 340 0062 181C     	 mov r0,r3
 341 0064 211C     	 mov r1,r4
 342 0066 FFF7FEFF 	 bl sqrt
 343 006a 031C     	 mov r3,r0
 344 006c 0C1C     	 mov r4,r1
 345 006e 181C     	 mov r0,r3
 346 0070 211C     	 mov r1,r4
 347 0072 FFF7FEFF 	 bl __aeabi_d2f
 348 0076 031C     	 add r3,r0,#0
  36:../other_functions.c **** }
 349              	 .loc 1 36 0
 350 0078 181C     	 add r0,r3,#0
 351 007a BD46     	 mov sp,r7
 352 007c 03B0     	 add sp,sp,#12
 353              	 
 354 007e F0BD     	 pop {r4,r5,r6,r7,pc}
 355              	 .cfi_endproc
 356              	.LFE3:
 358              	 .section .text.Exp_moving_average,"ax",%progbits
 359              	 .align 2
 360              	 .global Exp_moving_average
 361              	 .code 16
 362              	 .thumb_func
 364              	Exp_moving_average:
 365              	.LFB4:
  37:../other_functions.c **** 
  38:../other_functions.c **** float Exp_moving_average(float new_value, float value, float ALPHA){
 366              	 .loc 1 38 0
 367              	 .cfi_startproc
 368 0000 90B5     	 push {r4,r7,lr}
 369              	.LCFI12:
 370              	 .cfi_def_cfa_offset 12
 371              	 .cfi_offset 4,-12
 372              	 .cfi_offset 7,-8
 373              	 .cfi_offset 14,-4
 374 0002 85B0     	 sub sp,sp,#20
 375              	.LCFI13:
 376              	 .cfi_def_cfa_offset 32
 377 0004 00AF     	 add r7,sp,#0
 378              	.LCFI14:
 379              	 .cfi_def_cfa_register 7
 380 0006 F860     	 str r0,[r7,#12]
 381 0008 B960     	 str r1,[r7,#8]
 382 000a 7A60     	 str r2,[r7,#4]
  39:../other_functions.c **** 	return ((new_value * ALPHA) + ((1 - ALPHA) * value));
 383              	 .loc 1 39 0
 384 000c F868     	 ldr r0,[r7,#12]
 385 000e 7968     	 ldr r1,[r7,#4]
 386 0010 FFF7FEFF 	 bl __aeabi_fmul
 387 0014 031C     	 add r3,r0,#0
 388 0016 1C1C     	 add r4,r3,#0
 389 0018 FE20     	 mov r0,#254
 390 001a 8005     	 lsl r0,r0,#22
 391 001c 7968     	 ldr r1,[r7,#4]
 392 001e FFF7FEFF 	 bl __aeabi_fsub
 393 0022 031C     	 add r3,r0,#0
 394 0024 181C     	 add r0,r3,#0
 395 0026 B968     	 ldr r1,[r7,#8]
 396 0028 FFF7FEFF 	 bl __aeabi_fmul
 397 002c 031C     	 add r3,r0,#0
 398 002e 201C     	 add r0,r4,#0
 399 0030 191C     	 add r1,r3,#0
 400 0032 FFF7FEFF 	 bl __aeabi_fadd
 401 0036 031C     	 add r3,r0,#0
  40:../other_functions.c **** }
 402              	 .loc 1 40 0
 403 0038 181C     	 add r0,r3,#0
 404 003a BD46     	 mov sp,r7
 405 003c 05B0     	 add sp,sp,#20
 406              	 
 407 003e 90BD     	 pop {r4,r7,pc}
 408              	 .cfi_endproc
 409              	.LFE4:
 411              	 .global __aeabi_i2f
 412              	 .global __aeabi_fdiv
 413              	 .section .text.average,"ax",%progbits
 414              	 .align 2
 415              	 .global average
 416              	 .code 16
 417              	 .thumb_func
 419              	average:
 420              	.LFB5:
  41:../other_functions.c **** 
  42:../other_functions.c **** float average(float a[],int num_values) {
 421              	 .loc 1 42 0
 422              	 .cfi_startproc
 423 0000 80B5     	 push {r7,lr}
 424              	.LCFI15:
 425              	 .cfi_def_cfa_offset 8
 426              	 .cfi_offset 7,-8
 427              	 .cfi_offset 14,-4
 428 0002 84B0     	 sub sp,sp,#16
 429              	.LCFI16:
 430              	 .cfi_def_cfa_offset 24
 431 0004 00AF     	 add r7,sp,#0
 432              	.LCFI17:
 433              	 .cfi_def_cfa_register 7
 434 0006 7860     	 str r0,[r7,#4]
 435 0008 3960     	 str r1,[r7]
  43:../other_functions.c ****     float sum = 0;
 436              	 .loc 1 43 0
 437 000a 0023     	 mov r3,#0
 438 000c FB60     	 str r3,[r7,#12]
  44:../other_functions.c ****     int i;
  45:../other_functions.c ****     for(i = 0; i < num_values; i++){
 439              	 .loc 1 45 0
 440 000e 0023     	 mov r3,#0
 441 0010 BB60     	 str r3,[r7,#8]
 442 0012 0DE0     	 b .L16
 443              	.L17:
  46:../other_functions.c ****         sum += a[i];
 444              	 .loc 1 46 0 discriminator 3
 445 0014 BB68     	 ldr r3,[r7,#8]
 446 0016 9B00     	 lsl r3,r3,#2
 447 0018 7A68     	 ldr r2,[r7,#4]
 448 001a D318     	 add r3,r2,r3
 449 001c 1B68     	 ldr r3,[r3]
 450 001e F868     	 ldr r0,[r7,#12]
 451 0020 191C     	 add r1,r3,#0
 452 0022 FFF7FEFF 	 bl __aeabi_fadd
 453 0026 031C     	 add r3,r0,#0
 454 0028 FB60     	 str r3,[r7,#12]
  45:../other_functions.c ****         sum += a[i];
 455              	 .loc 1 45 0 discriminator 3
 456 002a BB68     	 ldr r3,[r7,#8]
 457 002c 0133     	 add r3,r3,#1
 458 002e BB60     	 str r3,[r7,#8]
 459              	.L16:
  45:../other_functions.c ****         sum += a[i];
 460              	 .loc 1 45 0 is_stmt 0 discriminator 1
 461 0030 BA68     	 ldr r2,[r7,#8]
 462 0032 3B68     	 ldr r3,[r7]
 463 0034 9A42     	 cmp r2,r3
 464 0036 EDDB     	 blt .L17
  47:../other_functions.c ****     }
  48:../other_functions.c ****     return sum / num_values;
 465              	 .loc 1 48 0 is_stmt 1
 466 0038 3868     	 ldr r0,[r7]
 467 003a FFF7FEFF 	 bl __aeabi_i2f
 468 003e 031C     	 add r3,r0,#0
 469 0040 F868     	 ldr r0,[r7,#12]
 470 0042 191C     	 add r1,r3,#0
 471 0044 FFF7FEFF 	 bl __aeabi_fdiv
 472 0048 031C     	 add r3,r0,#0
  49:../other_functions.c **** }
 473              	 .loc 1 49 0
 474 004a 181C     	 add r0,r3,#0
 475 004c BD46     	 mov sp,r7
 476 004e 04B0     	 add sp,sp,#16
 477              	 
 478 0050 80BD     	 pop {r7,pc}
 479              	 .cfi_endproc
 480              	.LFE5:
 482              	 .global __aeabi_fcmpeq
 483              	 .global __aeabi_dcmpeq
 484              	 .global __aeabi_dmul
 485 0052 C046     	 .section .text.angel_of_2D_vetor_deg,"ax",%progbits
 486              	 .align 2
 487              	 .global angel_of_2D_vetor_deg
 488              	 .code 16
 489              	 .thumb_func
 491              	angel_of_2D_vetor_deg:
 492              	.LFB6:
  50:../other_functions.c **** 
  51:../other_functions.c **** float angel_of_2D_vetor_deg(float vector[2]){
 493              	 .loc 1 51 0
 494              	 .cfi_startproc
 495 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 496              	.LCFI18:
 497              	 .cfi_def_cfa_offset 20
 498              	 .cfi_offset 4,-20
 499              	 .cfi_offset 5,-16
 500              	 .cfi_offset 6,-12
 501              	 .cfi_offset 7,-8
 502              	 .cfi_offset 14,-4
 503 0002 85B0     	 sub sp,sp,#20
 504              	.LCFI19:
 505              	 .cfi_def_cfa_offset 40
 506 0004 00AF     	 add r7,sp,#0
 507              	.LCFI20:
 508              	 .cfi_def_cfa_register 7
 509 0006 7860     	 str r0,[r7,#4]
  52:../other_functions.c **** 	float x = vector[0];
 510              	 .loc 1 52 0
 511 0008 7B68     	 ldr r3,[r7,#4]
 512 000a 1B68     	 ldr r3,[r3]
 513 000c FB60     	 str r3,[r7,#12]
  53:../other_functions.c **** 	float y = vector[1];
 514              	 .loc 1 53 0
 515 000e 7B68     	 ldr r3,[r7,#4]
 516 0010 5B68     	 ldr r3,[r3,#4]
 517 0012 BB60     	 str r3,[r7,#8]
  54:../other_functions.c **** 	#define RAD_to_DEG 57.29577951
  55:../other_functions.c **** 
  56:../other_functions.c **** 	if(y == 0){
 518              	 .loc 1 56 0
 519 0014 B868     	 ldr r0,[r7,#8]
 520 0016 0021     	 mov r1,#0
 521 0018 FFF7FEFF 	 bl __aeabi_fcmpeq
 522 001c 031E     	 sub r3,r0,#0
 523 001e 32D0     	 beq .L49
  57:../other_functions.c **** 		if(copysign(1,x) == 1) return 0;
 524              	 .loc 1 57 0
 525 0020 F868     	 ldr r0,[r7,#12]
 526 0022 FFF7FEFF 	 bl __aeabi_f2d
 527 0026 051C     	 mov r5,r0
 528 0028 0E1C     	 mov r6,r1
 529 002a 0023     	 mov r3,#0
 530 002c BC4C     	 ldr r4,.L51
 531 002e 181C     	 mov r0,r3
 532 0030 211C     	 mov r1,r4
 533 0032 2A1C     	 mov r2,r5
 534 0034 331C     	 mov r3,r6
 535 0036 FFF7FEFF 	 bl copysign
 536 003a 031C     	 mov r3,r0
 537 003c 0C1C     	 mov r4,r1
 538 003e 181C     	 mov r0,r3
 539 0040 211C     	 mov r1,r4
 540 0042 0022     	 mov r2,#0
 541 0044 B64B     	 ldr r3,.L51
 542 0046 FFF7FEFF 	 bl __aeabi_dcmpeq
 543 004a 031E     	 sub r3,r0,#0
 544 004c 01D0     	 beq .L50
 545              	 .loc 1 57 0 is_stmt 0 discriminator 1
 546 004e 0023     	 mov r3,#0
 547 0050 61E1     	 b .L19
 548              	.L50:
  58:../other_functions.c **** 		if(copysign(1,x) == -1) return 180;
 549              	 .loc 1 58 0 is_stmt 1
 550 0052 F868     	 ldr r0,[r7,#12]
 551 0054 FFF7FEFF 	 bl __aeabi_f2d
 552 0058 051C     	 mov r5,r0
 553 005a 0E1C     	 mov r6,r1
 554 005c 0023     	 mov r3,#0
 555 005e B04C     	 ldr r4,.L51
 556 0060 181C     	 mov r0,r3
 557 0062 211C     	 mov r1,r4
 558 0064 2A1C     	 mov r2,r5
 559 0066 331C     	 mov r3,r6
 560 0068 FFF7FEFF 	 bl copysign
 561 006c 031C     	 mov r3,r0
 562 006e 0C1C     	 mov r4,r1
 563 0070 181C     	 mov r0,r3
 564 0072 211C     	 mov r1,r4
 565 0074 0022     	 mov r2,#0
 566 0076 AB4B     	 ldr r3,.L51+4
 567 0078 FFF7FEFF 	 bl __aeabi_dcmpeq
 568 007c 031E     	 sub r3,r0,#0
 569 007e 00D1     	 bne .LCB510
 570 0080 49E1     	 b .L25
 571              	.LCB510:
 572              	 .loc 1 58 0 is_stmt 0 discriminator 1
 573 0082 A94B     	 ldr r3,.L51+8
 574 0084 47E1     	 b .L19
 575              	.L49:
  59:../other_functions.c **** 	}
  60:../other_functions.c **** 	else{
  61:../other_functions.c **** 		if(copysign(1,x) == 1 && copysign(1,y) == 1) return  atan(x / y) * RAD_to_DEG;
 576              	 .loc 1 61 0 is_stmt 1
 577 0086 F868     	 ldr r0,[r7,#12]
 578 0088 FFF7FEFF 	 bl __aeabi_f2d
 579 008c 051C     	 mov r5,r0
 580 008e 0E1C     	 mov r6,r1
 581 0090 0023     	 mov r3,#0
 582 0092 A34C     	 ldr r4,.L51
 583 0094 181C     	 mov r0,r3
 584 0096 211C     	 mov r1,r4
 585 0098 2A1C     	 mov r2,r5
 586 009a 331C     	 mov r3,r6
 587 009c FFF7FEFF 	 bl copysign
 588 00a0 031C     	 mov r3,r0
 589 00a2 0C1C     	 mov r4,r1
 590 00a4 181C     	 mov r0,r3
 591 00a6 211C     	 mov r1,r4
 592 00a8 0022     	 mov r2,#0
 593 00aa 9D4B     	 ldr r3,.L51
 594 00ac FFF7FEFF 	 bl __aeabi_dcmpeq
 595 00b0 031E     	 sub r3,r0,#0
 596 00b2 34D0     	 beq .L27
 597              	 .loc 1 61 0 is_stmt 0 discriminator 1
 598 00b4 B868     	 ldr r0,[r7,#8]
 599 00b6 FFF7FEFF 	 bl __aeabi_f2d
 600 00ba 051C     	 mov r5,r0
 601 00bc 0E1C     	 mov r6,r1
 602 00be 0023     	 mov r3,#0
 603 00c0 974C     	 ldr r4,.L51
 604 00c2 181C     	 mov r0,r3
 605 00c4 211C     	 mov r1,r4
 606 00c6 2A1C     	 mov r2,r5
 607 00c8 331C     	 mov r3,r6
 608 00ca FFF7FEFF 	 bl copysign
 609 00ce 031C     	 mov r3,r0
 610 00d0 0C1C     	 mov r4,r1
 611 00d2 181C     	 mov r0,r3
 612 00d4 211C     	 mov r1,r4
 613 00d6 0022     	 mov r2,#0
 614 00d8 914B     	 ldr r3,.L51
 615 00da FFF7FEFF 	 bl __aeabi_dcmpeq
 616 00de 031E     	 sub r3,r0,#0
 617 00e0 1DD0     	 beq .L27
 618              	 .loc 1 61 0 discriminator 2
 619 00e2 F868     	 ldr r0,[r7,#12]
 620 00e4 B968     	 ldr r1,[r7,#8]
 621 00e6 FFF7FEFF 	 bl __aeabi_fdiv
 622 00ea 031C     	 add r3,r0,#0
 623 00ec 181C     	 add r0,r3,#0
 624 00ee FFF7FEFF 	 bl __aeabi_f2d
 625 00f2 031C     	 mov r3,r0
 626 00f4 0C1C     	 mov r4,r1
 627 00f6 181C     	 mov r0,r3
 628 00f8 211C     	 mov r1,r4
 629 00fa FFF7FEFF 	 bl atan
 630 00fe 031C     	 mov r3,r0
 631 0100 0C1C     	 mov r4,r1
 632 0102 181C     	 mov r0,r3
 633 0104 211C     	 mov r1,r4
 634 0106 894A     	 ldr r2,.L51+12
 635 0108 894B     	 ldr r3,.L51+16
 636 010a FFF7FEFF 	 bl __aeabi_dmul
 637 010e 031C     	 mov r3,r0
 638 0110 0C1C     	 mov r4,r1
 639 0112 181C     	 mov r0,r3
 640 0114 211C     	 mov r1,r4
 641 0116 FFF7FEFF 	 bl __aeabi_d2f
 642 011a 031C     	 add r3,r0,#0
 643 011c FBE0     	 b .L19
 644              	.L27:
  62:../other_functions.c **** 		else if(copysign(1,x) == -1 && copysign(1,y) == 1) return 180 + ( atan(x / y) * RAD_to_DEG);
 645              	 .loc 1 62 0 is_stmt 1
 646 011e F868     	 ldr r0,[r7,#12]
 647 0120 FFF7FEFF 	 bl __aeabi_f2d
 648 0124 051C     	 mov r5,r0
 649 0126 0E1C     	 mov r6,r1
 650 0128 0023     	 mov r3,#0
 651 012a 7D4C     	 ldr r4,.L51
 652 012c 181C     	 mov r0,r3
 653 012e 211C     	 mov r1,r4
 654 0130 2A1C     	 mov r2,r5
 655 0132 331C     	 mov r3,r6
 656 0134 FFF7FEFF 	 bl copysign
 657 0138 031C     	 mov r3,r0
 658 013a 0C1C     	 mov r4,r1
 659 013c 181C     	 mov r0,r3
 660 013e 211C     	 mov r1,r4
 661 0140 0022     	 mov r2,#0
 662 0142 784B     	 ldr r3,.L51+4
 663 0144 FFF7FEFF 	 bl __aeabi_dcmpeq
 664 0148 031E     	 sub r3,r0,#0
 665 014a 3CD0     	 beq .L30
 666              	 .loc 1 62 0 is_stmt 0 discriminator 1
 667 014c B868     	 ldr r0,[r7,#8]
 668 014e FFF7FEFF 	 bl __aeabi_f2d
 669 0152 051C     	 mov r5,r0
 670 0154 0E1C     	 mov r6,r1
 671 0156 0023     	 mov r3,#0
 672 0158 714C     	 ldr r4,.L51
 673 015a 181C     	 mov r0,r3
 674 015c 211C     	 mov r1,r4
 675 015e 2A1C     	 mov r2,r5
 676 0160 331C     	 mov r3,r6
 677 0162 FFF7FEFF 	 bl copysign
 678 0166 031C     	 mov r3,r0
 679 0168 0C1C     	 mov r4,r1
 680 016a 181C     	 mov r0,r3
 681 016c 211C     	 mov r1,r4
 682 016e 0022     	 mov r2,#0
 683 0170 6B4B     	 ldr r3,.L51
 684 0172 FFF7FEFF 	 bl __aeabi_dcmpeq
 685 0176 031E     	 sub r3,r0,#0
 686 0178 25D0     	 beq .L30
 687              	 .loc 1 62 0 discriminator 2
 688 017a F868     	 ldr r0,[r7,#12]
 689 017c B968     	 ldr r1,[r7,#8]
 690 017e FFF7FEFF 	 bl __aeabi_fdiv
 691 0182 031C     	 add r3,r0,#0
 692 0184 181C     	 add r0,r3,#0
 693 0186 FFF7FEFF 	 bl __aeabi_f2d
 694 018a 031C     	 mov r3,r0
 695 018c 0C1C     	 mov r4,r1
 696 018e 181C     	 mov r0,r3
 697 0190 211C     	 mov r1,r4
 698 0192 FFF7FEFF 	 bl atan
 699 0196 031C     	 mov r3,r0
 700 0198 0C1C     	 mov r4,r1
 701 019a 181C     	 mov r0,r3
 702 019c 211C     	 mov r1,r4
 703 019e 634A     	 ldr r2,.L51+12
 704 01a0 634B     	 ldr r3,.L51+16
 705 01a2 FFF7FEFF 	 bl __aeabi_dmul
 706 01a6 031C     	 mov r3,r0
 707 01a8 0C1C     	 mov r4,r1
 708 01aa 181C     	 mov r0,r3
 709 01ac 211C     	 mov r1,r4
 710 01ae 0022     	 mov r2,#0
 711 01b0 604B     	 ldr r3,.L51+20
 712 01b2 FFF7FEFF 	 bl __aeabi_dadd
 713 01b6 031C     	 mov r3,r0
 714 01b8 0C1C     	 mov r4,r1
 715 01ba 181C     	 mov r0,r3
 716 01bc 211C     	 mov r1,r4
 717 01be FFF7FEFF 	 bl __aeabi_d2f
 718 01c2 031C     	 add r3,r0,#0
 719 01c4 A7E0     	 b .L19
 720              	.L30:
  63:../other_functions.c **** 		else if(copysign(1,x) == 1 && copysign(1,y) == -1) return  180 + (atan(x / y) * RAD_to_DEG);
 721              	 .loc 1 63 0 is_stmt 1
 722 01c6 F868     	 ldr r0,[r7,#12]
 723 01c8 FFF7FEFF 	 bl __aeabi_f2d
 724 01cc 051C     	 mov r5,r0
 725 01ce 0E1C     	 mov r6,r1
 726 01d0 0023     	 mov r3,#0
 727 01d2 534C     	 ldr r4,.L51
 728 01d4 181C     	 mov r0,r3
 729 01d6 211C     	 mov r1,r4
 730 01d8 2A1C     	 mov r2,r5
 731 01da 331C     	 mov r3,r6
 732 01dc FFF7FEFF 	 bl copysign
 733 01e0 031C     	 mov r3,r0
 734 01e2 0C1C     	 mov r4,r1
 735 01e4 181C     	 mov r0,r3
 736 01e6 211C     	 mov r1,r4
 737 01e8 0022     	 mov r2,#0
 738 01ea 4D4B     	 ldr r3,.L51
 739 01ec FFF7FEFF 	 bl __aeabi_dcmpeq
 740 01f0 031E     	 sub r3,r0,#0
 741 01f2 3CD0     	 beq .L33
 742              	 .loc 1 63 0 is_stmt 0 discriminator 1
 743 01f4 B868     	 ldr r0,[r7,#8]
 744 01f6 FFF7FEFF 	 bl __aeabi_f2d
 745 01fa 051C     	 mov r5,r0
 746 01fc 0E1C     	 mov r6,r1
 747 01fe 0023     	 mov r3,#0
 748 0200 474C     	 ldr r4,.L51
 749 0202 181C     	 mov r0,r3
 750 0204 211C     	 mov r1,r4
 751 0206 2A1C     	 mov r2,r5
 752 0208 331C     	 mov r3,r6
 753 020a FFF7FEFF 	 bl copysign
 754 020e 031C     	 mov r3,r0
 755 0210 0C1C     	 mov r4,r1
 756 0212 181C     	 mov r0,r3
 757 0214 211C     	 mov r1,r4
 758 0216 0022     	 mov r2,#0
 759 0218 424B     	 ldr r3,.L51+4
 760 021a FFF7FEFF 	 bl __aeabi_dcmpeq
 761 021e 031E     	 sub r3,r0,#0
 762 0220 25D0     	 beq .L33
 763              	 .loc 1 63 0 discriminator 2
 764 0222 F868     	 ldr r0,[r7,#12]
 765 0224 B968     	 ldr r1,[r7,#8]
 766 0226 FFF7FEFF 	 bl __aeabi_fdiv
 767 022a 031C     	 add r3,r0,#0
 768 022c 181C     	 add r0,r3,#0
 769 022e FFF7FEFF 	 bl __aeabi_f2d
 770 0232 031C     	 mov r3,r0
 771 0234 0C1C     	 mov r4,r1
 772 0236 181C     	 mov r0,r3
 773 0238 211C     	 mov r1,r4
 774 023a FFF7FEFF 	 bl atan
 775 023e 031C     	 mov r3,r0
 776 0240 0C1C     	 mov r4,r1
 777 0242 181C     	 mov r0,r3
 778 0244 211C     	 mov r1,r4
 779 0246 394A     	 ldr r2,.L51+12
 780 0248 394B     	 ldr r3,.L51+16
 781 024a FFF7FEFF 	 bl __aeabi_dmul
 782 024e 031C     	 mov r3,r0
 783 0250 0C1C     	 mov r4,r1
 784 0252 181C     	 mov r0,r3
 785 0254 211C     	 mov r1,r4
 786 0256 0022     	 mov r2,#0
 787 0258 364B     	 ldr r3,.L51+20
 788 025a FFF7FEFF 	 bl __aeabi_dadd
 789 025e 031C     	 mov r3,r0
 790 0260 0C1C     	 mov r4,r1
 791 0262 181C     	 mov r0,r3
 792 0264 211C     	 mov r1,r4
 793 0266 FFF7FEFF 	 bl __aeabi_d2f
 794 026a 031C     	 add r3,r0,#0
 795 026c 53E0     	 b .L19
 796              	.L33:
  64:../other_functions.c **** 		else if(copysign(-1,x) == -1 && copysign(1,y) == -1) return 360 + (atan(x / y) * RAD_to_DEG);
 797              	 .loc 1 64 0 is_stmt 1
 798 026e F868     	 ldr r0,[r7,#12]
 799 0270 FFF7FEFF 	 bl __aeabi_f2d
 800 0274 051C     	 mov r5,r0
 801 0276 0E1C     	 mov r6,r1
 802 0278 0023     	 mov r3,#0
 803 027a 2A4C     	 ldr r4,.L51+4
 804 027c 181C     	 mov r0,r3
 805 027e 211C     	 mov r1,r4
 806 0280 2A1C     	 mov r2,r5
 807 0282 331C     	 mov r3,r6
 808 0284 FFF7FEFF 	 bl copysign
 809 0288 031C     	 mov r3,r0
 810 028a 0C1C     	 mov r4,r1
 811 028c 181C     	 mov r0,r3
 812 028e 211C     	 mov r1,r4
 813 0290 0022     	 mov r2,#0
 814 0292 244B     	 ldr r3,.L51+4
 815 0294 FFF7FEFF 	 bl __aeabi_dcmpeq
 816 0298 031E     	 sub r3,r0,#0
 817 029a 3CD0     	 beq .L25
 818              	 .loc 1 64 0 is_stmt 0 discriminator 1
 819 029c B868     	 ldr r0,[r7,#8]
 820 029e FFF7FEFF 	 bl __aeabi_f2d
 821 02a2 051C     	 mov r5,r0
 822 02a4 0E1C     	 mov r6,r1
 823 02a6 0023     	 mov r3,#0
 824 02a8 1D4C     	 ldr r4,.L51
 825 02aa 181C     	 mov r0,r3
 826 02ac 211C     	 mov r1,r4
 827 02ae 2A1C     	 mov r2,r5
 828 02b0 331C     	 mov r3,r6
 829 02b2 FFF7FEFF 	 bl copysign
 830 02b6 031C     	 mov r3,r0
 831 02b8 0C1C     	 mov r4,r1
 832 02ba 181C     	 mov r0,r3
 833 02bc 211C     	 mov r1,r4
 834 02be 0022     	 mov r2,#0
 835 02c0 184B     	 ldr r3,.L51+4
 836 02c2 FFF7FEFF 	 bl __aeabi_dcmpeq
 837 02c6 031E     	 sub r3,r0,#0
 838 02c8 25D0     	 beq .L25
 839              	 .loc 1 64 0 discriminator 2
 840 02ca F868     	 ldr r0,[r7,#12]
 841 02cc B968     	 ldr r1,[r7,#8]
 842 02ce FFF7FEFF 	 bl __aeabi_fdiv
 843 02d2 031C     	 add r3,r0,#0
 844 02d4 181C     	 add r0,r3,#0
 845 02d6 FFF7FEFF 	 bl __aeabi_f2d
 846 02da 031C     	 mov r3,r0
 847 02dc 0C1C     	 mov r4,r1
 848 02de 181C     	 mov r0,r3
 849 02e0 211C     	 mov r1,r4
 850 02e2 FFF7FEFF 	 bl atan
 851 02e6 031C     	 mov r3,r0
 852 02e8 0C1C     	 mov r4,r1
 853 02ea 181C     	 mov r0,r3
 854 02ec 211C     	 mov r1,r4
 855 02ee 0F4A     	 ldr r2,.L51+12
 856 02f0 0F4B     	 ldr r3,.L51+16
 857 02f2 FFF7FEFF 	 bl __aeabi_dmul
 858 02f6 031C     	 mov r3,r0
 859 02f8 0C1C     	 mov r4,r1
 860 02fa 181C     	 mov r0,r3
 861 02fc 211C     	 mov r1,r4
 862 02fe 0022     	 mov r2,#0
 863 0300 0D4B     	 ldr r3,.L51+24
 864 0302 FFF7FEFF 	 bl __aeabi_dadd
 865 0306 031C     	 mov r3,r0
 866 0308 0C1C     	 mov r4,r1
 867 030a 181C     	 mov r0,r3
 868 030c 211C     	 mov r1,r4
 869 030e FFF7FEFF 	 bl __aeabi_d2f
 870 0312 031C     	 add r3,r0,#0
 871 0314 FFE7     	 b .L19
 872              	.L25:
 873              	.L19:
  65:../other_functions.c **** 	}
  66:../other_functions.c **** }
 874              	 .loc 1 66 0 is_stmt 1
 875 0316 181C     	 add r0,r3,#0
 876 0318 BD46     	 mov sp,r7
 877 031a 05B0     	 add sp,sp,#20
 878              	 
 879 031c F0BD     	 pop {r4,r5,r6,r7,pc}
 880              	.L52:
 881 031e C046     	 .align 2
 882              	.L51:
 883 0320 0000F03F 	 .word 1072693248
 884 0324 0000F0BF 	 .word -1074790400
 885 0328 00003443 	 .word 1127481344
 886 032c 72235D1A 	 .word 442311538
 887 0330 DCA54C40 	 .word 1078765020
 888 0334 00806640 	 .word 1080459264
 889 0338 00807640 	 .word 1081507840
 890              	 .cfi_endproc
 891              	.LFE6:
 893              	 .text
 894              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 other_functions.c
    {standard input}:21     .text.within_MAX_MIN:00000000 $t
    {standard input}:26     .text.within_MAX_MIN:00000000 within_MAX_MIN
    {standard input}:87     .text.distance_trajectory_obstacel:00000000 $t
    {standard input}:92     .text.distance_trajectory_obstacel:00000000 distance_trajectory_obstacel
    {standard input}:195    .text.pythagoras:00000000 $t
    {standard input}:200    .text.pythagoras:00000000 pythagoras
    {standard input}:275    .text.vector_abs_value:00000000 $t
    {standard input}:280    .text.vector_abs_value:00000000 vector_abs_value
    {standard input}:359    .text.Exp_moving_average:00000000 $t
    {standard input}:364    .text.Exp_moving_average:00000000 Exp_moving_average
    {standard input}:414    .text.average:00000000 $t
    {standard input}:419    .text.average:00000000 average
    {standard input}:486    .text.angel_of_2D_vetor_deg:00000000 $t
    {standard input}:491    .text.angel_of_2D_vetor_deg:00000000 angel_of_2D_vetor_deg
    {standard input}:883    .text.angel_of_2D_vetor_deg:00000320 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fsub
__aeabi_fmul
__aeabi_fcmple
__aeabi_fadd
__aeabi_f2d
__aeabi_dadd
__aeabi_ddiv
__aeabi_d2f
pow
sqrt
__aeabi_i2f
__aeabi_fdiv
__aeabi_fcmpeq
__aeabi_dcmpeq
__aeabi_dmul
copysign
atan
