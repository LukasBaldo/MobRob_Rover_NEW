
MobRob_Steering_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c4cc  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  1000d4cc  1000d4cc  0000d4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .VENEER_Code  00000144  2000000c  1000d4d4  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  4 .data         0000037c  20000550  1000d618  00010550  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000264  200008cc  0000077c  000108cc  2**2
                  ALLOC
  6 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  7 .debug_aranges 00001010  00000000  00000000  000108d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001df2f  00000000  00000000  000118e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004a52  00000000  00000000  0002f80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000af25  00000000  00000000  00034261  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00003c3c  00000000  00000000  0003f188  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00009938  00000000  00000000  00042dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005048  00000000  00000000  0004c6fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cf0  00000000  00000000  00051748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 000012e6  00000000  00000000  00052438  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	1000d4d4 	.word	0x1000d4d4
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	1000d618 	.word	0x1000d618
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	200008cc 	.word	0x200008cc
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	1000d994 	.word	0x1000d994
	ldr	r2, =__ram_code_start
10001084:	200008cc 	.word	0x200008cc
	ldr	r3, =__ram_code_end
10001088:	200008cc 	.word	0x200008cc
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	200008cc 	.word	0x200008cc
	ldr	r2, =__bss_end
10001090:	20000b30 	.word	0x20000b30
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	1000cd95 	.word	0x1000cd95
    blx  r0
#endif

    ldr  r0, =main
10001098:	100069bd 	.word	0x100069bd

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f002 f992 	bl	100033cc <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f002 f9de 	bl	10003468 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f001 fa86 	bl	10002618 <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f001 fa73 	bl	10002618 <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	200008cc 	.word	0x200008cc
10001168:	200008d0 	.word	0x200008d0
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
10001188:	b580      	push	{r7, lr}
1000118a:	b082      	sub	sp, #8
1000118c:	af00      	add	r7, sp, #0
1000118e:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(eru);
}
10001190:	46bd      	mov	sp, r7
10001192:	b002      	add	sp, #8
10001194:	bd80      	pop	{r7, pc}
10001196:	46c0      	nop			; (mov r8, r8)

10001198 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001198:	b590      	push	{r4, r7, lr}
1000119a:	b085      	sub	sp, #20
1000119c:	af00      	add	r7, sp, #0
1000119e:	60f8      	str	r0, [r7, #12]
100011a0:	607a      	str	r2, [r7, #4]
100011a2:	230b      	movs	r3, #11
100011a4:	18fb      	adds	r3, r7, r3
100011a6:	1c0a      	adds	r2, r1, #0
100011a8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100011aa:	230b      	movs	r3, #11
100011ac:	18fb      	adds	r3, r7, r3
100011ae:	781b      	ldrb	r3, [r3, #0]
100011b0:	089b      	lsrs	r3, r3, #2
100011b2:	b2db      	uxtb	r3, r3
100011b4:	1c18      	adds	r0, r3, #0
100011b6:	230b      	movs	r3, #11
100011b8:	18fb      	adds	r3, r7, r3
100011ba:	781b      	ldrb	r3, [r3, #0]
100011bc:	089b      	lsrs	r3, r3, #2
100011be:	b2db      	uxtb	r3, r3
100011c0:	1c1a      	adds	r2, r3, #0
100011c2:	68fb      	ldr	r3, [r7, #12]
100011c4:	3204      	adds	r2, #4
100011c6:	0092      	lsls	r2, r2, #2
100011c8:	58d3      	ldr	r3, [r2, r3]
100011ca:	220b      	movs	r2, #11
100011cc:	18ba      	adds	r2, r7, r2
100011ce:	7812      	ldrb	r2, [r2, #0]
100011d0:	2103      	movs	r1, #3
100011d2:	400a      	ands	r2, r1
100011d4:	00d2      	lsls	r2, r2, #3
100011d6:	1c11      	adds	r1, r2, #0
100011d8:	22fc      	movs	r2, #252	; 0xfc
100011da:	408a      	lsls	r2, r1
100011dc:	43d2      	mvns	r2, r2
100011de:	401a      	ands	r2, r3
100011e0:	1c11      	adds	r1, r2, #0
100011e2:	68fb      	ldr	r3, [r7, #12]
100011e4:	1d02      	adds	r2, r0, #4
100011e6:	0092      	lsls	r2, r2, #2
100011e8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011ea:	68fb      	ldr	r3, [r7, #12]
100011ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011ee:	220b      	movs	r2, #11
100011f0:	18ba      	adds	r2, r7, r2
100011f2:	7812      	ldrb	r2, [r2, #0]
100011f4:	0052      	lsls	r2, r2, #1
100011f6:	1c11      	adds	r1, r2, #0
100011f8:	2203      	movs	r2, #3
100011fa:	408a      	lsls	r2, r1
100011fc:	43d2      	mvns	r2, r2
100011fe:	401a      	ands	r2, r3
10001200:	68fb      	ldr	r3, [r7, #12]
10001202:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001204:	230b      	movs	r3, #11
10001206:	18fb      	adds	r3, r7, r3
10001208:	781b      	ldrb	r3, [r3, #0]
1000120a:	08db      	lsrs	r3, r3, #3
1000120c:	b2db      	uxtb	r3, r3
1000120e:	1c18      	adds	r0, r3, #0
10001210:	230b      	movs	r3, #11
10001212:	18fb      	adds	r3, r7, r3
10001214:	781b      	ldrb	r3, [r3, #0]
10001216:	08db      	lsrs	r3, r3, #3
10001218:	b2db      	uxtb	r3, r3
1000121a:	1c1a      	adds	r2, r3, #0
1000121c:	68fb      	ldr	r3, [r7, #12]
1000121e:	3210      	adds	r2, #16
10001220:	0092      	lsls	r2, r2, #2
10001222:	58d3      	ldr	r3, [r2, r3]
10001224:	220b      	movs	r2, #11
10001226:	18ba      	adds	r2, r7, r2
10001228:	7812      	ldrb	r2, [r2, #0]
1000122a:	2107      	movs	r1, #7
1000122c:	400a      	ands	r2, r1
1000122e:	0092      	lsls	r2, r2, #2
10001230:	1c11      	adds	r1, r2, #0
10001232:	2204      	movs	r2, #4
10001234:	408a      	lsls	r2, r1
10001236:	43d2      	mvns	r2, r2
10001238:	401a      	ands	r2, r3
1000123a:	1c11      	adds	r1, r2, #0
1000123c:	68fb      	ldr	r3, [r7, #12]
1000123e:	1c02      	adds	r2, r0, #0
10001240:	3210      	adds	r2, #16
10001242:	0092      	lsls	r2, r2, #2
10001244:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001246:	230b      	movs	r3, #11
10001248:	18fb      	adds	r3, r7, r3
1000124a:	781b      	ldrb	r3, [r3, #0]
1000124c:	08db      	lsrs	r3, r3, #3
1000124e:	b2db      	uxtb	r3, r3
10001250:	1c18      	adds	r0, r3, #0
10001252:	230b      	movs	r3, #11
10001254:	18fb      	adds	r3, r7, r3
10001256:	781b      	ldrb	r3, [r3, #0]
10001258:	08db      	lsrs	r3, r3, #3
1000125a:	b2db      	uxtb	r3, r3
1000125c:	1c1a      	adds	r2, r3, #0
1000125e:	68fb      	ldr	r3, [r7, #12]
10001260:	3210      	adds	r2, #16
10001262:	0092      	lsls	r2, r2, #2
10001264:	58d2      	ldr	r2, [r2, r3]
10001266:	687b      	ldr	r3, [r7, #4]
10001268:	785b      	ldrb	r3, [r3, #1]
1000126a:	1c1c      	adds	r4, r3, #0
1000126c:	230b      	movs	r3, #11
1000126e:	18fb      	adds	r3, r7, r3
10001270:	781b      	ldrb	r3, [r3, #0]
10001272:	2107      	movs	r1, #7
10001274:	400b      	ands	r3, r1
10001276:	009b      	lsls	r3, r3, #2
10001278:	409c      	lsls	r4, r3
1000127a:	1c23      	adds	r3, r4, #0
1000127c:	431a      	orrs	r2, r3
1000127e:	1c11      	adds	r1, r2, #0
10001280:	68fb      	ldr	r3, [r7, #12]
10001282:	1c02      	adds	r2, r0, #0
10001284:	3210      	adds	r2, #16
10001286:	0092      	lsls	r2, r2, #2
10001288:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000128a:	68fb      	ldr	r3, [r7, #12]
1000128c:	4a20      	ldr	r2, [pc, #128]	; (10001310 <XMC_GPIO_Init+0x178>)
1000128e:	4293      	cmp	r3, r2
10001290:	d10b      	bne.n	100012aa <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001292:	68fb      	ldr	r3, [r7, #12]
10001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001296:	220b      	movs	r2, #11
10001298:	18ba      	adds	r2, r7, r2
1000129a:	7812      	ldrb	r2, [r2, #0]
1000129c:	2101      	movs	r1, #1
1000129e:	4091      	lsls	r1, r2
100012a0:	1c0a      	adds	r2, r1, #0
100012a2:	43d2      	mvns	r2, r2
100012a4:	401a      	ands	r2, r3
100012a6:	68fb      	ldr	r3, [r7, #12]
100012a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
100012aa:	687b      	ldr	r3, [r7, #4]
100012ac:	781b      	ldrb	r3, [r3, #0]
100012ae:	b2db      	uxtb	r3, r3
100012b0:	b25b      	sxtb	r3, r3
100012b2:	2b00      	cmp	r3, #0
100012b4:	da07      	bge.n	100012c6 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
100012b6:	687b      	ldr	r3, [r7, #4]
100012b8:	685a      	ldr	r2, [r3, #4]
100012ba:	230b      	movs	r3, #11
100012bc:	18fb      	adds	r3, r7, r3
100012be:	781b      	ldrb	r3, [r3, #0]
100012c0:	409a      	lsls	r2, r3
100012c2:	68fb      	ldr	r3, [r7, #12]
100012c4:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012c6:	230b      	movs	r3, #11
100012c8:	18fb      	adds	r3, r7, r3
100012ca:	781b      	ldrb	r3, [r3, #0]
100012cc:	089b      	lsrs	r3, r3, #2
100012ce:	b2db      	uxtb	r3, r3
100012d0:	1c18      	adds	r0, r3, #0
100012d2:	230b      	movs	r3, #11
100012d4:	18fb      	adds	r3, r7, r3
100012d6:	781b      	ldrb	r3, [r3, #0]
100012d8:	089b      	lsrs	r3, r3, #2
100012da:	b2db      	uxtb	r3, r3
100012dc:	1c1a      	adds	r2, r3, #0
100012de:	68fb      	ldr	r3, [r7, #12]
100012e0:	3204      	adds	r2, #4
100012e2:	0092      	lsls	r2, r2, #2
100012e4:	58d2      	ldr	r2, [r2, r3]
100012e6:	687b      	ldr	r3, [r7, #4]
100012e8:	781b      	ldrb	r3, [r3, #0]
100012ea:	1c1c      	adds	r4, r3, #0
100012ec:	230b      	movs	r3, #11
100012ee:	18fb      	adds	r3, r7, r3
100012f0:	781b      	ldrb	r3, [r3, #0]
100012f2:	2103      	movs	r1, #3
100012f4:	400b      	ands	r3, r1
100012f6:	00db      	lsls	r3, r3, #3
100012f8:	409c      	lsls	r4, r3
100012fa:	1c23      	adds	r3, r4, #0
100012fc:	431a      	orrs	r2, r3
100012fe:	1c11      	adds	r1, r2, #0
10001300:	68fb      	ldr	r3, [r7, #12]
10001302:	1d02      	adds	r2, r0, #4
10001304:	0092      	lsls	r2, r2, #2
10001306:	50d1      	str	r1, [r2, r3]
}
10001308:	46bd      	mov	sp, r7
1000130a:	b005      	add	sp, #20
1000130c:	bd90      	pop	{r4, r7, pc}
1000130e:	46c0      	nop			; (mov r8, r8)
10001310:	40040200 	.word	0x40040200

10001314 <XMC_SCU_INTERRUPT_EnableEvent>:
}
#endif

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
10001314:	b5b0      	push	{r4, r5, r7, lr}
10001316:	b082      	sub	sp, #8
10001318:	af00      	add	r7, sp, #0
1000131a:	6038      	str	r0, [r7, #0]
1000131c:	6079      	str	r1, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
1000131e:	4b09      	ldr	r3, [pc, #36]	; (10001344 <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
10001320:	4a08      	ldr	r2, [pc, #32]	; (10001344 <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
10001322:	6851      	ldr	r1, [r2, #4]
10001324:	683a      	ldr	r2, [r7, #0]
10001326:	430a      	orrs	r2, r1
10001328:	605a      	str	r2, [r3, #4]
#if UC_SERIES == XMC14
  SCU_INTERRUPT->SRMSK1 |= (uint32_t)(event >> 32U);
1000132a:	4b06      	ldr	r3, [pc, #24]	; (10001344 <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
1000132c:	4a05      	ldr	r2, [pc, #20]	; (10001344 <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
1000132e:	6a52      	ldr	r2, [r2, #36]	; 0x24
10001330:	6879      	ldr	r1, [r7, #4]
10001332:	000c      	movs	r4, r1
10001334:	2100      	movs	r1, #0
10001336:	1c0d      	adds	r5, r1, #0
10001338:	1c21      	adds	r1, r4, #0
1000133a:	430a      	orrs	r2, r1
1000133c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
}
1000133e:	46bd      	mov	sp, r7
10001340:	b002      	add	sp, #8
10001342:	bdb0      	pop	{r4, r5, r7, pc}
10001344:	40010038 	.word	0x40010038

10001348 <XMC_SCU_INTERUPT_GetEventStatus>:
#endif
}

/* API to get the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
10001348:	b5b0      	push	{r4, r5, r7, lr}
1000134a:	b082      	sub	sp, #8
1000134c:	af00      	add	r7, sp, #0
  XMC_SCU_INTERRUPT_EVENT_t tmp;

  tmp = SCU_INTERRUPT->SRRAW;
1000134e:	4b0e      	ldr	r3, [pc, #56]	; (10001388 <XMC_SCU_INTERUPT_GetEventStatus+0x40>)
10001350:	681b      	ldr	r3, [r3, #0]
10001352:	603b      	str	r3, [r7, #0]
10001354:	2300      	movs	r3, #0
10001356:	607b      	str	r3, [r7, #4]
#if UC_SERIES == XMC14
  tmp |= ((int64_t)SCU_INTERRUPT->SRRAW1 << 32U);
10001358:	4b0b      	ldr	r3, [pc, #44]	; (10001388 <XMC_SCU_INTERUPT_GetEventStatus+0x40>)
1000135a:	6a1b      	ldr	r3, [r3, #32]
1000135c:	1c1c      	adds	r4, r3, #0
1000135e:	2300      	movs	r3, #0
10001360:	1c1d      	adds	r5, r3, #0
10001362:	0022      	movs	r2, r4
10001364:	2300      	movs	r3, #0
10001366:	1c19      	adds	r1, r3, #0
10001368:	1c0b      	adds	r3, r1, #0
1000136a:	1c14      	adds	r4, r2, #0
1000136c:	683a      	ldr	r2, [r7, #0]
1000136e:	431a      	orrs	r2, r3
10001370:	603a      	str	r2, [r7, #0]
10001372:	687a      	ldr	r2, [r7, #4]
10001374:	4322      	orrs	r2, r4
10001376:	1c13      	adds	r3, r2, #0
10001378:	607b      	str	r3, [r7, #4]
#endif
  return (tmp);
1000137a:	683b      	ldr	r3, [r7, #0]
1000137c:	687c      	ldr	r4, [r7, #4]
}
1000137e:	1c18      	adds	r0, r3, #0
10001380:	1c21      	adds	r1, r4, #0
10001382:	46bd      	mov	sp, r7
10001384:	b002      	add	sp, #8
10001386:	bdb0      	pop	{r4, r5, r7, pc}
10001388:	40010038 	.word	0x40010038

1000138c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
1000138c:	b5b0      	push	{r4, r5, r7, lr}
1000138e:	b082      	sub	sp, #8
10001390:	af00      	add	r7, sp, #0
10001392:	6038      	str	r0, [r7, #0]
10001394:	6079      	str	r1, [r7, #4]
  SCU_INTERRUPT->SRCLR |= (uint32_t)event;
10001396:	4b09      	ldr	r3, [pc, #36]	; (100013bc <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
10001398:	4a08      	ldr	r2, [pc, #32]	; (100013bc <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
1000139a:	6891      	ldr	r1, [r2, #8]
1000139c:	683a      	ldr	r2, [r7, #0]
1000139e:	430a      	orrs	r2, r1
100013a0:	609a      	str	r2, [r3, #8]
#if UC_SERIES == XMC14
  SCU_INTERRUPT->SRCLR1 |= (uint32_t)(event >> 32U);
100013a2:	4b06      	ldr	r3, [pc, #24]	; (100013bc <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
100013a4:	4a05      	ldr	r2, [pc, #20]	; (100013bc <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
100013a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
100013a8:	6879      	ldr	r1, [r7, #4]
100013aa:	000c      	movs	r4, r1
100013ac:	2100      	movs	r1, #0
100013ae:	1c0d      	adds	r5, r1, #0
100013b0:	1c21      	adds	r1, r4, #0
100013b2:	430a      	orrs	r2, r1
100013b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
100013b6:	46bd      	mov	sp, r7
100013b8:	b002      	add	sp, #8
100013ba:	bdb0      	pop	{r4, r5, r7, pc}
100013bc:	40010038 	.word	0x40010038

100013c0 <XMC_SCU_LockProtectedBits>:

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
100013c0:	b580      	push	{r7, lr}
100013c2:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100013c4:	4b02      	ldr	r3, [pc, #8]	; (100013d0 <XMC_SCU_LockProtectedBits+0x10>)
100013c6:	22c3      	movs	r2, #195	; 0xc3
100013c8:	625a      	str	r2, [r3, #36]	; 0x24
}
100013ca:	46bd      	mov	sp, r7
100013cc:	bd80      	pop	{r7, pc}
100013ce:	46c0      	nop			; (mov r8, r8)
100013d0:	40010000 	.word	0x40010000

100013d4 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
100013d4:	b580      	push	{r7, lr}
100013d6:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100013d8:	4b05      	ldr	r3, [pc, #20]	; (100013f0 <XMC_SCU_UnlockProtectedBits+0x1c>)
100013da:	22c0      	movs	r2, #192	; 0xc0
100013dc:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100013de:	46c0      	nop			; (mov r8, r8)
100013e0:	4b03      	ldr	r3, [pc, #12]	; (100013f0 <XMC_SCU_UnlockProtectedBits+0x1c>)
100013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100013e4:	2204      	movs	r2, #4
100013e6:	4013      	ands	r3, r2
100013e8:	d1fa      	bne.n	100013e0 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
100013ea:	46bd      	mov	sp, r7
100013ec:	bd80      	pop	{r7, pc}
100013ee:	46c0      	nop			; (mov r8, r8)
100013f0:	40010000 	.word	0x40010000

100013f4 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
100013f4:	b580      	push	{r7, lr}
100013f6:	b086      	sub	sp, #24
100013f8:	af00      	add	r7, sp, #0
100013fa:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
100013fc:	f7ff ffea 	bl	100013d4 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10001400:	687b      	ldr	r3, [r7, #4]
10001402:	799b      	ldrb	r3, [r3, #6]
10001404:	2b30      	cmp	r3, #48	; 0x30
10001406:	d053      	beq.n	100014b0 <XMC_SCU_CLOCK_Init+0xbc>
  {
    if (OSCHP_GetFrequency() > 20000000U)
10001408:	f7ff feb6 	bl	10001178 <OSCHP_GetFrequency>
1000140c:	1e02      	subs	r2, r0, #0
1000140e:	4b49      	ldr	r3, [pc, #292]	; (10001534 <XMC_SCU_CLOCK_Init+0x140>)
10001410:	429a      	cmp	r2, r3
10001412:	d909      	bls.n	10001428 <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10001414:	4a48      	ldr	r2, [pc, #288]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
10001416:	4948      	ldr	r1, [pc, #288]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
10001418:	2390      	movs	r3, #144	; 0x90
1000141a:	5acb      	ldrh	r3, [r1, r3]
1000141c:	b29b      	uxth	r3, r3
1000141e:	2140      	movs	r1, #64	; 0x40
10001420:	430b      	orrs	r3, r1
10001422:	b299      	uxth	r1, r3
10001424:	2390      	movs	r3, #144	; 0x90
10001426:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001428:	4a43      	ldr	r2, [pc, #268]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
1000142a:	4943      	ldr	r1, [pc, #268]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
1000142c:	2390      	movs	r3, #144	; 0x90
1000142e:	5acb      	ldrh	r3, [r1, r3]
10001430:	b29b      	uxth	r3, r3
10001432:	b29b      	uxth	r3, r3
10001434:	1c19      	adds	r1, r3, #0
10001436:	2332      	movs	r3, #50	; 0x32
10001438:	4399      	bics	r1, r3
1000143a:	1c0b      	adds	r3, r1, #0
1000143c:	b299      	uxth	r1, r3
                               config->oschp_mode;
1000143e:	687b      	ldr	r3, [r7, #4]
10001440:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001442:	b29b      	uxth	r3, r3
10001444:	430b      	orrs	r3, r1
10001446:	b29b      	uxth	r3, r3
10001448:	b299      	uxth	r1, r3
1000144a:	2390      	movs	r3, #144	; 0x90
1000144c:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
1000144e:	4b3b      	ldr	r3, [pc, #236]	; (1000153c <XMC_SCU_CLOCK_Init+0x148>)
10001450:	2202      	movs	r2, #2
10001452:	629a      	str	r2, [r3, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog,
         keeping in between at least one DCO2 cycle */

      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10001454:	4b3a      	ldr	r3, [pc, #232]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001456:	4a3a      	ldr	r2, [pc, #232]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001458:	6952      	ldr	r2, [r2, #20]
1000145a:	493a      	ldr	r1, [pc, #232]	; (10001544 <XMC_SCU_CLOCK_Init+0x150>)
1000145c:	400a      	ands	r2, r1
1000145e:	615a      	str	r2, [r3, #20]
10001460:	4b39      	ldr	r3, [pc, #228]	; (10001548 <XMC_SCU_CLOCK_Init+0x154>)
10001462:	617b      	str	r3, [r7, #20]
10001464:	e000      	b.n	10001468 <XMC_SCU_CLOCK_Init+0x74>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001466:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001468:	697b      	ldr	r3, [r7, #20]
1000146a:	3b01      	subs	r3, #1
1000146c:	617b      	str	r3, [r7, #20]
1000146e:	697b      	ldr	r3, [r7, #20]
10001470:	2b00      	cmp	r3, #0
10001472:	d1f8      	bne.n	10001466 <XMC_SCU_CLOCK_Init+0x72>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);

      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
10001474:	4b32      	ldr	r3, [pc, #200]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001476:	4a32      	ldr	r2, [pc, #200]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001478:	6952      	ldr	r2, [r2, #20]
1000147a:	21c0      	movs	r1, #192	; 0xc0
1000147c:	0489      	lsls	r1, r1, #18
1000147e:	430a      	orrs	r2, r1
10001480:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
10001482:	46c0      	nop			; (mov r8, r8)
10001484:	4b2e      	ldr	r3, [pc, #184]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001486:	695a      	ldr	r2, [r3, #20]
10001488:	2380      	movs	r3, #128	; 0x80
1000148a:	045b      	lsls	r3, r3, #17
1000148c:	4013      	ands	r3, r2
1000148e:	d1f9      	bne.n	10001484 <XMC_SCU_CLOCK_Init+0x90>
10001490:	4b2e      	ldr	r3, [pc, #184]	; (1000154c <XMC_SCU_CLOCK_Init+0x158>)
10001492:	613b      	str	r3, [r7, #16]
10001494:	e000      	b.n	10001498 <XMC_SCU_CLOCK_Init+0xa4>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001496:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001498:	693b      	ldr	r3, [r7, #16]
1000149a:	3b01      	subs	r3, #1
1000149c:	613b      	str	r3, [r7, #16]
1000149e:	693b      	ldr	r3, [r7, #16]
100014a0:	2b00      	cmp	r3, #0
100014a2:	d1f8      	bne.n	10001496 <XMC_SCU_CLOCK_Init+0xa2>
      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);

    }
    while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
100014a4:	4b25      	ldr	r3, [pc, #148]	; (1000153c <XMC_SCU_CLOCK_Init+0x148>)
100014a6:	6a1b      	ldr	r3, [r3, #32]
100014a8:	2202      	movs	r2, #2
100014aa:	4013      	ands	r3, r2
100014ac:	d1cf      	bne.n	1000144e <XMC_SCU_CLOCK_Init+0x5a>
100014ae:	e009      	b.n	100014c4 <XMC_SCU_CLOCK_Init+0xd0>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
100014b0:	4a21      	ldr	r2, [pc, #132]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
100014b2:	4921      	ldr	r1, [pc, #132]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
100014b4:	2390      	movs	r3, #144	; 0x90
100014b6:	5acb      	ldrh	r3, [r1, r3]
100014b8:	b29b      	uxth	r3, r3
100014ba:	2130      	movs	r1, #48	; 0x30
100014bc:	430b      	orrs	r3, r1
100014be:	b299      	uxth	r1, r3
100014c0:	2390      	movs	r3, #144	; 0x90
100014c2:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
100014c4:	4a1c      	ldr	r2, [pc, #112]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
100014c6:	687b      	ldr	r3, [r7, #4]
100014c8:	79db      	ldrb	r3, [r3, #7]
100014ca:	b299      	uxth	r1, r3
100014cc:	238c      	movs	r3, #140	; 0x8c
100014ce:	52d1      	strh	r1, [r2, r3]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
100014d0:	687b      	ldr	r3, [r7, #4]
100014d2:	79db      	ldrb	r3, [r3, #7]
100014d4:	2b00      	cmp	r3, #0
100014d6:	d109      	bne.n	100014ec <XMC_SCU_CLOCK_Init+0xf8>
100014d8:	4b1d      	ldr	r3, [pc, #116]	; (10001550 <XMC_SCU_CLOCK_Init+0x15c>)
100014da:	60fb      	str	r3, [r7, #12]
100014dc:	e000      	b.n	100014e0 <XMC_SCU_CLOCK_Init+0xec>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100014de:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100014e0:	68fb      	ldr	r3, [r7, #12]
100014e2:	3b01      	subs	r3, #1
100014e4:	60fb      	str	r3, [r7, #12]
100014e6:	68fb      	ldr	r3, [r7, #12]
100014e8:	2b00      	cmp	r3, #0
100014ea:	d1f8      	bne.n	100014de <XMC_SCU_CLOCK_Init+0xea>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
100014ec:	4b14      	ldr	r3, [pc, #80]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
100014ee:	4a14      	ldr	r2, [pc, #80]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
100014f0:	69d2      	ldr	r2, [r2, #28]
100014f2:	4918      	ldr	r1, [pc, #96]	; (10001554 <XMC_SCU_CLOCK_Init+0x160>)
100014f4:	400a      	ands	r2, r1
                    config->dclk_src;
100014f6:	6879      	ldr	r1, [r7, #4]
100014f8:	8889      	ldrh	r1, [r1, #4]
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
100014fa:	430a      	orrs	r2, r1
100014fc:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100014fe:	4a10      	ldr	r2, [pc, #64]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001500:	4b0f      	ldr	r3, [pc, #60]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001502:	681b      	ldr	r3, [r3, #0]
10001504:	4914      	ldr	r1, [pc, #80]	; (10001558 <XMC_SCU_CLOCK_Init+0x164>)
10001506:	4019      	ands	r1, r3
                   config->rtc_src |
10001508:	687b      	ldr	r3, [r7, #4]
1000150a:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
1000150c:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
1000150e:	687b      	ldr	r3, [r7, #4]
10001510:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001512:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001514:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
10001516:	f7ff ff53 	bl	100013c0 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000151a:	687b      	ldr	r3, [r7, #4]
1000151c:	789b      	ldrb	r3, [r3, #2]
1000151e:	1c1a      	adds	r2, r3, #0
10001520:	687b      	ldr	r3, [r7, #4]
10001522:	881b      	ldrh	r3, [r3, #0]
10001524:	1c10      	adds	r0, r2, #0
10001526:	1c19      	adds	r1, r3, #0
10001528:	f000 f832 	bl	10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
1000152c:	46bd      	mov	sp, r7
1000152e:	b006      	add	sp, #24
10001530:	bd80      	pop	{r7, pc}
10001532:	46c0      	nop			; (mov r8, r8)
10001534:	01312d00 	.word	0x01312d00
10001538:	40011000 	.word	0x40011000
1000153c:	40010038 	.word	0x40010038
10001540:	40010300 	.word	0x40010300
10001544:	fdffffff 	.word	0xfdffffff
10001548:	0000021a 	.word	0x0000021a
1000154c:	00000a7d 	.word	0x00000a7d
10001550:	00632ea0 	.word	0x00632ea0
10001554:	fffffdff 	.word	0xfffffdff
10001558:	fff0ffff 	.word	0xfff0ffff

1000155c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
1000155c:	b580      	push	{r7, lr}
1000155e:	b082      	sub	sp, #8
10001560:	af00      	add	r7, sp, #0
10001562:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
10001564:	f7ff ff36 	bl	100013d4 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001568:	4b08      	ldr	r3, [pc, #32]	; (1000158c <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
1000156a:	4a08      	ldr	r2, [pc, #32]	; (1000158c <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
1000156c:	6911      	ldr	r1, [r2, #16]
1000156e:	687a      	ldr	r2, [r7, #4]
10001570:	430a      	orrs	r2, r1
10001572:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001574:	46c0      	nop			; (mov r8, r8)
10001576:	4b05      	ldr	r3, [pc, #20]	; (1000158c <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
10001578:	681a      	ldr	r2, [r3, #0]
1000157a:	2380      	movs	r3, #128	; 0x80
1000157c:	05db      	lsls	r3, r3, #23
1000157e:	4013      	ands	r3, r2
10001580:	d1f9      	bne.n	10001576 <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
10001582:	f7ff ff1d 	bl	100013c0 <XMC_SCU_LockProtectedBits>
}
10001586:	46bd      	mov	sp, r7
10001588:	b002      	add	sp, #8
1000158a:	bd80      	pop	{r7, pc}
1000158c:	40010300 	.word	0x40010300

10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10001590:	b580      	push	{r7, lr}
10001592:	b084      	sub	sp, #16
10001594:	af00      	add	r7, sp, #0
10001596:	6078      	str	r0, [r7, #4]
10001598:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
1000159a:	f7ff ff1b 	bl	100013d4 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000159e:	4b27      	ldr	r3, [pc, #156]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015a0:	681a      	ldr	r2, [r3, #0]
100015a2:	23ff      	movs	r3, #255	; 0xff
100015a4:	021b      	lsls	r3, r3, #8
100015a6:	4013      	ands	r3, r2
100015a8:	0a1b      	lsrs	r3, r3, #8
100015aa:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
100015ac:	4b23      	ldr	r3, [pc, #140]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015ae:	4a23      	ldr	r2, [pc, #140]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015b0:	69d2      	ldr	r2, [r2, #28]
100015b2:	2103      	movs	r1, #3
100015b4:	438a      	bics	r2, r1
100015b6:	1c11      	adds	r1, r2, #0
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
100015b8:	683a      	ldr	r2, [r7, #0]
100015ba:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
100015bc:	430a      	orrs	r2, r1
100015be:	61da      	str	r2, [r3, #28]
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015c0:	4b1e      	ldr	r3, [pc, #120]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015c2:	4a1e      	ldr	r2, [pc, #120]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015c4:	6812      	ldr	r2, [r2, #0]
100015c6:	491e      	ldr	r1, [pc, #120]	; (10001640 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
100015c8:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
100015ca:	683a      	ldr	r2, [r7, #0]
100015cc:	20ff      	movs	r0, #255	; 0xff
100015ce:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015d0:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
100015d2:	491c      	ldr	r1, [pc, #112]	; (10001644 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
100015d4:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015d6:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015d8:	46c0      	nop			; (mov r8, r8)
100015da:	4b18      	ldr	r3, [pc, #96]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015dc:	681a      	ldr	r2, [r3, #0]
100015de:	2380      	movs	r3, #128	; 0x80
100015e0:	05db      	lsls	r3, r3, #23
100015e2:	4013      	ands	r3, r2
100015e4:	d1f9      	bne.n	100015da <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
100015e6:	68fa      	ldr	r2, [r7, #12]
100015e8:	687b      	ldr	r3, [r7, #4]
100015ea:	429a      	cmp	r2, r3
100015ec:	d806      	bhi.n	100015fc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
100015ee:	68fa      	ldr	r2, [r7, #12]
100015f0:	687b      	ldr	r3, [r7, #4]
100015f2:	1c10      	adds	r0, r2, #0
100015f4:	1c19      	adds	r1, r3, #0
100015f6:	f000 f853 	bl	100016a0 <XMC_SCU_CLOCK_lFrequencyDownScaling>
100015fa:	e005      	b.n	10001608 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
100015fc:	68fa      	ldr	r2, [r7, #12]
100015fe:	687b      	ldr	r3, [r7, #4]
10001600:	1c10      	adds	r0, r2, #0
10001602:	1c19      	adds	r1, r3, #0
10001604:	f000 f822 	bl	1000164c <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001608:	4b0c      	ldr	r3, [pc, #48]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000160a:	4a0c      	ldr	r2, [pc, #48]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000160c:	6812      	ldr	r2, [r2, #0]
1000160e:	490e      	ldr	r1, [pc, #56]	; (10001648 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
10001610:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001612:	687a      	ldr	r2, [r7, #4]
10001614:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001616:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001618:	490a      	ldr	r1, [pc, #40]	; (10001644 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
1000161a:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000161c:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000161e:	46c0      	nop			; (mov r8, r8)
10001620:	4b06      	ldr	r3, [pc, #24]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001622:	681a      	ldr	r2, [r3, #0]
10001624:	2380      	movs	r3, #128	; 0x80
10001626:	05db      	lsls	r3, r3, #23
10001628:	4013      	ands	r3, r2
1000162a:	d1f9      	bne.n	10001620 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
1000162c:	f7ff fec8 	bl	100013c0 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10001630:	f7ff fd3e 	bl	100010b0 <SystemCoreClockUpdate>

}
10001634:	46bd      	mov	sp, r7
10001636:	b004      	add	sp, #16
10001638:	bd80      	pop	{r7, pc}
1000163a:	46c0      	nop			; (mov r8, r8)
1000163c:	40010300 	.word	0x40010300
10001640:	c00fff00 	.word	0xc00fff00
10001644:	3ff00000 	.word	0x3ff00000
10001648:	c00f00ff 	.word	0xc00f00ff

1000164c <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
1000164c:	b580      	push	{r7, lr}
1000164e:	b082      	sub	sp, #8
10001650:	af00      	add	r7, sp, #0
10001652:	6078      	str	r0, [r7, #4]
10001654:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
10001656:	e014      	b.n	10001682 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
10001658:	687b      	ldr	r3, [r7, #4]
1000165a:	089b      	lsrs	r3, r3, #2
1000165c:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000165e:	4b0d      	ldr	r3, [pc, #52]	; (10001694 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001660:	4a0c      	ldr	r2, [pc, #48]	; (10001694 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001662:	6812      	ldr	r2, [r2, #0]
10001664:	490c      	ldr	r1, [pc, #48]	; (10001698 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
10001666:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001668:	687a      	ldr	r2, [r7, #4]
1000166a:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000166c:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000166e:	490b      	ldr	r1, [pc, #44]	; (1000169c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
10001670:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001672:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001674:	46c0      	nop			; (mov r8, r8)
10001676:	4b07      	ldr	r3, [pc, #28]	; (10001694 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001678:	681a      	ldr	r2, [r3, #0]
1000167a:	2380      	movs	r3, #128	; 0x80
1000167c:	05db      	lsls	r3, r3, #23
1000167e:	4013      	ands	r3, r2
10001680:	d1f9      	bne.n	10001676 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10001682:	683b      	ldr	r3, [r7, #0]
10001684:	009a      	lsls	r2, r3, #2
10001686:	687b      	ldr	r3, [r7, #4]
10001688:	429a      	cmp	r2, r3
1000168a:	d3e5      	bcc.n	10001658 <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
1000168c:	46bd      	mov	sp, r7
1000168e:	b002      	add	sp, #8
10001690:	bd80      	pop	{r7, pc}
10001692:	46c0      	nop			; (mov r8, r8)
10001694:	40010300 	.word	0x40010300
10001698:	c00f00ff 	.word	0xc00f00ff
1000169c:	3ff00000 	.word	0x3ff00000

100016a0 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100016a0:	b580      	push	{r7, lr}
100016a2:	b082      	sub	sp, #8
100016a4:	af00      	add	r7, sp, #0
100016a6:	6078      	str	r0, [r7, #4]
100016a8:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
100016aa:	e019      	b.n	100016e0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
100016ac:	687b      	ldr	r3, [r7, #4]
100016ae:	2b00      	cmp	r3, #0
100016b0:	d101      	bne.n	100016b6 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
100016b2:	2301      	movs	r3, #1
100016b4:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
100016b6:	687b      	ldr	r3, [r7, #4]
100016b8:	009b      	lsls	r3, r3, #2
100016ba:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100016bc:	4b0c      	ldr	r3, [pc, #48]	; (100016f0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
100016be:	4a0c      	ldr	r2, [pc, #48]	; (100016f0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
100016c0:	6812      	ldr	r2, [r2, #0]
100016c2:	490c      	ldr	r1, [pc, #48]	; (100016f4 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
100016c4:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100016c6:	687a      	ldr	r2, [r7, #4]
100016c8:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100016ca:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100016cc:	490a      	ldr	r1, [pc, #40]	; (100016f8 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
100016ce:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100016d0:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100016d2:	46c0      	nop			; (mov r8, r8)
100016d4:	4b06      	ldr	r3, [pc, #24]	; (100016f0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
100016d6:	681a      	ldr	r2, [r3, #0]
100016d8:	2380      	movs	r3, #128	; 0x80
100016da:	05db      	lsls	r3, r3, #23
100016dc:	4013      	ands	r3, r2
100016de:	d1f9      	bne.n	100016d4 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
100016e0:	687b      	ldr	r3, [r7, #4]
100016e2:	009a      	lsls	r2, r3, #2
100016e4:	683b      	ldr	r3, [r7, #0]
100016e6:	429a      	cmp	r2, r3
100016e8:	d3e0      	bcc.n	100016ac <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
100016ea:	46bd      	mov	sp, r7
100016ec:	b002      	add	sp, #8
100016ee:	bd80      	pop	{r7, pc}
100016f0:	40010300 	.word	0x40010300
100016f4:	c00f00ff 	.word	0xc00f00ff
100016f8:	3ff00000 	.word	0x3ff00000

100016fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
100016fc:	b580      	push	{r7, lr}
100016fe:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10001700:	4b02      	ldr	r3, [pc, #8]	; (1000170c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
10001702:	681b      	ldr	r3, [r3, #0]
}
10001704:	1c18      	adds	r0, r3, #0
10001706:	46bd      	mov	sp, r7
10001708:	bd80      	pop	{r7, pc}
1000170a:	46c0      	nop			; (mov r8, r8)
1000170c:	20003ffc 	.word	0x20003ffc

10001710 <XMC_SCU_INTERRUPT_SetEventHandler>:

/*
 * API to assign the event handler function to be executed on occurrence of the selected event
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
10001710:	b5f0      	push	{r4, r5, r6, r7, lr}
10001712:	b087      	sub	sp, #28
10001714:	af00      	add	r7, sp, #0
10001716:	60b8      	str	r0, [r7, #8]
10001718:	60f9      	str	r1, [r7, #12]
1000171a:	607a      	str	r2, [r7, #4]
  XMC_SCU_STATUS_t status;

  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;
1000171c:	2200      	movs	r2, #0
1000171e:	617a      	str	r2, [r7, #20]

  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001720:	e002      	b.n	10001728 <XMC_SCU_INTERRUPT_SetEventHandler+0x18>
  {
    index++;
10001722:	697a      	ldr	r2, [r7, #20]
10001724:	3201      	adds	r2, #1
10001726:	617a      	str	r2, [r7, #20]
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;

  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001728:	697a      	ldr	r2, [r7, #20]
1000172a:	1c11      	adds	r1, r2, #0
1000172c:	3920      	subs	r1, #32
1000172e:	2900      	cmp	r1, #0
10001730:	db03      	blt.n	1000173a <XMC_SCU_INTERRUPT_SetEventHandler+0x2a>
10001732:	68f8      	ldr	r0, [r7, #12]
10001734:	40c8      	lsrs	r0, r1
10001736:	1c03      	adds	r3, r0, #0
10001738:	e008      	b.n	1000174c <XMC_SCU_INTERRUPT_SetEventHandler+0x3c>
1000173a:	2120      	movs	r1, #32
1000173c:	1a89      	subs	r1, r1, r2
1000173e:	68f8      	ldr	r0, [r7, #12]
10001740:	4088      	lsls	r0, r1
10001742:	1c01      	adds	r1, r0, #0
10001744:	68b8      	ldr	r0, [r7, #8]
10001746:	40d0      	lsrs	r0, r2
10001748:	1c03      	adds	r3, r0, #0
1000174a:	430b      	orrs	r3, r1
1000174c:	68f9      	ldr	r1, [r7, #12]
1000174e:	40d1      	lsrs	r1, r2
10001750:	1c0c      	adds	r4, r1, #0
10001752:	2201      	movs	r2, #1
10001754:	401a      	ands	r2, r3
10001756:	1c15      	adds	r5, r2, #0
10001758:	2200      	movs	r2, #0
1000175a:	4022      	ands	r2, r4
1000175c:	1c16      	adds	r6, r2, #0
1000175e:	1c2a      	adds	r2, r5, #0
10001760:	4332      	orrs	r2, r6
10001762:	d102      	bne.n	1000176a <XMC_SCU_INTERRUPT_SetEventHandler+0x5a>
10001764:	697a      	ldr	r2, [r7, #20]
10001766:	2a3f      	cmp	r2, #63	; 0x3f
10001768:	d9db      	bls.n	10001722 <XMC_SCU_INTERRUPT_SetEventHandler+0x12>
  {
    index++;
  }

  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
1000176a:	697b      	ldr	r3, [r7, #20]
1000176c:	2b40      	cmp	r3, #64	; 0x40
1000176e:	d104      	bne.n	1000177a <XMC_SCU_INTERRUPT_SetEventHandler+0x6a>
  {
    status = XMC_SCU_STATUS_ERROR;
10001770:	2313      	movs	r3, #19
10001772:	18fb      	adds	r3, r7, r3
10001774:	2201      	movs	r2, #1
10001776:	701a      	strb	r2, [r3, #0]
10001778:	e008      	b.n	1000178c <XMC_SCU_INTERRUPT_SetEventHandler+0x7c>
  }
  else
  {
    event_handler_list[index] = handler;
1000177a:	4b08      	ldr	r3, [pc, #32]	; (1000179c <XMC_SCU_INTERRUPT_SetEventHandler+0x8c>)
1000177c:	697a      	ldr	r2, [r7, #20]
1000177e:	0092      	lsls	r2, r2, #2
10001780:	6879      	ldr	r1, [r7, #4]
10001782:	50d1      	str	r1, [r2, r3]
    status = XMC_SCU_STATUS_OK;
10001784:	2313      	movs	r3, #19
10001786:	18fb      	adds	r3, r7, r3
10001788:	2200      	movs	r2, #0
1000178a:	701a      	strb	r2, [r3, #0]
  }

  return (status);
1000178c:	2313      	movs	r3, #19
1000178e:	18fb      	adds	r3, r7, r3
10001790:	781b      	ldrb	r3, [r3, #0]
}
10001792:	1c18      	adds	r0, r3, #0
10001794:	46bd      	mov	sp, r7
10001796:	b007      	add	sp, #28
10001798:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000179a:	46c0      	nop			; (mov r8, r8)
1000179c:	200008d4 	.word	0x200008d4

100017a0 <XMC_SCU_IRQHandler>:

/*
 * A common function to execute callback functions for multiple events
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
100017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100017a2:	b08f      	sub	sp, #60	; 0x3c
100017a4:	af00      	add	r7, sp, #0
100017a6:	61f8      	str	r0, [r7, #28]

  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
100017a8:	2300      	movs	r3, #0
100017aa:	637b      	str	r3, [r7, #52]	; 0x34
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
100017ac:	f7ff fdcc 	bl	10001348 <XMC_SCU_INTERUPT_GetEventStatus>
100017b0:	4a38      	ldr	r2, [pc, #224]	; (10001894 <XMC_SCU_IRQHandler+0xf4>)
100017b2:	69fb      	ldr	r3, [r7, #28]
100017b4:	00db      	lsls	r3, r3, #3
100017b6:	18d3      	adds	r3, r2, r3
100017b8:	681a      	ldr	r2, [r3, #0]
100017ba:	685b      	ldr	r3, [r3, #4]
100017bc:	1c16      	adds	r6, r2, #0
100017be:	4006      	ands	r6, r0
100017c0:	62be      	str	r6, [r7, #40]	; 0x28
100017c2:	400b      	ands	r3, r1
100017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  XMC_SCU_INTERRUPT_ClearEventStatus(event);
100017c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
100017c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100017ca:	1c10      	adds	r0, r2, #0
100017cc:	1c19      	adds	r1, r3, #0
100017ce:	f7ff fddd 	bl	1000138c <XMC_SCU_INTERRUPT_ClearEventStatus>

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100017d2:	e055      	b.n	10001880 <XMC_SCU_IRQHandler+0xe0>
  {
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
100017d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100017d6:	1c1a      	adds	r2, r3, #0
100017d8:	3a20      	subs	r2, #32
100017da:	2a00      	cmp	r2, #0
100017dc:	db03      	blt.n	100017e6 <XMC_SCU_IRQHandler+0x46>
100017de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
100017e0:	40d1      	lsrs	r1, r2
100017e2:	1c0c      	adds	r4, r1, #0
100017e4:	e008      	b.n	100017f8 <XMC_SCU_IRQHandler+0x58>
100017e6:	2220      	movs	r2, #32
100017e8:	1ad2      	subs	r2, r2, r3
100017ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
100017ec:	4091      	lsls	r1, r2
100017ee:	1c0a      	adds	r2, r1, #0
100017f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
100017f2:	40d9      	lsrs	r1, r3
100017f4:	1c0c      	adds	r4, r1, #0
100017f6:	4314      	orrs	r4, r2
100017f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100017fa:	40da      	lsrs	r2, r3
100017fc:	1c15      	adds	r5, r2, #0
100017fe:	2301      	movs	r3, #1
10001800:	4023      	ands	r3, r4
10001802:	60bb      	str	r3, [r7, #8]
10001804:	2300      	movs	r3, #0
10001806:	402b      	ands	r3, r5
10001808:	60fb      	str	r3, [r7, #12]
1000180a:	68b9      	ldr	r1, [r7, #8]
1000180c:	68fa      	ldr	r2, [r7, #12]
1000180e:	1c0b      	adds	r3, r1, #0
10001810:	4313      	orrs	r3, r2
10001812:	d032      	beq.n	1000187a <XMC_SCU_IRQHandler+0xda>
    {
      event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
10001814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10001816:	1c1a      	adds	r2, r3, #0
10001818:	3a20      	subs	r2, #32
1000181a:	2a00      	cmp	r2, #0
1000181c:	db03      	blt.n	10001826 <XMC_SCU_IRQHandler+0x86>
1000181e:	2101      	movs	r1, #1
10001820:	4091      	lsls	r1, r2
10001822:	6179      	str	r1, [r7, #20]
10001824:	e00a      	b.n	1000183c <XMC_SCU_IRQHandler+0x9c>
10001826:	2220      	movs	r2, #32
10001828:	1ad2      	subs	r2, r2, r3
1000182a:	2101      	movs	r1, #1
1000182c:	40d1      	lsrs	r1, r2
1000182e:	1c0a      	adds	r2, r1, #0
10001830:	2100      	movs	r1, #0
10001832:	4099      	lsls	r1, r3
10001834:	6179      	str	r1, [r7, #20]
10001836:	6979      	ldr	r1, [r7, #20]
10001838:	4311      	orrs	r1, r2
1000183a:	6179      	str	r1, [r7, #20]
1000183c:	2201      	movs	r2, #1
1000183e:	409a      	lsls	r2, r3
10001840:	613a      	str	r2, [r7, #16]
10001842:	6939      	ldr	r1, [r7, #16]
10001844:	697a      	ldr	r2, [r7, #20]
10001846:	1c0b      	adds	r3, r1, #0
10001848:	43db      	mvns	r3, r3
1000184a:	603b      	str	r3, [r7, #0]
1000184c:	1c13      	adds	r3, r2, #0
1000184e:	43db      	mvns	r3, r3
10001850:	607b      	str	r3, [r7, #4]
10001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001854:	6838      	ldr	r0, [r7, #0]
10001856:	6879      	ldr	r1, [r7, #4]
10001858:	1c02      	adds	r2, r0, #0
1000185a:	4013      	ands	r3, r2
1000185c:	62bb      	str	r3, [r7, #40]	; 0x28
1000185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001860:	1c0a      	adds	r2, r1, #0
10001862:	4013      	ands	r3, r2
10001864:	62fb      	str	r3, [r7, #44]	; 0x2c
      event_handler = event_handler_list[index];
10001866:	4b0c      	ldr	r3, [pc, #48]	; (10001898 <XMC_SCU_IRQHandler+0xf8>)
10001868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000186a:	0092      	lsls	r2, r2, #2
1000186c:	58d3      	ldr	r3, [r2, r3]
1000186e:	627b      	str	r3, [r7, #36]	; 0x24
      if (event_handler != NULL)
10001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001872:	2b00      	cmp	r3, #0
10001874:	d001      	beq.n	1000187a <XMC_SCU_IRQHandler+0xda>
      {
        event_handler();
10001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001878:	4798      	blx	r3
      }

      /* break; XMC1: Only PULSE interrupts */
    }
    index++;
1000187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000187c:	3301      	adds	r3, #1
1000187e:	637b      	str	r3, [r7, #52]	; 0x34

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10001884:	4313      	orrs	r3, r2
10001886:	d002      	beq.n	1000188e <XMC_SCU_IRQHandler+0xee>
10001888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000188a:	2b3f      	cmp	r3, #63	; 0x3f
1000188c:	d9a2      	bls.n	100017d4 <XMC_SCU_IRQHandler+0x34>

      /* break; XMC1: Only PULSE interrupts */
    }
    index++;
  }
}
1000188e:	46bd      	mov	sp, r7
10001890:	b00f      	add	sp, #60	; 0x3c
10001892:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001894:	20000550 	.word	0x20000550
10001898:	200008d4 	.word	0x200008d4

1000189c <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
1000189c:	b580      	push	{r7, lr}
1000189e:	b082      	sub	sp, #8
100018a0:	af00      	add	r7, sp, #0
100018a2:	1c02      	adds	r2, r0, #0
100018a4:	1dfb      	adds	r3, r7, #7
100018a6:	701a      	strb	r2, [r3, #0]
100018a8:	1d3b      	adds	r3, r7, #4
100018aa:	1c0a      	adds	r2, r1, #0
100018ac:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
100018ae:	1d3b      	adds	r3, r7, #4
100018b0:	1d3a      	adds	r2, r7, #4
100018b2:	8812      	ldrh	r2, [r2, #0]
100018b4:	2103      	movs	r1, #3
100018b6:	400a      	ands	r2, r1
100018b8:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
100018ba:	1dfb      	adds	r3, r7, #7
100018bc:	781b      	ldrb	r3, [r3, #0]
100018be:	2b0f      	cmp	r3, #15
100018c0:	d813      	bhi.n	100018ea <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100018c2:	4b18      	ldr	r3, [pc, #96]	; (10001924 <XMC_SCU_SetInterruptControl+0x88>)
100018c4:	4a17      	ldr	r2, [pc, #92]	; (10001924 <XMC_SCU_SetInterruptControl+0x88>)
100018c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
100018c8:	1df9      	adds	r1, r7, #7
100018ca:	7809      	ldrb	r1, [r1, #0]
100018cc:	0049      	lsls	r1, r1, #1
100018ce:	1c08      	adds	r0, r1, #0
100018d0:	2103      	movs	r1, #3
100018d2:	4081      	lsls	r1, r0
100018d4:	43c9      	mvns	r1, r1
100018d6:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
100018d8:	1d39      	adds	r1, r7, #4
100018da:	8809      	ldrh	r1, [r1, #0]
100018dc:	1df8      	adds	r0, r7, #7
100018de:	7800      	ldrb	r0, [r0, #0]
100018e0:	0040      	lsls	r0, r0, #1
100018e2:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100018e4:	430a      	orrs	r2, r1
100018e6:	66da      	str	r2, [r3, #108]	; 0x6c
100018e8:	e018      	b.n	1000191c <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
100018ea:	1dfb      	adds	r3, r7, #7
100018ec:	1dfa      	adds	r2, r7, #7
100018ee:	7812      	ldrb	r2, [r2, #0]
100018f0:	210f      	movs	r1, #15
100018f2:	400a      	ands	r2, r1
100018f4:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100018f6:	4b0b      	ldr	r3, [pc, #44]	; (10001924 <XMC_SCU_SetInterruptControl+0x88>)
100018f8:	4a0a      	ldr	r2, [pc, #40]	; (10001924 <XMC_SCU_SetInterruptControl+0x88>)
100018fa:	6f12      	ldr	r2, [r2, #112]	; 0x70
100018fc:	1df9      	adds	r1, r7, #7
100018fe:	7809      	ldrb	r1, [r1, #0]
10001900:	0049      	lsls	r1, r1, #1
10001902:	1c08      	adds	r0, r1, #0
10001904:	2103      	movs	r1, #3
10001906:	4081      	lsls	r1, r0
10001908:	43c9      	mvns	r1, r1
1000190a:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
1000190c:	1d39      	adds	r1, r7, #4
1000190e:	8809      	ldrh	r1, [r1, #0]
10001910:	1df8      	adds	r0, r7, #7
10001912:	7800      	ldrb	r0, [r0, #0]
10001914:	0040      	lsls	r0, r0, #1
10001916:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
10001918:	430a      	orrs	r2, r1
1000191a:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
1000191c:	46bd      	mov	sp, r7
1000191e:	b002      	add	sp, #8
10001920:	bd80      	pop	{r7, pc}
10001922:	46c0      	nop			; (mov r8, r8)
10001924:	40010000 	.word	0x40010000

10001928 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
10001928:	b580      	push	{r7, lr}
1000192a:	b082      	sub	sp, #8
1000192c:	af00      	add	r7, sp, #0
1000192e:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
10001930:	687a      	ldr	r2, [r7, #4]
10001932:	23e2      	movs	r3, #226	; 0xe2
10001934:	005b      	lsls	r3, r3, #1
10001936:	58d2      	ldr	r2, [r2, r3]
10001938:	23c0      	movs	r3, #192	; 0xc0
1000193a:	009b      	lsls	r3, r3, #2
1000193c:	4013      	ands	r3, r2
1000193e:	425a      	negs	r2, r3
10001940:	4153      	adcs	r3, r2
10001942:	b2db      	uxtb	r3, r3
}
10001944:	1c18      	adds	r0, r3, #0
10001946:	46bd      	mov	sp, r7
10001948:	b002      	add	sp, #8
1000194a:	bd80      	pop	{r7, pc}

1000194c <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
1000194c:	b590      	push	{r4, r7, lr}
1000194e:	b083      	sub	sp, #12
10001950:	af00      	add	r7, sp, #0
10001952:	6078      	str	r0, [r7, #4]
10001954:	1c0c      	adds	r4, r1, #0
10001956:	1c10      	adds	r0, r2, #0
10001958:	1c19      	adds	r1, r3, #0
1000195a:	1cfb      	adds	r3, r7, #3
1000195c:	1c22      	adds	r2, r4, #0
1000195e:	701a      	strb	r2, [r3, #0]
10001960:	1cbb      	adds	r3, r7, #2
10001962:	1c02      	adds	r2, r0, #0
10001964:	701a      	strb	r2, [r3, #0]
10001966:	1c7b      	adds	r3, r7, #1
10001968:	1c0a      	adds	r2, r1, #0
1000196a:	701a      	strb	r2, [r3, #0]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
1000196c:	1cfb      	adds	r3, r7, #3
1000196e:	781a      	ldrb	r2, [r3, #0]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10001970:	1cbb      	adds	r3, r7, #2
10001972:	781b      	ldrb	r3, [r3, #0]
10001974:	0419      	lsls	r1, r3, #16
10001976:	23ff      	movs	r3, #255	; 0xff
10001978:	041b      	lsls	r3, r3, #16
1000197a:	400b      	ands	r3, r1
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
1000197c:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
1000197e:	1c7b      	adds	r3, r7, #1
10001980:	781b      	ldrb	r3, [r3, #0]
10001982:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10001984:	431a      	orrs	r2, r3
10001986:	1c11      	adds	r1, r2, #0
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001988:	687a      	ldr	r2, [r7, #4]
1000198a:	23e2      	movs	r3, #226	; 0xe2
1000198c:	005b      	lsls	r3, r3, #1
1000198e:	50d1      	str	r1, [r2, r3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
10001990:	46bd      	mov	sp, r7
10001992:	b003      	add	sp, #12
10001994:	bd90      	pop	{r4, r7, pc}
10001996:	46c0      	nop			; (mov r8, r8)

10001998 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10001998:	b580      	push	{r7, lr}
1000199a:	b082      	sub	sp, #8
1000199c:	af00      	add	r7, sp, #0
1000199e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
100019a0:	687b      	ldr	r3, [r7, #4]
100019a2:	681b      	ldr	r3, [r3, #0]
100019a4:	2240      	movs	r2, #64	; 0x40
100019a6:	431a      	orrs	r2, r3
100019a8:	687b      	ldr	r3, [r7, #4]
100019aa:	601a      	str	r2, [r3, #0]
}
100019ac:	46bd      	mov	sp, r7
100019ae:	b002      	add	sp, #8
100019b0:	bd80      	pop	{r7, pc}
100019b2:	46c0      	nop			; (mov r8, r8)

100019b4 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
100019b4:	b580      	push	{r7, lr}
100019b6:	b082      	sub	sp, #8
100019b8:	af00      	add	r7, sp, #0
100019ba:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
100019bc:	687b      	ldr	r3, [r7, #4]
100019be:	681b      	ldr	r3, [r3, #0]
100019c0:	2240      	movs	r2, #64	; 0x40
100019c2:	4393      	bics	r3, r2
100019c4:	1c1a      	adds	r2, r3, #0
100019c6:	687b      	ldr	r3, [r7, #4]
100019c8:	601a      	str	r2, [r3, #0]
}
100019ca:	46bd      	mov	sp, r7
100019cc:	b002      	add	sp, #8
100019ce:	bd80      	pop	{r7, pc}

100019d0 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
100019d0:	b580      	push	{r7, lr}
100019d2:	b082      	sub	sp, #8
100019d4:	af00      	add	r7, sp, #0
100019d6:	6078      	str	r0, [r7, #4]
100019d8:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
100019da:	687a      	ldr	r2, [r7, #4]
100019dc:	683b      	ldr	r3, [r7, #0]
100019de:	4293      	cmp	r3, r2
100019e0:	d200      	bcs.n	100019e4 <max+0x14>
100019e2:	1c13      	adds	r3, r2, #0
}
100019e4:	1c18      	adds	r0, r3, #0
100019e6:	46bd      	mov	sp, r7
100019e8:	b002      	add	sp, #8
100019ea:	bd80      	pop	{r7, pc}

100019ec <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
100019ec:	b580      	push	{r7, lr}
100019ee:	b082      	sub	sp, #8
100019f0:	af00      	add	r7, sp, #0
100019f2:	6078      	str	r0, [r7, #4]
100019f4:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
100019f6:	687a      	ldr	r2, [r7, #4]
100019f8:	683b      	ldr	r3, [r7, #0]
100019fa:	4293      	cmp	r3, r2
100019fc:	d900      	bls.n	10001a00 <min+0x14>
100019fe:	1c13      	adds	r3, r2, #0
}
10001a00:	1c18      	adds	r0, r3, #0
10001a02:	46bd      	mov	sp, r7
10001a04:	b002      	add	sp, #8
10001a06:	bd80      	pop	{r7, pc}

10001a08 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
10001a08:	b580      	push	{r7, lr}
10001a0a:	b088      	sub	sp, #32
10001a0c:	af00      	add	r7, sp, #0
10001a0e:	6078      	str	r0, [r7, #4]
10001a10:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
10001a12:	683b      	ldr	r3, [r7, #0]
10001a14:	681a      	ldr	r2, [r3, #0]
10001a16:	683b      	ldr	r3, [r7, #0]
10001a18:	685b      	ldr	r3, [r3, #4]
10001a1a:	1c10      	adds	r0, r2, #0
10001a1c:	1c19      	adds	r1, r3, #0
10001a1e:	f000 fe4b 	bl	100026b8 <__aeabi_uidivmod>
10001a22:	1e0b      	subs	r3, r1, #0
10001a24:	d000      	beq.n	10001a28 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x20>
10001a26:	e096      	b.n	10001b56 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14e>
  {
    uint32_t prescaler = 0;
10001a28:	2300      	movs	r3, #0
10001a2a:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
10001a2c:	2300      	movs	r3, #0
10001a2e:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
10001a30:	683b      	ldr	r3, [r7, #0]
10001a32:	681a      	ldr	r2, [r3, #0]
10001a34:	683b      	ldr	r3, [r7, #0]
10001a36:	685b      	ldr	r3, [r3, #4]
10001a38:	1c10      	adds	r0, r2, #0
10001a3a:	1c19      	adds	r1, r3, #0
10001a3c:	f000 fdec 	bl	10002618 <__aeabi_uidiv>
10001a40:	1c03      	adds	r3, r0, #0
10001a42:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
10001a44:	2319      	movs	r3, #25
10001a46:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
10001a48:	2300      	movs	r3, #0
10001a4a:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
10001a4c:	2300      	movs	r3, #0
10001a4e:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
10001a50:	e049      	b.n	10001ae6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
10001a52:	68bb      	ldr	r3, [r7, #8]
10001a54:	1c18      	adds	r0, r3, #0
10001a56:	6979      	ldr	r1, [r7, #20]
10001a58:	f000 fe2e 	bl	100026b8 <__aeabi_uidivmod>
10001a5c:	1e0b      	subs	r3, r1, #0
10001a5e:	d13f      	bne.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
10001a60:	2300      	movs	r3, #0
10001a62:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
10001a64:	68b8      	ldr	r0, [r7, #8]
10001a66:	6979      	ldr	r1, [r7, #20]
10001a68:	f000 fdd6 	bl	10002618 <__aeabi_uidiv>
10001a6c:	1c03      	adds	r3, r0, #0
10001a6e:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
10001a70:	69fb      	ldr	r3, [r7, #28]
10001a72:	2b00      	cmp	r3, #0
10001a74:	d034      	beq.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001a76:	69fa      	ldr	r2, [r7, #28]
10001a78:	2380      	movs	r3, #128	; 0x80
10001a7a:	009b      	lsls	r3, r3, #2
10001a7c:	429a      	cmp	r2, r3
10001a7e:	d82f      	bhi.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
10001a80:	69fb      	ldr	r3, [r7, #28]
10001a82:	2b3f      	cmp	r3, #63	; 0x3f
10001a84:	d909      	bls.n	10001a9a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
10001a86:	69fb      	ldr	r3, [r7, #28]
10001a88:	2207      	movs	r2, #7
10001a8a:	4013      	ands	r3, r2
10001a8c:	d003      	beq.n	10001a96 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
10001a8e:	697b      	ldr	r3, [r7, #20]
10001a90:	3b01      	subs	r3, #1
10001a92:	617b      	str	r3, [r7, #20]
              continue;
10001a94:	e027      	b.n	10001ae6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
10001a96:	2301      	movs	r3, #1
10001a98:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
10001a9a:	697b      	ldr	r3, [r7, #20]
10001a9c:	3b01      	subs	r3, #1
10001a9e:	683a      	ldr	r2, [r7, #0]
10001aa0:	8912      	ldrh	r2, [r2, #8]
10001aa2:	4353      	muls	r3, r2
10001aa4:	1c18      	adds	r0, r3, #0
10001aa6:	492e      	ldr	r1, [pc, #184]	; (10001b60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x158>)
10001aa8:	f000 fdb6 	bl	10002618 <__aeabi_uidiv>
10001aac:	1c03      	adds	r3, r0, #0
10001aae:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
10001ab0:	697a      	ldr	r2, [r7, #20]
10001ab2:	693b      	ldr	r3, [r7, #16]
10001ab4:	1ad3      	subs	r3, r2, r3
10001ab6:	3b01      	subs	r3, #1
10001ab8:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
10001aba:	693b      	ldr	r3, [r7, #16]
10001abc:	2b02      	cmp	r3, #2
10001abe:	d90f      	bls.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001ac0:	693b      	ldr	r3, [r7, #16]
10001ac2:	2b0f      	cmp	r3, #15
10001ac4:	d80c      	bhi.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001ac6:	68fb      	ldr	r3, [r7, #12]
10001ac8:	2b01      	cmp	r3, #1
10001aca:	d909      	bls.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
10001acc:	68fb      	ldr	r3, [r7, #12]
10001ace:	2b06      	cmp	r3, #6
10001ad0:	d806      	bhi.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001ad2:	683b      	ldr	r3, [r7, #0]
10001ad4:	895b      	ldrh	r3, [r3, #10]
10001ad6:	1e1a      	subs	r2, r3, #0
10001ad8:	68fb      	ldr	r3, [r7, #12]
10001ada:	429a      	cmp	r2, r3
10001adc:	d800      	bhi.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
10001ade:	e005      	b.n	10001aec <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
10001ae0:	697b      	ldr	r3, [r7, #20]
10001ae2:	3b01      	subs	r3, #1
10001ae4:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
10001ae6:	697b      	ldr	r3, [r7, #20]
10001ae8:	2b07      	cmp	r3, #7
10001aea:	d8b2      	bhi.n	10001a52 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x4a>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
10001aec:	697b      	ldr	r3, [r7, #20]
10001aee:	2b07      	cmp	r3, #7
10001af0:	d931      	bls.n	10001b56 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14e>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
10001af2:	687b      	ldr	r3, [r7, #4]
10001af4:	1c18      	adds	r0, r3, #0
10001af6:	f7ff ff4f 	bl	10001998 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
10001afa:	68fb      	ldr	r3, [r7, #12]
10001afc:	3b01      	subs	r3, #1
10001afe:	031a      	lsls	r2, r3, #12
10001b00:	23e0      	movs	r3, #224	; 0xe0
10001b02:	01db      	lsls	r3, r3, #7
10001b04:	401a      	ands	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
10001b06:	683b      	ldr	r3, [r7, #0]
10001b08:	895b      	ldrh	r3, [r3, #10]
10001b0a:	3b01      	subs	r3, #1
10001b0c:	019b      	lsls	r3, r3, #6
10001b0e:	21ff      	movs	r1, #255	; 0xff
10001b10:	400b      	ands	r3, r1
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
10001b12:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
10001b14:	693b      	ldr	r3, [r7, #16]
10001b16:	3b01      	subs	r3, #1
10001b18:	0219      	lsls	r1, r3, #8
10001b1a:	23f0      	movs	r3, #240	; 0xf0
10001b1c:	011b      	lsls	r3, r3, #4
10001b1e:	400b      	ands	r3, r1

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
10001b20:	431a      	orrs	r2, r3
10001b22:	1c11      	adds	r1, r2, #0
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
10001b24:	69ba      	ldr	r2, [r7, #24]
10001b26:	1c13      	adds	r3, r2, #0
10001b28:	005b      	lsls	r3, r3, #1
10001b2a:	189b      	adds	r3, r3, r2
10001b2c:	1c1a      	adds	r2, r3, #0
10001b2e:	69fb      	ldr	r3, [r7, #28]
10001b30:	40d3      	lsrs	r3, r2
10001b32:	3b01      	subs	r3, #1
10001b34:	223f      	movs	r2, #63	; 0x3f
10001b36:	4013      	ands	r3, r2
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
10001b38:	1c0a      	adds	r2, r1, #0
10001b3a:	431a      	orrs	r2, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
10001b3c:	69bb      	ldr	r3, [r7, #24]
10001b3e:	03db      	lsls	r3, r3, #15
10001b40:	041b      	lsls	r3, r3, #16
10001b42:	0c1b      	lsrs	r3, r3, #16

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
10001b44:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
10001b46:	687b      	ldr	r3, [r7, #4]
10001b48:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
10001b4a:	687b      	ldr	r3, [r7, #4]
10001b4c:	1c18      	adds	r0, r3, #0
10001b4e:	f7ff ff31 	bl	100019b4 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
10001b52:	2300      	movs	r3, #0
10001b54:	e000      	b.n	10001b58 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x150>
    }
  }

  return XMC_CAN_STATUS_ERROR;
10001b56:	2301      	movs	r3, #1
}
10001b58:	1c18      	adds	r0, r3, #0
10001b5a:	46bd      	mov	sp, r7
10001b5c:	b008      	add	sp, #32
10001b5e:	bd80      	pop	{r7, pc}
10001b60:	00002710 	.word	0x00002710

10001b64 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
10001b64:	b590      	push	{r4, r7, lr}
10001b66:	b083      	sub	sp, #12
10001b68:	af00      	add	r7, sp, #0
10001b6a:	6078      	str	r0, [r7, #4]
10001b6c:	1c08      	adds	r0, r1, #0
10001b6e:	1c11      	adds	r1, r2, #0
10001b70:	1cfb      	adds	r3, r7, #3
10001b72:	1c02      	adds	r2, r0, #0
10001b74:	701a      	strb	r2, [r3, #0]
10001b76:	1cbb      	adds	r3, r7, #2
10001b78:	1c0a      	adds	r2, r1, #0
10001b7a:	701a      	strb	r2, [r3, #0]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
10001b7c:	46c0      	nop			; (mov r8, r8)
10001b7e:	687b      	ldr	r3, [r7, #4]
10001b80:	1c18      	adds	r0, r3, #0
10001b82:	f7ff fed1 	bl	10001928 <XMC_CAN_IsPanelControlReady>
10001b86:	1c03      	adds	r3, r0, #0
10001b88:	1c1a      	adds	r2, r3, #0
10001b8a:	2301      	movs	r3, #1
10001b8c:	4053      	eors	r3, r2
10001b8e:	b2db      	uxtb	r3, r3
10001b90:	2b00      	cmp	r3, #0
10001b92:	d1f4      	bne.n	10001b7e <XMC_CAN_AllocateMOtoNodeList+0x1a>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
10001b94:	1cfb      	adds	r3, r7, #3
10001b96:	781b      	ldrb	r3, [r3, #0]
10001b98:	3301      	adds	r3, #1
10001b9a:	b2dc      	uxtb	r4, r3
10001b9c:	687a      	ldr	r2, [r7, #4]
10001b9e:	1cbb      	adds	r3, r7, #2
10001ba0:	781b      	ldrb	r3, [r3, #0]
10001ba2:	1c10      	adds	r0, r2, #0
10001ba4:	2102      	movs	r1, #2
10001ba6:	1c1a      	adds	r2, r3, #0
10001ba8:	1c23      	adds	r3, r4, #0
10001baa:	f7ff fecf 	bl	1000194c <XMC_CAN_PanelControl>
}
10001bae:	46bd      	mov	sp, r7
10001bb0:	b003      	add	sp, #12
10001bb2:	bd90      	pop	{r4, r7, pc}

10001bb4 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
10001bb4:	b580      	push	{r7, lr}
10001bb6:	b082      	sub	sp, #8
10001bb8:	af00      	add	r7, sp, #0
10001bba:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
10001bbc:	2380      	movs	r3, #128	; 0x80
10001bbe:	039b      	lsls	r3, r3, #14
10001bc0:	1c18      	adds	r0, r3, #0
10001bc2:	f7ff fccb 	bl	1000155c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
10001bc6:	687b      	ldr	r3, [r7, #4]
10001bc8:	681b      	ldr	r3, [r3, #0]
10001bca:	2201      	movs	r2, #1
10001bcc:	4393      	bics	r3, r2
10001bce:	1c1a      	adds	r2, r3, #0
10001bd0:	687b      	ldr	r3, [r7, #4]
10001bd2:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
10001bd4:	46c0      	nop			; (mov r8, r8)
10001bd6:	687b      	ldr	r3, [r7, #4]
10001bd8:	681b      	ldr	r3, [r3, #0]
10001bda:	2202      	movs	r2, #2
10001bdc:	4013      	ands	r3, r2
10001bde:	d1fa      	bne.n	10001bd6 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
10001be0:	46bd      	mov	sp, r7
10001be2:	b002      	add	sp, #8
10001be4:	bd80      	pop	{r7, pc}
10001be6:	46c0      	nop			; (mov r8, r8)

10001be8 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
10001be8:	b580      	push	{r7, lr}
10001bea:	b082      	sub	sp, #8
10001bec:	af00      	add	r7, sp, #0
10001bee:	6078      	str	r0, [r7, #4]
10001bf0:	1c0a      	adds	r2, r1, #0
10001bf2:	1cfb      	adds	r3, r7, #3
10001bf4:	701a      	strb	r2, [r3, #0]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
10001bf6:	687a      	ldr	r2, [r7, #4]
10001bf8:	23e4      	movs	r3, #228	; 0xe4
10001bfa:	005b      	lsls	r3, r3, #1
10001bfc:	58d3      	ldr	r3, [r2, r3]
10001bfe:	220f      	movs	r2, #15
10001c00:	4393      	bics	r3, r2
10001c02:	1c1a      	adds	r2, r3, #0
10001c04:	1cfb      	adds	r3, r7, #3
10001c06:	781b      	ldrb	r3, [r3, #0]
10001c08:	431a      	orrs	r2, r3
10001c0a:	1c11      	adds	r1, r2, #0
10001c0c:	687a      	ldr	r2, [r7, #4]
10001c0e:	23e4      	movs	r3, #228	; 0xe4
10001c10:	005b      	lsls	r3, r3, #1
10001c12:	50d1      	str	r1, [r2, r3]
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
10001c14:	46bd      	mov	sp, r7
10001c16:	b002      	add	sp, #8
10001c18:	bd80      	pop	{r7, pc}
10001c1a:	46c0      	nop			; (mov r8, r8)

10001c1c <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
10001c1c:	b580      	push	{r7, lr}
10001c1e:	b082      	sub	sp, #8
10001c20:	af00      	add	r7, sp, #0
10001c22:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
10001c24:	687a      	ldr	r2, [r7, #4]
10001c26:	23e4      	movs	r3, #228	; 0xe4
10001c28:	005b      	lsls	r3, r3, #1
10001c2a:	58d3      	ldr	r3, [r2, r3]
10001c2c:	b2db      	uxtb	r3, r3
10001c2e:	220f      	movs	r2, #15
10001c30:	4013      	ands	r3, r2
10001c32:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
10001c34:	1c18      	adds	r0, r3, #0
10001c36:	46bd      	mov	sp, r7
10001c38:	b002      	add	sp, #8
10001c3a:	bd80      	pop	{r7, pc}

10001c3c <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
10001c3c:	b580      	push	{r7, lr}
10001c3e:	b084      	sub	sp, #16
10001c40:	af00      	add	r7, sp, #0
10001c42:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
10001c44:	2300      	movs	r3, #0
10001c46:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
10001c48:	687b      	ldr	r3, [r7, #4]
10001c4a:	1c18      	adds	r0, r3, #0
10001c4c:	f7ff ffe6 	bl	10001c1c <XMC_CAN_GetBaudrateClockSource>
10001c50:	1e03      	subs	r3, r0, #0
10001c52:	2b01      	cmp	r3, #1
10001c54:	d002      	beq.n	10001c5c <XMC_CAN_GetBaudrateClockFrequency+0x20>
10001c56:	2b02      	cmp	r3, #2
10001c58:	d005      	beq.n	10001c66 <XMC_CAN_GetBaudrateClockFrequency+0x2a>
10001c5a:	e009      	b.n	10001c70 <XMC_CAN_GetBaudrateClockFrequency+0x34>
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#else
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10001c5c:	f7ff fd4e 	bl	100016fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10001c60:	1c03      	adds	r3, r0, #0
10001c62:	60fb      	str	r3, [r7, #12]
      break;
10001c64:	e004      	b.n	10001c70 <XMC_CAN_GetBaudrateClockFrequency+0x34>
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
10001c66:	f7ff fa87 	bl	10001178 <OSCHP_GetFrequency>
10001c6a:	1c03      	adds	r3, r0, #0
10001c6c:	60fb      	str	r3, [r7, #12]
      break;
10001c6e:	46c0      	nop			; (mov r8, r8)
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
10001c70:	68fb      	ldr	r3, [r7, #12]
}
10001c72:	1c18      	adds	r0, r3, #0
10001c74:	46bd      	mov	sp, r7
10001c76:	b004      	add	sp, #16
10001c78:	bd80      	pop	{r7, pc}
10001c7a:	46c0      	nop			; (mov r8, r8)

10001c7c <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
10001c7c:	b580      	push	{r7, lr}
10001c7e:	b088      	sub	sp, #32
10001c80:	af00      	add	r7, sp, #0
10001c82:	60f8      	str	r0, [r7, #12]
10001c84:	607a      	str	r2, [r7, #4]
10001c86:	230b      	movs	r3, #11
10001c88:	18fb      	adds	r3, r7, r3
10001c8a:	1c0a      	adds	r2, r1, #0
10001c8c:	701a      	strb	r2, [r3, #0]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
10001c8e:	68fb      	ldr	r3, [r7, #12]
10001c90:	1c18      	adds	r0, r3, #0
10001c92:	f7ff ff8f 	bl	10001bb4 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
10001c96:	68fa      	ldr	r2, [r7, #12]
10001c98:	230b      	movs	r3, #11
10001c9a:	18fb      	adds	r3, r7, r3
10001c9c:	781b      	ldrb	r3, [r3, #0]
10001c9e:	1c10      	adds	r0, r2, #0
10001ca0:	1c19      	adds	r1, r3, #0
10001ca2:	f7ff ffa1 	bl	10001be8 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
10001ca6:	68fb      	ldr	r3, [r7, #12]
10001ca8:	1c18      	adds	r0, r3, #0
10001caa:	f7ff ffc7 	bl	10001c3c <XMC_CAN_GetBaudrateClockFrequency>
10001cae:	1c03      	adds	r3, r0, #0
10001cb0:	61fb      	str	r3, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
10001cb2:	69f8      	ldr	r0, [r7, #28]
10001cb4:	6879      	ldr	r1, [r7, #4]
10001cb6:	f000 fcaf 	bl	10002618 <__aeabi_uidiv>
10001cba:	1c03      	adds	r3, r0, #0
10001cbc:	1c1a      	adds	r2, r3, #0
10001cbe:	2380      	movs	r3, #128	; 0x80
10001cc0:	00db      	lsls	r3, r3, #3
10001cc2:	1a9b      	subs	r3, r3, r2
10001cc4:	2000      	movs	r0, #0
10001cc6:	1c19      	adds	r1, r3, #0
10001cc8:	f7ff fe82 	bl	100019d0 <max>
10001ccc:	1c02      	adds	r2, r0, #0
10001cce:	4b12      	ldr	r3, [pc, #72]	; (10001d18 <XMC_CAN_InitEx+0x9c>)
10001cd0:	1c10      	adds	r0, r2, #0
10001cd2:	1c19      	adds	r1, r3, #0
10001cd4:	f7ff fe8a 	bl	100019ec <min>
10001cd8:	1c03      	adds	r3, r0, #0
10001cda:	61bb      	str	r3, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
10001cdc:	69bb      	ldr	r3, [r7, #24]
10001cde:	2280      	movs	r2, #128	; 0x80
10001ce0:	00d2      	lsls	r2, r2, #3
10001ce2:	1ad3      	subs	r3, r2, r3
10001ce4:	69f8      	ldr	r0, [r7, #28]
10001ce6:	1c19      	adds	r1, r3, #0
10001ce8:	f000 fc96 	bl	10002618 <__aeabi_uidiv>
10001cec:	1c03      	adds	r3, r0, #0
10001cee:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
10001cf0:	68fb      	ldr	r3, [r7, #12]
10001cf2:	68db      	ldr	r3, [r3, #12]
10001cf4:	4a09      	ldr	r2, [pc, #36]	; (10001d1c <XMC_CAN_InitEx+0xa0>)
10001cf6:	401a      	ands	r2, r3
10001cf8:	68fb      	ldr	r3, [r7, #12]
10001cfa:	60da      	str	r2, [r3, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
10001cfc:	68fb      	ldr	r3, [r7, #12]
10001cfe:	68da      	ldr	r2, [r3, #12]
10001d00:	69bb      	ldr	r3, [r7, #24]
10001d02:	4313      	orrs	r3, r2
10001d04:	2280      	movs	r2, #128	; 0x80
10001d06:	01d2      	lsls	r2, r2, #7
10001d08:	431a      	orrs	r2, r3
10001d0a:	68fb      	ldr	r3, [r7, #12]
10001d0c:	60da      	str	r2, [r3, #12]

  return freq_n;
10001d0e:	697b      	ldr	r3, [r7, #20]
}
10001d10:	1c18      	adds	r0, r3, #0
10001d12:	46bd      	mov	sp, r7
10001d14:	b008      	add	sp, #32
10001d16:	bd80      	pop	{r7, pc}
10001d18:	000003ff 	.word	0x000003ff
10001d1c:	ffff3c00 	.word	0xffff3c00

10001d20 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
10001d20:	b580      	push	{r7, lr}
10001d22:	b086      	sub	sp, #24
10001d24:	af00      	add	r7, sp, #0
10001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
10001d28:	687b      	ldr	r3, [r7, #4]
10001d2a:	681b      	ldr	r3, [r3, #0]
10001d2c:	4a48      	ldr	r2, [pc, #288]	; (10001e50 <XMC_CAN_MO_Config+0x130>)
10001d2e:	4694      	mov	ip, r2
10001d30:	4463      	add	r3, ip
10001d32:	095b      	lsrs	r3, r3, #5
10001d34:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
10001d36:	697b      	ldr	r3, [r7, #20]
10001d38:	095b      	lsrs	r3, r3, #5
10001d3a:	035a      	lsls	r2, r3, #13
10001d3c:	697b      	ldr	r3, [r7, #20]
10001d3e:	211f      	movs	r1, #31
10001d40:	400b      	ands	r3, r1
10001d42:	021b      	lsls	r3, r3, #8
10001d44:	4313      	orrs	r3, r2
10001d46:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
10001d48:	687b      	ldr	r3, [r7, #4]
10001d4a:	681b      	ldr	r3, [r3, #0]
10001d4c:	687a      	ldr	r2, [r7, #4]
10001d4e:	6812      	ldr	r2, [r2, #0]
10001d50:	6892      	ldr	r2, [r2, #8]
10001d52:	4940      	ldr	r1, [pc, #256]	; (10001e54 <XMC_CAN_MO_Config+0x134>)
10001d54:	400a      	ands	r2, r1
10001d56:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
10001d58:	687b      	ldr	r3, [r7, #4]
10001d5a:	681b      	ldr	r3, [r3, #0]
10001d5c:	687a      	ldr	r2, [r7, #4]
10001d5e:	6812      	ldr	r2, [r2, #0]
10001d60:	6891      	ldr	r1, [r2, #8]
10001d62:	693a      	ldr	r2, [r7, #16]
10001d64:	430a      	orrs	r2, r1
10001d66:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10001d68:	687b      	ldr	r3, [r7, #4]
10001d6a:	79db      	ldrb	r3, [r3, #7]
10001d6c:	2220      	movs	r2, #32
10001d6e:	4013      	ands	r3, r2
10001d70:	b2db      	uxtb	r3, r3
10001d72:	2b00      	cmp	r3, #0
10001d74:	d007      	beq.n	10001d86 <XMC_CAN_MO_Config+0x66>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10001d76:	687b      	ldr	r3, [r7, #4]
10001d78:	79db      	ldrb	r3, [r3, #7]
10001d7a:	2220      	movs	r2, #32
10001d7c:	4013      	ands	r3, r2
10001d7e:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10001d80:	2b00      	cmp	r3, #0
10001d82:	d100      	bne.n	10001d86 <XMC_CAN_MO_Config+0x66>
10001d84:	e061      	b.n	10001e4a <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10001d86:	687b      	ldr	r3, [r7, #4]
10001d88:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10001d8a:	2b00      	cmp	r3, #0
10001d8c:	d004      	beq.n	10001d98 <XMC_CAN_MO_Config+0x78>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
10001d8e:	687b      	ldr	r3, [r7, #4]
10001d90:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10001d92:	2b01      	cmp	r3, #1
10001d94:	d000      	beq.n	10001d98 <XMC_CAN_MO_Config+0x78>
10001d96:	e058      	b.n	10001e4a <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001d98:	687b      	ldr	r3, [r7, #4]
10001d9a:	681b      	ldr	r3, [r3, #0]
10001d9c:	2220      	movs	r2, #32
10001d9e:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
10001da0:	687b      	ldr	r3, [r7, #4]
10001da2:	79db      	ldrb	r3, [r3, #7]
10001da4:	2220      	movs	r2, #32
10001da6:	4013      	ands	r3, r2
10001da8:	b2db      	uxtb	r3, r3
10001daa:	2b00      	cmp	r3, #0
10001dac:	d128      	bne.n	10001e00 <XMC_CAN_MO_Config+0xe0>
    {
      reg = can_mo->mo_ar;
10001dae:	687b      	ldr	r3, [r7, #4]
10001db0:	685b      	ldr	r3, [r3, #4]
10001db2:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
10001db4:	68fb      	ldr	r3, [r7, #12]
10001db6:	0f5b      	lsrs	r3, r3, #29
10001db8:	075b      	lsls	r3, r3, #29
10001dba:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
10001dbc:	687b      	ldr	r3, [r7, #4]
10001dbe:	685b      	ldr	r3, [r3, #4]
10001dc0:	00db      	lsls	r3, r3, #3
10001dc2:	08db      	lsrs	r3, r3, #3
10001dc4:	049b      	lsls	r3, r3, #18
10001dc6:	1c1a      	adds	r2, r3, #0
10001dc8:	68fb      	ldr	r3, [r7, #12]
10001dca:	4313      	orrs	r3, r2
10001dcc:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
10001dce:	687b      	ldr	r3, [r7, #4]
10001dd0:	681b      	ldr	r3, [r3, #0]
10001dd2:	68fa      	ldr	r2, [r7, #12]
10001dd4:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
10001dd6:	687b      	ldr	r3, [r7, #4]
10001dd8:	689b      	ldr	r3, [r3, #8]
10001dda:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
10001ddc:	68fb      	ldr	r3, [r7, #12]
10001dde:	0f5b      	lsrs	r3, r3, #29
10001de0:	075b      	lsls	r3, r3, #29
10001de2:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
10001de4:	687b      	ldr	r3, [r7, #4]
10001de6:	689b      	ldr	r3, [r3, #8]
10001de8:	00db      	lsls	r3, r3, #3
10001dea:	08db      	lsrs	r3, r3, #3
10001dec:	049b      	lsls	r3, r3, #18
10001dee:	1c1a      	adds	r2, r3, #0
10001df0:	68fb      	ldr	r3, [r7, #12]
10001df2:	4313      	orrs	r3, r2
10001df4:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
10001df6:	687b      	ldr	r3, [r7, #4]
10001df8:	681b      	ldr	r3, [r3, #0]
10001dfa:	68fa      	ldr	r2, [r7, #12]
10001dfc:	60da      	str	r2, [r3, #12]
10001dfe:	e009      	b.n	10001e14 <XMC_CAN_MO_Config+0xf4>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
10001e00:	687b      	ldr	r3, [r7, #4]
10001e02:	681b      	ldr	r3, [r3, #0]
10001e04:	687a      	ldr	r2, [r7, #4]
10001e06:	6852      	ldr	r2, [r2, #4]
10001e08:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
10001e0a:	687b      	ldr	r3, [r7, #4]
10001e0c:	681b      	ldr	r3, [r3, #0]
10001e0e:	687a      	ldr	r2, [r7, #4]
10001e10:	6892      	ldr	r2, [r2, #8]
10001e12:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001e14:	687b      	ldr	r3, [r7, #4]
10001e16:	7e1b      	ldrb	r3, [r3, #24]
10001e18:	2b01      	cmp	r3, #1
10001e1a:	d10d      	bne.n	10001e38 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
10001e1c:	687b      	ldr	r3, [r7, #4]
10001e1e:	1c18      	adds	r0, r3, #0
10001e20:	f000 f81e 	bl	10001e60 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
10001e24:	687b      	ldr	r3, [r7, #4]
10001e26:	681b      	ldr	r3, [r3, #0]
10001e28:	2280      	movs	r2, #128	; 0x80
10001e2a:	0512      	lsls	r2, r2, #20
10001e2c:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001e2e:	687b      	ldr	r3, [r7, #4]
10001e30:	681b      	ldr	r3, [r3, #0]
10001e32:	4a09      	ldr	r2, [pc, #36]	; (10001e58 <XMC_CAN_MO_Config+0x138>)
10001e34:	61da      	str	r2, [r3, #28]
10001e36:	e008      	b.n	10001e4a <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
10001e38:	687b      	ldr	r3, [r7, #4]
10001e3a:	681b      	ldr	r3, [r3, #0]
10001e3c:	2280      	movs	r2, #128	; 0x80
10001e3e:	0112      	lsls	r2, r2, #4
10001e40:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001e42:	687b      	ldr	r3, [r7, #4]
10001e44:	681b      	ldr	r3, [r3, #0]
10001e46:	4a05      	ldr	r2, [pc, #20]	; (10001e5c <XMC_CAN_MO_Config+0x13c>)
10001e48:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
10001e4a:	46bd      	mov	sp, r7
10001e4c:	b006      	add	sp, #24
10001e4e:	bd80      	pop	{r7, pc}
10001e50:	affbf000 	.word	0xaffbf000
10001e54:	ffff00ff 	.word	0xffff00ff
10001e58:	062000c0 	.word	0x062000c0
10001e5c:	00a00640 	.word	0x00a00640

10001e60 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
10001e60:	b580      	push	{r7, lr}
10001e62:	b084      	sub	sp, #16
10001e64:	af00      	add	r7, sp, #0
10001e66:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001e68:	230f      	movs	r3, #15
10001e6a:	18fb      	adds	r3, r7, r3
10001e6c:	2203      	movs	r2, #3
10001e6e:	701a      	strb	r2, [r3, #0]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001e70:	687b      	ldr	r3, [r7, #4]
10001e72:	7e1b      	ldrb	r3, [r3, #24]
10001e74:	2b01      	cmp	r3, #1
10001e76:	d125      	bne.n	10001ec4 <XMC_CAN_MO_UpdateData+0x64>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001e78:	687b      	ldr	r3, [r7, #4]
10001e7a:	681b      	ldr	r3, [r3, #0]
10001e7c:	2220      	movs	r2, #32
10001e7e:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001e80:	687b      	ldr	r3, [r7, #4]
10001e82:	681b      	ldr	r3, [r3, #0]
10001e84:	687a      	ldr	r2, [r7, #4]
10001e86:	6812      	ldr	r2, [r2, #0]
10001e88:	6812      	ldr	r2, [r2, #0]
10001e8a:	4914      	ldr	r1, [pc, #80]	; (10001edc <XMC_CAN_MO_UpdateData+0x7c>)
10001e8c:	4011      	ands	r1, r2
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
10001e8e:	687a      	ldr	r2, [r7, #4]
10001e90:	7b12      	ldrb	r2, [r2, #12]
10001e92:	0610      	lsls	r0, r2, #24
10001e94:	22f0      	movs	r2, #240	; 0xf0
10001e96:	0512      	lsls	r2, r2, #20
10001e98:	4002      	ands	r2, r0
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001e9a:	430a      	orrs	r2, r1
10001e9c:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
10001e9e:	687b      	ldr	r3, [r7, #4]
10001ea0:	681b      	ldr	r3, [r3, #0]
10001ea2:	687a      	ldr	r2, [r7, #4]
10001ea4:	6912      	ldr	r2, [r2, #16]
10001ea6:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
10001ea8:	687b      	ldr	r3, [r7, #4]
10001eaa:	681b      	ldr	r3, [r3, #0]
10001eac:	687a      	ldr	r2, [r7, #4]
10001eae:	6952      	ldr	r2, [r2, #20]
10001eb0:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
10001eb2:	687b      	ldr	r3, [r7, #4]
10001eb4:	681b      	ldr	r3, [r3, #0]
10001eb6:	4a0a      	ldr	r2, [pc, #40]	; (10001ee0 <XMC_CAN_MO_UpdateData+0x80>)
10001eb8:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001eba:	230f      	movs	r3, #15
10001ebc:	18fb      	adds	r3, r7, r3
10001ebe:	2200      	movs	r2, #0
10001ec0:	701a      	strb	r2, [r3, #0]
10001ec2:	e003      	b.n	10001ecc <XMC_CAN_MO_UpdateData+0x6c>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001ec4:	230f      	movs	r3, #15
10001ec6:	18fb      	adds	r3, r7, r3
10001ec8:	2203      	movs	r2, #3
10001eca:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001ecc:	230f      	movs	r3, #15
10001ece:	18fb      	adds	r3, r7, r3
10001ed0:	781b      	ldrb	r3, [r3, #0]
}
10001ed2:	1c18      	adds	r0, r3, #0
10001ed4:	46bd      	mov	sp, r7
10001ed6:	b004      	add	sp, #16
10001ed8:	bd80      	pop	{r7, pc}
10001eda:	46c0      	nop			; (mov r8, r8)
10001edc:	f0ffffff 	.word	0xf0ffffff
10001ee0:	00280040 	.word	0x00280040

10001ee4 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
10001ee4:	b580      	push	{r7, lr}
10001ee6:	b086      	sub	sp, #24
10001ee8:	af00      	add	r7, sp, #0
10001eea:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10001eec:	2317      	movs	r3, #23
10001eee:	18fb      	adds	r3, r7, r3
10001ef0:	2201      	movs	r2, #1
10001ef2:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
10001ef4:	687b      	ldr	r3, [r7, #4]
10001ef6:	681b      	ldr	r3, [r3, #0]
10001ef8:	69db      	ldr	r3, [r3, #28]
10001efa:	2220      	movs	r2, #32
10001efc:	4013      	ands	r3, r2
10001efe:	095b      	lsrs	r3, r3, #5
10001f00:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
10001f02:	687b      	ldr	r3, [r7, #4]
10001f04:	681b      	ldr	r3, [r3, #0]
10001f06:	69da      	ldr	r2, [r3, #28]
10001f08:	2380      	movs	r3, #128	; 0x80
10001f0a:	005b      	lsls	r3, r3, #1
10001f0c:	4013      	ands	r3, r2
10001f0e:	0a1b      	lsrs	r3, r3, #8
10001f10:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
10001f12:	693b      	ldr	r3, [r7, #16]
10001f14:	2b00      	cmp	r3, #0
10001f16:	d104      	bne.n	10001f22 <XMC_CAN_MO_Transmit+0x3e>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
10001f18:	2317      	movs	r3, #23
10001f1a:	18fb      	adds	r3, r7, r3
10001f1c:	2204      	movs	r2, #4
10001f1e:	701a      	strb	r2, [r3, #0]
10001f20:	e010      	b.n	10001f44 <XMC_CAN_MO_Transmit+0x60>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
10001f22:	68fb      	ldr	r3, [r7, #12]
10001f24:	2b01      	cmp	r3, #1
10001f26:	d104      	bne.n	10001f32 <XMC_CAN_MO_Transmit+0x4e>
  {
    error = XMC_CAN_STATUS_BUSY;
10001f28:	2317      	movs	r3, #23
10001f2a:	18fb      	adds	r3, r7, r3
10001f2c:	2202      	movs	r2, #2
10001f2e:	701a      	strb	r2, [r3, #0]
10001f30:	e008      	b.n	10001f44 <XMC_CAN_MO_Transmit+0x60>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
10001f32:	687b      	ldr	r3, [r7, #4]
10001f34:	681b      	ldr	r3, [r3, #0]
10001f36:	22e0      	movs	r2, #224	; 0xe0
10001f38:	04d2      	lsls	r2, r2, #19
10001f3a:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001f3c:	2317      	movs	r3, #23
10001f3e:	18fb      	adds	r3, r7, r3
10001f40:	2200      	movs	r2, #0
10001f42:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001f44:	2317      	movs	r3, #23
10001f46:	18fb      	adds	r3, r7, r3
10001f48:	781b      	ldrb	r3, [r3, #0]
}
10001f4a:	1c18      	adds	r0, r3, #0
10001f4c:	46bd      	mov	sp, r7
10001f4e:	b006      	add	sp, #24
10001f50:	bd80      	pop	{r7, pc}
10001f52:	46c0      	nop			; (mov r8, r8)

10001f54 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
10001f54:	b580      	push	{r7, lr}
10001f56:	b086      	sub	sp, #24
10001f58:	af00      	add	r7, sp, #0
10001f5a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10001f5c:	2317      	movs	r3, #23
10001f5e:	18fb      	adds	r3, r7, r3
10001f60:	2201      	movs	r2, #1
10001f62:	701a      	strb	r2, [r3, #0]
  uint8_t rx_pnd = 0U;
10001f64:	2316      	movs	r3, #22
10001f66:	18fb      	adds	r3, r7, r3
10001f68:	2200      	movs	r2, #0
10001f6a:	701a      	strb	r2, [r3, #0]
  uint8_t new_data = 0U;
10001f6c:	2315      	movs	r3, #21
10001f6e:	18fb      	adds	r3, r7, r3
10001f70:	2200      	movs	r2, #0
10001f72:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
10001f74:	687b      	ldr	r3, [r7, #4]
10001f76:	681b      	ldr	r3, [r3, #0]
10001f78:	69da      	ldr	r2, [r3, #28]
10001f7a:	2380      	movs	r3, #128	; 0x80
10001f7c:	011b      	lsls	r3, r3, #4
10001f7e:	4013      	ands	r3, r2
10001f80:	0adb      	lsrs	r3, r3, #11
10001f82:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
10001f84:	687b      	ldr	r3, [r7, #4]
10001f86:	681b      	ldr	r3, [r3, #0]
10001f88:	69db      	ldr	r3, [r3, #28]
10001f8a:	2204      	movs	r2, #4
10001f8c:	4013      	ands	r3, r2
10001f8e:	089b      	lsrs	r3, r3, #2
10001f90:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
10001f92:	693b      	ldr	r3, [r7, #16]
10001f94:	2b00      	cmp	r3, #0
10001f96:	d004      	beq.n	10001fa2 <XMC_CAN_MO_Receive+0x4e>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001f98:	2317      	movs	r3, #23
10001f9a:	18fb      	adds	r3, r7, r3
10001f9c:	2203      	movs	r2, #3
10001f9e:	701a      	strb	r2, [r3, #0]
10001fa0:	e0d3      	b.n	1000214a <XMC_CAN_MO_Receive+0x1f6>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
10001fa2:	68fb      	ldr	r3, [r7, #12]
10001fa4:	2b01      	cmp	r3, #1
10001fa6:	d104      	bne.n	10001fb2 <XMC_CAN_MO_Receive+0x5e>
  {
    error = XMC_CAN_STATUS_BUSY;
10001fa8:	2317      	movs	r3, #23
10001faa:	18fb      	adds	r3, r7, r3
10001fac:	2202      	movs	r2, #2
10001fae:	701a      	strb	r2, [r3, #0]
10001fb0:	e0cb      	b.n	1000214a <XMC_CAN_MO_Receive+0x1f6>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
10001fb2:	687b      	ldr	r3, [r7, #4]
10001fb4:	681b      	ldr	r3, [r3, #0]
10001fb6:	2208      	movs	r2, #8
10001fb8:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
10001fba:	687b      	ldr	r3, [r7, #4]
10001fbc:	681b      	ldr	r3, [r3, #0]
10001fbe:	699a      	ldr	r2, [r3, #24]
10001fc0:	2380      	movs	r3, #128	; 0x80
10001fc2:	059b      	lsls	r3, r3, #22
10001fc4:	4013      	ands	r3, r2
10001fc6:	0f5b      	lsrs	r3, r3, #29
10001fc8:	d151      	bne.n	1000206e <XMC_CAN_MO_Receive+0x11a>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
10001fca:	687b      	ldr	r3, [r7, #4]
10001fcc:	79da      	ldrb	r2, [r3, #7]
10001fce:	2120      	movs	r1, #32
10001fd0:	438a      	bics	r2, r1
10001fd2:	71da      	strb	r2, [r3, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
10001fd4:	687b      	ldr	r3, [r7, #4]
10001fd6:	681b      	ldr	r3, [r3, #0]
10001fd8:	699b      	ldr	r3, [r3, #24]
10001fda:	4a5f      	ldr	r2, [pc, #380]	; (10002158 <XMC_CAN_MO_Receive+0x204>)
10001fdc:	4013      	ands	r3, r2
10001fde:	0c9b      	lsrs	r3, r3, #18
10001fe0:	00db      	lsls	r3, r3, #3
10001fe2:	08da      	lsrs	r2, r3, #3
10001fe4:	687b      	ldr	r3, [r7, #4]
10001fe6:	00d2      	lsls	r2, r2, #3
10001fe8:	08d2      	lsrs	r2, r2, #3
10001fea:	6859      	ldr	r1, [r3, #4]
10001fec:	0f49      	lsrs	r1, r1, #29
10001fee:	0749      	lsls	r1, r1, #29
10001ff0:	430a      	orrs	r2, r1
10001ff2:	605a      	str	r2, [r3, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
10001ff4:	687b      	ldr	r3, [r7, #4]
10001ff6:	681b      	ldr	r3, [r3, #0]
10001ff8:	68da      	ldr	r2, [r3, #12]
10001ffa:	2380      	movs	r3, #128	; 0x80
10001ffc:	059b      	lsls	r3, r3, #22
10001ffe:	4013      	ands	r3, r2
10002000:	0f5b      	lsrs	r3, r3, #29
10002002:	b2db      	uxtb	r3, r3
10002004:	1c1a      	adds	r2, r3, #0
10002006:	2301      	movs	r3, #1
10002008:	4013      	ands	r3, r2
1000200a:	b2da      	uxtb	r2, r3
1000200c:	687b      	ldr	r3, [r7, #4]
1000200e:	2101      	movs	r1, #1
10002010:	400a      	ands	r2, r1
10002012:	0150      	lsls	r0, r2, #5
10002014:	7ada      	ldrb	r2, [r3, #11]
10002016:	2120      	movs	r1, #32
10002018:	438a      	bics	r2, r1
1000201a:	1c11      	adds	r1, r2, #0
1000201c:	1c02      	adds	r2, r0, #0
1000201e:	430a      	orrs	r2, r1
10002020:	72da      	strb	r2, [r3, #11]
        if (can_mo->can_ide_mask == 1U)
10002022:	687b      	ldr	r3, [r7, #4]
10002024:	7adb      	ldrb	r3, [r3, #11]
10002026:	2220      	movs	r2, #32
10002028:	4013      	ands	r3, r2
1000202a:	b2db      	uxtb	r3, r3
1000202c:	2b00      	cmp	r3, #0
1000202e:	d010      	beq.n	10002052 <XMC_CAN_MO_Receive+0xfe>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
10002030:	687b      	ldr	r3, [r7, #4]
10002032:	681b      	ldr	r3, [r3, #0]
10002034:	68db      	ldr	r3, [r3, #12]
10002036:	4a48      	ldr	r2, [pc, #288]	; (10002158 <XMC_CAN_MO_Receive+0x204>)
10002038:	4013      	ands	r3, r2
1000203a:	0c9b      	lsrs	r3, r3, #18
1000203c:	00db      	lsls	r3, r3, #3
1000203e:	08da      	lsrs	r2, r3, #3
10002040:	687b      	ldr	r3, [r7, #4]
10002042:	00d2      	lsls	r2, r2, #3
10002044:	08d2      	lsrs	r2, r2, #3
10002046:	6899      	ldr	r1, [r3, #8]
10002048:	0f49      	lsrs	r1, r1, #29
1000204a:	0749      	lsls	r1, r1, #29
1000204c:	430a      	orrs	r2, r1
1000204e:	609a      	str	r2, [r3, #8]
10002050:	e043      	b.n	100020da <XMC_CAN_MO_Receive+0x186>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
10002052:	687b      	ldr	r3, [r7, #4]
10002054:	681b      	ldr	r3, [r3, #0]
10002056:	68db      	ldr	r3, [r3, #12]
10002058:	00db      	lsls	r3, r3, #3
1000205a:	08da      	lsrs	r2, r3, #3
1000205c:	687b      	ldr	r3, [r7, #4]
1000205e:	00d2      	lsls	r2, r2, #3
10002060:	08d2      	lsrs	r2, r2, #3
10002062:	6899      	ldr	r1, [r3, #8]
10002064:	0f49      	lsrs	r1, r1, #29
10002066:	0749      	lsls	r1, r1, #29
10002068:	430a      	orrs	r2, r1
1000206a:	609a      	str	r2, [r3, #8]
1000206c:	e035      	b.n	100020da <XMC_CAN_MO_Receive+0x186>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
1000206e:	687b      	ldr	r3, [r7, #4]
10002070:	79da      	ldrb	r2, [r3, #7]
10002072:	2120      	movs	r1, #32
10002074:	430a      	orrs	r2, r1
10002076:	71da      	strb	r2, [r3, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
10002078:	687b      	ldr	r3, [r7, #4]
1000207a:	681b      	ldr	r3, [r3, #0]
1000207c:	699b      	ldr	r3, [r3, #24]
1000207e:	00db      	lsls	r3, r3, #3
10002080:	08da      	lsrs	r2, r3, #3
10002082:	687b      	ldr	r3, [r7, #4]
10002084:	00d2      	lsls	r2, r2, #3
10002086:	08d2      	lsrs	r2, r2, #3
10002088:	6859      	ldr	r1, [r3, #4]
1000208a:	0f49      	lsrs	r1, r1, #29
1000208c:	0749      	lsls	r1, r1, #29
1000208e:	430a      	orrs	r2, r1
10002090:	605a      	str	r2, [r3, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
10002092:	687b      	ldr	r3, [r7, #4]
10002094:	681b      	ldr	r3, [r3, #0]
10002096:	68db      	ldr	r3, [r3, #12]
10002098:	00db      	lsls	r3, r3, #3
1000209a:	08da      	lsrs	r2, r3, #3
1000209c:	687b      	ldr	r3, [r7, #4]
1000209e:	00d2      	lsls	r2, r2, #3
100020a0:	08d2      	lsrs	r2, r2, #3
100020a2:	6899      	ldr	r1, [r3, #8]
100020a4:	0f49      	lsrs	r1, r1, #29
100020a6:	0749      	lsls	r1, r1, #29
100020a8:	430a      	orrs	r2, r1
100020aa:	609a      	str	r2, [r3, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
100020ac:	687b      	ldr	r3, [r7, #4]
100020ae:	681b      	ldr	r3, [r3, #0]
100020b0:	68da      	ldr	r2, [r3, #12]
100020b2:	2380      	movs	r3, #128	; 0x80
100020b4:	059b      	lsls	r3, r3, #22
100020b6:	4013      	ands	r3, r2
100020b8:	0f5b      	lsrs	r3, r3, #29
100020ba:	b2db      	uxtb	r3, r3
100020bc:	1c1a      	adds	r2, r3, #0
100020be:	2301      	movs	r3, #1
100020c0:	4013      	ands	r3, r2
100020c2:	b2da      	uxtb	r2, r3
100020c4:	687b      	ldr	r3, [r7, #4]
100020c6:	2101      	movs	r1, #1
100020c8:	400a      	ands	r2, r1
100020ca:	0150      	lsls	r0, r2, #5
100020cc:	7ada      	ldrb	r2, [r3, #11]
100020ce:	2120      	movs	r1, #32
100020d0:	438a      	bics	r2, r1
100020d2:	1c11      	adds	r1, r2, #0
100020d4:	1c02      	adds	r2, r0, #0
100020d6:	430a      	orrs	r2, r1
100020d8:	72da      	strb	r2, [r3, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
100020da:	687b      	ldr	r3, [r7, #4]
100020dc:	681b      	ldr	r3, [r3, #0]
100020de:	681a      	ldr	r2, [r3, #0]
100020e0:	23f0      	movs	r3, #240	; 0xf0
100020e2:	051b      	lsls	r3, r3, #20
100020e4:	4013      	ands	r3, r2
100020e6:	0e1b      	lsrs	r3, r3, #24
100020e8:	b2da      	uxtb	r2, r3
100020ea:	687b      	ldr	r3, [r7, #4]
100020ec:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
100020ee:	687b      	ldr	r3, [r7, #4]
100020f0:	681b      	ldr	r3, [r3, #0]
100020f2:	691a      	ldr	r2, [r3, #16]
100020f4:	687b      	ldr	r3, [r7, #4]
100020f6:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
100020f8:	687b      	ldr	r3, [r7, #4]
100020fa:	681b      	ldr	r3, [r3, #0]
100020fc:	695a      	ldr	r2, [r3, #20]
100020fe:	687b      	ldr	r3, [r7, #4]
10002100:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
10002102:	687b      	ldr	r3, [r7, #4]
10002104:	681b      	ldr	r3, [r3, #0]
10002106:	69db      	ldr	r3, [r3, #28]
10002108:	2204      	movs	r2, #4
1000210a:	4013      	ands	r3, r2
1000210c:	089a      	lsrs	r2, r3, #2
1000210e:	2316      	movs	r3, #22
10002110:	18fb      	adds	r3, r7, r3
10002112:	701a      	strb	r2, [r3, #0]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
10002114:	687b      	ldr	r3, [r7, #4]
10002116:	681b      	ldr	r3, [r3, #0]
10002118:	69db      	ldr	r3, [r3, #28]
1000211a:	2208      	movs	r2, #8
1000211c:	4013      	ands	r3, r2
1000211e:	08da      	lsrs	r2, r3, #3
10002120:	2315      	movs	r3, #21
10002122:	18fb      	adds	r3, r7, r3
10002124:	701a      	strb	r2, [r3, #0]
    }
    while ((rx_pnd != 0U) && (new_data != 0U));
10002126:	2316      	movs	r3, #22
10002128:	18fb      	adds	r3, r7, r3
1000212a:	781b      	ldrb	r3, [r3, #0]
1000212c:	2b00      	cmp	r3, #0
1000212e:	d005      	beq.n	1000213c <XMC_CAN_MO_Receive+0x1e8>
10002130:	2315      	movs	r3, #21
10002132:	18fb      	adds	r3, r7, r3
10002134:	781b      	ldrb	r3, [r3, #0]
10002136:	2b00      	cmp	r3, #0
10002138:	d000      	beq.n	1000213c <XMC_CAN_MO_Receive+0x1e8>
1000213a:	e73a      	b.n	10001fb2 <XMC_CAN_MO_Receive+0x5e>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
1000213c:	687b      	ldr	r3, [r7, #4]
1000213e:	2200      	movs	r2, #0
10002140:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
10002142:	2317      	movs	r3, #23
10002144:	18fb      	adds	r3, r7, r3
10002146:	2200      	movs	r2, #0
10002148:	701a      	strb	r2, [r3, #0]
  }
  return error;
1000214a:	2317      	movs	r3, #23
1000214c:	18fb      	adds	r3, r7, r3
1000214e:	781b      	ldrb	r3, [r3, #0]
}
10002150:	1c18      	adds	r0, r3, #0
10002152:	46bd      	mov	sp, r7
10002154:	b006      	add	sp, #24
10002156:	bd80      	pop	{r7, pc}
10002158:	1ffc0000 	.word	0x1ffc0000

1000215c <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
1000215c:	b580      	push	{r7, lr}
1000215e:	b082      	sub	sp, #8
10002160:	af00      	add	r7, sp, #0
10002162:	6078      	str	r0, [r7, #4]
10002164:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
10002166:	683a      	ldr	r2, [r7, #0]
10002168:	2380      	movs	r3, #128	; 0x80
1000216a:	03db      	lsls	r3, r3, #15
1000216c:	429a      	cmp	r2, r3
1000216e:	d006      	beq.n	1000217e <XMC_CAN_NODE_EnableEvent+0x22>
  {
    can_node->NCR |= (uint32_t)event;
10002170:	687b      	ldr	r3, [r7, #4]
10002172:	681a      	ldr	r2, [r3, #0]
10002174:	683b      	ldr	r3, [r7, #0]
10002176:	431a      	orrs	r2, r3
10002178:	687b      	ldr	r3, [r7, #4]
1000217a:	601a      	str	r2, [r3, #0]
1000217c:	e005      	b.n	1000218a <XMC_CAN_NODE_EnableEvent+0x2e>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
1000217e:	687b      	ldr	r3, [r7, #4]
10002180:	699a      	ldr	r2, [r3, #24]
10002182:	683b      	ldr	r3, [r7, #0]
10002184:	431a      	orrs	r2, r3
10002186:	687b      	ldr	r3, [r7, #4]
10002188:	619a      	str	r2, [r3, #24]
  }
}
1000218a:	46bd      	mov	sp, r7
1000218c:	b002      	add	sp, #8
1000218e:	bd80      	pop	{r7, pc}

10002190 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10002190:	b580      	push	{r7, lr}
10002192:	b082      	sub	sp, #8
10002194:	af00      	add	r7, sp, #0
10002196:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10002198:	687b      	ldr	r3, [r7, #4]
1000219a:	2280      	movs	r2, #128	; 0x80
1000219c:	0052      	lsls	r2, r2, #1
1000219e:	60da      	str	r2, [r3, #12]
}
100021a0:	46bd      	mov	sp, r7
100021a2:	b002      	add	sp, #8
100021a4:	bd80      	pop	{r7, pc}
100021a6:	46c0      	nop			; (mov r8, r8)

100021a8 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
100021a8:	b580      	push	{r7, lr}
100021aa:	b082      	sub	sp, #8
100021ac:	af00      	add	r7, sp, #0
100021ae:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
100021b0:	687b      	ldr	r3, [r7, #4]
100021b2:	4a09      	ldr	r2, [pc, #36]	; (100021d8 <XMC_CCU4_lUngateClock+0x30>)
100021b4:	4293      	cmp	r3, r2
100021b6:	d103      	bne.n	100021c0 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
100021b8:	2004      	movs	r0, #4
100021ba:	f7ff f9cf 	bl	1000155c <XMC_SCU_CLOCK_UngatePeripheralClock>
100021be:	e008      	b.n	100021d2 <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
100021c0:	687b      	ldr	r3, [r7, #4]
100021c2:	4a06      	ldr	r2, [pc, #24]	; (100021dc <XMC_CCU4_lUngateClock+0x34>)
100021c4:	4293      	cmp	r3, r2
100021c6:	d104      	bne.n	100021d2 <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
100021c8:	2380      	movs	r3, #128	; 0x80
100021ca:	029b      	lsls	r3, r3, #10
100021cc:	1c18      	adds	r0, r3, #0
100021ce:	f7ff f9c5 	bl	1000155c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
100021d2:	46bd      	mov	sp, r7
100021d4:	b002      	add	sp, #8
100021d6:	bd80      	pop	{r7, pc}
100021d8:	48040000 	.word	0x48040000
100021dc:	48044000 	.word	0x48044000

100021e0 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
100021e0:	b580      	push	{r7, lr}
100021e2:	b082      	sub	sp, #8
100021e4:	af00      	add	r7, sp, #0
100021e6:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
100021e8:	687b      	ldr	r3, [r7, #4]
100021ea:	1c18      	adds	r0, r3, #0
100021ec:	f7ff ffdc 	bl	100021a8 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
100021f0:	46bd      	mov	sp, r7
100021f2:	b002      	add	sp, #8
100021f4:	bd80      	pop	{r7, pc}
100021f6:	46c0      	nop			; (mov r8, r8)

100021f8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100021f8:	b580      	push	{r7, lr}
100021fa:	b084      	sub	sp, #16
100021fc:	af00      	add	r7, sp, #0
100021fe:	6078      	str	r0, [r7, #4]
10002200:	1c0a      	adds	r2, r1, #0
10002202:	1cfb      	adds	r3, r7, #3
10002204:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
10002206:	687b      	ldr	r3, [r7, #4]
10002208:	1c18      	adds	r0, r3, #0
1000220a:	f7ff ffe9 	bl	100021e0 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
1000220e:	687b      	ldr	r3, [r7, #4]
10002210:	1c18      	adds	r0, r3, #0
10002212:	f7ff ffbd 	bl	10002190 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
10002216:	687b      	ldr	r3, [r7, #4]
10002218:	681b      	ldr	r3, [r3, #0]
1000221a:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
1000221c:	68fb      	ldr	r3, [r7, #12]
1000221e:	4a07      	ldr	r2, [pc, #28]	; (1000223c <XMC_CCU4_Init+0x44>)
10002220:	4013      	ands	r3, r2
10002222:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10002224:	1cfb      	adds	r3, r7, #3
10002226:	781b      	ldrb	r3, [r3, #0]
10002228:	039b      	lsls	r3, r3, #14
1000222a:	68fa      	ldr	r2, [r7, #12]
1000222c:	4313      	orrs	r3, r2
1000222e:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
10002230:	687b      	ldr	r3, [r7, #4]
10002232:	68fa      	ldr	r2, [r7, #12]
10002234:	601a      	str	r2, [r3, #0]
}
10002236:	46bd      	mov	sp, r7
10002238:	b004      	add	sp, #16
1000223a:	bd80      	pop	{r7, pc}
1000223c:	ffff3fff 	.word	0xffff3fff

10002240 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10002240:	b580      	push	{r7, lr}
10002242:	b082      	sub	sp, #8
10002244:	af00      	add	r7, sp, #0
10002246:	6078      	str	r0, [r7, #4]
10002248:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
1000224a:	683b      	ldr	r3, [r7, #0]
1000224c:	681a      	ldr	r2, [r3, #0]
1000224e:	687b      	ldr	r3, [r7, #4]
10002250:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10002252:	683b      	ldr	r3, [r7, #0]
10002254:	795b      	ldrb	r3, [r3, #5]
10002256:	069b      	lsls	r3, r3, #26
10002258:	0fdb      	lsrs	r3, r3, #31
1000225a:	b2db      	uxtb	r3, r3
1000225c:	051a      	lsls	r2, r3, #20
1000225e:	687b      	ldr	r3, [r7, #4]
10002260:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10002262:	683b      	ldr	r3, [r7, #0]
10002264:	791b      	ldrb	r3, [r3, #4]
10002266:	071b      	lsls	r3, r3, #28
10002268:	0f1b      	lsrs	r3, r3, #28
1000226a:	b2db      	uxtb	r3, r3
1000226c:	1c1a      	adds	r2, r3, #0
1000226e:	687b      	ldr	r3, [r7, #4]
10002270:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10002272:	683b      	ldr	r3, [r7, #0]
10002274:	795b      	ldrb	r3, [r3, #5]
10002276:	071b      	lsls	r3, r3, #28
10002278:	0f1b      	lsrs	r3, r3, #28
1000227a:	b2db      	uxtb	r3, r3
1000227c:	1c1a      	adds	r2, r3, #0
1000227e:	687b      	ldr	r3, [r7, #4]
10002280:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
10002282:	683b      	ldr	r3, [r7, #0]
10002284:	795b      	ldrb	r3, [r3, #5]
10002286:	06db      	lsls	r3, r3, #27
10002288:	0fdb      	lsrs	r3, r3, #31
1000228a:	b2db      	uxtb	r3, r3
1000228c:	1c1a      	adds	r2, r3, #0
1000228e:	687b      	ldr	r3, [r7, #4]
10002290:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10002292:	683b      	ldr	r3, [r7, #0]
10002294:	791b      	ldrb	r3, [r3, #4]
10002296:	061b      	lsls	r3, r3, #24
10002298:	0f1b      	lsrs	r3, r3, #28
1000229a:	b2db      	uxtb	r3, r3
1000229c:	1c1a      	adds	r2, r3, #0
1000229e:	687b      	ldr	r3, [r7, #4]
100022a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
100022a2:	46bd      	mov	sp, r7
100022a4:	b002      	add	sp, #8
100022a6:	bd80      	pop	{r7, pc}

100022a8 <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
100022a8:	b580      	push	{r7, lr}
100022aa:	b082      	sub	sp, #8
100022ac:	af00      	add	r7, sp, #0
100022ae:	6078      	str	r0, [r7, #4]
100022b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
100022b2:	683b      	ldr	r3, [r7, #0]
100022b4:	681a      	ldr	r2, [r3, #0]
100022b6:	687b      	ldr	r3, [r7, #4]
100022b8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
100022ba:	683b      	ldr	r3, [r7, #0]
100022bc:	795b      	ldrb	r3, [r3, #5]
100022be:	07db      	lsls	r3, r3, #31
100022c0:	0fdb      	lsrs	r3, r3, #31
100022c2:	b2db      	uxtb	r3, r3
100022c4:	051a      	lsls	r2, r3, #20
100022c6:	687b      	ldr	r3, [r7, #4]
100022c8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
100022ca:	683b      	ldr	r3, [r7, #0]
100022cc:	791b      	ldrb	r3, [r3, #4]
100022ce:	071b      	lsls	r3, r3, #28
100022d0:	0f1b      	lsrs	r3, r3, #28
100022d2:	b2db      	uxtb	r3, r3
100022d4:	1c1a      	adds	r2, r3, #0
100022d6:	687b      	ldr	r3, [r7, #4]
100022d8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
100022da:	683b      	ldr	r3, [r7, #0]
100022dc:	791b      	ldrb	r3, [r3, #4]
100022de:	061b      	lsls	r3, r3, #24
100022e0:	0f1b      	lsrs	r3, r3, #28
100022e2:	b2db      	uxtb	r3, r3
100022e4:	1c1a      	adds	r2, r3, #0
100022e6:	687b      	ldr	r3, [r7, #4]
100022e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
100022ea:	46bd      	mov	sp, r7
100022ec:	b002      	add	sp, #8
100022ee:	bd80      	pop	{r7, pc}

100022f0 <XMC_CCU4_SLICE_Capture0Config>:
  slice->CMC = cmc;
}

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100022f0:	b580      	push	{r7, lr}
100022f2:	b084      	sub	sp, #16
100022f4:	af00      	add	r7, sp, #0
100022f6:	6078      	str	r0, [r7, #4]
100022f8:	1c0a      	adds	r2, r1, #0
100022fa:	1cfb      	adds	r3, r7, #3
100022fc:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
100022fe:	687b      	ldr	r3, [r7, #4]
10002300:	685b      	ldr	r3, [r3, #4]
10002302:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
10002304:	68fb      	ldr	r3, [r7, #12]
10002306:	2230      	movs	r2, #48	; 0x30
10002308:	4393      	bics	r3, r2
1000230a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
1000230c:	1cfb      	adds	r3, r7, #3
1000230e:	781b      	ldrb	r3, [r3, #0]
10002310:	011b      	lsls	r3, r3, #4
10002312:	68fa      	ldr	r2, [r7, #12]
10002314:	4313      	orrs	r3, r2
10002316:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10002318:	687b      	ldr	r3, [r7, #4]
1000231a:	68fa      	ldr	r2, [r7, #12]
1000231c:	605a      	str	r2, [r3, #4]
}
1000231e:	46bd      	mov	sp, r7
10002320:	b004      	add	sp, #16
10002322:	bd80      	pop	{r7, pc}

10002324 <XMC_CCU4_SLICE_Capture1Config>:

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10002324:	b580      	push	{r7, lr}
10002326:	b084      	sub	sp, #16
10002328:	af00      	add	r7, sp, #0
1000232a:	6078      	str	r0, [r7, #4]
1000232c:	1c0a      	adds	r2, r1, #0
1000232e:	1cfb      	adds	r3, r7, #3
10002330:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
10002332:	687b      	ldr	r3, [r7, #4]
10002334:	685b      	ldr	r3, [r3, #4]
10002336:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
10002338:	68fb      	ldr	r3, [r7, #12]
1000233a:	22c0      	movs	r2, #192	; 0xc0
1000233c:	4393      	bics	r3, r2
1000233e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
10002340:	1cfb      	adds	r3, r7, #3
10002342:	781b      	ldrb	r3, [r3, #0]
10002344:	019b      	lsls	r3, r3, #6
10002346:	68fa      	ldr	r2, [r7, #12]
10002348:	4313      	orrs	r3, r2
1000234a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
1000234c:	687b      	ldr	r3, [r7, #4]
1000234e:	68fa      	ldr	r2, [r7, #12]
10002350:	605a      	str	r2, [r3, #4]
}
10002352:	46bd      	mov	sp, r7
10002354:	b004      	add	sp, #16
10002356:	bd80      	pop	{r7, pc}

10002358 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
10002358:	b580      	push	{r7, lr}
1000235a:	b088      	sub	sp, #32
1000235c:	af00      	add	r7, sp, #0
1000235e:	60f8      	str	r0, [r7, #12]
10002360:	607a      	str	r2, [r7, #4]
10002362:	230b      	movs	r3, #11
10002364:	18fb      	adds	r3, r7, r3
10002366:	1c0a      	adds	r2, r1, #0
10002368:	701a      	strb	r2, [r3, #0]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) || \
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
1000236a:	231f      	movs	r3, #31
1000236c:	18fb      	adds	r3, r7, r3
1000236e:	220b      	movs	r2, #11
10002370:	18ba      	adds	r2, r7, r2
10002372:	7812      	ldrb	r2, [r2, #0]
10002374:	3a01      	subs	r2, #1
10002376:	701a      	strb	r2, [r3, #0]

#if defined(CCU4V3) /* Defined for XMC1400 devices only */
  ins = slice->INS2;
10002378:	68fb      	ldr	r3, [r7, #12]
1000237a:	681b      	ldr	r3, [r3, #0]
1000237c:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
1000237e:	2317      	movs	r3, #23
10002380:	18fb      	adds	r3, r7, r3
10002382:	221f      	movs	r2, #31
10002384:	18ba      	adds	r2, r7, r2
10002386:	7812      	ldrb	r2, [r2, #0]
10002388:	0092      	lsls	r2, r2, #2
1000238a:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
1000238c:	2317      	movs	r3, #23
1000238e:	18fb      	adds	r3, r7, r3
10002390:	781b      	ldrb	r3, [r3, #0]
10002392:	2203      	movs	r2, #3
10002394:	409a      	lsls	r2, r3
10002396:	1c13      	adds	r3, r2, #0
10002398:	43da      	mvns	r2, r3
1000239a:	69bb      	ldr	r3, [r7, #24]
1000239c:	4013      	ands	r3, r2
1000239e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
100023a0:	687b      	ldr	r3, [r7, #4]
100023a2:	785b      	ldrb	r3, [r3, #1]
100023a4:	1c1a      	adds	r2, r3, #0
100023a6:	2317      	movs	r3, #23
100023a8:	18fb      	adds	r3, r7, r3
100023aa:	781b      	ldrb	r3, [r3, #0]
100023ac:	409a      	lsls	r2, r3
100023ae:	1c13      	adds	r3, r2, #0
100023b0:	69ba      	ldr	r2, [r7, #24]
100023b2:	4313      	orrs	r3, r2
100023b4:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
100023b6:	231f      	movs	r3, #31
100023b8:	18fb      	adds	r3, r7, r3
100023ba:	781b      	ldrb	r3, [r3, #0]
100023bc:	009b      	lsls	r3, r3, #2
100023be:	b2da      	uxtb	r2, r3
100023c0:	2317      	movs	r3, #23
100023c2:	18fb      	adds	r3, r7, r3
100023c4:	3202      	adds	r2, #2
100023c6:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
100023c8:	2317      	movs	r3, #23
100023ca:	18fb      	adds	r3, r7, r3
100023cc:	781b      	ldrb	r3, [r3, #0]
100023ce:	2201      	movs	r2, #1
100023d0:	409a      	lsls	r2, r3
100023d2:	1c13      	adds	r3, r2, #0
100023d4:	43da      	mvns	r2, r3
100023d6:	69bb      	ldr	r3, [r7, #24]
100023d8:	4013      	ands	r3, r2
100023da:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
100023dc:	687b      	ldr	r3, [r7, #4]
100023de:	789b      	ldrb	r3, [r3, #2]
100023e0:	1c1a      	adds	r2, r3, #0
100023e2:	2317      	movs	r3, #23
100023e4:	18fb      	adds	r3, r7, r3
100023e6:	781b      	ldrb	r3, [r3, #0]
100023e8:	409a      	lsls	r2, r3
100023ea:	1c13      	adds	r3, r2, #0
100023ec:	69ba      	ldr	r2, [r7, #24]
100023ee:	4313      	orrs	r3, r2
100023f0:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
100023f2:	231f      	movs	r3, #31
100023f4:	18fb      	adds	r3, r7, r3
100023f6:	781b      	ldrb	r3, [r3, #0]
100023f8:	009b      	lsls	r3, r3, #2
100023fa:	b2da      	uxtb	r2, r3
100023fc:	2317      	movs	r3, #23
100023fe:	18fb      	adds	r3, r7, r3
10002400:	3210      	adds	r2, #16
10002402:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10002404:	2317      	movs	r3, #23
10002406:	18fb      	adds	r3, r7, r3
10002408:	781b      	ldrb	r3, [r3, #0]
1000240a:	2203      	movs	r2, #3
1000240c:	409a      	lsls	r2, r3
1000240e:	1c13      	adds	r3, r2, #0
10002410:	43da      	mvns	r2, r3
10002412:	69bb      	ldr	r3, [r7, #24]
10002414:	4013      	ands	r3, r2
10002416:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
10002418:	687b      	ldr	r3, [r7, #4]
1000241a:	78db      	ldrb	r3, [r3, #3]
1000241c:	1c1a      	adds	r2, r3, #0
1000241e:	2317      	movs	r3, #23
10002420:	18fb      	adds	r3, r7, r3
10002422:	781b      	ldrb	r3, [r3, #0]
10002424:	409a      	lsls	r2, r3
10002426:	1c13      	adds	r3, r2, #0
10002428:	69ba      	ldr	r2, [r7, #24]
1000242a:	4313      	orrs	r3, r2
1000242c:	61bb      	str	r3, [r7, #24]

  slice->INS2 = ins;
1000242e:	68fb      	ldr	r3, [r7, #12]
10002430:	69ba      	ldr	r2, [r7, #24]
10002432:	601a      	str	r2, [r3, #0]

  ins = slice->INS1;
10002434:	68fb      	ldr	r3, [r7, #12]
10002436:	22d8      	movs	r2, #216	; 0xd8
10002438:	589b      	ldr	r3, [r3, r2]
1000243a:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
1000243c:	2317      	movs	r3, #23
1000243e:	18fb      	adds	r3, r7, r3
10002440:	221f      	movs	r2, #31
10002442:	18ba      	adds	r2, r7, r2
10002444:	7812      	ldrb	r2, [r2, #0]
10002446:	00d2      	lsls	r2, r2, #3
10002448:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
1000244a:	2317      	movs	r3, #23
1000244c:	18fb      	adds	r3, r7, r3
1000244e:	781b      	ldrb	r3, [r3, #0]
10002450:	223f      	movs	r2, #63	; 0x3f
10002452:	409a      	lsls	r2, r3
10002454:	1c13      	adds	r3, r2, #0
10002456:	43da      	mvns	r2, r3
10002458:	69bb      	ldr	r3, [r7, #24]
1000245a:	4013      	ands	r3, r2
1000245c:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
1000245e:	687b      	ldr	r3, [r7, #4]
10002460:	781b      	ldrb	r3, [r3, #0]
10002462:	1c1a      	adds	r2, r3, #0
10002464:	2317      	movs	r3, #23
10002466:	18fb      	adds	r3, r7, r3
10002468:	781b      	ldrb	r3, [r3, #0]
1000246a:	409a      	lsls	r2, r3
1000246c:	1c13      	adds	r3, r2, #0
1000246e:	69ba      	ldr	r2, [r7, #24]
10002470:	4313      	orrs	r3, r2
10002472:	61bb      	str	r3, [r7, #24]

  slice->INS1 = ins;
10002474:	68fb      	ldr	r3, [r7, #12]
10002476:	21d8      	movs	r1, #216	; 0xd8
10002478:	69ba      	ldr	r2, [r7, #24]
1000247a:	505a      	str	r2, [r3, r1]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS = ins;
#endif
}
1000247c:	46bd      	mov	sp, r7
1000247e:	b008      	add	sp, #32
10002480:	bd80      	pop	{r7, pc}
10002482:	46c0      	nop			; (mov r8, r8)

10002484 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10002484:	b580      	push	{r7, lr}
10002486:	b086      	sub	sp, #24
10002488:	af00      	add	r7, sp, #0
1000248a:	6078      	str	r0, [r7, #4]
1000248c:	1c08      	adds	r0, r1, #0
1000248e:	1c11      	adds	r1, r2, #0
10002490:	1cfb      	adds	r3, r7, #3
10002492:	1c02      	adds	r2, r0, #0
10002494:	701a      	strb	r2, [r3, #0]
10002496:	1cbb      	adds	r3, r7, #2
10002498:	1c0a      	adds	r2, r1, #0
1000249a:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
1000249c:	1cfb      	adds	r3, r7, #3
1000249e:	781b      	ldrb	r3, [r3, #0]
100024a0:	2b0b      	cmp	r3, #11
100024a2:	d820      	bhi.n	100024e6 <XMC_CCU4_SLICE_SetInterruptNode+0x62>
100024a4:	009a      	lsls	r2, r3, #2
100024a6:	4b20      	ldr	r3, [pc, #128]	; (10002528 <XMC_CCU4_SLICE_SetInterruptNode+0xa4>)
100024a8:	18d3      	adds	r3, r2, r3
100024aa:	681b      	ldr	r3, [r3, #0]
100024ac:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
100024ae:	2303      	movs	r3, #3
100024b0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
100024b2:	2300      	movs	r3, #0
100024b4:	617b      	str	r3, [r7, #20]
      break;
100024b6:	e01b      	b.n	100024f0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
100024b8:	230c      	movs	r3, #12
100024ba:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
100024bc:	2302      	movs	r3, #2
100024be:	617b      	str	r3, [r7, #20]
      break;
100024c0:	e016      	b.n	100024f0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
100024c2:	23c0      	movs	r3, #192	; 0xc0
100024c4:	009b      	lsls	r3, r3, #2
100024c6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
100024c8:	2308      	movs	r3, #8
100024ca:	617b      	str	r3, [r7, #20]
      break;
100024cc:	e010      	b.n	100024f0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
100024ce:	23c0      	movs	r3, #192	; 0xc0
100024d0:	011b      	lsls	r3, r3, #4
100024d2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
100024d4:	230a      	movs	r3, #10
100024d6:	617b      	str	r3, [r7, #20]
      break;
100024d8:	e00a      	b.n	100024f0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
100024da:	23c0      	movs	r3, #192	; 0xc0
100024dc:	019b      	lsls	r3, r3, #6
100024de:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
100024e0:	230c      	movs	r3, #12
100024e2:	617b      	str	r3, [r7, #20]
      break;
100024e4:	e004      	b.n	100024f0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>
	  
	default:
	  mask = 0;
100024e6:	2300      	movs	r3, #0
100024e8:	613b      	str	r3, [r7, #16]
	  pos = 0;
100024ea:	2300      	movs	r3, #0
100024ec:	617b      	str	r3, [r7, #20]
	  break;
100024ee:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
100024f0:	693b      	ldr	r3, [r7, #16]
100024f2:	2b00      	cmp	r3, #0
100024f4:	d014      	beq.n	10002520 <XMC_CCU4_SLICE_SetInterruptNode+0x9c>
  {
    srs = slice->SRS;
100024f6:	687b      	ldr	r3, [r7, #4]
100024f8:	22a8      	movs	r2, #168	; 0xa8
100024fa:	589b      	ldr	r3, [r3, r2]
100024fc:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
100024fe:	693b      	ldr	r3, [r7, #16]
10002500:	43da      	mvns	r2, r3
10002502:	68fb      	ldr	r3, [r7, #12]
10002504:	4013      	ands	r3, r2
10002506:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
10002508:	1cbb      	adds	r3, r7, #2
1000250a:	781a      	ldrb	r2, [r3, #0]
1000250c:	697b      	ldr	r3, [r7, #20]
1000250e:	409a      	lsls	r2, r3
10002510:	1c13      	adds	r3, r2, #0
10002512:	68fa      	ldr	r2, [r7, #12]
10002514:	4313      	orrs	r3, r2
10002516:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
10002518:	687b      	ldr	r3, [r7, #4]
1000251a:	21a8      	movs	r1, #168	; 0xa8
1000251c:	68fa      	ldr	r2, [r7, #12]
1000251e:	505a      	str	r2, [r3, r1]
  }
}
10002520:	46bd      	mov	sp, r7
10002522:	b006      	add	sp, #24
10002524:	bd80      	pop	{r7, pc}
10002526:	46c0      	nop			; (mov r8, r8)
10002528:	1000cdf4 	.word	0x1000cdf4

1000252c <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
1000252c:	b580      	push	{r7, lr}
1000252e:	b084      	sub	sp, #16
10002530:	af00      	add	r7, sp, #0
10002532:	60f8      	str	r0, [r7, #12]
10002534:	607a      	str	r2, [r7, #4]
10002536:	230b      	movs	r3, #11
10002538:	18fb      	adds	r3, r7, r3
1000253a:	1c0a      	adds	r2, r1, #0
1000253c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
1000253e:	68fb      	ldr	r3, [r7, #12]
10002540:	1c18      	adds	r0, r3, #0
10002542:	f7fe fe21 	bl	10001188 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
10002546:	68fb      	ldr	r3, [r7, #12]
10002548:	681b      	ldr	r3, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
1000254a:	220b      	movs	r2, #11
1000254c:	18ba      	adds	r2, r7, r2
1000254e:	7812      	ldrb	r2, [r2, #0]
10002550:	0092      	lsls	r2, r2, #2
10002552:	1c11      	adds	r1, r2, #0
10002554:	220f      	movs	r2, #15
10002556:	408a      	lsls	r2, r1
10002558:	43d2      	mvns	r2, r2
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
1000255a:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
1000255c:	687b      	ldr	r3, [r7, #4]
1000255e:	681b      	ldr	r3, [r3, #0]
10002560:	210b      	movs	r1, #11
10002562:	1879      	adds	r1, r7, r1
10002564:	7809      	ldrb	r1, [r1, #0]
10002566:	0089      	lsls	r1, r1, #2
10002568:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
1000256a:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
1000256c:	68fb      	ldr	r3, [r7, #12]
1000256e:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));

  eru->EXICON[channel] = config->raw;
10002570:	230b      	movs	r3, #11
10002572:	18fb      	adds	r3, r7, r3
10002574:	781a      	ldrb	r2, [r3, #0]
10002576:	687b      	ldr	r3, [r7, #4]
10002578:	6859      	ldr	r1, [r3, #4]
1000257a:	68fb      	ldr	r3, [r7, #12]
1000257c:	3204      	adds	r2, #4
1000257e:	0092      	lsls	r2, r2, #2
10002580:	50d1      	str	r1, [r2, r3]
}
10002582:	46bd      	mov	sp, r7
10002584:	b004      	add	sp, #16
10002586:	bd80      	pop	{r7, pc}

10002588 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
10002588:	b590      	push	{r4, r7, lr}
1000258a:	b083      	sub	sp, #12
1000258c:	af00      	add	r7, sp, #0
1000258e:	6078      	str	r0, [r7, #4]
10002590:	1c08      	adds	r0, r1, #0
10002592:	1c11      	adds	r1, r2, #0
10002594:	1cfb      	adds	r3, r7, #3
10002596:	1c02      	adds	r2, r0, #0
10002598:	701a      	strb	r2, [r3, #0]
1000259a:	1cbb      	adds	r3, r7, #2
1000259c:	1c0a      	adds	r2, r1, #0
1000259e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
100025a0:	1cfb      	adds	r3, r7, #3
100025a2:	781a      	ldrb	r2, [r3, #0]
100025a4:	1cbb      	adds	r3, r7, #2
100025a6:	781b      	ldrb	r3, [r3, #0]
100025a8:	2103      	movs	r1, #3
100025aa:	400b      	ands	r3, r1
100025ac:	b2d9      	uxtb	r1, r3
100025ae:	687b      	ldr	r3, [r7, #4]
100025b0:	3208      	adds	r2, #8
100025b2:	0092      	lsls	r2, r2, #2
100025b4:	2003      	movs	r0, #3
100025b6:	4001      	ands	r1, r0
100025b8:	0109      	lsls	r1, r1, #4
100025ba:	58d0      	ldr	r0, [r2, r3]
100025bc:	2430      	movs	r4, #48	; 0x30
100025be:	43a0      	bics	r0, r4
100025c0:	4301      	orrs	r1, r0
100025c2:	50d1      	str	r1, [r2, r3]

}
100025c4:	46bd      	mov	sp, r7
100025c6:	b003      	add	sp, #12
100025c8:	bd90      	pop	{r4, r7, pc}
100025ca:	46c0      	nop			; (mov r8, r8)

100025cc <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
100025cc:	b580      	push	{r7, lr}
100025ce:	b082      	sub	sp, #8
100025d0:	af00      	add	r7, sp, #0
100025d2:	6078      	str	r0, [r7, #4]
100025d4:	1c08      	adds	r0, r1, #0
100025d6:	1c11      	adds	r1, r2, #0
100025d8:	1cfb      	adds	r3, r7, #3
100025da:	1c02      	adds	r2, r0, #0
100025dc:	701a      	strb	r2, [r3, #0]
100025de:	1cbb      	adds	r3, r7, #2
100025e0:	1c0a      	adds	r2, r1, #0
100025e2:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100025e4:	687b      	ldr	r3, [r7, #4]
100025e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100025e8:	1cfa      	adds	r2, r7, #3
100025ea:	7812      	ldrb	r2, [r2, #0]
100025ec:	0052      	lsls	r2, r2, #1
100025ee:	1c11      	adds	r1, r2, #0
100025f0:	2203      	movs	r2, #3
100025f2:	408a      	lsls	r2, r1
100025f4:	43d2      	mvns	r2, r2
100025f6:	401a      	ands	r2, r3
100025f8:	687b      	ldr	r3, [r7, #4]
100025fa:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100025fc:	687b      	ldr	r3, [r7, #4]
100025fe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10002600:	1cbb      	adds	r3, r7, #2
10002602:	781b      	ldrb	r3, [r3, #0]
10002604:	1cf9      	adds	r1, r7, #3
10002606:	7809      	ldrb	r1, [r1, #0]
10002608:	0049      	lsls	r1, r1, #1
1000260a:	408b      	lsls	r3, r1
1000260c:	431a      	orrs	r2, r3
1000260e:	687b      	ldr	r3, [r7, #4]
10002610:	675a      	str	r2, [r3, #116]	; 0x74
}
10002612:	46bd      	mov	sp, r7
10002614:	b002      	add	sp, #8
10002616:	bd80      	pop	{r7, pc}

10002618 <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
10002618:	b580      	push	{r7, lr}
1000261a:	b088      	sub	sp, #32
1000261c:	af00      	add	r7, sp, #0
1000261e:	6078      	str	r0, [r7, #4]
10002620:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10002622:	f3ef 8310 	mrs	r3, PRIMASK
10002626:	617b      	str	r3, [r7, #20]
  return(result);
10002628:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000262a:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000262c:	b672      	cpsid	i
  __disable_irq ();
  return status;
1000262e:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10002630:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10002632:	4b0c      	ldr	r3, [pc, #48]	; (10002664 <__aeabi_uidiv+0x4c>)
10002634:	2204      	movs	r2, #4
10002636:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10002638:	4b0a      	ldr	r3, [pc, #40]	; (10002664 <__aeabi_uidiv+0x4c>)
1000263a:	687a      	ldr	r2, [r7, #4]
1000263c:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
1000263e:	4b09      	ldr	r3, [pc, #36]	; (10002664 <__aeabi_uidiv+0x4c>)
10002640:	683a      	ldr	r2, [r7, #0]
10002642:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10002644:	4b07      	ldr	r3, [pc, #28]	; (10002664 <__aeabi_uidiv+0x4c>)
10002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002648:	61bb      	str	r3, [r7, #24]
1000264a:	69fb      	ldr	r3, [r7, #28]
1000264c:	60fb      	str	r3, [r7, #12]
1000264e:	68fb      	ldr	r3, [r7, #12]
10002650:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002652:	68bb      	ldr	r3, [r7, #8]
10002654:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
10002658:	69bb      	ldr	r3, [r7, #24]
}
1000265a:	1c18      	adds	r0, r3, #0
1000265c:	46bd      	mov	sp, r7
1000265e:	b008      	add	sp, #32
10002660:	bd80      	pop	{r7, pc}
10002662:	46c0      	nop			; (mov r8, r8)
10002664:	40030000 	.word	0x40030000

10002668 <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
10002668:	b580      	push	{r7, lr}
1000266a:	b088      	sub	sp, #32
1000266c:	af00      	add	r7, sp, #0
1000266e:	6078      	str	r0, [r7, #4]
10002670:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10002672:	f3ef 8310 	mrs	r3, PRIMASK
10002676:	617b      	str	r3, [r7, #20]
  return(result);
10002678:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000267a:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000267c:	b672      	cpsid	i
  __disable_irq ();
  return status;
1000267e:	693b      	ldr	r3, [r7, #16]
/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10002680:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
10002682:	4b0c      	ldr	r3, [pc, #48]	; (100026b4 <__aeabi_idiv+0x4c>)
10002684:	2200      	movs	r2, #0
10002686:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10002688:	4b0a      	ldr	r3, [pc, #40]	; (100026b4 <__aeabi_idiv+0x4c>)
1000268a:	687a      	ldr	r2, [r7, #4]
1000268c:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
1000268e:	4b09      	ldr	r3, [pc, #36]	; (100026b4 <__aeabi_idiv+0x4c>)
10002690:	683a      	ldr	r2, [r7, #0]
10002692:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10002694:	4b07      	ldr	r3, [pc, #28]	; (100026b4 <__aeabi_idiv+0x4c>)
10002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002698:	61bb      	str	r3, [r7, #24]
1000269a:	69fb      	ldr	r3, [r7, #28]
1000269c:	60fb      	str	r3, [r7, #12]
1000269e:	68fb      	ldr	r3, [r7, #12]
100026a0:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100026a2:	68bb      	ldr	r3, [r7, #8]
100026a4:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
100026a8:	69bb      	ldr	r3, [r7, #24]
}
100026aa:	1c18      	adds	r0, r3, #0
100026ac:	46bd      	mov	sp, r7
100026ae:	b008      	add	sp, #32
100026b0:	bd80      	pop	{r7, pc}
100026b2:	46c0      	nop			; (mov r8, r8)
100026b4:	40030000 	.word	0x40030000

100026b8 <__aeabi_uidivmod>:

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
100026b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100026ba:	b08d      	sub	sp, #52	; 0x34
100026bc:	af00      	add	r7, sp, #0
100026be:	6078      	str	r0, [r7, #4]
100026c0:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100026c2:	f3ef 8210 	mrs	r2, PRIMASK
100026c6:	617a      	str	r2, [r7, #20]
  return(result);
100026c8:	697a      	ldr	r2, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
100026ca:	613a      	str	r2, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100026cc:	b672      	cpsid	i
  __disable_irq ();
  return status;
100026ce:	693a      	ldr	r2, [r7, #16]
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
100026d0:	62fa      	str	r2, [r7, #44]	; 0x2c

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100026d2:	4a15      	ldr	r2, [pc, #84]	; (10002728 <__aeabi_uidivmod+0x70>)
100026d4:	2104      	movs	r1, #4
100026d6:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
100026d8:	4a13      	ldr	r2, [pc, #76]	; (10002728 <__aeabi_uidivmod+0x70>)
100026da:	6879      	ldr	r1, [r7, #4]
100026dc:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
100026de:	4a12      	ldr	r2, [pc, #72]	; (10002728 <__aeabi_uidivmod+0x70>)
100026e0:	6839      	ldr	r1, [r7, #0]
100026e2:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;
100026e4:	4a10      	ldr	r2, [pc, #64]	; (10002728 <__aeabi_uidivmod+0x70>)
100026e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
100026e8:	623a      	str	r2, [r7, #32]
100026ea:	2200      	movs	r2, #0
100026ec:	627a      	str	r2, [r7, #36]	; 0x24
  quot = (uint64_t)MATH->QUOT;
100026ee:	4a0e      	ldr	r2, [pc, #56]	; (10002728 <__aeabi_uidivmod+0x70>)
100026f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
100026f2:	61ba      	str	r2, [r7, #24]
100026f4:	2200      	movs	r2, #0
100026f6:	61fa      	str	r2, [r7, #28]
100026f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100026fa:	60fa      	str	r2, [r7, #12]
100026fc:	68fa      	ldr	r2, [r7, #12]
100026fe:	60ba      	str	r2, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002700:	68ba      	ldr	r2, [r7, #8]
10002702:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((remainder << 32) | quot);
10002706:	6a3a      	ldr	r2, [r7, #32]
10002708:	0014      	movs	r4, r2
1000270a:	2200      	movs	r2, #0
1000270c:	1c13      	adds	r3, r2, #0
1000270e:	69ba      	ldr	r2, [r7, #24]
10002710:	431a      	orrs	r2, r3
10002712:	1c15      	adds	r5, r2, #0
10002714:	69fa      	ldr	r2, [r7, #28]
10002716:	4322      	orrs	r2, r4
10002718:	1c16      	adds	r6, r2, #0
1000271a:	1c2b      	adds	r3, r5, #0
1000271c:	1c34      	adds	r4, r6, #0
}
1000271e:	1c18      	adds	r0, r3, #0
10002720:	1c21      	adds	r1, r4, #0
10002722:	46bd      	mov	sp, r7
10002724:	b00d      	add	sp, #52	; 0x34
10002726:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002728:	40030000 	.word	0x40030000

1000272c <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
1000272c:	b580      	push	{r7, lr}
1000272e:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
10002730:	2380      	movs	r3, #128	; 0x80
10002732:	009b      	lsls	r3, r3, #2
10002734:	1c18      	adds	r0, r3, #0
10002736:	f7fe ff11 	bl	1000155c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
#endif
}
1000273a:	46bd      	mov	sp, r7
1000273c:	bd80      	pop	{r7, pc}
1000273e:	46c0      	nop			; (mov r8, r8)

10002740 <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
10002740:	b580      	push	{r7, lr}
10002742:	b082      	sub	sp, #8
10002744:	af00      	add	r7, sp, #0
10002746:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
10002748:	f7ff fff0 	bl	1000272c <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
1000274c:	4a07      	ldr	r2, [pc, #28]	; (1000276c <XMC_WDT_Init+0x2c>)
1000274e:	687b      	ldr	r3, [r7, #4]
10002750:	689b      	ldr	r3, [r3, #8]
10002752:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
10002754:	4a05      	ldr	r2, [pc, #20]	; (1000276c <XMC_WDT_Init+0x2c>)
10002756:	687b      	ldr	r3, [r7, #4]
10002758:	685b      	ldr	r3, [r3, #4]
1000275a:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
1000275c:	4a03      	ldr	r2, [pc, #12]	; (1000276c <XMC_WDT_Init+0x2c>)
1000275e:	687b      	ldr	r3, [r7, #4]
10002760:	681b      	ldr	r3, [r3, #0]
10002762:	6153      	str	r3, [r2, #20]
}
10002764:	46bd      	mov	sp, r7
10002766:	b002      	add	sp, #8
10002768:	bd80      	pop	{r7, pc}
1000276a:	46c0      	nop			; (mov r8, r8)
1000276c:	40020000 	.word	0x40020000

10002770 <_init>:
  }
}

/* Init */
void _init(void)
{}
10002770:	b580      	push	{r7, lr}
10002772:	af00      	add	r7, sp, #0
10002774:	46bd      	mov	sp, r7
10002776:	bd80      	pop	{r7, pc}

10002778 <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
10002778:	b590      	push	{r4, r7, lr}
1000277a:	b085      	sub	sp, #20
1000277c:	af00      	add	r7, sp, #0
1000277e:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
10002780:	230f      	movs	r3, #15
10002782:	18fb      	adds	r3, r7, r3
10002784:	2200      	movs	r2, #0
10002786:	701a      	strb	r2, [r3, #0]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
10002788:	687b      	ldr	r3, [r7, #4]
1000278a:	7b1b      	ldrb	r3, [r3, #12]
1000278c:	2201      	movs	r2, #1
1000278e:	4053      	eors	r3, r2
10002790:	b2db      	uxtb	r3, r3
10002792:	2b00      	cmp	r3, #0
10002794:	d014      	beq.n	100027c0 <WATCHDOG_Init+0x48>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
10002796:	230f      	movs	r3, #15
10002798:	18fc      	adds	r4, r7, r3
1000279a:	687b      	ldr	r3, [r7, #4]
1000279c:	1c18      	adds	r0, r3, #0
1000279e:	f000 f817 	bl	100027d0 <WATCHDOG_lPrewarning_Configure>
100027a2:	1c03      	adds	r3, r0, #0
100027a4:	7023      	strb	r3, [r4, #0]
      if(WATCHDOG_STATUS_FAILURE != status)
100027a6:	230f      	movs	r3, #15
100027a8:	18fb      	adds	r3, r7, r3
100027aa:	781b      	ldrb	r3, [r3, #0]
100027ac:	2b01      	cmp	r3, #1
100027ae:	d007      	beq.n	100027c0 <WATCHDOG_Init+0x48>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
100027b0:	687b      	ldr	r3, [r7, #4]
100027b2:	681b      	ldr	r3, [r3, #0]
100027b4:	1c18      	adds	r0, r3, #0
100027b6:	f7ff ffc3 	bl	10002740 <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
100027ba:	687b      	ldr	r3, [r7, #4]
100027bc:	2201      	movs	r2, #1
100027be:	731a      	strb	r2, [r3, #12]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
100027c0:	230f      	movs	r3, #15
100027c2:	18fb      	adds	r3, r7, r3
100027c4:	781b      	ldrb	r3, [r3, #0]
}
100027c6:	1c18      	adds	r0, r3, #0
100027c8:	46bd      	mov	sp, r7
100027ca:	b005      	add	sp, #20
100027cc:	bd90      	pop	{r4, r7, pc}
100027ce:	46c0      	nop			; (mov r8, r8)

100027d0 <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
100027d0:	b590      	push	{r4, r7, lr}
100027d2:	b085      	sub	sp, #20
100027d4:	af00      	add	r7, sp, #0
100027d6:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
100027d8:	230f      	movs	r3, #15
100027da:	18fb      	adds	r3, r7, r3
100027dc:	2200      	movs	r2, #0
100027de:	701a      	strb	r2, [r3, #0]
  /* Normal interrupt generation */
#if (WATCHDOG_EVENT_VIA_SCU == 1U)
  #if(UC_FAMILY == XMC4)
    status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC4_Init(handle->scu_global_handler);
  #else
    status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC1_Init(handle->scu_global_handler);
100027e0:	687b      	ldr	r3, [r7, #4]
100027e2:	685b      	ldr	r3, [r3, #4]
100027e4:	220f      	movs	r2, #15
100027e6:	18bc      	adds	r4, r7, r2
100027e8:	1c18      	adds	r0, r3, #0
100027ea:	f000 fcef 	bl	100031cc <GLOBAL_SCU_XMC1_Init>
100027ee:	1c03      	adds	r3, r0, #0
100027f0:	7023      	strb	r3, [r4, #0]
  #endif
    if ((handle->callback_func_ptr != NULL) &&  (status != WATCHDOG_STATUS_FAILURE))
100027f2:	687b      	ldr	r3, [r7, #4]
100027f4:	689b      	ldr	r3, [r3, #8]
100027f6:	2b00      	cmp	r3, #0
100027f8:	d014      	beq.n	10002824 <WATCHDOG_lPrewarning_Configure+0x54>
100027fa:	230f      	movs	r3, #15
100027fc:	18fb      	adds	r3, r7, r3
100027fe:	781b      	ldrb	r3, [r3, #0]
10002800:	2b01      	cmp	r3, #1
10002802:	d00f      	beq.n	10002824 <WATCHDOG_lPrewarning_Configure+0x54>
    {
      /* Enable the pre-warn event */
      XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
10002804:	2001      	movs	r0, #1
10002806:	2100      	movs	r1, #0
10002808:	f7fe fd84 	bl	10001314 <XMC_SCU_INTERRUPT_EnableEvent>
      /* Register User defined Event Handler function */
	  #if(UC_FAMILY == XMC4)
      status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(GLOBAL_SCU_XMC4_EVENT_WDT_WARNING,
    		                                                       handle->callback_func_ptr);
	  #else
      status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback(GLOBAL_SCU_XMC1_EVENT_WDT_WARNING,
1000280c:	687b      	ldr	r3, [r7, #4]
1000280e:	689b      	ldr	r3, [r3, #8]
10002810:	220f      	movs	r2, #15
10002812:	18bc      	adds	r4, r7, r2
10002814:	2001      	movs	r0, #1
10002816:	2100      	movs	r1, #0
10002818:	1c1a      	adds	r2, r3, #0
1000281a:	f000 fd4b 	bl	100032b4 <GLOBAL_SCU_XMC1_RegisterCallback>
1000281e:	1c03      	adds	r3, r0, #0
10002820:	7023      	strb	r3, [r4, #0]
10002822:	e003      	b.n	1000282c <WATCHDOG_lPrewarning_Configure+0x5c>
    		                                                       handle->callback_func_ptr);
	  #endif
    }
    else
    {
      status = WATCHDOG_STATUS_FAILURE;
10002824:	230f      	movs	r3, #15
10002826:	18fb      	adds	r3, r7, r3
10002828:	2201      	movs	r2, #1
1000282a:	701a      	strb	r2, [r3, #0]
#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
#endif

  return (status);
1000282c:	230f      	movs	r3, #15
1000282e:	18fb      	adds	r3, r7, r3
10002830:	781b      	ldrb	r3, [r3, #0]
}
10002832:	1c18      	adds	r0, r3, #0
10002834:	46bd      	mov	sp, r7
10002836:	b005      	add	sp, #20
10002838:	bd90      	pop	{r4, r7, pc}
1000283a:	46c0      	nop			; (mov r8, r8)

1000283c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
1000283c:	b580      	push	{r7, lr}
1000283e:	b082      	sub	sp, #8
10002840:	af00      	add	r7, sp, #0
10002842:	6078      	str	r0, [r7, #4]
10002844:	1c0a      	adds	r2, r1, #0
10002846:	1cfb      	adds	r3, r7, #3
10002848:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
1000284a:	1cfb      	adds	r3, r7, #3
1000284c:	781b      	ldrb	r3, [r3, #0]
1000284e:	2201      	movs	r2, #1
10002850:	409a      	lsls	r2, r3
10002852:	687b      	ldr	r3, [r7, #4]
10002854:	60da      	str	r2, [r3, #12]
}
10002856:	46bd      	mov	sp, r7
10002858:	b002      	add	sp, #8
1000285a:	bd80      	pop	{r7, pc}

1000285c <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
1000285c:	b580      	push	{r7, lr}
1000285e:	b082      	sub	sp, #8
10002860:	af00      	add	r7, sp, #0
10002862:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10002864:	687b      	ldr	r3, [r7, #4]
10002866:	2201      	movs	r2, #1
10002868:	60da      	str	r2, [r3, #12]
}
1000286a:	46bd      	mov	sp, r7
1000286c:	b002      	add	sp, #8
1000286e:	bd80      	pop	{r7, pc}

10002870 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
10002870:	b580      	push	{r7, lr}
10002872:	b082      	sub	sp, #8
10002874:	af00      	add	r7, sp, #0
10002876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
10002878:	687b      	ldr	r3, [r7, #4]
1000287a:	2202      	movs	r2, #2
1000287c:	611a      	str	r2, [r3, #16]
}
1000287e:	46bd      	mov	sp, r7
10002880:	b002      	add	sp, #8
10002882:	bd80      	pop	{r7, pc}

10002884 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10002884:	b580      	push	{r7, lr}
10002886:	b082      	sub	sp, #8
10002888:	af00      	add	r7, sp, #0
1000288a:	6078      	str	r0, [r7, #4]
1000288c:	1c0a      	adds	r2, r1, #0
1000288e:	1cbb      	adds	r3, r7, #2
10002890:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10002892:	1cbb      	adds	r3, r7, #2
10002894:	881a      	ldrh	r2, [r3, #0]
10002896:	687b      	ldr	r3, [r7, #4]
10002898:	635a      	str	r2, [r3, #52]	; 0x34
}
1000289a:	46bd      	mov	sp, r7
1000289c:	b002      	add	sp, #8
1000289e:	bd80      	pop	{r7, pc}

100028a0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
100028a0:	b580      	push	{r7, lr}
100028a2:	b082      	sub	sp, #8
100028a4:	af00      	add	r7, sp, #0
100028a6:	6078      	str	r0, [r7, #4]
100028a8:	1c0a      	adds	r2, r1, #0
100028aa:	1cbb      	adds	r3, r7, #2
100028ac:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
100028ae:	1cbb      	adds	r3, r7, #2
100028b0:	881a      	ldrh	r2, [r3, #0]
100028b2:	687b      	ldr	r3, [r7, #4]
100028b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
100028b6:	46bd      	mov	sp, r7
100028b8:	b002      	add	sp, #8
100028ba:	bd80      	pop	{r7, pc}

100028bc <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
100028bc:	b580      	push	{r7, lr}
100028be:	b082      	sub	sp, #8
100028c0:	af00      	add	r7, sp, #0
100028c2:	6078      	str	r0, [r7, #4]
100028c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
100028c6:	687b      	ldr	r3, [r7, #4]
100028c8:	683a      	ldr	r2, [r7, #0]
100028ca:	611a      	str	r2, [r3, #16]
}
100028cc:	46bd      	mov	sp, r7
100028ce:	b002      	add	sp, #8
100028d0:	bd80      	pop	{r7, pc}
100028d2:	46c0      	nop			; (mov r8, r8)

100028d4 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
100028d4:	b580      	push	{r7, lr}
100028d6:	b082      	sub	sp, #8
100028d8:	af00      	add	r7, sp, #0
100028da:	6078      	str	r0, [r7, #4]
100028dc:	1c0a      	adds	r2, r1, #0
100028de:	1cfb      	adds	r3, r7, #3
100028e0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
100028e2:	687b      	ldr	r3, [r7, #4]
100028e4:	22a4      	movs	r2, #164	; 0xa4
100028e6:	589a      	ldr	r2, [r3, r2]
100028e8:	1cfb      	adds	r3, r7, #3
100028ea:	781b      	ldrb	r3, [r3, #0]
100028ec:	2101      	movs	r1, #1
100028ee:	4099      	lsls	r1, r3
100028f0:	1c0b      	adds	r3, r1, #0
100028f2:	431a      	orrs	r2, r3
100028f4:	687b      	ldr	r3, [r7, #4]
100028f6:	21a4      	movs	r1, #164	; 0xa4
100028f8:	505a      	str	r2, [r3, r1]
}
100028fa:	46bd      	mov	sp, r7
100028fc:	b002      	add	sp, #8
100028fe:	bd80      	pop	{r7, pc}

10002900 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
10002900:	b590      	push	{r4, r7, lr}
10002902:	b085      	sub	sp, #20
10002904:	af00      	add	r7, sp, #0
10002906:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
10002908:	230f      	movs	r3, #15
1000290a:	18fb      	adds	r3, r7, r3
1000290c:	2200      	movs	r2, #0
1000290e:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
10002910:	687b      	ldr	r3, [r7, #4]
10002912:	2226      	movs	r2, #38	; 0x26
10002914:	5c9b      	ldrb	r3, [r3, r2]
10002916:	2201      	movs	r2, #1
10002918:	4053      	eors	r3, r2
1000291a:	b2db      	uxtb	r3, r3
1000291c:	2b00      	cmp	r3, #0
1000291e:	d00c      	beq.n	1000293a <TIMER_Init+0x3a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10002920:	687b      	ldr	r3, [r7, #4]
10002922:	2221      	movs	r2, #33	; 0x21
10002924:	5c9b      	ldrb	r3, [r3, r2]
10002926:	2b00      	cmp	r3, #0
10002928:	d107      	bne.n	1000293a <TIMER_Init+0x3a>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
1000292a:	230f      	movs	r3, #15
1000292c:	18fc      	adds	r4, r7, r3
1000292e:	687b      	ldr	r3, [r7, #4]
10002930:	1c18      	adds	r0, r3, #0
10002932:	f000 f809 	bl	10002948 <TIMER_CCU4_lInit>
10002936:	1c03      	adds	r3, r0, #0
10002938:	7023      	strb	r3, [r4, #0]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
1000293a:	230f      	movs	r3, #15
1000293c:	18fb      	adds	r3, r7, r3
1000293e:	781b      	ldrb	r3, [r3, #0]
}
10002940:	1c18      	adds	r0, r3, #0
10002942:	46bd      	mov	sp, r7
10002944:	b005      	add	sp, #20
10002946:	bd90      	pop	{r4, r7, pc}

10002948 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
10002948:	b590      	push	{r4, r7, lr}
1000294a:	b085      	sub	sp, #20
1000294c:	af00      	add	r7, sp, #0
1000294e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
10002950:	687b      	ldr	r3, [r7, #4]
10002952:	691b      	ldr	r3, [r3, #16]
10002954:	220f      	movs	r2, #15
10002956:	18bc      	adds	r4, r7, r2
10002958:	1c18      	adds	r0, r3, #0
1000295a:	f000 fccf 	bl	100032fc <GLOBAL_CCU4_Init>
1000295e:	1c03      	adds	r3, r0, #0
10002960:	7023      	strb	r3, [r4, #0]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
10002962:	687b      	ldr	r3, [r7, #4]
10002964:	691b      	ldr	r3, [r3, #16]
10002966:	689a      	ldr	r2, [r3, #8]
10002968:	687b      	ldr	r3, [r7, #4]
1000296a:	7e1b      	ldrb	r3, [r3, #24]
1000296c:	1c10      	adds	r0, r2, #0
1000296e:	1c19      	adds	r1, r3, #0
10002970:	f7ff ff64 	bl	1000283c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
10002974:	687b      	ldr	r3, [r7, #4]
10002976:	695a      	ldr	r2, [r3, #20]
10002978:	687b      	ldr	r3, [r7, #4]
1000297a:	69db      	ldr	r3, [r3, #28]
1000297c:	1c10      	adds	r0, r2, #0
1000297e:	1c19      	adds	r1, r3, #0
10002980:	f7ff fc5e 	bl	10002240 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
10002984:	687b      	ldr	r3, [r7, #4]
10002986:	1c18      	adds	r0, r3, #0
10002988:	f000 f830 	bl	100029ec <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
1000298c:	687b      	ldr	r3, [r7, #4]
1000298e:	2225      	movs	r2, #37	; 0x25
10002990:	5c9b      	ldrb	r3, [r3, r2]
10002992:	2b00      	cmp	r3, #0
10002994:	d00f      	beq.n	100029b6 <TIMER_CCU4_lInit+0x6e>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10002996:	687b      	ldr	r3, [r7, #4]
10002998:	6959      	ldr	r1, [r3, #20]
1000299a:	687b      	ldr	r3, [r7, #4]
1000299c:	2220      	movs	r2, #32
1000299e:	5c9b      	ldrb	r3, [r3, r2]
100029a0:	1c08      	adds	r0, r1, #0
100029a2:	2100      	movs	r1, #0
100029a4:	1c1a      	adds	r2, r3, #0
100029a6:	f7ff fd6d 	bl	10002484 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100029aa:	687b      	ldr	r3, [r7, #4]
100029ac:	695b      	ldr	r3, [r3, #20]
100029ae:	1c18      	adds	r0, r3, #0
100029b0:	2100      	movs	r1, #0
100029b2:	f7ff ff8f 	bl	100028d4 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
100029b6:	687b      	ldr	r3, [r7, #4]
100029b8:	695b      	ldr	r3, [r3, #20]
100029ba:	1c18      	adds	r0, r3, #0
100029bc:	f7ff ff58 	bl	10002870 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
100029c0:	687b      	ldr	r3, [r7, #4]
100029c2:	2226      	movs	r2, #38	; 0x26
100029c4:	2101      	movs	r1, #1
100029c6:	5499      	strb	r1, [r3, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
100029c8:	687b      	ldr	r3, [r7, #4]
100029ca:	2224      	movs	r2, #36	; 0x24
100029cc:	5c9b      	ldrb	r3, [r3, r2]
100029ce:	2b00      	cmp	r3, #0
100029d0:	d004      	beq.n	100029dc <TIMER_CCU4_lInit+0x94>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
100029d2:	687b      	ldr	r3, [r7, #4]
100029d4:	695b      	ldr	r3, [r3, #20]
100029d6:	1c18      	adds	r0, r3, #0
100029d8:	f7ff ff40 	bl	1000285c <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
100029dc:	230f      	movs	r3, #15
100029de:	18fb      	adds	r3, r7, r3
100029e0:	781b      	ldrb	r3, [r3, #0]
}
100029e2:	1c18      	adds	r0, r3, #0
100029e4:	46bd      	mov	sp, r7
100029e6:	b005      	add	sp, #20
100029e8:	bd90      	pop	{r4, r7, pc}
100029ea:	46c0      	nop			; (mov r8, r8)

100029ec <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
100029ec:	b580      	push	{r7, lr}
100029ee:	b082      	sub	sp, #8
100029f0:	af00      	add	r7, sp, #0
100029f2:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
100029f4:	687b      	ldr	r3, [r7, #4]
100029f6:	695a      	ldr	r2, [r3, #20]
100029f8:	687b      	ldr	r3, [r7, #4]
100029fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
100029fc:	1c10      	adds	r0, r2, #0
100029fe:	1c19      	adds	r1, r3, #0
10002a00:	f7ff ff40 	bl	10002884 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
10002a04:	687b      	ldr	r3, [r7, #4]
10002a06:	695b      	ldr	r3, [r3, #20]
10002a08:	1c18      	adds	r0, r3, #0
10002a0a:	2100      	movs	r1, #0
10002a0c:	f7ff ff48 	bl	100028a0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
10002a10:	687b      	ldr	r3, [r7, #4]
10002a12:	691b      	ldr	r3, [r3, #16]
10002a14:	689a      	ldr	r2, [r3, #8]
10002a16:	687b      	ldr	r3, [r7, #4]
10002a18:	68db      	ldr	r3, [r3, #12]
10002a1a:	1c10      	adds	r0, r2, #0
10002a1c:	1c19      	adds	r1, r3, #0
10002a1e:	f7ff ff4d 	bl	100028bc <XMC_CCU4_EnableShadowTransfer>
}
10002a22:	46bd      	mov	sp, r7
10002a24:	b002      	add	sp, #8
10002a26:	bd80      	pop	{r7, pc}

10002a28 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10002a28:	b580      	push	{r7, lr}
10002a2a:	b082      	sub	sp, #8
10002a2c:	af00      	add	r7, sp, #0
10002a2e:	6078      	str	r0, [r7, #4]
10002a30:	1c0a      	adds	r2, r1, #0
10002a32:	1cfb      	adds	r3, r7, #3
10002a34:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
10002a36:	1cfb      	adds	r3, r7, #3
10002a38:	781b      	ldrb	r3, [r3, #0]
10002a3a:	2201      	movs	r2, #1
10002a3c:	409a      	lsls	r2, r3
10002a3e:	687b      	ldr	r3, [r7, #4]
10002a40:	60da      	str	r2, [r3, #12]
}
10002a42:	46bd      	mov	sp, r7
10002a44:	b002      	add	sp, #8
10002a46:	bd80      	pop	{r7, pc}

10002a48 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10002a48:	b580      	push	{r7, lr}
10002a4a:	b082      	sub	sp, #8
10002a4c:	af00      	add	r7, sp, #0
10002a4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10002a50:	687b      	ldr	r3, [r7, #4]
10002a52:	2201      	movs	r2, #1
10002a54:	60da      	str	r2, [r3, #12]
}
10002a56:	46bd      	mov	sp, r7
10002a58:	b002      	add	sp, #8
10002a5a:	bd80      	pop	{r7, pc}

10002a5c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10002a5c:	b580      	push	{r7, lr}
10002a5e:	b082      	sub	sp, #8
10002a60:	af00      	add	r7, sp, #0
10002a62:	6078      	str	r0, [r7, #4]
10002a64:	1c0a      	adds	r2, r1, #0
10002a66:	1cbb      	adds	r3, r7, #2
10002a68:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10002a6a:	1cbb      	adds	r3, r7, #2
10002a6c:	881a      	ldrh	r2, [r3, #0]
10002a6e:	687b      	ldr	r3, [r7, #4]
10002a70:	635a      	str	r2, [r3, #52]	; 0x34
}
10002a72:	46bd      	mov	sp, r7
10002a74:	b002      	add	sp, #8
10002a76:	bd80      	pop	{r7, pc}

10002a78 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10002a78:	b580      	push	{r7, lr}
10002a7a:	b082      	sub	sp, #8
10002a7c:	af00      	add	r7, sp, #0
10002a7e:	6078      	str	r0, [r7, #4]
10002a80:	1c0a      	adds	r2, r1, #0
10002a82:	1cbb      	adds	r3, r7, #2
10002a84:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10002a86:	1cbb      	adds	r3, r7, #2
10002a88:	881a      	ldrh	r2, [r3, #0]
10002a8a:	687b      	ldr	r3, [r7, #4]
10002a8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002a8e:	46bd      	mov	sp, r7
10002a90:	b002      	add	sp, #8
10002a92:	bd80      	pop	{r7, pc}

10002a94 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002a94:	b580      	push	{r7, lr}
10002a96:	b082      	sub	sp, #8
10002a98:	af00      	add	r7, sp, #0
10002a9a:	6078      	str	r0, [r7, #4]
10002a9c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10002a9e:	687b      	ldr	r3, [r7, #4]
10002aa0:	683a      	ldr	r2, [r7, #0]
10002aa2:	611a      	str	r2, [r3, #16]
}
10002aa4:	46bd      	mov	sp, r7
10002aa6:	b002      	add	sp, #8
10002aa8:	bd80      	pop	{r7, pc}
10002aaa:	46c0      	nop			; (mov r8, r8)

10002aac <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10002aac:	b580      	push	{r7, lr}
10002aae:	b082      	sub	sp, #8
10002ab0:	af00      	add	r7, sp, #0
10002ab2:	6078      	str	r0, [r7, #4]
10002ab4:	1c0a      	adds	r2, r1, #0
10002ab6:	1cfb      	adds	r3, r7, #3
10002ab8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10002aba:	687b      	ldr	r3, [r7, #4]
10002abc:	22a4      	movs	r2, #164	; 0xa4
10002abe:	589a      	ldr	r2, [r3, r2]
10002ac0:	1cfb      	adds	r3, r7, #3
10002ac2:	781b      	ldrb	r3, [r3, #0]
10002ac4:	2101      	movs	r1, #1
10002ac6:	4099      	lsls	r1, r3
10002ac8:	1c0b      	adds	r3, r1, #0
10002aca:	431a      	orrs	r2, r3
10002acc:	687b      	ldr	r3, [r7, #4]
10002ace:	21a4      	movs	r1, #164	; 0xa4
10002ad0:	505a      	str	r2, [r3, r1]
}
10002ad2:	46bd      	mov	sp, r7
10002ad4:	b002      	add	sp, #8
10002ad6:	bd80      	pop	{r7, pc}

10002ad8 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
10002ad8:	b590      	push	{r4, r7, lr}
10002ada:	b085      	sub	sp, #20
10002adc:	af00      	add	r7, sp, #0
10002ade:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
10002ae0:	230f      	movs	r3, #15
10002ae2:	18fb      	adds	r3, r7, r3
10002ae4:	2201      	movs	r2, #1
10002ae6:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL));

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
10002ae8:	687b      	ldr	r3, [r7, #4]
10002aea:	2229      	movs	r2, #41	; 0x29
10002aec:	5c9b      	ldrb	r3, [r3, r2]
10002aee:	2b02      	cmp	r3, #2
10002af0:	d155      	bne.n	10002b9e <PWM_lCCU4_Init+0xc6>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
10002af2:	687b      	ldr	r3, [r7, #4]
10002af4:	681b      	ldr	r3, [r3, #0]
10002af6:	220f      	movs	r2, #15
10002af8:	18bc      	adds	r4, r7, r2
10002afa:	1c18      	adds	r0, r3, #0
10002afc:	f000 fbfe 	bl	100032fc <GLOBAL_CCU4_Init>
10002b00:	1c03      	adds	r3, r0, #0
10002b02:	7023      	strb	r3, [r4, #0]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
10002b04:	230f      	movs	r3, #15
10002b06:	18fb      	adds	r3, r7, r3
10002b08:	781b      	ldrb	r3, [r3, #0]
10002b0a:	2b00      	cmp	r3, #0
10002b0c:	d143      	bne.n	10002b96 <PWM_lCCU4_Init+0xbe>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
10002b0e:	687b      	ldr	r3, [r7, #4]
10002b10:	689a      	ldr	r2, [r3, #8]
10002b12:	687b      	ldr	r3, [r7, #4]
10002b14:	68db      	ldr	r3, [r3, #12]
10002b16:	1c10      	adds	r0, r2, #0
10002b18:	1c19      	adds	r1, r3, #0
10002b1a:	f7ff fb91 	bl	10002240 <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
10002b1e:	687b      	ldr	r3, [r7, #4]
10002b20:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
10002b22:	687b      	ldr	r3, [r7, #4]
10002b24:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
10002b26:	b29b      	uxth	r3, r3
10002b28:	1c10      	adds	r0, r2, #0
10002b2a:	1c19      	adds	r1, r3, #0
10002b2c:	f7ff ff96 	bl	10002a5c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
10002b30:	687b      	ldr	r3, [r7, #4]
10002b32:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
10002b34:	687b      	ldr	r3, [r7, #4]
10002b36:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
10002b38:	b29b      	uxth	r3, r3
10002b3a:	1c10      	adds	r0, r2, #0
10002b3c:	1c19      	adds	r1, r3, #0
10002b3e:	f7ff ff9b 	bl	10002a78 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
10002b42:	687b      	ldr	r3, [r7, #4]
10002b44:	685a      	ldr	r2, [r3, #4]
10002b46:	687b      	ldr	r3, [r7, #4]
10002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002b4a:	1c10      	adds	r0, r2, #0
10002b4c:	1c19      	adds	r1, r3, #0
10002b4e:	f7ff ffa1 	bl	10002a94 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
10002b52:	687b      	ldr	r3, [r7, #4]
10002b54:	1c18      	adds	r0, r3, #0
10002b56:	f000 f829 	bl	10002bac <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
10002b5a:	687b      	ldr	r3, [r7, #4]
10002b5c:	6919      	ldr	r1, [r3, #16]
10002b5e:	687b      	ldr	r3, [r7, #4]
10002b60:	222c      	movs	r2, #44	; 0x2c
10002b62:	5c9a      	ldrb	r2, [r3, r2]
10002b64:	687b      	ldr	r3, [r7, #4]
10002b66:	695b      	ldr	r3, [r3, #20]
10002b68:	1c08      	adds	r0, r1, #0
10002b6a:	1c11      	adds	r1, r2, #0
10002b6c:	1c1a      	adds	r2, r3, #0
10002b6e:	f7fe fb13 	bl	10001198 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
10002b72:	687b      	ldr	r3, [r7, #4]
10002b74:	2229      	movs	r2, #41	; 0x29
10002b76:	2100      	movs	r1, #0
10002b78:	5499      	strb	r1, [r3, r2]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
10002b7a:	687b      	ldr	r3, [r7, #4]
10002b7c:	222f      	movs	r2, #47	; 0x2f
10002b7e:	5c9b      	ldrb	r3, [r3, r2]
10002b80:	2b00      	cmp	r3, #0
10002b82:	d003      	beq.n	10002b8c <PWM_lCCU4_Init+0xb4>
      {
        PWM_Start(handle_ptr);
10002b84:	687b      	ldr	r3, [r7, #4]
10002b86:	1c18      	adds	r0, r3, #0
10002b88:	f000 f8c6 	bl	10002d18 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
10002b8c:	230f      	movs	r3, #15
10002b8e:	18fb      	adds	r3, r7, r3
10002b90:	2200      	movs	r2, #0
10002b92:	701a      	strb	r2, [r3, #0]
10002b94:	e003      	b.n	10002b9e <PWM_lCCU4_Init+0xc6>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
10002b96:	687b      	ldr	r3, [r7, #4]
10002b98:	2229      	movs	r2, #41	; 0x29
10002b9a:	2102      	movs	r1, #2
10002b9c:	5499      	strb	r1, [r3, r2]
    }

  }
  return (status);
10002b9e:	230f      	movs	r3, #15
10002ba0:	18fb      	adds	r3, r7, r3
10002ba2:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_lCCU4_Init() api */
10002ba4:	1c18      	adds	r0, r3, #0
10002ba6:	46bd      	mov	sp, r7
10002ba8:	b005      	add	sp, #20
10002baa:	bd90      	pop	{r4, r7, pc}

10002bac <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
10002bac:	b580      	push	{r7, lr}
10002bae:	b082      	sub	sp, #8
10002bb0:	af00      	add	r7, sp, #0
10002bb2:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
10002bb4:	687b      	ldr	r3, [r7, #4]
10002bb6:	2230      	movs	r2, #48	; 0x30
10002bb8:	5c9b      	ldrb	r3, [r3, r2]
10002bba:	2b00      	cmp	r3, #0
10002bbc:	d00f      	beq.n	10002bde <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002bbe:	687b      	ldr	r3, [r7, #4]
10002bc0:	689b      	ldr	r3, [r3, #8]
10002bc2:	1c18      	adds	r0, r3, #0
10002bc4:	2100      	movs	r1, #0
10002bc6:	f7ff ff71 	bl	10002aac <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10002bca:	687b      	ldr	r3, [r7, #4]
10002bcc:	6899      	ldr	r1, [r3, #8]
10002bce:	687b      	ldr	r3, [r7, #4]
10002bd0:	222a      	movs	r2, #42	; 0x2a
10002bd2:	5c9b      	ldrb	r3, [r3, r2]
10002bd4:	1c08      	adds	r0, r1, #0
10002bd6:	2100      	movs	r1, #0
10002bd8:	1c1a      	adds	r2, r3, #0
10002bda:	f7ff fc53 	bl	10002484 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
10002bde:	687b      	ldr	r3, [r7, #4]
10002be0:	2231      	movs	r2, #49	; 0x31
10002be2:	5c9b      	ldrb	r3, [r3, r2]
10002be4:	2b00      	cmp	r3, #0
10002be6:	d00f      	beq.n	10002c08 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
10002be8:	687b      	ldr	r3, [r7, #4]
10002bea:	689b      	ldr	r3, [r3, #8]
10002bec:	1c18      	adds	r0, r3, #0
10002bee:	2102      	movs	r1, #2
10002bf0:	f7ff ff5c 	bl	10002aac <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10002bf4:	687b      	ldr	r3, [r7, #4]
10002bf6:	6899      	ldr	r1, [r3, #8]
10002bf8:	687b      	ldr	r3, [r7, #4]
10002bfa:	222b      	movs	r2, #43	; 0x2b
10002bfc:	5c9b      	ldrb	r3, [r3, r2]
10002bfe:	1c08      	adds	r0, r1, #0
10002c00:	2102      	movs	r1, #2
10002c02:	1c1a      	adds	r2, r3, #0
10002c04:	f7ff fc3e 	bl	10002484 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
10002c08:	46bd      	mov	sp, r7
10002c0a:	b002      	add	sp, #8
10002c0c:	bd80      	pop	{r7, pc}
10002c0e:	46c0      	nop			; (mov r8, r8)

10002c10 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
10002c10:	b580      	push	{r7, lr}
10002c12:	b082      	sub	sp, #8
10002c14:	af00      	add	r7, sp, #0
10002c16:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
10002c18:	687b      	ldr	r3, [r7, #4]
10002c1a:	2229      	movs	r2, #41	; 0x29
10002c1c:	5c9b      	ldrb	r3, [r3, r2]
10002c1e:	2b00      	cmp	r3, #0
10002c20:	d004      	beq.n	10002c2c <PWM_lCCU4_Start+0x1c>
10002c22:	687b      	ldr	r3, [r7, #4]
10002c24:	2229      	movs	r2, #41	; 0x29
10002c26:	5c9b      	ldrb	r3, [r3, r2]
10002c28:	2b04      	cmp	r3, #4
10002c2a:	d111      	bne.n	10002c50 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
10002c2c:	687b      	ldr	r3, [r7, #4]
10002c2e:	6859      	ldr	r1, [r3, #4]
10002c30:	687b      	ldr	r3, [r7, #4]
10002c32:	222e      	movs	r2, #46	; 0x2e
10002c34:	5c9b      	ldrb	r3, [r3, r2]
10002c36:	1c08      	adds	r0, r1, #0
10002c38:	1c19      	adds	r1, r3, #0
10002c3a:	f7ff fef5 	bl	10002a28 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
10002c3e:	687b      	ldr	r3, [r7, #4]
10002c40:	689b      	ldr	r3, [r3, #8]
10002c42:	1c18      	adds	r0, r3, #0
10002c44:	f7ff ff00 	bl	10002a48 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
10002c48:	687b      	ldr	r3, [r7, #4]
10002c4a:	2229      	movs	r2, #41	; 0x29
10002c4c:	2103      	movs	r1, #3
10002c4e:	5499      	strb	r1, [r3, r2]
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
10002c50:	46bd      	mov	sp, r7
10002c52:	b002      	add	sp, #8
10002c54:	bd80      	pop	{r7, pc}
10002c56:	46c0      	nop			; (mov r8, r8)

10002c58 <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
10002c58:	b580      	push	{r7, lr}
10002c5a:	b086      	sub	sp, #24
10002c5c:	af00      	add	r7, sp, #0
10002c5e:	6078      	str	r0, [r7, #4]
10002c60:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)));

  status = PWM_STATUS_FAILURE;
10002c62:	2317      	movs	r3, #23
10002c64:	18fb      	adds	r3, r7, r3
10002c66:	2201      	movs	r2, #1
10002c68:	701a      	strb	r2, [r3, #0]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
10002c6a:	687b      	ldr	r3, [r7, #4]
10002c6c:	2229      	movs	r2, #41	; 0x29
10002c6e:	5c9b      	ldrb	r3, [r3, r2]
10002c70:	2b02      	cmp	r3, #2
10002c72:	d02c      	beq.n	10002cce <PWM_lCCU4_SetDutyCycle+0x76>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
10002c74:	683b      	ldr	r3, [r7, #0]
10002c76:	4a19      	ldr	r2, [pc, #100]	; (10002cdc <PWM_lCCU4_SetDutyCycle+0x84>)
10002c78:	4293      	cmp	r3, r2
10002c7a:	d828      	bhi.n	10002cce <PWM_lCCU4_SetDutyCycle+0x76>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
10002c7c:	687b      	ldr	r3, [r7, #4]
10002c7e:	69db      	ldr	r3, [r3, #28]
10002c80:	3301      	adds	r3, #1
10002c82:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
10002c84:	683b      	ldr	r3, [r7, #0]
10002c86:	4a15      	ldr	r2, [pc, #84]	; (10002cdc <PWM_lCCU4_SetDutyCycle+0x84>)
10002c88:	1ad3      	subs	r3, r2, r3
10002c8a:	693a      	ldr	r2, [r7, #16]
10002c8c:	4353      	muls	r3, r2
10002c8e:	1c18      	adds	r0, r3, #0
10002c90:	4912      	ldr	r1, [pc, #72]	; (10002cdc <PWM_lCCU4_SetDutyCycle+0x84>)
10002c92:	f7ff fcc1 	bl	10002618 <__aeabi_uidiv>
10002c96:	1c03      	adds	r3, r0, #0
10002c98:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
10002c9a:	687b      	ldr	r3, [r7, #4]
10002c9c:	68fa      	ldr	r2, [r7, #12]
10002c9e:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
10002ca0:	687b      	ldr	r3, [r7, #4]
10002ca2:	683a      	ldr	r2, [r7, #0]
10002ca4:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
10002ca6:	687b      	ldr	r3, [r7, #4]
10002ca8:	689a      	ldr	r2, [r3, #8]
10002caa:	68fb      	ldr	r3, [r7, #12]
10002cac:	b29b      	uxth	r3, r3
10002cae:	1c10      	adds	r0, r2, #0
10002cb0:	1c19      	adds	r1, r3, #0
10002cb2:	f7ff fee1 	bl	10002a78 <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
10002cb6:	687b      	ldr	r3, [r7, #4]
10002cb8:	685a      	ldr	r2, [r3, #4]
10002cba:	687b      	ldr	r3, [r7, #4]
10002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002cbe:	1c10      	adds	r0, r2, #0
10002cc0:	1c19      	adds	r1, r3, #0
10002cc2:	f7ff fee7 	bl	10002a94 <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
10002cc6:	2317      	movs	r3, #23
10002cc8:	18fb      	adds	r3, r7, r3
10002cca:	2200      	movs	r2, #0
10002ccc:	701a      	strb	r2, [r3, #0]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
10002cce:	2317      	movs	r3, #23
10002cd0:	18fb      	adds	r3, r7, r3
10002cd2:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_lCCU4_SetDutyCycle() api */
10002cd4:	1c18      	adds	r0, r3, #0
10002cd6:	46bd      	mov	sp, r7
10002cd8:	b006      	add	sp, #24
10002cda:	bd80      	pop	{r7, pc}
10002cdc:	00002710 	.word	0x00002710

10002ce0 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
10002ce0:	b590      	push	{r4, r7, lr}
10002ce2:	b085      	sub	sp, #20
10002ce4:	af00      	add	r7, sp, #0
10002ce6:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
10002ce8:	230f      	movs	r3, #15
10002cea:	18fb      	adds	r3, r7, r3
10002cec:	2201      	movs	r2, #1
10002cee:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
10002cf0:	687b      	ldr	r3, [r7, #4]
10002cf2:	2228      	movs	r2, #40	; 0x28
10002cf4:	5c9b      	ldrb	r3, [r3, r2]
10002cf6:	2b00      	cmp	r3, #0
10002cf8:	d107      	bne.n	10002d0a <PWM_Init+0x2a>
  {
    status = PWM_lCCU4_Init(handle_ptr);
10002cfa:	230f      	movs	r3, #15
10002cfc:	18fc      	adds	r4, r7, r3
10002cfe:	687b      	ldr	r3, [r7, #4]
10002d00:	1c18      	adds	r0, r3, #0
10002d02:	f7ff fee9 	bl	10002ad8 <PWM_lCCU4_Init>
10002d06:	1c03      	adds	r3, r0, #0
10002d08:	7023      	strb	r3, [r4, #0]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
10002d0a:	230f      	movs	r3, #15
10002d0c:	18fb      	adds	r3, r7, r3
10002d0e:	781b      	ldrb	r3, [r3, #0]
}
10002d10:	1c18      	adds	r0, r3, #0
10002d12:	46bd      	mov	sp, r7
10002d14:	b005      	add	sp, #20
10002d16:	bd90      	pop	{r4, r7, pc}

10002d18 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
10002d18:	b580      	push	{r7, lr}
10002d1a:	b082      	sub	sp, #8
10002d1c:	af00      	add	r7, sp, #0
10002d1e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
10002d20:	687b      	ldr	r3, [r7, #4]
10002d22:	2228      	movs	r2, #40	; 0x28
10002d24:	5c9b      	ldrb	r3, [r3, r2]
10002d26:	2b00      	cmp	r3, #0
10002d28:	d103      	bne.n	10002d32 <PWM_Start+0x1a>
  {
    PWM_lCCU4_Start(handle_ptr);
10002d2a:	687b      	ldr	r3, [r7, #4]
10002d2c:	1c18      	adds	r0, r3, #0
10002d2e:	f7ff ff6f 	bl	10002c10 <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
10002d32:	46bd      	mov	sp, r7
10002d34:	b002      	add	sp, #8
10002d36:	bd80      	pop	{r7, pc}

10002d38 <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
10002d38:	b590      	push	{r4, r7, lr}
10002d3a:	b085      	sub	sp, #20
10002d3c:	af00      	add	r7, sp, #0
10002d3e:	6078      	str	r0, [r7, #4]
10002d40:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
10002d42:	230f      	movs	r3, #15
10002d44:	18fb      	adds	r3, r7, r3
10002d46:	2201      	movs	r2, #1
10002d48:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
10002d4a:	687b      	ldr	r3, [r7, #4]
10002d4c:	2228      	movs	r2, #40	; 0x28
10002d4e:	5c9b      	ldrb	r3, [r3, r2]
10002d50:	2b00      	cmp	r3, #0
10002d52:	d109      	bne.n	10002d68 <PWM_SetDutyCycle+0x30>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
10002d54:	230f      	movs	r3, #15
10002d56:	18fc      	adds	r4, r7, r3
10002d58:	687a      	ldr	r2, [r7, #4]
10002d5a:	683b      	ldr	r3, [r7, #0]
10002d5c:	1c10      	adds	r0, r2, #0
10002d5e:	1c19      	adds	r1, r3, #0
10002d60:	f7ff ff7a 	bl	10002c58 <PWM_lCCU4_SetDutyCycle>
10002d64:	1c03      	adds	r3, r0, #0
10002d66:	7023      	strb	r3, [r4, #0]
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif
  return (status);
10002d68:	230f      	movs	r3, #15
10002d6a:	18fb      	adds	r3, r7, r3
10002d6c:	781b      	ldrb	r3, [r3, #0]
}
10002d6e:	1c18      	adds	r0, r3, #0
10002d70:	46bd      	mov	sp, r7
10002d72:	b005      	add	sp, #20
10002d74:	bd90      	pop	{r4, r7, pc}
10002d76:	46c0      	nop			; (mov r8, r8)

10002d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002d78:	b580      	push	{r7, lr}
10002d7a:	b082      	sub	sp, #8
10002d7c:	af00      	add	r7, sp, #0
10002d7e:	1c02      	adds	r2, r0, #0
10002d80:	1dfb      	adds	r3, r7, #7
10002d82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002d84:	1dfb      	adds	r3, r7, #7
10002d86:	781b      	ldrb	r3, [r3, #0]
10002d88:	2b7f      	cmp	r3, #127	; 0x7f
10002d8a:	d809      	bhi.n	10002da0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002d8c:	4b06      	ldr	r3, [pc, #24]	; (10002da8 <__NVIC_EnableIRQ+0x30>)
10002d8e:	1dfa      	adds	r2, r7, #7
10002d90:	7812      	ldrb	r2, [r2, #0]
10002d92:	1c11      	adds	r1, r2, #0
10002d94:	221f      	movs	r2, #31
10002d96:	400a      	ands	r2, r1
10002d98:	2101      	movs	r1, #1
10002d9a:	4091      	lsls	r1, r2
10002d9c:	1c0a      	adds	r2, r1, #0
10002d9e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002da0:	46bd      	mov	sp, r7
10002da2:	b002      	add	sp, #8
10002da4:	bd80      	pop	{r7, pc}
10002da6:	46c0      	nop			; (mov r8, r8)
10002da8:	e000e100 	.word	0xe000e100

10002dac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10002dac:	b580      	push	{r7, lr}
10002dae:	b082      	sub	sp, #8
10002db0:	af00      	add	r7, sp, #0
10002db2:	1c02      	adds	r2, r0, #0
10002db4:	1dfb      	adds	r3, r7, #7
10002db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002db8:	1dfb      	adds	r3, r7, #7
10002dba:	781b      	ldrb	r3, [r3, #0]
10002dbc:	2b7f      	cmp	r3, #127	; 0x7f
10002dbe:	d80a      	bhi.n	10002dd6 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002dc0:	4906      	ldr	r1, [pc, #24]	; (10002ddc <__NVIC_ClearPendingIRQ+0x30>)
10002dc2:	1dfb      	adds	r3, r7, #7
10002dc4:	781b      	ldrb	r3, [r3, #0]
10002dc6:	1c1a      	adds	r2, r3, #0
10002dc8:	231f      	movs	r3, #31
10002dca:	4013      	ands	r3, r2
10002dcc:	2201      	movs	r2, #1
10002dce:	409a      	lsls	r2, r3
10002dd0:	23c0      	movs	r3, #192	; 0xc0
10002dd2:	005b      	lsls	r3, r3, #1
10002dd4:	50ca      	str	r2, [r1, r3]
  }
}
10002dd6:	46bd      	mov	sp, r7
10002dd8:	b002      	add	sp, #8
10002dda:	bd80      	pop	{r7, pc}
10002ddc:	e000e100 	.word	0xe000e100

10002de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002de0:	b5b0      	push	{r4, r5, r7, lr}
10002de2:	b082      	sub	sp, #8
10002de4:	af00      	add	r7, sp, #0
10002de6:	1c02      	adds	r2, r0, #0
10002de8:	6039      	str	r1, [r7, #0]
10002dea:	1dfb      	adds	r3, r7, #7
10002dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002dee:	1dfb      	adds	r3, r7, #7
10002df0:	781b      	ldrb	r3, [r3, #0]
10002df2:	2b7f      	cmp	r3, #127	; 0x7f
10002df4:	d827      	bhi.n	10002e46 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002df6:	4c2d      	ldr	r4, [pc, #180]	; (10002eac <__NVIC_SetPriority+0xcc>)
10002df8:	1dfb      	adds	r3, r7, #7
10002dfa:	781b      	ldrb	r3, [r3, #0]
10002dfc:	b25b      	sxtb	r3, r3
10002dfe:	089b      	lsrs	r3, r3, #2
10002e00:	492a      	ldr	r1, [pc, #168]	; (10002eac <__NVIC_SetPriority+0xcc>)
10002e02:	1dfa      	adds	r2, r7, #7
10002e04:	7812      	ldrb	r2, [r2, #0]
10002e06:	b252      	sxtb	r2, r2
10002e08:	0892      	lsrs	r2, r2, #2
10002e0a:	32c0      	adds	r2, #192	; 0xc0
10002e0c:	0092      	lsls	r2, r2, #2
10002e0e:	5852      	ldr	r2, [r2, r1]
10002e10:	1df9      	adds	r1, r7, #7
10002e12:	7809      	ldrb	r1, [r1, #0]
10002e14:	1c08      	adds	r0, r1, #0
10002e16:	2103      	movs	r1, #3
10002e18:	4001      	ands	r1, r0
10002e1a:	00c9      	lsls	r1, r1, #3
10002e1c:	1c08      	adds	r0, r1, #0
10002e1e:	21ff      	movs	r1, #255	; 0xff
10002e20:	4081      	lsls	r1, r0
10002e22:	43c9      	mvns	r1, r1
10002e24:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002e26:	683a      	ldr	r2, [r7, #0]
10002e28:	0192      	lsls	r2, r2, #6
10002e2a:	20ff      	movs	r0, #255	; 0xff
10002e2c:	4002      	ands	r2, r0
10002e2e:	1df8      	adds	r0, r7, #7
10002e30:	7800      	ldrb	r0, [r0, #0]
10002e32:	1c05      	adds	r5, r0, #0
10002e34:	2003      	movs	r0, #3
10002e36:	4028      	ands	r0, r5
10002e38:	00c0      	lsls	r0, r0, #3
10002e3a:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002e3c:	430a      	orrs	r2, r1
10002e3e:	33c0      	adds	r3, #192	; 0xc0
10002e40:	009b      	lsls	r3, r3, #2
10002e42:	511a      	str	r2, [r3, r4]
10002e44:	e02e      	b.n	10002ea4 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002e46:	4c1a      	ldr	r4, [pc, #104]	; (10002eb0 <__NVIC_SetPriority+0xd0>)
10002e48:	1dfb      	adds	r3, r7, #7
10002e4a:	781b      	ldrb	r3, [r3, #0]
10002e4c:	1c1a      	adds	r2, r3, #0
10002e4e:	230f      	movs	r3, #15
10002e50:	4013      	ands	r3, r2
10002e52:	3b08      	subs	r3, #8
10002e54:	0899      	lsrs	r1, r3, #2
10002e56:	4a16      	ldr	r2, [pc, #88]	; (10002eb0 <__NVIC_SetPriority+0xd0>)
10002e58:	1dfb      	adds	r3, r7, #7
10002e5a:	781b      	ldrb	r3, [r3, #0]
10002e5c:	1c18      	adds	r0, r3, #0
10002e5e:	230f      	movs	r3, #15
10002e60:	4003      	ands	r3, r0
10002e62:	3b08      	subs	r3, #8
10002e64:	089b      	lsrs	r3, r3, #2
10002e66:	3306      	adds	r3, #6
10002e68:	009b      	lsls	r3, r3, #2
10002e6a:	18d3      	adds	r3, r2, r3
10002e6c:	685b      	ldr	r3, [r3, #4]
10002e6e:	1dfa      	adds	r2, r7, #7
10002e70:	7812      	ldrb	r2, [r2, #0]
10002e72:	1c10      	adds	r0, r2, #0
10002e74:	2203      	movs	r2, #3
10002e76:	4002      	ands	r2, r0
10002e78:	00d2      	lsls	r2, r2, #3
10002e7a:	1c10      	adds	r0, r2, #0
10002e7c:	22ff      	movs	r2, #255	; 0xff
10002e7e:	4082      	lsls	r2, r0
10002e80:	43d2      	mvns	r2, r2
10002e82:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002e84:	683b      	ldr	r3, [r7, #0]
10002e86:	019b      	lsls	r3, r3, #6
10002e88:	20ff      	movs	r0, #255	; 0xff
10002e8a:	4003      	ands	r3, r0
10002e8c:	1df8      	adds	r0, r7, #7
10002e8e:	7800      	ldrb	r0, [r0, #0]
10002e90:	1c05      	adds	r5, r0, #0
10002e92:	2003      	movs	r0, #3
10002e94:	4028      	ands	r0, r5
10002e96:	00c0      	lsls	r0, r0, #3
10002e98:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002e9a:	431a      	orrs	r2, r3
10002e9c:	1d8b      	adds	r3, r1, #6
10002e9e:	009b      	lsls	r3, r3, #2
10002ea0:	18e3      	adds	r3, r4, r3
10002ea2:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002ea4:	46bd      	mov	sp, r7
10002ea6:	b002      	add	sp, #8
10002ea8:	bdb0      	pop	{r4, r5, r7, pc}
10002eaa:	46c0      	nop			; (mov r8, r8)
10002eac:	e000e100 	.word	0xe000e100
10002eb0:	e000ed00 	.word	0xe000ed00

10002eb4 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
10002eb4:	b580      	push	{r7, lr}
10002eb6:	b082      	sub	sp, #8
10002eb8:	af00      	add	r7, sp, #0
10002eba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
10002ebc:	687b      	ldr	r3, [r7, #4]
10002ebe:	6859      	ldr	r1, [r3, #4]
10002ec0:	687b      	ldr	r3, [r7, #4]
10002ec2:	7f9a      	ldrb	r2, [r3, #30]
10002ec4:	687b      	ldr	r3, [r7, #4]
10002ec6:	3308      	adds	r3, #8
10002ec8:	1c08      	adds	r0, r1, #0
10002eca:	1c11      	adds	r1, r2, #0
10002ecc:	1c1a      	adds	r2, r3, #0
10002ece:	f7fe f963 	bl	10001198 <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
10002ed2:	687b      	ldr	r3, [r7, #4]
10002ed4:	6819      	ldr	r1, [r3, #0]
10002ed6:	687b      	ldr	r3, [r7, #4]
10002ed8:	7f1a      	ldrb	r2, [r3, #28]
10002eda:	687b      	ldr	r3, [r7, #4]
10002edc:	3310      	adds	r3, #16
10002ede:	1c08      	adds	r0, r1, #0
10002ee0:	1c11      	adds	r1, r2, #0
10002ee2:	1c1a      	adds	r2, r3, #0
10002ee4:	f7ff fb22 	bl	1000252c <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
10002ee8:	687b      	ldr	r3, [r7, #4]
10002eea:	681a      	ldr	r2, [r3, #0]
10002eec:	687b      	ldr	r3, [r7, #4]
10002eee:	7f5b      	ldrb	r3, [r3, #29]
10002ef0:	1c10      	adds	r0, r2, #0
10002ef2:	1c19      	adds	r1, r3, #0
10002ef4:	2201      	movs	r2, #1
10002ef6:	f7ff fb47 	bl	10002588 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
10002efa:	687b      	ldr	r3, [r7, #4]
10002efc:	7e9a      	ldrb	r2, [r3, #26]
10002efe:	687b      	ldr	r3, [r7, #4]
10002f00:	7edb      	ldrb	r3, [r3, #27]
10002f02:	1c19      	adds	r1, r3, #0
10002f04:	b253      	sxtb	r3, r2
10002f06:	1c18      	adds	r0, r3, #0
10002f08:	f7ff ff6a 	bl	10002de0 <__NVIC_SetPriority>
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
10002f0c:	687b      	ldr	r3, [r7, #4]
10002f0e:	7e9b      	ldrb	r3, [r3, #26]
10002f10:	b2da      	uxtb	r2, r3
10002f12:	687b      	ldr	r3, [r7, #4]
10002f14:	8b1b      	ldrh	r3, [r3, #24]
10002f16:	1c10      	adds	r0, r2, #0
10002f18:	1c19      	adds	r1, r3, #0
10002f1a:	f7fe fcbf 	bl	1000189c <XMC_SCU_SetInterruptControl>
#endif
  if (true == handle->enable_at_init)
10002f1e:	687b      	ldr	r3, [r7, #4]
10002f20:	7fdb      	ldrb	r3, [r3, #31]
10002f22:	2b00      	cmp	r3, #0
10002f24:	d00b      	beq.n	10002f3e <PIN_INTERRUPT_Init+0x8a>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
10002f26:	687b      	ldr	r3, [r7, #4]
10002f28:	7e9b      	ldrb	r3, [r3, #26]
10002f2a:	b25b      	sxtb	r3, r3
10002f2c:	1c18      	adds	r0, r3, #0
10002f2e:	f7ff ff3d 	bl	10002dac <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
10002f32:	687b      	ldr	r3, [r7, #4]
10002f34:	7e9b      	ldrb	r3, [r3, #26]
10002f36:	b25b      	sxtb	r3, r3
10002f38:	1c18      	adds	r0, r3, #0
10002f3a:	f7ff ff1d 	bl	10002d78 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
10002f3e:	2300      	movs	r3, #0
}
10002f40:	1c18      	adds	r0, r3, #0
10002f42:	46bd      	mov	sp, r7
10002f44:	b002      	add	sp, #8
10002f46:	bd80      	pop	{r7, pc}

10002f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002f48:	b580      	push	{r7, lr}
10002f4a:	b082      	sub	sp, #8
10002f4c:	af00      	add	r7, sp, #0
10002f4e:	1c02      	adds	r2, r0, #0
10002f50:	1dfb      	adds	r3, r7, #7
10002f52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002f54:	1dfb      	adds	r3, r7, #7
10002f56:	781b      	ldrb	r3, [r3, #0]
10002f58:	2b7f      	cmp	r3, #127	; 0x7f
10002f5a:	d809      	bhi.n	10002f70 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002f5c:	4b06      	ldr	r3, [pc, #24]	; (10002f78 <__NVIC_EnableIRQ+0x30>)
10002f5e:	1dfa      	adds	r2, r7, #7
10002f60:	7812      	ldrb	r2, [r2, #0]
10002f62:	1c11      	adds	r1, r2, #0
10002f64:	221f      	movs	r2, #31
10002f66:	400a      	ands	r2, r1
10002f68:	2101      	movs	r1, #1
10002f6a:	4091      	lsls	r1, r2
10002f6c:	1c0a      	adds	r2, r1, #0
10002f6e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002f70:	46bd      	mov	sp, r7
10002f72:	b002      	add	sp, #8
10002f74:	bd80      	pop	{r7, pc}
10002f76:	46c0      	nop			; (mov r8, r8)
10002f78:	e000e100 	.word	0xe000e100

10002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002f7c:	b5b0      	push	{r4, r5, r7, lr}
10002f7e:	b082      	sub	sp, #8
10002f80:	af00      	add	r7, sp, #0
10002f82:	1c02      	adds	r2, r0, #0
10002f84:	6039      	str	r1, [r7, #0]
10002f86:	1dfb      	adds	r3, r7, #7
10002f88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002f8a:	1dfb      	adds	r3, r7, #7
10002f8c:	781b      	ldrb	r3, [r3, #0]
10002f8e:	2b7f      	cmp	r3, #127	; 0x7f
10002f90:	d827      	bhi.n	10002fe2 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002f92:	4c2d      	ldr	r4, [pc, #180]	; (10003048 <__NVIC_SetPriority+0xcc>)
10002f94:	1dfb      	adds	r3, r7, #7
10002f96:	781b      	ldrb	r3, [r3, #0]
10002f98:	b25b      	sxtb	r3, r3
10002f9a:	089b      	lsrs	r3, r3, #2
10002f9c:	492a      	ldr	r1, [pc, #168]	; (10003048 <__NVIC_SetPriority+0xcc>)
10002f9e:	1dfa      	adds	r2, r7, #7
10002fa0:	7812      	ldrb	r2, [r2, #0]
10002fa2:	b252      	sxtb	r2, r2
10002fa4:	0892      	lsrs	r2, r2, #2
10002fa6:	32c0      	adds	r2, #192	; 0xc0
10002fa8:	0092      	lsls	r2, r2, #2
10002faa:	5852      	ldr	r2, [r2, r1]
10002fac:	1df9      	adds	r1, r7, #7
10002fae:	7809      	ldrb	r1, [r1, #0]
10002fb0:	1c08      	adds	r0, r1, #0
10002fb2:	2103      	movs	r1, #3
10002fb4:	4001      	ands	r1, r0
10002fb6:	00c9      	lsls	r1, r1, #3
10002fb8:	1c08      	adds	r0, r1, #0
10002fba:	21ff      	movs	r1, #255	; 0xff
10002fbc:	4081      	lsls	r1, r0
10002fbe:	43c9      	mvns	r1, r1
10002fc0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002fc2:	683a      	ldr	r2, [r7, #0]
10002fc4:	0192      	lsls	r2, r2, #6
10002fc6:	20ff      	movs	r0, #255	; 0xff
10002fc8:	4002      	ands	r2, r0
10002fca:	1df8      	adds	r0, r7, #7
10002fcc:	7800      	ldrb	r0, [r0, #0]
10002fce:	1c05      	adds	r5, r0, #0
10002fd0:	2003      	movs	r0, #3
10002fd2:	4028      	ands	r0, r5
10002fd4:	00c0      	lsls	r0, r0, #3
10002fd6:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002fd8:	430a      	orrs	r2, r1
10002fda:	33c0      	adds	r3, #192	; 0xc0
10002fdc:	009b      	lsls	r3, r3, #2
10002fde:	511a      	str	r2, [r3, r4]
10002fe0:	e02e      	b.n	10003040 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002fe2:	4c1a      	ldr	r4, [pc, #104]	; (1000304c <__NVIC_SetPriority+0xd0>)
10002fe4:	1dfb      	adds	r3, r7, #7
10002fe6:	781b      	ldrb	r3, [r3, #0]
10002fe8:	1c1a      	adds	r2, r3, #0
10002fea:	230f      	movs	r3, #15
10002fec:	4013      	ands	r3, r2
10002fee:	3b08      	subs	r3, #8
10002ff0:	0899      	lsrs	r1, r3, #2
10002ff2:	4a16      	ldr	r2, [pc, #88]	; (1000304c <__NVIC_SetPriority+0xd0>)
10002ff4:	1dfb      	adds	r3, r7, #7
10002ff6:	781b      	ldrb	r3, [r3, #0]
10002ff8:	1c18      	adds	r0, r3, #0
10002ffa:	230f      	movs	r3, #15
10002ffc:	4003      	ands	r3, r0
10002ffe:	3b08      	subs	r3, #8
10003000:	089b      	lsrs	r3, r3, #2
10003002:	3306      	adds	r3, #6
10003004:	009b      	lsls	r3, r3, #2
10003006:	18d3      	adds	r3, r2, r3
10003008:	685b      	ldr	r3, [r3, #4]
1000300a:	1dfa      	adds	r2, r7, #7
1000300c:	7812      	ldrb	r2, [r2, #0]
1000300e:	1c10      	adds	r0, r2, #0
10003010:	2203      	movs	r2, #3
10003012:	4002      	ands	r2, r0
10003014:	00d2      	lsls	r2, r2, #3
10003016:	1c10      	adds	r0, r2, #0
10003018:	22ff      	movs	r2, #255	; 0xff
1000301a:	4082      	lsls	r2, r0
1000301c:	43d2      	mvns	r2, r2
1000301e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003020:	683b      	ldr	r3, [r7, #0]
10003022:	019b      	lsls	r3, r3, #6
10003024:	20ff      	movs	r0, #255	; 0xff
10003026:	4003      	ands	r3, r0
10003028:	1df8      	adds	r0, r7, #7
1000302a:	7800      	ldrb	r0, [r0, #0]
1000302c:	1c05      	adds	r5, r0, #0
1000302e:	2003      	movs	r0, #3
10003030:	4028      	ands	r0, r5
10003032:	00c0      	lsls	r0, r0, #3
10003034:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003036:	431a      	orrs	r2, r3
10003038:	1d8b      	adds	r3, r1, #6
1000303a:	009b      	lsls	r3, r3, #2
1000303c:	18e3      	adds	r3, r4, r3
1000303e:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10003040:	46bd      	mov	sp, r7
10003042:	b002      	add	sp, #8
10003044:	bdb0      	pop	{r4, r5, r7, pc}
10003046:	46c0      	nop			; (mov r8, r8)
10003048:	e000e100 	.word	0xe000e100
1000304c:	e000ed00 	.word	0xe000ed00

10003050 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
10003050:	b580      	push	{r7, lr}
10003052:	b082      	sub	sp, #8
10003054:	af00      	add	r7, sp, #0
10003056:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
10003058:	687b      	ldr	r3, [r7, #4]
1000305a:	789b      	ldrb	r3, [r3, #2]
1000305c:	b25b      	sxtb	r3, r3
1000305e:	1c18      	adds	r0, r3, #0
10003060:	f7ff ff72 	bl	10002f48 <__NVIC_EnableIRQ>
}
10003064:	46bd      	mov	sp, r7
10003066:	b002      	add	sp, #8
10003068:	bd80      	pop	{r7, pc}
1000306a:	46c0      	nop			; (mov r8, r8)

1000306c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
1000306c:	b580      	push	{r7, lr}
1000306e:	b082      	sub	sp, #8
10003070:	af00      	add	r7, sp, #0
10003072:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
10003074:	687b      	ldr	r3, [r7, #4]
10003076:	789a      	ldrb	r2, [r3, #2]
10003078:	687b      	ldr	r3, [r7, #4]
1000307a:	78db      	ldrb	r3, [r3, #3]
1000307c:	1c19      	adds	r1, r3, #0
1000307e:	b253      	sxtb	r3, r2
10003080:	1c18      	adds	r0, r3, #0
10003082:	f7ff ff7b 	bl	10002f7c <__NVIC_SetPriority>
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
10003086:	687b      	ldr	r3, [r7, #4]
10003088:	789b      	ldrb	r3, [r3, #2]
1000308a:	b2da      	uxtb	r2, r3
1000308c:	687b      	ldr	r3, [r7, #4]
1000308e:	789b      	ldrb	r3, [r3, #2]
10003090:	b25b      	sxtb	r3, r3
10003092:	021b      	lsls	r3, r3, #8
10003094:	b299      	uxth	r1, r3
10003096:	687b      	ldr	r3, [r7, #4]
10003098:	881b      	ldrh	r3, [r3, #0]
1000309a:	b29b      	uxth	r3, r3
1000309c:	430b      	orrs	r3, r1
1000309e:	b29b      	uxth	r3, r3
100030a0:	b29b      	uxth	r3, r3
100030a2:	1c10      	adds	r0, r2, #0
100030a4:	1c19      	adds	r1, r3, #0
100030a6:	f7fe fbf9 	bl	1000189c <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
100030aa:	687b      	ldr	r3, [r7, #4]
100030ac:	791b      	ldrb	r3, [r3, #4]
100030ae:	2b00      	cmp	r3, #0
100030b0:	d003      	beq.n	100030ba <INTERRUPT_Init+0x4e>
  {
    INTERRUPT_Enable(handler);
100030b2:	687b      	ldr	r3, [r7, #4]
100030b4:	1c18      	adds	r0, r3, #0
100030b6:	f7ff ffcb 	bl	10003050 <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
100030ba:	2300      	movs	r3, #0
}
100030bc:	1c18      	adds	r0, r3, #0
100030be:	46bd      	mov	sp, r7
100030c0:	b002      	add	sp, #8
100030c2:	bd80      	pop	{r7, pc}

100030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100030c4:	b580      	push	{r7, lr}
100030c6:	b082      	sub	sp, #8
100030c8:	af00      	add	r7, sp, #0
100030ca:	1c02      	adds	r2, r0, #0
100030cc:	1dfb      	adds	r3, r7, #7
100030ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100030d0:	1dfb      	adds	r3, r7, #7
100030d2:	781b      	ldrb	r3, [r3, #0]
100030d4:	2b7f      	cmp	r3, #127	; 0x7f
100030d6:	d809      	bhi.n	100030ec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100030d8:	4b06      	ldr	r3, [pc, #24]	; (100030f4 <__NVIC_EnableIRQ+0x30>)
100030da:	1dfa      	adds	r2, r7, #7
100030dc:	7812      	ldrb	r2, [r2, #0]
100030de:	1c11      	adds	r1, r2, #0
100030e0:	221f      	movs	r2, #31
100030e2:	400a      	ands	r2, r1
100030e4:	2101      	movs	r1, #1
100030e6:	4091      	lsls	r1, r2
100030e8:	1c0a      	adds	r2, r1, #0
100030ea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100030ec:	46bd      	mov	sp, r7
100030ee:	b002      	add	sp, #8
100030f0:	bd80      	pop	{r7, pc}
100030f2:	46c0      	nop			; (mov r8, r8)
100030f4:	e000e100 	.word	0xe000e100

100030f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100030f8:	b5b0      	push	{r4, r5, r7, lr}
100030fa:	b082      	sub	sp, #8
100030fc:	af00      	add	r7, sp, #0
100030fe:	1c02      	adds	r2, r0, #0
10003100:	6039      	str	r1, [r7, #0]
10003102:	1dfb      	adds	r3, r7, #7
10003104:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003106:	1dfb      	adds	r3, r7, #7
10003108:	781b      	ldrb	r3, [r3, #0]
1000310a:	2b7f      	cmp	r3, #127	; 0x7f
1000310c:	d827      	bhi.n	1000315e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000310e:	4c2d      	ldr	r4, [pc, #180]	; (100031c4 <__NVIC_SetPriority+0xcc>)
10003110:	1dfb      	adds	r3, r7, #7
10003112:	781b      	ldrb	r3, [r3, #0]
10003114:	b25b      	sxtb	r3, r3
10003116:	089b      	lsrs	r3, r3, #2
10003118:	492a      	ldr	r1, [pc, #168]	; (100031c4 <__NVIC_SetPriority+0xcc>)
1000311a:	1dfa      	adds	r2, r7, #7
1000311c:	7812      	ldrb	r2, [r2, #0]
1000311e:	b252      	sxtb	r2, r2
10003120:	0892      	lsrs	r2, r2, #2
10003122:	32c0      	adds	r2, #192	; 0xc0
10003124:	0092      	lsls	r2, r2, #2
10003126:	5852      	ldr	r2, [r2, r1]
10003128:	1df9      	adds	r1, r7, #7
1000312a:	7809      	ldrb	r1, [r1, #0]
1000312c:	1c08      	adds	r0, r1, #0
1000312e:	2103      	movs	r1, #3
10003130:	4001      	ands	r1, r0
10003132:	00c9      	lsls	r1, r1, #3
10003134:	1c08      	adds	r0, r1, #0
10003136:	21ff      	movs	r1, #255	; 0xff
10003138:	4081      	lsls	r1, r0
1000313a:	43c9      	mvns	r1, r1
1000313c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000313e:	683a      	ldr	r2, [r7, #0]
10003140:	0192      	lsls	r2, r2, #6
10003142:	20ff      	movs	r0, #255	; 0xff
10003144:	4002      	ands	r2, r0
10003146:	1df8      	adds	r0, r7, #7
10003148:	7800      	ldrb	r0, [r0, #0]
1000314a:	1c05      	adds	r5, r0, #0
1000314c:	2003      	movs	r0, #3
1000314e:	4028      	ands	r0, r5
10003150:	00c0      	lsls	r0, r0, #3
10003152:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003154:	430a      	orrs	r2, r1
10003156:	33c0      	adds	r3, #192	; 0xc0
10003158:	009b      	lsls	r3, r3, #2
1000315a:	511a      	str	r2, [r3, r4]
1000315c:	e02e      	b.n	100031bc <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000315e:	4c1a      	ldr	r4, [pc, #104]	; (100031c8 <__NVIC_SetPriority+0xd0>)
10003160:	1dfb      	adds	r3, r7, #7
10003162:	781b      	ldrb	r3, [r3, #0]
10003164:	1c1a      	adds	r2, r3, #0
10003166:	230f      	movs	r3, #15
10003168:	4013      	ands	r3, r2
1000316a:	3b08      	subs	r3, #8
1000316c:	0899      	lsrs	r1, r3, #2
1000316e:	4a16      	ldr	r2, [pc, #88]	; (100031c8 <__NVIC_SetPriority+0xd0>)
10003170:	1dfb      	adds	r3, r7, #7
10003172:	781b      	ldrb	r3, [r3, #0]
10003174:	1c18      	adds	r0, r3, #0
10003176:	230f      	movs	r3, #15
10003178:	4003      	ands	r3, r0
1000317a:	3b08      	subs	r3, #8
1000317c:	089b      	lsrs	r3, r3, #2
1000317e:	3306      	adds	r3, #6
10003180:	009b      	lsls	r3, r3, #2
10003182:	18d3      	adds	r3, r2, r3
10003184:	685b      	ldr	r3, [r3, #4]
10003186:	1dfa      	adds	r2, r7, #7
10003188:	7812      	ldrb	r2, [r2, #0]
1000318a:	1c10      	adds	r0, r2, #0
1000318c:	2203      	movs	r2, #3
1000318e:	4002      	ands	r2, r0
10003190:	00d2      	lsls	r2, r2, #3
10003192:	1c10      	adds	r0, r2, #0
10003194:	22ff      	movs	r2, #255	; 0xff
10003196:	4082      	lsls	r2, r0
10003198:	43d2      	mvns	r2, r2
1000319a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000319c:	683b      	ldr	r3, [r7, #0]
1000319e:	019b      	lsls	r3, r3, #6
100031a0:	20ff      	movs	r0, #255	; 0xff
100031a2:	4003      	ands	r3, r0
100031a4:	1df8      	adds	r0, r7, #7
100031a6:	7800      	ldrb	r0, [r0, #0]
100031a8:	1c05      	adds	r5, r0, #0
100031aa:	2003      	movs	r0, #3
100031ac:	4028      	ands	r0, r5
100031ae:	00c0      	lsls	r0, r0, #3
100031b0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100031b2:	431a      	orrs	r2, r3
100031b4:	1d8b      	adds	r3, r1, #6
100031b6:	009b      	lsls	r3, r3, #2
100031b8:	18e3      	adds	r3, r4, r3
100031ba:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100031bc:	46bd      	mov	sp, r7
100031be:	b002      	add	sp, #8
100031c0:	bdb0      	pop	{r4, r5, r7, pc}
100031c2:	46c0      	nop			; (mov r8, r8)
100031c4:	e000e100 	.word	0xe000e100
100031c8:	e000ed00 	.word	0xe000ed00

100031cc <GLOBAL_SCU_XMC1_Init>:

/*  Function to configure SCU Interrupts based on  user configuration.
 * 
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_XMC1_t*const handle)
{
100031cc:	b580      	push	{r7, lr}
100031ce:	b084      	sub	sp, #16
100031d0:	af00      	add	r7, sp, #0
100031d2:	6078      	str	r0, [r7, #4]
  GLOBAL_SCU_XMC1_STATUS_t initstatus;

  XMC_ASSERT("GLOBAL_SCU_XMC1_Init: NULL handle", (handle != NULL));

  if (handle->initialized == false)
100031d4:	687b      	ldr	r3, [r7, #4]
100031d6:	791b      	ldrb	r3, [r3, #4]
100031d8:	2201      	movs	r2, #1
100031da:	4053      	eors	r3, r2
100031dc:	b2db      	uxtb	r3, r3
100031de:	2b00      	cmp	r3, #0
100031e0:	d044      	beq.n	1000326c <GLOBAL_SCU_XMC1_Init+0xa0>
  {
    NVIC_SetPriority((IRQn_Type)0U,(uint32_t)handle->config->priority[0]);
100031e2:	687b      	ldr	r3, [r7, #4]
100031e4:	681b      	ldr	r3, [r3, #0]
100031e6:	781b      	ldrb	r3, [r3, #0]
100031e8:	2000      	movs	r0, #0
100031ea:	1c19      	adds	r1, r3, #0
100031ec:	f7ff ff84 	bl	100030f8 <__NVIC_SetPriority>
  	NVIC_SetPriority((IRQn_Type)1U,(uint32_t)handle->config->priority[1]);
100031f0:	687b      	ldr	r3, [r7, #4]
100031f2:	681b      	ldr	r3, [r3, #0]
100031f4:	785b      	ldrb	r3, [r3, #1]
100031f6:	2001      	movs	r0, #1
100031f8:	1c19      	adds	r1, r3, #0
100031fa:	f7ff ff7d 	bl	100030f8 <__NVIC_SetPriority>
  	NVIC_SetPriority((IRQn_Type)2U,(uint32_t)handle->config->priority[2]);
100031fe:	687b      	ldr	r3, [r7, #4]
10003200:	681b      	ldr	r3, [r3, #0]
10003202:	789b      	ldrb	r3, [r3, #2]
10003204:	2002      	movs	r0, #2
10003206:	1c19      	adds	r1, r3, #0
10003208:	f7ff ff76 	bl	100030f8 <__NVIC_SetPriority>

  	/* enable the IRQ0 */
  	if (handle->config->enable_at_init[0] == true)
1000320c:	687b      	ldr	r3, [r7, #4]
1000320e:	681b      	ldr	r3, [r3, #0]
10003210:	78db      	ldrb	r3, [r3, #3]
10003212:	2b00      	cmp	r3, #0
10003214:	d006      	beq.n	10003224 <GLOBAL_SCU_XMC1_Init+0x58>
  	{
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(0, XMC_SCU_IRQCTRL_SCU_SR0_IRQ0);
10003216:	2000      	movs	r0, #0
10003218:	2100      	movs	r1, #0
1000321a:	f7fe fb3f 	bl	1000189c <XMC_SCU_SetInterruptControl>
#endif
  	  NVIC_EnableIRQ((IRQn_Type)0U);
1000321e:	2000      	movs	r0, #0
10003220:	f7ff ff50 	bl	100030c4 <__NVIC_EnableIRQ>
  	}
  	/* enable the IRQ1 */
  	if (handle->config->enable_at_init[1] == true)
10003224:	687b      	ldr	r3, [r7, #4]
10003226:	681b      	ldr	r3, [r3, #0]
10003228:	791b      	ldrb	r3, [r3, #4]
1000322a:	2b00      	cmp	r3, #0
1000322c:	d008      	beq.n	10003240 <GLOBAL_SCU_XMC1_Init+0x74>
  	{
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(1, XMC_SCU_IRQCTRL_SCU_SR1_IRQ1);
1000322e:	2380      	movs	r3, #128	; 0x80
10003230:	005b      	lsls	r3, r3, #1
10003232:	2001      	movs	r0, #1
10003234:	1c19      	adds	r1, r3, #0
10003236:	f7fe fb31 	bl	1000189c <XMC_SCU_SetInterruptControl>
#endif
  	  NVIC_EnableIRQ((IRQn_Type)1U);
1000323a:	2001      	movs	r0, #1
1000323c:	f7ff ff42 	bl	100030c4 <__NVIC_EnableIRQ>
  	}
  	/* enable the IRQ2 */
  	if (handle->config->enable_at_init[2] == true)
10003240:	687b      	ldr	r3, [r7, #4]
10003242:	681b      	ldr	r3, [r3, #0]
10003244:	795b      	ldrb	r3, [r3, #5]
10003246:	2b00      	cmp	r3, #0
10003248:	d008      	beq.n	1000325c <GLOBAL_SCU_XMC1_Init+0x90>
  	{
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(2, XMC_SCU_IRQCTRL_SCU_SR2_IRQ2);
1000324a:	2380      	movs	r3, #128	; 0x80
1000324c:	009b      	lsls	r3, r3, #2
1000324e:	2002      	movs	r0, #2
10003250:	1c19      	adds	r1, r3, #0
10003252:	f7fe fb23 	bl	1000189c <XMC_SCU_SetInterruptControl>
#endif
      NVIC_EnableIRQ((IRQn_Type)2U);
10003256:	2002      	movs	r0, #2
10003258:	f7ff ff34 	bl	100030c4 <__NVIC_EnableIRQ>
  	}
	handle->initialized = true;
1000325c:	687b      	ldr	r3, [r7, #4]
1000325e:	2201      	movs	r2, #1
10003260:	711a      	strb	r2, [r3, #4]
    initstatus = GLOBAL_SCU_XMC1_STATUS_SUCCESS;
10003262:	230f      	movs	r3, #15
10003264:	18fb      	adds	r3, r7, r3
10003266:	2200      	movs	r2, #0
10003268:	701a      	strb	r2, [r3, #0]
1000326a:	e003      	b.n	10003274 <GLOBAL_SCU_XMC1_Init+0xa8>
  }
  else
  {
    initstatus = GLOBAL_SCU_XMC1_STATUS_FAILURE;
1000326c:	230f      	movs	r3, #15
1000326e:	18fb      	adds	r3, r7, r3
10003270:	2201      	movs	r2, #1
10003272:	701a      	strb	r2, [r3, #0]
  }
  	
  return (initstatus);
10003274:	230f      	movs	r3, #15
10003276:	18fb      	adds	r3, r7, r3
10003278:	781b      	ldrb	r3, [r3, #0]
}
1000327a:	1c18      	adds	r0, r3, #0
1000327c:	46bd      	mov	sp, r7
1000327e:	b004      	add	sp, #16
10003280:	bd80      	pop	{r7, pc}
10003282:	46c0      	nop			; (mov r8, r8)

10003284 <IRQ0_Handler>:
#else
/*
 * @brief  IRQ0 Interrupt Handler
 */
void IRQ0_Handler(void)
{
10003284:	b580      	push	{r7, lr}
10003286:	af00      	add	r7, sp, #0
  XMC_SCU_IRQHandler(0);
10003288:	2000      	movs	r0, #0
1000328a:	f7fe fa89 	bl	100017a0 <XMC_SCU_IRQHandler>
}
1000328e:	46bd      	mov	sp, r7
10003290:	bd80      	pop	{r7, pc}
10003292:	46c0      	nop			; (mov r8, r8)

10003294 <IRQ1_Handler>:

/*  IRQ1 Interrupt Handler.
 *
 */
void IRQ1_Handler(void)
{
10003294:	b580      	push	{r7, lr}
10003296:	af00      	add	r7, sp, #0
  XMC_SCU_IRQHandler(1);
10003298:	2001      	movs	r0, #1
1000329a:	f7fe fa81 	bl	100017a0 <XMC_SCU_IRQHandler>
}
1000329e:	46bd      	mov	sp, r7
100032a0:	bd80      	pop	{r7, pc}
100032a2:	46c0      	nop			; (mov r8, r8)

100032a4 <IRQ2_Handler>:

/*  IRQ2 Interrupt Handler.
 *
 */
void IRQ2_Handler(void)
{
100032a4:	b580      	push	{r7, lr}
100032a6:	af00      	add	r7, sp, #0
  XMC_SCU_IRQHandler(2);
100032a8:	2002      	movs	r0, #2
100032aa:	f7fe fa79 	bl	100017a0 <XMC_SCU_IRQHandler>
}
100032ae:	46bd      	mov	sp, r7
100032b0:	bd80      	pop	{r7, pc}
100032b2:	46c0      	nop			; (mov r8, r8)

100032b4 <GLOBAL_SCU_XMC1_RegisterCallback>:
/*
 * @brief  Function to register callback event
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_RegisterCallback(const GLOBAL_SCU_XMC1_EVENT_t event,
                                                          const GLOBAL_SCU_XMC1_EVENT_HANDLER_t handler)
{
100032b4:	b5b0      	push	{r4, r5, r7, lr}
100032b6:	b086      	sub	sp, #24
100032b8:	af00      	add	r7, sp, #0
100032ba:	60b8      	str	r0, [r7, #8]
100032bc:	60f9      	str	r1, [r7, #12]
100032be:	607a      	str	r2, [r7, #4]
  GLOBAL_SCU_XMC1_STATUS_t status;

  XMC_ASSERT("GLOBAL_SCU_XMC1_RegisterCallback: Invalid event", (GLOBAL_SCU_XMC1_CHECK_EVENT(event)));
  XMC_ASSERT("GLOBAL_SCU_XMC1_RegisterCallback: NULL Handle", (handler != NULL));
  
  status = (GLOBAL_SCU_XMC1_STATUS_t)XMC_SCU_INTERRUPT_SetEventHandler(event, handler);
100032c0:	2317      	movs	r3, #23
100032c2:	18fd      	adds	r5, r7, r3
100032c4:	68bb      	ldr	r3, [r7, #8]
100032c6:	68fc      	ldr	r4, [r7, #12]
100032c8:	687a      	ldr	r2, [r7, #4]
100032ca:	1c18      	adds	r0, r3, #0
100032cc:	1c21      	adds	r1, r4, #0
100032ce:	f7fe fa1f 	bl	10001710 <XMC_SCU_INTERRUPT_SetEventHandler>
100032d2:	1c03      	adds	r3, r0, #0
100032d4:	702b      	strb	r3, [r5, #0]

  return (status);
100032d6:	2317      	movs	r3, #23
100032d8:	18fb      	adds	r3, r7, r3
100032da:	781b      	ldrb	r3, [r3, #0]
}
100032dc:	1c18      	adds	r0, r3, #0
100032de:	46bd      	mov	sp, r7
100032e0:	b006      	add	sp, #24
100032e2:	bdb0      	pop	{r4, r5, r7, pc}

100032e4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
100032e4:	b580      	push	{r7, lr}
100032e6:	b082      	sub	sp, #8
100032e8:	af00      	add	r7, sp, #0
100032ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
100032ec:	687b      	ldr	r3, [r7, #4]
100032ee:	2280      	movs	r2, #128	; 0x80
100032f0:	0052      	lsls	r2, r2, #1
100032f2:	60da      	str	r2, [r3, #12]
}
100032f4:	46bd      	mov	sp, r7
100032f6:	b002      	add	sp, #8
100032f8:	bd80      	pop	{r7, pc}
100032fa:	46c0      	nop			; (mov r8, r8)

100032fc <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
100032fc:	b580      	push	{r7, lr}
100032fe:	b082      	sub	sp, #8
10003300:	af00      	add	r7, sp, #0
10003302:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10003304:	687b      	ldr	r3, [r7, #4]
10003306:	7b5b      	ldrb	r3, [r3, #13]
10003308:	2201      	movs	r2, #1
1000330a:	4053      	eors	r3, r2
1000330c:	b2db      	uxtb	r3, r3
1000330e:	2b00      	cmp	r3, #0
10003310:	d00f      	beq.n	10003332 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
10003312:	687b      	ldr	r3, [r7, #4]
10003314:	689a      	ldr	r2, [r3, #8]
10003316:	687b      	ldr	r3, [r7, #4]
10003318:	7b1b      	ldrb	r3, [r3, #12]
1000331a:	1c10      	adds	r0, r2, #0
1000331c:	1c19      	adds	r1, r3, #0
1000331e:	f7fe ff6b 	bl	100021f8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
10003322:	687b      	ldr	r3, [r7, #4]
10003324:	689b      	ldr	r3, [r3, #8]
10003326:	1c18      	adds	r0, r3, #0
10003328:	f7ff ffdc 	bl	100032e4 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
1000332c:	687b      	ldr	r3, [r7, #4]
1000332e:	2201      	movs	r2, #1
10003330:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
10003332:	2300      	movs	r3, #0
}
10003334:	1c18      	adds	r0, r3, #0
10003336:	46bd      	mov	sp, r7
10003338:	b002      	add	sp, #8
1000333a:	bd80      	pop	{r7, pc}

1000333c <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
1000333c:	b580      	push	{r7, lr}
1000333e:	b084      	sub	sp, #16
10003340:	af00      	add	r7, sp, #0
10003342:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
10003344:	230f      	movs	r3, #15
10003346:	18fb      	adds	r3, r7, r3
10003348:	2200      	movs	r2, #0
1000334a:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
1000334c:	687b      	ldr	r3, [r7, #4]
1000334e:	7a5b      	ldrb	r3, [r3, #9]
10003350:	2201      	movs	r2, #1
10003352:	4053      	eors	r3, r2
10003354:	b2db      	uxtb	r3, r3
10003356:	2b00      	cmp	r3, #0
10003358:	d011      	beq.n	1000337e <GLOBAL_CAN_Init+0x42>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
1000335a:	687b      	ldr	r3, [r7, #4]
1000335c:	6859      	ldr	r1, [r3, #4]
1000335e:	687b      	ldr	r3, [r7, #4]
10003360:	7a1a      	ldrb	r2, [r3, #8]
10003362:	687b      	ldr	r3, [r7, #4]
10003364:	681b      	ldr	r3, [r3, #0]
10003366:	1c08      	adds	r0, r1, #0
10003368:	1c11      	adds	r1, r2, #0
1000336a:	1c1a      	adds	r2, r3, #0
1000336c:	f7fe fc86 	bl	10001c7c <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
10003370:	687b      	ldr	r3, [r7, #4]
10003372:	2201      	movs	r2, #1
10003374:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
10003376:	230f      	movs	r3, #15
10003378:	18fb      	adds	r3, r7, r3
1000337a:	2200      	movs	r2, #0
1000337c:	701a      	strb	r2, [r3, #0]
  }
  return (status);
1000337e:	230f      	movs	r3, #15
10003380:	18fb      	adds	r3, r7, r3
10003382:	781b      	ldrb	r3, [r3, #0]

}
10003384:	1c18      	adds	r0, r3, #0
10003386:	46bd      	mov	sp, r7
10003388:	b004      	add	sp, #16
1000338a:	bd80      	pop	{r7, pc}

1000338c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
1000338c:	b580      	push	{r7, lr}
1000338e:	b082      	sub	sp, #8
10003390:	af00      	add	r7, sp, #0
10003392:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10003394:	687b      	ldr	r3, [r7, #4]
10003396:	6819      	ldr	r1, [r3, #0]
10003398:	687b      	ldr	r3, [r7, #4]
1000339a:	7b1a      	ldrb	r2, [r3, #12]
1000339c:	687b      	ldr	r3, [r7, #4]
1000339e:	3304      	adds	r3, #4
100033a0:	1c08      	adds	r0, r1, #0
100033a2:	1c11      	adds	r1, r2, #0
100033a4:	1c1a      	adds	r2, r3, #0
100033a6:	f7fd fef7 	bl	10001198 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
100033aa:	687b      	ldr	r3, [r7, #4]
100033ac:	6819      	ldr	r1, [r3, #0]
100033ae:	687b      	ldr	r3, [r7, #4]
100033b0:	7b1a      	ldrb	r2, [r3, #12]
100033b2:	687b      	ldr	r3, [r7, #4]
100033b4:	7b5b      	ldrb	r3, [r3, #13]
100033b6:	1c08      	adds	r0, r1, #0
100033b8:	1c11      	adds	r1, r2, #0
100033ba:	1c1a      	adds	r2, r3, #0
100033bc:	f7ff f906 	bl	100025cc <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
100033c0:	2300      	movs	r3, #0
}
100033c2:	1c18      	adds	r0, r3, #0
100033c4:	46bd      	mov	sp, r7
100033c6:	b002      	add	sp, #8
100033c8:	bd80      	pop	{r7, pc}
100033ca:	46c0      	nop			; (mov r8, r8)

100033cc <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
100033cc:	b580      	push	{r7, lr}
100033ce:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
100033d0:	4b03      	ldr	r3, [pc, #12]	; (100033e0 <SystemCoreSetup+0x14>)
100033d2:	4a03      	ldr	r2, [pc, #12]	; (100033e0 <SystemCoreSetup+0x14>)
100033d4:	6e92      	ldr	r2, [r2, #104]	; 0x68
100033d6:	2101      	movs	r1, #1
100033d8:	438a      	bics	r2, r1
100033da:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
100033dc:	46bd      	mov	sp, r7
100033de:	bd80      	pop	{r7, pc}
100033e0:	40010000 	.word	0x40010000

100033e4 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
100033e4:	b580      	push	{r7, lr}
100033e6:	b084      	sub	sp, #16
100033e8:	af00      	add	r7, sp, #0
100033ea:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
100033ec:	230f      	movs	r3, #15
100033ee:	18fb      	adds	r3, r7, r3
100033f0:	2200      	movs	r2, #0
100033f2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100033f4:	230e      	movs	r3, #14
100033f6:	18fb      	adds	r3, r7, r3
100033f8:	2200      	movs	r2, #0
100033fa:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
100033fc:	230d      	movs	r3, #13
100033fe:	18fb      	adds	r3, r7, r3
10003400:	2200      	movs	r2, #0
10003402:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10003404:	230c      	movs	r3, #12
10003406:	18fb      	adds	r3, r7, r3
10003408:	2200      	movs	r2, #0
1000340a:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
1000340c:	230b      	movs	r3, #11
1000340e:	18fb      	adds	r3, r7, r3
10003410:	2200      	movs	r2, #0
10003412:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
10003414:	687b      	ldr	r3, [r7, #4]
10003416:	781b      	ldrb	r3, [r3, #0]
10003418:	2201      	movs	r2, #1
1000341a:	4053      	eors	r3, r2
1000341c:	b2db      	uxtb	r3, r3
1000341e:	2b00      	cmp	r3, #0
10003420:	d01b      	beq.n	1000345a <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
10003422:	230e      	movs	r3, #14
10003424:	18fa      	adds	r2, r7, r3
10003426:	230d      	movs	r3, #13
10003428:	18fb      	adds	r3, r7, r3
1000342a:	7812      	ldrb	r2, [r2, #0]
1000342c:	781b      	ldrb	r3, [r3, #0]
1000342e:	4313      	orrs	r3, r2
10003430:	b2da      	uxtb	r2, r3
10003432:	230c      	movs	r3, #12
10003434:	18fb      	adds	r3, r7, r3
10003436:	781b      	ldrb	r3, [r3, #0]
10003438:	4313      	orrs	r3, r2
1000343a:	b2d9      	uxtb	r1, r3
1000343c:	230f      	movs	r3, #15
1000343e:	18fb      	adds	r3, r7, r3
10003440:	220b      	movs	r2, #11
10003442:	18ba      	adds	r2, r7, r2
10003444:	7812      	ldrb	r2, [r2, #0]
10003446:	430a      	orrs	r2, r1
10003448:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
1000344a:	230f      	movs	r3, #15
1000344c:	18fb      	adds	r3, r7, r3
1000344e:	781b      	ldrb	r3, [r3, #0]
10003450:	2b00      	cmp	r3, #0
10003452:	d102      	bne.n	1000345a <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10003454:	687b      	ldr	r3, [r7, #4]
10003456:	2201      	movs	r2, #1
10003458:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
1000345a:	230f      	movs	r3, #15
1000345c:	18fb      	adds	r3, r7, r3
1000345e:	781b      	ldrb	r3, [r3, #0]
}
10003460:	1c18      	adds	r0, r3, #0
10003462:	46bd      	mov	sp, r7
10003464:	b004      	add	sp, #16
10003466:	bd80      	pop	{r7, pc}

10003468 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10003468:	b590      	push	{r4, r7, lr}
1000346a:	b085      	sub	sp, #20
1000346c:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
1000346e:	1c3b      	adds	r3, r7, #0
10003470:	4a05      	ldr	r2, [pc, #20]	; (10003488 <SystemCoreClockSetup+0x20>)
10003472:	ca13      	ldmia	r2!, {r0, r1, r4}
10003474:	c313      	stmia	r3!, {r0, r1, r4}
10003476:	6812      	ldr	r2, [r2, #0]
10003478:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
1000347a:	1c3b      	adds	r3, r7, #0
1000347c:	1c18      	adds	r0, r3, #0
1000347e:	f7fd ffb9 	bl	100013f4 <XMC_SCU_CLOCK_Init>
}
10003482:	46bd      	mov	sp, r7
10003484:	b005      	add	sp, #20
10003486:	bd90      	pop	{r4, r7, pc}
10003488:	1000cf6c 	.word	0x1000cf6c

1000348c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
1000348c:	b580      	push	{r7, lr}
1000348e:	b082      	sub	sp, #8
10003490:	af00      	add	r7, sp, #0
10003492:	6078      	str	r0, [r7, #4]
10003494:	1c0a      	adds	r2, r1, #0
10003496:	1cfb      	adds	r3, r7, #3
10003498:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
1000349a:	1cfb      	adds	r3, r7, #3
1000349c:	781b      	ldrb	r3, [r3, #0]
1000349e:	2201      	movs	r2, #1
100034a0:	409a      	lsls	r2, r3
100034a2:	687b      	ldr	r3, [r7, #4]
100034a4:	60da      	str	r2, [r3, #12]
}
100034a6:	46bd      	mov	sp, r7
100034a8:	b002      	add	sp, #8
100034aa:	bd80      	pop	{r7, pc}

100034ac <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
100034ac:	b580      	push	{r7, lr}
100034ae:	b082      	sub	sp, #8
100034b0:	af00      	add	r7, sp, #0
100034b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
100034b4:	687b      	ldr	r3, [r7, #4]
100034b6:	2201      	movs	r2, #1
100034b8:	60da      	str	r2, [r3, #12]
}
100034ba:	46bd      	mov	sp, r7
100034bc:	b002      	add	sp, #8
100034be:	bd80      	pop	{r7, pc}

100034c0 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
100034c0:	b580      	push	{r7, lr}
100034c2:	b082      	sub	sp, #8
100034c4:	af00      	add	r7, sp, #0
100034c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
100034c8:	687b      	ldr	r3, [r7, #4]
100034ca:	2202      	movs	r2, #2
100034cc:	611a      	str	r2, [r3, #16]
}
100034ce:	46bd      	mov	sp, r7
100034d0:	b002      	add	sp, #8
100034d2:	bd80      	pop	{r7, pc}

100034d4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
100034d4:	b580      	push	{r7, lr}
100034d6:	b082      	sub	sp, #8
100034d8:	af00      	add	r7, sp, #0
100034da:	6078      	str	r0, [r7, #4]
100034dc:	1c0a      	adds	r2, r1, #0
100034de:	1cbb      	adds	r3, r7, #2
100034e0:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
100034e2:	1cbb      	adds	r3, r7, #2
100034e4:	881a      	ldrh	r2, [r3, #0]
100034e6:	687b      	ldr	r3, [r7, #4]
100034e8:	635a      	str	r2, [r3, #52]	; 0x34
}
100034ea:	46bd      	mov	sp, r7
100034ec:	b002      	add	sp, #8
100034ee:	bd80      	pop	{r7, pc}

100034f0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
100034f0:	b580      	push	{r7, lr}
100034f2:	b082      	sub	sp, #8
100034f4:	af00      	add	r7, sp, #0
100034f6:	6078      	str	r0, [r7, #4]
100034f8:	1c0a      	adds	r2, r1, #0
100034fa:	1cbb      	adds	r3, r7, #2
100034fc:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
100034fe:	1cbb      	adds	r3, r7, #2
10003500:	881a      	ldrh	r2, [r3, #0]
10003502:	687b      	ldr	r3, [r7, #4]
10003504:	63da      	str	r2, [r3, #60]	; 0x3c
}
10003506:	46bd      	mov	sp, r7
10003508:	b002      	add	sp, #8
1000350a:	bd80      	pop	{r7, pc}

1000350c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
1000350c:	b580      	push	{r7, lr}
1000350e:	b082      	sub	sp, #8
10003510:	af00      	add	r7, sp, #0
10003512:	6078      	str	r0, [r7, #4]
10003514:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10003516:	687b      	ldr	r3, [r7, #4]
10003518:	683a      	ldr	r2, [r7, #0]
1000351a:	611a      	str	r2, [r3, #16]
}
1000351c:	46bd      	mov	sp, r7
1000351e:	b002      	add	sp, #8
10003520:	bd80      	pop	{r7, pc}
10003522:	46c0      	nop			; (mov r8, r8)

10003524 <CAPTURE_Init>:
  return version;
}

/* This function initializes a capture APP based on user configuration. */
CAPTURE_STATUS_t CAPTURE_Init(CAPTURE_t *const handler)
{
10003524:	b590      	push	{r4, r7, lr}
10003526:	b085      	sub	sp, #20
10003528:	af00      	add	r7, sp, #0
1000352a:	6078      	str	r0, [r7, #4]
  CAPTURE_STATUS_t status;

  XMC_ASSERT ("CAPTURE_Init:handler NULL", (handler != NULL));

  status = CAPTURE_STATUS_SUCCESS;
1000352c:	230f      	movs	r3, #15
1000352e:	18fb      	adds	r3, r7, r3
10003530:	2200      	movs	r2, #0
10003532:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handler->initialized)
10003534:	687b      	ldr	r3, [r7, #4]
10003536:	2231      	movs	r2, #49	; 0x31
10003538:	5c9b      	ldrb	r3, [r3, r2]
1000353a:	2201      	movs	r2, #1
1000353c:	4053      	eors	r3, r2
1000353e:	b2db      	uxtb	r3, r3
10003540:	2b00      	cmp	r3, #0
10003542:	d038      	beq.n	100035b6 <CAPTURE_Init+0x92>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
10003544:	687b      	ldr	r3, [r7, #4]
10003546:	222d      	movs	r2, #45	; 0x2d
10003548:	5c9b      	ldrb	r3, [r3, r2]
1000354a:	2b00      	cmp	r3, #0
1000354c:	d111      	bne.n	10003572 <CAPTURE_Init+0x4e>
    {
      status = (CAPTURE_STATUS_t) GLOBAL_CCU4_Init (handler->global_ccu4_handler);
1000354e:	687b      	ldr	r3, [r7, #4]
10003550:	695b      	ldr	r3, [r3, #20]
10003552:	220f      	movs	r2, #15
10003554:	18bc      	adds	r4, r7, r2
10003556:	1c18      	adds	r0, r3, #0
10003558:	f7ff fed0 	bl	100032fc <GLOBAL_CCU4_Init>
1000355c:	1c03      	adds	r3, r0, #0
1000355e:	7023      	strb	r3, [r4, #0]
      if (status == CAPTURE_STATUS_SUCCESS)
10003560:	230f      	movs	r3, #15
10003562:	18fb      	adds	r3, r7, r3
10003564:	781b      	ldrb	r3, [r3, #0]
10003566:	2b00      	cmp	r3, #0
10003568:	d103      	bne.n	10003572 <CAPTURE_Init+0x4e>
      {
        /* Configure CCU4 capture for the required time tick settings */
        CAPTURE_CCU4_lInit (handler);
1000356a:	687b      	ldr	r3, [r7, #4]
1000356c:	1c18      	adds	r0, r3, #0
1000356e:	f000 f8fb 	bl	10003768 <CAPTURE_CCU4_lInit>
      }
    }
#endif

#ifdef CAPTURE_GPIO_USED
    if (handler->input != NULL)
10003572:	687b      	ldr	r3, [r7, #4]
10003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003576:	2b00      	cmp	r3, #0
10003578:	d00c      	beq.n	10003594 <CAPTURE_Init+0x70>
    {
      XMC_GPIO_Init (handler->input->port, handler->input->pin, handler->input_pin_config);
1000357a:	687b      	ldr	r3, [r7, #4]
1000357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000357e:	6819      	ldr	r1, [r3, #0]
10003580:	687b      	ldr	r3, [r7, #4]
10003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003584:	791a      	ldrb	r2, [r3, #4]
10003586:	687b      	ldr	r3, [r7, #4]
10003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000358a:	1c08      	adds	r0, r1, #0
1000358c:	1c11      	adds	r1, r2, #0
1000358e:	1c1a      	adds	r2, r3, #0
10003590:	f7fd fe02 	bl	10001198 <XMC_GPIO_Init>

    }
#endif

    /* update the initialization flag as true for particular instance. */
    handler->initialized = true;
10003594:	687b      	ldr	r3, [r7, #4]
10003596:	2231      	movs	r2, #49	; 0x31
10003598:	2101      	movs	r1, #1
1000359a:	5499      	strb	r1, [r3, r2]

    /* Check whether the start of the timer is enabled during initialization or not */
    if (handler->start_control == true)
1000359c:	687b      	ldr	r3, [r7, #4]
1000359e:	222f      	movs	r2, #47	; 0x2f
100035a0:	5c9b      	ldrb	r3, [r3, r2]
100035a2:	2b00      	cmp	r3, #0
100035a4:	d007      	beq.n	100035b6 <CAPTURE_Init+0x92>
    {
      status = CAPTURE_Start(handler);
100035a6:	230f      	movs	r3, #15
100035a8:	18fc      	adds	r4, r7, r3
100035aa:	687b      	ldr	r3, [r7, #4]
100035ac:	1c18      	adds	r0, r3, #0
100035ae:	f000 f809 	bl	100035c4 <CAPTURE_Start>
100035b2:	1c03      	adds	r3, r0, #0
100035b4:	7023      	strb	r3, [r4, #0]
    }
  }

  return (status);
100035b6:	230f      	movs	r3, #15
100035b8:	18fb      	adds	r3, r7, r3
100035ba:	781b      	ldrb	r3, [r3, #0]
}
100035bc:	1c18      	adds	r0, r3, #0
100035be:	46bd      	mov	sp, r7
100035c0:	b005      	add	sp, #20
100035c2:	bd90      	pop	{r4, r7, pc}

100035c4 <CAPTURE_Start>:

/* This function starts the capture timer. */
CAPTURE_STATUS_t CAPTURE_Start(const CAPTURE_t *const handler)
{
100035c4:	b580      	push	{r7, lr}
100035c6:	b084      	sub	sp, #16
100035c8:	af00      	add	r7, sp, #0
100035ca:	6078      	str	r0, [r7, #4]
  CAPTURE_STATUS_t status;

  XMC_ASSERT ("CAPTURE_Start:handler NULL", (handler != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handler->initialized)
100035cc:	687b      	ldr	r3, [r7, #4]
100035ce:	2231      	movs	r2, #49	; 0x31
100035d0:	5c9b      	ldrb	r3, [r3, r2]
100035d2:	2b00      	cmp	r3, #0
100035d4:	d020      	beq.n	10003618 <CAPTURE_Start+0x54>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
100035d6:	687b      	ldr	r3, [r7, #4]
100035d8:	222d      	movs	r2, #45	; 0x2d
100035da:	5c9b      	ldrb	r3, [r3, r2]
100035dc:	2b00      	cmp	r3, #0
100035de:	d116      	bne.n	1000360e <CAPTURE_Start+0x4a>
    {
      (void)handler->ccu4_slice_ptr->CV[0];
100035e0:	687b      	ldr	r3, [r7, #4]
100035e2:	699b      	ldr	r3, [r3, #24]
100035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      (void)handler->ccu4_slice_ptr->CV[1];
100035e6:	687b      	ldr	r3, [r7, #4]
100035e8:	699b      	ldr	r3, [r3, #24]
100035ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      (void)handler->ccu4_slice_ptr->CV[2];
100035ec:	687b      	ldr	r3, [r7, #4]
100035ee:	699b      	ldr	r3, [r3, #24]
100035f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
      (void)handler->ccu4_slice_ptr->CV[3];
100035f2:	687b      	ldr	r3, [r7, #4]
100035f4:	699b      	ldr	r3, [r3, #24]
100035f6:	2280      	movs	r2, #128	; 0x80
100035f8:	589b      	ldr	r3, [r3, r2]

      /* Start the capture manually */
      XMC_CCU4_SLICE_ClearTimer (handler->ccu4_slice_ptr);
100035fa:	687b      	ldr	r3, [r7, #4]
100035fc:	699b      	ldr	r3, [r3, #24]
100035fe:	1c18      	adds	r0, r3, #0
10003600:	f7ff ff5e 	bl	100034c0 <XMC_CCU4_SLICE_ClearTimer>
      /* Start the capture manually */
      XMC_CCU4_SLICE_StartTimer (handler->ccu4_slice_ptr);
10003604:	687b      	ldr	r3, [r7, #4]
10003606:	699b      	ldr	r3, [r3, #24]
10003608:	1c18      	adds	r0, r3, #0
1000360a:	f7ff ff4f 	bl	100034ac <XMC_CCU4_SLICE_StartTimer>
      XMC_CCU8_SLICE_ClearTimer (handler->ccu8_slice_ptr);
      /* Start the capture manually */
      XMC_CCU8_SLICE_StartTimer (handler->ccu8_slice_ptr);
    }
#endif
    status = CAPTURE_STATUS_SUCCESS;
1000360e:	230f      	movs	r3, #15
10003610:	18fb      	adds	r3, r7, r3
10003612:	2200      	movs	r2, #0
10003614:	701a      	strb	r2, [r3, #0]
10003616:	e003      	b.n	10003620 <CAPTURE_Start+0x5c>
    }
#endif
  }
  else
  {
    status = CAPTURE_STATUS_FAILURE;
10003618:	230f      	movs	r3, #15
1000361a:	18fb      	adds	r3, r7, r3
1000361c:	2201      	movs	r2, #1
1000361e:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10003620:	230f      	movs	r3, #15
10003622:	18fb      	adds	r3, r7, r3
10003624:	781b      	ldrb	r3, [r3, #0]
}
10003626:	1c18      	adds	r0, r3, #0
10003628:	46bd      	mov	sp, r7
1000362a:	b004      	add	sp, #16
1000362c:	bd80      	pop	{r7, pc}
1000362e:	46c0      	nop			; (mov r8, r8)

10003630 <CAPTURE_GetCapturedTimeInNanoSec>:
  return (status);
}


CAPTURE_STATUS_t CAPTURE_GetCapturedTimeInNanoSec(const CAPTURE_t *const handler, uint32_t *const captured_time)
{
10003630:	b590      	push	{r4, r7, lr}
10003632:	b087      	sub	sp, #28
10003634:	af00      	add	r7, sp, #0
10003636:	6078      	str	r0, [r7, #4]
10003638:	6039      	str	r1, [r7, #0]
  CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
1000363a:	2317      	movs	r3, #23
1000363c:	18fb      	adds	r3, r7, r3
1000363e:	2200      	movs	r2, #0
10003640:	701a      	strb	r2, [r3, #0]
  CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
10003642:	2316      	movs	r3, #22
10003644:	18fb      	adds	r3, r7, r3
10003646:	2200      	movs	r2, #0
10003648:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT ("CAPTURE_GetCapturedTimeInNanoSec:handler NULL", (handler != NULL));
  XMC_ASSERT ("CAPTURE_GetCapturedTimeInNanoSec:NULL data pointer", (captured_time != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handler->initialized)
1000364a:	687b      	ldr	r3, [r7, #4]
1000364c:	2231      	movs	r2, #49	; 0x31
1000364e:	5c9b      	ldrb	r3, [r3, r2]
10003650:	2b00      	cmp	r3, #0
10003652:	d100      	bne.n	10003656 <CAPTURE_GetCapturedTimeInNanoSec+0x26>
10003654:	e07c      	b.n	10003750 <CAPTURE_GetCapturedTimeInNanoSec+0x120>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
10003656:	687b      	ldr	r3, [r7, #4]
10003658:	222d      	movs	r2, #45	; 0x2d
1000365a:	5c9b      	ldrb	r3, [r3, r2]
1000365c:	2b00      	cmp	r3, #0
1000365e:	d000      	beq.n	10003662 <CAPTURE_GetCapturedTimeInNanoSec+0x32>
10003660:	e07a      	b.n	10003758 <CAPTURE_GetCapturedTimeInNanoSec+0x128>
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
10003662:	687b      	ldr	r3, [r7, #4]
10003664:	222e      	movs	r2, #46	; 0x2e
10003666:	5c9b      	ldrb	r3, [r3, r2]
10003668:	2b00      	cmp	r3, #0
1000366a:	d004      	beq.n	10003676 <CAPTURE_GetCapturedTimeInNanoSec+0x46>
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
1000366c:	687b      	ldr	r3, [r7, #4]
1000366e:	222e      	movs	r2, #46	; 0x2e
10003670:	5c9b      	ldrb	r3, [r3, r2]
  if (true == handler->initialized)
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
10003672:	2b03      	cmp	r3, #3
10003674:	d14d      	bne.n	10003712 <CAPTURE_GetCapturedTimeInNanoSec+0xe2>
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
      {
        uint32_t captured_time_low_reg = 0U;
10003676:	2300      	movs	r3, #0
10003678:	613b      	str	r3, [r7, #16]
        uint32_t captured_time_high_reg = 0U;
1000367a:	2300      	movs	r3, #0
1000367c:	60fb      	str	r3, [r7, #12]

        status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
1000367e:	687b      	ldr	r3, [r7, #4]
10003680:	699a      	ldr	r2, [r3, #24]
10003682:	2317      	movs	r3, #23
10003684:	18fc      	adds	r4, r7, r3
10003686:	2310      	movs	r3, #16
10003688:	18fb      	adds	r3, r7, r3
1000368a:	1c10      	adds	r0, r2, #0
1000368c:	2100      	movs	r1, #0
1000368e:	1c1a      	adds	r2, r3, #0
10003690:	f000 f99a 	bl	100039c8 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
10003694:	1c03      	adds	r3, r0, #0
10003696:	7023      	strb	r3, [r4, #0]
                                                                  XMC_CCU4_SLICE_CAP_REG_SET_LOW,
                                                                  &captured_time_low_reg);

        status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
10003698:	687b      	ldr	r3, [r7, #4]
1000369a:	699a      	ldr	r2, [r3, #24]
1000369c:	2316      	movs	r3, #22
1000369e:	18fc      	adds	r4, r7, r3
100036a0:	230c      	movs	r3, #12
100036a2:	18fb      	adds	r3, r7, r3
100036a4:	1c10      	adds	r0, r2, #0
100036a6:	2101      	movs	r1, #1
100036a8:	1c1a      	adds	r2, r3, #0
100036aa:	f000 f98d 	bl	100039c8 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
100036ae:	1c03      	adds	r3, r0, #0
100036b0:	7023      	strb	r3, [r4, #0]
                                                                   XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
                                                                   &captured_time_high_reg);

        /*calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_low_reg, true);
100036b2:	687a      	ldr	r2, [r7, #4]
100036b4:	2310      	movs	r3, #16
100036b6:	18fb      	adds	r3, r7, r3
100036b8:	1c10      	adds	r0, r2, #0
100036ba:	1c19      	adds	r1, r3, #0
100036bc:	2201      	movs	r2, #1
100036be:	f000 f8af 	bl	10003820 <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
        captured_time_low_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_time_low_reg);
100036c2:	693b      	ldr	r3, [r7, #16]
100036c4:	687a      	ldr	r2, [r7, #4]
100036c6:	1c10      	adds	r0, r2, #0
100036c8:	1c19      	adds	r1, r3, #0
100036ca:	f000 f911 	bl	100038f0 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
100036ce:	1c03      	adds	r3, r0, #0
100036d0:	613b      	str	r3, [r7, #16]

        /* calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_high_reg, false);
100036d2:	687a      	ldr	r2, [r7, #4]
100036d4:	230c      	movs	r3, #12
100036d6:	18fb      	adds	r3, r7, r3
100036d8:	1c10      	adds	r0, r2, #0
100036da:	1c19      	adds	r1, r3, #0
100036dc:	2200      	movs	r2, #0
100036de:	f000 f89f 	bl	10003820 <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured_time_high_reg**/
        captured_time_high_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_time_high_reg);
100036e2:	68fb      	ldr	r3, [r7, #12]
100036e4:	687a      	ldr	r2, [r7, #4]
100036e6:	1c10      	adds	r0, r2, #0
100036e8:	1c19      	adds	r1, r3, #0
100036ea:	f000 f901 	bl	100038f0 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
100036ee:	1c03      	adds	r3, r0, #0
100036f0:	60fb      	str	r3, [r7, #12]

        /* add both high and lower register value*/
        *captured_time = captured_time_low_reg + captured_time_high_reg;
100036f2:	693a      	ldr	r2, [r7, #16]
100036f4:	68fb      	ldr	r3, [r7, #12]
100036f6:	18d2      	adds	r2, r2, r3
100036f8:	683b      	ldr	r3, [r7, #0]
100036fa:	601a      	str	r2, [r3, #0]

        if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
100036fc:	2316      	movs	r3, #22
100036fe:	18fb      	adds	r3, r7, r3
10003700:	781b      	ldrb	r3, [r3, #0]
10003702:	2b02      	cmp	r3, #2
10003704:	d104      	bne.n	10003710 <CAPTURE_GetCapturedTimeInNanoSec+0xe0>
        {
          status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
10003706:	2317      	movs	r3, #23
10003708:	18fb      	adds	r3, r7, r3
1000370a:	2202      	movs	r2, #2
1000370c:	701a      	strb	r2, [r3, #0]
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
      {
1000370e:	e01e      	b.n	1000374e <CAPTURE_GetCapturedTimeInNanoSec+0x11e>
10003710:	e01d      	b.n	1000374e <CAPTURE_GetCapturedTimeInNanoSec+0x11e>
          status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
        }
      }
      else
      {
        status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
10003712:	687b      	ldr	r3, [r7, #4]
10003714:	699a      	ldr	r2, [r3, #24]
10003716:	2317      	movs	r3, #23
10003718:	18fc      	adds	r4, r7, r3
1000371a:	683b      	ldr	r3, [r7, #0]
1000371c:	1c10      	adds	r0, r2, #0
1000371e:	2101      	movs	r1, #1
10003720:	1c1a      	adds	r2, r3, #0
10003722:	f000 f951 	bl	100039c8 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
10003726:	1c03      	adds	r3, r0, #0
10003728:	7023      	strb	r3, [r4, #0]
                                                                  XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
                                                                  captured_time);

        /* calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, captured_time, true);
1000372a:	687a      	ldr	r2, [r7, #4]
1000372c:	683b      	ldr	r3, [r7, #0]
1000372e:	1c10      	adds	r0, r2, #0
10003730:	1c19      	adds	r1, r3, #0
10003732:	2201      	movs	r2, #1
10003734:	f000 f874 	bl	10003820 <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
        *captured_time = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, *captured_time);
10003738:	683b      	ldr	r3, [r7, #0]
1000373a:	681b      	ldr	r3, [r3, #0]
1000373c:	687a      	ldr	r2, [r7, #4]
1000373e:	1c10      	adds	r0, r2, #0
10003740:	1c19      	adds	r1, r3, #0
10003742:	f000 f8d5 	bl	100038f0 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
10003746:	1c02      	adds	r2, r0, #0
10003748:	683b      	ldr	r3, [r7, #0]
1000374a:	601a      	str	r2, [r3, #0]
1000374c:	e004      	b.n	10003758 <CAPTURE_GetCapturedTimeInNanoSec+0x128>
1000374e:	e003      	b.n	10003758 <CAPTURE_GetCapturedTimeInNanoSec+0x128>
    }
#endif
  }
  else
  {
    status = CAPTURE_STATUS_FAILURE;
10003750:	2317      	movs	r3, #23
10003752:	18fb      	adds	r3, r7, r3
10003754:	2201      	movs	r2, #1
10003756:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10003758:	2317      	movs	r3, #23
1000375a:	18fb      	adds	r3, r7, r3
1000375c:	781b      	ldrb	r3, [r3, #0]
}
1000375e:	1c18      	adds	r0, r3, #0
10003760:	46bd      	mov	sp, r7
10003762:	b007      	add	sp, #28
10003764:	bd90      	pop	{r4, r7, pc}
10003766:	46c0      	nop			; (mov r8, r8)

10003768 <CAPTURE_CCU4_lInit>:
/*********************************************************************************************************************
* PRIVATE API IMPLEMENTATION
**********************************************************************************************************************/
#ifdef CAPTURE_CCU4_USED
static void CAPTURE_CCU4_lInit(const CAPTURE_t *const handler)
{
10003768:	b580      	push	{r7, lr}
1000376a:	b082      	sub	sp, #8
1000376c:	af00      	add	r7, sp, #0
1000376e:	6078      	str	r0, [r7, #4]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CaptureInit(handler->ccu4_slice_ptr, handler->ccu4_slice_config_ptr);
10003770:	687b      	ldr	r3, [r7, #4]
10003772:	699a      	ldr	r2, [r3, #24]
10003774:	687b      	ldr	r3, [r7, #4]
10003776:	69db      	ldr	r3, [r3, #28]
10003778:	1c10      	adds	r0, r2, #0
1000377a:	1c19      	adds	r1, r3, #0
1000377c:	f7fe fd94 	bl	100022a8 <XMC_CCU4_SLICE_CaptureInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  CAPTURE_CCU4_lShadowTransfer(handler);
10003780:	687b      	ldr	r3, [r7, #4]
10003782:	1c18      	adds	r0, r3, #0
10003784:	f000 f82c 	bl	100037e0 <CAPTURE_CCU4_lShadowTransfer>

  /************Configure External Events***************/
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0, handler->ccu4_event0_ptr);
10003788:	687b      	ldr	r3, [r7, #4]
1000378a:	699a      	ldr	r2, [r3, #24]
1000378c:	687b      	ldr	r3, [r7, #4]
1000378e:	68db      	ldr	r3, [r3, #12]
10003790:	1c10      	adds	r0, r2, #0
10003792:	2101      	movs	r1, #1
10003794:	1c1a      	adds	r2, r3, #0
10003796:	f7fe fddf 	bl	10002358 <XMC_CCU4_SLICE_ConfigureEvent>
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1, handler->ccu4_event1_ptr);
1000379a:	687b      	ldr	r3, [r7, #4]
1000379c:	699a      	ldr	r2, [r3, #24]
1000379e:	687b      	ldr	r3, [r7, #4]
100037a0:	691b      	ldr	r3, [r3, #16]
100037a2:	1c10      	adds	r0, r2, #0
100037a4:	2102      	movs	r1, #2
100037a6:	1c1a      	adds	r2, r3, #0
100037a8:	f7fe fdd6 	bl	10002358 <XMC_CCU4_SLICE_ConfigureEvent>
  XMC_CCU4_SLICE_Capture0Config(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0);
100037ac:	687b      	ldr	r3, [r7, #4]
100037ae:	699b      	ldr	r3, [r3, #24]
100037b0:	1c18      	adds	r0, r3, #0
100037b2:	2101      	movs	r1, #1
100037b4:	f7fe fd9c 	bl	100022f0 <XMC_CCU4_SLICE_Capture0Config>
  XMC_CCU4_SLICE_Capture1Config(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1);
100037b8:	687b      	ldr	r3, [r7, #4]
100037ba:	699b      	ldr	r3, [r3, #24]
100037bc:	1c18      	adds	r0, r3, #0
100037be:	2102      	movs	r1, #2
100037c0:	f7fe fdb0 	bl	10002324 <XMC_CCU4_SLICE_Capture1Config>
    XMC_CCU4_SLICE_EnableEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
  }
  #endif

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handler->global_ccu4_handler->module_ptr, handler->ccu_slice_number);
100037c4:	687b      	ldr	r3, [r7, #4]
100037c6:	695b      	ldr	r3, [r3, #20]
100037c8:	6899      	ldr	r1, [r3, #8]
100037ca:	687b      	ldr	r3, [r7, #4]
100037cc:	222c      	movs	r2, #44	; 0x2c
100037ce:	5c9b      	ldrb	r3, [r3, r2]
100037d0:	1c08      	adds	r0, r1, #0
100037d2:	1c19      	adds	r1, r3, #0
100037d4:	f7ff fe5a 	bl	1000348c <XMC_CCU4_EnableClock>
}
100037d8:	46bd      	mov	sp, r7
100037da:	b002      	add	sp, #8
100037dc:	bd80      	pop	{r7, pc}
100037de:	46c0      	nop			; (mov r8, r8)

100037e0 <CAPTURE_CCU4_lShadowTransfer>:

static void CAPTURE_CCU4_lShadowTransfer(const CAPTURE_t *const handler)
{
100037e0:	b580      	push	{r7, lr}
100037e2:	b082      	sub	sp, #8
100037e4:	af00      	add	r7, sp, #0
100037e6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handler->ccu4_slice_ptr, CAPTURE_PERIOD_16BIT_MAX);
100037e8:	687b      	ldr	r3, [r7, #4]
100037ea:	699b      	ldr	r3, [r3, #24]
100037ec:	4a0b      	ldr	r2, [pc, #44]	; (1000381c <CAPTURE_CCU4_lShadowTransfer+0x3c>)
100037ee:	1c18      	adds	r0, r3, #0
100037f0:	1c11      	adds	r1, r2, #0
100037f2:	f7ff fe6f 	bl	100034d4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handler->ccu4_slice_ptr, 0x0U);
100037f6:	687b      	ldr	r3, [r7, #4]
100037f8:	699b      	ldr	r3, [r3, #24]
100037fa:	1c18      	adds	r0, r3, #0
100037fc:	2100      	movs	r1, #0
100037fe:	f7ff fe77 	bl	100034f0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handler->global_ccu4_handler->module_ptr, handler->shadow_mask);
10003802:	687b      	ldr	r3, [r7, #4]
10003804:	695b      	ldr	r3, [r3, #20]
10003806:	689a      	ldr	r2, [r3, #8]
10003808:	687b      	ldr	r3, [r7, #4]
1000380a:	689b      	ldr	r3, [r3, #8]
1000380c:	1c10      	adds	r0, r2, #0
1000380e:	1c19      	adds	r1, r3, #0
10003810:	f7ff fe7c 	bl	1000350c <XMC_CCU4_EnableShadowTransfer>
}
10003814:	46bd      	mov	sp, r7
10003816:	b002      	add	sp, #8
10003818:	bd80      	pop	{r7, pc}
1000381a:	46c0      	nop			; (mov r8, r8)
1000381c:	0000ffff 	.word	0x0000ffff

10003820 <CAPTURE_lCalculateTimeTickFromTimerValue>:
#endif

static void CAPTURE_lCalculateTimeTickFromTimerValue(const CAPTURE_t *const handler,
                                                     uint32_t *const timer_val_ptr,
                                                     bool is_increment)
{
10003820:	b580      	push	{r7, lr}
10003822:	b08c      	sub	sp, #48	; 0x30
10003824:	af00      	add	r7, sp, #0
10003826:	60f8      	str	r0, [r7, #12]
10003828:	60b9      	str	r1, [r7, #8]
1000382a:	1dfb      	adds	r3, r7, #7
1000382c:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  uint32_t psc_psiv_val = 0U;
1000382e:	2300      	movs	r3, #0
10003830:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool is_float_prescaler = false;
10003832:	232b      	movs	r3, #43	; 0x2b
10003834:	18fb      	adds	r3, r7, r3
10003836:	2200      	movs	r2, #0
10003838:	701a      	strb	r2, [r3, #0]
  uint32_t cxv_captv_val = (uint32_t)((uint32_t)*timer_val_ptr & 0xFFFFU);
1000383a:	68bb      	ldr	r3, [r7, #8]
1000383c:	681b      	ldr	r3, [r3, #0]
1000383e:	041b      	lsls	r3, r3, #16
10003840:	0c1b      	lsrs	r3, r3, #16
10003842:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cxv_fpcv_val = (uint32_t)((uint32_t)*timer_val_ptr >> 16U) & 0xFU;
10003844:	68bb      	ldr	r3, [r7, #8]
10003846:	681b      	ldr	r3, [r3, #0]
10003848:	0c1b      	lsrs	r3, r3, #16
1000384a:	220f      	movs	r2, #15
1000384c:	4013      	ands	r3, r2
1000384e:	61bb      	str	r3, [r7, #24]

  /* Period measured should be added 1 to get actual value*/
  if (is_increment == true)
10003850:	1dfb      	adds	r3, r7, #7
10003852:	781b      	ldrb	r3, [r3, #0]
10003854:	2b00      	cmp	r3, #0
10003856:	d002      	beq.n	1000385e <CAPTURE_lCalculateTimeTickFromTimerValue+0x3e>
  {
    cxv_captv_val = cxv_captv_val + 1U;
10003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000385a:	3301      	adds	r3, #1
1000385c:	627b      	str	r3, [r7, #36]	; 0x24
  }
#ifdef CAPTURE_CCU4_USED
  if (CAPTURE_MODULE_CCU4 == handler->capture_module)
1000385e:	68fb      	ldr	r3, [r7, #12]
10003860:	222d      	movs	r2, #45	; 0x2d
10003862:	5c9b      	ldrb	r3, [r3, r2]
10003864:	2b00      	cmp	r3, #0
10003866:	d112      	bne.n	1000388e <CAPTURE_lCalculateTimeTickFromTimerValue+0x6e>
  {
    psc_psiv_val = handler->ccu4_slice_config_ptr->prescaler_initval;
10003868:	68fb      	ldr	r3, [r7, #12]
1000386a:	69db      	ldr	r3, [r3, #28]
1000386c:	791b      	ldrb	r3, [r3, #4]
1000386e:	071b      	lsls	r3, r3, #28
10003870:	0f1b      	lsrs	r3, r3, #28
10003872:	b2db      	uxtb	r3, r3
10003874:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (handler->ccu4_slice_config_ptr->prescaler_mode == (uint32_t)XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT)
10003876:	68fb      	ldr	r3, [r7, #12]
10003878:	69db      	ldr	r3, [r3, #28]
1000387a:	789b      	ldrb	r3, [r3, #2]
1000387c:	2201      	movs	r2, #1
1000387e:	4013      	ands	r3, r2
10003880:	b2db      	uxtb	r3, r3
10003882:	2b00      	cmp	r3, #0
10003884:	d003      	beq.n	1000388e <CAPTURE_lCalculateTimeTickFromTimerValue+0x6e>
    {
      is_float_prescaler =  true;
10003886:	232b      	movs	r3, #43	; 0x2b
10003888:	18fb      	adds	r3, r7, r3
1000388a:	2201      	movs	r2, #1
1000388c:	701a      	strb	r2, [r3, #0]
      is_float_prescaler =  true;
    }
  }
#endif

  if (is_float_prescaler == true)
1000388e:	232b      	movs	r3, #43	; 0x2b
10003890:	18fb      	adds	r3, r7, r3
10003892:	781b      	ldrb	r3, [r3, #0]
10003894:	2b00      	cmp	r3, #0
10003896:	d023      	beq.n	100038e0 <CAPTURE_lCalculateTimeTickFromTimerValue+0xc0>
  {
    int32_t loop = 0;
10003898:	2300      	movs	r3, #0
1000389a:	623b      	str	r3, [r7, #32]
    uint32_t prescaler_value;
    uint32_t timer_val = 0U;
1000389c:	2300      	movs	r3, #0
1000389e:	61fb      	str	r3, [r7, #28]

    prescaler_value = cxv_fpcv_val - psc_psiv_val;
100038a0:	69ba      	ldr	r2, [r7, #24]
100038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100038a4:	1ad3      	subs	r3, r2, r3
100038a6:	617b      	str	r3, [r7, #20]

    for (loop = (int32_t)prescaler_value; loop > 0; loop--)
100038a8:	697b      	ldr	r3, [r7, #20]
100038aa:	623b      	str	r3, [r7, #32]
100038ac:	e00a      	b.n	100038c4 <CAPTURE_lCalculateTimeTickFromTimerValue+0xa4>
    {
      timer_val = (uint32_t)timer_val << 1U;
100038ae:	69fb      	ldr	r3, [r7, #28]
100038b0:	005b      	lsls	r3, r3, #1
100038b2:	61fb      	str	r3, [r7, #28]
      timer_val += 65535U;
100038b4:	69fb      	ldr	r3, [r7, #28]
100038b6:	4a0d      	ldr	r2, [pc, #52]	; (100038ec <CAPTURE_lCalculateTimeTickFromTimerValue+0xcc>)
100038b8:	4694      	mov	ip, r2
100038ba:	4463      	add	r3, ip
100038bc:	61fb      	str	r3, [r7, #28]
    uint32_t prescaler_value;
    uint32_t timer_val = 0U;

    prescaler_value = cxv_fpcv_val - psc_psiv_val;

    for (loop = (int32_t)prescaler_value; loop > 0; loop--)
100038be:	6a3b      	ldr	r3, [r7, #32]
100038c0:	3b01      	subs	r3, #1
100038c2:	623b      	str	r3, [r7, #32]
100038c4:	6a3b      	ldr	r3, [r7, #32]
100038c6:	2b00      	cmp	r3, #0
100038c8:	dcf1      	bgt.n	100038ae <CAPTURE_lCalculateTimeTickFromTimerValue+0x8e>
    {
      timer_val = (uint32_t)timer_val << 1U;
      timer_val += 65535U;
    }

    timer_val += (uint32_t)(cxv_captv_val * (1UL << prescaler_value));
100038ca:	697b      	ldr	r3, [r7, #20]
100038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100038ce:	409a      	lsls	r2, r3
100038d0:	1c13      	adds	r3, r2, #0
100038d2:	69fa      	ldr	r2, [r7, #28]
100038d4:	18d3      	adds	r3, r2, r3
100038d6:	61fb      	str	r3, [r7, #28]
    *timer_val_ptr = timer_val;
100038d8:	68bb      	ldr	r3, [r7, #8]
100038da:	69fa      	ldr	r2, [r7, #28]
100038dc:	601a      	str	r2, [r3, #0]
100038de:	e002      	b.n	100038e6 <CAPTURE_lCalculateTimeTickFromTimerValue+0xc6>
  }
  else
  {
    *timer_val_ptr = cxv_captv_val;
100038e0:	68bb      	ldr	r3, [r7, #8]
100038e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100038e4:	601a      	str	r2, [r3, #0]
  }
}
100038e6:	46bd      	mov	sp, r7
100038e8:	b00c      	add	sp, #48	; 0x30
100038ea:	bd80      	pop	{r7, pc}
100038ec:	0000ffff 	.word	0x0000ffff

100038f0 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>:

static uint32_t CAPTURE_lCalculateTimeInNanoSecFromTimerTick(const CAPTURE_t *const handler, uint32_t timer_val)
{
100038f0:	b5b0      	push	{r4, r5, r7, lr}
100038f2:	b08e      	sub	sp, #56	; 0x38
100038f4:	af00      	add	r7, sp, #0
100038f6:	60f8      	str	r0, [r7, #12]
100038f8:	60b9      	str	r1, [r7, #8]
  uint64_t singal_period_long_long;
  uint32_t inv_sig_resolution_in_sec = 1U;
100038fa:	2301      	movs	r3, #1
100038fc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t norm_timer_val;
  uint32_t norm_inv_sig_resolution_in_sec;
  uint32_t min_norm;
  uint32_t psc_psiv_val = 0U;
100038fe:	2300      	movs	r3, #0
10003900:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifdef CAPTURE_CCU4_USED
  if (CAPTURE_MODULE_CCU4 == handler->capture_module)
10003902:	68fb      	ldr	r3, [r7, #12]
10003904:	222d      	movs	r2, #45	; 0x2d
10003906:	5c9b      	ldrb	r3, [r3, r2]
10003908:	2b00      	cmp	r3, #0
1000390a:	d10d      	bne.n	10003928 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x38>
  {
    psc_psiv_val = handler->ccu4_slice_config_ptr->prescaler_initval;
1000390c:	68fb      	ldr	r3, [r7, #12]
1000390e:	69db      	ldr	r3, [r3, #28]
10003910:	791b      	ldrb	r3, [r3, #4]
10003912:	071b      	lsls	r3, r3, #28
10003914:	0f1b      	lsrs	r3, r3, #28
10003916:	b2db      	uxtb	r3, r3
10003918:	62fb      	str	r3, [r7, #44]	; 0x2c
    inv_sig_resolution_in_sec = handler->global_ccu4_handler->module_frequency >> psc_psiv_val;
1000391a:	68fb      	ldr	r3, [r7, #12]
1000391c:	695b      	ldr	r3, [r3, #20]
1000391e:	681a      	ldr	r2, [r3, #0]
10003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10003922:	40da      	lsrs	r2, r3
10003924:	1c13      	adds	r3, r2, #0
10003926:	637b      	str	r3, [r7, #52]	; 0x34
10003928:	68bb      	ldr	r3, [r7, #8]
1000392a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
1000392c:	697b      	ldr	r3, [r7, #20]
1000392e:	2b00      	cmp	r3, #0
10003930:	d101      	bne.n	10003936 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x46>
  {
    return 32U;
10003932:	2320      	movs	r3, #32
10003934:	e004      	b.n	10003940 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x50>
  }
  return __builtin_clz(value);
10003936:	6978      	ldr	r0, [r7, #20]
10003938:	f006 fa36 	bl	10009da8 <__clzsi2>
1000393c:	1c03      	adds	r3, r0, #0
1000393e:	b2db      	uxtb	r3, r3
    psc_psiv_val = handler->ccu8_slice_config_ptr->prescaler_initval;
    inv_sig_resolution_in_sec = handler->global_ccu8_handler->module_frequency >> psc_psiv_val;
  }
#endif

  norm_timer_val = (uint32_t)__CLZ(timer_val);
10003940:	62bb      	str	r3, [r7, #40]	; 0x28
10003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003944:	613b      	str	r3, [r7, #16]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
10003946:	693b      	ldr	r3, [r7, #16]
10003948:	2b00      	cmp	r3, #0
1000394a:	d101      	bne.n	10003950 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x60>
  {
    return 32U;
1000394c:	2320      	movs	r3, #32
1000394e:	e004      	b.n	1000395a <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x6a>
  }
  return __builtin_clz(value);
10003950:	6938      	ldr	r0, [r7, #16]
10003952:	f006 fa29 	bl	10009da8 <__clzsi2>
10003956:	1c03      	adds	r3, r0, #0
10003958:	b2db      	uxtb	r3, r3
  norm_inv_sig_resolution_in_sec = (uint32_t)__CLZ(inv_sig_resolution_in_sec);
1000395a:	627b      	str	r3, [r7, #36]	; 0x24

  if (norm_timer_val > norm_inv_sig_resolution_in_sec)
1000395c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003960:	429a      	cmp	r2, r3
10003962:	d902      	bls.n	1000396a <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x7a>
  {
    min_norm = norm_inv_sig_resolution_in_sec;
10003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003966:	633b      	str	r3, [r7, #48]	; 0x30
10003968:	e001      	b.n	1000396e <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x7e>
  }
  else
  {
    min_norm = norm_timer_val;
1000396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000396c:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Normalized the value to get better precision*/
  timer_val = timer_val << min_norm;
1000396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10003970:	68ba      	ldr	r2, [r7, #8]
10003972:	409a      	lsls	r2, r3
10003974:	1c13      	adds	r3, r2, #0
10003976:	60bb      	str	r3, [r7, #8]
  inv_sig_resolution_in_sec = inv_sig_resolution_in_sec << min_norm;
10003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000397a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000397c:	409a      	lsls	r2, r3
1000397e:	1c13      	adds	r3, r2, #0
10003980:	637b      	str	r3, [r7, #52]	; 0x34

  singal_period_long_long = (((uint64_t) timer_val) * 1000000000U) / inv_sig_resolution_in_sec;
10003982:	68bb      	ldr	r3, [r7, #8]
10003984:	603b      	str	r3, [r7, #0]
10003986:	2300      	movs	r3, #0
10003988:	607b      	str	r3, [r7, #4]
1000398a:	6838      	ldr	r0, [r7, #0]
1000398c:	6879      	ldr	r1, [r7, #4]
1000398e:	4a0d      	ldr	r2, [pc, #52]	; (100039c4 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0xd4>)
10003990:	2300      	movs	r3, #0
10003992:	f006 fa47 	bl	10009e24 <__aeabi_lmul>
10003996:	1c02      	adds	r2, r0, #0
10003998:	1c0b      	adds	r3, r1, #0
1000399a:	1c11      	adds	r1, r2, #0
1000399c:	1c1a      	adds	r2, r3, #0
1000399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100039a0:	1c1c      	adds	r4, r3, #0
100039a2:	2300      	movs	r3, #0
100039a4:	1c1d      	adds	r5, r3, #0
100039a6:	1c08      	adds	r0, r1, #0
100039a8:	1c11      	adds	r1, r2, #0
100039aa:	1c22      	adds	r2, r4, #0
100039ac:	1c2b      	adds	r3, r5, #0
100039ae:	f006 fa19 	bl	10009de4 <__aeabi_uldivmod>
100039b2:	1c03      	adds	r3, r0, #0
100039b4:	1c0c      	adds	r4, r1, #0
100039b6:	61bb      	str	r3, [r7, #24]
100039b8:	61fc      	str	r4, [r7, #28]

  return ((uint32_t)singal_period_long_long);
100039ba:	69bb      	ldr	r3, [r7, #24]
}
100039bc:	1c18      	adds	r0, r3, #0
100039be:	46bd      	mov	sp, r7
100039c0:	b00e      	add	sp, #56	; 0x38
100039c2:	bdb0      	pop	{r4, r5, r7, pc}
100039c4:	3b9aca00 	.word	0x3b9aca00

100039c8 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>:
#ifdef  CAPTURE_CCU4_USED
/* @brief Retrieves the latest captured timer value from CCU4*/
static CAPTURE_STATUS_t CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(const XMC_CCU4_SLICE_t * const slice,
                                                                         const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                                         uint32_t * const val_ptr)
{
100039c8:	b580      	push	{r7, lr}
100039ca:	b088      	sub	sp, #32
100039cc:	af00      	add	r7, sp, #0
100039ce:	60f8      	str	r0, [r7, #12]
100039d0:	607a      	str	r2, [r7, #4]
100039d2:	230b      	movs	r3, #11
100039d4:	18fb      	adds	r3, r7, r3
100039d6:	1c0a      	adds	r2, r1, #0
100039d8:	701a      	strb	r2, [r3, #0]
              ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) || (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));

  XMC_ASSERT ("CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue:Invalid Extended Capture Mode ",
              ((slice->TC) & CCU4_CC4_TC_ECM_Msk) == 0);

  retval = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
100039da:	231f      	movs	r3, #31
100039dc:	18fb      	adds	r3, r7, r3
100039de:	2202      	movs	r2, #2
100039e0:	701a      	strb	r2, [r3, #0]

  if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
100039e2:	230b      	movs	r3, #11
100039e4:	18fb      	adds	r3, r7, r3
100039e6:	781b      	ldrb	r3, [r3, #0]
100039e8:	2b01      	cmp	r3, #1
100039ea:	d120      	bne.n	10003a2e <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x66>
  {
    /* read capture values*/
    *val_ptr = slice->CV[CAPTURE_SLICE_CAP_REGISTER_3];
100039ec:	68fb      	ldr	r3, [r7, #12]
100039ee:	2280      	movs	r2, #128	; 0x80
100039f0:	589a      	ldr	r2, [r3, r2]
100039f2:	687b      	ldr	r3, [r7, #4]
100039f4:	601a      	str	r2, [r3, #0]
    /* check for new data or full Flag*/
    if ((*val_ptr) & CCU4_CC4_CV_FFL_Msk)
100039f6:	687b      	ldr	r3, [r7, #4]
100039f8:	681a      	ldr	r2, [r3, #0]
100039fa:	2380      	movs	r3, #128	; 0x80
100039fc:	035b      	lsls	r3, r3, #13
100039fe:	4013      	ands	r3, r2
10003a00:	d004      	beq.n	10003a0c <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x44>
    {
      retval = CAPTURE_STATUS_SUCCESS;
10003a02:	231f      	movs	r3, #31
10003a04:	18fb      	adds	r3, r7, r3
10003a06:	2200      	movs	r2, #0
10003a08:	701a      	strb	r2, [r3, #0]
10003a0a:	e02e      	b.n	10003a6a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
    }
    else
    {
      volatile uint32_t capture_reg_value_low;
      capture_reg_value_low = slice->CV[CAPTURE_SLICE_CAP_REGISTER_2];
10003a0c:	68fb      	ldr	r3, [r7, #12]
10003a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10003a10:	61bb      	str	r3, [r7, #24]
      /* check for new data or full Flag*/
      if (capture_reg_value_low & CCU4_CC4_CV_FFL_Msk)
10003a12:	69ba      	ldr	r2, [r7, #24]
10003a14:	2380      	movs	r3, #128	; 0x80
10003a16:	035b      	lsls	r3, r3, #13
10003a18:	4013      	ands	r3, r2
10003a1a:	d007      	beq.n	10003a2c <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x64>
      {
        retval = CAPTURE_STATUS_SUCCESS;
10003a1c:	231f      	movs	r3, #31
10003a1e:	18fb      	adds	r3, r7, r3
10003a20:	2200      	movs	r2, #0
10003a22:	701a      	strb	r2, [r3, #0]
        *val_ptr = capture_reg_value_low;
10003a24:	69ba      	ldr	r2, [r7, #24]
10003a26:	687b      	ldr	r3, [r7, #4]
10003a28:	601a      	str	r2, [r3, #0]
10003a2a:	e01e      	b.n	10003a6a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
10003a2c:	e01d      	b.n	10003a6a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
    }
  }
  else
  {
    /* read capture values*/
    *val_ptr = slice->CV[CAPTURE_SLICE_CAP_REGISTER_1];
10003a2e:	68fb      	ldr	r3, [r7, #12]
10003a30:	6f9a      	ldr	r2, [r3, #120]	; 0x78
10003a32:	687b      	ldr	r3, [r7, #4]
10003a34:	601a      	str	r2, [r3, #0]
    /* check for new data or full Flag*/
    if ((*val_ptr) & CCU4_CC4_CV_FFL_Msk)
10003a36:	687b      	ldr	r3, [r7, #4]
10003a38:	681a      	ldr	r2, [r3, #0]
10003a3a:	2380      	movs	r3, #128	; 0x80
10003a3c:	035b      	lsls	r3, r3, #13
10003a3e:	4013      	ands	r3, r2
10003a40:	d004      	beq.n	10003a4c <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x84>
    {
      retval = CAPTURE_STATUS_SUCCESS;
10003a42:	231f      	movs	r3, #31
10003a44:	18fb      	adds	r3, r7, r3
10003a46:	2200      	movs	r2, #0
10003a48:	701a      	strb	r2, [r3, #0]
10003a4a:	e00e      	b.n	10003a6a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
    }
    else
    {
      volatile uint32_t capture_reg_value_low;
      capture_reg_value_low = slice->CV[CAPTURE_SLICE_CAP_REGISTER_0];
10003a4c:	68fb      	ldr	r3, [r7, #12]
10003a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10003a50:	617b      	str	r3, [r7, #20]
      /* check for new data or full Flag*/
      if (capture_reg_value_low & CCU4_CC4_CV_FFL_Msk)
10003a52:	697a      	ldr	r2, [r7, #20]
10003a54:	2380      	movs	r3, #128	; 0x80
10003a56:	035b      	lsls	r3, r3, #13
10003a58:	4013      	ands	r3, r2
10003a5a:	d006      	beq.n	10003a6a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
      {
        retval = CAPTURE_STATUS_SUCCESS;
10003a5c:	231f      	movs	r3, #31
10003a5e:	18fb      	adds	r3, r7, r3
10003a60:	2200      	movs	r2, #0
10003a62:	701a      	strb	r2, [r3, #0]
        *val_ptr = capture_reg_value_low;
10003a64:	697a      	ldr	r2, [r7, #20]
10003a66:	687b      	ldr	r3, [r7, #4]
10003a68:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return retval;
10003a6a:	231f      	movs	r3, #31
10003a6c:	18fb      	adds	r3, r7, r3
10003a6e:	781b      	ldrb	r3, [r3, #0]
}
10003a70:	1c18      	adds	r0, r3, #0
10003a72:	46bd      	mov	sp, r7
10003a74:	b008      	add	sp, #32
10003a76:	bd80      	pop	{r7, pc}

10003a78 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
10003a78:	b580      	push	{r7, lr}
10003a7a:	b084      	sub	sp, #16
10003a7c:	af00      	add	r7, sp, #0
10003a7e:	60f8      	str	r0, [r7, #12]
10003a80:	607a      	str	r2, [r7, #4]
10003a82:	230b      	movs	r3, #11
10003a84:	18fb      	adds	r3, r7, r3
10003a86:	1c0a      	adds	r2, r1, #0
10003a88:	701a      	strb	r2, [r3, #0]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
10003a8a:	68fb      	ldr	r3, [r7, #12]
10003a8c:	689b      	ldr	r3, [r3, #8]
10003a8e:	220b      	movs	r2, #11
10003a90:	18ba      	adds	r2, r7, r2
10003a92:	7812      	ldrb	r2, [r2, #0]
10003a94:	2107      	movs	r1, #7
10003a96:	4091      	lsls	r1, r2
10003a98:	1c0a      	adds	r2, r1, #0
10003a9a:	43d2      	mvns	r2, r2
10003a9c:	401a      	ands	r2, r3
10003a9e:	230b      	movs	r3, #11
10003aa0:	18fb      	adds	r3, r7, r3
10003aa2:	781b      	ldrb	r3, [r3, #0]
10003aa4:	6879      	ldr	r1, [r7, #4]
10003aa6:	4099      	lsls	r1, r3
10003aa8:	1c0b      	adds	r3, r1, #0
10003aaa:	431a      	orrs	r2, r3
10003aac:	68fb      	ldr	r3, [r7, #12]
10003aae:	609a      	str	r2, [r3, #8]
}
10003ab0:	46bd      	mov	sp, r7
10003ab2:	b004      	add	sp, #16
10003ab4:	bd80      	pop	{r7, pc}
10003ab6:	46c0      	nop			; (mov r8, r8)

10003ab8 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
10003ab8:	b580      	push	{r7, lr}
10003aba:	b082      	sub	sp, #8
10003abc:	af00      	add	r7, sp, #0
10003abe:	6078      	str	r0, [r7, #4]
10003ac0:	1c0a      	adds	r2, r1, #0
10003ac2:	1cfb      	adds	r3, r7, #3
10003ac4:	701a      	strb	r2, [r3, #0]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10003ac6:	687b      	ldr	r3, [r7, #4]
10003ac8:	68db      	ldr	r3, [r3, #12]
10003aca:	2207      	movs	r2, #7
10003acc:	4393      	bics	r3, r2
10003ace:	1c1a      	adds	r2, r3, #0
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
10003ad0:	1cfb      	adds	r3, r7, #3
10003ad2:	781b      	ldrb	r3, [r3, #0]
10003ad4:	2107      	movs	r1, #7
10003ad6:	400b      	ands	r3, r1
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10003ad8:	431a      	orrs	r2, r3
10003ada:	687b      	ldr	r3, [r7, #4]
10003adc:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
10003ade:	46bd      	mov	sp, r7
10003ae0:	b002      	add	sp, #8
10003ae2:	bd80      	pop	{r7, pc}

10003ae4 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
10003ae4:	b580      	push	{r7, lr}
10003ae6:	b082      	sub	sp, #8
10003ae8:	af00      	add	r7, sp, #0
10003aea:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
10003aec:	687b      	ldr	r3, [r7, #4]
10003aee:	68db      	ldr	r3, [r3, #12]
10003af0:	2280      	movs	r2, #128	; 0x80
10003af2:	0052      	lsls	r2, r2, #1
10003af4:	431a      	orrs	r2, r3
10003af6:	687b      	ldr	r3, [r7, #4]
10003af8:	60da      	str	r2, [r3, #12]
}
10003afa:	46bd      	mov	sp, r7
10003afc:	b002      	add	sp, #8
10003afe:	bd80      	pop	{r7, pc}

10003b00 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10003b00:	b580      	push	{r7, lr}
10003b02:	b082      	sub	sp, #8
10003b04:	af00      	add	r7, sp, #0
10003b06:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
10003b08:	687b      	ldr	r3, [r7, #4]
10003b0a:	681b      	ldr	r3, [r3, #0]
10003b0c:	2240      	movs	r2, #64	; 0x40
10003b0e:	431a      	orrs	r2, r3
10003b10:	687b      	ldr	r3, [r7, #4]
10003b12:	601a      	str	r2, [r3, #0]
}
10003b14:	46bd      	mov	sp, r7
10003b16:	b002      	add	sp, #8
10003b18:	bd80      	pop	{r7, pc}
10003b1a:	46c0      	nop			; (mov r8, r8)

10003b1c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10003b1c:	b580      	push	{r7, lr}
10003b1e:	b082      	sub	sp, #8
10003b20:	af00      	add	r7, sp, #0
10003b22:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10003b24:	687b      	ldr	r3, [r7, #4]
10003b26:	681b      	ldr	r3, [r3, #0]
10003b28:	2240      	movs	r2, #64	; 0x40
10003b2a:	4393      	bics	r3, r2
10003b2c:	1c1a      	adds	r2, r3, #0
10003b2e:	687b      	ldr	r3, [r7, #4]
10003b30:	601a      	str	r2, [r3, #0]
}
10003b32:	46bd      	mov	sp, r7
10003b34:	b002      	add	sp, #8
10003b36:	bd80      	pop	{r7, pc}

10003b38 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
10003b38:	b580      	push	{r7, lr}
10003b3a:	b082      	sub	sp, #8
10003b3c:	af00      	add	r7, sp, #0
10003b3e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
10003b40:	687b      	ldr	r3, [r7, #4]
10003b42:	681b      	ldr	r3, [r3, #0]
10003b44:	2201      	movs	r2, #1
10003b46:	431a      	orrs	r2, r3
10003b48:	687b      	ldr	r3, [r7, #4]
10003b4a:	601a      	str	r2, [r3, #0]
}
10003b4c:	46bd      	mov	sp, r7
10003b4e:	b002      	add	sp, #8
10003b50:	bd80      	pop	{r7, pc}
10003b52:	46c0      	nop			; (mov r8, r8)

10003b54 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
10003b54:	b580      	push	{r7, lr}
10003b56:	b082      	sub	sp, #8
10003b58:	af00      	add	r7, sp, #0
10003b5a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
10003b5c:	687b      	ldr	r3, [r7, #4]
10003b5e:	681b      	ldr	r3, [r3, #0]
10003b60:	2201      	movs	r2, #1
10003b62:	4393      	bics	r3, r2
10003b64:	1c1a      	adds	r2, r3, #0
10003b66:	687b      	ldr	r3, [r7, #4]
10003b68:	601a      	str	r2, [r3, #0]
}
10003b6a:	46bd      	mov	sp, r7
10003b6c:	b002      	add	sp, #8
10003b6e:	bd80      	pop	{r7, pc}

10003b70 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
10003b70:	b580      	push	{r7, lr}
10003b72:	b082      	sub	sp, #8
10003b74:	af00      	add	r7, sp, #0
10003b76:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
10003b78:	687b      	ldr	r3, [r7, #4]
10003b7a:	681b      	ldr	r3, [r3, #0]
10003b7c:	2280      	movs	r2, #128	; 0x80
10003b7e:	4393      	bics	r3, r2
10003b80:	1c1a      	adds	r2, r3, #0
10003b82:	687b      	ldr	r3, [r7, #4]
10003b84:	601a      	str	r2, [r3, #0]
}
10003b86:	46bd      	mov	sp, r7
10003b88:	b002      	add	sp, #8
10003b8a:	bd80      	pop	{r7, pc}

10003b8c <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
10003b8c:	b580      	push	{r7, lr}
10003b8e:	b084      	sub	sp, #16
10003b90:	af00      	add	r7, sp, #0
10003b92:	60f8      	str	r0, [r7, #12]
10003b94:	607a      	str	r2, [r7, #4]
10003b96:	230b      	movs	r3, #11
10003b98:	18fb      	adds	r3, r7, r3
10003b9a:	1c0a      	adds	r2, r1, #0
10003b9c:	701a      	strb	r2, [r3, #0]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
10003b9e:	68fb      	ldr	r3, [r7, #12]
10003ba0:	681b      	ldr	r3, [r3, #0]
10003ba2:	68fa      	ldr	r2, [r7, #12]
10003ba4:	6812      	ldr	r2, [r2, #0]
10003ba6:	6892      	ldr	r2, [r2, #8]
10003ba8:	210b      	movs	r1, #11
10003baa:	1879      	adds	r1, r7, r1
10003bac:	7809      	ldrb	r1, [r1, #0]
10003bae:	2007      	movs	r0, #7
10003bb0:	4088      	lsls	r0, r1
10003bb2:	1c01      	adds	r1, r0, #0
10003bb4:	43c9      	mvns	r1, r1
10003bb6:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
10003bb8:	220b      	movs	r2, #11
10003bba:	18ba      	adds	r2, r7, r2
10003bbc:	7812      	ldrb	r2, [r2, #0]
10003bbe:	6878      	ldr	r0, [r7, #4]
10003bc0:	4090      	lsls	r0, r2
10003bc2:	1c02      	adds	r2, r0, #0

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
10003bc4:	430a      	orrs	r2, r1
10003bc6:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
10003bc8:	46bd      	mov	sp, r7
10003bca:	b004      	add	sp, #16
10003bcc:	bd80      	pop	{r7, pc}
10003bce:	46c0      	nop			; (mov r8, r8)

10003bd0 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
10003bd0:	b580      	push	{r7, lr}
10003bd2:	b082      	sub	sp, #8
10003bd4:	af00      	add	r7, sp, #0
10003bd6:	6078      	str	r0, [r7, #4]
10003bd8:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
10003bda:	687b      	ldr	r3, [r7, #4]
10003bdc:	681b      	ldr	r3, [r3, #0]
10003bde:	687a      	ldr	r2, [r7, #4]
10003be0:	6812      	ldr	r2, [r2, #0]
10003be2:	6811      	ldr	r1, [r2, #0]
10003be4:	683a      	ldr	r2, [r7, #0]
10003be6:	430a      	orrs	r2, r1
10003be8:	601a      	str	r2, [r3, #0]
}
10003bea:	46bd      	mov	sp, r7
10003bec:	b002      	add	sp, #8
10003bee:	bd80      	pop	{r7, pc}

10003bf0 <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
10003bf0:	b580      	push	{r7, lr}
10003bf2:	b082      	sub	sp, #8
10003bf4:	af00      	add	r7, sp, #0
10003bf6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
10003bf8:	687b      	ldr	r3, [r7, #4]
10003bfa:	681a      	ldr	r2, [r3, #0]
10003bfc:	2380      	movs	r3, #128	; 0x80
10003bfe:	029b      	lsls	r3, r3, #10
10003c00:	1c10      	adds	r0, r2, #0
10003c02:	1c19      	adds	r1, r3, #0
10003c04:	f7ff ffe4 	bl	10003bd0 <XMC_CAN_MO_EnableEvent>
}
10003c08:	46bd      	mov	sp, r7
10003c0a:	b002      	add	sp, #8
10003c0c:	bd80      	pop	{r7, pc}
10003c0e:	46c0      	nop			; (mov r8, r8)

10003c10 <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
10003c10:	b580      	push	{r7, lr}
10003c12:	b082      	sub	sp, #8
10003c14:	af00      	add	r7, sp, #0
10003c16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
10003c18:	687b      	ldr	r3, [r7, #4]
10003c1a:	681a      	ldr	r2, [r3, #0]
10003c1c:	2380      	movs	r3, #128	; 0x80
10003c1e:	025b      	lsls	r3, r3, #9
10003c20:	1c10      	adds	r0, r2, #0
10003c22:	1c19      	adds	r1, r3, #0
10003c24:	f7ff ffd4 	bl	10003bd0 <XMC_CAN_MO_EnableEvent>
}
10003c28:	46bd      	mov	sp, r7
10003c2a:	b002      	add	sp, #8
10003c2c:	bd80      	pop	{r7, pc}
10003c2e:	46c0      	nop			; (mov r8, r8)

10003c30 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
10003c30:	b580      	push	{r7, lr}
10003c32:	b084      	sub	sp, #16
10003c34:	af00      	add	r7, sp, #0
10003c36:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
10003c38:	2300      	movs	r3, #0
10003c3a:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
10003c3c:	687b      	ldr	r3, [r7, #4]
10003c3e:	1c18      	adds	r0, r3, #0
10003c40:	f000 f832 	bl	10003ca8 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
10003c44:	687b      	ldr	r3, [r7, #4]
10003c46:	22a4      	movs	r2, #164	; 0xa4
10003c48:	5c9b      	ldrb	r3, [r3, r2]
10003c4a:	2b00      	cmp	r3, #0
10003c4c:	d003      	beq.n	10003c56 <CAN_NODE_SetNodeEvents+0x26>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
10003c4e:	68fb      	ldr	r3, [r7, #12]
10003c50:	2202      	movs	r2, #2
10003c52:	4313      	orrs	r3, r2
10003c54:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
10003c56:	687b      	ldr	r3, [r7, #4]
10003c58:	22a3      	movs	r2, #163	; 0xa3
10003c5a:	5c9b      	ldrb	r3, [r3, r2]
10003c5c:	2b00      	cmp	r3, #0
10003c5e:	d003      	beq.n	10003c68 <CAN_NODE_SetNodeEvents+0x38>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
10003c60:	68fb      	ldr	r3, [r7, #12]
10003c62:	2204      	movs	r2, #4
10003c64:	4313      	orrs	r3, r2
10003c66:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
10003c68:	687b      	ldr	r3, [r7, #4]
10003c6a:	22a5      	movs	r2, #165	; 0xa5
10003c6c:	5c9b      	ldrb	r3, [r3, r2]
10003c6e:	2b00      	cmp	r3, #0
10003c70:	d003      	beq.n	10003c7a <CAN_NODE_SetNodeEvents+0x4a>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
10003c72:	68fb      	ldr	r3, [r7, #12]
10003c74:	2208      	movs	r2, #8
10003c76:	4313      	orrs	r3, r2
10003c78:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
10003c7a:	687b      	ldr	r3, [r7, #4]
10003c7c:	685a      	ldr	r2, [r3, #4]
10003c7e:	68fb      	ldr	r3, [r7, #12]
10003c80:	1c10      	adds	r0, r2, #0
10003c82:	1c19      	adds	r1, r3, #0
10003c84:	f7fe fa6a 	bl	1000215c <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
10003c88:	687b      	ldr	r3, [r7, #4]
10003c8a:	22a6      	movs	r2, #166	; 0xa6
10003c8c:	5c9b      	ldrb	r3, [r3, r2]
10003c8e:	2b00      	cmp	r3, #0
10003c90:	d007      	beq.n	10003ca2 <CAN_NODE_SetNodeEvents+0x72>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
10003c92:	687b      	ldr	r3, [r7, #4]
10003c94:	685a      	ldr	r2, [r3, #4]
10003c96:	2380      	movs	r3, #128	; 0x80
10003c98:	03db      	lsls	r3, r3, #15
10003c9a:	1c10      	adds	r0, r2, #0
10003c9c:	1c19      	adds	r1, r3, #0
10003c9e:	f7fe fa5d 	bl	1000215c <XMC_CAN_NODE_EnableEvent>
  }

}
10003ca2:	46bd      	mov	sp, r7
10003ca4:	b004      	add	sp, #16
10003ca6:	bd80      	pop	{r7, pc}

10003ca8 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
10003ca8:	b580      	push	{r7, lr}
10003caa:	b082      	sub	sp, #8
10003cac:	af00      	add	r7, sp, #0
10003cae:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
10003cb0:	687b      	ldr	r3, [r7, #4]
10003cb2:	6859      	ldr	r1, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
10003cb4:	687b      	ldr	r3, [r7, #4]
10003cb6:	228c      	movs	r2, #140	; 0x8c
10003cb8:	589b      	ldr	r3, [r3, r2]
10003cba:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
10003cbc:	1c08      	adds	r0, r1, #0
10003cbe:	2100      	movs	r1, #0
10003cc0:	1c1a      	adds	r2, r3, #0
10003cc2:	f7ff fed9 	bl	10003a78 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
10003cc6:	687b      	ldr	r3, [r7, #4]
10003cc8:	6859      	ldr	r1, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
10003cca:	687b      	ldr	r3, [r7, #4]
10003ccc:	228c      	movs	r2, #140	; 0x8c
10003cce:	589b      	ldr	r3, [r3, r2]
10003cd0:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
10003cd2:	1c08      	adds	r0, r1, #0
10003cd4:	2104      	movs	r1, #4
10003cd6:	1c1a      	adds	r2, r3, #0
10003cd8:	f7ff fece 	bl	10003a78 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
10003cdc:	687b      	ldr	r3, [r7, #4]
10003cde:	6859      	ldr	r1, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
10003ce0:	687b      	ldr	r3, [r7, #4]
10003ce2:	228c      	movs	r2, #140	; 0x8c
10003ce4:	589b      	ldr	r3, [r3, r2]
10003ce6:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
10003ce8:	1c08      	adds	r0, r1, #0
10003cea:	2108      	movs	r1, #8
10003cec:	1c1a      	adds	r2, r3, #0
10003cee:	f7ff fec3 	bl	10003a78 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
10003cf2:	687b      	ldr	r3, [r7, #4]
10003cf4:	6859      	ldr	r1, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
10003cf6:	687b      	ldr	r3, [r7, #4]
10003cf8:	228c      	movs	r2, #140	; 0x8c
10003cfa:	589b      	ldr	r3, [r3, r2]
10003cfc:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
10003cfe:	1c08      	adds	r0, r1, #0
10003d00:	210c      	movs	r1, #12
10003d02:	1c1a      	adds	r2, r3, #0
10003d04:	f7ff feb8 	bl	10003a78 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
10003d08:	46bd      	mov	sp, r7
10003d0a:	b002      	add	sp, #8
10003d0c:	bd80      	pop	{r7, pc}
10003d0e:	46c0      	nop			; (mov r8, r8)

10003d10 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
10003d10:	b580      	push	{r7, lr}
10003d12:	b082      	sub	sp, #8
10003d14:	af00      	add	r7, sp, #0
10003d16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
10003d18:	687b      	ldr	r3, [r7, #4]
10003d1a:	681b      	ldr	r3, [r3, #0]
10003d1c:	1c18      	adds	r0, r3, #0
10003d1e:	f7fd ffff 	bl	10001d20 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
10003d22:	687b      	ldr	r3, [r7, #4]
10003d24:	79db      	ldrb	r3, [r3, #7]
10003d26:	2b00      	cmp	r3, #0
10003d28:	d00c      	beq.n	10003d44 <CAN_NODE_MO_Init+0x34>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
10003d2a:	687b      	ldr	r3, [r7, #4]
10003d2c:	681a      	ldr	r2, [r3, #0]
10003d2e:	687b      	ldr	r3, [r7, #4]
10003d30:	795b      	ldrb	r3, [r3, #5]
10003d32:	1c10      	adds	r0, r2, #0
10003d34:	2104      	movs	r1, #4
10003d36:	1c1a      	adds	r2, r3, #0
10003d38:	f7ff ff28 	bl	10003b8c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
10003d3c:	687b      	ldr	r3, [r7, #4]
10003d3e:	1c18      	adds	r0, r3, #0
10003d40:	f7ff ff56 	bl	10003bf0 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
10003d44:	687b      	ldr	r3, [r7, #4]
10003d46:	7a1b      	ldrb	r3, [r3, #8]
10003d48:	2b00      	cmp	r3, #0
10003d4a:	d00c      	beq.n	10003d66 <CAN_NODE_MO_Init+0x56>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
10003d4c:	687b      	ldr	r3, [r7, #4]
10003d4e:	681a      	ldr	r2, [r3, #0]
10003d50:	687b      	ldr	r3, [r7, #4]
10003d52:	799b      	ldrb	r3, [r3, #6]
10003d54:	1c10      	adds	r0, r2, #0
10003d56:	2100      	movs	r1, #0
10003d58:	1c1a      	adds	r2, r3, #0
10003d5a:	f7ff ff17 	bl	10003b8c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
10003d5e:	687b      	ldr	r3, [r7, #4]
10003d60:	1c18      	adds	r0, r3, #0
10003d62:	f7ff ff55 	bl	10003c10 <CAN_NODE_MO_EnableRxEvent>
  }

}
10003d66:	46bd      	mov	sp, r7
10003d68:	b002      	add	sp, #8
10003d6a:	bd80      	pop	{r7, pc}

10003d6c <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
10003d6c:	b590      	push	{r4, r7, lr}
10003d6e:	b085      	sub	sp, #20
10003d70:	af00      	add	r7, sp, #0
10003d72:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10003d74:	230f      	movs	r3, #15
10003d76:	18fb      	adds	r3, r7, r3
10003d78:	2200      	movs	r2, #0
10003d7a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
10003d7c:	687b      	ldr	r3, [r7, #4]
10003d7e:	681b      	ldr	r3, [r3, #0]
10003d80:	220f      	movs	r2, #15
10003d82:	18bc      	adds	r4, r7, r2
10003d84:	1c18      	adds	r0, r3, #0
10003d86:	f7fe f8ad 	bl	10001ee4 <XMC_CAN_MO_Transmit>
10003d8a:	1c03      	adds	r3, r0, #0
10003d8c:	7023      	strb	r3, [r4, #0]
  return (status);
10003d8e:	230f      	movs	r3, #15
10003d90:	18fb      	adds	r3, r7, r3
10003d92:	781b      	ldrb	r3, [r3, #0]
}
10003d94:	1c18      	adds	r0, r3, #0
10003d96:	46bd      	mov	sp, r7
10003d98:	b005      	add	sp, #20
10003d9a:	bd90      	pop	{r4, r7, pc}

10003d9c <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
10003d9c:	b590      	push	{r4, r7, lr}
10003d9e:	b085      	sub	sp, #20
10003da0:	af00      	add	r7, sp, #0
10003da2:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10003da4:	230f      	movs	r3, #15
10003da6:	18fb      	adds	r3, r7, r3
10003da8:	2200      	movs	r2, #0
10003daa:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
10003dac:	687b      	ldr	r3, [r7, #4]
10003dae:	681b      	ldr	r3, [r3, #0]
10003db0:	220f      	movs	r2, #15
10003db2:	18bc      	adds	r4, r7, r2
10003db4:	1c18      	adds	r0, r3, #0
10003db6:	f7fe f8cd 	bl	10001f54 <XMC_CAN_MO_Receive>
10003dba:	1c03      	adds	r3, r0, #0
10003dbc:	7023      	strb	r3, [r4, #0]
  return (status);
10003dbe:	230f      	movs	r3, #15
10003dc0:	18fb      	adds	r3, r7, r3
10003dc2:	781b      	ldrb	r3, [r3, #0]
}
10003dc4:	1c18      	adds	r0, r3, #0
10003dc6:	46bd      	mov	sp, r7
10003dc8:	b005      	add	sp, #20
10003dca:	bd90      	pop	{r4, r7, pc}

10003dcc <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
10003dcc:	b590      	push	{r4, r7, lr}
10003dce:	b085      	sub	sp, #20
10003dd0:	af00      	add	r7, sp, #0
10003dd2:	6078      	str	r0, [r7, #4]
10003dd4:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10003dd6:	230f      	movs	r3, #15
10003dd8:	18fb      	adds	r3, r7, r3
10003dda:	2200      	movs	r2, #0
10003ddc:	701a      	strb	r2, [r3, #0]
  uint32_t *data_pointer = (uint32_t*) array_data;
10003dde:	683b      	ldr	r3, [r7, #0]
10003de0:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
10003de2:	687b      	ldr	r3, [r7, #4]
10003de4:	681b      	ldr	r3, [r3, #0]
10003de6:	68ba      	ldr	r2, [r7, #8]
10003de8:	6812      	ldr	r2, [r2, #0]
10003dea:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
10003dec:	687b      	ldr	r3, [r7, #4]
10003dee:	681b      	ldr	r3, [r3, #0]
10003df0:	68ba      	ldr	r2, [r7, #8]
10003df2:	6852      	ldr	r2, [r2, #4]
10003df4:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
10003df6:	687b      	ldr	r3, [r7, #4]
10003df8:	681b      	ldr	r3, [r3, #0]
10003dfa:	220f      	movs	r2, #15
10003dfc:	18bc      	adds	r4, r7, r2
10003dfe:	1c18      	adds	r0, r3, #0
10003e00:	f7fe f82e 	bl	10001e60 <XMC_CAN_MO_UpdateData>
10003e04:	1c03      	adds	r3, r0, #0
10003e06:	7023      	strb	r3, [r4, #0]
  return (status);
10003e08:	230f      	movs	r3, #15
10003e0a:	18fb      	adds	r3, r7, r3
10003e0c:	781b      	ldrb	r3, [r3, #0]
}
10003e0e:	1c18      	adds	r0, r3, #0
10003e10:	46bd      	mov	sp, r7
10003e12:	b005      	add	sp, #20
10003e14:	bd90      	pop	{r4, r7, pc}
10003e16:	46c0      	nop			; (mov r8, r8)

10003e18 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
10003e18:	b590      	push	{r4, r7, lr}
10003e1a:	b087      	sub	sp, #28
10003e1c:	af00      	add	r7, sp, #0
10003e1e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10003e20:	2317      	movs	r3, #23
10003e22:	18fb      	adds	r3, r7, r3
10003e24:	2200      	movs	r2, #0
10003e26:	701a      	strb	r2, [r3, #0]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
10003e28:	687b      	ldr	r3, [r7, #4]
10003e2a:	2290      	movs	r2, #144	; 0x90
10003e2c:	589b      	ldr	r3, [r3, r2]
10003e2e:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
10003e30:	687b      	ldr	r3, [r7, #4]
10003e32:	681b      	ldr	r3, [r3, #0]
10003e34:	2217      	movs	r2, #23
10003e36:	18bc      	adds	r4, r7, r2
10003e38:	1c18      	adds	r0, r3, #0
10003e3a:	f7ff fa7f 	bl	1000333c <GLOBAL_CAN_Init>
10003e3e:	1c03      	adds	r3, r0, #0
10003e40:	7023      	strb	r3, [r4, #0]

  if (status == CAN_NODE_STATUS_SUCCESS)
10003e42:	2317      	movs	r3, #23
10003e44:	18fb      	adds	r3, r7, r3
10003e46:	781b      	ldrb	r3, [r3, #0]
10003e48:	2b00      	cmp	r3, #0
10003e4a:	d000      	beq.n	10003e4e <CAN_NODE_Init+0x36>
10003e4c:	e085      	b.n	10003f5a <CAN_NODE_Init+0x142>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
10003e4e:	687b      	ldr	r3, [r7, #4]
10003e50:	685a      	ldr	r2, [r3, #4]
10003e52:	687b      	ldr	r3, [r7, #4]
10003e54:	689b      	ldr	r3, [r3, #8]
10003e56:	1c10      	adds	r0, r2, #0
10003e58:	1c19      	adds	r1, r3, #0
10003e5a:	f7fd fdd5 	bl	10001a08 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
10003e5e:	1e03      	subs	r3, r0, #0
10003e60:	d176      	bne.n	10003f50 <CAN_NODE_Init+0x138>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
10003e62:	687b      	ldr	r3, [r7, #4]
10003e64:	685b      	ldr	r3, [r3, #4]
10003e66:	1c18      	adds	r0, r3, #0
10003e68:	f7ff fe4a 	bl	10003b00 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
10003e6c:	687b      	ldr	r3, [r7, #4]
10003e6e:	685b      	ldr	r3, [r3, #4]
10003e70:	1c18      	adds	r0, r3, #0
10003e72:	f7ff fe61 	bl	10003b38 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
10003e76:	687b      	ldr	r3, [r7, #4]
10003e78:	685b      	ldr	r3, [r3, #4]
10003e7a:	1c18      	adds	r0, r3, #0
10003e7c:	f7ff fe78 	bl	10003b70 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
10003e80:	687b      	ldr	r3, [r7, #4]
10003e82:	22a7      	movs	r2, #167	; 0xa7
10003e84:	5c9b      	ldrb	r3, [r3, r2]
10003e86:	2b00      	cmp	r3, #0
10003e88:	d005      	beq.n	10003e96 <CAN_NODE_Init+0x7e>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
10003e8a:	687b      	ldr	r3, [r7, #4]
10003e8c:	685b      	ldr	r3, [r3, #4]
10003e8e:	1c18      	adds	r0, r3, #0
10003e90:	f7ff fe28 	bl	10003ae4 <XMC_CAN_NODE_EnableLoopBack>
10003e94:	e016      	b.n	10003ec4 <CAN_NODE_Init+0xac>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
10003e96:	687b      	ldr	r3, [r7, #4]
10003e98:	2298      	movs	r2, #152	; 0x98
10003e9a:	589b      	ldr	r3, [r3, r2]
10003e9c:	6818      	ldr	r0, [r3, #0]
10003e9e:	687b      	ldr	r3, [r7, #4]
10003ea0:	2298      	movs	r2, #152	; 0x98
10003ea2:	589b      	ldr	r3, [r3, r2]
10003ea4:	7919      	ldrb	r1, [r3, #4]
10003ea6:	687b      	ldr	r3, [r7, #4]
10003ea8:	229c      	movs	r2, #156	; 0x9c
10003eaa:	589b      	ldr	r3, [r3, r2]
10003eac:	1c1a      	adds	r2, r3, #0
10003eae:	f7fd f973 	bl	10001198 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
10003eb2:	687b      	ldr	r3, [r7, #4]
10003eb4:	6859      	ldr	r1, [r3, #4]
10003eb6:	687b      	ldr	r3, [r7, #4]
10003eb8:	22a0      	movs	r2, #160	; 0xa0
10003eba:	5c9b      	ldrb	r3, [r3, r2]
10003ebc:	1c08      	adds	r0, r1, #0
10003ebe:	1c19      	adds	r1, r3, #0
10003ec0:	f7ff fdfa 	bl	10003ab8 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
10003ec4:	687b      	ldr	r3, [r7, #4]
10003ec6:	1c18      	adds	r0, r3, #0
10003ec8:	f7ff feb2 	bl	10003c30 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
10003ecc:	2300      	movs	r3, #0
10003ece:	613b      	str	r3, [r7, #16]
10003ed0:	e01a      	b.n	10003f08 <CAN_NODE_Init+0xf0>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
10003ed2:	687a      	ldr	r2, [r7, #4]
10003ed4:	693b      	ldr	r3, [r7, #16]
10003ed6:	3302      	adds	r3, #2
10003ed8:	009b      	lsls	r3, r3, #2
10003eda:	18d3      	adds	r3, r2, r3
10003edc:	685b      	ldr	r3, [r3, #4]
10003ede:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
10003ee0:	687b      	ldr	r3, [r7, #4]
10003ee2:	681b      	ldr	r3, [r3, #0]
10003ee4:	6859      	ldr	r1, [r3, #4]
10003ee6:	687b      	ldr	r3, [r7, #4]
10003ee8:	22a1      	movs	r2, #161	; 0xa1
10003eea:	5c9a      	ldrb	r2, [r3, r2]
10003eec:	68bb      	ldr	r3, [r7, #8]
10003eee:	791b      	ldrb	r3, [r3, #4]
10003ef0:	1c08      	adds	r0, r1, #0
10003ef2:	1c11      	adds	r1, r2, #0
10003ef4:	1c1a      	adds	r2, r3, #0
10003ef6:	f7fd fe35 	bl	10001b64 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
10003efa:	68bb      	ldr	r3, [r7, #8]
10003efc:	1c18      	adds	r0, r3, #0
10003efe:	f7ff ff07 	bl	10003d10 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
10003f02:	693b      	ldr	r3, [r7, #16]
10003f04:	3301      	adds	r3, #1
10003f06:	613b      	str	r3, [r7, #16]
10003f08:	687b      	ldr	r3, [r7, #4]
10003f0a:	22a2      	movs	r2, #162	; 0xa2
10003f0c:	5c9b      	ldrb	r3, [r3, r2]
10003f0e:	1e1a      	subs	r2, r3, #0
10003f10:	693b      	ldr	r3, [r7, #16]
10003f12:	429a      	cmp	r2, r3
10003f14:	d8dd      	bhi.n	10003ed2 <CAN_NODE_Init+0xba>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
10003f16:	687b      	ldr	r3, [r7, #4]
10003f18:	685b      	ldr	r3, [r3, #4]
10003f1a:	1c18      	adds	r0, r3, #0
10003f1c:	f7ff fdfe 	bl	10003b1c <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
10003f20:	687b      	ldr	r3, [r7, #4]
10003f22:	685b      	ldr	r3, [r3, #4]
10003f24:	1c18      	adds	r0, r3, #0
10003f26:	f7ff fe15 	bl	10003b54 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
10003f2a:	687b      	ldr	r3, [r7, #4]
10003f2c:	22a7      	movs	r2, #167	; 0xa7
10003f2e:	5c9b      	ldrb	r3, [r3, r2]
10003f30:	2201      	movs	r2, #1
10003f32:	4053      	eors	r3, r2
10003f34:	b2db      	uxtb	r3, r3
10003f36:	2b00      	cmp	r3, #0
10003f38:	d013      	beq.n	10003f62 <CAN_NODE_Init+0x14a>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
10003f3a:	68fb      	ldr	r3, [r7, #12]
10003f3c:	6818      	ldr	r0, [r3, #0]
10003f3e:	68fb      	ldr	r3, [r7, #12]
10003f40:	7919      	ldrb	r1, [r3, #4]
10003f42:	687b      	ldr	r3, [r7, #4]
10003f44:	2294      	movs	r2, #148	; 0x94
10003f46:	589b      	ldr	r3, [r3, r2]
10003f48:	1c1a      	adds	r2, r3, #0
10003f4a:	f7fd f925 	bl	10001198 <XMC_GPIO_Init>
10003f4e:	e008      	b.n	10003f62 <CAN_NODE_Init+0x14a>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
10003f50:	2317      	movs	r3, #23
10003f52:	18fb      	adds	r3, r7, r3
10003f54:	2201      	movs	r2, #1
10003f56:	701a      	strb	r2, [r3, #0]
10003f58:	e003      	b.n	10003f62 <CAN_NODE_Init+0x14a>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
10003f5a:	2317      	movs	r3, #23
10003f5c:	18fb      	adds	r3, r7, r3
10003f5e:	2201      	movs	r2, #1
10003f60:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10003f62:	2317      	movs	r3, #23
10003f64:	18fb      	adds	r3, r7, r3
10003f66:	781b      	ldrb	r3, [r3, #0]
}
10003f68:	1c18      	adds	r0, r3, #0
10003f6a:	46bd      	mov	sp, r7
10003f6c:	b007      	add	sp, #28
10003f6e:	bd90      	pop	{r4, r7, pc}

10003f70 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
10003f70:	b590      	push	{r4, r7, lr}
10003f72:	b083      	sub	sp, #12
10003f74:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10003f76:	1dfb      	adds	r3, r7, #7
10003f78:	2200      	movs	r2, #0
10003f7a:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10003f7c:	1dfc      	adds	r4, r7, #7
10003f7e:	4b95      	ldr	r3, [pc, #596]	; (100041d4 <DAVE_Init+0x264>)
10003f80:	1c18      	adds	r0, r3, #0
10003f82:	f7ff fa2f 	bl	100033e4 <CLOCK_XMC1_Init>
10003f86:	1c03      	adds	r3, r0, #0
10003f88:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10003f8a:	1dfb      	adds	r3, r7, #7
10003f8c:	781b      	ldrb	r3, [r3, #0]
10003f8e:	2b00      	cmp	r3, #0
10003f90:	d106      	bne.n	10003fa0 <DAVE_Init+0x30>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
10003f92:	1dfc      	adds	r4, r7, #7
10003f94:	4b90      	ldr	r3, [pc, #576]	; (100041d8 <DAVE_Init+0x268>)
10003f96:	1c18      	adds	r0, r3, #0
10003f98:	f7ff ff3e 	bl	10003e18 <CAN_NODE_Init>
10003f9c:	1c03      	adds	r3, r0, #0
10003f9e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10003fa0:	1dfb      	adds	r3, r7, #7
10003fa2:	781b      	ldrb	r3, [r3, #0]
10003fa4:	2b00      	cmp	r3, #0
10003fa6:	d106      	bne.n	10003fb6 <DAVE_Init+0x46>
  {
	 /**  Initialization of INTERRUPT APP instance CAN_RX_ULTRASONIC */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CAN_RX_ULTRASONIC); 
10003fa8:	1dfc      	adds	r4, r7, #7
10003faa:	4b8c      	ldr	r3, [pc, #560]	; (100041dc <DAVE_Init+0x26c>)
10003fac:	1c18      	adds	r0, r3, #0
10003fae:	f7ff f85d 	bl	1000306c <INTERRUPT_Init>
10003fb2:	1c03      	adds	r3, r0, #0
10003fb4:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10003fb6:	1dfb      	adds	r3, r7, #7
10003fb8:	781b      	ldrb	r3, [r3, #0]
10003fba:	2b00      	cmp	r3, #0
10003fbc:	d106      	bne.n	10003fcc <DAVE_Init+0x5c>
  {
	 /**  Initialization of PWM APP instance PWM_servo_fl */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_servo_fl); 
10003fbe:	1dfc      	adds	r4, r7, #7
10003fc0:	4b87      	ldr	r3, [pc, #540]	; (100041e0 <DAVE_Init+0x270>)
10003fc2:	1c18      	adds	r0, r3, #0
10003fc4:	f7fe fe8c 	bl	10002ce0 <PWM_Init>
10003fc8:	1c03      	adds	r3, r0, #0
10003fca:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10003fcc:	1dfb      	adds	r3, r7, #7
10003fce:	781b      	ldrb	r3, [r3, #0]
10003fd0:	2b00      	cmp	r3, #0
10003fd2:	d106      	bne.n	10003fe2 <DAVE_Init+0x72>
  {
	 /**  Initialization of PWM APP instance PWM_servo_fr */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_servo_fr); 
10003fd4:	1dfc      	adds	r4, r7, #7
10003fd6:	4b83      	ldr	r3, [pc, #524]	; (100041e4 <DAVE_Init+0x274>)
10003fd8:	1c18      	adds	r0, r3, #0
10003fda:	f7fe fe81 	bl	10002ce0 <PWM_Init>
10003fde:	1c03      	adds	r3, r0, #0
10003fe0:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10003fe2:	1dfb      	adds	r3, r7, #7
10003fe4:	781b      	ldrb	r3, [r3, #0]
10003fe6:	2b00      	cmp	r3, #0
10003fe8:	d106      	bne.n	10003ff8 <DAVE_Init+0x88>
  {
	 /**  Initialization of PWM APP instance PWM_servo_rl */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_servo_rl); 
10003fea:	1dfc      	adds	r4, r7, #7
10003fec:	4b7e      	ldr	r3, [pc, #504]	; (100041e8 <DAVE_Init+0x278>)
10003fee:	1c18      	adds	r0, r3, #0
10003ff0:	f7fe fe76 	bl	10002ce0 <PWM_Init>
10003ff4:	1c03      	adds	r3, r0, #0
10003ff6:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10003ff8:	1dfb      	adds	r3, r7, #7
10003ffa:	781b      	ldrb	r3, [r3, #0]
10003ffc:	2b00      	cmp	r3, #0
10003ffe:	d106      	bne.n	1000400e <DAVE_Init+0x9e>
  {
	 /**  Initialization of PWM APP instance PWM_servo_rr */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_servo_rr); 
10004000:	1dfc      	adds	r4, r7, #7
10004002:	4b7a      	ldr	r3, [pc, #488]	; (100041ec <DAVE_Init+0x27c>)
10004004:	1c18      	adds	r0, r3, #0
10004006:	f7fe fe6b 	bl	10002ce0 <PWM_Init>
1000400a:	1c03      	adds	r3, r0, #0
1000400c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000400e:	1dfb      	adds	r3, r7, #7
10004010:	781b      	ldrb	r3, [r3, #0]
10004012:	2b00      	cmp	r3, #0
10004014:	d106      	bne.n	10004024 <DAVE_Init+0xb4>
  {
	 /**  Initialization of TIMER APP instance TIMER_10us */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_10us); 
10004016:	1dfc      	adds	r4, r7, #7
10004018:	4b75      	ldr	r3, [pc, #468]	; (100041f0 <DAVE_Init+0x280>)
1000401a:	1c18      	adds	r0, r3, #0
1000401c:	f7fe fc70 	bl	10002900 <TIMER_Init>
10004020:	1c03      	adds	r3, r0, #0
10004022:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004024:	1dfb      	adds	r3, r7, #7
10004026:	781b      	ldrb	r3, [r3, #0]
10004028:	2b00      	cmp	r3, #0
1000402a:	d106      	bne.n	1000403a <DAVE_Init+0xca>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TIMER_10us */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TIMER_10us); 
1000402c:	1dfc      	adds	r4, r7, #7
1000402e:	4b71      	ldr	r3, [pc, #452]	; (100041f4 <DAVE_Init+0x284>)
10004030:	1c18      	adds	r0, r3, #0
10004032:	f7ff f81b 	bl	1000306c <INTERRUPT_Init>
10004036:	1c03      	adds	r3, r0, #0
10004038:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000403a:	1dfb      	adds	r3, r7, #7
1000403c:	781b      	ldrb	r3, [r3, #0]
1000403e:	2b00      	cmp	r3, #0
10004040:	d106      	bne.n	10004050 <DAVE_Init+0xe0>
  {
	 /**  Initialization of CAPTURE APP instance CAPTURE_RC_Steering */
	 init_status = (DAVE_STATUS_t)CAPTURE_Init(&CAPTURE_RC_Steering); 
10004042:	1dfc      	adds	r4, r7, #7
10004044:	4b6c      	ldr	r3, [pc, #432]	; (100041f8 <DAVE_Init+0x288>)
10004046:	1c18      	adds	r0, r3, #0
10004048:	f7ff fa6c 	bl	10003524 <CAPTURE_Init>
1000404c:	1c03      	adds	r3, r0, #0
1000404e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004050:	1dfb      	adds	r3, r7, #7
10004052:	781b      	ldrb	r3, [r3, #0]
10004054:	2b00      	cmp	r3, #0
10004056:	d106      	bne.n	10004066 <DAVE_Init+0xf6>
  {
	 /**  Initialization of CAPTURE APP instance CAPTURE_RC_Speed */
	 init_status = (DAVE_STATUS_t)CAPTURE_Init(&CAPTURE_RC_Speed); 
10004058:	1dfc      	adds	r4, r7, #7
1000405a:	4b68      	ldr	r3, [pc, #416]	; (100041fc <DAVE_Init+0x28c>)
1000405c:	1c18      	adds	r0, r3, #0
1000405e:	f7ff fa61 	bl	10003524 <CAPTURE_Init>
10004062:	1c03      	adds	r3, r0, #0
10004064:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004066:	1dfb      	adds	r3, r7, #7
10004068:	781b      	ldrb	r3, [r3, #0]
1000406a:	2b00      	cmp	r3, #0
1000406c:	d106      	bne.n	1000407c <DAVE_Init+0x10c>
  {
	 /**  Initialization of DIGITAL_IO APP instance RC_no_data_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RC_no_data_LED); 
1000406e:	1dfc      	adds	r4, r7, #7
10004070:	4b63      	ldr	r3, [pc, #396]	; (10004200 <DAVE_Init+0x290>)
10004072:	1c18      	adds	r0, r3, #0
10004074:	f7ff f98a 	bl	1000338c <DIGITAL_IO_Init>
10004078:	1c03      	adds	r3, r0, #0
1000407a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000407c:	1dfb      	adds	r3, r7, #7
1000407e:	781b      	ldrb	r3, [r3, #0]
10004080:	2b00      	cmp	r3, #0
10004082:	d106      	bne.n	10004092 <DAVE_Init+0x122>
  {
	 /**  Initialization of TIMER APP instance TIMER_CONTROL */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_CONTROL); 
10004084:	1dfc      	adds	r4, r7, #7
10004086:	4b5f      	ldr	r3, [pc, #380]	; (10004204 <DAVE_Init+0x294>)
10004088:	1c18      	adds	r0, r3, #0
1000408a:	f7fe fc39 	bl	10002900 <TIMER_Init>
1000408e:	1c03      	adds	r3, r0, #0
10004090:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004092:	1dfb      	adds	r3, r7, #7
10004094:	781b      	ldrb	r3, [r3, #0]
10004096:	2b00      	cmp	r3, #0
10004098:	d106      	bne.n	100040a8 <DAVE_Init+0x138>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TIMER_CONTROL */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TIMER_CONTROL); 
1000409a:	1dfc      	adds	r4, r7, #7
1000409c:	4b5a      	ldr	r3, [pc, #360]	; (10004208 <DAVE_Init+0x298>)
1000409e:	1c18      	adds	r0, r3, #0
100040a0:	f7fe ffe4 	bl	1000306c <INTERRUPT_Init>
100040a4:	1c03      	adds	r3, r0, #0
100040a6:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100040a8:	1dfb      	adds	r3, r7, #7
100040aa:	781b      	ldrb	r3, [r3, #0]
100040ac:	2b00      	cmp	r3, #0
100040ae:	d106      	bne.n	100040be <DAVE_Init+0x14e>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance RC_Connected */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&RC_Connected); 
100040b0:	1dfc      	adds	r4, r7, #7
100040b2:	4b56      	ldr	r3, [pc, #344]	; (1000420c <DAVE_Init+0x29c>)
100040b4:	1c18      	adds	r0, r3, #0
100040b6:	f7fe fefd 	bl	10002eb4 <PIN_INTERRUPT_Init>
100040ba:	1c03      	adds	r3, r0, #0
100040bc:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100040be:	1dfb      	adds	r3, r7, #7
100040c0:	781b      	ldrb	r3, [r3, #0]
100040c2:	2b00      	cmp	r3, #0
100040c4:	d106      	bne.n	100040d4 <DAVE_Init+0x164>
  {
	 /**  Initialization of DIGITAL_IO APP instance CALC_TIME_INDICATOR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CALC_TIME_INDICATOR); 
100040c6:	1dfc      	adds	r4, r7, #7
100040c8:	4b51      	ldr	r3, [pc, #324]	; (10004210 <DAVE_Init+0x2a0>)
100040ca:	1c18      	adds	r0, r3, #0
100040cc:	f7ff f95e 	bl	1000338c <DIGITAL_IO_Init>
100040d0:	1c03      	adds	r3, r0, #0
100040d2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100040d4:	1dfb      	adds	r3, r7, #7
100040d6:	781b      	ldrb	r3, [r3, #0]
100040d8:	2b00      	cmp	r3, #0
100040da:	d106      	bne.n	100040ea <DAVE_Init+0x17a>
  {
	 /**  Initialization of DIGITAL_IO APP instance MODE_001 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MODE_001); 
100040dc:	1dfc      	adds	r4, r7, #7
100040de:	4b4d      	ldr	r3, [pc, #308]	; (10004214 <DAVE_Init+0x2a4>)
100040e0:	1c18      	adds	r0, r3, #0
100040e2:	f7ff f953 	bl	1000338c <DIGITAL_IO_Init>
100040e6:	1c03      	adds	r3, r0, #0
100040e8:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100040ea:	1dfb      	adds	r3, r7, #7
100040ec:	781b      	ldrb	r3, [r3, #0]
100040ee:	2b00      	cmp	r3, #0
100040f0:	d106      	bne.n	10004100 <DAVE_Init+0x190>
  {
	 /**  Initialization of DIGITAL_IO APP instance MODE_010 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MODE_010); 
100040f2:	1dfc      	adds	r4, r7, #7
100040f4:	4b48      	ldr	r3, [pc, #288]	; (10004218 <DAVE_Init+0x2a8>)
100040f6:	1c18      	adds	r0, r3, #0
100040f8:	f7ff f948 	bl	1000338c <DIGITAL_IO_Init>
100040fc:	1c03      	adds	r3, r0, #0
100040fe:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004100:	1dfb      	adds	r3, r7, #7
10004102:	781b      	ldrb	r3, [r3, #0]
10004104:	2b00      	cmp	r3, #0
10004106:	d106      	bne.n	10004116 <DAVE_Init+0x1a6>
  {
	 /**  Initialization of DIGITAL_IO APP instance MODE_100 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MODE_100); 
10004108:	1dfc      	adds	r4, r7, #7
1000410a:	4b44      	ldr	r3, [pc, #272]	; (1000421c <DAVE_Init+0x2ac>)
1000410c:	1c18      	adds	r0, r3, #0
1000410e:	f7ff f93d 	bl	1000338c <DIGITAL_IO_Init>
10004112:	1c03      	adds	r3, r0, #0
10004114:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004116:	1dfb      	adds	r3, r7, #7
10004118:	781b      	ldrb	r3, [r3, #0]
1000411a:	2b00      	cmp	r3, #0
1000411c:	d106      	bne.n	1000412c <DAVE_Init+0x1bc>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG_0 */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG_0); 
1000411e:	1dfc      	adds	r4, r7, #7
10004120:	4b3f      	ldr	r3, [pc, #252]	; (10004220 <DAVE_Init+0x2b0>)
10004122:	1c18      	adds	r0, r3, #0
10004124:	f7fe fb28 	bl	10002778 <WATCHDOG_Init>
10004128:	1c03      	adds	r3, r0, #0
1000412a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000412c:	1dfb      	adds	r3, r7, #7
1000412e:	781b      	ldrb	r3, [r3, #0]
10004130:	2b00      	cmp	r3, #0
10004132:	d106      	bne.n	10004142 <DAVE_Init+0x1d2>
  {
	 /**  Initialization of DIGITAL_IO APP instance WATCHDOG_LED_BLUE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&WATCHDOG_LED_BLUE); 
10004134:	1dfc      	adds	r4, r7, #7
10004136:	4b3b      	ldr	r3, [pc, #236]	; (10004224 <DAVE_Init+0x2b4>)
10004138:	1c18      	adds	r0, r3, #0
1000413a:	f7ff f927 	bl	1000338c <DIGITAL_IO_Init>
1000413e:	1c03      	adds	r3, r0, #0
10004140:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004142:	1dfb      	adds	r3, r7, #7
10004144:	781b      	ldrb	r3, [r3, #0]
10004146:	2b00      	cmp	r3, #0
10004148:	d106      	bne.n	10004158 <DAVE_Init+0x1e8>
  {
	 /**  Initialization of INTERRUPT APP instance CAN_RX_INVERTER */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CAN_RX_INVERTER); 
1000414a:	1dfc      	adds	r4, r7, #7
1000414c:	4b36      	ldr	r3, [pc, #216]	; (10004228 <DAVE_Init+0x2b8>)
1000414e:	1c18      	adds	r0, r3, #0
10004150:	f7fe ff8c 	bl	1000306c <INTERRUPT_Init>
10004154:	1c03      	adds	r3, r0, #0
10004156:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004158:	1dfb      	adds	r3, r7, #7
1000415a:	781b      	ldrb	r3, [r3, #0]
1000415c:	2b00      	cmp	r3, #0
1000415e:	d106      	bne.n	1000416e <DAVE_Init+0x1fe>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance RC_AUX1 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&RC_AUX1); 
10004160:	1dfc      	adds	r4, r7, #7
10004162:	4b32      	ldr	r3, [pc, #200]	; (1000422c <DAVE_Init+0x2bc>)
10004164:	1c18      	adds	r0, r3, #0
10004166:	f7fe fea5 	bl	10002eb4 <PIN_INTERRUPT_Init>
1000416a:	1c03      	adds	r3, r0, #0
1000416c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000416e:	1dfb      	adds	r3, r7, #7
10004170:	781b      	ldrb	r3, [r3, #0]
10004172:	2b00      	cmp	r3, #0
10004174:	d106      	bne.n	10004184 <DAVE_Init+0x214>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_CAN_ERROR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_CAN_ERROR); 
10004176:	1dfc      	adds	r4, r7, #7
10004178:	4b2d      	ldr	r3, [pc, #180]	; (10004230 <DAVE_Init+0x2c0>)
1000417a:	1c18      	adds	r0, r3, #0
1000417c:	f7ff f906 	bl	1000338c <DIGITAL_IO_Init>
10004180:	1c03      	adds	r3, r0, #0
10004182:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004184:	1dfb      	adds	r3, r7, #7
10004186:	781b      	ldrb	r3, [r3, #0]
10004188:	2b00      	cmp	r3, #0
1000418a:	d106      	bne.n	1000419a <DAVE_Init+0x22a>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_CA_FRONT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_CA_FRONT); 
1000418c:	1dfc      	adds	r4, r7, #7
1000418e:	4b29      	ldr	r3, [pc, #164]	; (10004234 <DAVE_Init+0x2c4>)
10004190:	1c18      	adds	r0, r3, #0
10004192:	f7ff f8fb 	bl	1000338c <DIGITAL_IO_Init>
10004196:	1c03      	adds	r3, r0, #0
10004198:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000419a:	1dfb      	adds	r3, r7, #7
1000419c:	781b      	ldrb	r3, [r3, #0]
1000419e:	2b00      	cmp	r3, #0
100041a0:	d106      	bne.n	100041b0 <DAVE_Init+0x240>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_CA_LEFT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_CA_LEFT); 
100041a2:	1dfc      	adds	r4, r7, #7
100041a4:	4b24      	ldr	r3, [pc, #144]	; (10004238 <DAVE_Init+0x2c8>)
100041a6:	1c18      	adds	r0, r3, #0
100041a8:	f7ff f8f0 	bl	1000338c <DIGITAL_IO_Init>
100041ac:	1c03      	adds	r3, r0, #0
100041ae:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100041b0:	1dfb      	adds	r3, r7, #7
100041b2:	781b      	ldrb	r3, [r3, #0]
100041b4:	2b00      	cmp	r3, #0
100041b6:	d106      	bne.n	100041c6 <DAVE_Init+0x256>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_CA_RIGHT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_CA_RIGHT); 
100041b8:	1dfc      	adds	r4, r7, #7
100041ba:	4b20      	ldr	r3, [pc, #128]	; (1000423c <DAVE_Init+0x2cc>)
100041bc:	1c18      	adds	r0, r3, #0
100041be:	f7ff f8e5 	bl	1000338c <DIGITAL_IO_Init>
100041c2:	1c03      	adds	r3, r0, #0
100041c4:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
100041c6:	1dfb      	adds	r3, r7, #7
100041c8:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
100041ca:	1c18      	adds	r0, r3, #0
100041cc:	46bd      	mov	sp, r7
100041ce:	b003      	add	sp, #12
100041d0:	bd90      	pop	{r4, r7, pc}
100041d2:	46c0      	nop			; (mov r8, r8)
100041d4:	200009dc 	.word	0x200009dc
100041d8:	1000d040 	.word	0x1000d040
100041dc:	1000cea4 	.word	0x1000cea4
100041e0:	200005dc 	.word	0x200005dc
100041e4:	20000610 	.word	0x20000610
100041e8:	20000644 	.word	0x20000644
100041ec:	20000678 	.word	0x20000678
100041f0:	20000584 	.word	0x20000584
100041f4:	1000ceac 	.word	0x1000ceac
100041f8:	200006e0 	.word	0x200006e0
100041fc:	20000714 	.word	0x20000714
10004200:	1000cecc 	.word	0x1000cecc
10004204:	200005b4 	.word	0x200005b4
10004208:	1000ceb4 	.word	0x1000ceb4
1000420c:	1000ce64 	.word	0x1000ce64
10004210:	1000cedc 	.word	0x1000cedc
10004214:	1000ceec 	.word	0x1000ceec
10004218:	1000cefc 	.word	0x1000cefc
1000421c:	1000cf0c 	.word	0x1000cf0c
10004220:	20000574 	.word	0x20000574
10004224:	1000cf1c 	.word	0x1000cf1c
10004228:	1000cebc 	.word	0x1000cebc
1000422c:	1000ce84 	.word	0x1000ce84
10004230:	1000cf2c 	.word	0x1000cf2c
10004234:	1000cf3c 	.word	0x1000cf3c
10004238:	1000cf4c 	.word	0x1000cf4c
1000423c:	1000cf5c 	.word	0x1000cf5c

10004240 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10004240:	b580      	push	{r7, lr}
10004242:	b082      	sub	sp, #8
10004244:	af00      	add	r7, sp, #0
10004246:	6078      	str	r0, [r7, #4]
10004248:	1c0a      	adds	r2, r1, #0
1000424a:	1cfb      	adds	r3, r7, #3
1000424c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
1000424e:	1cfb      	adds	r3, r7, #3
10004250:	781b      	ldrb	r3, [r3, #0]
10004252:	2201      	movs	r2, #1
10004254:	409a      	lsls	r2, r3
10004256:	687b      	ldr	r3, [r7, #4]
10004258:	605a      	str	r2, [r3, #4]
}
1000425a:	46bd      	mov	sp, r7
1000425c:	b002      	add	sp, #8
1000425e:	bd80      	pop	{r7, pc}

10004260 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10004260:	b580      	push	{r7, lr}
10004262:	b082      	sub	sp, #8
10004264:	af00      	add	r7, sp, #0
10004266:	6078      	str	r0, [r7, #4]
10004268:	1c0a      	adds	r2, r1, #0
1000426a:	1cfb      	adds	r3, r7, #3
1000426c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
1000426e:	1cfb      	adds	r3, r7, #3
10004270:	781b      	ldrb	r3, [r3, #0]
10004272:	2280      	movs	r2, #128	; 0x80
10004274:	0252      	lsls	r2, r2, #9
10004276:	409a      	lsls	r2, r3
10004278:	687b      	ldr	r3, [r7, #4]
1000427a:	605a      	str	r2, [r3, #4]
}
1000427c:	46bd      	mov	sp, r7
1000427e:	b002      	add	sp, #8
10004280:	bd80      	pop	{r7, pc}
10004282:	46c0      	nop			; (mov r8, r8)

10004284 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10004284:	b580      	push	{r7, lr}
10004286:	b082      	sub	sp, #8
10004288:	af00      	add	r7, sp, #0
1000428a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
1000428c:	687b      	ldr	r3, [r7, #4]
1000428e:	681a      	ldr	r2, [r3, #0]
10004290:	687b      	ldr	r3, [r7, #4]
10004292:	7b1b      	ldrb	r3, [r3, #12]
10004294:	1c10      	adds	r0, r2, #0
10004296:	1c19      	adds	r1, r3, #0
10004298:	f7ff ffd2 	bl	10004240 <XMC_GPIO_SetOutputHigh>
}
1000429c:	46bd      	mov	sp, r7
1000429e:	b002      	add	sp, #8
100042a0:	bd80      	pop	{r7, pc}
100042a2:	46c0      	nop			; (mov r8, r8)

100042a4 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
100042a4:	b580      	push	{r7, lr}
100042a6:	b082      	sub	sp, #8
100042a8:	af00      	add	r7, sp, #0
100042aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
100042ac:	687b      	ldr	r3, [r7, #4]
100042ae:	681a      	ldr	r2, [r3, #0]
100042b0:	687b      	ldr	r3, [r7, #4]
100042b2:	7b1b      	ldrb	r3, [r3, #12]
100042b4:	1c10      	adds	r0, r2, #0
100042b6:	1c19      	adds	r1, r3, #0
100042b8:	f7ff ffd2 	bl	10004260 <XMC_GPIO_SetOutputLow>
}
100042bc:	46bd      	mov	sp, r7
100042be:	b002      	add	sp, #8
100042c0:	bd80      	pop	{r7, pc}
100042c2:	46c0      	nop			; (mov r8, r8)

100042c4 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
100042c4:	b580      	push	{r7, lr}
100042c6:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
100042c8:	4b02      	ldr	r3, [pc, #8]	; (100042d4 <XMC_WDT_Service+0x10>)
100042ca:	4a03      	ldr	r2, [pc, #12]	; (100042d8 <XMC_WDT_Service+0x14>)
100042cc:	609a      	str	r2, [r3, #8]
}
100042ce:	46bd      	mov	sp, r7
100042d0:	bd80      	pop	{r7, pc}
100042d2:	46c0      	nop			; (mov r8, r8)
100042d4:	40020000 	.word	0x40020000
100042d8:	abadcafe 	.word	0xabadcafe

100042dc <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
100042dc:	b580      	push	{r7, lr}
100042de:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
100042e0:	f7ff fff0 	bl	100042c4 <XMC_WDT_Service>
}
100042e4:	46bd      	mov	sp, r7
100042e6:	bd80      	pop	{r7, pc}

100042e8 <CAN_reset_distance>:
volatile uint8_t CAN_state_Ultrasonic = 0;
volatile uint16_t Ultrasonic_cm_C = 0;
volatile uint16_t Ultrasonic_cm_L = 0;
volatile uint16_t Ultrasonic_cm_R = 0;

void CAN_reset_distance(uint8_t distance_to_reset[4]){
100042e8:	b580      	push	{r7, lr}
100042ea:	b086      	sub	sp, #24
100042ec:	af00      	add	r7, sp, #0
100042ee:	6078      	str	r0, [r7, #4]
	uint8_t TX[8] ={0};
100042f0:	230c      	movs	r3, #12
100042f2:	18fb      	adds	r3, r7, r3
100042f4:	2200      	movs	r2, #0
100042f6:	601a      	str	r2, [r3, #0]
100042f8:	2200      	movs	r2, #0
100042fa:	605a      	str	r2, [r3, #4]
	uint8_t i;
	for(i = 0; i < 4; i++){	TX[i] = distance_to_reset[i];}
100042fc:	2317      	movs	r3, #23
100042fe:	18fb      	adds	r3, r7, r3
10004300:	2200      	movs	r2, #0
10004302:	701a      	strb	r2, [r3, #0]
10004304:	e012      	b.n	1000432c <CAN_reset_distance+0x44>
10004306:	2317      	movs	r3, #23
10004308:	18fb      	adds	r3, r7, r3
1000430a:	781b      	ldrb	r3, [r3, #0]
1000430c:	2217      	movs	r2, #23
1000430e:	18ba      	adds	r2, r7, r2
10004310:	7812      	ldrb	r2, [r2, #0]
10004312:	6879      	ldr	r1, [r7, #4]
10004314:	188a      	adds	r2, r1, r2
10004316:	7811      	ldrb	r1, [r2, #0]
10004318:	220c      	movs	r2, #12
1000431a:	18ba      	adds	r2, r7, r2
1000431c:	54d1      	strb	r1, [r2, r3]
1000431e:	2317      	movs	r3, #23
10004320:	18fb      	adds	r3, r7, r3
10004322:	781a      	ldrb	r2, [r3, #0]
10004324:	2317      	movs	r3, #23
10004326:	18fb      	adds	r3, r7, r3
10004328:	3201      	adds	r2, #1
1000432a:	701a      	strb	r2, [r3, #0]
1000432c:	2317      	movs	r3, #23
1000432e:	18fb      	adds	r3, r7, r3
10004330:	781b      	ldrb	r3, [r3, #0]
10004332:	2b03      	cmp	r3, #3
10004334:	d9e7      	bls.n	10004306 <CAN_reset_distance+0x1e>

	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[1], (uint8_t*)TX);
10004336:	4b08      	ldr	r3, [pc, #32]	; (10004358 <CAN_reset_distance+0x70>)
10004338:	691a      	ldr	r2, [r3, #16]
1000433a:	230c      	movs	r3, #12
1000433c:	18fb      	adds	r3, r7, r3
1000433e:	1c10      	adds	r0, r2, #0
10004340:	1c19      	adds	r1, r3, #0
10004342:	f7ff fd43 	bl	10003dcc <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[1]); //Transmit the data of message object1
10004346:	4b04      	ldr	r3, [pc, #16]	; (10004358 <CAN_reset_distance+0x70>)
10004348:	691b      	ldr	r3, [r3, #16]
1000434a:	1c18      	adds	r0, r3, #0
1000434c:	f7ff fd0e 	bl	10003d6c <CAN_NODE_MO_Transmit>
}
10004350:	46bd      	mov	sp, r7
10004352:	b006      	add	sp, #24
10004354:	bd80      	pop	{r7, pc}
10004356:	46c0      	nop			; (mov r8, r8)
10004358:	1000d040 	.word	0x1000d040

1000435c <CAN_send_Speeds>:

void CAN_send_Speeds(float Speed_data[4]){
1000435c:	b580      	push	{r7, lr}
1000435e:	b084      	sub	sp, #16
10004360:	af00      	add	r7, sp, #0
10004362:	6078      	str	r0, [r7, #4]

	int16_t Speeds_int16[4] ={Speed_data[0] *1000, Speed_data[1] *1000, Speed_data[2] *1000, Speed_data[3] *1000}; // in int16_t mm/s converter back on inverter
10004364:	687b      	ldr	r3, [r7, #4]
10004366:	681b      	ldr	r3, [r3, #0]
10004368:	1c18      	adds	r0, r3, #0
1000436a:	4926      	ldr	r1, [pc, #152]	; (10004404 <CAN_send_Speeds+0xa8>)
1000436c:	f006 f940 	bl	1000a5f0 <__aeabi_fmul>
10004370:	1c03      	adds	r3, r0, #0
10004372:	1c18      	adds	r0, r3, #0
10004374:	f006 fbec 	bl	1000ab50 <__aeabi_f2iz>
10004378:	1c03      	adds	r3, r0, #0
1000437a:	b29a      	uxth	r2, r3
1000437c:	2308      	movs	r3, #8
1000437e:	18fb      	adds	r3, r7, r3
10004380:	801a      	strh	r2, [r3, #0]
10004382:	687b      	ldr	r3, [r7, #4]
10004384:	3304      	adds	r3, #4
10004386:	681b      	ldr	r3, [r3, #0]
10004388:	1c18      	adds	r0, r3, #0
1000438a:	491e      	ldr	r1, [pc, #120]	; (10004404 <CAN_send_Speeds+0xa8>)
1000438c:	f006 f930 	bl	1000a5f0 <__aeabi_fmul>
10004390:	1c03      	adds	r3, r0, #0
10004392:	1c18      	adds	r0, r3, #0
10004394:	f006 fbdc 	bl	1000ab50 <__aeabi_f2iz>
10004398:	1c03      	adds	r3, r0, #0
1000439a:	b29a      	uxth	r2, r3
1000439c:	2308      	movs	r3, #8
1000439e:	18fb      	adds	r3, r7, r3
100043a0:	805a      	strh	r2, [r3, #2]
100043a2:	687b      	ldr	r3, [r7, #4]
100043a4:	3308      	adds	r3, #8
100043a6:	681b      	ldr	r3, [r3, #0]
100043a8:	1c18      	adds	r0, r3, #0
100043aa:	4916      	ldr	r1, [pc, #88]	; (10004404 <CAN_send_Speeds+0xa8>)
100043ac:	f006 f920 	bl	1000a5f0 <__aeabi_fmul>
100043b0:	1c03      	adds	r3, r0, #0
100043b2:	1c18      	adds	r0, r3, #0
100043b4:	f006 fbcc 	bl	1000ab50 <__aeabi_f2iz>
100043b8:	1c03      	adds	r3, r0, #0
100043ba:	b29a      	uxth	r2, r3
100043bc:	2308      	movs	r3, #8
100043be:	18fb      	adds	r3, r7, r3
100043c0:	809a      	strh	r2, [r3, #4]
100043c2:	687b      	ldr	r3, [r7, #4]
100043c4:	330c      	adds	r3, #12
100043c6:	681b      	ldr	r3, [r3, #0]
100043c8:	1c18      	adds	r0, r3, #0
100043ca:	490e      	ldr	r1, [pc, #56]	; (10004404 <CAN_send_Speeds+0xa8>)
100043cc:	f006 f910 	bl	1000a5f0 <__aeabi_fmul>
100043d0:	1c03      	adds	r3, r0, #0
100043d2:	1c18      	adds	r0, r3, #0
100043d4:	f006 fbbc 	bl	1000ab50 <__aeabi_f2iz>
100043d8:	1c03      	adds	r3, r0, #0
100043da:	b29a      	uxth	r2, r3
100043dc:	2308      	movs	r3, #8
100043de:	18fb      	adds	r3, r7, r3
100043e0:	80da      	strh	r2, [r3, #6]

	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[0], (uint8_t*)Speeds_int16);
100043e2:	4b09      	ldr	r3, [pc, #36]	; (10004408 <CAN_send_Speeds+0xac>)
100043e4:	68da      	ldr	r2, [r3, #12]
100043e6:	2308      	movs	r3, #8
100043e8:	18fb      	adds	r3, r7, r3
100043ea:	1c10      	adds	r0, r2, #0
100043ec:	1c19      	adds	r1, r3, #0
100043ee:	f7ff fced 	bl	10003dcc <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[0]); //Transmit the data of message object1
100043f2:	4b05      	ldr	r3, [pc, #20]	; (10004408 <CAN_send_Speeds+0xac>)
100043f4:	68db      	ldr	r3, [r3, #12]
100043f6:	1c18      	adds	r0, r3, #0
100043f8:	f7ff fcb8 	bl	10003d6c <CAN_NODE_MO_Transmit>

}
100043fc:	46bd      	mov	sp, r7
100043fe:	b004      	add	sp, #16
10004400:	bd80      	pop	{r7, pc}
10004402:	46c0      	nop			; (mov r8, r8)
10004404:	447a0000 	.word	0x447a0000
10004408:	1000d040 	.word	0x1000d040

1000440c <IRQ3_Handler>:

void CAN_RX_INVERTER_ISR(void) {
1000440c:	b580      	push	{r7, lr}
1000440e:	af00      	add	r7, sp, #0
	WATCHDOG_Service();
10004410:	f7ff ff64 	bl	100042dc <WATCHDOG_Service>
	DIGITAL_IO_SetOutputLow(&WATCHDOG_LED_BLUE);
10004414:	4b09      	ldr	r3, [pc, #36]	; (1000443c <IRQ3_Handler+0x30>)
10004416:	1c18      	adds	r0, r3, #0
10004418:	f7ff ff44 	bl	100042a4 <DIGITAL_IO_SetOutputLow>

	CAN_RX_Inverter_count++;
1000441c:	4b08      	ldr	r3, [pc, #32]	; (10004440 <IRQ3_Handler+0x34>)
1000441e:	781b      	ldrb	r3, [r3, #0]
10004420:	b2db      	uxtb	r3, r3
10004422:	3301      	adds	r3, #1
10004424:	b2da      	uxtb	r2, r3
10004426:	4b06      	ldr	r3, [pc, #24]	; (10004440 <IRQ3_Handler+0x34>)
10004428:	701a      	strb	r2, [r3, #0]
	if(CAN_RX_Inverter_count == 4) CAN_RX_Inverter_Read_Data(); // read data after all for have reviced asseumes all 4 are working
1000442a:	4b05      	ldr	r3, [pc, #20]	; (10004440 <IRQ3_Handler+0x34>)
1000442c:	781b      	ldrb	r3, [r3, #0]
1000442e:	b2db      	uxtb	r3, r3
10004430:	2b04      	cmp	r3, #4
10004432:	d101      	bne.n	10004438 <IRQ3_Handler+0x2c>
10004434:	f000 f806 	bl	10004444 <CAN_RX_Inverter_Read_Data>
}
10004438:	46bd      	mov	sp, r7
1000443a:	bd80      	pop	{r7, pc}
1000443c:	1000cf1c 	.word	0x1000cf1c
10004440:	200009f4 	.word	0x200009f4

10004444 <CAN_RX_Inverter_Read_Data>:

void CAN_RX_Inverter_Read_Data(){
10004444:	b590      	push	{r4, r7, lr}
10004446:	b089      	sub	sp, #36	; 0x24
10004448:	af00      	add	r7, sp, #0
	uint8_t Motor_on_rover;
	for(Motor_on_rover = 0; Motor_on_rover < 4; Motor_on_rover ++){
1000444a:	231f      	movs	r3, #31
1000444c:	18fb      	adds	r3, r7, r3
1000444e:	2200      	movs	r2, #0
10004450:	701a      	strb	r2, [r3, #0]
10004452:	e103      	b.n	1000465c <CAN_RX_Inverter_Read_Data+0x218>
		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[Motor_on_rover + 2]->mo_ptr;
10004454:	231f      	movs	r3, #31
10004456:	18fb      	adds	r3, r7, r3
10004458:	781b      	ldrb	r3, [r3, #0]
1000445a:	3302      	adds	r3, #2
1000445c:	4a8c      	ldr	r2, [pc, #560]	; (10004690 <CAN_RX_Inverter_Read_Data+0x24c>)
1000445e:	3302      	adds	r3, #2
10004460:	009b      	lsls	r3, r3, #2
10004462:	18d3      	adds	r3, r2, r3
10004464:	685b      	ldr	r3, [r3, #4]
10004466:	681b      	ldr	r3, [r3, #0]
10004468:	61bb      	str	r3, [r7, #24]
		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[Motor_on_rover + 2]);
1000446a:	231f      	movs	r3, #31
1000446c:	18fb      	adds	r3, r7, r3
1000446e:	781b      	ldrb	r3, [r3, #0]
10004470:	3302      	adds	r3, #2
10004472:	4a87      	ldr	r2, [pc, #540]	; (10004690 <CAN_RX_Inverter_Read_Data+0x24c>)
10004474:	3302      	adds	r3, #2
10004476:	009b      	lsls	r3, r3, #2
10004478:	18d3      	adds	r3, r2, r3
1000447a:	685b      	ldr	r3, [r3, #4]
1000447c:	1c18      	adds	r0, r3, #0
1000447e:	f7ff fc8d 	bl	10003d9c <CAN_NODE_MO_Receive>

		uint8_t data_RX[8];
		uint8_t i;
		for(i = 0 ; i < 8 ; i ++){
10004482:	231e      	movs	r3, #30
10004484:	18fb      	adds	r3, r7, r3
10004486:	2200      	movs	r2, #0
10004488:	701a      	strb	r2, [r3, #0]
1000448a:	e012      	b.n	100044b2 <CAN_RX_Inverter_Read_Data+0x6e>
			 data_RX[i] = lmsgobjct_ptr_1->can_data_byte[i];
1000448c:	231e      	movs	r3, #30
1000448e:	18fb      	adds	r3, r7, r3
10004490:	781b      	ldrb	r3, [r3, #0]
10004492:	221e      	movs	r2, #30
10004494:	18ba      	adds	r2, r7, r2
10004496:	7812      	ldrb	r2, [r2, #0]
10004498:	69b9      	ldr	r1, [r7, #24]
1000449a:	188a      	adds	r2, r1, r2
1000449c:	7c11      	ldrb	r1, [r2, #16]
1000449e:	220c      	movs	r2, #12
100044a0:	18ba      	adds	r2, r7, r2
100044a2:	54d1      	strb	r1, [r2, r3]
		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[Motor_on_rover + 2]->mo_ptr;
		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[Motor_on_rover + 2]);

		uint8_t data_RX[8];
		uint8_t i;
		for(i = 0 ; i < 8 ; i ++){
100044a4:	231e      	movs	r3, #30
100044a6:	18fb      	adds	r3, r7, r3
100044a8:	781a      	ldrb	r2, [r3, #0]
100044aa:	231e      	movs	r3, #30
100044ac:	18fb      	adds	r3, r7, r3
100044ae:	3201      	adds	r2, #1
100044b0:	701a      	strb	r2, [r3, #0]
100044b2:	231e      	movs	r3, #30
100044b4:	18fb      	adds	r3, r7, r3
100044b6:	781b      	ldrb	r3, [r3, #0]
100044b8:	2b07      	cmp	r3, #7
100044ba:	d9e7      	bls.n	1000448c <CAN_RX_Inverter_Read_Data+0x48>
			 data_RX[i] = lmsgobjct_ptr_1->can_data_byte[i];
		}

		uint8_t Motor_on_rover_RX = (data_RX[0 * 2 + 1] << 8) | data_RX[0 * 2];
100044bc:	230c      	movs	r3, #12
100044be:	18fb      	adds	r3, r7, r3
100044c0:	785b      	ldrb	r3, [r3, #1]
100044c2:	021b      	lsls	r3, r3, #8
100044c4:	b2da      	uxtb	r2, r3
100044c6:	230c      	movs	r3, #12
100044c8:	18fb      	adds	r3, r7, r3
100044ca:	781b      	ldrb	r3, [r3, #0]
100044cc:	b2db      	uxtb	r3, r3
100044ce:	4313      	orrs	r3, r2
100044d0:	b2da      	uxtb	r2, r3
100044d2:	2317      	movs	r3, #23
100044d4:	18fb      	adds	r3, r7, r3
100044d6:	701a      	strb	r2, [r3, #0]
		if(Motor_on_rover_RX == Motor_on_rover){
100044d8:	2317      	movs	r3, #23
100044da:	18fa      	adds	r2, r7, r3
100044dc:	231f      	movs	r3, #31
100044de:	18fb      	adds	r3, r7, r3
100044e0:	7812      	ldrb	r2, [r2, #0]
100044e2:	781b      	ldrb	r3, [r3, #0]
100044e4:	429a      	cmp	r2, r3
100044e6:	d000      	beq.n	100044ea <CAN_RX_Inverter_Read_Data+0xa6>
100044e8:	e0ad      	b.n	10004646 <CAN_RX_Inverter_Read_Data+0x202>
			DIGITAL_IO_SetOutputLow(&LED_CAN_ERROR);
100044ea:	4b6a      	ldr	r3, [pc, #424]	; (10004694 <CAN_RX_Inverter_Read_Data+0x250>)
100044ec:	1c18      	adds	r0, r3, #0
100044ee:	f7ff fed9 	bl	100042a4 <DIGITAL_IO_SetOutputLow>

			uint8_t i;
			int16_t values_int16[3] = {0};
100044f2:	1d3b      	adds	r3, r7, #4
100044f4:	2200      	movs	r2, #0
100044f6:	601a      	str	r2, [r3, #0]
100044f8:	2200      	movs	r2, #0
100044fa:	809a      	strh	r2, [r3, #4]
			for(i = 1 ; i < 4 ; i ++){
100044fc:	231d      	movs	r3, #29
100044fe:	18fb      	adds	r3, r7, r3
10004500:	2201      	movs	r2, #1
10004502:	701a      	strb	r2, [r3, #0]
10004504:	e06b      	b.n	100045de <CAN_RX_Inverter_Read_Data+0x19a>
				 if(i == 1) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
10004506:	231d      	movs	r3, #29
10004508:	18fb      	adds	r3, r7, r3
1000450a:	781b      	ldrb	r3, [r3, #0]
1000450c:	2b01      	cmp	r3, #1
1000450e:	d11c      	bne.n	1000454a <CAN_RX_Inverter_Read_Data+0x106>
10004510:	231d      	movs	r3, #29
10004512:	18fb      	adds	r3, r7, r3
10004514:	781b      	ldrb	r3, [r3, #0]
10004516:	1e5a      	subs	r2, r3, #1
10004518:	231d      	movs	r3, #29
1000451a:	18fb      	adds	r3, r7, r3
1000451c:	781b      	ldrb	r3, [r3, #0]
1000451e:	005b      	lsls	r3, r3, #1
10004520:	3301      	adds	r3, #1
10004522:	210c      	movs	r1, #12
10004524:	1879      	adds	r1, r7, r1
10004526:	5ccb      	ldrb	r3, [r1, r3]
10004528:	021b      	lsls	r3, r3, #8
1000452a:	b298      	uxth	r0, r3
1000452c:	231d      	movs	r3, #29
1000452e:	18fb      	adds	r3, r7, r3
10004530:	781b      	ldrb	r3, [r3, #0]
10004532:	005b      	lsls	r3, r3, #1
10004534:	210c      	movs	r1, #12
10004536:	1879      	adds	r1, r7, r1
10004538:	5ccb      	ldrb	r3, [r1, r3]
1000453a:	b29b      	uxth	r3, r3
1000453c:	1c01      	adds	r1, r0, #0
1000453e:	430b      	orrs	r3, r1
10004540:	b299      	uxth	r1, r3
10004542:	1d3b      	adds	r3, r7, #4
10004544:	0052      	lsls	r2, r2, #1
10004546:	52d1      	strh	r1, [r2, r3]
10004548:	e042      	b.n	100045d0 <CAN_RX_Inverter_Read_Data+0x18c>
				 else if(i == 2) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
1000454a:	231d      	movs	r3, #29
1000454c:	18fb      	adds	r3, r7, r3
1000454e:	781b      	ldrb	r3, [r3, #0]
10004550:	2b02      	cmp	r3, #2
10004552:	d11c      	bne.n	1000458e <CAN_RX_Inverter_Read_Data+0x14a>
10004554:	231d      	movs	r3, #29
10004556:	18fb      	adds	r3, r7, r3
10004558:	781b      	ldrb	r3, [r3, #0]
1000455a:	1e5a      	subs	r2, r3, #1
1000455c:	231d      	movs	r3, #29
1000455e:	18fb      	adds	r3, r7, r3
10004560:	781b      	ldrb	r3, [r3, #0]
10004562:	005b      	lsls	r3, r3, #1
10004564:	3301      	adds	r3, #1
10004566:	210c      	movs	r1, #12
10004568:	1879      	adds	r1, r7, r1
1000456a:	5ccb      	ldrb	r3, [r1, r3]
1000456c:	021b      	lsls	r3, r3, #8
1000456e:	b298      	uxth	r0, r3
10004570:	231d      	movs	r3, #29
10004572:	18fb      	adds	r3, r7, r3
10004574:	781b      	ldrb	r3, [r3, #0]
10004576:	005b      	lsls	r3, r3, #1
10004578:	210c      	movs	r1, #12
1000457a:	1879      	adds	r1, r7, r1
1000457c:	5ccb      	ldrb	r3, [r1, r3]
1000457e:	b29b      	uxth	r3, r3
10004580:	1c01      	adds	r1, r0, #0
10004582:	430b      	orrs	r3, r1
10004584:	b299      	uxth	r1, r3
10004586:	1d3b      	adds	r3, r7, #4
10004588:	0052      	lsls	r2, r2, #1
1000458a:	52d1      	strh	r1, [r2, r3]
1000458c:	e020      	b.n	100045d0 <CAN_RX_Inverter_Read_Data+0x18c>
				 else if(i == 3) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
1000458e:	231d      	movs	r3, #29
10004590:	18fb      	adds	r3, r7, r3
10004592:	781b      	ldrb	r3, [r3, #0]
10004594:	2b03      	cmp	r3, #3
10004596:	d11b      	bne.n	100045d0 <CAN_RX_Inverter_Read_Data+0x18c>
10004598:	231d      	movs	r3, #29
1000459a:	18fb      	adds	r3, r7, r3
1000459c:	781b      	ldrb	r3, [r3, #0]
1000459e:	1e5a      	subs	r2, r3, #1
100045a0:	231d      	movs	r3, #29
100045a2:	18fb      	adds	r3, r7, r3
100045a4:	781b      	ldrb	r3, [r3, #0]
100045a6:	005b      	lsls	r3, r3, #1
100045a8:	3301      	adds	r3, #1
100045aa:	210c      	movs	r1, #12
100045ac:	1879      	adds	r1, r7, r1
100045ae:	5ccb      	ldrb	r3, [r1, r3]
100045b0:	021b      	lsls	r3, r3, #8
100045b2:	b298      	uxth	r0, r3
100045b4:	231d      	movs	r3, #29
100045b6:	18fb      	adds	r3, r7, r3
100045b8:	781b      	ldrb	r3, [r3, #0]
100045ba:	005b      	lsls	r3, r3, #1
100045bc:	210c      	movs	r1, #12
100045be:	1879      	adds	r1, r7, r1
100045c0:	5ccb      	ldrb	r3, [r1, r3]
100045c2:	b29b      	uxth	r3, r3
100045c4:	1c01      	adds	r1, r0, #0
100045c6:	430b      	orrs	r3, r1
100045c8:	b299      	uxth	r1, r3
100045ca:	1d3b      	adds	r3, r7, #4
100045cc:	0052      	lsls	r2, r2, #1
100045ce:	52d1      	strh	r1, [r2, r3]
		if(Motor_on_rover_RX == Motor_on_rover){
			DIGITAL_IO_SetOutputLow(&LED_CAN_ERROR);

			uint8_t i;
			int16_t values_int16[3] = {0};
			for(i = 1 ; i < 4 ; i ++){
100045d0:	231d      	movs	r3, #29
100045d2:	18fb      	adds	r3, r7, r3
100045d4:	781a      	ldrb	r2, [r3, #0]
100045d6:	231d      	movs	r3, #29
100045d8:	18fb      	adds	r3, r7, r3
100045da:	3201      	adds	r2, #1
100045dc:	701a      	strb	r2, [r3, #0]
100045de:	231d      	movs	r3, #29
100045e0:	18fb      	adds	r3, r7, r3
100045e2:	781b      	ldrb	r3, [r3, #0]
100045e4:	2b03      	cmp	r3, #3
100045e6:	d98e      	bls.n	10004506 <CAN_RX_Inverter_Read_Data+0xc2>
				 if(i == 1) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
				 else if(i == 2) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
				 else if(i == 3) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
			 }

			Inveter_CAN_OK[Motor_on_rover] = values_int16[0];
100045e8:	231f      	movs	r3, #31
100045ea:	18fb      	adds	r3, r7, r3
100045ec:	781b      	ldrb	r3, [r3, #0]
100045ee:	1d3a      	adds	r2, r7, #4
100045f0:	8812      	ldrh	r2, [r2, #0]
100045f2:	b2d1      	uxtb	r1, r2
100045f4:	4a28      	ldr	r2, [pc, #160]	; (10004698 <CAN_RX_Inverter_Read_Data+0x254>)
100045f6:	54d1      	strb	r1, [r2, r3]
			Actual_Speeds[Motor_on_rover] = (float)values_int16[1] / 1000;
100045f8:	231f      	movs	r3, #31
100045fa:	18fb      	adds	r3, r7, r3
100045fc:	781c      	ldrb	r4, [r3, #0]
100045fe:	1d3b      	adds	r3, r7, #4
10004600:	885b      	ldrh	r3, [r3, #2]
10004602:	b21b      	sxth	r3, r3
10004604:	1c18      	adds	r0, r3, #0
10004606:	f006 fac3 	bl	1000ab90 <__aeabi_i2f>
1000460a:	1c03      	adds	r3, r0, #0
1000460c:	1c18      	adds	r0, r3, #0
1000460e:	4923      	ldr	r1, [pc, #140]	; (1000469c <CAN_RX_Inverter_Read_Data+0x258>)
10004610:	f005 fdfc 	bl	1000a20c <__aeabi_fdiv>
10004614:	1c03      	adds	r3, r0, #0
10004616:	1c19      	adds	r1, r3, #0
10004618:	4b21      	ldr	r3, [pc, #132]	; (100046a0 <CAN_RX_Inverter_Read_Data+0x25c>)
1000461a:	00a2      	lsls	r2, r4, #2
1000461c:	50d1      	str	r1, [r2, r3]
			Actual_Distance[Motor_on_rover] = (float)values_int16[2] / 1000;
1000461e:	231f      	movs	r3, #31
10004620:	18fb      	adds	r3, r7, r3
10004622:	781c      	ldrb	r4, [r3, #0]
10004624:	1d3b      	adds	r3, r7, #4
10004626:	889b      	ldrh	r3, [r3, #4]
10004628:	b21b      	sxth	r3, r3
1000462a:	1c18      	adds	r0, r3, #0
1000462c:	f006 fab0 	bl	1000ab90 <__aeabi_i2f>
10004630:	1c03      	adds	r3, r0, #0
10004632:	1c18      	adds	r0, r3, #0
10004634:	4919      	ldr	r1, [pc, #100]	; (1000469c <CAN_RX_Inverter_Read_Data+0x258>)
10004636:	f005 fde9 	bl	1000a20c <__aeabi_fdiv>
1000463a:	1c03      	adds	r3, r0, #0
1000463c:	1c19      	adds	r1, r3, #0
1000463e:	4b19      	ldr	r3, [pc, #100]	; (100046a4 <CAN_RX_Inverter_Read_Data+0x260>)
10004640:	00a2      	lsls	r2, r4, #2
10004642:	50d1      	str	r1, [r2, r3]
10004644:	e003      	b.n	1000464e <CAN_RX_Inverter_Read_Data+0x20a>
			}
		else DIGITAL_IO_SetOutputHigh(&LED_CAN_ERROR);
10004646:	4b13      	ldr	r3, [pc, #76]	; (10004694 <CAN_RX_Inverter_Read_Data+0x250>)
10004648:	1c18      	adds	r0, r3, #0
1000464a:	f7ff fe1b 	bl	10004284 <DIGITAL_IO_SetOutputHigh>
	if(CAN_RX_Inverter_count == 4) CAN_RX_Inverter_Read_Data(); // read data after all for have reviced asseumes all 4 are working
}

void CAN_RX_Inverter_Read_Data(){
	uint8_t Motor_on_rover;
	for(Motor_on_rover = 0; Motor_on_rover < 4; Motor_on_rover ++){
1000464e:	231f      	movs	r3, #31
10004650:	18fb      	adds	r3, r7, r3
10004652:	781a      	ldrb	r2, [r3, #0]
10004654:	231f      	movs	r3, #31
10004656:	18fb      	adds	r3, r7, r3
10004658:	3201      	adds	r2, #1
1000465a:	701a      	strb	r2, [r3, #0]
1000465c:	231f      	movs	r3, #31
1000465e:	18fb      	adds	r3, r7, r3
10004660:	781b      	ldrb	r3, [r3, #0]
10004662:	2b03      	cmp	r3, #3
10004664:	d800      	bhi.n	10004668 <CAN_RX_Inverter_Read_Data+0x224>
10004666:	e6f5      	b.n	10004454 <CAN_RX_Inverter_Read_Data+0x10>
			Actual_Distance[Motor_on_rover] = (float)values_int16[2] / 1000;
			}
		else DIGITAL_IO_SetOutputHigh(&LED_CAN_ERROR);
	}

	speed_fl_act = Actual_Speeds[0];
10004668:	4b0d      	ldr	r3, [pc, #52]	; (100046a0 <CAN_RX_Inverter_Read_Data+0x25c>)
1000466a:	681a      	ldr	r2, [r3, #0]
1000466c:	4b0e      	ldr	r3, [pc, #56]	; (100046a8 <CAN_RX_Inverter_Read_Data+0x264>)
1000466e:	601a      	str	r2, [r3, #0]
	speed_fr_act = Actual_Speeds[1];
10004670:	4b0b      	ldr	r3, [pc, #44]	; (100046a0 <CAN_RX_Inverter_Read_Data+0x25c>)
10004672:	685a      	ldr	r2, [r3, #4]
10004674:	4b0d      	ldr	r3, [pc, #52]	; (100046ac <CAN_RX_Inverter_Read_Data+0x268>)
10004676:	601a      	str	r2, [r3, #0]
	speed_rl_act = Actual_Speeds[2];
10004678:	4b09      	ldr	r3, [pc, #36]	; (100046a0 <CAN_RX_Inverter_Read_Data+0x25c>)
1000467a:	689a      	ldr	r2, [r3, #8]
1000467c:	4b0c      	ldr	r3, [pc, #48]	; (100046b0 <CAN_RX_Inverter_Read_Data+0x26c>)
1000467e:	601a      	str	r2, [r3, #0]
	speed_rr_act = Actual_Speeds[3];
10004680:	4b07      	ldr	r3, [pc, #28]	; (100046a0 <CAN_RX_Inverter_Read_Data+0x25c>)
10004682:	68da      	ldr	r2, [r3, #12]
10004684:	4b0b      	ldr	r3, [pc, #44]	; (100046b4 <CAN_RX_Inverter_Read_Data+0x270>)
10004686:	601a      	str	r2, [r3, #0]
}
10004688:	46bd      	mov	sp, r7
1000468a:	b009      	add	sp, #36	; 0x24
1000468c:	bd90      	pop	{r4, r7, pc}
1000468e:	46c0      	nop			; (mov r8, r8)
10004690:	1000d040 	.word	0x1000d040
10004694:	1000cf2c 	.word	0x1000cf2c
10004698:	200009f0 	.word	0x200009f0
1000469c:	447a0000 	.word	0x447a0000
100046a0:	20000a6c 	.word	0x20000a6c
100046a4:	20000a7c 	.word	0x20000a7c
100046a8:	200009e0 	.word	0x200009e0
100046ac:	200009e4 	.word	0x200009e4
100046b0:	200009e8 	.word	0x200009e8
100046b4:	200009ec 	.word	0x200009ec

100046b8 <IRQ4_Handler>:


void CAN_RX_ULTRASONIC_ISR(void) { // recide data
100046b8:	b580      	push	{r7, lr}
100046ba:	b084      	sub	sp, #16
100046bc:	af00      	add	r7, sp, #0
	XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
100046be:	4b3a      	ldr	r3, [pc, #232]	; (100047a8 <IRQ4_Handler+0xf0>)
100046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100046c2:	681b      	ldr	r3, [r3, #0]
100046c4:	60bb      	str	r3, [r7, #8]
	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]);
100046c6:	4b38      	ldr	r3, [pc, #224]	; (100047a8 <IRQ4_Handler+0xf0>)
100046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100046ca:	1c18      	adds	r0, r3, #0
100046cc:	f7ff fb66 	bl	10003d9c <CAN_NODE_MO_Receive>

	uint8_t data_RX[8];
	uint8_t i;
	for(i = 0 ; i < 8 ; i ++){
100046d0:	230f      	movs	r3, #15
100046d2:	18fb      	adds	r3, r7, r3
100046d4:	2200      	movs	r2, #0
100046d6:	701a      	strb	r2, [r3, #0]
100046d8:	e011      	b.n	100046fe <IRQ4_Handler+0x46>
		 data_RX[i] = lmsgobjct_ptr_1->can_data_byte[i];
100046da:	230f      	movs	r3, #15
100046dc:	18fb      	adds	r3, r7, r3
100046de:	781b      	ldrb	r3, [r3, #0]
100046e0:	220f      	movs	r2, #15
100046e2:	18ba      	adds	r2, r7, r2
100046e4:	7812      	ldrb	r2, [r2, #0]
100046e6:	68b9      	ldr	r1, [r7, #8]
100046e8:	188a      	adds	r2, r1, r2
100046ea:	7c11      	ldrb	r1, [r2, #16]
100046ec:	1c3a      	adds	r2, r7, #0
100046ee:	54d1      	strb	r1, [r2, r3]
	XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]);

	uint8_t data_RX[8];
	uint8_t i;
	for(i = 0 ; i < 8 ; i ++){
100046f0:	230f      	movs	r3, #15
100046f2:	18fb      	adds	r3, r7, r3
100046f4:	781a      	ldrb	r2, [r3, #0]
100046f6:	230f      	movs	r3, #15
100046f8:	18fb      	adds	r3, r7, r3
100046fa:	3201      	adds	r2, #1
100046fc:	701a      	strb	r2, [r3, #0]
100046fe:	230f      	movs	r3, #15
10004700:	18fb      	adds	r3, r7, r3
10004702:	781b      	ldrb	r3, [r3, #0]
10004704:	2b07      	cmp	r3, #7
10004706:	d9e8      	bls.n	100046da <IRQ4_Handler+0x22>
		 data_RX[i] = lmsgobjct_ptr_1->can_data_byte[i];
	}

	CAN_state_Ultrasonic = (data_RX[0 * 2 + 1] << 8) | data_RX[0 * 2];
10004708:	1c3b      	adds	r3, r7, #0
1000470a:	785b      	ldrb	r3, [r3, #1]
1000470c:	021b      	lsls	r3, r3, #8
1000470e:	b2da      	uxtb	r2, r3
10004710:	1c3b      	adds	r3, r7, #0
10004712:	781b      	ldrb	r3, [r3, #0]
10004714:	b2db      	uxtb	r3, r3
10004716:	4313      	orrs	r3, r2
10004718:	b2db      	uxtb	r3, r3
1000471a:	b2da      	uxtb	r2, r3
1000471c:	4b23      	ldr	r3, [pc, #140]	; (100047ac <IRQ4_Handler+0xf4>)
1000471e:	701a      	strb	r2, [r3, #0]
	Ultrasonic_cm_C = (data_RX[1 * 2 + 1] << 8) | data_RX[1 * 2];
10004720:	1c3b      	adds	r3, r7, #0
10004722:	78db      	ldrb	r3, [r3, #3]
10004724:	021b      	lsls	r3, r3, #8
10004726:	b29a      	uxth	r2, r3
10004728:	1c3b      	adds	r3, r7, #0
1000472a:	789b      	ldrb	r3, [r3, #2]
1000472c:	b29b      	uxth	r3, r3
1000472e:	4313      	orrs	r3, r2
10004730:	b29b      	uxth	r3, r3
10004732:	b29a      	uxth	r2, r3
10004734:	4b1e      	ldr	r3, [pc, #120]	; (100047b0 <IRQ4_Handler+0xf8>)
10004736:	801a      	strh	r2, [r3, #0]
	Ultrasonic_cm_L = (data_RX[2 * 2 + 1] << 8) | data_RX[2 * 2];
10004738:	1c3b      	adds	r3, r7, #0
1000473a:	795b      	ldrb	r3, [r3, #5]
1000473c:	021b      	lsls	r3, r3, #8
1000473e:	b29a      	uxth	r2, r3
10004740:	1c3b      	adds	r3, r7, #0
10004742:	791b      	ldrb	r3, [r3, #4]
10004744:	b29b      	uxth	r3, r3
10004746:	4313      	orrs	r3, r2
10004748:	b29b      	uxth	r3, r3
1000474a:	b29a      	uxth	r2, r3
1000474c:	4b19      	ldr	r3, [pc, #100]	; (100047b4 <IRQ4_Handler+0xfc>)
1000474e:	801a      	strh	r2, [r3, #0]
	Ultrasonic_cm_R = (data_RX[3 * 2 + 1] << 8) | data_RX[3 * 2];
10004750:	1c3b      	adds	r3, r7, #0
10004752:	79db      	ldrb	r3, [r3, #7]
10004754:	021b      	lsls	r3, r3, #8
10004756:	b29a      	uxth	r2, r3
10004758:	1c3b      	adds	r3, r7, #0
1000475a:	799b      	ldrb	r3, [r3, #6]
1000475c:	b29b      	uxth	r3, r3
1000475e:	4313      	orrs	r3, r2
10004760:	b29b      	uxth	r3, r3
10004762:	b29a      	uxth	r2, r3
10004764:	4b14      	ldr	r3, [pc, #80]	; (100047b8 <IRQ4_Handler+0x100>)
10004766:	801a      	strh	r2, [r3, #0]

	Ultra_sonic_filter(Ultrasonic_cm_C,  Ultrasonic_cm_L,  Ultrasonic_cm_R,   ALPHA_ULTARSONIC);
10004768:	4b11      	ldr	r3, [pc, #68]	; (100047b0 <IRQ4_Handler+0xf8>)
1000476a:	881b      	ldrh	r3, [r3, #0]
1000476c:	b29b      	uxth	r3, r3
1000476e:	b298      	uxth	r0, r3
10004770:	4b10      	ldr	r3, [pc, #64]	; (100047b4 <IRQ4_Handler+0xfc>)
10004772:	881b      	ldrh	r3, [r3, #0]
10004774:	b29b      	uxth	r3, r3
10004776:	b299      	uxth	r1, r3
10004778:	4b0f      	ldr	r3, [pc, #60]	; (100047b8 <IRQ4_Handler+0x100>)
1000477a:	881b      	ldrh	r3, [r3, #0]
1000477c:	b29b      	uxth	r3, r3
1000477e:	b29a      	uxth	r2, r3
10004780:	4b0e      	ldr	r3, [pc, #56]	; (100047bc <IRQ4_Handler+0x104>)
10004782:	681b      	ldr	r3, [r3, #0]
10004784:	b200      	sxth	r0, r0
10004786:	b209      	sxth	r1, r1
10004788:	b212      	sxth	r2, r2
1000478a:	f001 fc95 	bl	100060b8 <Ultra_sonic_filter>

	CAN_Ultrasonic_No_messasge_count = 0;
1000478e:	4b0c      	ldr	r3, [pc, #48]	; (100047c0 <IRQ4_Handler+0x108>)
10004790:	2200      	movs	r2, #0
10004792:	701a      	strb	r2, [r3, #0]

	WATCHDOG_Service();
10004794:	f7ff fda2 	bl	100042dc <WATCHDOG_Service>
	DIGITAL_IO_SetOutputLow(&WATCHDOG_LED_BLUE);
10004798:	4b0a      	ldr	r3, [pc, #40]	; (100047c4 <IRQ4_Handler+0x10c>)
1000479a:	1c18      	adds	r0, r3, #0
1000479c:	f7ff fd82 	bl	100042a4 <DIGITAL_IO_SetOutputLow>
}
100047a0:	46bd      	mov	sp, r7
100047a2:	b004      	add	sp, #16
100047a4:	bd80      	pop	{r7, pc}
100047a6:	46c0      	nop			; (mov r8, r8)
100047a8:	1000d040 	.word	0x1000d040
100047ac:	200009f5 	.word	0x200009f5
100047b0:	200009f6 	.word	0x200009f6
100047b4:	200009f8 	.word	0x200009f8
100047b8:	200009fa 	.word	0x200009fa
100047bc:	2000082c 	.word	0x2000082c
100047c0:	20000828 	.word	0x20000828
100047c4:	1000cf1c 	.word	0x1000cf1c

100047c8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100047c8:	b580      	push	{r7, lr}
100047ca:	b082      	sub	sp, #8
100047cc:	af00      	add	r7, sp, #0
100047ce:	6078      	str	r0, [r7, #4]
100047d0:	1c0a      	adds	r2, r1, #0
100047d2:	1cfb      	adds	r3, r7, #3
100047d4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
100047d6:	1cfb      	adds	r3, r7, #3
100047d8:	781b      	ldrb	r3, [r3, #0]
100047da:	2201      	movs	r2, #1
100047dc:	409a      	lsls	r2, r3
100047de:	687b      	ldr	r3, [r7, #4]
100047e0:	605a      	str	r2, [r3, #4]
}
100047e2:	46bd      	mov	sp, r7
100047e4:	b002      	add	sp, #8
100047e6:	bd80      	pop	{r7, pc}

100047e8 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100047e8:	b580      	push	{r7, lr}
100047ea:	b082      	sub	sp, #8
100047ec:	af00      	add	r7, sp, #0
100047ee:	6078      	str	r0, [r7, #4]
100047f0:	1c0a      	adds	r2, r1, #0
100047f2:	1cfb      	adds	r3, r7, #3
100047f4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100047f6:	1cfb      	adds	r3, r7, #3
100047f8:	781b      	ldrb	r3, [r3, #0]
100047fa:	2280      	movs	r2, #128	; 0x80
100047fc:	0252      	lsls	r2, r2, #9
100047fe:	409a      	lsls	r2, r3
10004800:	687b      	ldr	r3, [r7, #4]
10004802:	605a      	str	r2, [r3, #4]
}
10004804:	46bd      	mov	sp, r7
10004806:	b002      	add	sp, #8
10004808:	bd80      	pop	{r7, pc}
1000480a:	46c0      	nop			; (mov r8, r8)

1000480c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
1000480c:	b580      	push	{r7, lr}
1000480e:	b082      	sub	sp, #8
10004810:	af00      	add	r7, sp, #0
10004812:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10004814:	687b      	ldr	r3, [r7, #4]
10004816:	681a      	ldr	r2, [r3, #0]
10004818:	687b      	ldr	r3, [r7, #4]
1000481a:	7b1b      	ldrb	r3, [r3, #12]
1000481c:	1c10      	adds	r0, r2, #0
1000481e:	1c19      	adds	r1, r3, #0
10004820:	f7ff ffd2 	bl	100047c8 <XMC_GPIO_SetOutputHigh>
}
10004824:	46bd      	mov	sp, r7
10004826:	b002      	add	sp, #8
10004828:	bd80      	pop	{r7, pc}
1000482a:	46c0      	nop			; (mov r8, r8)

1000482c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
1000482c:	b580      	push	{r7, lr}
1000482e:	b082      	sub	sp, #8
10004830:	af00      	add	r7, sp, #0
10004832:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10004834:	687b      	ldr	r3, [r7, #4]
10004836:	681a      	ldr	r2, [r3, #0]
10004838:	687b      	ldr	r3, [r7, #4]
1000483a:	7b1b      	ldrb	r3, [r3, #12]
1000483c:	1c10      	adds	r0, r2, #0
1000483e:	1c19      	adds	r1, r3, #0
10004840:	f7ff ffd2 	bl	100047e8 <XMC_GPIO_SetOutputLow>
}
10004844:	46bd      	mov	sp, r7
10004846:	b002      	add	sp, #8
10004848:	bd80      	pop	{r7, pc}
1000484a:	46c0      	nop			; (mov r8, r8)

1000484c <Steering_Function>:
float avg_Speeds =0 ;

uint8_t NP_setting_cycel_skipper = 0;


void Steering_Function(float Steering_direction_cal, float Driving_speed_cal, uint8_t Steering_mode_cal){
1000484c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000484e:	b087      	sub	sp, #28
10004850:	af00      	add	r7, sp, #0
10004852:	60f8      	str	r0, [r7, #12]
10004854:	60b9      	str	r1, [r7, #8]
10004856:	1dfb      	adds	r3, r7, #7
10004858:	701a      	strb	r2, [r3, #0]
	New_Input = 0;
1000485a:	4bce      	ldr	r3, [pc, #824]	; (10004b94 <Steering_Function+0x348>)
1000485c:	2200      	movs	r2, #0
1000485e:	701a      	strb	r2, [r3, #0]

	R_Turn = 0;
10004860:	4bcd      	ldr	r3, [pc, #820]	; (10004b98 <Steering_Function+0x34c>)
10004862:	2200      	movs	r2, #0
10004864:	601a      	str	r2, [r3, #0]
	Speed_ratio = 0;
10004866:	4bcd      	ldr	r3, [pc, #820]	; (10004b9c <Steering_Function+0x350>)
10004868:	2200      	movs	r2, #0
1000486a:	601a      	str	r2, [r3, #0]

	if(Driving_speed_cal > MAX_Speed) Driving_speed_cal = MAX_Speed;
1000486c:	68b8      	ldr	r0, [r7, #8]
1000486e:	21ff      	movs	r1, #255	; 0xff
10004870:	0589      	lsls	r1, r1, #22
10004872:	f005 fa85 	bl	10009d80 <__aeabi_fcmpgt>
10004876:	1e03      	subs	r3, r0, #0
10004878:	d002      	beq.n	10004880 <Steering_Function+0x34>
1000487a:	23ff      	movs	r3, #255	; 0xff
1000487c:	059b      	lsls	r3, r3, #22
1000487e:	60bb      	str	r3, [r7, #8]
	if(Driving_speed_cal < -MAX_Speed) Driving_speed_cal = -MAX_Speed;
10004880:	68b8      	ldr	r0, [r7, #8]
10004882:	49c7      	ldr	r1, [pc, #796]	; (10004ba0 <Steering_Function+0x354>)
10004884:	f005 fa68 	bl	10009d58 <__aeabi_fcmplt>
10004888:	1e03      	subs	r3, r0, #0
1000488a:	d001      	beq.n	10004890 <Steering_Function+0x44>
1000488c:	4bc4      	ldr	r3, [pc, #784]	; (10004ba0 <Steering_Function+0x354>)
1000488e:	60bb      	str	r3, [r7, #8]
	if((0 < Driving_speed_cal) & (Driving_speed_cal < MIN_Speed)) Driving_speed_cal = 0;
10004890:	2301      	movs	r3, #1
10004892:	1c1c      	adds	r4, r3, #0
10004894:	68b8      	ldr	r0, [r7, #8]
10004896:	2100      	movs	r1, #0
10004898:	f005 fa72 	bl	10009d80 <__aeabi_fcmpgt>
1000489c:	1e03      	subs	r3, r0, #0
1000489e:	d101      	bne.n	100048a4 <Steering_Function+0x58>
100048a0:	2300      	movs	r3, #0
100048a2:	1c1c      	adds	r4, r3, #0
100048a4:	b2e4      	uxtb	r4, r4
100048a6:	68b8      	ldr	r0, [r7, #8]
100048a8:	f007 ffd8 	bl	1000c85c <__aeabi_f2d>
100048ac:	1c0a      	adds	r2, r1, #0
100048ae:	1c01      	adds	r1, r0, #0
100048b0:	2301      	movs	r3, #1
100048b2:	1c1d      	adds	r5, r3, #0
100048b4:	1c08      	adds	r0, r1, #0
100048b6:	1c11      	adds	r1, r2, #0
100048b8:	4aba      	ldr	r2, [pc, #744]	; (10004ba4 <Steering_Function+0x358>)
100048ba:	4bbb      	ldr	r3, [pc, #748]	; (10004ba8 <Steering_Function+0x35c>)
100048bc:	f005 fa12 	bl	10009ce4 <__aeabi_dcmplt>
100048c0:	1e03      	subs	r3, r0, #0
100048c2:	d101      	bne.n	100048c8 <Steering_Function+0x7c>
100048c4:	2300      	movs	r3, #0
100048c6:	1c1d      	adds	r5, r3, #0
100048c8:	b2eb      	uxtb	r3, r5
100048ca:	4023      	ands	r3, r4
100048cc:	b2db      	uxtb	r3, r3
100048ce:	2b00      	cmp	r3, #0
100048d0:	d001      	beq.n	100048d6 <Steering_Function+0x8a>
100048d2:	2300      	movs	r3, #0
100048d4:	60bb      	str	r3, [r7, #8]
	if((0 > Driving_speed_cal) & (Driving_speed_cal > -MIN_Speed)) Driving_speed_cal = 0;
100048d6:	2301      	movs	r3, #1
100048d8:	1c1c      	adds	r4, r3, #0
100048da:	68b8      	ldr	r0, [r7, #8]
100048dc:	2100      	movs	r1, #0
100048de:	f005 fa3b 	bl	10009d58 <__aeabi_fcmplt>
100048e2:	1e03      	subs	r3, r0, #0
100048e4:	d101      	bne.n	100048ea <Steering_Function+0x9e>
100048e6:	2300      	movs	r3, #0
100048e8:	1c1c      	adds	r4, r3, #0
100048ea:	b2e4      	uxtb	r4, r4
100048ec:	68b8      	ldr	r0, [r7, #8]
100048ee:	f007 ffb5 	bl	1000c85c <__aeabi_f2d>
100048f2:	1c0a      	adds	r2, r1, #0
100048f4:	1c01      	adds	r1, r0, #0
100048f6:	2301      	movs	r3, #1
100048f8:	1c1d      	adds	r5, r3, #0
100048fa:	1c08      	adds	r0, r1, #0
100048fc:	1c11      	adds	r1, r2, #0
100048fe:	4aa9      	ldr	r2, [pc, #676]	; (10004ba4 <Steering_Function+0x358>)
10004900:	4baa      	ldr	r3, [pc, #680]	; (10004bac <Steering_Function+0x360>)
10004902:	f005 fa03 	bl	10009d0c <__aeabi_dcmpgt>
10004906:	1e03      	subs	r3, r0, #0
10004908:	d101      	bne.n	1000490e <Steering_Function+0xc2>
1000490a:	2300      	movs	r3, #0
1000490c:	1c1d      	adds	r5, r3, #0
1000490e:	b2eb      	uxtb	r3, r5
10004910:	4023      	ands	r3, r4
10004912:	b2db      	uxtb	r3, r3
10004914:	2b00      	cmp	r3, #0
10004916:	d001      	beq.n	1000491c <Steering_Function+0xd0>
10004918:	2300      	movs	r3, #0
1000491a:	60bb      	str	r3, [r7, #8]

	switch(Steering_mode_cal) // options 'Front'; 'Rear'; '4_Wheel'; 'Carb'; 'Rotate'
1000491c:	1dfb      	adds	r3, r7, #7
1000491e:	781b      	ldrb	r3, [r3, #0]
10004920:	2b05      	cmp	r3, #5
10004922:	d901      	bls.n	10004928 <Steering_Function+0xdc>
10004924:	f000 fe7c 	bl	10005620 <Steering_Function+0xdd4>
10004928:	009a      	lsls	r2, r3, #2
1000492a:	4ba1      	ldr	r3, [pc, #644]	; (10004bb0 <Steering_Function+0x364>)
1000492c:	18d3      	adds	r3, r2, r3
1000492e:	681b      	ldr	r3, [r3, #0]
10004930:	469f      	mov	pc, r3
	{
		case FRONT://#############################################################
			// steering limits
			if(Steering_direction_cal > 50) Steering_direction_cal = 50;
10004932:	68f8      	ldr	r0, [r7, #12]
10004934:	499f      	ldr	r1, [pc, #636]	; (10004bb4 <Steering_Function+0x368>)
10004936:	f005 fa23 	bl	10009d80 <__aeabi_fcmpgt>
1000493a:	1e03      	subs	r3, r0, #0
1000493c:	d001      	beq.n	10004942 <Steering_Function+0xf6>
1000493e:	4b9d      	ldr	r3, [pc, #628]	; (10004bb4 <Steering_Function+0x368>)
10004940:	60fb      	str	r3, [r7, #12]
			if(Steering_direction_cal < -50) Steering_direction_cal = -50;
10004942:	68f8      	ldr	r0, [r7, #12]
10004944:	499c      	ldr	r1, [pc, #624]	; (10004bb8 <Steering_Function+0x36c>)
10004946:	f005 fa07 	bl	10009d58 <__aeabi_fcmplt>
1000494a:	1e03      	subs	r3, r0, #0
1000494c:	d001      	beq.n	10004952 <Steering_Function+0x106>
1000494e:	4b9a      	ldr	r3, [pc, #616]	; (10004bb8 <Steering_Function+0x36c>)
10004950:	60fb      	str	r3, [r7, #12]

			if(within_MAX_MIN(Steering_direction_cal,-5,5) == 0){// if not almost zero
10004952:	68fb      	ldr	r3, [r7, #12]
10004954:	4999      	ldr	r1, [pc, #612]	; (10004bbc <Steering_Function+0x370>)
10004956:	4a9a      	ldr	r2, [pc, #616]	; (10004bc0 <Steering_Function+0x374>)
10004958:	1c18      	adds	r0, r3, #0
1000495a:	f002 f911 	bl	10006b80 <within_MAX_MIN>
1000495e:	1c03      	adds	r3, r0, #0
10004960:	1c1a      	adds	r2, r3, #0
10004962:	2301      	movs	r3, #1
10004964:	4053      	eors	r3, r2
10004966:	b2db      	uxtb	r3, r3
10004968:	2b00      	cmp	r3, #0
1000496a:	d100      	bne.n	1000496e <Steering_Function+0x122>
1000496c:	e1bf      	b.n	10004cee <Steering_Function+0x4a2>
				// pre calc
				R_Turn = WHEEL_BASE / tan(Steering_direction_cal / RAD_TO_DEG); // to truni graduis converstion
1000496e:	68f8      	ldr	r0, [r7, #12]
10004970:	f007 ff74 	bl	1000c85c <__aeabi_f2d>
10004974:	1c03      	adds	r3, r0, #0
10004976:	1c0c      	adds	r4, r1, #0
10004978:	1c18      	adds	r0, r3, #0
1000497a:	1c21      	adds	r1, r4, #0
1000497c:	4a91      	ldr	r2, [pc, #580]	; (10004bc4 <Steering_Function+0x378>)
1000497e:	4b92      	ldr	r3, [pc, #584]	; (10004bc8 <Steering_Function+0x37c>)
10004980:	f006 fc76 	bl	1000b270 <__aeabi_ddiv>
10004984:	1c03      	adds	r3, r0, #0
10004986:	1c0c      	adds	r4, r1, #0
10004988:	1c18      	adds	r0, r3, #0
1000498a:	1c21      	adds	r1, r4, #0
1000498c:	f002 fc4a 	bl	10007224 <tan>
10004990:	1c03      	adds	r3, r0, #0
10004992:	1c0c      	adds	r4, r1, #0
10004994:	488d      	ldr	r0, [pc, #564]	; (10004bcc <Steering_Function+0x380>)
10004996:	498e      	ldr	r1, [pc, #568]	; (10004bd0 <Steering_Function+0x384>)
10004998:	1c1a      	adds	r2, r3, #0
1000499a:	1c23      	adds	r3, r4, #0
1000499c:	f006 fc68 	bl	1000b270 <__aeabi_ddiv>
100049a0:	1c03      	adds	r3, r0, #0
100049a2:	1c0c      	adds	r4, r1, #0
100049a4:	1c18      	adds	r0, r3, #0
100049a6:	1c21      	adds	r1, r4, #0
100049a8:	f007 ffac 	bl	1000c904 <__aeabi_d2f>
100049ac:	1c02      	adds	r2, r0, #0
100049ae:	4b7a      	ldr	r3, [pc, #488]	; (10004b98 <Steering_Function+0x34c>)
100049b0:	601a      	str	r2, [r3, #0]
				Speed_ratio = (2 * (copysign(R_Turn,1) + HALF_TRACK_WIDTH) * M_PI) / (2 * copysign(R_Turn,1) * M_PI);
100049b2:	4b79      	ldr	r3, [pc, #484]	; (10004b98 <Steering_Function+0x34c>)
100049b4:	681b      	ldr	r3, [r3, #0]
100049b6:	005b      	lsls	r3, r3, #1
100049b8:	085b      	lsrs	r3, r3, #1
100049ba:	1c18      	adds	r0, r3, #0
100049bc:	f007 ff4e 	bl	1000c85c <__aeabi_f2d>
100049c0:	1c03      	adds	r3, r0, #0
100049c2:	1c0c      	adds	r4, r1, #0
100049c4:	1c18      	adds	r0, r3, #0
100049c6:	1c21      	adds	r1, r4, #0
100049c8:	4a82      	ldr	r2, [pc, #520]	; (10004bd4 <Steering_Function+0x388>)
100049ca:	4b83      	ldr	r3, [pc, #524]	; (10004bd8 <Steering_Function+0x38c>)
100049cc:	f006 f928 	bl	1000ac20 <__aeabi_dadd>
100049d0:	1c03      	adds	r3, r0, #0
100049d2:	1c0c      	adds	r4, r1, #0
100049d4:	1c18      	adds	r0, r3, #0
100049d6:	1c21      	adds	r1, r4, #0
100049d8:	1c1a      	adds	r2, r3, #0
100049da:	1c23      	adds	r3, r4, #0
100049dc:	f006 f920 	bl	1000ac20 <__aeabi_dadd>
100049e0:	1c03      	adds	r3, r0, #0
100049e2:	1c0c      	adds	r4, r1, #0
100049e4:	1c18      	adds	r0, r3, #0
100049e6:	1c21      	adds	r1, r4, #0
100049e8:	4a7c      	ldr	r2, [pc, #496]	; (10004bdc <Steering_Function+0x390>)
100049ea:	4b7d      	ldr	r3, [pc, #500]	; (10004be0 <Steering_Function+0x394>)
100049ec:	f007 f87e 	bl	1000baec <__aeabi_dmul>
100049f0:	1c03      	adds	r3, r0, #0
100049f2:	1c0c      	adds	r4, r1, #0
100049f4:	1c1d      	adds	r5, r3, #0
100049f6:	1c26      	adds	r6, r4, #0
100049f8:	4b67      	ldr	r3, [pc, #412]	; (10004b98 <Steering_Function+0x34c>)
100049fa:	681b      	ldr	r3, [r3, #0]
100049fc:	005b      	lsls	r3, r3, #1
100049fe:	085b      	lsrs	r3, r3, #1
10004a00:	1c18      	adds	r0, r3, #0
10004a02:	f007 ff2b 	bl	1000c85c <__aeabi_f2d>
10004a06:	1c03      	adds	r3, r0, #0
10004a08:	1c0c      	adds	r4, r1, #0
10004a0a:	1c18      	adds	r0, r3, #0
10004a0c:	1c21      	adds	r1, r4, #0
10004a0e:	1c1a      	adds	r2, r3, #0
10004a10:	1c23      	adds	r3, r4, #0
10004a12:	f006 f905 	bl	1000ac20 <__aeabi_dadd>
10004a16:	1c03      	adds	r3, r0, #0
10004a18:	1c0c      	adds	r4, r1, #0
10004a1a:	1c18      	adds	r0, r3, #0
10004a1c:	1c21      	adds	r1, r4, #0
10004a1e:	4a6f      	ldr	r2, [pc, #444]	; (10004bdc <Steering_Function+0x390>)
10004a20:	4b6f      	ldr	r3, [pc, #444]	; (10004be0 <Steering_Function+0x394>)
10004a22:	f007 f863 	bl	1000baec <__aeabi_dmul>
10004a26:	1c03      	adds	r3, r0, #0
10004a28:	1c0c      	adds	r4, r1, #0
10004a2a:	1c28      	adds	r0, r5, #0
10004a2c:	1c31      	adds	r1, r6, #0
10004a2e:	1c1a      	adds	r2, r3, #0
10004a30:	1c23      	adds	r3, r4, #0
10004a32:	f006 fc1d 	bl	1000b270 <__aeabi_ddiv>
10004a36:	1c03      	adds	r3, r0, #0
10004a38:	1c0c      	adds	r4, r1, #0
10004a3a:	1c18      	adds	r0, r3, #0
10004a3c:	1c21      	adds	r1, r4, #0
10004a3e:	f007 ff61 	bl	1000c904 <__aeabi_d2f>
10004a42:	1c02      	adds	r2, r0, #0
10004a44:	4b55      	ldr	r3, [pc, #340]	; (10004b9c <Steering_Function+0x350>)
10004a46:	601a      	str	r2, [r3, #0]

				if((R_TRUN_MIN < R_Turn) && (R_Turn < R_TRUN_MAX)){
10004a48:	4b53      	ldr	r3, [pc, #332]	; (10004b98 <Steering_Function+0x34c>)
10004a4a:	681b      	ldr	r3, [r3, #0]
10004a4c:	1c18      	adds	r0, r3, #0
10004a4e:	f007 ff05 	bl	1000c85c <__aeabi_f2d>
10004a52:	1c03      	adds	r3, r0, #0
10004a54:	1c0c      	adds	r4, r1, #0
10004a56:	1c18      	adds	r0, r3, #0
10004a58:	1c21      	adds	r1, r4, #0
10004a5a:	4a52      	ldr	r2, [pc, #328]	; (10004ba4 <Steering_Function+0x358>)
10004a5c:	4b52      	ldr	r3, [pc, #328]	; (10004ba8 <Steering_Function+0x35c>)
10004a5e:	f005 f955 	bl	10009d0c <__aeabi_dcmpgt>
10004a62:	1e03      	subs	r3, r0, #0
10004a64:	d100      	bne.n	10004a68 <Steering_Function+0x21c>
10004a66:	e07c      	b.n	10004b62 <Steering_Function+0x316>
10004a68:	4b4b      	ldr	r3, [pc, #300]	; (10004b98 <Steering_Function+0x34c>)
10004a6a:	681b      	ldr	r3, [r3, #0]
10004a6c:	1c18      	adds	r0, r3, #0
10004a6e:	495d      	ldr	r1, [pc, #372]	; (10004be4 <Steering_Function+0x398>)
10004a70:	f005 f972 	bl	10009d58 <__aeabi_fcmplt>
10004a74:	1e03      	subs	r3, r0, #0
10004a76:	d074      	beq.n	10004b62 <Steering_Function+0x316>
					angle_fl = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // out wheel
10004a78:	4b47      	ldr	r3, [pc, #284]	; (10004b98 <Steering_Function+0x34c>)
10004a7a:	681b      	ldr	r3, [r3, #0]
10004a7c:	1c18      	adds	r0, r3, #0
10004a7e:	f007 feed 	bl	1000c85c <__aeabi_f2d>
10004a82:	1c03      	adds	r3, r0, #0
10004a84:	1c0c      	adds	r4, r1, #0
10004a86:	1c18      	adds	r0, r3, #0
10004a88:	1c21      	adds	r1, r4, #0
10004a8a:	4a52      	ldr	r2, [pc, #328]	; (10004bd4 <Steering_Function+0x388>)
10004a8c:	4b52      	ldr	r3, [pc, #328]	; (10004bd8 <Steering_Function+0x38c>)
10004a8e:	f007 fac7 	bl	1000c020 <__aeabi_dsub>
10004a92:	1c03      	adds	r3, r0, #0
10004a94:	1c0c      	adds	r4, r1, #0
10004a96:	484d      	ldr	r0, [pc, #308]	; (10004bcc <Steering_Function+0x380>)
10004a98:	494d      	ldr	r1, [pc, #308]	; (10004bd0 <Steering_Function+0x384>)
10004a9a:	1c1a      	adds	r2, r3, #0
10004a9c:	1c23      	adds	r3, r4, #0
10004a9e:	f006 fbe7 	bl	1000b270 <__aeabi_ddiv>
10004aa2:	1c03      	adds	r3, r0, #0
10004aa4:	1c0c      	adds	r4, r1, #0
10004aa6:	1c18      	adds	r0, r3, #0
10004aa8:	1c21      	adds	r1, r4, #0
10004aaa:	f002 f97b 	bl	10006da4 <atan>
10004aae:	1c03      	adds	r3, r0, #0
10004ab0:	1c0c      	adds	r4, r1, #0
10004ab2:	1c18      	adds	r0, r3, #0
10004ab4:	1c21      	adds	r1, r4, #0
10004ab6:	4a43      	ldr	r2, [pc, #268]	; (10004bc4 <Steering_Function+0x378>)
10004ab8:	4b43      	ldr	r3, [pc, #268]	; (10004bc8 <Steering_Function+0x37c>)
10004aba:	f007 f817 	bl	1000baec <__aeabi_dmul>
10004abe:	1c03      	adds	r3, r0, #0
10004ac0:	1c0c      	adds	r4, r1, #0
10004ac2:	1c18      	adds	r0, r3, #0
10004ac4:	1c21      	adds	r1, r4, #0
10004ac6:	f007 ff1d 	bl	1000c904 <__aeabi_d2f>
10004aca:	1c02      	adds	r2, r0, #0
10004acc:	4b46      	ldr	r3, [pc, #280]	; (10004be8 <Steering_Function+0x39c>)
10004ace:	601a      	str	r2, [r3, #0]
					angle_fr = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // in wheel
10004ad0:	4b31      	ldr	r3, [pc, #196]	; (10004b98 <Steering_Function+0x34c>)
10004ad2:	681b      	ldr	r3, [r3, #0]
10004ad4:	1c18      	adds	r0, r3, #0
10004ad6:	f007 fec1 	bl	1000c85c <__aeabi_f2d>
10004ada:	1c03      	adds	r3, r0, #0
10004adc:	1c0c      	adds	r4, r1, #0
10004ade:	1c18      	adds	r0, r3, #0
10004ae0:	1c21      	adds	r1, r4, #0
10004ae2:	4a3c      	ldr	r2, [pc, #240]	; (10004bd4 <Steering_Function+0x388>)
10004ae4:	4b3c      	ldr	r3, [pc, #240]	; (10004bd8 <Steering_Function+0x38c>)
10004ae6:	f006 f89b 	bl	1000ac20 <__aeabi_dadd>
10004aea:	1c03      	adds	r3, r0, #0
10004aec:	1c0c      	adds	r4, r1, #0
10004aee:	4837      	ldr	r0, [pc, #220]	; (10004bcc <Steering_Function+0x380>)
10004af0:	4937      	ldr	r1, [pc, #220]	; (10004bd0 <Steering_Function+0x384>)
10004af2:	1c1a      	adds	r2, r3, #0
10004af4:	1c23      	adds	r3, r4, #0
10004af6:	f006 fbbb 	bl	1000b270 <__aeabi_ddiv>
10004afa:	1c03      	adds	r3, r0, #0
10004afc:	1c0c      	adds	r4, r1, #0
10004afe:	1c18      	adds	r0, r3, #0
10004b00:	1c21      	adds	r1, r4, #0
10004b02:	f002 f94f 	bl	10006da4 <atan>
10004b06:	1c03      	adds	r3, r0, #0
10004b08:	1c0c      	adds	r4, r1, #0
10004b0a:	1c18      	adds	r0, r3, #0
10004b0c:	1c21      	adds	r1, r4, #0
10004b0e:	4a2d      	ldr	r2, [pc, #180]	; (10004bc4 <Steering_Function+0x378>)
10004b10:	4b2d      	ldr	r3, [pc, #180]	; (10004bc8 <Steering_Function+0x37c>)
10004b12:	f006 ffeb 	bl	1000baec <__aeabi_dmul>
10004b16:	1c03      	adds	r3, r0, #0
10004b18:	1c0c      	adds	r4, r1, #0
10004b1a:	1c18      	adds	r0, r3, #0
10004b1c:	1c21      	adds	r1, r4, #0
10004b1e:	f007 fef1 	bl	1000c904 <__aeabi_d2f>
10004b22:	1c02      	adds	r2, r0, #0
10004b24:	4b31      	ldr	r3, [pc, #196]	; (10004bec <Steering_Function+0x3a0>)
10004b26:	601a      	str	r2, [r3, #0]

					speed_fl = Driving_speed_cal / Speed_ratio;
10004b28:	4b1c      	ldr	r3, [pc, #112]	; (10004b9c <Steering_Function+0x350>)
10004b2a:	681b      	ldr	r3, [r3, #0]
10004b2c:	68b8      	ldr	r0, [r7, #8]
10004b2e:	1c19      	adds	r1, r3, #0
10004b30:	f005 fb6c 	bl	1000a20c <__aeabi_fdiv>
10004b34:	1c03      	adds	r3, r0, #0
10004b36:	1c1a      	adds	r2, r3, #0
10004b38:	4b2d      	ldr	r3, [pc, #180]	; (10004bf0 <Steering_Function+0x3a4>)
10004b3a:	601a      	str	r2, [r3, #0]
					speed_fr = Driving_speed_cal * Speed_ratio;
10004b3c:	4b17      	ldr	r3, [pc, #92]	; (10004b9c <Steering_Function+0x350>)
10004b3e:	681b      	ldr	r3, [r3, #0]
10004b40:	1c18      	adds	r0, r3, #0
10004b42:	68b9      	ldr	r1, [r7, #8]
10004b44:	f005 fd54 	bl	1000a5f0 <__aeabi_fmul>
10004b48:	1c03      	adds	r3, r0, #0
10004b4a:	1c1a      	adds	r2, r3, #0
10004b4c:	4b29      	ldr	r3, [pc, #164]	; (10004bf4 <Steering_Function+0x3a8>)
10004b4e:	601a      	str	r2, [r3, #0]


					speed_rl = speed_fl;
10004b50:	4b27      	ldr	r3, [pc, #156]	; (10004bf0 <Steering_Function+0x3a4>)
10004b52:	681a      	ldr	r2, [r3, #0]
10004b54:	4b28      	ldr	r3, [pc, #160]	; (10004bf8 <Steering_Function+0x3ac>)
10004b56:	601a      	str	r2, [r3, #0]
					speed_rr = speed_fr;
10004b58:	4b26      	ldr	r3, [pc, #152]	; (10004bf4 <Steering_Function+0x3a8>)
10004b5a:	681a      	ldr	r2, [r3, #0]
10004b5c:	4b27      	ldr	r3, [pc, #156]	; (10004bfc <Steering_Function+0x3b0>)
10004b5e:	601a      	str	r2, [r3, #0]
10004b60:	e0d7      	b.n	10004d12 <Steering_Function+0x4c6>
				}
				else if((- R_TRUN_MIN > R_Turn) && (R_Turn > -R_TRUN_MAX)){
10004b62:	4b0d      	ldr	r3, [pc, #52]	; (10004b98 <Steering_Function+0x34c>)
10004b64:	681b      	ldr	r3, [r3, #0]
10004b66:	1c18      	adds	r0, r3, #0
10004b68:	f007 fe78 	bl	1000c85c <__aeabi_f2d>
10004b6c:	1c03      	adds	r3, r0, #0
10004b6e:	1c0c      	adds	r4, r1, #0
10004b70:	1c18      	adds	r0, r3, #0
10004b72:	1c21      	adds	r1, r4, #0
10004b74:	4a0b      	ldr	r2, [pc, #44]	; (10004ba4 <Steering_Function+0x358>)
10004b76:	4b0d      	ldr	r3, [pc, #52]	; (10004bac <Steering_Function+0x360>)
10004b78:	f005 f8b4 	bl	10009ce4 <__aeabi_dcmplt>
10004b7c:	1e03      	subs	r3, r0, #0
10004b7e:	d100      	bne.n	10004b82 <Steering_Function+0x336>
10004b80:	e0c7      	b.n	10004d12 <Steering_Function+0x4c6>
10004b82:	4b05      	ldr	r3, [pc, #20]	; (10004b98 <Steering_Function+0x34c>)
10004b84:	681b      	ldr	r3, [r3, #0]
10004b86:	1c18      	adds	r0, r3, #0
10004b88:	491d      	ldr	r1, [pc, #116]	; (10004c00 <Steering_Function+0x3b4>)
10004b8a:	f005 f8f9 	bl	10009d80 <__aeabi_fcmpgt>
10004b8e:	1e03      	subs	r3, r0, #0
10004b90:	d138      	bne.n	10004c04 <Steering_Function+0x3b8>
10004b92:	e0be      	b.n	10004d12 <Steering_Function+0x4c6>
10004b94:	20000a8c 	.word	0x20000a8c
10004b98:	200009fc 	.word	0x200009fc
10004b9c:	20000a00 	.word	0x20000a00
10004ba0:	bfc00000 	.word	0xbfc00000
10004ba4:	9999999a 	.word	0x9999999a
10004ba8:	3fa99999 	.word	0x3fa99999
10004bac:	bfa99999 	.word	0xbfa99999
10004bb0:	1000d0e8 	.word	0x1000d0e8
10004bb4:	42480000 	.word	0x42480000
10004bb8:	c2480000 	.word	0xc2480000
10004bbc:	c0a00000 	.word	0xc0a00000
10004bc0:	40a00000 	.word	0x40a00000
10004bc4:	2584f4c7 	.word	0x2584f4c7
10004bc8:	404ca61e 	.word	0x404ca61e
10004bcc:	3126e979 	.word	0x3126e979
10004bd0:	3fdcac08 	.word	0x3fdcac08
10004bd4:	1a9fbe77 	.word	0x1a9fbe77
10004bd8:	3fc4dd2f 	.word	0x3fc4dd2f
10004bdc:	54442d18 	.word	0x54442d18
10004be0:	400921fb 	.word	0x400921fb
10004be4:	41a00000 	.word	0x41a00000
10004be8:	20000a14 	.word	0x20000a14
10004bec:	20000a18 	.word	0x20000a18
10004bf0:	20000a04 	.word	0x20000a04
10004bf4:	20000a08 	.word	0x20000a08
10004bf8:	20000a0c 	.word	0x20000a0c
10004bfc:	20000a10 	.word	0x20000a10
10004c00:	c1a00000 	.word	0xc1a00000
					angle_fl = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // in wheel
10004c04:	4bdf      	ldr	r3, [pc, #892]	; (10004f84 <Steering_Function+0x738>)
10004c06:	681b      	ldr	r3, [r3, #0]
10004c08:	1c18      	adds	r0, r3, #0
10004c0a:	f007 fe27 	bl	1000c85c <__aeabi_f2d>
10004c0e:	1c03      	adds	r3, r0, #0
10004c10:	1c0c      	adds	r4, r1, #0
10004c12:	1c18      	adds	r0, r3, #0
10004c14:	1c21      	adds	r1, r4, #0
10004c16:	4adc      	ldr	r2, [pc, #880]	; (10004f88 <Steering_Function+0x73c>)
10004c18:	4bdc      	ldr	r3, [pc, #880]	; (10004f8c <Steering_Function+0x740>)
10004c1a:	f007 fa01 	bl	1000c020 <__aeabi_dsub>
10004c1e:	1c03      	adds	r3, r0, #0
10004c20:	1c0c      	adds	r4, r1, #0
10004c22:	48db      	ldr	r0, [pc, #876]	; (10004f90 <Steering_Function+0x744>)
10004c24:	49db      	ldr	r1, [pc, #876]	; (10004f94 <Steering_Function+0x748>)
10004c26:	1c1a      	adds	r2, r3, #0
10004c28:	1c23      	adds	r3, r4, #0
10004c2a:	f006 fb21 	bl	1000b270 <__aeabi_ddiv>
10004c2e:	1c03      	adds	r3, r0, #0
10004c30:	1c0c      	adds	r4, r1, #0
10004c32:	1c18      	adds	r0, r3, #0
10004c34:	1c21      	adds	r1, r4, #0
10004c36:	f002 f8b5 	bl	10006da4 <atan>
10004c3a:	1c03      	adds	r3, r0, #0
10004c3c:	1c0c      	adds	r4, r1, #0
10004c3e:	1c18      	adds	r0, r3, #0
10004c40:	1c21      	adds	r1, r4, #0
10004c42:	4ad5      	ldr	r2, [pc, #852]	; (10004f98 <Steering_Function+0x74c>)
10004c44:	4bd5      	ldr	r3, [pc, #852]	; (10004f9c <Steering_Function+0x750>)
10004c46:	f006 ff51 	bl	1000baec <__aeabi_dmul>
10004c4a:	1c03      	adds	r3, r0, #0
10004c4c:	1c0c      	adds	r4, r1, #0
10004c4e:	1c18      	adds	r0, r3, #0
10004c50:	1c21      	adds	r1, r4, #0
10004c52:	f007 fe57 	bl	1000c904 <__aeabi_d2f>
10004c56:	1c02      	adds	r2, r0, #0
10004c58:	4bd1      	ldr	r3, [pc, #836]	; (10004fa0 <Steering_Function+0x754>)
10004c5a:	601a      	str	r2, [r3, #0]
					angle_fr = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn  + HALF_TRACK_WIDTH)); // out wheel
10004c5c:	4bc9      	ldr	r3, [pc, #804]	; (10004f84 <Steering_Function+0x738>)
10004c5e:	681b      	ldr	r3, [r3, #0]
10004c60:	1c18      	adds	r0, r3, #0
10004c62:	f007 fdfb 	bl	1000c85c <__aeabi_f2d>
10004c66:	1c03      	adds	r3, r0, #0
10004c68:	1c0c      	adds	r4, r1, #0
10004c6a:	1c18      	adds	r0, r3, #0
10004c6c:	1c21      	adds	r1, r4, #0
10004c6e:	4ac6      	ldr	r2, [pc, #792]	; (10004f88 <Steering_Function+0x73c>)
10004c70:	4bc6      	ldr	r3, [pc, #792]	; (10004f8c <Steering_Function+0x740>)
10004c72:	f005 ffd5 	bl	1000ac20 <__aeabi_dadd>
10004c76:	1c03      	adds	r3, r0, #0
10004c78:	1c0c      	adds	r4, r1, #0
10004c7a:	48c5      	ldr	r0, [pc, #788]	; (10004f90 <Steering_Function+0x744>)
10004c7c:	49c5      	ldr	r1, [pc, #788]	; (10004f94 <Steering_Function+0x748>)
10004c7e:	1c1a      	adds	r2, r3, #0
10004c80:	1c23      	adds	r3, r4, #0
10004c82:	f006 faf5 	bl	1000b270 <__aeabi_ddiv>
10004c86:	1c03      	adds	r3, r0, #0
10004c88:	1c0c      	adds	r4, r1, #0
10004c8a:	1c18      	adds	r0, r3, #0
10004c8c:	1c21      	adds	r1, r4, #0
10004c8e:	f002 f889 	bl	10006da4 <atan>
10004c92:	1c03      	adds	r3, r0, #0
10004c94:	1c0c      	adds	r4, r1, #0
10004c96:	1c18      	adds	r0, r3, #0
10004c98:	1c21      	adds	r1, r4, #0
10004c9a:	4abf      	ldr	r2, [pc, #764]	; (10004f98 <Steering_Function+0x74c>)
10004c9c:	4bbf      	ldr	r3, [pc, #764]	; (10004f9c <Steering_Function+0x750>)
10004c9e:	f006 ff25 	bl	1000baec <__aeabi_dmul>
10004ca2:	1c03      	adds	r3, r0, #0
10004ca4:	1c0c      	adds	r4, r1, #0
10004ca6:	1c18      	adds	r0, r3, #0
10004ca8:	1c21      	adds	r1, r4, #0
10004caa:	f007 fe2b 	bl	1000c904 <__aeabi_d2f>
10004cae:	1c02      	adds	r2, r0, #0
10004cb0:	4bbc      	ldr	r3, [pc, #752]	; (10004fa4 <Steering_Function+0x758>)
10004cb2:	601a      	str	r2, [r3, #0]

					speed_fl = Driving_speed_cal * Speed_ratio;
10004cb4:	4bbc      	ldr	r3, [pc, #752]	; (10004fa8 <Steering_Function+0x75c>)
10004cb6:	681b      	ldr	r3, [r3, #0]
10004cb8:	1c18      	adds	r0, r3, #0
10004cba:	68b9      	ldr	r1, [r7, #8]
10004cbc:	f005 fc98 	bl	1000a5f0 <__aeabi_fmul>
10004cc0:	1c03      	adds	r3, r0, #0
10004cc2:	1c1a      	adds	r2, r3, #0
10004cc4:	4bb9      	ldr	r3, [pc, #740]	; (10004fac <Steering_Function+0x760>)
10004cc6:	601a      	str	r2, [r3, #0]
					speed_fr = Driving_speed_cal / Speed_ratio;
10004cc8:	4bb7      	ldr	r3, [pc, #732]	; (10004fa8 <Steering_Function+0x75c>)
10004cca:	681b      	ldr	r3, [r3, #0]
10004ccc:	68b8      	ldr	r0, [r7, #8]
10004cce:	1c19      	adds	r1, r3, #0
10004cd0:	f005 fa9c 	bl	1000a20c <__aeabi_fdiv>
10004cd4:	1c03      	adds	r3, r0, #0
10004cd6:	1c1a      	adds	r2, r3, #0
10004cd8:	4bb5      	ldr	r3, [pc, #724]	; (10004fb0 <Steering_Function+0x764>)
10004cda:	601a      	str	r2, [r3, #0]


					speed_rl = speed_fl;
10004cdc:	4bb3      	ldr	r3, [pc, #716]	; (10004fac <Steering_Function+0x760>)
10004cde:	681a      	ldr	r2, [r3, #0]
10004ce0:	4bb4      	ldr	r3, [pc, #720]	; (10004fb4 <Steering_Function+0x768>)
10004ce2:	601a      	str	r2, [r3, #0]
					speed_rr = speed_fr;
10004ce4:	4bb2      	ldr	r3, [pc, #712]	; (10004fb0 <Steering_Function+0x764>)
10004ce6:	681a      	ldr	r2, [r3, #0]
10004ce8:	4bb3      	ldr	r3, [pc, #716]	; (10004fb8 <Steering_Function+0x76c>)
10004cea:	601a      	str	r2, [r3, #0]
10004cec:	e011      	b.n	10004d12 <Steering_Function+0x4c6>
				}
			}
			else{
				angle_fl = 0;
10004cee:	4bac      	ldr	r3, [pc, #688]	; (10004fa0 <Steering_Function+0x754>)
10004cf0:	2200      	movs	r2, #0
10004cf2:	601a      	str	r2, [r3, #0]
				angle_fr = 0;
10004cf4:	4bab      	ldr	r3, [pc, #684]	; (10004fa4 <Steering_Function+0x758>)
10004cf6:	2200      	movs	r2, #0
10004cf8:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal;
10004cfa:	4bac      	ldr	r3, [pc, #688]	; (10004fac <Steering_Function+0x760>)
10004cfc:	68ba      	ldr	r2, [r7, #8]
10004cfe:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal;
10004d00:	4bab      	ldr	r3, [pc, #684]	; (10004fb0 <Steering_Function+0x764>)
10004d02:	68ba      	ldr	r2, [r7, #8]
10004d04:	601a      	str	r2, [r3, #0]
				speed_rl = Driving_speed_cal;
10004d06:	4bab      	ldr	r3, [pc, #684]	; (10004fb4 <Steering_Function+0x768>)
10004d08:	68ba      	ldr	r2, [r7, #8]
10004d0a:	601a      	str	r2, [r3, #0]
				speed_rr = Driving_speed_cal;
10004d0c:	4baa      	ldr	r3, [pc, #680]	; (10004fb8 <Steering_Function+0x76c>)
10004d0e:	68ba      	ldr	r2, [r7, #8]
10004d10:	601a      	str	r2, [r3, #0]
			}

			//rear axle
			angle_rl = 0;
10004d12:	4baa      	ldr	r3, [pc, #680]	; (10004fbc <Steering_Function+0x770>)
10004d14:	2200      	movs	r2, #0
10004d16:	601a      	str	r2, [r3, #0]
			angle_rr = 0;
10004d18:	4ba9      	ldr	r3, [pc, #676]	; (10004fc0 <Steering_Function+0x774>)
10004d1a:	2200      	movs	r2, #0
10004d1c:	601a      	str	r2, [r3, #0]
			break;
10004d1e:	f000 fd01 	bl	10005724 <Steering_Function+0xed8>

		case BACK:// rear #############################################################
			// steering limits
			if(Steering_direction_cal > 50) Steering_direction_cal = 50;
10004d22:	68f8      	ldr	r0, [r7, #12]
10004d24:	49a7      	ldr	r1, [pc, #668]	; (10004fc4 <Steering_Function+0x778>)
10004d26:	f005 f82b 	bl	10009d80 <__aeabi_fcmpgt>
10004d2a:	1e03      	subs	r3, r0, #0
10004d2c:	d001      	beq.n	10004d32 <Steering_Function+0x4e6>
10004d2e:	4ba5      	ldr	r3, [pc, #660]	; (10004fc4 <Steering_Function+0x778>)
10004d30:	60fb      	str	r3, [r7, #12]
			if(Steering_direction_cal < -50) Steering_direction_cal = -50;
10004d32:	68f8      	ldr	r0, [r7, #12]
10004d34:	49a4      	ldr	r1, [pc, #656]	; (10004fc8 <Steering_Function+0x77c>)
10004d36:	f005 f80f 	bl	10009d58 <__aeabi_fcmplt>
10004d3a:	1e03      	subs	r3, r0, #0
10004d3c:	d001      	beq.n	10004d42 <Steering_Function+0x4f6>
10004d3e:	4ba2      	ldr	r3, [pc, #648]	; (10004fc8 <Steering_Function+0x77c>)
10004d40:	60fb      	str	r3, [r7, #12]

			if(within_MAX_MIN(Steering_direction_cal,-5,5) == 0){// if not almost zero
10004d42:	68fb      	ldr	r3, [r7, #12]
10004d44:	49a1      	ldr	r1, [pc, #644]	; (10004fcc <Steering_Function+0x780>)
10004d46:	4aa2      	ldr	r2, [pc, #648]	; (10004fd0 <Steering_Function+0x784>)
10004d48:	1c18      	adds	r0, r3, #0
10004d4a:	f001 ff19 	bl	10006b80 <within_MAX_MIN>
10004d4e:	1c03      	adds	r3, r0, #0
10004d50:	1c1a      	adds	r2, r3, #0
10004d52:	2301      	movs	r3, #1
10004d54:	4053      	eors	r3, r2
10004d56:	b2db      	uxtb	r3, r3
10004d58:	2b00      	cmp	r3, #0
10004d5a:	d100      	bne.n	10004d5e <Steering_Function+0x512>
10004d5c:	e1bf      	b.n	100050de <Steering_Function+0x892>
				// pre calc
				R_Turn = WHEEL_BASE / tan(Steering_direction_cal / RAD_TO_DEG); // to truni graduis converstion
10004d5e:	68f8      	ldr	r0, [r7, #12]
10004d60:	f007 fd7c 	bl	1000c85c <__aeabi_f2d>
10004d64:	1c03      	adds	r3, r0, #0
10004d66:	1c0c      	adds	r4, r1, #0
10004d68:	1c18      	adds	r0, r3, #0
10004d6a:	1c21      	adds	r1, r4, #0
10004d6c:	4a8a      	ldr	r2, [pc, #552]	; (10004f98 <Steering_Function+0x74c>)
10004d6e:	4b8b      	ldr	r3, [pc, #556]	; (10004f9c <Steering_Function+0x750>)
10004d70:	f006 fa7e 	bl	1000b270 <__aeabi_ddiv>
10004d74:	1c03      	adds	r3, r0, #0
10004d76:	1c0c      	adds	r4, r1, #0
10004d78:	1c18      	adds	r0, r3, #0
10004d7a:	1c21      	adds	r1, r4, #0
10004d7c:	f002 fa52 	bl	10007224 <tan>
10004d80:	1c03      	adds	r3, r0, #0
10004d82:	1c0c      	adds	r4, r1, #0
10004d84:	4882      	ldr	r0, [pc, #520]	; (10004f90 <Steering_Function+0x744>)
10004d86:	4983      	ldr	r1, [pc, #524]	; (10004f94 <Steering_Function+0x748>)
10004d88:	1c1a      	adds	r2, r3, #0
10004d8a:	1c23      	adds	r3, r4, #0
10004d8c:	f006 fa70 	bl	1000b270 <__aeabi_ddiv>
10004d90:	1c03      	adds	r3, r0, #0
10004d92:	1c0c      	adds	r4, r1, #0
10004d94:	1c18      	adds	r0, r3, #0
10004d96:	1c21      	adds	r1, r4, #0
10004d98:	f007 fdb4 	bl	1000c904 <__aeabi_d2f>
10004d9c:	1c02      	adds	r2, r0, #0
10004d9e:	4b79      	ldr	r3, [pc, #484]	; (10004f84 <Steering_Function+0x738>)
10004da0:	601a      	str	r2, [r3, #0]
				Speed_ratio = (2 * (copysign(R_Turn,1) + HALF_TRACK_WIDTH) * M_PI) / (2 * copysign(R_Turn,1) * M_PI);
10004da2:	4b78      	ldr	r3, [pc, #480]	; (10004f84 <Steering_Function+0x738>)
10004da4:	681b      	ldr	r3, [r3, #0]
10004da6:	005b      	lsls	r3, r3, #1
10004da8:	085b      	lsrs	r3, r3, #1
10004daa:	1c18      	adds	r0, r3, #0
10004dac:	f007 fd56 	bl	1000c85c <__aeabi_f2d>
10004db0:	1c03      	adds	r3, r0, #0
10004db2:	1c0c      	adds	r4, r1, #0
10004db4:	1c18      	adds	r0, r3, #0
10004db6:	1c21      	adds	r1, r4, #0
10004db8:	4a73      	ldr	r2, [pc, #460]	; (10004f88 <Steering_Function+0x73c>)
10004dba:	4b74      	ldr	r3, [pc, #464]	; (10004f8c <Steering_Function+0x740>)
10004dbc:	f005 ff30 	bl	1000ac20 <__aeabi_dadd>
10004dc0:	1c03      	adds	r3, r0, #0
10004dc2:	1c0c      	adds	r4, r1, #0
10004dc4:	1c18      	adds	r0, r3, #0
10004dc6:	1c21      	adds	r1, r4, #0
10004dc8:	1c1a      	adds	r2, r3, #0
10004dca:	1c23      	adds	r3, r4, #0
10004dcc:	f005 ff28 	bl	1000ac20 <__aeabi_dadd>
10004dd0:	1c03      	adds	r3, r0, #0
10004dd2:	1c0c      	adds	r4, r1, #0
10004dd4:	1c18      	adds	r0, r3, #0
10004dd6:	1c21      	adds	r1, r4, #0
10004dd8:	4a7e      	ldr	r2, [pc, #504]	; (10004fd4 <Steering_Function+0x788>)
10004dda:	4b7f      	ldr	r3, [pc, #508]	; (10004fd8 <Steering_Function+0x78c>)
10004ddc:	f006 fe86 	bl	1000baec <__aeabi_dmul>
10004de0:	1c03      	adds	r3, r0, #0
10004de2:	1c0c      	adds	r4, r1, #0
10004de4:	1c1d      	adds	r5, r3, #0
10004de6:	1c26      	adds	r6, r4, #0
10004de8:	4b66      	ldr	r3, [pc, #408]	; (10004f84 <Steering_Function+0x738>)
10004dea:	681b      	ldr	r3, [r3, #0]
10004dec:	005b      	lsls	r3, r3, #1
10004dee:	085b      	lsrs	r3, r3, #1
10004df0:	1c18      	adds	r0, r3, #0
10004df2:	f007 fd33 	bl	1000c85c <__aeabi_f2d>
10004df6:	1c03      	adds	r3, r0, #0
10004df8:	1c0c      	adds	r4, r1, #0
10004dfa:	1c18      	adds	r0, r3, #0
10004dfc:	1c21      	adds	r1, r4, #0
10004dfe:	1c1a      	adds	r2, r3, #0
10004e00:	1c23      	adds	r3, r4, #0
10004e02:	f005 ff0d 	bl	1000ac20 <__aeabi_dadd>
10004e06:	1c03      	adds	r3, r0, #0
10004e08:	1c0c      	adds	r4, r1, #0
10004e0a:	1c18      	adds	r0, r3, #0
10004e0c:	1c21      	adds	r1, r4, #0
10004e0e:	4a71      	ldr	r2, [pc, #452]	; (10004fd4 <Steering_Function+0x788>)
10004e10:	4b71      	ldr	r3, [pc, #452]	; (10004fd8 <Steering_Function+0x78c>)
10004e12:	f006 fe6b 	bl	1000baec <__aeabi_dmul>
10004e16:	1c03      	adds	r3, r0, #0
10004e18:	1c0c      	adds	r4, r1, #0
10004e1a:	1c28      	adds	r0, r5, #0
10004e1c:	1c31      	adds	r1, r6, #0
10004e1e:	1c1a      	adds	r2, r3, #0
10004e20:	1c23      	adds	r3, r4, #0
10004e22:	f006 fa25 	bl	1000b270 <__aeabi_ddiv>
10004e26:	1c03      	adds	r3, r0, #0
10004e28:	1c0c      	adds	r4, r1, #0
10004e2a:	1c18      	adds	r0, r3, #0
10004e2c:	1c21      	adds	r1, r4, #0
10004e2e:	f007 fd69 	bl	1000c904 <__aeabi_d2f>
10004e32:	1c02      	adds	r2, r0, #0
10004e34:	4b5c      	ldr	r3, [pc, #368]	; (10004fa8 <Steering_Function+0x75c>)
10004e36:	601a      	str	r2, [r3, #0]

				if((R_TRUN_MIN < R_Turn) && (R_Turn < R_TRUN_MAX)){
10004e38:	4b52      	ldr	r3, [pc, #328]	; (10004f84 <Steering_Function+0x738>)
10004e3a:	681b      	ldr	r3, [r3, #0]
10004e3c:	1c18      	adds	r0, r3, #0
10004e3e:	f007 fd0d 	bl	1000c85c <__aeabi_f2d>
10004e42:	1c03      	adds	r3, r0, #0
10004e44:	1c0c      	adds	r4, r1, #0
10004e46:	1c18      	adds	r0, r3, #0
10004e48:	1c21      	adds	r1, r4, #0
10004e4a:	4a64      	ldr	r2, [pc, #400]	; (10004fdc <Steering_Function+0x790>)
10004e4c:	4b64      	ldr	r3, [pc, #400]	; (10004fe0 <Steering_Function+0x794>)
10004e4e:	f004 ff5d 	bl	10009d0c <__aeabi_dcmpgt>
10004e52:	1e03      	subs	r3, r0, #0
10004e54:	d100      	bne.n	10004e58 <Steering_Function+0x60c>
10004e56:	e07c      	b.n	10004f52 <Steering_Function+0x706>
10004e58:	4b4a      	ldr	r3, [pc, #296]	; (10004f84 <Steering_Function+0x738>)
10004e5a:	681b      	ldr	r3, [r3, #0]
10004e5c:	1c18      	adds	r0, r3, #0
10004e5e:	4961      	ldr	r1, [pc, #388]	; (10004fe4 <Steering_Function+0x798>)
10004e60:	f004 ff7a 	bl	10009d58 <__aeabi_fcmplt>
10004e64:	1e03      	subs	r3, r0, #0
10004e66:	d074      	beq.n	10004f52 <Steering_Function+0x706>
					angle_rl = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // out wheel
10004e68:	4b46      	ldr	r3, [pc, #280]	; (10004f84 <Steering_Function+0x738>)
10004e6a:	681b      	ldr	r3, [r3, #0]
10004e6c:	1c18      	adds	r0, r3, #0
10004e6e:	f007 fcf5 	bl	1000c85c <__aeabi_f2d>
10004e72:	1c03      	adds	r3, r0, #0
10004e74:	1c0c      	adds	r4, r1, #0
10004e76:	1c18      	adds	r0, r3, #0
10004e78:	1c21      	adds	r1, r4, #0
10004e7a:	4a43      	ldr	r2, [pc, #268]	; (10004f88 <Steering_Function+0x73c>)
10004e7c:	4b43      	ldr	r3, [pc, #268]	; (10004f8c <Steering_Function+0x740>)
10004e7e:	f007 f8cf 	bl	1000c020 <__aeabi_dsub>
10004e82:	1c03      	adds	r3, r0, #0
10004e84:	1c0c      	adds	r4, r1, #0
10004e86:	4842      	ldr	r0, [pc, #264]	; (10004f90 <Steering_Function+0x744>)
10004e88:	4942      	ldr	r1, [pc, #264]	; (10004f94 <Steering_Function+0x748>)
10004e8a:	1c1a      	adds	r2, r3, #0
10004e8c:	1c23      	adds	r3, r4, #0
10004e8e:	f006 f9ef 	bl	1000b270 <__aeabi_ddiv>
10004e92:	1c03      	adds	r3, r0, #0
10004e94:	1c0c      	adds	r4, r1, #0
10004e96:	1c18      	adds	r0, r3, #0
10004e98:	1c21      	adds	r1, r4, #0
10004e9a:	f001 ff83 	bl	10006da4 <atan>
10004e9e:	1c03      	adds	r3, r0, #0
10004ea0:	1c0c      	adds	r4, r1, #0
10004ea2:	1c18      	adds	r0, r3, #0
10004ea4:	1c21      	adds	r1, r4, #0
10004ea6:	4a3c      	ldr	r2, [pc, #240]	; (10004f98 <Steering_Function+0x74c>)
10004ea8:	4b4f      	ldr	r3, [pc, #316]	; (10004fe8 <Steering_Function+0x79c>)
10004eaa:	f006 fe1f 	bl	1000baec <__aeabi_dmul>
10004eae:	1c03      	adds	r3, r0, #0
10004eb0:	1c0c      	adds	r4, r1, #0
10004eb2:	1c18      	adds	r0, r3, #0
10004eb4:	1c21      	adds	r1, r4, #0
10004eb6:	f007 fd25 	bl	1000c904 <__aeabi_d2f>
10004eba:	1c02      	adds	r2, r0, #0
10004ebc:	4b3f      	ldr	r3, [pc, #252]	; (10004fbc <Steering_Function+0x770>)
10004ebe:	601a      	str	r2, [r3, #0]
					angle_rr = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // in wheel
10004ec0:	4b30      	ldr	r3, [pc, #192]	; (10004f84 <Steering_Function+0x738>)
10004ec2:	681b      	ldr	r3, [r3, #0]
10004ec4:	1c18      	adds	r0, r3, #0
10004ec6:	f007 fcc9 	bl	1000c85c <__aeabi_f2d>
10004eca:	1c03      	adds	r3, r0, #0
10004ecc:	1c0c      	adds	r4, r1, #0
10004ece:	1c18      	adds	r0, r3, #0
10004ed0:	1c21      	adds	r1, r4, #0
10004ed2:	4a2d      	ldr	r2, [pc, #180]	; (10004f88 <Steering_Function+0x73c>)
10004ed4:	4b2d      	ldr	r3, [pc, #180]	; (10004f8c <Steering_Function+0x740>)
10004ed6:	f005 fea3 	bl	1000ac20 <__aeabi_dadd>
10004eda:	1c03      	adds	r3, r0, #0
10004edc:	1c0c      	adds	r4, r1, #0
10004ede:	482c      	ldr	r0, [pc, #176]	; (10004f90 <Steering_Function+0x744>)
10004ee0:	492c      	ldr	r1, [pc, #176]	; (10004f94 <Steering_Function+0x748>)
10004ee2:	1c1a      	adds	r2, r3, #0
10004ee4:	1c23      	adds	r3, r4, #0
10004ee6:	f006 f9c3 	bl	1000b270 <__aeabi_ddiv>
10004eea:	1c03      	adds	r3, r0, #0
10004eec:	1c0c      	adds	r4, r1, #0
10004eee:	1c18      	adds	r0, r3, #0
10004ef0:	1c21      	adds	r1, r4, #0
10004ef2:	f001 ff57 	bl	10006da4 <atan>
10004ef6:	1c03      	adds	r3, r0, #0
10004ef8:	1c0c      	adds	r4, r1, #0
10004efa:	1c18      	adds	r0, r3, #0
10004efc:	1c21      	adds	r1, r4, #0
10004efe:	4a26      	ldr	r2, [pc, #152]	; (10004f98 <Steering_Function+0x74c>)
10004f00:	4b39      	ldr	r3, [pc, #228]	; (10004fe8 <Steering_Function+0x79c>)
10004f02:	f006 fdf3 	bl	1000baec <__aeabi_dmul>
10004f06:	1c03      	adds	r3, r0, #0
10004f08:	1c0c      	adds	r4, r1, #0
10004f0a:	1c18      	adds	r0, r3, #0
10004f0c:	1c21      	adds	r1, r4, #0
10004f0e:	f007 fcf9 	bl	1000c904 <__aeabi_d2f>
10004f12:	1c02      	adds	r2, r0, #0
10004f14:	4b2a      	ldr	r3, [pc, #168]	; (10004fc0 <Steering_Function+0x774>)
10004f16:	601a      	str	r2, [r3, #0]

					speed_fl = Driving_speed_cal / Speed_ratio;
10004f18:	4b23      	ldr	r3, [pc, #140]	; (10004fa8 <Steering_Function+0x75c>)
10004f1a:	681b      	ldr	r3, [r3, #0]
10004f1c:	68b8      	ldr	r0, [r7, #8]
10004f1e:	1c19      	adds	r1, r3, #0
10004f20:	f005 f974 	bl	1000a20c <__aeabi_fdiv>
10004f24:	1c03      	adds	r3, r0, #0
10004f26:	1c1a      	adds	r2, r3, #0
10004f28:	4b20      	ldr	r3, [pc, #128]	; (10004fac <Steering_Function+0x760>)
10004f2a:	601a      	str	r2, [r3, #0]
					speed_fr = Driving_speed_cal * Speed_ratio;
10004f2c:	4b1e      	ldr	r3, [pc, #120]	; (10004fa8 <Steering_Function+0x75c>)
10004f2e:	681b      	ldr	r3, [r3, #0]
10004f30:	1c18      	adds	r0, r3, #0
10004f32:	68b9      	ldr	r1, [r7, #8]
10004f34:	f005 fb5c 	bl	1000a5f0 <__aeabi_fmul>
10004f38:	1c03      	adds	r3, r0, #0
10004f3a:	1c1a      	adds	r2, r3, #0
10004f3c:	4b1c      	ldr	r3, [pc, #112]	; (10004fb0 <Steering_Function+0x764>)
10004f3e:	601a      	str	r2, [r3, #0]

					speed_rl = speed_fl;
10004f40:	4b1a      	ldr	r3, [pc, #104]	; (10004fac <Steering_Function+0x760>)
10004f42:	681a      	ldr	r2, [r3, #0]
10004f44:	4b1b      	ldr	r3, [pc, #108]	; (10004fb4 <Steering_Function+0x768>)
10004f46:	601a      	str	r2, [r3, #0]
					speed_rr = speed_fr;
10004f48:	4b19      	ldr	r3, [pc, #100]	; (10004fb0 <Steering_Function+0x764>)
10004f4a:	681a      	ldr	r2, [r3, #0]
10004f4c:	4b1a      	ldr	r3, [pc, #104]	; (10004fb8 <Steering_Function+0x76c>)
10004f4e:	601a      	str	r2, [r3, #0]
10004f50:	e0d7      	b.n	10005102 <Steering_Function+0x8b6>
				}
				else if((- R_TRUN_MIN > R_Turn) && (R_Turn > -R_TRUN_MAX)){
10004f52:	4b0c      	ldr	r3, [pc, #48]	; (10004f84 <Steering_Function+0x738>)
10004f54:	681b      	ldr	r3, [r3, #0]
10004f56:	1c18      	adds	r0, r3, #0
10004f58:	f007 fc80 	bl	1000c85c <__aeabi_f2d>
10004f5c:	1c03      	adds	r3, r0, #0
10004f5e:	1c0c      	adds	r4, r1, #0
10004f60:	1c18      	adds	r0, r3, #0
10004f62:	1c21      	adds	r1, r4, #0
10004f64:	4a1d      	ldr	r2, [pc, #116]	; (10004fdc <Steering_Function+0x790>)
10004f66:	4b21      	ldr	r3, [pc, #132]	; (10004fec <Steering_Function+0x7a0>)
10004f68:	f004 febc 	bl	10009ce4 <__aeabi_dcmplt>
10004f6c:	1e03      	subs	r3, r0, #0
10004f6e:	d100      	bne.n	10004f72 <Steering_Function+0x726>
10004f70:	e0c7      	b.n	10005102 <Steering_Function+0x8b6>
10004f72:	4b04      	ldr	r3, [pc, #16]	; (10004f84 <Steering_Function+0x738>)
10004f74:	681b      	ldr	r3, [r3, #0]
10004f76:	1c18      	adds	r0, r3, #0
10004f78:	491d      	ldr	r1, [pc, #116]	; (10004ff0 <Steering_Function+0x7a4>)
10004f7a:	f004 ff01 	bl	10009d80 <__aeabi_fcmpgt>
10004f7e:	1e03      	subs	r3, r0, #0
10004f80:	d138      	bne.n	10004ff4 <Steering_Function+0x7a8>
10004f82:	e0be      	b.n	10005102 <Steering_Function+0x8b6>
10004f84:	200009fc 	.word	0x200009fc
10004f88:	1a9fbe77 	.word	0x1a9fbe77
10004f8c:	3fc4dd2f 	.word	0x3fc4dd2f
10004f90:	3126e979 	.word	0x3126e979
10004f94:	3fdcac08 	.word	0x3fdcac08
10004f98:	2584f4c7 	.word	0x2584f4c7
10004f9c:	404ca61e 	.word	0x404ca61e
10004fa0:	20000a14 	.word	0x20000a14
10004fa4:	20000a18 	.word	0x20000a18
10004fa8:	20000a00 	.word	0x20000a00
10004fac:	20000a04 	.word	0x20000a04
10004fb0:	20000a08 	.word	0x20000a08
10004fb4:	20000a0c 	.word	0x20000a0c
10004fb8:	20000a10 	.word	0x20000a10
10004fbc:	20000a1c 	.word	0x20000a1c
10004fc0:	20000a20 	.word	0x20000a20
10004fc4:	42480000 	.word	0x42480000
10004fc8:	c2480000 	.word	0xc2480000
10004fcc:	c0a00000 	.word	0xc0a00000
10004fd0:	40a00000 	.word	0x40a00000
10004fd4:	54442d18 	.word	0x54442d18
10004fd8:	400921fb 	.word	0x400921fb
10004fdc:	9999999a 	.word	0x9999999a
10004fe0:	3fa99999 	.word	0x3fa99999
10004fe4:	41a00000 	.word	0x41a00000
10004fe8:	c04ca61e 	.word	0xc04ca61e
10004fec:	bfa99999 	.word	0xbfa99999
10004ff0:	c1a00000 	.word	0xc1a00000
					angle_rl = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // in wheel
10004ff4:	4be6      	ldrge	r3, [pc, #920]	; (10005390 <Steering_Function+0xb44>)
10004ff6:	681b      	ldrge	r3, [r3, #0]
10004ff8:	1c18      	adds	r0, r3, #0
10004ffa:	f007 fc2f 	bl	1000c85c <__aeabi_f2d>
10004ffe:	1c03      	adds	r3, r0, #0
10005000:	1c0c      	adds	r4, r1, #0
10005002:	1c18      	adds	r0, r3, #0
10005004:	1c21      	adds	r1, r4, #0
10005006:	4ae3      	ldr	r2, [pc, #908]	; (10005394 <Steering_Function+0xb48>)
10005008:	4be3      	ldr	r3, [pc, #908]	; (10005398 <Steering_Function+0xb4c>)
1000500a:	f007 f809 	bl	1000c020 <__aeabi_dsub>
1000500e:	1c03      	adds	r3, r0, #0
10005010:	1c0c      	adds	r4, r1, #0
10005012:	48e2      	ldr	r0, [pc, #904]	; (1000539c <Steering_Function+0xb50>)
10005014:	49e2      	ldr	r1, [pc, #904]	; (100053a0 <Steering_Function+0xb54>)
10005016:	1c1a      	adds	r2, r3, #0
10005018:	1c23      	adds	r3, r4, #0
1000501a:	f006 f929 	bl	1000b270 <__aeabi_ddiv>
1000501e:	1c03      	adds	r3, r0, #0
10005020:	1c0c      	adds	r4, r1, #0
10005022:	1c18      	adds	r0, r3, #0
10005024:	1c21      	adds	r1, r4, #0
10005026:	f001 febd 	bl	10006da4 <atan>
1000502a:	1c03      	adds	r3, r0, #0
1000502c:	1c0c      	adds	r4, r1, #0
1000502e:	1c18      	adds	r0, r3, #0
10005030:	1c21      	adds	r1, r4, #0
10005032:	4adc      	ldr	r2, [pc, #880]	; (100053a4 <Steering_Function+0xb58>)
10005034:	4bdc      	ldr	r3, [pc, #880]	; (100053a8 <Steering_Function+0xb5c>)
10005036:	f006 fd59 	bl	1000baec <__aeabi_dmul>
1000503a:	1c03      	adds	r3, r0, #0
1000503c:	1c0c      	adds	r4, r1, #0
1000503e:	1c18      	adds	r0, r3, #0
10005040:	1c21      	adds	r1, r4, #0
10005042:	f007 fc5f 	bl	1000c904 <__aeabi_d2f>
10005046:	1c02      	adds	r2, r0, #0
10005048:	4bd8      	ldr	r3, [pc, #864]	; (100053ac <Steering_Function+0xb60>)
1000504a:	601a      	str	r2, [r3, #0]
					angle_rr = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // out wheel
1000504c:	4bd0      	ldr	r3, [pc, #832]	; (10005390 <Steering_Function+0xb44>)
1000504e:	681b      	ldr	r3, [r3, #0]
10005050:	1c18      	adds	r0, r3, #0
10005052:	f007 fc03 	bl	1000c85c <__aeabi_f2d>
10005056:	1c03      	adds	r3, r0, #0
10005058:	1c0c      	adds	r4, r1, #0
1000505a:	1c18      	adds	r0, r3, #0
1000505c:	1c21      	adds	r1, r4, #0
1000505e:	4acd      	ldr	r2, [pc, #820]	; (10005394 <Steering_Function+0xb48>)
10005060:	4bcd      	ldr	r3, [pc, #820]	; (10005398 <Steering_Function+0xb4c>)
10005062:	f005 fddd 	bl	1000ac20 <__aeabi_dadd>
10005066:	1c03      	adds	r3, r0, #0
10005068:	1c0c      	adds	r4, r1, #0
1000506a:	48cc      	ldr	r0, [pc, #816]	; (1000539c <Steering_Function+0xb50>)
1000506c:	49cc      	ldr	r1, [pc, #816]	; (100053a0 <Steering_Function+0xb54>)
1000506e:	1c1a      	adds	r2, r3, #0
10005070:	1c23      	adds	r3, r4, #0
10005072:	f006 f8fd 	bl	1000b270 <__aeabi_ddiv>
10005076:	1c03      	adds	r3, r0, #0
10005078:	1c0c      	adds	r4, r1, #0
1000507a:	1c18      	adds	r0, r3, #0
1000507c:	1c21      	adds	r1, r4, #0
1000507e:	f001 fe91 	bl	10006da4 <atan>
10005082:	1c03      	adds	r3, r0, #0
10005084:	1c0c      	adds	r4, r1, #0
10005086:	1c18      	adds	r0, r3, #0
10005088:	1c21      	adds	r1, r4, #0
1000508a:	4ac6      	ldr	r2, [pc, #792]	; (100053a4 <Steering_Function+0xb58>)
1000508c:	4bc6      	ldr	r3, [pc, #792]	; (100053a8 <Steering_Function+0xb5c>)
1000508e:	f006 fd2d 	bl	1000baec <__aeabi_dmul>
10005092:	1c03      	adds	r3, r0, #0
10005094:	1c0c      	adds	r4, r1, #0
10005096:	1c18      	adds	r0, r3, #0
10005098:	1c21      	adds	r1, r4, #0
1000509a:	f007 fc33 	bl	1000c904 <__aeabi_d2f>
1000509e:	1c02      	adds	r2, r0, #0
100050a0:	4bc3      	ldr	r3, [pc, #780]	; (100053b0 <Steering_Function+0xb64>)
100050a2:	601a      	str	r2, [r3, #0]

					speed_fl = Driving_speed_cal * Speed_ratio;
100050a4:	4bc3      	ldr	r3, [pc, #780]	; (100053b4 <Steering_Function+0xb68>)
100050a6:	681b      	ldr	r3, [r3, #0]
100050a8:	1c18      	adds	r0, r3, #0
100050aa:	68b9      	ldr	r1, [r7, #8]
100050ac:	f005 faa0 	bl	1000a5f0 <__aeabi_fmul>
100050b0:	1c03      	adds	r3, r0, #0
100050b2:	1c1a      	adds	r2, r3, #0
100050b4:	4bc0      	ldr	r3, [pc, #768]	; (100053b8 <Steering_Function+0xb6c>)
100050b6:	601a      	str	r2, [r3, #0]
					speed_fr = Driving_speed_cal / Speed_ratio;
100050b8:	4bbe      	ldr	r3, [pc, #760]	; (100053b4 <Steering_Function+0xb68>)
100050ba:	681b      	ldr	r3, [r3, #0]
100050bc:	68b8      	ldr	r0, [r7, #8]
100050be:	1c19      	adds	r1, r3, #0
100050c0:	f005 f8a4 	bl	1000a20c <__aeabi_fdiv>
100050c4:	1c03      	adds	r3, r0, #0
100050c6:	1c1a      	adds	r2, r3, #0
100050c8:	4bbc      	ldr	r3, [pc, #752]	; (100053bc <Steering_Function+0xb70>)
100050ca:	601a      	str	r2, [r3, #0]

					speed_rl = speed_fl;
100050cc:	4bba      	ldr	r3, [pc, #744]	; (100053b8 <Steering_Function+0xb6c>)
100050ce:	681a      	ldr	r2, [r3, #0]
100050d0:	4bbb      	ldr	r3, [pc, #748]	; (100053c0 <Steering_Function+0xb74>)
100050d2:	601a      	str	r2, [r3, #0]
					speed_rr = speed_fr;
100050d4:	4bb9      	ldr	r3, [pc, #740]	; (100053bc <Steering_Function+0xb70>)
100050d6:	681a      	ldr	r2, [r3, #0]
100050d8:	4bba      	ldr	r3, [pc, #744]	; (100053c4 <Steering_Function+0xb78>)
100050da:	601a      	str	r2, [r3, #0]
100050dc:	e011      	b.n	10005102 <Steering_Function+0x8b6>
				}
			}
			else{
				angle_rl = 0;
100050de:	4bb3      	ldr	r3, [pc, #716]	; (100053ac <Steering_Function+0xb60>)
100050e0:	2200      	movs	r2, #0
100050e2:	601a      	str	r2, [r3, #0]
				angle_rr = 0;
100050e4:	4bb2      	ldr	r3, [pc, #712]	; (100053b0 <Steering_Function+0xb64>)
100050e6:	2200      	movs	r2, #0
100050e8:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal;
100050ea:	4bb3      	ldr	r3, [pc, #716]	; (100053b8 <Steering_Function+0xb6c>)
100050ec:	68ba      	ldr	r2, [r7, #8]
100050ee:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal;
100050f0:	4bb2      	ldr	r3, [pc, #712]	; (100053bc <Steering_Function+0xb70>)
100050f2:	68ba      	ldr	r2, [r7, #8]
100050f4:	601a      	str	r2, [r3, #0]
				speed_rl = Driving_speed_cal;
100050f6:	4bb2      	ldr	r3, [pc, #712]	; (100053c0 <Steering_Function+0xb74>)
100050f8:	68ba      	ldr	r2, [r7, #8]
100050fa:	601a      	str	r2, [r3, #0]
				speed_rr = Driving_speed_cal;
100050fc:	4bb1      	ldr	r3, [pc, #708]	; (100053c4 <Steering_Function+0xb78>)
100050fe:	68ba      	ldr	r2, [r7, #8]
10005100:	601a      	str	r2, [r3, #0]
			}

			//rear axle
			angle_fl = 0;
10005102:	4bb1      	ldr	r3, [pc, #708]	; (100053c8 <Steering_Function+0xb7c>)
10005104:	2200      	movs	r2, #0
10005106:	601a      	str	r2, [r3, #0]
			angle_fr = 0;
10005108:	4bb0      	ldr	r3, [pc, #704]	; (100053cc <Steering_Function+0xb80>)
1000510a:	2200      	movs	r2, #0
1000510c:	601a      	str	r2, [r3, #0]
			break;
1000510e:	e309      	b.n	10005724 <Steering_Function+0xed8>

		case ALL_WHEEL: // 4 wheel #############################################################
			// steering limits
			if(Steering_direction_cal > 30) Steering_direction_cal = 30;
10005110:	68f8      	ldr	r0, [r7, #12]
10005112:	49af      	ldr	r1, [pc, #700]	; (100053d0 <Steering_Function+0xb84>)
10005114:	f004 fe34 	bl	10009d80 <__aeabi_fcmpgt>
10005118:	1e03      	subs	r3, r0, #0
1000511a:	d001      	beq.n	10005120 <Steering_Function+0x8d4>
1000511c:	4bac      	ldr	r3, [pc, #688]	; (100053d0 <Steering_Function+0xb84>)
1000511e:	60fb      	str	r3, [r7, #12]
			if(Steering_direction_cal < -30) Steering_direction_cal = -30;
10005120:	68f8      	ldr	r0, [r7, #12]
10005122:	49ac      	ldr	r1, [pc, #688]	; (100053d4 <Steering_Function+0xb88>)
10005124:	f004 fe18 	bl	10009d58 <__aeabi_fcmplt>
10005128:	1e03      	subs	r3, r0, #0
1000512a:	d001      	beq.n	10005130 <Steering_Function+0x8e4>
1000512c:	4ba9      	ldr	r3, [pc, #676]	; (100053d4 <Steering_Function+0xb88>)
1000512e:	60fb      	str	r3, [r7, #12]

			if(within_MAX_MIN(Steering_direction_cal,-5,5) == 0){// if not almost zero
10005130:	68fb      	ldr	r3, [r7, #12]
10005132:	49a9      	ldr	r1, [pc, #676]	; (100053d8 <Steering_Function+0xb8c>)
10005134:	4aa9      	ldr	r2, [pc, #676]	; (100053dc <Steering_Function+0xb90>)
10005136:	1c18      	adds	r0, r3, #0
10005138:	f001 fd22 	bl	10006b80 <within_MAX_MIN>
1000513c:	1c03      	adds	r3, r0, #0
1000513e:	1c1a      	adds	r2, r3, #0
10005140:	2301      	movs	r3, #1
10005142:	4053      	eors	r3, r2
10005144:	b2db      	uxtb	r3, r3
10005146:	2b00      	cmp	r3, #0
10005148:	d100      	bne.n	1000514c <Steering_Function+0x900>
1000514a:	e1e0      	b.n	1000550e <Steering_Function+0xcc2>
				// pre calc
				R_Turn = HALF_WHEEL_BASE / tan(Steering_direction_cal / RAD_TO_DEG); // to truni graduis converstion
1000514c:	68f8      	ldr	r0, [r7, #12]
1000514e:	f007 fb85 	bl	1000c85c <__aeabi_f2d>
10005152:	1c03      	adds	r3, r0, #0
10005154:	1c0c      	adds	r4, r1, #0
10005156:	1c18      	adds	r0, r3, #0
10005158:	1c21      	adds	r1, r4, #0
1000515a:	4a92      	ldr	r2, [pc, #584]	; (100053a4 <Steering_Function+0xb58>)
1000515c:	4ba0      	ldr	r3, [pc, #640]	; (100053e0 <Steering_Function+0xb94>)
1000515e:	f006 f887 	bl	1000b270 <__aeabi_ddiv>
10005162:	1c03      	adds	r3, r0, #0
10005164:	1c0c      	adds	r4, r1, #0
10005166:	1c18      	adds	r0, r3, #0
10005168:	1c21      	adds	r1, r4, #0
1000516a:	f002 f85b 	bl	10007224 <tan>
1000516e:	1c03      	adds	r3, r0, #0
10005170:	1c0c      	adds	r4, r1, #0
10005172:	489c      	ldr	r0, [pc, #624]	; (100053e4 <Steering_Function+0xb98>)
10005174:	499c      	ldr	r1, [pc, #624]	; (100053e8 <Steering_Function+0xb9c>)
10005176:	1c1a      	adds	r2, r3, #0
10005178:	1c23      	adds	r3, r4, #0
1000517a:	f006 f879 	bl	1000b270 <__aeabi_ddiv>
1000517e:	1c03      	adds	r3, r0, #0
10005180:	1c0c      	adds	r4, r1, #0
10005182:	1c18      	adds	r0, r3, #0
10005184:	1c21      	adds	r1, r4, #0
10005186:	f007 fbbd 	bl	1000c904 <__aeabi_d2f>
1000518a:	1c02      	adds	r2, r0, #0
1000518c:	4b80      	ldr	r3, [pc, #512]	; (10005390 <Steering_Function+0xb44>)
1000518e:	601a      	str	r2, [r3, #0]
				Speed_ratio = (2 * (copysign(R_Turn,1) + HALF_TRACK_WIDTH) * M_PI) / (2 * copysign(R_Turn,1) * M_PI);
10005190:	4b7f      	ldr	r3, [pc, #508]	; (10005390 <Steering_Function+0xb44>)
10005192:	681b      	ldr	r3, [r3, #0]
10005194:	005b      	lsls	r3, r3, #1
10005196:	085b      	lsrs	r3, r3, #1
10005198:	1c18      	adds	r0, r3, #0
1000519a:	f007 fb5f 	bl	1000c85c <__aeabi_f2d>
1000519e:	1c03      	adds	r3, r0, #0
100051a0:	1c0c      	adds	r4, r1, #0
100051a2:	1c18      	adds	r0, r3, #0
100051a4:	1c21      	adds	r1, r4, #0
100051a6:	4a7b      	ldr	r2, [pc, #492]	; (10005394 <Steering_Function+0xb48>)
100051a8:	4b7b      	ldr	r3, [pc, #492]	; (10005398 <Steering_Function+0xb4c>)
100051aa:	f005 fd39 	bl	1000ac20 <__aeabi_dadd>
100051ae:	1c03      	adds	r3, r0, #0
100051b0:	1c0c      	adds	r4, r1, #0
100051b2:	1c18      	adds	r0, r3, #0
100051b4:	1c21      	adds	r1, r4, #0
100051b6:	1c1a      	adds	r2, r3, #0
100051b8:	1c23      	adds	r3, r4, #0
100051ba:	f005 fd31 	bl	1000ac20 <__aeabi_dadd>
100051be:	1c03      	adds	r3, r0, #0
100051c0:	1c0c      	adds	r4, r1, #0
100051c2:	1c18      	adds	r0, r3, #0
100051c4:	1c21      	adds	r1, r4, #0
100051c6:	4a89      	ldr	r2, [pc, #548]	; (100053ec <Steering_Function+0xba0>)
100051c8:	4b89      	ldr	r3, [pc, #548]	; (100053f0 <Steering_Function+0xba4>)
100051ca:	f006 fc8f 	bl	1000baec <__aeabi_dmul>
100051ce:	1c03      	adds	r3, r0, #0
100051d0:	1c0c      	adds	r4, r1, #0
100051d2:	1c1d      	adds	r5, r3, #0
100051d4:	1c26      	adds	r6, r4, #0
100051d6:	4b6e      	ldr	r3, [pc, #440]	; (10005390 <Steering_Function+0xb44>)
100051d8:	681b      	ldr	r3, [r3, #0]
100051da:	005b      	lsls	r3, r3, #1
100051dc:	085b      	lsrs	r3, r3, #1
100051de:	1c18      	adds	r0, r3, #0
100051e0:	f007 fb3c 	bl	1000c85c <__aeabi_f2d>
100051e4:	1c03      	adds	r3, r0, #0
100051e6:	1c0c      	adds	r4, r1, #0
100051e8:	1c18      	adds	r0, r3, #0
100051ea:	1c21      	adds	r1, r4, #0
100051ec:	1c1a      	adds	r2, r3, #0
100051ee:	1c23      	adds	r3, r4, #0
100051f0:	f005 fd16 	bl	1000ac20 <__aeabi_dadd>
100051f4:	1c03      	adds	r3, r0, #0
100051f6:	1c0c      	adds	r4, r1, #0
100051f8:	1c18      	adds	r0, r3, #0
100051fa:	1c21      	adds	r1, r4, #0
100051fc:	4a7b      	ldr	r2, [pc, #492]	; (100053ec <Steering_Function+0xba0>)
100051fe:	4b7c      	ldr	r3, [pc, #496]	; (100053f0 <Steering_Function+0xba4>)
10005200:	f006 fc74 	bl	1000baec <__aeabi_dmul>
10005204:	1c03      	adds	r3, r0, #0
10005206:	1c0c      	adds	r4, r1, #0
10005208:	1c28      	adds	r0, r5, #0
1000520a:	1c31      	adds	r1, r6, #0
1000520c:	1c1a      	adds	r2, r3, #0
1000520e:	1c23      	adds	r3, r4, #0
10005210:	f006 f82e 	bl	1000b270 <__aeabi_ddiv>
10005214:	1c03      	adds	r3, r0, #0
10005216:	1c0c      	adds	r4, r1, #0
10005218:	1c18      	adds	r0, r3, #0
1000521a:	1c21      	adds	r1, r4, #0
1000521c:	f007 fb72 	bl	1000c904 <__aeabi_d2f>
10005220:	1c02      	adds	r2, r0, #0
10005222:	4b64      	ldr	r3, [pc, #400]	; (100053b4 <Steering_Function+0xb68>)
10005224:	601a      	str	r2, [r3, #0]

				if((R_TRUN_MIN < R_Turn) && (R_Turn < R_TRUN_MAX)){ // trun right positive R
10005226:	4b5a      	ldr	r3, [pc, #360]	; (10005390 <Steering_Function+0xb44>)
10005228:	681b      	ldr	r3, [r3, #0]
1000522a:	1c18      	adds	r0, r3, #0
1000522c:	f007 fb16 	bl	1000c85c <__aeabi_f2d>
10005230:	1c03      	adds	r3, r0, #0
10005232:	1c0c      	adds	r4, r1, #0
10005234:	1c18      	adds	r0, r3, #0
10005236:	1c21      	adds	r1, r4, #0
10005238:	4a6e      	ldr	r2, [pc, #440]	; (100053f4 <Steering_Function+0xba8>)
1000523a:	4b6f      	ldr	r3, [pc, #444]	; (100053f8 <Steering_Function+0xbac>)
1000523c:	f004 fd66 	bl	10009d0c <__aeabi_dcmpgt>
10005240:	1e03      	subs	r3, r0, #0
10005242:	d100      	bne.n	10005246 <Steering_Function+0x9fa>
10005244:	e08b      	b.n	1000535e <Steering_Function+0xb12>
10005246:	4b52      	ldr	r3, [pc, #328]	; (10005390 <Steering_Function+0xb44>)
10005248:	681b      	ldr	r3, [r3, #0]
1000524a:	1c18      	adds	r0, r3, #0
1000524c:	496b      	ldr	r1, [pc, #428]	; (100053fc <Steering_Function+0xbb0>)
1000524e:	f004 fd83 	bl	10009d58 <__aeabi_fcmplt>
10005252:	1e03      	subs	r3, r0, #0
10005254:	d100      	bne.n	10005258 <Steering_Function+0xa0c>
10005256:	e082      	b.n	1000535e <Steering_Function+0xb12>
					angle_fl = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // out wheel
10005258:	4b4d      	ldr	r3, [pc, #308]	; (10005390 <Steering_Function+0xb44>)
1000525a:	681b      	ldr	r3, [r3, #0]
1000525c:	1c18      	adds	r0, r3, #0
1000525e:	f007 fafd 	bl	1000c85c <__aeabi_f2d>
10005262:	1c03      	adds	r3, r0, #0
10005264:	1c0c      	adds	r4, r1, #0
10005266:	1c18      	adds	r0, r3, #0
10005268:	1c21      	adds	r1, r4, #0
1000526a:	4a4a      	ldr	r2, [pc, #296]	; (10005394 <Steering_Function+0xb48>)
1000526c:	4b4a      	ldr	r3, [pc, #296]	; (10005398 <Steering_Function+0xb4c>)
1000526e:	f006 fed7 	bl	1000c020 <__aeabi_dsub>
10005272:	1c03      	adds	r3, r0, #0
10005274:	1c0c      	adds	r4, r1, #0
10005276:	4849      	ldr	r0, [pc, #292]	; (1000539c <Steering_Function+0xb50>)
10005278:	4949      	ldr	r1, [pc, #292]	; (100053a0 <Steering_Function+0xb54>)
1000527a:	1c1a      	adds	r2, r3, #0
1000527c:	1c23      	adds	r3, r4, #0
1000527e:	f005 fff7 	bl	1000b270 <__aeabi_ddiv>
10005282:	1c03      	adds	r3, r0, #0
10005284:	1c0c      	adds	r4, r1, #0
10005286:	1c18      	adds	r0, r3, #0
10005288:	1c21      	adds	r1, r4, #0
1000528a:	f001 fd8b 	bl	10006da4 <atan>
1000528e:	1c03      	adds	r3, r0, #0
10005290:	1c0c      	adds	r4, r1, #0
10005292:	1c18      	adds	r0, r3, #0
10005294:	1c21      	adds	r1, r4, #0
10005296:	4a43      	ldr	r2, [pc, #268]	; (100053a4 <Steering_Function+0xb58>)
10005298:	4b51      	ldr	r3, [pc, #324]	; (100053e0 <Steering_Function+0xb94>)
1000529a:	f006 fc27 	bl	1000baec <__aeabi_dmul>
1000529e:	1c03      	adds	r3, r0, #0
100052a0:	1c0c      	adds	r4, r1, #0
100052a2:	1c18      	adds	r0, r3, #0
100052a4:	1c21      	adds	r1, r4, #0
100052a6:	f007 fb2d 	bl	1000c904 <__aeabi_d2f>
100052aa:	1c02      	adds	r2, r0, #0
100052ac:	4b46      	ldr	r3, [pc, #280]	; (100053c8 <Steering_Function+0xb7c>)
100052ae:	601a      	str	r2, [r3, #0]
					angle_fr = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // in wheel
100052b0:	4b37      	ldr	r3, [pc, #220]	; (10005390 <Steering_Function+0xb44>)
100052b2:	681b      	ldr	r3, [r3, #0]
100052b4:	1c18      	adds	r0, r3, #0
100052b6:	f007 fad1 	bl	1000c85c <__aeabi_f2d>
100052ba:	1c03      	adds	r3, r0, #0
100052bc:	1c0c      	adds	r4, r1, #0
100052be:	1c18      	adds	r0, r3, #0
100052c0:	1c21      	adds	r1, r4, #0
100052c2:	4a34      	ldr	r2, [pc, #208]	; (10005394 <Steering_Function+0xb48>)
100052c4:	4b34      	ldr	r3, [pc, #208]	; (10005398 <Steering_Function+0xb4c>)
100052c6:	f005 fcab 	bl	1000ac20 <__aeabi_dadd>
100052ca:	1c03      	adds	r3, r0, #0
100052cc:	1c0c      	adds	r4, r1, #0
100052ce:	4833      	ldr	r0, [pc, #204]	; (1000539c <Steering_Function+0xb50>)
100052d0:	4933      	ldr	r1, [pc, #204]	; (100053a0 <Steering_Function+0xb54>)
100052d2:	1c1a      	adds	r2, r3, #0
100052d4:	1c23      	adds	r3, r4, #0
100052d6:	f005 ffcb 	bl	1000b270 <__aeabi_ddiv>
100052da:	1c03      	adds	r3, r0, #0
100052dc:	1c0c      	adds	r4, r1, #0
100052de:	1c18      	adds	r0, r3, #0
100052e0:	1c21      	adds	r1, r4, #0
100052e2:	f001 fd5f 	bl	10006da4 <atan>
100052e6:	1c03      	adds	r3, r0, #0
100052e8:	1c0c      	adds	r4, r1, #0
100052ea:	1c18      	adds	r0, r3, #0
100052ec:	1c21      	adds	r1, r4, #0
100052ee:	4a2d      	ldr	r2, [pc, #180]	; (100053a4 <Steering_Function+0xb58>)
100052f0:	4b3b      	ldr	r3, [pc, #236]	; (100053e0 <Steering_Function+0xb94>)
100052f2:	f006 fbfb 	bl	1000baec <__aeabi_dmul>
100052f6:	1c03      	adds	r3, r0, #0
100052f8:	1c0c      	adds	r4, r1, #0
100052fa:	1c18      	adds	r0, r3, #0
100052fc:	1c21      	adds	r1, r4, #0
100052fe:	f007 fb01 	bl	1000c904 <__aeabi_d2f>
10005302:	1c02      	adds	r2, r0, #0
10005304:	4b31      	ldr	r3, [pc, #196]	; (100053cc <Steering_Function+0xb80>)
10005306:	601a      	str	r2, [r3, #0]

					angle_rl = -angle_fl;
10005308:	4b2f      	ldr	r3, [pc, #188]	; (100053c8 <Steering_Function+0xb7c>)
1000530a:	681b      	ldr	r3, [r3, #0]
1000530c:	2280      	movs	r2, #128	; 0x80
1000530e:	0612      	lsls	r2, r2, #24
10005310:	405a      	eors	r2, r3
10005312:	4b26      	ldr	r3, [pc, #152]	; (100053ac <Steering_Function+0xb60>)
10005314:	601a      	str	r2, [r3, #0]
					angle_rr = -angle_fr;
10005316:	4b2d      	ldr	r3, [pc, #180]	; (100053cc <Steering_Function+0xb80>)
10005318:	681b      	ldr	r3, [r3, #0]
1000531a:	2280      	movs	r2, #128	; 0x80
1000531c:	0612      	lsls	r2, r2, #24
1000531e:	405a      	eors	r2, r3
10005320:	4b23      	ldr	r3, [pc, #140]	; (100053b0 <Steering_Function+0xb64>)
10005322:	601a      	str	r2, [r3, #0]

					speed_fl = Driving_speed_cal / Speed_ratio;
10005324:	4b23      	ldr	r3, [pc, #140]	; (100053b4 <Steering_Function+0xb68>)
10005326:	681b      	ldr	r3, [r3, #0]
10005328:	68b8      	ldr	r0, [r7, #8]
1000532a:	1c19      	adds	r1, r3, #0
1000532c:	f004 ff6e 	bl	1000a20c <__aeabi_fdiv>
10005330:	1c03      	adds	r3, r0, #0
10005332:	1c1a      	adds	r2, r3, #0
10005334:	4b20      	ldr	r3, [pc, #128]	; (100053b8 <Steering_Function+0xb6c>)
10005336:	601a      	str	r2, [r3, #0]
					speed_fr = Driving_speed_cal * Speed_ratio;
10005338:	4b1e      	ldr	r3, [pc, #120]	; (100053b4 <Steering_Function+0xb68>)
1000533a:	681b      	ldr	r3, [r3, #0]
1000533c:	1c18      	adds	r0, r3, #0
1000533e:	68b9      	ldr	r1, [r7, #8]
10005340:	f005 f956 	bl	1000a5f0 <__aeabi_fmul>
10005344:	1c03      	adds	r3, r0, #0
10005346:	1c1a      	adds	r2, r3, #0
10005348:	4b1c      	ldr	r3, [pc, #112]	; (100053bc <Steering_Function+0xb70>)
1000534a:	601a      	str	r2, [r3, #0]

					speed_rl = speed_fl;
1000534c:	4b1a      	ldr	r3, [pc, #104]	; (100053b8 <Steering_Function+0xb6c>)
1000534e:	681a      	ldr	r2, [r3, #0]
10005350:	4b1b      	ldr	r3, [pc, #108]	; (100053c0 <Steering_Function+0xb74>)
10005352:	601a      	str	r2, [r3, #0]
					speed_rr = speed_fr;
10005354:	4b19      	ldr	r3, [pc, #100]	; (100053bc <Steering_Function+0xb70>)
10005356:	681a      	ldr	r2, [r3, #0]
10005358:	4b1a      	ldr	r3, [pc, #104]	; (100053c4 <Steering_Function+0xb78>)
1000535a:	601a      	str	r2, [r3, #0]
1000535c:	e0f0      	b.n	10005540 <Steering_Function+0xcf4>
				}
				else if((- R_TRUN_MIN > R_Turn) && (R_Turn > -R_TRUN_MAX)){ // trun left positive R
1000535e:	4b0c      	ldr	r3, [pc, #48]	; (10005390 <Steering_Function+0xb44>)
10005360:	681b      	ldr	r3, [r3, #0]
10005362:	1c18      	adds	r0, r3, #0
10005364:	f007 fa7a 	bl	1000c85c <__aeabi_f2d>
10005368:	1c03      	adds	r3, r0, #0
1000536a:	1c0c      	adds	r4, r1, #0
1000536c:	1c18      	adds	r0, r3, #0
1000536e:	1c21      	adds	r1, r4, #0
10005370:	4a20      	ldr	r2, [pc, #128]	; (100053f4 <Steering_Function+0xba8>)
10005372:	4b23      	ldr	r3, [pc, #140]	; (10005400 <Steering_Function+0xbb4>)
10005374:	f004 fcb6 	bl	10009ce4 <__aeabi_dcmplt>
10005378:	1e03      	subs	r3, r0, #0
1000537a:	d100      	bne.n	1000537e <Steering_Function+0xb32>
1000537c:	e0e0      	b.n	10005540 <Steering_Function+0xcf4>
1000537e:	4b04      	ldr	r3, [pc, #16]	; (10005390 <Steering_Function+0xb44>)
10005380:	681b      	ldr	r3, [r3, #0]
10005382:	1c18      	adds	r0, r3, #0
10005384:	491f      	ldr	r1, [pc, #124]	; (10005404 <Steering_Function+0xbb8>)
10005386:	f004 fcfb 	bl	10009d80 <__aeabi_fcmpgt>
1000538a:	1e03      	subs	r3, r0, #0
1000538c:	d13c      	bne.n	10005408 <Steering_Function+0xbbc>
1000538e:	e0d7      	b.n	10005540 <Steering_Function+0xcf4>
10005390:	200009fc 	.word	0x200009fc
10005394:	1a9fbe77 	.word	0x1a9fbe77
10005398:	3fc4dd2f 	.word	0x3fc4dd2f
1000539c:	3126e979 	.word	0x3126e979
100053a0:	3fdcac08 	.word	0x3fdcac08
100053a4:	2584f4c7 	.word	0x2584f4c7
100053a8:	c04ca61e 	.word	0xc04ca61e
100053ac:	20000a1c 	.word	0x20000a1c
100053b0:	20000a20 	.word	0x20000a20
100053b4:	20000a00 	.word	0x20000a00
100053b8:	20000a04 	.word	0x20000a04
100053bc:	20000a08 	.word	0x20000a08
100053c0:	20000a0c 	.word	0x20000a0c
100053c4:	20000a10 	.word	0x20000a10
100053c8:	20000a14 	.word	0x20000a14
100053cc:	20000a18 	.word	0x20000a18
100053d0:	41f00000 	.word	0x41f00000
100053d4:	c1f00000 	.word	0xc1f00000
100053d8:	c0a00000 	.word	0xc0a00000
100053dc:	40a00000 	.word	0x40a00000
100053e0:	404ca61e 	.word	0x404ca61e
100053e4:	c28f5c29 	.word	0xc28f5c29
100053e8:	3fcc28f5 	.word	0x3fcc28f5
100053ec:	54442d18 	.word	0x54442d18
100053f0:	400921fb 	.word	0x400921fb
100053f4:	9999999a 	.word	0x9999999a
100053f8:	3fa99999 	.word	0x3fa99999
100053fc:	41a00000 	.word	0x41a00000
10005400:	bfa99999 	.word	0xbfa99999
10005404:	c1a00000 	.word	0xc1a00000
					angle_fl = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // in wheel
10005408:	4bd8      	ldrge	r3, [pc, #864]	; (1000576c <Steering_Function+0xf20>)
1000540a:	681b      	ldrge	r3, [r3, #0]
1000540c:	1c18      	adds	r0, r3, #0
1000540e:	f007 fa25 	bl	1000c85c <__aeabi_f2d>
10005412:	1c03      	adds	r3, r0, #0
10005414:	1c0c      	adds	r4, r1, #0
10005416:	1c18      	adds	r0, r3, #0
10005418:	1c21      	adds	r1, r4, #0
1000541a:	4ad5      	ldr	r2, [pc, #852]	; (10005770 <Steering_Function+0xf24>)
1000541c:	4bd5      	ldr	r3, [pc, #852]	; (10005774 <Steering_Function+0xf28>)
1000541e:	f006 fdff 	bl	1000c020 <__aeabi_dsub>
10005422:	1c03      	adds	r3, r0, #0
10005424:	1c0c      	adds	r4, r1, #0
10005426:	48d4      	ldr	r0, [pc, #848]	; (10005778 <Steering_Function+0xf2c>)
10005428:	49d4      	ldr	r1, [pc, #848]	; (1000577c <Steering_Function+0xf30>)
1000542a:	1c1a      	adds	r2, r3, #0
1000542c:	1c23      	adds	r3, r4, #0
1000542e:	f005 ff1f 	bl	1000b270 <__aeabi_ddiv>
10005432:	1c03      	adds	r3, r0, #0
10005434:	1c0c      	adds	r4, r1, #0
10005436:	1c18      	adds	r0, r3, #0
10005438:	1c21      	adds	r1, r4, #0
1000543a:	f001 fcb3 	bl	10006da4 <atan>
1000543e:	1c03      	adds	r3, r0, #0
10005440:	1c0c      	adds	r4, r1, #0
10005442:	1c18      	adds	r0, r3, #0
10005444:	1c21      	adds	r1, r4, #0
10005446:	4ace      	ldr	r2, [pc, #824]	; (10005780 <Steering_Function+0xf34>)
10005448:	4bce      	ldr	r3, [pc, #824]	; (10005784 <Steering_Function+0xf38>)
1000544a:	f006 fb4f 	bl	1000baec <__aeabi_dmul>
1000544e:	1c03      	adds	r3, r0, #0
10005450:	1c0c      	adds	r4, r1, #0
10005452:	1c18      	adds	r0, r3, #0
10005454:	1c21      	adds	r1, r4, #0
10005456:	f007 fa55 	bl	1000c904 <__aeabi_d2f>
1000545a:	1c02      	adds	r2, r0, #0
1000545c:	4bca      	ldr	r3, [pc, #808]	; (10005788 <Steering_Function+0xf3c>)
1000545e:	601a      	str	r2, [r3, #0]
					angle_fr = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // out wheel
10005460:	4bc2      	ldr	r3, [pc, #776]	; (1000576c <Steering_Function+0xf20>)
10005462:	681b      	ldr	r3, [r3, #0]
10005464:	1c18      	adds	r0, r3, #0
10005466:	f007 f9f9 	bl	1000c85c <__aeabi_f2d>
1000546a:	1c03      	adds	r3, r0, #0
1000546c:	1c0c      	adds	r4, r1, #0
1000546e:	1c18      	adds	r0, r3, #0
10005470:	1c21      	adds	r1, r4, #0
10005472:	4abf      	ldr	r2, [pc, #764]	; (10005770 <Steering_Function+0xf24>)
10005474:	4bbf      	ldr	r3, [pc, #764]	; (10005774 <Steering_Function+0xf28>)
10005476:	f005 fbd3 	bl	1000ac20 <__aeabi_dadd>
1000547a:	1c03      	adds	r3, r0, #0
1000547c:	1c0c      	adds	r4, r1, #0
1000547e:	48be      	ldr	r0, [pc, #760]	; (10005778 <Steering_Function+0xf2c>)
10005480:	49be      	ldr	r1, [pc, #760]	; (1000577c <Steering_Function+0xf30>)
10005482:	1c1a      	adds	r2, r3, #0
10005484:	1c23      	adds	r3, r4, #0
10005486:	f005 fef3 	bl	1000b270 <__aeabi_ddiv>
1000548a:	1c03      	adds	r3, r0, #0
1000548c:	1c0c      	adds	r4, r1, #0
1000548e:	1c18      	adds	r0, r3, #0
10005490:	1c21      	adds	r1, r4, #0
10005492:	f001 fc87 	bl	10006da4 <atan>
10005496:	1c03      	adds	r3, r0, #0
10005498:	1c0c      	adds	r4, r1, #0
1000549a:	1c18      	adds	r0, r3, #0
1000549c:	1c21      	adds	r1, r4, #0
1000549e:	4ab8      	ldr	r2, [pc, #736]	; (10005780 <Steering_Function+0xf34>)
100054a0:	4bb8      	ldr	r3, [pc, #736]	; (10005784 <Steering_Function+0xf38>)
100054a2:	f006 fb23 	bl	1000baec <__aeabi_dmul>
100054a6:	1c03      	adds	r3, r0, #0
100054a8:	1c0c      	adds	r4, r1, #0
100054aa:	1c18      	adds	r0, r3, #0
100054ac:	1c21      	adds	r1, r4, #0
100054ae:	f007 fa29 	bl	1000c904 <__aeabi_d2f>
100054b2:	1c02      	adds	r2, r0, #0
100054b4:	4bb5      	ldr	r3, [pc, #724]	; (1000578c <Steering_Function+0xf40>)
100054b6:	601a      	str	r2, [r3, #0]

					angle_rl = -angle_fl;
100054b8:	4bb3      	ldr	r3, [pc, #716]	; (10005788 <Steering_Function+0xf3c>)
100054ba:	681b      	ldr	r3, [r3, #0]
100054bc:	2280      	movs	r2, #128	; 0x80
100054be:	0612      	lsls	r2, r2, #24
100054c0:	405a      	eors	r2, r3
100054c2:	4bb3      	ldr	r3, [pc, #716]	; (10005790 <Steering_Function+0xf44>)
100054c4:	601a      	str	r2, [r3, #0]
					angle_rr = -angle_fr;
100054c6:	4bb1      	ldr	r3, [pc, #708]	; (1000578c <Steering_Function+0xf40>)
100054c8:	681b      	ldr	r3, [r3, #0]
100054ca:	2280      	movs	r2, #128	; 0x80
100054cc:	0612      	lsls	r2, r2, #24
100054ce:	405a      	eors	r2, r3
100054d0:	4bb0      	ldr	r3, [pc, #704]	; (10005794 <Steering_Function+0xf48>)
100054d2:	601a      	str	r2, [r3, #0]

					speed_fl = Driving_speed_cal * Speed_ratio;
100054d4:	4bb0      	ldr	r3, [pc, #704]	; (10005798 <Steering_Function+0xf4c>)
100054d6:	681b      	ldr	r3, [r3, #0]
100054d8:	1c18      	adds	r0, r3, #0
100054da:	68b9      	ldr	r1, [r7, #8]
100054dc:	f005 f888 	bl	1000a5f0 <__aeabi_fmul>
100054e0:	1c03      	adds	r3, r0, #0
100054e2:	1c1a      	adds	r2, r3, #0
100054e4:	4bad      	ldr	r3, [pc, #692]	; (1000579c <Steering_Function+0xf50>)
100054e6:	601a      	str	r2, [r3, #0]
					speed_fr = Driving_speed_cal / Speed_ratio;
100054e8:	4bab      	ldr	r3, [pc, #684]	; (10005798 <Steering_Function+0xf4c>)
100054ea:	681b      	ldr	r3, [r3, #0]
100054ec:	68b8      	ldr	r0, [r7, #8]
100054ee:	1c19      	adds	r1, r3, #0
100054f0:	f004 fe8c 	bl	1000a20c <__aeabi_fdiv>
100054f4:	1c03      	adds	r3, r0, #0
100054f6:	1c1a      	adds	r2, r3, #0
100054f8:	4ba9      	ldr	r3, [pc, #676]	; (100057a0 <Steering_Function+0xf54>)
100054fa:	601a      	str	r2, [r3, #0]

					speed_rl = speed_fl;
100054fc:	4ba7      	ldr	r3, [pc, #668]	; (1000579c <Steering_Function+0xf50>)
100054fe:	681a      	ldr	r2, [r3, #0]
10005500:	4ba8      	ldr	r3, [pc, #672]	; (100057a4 <Steering_Function+0xf58>)
10005502:	601a      	str	r2, [r3, #0]
					speed_rr = speed_fr;
10005504:	4ba6      	ldr	r3, [pc, #664]	; (100057a0 <Steering_Function+0xf54>)
10005506:	681a      	ldr	r2, [r3, #0]
10005508:	4ba7      	ldr	r3, [pc, #668]	; (100057a8 <Steering_Function+0xf5c>)
1000550a:	601a      	str	r2, [r3, #0]
1000550c:	e018      	b.n	10005540 <Steering_Function+0xcf4>
				}
			}
			else{// starigt driving
				angle_fl = 0;
1000550e:	4b9e      	ldr	r3, [pc, #632]	; (10005788 <Steering_Function+0xf3c>)
10005510:	2200      	movs	r2, #0
10005512:	601a      	str	r2, [r3, #0]
				angle_fr = 0;
10005514:	4b9d      	ldr	r3, [pc, #628]	; (1000578c <Steering_Function+0xf40>)
10005516:	2200      	movs	r2, #0
10005518:	601a      	str	r2, [r3, #0]
				angle_rl = 0;
1000551a:	4b9d      	ldr	r3, [pc, #628]	; (10005790 <Steering_Function+0xf44>)
1000551c:	2200      	movs	r2, #0
1000551e:	601a      	str	r2, [r3, #0]
				angle_rr = 0;
10005520:	4b9c      	ldr	r3, [pc, #624]	; (10005794 <Steering_Function+0xf48>)
10005522:	2200      	movs	r2, #0
10005524:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal;
10005526:	4b9d      	ldr	r3, [pc, #628]	; (1000579c <Steering_Function+0xf50>)
10005528:	68ba      	ldr	r2, [r7, #8]
1000552a:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal;
1000552c:	4b9c      	ldr	r3, [pc, #624]	; (100057a0 <Steering_Function+0xf54>)
1000552e:	68ba      	ldr	r2, [r7, #8]
10005530:	601a      	str	r2, [r3, #0]
				speed_rl = Driving_speed_cal;
10005532:	4b9c      	ldr	r3, [pc, #624]	; (100057a4 <Steering_Function+0xf58>)
10005534:	68ba      	ldr	r2, [r7, #8]
10005536:	601a      	str	r2, [r3, #0]
				speed_rr = Driving_speed_cal;
10005538:	4b9b      	ldr	r3, [pc, #620]	; (100057a8 <Steering_Function+0xf5c>)
1000553a:	68ba      	ldr	r2, [r7, #8]
1000553c:	601a      	str	r2, [r3, #0]
			}
			break;
1000553e:	e0f1      	b.n	10005724 <Steering_Function+0xed8>
10005540:	e0f0      	b.n	10005724 <Steering_Function+0xed8>

		case CRAB:  //carb //#############################################################
			Steering_direction_cal = Steering_direction_cal * 2.5; // mach data from remote
10005542:	68f8      	ldr	r0, [r7, #12]
10005544:	4999      	ldr	r1, [pc, #612]	; (100057ac <Steering_Function+0xf60>)
10005546:	f005 f853 	bl	1000a5f0 <__aeabi_fmul>
1000554a:	1c03      	adds	r3, r0, #0
1000554c:	60fb      	str	r3, [r7, #12]
			if(Steering_direction_cal > 190) Steering_direction_cal = 190;
1000554e:	68f8      	ldr	r0, [r7, #12]
10005550:	4997      	ldr	r1, [pc, #604]	; (100057b0 <Steering_Function+0xf64>)
10005552:	f004 fc15 	bl	10009d80 <__aeabi_fcmpgt>
10005556:	1e03      	subs	r3, r0, #0
10005558:	d001      	beq.n	1000555e <Steering_Function+0xd12>
1000555a:	4b95      	ldr	r3, [pc, #596]	; (100057b0 <Steering_Function+0xf64>)
1000555c:	60fb      	str	r3, [r7, #12]
			if(Steering_direction_cal < -190) Steering_direction_cal = -190;
1000555e:	68f8      	ldr	r0, [r7, #12]
10005560:	4994      	ldr	r1, [pc, #592]	; (100057b4 <Steering_Function+0xf68>)
10005562:	f004 fbf9 	bl	10009d58 <__aeabi_fcmplt>
10005566:	1e03      	subs	r3, r0, #0
10005568:	d001      	beq.n	1000556e <Steering_Function+0xd22>
1000556a:	4b92      	ldr	r3, [pc, #584]	; (100057b4 <Steering_Function+0xf68>)
1000556c:	60fb      	str	r3, [r7, #12]
			// steering
			angle_fl = Steering_direction_cal;
1000556e:	4b86      	ldr	r3, [pc, #536]	; (10005788 <Steering_Function+0xf3c>)
10005570:	68fa      	ldr	r2, [r7, #12]
10005572:	601a      	str	r2, [r3, #0]
			angle_fr = Steering_direction_cal;
10005574:	4b85      	ldr	r3, [pc, #532]	; (1000578c <Steering_Function+0xf40>)
10005576:	68fa      	ldr	r2, [r7, #12]
10005578:	601a      	str	r2, [r3, #0]
			angle_rl = Steering_direction_cal;
1000557a:	4b85      	ldr	r3, [pc, #532]	; (10005790 <Steering_Function+0xf44>)
1000557c:	68fa      	ldr	r2, [r7, #12]
1000557e:	601a      	str	r2, [r3, #0]
			angle_rr = Steering_direction_cal;
10005580:	4b84      	ldr	r3, [pc, #528]	; (10005794 <Steering_Function+0xf48>)
10005582:	68fa      	ldr	r2, [r7, #12]
10005584:	601a      	str	r2, [r3, #0]
			 // speed
			 speed_fl = Driving_speed_cal;
10005586:	4b85      	ldr	r3, [pc, #532]	; (1000579c <Steering_Function+0xf50>)
10005588:	68ba      	ldr	r2, [r7, #8]
1000558a:	601a      	str	r2, [r3, #0]
			 speed_fr = Driving_speed_cal;
1000558c:	4b84      	ldr	r3, [pc, #528]	; (100057a0 <Steering_Function+0xf54>)
1000558e:	68ba      	ldr	r2, [r7, #8]
10005590:	601a      	str	r2, [r3, #0]
			 speed_rl = Driving_speed_cal;
10005592:	4b84      	ldr	r3, [pc, #528]	; (100057a4 <Steering_Function+0xf58>)
10005594:	68ba      	ldr	r2, [r7, #8]
10005596:	601a      	str	r2, [r3, #0]
			 speed_rr = Driving_speed_cal;
10005598:	4b83      	ldr	r3, [pc, #524]	; (100057a8 <Steering_Function+0xf5c>)
1000559a:	68ba      	ldr	r2, [r7, #8]
1000559c:	601a      	str	r2, [r3, #0]

			break;
1000559e:	e0c1      	b.n	10005724 <Steering_Function+0xed8>

		case ROTATE: // rotate #############################################################
			// steering agel for turng in place
			angle_fl = ROTATION_ANGLE + ROTATION_ANGLE_OFFSET;
100055a0:	4b79      	ldr	r3, [pc, #484]	; (10005788 <Steering_Function+0xf3c>)
100055a2:	4a85      	ldr	r2, [pc, #532]	; (100057b8 <Steering_Function+0xf6c>)
100055a4:	601a      	str	r2, [r3, #0]
			angle_fr = -ROTATION_ANGLE - ROTATION_ANGLE_OFFSET;
100055a6:	4b79      	ldr	r3, [pc, #484]	; (1000578c <Steering_Function+0xf40>)
100055a8:	4a84      	ldr	r2, [pc, #528]	; (100057bc <Steering_Function+0xf70>)
100055aa:	601a      	str	r2, [r3, #0]
			angle_rl = -ROTATION_ANGLE - ROTATION_ANGLE_OFFSET;
100055ac:	4b78      	ldr	r3, [pc, #480]	; (10005790 <Steering_Function+0xf44>)
100055ae:	4a83      	ldr	r2, [pc, #524]	; (100057bc <Steering_Function+0xf70>)
100055b0:	601a      	str	r2, [r3, #0]
			angle_rr = ROTATION_ANGLE + ROTATION_ANGLE_OFFSET;
100055b2:	4b78      	ldr	r3, [pc, #480]	; (10005794 <Steering_Function+0xf48>)
100055b4:	4a80      	ldr	r2, [pc, #512]	; (100057b8 <Steering_Function+0xf6c>)
100055b6:	601a      	str	r2, [r3, #0]

			 // speed
			if (Steering_direction_cal > 10){
100055b8:	68f8      	ldr	r0, [r7, #12]
100055ba:	4981      	ldr	r1, [pc, #516]	; (100057c0 <Steering_Function+0xf74>)
100055bc:	f004 fbe0 	bl	10009d80 <__aeabi_fcmpgt>
100055c0:	1e03      	subs	r3, r0, #0
100055c2:	d00c      	beq.n	100055de <Steering_Function+0xd92>
				speed_fl = -ROTATION_SPEED;
100055c4:	4b75      	ldr	r3, [pc, #468]	; (1000579c <Steering_Function+0xf50>)
100055c6:	4a7f      	ldr	r2, [pc, #508]	; (100057c4 <Steering_Function+0xf78>)
100055c8:	601a      	str	r2, [r3, #0]
				speed_fr = ROTATION_SPEED;
100055ca:	4b75      	ldr	r3, [pc, #468]	; (100057a0 <Steering_Function+0xf54>)
100055cc:	4a7e      	ldr	r2, [pc, #504]	; (100057c8 <Steering_Function+0xf7c>)
100055ce:	601a      	str	r2, [r3, #0]
				speed_rl = -ROTATION_SPEED;
100055d0:	4b74      	ldr	r3, [pc, #464]	; (100057a4 <Steering_Function+0xf58>)
100055d2:	4a7c      	ldr	r2, [pc, #496]	; (100057c4 <Steering_Function+0xf78>)
100055d4:	601a      	str	r2, [r3, #0]
				speed_rr = ROTATION_SPEED;
100055d6:	4b74      	ldr	r3, [pc, #464]	; (100057a8 <Steering_Function+0xf5c>)
100055d8:	4a7b      	ldr	r2, [pc, #492]	; (100057c8 <Steering_Function+0xf7c>)
100055da:	601a      	str	r2, [r3, #0]
100055dc:	e01f      	b.n	1000561e <Steering_Function+0xdd2>
			}
			else if(Steering_direction_cal < -10){
100055de:	68f8      	ldr	r0, [r7, #12]
100055e0:	497a      	ldr	r1, [pc, #488]	; (100057cc <Steering_Function+0xf80>)
100055e2:	f004 fbb9 	bl	10009d58 <__aeabi_fcmplt>
100055e6:	1e03      	subs	r3, r0, #0
100055e8:	d00c      	beq.n	10005604 <Steering_Function+0xdb8>
				speed_fl = ROTATION_SPEED;
100055ea:	4b6c      	ldr	r3, [pc, #432]	; (1000579c <Steering_Function+0xf50>)
100055ec:	4a76      	ldr	r2, [pc, #472]	; (100057c8 <Steering_Function+0xf7c>)
100055ee:	601a      	str	r2, [r3, #0]
				speed_fr = -ROTATION_SPEED;
100055f0:	4b6b      	ldr	r3, [pc, #428]	; (100057a0 <Steering_Function+0xf54>)
100055f2:	4a74      	ldr	r2, [pc, #464]	; (100057c4 <Steering_Function+0xf78>)
100055f4:	601a      	str	r2, [r3, #0]
				speed_rl = ROTATION_SPEED;
100055f6:	4b6b      	ldr	r3, [pc, #428]	; (100057a4 <Steering_Function+0xf58>)
100055f8:	4a73      	ldr	r2, [pc, #460]	; (100057c8 <Steering_Function+0xf7c>)
100055fa:	601a      	str	r2, [r3, #0]
				speed_rr = -ROTATION_SPEED;
100055fc:	4b6a      	ldr	r3, [pc, #424]	; (100057a8 <Steering_Function+0xf5c>)
100055fe:	4a71      	ldr	r2, [pc, #452]	; (100057c4 <Steering_Function+0xf78>)
10005600:	601a      	str	r2, [r3, #0]
10005602:	e00c      	b.n	1000561e <Steering_Function+0xdd2>
			}
			else{
				speed_fl = 0;
10005604:	4b65      	ldr	r3, [pc, #404]	; (1000579c <Steering_Function+0xf50>)
10005606:	2200      	movs	r2, #0
10005608:	601a      	str	r2, [r3, #0]
				speed_fr = 0;
1000560a:	4b65      	ldr	r3, [pc, #404]	; (100057a0 <Steering_Function+0xf54>)
1000560c:	2200      	movs	r2, #0
1000560e:	601a      	str	r2, [r3, #0]
				speed_rl = 0;
10005610:	4b64      	ldr	r3, [pc, #400]	; (100057a4 <Steering_Function+0xf58>)
10005612:	2200      	movs	r2, #0
10005614:	601a      	str	r2, [r3, #0]
				speed_rr = 0;
10005616:	4b64      	ldr	r3, [pc, #400]	; (100057a8 <Steering_Function+0xf5c>)
10005618:	2200      	movs	r2, #0
1000561a:	601a      	str	r2, [r3, #0]
			}
			break;
1000561c:	e082      	b.n	10005724 <Steering_Function+0xed8>
1000561e:	e081      	b.n	10005724 <Steering_Function+0xed8>

		default:
			angle_fl = 0;
10005620:	4b59      	ldr	r3, [pc, #356]	; (10005788 <Steering_Function+0xf3c>)
10005622:	2200      	movs	r2, #0
10005624:	601a      	str	r2, [r3, #0]
			angle_fr = 0;
10005626:	4b59      	ldr	r3, [pc, #356]	; (1000578c <Steering_Function+0xf40>)
10005628:	2200      	movs	r2, #0
1000562a:	601a      	str	r2, [r3, #0]
			angle_rl = 0;
1000562c:	4b58      	ldr	r3, [pc, #352]	; (10005790 <Steering_Function+0xf44>)
1000562e:	2200      	movs	r2, #0
10005630:	601a      	str	r2, [r3, #0]
			angle_rr = 0;
10005632:	4b58      	ldr	r3, [pc, #352]	; (10005794 <Steering_Function+0xf48>)
10005634:	2200      	movs	r2, #0
10005636:	601a      	str	r2, [r3, #0]

			speed_fl = 0;
10005638:	4b58      	ldr	r3, [pc, #352]	; (1000579c <Steering_Function+0xf50>)
1000563a:	2200      	movs	r2, #0
1000563c:	601a      	str	r2, [r3, #0]
			speed_fr = 0;
1000563e:	4b58      	ldr	r3, [pc, #352]	; (100057a0 <Steering_Function+0xf54>)
10005640:	2200      	movs	r2, #0
10005642:	601a      	str	r2, [r3, #0]
			speed_rl = 0;
10005644:	4b57      	ldr	r3, [pc, #348]	; (100057a4 <Steering_Function+0xf58>)
10005646:	2200      	movs	r2, #0
10005648:	601a      	str	r2, [r3, #0]
			speed_rr = 0;
1000564a:	4b57      	ldr	r3, [pc, #348]	; (100057a8 <Steering_Function+0xf5c>)
1000564c:	2200      	movs	r2, #0
1000564e:	601a      	str	r2, [r3, #0]

			if( NP_setting_cycel_skipper == 4){
10005650:	4b5f      	ldr	r3, [pc, #380]	; (100057d0 <Steering_Function+0xf84>)
10005652:	781b      	ldrb	r3, [r3, #0]
10005654:	2b04      	cmp	r3, #4
10005656:	d15f      	bne.n	10005718 <Steering_Function+0xecc>
				NP_setting_cycel_skipper = 0;
10005658:	4b5d      	ldr	r3, [pc, #372]	; (100057d0 <Steering_Function+0xf84>)
1000565a:	2200      	movs	r2, #0
1000565c:	701a      	strb	r2, [r3, #0]
				// servor NP setting
				uint8_t front_or_back = 0;
1000565e:	2317      	movs	r3, #23
10005660:	18fb      	adds	r3, r7, r3
10005662:	2200      	movs	r2, #0
10005664:	701a      	strb	r2, [r3, #0]
				if(RC_AUX1_duty == 1) front_or_back = 2;
10005666:	4b5b      	ldr	r3, [pc, #364]	; (100057d4 <Steering_Function+0xf88>)
10005668:	781b      	ldrb	r3, [r3, #0]
1000566a:	b2db      	uxtb	r3, r3
1000566c:	2b01      	cmp	r3, #1
1000566e:	d103      	bne.n	10005678 <Steering_Function+0xe2c>
10005670:	2317      	movs	r3, #23
10005672:	18fb      	adds	r3, r7, r3
10005674:	2202      	movs	r2, #2
10005676:	701a      	strb	r2, [r3, #0]

				if(captured_time_Speed > 1700000) NP[0 + front_or_back]++;
10005678:	4b57      	ldr	r3, [pc, #348]	; (100057d8 <Steering_Function+0xf8c>)
1000567a:	681b      	ldr	r3, [r3, #0]
1000567c:	4a57      	ldr	r2, [pc, #348]	; (100057dc <Steering_Function+0xf90>)
1000567e:	4293      	cmp	r3, r2
10005680:	d90c      	bls.n	1000569c <Steering_Function+0xe50>
10005682:	2317      	movs	r3, #23
10005684:	18fb      	adds	r3, r7, r3
10005686:	781b      	ldrb	r3, [r3, #0]
10005688:	4a55      	ldr	r2, [pc, #340]	; (100057e0 <Steering_Function+0xf94>)
1000568a:	0059      	lsls	r1, r3, #1
1000568c:	5a8a      	ldrh	r2, [r1, r2]
1000568e:	b292      	uxth	r2, r2
10005690:	3201      	adds	r2, #1
10005692:	b291      	uxth	r1, r2
10005694:	4a52      	ldr	r2, [pc, #328]	; (100057e0 <Steering_Function+0xf94>)
10005696:	005b      	lsls	r3, r3, #1
10005698:	5299      	strh	r1, [r3, r2]
1000569a:	e010      	b.n	100056be <Steering_Function+0xe72>
				else if	(captured_time_Speed < 1200000) NP[0 + front_or_back]--;
1000569c:	4b4e      	ldr	r3, [pc, #312]	; (100057d8 <Steering_Function+0xf8c>)
1000569e:	681b      	ldr	r3, [r3, #0]
100056a0:	4a50      	ldr	r2, [pc, #320]	; (100057e4 <Steering_Function+0xf98>)
100056a2:	4293      	cmp	r3, r2
100056a4:	d80b      	bhi.n	100056be <Steering_Function+0xe72>
100056a6:	2317      	movs	r3, #23
100056a8:	18fb      	adds	r3, r7, r3
100056aa:	781b      	ldrb	r3, [r3, #0]
100056ac:	4a4c      	ldr	r2, [pc, #304]	; (100057e0 <Steering_Function+0xf94>)
100056ae:	0059      	lsls	r1, r3, #1
100056b0:	5a8a      	ldrh	r2, [r1, r2]
100056b2:	b292      	uxth	r2, r2
100056b4:	3a01      	subs	r2, #1
100056b6:	b291      	uxth	r1, r2
100056b8:	4a49      	ldr	r2, [pc, #292]	; (100057e0 <Steering_Function+0xf94>)
100056ba:	005b      	lsls	r3, r3, #1
100056bc:	5299      	strh	r1, [r3, r2]

				if(RC_Steering > 30) NP[1 + front_or_back]++;
100056be:	4b4a      	ldr	r3, [pc, #296]	; (100057e8 <Steering_Function+0xf9c>)
100056c0:	681b      	ldr	r3, [r3, #0]
100056c2:	1c18      	adds	r0, r3, #0
100056c4:	4949      	ldr	r1, [pc, #292]	; (100057ec <Steering_Function+0xfa0>)
100056c6:	f004 fb5b 	bl	10009d80 <__aeabi_fcmpgt>
100056ca:	1e03      	subs	r3, r0, #0
100056cc:	d00d      	beq.n	100056ea <Steering_Function+0xe9e>
100056ce:	2317      	movs	r3, #23
100056d0:	18fb      	adds	r3, r7, r3
100056d2:	781b      	ldrb	r3, [r3, #0]
100056d4:	3301      	adds	r3, #1
100056d6:	4a42      	ldr	r2, [pc, #264]	; (100057e0 <Steering_Function+0xf94>)
100056d8:	0059      	lsls	r1, r3, #1
100056da:	5a8a      	ldrh	r2, [r1, r2]
100056dc:	b292      	uxth	r2, r2
100056de:	3201      	adds	r2, #1
100056e0:	b291      	uxth	r1, r2
100056e2:	4a3f      	ldr	r2, [pc, #252]	; (100057e0 <Steering_Function+0xf94>)
100056e4:	005b      	lsls	r3, r3, #1
100056e6:	5299      	strh	r1, [r3, r2]
100056e8:	e01c      	b.n	10005724 <Steering_Function+0xed8>
				else if(RC_Steering < -30) NP[1 + front_or_back]--;
100056ea:	4b3f      	ldr	r3, [pc, #252]	; (100057e8 <Steering_Function+0xf9c>)
100056ec:	681b      	ldr	r3, [r3, #0]
100056ee:	1c18      	adds	r0, r3, #0
100056f0:	493f      	ldr	r1, [pc, #252]	; (100057f0 <Steering_Function+0xfa4>)
100056f2:	f004 fb31 	bl	10009d58 <__aeabi_fcmplt>
100056f6:	1e03      	subs	r3, r0, #0
100056f8:	d100      	bne.n	100056fc <Steering_Function+0xeb0>
100056fa:	e013      	b.n	10005724 <Steering_Function+0xed8>
100056fc:	2317      	movs	r3, #23
100056fe:	18fb      	adds	r3, r7, r3
10005700:	781b      	ldrb	r3, [r3, #0]
10005702:	3301      	adds	r3, #1
10005704:	4a36      	ldr	r2, [pc, #216]	; (100057e0 <Steering_Function+0xf94>)
10005706:	0059      	lsls	r1, r3, #1
10005708:	5a8a      	ldrh	r2, [r1, r2]
1000570a:	b292      	uxth	r2, r2
1000570c:	3a01      	subs	r2, #1
1000570e:	b291      	uxth	r1, r2
10005710:	4a33      	ldr	r2, [pc, #204]	; (100057e0 <Steering_Function+0xf94>)
10005712:	005b      	lsls	r3, r3, #1
10005714:	5299      	strh	r1, [r3, r2]
10005716:	e005      	b.n	10005724 <Steering_Function+0xed8>
			}
			else NP_setting_cycel_skipper ++;
10005718:	4b2d      	ldr	r3, [pc, #180]	; (100057d0 <Steering_Function+0xf84>)
1000571a:	781b      	ldrb	r3, [r3, #0]
1000571c:	3301      	adds	r3, #1
1000571e:	b2da      	uxtb	r2, r3
10005720:	4b2b      	ldr	r3, [pc, #172]	; (100057d0 <Steering_Function+0xf84>)
10005722:	701a      	strb	r2, [r3, #0]

	}
  // set gobal vars
  Steering_Angles[0] = angle_fl;
10005724:	4b18      	ldr	r3, [pc, #96]	; (10005788 <Steering_Function+0xf3c>)
10005726:	681a      	ldr	r2, [r3, #0]
10005728:	4b32      	ldr	r3, [pc, #200]	; (100057f4 <Steering_Function+0xfa8>)
1000572a:	601a      	str	r2, [r3, #0]
  Steering_Angles[1] = angle_fr;
1000572c:	4b17      	ldr	r3, [pc, #92]	; (1000578c <Steering_Function+0xf40>)
1000572e:	681a      	ldr	r2, [r3, #0]
10005730:	4b30      	ldr	r3, [pc, #192]	; (100057f4 <Steering_Function+0xfa8>)
10005732:	605a      	str	r2, [r3, #4]
  Steering_Angles[2] = angle_rl;
10005734:	4b16      	ldr	r3, [pc, #88]	; (10005790 <Steering_Function+0xf44>)
10005736:	681a      	ldr	r2, [r3, #0]
10005738:	4b2e      	ldr	r3, [pc, #184]	; (100057f4 <Steering_Function+0xfa8>)
1000573a:	609a      	str	r2, [r3, #8]
  Steering_Angles[3] = angle_rr;
1000573c:	4b15      	ldr	r3, [pc, #84]	; (10005794 <Steering_Function+0xf48>)
1000573e:	681a      	ldr	r2, [r3, #0]
10005740:	4b2c      	ldr	r3, [pc, #176]	; (100057f4 <Steering_Function+0xfa8>)
10005742:	60da      	str	r2, [r3, #12]

  Speeds[0] = speed_fl;
10005744:	4b15      	ldr	r3, [pc, #84]	; (1000579c <Steering_Function+0xf50>)
10005746:	681a      	ldr	r2, [r3, #0]
10005748:	4b2b      	ldr	r3, [pc, #172]	; (100057f8 <Steering_Function+0xfac>)
1000574a:	601a      	str	r2, [r3, #0]
  Speeds[1] = speed_fr;
1000574c:	4b14      	ldr	r3, [pc, #80]	; (100057a0 <Steering_Function+0xf54>)
1000574e:	681a      	ldr	r2, [r3, #0]
10005750:	4b29      	ldr	r3, [pc, #164]	; (100057f8 <Steering_Function+0xfac>)
10005752:	605a      	str	r2, [r3, #4]
  Speeds[2] = speed_rl;
10005754:	4b13      	ldr	r3, [pc, #76]	; (100057a4 <Steering_Function+0xf58>)
10005756:	681a      	ldr	r2, [r3, #0]
10005758:	4b27      	ldr	r3, [pc, #156]	; (100057f8 <Steering_Function+0xfac>)
1000575a:	609a      	str	r2, [r3, #8]
  Speeds[3] = speed_rr;
1000575c:	4b12      	ldr	r3, [pc, #72]	; (100057a8 <Steering_Function+0xf5c>)
1000575e:	681a      	ldr	r2, [r3, #0]
10005760:	4b25      	ldr	r3, [pc, #148]	; (100057f8 <Steering_Function+0xfac>)
10005762:	60da      	str	r2, [r3, #12]

}
10005764:	46bd      	mov	sp, r7
10005766:	b007      	add	sp, #28
10005768:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000576a:	46c0      	nop			; (mov r8, r8)
1000576c:	200009fc 	.word	0x200009fc
10005770:	1a9fbe77 	.word	0x1a9fbe77
10005774:	3fc4dd2f 	.word	0x3fc4dd2f
10005778:	3126e979 	.word	0x3126e979
1000577c:	3fdcac08 	.word	0x3fdcac08
10005780:	2584f4c7 	.word	0x2584f4c7
10005784:	404ca61e 	.word	0x404ca61e
10005788:	20000a14 	.word	0x20000a14
1000578c:	20000a18 	.word	0x20000a18
10005790:	20000a1c 	.word	0x20000a1c
10005794:	20000a20 	.word	0x20000a20
10005798:	20000a00 	.word	0x20000a00
1000579c:	20000a04 	.word	0x20000a04
100057a0:	20000a08 	.word	0x20000a08
100057a4:	20000a0c 	.word	0x20000a0c
100057a8:	20000a10 	.word	0x20000a10
100057ac:	40200000 	.word	0x40200000
100057b0:	433e0000 	.word	0x433e0000
100057b4:	c33e0000 	.word	0xc33e0000
100057b8:	c293eb85 	.word	0xc293eb85
100057bc:	4293eb85 	.word	0x4293eb85
100057c0:	41200000 	.word	0x41200000
100057c4:	becccccd 	.word	0xbecccccd
100057c8:	3ecccccd 	.word	0x3ecccccd
100057cc:	c1200000 	.word	0xc1200000
100057d0:	20000a30 	.word	0x20000a30
100057d4:	2000083c 	.word	0x2000083c
100057d8:	20000aa8 	.word	0x20000aa8
100057dc:	0019f0a0 	.word	0x0019f0a0
100057e0:	20000840 	.word	0x20000840
100057e4:	00124f7f 	.word	0x00124f7f
100057e8:	20000ab4 	.word	0x20000ab4
100057ec:	41f00000 	.word	0x41f00000
100057f0:	c1f00000 	.word	0xc1f00000
100057f4:	20000a5c 	.word	0x20000a5c
100057f8:	20000a3c 	.word	0x20000a3c

100057fc <Trajcetory_calc>:


void Trajcetory_calc(){
100057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100057fe:	af00      	add	r7, sp, #0

	avg_Speeds = average(Speeds,4);
10005800:	4b4f      	ldr	r3, [pc, #316]	; (10005940 <Trajcetory_calc+0x144>)
10005802:	1c18      	adds	r0, r3, #0
10005804:	2104      	movs	r1, #4
10005806:	f001 fa3f 	bl	10006c88 <average>
1000580a:	1c02      	adds	r2, r0, #0
1000580c:	4b4d      	ldr	r3, [pc, #308]	; (10005944 <Trajcetory_calc+0x148>)
1000580e:	601a      	str	r2, [r3, #0]

	switch(Steering_mode) // options 'Front'; 'Rear'; '4_Wheel'; 'Carb'; 'Rotate'
10005810:	4b4d      	ldr	r3, [pc, #308]	; (10005948 <Trajcetory_calc+0x14c>)
10005812:	781b      	ldrb	r3, [r3, #0]
10005814:	b2db      	uxtb	r3, r3
10005816:	2b05      	cmp	r3, #5
10005818:	d85b      	bhi.n	100058d2 <Trajcetory_calc+0xd6>
1000581a:	009a      	lsls	r2, r3, #2
1000581c:	4b4b      	ldr	r3, [pc, #300]	; (1000594c <Trajcetory_calc+0x150>)
1000581e:	18d3      	adds	r3, r2, r3
10005820:	681b      	ldr	r3, [r3, #0]
10005822:	469f      	mov	pc, r3
			case ALL_WHEEL: // 4 wheel #############################################################

				break;

			case CRAB:  //carb //#############################################################
				trajctory_x = avg_Speeds * cos(Steering_Angles[0] / RAD_TO_DEG);
10005824:	4b47      	ldr	r3, [pc, #284]	; (10005944 <Trajcetory_calc+0x148>)
10005826:	681b      	ldr	r3, [r3, #0]
10005828:	1c18      	adds	r0, r3, #0
1000582a:	f007 f817 	bl	1000c85c <__aeabi_f2d>
1000582e:	1c05      	adds	r5, r0, #0
10005830:	1c0e      	adds	r6, r1, #0
10005832:	4b47      	ldr	r3, [pc, #284]	; (10005950 <Trajcetory_calc+0x154>)
10005834:	681b      	ldr	r3, [r3, #0]
10005836:	1c18      	adds	r0, r3, #0
10005838:	f007 f810 	bl	1000c85c <__aeabi_f2d>
1000583c:	1c03      	adds	r3, r0, #0
1000583e:	1c0c      	adds	r4, r1, #0
10005840:	1c18      	adds	r0, r3, #0
10005842:	1c21      	adds	r1, r4, #0
10005844:	4a43      	ldr	r2, [pc, #268]	; (10005954 <Trajcetory_calc+0x158>)
10005846:	4b44      	ldr	r3, [pc, #272]	; (10005958 <Trajcetory_calc+0x15c>)
10005848:	f005 fd12 	bl	1000b270 <__aeabi_ddiv>
1000584c:	1c03      	adds	r3, r0, #0
1000584e:	1c0c      	adds	r4, r1, #0
10005850:	1c18      	adds	r0, r3, #0
10005852:	1c21      	adds	r1, r4, #0
10005854:	f001 fc44 	bl	100070e0 <cos>
10005858:	1c03      	adds	r3, r0, #0
1000585a:	1c0c      	adds	r4, r1, #0
1000585c:	1c28      	adds	r0, r5, #0
1000585e:	1c31      	adds	r1, r6, #0
10005860:	1c1a      	adds	r2, r3, #0
10005862:	1c23      	adds	r3, r4, #0
10005864:	f006 f942 	bl	1000baec <__aeabi_dmul>
10005868:	1c03      	adds	r3, r0, #0
1000586a:	1c0c      	adds	r4, r1, #0
1000586c:	1c18      	adds	r0, r3, #0
1000586e:	1c21      	adds	r1, r4, #0
10005870:	f007 f848 	bl	1000c904 <__aeabi_d2f>
10005874:	1c02      	adds	r2, r0, #0
10005876:	4b39      	ldr	r3, [pc, #228]	; (1000595c <Trajcetory_calc+0x160>)
10005878:	601a      	str	r2, [r3, #0]
				trajctory_y = avg_Speeds * sin(Steering_Angles[0] / RAD_TO_DEG);
1000587a:	4b32      	ldr	r3, [pc, #200]	; (10005944 <Trajcetory_calc+0x148>)
1000587c:	681b      	ldr	r3, [r3, #0]
1000587e:	1c18      	adds	r0, r3, #0
10005880:	f006 ffec 	bl	1000c85c <__aeabi_f2d>
10005884:	1c05      	adds	r5, r0, #0
10005886:	1c0e      	adds	r6, r1, #0
10005888:	4b31      	ldr	r3, [pc, #196]	; (10005950 <Trajcetory_calc+0x154>)
1000588a:	681b      	ldr	r3, [r3, #0]
1000588c:	1c18      	adds	r0, r3, #0
1000588e:	f006 ffe5 	bl	1000c85c <__aeabi_f2d>
10005892:	1c03      	adds	r3, r0, #0
10005894:	1c0c      	adds	r4, r1, #0
10005896:	1c18      	adds	r0, r3, #0
10005898:	1c21      	adds	r1, r4, #0
1000589a:	4a2e      	ldr	r2, [pc, #184]	; (10005954 <Trajcetory_calc+0x158>)
1000589c:	4b2e      	ldr	r3, [pc, #184]	; (10005958 <Trajcetory_calc+0x15c>)
1000589e:	f005 fce7 	bl	1000b270 <__aeabi_ddiv>
100058a2:	1c03      	adds	r3, r0, #0
100058a4:	1c0c      	adds	r4, r1, #0
100058a6:	1c18      	adds	r0, r3, #0
100058a8:	1c21      	adds	r1, r4, #0
100058aa:	f001 fc6b 	bl	10007184 <sin>
100058ae:	1c03      	adds	r3, r0, #0
100058b0:	1c0c      	adds	r4, r1, #0
100058b2:	1c28      	adds	r0, r5, #0
100058b4:	1c31      	adds	r1, r6, #0
100058b6:	1c1a      	adds	r2, r3, #0
100058b8:	1c23      	adds	r3, r4, #0
100058ba:	f006 f917 	bl	1000baec <__aeabi_dmul>
100058be:	1c03      	adds	r3, r0, #0
100058c0:	1c0c      	adds	r4, r1, #0
100058c2:	1c18      	adds	r0, r3, #0
100058c4:	1c21      	adds	r1, r4, #0
100058c6:	f007 f81d 	bl	1000c904 <__aeabi_d2f>
100058ca:	1c02      	adds	r2, r0, #0
100058cc:	4b24      	ldr	r3, [pc, #144]	; (10005960 <Trajcetory_calc+0x164>)
100058ce:	601a      	str	r2, [r3, #0]


				break;
100058d0:	e007      	b.n	100058e2 <Trajcetory_calc+0xe6>

				break;

			default :

			trajctory_x = 0;
100058d2:	4b22      	ldr	r3, [pc, #136]	; (1000595c <Trajcetory_calc+0x160>)
100058d4:	2200      	movs	r2, #0
100058d6:	601a      	str	r2, [r3, #0]
			trajctory_y = 0;
100058d8:	4b21      	ldr	r3, [pc, #132]	; (10005960 <Trajcetory_calc+0x164>)
100058da:	2200      	movs	r2, #0
100058dc:	601a      	str	r2, [r3, #0]
100058de:	e000      	b.n	100058e2 <Trajcetory_calc+0xe6>

	switch(Steering_mode) // options 'Front'; 'Rear'; '4_Wheel'; 'Carb'; 'Rotate'
		{
			case FRONT://#############################################################
				//trajctory_x =
				break;
100058e0:	46c0      	nop			; (mov r8, r8)
			trajctory_x = 0;
			trajctory_y = 0;
		}

	//trajectory_angle = angel_of_2D_vetor_deg(Trajctory); // atan(trajctory_x / trajctory_y) / RAD_TO_DEG;
	Trajctory[0] = trajctory_x;
100058e2:	4b1e      	ldr	r3, [pc, #120]	; (1000595c <Trajcetory_calc+0x160>)
100058e4:	681a      	ldr	r2, [r3, #0]
100058e6:	4b1f      	ldr	r3, [pc, #124]	; (10005964 <Trajcetory_calc+0x168>)
100058e8:	601a      	str	r2, [r3, #0]
	Trajctory[1] = trajctory_y;
100058ea:	4b1d      	ldr	r3, [pc, #116]	; (10005960 <Trajcetory_calc+0x164>)
100058ec:	681a      	ldr	r2, [r3, #0]
100058ee:	4b1d      	ldr	r3, [pc, #116]	; (10005964 <Trajcetory_calc+0x168>)
100058f0:	605a      	str	r2, [r3, #4]
	trajectory_angle = atan2(trajctory_y,trajctory_x) * RAD_TO_DEG;
100058f2:	4b1b      	ldr	r3, [pc, #108]	; (10005960 <Trajcetory_calc+0x164>)
100058f4:	681b      	ldr	r3, [r3, #0]
100058f6:	1c18      	adds	r0, r3, #0
100058f8:	f006 ffb0 	bl	1000c85c <__aeabi_f2d>
100058fc:	1c05      	adds	r5, r0, #0
100058fe:	1c0e      	adds	r6, r1, #0
10005900:	4b16      	ldr	r3, [pc, #88]	; (1000595c <Trajcetory_calc+0x160>)
10005902:	681b      	ldr	r3, [r3, #0]
10005904:	1c18      	adds	r0, r3, #0
10005906:	f006 ffa9 	bl	1000c85c <__aeabi_f2d>
1000590a:	1c03      	adds	r3, r0, #0
1000590c:	1c0c      	adds	r4, r1, #0
1000590e:	1c28      	adds	r0, r5, #0
10005910:	1c31      	adds	r1, r6, #0
10005912:	1c1a      	adds	r2, r3, #0
10005914:	1c23      	adds	r3, r4, #0
10005916:	f001 fcb1 	bl	1000727c <atan2>
1000591a:	1c03      	adds	r3, r0, #0
1000591c:	1c0c      	adds	r4, r1, #0
1000591e:	1c18      	adds	r0, r3, #0
10005920:	1c21      	adds	r1, r4, #0
10005922:	4a0c      	ldr	r2, [pc, #48]	; (10005954 <Trajcetory_calc+0x158>)
10005924:	4b0c      	ldr	r3, [pc, #48]	; (10005958 <Trajcetory_calc+0x15c>)
10005926:	f006 f8e1 	bl	1000baec <__aeabi_dmul>
1000592a:	1c03      	adds	r3, r0, #0
1000592c:	1c0c      	adds	r4, r1, #0
1000592e:	1c18      	adds	r0, r3, #0
10005930:	1c21      	adds	r1, r4, #0
10005932:	f006 ffe7 	bl	1000c904 <__aeabi_d2f>
10005936:	1c02      	adds	r2, r0, #0
10005938:	4b0b      	ldr	r3, [pc, #44]	; (10005968 <Trajcetory_calc+0x16c>)
1000593a:	601a      	str	r2, [r3, #0]
}
1000593c:	46bd      	mov	sp, r7
1000593e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10005940:	20000a3c 	.word	0x20000a3c
10005944:	20000a2c 	.word	0x20000a2c
10005948:	2000082a 	.word	0x2000082a
1000594c:	1000d100 	.word	0x1000d100
10005950:	20000a5c 	.word	0x20000a5c
10005954:	2584f4c7 	.word	0x2584f4c7
10005958:	404ca61e 	.word	0x404ca61e
1000595c:	20000a24 	.word	0x20000a24
10005960:	20000a28 	.word	0x20000a28
10005964:	20000a98 	.word	0x20000a98
10005968:	20000aa0 	.word	0x20000aa0

1000596c <mode_led>:



void mode_led(uint8_t var){
1000596c:	b580      	push	{r7, lr}
1000596e:	b082      	sub	sp, #8
10005970:	af00      	add	r7, sp, #0
10005972:	1c02      	adds	r2, r0, #0
10005974:	1dfb      	adds	r3, r7, #7
10005976:	701a      	strb	r2, [r3, #0]
	if(CHECK_BIT(var,0)){
10005978:	1dfb      	adds	r3, r7, #7
1000597a:	781b      	ldrb	r3, [r3, #0]
1000597c:	2201      	movs	r2, #1
1000597e:	4013      	ands	r3, r2
10005980:	d004      	beq.n	1000598c <mode_led+0x20>
		DIGITAL_IO_SetOutputLow(&MODE_001);
10005982:	4b17      	ldr	r3, [pc, #92]	; (100059e0 <mode_led+0x74>)
10005984:	1c18      	adds	r0, r3, #0
10005986:	f7fe ff51 	bl	1000482c <DIGITAL_IO_SetOutputLow>
1000598a:	e003      	b.n	10005994 <mode_led+0x28>
	}
	else{
		DIGITAL_IO_SetOutputHigh(&MODE_001);
1000598c:	4b14      	ldr	r3, [pc, #80]	; (100059e0 <mode_led+0x74>)
1000598e:	1c18      	adds	r0, r3, #0
10005990:	f7fe ff3c 	bl	1000480c <DIGITAL_IO_SetOutputHigh>
	}

	if(CHECK_BIT(var,1)){
10005994:	1dfb      	adds	r3, r7, #7
10005996:	781b      	ldrb	r3, [r3, #0]
10005998:	085b      	lsrs	r3, r3, #1
1000599a:	b2db      	uxtb	r3, r3
1000599c:	1c1a      	adds	r2, r3, #0
1000599e:	2301      	movs	r3, #1
100059a0:	4013      	ands	r3, r2
100059a2:	d004      	beq.n	100059ae <mode_led+0x42>
		DIGITAL_IO_SetOutputLow(&MODE_010);
100059a4:	4b0f      	ldr	r3, [pc, #60]	; (100059e4 <mode_led+0x78>)
100059a6:	1c18      	adds	r0, r3, #0
100059a8:	f7fe ff40 	bl	1000482c <DIGITAL_IO_SetOutputLow>
100059ac:	e003      	b.n	100059b6 <mode_led+0x4a>
	}
	else{
		DIGITAL_IO_SetOutputHigh(&MODE_010);
100059ae:	4b0d      	ldr	r3, [pc, #52]	; (100059e4 <mode_led+0x78>)
100059b0:	1c18      	adds	r0, r3, #0
100059b2:	f7fe ff2b 	bl	1000480c <DIGITAL_IO_SetOutputHigh>
	}

	if(CHECK_BIT(var,2)){
100059b6:	1dfb      	adds	r3, r7, #7
100059b8:	781b      	ldrb	r3, [r3, #0]
100059ba:	089b      	lsrs	r3, r3, #2
100059bc:	b2db      	uxtb	r3, r3
100059be:	1c1a      	adds	r2, r3, #0
100059c0:	2301      	movs	r3, #1
100059c2:	4013      	ands	r3, r2
100059c4:	d004      	beq.n	100059d0 <mode_led+0x64>
		DIGITAL_IO_SetOutputLow(&MODE_100);
100059c6:	4b08      	ldr	r3, [pc, #32]	; (100059e8 <mode_led+0x7c>)
100059c8:	1c18      	adds	r0, r3, #0
100059ca:	f7fe ff2f 	bl	1000482c <DIGITAL_IO_SetOutputLow>
100059ce:	e003      	b.n	100059d8 <mode_led+0x6c>
	}
	else{
		DIGITAL_IO_SetOutputHigh(&MODE_100);
100059d0:	4b05      	ldr	r3, [pc, #20]	; (100059e8 <mode_led+0x7c>)
100059d2:	1c18      	adds	r0, r3, #0
100059d4:	f7fe ff1a 	bl	1000480c <DIGITAL_IO_SetOutputHigh>
	}
}
100059d8:	46bd      	mov	sp, r7
100059da:	b002      	add	sp, #8
100059dc:	bd80      	pop	{r7, pc}
100059de:	46c0      	nop			; (mov r8, r8)
100059e0:	1000ceec 	.word	0x1000ceec
100059e4:	1000cefc 	.word	0x1000cefc
100059e8:	1000cf0c 	.word	0x1000cf0c

100059ec <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100059ec:	b580      	push	{r7, lr}
100059ee:	b082      	sub	sp, #8
100059f0:	af00      	add	r7, sp, #0
100059f2:	6078      	str	r0, [r7, #4]
100059f4:	1c0a      	adds	r2, r1, #0
100059f6:	1cfb      	adds	r3, r7, #3
100059f8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
100059fa:	1cfb      	adds	r3, r7, #3
100059fc:	781b      	ldrb	r3, [r3, #0]
100059fe:	2201      	movs	r2, #1
10005a00:	409a      	lsls	r2, r3
10005a02:	687b      	ldr	r3, [r7, #4]
10005a04:	605a      	str	r2, [r3, #4]
}
10005a06:	46bd      	mov	sp, r7
10005a08:	b002      	add	sp, #8
10005a0a:	bd80      	pop	{r7, pc}

10005a0c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10005a0c:	b580      	push	{r7, lr}
10005a0e:	b082      	sub	sp, #8
10005a10:	af00      	add	r7, sp, #0
10005a12:	6078      	str	r0, [r7, #4]
10005a14:	1c0a      	adds	r2, r1, #0
10005a16:	1cfb      	adds	r3, r7, #3
10005a18:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10005a1a:	1cfb      	adds	r3, r7, #3
10005a1c:	781b      	ldrb	r3, [r3, #0]
10005a1e:	2280      	movs	r2, #128	; 0x80
10005a20:	0252      	lsls	r2, r2, #9
10005a22:	409a      	lsls	r2, r3
10005a24:	687b      	ldr	r3, [r7, #4]
10005a26:	605a      	str	r2, [r3, #4]
}
10005a28:	46bd      	mov	sp, r7
10005a2a:	b002      	add	sp, #8
10005a2c:	bd80      	pop	{r7, pc}
10005a2e:	46c0      	nop			; (mov r8, r8)

10005a30 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10005a30:	b580      	push	{r7, lr}
10005a32:	b082      	sub	sp, #8
10005a34:	af00      	add	r7, sp, #0
10005a36:	6078      	str	r0, [r7, #4]
10005a38:	1c0a      	adds	r2, r1, #0
10005a3a:	1cfb      	adds	r3, r7, #3
10005a3c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
10005a3e:	687b      	ldr	r3, [r7, #4]
10005a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10005a42:	1cfb      	adds	r3, r7, #3
10005a44:	781b      	ldrb	r3, [r3, #0]
10005a46:	40da      	lsrs	r2, r3
10005a48:	1c13      	adds	r3, r2, #0
10005a4a:	2201      	movs	r2, #1
10005a4c:	4013      	ands	r3, r2
}
10005a4e:	1c18      	adds	r0, r3, #0
10005a50:	46bd      	mov	sp, r7
10005a52:	b002      	add	sp, #8
10005a54:	bd80      	pop	{r7, pc}
10005a56:	46c0      	nop			; (mov r8, r8)

10005a58 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10005a58:	b580      	push	{r7, lr}
10005a5a:	b082      	sub	sp, #8
10005a5c:	af00      	add	r7, sp, #0
10005a5e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10005a60:	687b      	ldr	r3, [r7, #4]
10005a62:	681a      	ldr	r2, [r3, #0]
10005a64:	687b      	ldr	r3, [r7, #4]
10005a66:	7b1b      	ldrb	r3, [r3, #12]
10005a68:	1c10      	adds	r0, r2, #0
10005a6a:	1c19      	adds	r1, r3, #0
10005a6c:	f7ff ffbe 	bl	100059ec <XMC_GPIO_SetOutputHigh>
}
10005a70:	46bd      	mov	sp, r7
10005a72:	b002      	add	sp, #8
10005a74:	bd80      	pop	{r7, pc}
10005a76:	46c0      	nop			; (mov r8, r8)

10005a78 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10005a78:	b580      	push	{r7, lr}
10005a7a:	b082      	sub	sp, #8
10005a7c:	af00      	add	r7, sp, #0
10005a7e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10005a80:	687b      	ldr	r3, [r7, #4]
10005a82:	681a      	ldr	r2, [r3, #0]
10005a84:	687b      	ldr	r3, [r7, #4]
10005a86:	7b1b      	ldrb	r3, [r3, #12]
10005a88:	1c10      	adds	r0, r2, #0
10005a8a:	1c19      	adds	r1, r3, #0
10005a8c:	f7ff ffbe 	bl	10005a0c <XMC_GPIO_SetOutputLow>
}
10005a90:	46bd      	mov	sp, r7
10005a92:	b002      	add	sp, #8
10005a94:	bd80      	pop	{r7, pc}
10005a96:	46c0      	nop			; (mov r8, r8)

10005a98 <PIN_INTERRUPT_GetPinValue>:
*   return (1);
* }
*  @endcode
*/
__STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
{
10005a98:	b580      	push	{r7, lr}
10005a9a:	b082      	sub	sp, #8
10005a9c:	af00      	add	r7, sp, #0
10005a9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
  return (XMC_GPIO_GetInput(handle->port, handle->pin));
10005aa0:	687b      	ldr	r3, [r7, #4]
10005aa2:	685a      	ldr	r2, [r3, #4]
10005aa4:	687b      	ldr	r3, [r7, #4]
10005aa6:	7f9b      	ldrb	r3, [r3, #30]
10005aa8:	1c10      	adds	r0, r2, #0
10005aaa:	1c19      	adds	r1, r3, #0
10005aac:	f7ff ffc0 	bl	10005a30 <XMC_GPIO_GetInput>
10005ab0:	1c03      	adds	r3, r0, #0
}
10005ab2:	1c18      	adds	r0, r3, #0
10005ab4:	46bd      	mov	sp, r7
10005ab6:	b002      	add	sp, #8
10005ab8:	bd80      	pop	{r7, pc}
10005aba:	46c0      	nop			; (mov r8, r8)

10005abc <IRQ8_Handler>:
volatile uint8_t RC_Gear_duty = 2, RC_Gear_duty_OLD =2, RC_AUX1_duty = 2;
//uint8_t RC_Speed_Stop = 1;

volatile uint8_t RC_Speed_Stop_counter = RC_SPEED_SAFTY_FT;

void INTERRUPT_TIMER_10us_ISR(void){ // every 1ms so 10kHz
10005abc:	b580      	push	{r7, lr}
10005abe:	af00      	add	r7, sp, #0
	if(RC_Gear_state == 1)RC_gear_100us_counter ++;
10005ac0:	4b0a      	ldr	r3, [pc, #40]	; (10005aec <IRQ8_Handler+0x30>)
10005ac2:	781b      	ldrb	r3, [r3, #0]
10005ac4:	b2db      	uxtb	r3, r3
10005ac6:	2b01      	cmp	r3, #1
10005ac8:	d104      	bne.n	10005ad4 <IRQ8_Handler+0x18>
10005aca:	4b09      	ldr	r3, [pc, #36]	; (10005af0 <IRQ8_Handler+0x34>)
10005acc:	681b      	ldr	r3, [r3, #0]
10005ace:	1c5a      	adds	r2, r3, #1
10005ad0:	4b07      	ldr	r3, [pc, #28]	; (10005af0 <IRQ8_Handler+0x34>)
10005ad2:	601a      	str	r2, [r3, #0]
	if(RC_AUX1_state == 1)RC_AUX1_100us_counter ++;
10005ad4:	4b07      	ldr	r3, [pc, #28]	; (10005af4 <IRQ8_Handler+0x38>)
10005ad6:	781b      	ldrb	r3, [r3, #0]
10005ad8:	b2db      	uxtb	r3, r3
10005ada:	2b01      	cmp	r3, #1
10005adc:	d104      	bne.n	10005ae8 <IRQ8_Handler+0x2c>
10005ade:	4b06      	ldr	r3, [pc, #24]	; (10005af8 <IRQ8_Handler+0x3c>)
10005ae0:	681b      	ldr	r3, [r3, #0]
10005ae2:	1c5a      	adds	r2, r3, #1
10005ae4:	4b04      	ldr	r3, [pc, #16]	; (10005af8 <IRQ8_Handler+0x3c>)
10005ae6:	601a      	str	r2, [r3, #0]
}
10005ae8:	46bd      	mov	sp, r7
10005aea:	bd80      	pop	{r7, pc}
10005aec:	20000838 	.word	0x20000838
10005af0:	20000ab8 	.word	0x20000ab8
10005af4:	20000839 	.word	0x20000839
10005af8:	20000abc 	.word	0x20000abc

10005afc <RC_Recive>:



void RC_Recive(void){
10005afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005afe:	af00      	add	r7, sp, #0

	CAPTURE_Start(&CAPTURE_RC_Steering);
10005b00:	4b66      	ldr	r3, [pc, #408]	; (10005c9c <RC_Recive+0x1a0>)
10005b02:	1c18      	adds	r0, r3, #0
10005b04:	f7fd fd5e 	bl	100035c4 <CAPTURE_Start>
	CAPTURE_Start(&CAPTURE_RC_Speed);
10005b08:	4b65      	ldr	r3, [pc, #404]	; (10005ca0 <RC_Recive+0x1a4>)
10005b0a:	1c18      	adds	r0, r3, #0
10005b0c:	f7fd fd5a 	bl	100035c4 <CAPTURE_Start>

	CAPTURE_GetCapturedTimeInNanoSec(&CAPTURE_RC_Steering, &captured_time_Steering);
10005b10:	4a62      	ldr	r2, [pc, #392]	; (10005c9c <RC_Recive+0x1a0>)
10005b12:	4b64      	ldr	r3, [pc, #400]	; (10005ca4 <RC_Recive+0x1a8>)
10005b14:	1c10      	adds	r0, r2, #0
10005b16:	1c19      	adds	r1, r3, #0
10005b18:	f7fd fd8a 	bl	10003630 <CAPTURE_GetCapturedTimeInNanoSec>
	CAPTURE_GetCapturedTimeInNanoSec(&CAPTURE_RC_Speed, &captured_time_Speed);
10005b1c:	4a60      	ldr	r2, [pc, #384]	; (10005ca0 <RC_Recive+0x1a4>)
10005b1e:	4b62      	ldr	r3, [pc, #392]	; (10005ca8 <RC_Recive+0x1ac>)
10005b20:	1c10      	adds	r0, r2, #0
10005b22:	1c19      	adds	r1, r3, #0
10005b24:	f7fd fd84 	bl	10003630 <CAPTURE_GetCapturedTimeInNanoSec>

	if(RC_Speed_Stop_counter < RC_SPEED_SAFTY_FT ){
10005b28:	4b60      	ldr	r3, [pc, #384]	; (10005cac <RC_Recive+0x1b0>)
10005b2a:	781b      	ldrb	r3, [r3, #0]
10005b2c:	b2db      	uxtb	r3, r3
10005b2e:	2b09      	cmp	r3, #9
10005b30:	d83b      	bhi.n	10005baa <RC_Recive+0xae>
		if((captured_time_Speed >= 1000000) && (captured_time_Speed <= 2000000)){
10005b32:	4b5d      	ldr	r3, [pc, #372]	; (10005ca8 <RC_Recive+0x1ac>)
10005b34:	681b      	ldr	r3, [r3, #0]
10005b36:	4a5e      	ldr	r2, [pc, #376]	; (10005cb0 <RC_Recive+0x1b4>)
10005b38:	4293      	cmp	r3, r2
10005b3a:	d92f      	bls.n	10005b9c <RC_Recive+0xa0>
10005b3c:	4b5a      	ldr	r3, [pc, #360]	; (10005ca8 <RC_Recive+0x1ac>)
10005b3e:	681b      	ldr	r3, [r3, #0]
10005b40:	4a5c      	ldr	r2, [pc, #368]	; (10005cb4 <RC_Recive+0x1b8>)
10005b42:	4293      	cmp	r3, r2
10005b44:	d82a      	bhi.n	10005b9c <RC_Recive+0xa0>
		  RC_Speed = ((double)captured_time_Speed - RC_NP_SPEED) * RC_Speed_ns_to_mps; //  form +-0.6m/s
10005b46:	4b58      	ldr	r3, [pc, #352]	; (10005ca8 <RC_Recive+0x1ac>)
10005b48:	681b      	ldr	r3, [r3, #0]
10005b4a:	1c18      	adds	r0, r3, #0
10005b4c:	f006 fe54 	bl	1000c7f8 <__aeabi_ui2d>
10005b50:	1c03      	adds	r3, r0, #0
10005b52:	1c0c      	adds	r4, r1, #0
10005b54:	1c18      	adds	r0, r3, #0
10005b56:	1c21      	adds	r1, r4, #0
10005b58:	2200      	movs	r2, #0
10005b5a:	4b57      	ldr	r3, [pc, #348]	; (10005cb8 <RC_Recive+0x1bc>)
10005b5c:	f006 fa60 	bl	1000c020 <__aeabi_dsub>
10005b60:	1c03      	adds	r3, r0, #0
10005b62:	1c0c      	adds	r4, r1, #0
10005b64:	1c1d      	adds	r5, r3, #0
10005b66:	1c26      	adds	r6, r4, #0
10005b68:	4b54      	ldr	r3, [pc, #336]	; (10005cbc <RC_Recive+0x1c0>)
10005b6a:	681b      	ldr	r3, [r3, #0]
10005b6c:	1c18      	adds	r0, r3, #0
10005b6e:	f006 fe75 	bl	1000c85c <__aeabi_f2d>
10005b72:	1c03      	adds	r3, r0, #0
10005b74:	1c0c      	adds	r4, r1, #0
10005b76:	1c28      	adds	r0, r5, #0
10005b78:	1c31      	adds	r1, r6, #0
10005b7a:	1c1a      	adds	r2, r3, #0
10005b7c:	1c23      	adds	r3, r4, #0
10005b7e:	f005 ffb5 	bl	1000baec <__aeabi_dmul>
10005b82:	1c03      	adds	r3, r0, #0
10005b84:	1c0c      	adds	r4, r1, #0
10005b86:	1c18      	adds	r0, r3, #0
10005b88:	1c21      	adds	r1, r4, #0
10005b8a:	f006 febb 	bl	1000c904 <__aeabi_d2f>
10005b8e:	1c02      	adds	r2, r0, #0
10005b90:	4b4b      	ldr	r3, [pc, #300]	; (10005cc0 <RC_Recive+0x1c4>)
10005b92:	601a      	str	r2, [r3, #0]
		 // if((RC_Speed < 0.1) && (RC_Speed > -0.1)) RC_Speed = 0; // to have accutal 0
		  RC_no_Speed_data_counter = 0;
10005b94:	4b4b      	ldr	r3, [pc, #300]	; (10005cc4 <RC_Recive+0x1c8>)
10005b96:	2200      	movs	r2, #0
10005b98:	701a      	strb	r2, [r3, #0]
10005b9a:	e009      	b.n	10005bb0 <RC_Recive+0xb4>
		}
		else{
			RC_no_Speed_data_counter ++;
10005b9c:	4b49      	ldr	r3, [pc, #292]	; (10005cc4 <RC_Recive+0x1c8>)
10005b9e:	781b      	ldrb	r3, [r3, #0]
10005ba0:	3301      	adds	r3, #1
10005ba2:	b2da      	uxtb	r2, r3
10005ba4:	4b47      	ldr	r3, [pc, #284]	; (10005cc4 <RC_Recive+0x1c8>)
10005ba6:	701a      	strb	r2, [r3, #0]
10005ba8:	e002      	b.n	10005bb0 <RC_Recive+0xb4>
		}
	}
	else RC_Speed = 0;
10005baa:	4b45      	ldr	r3, [pc, #276]	; (10005cc0 <RC_Recive+0x1c4>)
10005bac:	2200      	movs	r2, #0
10005bae:	601a      	str	r2, [r3, #0]

	if((captured_time_Steering >= 1000000) && (captured_time_Steering <= 2000000)){
10005bb0:	4b3c      	ldr	r3, [pc, #240]	; (10005ca4 <RC_Recive+0x1a8>)
10005bb2:	681b      	ldr	r3, [r3, #0]
10005bb4:	4a3e      	ldr	r2, [pc, #248]	; (10005cb0 <RC_Recive+0x1b4>)
10005bb6:	4293      	cmp	r3, r2
10005bb8:	d940      	bls.n	10005c3c <RC_Recive+0x140>
10005bba:	4b3a      	ldr	r3, [pc, #232]	; (10005ca4 <RC_Recive+0x1a8>)
10005bbc:	681b      	ldr	r3, [r3, #0]
10005bbe:	4a3d      	ldr	r2, [pc, #244]	; (10005cb4 <RC_Recive+0x1b8>)
10005bc0:	4293      	cmp	r3, r2
10005bc2:	d83b      	bhi.n	10005c3c <RC_Recive+0x140>
	  RC_Steering = -(((double)captured_time_Steering - RC_NP_STEERING) * RC_Steering_ns_to_deg); // form +-90m/s
10005bc4:	4b37      	ldr	r3, [pc, #220]	; (10005ca4 <RC_Recive+0x1a8>)
10005bc6:	681b      	ldr	r3, [r3, #0]
10005bc8:	1c18      	adds	r0, r3, #0
10005bca:	f006 fe15 	bl	1000c7f8 <__aeabi_ui2d>
10005bce:	1c03      	adds	r3, r0, #0
10005bd0:	1c0c      	adds	r4, r1, #0
10005bd2:	1c18      	adds	r0, r3, #0
10005bd4:	1c21      	adds	r1, r4, #0
10005bd6:	2200      	movs	r2, #0
10005bd8:	4b37      	ldr	r3, [pc, #220]	; (10005cb8 <RC_Recive+0x1bc>)
10005bda:	f006 fa21 	bl	1000c020 <__aeabi_dsub>
10005bde:	1c03      	adds	r3, r0, #0
10005be0:	1c0c      	adds	r4, r1, #0
10005be2:	1c1d      	adds	r5, r3, #0
10005be4:	1c26      	adds	r6, r4, #0
10005be6:	4b38      	ldr	r3, [pc, #224]	; (10005cc8 <RC_Recive+0x1cc>)
10005be8:	681b      	ldr	r3, [r3, #0]
10005bea:	1c18      	adds	r0, r3, #0
10005bec:	f006 fe36 	bl	1000c85c <__aeabi_f2d>
10005bf0:	1c03      	adds	r3, r0, #0
10005bf2:	1c0c      	adds	r4, r1, #0
10005bf4:	1c28      	adds	r0, r5, #0
10005bf6:	1c31      	adds	r1, r6, #0
10005bf8:	1c1a      	adds	r2, r3, #0
10005bfa:	1c23      	adds	r3, r4, #0
10005bfc:	f005 ff76 	bl	1000baec <__aeabi_dmul>
10005c00:	1c03      	adds	r3, r0, #0
10005c02:	1c0c      	adds	r4, r1, #0
10005c04:	1c18      	adds	r0, r3, #0
10005c06:	1c21      	adds	r1, r4, #0
10005c08:	f006 fe7c 	bl	1000c904 <__aeabi_d2f>
10005c0c:	1c02      	adds	r2, r0, #0
10005c0e:	2380      	movs	r3, #128	; 0x80
10005c10:	061b      	lsls	r3, r3, #24
10005c12:	405a      	eors	r2, r3
10005c14:	4b2d      	ldr	r3, [pc, #180]	; (10005ccc <RC_Recive+0x1d0>)
10005c16:	601a      	str	r2, [r3, #0]
	  if(within_MAX_MIN(RC_Steering, 2, -2)) RC_Steering = 0; // to have accutal 0
10005c18:	4b2c      	ldr	r3, [pc, #176]	; (10005ccc <RC_Recive+0x1d0>)
10005c1a:	681b      	ldr	r3, [r3, #0]
10005c1c:	2180      	movs	r1, #128	; 0x80
10005c1e:	05c9      	lsls	r1, r1, #23
10005c20:	22c0      	movs	r2, #192	; 0xc0
10005c22:	0612      	lsls	r2, r2, #24
10005c24:	1c18      	adds	r0, r3, #0
10005c26:	f000 ffab 	bl	10006b80 <within_MAX_MIN>
10005c2a:	1e03      	subs	r3, r0, #0
10005c2c:	d002      	beq.n	10005c34 <RC_Recive+0x138>
10005c2e:	4b27      	ldr	r3, [pc, #156]	; (10005ccc <RC_Recive+0x1d0>)
10005c30:	2200      	movs	r2, #0
10005c32:	601a      	str	r2, [r3, #0]
	  RC_no_Steering_data_counter = 0;
10005c34:	4b26      	ldr	r3, [pc, #152]	; (10005cd0 <RC_Recive+0x1d4>)
10005c36:	2200      	movs	r2, #0
10005c38:	701a      	strb	r2, [r3, #0]
10005c3a:	e005      	b.n	10005c48 <RC_Recive+0x14c>
	}
	else{
	  RC_no_Steering_data_counter ++;
10005c3c:	4b24      	ldr	r3, [pc, #144]	; (10005cd0 <RC_Recive+0x1d4>)
10005c3e:	781b      	ldrb	r3, [r3, #0]
10005c40:	3301      	adds	r3, #1
10005c42:	b2da      	uxtb	r2, r3
10005c44:	4b22      	ldr	r3, [pc, #136]	; (10005cd0 <RC_Recive+0x1d4>)
10005c46:	701a      	strb	r2, [r3, #0]
	}

	if(RC_no_Speed_data_counter > 20 || RC_no_Steering_data_counter > 20 ){ // internall values not ok
10005c48:	4b1e      	ldr	r3, [pc, #120]	; (10005cc4 <RC_Recive+0x1c8>)
10005c4a:	781b      	ldrb	r3, [r3, #0]
10005c4c:	2b14      	cmp	r3, #20
10005c4e:	d803      	bhi.n	10005c58 <RC_Recive+0x15c>
10005c50:	4b1f      	ldr	r3, [pc, #124]	; (10005cd0 <RC_Recive+0x1d4>)
10005c52:	781b      	ldrb	r3, [r3, #0]
10005c54:	2b14      	cmp	r3, #20
10005c56:	d910      	bls.n	10005c7a <RC_Recive+0x17e>
	  DIGITAL_IO_SetOutputLow(&RC_no_data_LED);
10005c58:	4b1e      	ldr	r3, [pc, #120]	; (10005cd4 <RC_Recive+0x1d8>)
10005c5a:	1c18      	adds	r0, r3, #0
10005c5c:	f7ff ff0c 	bl	10005a78 <DIGITAL_IO_SetOutputLow>
	  RC_no_Speed_data_counter = 20;
10005c60:	4b18      	ldr	r3, [pc, #96]	; (10005cc4 <RC_Recive+0x1c8>)
10005c62:	2214      	movs	r2, #20
10005c64:	701a      	strb	r2, [r3, #0]
	  RC_no_Steering_data_counter = 20;
10005c66:	4b1a      	ldr	r3, [pc, #104]	; (10005cd0 <RC_Recive+0x1d4>)
10005c68:	2214      	movs	r2, #20
10005c6a:	701a      	strb	r2, [r3, #0]

	  //set gobal vars 0
	  Driving_speed = 0;
10005c6c:	4b1a      	ldr	r3, [pc, #104]	; (10005cd8 <RC_Recive+0x1dc>)
10005c6e:	2200      	movs	r2, #0
10005c70:	601a      	str	r2, [r3, #0]
	  Steering_direction = 0;
10005c72:	4b1a      	ldr	r3, [pc, #104]	; (10005cdc <RC_Recive+0x1e0>)
10005c74:	2200      	movs	r2, #0
10005c76:	601a      	str	r2, [r3, #0]
10005c78:	e00b      	b.n	10005c92 <RC_Recive+0x196>
	}
	else{ // values filternig
	  DIGITAL_IO_SetOutputHigh(&RC_no_data_LED);
10005c7a:	4b16      	ldr	r3, [pc, #88]	; (10005cd4 <RC_Recive+0x1d8>)
10005c7c:	1c18      	adds	r0, r3, #0
10005c7e:	f7ff feeb 	bl	10005a58 <DIGITAL_IO_SetOutputHigh>

	  //set gobal vars stanart
	  Driving_speed = RC_Speed;
10005c82:	4b0f      	ldr	r3, [pc, #60]	; (10005cc0 <RC_Recive+0x1c4>)
10005c84:	681a      	ldr	r2, [r3, #0]
10005c86:	4b14      	ldr	r3, [pc, #80]	; (10005cd8 <RC_Recive+0x1dc>)
10005c88:	601a      	str	r2, [r3, #0]
	  Steering_direction = RC_Steering;
10005c8a:	4b10      	ldr	r3, [pc, #64]	; (10005ccc <RC_Recive+0x1d0>)
10005c8c:	681a      	ldr	r2, [r3, #0]
10005c8e:	4b13      	ldr	r3, [pc, #76]	; (10005cdc <RC_Recive+0x1e0>)
10005c90:	601a      	str	r2, [r3, #0]
	}

	New_Input = 1; //goalb var to tell it that there in new data to calculate
10005c92:	4b13      	ldr	r3, [pc, #76]	; (10005ce0 <RC_Recive+0x1e4>)
10005c94:	2201      	movs	r2, #1
10005c96:	701a      	strb	r2, [r3, #0]
}
10005c98:	46bd      	mov	sp, r7
10005c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10005c9c:	200006e0 	.word	0x200006e0
10005ca0:	20000714 	.word	0x20000714
10005ca4:	20000aa4 	.word	0x20000aa4
10005ca8:	20000aa8 	.word	0x20000aa8
10005cac:	2000083d 	.word	0x2000083d
10005cb0:	000f423f 	.word	0x000f423f
10005cb4:	001e8480 	.word	0x001e8480
10005cb8:	4136e360 	.word	0x4136e360
10005cbc:	20000830 	.word	0x20000830
10005cc0:	20000ab0 	.word	0x20000ab0
10005cc4:	20000aac 	.word	0x20000aac
10005cc8:	20000834 	.word	0x20000834
10005ccc:	20000ab4 	.word	0x20000ab4
10005cd0:	20000aad 	.word	0x20000aad
10005cd4:	1000cecc 	.word	0x1000cecc
10005cd8:	20000a38 	.word	0x20000a38
10005cdc:	20000a34 	.word	0x20000a34
10005ce0:	20000a8c 	.word	0x20000a8c

10005ce4 <IRQ12_Handler>:

void RC_Connected_ISR(void){
10005ce4:	b580      	push	{r7, lr}
10005ce6:	b082      	sub	sp, #8
10005ce8:	af00      	add	r7, sp, #0

	if(RC_controll == 1){
10005cea:	4b31      	ldr	r3, [pc, #196]	; (10005db0 <IRQ12_Handler+0xcc>)
10005cec:	781b      	ldrb	r3, [r3, #0]
10005cee:	b2db      	uxtb	r3, r3
10005cf0:	2b01      	cmp	r3, #1
10005cf2:	d159      	bne.n	10005da8 <IRQ12_Handler+0xc4>

		RC_Gear_state =  PIN_INTERRUPT_GetPinValue(&RC_Connected); // pin haig or low
10005cf4:	4b2f      	ldr	r3, [pc, #188]	; (10005db4 <IRQ12_Handler+0xd0>)
10005cf6:	1c18      	adds	r0, r3, #0
10005cf8:	f7ff fece 	bl	10005a98 <PIN_INTERRUPT_GetPinValue>
10005cfc:	1c03      	adds	r3, r0, #0
10005cfe:	b2da      	uxtb	r2, r3
10005d00:	4b2d      	ldr	r3, [pc, #180]	; (10005db8 <IRQ12_Handler+0xd4>)
10005d02:	701a      	strb	r2, [r3, #0]

		if(RC_Gear_state == 0){// do nothing during high
10005d04:	4b2c      	ldr	r3, [pc, #176]	; (10005db8 <IRQ12_Handler+0xd4>)
10005d06:	781b      	ldrb	r3, [r3, #0]
10005d08:	b2db      	uxtb	r3, r3
10005d0a:	2b00      	cmp	r3, #0
10005d0c:	d14c      	bne.n	10005da8 <IRQ12_Handler+0xc4>

			RC_Recive(); // get speed and steering data
10005d0e:	f7ff fef5 	bl	10005afc <RC_Recive>

			uint32_t RC_Gear_on_time_100us = RC_gear_100us_counter;
10005d12:	4b2a      	ldr	r3, [pc, #168]	; (10005dbc <IRQ12_Handler+0xd8>)
10005d14:	681b      	ldr	r3, [r3, #0]
10005d16:	607b      	str	r3, [r7, #4]
			RC_gear_100us_counter = 0;
10005d18:	4b28      	ldr	r3, [pc, #160]	; (10005dbc <IRQ12_Handler+0xd8>)
10005d1a:	2200      	movs	r2, #0
10005d1c:	601a      	str	r2, [r3, #0]

			if((80 < RC_Gear_on_time_100us) && (RC_Gear_on_time_100us < 150)) RC_Gear_duty= 0;
10005d1e:	687b      	ldr	r3, [r7, #4]
10005d20:	2b50      	cmp	r3, #80	; 0x50
10005d22:	d906      	bls.n	10005d32 <IRQ12_Handler+0x4e>
10005d24:	687b      	ldr	r3, [r7, #4]
10005d26:	2b95      	cmp	r3, #149	; 0x95
10005d28:	d803      	bhi.n	10005d32 <IRQ12_Handler+0x4e>
10005d2a:	4b25      	ldr	r3, [pc, #148]	; (10005dc0 <IRQ12_Handler+0xdc>)
10005d2c:	2200      	movs	r2, #0
10005d2e:	701a      	strb	r2, [r3, #0]
10005d30:	e00c      	b.n	10005d4c <IRQ12_Handler+0x68>
			else if ((150 < RC_Gear_on_time_100us) && (RC_Gear_on_time_100us < 210)) RC_Gear_duty = 1;
10005d32:	687b      	ldr	r3, [r7, #4]
10005d34:	2b96      	cmp	r3, #150	; 0x96
10005d36:	d906      	bls.n	10005d46 <IRQ12_Handler+0x62>
10005d38:	687b      	ldr	r3, [r7, #4]
10005d3a:	2bd1      	cmp	r3, #209	; 0xd1
10005d3c:	d803      	bhi.n	10005d46 <IRQ12_Handler+0x62>
10005d3e:	4b20      	ldr	r3, [pc, #128]	; (10005dc0 <IRQ12_Handler+0xdc>)
10005d40:	2201      	movs	r2, #1
10005d42:	701a      	strb	r2, [r3, #0]
10005d44:	e002      	b.n	10005d4c <IRQ12_Handler+0x68>
			else RC_Gear_duty = 2;
10005d46:	4b1e      	ldr	r3, [pc, #120]	; (10005dc0 <IRQ12_Handler+0xdc>)
10005d48:	2202      	movs	r2, #2
10005d4a:	701a      	strb	r2, [r3, #0]


			if(modeswitch_colldown == 0){
10005d4c:	4b1d      	ldr	r3, [pc, #116]	; (10005dc4 <IRQ12_Handler+0xe0>)
10005d4e:	781b      	ldrb	r3, [r3, #0]
10005d50:	b2db      	uxtb	r3, r3
10005d52:	2b00      	cmp	r3, #0
10005d54:	d11c      	bne.n	10005d90 <IRQ12_Handler+0xac>
				if(RC_Gear_duty == 0 && RC_Gear_duty_OLD == 1){
10005d56:	4b1a      	ldr	r3, [pc, #104]	; (10005dc0 <IRQ12_Handler+0xdc>)
10005d58:	781b      	ldrb	r3, [r3, #0]
10005d5a:	b2db      	uxtb	r3, r3
10005d5c:	2b00      	cmp	r3, #0
10005d5e:	d11e      	bne.n	10005d9e <IRQ12_Handler+0xba>
10005d60:	4b19      	ldr	r3, [pc, #100]	; (10005dc8 <IRQ12_Handler+0xe4>)
10005d62:	781b      	ldrb	r3, [r3, #0]
10005d64:	b2db      	uxtb	r3, r3
10005d66:	2b01      	cmp	r3, #1
10005d68:	d119      	bne.n	10005d9e <IRQ12_Handler+0xba>
					Steering_mode ++;
10005d6a:	4b18      	ldr	r3, [pc, #96]	; (10005dcc <IRQ12_Handler+0xe8>)
10005d6c:	781b      	ldrb	r3, [r3, #0]
10005d6e:	b2db      	uxtb	r3, r3
10005d70:	3301      	adds	r3, #1
10005d72:	b2da      	uxtb	r2, r3
10005d74:	4b15      	ldr	r3, [pc, #84]	; (10005dcc <IRQ12_Handler+0xe8>)
10005d76:	701a      	strb	r2, [r3, #0]
					if(Steering_mode > 4)Steering_mode = 0;
10005d78:	4b14      	ldr	r3, [pc, #80]	; (10005dcc <IRQ12_Handler+0xe8>)
10005d7a:	781b      	ldrb	r3, [r3, #0]
10005d7c:	b2db      	uxtb	r3, r3
10005d7e:	2b04      	cmp	r3, #4
10005d80:	d902      	bls.n	10005d88 <IRQ12_Handler+0xa4>
10005d82:	4b12      	ldr	r3, [pc, #72]	; (10005dcc <IRQ12_Handler+0xe8>)
10005d84:	2200      	movs	r2, #0
10005d86:	701a      	strb	r2, [r3, #0]
					modeswitch_colldown = 10;
10005d88:	4b0e      	ldr	r3, [pc, #56]	; (10005dc4 <IRQ12_Handler+0xe0>)
10005d8a:	220a      	movs	r2, #10
10005d8c:	701a      	strb	r2, [r3, #0]
10005d8e:	e006      	b.n	10005d9e <IRQ12_Handler+0xba>
				}
			}
			else modeswitch_colldown--;
10005d90:	4b0c      	ldr	r3, [pc, #48]	; (10005dc4 <IRQ12_Handler+0xe0>)
10005d92:	781b      	ldrb	r3, [r3, #0]
10005d94:	b2db      	uxtb	r3, r3
10005d96:	3b01      	subs	r3, #1
10005d98:	b2da      	uxtb	r2, r3
10005d9a:	4b0a      	ldr	r3, [pc, #40]	; (10005dc4 <IRQ12_Handler+0xe0>)
10005d9c:	701a      	strb	r2, [r3, #0]
			RC_Gear_duty_OLD = RC_Gear_duty;
10005d9e:	4b08      	ldr	r3, [pc, #32]	; (10005dc0 <IRQ12_Handler+0xdc>)
10005da0:	781b      	ldrb	r3, [r3, #0]
10005da2:	b2da      	uxtb	r2, r3
10005da4:	4b08      	ldr	r3, [pc, #32]	; (10005dc8 <IRQ12_Handler+0xe4>)
10005da6:	701a      	strb	r2, [r3, #0]
		}
	}
}
10005da8:	46bd      	mov	sp, r7
10005daa:	b002      	add	sp, #8
10005dac:	bd80      	pop	{r7, pc}
10005dae:	46c0      	nop			; (mov r8, r8)
10005db0:	20000829 	.word	0x20000829
10005db4:	1000ce64 	.word	0x1000ce64
10005db8:	20000838 	.word	0x20000838
10005dbc:	20000ab8 	.word	0x20000ab8
10005dc0:	2000083a 	.word	0x2000083a
10005dc4:	2000082b 	.word	0x2000082b
10005dc8:	2000083b 	.word	0x2000083b
10005dcc:	2000082a 	.word	0x2000082a

10005dd0 <IRQ6_Handler>:

void RC_AUX1_ISR(void){
10005dd0:	b580      	push	{r7, lr}
10005dd2:	b082      	sub	sp, #8
10005dd4:	af00      	add	r7, sp, #0
	if(RC_controll == 1){
10005dd6:	4b25      	ldr	r3, [pc, #148]	; (10005e6c <IRQ6_Handler+0x9c>)
10005dd8:	781b      	ldrb	r3, [r3, #0]
10005dda:	b2db      	uxtb	r3, r3
10005ddc:	2b01      	cmp	r3, #1
10005dde:	d141      	bne.n	10005e64 <IRQ6_Handler+0x94>
		RC_AUX1_state =  PIN_INTERRUPT_GetPinValue(&RC_AUX1); // pin haig or low
10005de0:	4b23      	ldr	r3, [pc, #140]	; (10005e70 <IRQ6_Handler+0xa0>)
10005de2:	1c18      	adds	r0, r3, #0
10005de4:	f7ff fe58 	bl	10005a98 <PIN_INTERRUPT_GetPinValue>
10005de8:	1c03      	adds	r3, r0, #0
10005dea:	b2da      	uxtb	r2, r3
10005dec:	4b21      	ldr	r3, [pc, #132]	; (10005e74 <IRQ6_Handler+0xa4>)
10005dee:	701a      	strb	r2, [r3, #0]

		if(RC_AUX1_state == 0){// do nothing during high
10005df0:	4b20      	ldr	r3, [pc, #128]	; (10005e74 <IRQ6_Handler+0xa4>)
10005df2:	781b      	ldrb	r3, [r3, #0]
10005df4:	b2db      	uxtb	r3, r3
10005df6:	2b00      	cmp	r3, #0
10005df8:	d134      	bne.n	10005e64 <IRQ6_Handler+0x94>
			uint32_t RC_AUX1_on_time_100us = RC_AUX1_100us_counter;
10005dfa:	4b1f      	ldr	r3, [pc, #124]	; (10005e78 <IRQ6_Handler+0xa8>)
10005dfc:	681b      	ldr	r3, [r3, #0]
10005dfe:	607b      	str	r3, [r7, #4]
			RC_AUX1_100us_counter = 0;
10005e00:	4b1d      	ldr	r3, [pc, #116]	; (10005e78 <IRQ6_Handler+0xa8>)
10005e02:	2200      	movs	r2, #0
10005e04:	601a      	str	r2, [r3, #0]

			if((80 < RC_AUX1_on_time_100us) && (RC_AUX1_on_time_100us < 150)) RC_AUX1_duty= 0;
10005e06:	687b      	ldr	r3, [r7, #4]
10005e08:	2b50      	cmp	r3, #80	; 0x50
10005e0a:	d906      	bls.n	10005e1a <IRQ6_Handler+0x4a>
10005e0c:	687b      	ldr	r3, [r7, #4]
10005e0e:	2b95      	cmp	r3, #149	; 0x95
10005e10:	d803      	bhi.n	10005e1a <IRQ6_Handler+0x4a>
10005e12:	4b1a      	ldr	r3, [pc, #104]	; (10005e7c <IRQ6_Handler+0xac>)
10005e14:	2200      	movs	r2, #0
10005e16:	701a      	strb	r2, [r3, #0]
10005e18:	e00c      	b.n	10005e34 <IRQ6_Handler+0x64>
			else if ((150 <= RC_AUX1_on_time_100us) && (RC_AUX1_on_time_100us < 210)) RC_AUX1_duty = 1;
10005e1a:	687b      	ldr	r3, [r7, #4]
10005e1c:	2b95      	cmp	r3, #149	; 0x95
10005e1e:	d906      	bls.n	10005e2e <IRQ6_Handler+0x5e>
10005e20:	687b      	ldr	r3, [r7, #4]
10005e22:	2bd1      	cmp	r3, #209	; 0xd1
10005e24:	d803      	bhi.n	10005e2e <IRQ6_Handler+0x5e>
10005e26:	4b15      	ldr	r3, [pc, #84]	; (10005e7c <IRQ6_Handler+0xac>)
10005e28:	2201      	movs	r2, #1
10005e2a:	701a      	strb	r2, [r3, #0]
10005e2c:	e002      	b.n	10005e34 <IRQ6_Handler+0x64>
			else RC_AUX1_duty = 2;
10005e2e:	4b13      	ldr	r3, [pc, #76]	; (10005e7c <IRQ6_Handler+0xac>)
10005e30:	2202      	movs	r2, #2
10005e32:	701a      	strb	r2, [r3, #0]


			if(RC_AUX1_duty == 1)RC_Speed_Stop_counter = 0;
10005e34:	4b11      	ldr	r3, [pc, #68]	; (10005e7c <IRQ6_Handler+0xac>)
10005e36:	781b      	ldrb	r3, [r3, #0]
10005e38:	b2db      	uxtb	r3, r3
10005e3a:	2b01      	cmp	r3, #1
10005e3c:	d103      	bne.n	10005e46 <IRQ6_Handler+0x76>
10005e3e:	4b10      	ldr	r3, [pc, #64]	; (10005e80 <IRQ6_Handler+0xb0>)
10005e40:	2200      	movs	r2, #0
10005e42:	701a      	strb	r2, [r3, #0]
10005e44:	e006      	b.n	10005e54 <IRQ6_Handler+0x84>
			else RC_Speed_Stop_counter ++ ;
10005e46:	4b0e      	ldr	r3, [pc, #56]	; (10005e80 <IRQ6_Handler+0xb0>)
10005e48:	781b      	ldrb	r3, [r3, #0]
10005e4a:	b2db      	uxtb	r3, r3
10005e4c:	3301      	adds	r3, #1
10005e4e:	b2da      	uxtb	r2, r3
10005e50:	4b0b      	ldr	r3, [pc, #44]	; (10005e80 <IRQ6_Handler+0xb0>)
10005e52:	701a      	strb	r2, [r3, #0]

			if(RC_Speed_Stop_counter > RC_SPEED_SAFTY_FT) RC_Speed_Stop_counter = RC_SPEED_SAFTY_FT;
10005e54:	4b0a      	ldr	r3, [pc, #40]	; (10005e80 <IRQ6_Handler+0xb0>)
10005e56:	781b      	ldrb	r3, [r3, #0]
10005e58:	b2db      	uxtb	r3, r3
10005e5a:	2b0a      	cmp	r3, #10
10005e5c:	d902      	bls.n	10005e64 <IRQ6_Handler+0x94>
10005e5e:	4b08      	ldr	r3, [pc, #32]	; (10005e80 <IRQ6_Handler+0xb0>)
10005e60:	220a      	movs	r2, #10
10005e62:	701a      	strb	r2, [r3, #0]
		}
	}
}
10005e64:	46bd      	mov	sp, r7
10005e66:	b002      	add	sp, #8
10005e68:	bd80      	pop	{r7, pc}
10005e6a:	46c0      	nop			; (mov r8, r8)
10005e6c:	20000829 	.word	0x20000829
10005e70:	1000ce84 	.word	0x1000ce84
10005e74:	20000839 	.word	0x20000839
10005e78:	20000abc 	.word	0x20000abc
10005e7c:	2000083c 	.word	0x2000083c
10005e80:	2000083d 	.word	0x2000083d

10005e84 <Steering_set_Angles>:
volatile uint16_t NP[4] = {840, 757, 628, 800}; //servo nutral points PWM duty values
uint16_t NPfl = 840; int NPfr = 757; int NPrl = 628; int NPrr = 800; // serov defalut 750

float Servo_PWMs[4] = {0, 0, 0, 0};

void Steering_set_Angles(float Angles_data[4]){
10005e84:	b5f0      	push	{r4, r5, r6, r7, lr}
10005e86:	b085      	sub	sp, #20
10005e88:	af00      	add	r7, sp, #0
10005e8a:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0 ; i < 4 ; i ++){
10005e8c:	230f      	movs	r3, #15
10005e8e:	18fb      	adds	r3, r7, r3
10005e90:	2200      	movs	r2, #0
10005e92:	701a      	strb	r2, [r3, #0]
10005e94:	e063      	b.n	10005f5e <Steering_set_Angles+0xda>
		Servo_PWMs[i] = -Angles_data[i]*deg_PWM + NP[i]; // calcuation of PWM for Angle on each wheel
10005e96:	230f      	movs	r3, #15
10005e98:	18fb      	adds	r3, r7, r3
10005e9a:	781c      	ldrb	r4, [r3, #0]
10005e9c:	230f      	movs	r3, #15
10005e9e:	18fb      	adds	r3, r7, r3
10005ea0:	781b      	ldrb	r3, [r3, #0]
10005ea2:	009b      	lsls	r3, r3, #2
10005ea4:	687a      	ldr	r2, [r7, #4]
10005ea6:	18d3      	adds	r3, r2, r3
10005ea8:	681b      	ldr	r3, [r3, #0]
10005eaa:	2280      	movs	r2, #128	; 0x80
10005eac:	0612      	lsls	r2, r2, #24
10005eae:	4053      	eors	r3, r2
10005eb0:	1c18      	adds	r0, r3, #0
10005eb2:	f006 fcd3 	bl	1000c85c <__aeabi_f2d>
10005eb6:	1c02      	adds	r2, r0, #0
10005eb8:	1c0b      	adds	r3, r1, #0
10005eba:	1c10      	adds	r0, r2, #0
10005ebc:	1c19      	adds	r1, r3, #0
10005ebe:	4a42      	ldr	r2, [pc, #264]	; (10005fc8 <Steering_set_Angles+0x144>)
10005ec0:	4b42      	ldr	r3, [pc, #264]	; (10005fcc <Steering_set_Angles+0x148>)
10005ec2:	f005 fe13 	bl	1000baec <__aeabi_dmul>
10005ec6:	1c02      	adds	r2, r0, #0
10005ec8:	1c0b      	adds	r3, r1, #0
10005eca:	1c15      	adds	r5, r2, #0
10005ecc:	1c1e      	adds	r6, r3, #0
10005ece:	230f      	movs	r3, #15
10005ed0:	18fb      	adds	r3, r7, r3
10005ed2:	781a      	ldrb	r2, [r3, #0]
10005ed4:	4b3e      	ldr	r3, [pc, #248]	; (10005fd0 <Steering_set_Angles+0x14c>)
10005ed6:	0052      	lsls	r2, r2, #1
10005ed8:	5ad3      	ldrh	r3, [r2, r3]
10005eda:	b29b      	uxth	r3, r3
10005edc:	1c18      	adds	r0, r3, #0
10005ede:	f006 fc4f 	bl	1000c780 <__aeabi_i2d>
10005ee2:	1c02      	adds	r2, r0, #0
10005ee4:	1c0b      	adds	r3, r1, #0
10005ee6:	1c28      	adds	r0, r5, #0
10005ee8:	1c31      	adds	r1, r6, #0
10005eea:	f004 fe99 	bl	1000ac20 <__aeabi_dadd>
10005eee:	1c02      	adds	r2, r0, #0
10005ef0:	1c0b      	adds	r3, r1, #0
10005ef2:	1c10      	adds	r0, r2, #0
10005ef4:	1c19      	adds	r1, r3, #0
10005ef6:	f006 fd05 	bl	1000c904 <__aeabi_d2f>
10005efa:	1c01      	adds	r1, r0, #0
10005efc:	4b35      	ldr	r3, [pc, #212]	; (10005fd4 <Steering_set_Angles+0x150>)
10005efe:	00a2      	lsls	r2, r4, #2
10005f00:	50d1      	str	r1, [r2, r3]

		//limitinbg max servor Angle to 1.75 rot in each dirction
		if(Servo_PWMs[i] > 950) { Servo_PWMs[i] = 950;}
10005f02:	230f      	movs	r3, #15
10005f04:	18fb      	adds	r3, r7, r3
10005f06:	781a      	ldrb	r2, [r3, #0]
10005f08:	4b32      	ldr	r3, [pc, #200]	; (10005fd4 <Steering_set_Angles+0x150>)
10005f0a:	0092      	lsls	r2, r2, #2
10005f0c:	58d3      	ldr	r3, [r2, r3]
10005f0e:	1c18      	adds	r0, r3, #0
10005f10:	4931      	ldr	r1, [pc, #196]	; (10005fd8 <Steering_set_Angles+0x154>)
10005f12:	f003 ff35 	bl	10009d80 <__aeabi_fcmpgt>
10005f16:	1e03      	subs	r3, r0, #0
10005f18:	d007      	beq.n	10005f2a <Steering_set_Angles+0xa6>
10005f1a:	230f      	movs	r3, #15
10005f1c:	18fb      	adds	r3, r7, r3
10005f1e:	781a      	ldrb	r2, [r3, #0]
10005f20:	4b2c      	ldr	r3, [pc, #176]	; (10005fd4 <Steering_set_Angles+0x150>)
10005f22:	0092      	lsls	r2, r2, #2
10005f24:	492c      	ldr	r1, [pc, #176]	; (10005fd8 <Steering_set_Angles+0x154>)
10005f26:	50d1      	str	r1, [r2, r3]
10005f28:	e012      	b.n	10005f50 <Steering_set_Angles+0xcc>
		else if(Servo_PWMs[i] < 550) { Servo_PWMs[i] = 550;}
10005f2a:	230f      	movs	r3, #15
10005f2c:	18fb      	adds	r3, r7, r3
10005f2e:	781a      	ldrb	r2, [r3, #0]
10005f30:	4b28      	ldr	r3, [pc, #160]	; (10005fd4 <Steering_set_Angles+0x150>)
10005f32:	0092      	lsls	r2, r2, #2
10005f34:	58d3      	ldr	r3, [r2, r3]
10005f36:	1c18      	adds	r0, r3, #0
10005f38:	4928      	ldr	r1, [pc, #160]	; (10005fdc <Steering_set_Angles+0x158>)
10005f3a:	f003 ff0d 	bl	10009d58 <__aeabi_fcmplt>
10005f3e:	1e03      	subs	r3, r0, #0
10005f40:	d006      	beq.n	10005f50 <Steering_set_Angles+0xcc>
10005f42:	230f      	movs	r3, #15
10005f44:	18fb      	adds	r3, r7, r3
10005f46:	781a      	ldrb	r2, [r3, #0]
10005f48:	4b22      	ldr	r3, [pc, #136]	; (10005fd4 <Steering_set_Angles+0x150>)
10005f4a:	0092      	lsls	r2, r2, #2
10005f4c:	4923      	ldr	r1, [pc, #140]	; (10005fdc <Steering_set_Angles+0x158>)
10005f4e:	50d1      	str	r1, [r2, r3]
uint16_t NPfl = 840; int NPfr = 757; int NPrl = 628; int NPrr = 800; // serov defalut 750

float Servo_PWMs[4] = {0, 0, 0, 0};

void Steering_set_Angles(float Angles_data[4]){
	for(uint8_t i = 0 ; i < 4 ; i ++){
10005f50:	230f      	movs	r3, #15
10005f52:	18fb      	adds	r3, r7, r3
10005f54:	781a      	ldrb	r2, [r3, #0]
10005f56:	230f      	movs	r3, #15
10005f58:	18fb      	adds	r3, r7, r3
10005f5a:	3201      	adds	r2, #1
10005f5c:	701a      	strb	r2, [r3, #0]
10005f5e:	230f      	movs	r3, #15
10005f60:	18fb      	adds	r3, r7, r3
10005f62:	781b      	ldrb	r3, [r3, #0]
10005f64:	2b03      	cmp	r3, #3
10005f66:	d996      	bls.n	10005e96 <Steering_set_Angles+0x12>
		if(Servo_PWMs[i] > 950) { Servo_PWMs[i] = 950;}
		else if(Servo_PWMs[i] < 550) { Servo_PWMs[i] = 550;}
		}

	//seting PWM values
	PWM_SetDutyCycle(&PWM_servo_fl,Servo_PWMs[0]);
10005f68:	4b1a      	ldr	r3, [pc, #104]	; (10005fd4 <Steering_set_Angles+0x150>)
10005f6a:	681b      	ldr	r3, [r3, #0]
10005f6c:	1c18      	adds	r0, r3, #0
10005f6e:	f003 ff83 	bl	10009e78 <__aeabi_f2uiz>
10005f72:	1c02      	adds	r2, r0, #0
10005f74:	4b1a      	ldr	r3, [pc, #104]	; (10005fe0 <Steering_set_Angles+0x15c>)
10005f76:	1c18      	adds	r0, r3, #0
10005f78:	1c11      	adds	r1, r2, #0
10005f7a:	f7fc fedd 	bl	10002d38 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_servo_fr,Servo_PWMs[1]);
10005f7e:	4b15      	ldr	r3, [pc, #84]	; (10005fd4 <Steering_set_Angles+0x150>)
10005f80:	685b      	ldr	r3, [r3, #4]
10005f82:	1c18      	adds	r0, r3, #0
10005f84:	f003 ff78 	bl	10009e78 <__aeabi_f2uiz>
10005f88:	1c02      	adds	r2, r0, #0
10005f8a:	4b16      	ldr	r3, [pc, #88]	; (10005fe4 <Steering_set_Angles+0x160>)
10005f8c:	1c18      	adds	r0, r3, #0
10005f8e:	1c11      	adds	r1, r2, #0
10005f90:	f7fc fed2 	bl	10002d38 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_servo_rl,Servo_PWMs[2]);
10005f94:	4b0f      	ldr	r3, [pc, #60]	; (10005fd4 <Steering_set_Angles+0x150>)
10005f96:	689b      	ldr	r3, [r3, #8]
10005f98:	1c18      	adds	r0, r3, #0
10005f9a:	f003 ff6d 	bl	10009e78 <__aeabi_f2uiz>
10005f9e:	1c02      	adds	r2, r0, #0
10005fa0:	4b11      	ldr	r3, [pc, #68]	; (10005fe8 <Steering_set_Angles+0x164>)
10005fa2:	1c18      	adds	r0, r3, #0
10005fa4:	1c11      	adds	r1, r2, #0
10005fa6:	f7fc fec7 	bl	10002d38 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_servo_rr,Servo_PWMs[3]);
10005faa:	4b0a      	ldr	r3, [pc, #40]	; (10005fd4 <Steering_set_Angles+0x150>)
10005fac:	68db      	ldr	r3, [r3, #12]
10005fae:	1c18      	adds	r0, r3, #0
10005fb0:	f003 ff62 	bl	10009e78 <__aeabi_f2uiz>
10005fb4:	1c02      	adds	r2, r0, #0
10005fb6:	4b0d      	ldr	r3, [pc, #52]	; (10005fec <Steering_set_Angles+0x168>)
10005fb8:	1c18      	adds	r0, r3, #0
10005fba:	1c11      	adds	r1, r2, #0
10005fbc:	f7fc febc 	bl	10002d38 <PWM_SetDutyCycle>

}
10005fc0:	46bd      	mov	sp, r7
10005fc2:	b005      	add	sp, #20
10005fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005fc6:	46c0      	nop			; (mov r8, r8)
10005fc8:	0a3d70a4 	.word	0x0a3d70a4
10005fcc:	3fe4a3d7 	.word	0x3fe4a3d7
10005fd0:	20000840 	.word	0x20000840
10005fd4:	20000ac0 	.word	0x20000ac0
10005fd8:	446d8000 	.word	0x446d8000
10005fdc:	44098000 	.word	0x44098000
10005fe0:	200005dc 	.word	0x200005dc
10005fe4:	20000610 	.word	0x20000610
10005fe8:	20000644 	.word	0x20000644
10005fec:	20000678 	.word	0x20000678

10005ff0 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10005ff0:	b580      	push	{r7, lr}
10005ff2:	b082      	sub	sp, #8
10005ff4:	af00      	add	r7, sp, #0
10005ff6:	6078      	str	r0, [r7, #4]
10005ff8:	1c0a      	adds	r2, r1, #0
10005ffa:	1cfb      	adds	r3, r7, #3
10005ffc:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10005ffe:	1cfb      	adds	r3, r7, #3
10006000:	781b      	ldrb	r3, [r3, #0]
10006002:	2201      	movs	r2, #1
10006004:	409a      	lsls	r2, r3
10006006:	687b      	ldr	r3, [r7, #4]
10006008:	605a      	str	r2, [r3, #4]
}
1000600a:	46bd      	mov	sp, r7
1000600c:	b002      	add	sp, #8
1000600e:	bd80      	pop	{r7, pc}

10006010 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10006010:	b580      	push	{r7, lr}
10006012:	b082      	sub	sp, #8
10006014:	af00      	add	r7, sp, #0
10006016:	6078      	str	r0, [r7, #4]
10006018:	1c0a      	adds	r2, r1, #0
1000601a:	1cfb      	adds	r3, r7, #3
1000601c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
1000601e:	1cfb      	adds	r3, r7, #3
10006020:	781b      	ldrb	r3, [r3, #0]
10006022:	2280      	movs	r2, #128	; 0x80
10006024:	0252      	lsls	r2, r2, #9
10006026:	409a      	lsls	r2, r3
10006028:	687b      	ldr	r3, [r7, #4]
1000602a:	605a      	str	r2, [r3, #4]
}
1000602c:	46bd      	mov	sp, r7
1000602e:	b002      	add	sp, #8
10006030:	bd80      	pop	{r7, pc}
10006032:	46c0      	nop			; (mov r8, r8)

10006034 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10006034:	b580      	push	{r7, lr}
10006036:	b082      	sub	sp, #8
10006038:	af00      	add	r7, sp, #0
1000603a:	6078      	str	r0, [r7, #4]
1000603c:	1c0a      	adds	r2, r1, #0
1000603e:	1cfb      	adds	r3, r7, #3
10006040:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
10006042:	1cfb      	adds	r3, r7, #3
10006044:	781b      	ldrb	r3, [r3, #0]
10006046:	4a03      	ldr	r2, [pc, #12]	; (10006054 <XMC_GPIO_ToggleOutput+0x20>)
10006048:	409a      	lsls	r2, r3
1000604a:	687b      	ldr	r3, [r7, #4]
1000604c:	605a      	str	r2, [r3, #4]
}
1000604e:	46bd      	mov	sp, r7
10006050:	b002      	add	sp, #8
10006052:	bd80      	pop	{r7, pc}
10006054:	00010001 	.word	0x00010001

10006058 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10006058:	b580      	push	{r7, lr}
1000605a:	b082      	sub	sp, #8
1000605c:	af00      	add	r7, sp, #0
1000605e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10006060:	687b      	ldr	r3, [r7, #4]
10006062:	681a      	ldr	r2, [r3, #0]
10006064:	687b      	ldr	r3, [r7, #4]
10006066:	7b1b      	ldrb	r3, [r3, #12]
10006068:	1c10      	adds	r0, r2, #0
1000606a:	1c19      	adds	r1, r3, #0
1000606c:	f7ff ffc0 	bl	10005ff0 <XMC_GPIO_SetOutputHigh>
}
10006070:	46bd      	mov	sp, r7
10006072:	b002      	add	sp, #8
10006074:	bd80      	pop	{r7, pc}
10006076:	46c0      	nop			; (mov r8, r8)

10006078 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10006078:	b580      	push	{r7, lr}
1000607a:	b082      	sub	sp, #8
1000607c:	af00      	add	r7, sp, #0
1000607e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10006080:	687b      	ldr	r3, [r7, #4]
10006082:	681a      	ldr	r2, [r3, #0]
10006084:	687b      	ldr	r3, [r7, #4]
10006086:	7b1b      	ldrb	r3, [r3, #12]
10006088:	1c10      	adds	r0, r2, #0
1000608a:	1c19      	adds	r1, r3, #0
1000608c:	f7ff ffc0 	bl	10006010 <XMC_GPIO_SetOutputLow>
}
10006090:	46bd      	mov	sp, r7
10006092:	b002      	add	sp, #8
10006094:	bd80      	pop	{r7, pc}
10006096:	46c0      	nop			; (mov r8, r8)

10006098 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
10006098:	b580      	push	{r7, lr}
1000609a:	b082      	sub	sp, #8
1000609c:	af00      	add	r7, sp, #0
1000609e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
100060a0:	687b      	ldr	r3, [r7, #4]
100060a2:	681a      	ldr	r2, [r3, #0]
100060a4:	687b      	ldr	r3, [r7, #4]
100060a6:	7b1b      	ldrb	r3, [r3, #12]
100060a8:	1c10      	adds	r0, r2, #0
100060aa:	1c19      	adds	r1, r3, #0
100060ac:	f7ff ffc2 	bl	10006034 <XMC_GPIO_ToggleOutput>
}
100060b0:	46bd      	mov	sp, r7
100060b2:	b002      	add	sp, #8
100060b4:	bd80      	pop	{r7, pc}
100060b6:	46c0      	nop			; (mov r8, r8)

100060b8 <Ultra_sonic_filter>:
float speed_CA_rl = 0;
float speed_CA_rr = 0;

uint8_t init = 0;

void Ultra_sonic_filter(int16_t Ultrasonic_cm_C_clc, int16_t Ultrasonic_cm_L_clc, int16_t Ultrasonic_cm_R_clc, float ALPHA_ULTARSONIC){
100060b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100060ba:	b087      	sub	sp, #28
100060bc:	af00      	add	r7, sp, #0
100060be:	1c04      	adds	r4, r0, #0
100060c0:	1c08      	adds	r0, r1, #0
100060c2:	1c11      	adds	r1, r2, #0
100060c4:	607b      	str	r3, [r7, #4]
100060c6:	230e      	movs	r3, #14
100060c8:	18fb      	adds	r3, r7, r3
100060ca:	1c22      	adds	r2, r4, #0
100060cc:	801a      	strh	r2, [r3, #0]
100060ce:	230c      	movs	r3, #12
100060d0:	18fb      	adds	r3, r7, r3
100060d2:	1c02      	adds	r2, r0, #0
100060d4:	801a      	strh	r2, [r3, #0]
100060d6:	230a      	movs	r3, #10
100060d8:	18fb      	adds	r3, r7, r3
100060da:	1c0a      	adds	r2, r1, #0
100060dc:	801a      	strh	r2, [r3, #0]

	if(Ultrasonic_cm_C_clc != 0){
100060de:	230e      	movs	r3, #14
100060e0:	18fb      	adds	r3, r7, r3
100060e2:	2200      	movs	r2, #0
100060e4:	5e9b      	ldrsh	r3, [r3, r2]
100060e6:	2b00      	cmp	r3, #0
100060e8:	d01c      	beq.n	10006124 <Ultra_sonic_filter+0x6c>
		Ultrsonic_data_invaildcounter[0] = 0;
100060ea:	4bcf      	ldr	r3, [pc, #828]	; (10006428 <Ultra_sonic_filter+0x370>)
100060ec:	2200      	movs	r2, #0
100060ee:	701a      	strb	r2, [r3, #0]
		Ultra_m_C = Exp_moving_average((float)Ultrasonic_cm_C_clc / 100 , Ultra_m_C, ALPHA_ULTARSONIC);
100060f0:	230e      	movs	r3, #14
100060f2:	18fb      	adds	r3, r7, r3
100060f4:	2200      	movs	r2, #0
100060f6:	5e9b      	ldrsh	r3, [r3, r2]
100060f8:	1c18      	adds	r0, r3, #0
100060fa:	f004 fd49 	bl	1000ab90 <__aeabi_i2f>
100060fe:	1c03      	adds	r3, r0, #0
10006100:	1c18      	adds	r0, r3, #0
10006102:	49ca      	ldr	r1, [pc, #808]	; (1000642c <Ultra_sonic_filter+0x374>)
10006104:	f004 f882 	bl	1000a20c <__aeabi_fdiv>
10006108:	1c03      	adds	r3, r0, #0
1000610a:	1c19      	adds	r1, r3, #0
1000610c:	4bc8      	ldr	r3, [pc, #800]	; (10006430 <Ultra_sonic_filter+0x378>)
1000610e:	681a      	ldr	r2, [r3, #0]
10006110:	687b      	ldr	r3, [r7, #4]
10006112:	1c08      	adds	r0, r1, #0
10006114:	1c11      	adds	r1, r2, #0
10006116:	1c1a      	adds	r2, r3, #0
10006118:	f000 fd96 	bl	10006c48 <Exp_moving_average>
1000611c:	1c02      	adds	r2, r0, #0
1000611e:	4bc4      	ldr	r3, [pc, #784]	; (10006430 <Ultra_sonic_filter+0x378>)
10006120:	601a      	str	r2, [r3, #0]
10006122:	e005      	b.n	10006130 <Ultra_sonic_filter+0x78>
	}
	else Ultrsonic_data_invaildcounter[0]++;
10006124:	4bc0      	ldr	r3, [pc, #768]	; (10006428 <Ultra_sonic_filter+0x370>)
10006126:	781b      	ldrb	r3, [r3, #0]
10006128:	3301      	adds	r3, #1
1000612a:	b2da      	uxtb	r2, r3
1000612c:	4bbe      	ldr	r3, [pc, #760]	; (10006428 <Ultra_sonic_filter+0x370>)
1000612e:	701a      	strb	r2, [r3, #0]

	if(Ultrasonic_cm_L_clc != 0){
10006130:	230c      	movs	r3, #12
10006132:	18fb      	adds	r3, r7, r3
10006134:	2200      	movs	r2, #0
10006136:	5e9b      	ldrsh	r3, [r3, r2]
10006138:	2b00      	cmp	r3, #0
1000613a:	d02c      	beq.n	10006196 <Ultra_sonic_filter+0xde>
		obstructed_L = Ultrasoinc_Obstructet_Test(-Steering_Angles[0]);
1000613c:	4bbd      	ldr	r3, [pc, #756]	; (10006434 <Ultra_sonic_filter+0x37c>)
1000613e:	681b      	ldr	r3, [r3, #0]
10006140:	2280      	movs	r2, #128	; 0x80
10006142:	0612      	lsls	r2, r2, #24
10006144:	4053      	eors	r3, r2
10006146:	1c18      	adds	r0, r3, #0
10006148:	f000 f988 	bl	1000645c <Ultrasoinc_Obstructet_Test>
1000614c:	1c03      	adds	r3, r0, #0
1000614e:	1c1a      	adds	r2, r3, #0
10006150:	4bb9      	ldr	r3, [pc, #740]	; (10006438 <Ultra_sonic_filter+0x380>)
10006152:	701a      	strb	r2, [r3, #0]
		if(obstructed_L == 0) {
10006154:	4bb8      	ldr	r3, [pc, #736]	; (10006438 <Ultra_sonic_filter+0x380>)
10006156:	781b      	ldrb	r3, [r3, #0]
10006158:	2b00      	cmp	r3, #0
1000615a:	d122      	bne.n	100061a2 <Ultra_sonic_filter+0xea>
			Ultrsonic_data_invaildcounter[1] = 0;
1000615c:	4bb2      	ldr	r3, [pc, #712]	; (10006428 <Ultra_sonic_filter+0x370>)
1000615e:	2200      	movs	r2, #0
10006160:	705a      	strb	r2, [r3, #1]
			Ultra_m_L = Exp_moving_average((float)Ultrasonic_cm_L_clc / 100 , Ultra_m_L, ALPHA_ULTARSONIC);
10006162:	230c      	movs	r3, #12
10006164:	18fb      	adds	r3, r7, r3
10006166:	2200      	movs	r2, #0
10006168:	5e9b      	ldrsh	r3, [r3, r2]
1000616a:	1c18      	adds	r0, r3, #0
1000616c:	f004 fd10 	bl	1000ab90 <__aeabi_i2f>
10006170:	1c03      	adds	r3, r0, #0
10006172:	1c18      	adds	r0, r3, #0
10006174:	49ad      	ldr	r1, [pc, #692]	; (1000642c <Ultra_sonic_filter+0x374>)
10006176:	f004 f849 	bl	1000a20c <__aeabi_fdiv>
1000617a:	1c03      	adds	r3, r0, #0
1000617c:	1c19      	adds	r1, r3, #0
1000617e:	4baf      	ldr	r3, [pc, #700]	; (1000643c <Ultra_sonic_filter+0x384>)
10006180:	681a      	ldr	r2, [r3, #0]
10006182:	687b      	ldr	r3, [r7, #4]
10006184:	1c08      	adds	r0, r1, #0
10006186:	1c11      	adds	r1, r2, #0
10006188:	1c1a      	adds	r2, r3, #0
1000618a:	f000 fd5d 	bl	10006c48 <Exp_moving_average>
1000618e:	1c02      	adds	r2, r0, #0
10006190:	4baa      	ldr	r3, [pc, #680]	; (1000643c <Ultra_sonic_filter+0x384>)
10006192:	601a      	str	r2, [r3, #0]
10006194:	e005      	b.n	100061a2 <Ultra_sonic_filter+0xea>
		}
	}
	else Ultrsonic_data_invaildcounter[1]++;
10006196:	4ba4      	ldr	r3, [pc, #656]	; (10006428 <Ultra_sonic_filter+0x370>)
10006198:	785b      	ldrb	r3, [r3, #1]
1000619a:	3301      	adds	r3, #1
1000619c:	b2da      	uxtb	r2, r3
1000619e:	4ba2      	ldr	r3, [pc, #648]	; (10006428 <Ultra_sonic_filter+0x370>)
100061a0:	705a      	strb	r2, [r3, #1]

	if(Ultrasonic_cm_R_clc != 0){
100061a2:	230a      	movs	r3, #10
100061a4:	18fb      	adds	r3, r7, r3
100061a6:	2200      	movs	r2, #0
100061a8:	5e9b      	ldrsh	r3, [r3, r2]
100061aa:	2b00      	cmp	r3, #0
100061ac:	d029      	beq.n	10006202 <Ultra_sonic_filter+0x14a>
		obstructed_R = Ultrasoinc_Obstructet_Test(Steering_Angles[1]); // neagtiv becasue right wheel
100061ae:	4ba1      	ldr	r3, [pc, #644]	; (10006434 <Ultra_sonic_filter+0x37c>)
100061b0:	685b      	ldr	r3, [r3, #4]
100061b2:	1c18      	adds	r0, r3, #0
100061b4:	f000 f952 	bl	1000645c <Ultrasoinc_Obstructet_Test>
100061b8:	1c03      	adds	r3, r0, #0
100061ba:	1c1a      	adds	r2, r3, #0
100061bc:	4ba0      	ldr	r3, [pc, #640]	; (10006440 <Ultra_sonic_filter+0x388>)
100061be:	701a      	strb	r2, [r3, #0]
		if(obstructed_R == 0){
100061c0:	4b9f      	ldr	r3, [pc, #636]	; (10006440 <Ultra_sonic_filter+0x388>)
100061c2:	781b      	ldrb	r3, [r3, #0]
100061c4:	2b00      	cmp	r3, #0
100061c6:	d122      	bne.n	1000620e <Ultra_sonic_filter+0x156>
			Ultrsonic_data_invaildcounter[2] = 0;
100061c8:	4b97      	ldr	r3, [pc, #604]	; (10006428 <Ultra_sonic_filter+0x370>)
100061ca:	2200      	movs	r2, #0
100061cc:	709a      	strb	r2, [r3, #2]
			Ultra_m_R = Exp_moving_average((float)Ultrasonic_cm_R_clc / 100 , Ultra_m_R, ALPHA_ULTARSONIC);
100061ce:	230a      	movs	r3, #10
100061d0:	18fb      	adds	r3, r7, r3
100061d2:	2200      	movs	r2, #0
100061d4:	5e9b      	ldrsh	r3, [r3, r2]
100061d6:	1c18      	adds	r0, r3, #0
100061d8:	f004 fcda 	bl	1000ab90 <__aeabi_i2f>
100061dc:	1c03      	adds	r3, r0, #0
100061de:	1c18      	adds	r0, r3, #0
100061e0:	4992      	ldr	r1, [pc, #584]	; (1000642c <Ultra_sonic_filter+0x374>)
100061e2:	f004 f813 	bl	1000a20c <__aeabi_fdiv>
100061e6:	1c03      	adds	r3, r0, #0
100061e8:	1c19      	adds	r1, r3, #0
100061ea:	4b96      	ldr	r3, [pc, #600]	; (10006444 <Ultra_sonic_filter+0x38c>)
100061ec:	681a      	ldr	r2, [r3, #0]
100061ee:	687b      	ldr	r3, [r7, #4]
100061f0:	1c08      	adds	r0, r1, #0
100061f2:	1c11      	adds	r1, r2, #0
100061f4:	1c1a      	adds	r2, r3, #0
100061f6:	f000 fd27 	bl	10006c48 <Exp_moving_average>
100061fa:	1c02      	adds	r2, r0, #0
100061fc:	4b91      	ldr	r3, [pc, #580]	; (10006444 <Ultra_sonic_filter+0x38c>)
100061fe:	601a      	str	r2, [r3, #0]
10006200:	e005      	b.n	1000620e <Ultra_sonic_filter+0x156>
		}
	}
	else Ultrsonic_data_invaildcounter[2]++;
10006202:	4b89      	ldr	r3, [pc, #548]	; (10006428 <Ultra_sonic_filter+0x370>)
10006204:	789b      	ldrb	r3, [r3, #2]
10006206:	3301      	adds	r3, #1
10006208:	b2da      	uxtb	r2, r3
1000620a:	4b87      	ldr	r3, [pc, #540]	; (10006428 <Ultra_sonic_filter+0x370>)
1000620c:	709a      	strb	r2, [r3, #2]

	for(uint8_t i = 0; i < 3; i++){ // counter overflow stop
1000620e:	2317      	movs	r3, #23
10006210:	18fb      	adds	r3, r7, r3
10006212:	2200      	movs	r2, #0
10006214:	701a      	strb	r2, [r3, #0]
10006216:	e013      	b.n	10006240 <Ultra_sonic_filter+0x188>
		if( Ultrsonic_data_invaildcounter[i] > ULRTA_NUM_NO_DATA_INVALID) Ultrsonic_data_invaildcounter[i] = ULRTA_NUM_NO_DATA_INVALID;
10006218:	2317      	movs	r3, #23
1000621a:	18fb      	adds	r3, r7, r3
1000621c:	781b      	ldrb	r3, [r3, #0]
1000621e:	4a82      	ldr	r2, [pc, #520]	; (10006428 <Ultra_sonic_filter+0x370>)
10006220:	5cd3      	ldrb	r3, [r2, r3]
10006222:	2b14      	cmp	r3, #20
10006224:	d905      	bls.n	10006232 <Ultra_sonic_filter+0x17a>
10006226:	2317      	movs	r3, #23
10006228:	18fb      	adds	r3, r7, r3
1000622a:	781b      	ldrb	r3, [r3, #0]
1000622c:	4a7e      	ldr	r2, [pc, #504]	; (10006428 <Ultra_sonic_filter+0x370>)
1000622e:	2114      	movs	r1, #20
10006230:	54d1      	strb	r1, [r2, r3]
			Ultra_m_R = Exp_moving_average((float)Ultrasonic_cm_R_clc / 100 , Ultra_m_R, ALPHA_ULTARSONIC);
		}
	}
	else Ultrsonic_data_invaildcounter[2]++;

	for(uint8_t i = 0; i < 3; i++){ // counter overflow stop
10006232:	2317      	movs	r3, #23
10006234:	18fb      	adds	r3, r7, r3
10006236:	781a      	ldrb	r2, [r3, #0]
10006238:	2317      	movs	r3, #23
1000623a:	18fb      	adds	r3, r7, r3
1000623c:	3201      	adds	r2, #1
1000623e:	701a      	strb	r2, [r3, #0]
10006240:	2317      	movs	r3, #23
10006242:	18fb      	adds	r3, r7, r3
10006244:	781b      	ldrb	r3, [r3, #0]
10006246:	2b02      	cmp	r3, #2
10006248:	d9e6      	bls.n	10006218 <Ultra_sonic_filter+0x160>
		if( Ultrsonic_data_invaildcounter[i] > ULRTA_NUM_NO_DATA_INVALID) Ultrsonic_data_invaildcounter[i] = ULRTA_NUM_NO_DATA_INVALID;
	}

	if(Ultrsonic_data_invaildcounter[0] < ULRTA_NUM_NO_DATA_INVALID ){
1000624a:	4b77      	ldr	r3, [pc, #476]	; (10006428 <Ultra_sonic_filter+0x370>)
1000624c:	781b      	ldrb	r3, [r3, #0]
1000624e:	2b13      	cmp	r3, #19
10006250:	d811      	bhi.n	10006276 <Ultra_sonic_filter+0x1be>
		Obstacel_F.angle = 0;
10006252:	4b7d      	ldr	r3, [pc, #500]	; (10006448 <Ultra_sonic_filter+0x390>)
10006254:	2200      	movs	r2, #0
10006256:	609a      	str	r2, [r3, #8]
		Obstacel_F.distance = Ultra_m_C;
10006258:	4b75      	ldr	r3, [pc, #468]	; (10006430 <Ultra_sonic_filter+0x378>)
1000625a:	681a      	ldr	r2, [r3, #0]
1000625c:	4b7a      	ldr	r3, [pc, #488]	; (10006448 <Ultra_sonic_filter+0x390>)
1000625e:	605a      	str	r2, [r3, #4]
		Obstacel_F.isValid = 1;
10006260:	4b79      	ldr	r3, [pc, #484]	; (10006448 <Ultra_sonic_filter+0x390>)
10006262:	2201      	movs	r2, #1
10006264:	701a      	strb	r2, [r3, #0]
		Obstacel_F.vector[0] = Obstacel_F.distance;
10006266:	4b78      	ldr	r3, [pc, #480]	; (10006448 <Ultra_sonic_filter+0x390>)
10006268:	685a      	ldr	r2, [r3, #4]
1000626a:	4b77      	ldr	r3, [pc, #476]	; (10006448 <Ultra_sonic_filter+0x390>)
1000626c:	60da      	str	r2, [r3, #12]
		Obstacel_F.vector[1] = 0;
1000626e:	4b76      	ldr	r3, [pc, #472]	; (10006448 <Ultra_sonic_filter+0x390>)
10006270:	2200      	movs	r2, #0
10006272:	611a      	str	r2, [r3, #16]
10006274:	e002      	b.n	1000627c <Ultra_sonic_filter+0x1c4>
	}
	else Obstacel_F.isValid = 0;
10006276:	4b74      	ldr	r3, [pc, #464]	; (10006448 <Ultra_sonic_filter+0x390>)
10006278:	2200      	movs	r2, #0
1000627a:	701a      	strb	r2, [r3, #0]

	if(Ultrsonic_data_invaildcounter[1] < ULRTA_NUM_NO_DATA_INVALID ){
1000627c:	4b6a      	ldr	r3, [pc, #424]	; (10006428 <Ultra_sonic_filter+0x370>)
1000627e:	785b      	ldrb	r3, [r3, #1]
10006280:	2b13      	cmp	r3, #19
10006282:	d861      	bhi.n	10006348 <Ultra_sonic_filter+0x290>
		Obstacel_L.angle = Steering_Angles[0];
10006284:	4b6b      	ldr	r3, [pc, #428]	; (10006434 <Ultra_sonic_filter+0x37c>)
10006286:	681a      	ldr	r2, [r3, #0]
10006288:	4b70      	ldr	r3, [pc, #448]	; (1000644c <Ultra_sonic_filter+0x394>)
1000628a:	609a      	str	r2, [r3, #8]
		Obstacel_L.distance = Ultra_m_L;
1000628c:	4b6b      	ldr	r3, [pc, #428]	; (1000643c <Ultra_sonic_filter+0x384>)
1000628e:	681a      	ldr	r2, [r3, #0]
10006290:	4b6e      	ldr	r3, [pc, #440]	; (1000644c <Ultra_sonic_filter+0x394>)
10006292:	605a      	str	r2, [r3, #4]
		Obstacel_L.isValid = 1;
10006294:	4b6d      	ldr	r3, [pc, #436]	; (1000644c <Ultra_sonic_filter+0x394>)
10006296:	2201      	movs	r2, #1
10006298:	701a      	strb	r2, [r3, #0]
		Obstacel_L.vector[0] = Obstacel_L.distance * cos(Obstacel_L.angle / RAD_TO_DEG);
1000629a:	4b6c      	ldr	r3, [pc, #432]	; (1000644c <Ultra_sonic_filter+0x394>)
1000629c:	685b      	ldr	r3, [r3, #4]
1000629e:	1c18      	adds	r0, r3, #0
100062a0:	f006 fadc 	bl	1000c85c <__aeabi_f2d>
100062a4:	1c05      	adds	r5, r0, #0
100062a6:	1c0e      	adds	r6, r1, #0
100062a8:	4b68      	ldr	r3, [pc, #416]	; (1000644c <Ultra_sonic_filter+0x394>)
100062aa:	689b      	ldr	r3, [r3, #8]
100062ac:	1c18      	adds	r0, r3, #0
100062ae:	f006 fad5 	bl	1000c85c <__aeabi_f2d>
100062b2:	1c03      	adds	r3, r0, #0
100062b4:	1c0c      	adds	r4, r1, #0
100062b6:	1c18      	adds	r0, r3, #0
100062b8:	1c21      	adds	r1, r4, #0
100062ba:	4a65      	ldr	r2, [pc, #404]	; (10006450 <Ultra_sonic_filter+0x398>)
100062bc:	4b65      	ldr	r3, [pc, #404]	; (10006454 <Ultra_sonic_filter+0x39c>)
100062be:	f004 ffd7 	bl	1000b270 <__aeabi_ddiv>
100062c2:	1c03      	adds	r3, r0, #0
100062c4:	1c0c      	adds	r4, r1, #0
100062c6:	1c18      	adds	r0, r3, #0
100062c8:	1c21      	adds	r1, r4, #0
100062ca:	f000 ff09 	bl	100070e0 <cos>
100062ce:	1c03      	adds	r3, r0, #0
100062d0:	1c0c      	adds	r4, r1, #0
100062d2:	1c28      	adds	r0, r5, #0
100062d4:	1c31      	adds	r1, r6, #0
100062d6:	1c1a      	adds	r2, r3, #0
100062d8:	1c23      	adds	r3, r4, #0
100062da:	f005 fc07 	bl	1000baec <__aeabi_dmul>
100062de:	1c03      	adds	r3, r0, #0
100062e0:	1c0c      	adds	r4, r1, #0
100062e2:	1c18      	adds	r0, r3, #0
100062e4:	1c21      	adds	r1, r4, #0
100062e6:	f006 fb0d 	bl	1000c904 <__aeabi_d2f>
100062ea:	1c02      	adds	r2, r0, #0
100062ec:	4b57      	ldr	r3, [pc, #348]	; (1000644c <Ultra_sonic_filter+0x394>)
100062ee:	60da      	str	r2, [r3, #12]
		Obstacel_L.vector[1] = Obstacel_L.distance * sin(Obstacel_L.angle / RAD_TO_DEG);
100062f0:	4b56      	ldr	r3, [pc, #344]	; (1000644c <Ultra_sonic_filter+0x394>)
100062f2:	685b      	ldr	r3, [r3, #4]
100062f4:	1c18      	adds	r0, r3, #0
100062f6:	f006 fab1 	bl	1000c85c <__aeabi_f2d>
100062fa:	1c05      	adds	r5, r0, #0
100062fc:	1c0e      	adds	r6, r1, #0
100062fe:	4b53      	ldr	r3, [pc, #332]	; (1000644c <Ultra_sonic_filter+0x394>)
10006300:	689b      	ldr	r3, [r3, #8]
10006302:	1c18      	adds	r0, r3, #0
10006304:	f006 faaa 	bl	1000c85c <__aeabi_f2d>
10006308:	1c03      	adds	r3, r0, #0
1000630a:	1c0c      	adds	r4, r1, #0
1000630c:	1c18      	adds	r0, r3, #0
1000630e:	1c21      	adds	r1, r4, #0
10006310:	4a4f      	ldr	r2, [pc, #316]	; (10006450 <Ultra_sonic_filter+0x398>)
10006312:	4b50      	ldr	r3, [pc, #320]	; (10006454 <Ultra_sonic_filter+0x39c>)
10006314:	f004 ffac 	bl	1000b270 <__aeabi_ddiv>
10006318:	1c03      	adds	r3, r0, #0
1000631a:	1c0c      	adds	r4, r1, #0
1000631c:	1c18      	adds	r0, r3, #0
1000631e:	1c21      	adds	r1, r4, #0
10006320:	f000 ff30 	bl	10007184 <sin>
10006324:	1c03      	adds	r3, r0, #0
10006326:	1c0c      	adds	r4, r1, #0
10006328:	1c28      	adds	r0, r5, #0
1000632a:	1c31      	adds	r1, r6, #0
1000632c:	1c1a      	adds	r2, r3, #0
1000632e:	1c23      	adds	r3, r4, #0
10006330:	f005 fbdc 	bl	1000baec <__aeabi_dmul>
10006334:	1c03      	adds	r3, r0, #0
10006336:	1c0c      	adds	r4, r1, #0
10006338:	1c18      	adds	r0, r3, #0
1000633a:	1c21      	adds	r1, r4, #0
1000633c:	f006 fae2 	bl	1000c904 <__aeabi_d2f>
10006340:	1c02      	adds	r2, r0, #0
10006342:	4b42      	ldr	r3, [pc, #264]	; (1000644c <Ultra_sonic_filter+0x394>)
10006344:	611a      	str	r2, [r3, #16]
10006346:	e002      	b.n	1000634e <Ultra_sonic_filter+0x296>

	}
	else Obstacel_L.isValid = 0;
10006348:	4b40      	ldr	r3, [pc, #256]	; (1000644c <Ultra_sonic_filter+0x394>)
1000634a:	2200      	movs	r2, #0
1000634c:	701a      	strb	r2, [r3, #0]

	if(Ultrsonic_data_invaildcounter[2] < ULRTA_NUM_NO_DATA_INVALID ){
1000634e:	4b36      	ldr	r3, [pc, #216]	; (10006428 <Ultra_sonic_filter+0x370>)
10006350:	789b      	ldrb	r3, [r3, #2]
10006352:	2b13      	cmp	r3, #19
10006354:	d861      	bhi.n	1000641a <Ultra_sonic_filter+0x362>
		Obstacel_R.angle = Steering_Angles[1];
10006356:	4b37      	ldr	r3, [pc, #220]	; (10006434 <Ultra_sonic_filter+0x37c>)
10006358:	685a      	ldr	r2, [r3, #4]
1000635a:	4b3f      	ldr	r3, [pc, #252]	; (10006458 <Ultra_sonic_filter+0x3a0>)
1000635c:	609a      	str	r2, [r3, #8]
		Obstacel_R.distance = Ultra_m_R;
1000635e:	4b39      	ldr	r3, [pc, #228]	; (10006444 <Ultra_sonic_filter+0x38c>)
10006360:	681a      	ldr	r2, [r3, #0]
10006362:	4b3d      	ldr	r3, [pc, #244]	; (10006458 <Ultra_sonic_filter+0x3a0>)
10006364:	605a      	str	r2, [r3, #4]
		Obstacel_R.isValid = 1;
10006366:	4b3c      	ldr	r3, [pc, #240]	; (10006458 <Ultra_sonic_filter+0x3a0>)
10006368:	2201      	movs	r2, #1
1000636a:	701a      	strb	r2, [r3, #0]
		Obstacel_R.vector[0] = Obstacel_R.distance * cos(Obstacel_R.angle / RAD_TO_DEG);
1000636c:	4b3a      	ldr	r3, [pc, #232]	; (10006458 <Ultra_sonic_filter+0x3a0>)
1000636e:	685b      	ldr	r3, [r3, #4]
10006370:	1c18      	adds	r0, r3, #0
10006372:	f006 fa73 	bl	1000c85c <__aeabi_f2d>
10006376:	1c05      	adds	r5, r0, #0
10006378:	1c0e      	adds	r6, r1, #0
1000637a:	4b37      	ldr	r3, [pc, #220]	; (10006458 <Ultra_sonic_filter+0x3a0>)
1000637c:	689b      	ldr	r3, [r3, #8]
1000637e:	1c18      	adds	r0, r3, #0
10006380:	f006 fa6c 	bl	1000c85c <__aeabi_f2d>
10006384:	1c03      	adds	r3, r0, #0
10006386:	1c0c      	adds	r4, r1, #0
10006388:	1c18      	adds	r0, r3, #0
1000638a:	1c21      	adds	r1, r4, #0
1000638c:	4a30      	ldr	r2, [pc, #192]	; (10006450 <Ultra_sonic_filter+0x398>)
1000638e:	4b31      	ldr	r3, [pc, #196]	; (10006454 <Ultra_sonic_filter+0x39c>)
10006390:	f004 ff6e 	bl	1000b270 <__aeabi_ddiv>
10006394:	1c03      	adds	r3, r0, #0
10006396:	1c0c      	adds	r4, r1, #0
10006398:	1c18      	adds	r0, r3, #0
1000639a:	1c21      	adds	r1, r4, #0
1000639c:	f000 fea0 	bl	100070e0 <cos>
100063a0:	1c03      	adds	r3, r0, #0
100063a2:	1c0c      	adds	r4, r1, #0
100063a4:	1c28      	adds	r0, r5, #0
100063a6:	1c31      	adds	r1, r6, #0
100063a8:	1c1a      	adds	r2, r3, #0
100063aa:	1c23      	adds	r3, r4, #0
100063ac:	f005 fb9e 	bl	1000baec <__aeabi_dmul>
100063b0:	1c03      	adds	r3, r0, #0
100063b2:	1c0c      	adds	r4, r1, #0
100063b4:	1c18      	adds	r0, r3, #0
100063b6:	1c21      	adds	r1, r4, #0
100063b8:	f006 faa4 	bl	1000c904 <__aeabi_d2f>
100063bc:	1c02      	adds	r2, r0, #0
100063be:	4b26      	ldr	r3, [pc, #152]	; (10006458 <Ultra_sonic_filter+0x3a0>)
100063c0:	60da      	str	r2, [r3, #12]
		Obstacel_R.vector[1] = Obstacel_R.distance * sin(Obstacel_R.angle / RAD_TO_DEG);
100063c2:	4b25      	ldr	r3, [pc, #148]	; (10006458 <Ultra_sonic_filter+0x3a0>)
100063c4:	685b      	ldr	r3, [r3, #4]
100063c6:	1c18      	adds	r0, r3, #0
100063c8:	f006 fa48 	bl	1000c85c <__aeabi_f2d>
100063cc:	1c05      	adds	r5, r0, #0
100063ce:	1c0e      	adds	r6, r1, #0
100063d0:	4b21      	ldr	r3, [pc, #132]	; (10006458 <Ultra_sonic_filter+0x3a0>)
100063d2:	689b      	ldr	r3, [r3, #8]
100063d4:	1c18      	adds	r0, r3, #0
100063d6:	f006 fa41 	bl	1000c85c <__aeabi_f2d>
100063da:	1c03      	adds	r3, r0, #0
100063dc:	1c0c      	adds	r4, r1, #0
100063de:	1c18      	adds	r0, r3, #0
100063e0:	1c21      	adds	r1, r4, #0
100063e2:	4a1b      	ldr	r2, [pc, #108]	; (10006450 <Ultra_sonic_filter+0x398>)
100063e4:	4b1b      	ldr	r3, [pc, #108]	; (10006454 <Ultra_sonic_filter+0x39c>)
100063e6:	f004 ff43 	bl	1000b270 <__aeabi_ddiv>
100063ea:	1c03      	adds	r3, r0, #0
100063ec:	1c0c      	adds	r4, r1, #0
100063ee:	1c18      	adds	r0, r3, #0
100063f0:	1c21      	adds	r1, r4, #0
100063f2:	f000 fec7 	bl	10007184 <sin>
100063f6:	1c03      	adds	r3, r0, #0
100063f8:	1c0c      	adds	r4, r1, #0
100063fa:	1c28      	adds	r0, r5, #0
100063fc:	1c31      	adds	r1, r6, #0
100063fe:	1c1a      	adds	r2, r3, #0
10006400:	1c23      	adds	r3, r4, #0
10006402:	f005 fb73 	bl	1000baec <__aeabi_dmul>
10006406:	1c03      	adds	r3, r0, #0
10006408:	1c0c      	adds	r4, r1, #0
1000640a:	1c18      	adds	r0, r3, #0
1000640c:	1c21      	adds	r1, r4, #0
1000640e:	f006 fa79 	bl	1000c904 <__aeabi_d2f>
10006412:	1c02      	adds	r2, r0, #0
10006414:	4b10      	ldr	r3, [pc, #64]	; (10006458 <Ultra_sonic_filter+0x3a0>)
10006416:	611a      	str	r2, [r3, #16]
10006418:	e002      	b.n	10006420 <Ultra_sonic_filter+0x368>
	}
	else Obstacel_R.isValid = 0;
1000641a:	4b0f      	ldr	r3, [pc, #60]	; (10006458 <Ultra_sonic_filter+0x3a0>)
1000641c:	2200      	movs	r2, #0
1000641e:	701a      	strb	r2, [r3, #0]
}
10006420:	46bd      	mov	sp, r7
10006422:	b007      	add	sp, #28
10006424:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006426:	46c0      	nop			; (mov r8, r8)
10006428:	20000854 	.word	0x20000854
1000642c:	42c80000 	.word	0x42c80000
10006430:	20000848 	.word	0x20000848
10006434:	20000a5c 	.word	0x20000a5c
10006438:	20000ad0 	.word	0x20000ad0
1000643c:	2000084c 	.word	0x2000084c
10006440:	20000ad1 	.word	0x20000ad1
10006444:	20000850 	.word	0x20000850
10006448:	20000b18 	.word	0x20000b18
1000644c:	20000af0 	.word	0x20000af0
10006450:	2584f4c7 	.word	0x2584f4c7
10006454:	404ca61e 	.word	0x404ca61e
10006458:	20000b04 	.word	0x20000b04

1000645c <Ultrasoinc_Obstructet_Test>:
	return 0;
}
*/


uint8_t Ultrasoinc_Obstructet_Test(float Angle){
1000645c:	b580      	push	{r7, lr}
1000645e:	b082      	sub	sp, #8
10006460:	af00      	add	r7, sp, #0
10006462:	6078      	str	r0, [r7, #4]
		if(Angle > 0){
10006464:	6878      	ldr	r0, [r7, #4]
10006466:	2100      	movs	r1, #0
10006468:	f003 fc8a 	bl	10009d80 <__aeabi_fcmpgt>
1000646c:	1e03      	subs	r3, r0, #0
1000646e:	d009      	beq.n	10006484 <Ultrasoinc_Obstructet_Test+0x28>
			if(within_MAX_MIN(Angle, POS_OBSTRUCTED_ANGLE_MAX , POS_OBSTRUCTED_ANGLE_MIN)){
10006470:	687b      	ldr	r3, [r7, #4]
10006472:	490f      	ldr	r1, [pc, #60]	; (100064b0 <Ultrasoinc_Obstructet_Test+0x54>)
10006474:	4a0f      	ldr	r2, [pc, #60]	; (100064b4 <Ultrasoinc_Obstructet_Test+0x58>)
10006476:	1c18      	adds	r0, r3, #0
10006478:	f000 fb82 	bl	10006b80 <within_MAX_MIN>
1000647c:	1e03      	subs	r3, r0, #0
1000647e:	d001      	beq.n	10006484 <Ultrasoinc_Obstructet_Test+0x28>
				return 1;
10006480:	2301      	movs	r3, #1
10006482:	e010      	b.n	100064a6 <Ultrasoinc_Obstructet_Test+0x4a>
			}
		}

		if(Angle < 0){
10006484:	6878      	ldr	r0, [r7, #4]
10006486:	2100      	movs	r1, #0
10006488:	f003 fc66 	bl	10009d58 <__aeabi_fcmplt>
1000648c:	1e03      	subs	r3, r0, #0
1000648e:	d009      	beq.n	100064a4 <Ultrasoinc_Obstructet_Test+0x48>
			if(within_MAX_MIN(Angle, NEG_OBSTRUCTED_ANGLE_MIN , NEG_OBSTRUCTED_ANGLE_MAX)){
10006490:	687b      	ldr	r3, [r7, #4]
10006492:	4909      	ldr	r1, [pc, #36]	; (100064b8 <Ultrasoinc_Obstructet_Test+0x5c>)
10006494:	4a09      	ldr	r2, [pc, #36]	; (100064bc <Ultrasoinc_Obstructet_Test+0x60>)
10006496:	1c18      	adds	r0, r3, #0
10006498:	f000 fb72 	bl	10006b80 <within_MAX_MIN>
1000649c:	1e03      	subs	r3, r0, #0
1000649e:	d001      	beq.n	100064a4 <Ultrasoinc_Obstructet_Test+0x48>
				return 1;
100064a0:	2301      	movs	r3, #1
100064a2:	e000      	b.n	100064a6 <Ultrasoinc_Obstructet_Test+0x4a>
			}
		}

	return 0;
100064a4:	2300      	movs	r3, #0
}
100064a6:	1c18      	adds	r0, r3, #0
100064a8:	46bd      	mov	sp, r7
100064aa:	b002      	add	sp, #8
100064ac:	bd80      	pop	{r7, pc}
100064ae:	46c0      	nop			; (mov r8, r8)
100064b0:	43520000 	.word	0x43520000
100064b4:	42480000 	.word	0x42480000
100064b8:	c3160000 	.word	0xc3160000
100064bc:	c39b0000 	.word	0xc39b0000

100064c0 <Collision_voidance>:

void Collision_voidance(){
100064c0:	b590      	push	{r4, r7, lr}
100064c2:	b085      	sub	sp, #20
100064c4:	af02      	add	r7, sp, #8
	if(init == 0){
100064c6:	4b51      	ldr	r3, [pc, #324]	; (1000660c <Collision_voidance+0x14c>)
100064c8:	781b      	ldrb	r3, [r3, #0]
100064ca:	2b00      	cmp	r3, #0
100064cc:	d10b      	bne.n	100064e6 <Collision_voidance+0x26>
		Obstacel_F.Sensor = FRONT_;
100064ce:	4b50      	ldr	r3, [pc, #320]	; (10006610 <Collision_voidance+0x150>)
100064d0:	2200      	movs	r2, #0
100064d2:	705a      	strb	r2, [r3, #1]
		Obstacel_L.Sensor = LEFT;
100064d4:	4b4f      	ldr	r3, [pc, #316]	; (10006614 <Collision_voidance+0x154>)
100064d6:	2201      	movs	r2, #1
100064d8:	705a      	strb	r2, [r3, #1]
		Obstacel_R.Sensor = RIGHT;
100064da:	4b4f      	ldr	r3, [pc, #316]	; (10006618 <Collision_voidance+0x158>)
100064dc:	2202      	movs	r2, #2
100064de:	705a      	strb	r2, [r3, #1]
		init = 1;
100064e0:	4b4a      	ldr	r3, [pc, #296]	; (1000660c <Collision_voidance+0x14c>)
100064e2:	2201      	movs	r2, #1
100064e4:	701a      	strb	r2, [r3, #0]
	}



	// check if reciveing from Ulatrasoic sesnors node
	CAN_Ultrasonic_No_messasge_count ++;
100064e6:	4b4d      	ldr	r3, [pc, #308]	; (1000661c <Collision_voidance+0x15c>)
100064e8:	781b      	ldrb	r3, [r3, #0]
100064ea:	b2db      	uxtb	r3, r3
100064ec:	3301      	adds	r3, #1
100064ee:	b2da      	uxtb	r2, r3
100064f0:	4b4a      	ldr	r3, [pc, #296]	; (1000661c <Collision_voidance+0x15c>)
100064f2:	701a      	strb	r2, [r3, #0]
	if(CAN_Ultrasonic_No_messasge_count > 200) {
100064f4:	4b49      	ldr	r3, [pc, #292]	; (1000661c <Collision_voidance+0x15c>)
100064f6:	781b      	ldrb	r3, [r3, #0]
100064f8:	b2db      	uxtb	r3, r3
100064fa:	2bc8      	cmp	r3, #200	; 0xc8
100064fc:	d903      	bls.n	10006506 <Collision_voidance+0x46>
		CAN_Ultrasonic_No_messasge_count = 200;
100064fe:	4b47      	ldr	r3, [pc, #284]	; (1000661c <Collision_voidance+0x15c>)
10006500:	22c8      	movs	r2, #200	; 0xc8
10006502:	701a      	strb	r2, [r3, #0]
		return;
10006504:	e07f      	b.n	10006606 <Collision_voidance+0x146>
	}

	Speed_reduction_ratio = 1;
10006506:	4b46      	ldr	r3, [pc, #280]	; (10006620 <Collision_voidance+0x160>)
10006508:	22fe      	movs	r2, #254	; 0xfe
1000650a:	0592      	lsls	r2, r2, #22
1000650c:	601a      	str	r2, [r3, #0]
	Speed_limit = MAX_Speed + 0.01; // + 0.01 to avoid float bs
1000650e:	4b45      	ldr	r3, [pc, #276]	; (10006624 <Collision_voidance+0x164>)
10006510:	4a45      	ldr	r2, [pc, #276]	; (10006628 <Collision_voidance+0x168>)
10006512:	601a      	str	r2, [r3, #0]
	new_Speed_limit = MAX_Speed;
10006514:	4b45      	ldr	r3, [pc, #276]	; (1000662c <Collision_voidance+0x16c>)
10006516:	22ff      	movs	r2, #255	; 0xff
10006518:	0592      	lsls	r2, r2, #22
1000651a:	601a      	str	r2, [r3, #0]


	Obstacel_CA_check(Obstacel_F);
1000651c:	4b3c      	ldr	r3, [pc, #240]	; (10006610 <Collision_voidance+0x150>)
1000651e:	466a      	mov	r2, sp
10006520:	6919      	ldr	r1, [r3, #16]
10006522:	6011      	str	r1, [r2, #0]
10006524:	6818      	ldr	r0, [r3, #0]
10006526:	6859      	ldr	r1, [r3, #4]
10006528:	689a      	ldr	r2, [r3, #8]
1000652a:	68db      	ldr	r3, [r3, #12]
1000652c:	f000 f890 	bl	10006650 <Obstacel_CA_check>
	//Obstacel_CA_check(Obstacel_L);
	//Obstacel_CA_check(Obstacel_R);#

	//CA aktive
	if(Speed_reduction_ratio == 0) aktive_addition = 0.05 ;
10006530:	4b3b      	ldr	r3, [pc, #236]	; (10006620 <Collision_voidance+0x160>)
10006532:	681b      	ldr	r3, [r3, #0]
10006534:	1c18      	adds	r0, r3, #0
10006536:	2100      	movs	r1, #0
10006538:	f003 fc08 	bl	10009d4c <__aeabi_fcmpeq>
1000653c:	1e03      	subs	r3, r0, #0
1000653e:	d003      	beq.n	10006548 <Collision_voidance+0x88>
10006540:	4b3b      	ldr	r3, [pc, #236]	; (10006630 <Collision_voidance+0x170>)
10006542:	4a3c      	ldr	r2, [pc, #240]	; (10006634 <Collision_voidance+0x174>)
10006544:	601a      	str	r2, [r3, #0]
10006546:	e012      	b.n	1000656e <Collision_voidance+0xae>
	else if(aktive_addition > 0) aktive_addition --;
10006548:	4b39      	ldr	r3, [pc, #228]	; (10006630 <Collision_voidance+0x170>)
1000654a:	681b      	ldr	r3, [r3, #0]
1000654c:	1c18      	adds	r0, r3, #0
1000654e:	2100      	movs	r1, #0
10006550:	f003 fc16 	bl	10009d80 <__aeabi_fcmpgt>
10006554:	1e03      	subs	r3, r0, #0
10006556:	d00a      	beq.n	1000656e <Collision_voidance+0xae>
10006558:	4b35      	ldr	r3, [pc, #212]	; (10006630 <Collision_voidance+0x170>)
1000655a:	681b      	ldr	r3, [r3, #0]
1000655c:	1c18      	adds	r0, r3, #0
1000655e:	21fe      	movs	r1, #254	; 0xfe
10006560:	0589      	lsls	r1, r1, #22
10006562:	f004 f977 	bl	1000a854 <__aeabi_fsub>
10006566:	1c03      	adds	r3, r0, #0
10006568:	1c1a      	adds	r2, r3, #0
1000656a:	4b31      	ldr	r3, [pc, #196]	; (10006630 <Collision_voidance+0x170>)
1000656c:	601a      	str	r2, [r3, #0]

	if(Speed_limit < MAX_Speed){
1000656e:	4b2d      	ldr	r3, [pc, #180]	; (10006624 <Collision_voidance+0x164>)
10006570:	681b      	ldr	r3, [r3, #0]
10006572:	1c18      	adds	r0, r3, #0
10006574:	21ff      	movs	r1, #255	; 0xff
10006576:	0589      	lsls	r1, r1, #22
10006578:	f003 fbee 	bl	10009d58 <__aeabi_fcmplt>
1000657c:	1e03      	subs	r3, r0, #0
1000657e:	d013      	beq.n	100065a8 <Collision_voidance+0xe8>
		if(Speeds[0] != 0) Speed_reduction_ratio = Speed_limit / Speeds[0];
10006580:	4b2d      	ldr	r3, [pc, #180]	; (10006638 <Collision_voidance+0x178>)
10006582:	681b      	ldr	r3, [r3, #0]
10006584:	1c18      	adds	r0, r3, #0
10006586:	2100      	movs	r1, #0
10006588:	f003 fbe0 	bl	10009d4c <__aeabi_fcmpeq>
1000658c:	1e03      	subs	r3, r0, #0
1000658e:	d10b      	bne.n	100065a8 <Collision_voidance+0xe8>
10006590:	4b24      	ldr	r3, [pc, #144]	; (10006624 <Collision_voidance+0x164>)
10006592:	681a      	ldr	r2, [r3, #0]
10006594:	4b28      	ldr	r3, [pc, #160]	; (10006638 <Collision_voidance+0x178>)
10006596:	681b      	ldr	r3, [r3, #0]
10006598:	1c10      	adds	r0, r2, #0
1000659a:	1c19      	adds	r1, r3, #0
1000659c:	f003 fe36 	bl	1000a20c <__aeabi_fdiv>
100065a0:	1c03      	adds	r3, r0, #0
100065a2:	1c1a      	adds	r2, r3, #0
100065a4:	4b1e      	ldr	r3, [pc, #120]	; (10006620 <Collision_voidance+0x160>)
100065a6:	601a      	str	r2, [r3, #0]
	}

	// speed output with reduction if CA active
	for(uint8_t i = 0; i < 4; i ++){
100065a8:	1dfb      	adds	r3, r7, #7
100065aa:	2200      	movs	r2, #0
100065ac:	701a      	strb	r2, [r3, #0]
100065ae:	e016      	b.n	100065de <Collision_voidance+0x11e>
		Speeds_CA[i] = Speeds[i] * Speed_reduction_ratio;
100065b0:	1dfb      	adds	r3, r7, #7
100065b2:	781c      	ldrb	r4, [r3, #0]
100065b4:	1dfb      	adds	r3, r7, #7
100065b6:	781a      	ldrb	r2, [r3, #0]
100065b8:	4b1f      	ldr	r3, [pc, #124]	; (10006638 <Collision_voidance+0x178>)
100065ba:	0092      	lsls	r2, r2, #2
100065bc:	58d2      	ldr	r2, [r2, r3]
100065be:	4b18      	ldr	r3, [pc, #96]	; (10006620 <Collision_voidance+0x160>)
100065c0:	681b      	ldr	r3, [r3, #0]
100065c2:	1c10      	adds	r0, r2, #0
100065c4:	1c19      	adds	r1, r3, #0
100065c6:	f004 f813 	bl	1000a5f0 <__aeabi_fmul>
100065ca:	1c03      	adds	r3, r0, #0
100065cc:	1c19      	adds	r1, r3, #0
100065ce:	4b1b      	ldr	r3, [pc, #108]	; (1000663c <Collision_voidance+0x17c>)
100065d0:	00a2      	lsls	r2, r4, #2
100065d2:	50d1      	str	r1, [r2, r3]
	if(Speed_limit < MAX_Speed){
		if(Speeds[0] != 0) Speed_reduction_ratio = Speed_limit / Speeds[0];
	}

	// speed output with reduction if CA active
	for(uint8_t i = 0; i < 4; i ++){
100065d4:	1dfb      	adds	r3, r7, #7
100065d6:	781a      	ldrb	r2, [r3, #0]
100065d8:	1dfb      	adds	r3, r7, #7
100065da:	3201      	adds	r2, #1
100065dc:	701a      	strb	r2, [r3, #0]
100065de:	1dfb      	adds	r3, r7, #7
100065e0:	781b      	ldrb	r3, [r3, #0]
100065e2:	2b03      	cmp	r3, #3
100065e4:	d9e4      	bls.n	100065b0 <Collision_voidance+0xf0>
		Speeds_CA[i] = Speeds[i] * Speed_reduction_ratio;
	}

	speed_CA_fl = Speeds_CA[0];
100065e6:	4b15      	ldr	r3, [pc, #84]	; (1000663c <Collision_voidance+0x17c>)
100065e8:	681a      	ldr	r2, [r3, #0]
100065ea:	4b15      	ldr	r3, [pc, #84]	; (10006640 <Collision_voidance+0x180>)
100065ec:	601a      	str	r2, [r3, #0]
	speed_CA_fr = Speeds_CA[1];
100065ee:	4b13      	ldr	r3, [pc, #76]	; (1000663c <Collision_voidance+0x17c>)
100065f0:	685a      	ldr	r2, [r3, #4]
100065f2:	4b14      	ldr	r3, [pc, #80]	; (10006644 <Collision_voidance+0x184>)
100065f4:	601a      	str	r2, [r3, #0]
	speed_CA_rl = Speeds_CA[2];
100065f6:	4b11      	ldr	r3, [pc, #68]	; (1000663c <Collision_voidance+0x17c>)
100065f8:	689a      	ldr	r2, [r3, #8]
100065fa:	4b13      	ldr	r3, [pc, #76]	; (10006648 <Collision_voidance+0x188>)
100065fc:	601a      	str	r2, [r3, #0]
	speed_CA_rr = Speeds_CA[3];
100065fe:	4b0f      	ldr	r3, [pc, #60]	; (1000663c <Collision_voidance+0x17c>)
10006600:	68da      	ldr	r2, [r3, #12]
10006602:	4b12      	ldr	r3, [pc, #72]	; (1000664c <Collision_voidance+0x18c>)
10006604:	601a      	str	r2, [r3, #0]

}
10006606:	46bd      	mov	sp, r7
10006608:	b003      	add	sp, #12
1000660a:	bd90      	pop	{r4, r7, pc}
1000660c:	20000ae8 	.word	0x20000ae8
10006610:	20000b18 	.word	0x20000b18
10006614:	20000af0 	.word	0x20000af0
10006618:	20000b04 	.word	0x20000b04
1000661c:	20000828 	.word	0x20000828
10006620:	20000858 	.word	0x20000858
10006624:	2000085c 	.word	0x2000085c
10006628:	3fc147ae 	.word	0x3fc147ae
1000662c:	20000860 	.word	0x20000860
10006630:	20000ad4 	.word	0x20000ad4
10006634:	3d4ccccd 	.word	0x3d4ccccd
10006638:	20000a3c 	.word	0x20000a3c
1000663c:	20000a4c 	.word	0x20000a4c
10006640:	20000ad8 	.word	0x20000ad8
10006644:	20000adc 	.word	0x20000adc
10006648:	20000ae0 	.word	0x20000ae0
1000664c:	20000ae4 	.word	0x20000ae4

10006650 <Obstacel_CA_check>:

void Obstacel_CA_check(Obstacel obstacel){
10006650:	b084      	sub	sp, #16
10006652:	b5f0      	push	{r4, r5, r6, r7, lr}
10006654:	b083      	sub	sp, #12
10006656:	af00      	add	r7, sp, #0
10006658:	2420      	movs	r4, #32
1000665a:	193c      	adds	r4, r7, r4
1000665c:	6020      	str	r0, [r4, #0]
1000665e:	6061      	str	r1, [r4, #4]
10006660:	60a2      	str	r2, [r4, #8]
10006662:	60e3      	str	r3, [r4, #12]
	set_CA_LED(obstacel.Sensor,0);
10006664:	2320      	movs	r3, #32
10006666:	18fb      	adds	r3, r7, r3
10006668:	785b      	ldrb	r3, [r3, #1]
1000666a:	1c18      	adds	r0, r3, #0
1000666c:	2100      	movs	r1, #0
1000666e:	f000 f8b7 	bl	100067e0 <set_CA_LED>
	if(obstacel.isValid == 0) return;
10006672:	2320      	movs	r3, #32
10006674:	18fb      	adds	r3, r7, r3
10006676:	781b      	ldrb	r3, [r3, #0]
10006678:	2201      	movs	r2, #1
1000667a:	4053      	eors	r3, r2
1000667c:	b2db      	uxtb	r3, r3
1000667e:	2b00      	cmp	r3, #0
10006680:	d000      	beq.n	10006684 <Obstacel_CA_check+0x34>
10006682:	e096      	b.n	100067b2 <Obstacel_CA_check+0x162>

	if(obstacel.distance > CA_START) return; // not far away no CA
10006684:	2320      	movs	r3, #32
10006686:	18fb      	adds	r3, r7, r3
10006688:	685b      	ldr	r3, [r3, #4]
1000668a:	1c18      	adds	r0, r3, #0
1000668c:	21fe      	movs	r1, #254	; 0xfe
1000668e:	0589      	lsls	r1, r1, #22
10006690:	f003 fb76 	bl	10009d80 <__aeabi_fcmpgt>
10006694:	1e03      	subs	r3, r0, #0
10006696:	d000      	beq.n	1000669a <Obstacel_CA_check+0x4a>
10006698:	e08b      	b.n	100067b2 <Obstacel_CA_check+0x162>

	float Trajctory_at_obstacel_abs = vector_projection_abs(Trajctory, obstacel.vector);
1000669a:	4a49      	ldr	r2, [pc, #292]	; (100067c0 <Obstacel_CA_check+0x170>)
1000669c:	2320      	movs	r3, #32
1000669e:	18fb      	adds	r3, r7, r3
100066a0:	330c      	adds	r3, #12
100066a2:	1c10      	adds	r0, r2, #0
100066a4:	1c19      	adds	r1, r3, #0
100066a6:	f000 fb19 	bl	10006cdc <vector_projection_abs>
100066aa:	1c03      	adds	r3, r0, #0
100066ac:	607b      	str	r3, [r7, #4]
	if(Trajctory_at_obstacel_abs < 0.05) return; // if trajcetor in diection of obstacel is smaller then no cA
100066ae:	6878      	ldr	r0, [r7, #4]
100066b0:	f006 f8d4 	bl	1000c85c <__aeabi_f2d>
100066b4:	1c03      	adds	r3, r0, #0
100066b6:	1c0c      	adds	r4, r1, #0
100066b8:	1c18      	adds	r0, r3, #0
100066ba:	1c21      	adds	r1, r4, #0
100066bc:	4a41      	ldr	r2, [pc, #260]	; (100067c4 <Obstacel_CA_check+0x174>)
100066be:	4b42      	ldr	r3, [pc, #264]	; (100067c8 <Obstacel_CA_check+0x178>)
100066c0:	f003 fb10 	bl	10009ce4 <__aeabi_dcmplt>
100066c4:	1e03      	subs	r3, r0, #0
100066c6:	d000      	beq.n	100066ca <Obstacel_CA_check+0x7a>
100066c8:	e073      	b.n	100067b2 <Obstacel_CA_check+0x162>

	if(obstacel.distance  < CA_STOP + aktive_addition){
100066ca:	2320      	movs	r3, #32
100066cc:	18fb      	adds	r3, r7, r3
100066ce:	685b      	ldr	r3, [r3, #4]
100066d0:	1c18      	adds	r0, r3, #0
100066d2:	f006 f8c3 	bl	1000c85c <__aeabi_f2d>
100066d6:	1c05      	adds	r5, r0, #0
100066d8:	1c0e      	adds	r6, r1, #0
100066da:	4b3c      	ldr	r3, [pc, #240]	; (100067cc <Obstacel_CA_check+0x17c>)
100066dc:	681b      	ldr	r3, [r3, #0]
100066de:	1c18      	adds	r0, r3, #0
100066e0:	f006 f8bc 	bl	1000c85c <__aeabi_f2d>
100066e4:	1c03      	adds	r3, r0, #0
100066e6:	1c0c      	adds	r4, r1, #0
100066e8:	1c18      	adds	r0, r3, #0
100066ea:	1c21      	adds	r1, r4, #0
100066ec:	4a35      	ldr	r2, [pc, #212]	; (100067c4 <Obstacel_CA_check+0x174>)
100066ee:	4b38      	ldr	r3, [pc, #224]	; (100067d0 <Obstacel_CA_check+0x180>)
100066f0:	f004 fa96 	bl	1000ac20 <__aeabi_dadd>
100066f4:	1c03      	adds	r3, r0, #0
100066f6:	1c0c      	adds	r4, r1, #0
100066f8:	1c28      	adds	r0, r5, #0
100066fa:	1c31      	adds	r1, r6, #0
100066fc:	1c1a      	adds	r2, r3, #0
100066fe:	1c23      	adds	r3, r4, #0
10006700:	f003 faf0 	bl	10009ce4 <__aeabi_dcmplt>
10006704:	1e03      	subs	r3, r0, #0
10006706:	d00a      	beq.n	1000671e <Obstacel_CA_check+0xce>
						Speed_reduction_ratio = 0; // stop
10006708:	4b32      	ldr	r3, [pc, #200]	; (100067d4 <Obstacel_CA_check+0x184>)
1000670a:	2200      	movs	r2, #0
1000670c:	601a      	str	r2, [r3, #0]
						set_CA_LED(obstacel.Sensor,1);
1000670e:	2320      	movs	r3, #32
10006710:	18fb      	adds	r3, r7, r3
10006712:	785b      	ldrb	r3, [r3, #1]
10006714:	1c18      	adds	r0, r3, #0
10006716:	2101      	movs	r1, #1
10006718:	f000 f862 	bl	100067e0 <set_CA_LED>
						return;
1000671c:	e049      	b.n	100067b2 <Obstacel_CA_check+0x162>
	}
	else if(Trajctory_at_obstacel_abs > obstacel.distance  - CA_STOP){
1000671e:	6878      	ldr	r0, [r7, #4]
10006720:	f006 f89c 	bl	1000c85c <__aeabi_f2d>
10006724:	1c05      	adds	r5, r0, #0
10006726:	1c0e      	adds	r6, r1, #0
10006728:	2320      	movs	r3, #32
1000672a:	18fb      	adds	r3, r7, r3
1000672c:	685b      	ldr	r3, [r3, #4]
1000672e:	1c18      	adds	r0, r3, #0
10006730:	f006 f894 	bl	1000c85c <__aeabi_f2d>
10006734:	1c03      	adds	r3, r0, #0
10006736:	1c0c      	adds	r4, r1, #0
10006738:	1c18      	adds	r0, r3, #0
1000673a:	1c21      	adds	r1, r4, #0
1000673c:	4a21      	ldr	r2, [pc, #132]	; (100067c4 <Obstacel_CA_check+0x174>)
1000673e:	4b24      	ldr	r3, [pc, #144]	; (100067d0 <Obstacel_CA_check+0x180>)
10006740:	f005 fc6e 	bl	1000c020 <__aeabi_dsub>
10006744:	1c03      	adds	r3, r0, #0
10006746:	1c0c      	adds	r4, r1, #0
10006748:	1c28      	adds	r0, r5, #0
1000674a:	1c31      	adds	r1, r6, #0
1000674c:	1c1a      	adds	r2, r3, #0
1000674e:	1c23      	adds	r3, r4, #0
10006750:	f003 fadc 	bl	10009d0c <__aeabi_dcmpgt>
10006754:	1e03      	subs	r3, r0, #0
10006756:	d02c      	beq.n	100067b2 <Obstacel_CA_check+0x162>
		   new_Speed_limit = obstacel.distance  - CA_STOP; // speed reduction
10006758:	2320      	movs	r3, #32
1000675a:	18fb      	adds	r3, r7, r3
1000675c:	685b      	ldr	r3, [r3, #4]
1000675e:	1c18      	adds	r0, r3, #0
10006760:	f006 f87c 	bl	1000c85c <__aeabi_f2d>
10006764:	1c03      	adds	r3, r0, #0
10006766:	1c0c      	adds	r4, r1, #0
10006768:	1c18      	adds	r0, r3, #0
1000676a:	1c21      	adds	r1, r4, #0
1000676c:	4a15      	ldr	r2, [pc, #84]	; (100067c4 <Obstacel_CA_check+0x174>)
1000676e:	4b18      	ldr	r3, [pc, #96]	; (100067d0 <Obstacel_CA_check+0x180>)
10006770:	f005 fc56 	bl	1000c020 <__aeabi_dsub>
10006774:	1c03      	adds	r3, r0, #0
10006776:	1c0c      	adds	r4, r1, #0
10006778:	1c18      	adds	r0, r3, #0
1000677a:	1c21      	adds	r1, r4, #0
1000677c:	f006 f8c2 	bl	1000c904 <__aeabi_d2f>
10006780:	1c02      	adds	r2, r0, #0
10006782:	4b15      	ldr	r3, [pc, #84]	; (100067d8 <Obstacel_CA_check+0x188>)
10006784:	601a      	str	r2, [r3, #0]
		if( Speed_limit > new_Speed_limit) {
10006786:	4b15      	ldr	r3, [pc, #84]	; (100067dc <Obstacel_CA_check+0x18c>)
10006788:	681a      	ldr	r2, [r3, #0]
1000678a:	4b13      	ldr	r3, [pc, #76]	; (100067d8 <Obstacel_CA_check+0x188>)
1000678c:	681b      	ldr	r3, [r3, #0]
1000678e:	1c10      	adds	r0, r2, #0
10006790:	1c19      	adds	r1, r3, #0
10006792:	f003 faf5 	bl	10009d80 <__aeabi_fcmpgt>
10006796:	1e03      	subs	r3, r0, #0
10006798:	d00b      	beq.n	100067b2 <Obstacel_CA_check+0x162>
			Speed_limit = new_Speed_limit;
1000679a:	4b0f      	ldr	r3, [pc, #60]	; (100067d8 <Obstacel_CA_check+0x188>)
1000679c:	681a      	ldr	r2, [r3, #0]
1000679e:	4b0f      	ldr	r3, [pc, #60]	; (100067dc <Obstacel_CA_check+0x18c>)
100067a0:	601a      	str	r2, [r3, #0]
			set_CA_LED(obstacel.Sensor,2); //led on
100067a2:	2320      	movs	r3, #32
100067a4:	18fb      	adds	r3, r7, r3
100067a6:	785b      	ldrb	r3, [r3, #1]
100067a8:	1c18      	adds	r0, r3, #0
100067aa:	2102      	movs	r1, #2
100067ac:	f000 f818 	bl	100067e0 <set_CA_LED>
			return;
100067b0:	46c0      	nop			; (mov r8, r8)
		}
	}
}
100067b2:	46bd      	mov	sp, r7
100067b4:	b003      	add	sp, #12
100067b6:	bcf0      	pop	{r4, r5, r6, r7}
100067b8:	bc08      	pop	{r3}
100067ba:	b004      	add	sp, #16
100067bc:	4718      	bx	r3
100067be:	46c0      	nop			; (mov r8, r8)
100067c0:	20000a98 	.word	0x20000a98
100067c4:	9999999a 	.word	0x9999999a
100067c8:	3fa99999 	.word	0x3fa99999
100067cc:	20000ad4 	.word	0x20000ad4
100067d0:	3fc99999 	.word	0x3fc99999
100067d4:	20000858 	.word	0x20000858
100067d8:	20000860 	.word	0x20000860
100067dc:	2000085c 	.word	0x2000085c

100067e0 <set_CA_LED>:

uint8_t toggel_ervy_x = 0;

void set_CA_LED(uint8_t Sensor, uint8_t mode){
100067e0:	b580      	push	{r7, lr}
100067e2:	b082      	sub	sp, #8
100067e4:	af00      	add	r7, sp, #0
100067e6:	1c02      	adds	r2, r0, #0
100067e8:	1dfb      	adds	r3, r7, #7
100067ea:	701a      	strb	r2, [r3, #0]
100067ec:	1dbb      	adds	r3, r7, #6
100067ee:	1c0a      	adds	r2, r1, #0
100067f0:	701a      	strb	r2, [r3, #0]
	if(Sensor == 0)
100067f2:	1dfb      	adds	r3, r7, #7
100067f4:	781b      	ldrb	r3, [r3, #0]
100067f6:	2b00      	cmp	r3, #0
100067f8:	d11e      	bne.n	10006838 <set_CA_LED+0x58>
		{
		if(mode == 0)DIGITAL_IO_SetOutputLow(&LED_CA_FRONT);
100067fa:	1dbb      	adds	r3, r7, #6
100067fc:	781b      	ldrb	r3, [r3, #0]
100067fe:	2b00      	cmp	r3, #0
10006800:	d104      	bne.n	1000680c <set_CA_LED+0x2c>
10006802:	4b38      	ldr	r3, [pc, #224]	; (100068e4 <set_CA_LED+0x104>)
10006804:	1c18      	adds	r0, r3, #0
10006806:	f7ff fc37 	bl	10006078 <DIGITAL_IO_SetOutputLow>
1000680a:	e05a      	b.n	100068c2 <set_CA_LED+0xe2>
		else if(mode == 1)DIGITAL_IO_SetOutputHigh(&LED_CA_FRONT);
1000680c:	1dbb      	adds	r3, r7, #6
1000680e:	781b      	ldrb	r3, [r3, #0]
10006810:	2b01      	cmp	r3, #1
10006812:	d104      	bne.n	1000681e <set_CA_LED+0x3e>
10006814:	4b33      	ldr	r3, [pc, #204]	; (100068e4 <set_CA_LED+0x104>)
10006816:	1c18      	adds	r0, r3, #0
10006818:	f7ff fc1e 	bl	10006058 <DIGITAL_IO_SetOutputHigh>
1000681c:	e051      	b.n	100068c2 <set_CA_LED+0xe2>
		else if(mode == 2 && toggel_ervy_x == 0) DIGITAL_IO_ToggleOutput(&LED_CA_FRONT);
1000681e:	1dbb      	adds	r3, r7, #6
10006820:	781b      	ldrb	r3, [r3, #0]
10006822:	2b02      	cmp	r3, #2
10006824:	d14d      	bne.n	100068c2 <set_CA_LED+0xe2>
10006826:	4b30      	ldr	r3, [pc, #192]	; (100068e8 <set_CA_LED+0x108>)
10006828:	781b      	ldrb	r3, [r3, #0]
1000682a:	2b00      	cmp	r3, #0
1000682c:	d149      	bne.n	100068c2 <set_CA_LED+0xe2>
1000682e:	4b2d      	ldr	r3, [pc, #180]	; (100068e4 <set_CA_LED+0x104>)
10006830:	1c18      	adds	r0, r3, #0
10006832:	f7ff fc31 	bl	10006098 <DIGITAL_IO_ToggleOutput>
10006836:	e044      	b.n	100068c2 <set_CA_LED+0xe2>
		}
	else if (Sensor == 1){
10006838:	1dfb      	adds	r3, r7, #7
1000683a:	781b      	ldrb	r3, [r3, #0]
1000683c:	2b01      	cmp	r3, #1
1000683e:	d11e      	bne.n	1000687e <set_CA_LED+0x9e>
		if(mode == 0)DIGITAL_IO_SetOutputLow(&LED_CA_LEFT);
10006840:	1dbb      	adds	r3, r7, #6
10006842:	781b      	ldrb	r3, [r3, #0]
10006844:	2b00      	cmp	r3, #0
10006846:	d104      	bne.n	10006852 <set_CA_LED+0x72>
10006848:	4b28      	ldr	r3, [pc, #160]	; (100068ec <set_CA_LED+0x10c>)
1000684a:	1c18      	adds	r0, r3, #0
1000684c:	f7ff fc14 	bl	10006078 <DIGITAL_IO_SetOutputLow>
10006850:	e037      	b.n	100068c2 <set_CA_LED+0xe2>
		else if(mode == 1)DIGITAL_IO_SetOutputHigh(&LED_CA_LEFT);
10006852:	1dbb      	adds	r3, r7, #6
10006854:	781b      	ldrb	r3, [r3, #0]
10006856:	2b01      	cmp	r3, #1
10006858:	d104      	bne.n	10006864 <set_CA_LED+0x84>
1000685a:	4b24      	ldr	r3, [pc, #144]	; (100068ec <set_CA_LED+0x10c>)
1000685c:	1c18      	adds	r0, r3, #0
1000685e:	f7ff fbfb 	bl	10006058 <DIGITAL_IO_SetOutputHigh>
10006862:	e02e      	b.n	100068c2 <set_CA_LED+0xe2>
		else if(mode == 2 && toggel_ervy_x == 0) DIGITAL_IO_ToggleOutput(&LED_CA_LEFT);
10006864:	1dbb      	adds	r3, r7, #6
10006866:	781b      	ldrb	r3, [r3, #0]
10006868:	2b02      	cmp	r3, #2
1000686a:	d12a      	bne.n	100068c2 <set_CA_LED+0xe2>
1000686c:	4b1e      	ldr	r3, [pc, #120]	; (100068e8 <set_CA_LED+0x108>)
1000686e:	781b      	ldrb	r3, [r3, #0]
10006870:	2b00      	cmp	r3, #0
10006872:	d126      	bne.n	100068c2 <set_CA_LED+0xe2>
10006874:	4b1d      	ldr	r3, [pc, #116]	; (100068ec <set_CA_LED+0x10c>)
10006876:	1c18      	adds	r0, r3, #0
10006878:	f7ff fc0e 	bl	10006098 <DIGITAL_IO_ToggleOutput>
1000687c:	e021      	b.n	100068c2 <set_CA_LED+0xe2>
	}
	else if (Sensor == 2){
1000687e:	1dfb      	adds	r3, r7, #7
10006880:	781b      	ldrb	r3, [r3, #0]
10006882:	2b02      	cmp	r3, #2
10006884:	d11d      	bne.n	100068c2 <set_CA_LED+0xe2>
		if(mode == 0)DIGITAL_IO_SetOutputLow(&LED_CA_RIGHT);
10006886:	1dbb      	adds	r3, r7, #6
10006888:	781b      	ldrb	r3, [r3, #0]
1000688a:	2b00      	cmp	r3, #0
1000688c:	d104      	bne.n	10006898 <set_CA_LED+0xb8>
1000688e:	4b18      	ldr	r3, [pc, #96]	; (100068f0 <set_CA_LED+0x110>)
10006890:	1c18      	adds	r0, r3, #0
10006892:	f7ff fbf1 	bl	10006078 <DIGITAL_IO_SetOutputLow>
10006896:	e014      	b.n	100068c2 <set_CA_LED+0xe2>
		else if(mode == 1)DIGITAL_IO_SetOutputHigh(&LED_CA_RIGHT);
10006898:	1dbb      	adds	r3, r7, #6
1000689a:	781b      	ldrb	r3, [r3, #0]
1000689c:	2b01      	cmp	r3, #1
1000689e:	d104      	bne.n	100068aa <set_CA_LED+0xca>
100068a0:	4b13      	ldr	r3, [pc, #76]	; (100068f0 <set_CA_LED+0x110>)
100068a2:	1c18      	adds	r0, r3, #0
100068a4:	f7ff fbd8 	bl	10006058 <DIGITAL_IO_SetOutputHigh>
100068a8:	e00b      	b.n	100068c2 <set_CA_LED+0xe2>
		else if(mode == 2 && toggel_ervy_x == 0) DIGITAL_IO_ToggleOutput(&LED_CA_RIGHT);
100068aa:	1dbb      	adds	r3, r7, #6
100068ac:	781b      	ldrb	r3, [r3, #0]
100068ae:	2b02      	cmp	r3, #2
100068b0:	d107      	bne.n	100068c2 <set_CA_LED+0xe2>
100068b2:	4b0d      	ldr	r3, [pc, #52]	; (100068e8 <set_CA_LED+0x108>)
100068b4:	781b      	ldrb	r3, [r3, #0]
100068b6:	2b00      	cmp	r3, #0
100068b8:	d103      	bne.n	100068c2 <set_CA_LED+0xe2>
100068ba:	4b0d      	ldr	r3, [pc, #52]	; (100068f0 <set_CA_LED+0x110>)
100068bc:	1c18      	adds	r0, r3, #0
100068be:	f7ff fbeb 	bl	10006098 <DIGITAL_IO_ToggleOutput>
	}

	toggel_ervy_x++;
100068c2:	4b09      	ldr	r3, [pc, #36]	; (100068e8 <set_CA_LED+0x108>)
100068c4:	781b      	ldrb	r3, [r3, #0]
100068c6:	3301      	adds	r3, #1
100068c8:	b2da      	uxtb	r2, r3
100068ca:	4b07      	ldr	r3, [pc, #28]	; (100068e8 <set_CA_LED+0x108>)
100068cc:	701a      	strb	r2, [r3, #0]
	if(toggel_ervy_x > 8) toggel_ervy_x = 0;
100068ce:	4b06      	ldr	r3, [pc, #24]	; (100068e8 <set_CA_LED+0x108>)
100068d0:	781b      	ldrb	r3, [r3, #0]
100068d2:	2b08      	cmp	r3, #8
100068d4:	d902      	bls.n	100068dc <set_CA_LED+0xfc>
100068d6:	4b04      	ldr	r3, [pc, #16]	; (100068e8 <set_CA_LED+0x108>)
100068d8:	2200      	movs	r2, #0
100068da:	701a      	strb	r2, [r3, #0]
}
100068dc:	46bd      	mov	sp, r7
100068de:	b002      	add	sp, #8
100068e0:	bd80      	pop	{r7, pc}
100068e2:	46c0      	nop			; (mov r8, r8)
100068e4:	1000cf3c 	.word	0x1000cf3c
100068e8:	20000ae9 	.word	0x20000ae9
100068ec:	1000cf4c 	.word	0x1000cf4c
100068f0:	1000cf5c 	.word	0x1000cf5c

100068f4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100068f4:	b580      	push	{r7, lr}
100068f6:	b082      	sub	sp, #8
100068f8:	af00      	add	r7, sp, #0
100068fa:	6078      	str	r0, [r7, #4]
100068fc:	1c0a      	adds	r2, r1, #0
100068fe:	1cfb      	adds	r3, r7, #3
10006900:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10006902:	1cfb      	adds	r3, r7, #3
10006904:	781b      	ldrb	r3, [r3, #0]
10006906:	2201      	movs	r2, #1
10006908:	409a      	lsls	r2, r3
1000690a:	687b      	ldr	r3, [r7, #4]
1000690c:	605a      	str	r2, [r3, #4]
}
1000690e:	46bd      	mov	sp, r7
10006910:	b002      	add	sp, #8
10006912:	bd80      	pop	{r7, pc}

10006914 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10006914:	b580      	push	{r7, lr}
10006916:	b082      	sub	sp, #8
10006918:	af00      	add	r7, sp, #0
1000691a:	6078      	str	r0, [r7, #4]
1000691c:	1c0a      	adds	r2, r1, #0
1000691e:	1cfb      	adds	r3, r7, #3
10006920:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10006922:	1cfb      	adds	r3, r7, #3
10006924:	781b      	ldrb	r3, [r3, #0]
10006926:	2280      	movs	r2, #128	; 0x80
10006928:	0252      	lsls	r2, r2, #9
1000692a:	409a      	lsls	r2, r3
1000692c:	687b      	ldr	r3, [r7, #4]
1000692e:	605a      	str	r2, [r3, #4]
}
10006930:	46bd      	mov	sp, r7
10006932:	b002      	add	sp, #8
10006934:	bd80      	pop	{r7, pc}
10006936:	46c0      	nop			; (mov r8, r8)

10006938 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10006938:	b580      	push	{r7, lr}
1000693a:	b082      	sub	sp, #8
1000693c:	af00      	add	r7, sp, #0
1000693e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10006940:	687b      	ldr	r3, [r7, #4]
10006942:	681a      	ldr	r2, [r3, #0]
10006944:	687b      	ldr	r3, [r7, #4]
10006946:	7b1b      	ldrb	r3, [r3, #12]
10006948:	1c10      	adds	r0, r2, #0
1000694a:	1c19      	adds	r1, r3, #0
1000694c:	f7ff ffd2 	bl	100068f4 <XMC_GPIO_SetOutputHigh>
}
10006950:	46bd      	mov	sp, r7
10006952:	b002      	add	sp, #8
10006954:	bd80      	pop	{r7, pc}
10006956:	46c0      	nop			; (mov r8, r8)

10006958 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10006958:	b580      	push	{r7, lr}
1000695a:	b082      	sub	sp, #8
1000695c:	af00      	add	r7, sp, #0
1000695e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10006960:	687b      	ldr	r3, [r7, #4]
10006962:	681a      	ldr	r2, [r3, #0]
10006964:	687b      	ldr	r3, [r7, #4]
10006966:	7b1b      	ldrb	r3, [r3, #12]
10006968:	1c10      	adds	r0, r2, #0
1000696a:	1c19      	adds	r1, r3, #0
1000696c:	f7ff ffd2 	bl	10006914 <XMC_GPIO_SetOutputLow>
}
10006970:	46bd      	mov	sp, r7
10006972:	b002      	add	sp, #8
10006974:	bd80      	pop	{r7, pc}
10006976:	46c0      	nop			; (mov r8, r8)

10006978 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
10006978:	b580      	push	{r7, lr}
1000697a:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
1000697c:	4b03      	ldr	r3, [pc, #12]	; (1000698c <XMC_WDT_Start+0x14>)
1000697e:	4a03      	ldr	r2, [pc, #12]	; (1000698c <XMC_WDT_Start+0x14>)
10006980:	6852      	ldr	r2, [r2, #4]
10006982:	2101      	movs	r1, #1
10006984:	430a      	orrs	r2, r1
10006986:	605a      	str	r2, [r3, #4]
}
10006988:	46bd      	mov	sp, r7
1000698a:	bd80      	pop	{r7, pc}
1000698c:	40020000 	.word	0x40020000

10006990 <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
10006990:	b580      	push	{r7, lr}
10006992:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
10006994:	4b02      	ldr	r3, [pc, #8]	; (100069a0 <XMC_WDT_ClearAlarm+0x10>)
10006996:	2201      	movs	r2, #1
10006998:	61da      	str	r2, [r3, #28]
}
1000699a:	46bd      	mov	sp, r7
1000699c:	bd80      	pop	{r7, pc}
1000699e:	46c0      	nop			; (mov r8, r8)
100069a0:	40020000 	.word	0x40020000

100069a4 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
100069a4:	b580      	push	{r7, lr}
100069a6:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
100069a8:	f7ff ffe6 	bl	10006978 <XMC_WDT_Start>
}
100069ac:	46bd      	mov	sp, r7
100069ae:	bd80      	pop	{r7, pc}

100069b0 <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
100069b0:	b580      	push	{r7, lr}
100069b2:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
100069b4:	f7ff ffec 	bl	10006990 <XMC_WDT_ClearAlarm>
}
100069b8:	46bd      	mov	sp, r7
100069ba:	bd80      	pop	{r7, pc}

100069bc <main>:

uint8_t test = 0;
uint8_t start_no_speed_counter = 20;

int main(void)
{
100069bc:	b590      	push	{r4, r7, lr}
100069be:	b083      	sub	sp, #12
100069c0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
100069c2:	1dfc      	adds	r4, r7, #7
100069c4:	f7fd fad4 	bl	10003f70 <DAVE_Init>
100069c8:	1c03      	adds	r3, r0, #0
100069ca:	7023      	strb	r3, [r4, #0]

  if (status != DAVE_STATUS_SUCCESS)
100069cc:	1dfb      	adds	r3, r7, #7
100069ce:	781b      	ldrb	r3, [r3, #0]
100069d0:	2b00      	cmp	r3, #0
100069d2:	d000      	beq.n	100069d6 <main+0x1a>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
100069d4:	e7fe      	b.n	100069d4 <main+0x18>
  }

  //Initialization of CAN
  	//CAN_NODE_STATUS_t init_status;
  	init_status = CAN_NODE_Init(&CAN_NODE_0);
100069d6:	4b09      	ldr	r3, [pc, #36]	; (100069fc <main+0x40>)
100069d8:	1c18      	adds	r0, r3, #0
100069da:	f7fd fa1d 	bl	10003e18 <CAN_NODE_Init>
100069de:	1c03      	adds	r3, r0, #0
100069e0:	1c1a      	adds	r2, r3, #0
100069e2:	4b07      	ldr	r3, [pc, #28]	; (10006a00 <main+0x44>)
100069e4:	701a      	strb	r2, [r3, #0]

  	if (init_status != CAN_NODE_STATUS_SUCCESS) {
100069e6:	4b06      	ldr	r3, [pc, #24]	; (10006a00 <main+0x44>)
100069e8:	781b      	ldrb	r3, [r3, #0]
100069ea:	2b00      	cmp	r3, #0
100069ec:	d102      	bne.n	100069f4 <main+0x38>
  		XMC_DEBUG("CAN initialization failed\n");
  	}
  	else{
  		CAN_OK = 1;
100069ee:	4b05      	ldr	r3, [pc, #20]	; (10006a04 <main+0x48>)
100069f0:	2201      	movs	r2, #1
100069f2:	601a      	str	r2, [r3, #0]
  	}

  	WATCHDOG_Start(); // watchdog restart if CAN not working
100069f4:	f7ff ffd6 	bl	100069a4 <WATCHDOG_Start>
  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	 // Servo_NP_setting();	  // nutral point servo setting

  }
100069f8:	e7fe      	b.n	100069f8 <main+0x3c>
100069fa:	46c0      	nop			; (mov r8, r8)
100069fc:	1000d040 	.word	0x1000d040
10006a00:	20000b2c 	.word	0x20000b2c
10006a04:	20000aec 	.word	0x20000aec

10006a08 <Watchdog_Handler>:
}

void Watchdog_Handler(void) // to do restates if can is not working a problem wenn power from the buck or plab supplie but ok like this
{
10006a08:	b580      	push	{r7, lr}
10006a0a:	af00      	add	r7, sp, #0
  WATCHDOG_ClearAlarm(); /* Clear the alarm event */
10006a0c:	f7ff ffd0 	bl	100069b0 <WATCHDOG_ClearAlarm>
  DIGITAL_IO_SetOutputHigh(&WATCHDOG_LED_BLUE);
10006a10:	4b02      	ldr	r3, [pc, #8]	; (10006a1c <Watchdog_Handler+0x14>)
10006a12:	1c18      	adds	r0, r3, #0
10006a14:	f7ff ff90 	bl	10006938 <DIGITAL_IO_SetOutputHigh>
}
10006a18:	46bd      	mov	sp, r7
10006a1a:	bd80      	pop	{r7, pc}
10006a1c:	1000cf1c 	.word	0x1000cf1c

10006a20 <IRQ7_Handler>:


void TIMER_CONTROL_ISR(void){
10006a20:	b580      	push	{r7, lr}
10006a22:	b082      	sub	sp, #8
10006a24:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&CALC_TIME_INDICATOR);
10006a26:	4b48      	ldr	r3, [pc, #288]	; (10006b48 <IRQ7_Handler+0x128>)
10006a28:	1c18      	adds	r0, r3, #0
10006a2a:	f7ff ff85 	bl	10006938 <DIGITAL_IO_SetOutputHigh>
	mode_led(Steering_mode);
10006a2e:	4b47      	ldr	r3, [pc, #284]	; (10006b4c <IRQ7_Handler+0x12c>)
10006a30:	781b      	ldrb	r3, [r3, #0]
10006a32:	b2db      	uxtb	r3, r3
10006a34:	1c18      	adds	r0, r3, #0
10006a36:	f7fe ff99 	bl	1000596c <mode_led>

	if(RC_controll == 1){
10006a3a:	4b45      	ldr	r3, [pc, #276]	; (10006b50 <IRQ7_Handler+0x130>)
10006a3c:	781b      	ldrb	r3, [r3, #0]
10006a3e:	b2db      	uxtb	r3, r3
10006a40:	2b01      	cmp	r3, #1
10006a42:	d107      	bne.n	10006a54 <IRQ7_Handler+0x34>
		if( NO_New_Input_counter > 9){
10006a44:	4b43      	ldr	r3, [pc, #268]	; (10006b54 <IRQ7_Handler+0x134>)
10006a46:	681b      	ldr	r3, [r3, #0]
10006a48:	2b09      	cmp	r3, #9
10006a4a:	d903      	bls.n	10006a54 <IRQ7_Handler+0x34>
			DIGITAL_IO_SetOutputLow(&RC_no_data_LED);
10006a4c:	4b42      	ldr	r3, [pc, #264]	; (10006b58 <IRQ7_Handler+0x138>)
10006a4e:	1c18      	adds	r0, r3, #0
10006a50:	f7ff ff82 	bl	10006958 <DIGITAL_IO_SetOutputLow>
		}
	}


	if(New_Input == 1){
10006a54:	4b41      	ldr	r3, [pc, #260]	; (10006b5c <IRQ7_Handler+0x13c>)
10006a56:	781b      	ldrb	r3, [r3, #0]
10006a58:	b2db      	uxtb	r3, r3
10006a5a:	2b01      	cmp	r3, #1
10006a5c:	d113      	bne.n	10006a86 <IRQ7_Handler+0x66>
	Steering_Function(Steering_direction, Driving_speed, Steering_mode);
10006a5e:	4b40      	ldr	r3, [pc, #256]	; (10006b60 <IRQ7_Handler+0x140>)
10006a60:	6819      	ldr	r1, [r3, #0]
10006a62:	4b40      	ldr	r3, [pc, #256]	; (10006b64 <IRQ7_Handler+0x144>)
10006a64:	681a      	ldr	r2, [r3, #0]
10006a66:	4b39      	ldr	r3, [pc, #228]	; (10006b4c <IRQ7_Handler+0x12c>)
10006a68:	781b      	ldrb	r3, [r3, #0]
10006a6a:	b2db      	uxtb	r3, r3
10006a6c:	1c08      	adds	r0, r1, #0
10006a6e:	1c11      	adds	r1, r2, #0
10006a70:	1c1a      	adds	r2, r3, #0
10006a72:	f7fd feeb 	bl	1000484c <Steering_Function>
	if(NO_New_Input_counter > 0) NO_New_Input_counter = 0;
10006a76:	4b37      	ldr	r3, [pc, #220]	; (10006b54 <IRQ7_Handler+0x134>)
10006a78:	681b      	ldr	r3, [r3, #0]
10006a7a:	2b00      	cmp	r3, #0
10006a7c:	d030      	beq.n	10006ae0 <IRQ7_Handler+0xc0>
10006a7e:	4b35      	ldr	r3, [pc, #212]	; (10006b54 <IRQ7_Handler+0x134>)
10006a80:	2200      	movs	r2, #0
10006a82:	601a      	str	r2, [r3, #0]
10006a84:	e02c      	b.n	10006ae0 <IRQ7_Handler+0xc0>

	}
	else{
		NO_New_Input_counter ++;
10006a86:	4b33      	ldr	r3, [pc, #204]	; (10006b54 <IRQ7_Handler+0x134>)
10006a88:	681b      	ldr	r3, [r3, #0]
10006a8a:	1c5a      	adds	r2, r3, #1
10006a8c:	4b31      	ldr	r3, [pc, #196]	; (10006b54 <IRQ7_Handler+0x134>)
10006a8e:	601a      	str	r2, [r3, #0]
		if( NO_New_Input_counter > 20 || RC_Speed_Stop_counter > RC_SPEED_SAFTY_FT || start_no_speed_counter > 0){
10006a90:	4b30      	ldr	r3, [pc, #192]	; (10006b54 <IRQ7_Handler+0x134>)
10006a92:	681b      	ldr	r3, [r3, #0]
10006a94:	2b14      	cmp	r3, #20
10006a96:	d808      	bhi.n	10006aaa <IRQ7_Handler+0x8a>
10006a98:	4b33      	ldr	r3, [pc, #204]	; (10006b68 <IRQ7_Handler+0x148>)
10006a9a:	781b      	ldrb	r3, [r3, #0]
10006a9c:	b2db      	uxtb	r3, r3
10006a9e:	2b0a      	cmp	r3, #10
10006aa0:	d803      	bhi.n	10006aaa <IRQ7_Handler+0x8a>
10006aa2:	4b32      	ldr	r3, [pc, #200]	; (10006b6c <IRQ7_Handler+0x14c>)
10006aa4:	781b      	ldrb	r3, [r3, #0]
10006aa6:	2b00      	cmp	r3, #0
10006aa8:	d01a      	beq.n	10006ae0 <IRQ7_Handler+0xc0>
			NO_New_Input_counter = 20;
10006aaa:	4b2a      	ldr	r3, [pc, #168]	; (10006b54 <IRQ7_Handler+0x134>)
10006aac:	2214      	movs	r2, #20
10006aae:	601a      	str	r2, [r3, #0]

			  Steering_Angles[0] = 0;
10006ab0:	4b2f      	ldr	r3, [pc, #188]	; (10006b70 <IRQ7_Handler+0x150>)
10006ab2:	2200      	movs	r2, #0
10006ab4:	601a      	str	r2, [r3, #0]
			  Steering_Angles[1] = 0;
10006ab6:	4b2e      	ldr	r3, [pc, #184]	; (10006b70 <IRQ7_Handler+0x150>)
10006ab8:	2200      	movs	r2, #0
10006aba:	605a      	str	r2, [r3, #4]
			  Steering_Angles[2] = 0;
10006abc:	4b2c      	ldr	r3, [pc, #176]	; (10006b70 <IRQ7_Handler+0x150>)
10006abe:	2200      	movs	r2, #0
10006ac0:	609a      	str	r2, [r3, #8]
			  Steering_Angles[3] = 0;
10006ac2:	4b2b      	ldr	r3, [pc, #172]	; (10006b70 <IRQ7_Handler+0x150>)
10006ac4:	2200      	movs	r2, #0
10006ac6:	60da      	str	r2, [r3, #12]

			  Speeds[0] = 0;
10006ac8:	4b2a      	ldr	r3, [pc, #168]	; (10006b74 <IRQ7_Handler+0x154>)
10006aca:	2200      	movs	r2, #0
10006acc:	601a      	str	r2, [r3, #0]
			  Speeds[1] = 0;
10006ace:	4b29      	ldr	r3, [pc, #164]	; (10006b74 <IRQ7_Handler+0x154>)
10006ad0:	2200      	movs	r2, #0
10006ad2:	605a      	str	r2, [r3, #4]
			  Speeds[2] = 0;
10006ad4:	4b27      	ldr	r3, [pc, #156]	; (10006b74 <IRQ7_Handler+0x154>)
10006ad6:	2200      	movs	r2, #0
10006ad8:	609a      	str	r2, [r3, #8]
			  Speeds[3] = 0;
10006ada:	4b26      	ldr	r3, [pc, #152]	; (10006b74 <IRQ7_Handler+0x154>)
10006adc:	2200      	movs	r2, #0
10006ade:	60da      	str	r2, [r3, #12]
		}
	}

	//set Angles PWM
	Steering_set_Angles(Steering_Angles);
10006ae0:	4b23      	ldr	r3, [pc, #140]	; (10006b70 <IRQ7_Handler+0x150>)
10006ae2:	1c18      	adds	r0, r3, #0
10006ae4:	f7ff f9ce 	bl	10005e84 <Steering_set_Angles>

	Trajcetory_calc();
10006ae8:	f7fe fe88 	bl	100057fc <Trajcetory_calc>

	Collision_voidance();
10006aec:	f7ff fce8 	bl	100064c0 <Collision_voidance>

	//send traget speeds to inverter
	CAN_send_Speeds(Speeds); // change to Speeds_CA to activate CA
10006af0:	4b20      	ldr	r3, [pc, #128]	; (10006b74 <IRQ7_Handler+0x154>)
10006af2:	1c18      	adds	r0, r3, #0
10006af4:	f7fd fc32 	bl	1000435c <CAN_send_Speeds>

	//
	if(reset_distance == 1){
10006af8:	4b1f      	ldr	r3, [pc, #124]	; (10006b78 <IRQ7_Handler+0x158>)
10006afa:	781b      	ldrb	r3, [r3, #0]
10006afc:	b2db      	uxtb	r3, r3
10006afe:	2b01      	cmp	r3, #1
10006b00:	d110      	bne.n	10006b24 <IRQ7_Handler+0x104>
		reset_distance = 0;
10006b02:	4b1d      	ldr	r3, [pc, #116]	; (10006b78 <IRQ7_Handler+0x158>)
10006b04:	2200      	movs	r2, #0
10006b06:	701a      	strb	r2, [r3, #0]
		uint8_t all[4] = {1,1,1,1};
10006b08:	1d3a      	adds	r2, r7, #4
10006b0a:	4b1c      	ldr	r3, [pc, #112]	; (10006b7c <IRQ7_Handler+0x15c>)
10006b0c:	1c11      	adds	r1, r2, #0
10006b0e:	1c1a      	adds	r2, r3, #0
10006b10:	2304      	movs	r3, #4
10006b12:	1c08      	adds	r0, r1, #0
10006b14:	1c11      	adds	r1, r2, #0
10006b16:	1c1a      	adds	r2, r3, #0
10006b18:	f006 f962 	bl	1000cde0 <memcpy>
		CAN_reset_distance(all);
10006b1c:	1d3b      	adds	r3, r7, #4
10006b1e:	1c18      	adds	r0, r3, #0
10006b20:	f7fd fbe2 	bl	100042e8 <CAN_reset_distance>
	}

	if(start_no_speed_counter > 0) start_no_speed_counter--;
10006b24:	4b11      	ldr	r3, [pc, #68]	; (10006b6c <IRQ7_Handler+0x14c>)
10006b26:	781b      	ldrb	r3, [r3, #0]
10006b28:	2b00      	cmp	r3, #0
10006b2a:	d005      	beq.n	10006b38 <IRQ7_Handler+0x118>
10006b2c:	4b0f      	ldr	r3, [pc, #60]	; (10006b6c <IRQ7_Handler+0x14c>)
10006b2e:	781b      	ldrb	r3, [r3, #0]
10006b30:	3b01      	subs	r3, #1
10006b32:	b2da      	uxtb	r2, r3
10006b34:	4b0d      	ldr	r3, [pc, #52]	; (10006b6c <IRQ7_Handler+0x14c>)
10006b36:	701a      	strb	r2, [r3, #0]
	DIGITAL_IO_SetOutputLow(&CALC_TIME_INDICATOR);
10006b38:	4b03      	ldr	r3, [pc, #12]	; (10006b48 <IRQ7_Handler+0x128>)
10006b3a:	1c18      	adds	r0, r3, #0
10006b3c:	f7ff ff0c 	bl	10006958 <DIGITAL_IO_SetOutputLow>
}
10006b40:	46bd      	mov	sp, r7
10006b42:	b002      	add	sp, #8
10006b44:	bd80      	pop	{r7, pc}
10006b46:	46c0      	nop			; (mov r8, r8)
10006b48:	1000cedc 	.word	0x1000cedc
10006b4c:	2000082a 	.word	0x2000082a
10006b50:	20000829 	.word	0x20000829
10006b54:	20000a90 	.word	0x20000a90
10006b58:	1000cecc 	.word	0x1000cecc
10006b5c:	20000a8c 	.word	0x20000a8c
10006b60:	20000a34 	.word	0x20000a34
10006b64:	20000a38 	.word	0x20000a38
10006b68:	2000083d 	.word	0x2000083d
10006b6c:	20000864 	.word	0x20000864
10006b70:	20000a5c 	.word	0x20000a5c
10006b74:	20000a3c 	.word	0x20000a3c
10006b78:	20000a94 	.word	0x20000a94
10006b7c:	1000d118 	.word	0x1000d118

10006b80 <within_MAX_MIN>:

/**
 * This is the function definition.
 * It is the actual body of the function which was declared elsewhere.
 */
bool within_MAX_MIN(float num, float max, float min){
10006b80:	b590      	push	{r4, r7, lr}
10006b82:	b085      	sub	sp, #20
10006b84:	af00      	add	r7, sp, #0
10006b86:	60f8      	str	r0, [r7, #12]
10006b88:	60b9      	str	r1, [r7, #8]
10006b8a:	607a      	str	r2, [r7, #4]
	if((num-min)*(num-max) <= 0) return 1;
10006b8c:	68f8      	ldr	r0, [r7, #12]
10006b8e:	6879      	ldr	r1, [r7, #4]
10006b90:	f003 fe60 	bl	1000a854 <__aeabi_fsub>
10006b94:	1c03      	adds	r3, r0, #0
10006b96:	1c1c      	adds	r4, r3, #0
10006b98:	68f8      	ldr	r0, [r7, #12]
10006b9a:	68b9      	ldr	r1, [r7, #8]
10006b9c:	f003 fe5a 	bl	1000a854 <__aeabi_fsub>
10006ba0:	1c03      	adds	r3, r0, #0
10006ba2:	1c20      	adds	r0, r4, #0
10006ba4:	1c19      	adds	r1, r3, #0
10006ba6:	f003 fd23 	bl	1000a5f0 <__aeabi_fmul>
10006baa:	1c03      	adds	r3, r0, #0
10006bac:	1c18      	adds	r0, r3, #0
10006bae:	2100      	movs	r1, #0
10006bb0:	f003 f8dc 	bl	10009d6c <__aeabi_fcmple>
10006bb4:	1e03      	subs	r3, r0, #0
10006bb6:	d001      	beq.n	10006bbc <within_MAX_MIN+0x3c>
10006bb8:	2301      	movs	r3, #1
10006bba:	e000      	b.n	10006bbe <within_MAX_MIN+0x3e>
	else return 0;
10006bbc:	2300      	movs	r3, #0
}
10006bbe:	1c18      	adds	r0, r3, #0
10006bc0:	46bd      	mov	sp, r7
10006bc2:	b005      	add	sp, #20
10006bc4:	bd90      	pop	{r4, r7, pc}
10006bc6:	46c0      	nop			; (mov r8, r8)

10006bc8 <vector_abs_value>:

float pythagoras(float a, float b){
	return sqrt(pow(a,2) + pow(b,2));
}

float vector_abs_value(float a[2]){
10006bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10006bca:	b083      	sub	sp, #12
10006bcc:	af00      	add	r7, sp, #0
10006bce:	6078      	str	r0, [r7, #4]
	return sqrt(pow(a[0],2) + pow(a[1],2));
10006bd0:	687b      	ldr	r3, [r7, #4]
10006bd2:	681b      	ldr	r3, [r3, #0]
10006bd4:	1c18      	adds	r0, r3, #0
10006bd6:	f005 fe41 	bl	1000c85c <__aeabi_f2d>
10006bda:	1c0a      	adds	r2, r1, #0
10006bdc:	1c01      	adds	r1, r0, #0
10006bde:	2300      	movs	r3, #0
10006be0:	2480      	movs	r4, #128	; 0x80
10006be2:	05e4      	lsls	r4, r4, #23
10006be4:	1c08      	adds	r0, r1, #0
10006be6:	1c11      	adds	r1, r2, #0
10006be8:	1c1a      	adds	r2, r3, #0
10006bea:	1c23      	adds	r3, r4, #0
10006bec:	f000 fb4a 	bl	10007284 <pow>
10006bf0:	1c05      	adds	r5, r0, #0
10006bf2:	1c0e      	adds	r6, r1, #0
10006bf4:	687b      	ldr	r3, [r7, #4]
10006bf6:	3304      	adds	r3, #4
10006bf8:	681b      	ldr	r3, [r3, #0]
10006bfa:	1c18      	adds	r0, r3, #0
10006bfc:	f005 fe2e 	bl	1000c85c <__aeabi_f2d>
10006c00:	1c0a      	adds	r2, r1, #0
10006c02:	1c01      	adds	r1, r0, #0
10006c04:	2300      	movs	r3, #0
10006c06:	2480      	movs	r4, #128	; 0x80
10006c08:	05e4      	lsls	r4, r4, #23
10006c0a:	1c08      	adds	r0, r1, #0
10006c0c:	1c11      	adds	r1, r2, #0
10006c0e:	1c1a      	adds	r2, r3, #0
10006c10:	1c23      	adds	r3, r4, #0
10006c12:	f000 fb37 	bl	10007284 <pow>
10006c16:	1c03      	adds	r3, r0, #0
10006c18:	1c0c      	adds	r4, r1, #0
10006c1a:	1c28      	adds	r0, r5, #0
10006c1c:	1c31      	adds	r1, r6, #0
10006c1e:	1c1a      	adds	r2, r3, #0
10006c20:	1c23      	adds	r3, r4, #0
10006c22:	f003 fffd 	bl	1000ac20 <__aeabi_dadd>
10006c26:	1c03      	adds	r3, r0, #0
10006c28:	1c0c      	adds	r4, r1, #0
10006c2a:	1c18      	adds	r0, r3, #0
10006c2c:	1c21      	adds	r1, r4, #0
10006c2e:	f000 fcd7 	bl	100075e0 <sqrt>
10006c32:	1c03      	adds	r3, r0, #0
10006c34:	1c0c      	adds	r4, r1, #0
10006c36:	1c18      	adds	r0, r3, #0
10006c38:	1c21      	adds	r1, r4, #0
10006c3a:	f005 fe63 	bl	1000c904 <__aeabi_d2f>
10006c3e:	1c03      	adds	r3, r0, #0
}
10006c40:	1c18      	adds	r0, r3, #0
10006c42:	46bd      	mov	sp, r7
10006c44:	b003      	add	sp, #12
10006c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

10006c48 <Exp_moving_average>:

float Exp_moving_average(float new_value, float value, float ALPHA){
10006c48:	b590      	push	{r4, r7, lr}
10006c4a:	b085      	sub	sp, #20
10006c4c:	af00      	add	r7, sp, #0
10006c4e:	60f8      	str	r0, [r7, #12]
10006c50:	60b9      	str	r1, [r7, #8]
10006c52:	607a      	str	r2, [r7, #4]
	return ((new_value * ALPHA) + ((1 - ALPHA) * value));
10006c54:	68f8      	ldr	r0, [r7, #12]
10006c56:	6879      	ldr	r1, [r7, #4]
10006c58:	f003 fcca 	bl	1000a5f0 <__aeabi_fmul>
10006c5c:	1c03      	adds	r3, r0, #0
10006c5e:	1c1c      	adds	r4, r3, #0
10006c60:	20fe      	movs	r0, #254	; 0xfe
10006c62:	0580      	lsls	r0, r0, #22
10006c64:	6879      	ldr	r1, [r7, #4]
10006c66:	f003 fdf5 	bl	1000a854 <__aeabi_fsub>
10006c6a:	1c03      	adds	r3, r0, #0
10006c6c:	1c18      	adds	r0, r3, #0
10006c6e:	68b9      	ldr	r1, [r7, #8]
10006c70:	f003 fcbe 	bl	1000a5f0 <__aeabi_fmul>
10006c74:	1c03      	adds	r3, r0, #0
10006c76:	1c20      	adds	r0, r4, #0
10006c78:	1c19      	adds	r1, r3, #0
10006c7a:	f003 f94b 	bl	10009f14 <__aeabi_fadd>
10006c7e:	1c03      	adds	r3, r0, #0
}
10006c80:	1c18      	adds	r0, r3, #0
10006c82:	46bd      	mov	sp, r7
10006c84:	b005      	add	sp, #20
10006c86:	bd90      	pop	{r4, r7, pc}

10006c88 <average>:

float average(float a[],int num_values) {
10006c88:	b580      	push	{r7, lr}
10006c8a:	b084      	sub	sp, #16
10006c8c:	af00      	add	r7, sp, #0
10006c8e:	6078      	str	r0, [r7, #4]
10006c90:	6039      	str	r1, [r7, #0]
    float sum = 0;
10006c92:	2300      	movs	r3, #0
10006c94:	60fb      	str	r3, [r7, #12]
    int i;
    for(i = 0; i < num_values; i++){
10006c96:	2300      	movs	r3, #0
10006c98:	60bb      	str	r3, [r7, #8]
10006c9a:	e00d      	b.n	10006cb8 <average+0x30>
        sum += a[i];
10006c9c:	68bb      	ldr	r3, [r7, #8]
10006c9e:	009b      	lsls	r3, r3, #2
10006ca0:	687a      	ldr	r2, [r7, #4]
10006ca2:	18d3      	adds	r3, r2, r3
10006ca4:	681b      	ldr	r3, [r3, #0]
10006ca6:	68f8      	ldr	r0, [r7, #12]
10006ca8:	1c19      	adds	r1, r3, #0
10006caa:	f003 f933 	bl	10009f14 <__aeabi_fadd>
10006cae:	1c03      	adds	r3, r0, #0
10006cb0:	60fb      	str	r3, [r7, #12]
}

float average(float a[],int num_values) {
    float sum = 0;
    int i;
    for(i = 0; i < num_values; i++){
10006cb2:	68bb      	ldr	r3, [r7, #8]
10006cb4:	3301      	adds	r3, #1
10006cb6:	60bb      	str	r3, [r7, #8]
10006cb8:	68ba      	ldr	r2, [r7, #8]
10006cba:	683b      	ldr	r3, [r7, #0]
10006cbc:	429a      	cmp	r2, r3
10006cbe:	dbed      	blt.n	10006c9c <average+0x14>
        sum += a[i];
    }
    return sum / num_values;
10006cc0:	6838      	ldr	r0, [r7, #0]
10006cc2:	f003 ff65 	bl	1000ab90 <__aeabi_i2f>
10006cc6:	1c03      	adds	r3, r0, #0
10006cc8:	68f8      	ldr	r0, [r7, #12]
10006cca:	1c19      	adds	r1, r3, #0
10006ccc:	f003 fa9e 	bl	1000a20c <__aeabi_fdiv>
10006cd0:	1c03      	adds	r3, r0, #0
}
10006cd2:	1c18      	adds	r0, r3, #0
10006cd4:	46bd      	mov	sp, r7
10006cd6:	b004      	add	sp, #16
10006cd8:	bd80      	pop	{r7, pc}
10006cda:	46c0      	nop			; (mov r8, r8)

10006cdc <vector_projection_abs>:


float vector_projection_abs(float a[2], float b[2]){
10006cdc:	b590      	push	{r4, r7, lr}
10006cde:	b087      	sub	sp, #28
10006ce0:	af00      	add	r7, sp, #0
10006ce2:	6078      	str	r0, [r7, #4]
10006ce4:	6039      	str	r1, [r7, #0]
	float factor = dot_product(a,b) / dot_product(b,b);
10006ce6:	687a      	ldr	r2, [r7, #4]
10006ce8:	683b      	ldr	r3, [r7, #0]
10006cea:	1c10      	adds	r0, r2, #0
10006cec:	1c19      	adds	r1, r3, #0
10006cee:	f000 f82f 	bl	10006d50 <dot_product>
10006cf2:	1c04      	adds	r4, r0, #0
10006cf4:	683a      	ldr	r2, [r7, #0]
10006cf6:	683b      	ldr	r3, [r7, #0]
10006cf8:	1c10      	adds	r0, r2, #0
10006cfa:	1c19      	adds	r1, r3, #0
10006cfc:	f000 f828 	bl	10006d50 <dot_product>
10006d00:	1c03      	adds	r3, r0, #0
10006d02:	1c20      	adds	r0, r4, #0
10006d04:	1c19      	adds	r1, r3, #0
10006d06:	f003 fa81 	bl	1000a20c <__aeabi_fdiv>
10006d0a:	1c03      	adds	r3, r0, #0
10006d0c:	617b      	str	r3, [r7, #20]
	float a1[2] = {factor * b[0], factor * b[0]};
10006d0e:	683b      	ldr	r3, [r7, #0]
10006d10:	681b      	ldr	r3, [r3, #0]
10006d12:	1c18      	adds	r0, r3, #0
10006d14:	6979      	ldr	r1, [r7, #20]
10006d16:	f003 fc6b 	bl	1000a5f0 <__aeabi_fmul>
10006d1a:	1c03      	adds	r3, r0, #0
10006d1c:	1c1a      	adds	r2, r3, #0
10006d1e:	230c      	movs	r3, #12
10006d20:	18fb      	adds	r3, r7, r3
10006d22:	601a      	str	r2, [r3, #0]
10006d24:	683b      	ldr	r3, [r7, #0]
10006d26:	681b      	ldr	r3, [r3, #0]
10006d28:	1c18      	adds	r0, r3, #0
10006d2a:	6979      	ldr	r1, [r7, #20]
10006d2c:	f003 fc60 	bl	1000a5f0 <__aeabi_fmul>
10006d30:	1c03      	adds	r3, r0, #0
10006d32:	1c1a      	adds	r2, r3, #0
10006d34:	230c      	movs	r3, #12
10006d36:	18fb      	adds	r3, r7, r3
10006d38:	605a      	str	r2, [r3, #4]
	return vector_abs_value(a1);
10006d3a:	230c      	movs	r3, #12
10006d3c:	18fb      	adds	r3, r7, r3
10006d3e:	1c18      	adds	r0, r3, #0
10006d40:	f7ff ff42 	bl	10006bc8 <vector_abs_value>
10006d44:	1c03      	adds	r3, r0, #0
}
10006d46:	1c18      	adds	r0, r3, #0
10006d48:	46bd      	mov	sp, r7
10006d4a:	b007      	add	sp, #28
10006d4c:	bd90      	pop	{r4, r7, pc}
10006d4e:	46c0      	nop			; (mov r8, r8)

10006d50 <dot_product>:

float dot_product(float v[2], float u[2]){
10006d50:	b580      	push	{r7, lr}
10006d52:	b084      	sub	sp, #16
10006d54:	af00      	add	r7, sp, #0
10006d56:	6078      	str	r0, [r7, #4]
10006d58:	6039      	str	r1, [r7, #0]
	float result = 0.0;
10006d5a:	2300      	movs	r3, #0
10006d5c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 2; i++)
10006d5e:	2300      	movs	r3, #0
10006d60:	60bb      	str	r3, [r7, #8]
10006d62:	e017      	b.n	10006d94 <dot_product+0x44>
        result += v[i]*u[i];
10006d64:	68bb      	ldr	r3, [r7, #8]
10006d66:	009b      	lsls	r3, r3, #2
10006d68:	687a      	ldr	r2, [r7, #4]
10006d6a:	18d3      	adds	r3, r2, r3
10006d6c:	6819      	ldr	r1, [r3, #0]
10006d6e:	68bb      	ldr	r3, [r7, #8]
10006d70:	009b      	lsls	r3, r3, #2
10006d72:	683a      	ldr	r2, [r7, #0]
10006d74:	18d3      	adds	r3, r2, r3
10006d76:	681b      	ldr	r3, [r3, #0]
10006d78:	1c08      	adds	r0, r1, #0
10006d7a:	1c19      	adds	r1, r3, #0
10006d7c:	f003 fc38 	bl	1000a5f0 <__aeabi_fmul>
10006d80:	1c03      	adds	r3, r0, #0
10006d82:	68f8      	ldr	r0, [r7, #12]
10006d84:	1c19      	adds	r1, r3, #0
10006d86:	f003 f8c5 	bl	10009f14 <__aeabi_fadd>
10006d8a:	1c03      	adds	r3, r0, #0
10006d8c:	60fb      	str	r3, [r7, #12]
	return vector_abs_value(a1);
}

float dot_product(float v[2], float u[2]){
	float result = 0.0;
    for (int i = 0; i < 2; i++)
10006d8e:	68bb      	ldr	r3, [r7, #8]
10006d90:	3301      	adds	r3, #1
10006d92:	60bb      	str	r3, [r7, #8]
10006d94:	68bb      	ldr	r3, [r7, #8]
10006d96:	2b01      	cmp	r3, #1
10006d98:	dde4      	ble.n	10006d64 <dot_product+0x14>
        result += v[i]*u[i];
    return result;
10006d9a:	68fb      	ldr	r3, [r7, #12]
}
10006d9c:	1c18      	adds	r0, r3, #0
10006d9e:	46bd      	mov	sp, r7
10006da0:	b004      	add	sp, #16
10006da2:	bd80      	pop	{r7, pc}

10006da4 <atan>:
10006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006da6:	4656      	mov	r6, sl
10006da8:	464d      	mov	r5, r9
10006daa:	4644      	mov	r4, r8
10006dac:	465f      	mov	r7, fp
10006dae:	4ba5      	ldr	r3, [pc, #660]	; (10007044 <atan+0x2a0>)
10006db0:	b4f0      	push	{r4, r5, r6, r7}
10006db2:	004e      	lsls	r6, r1, #1
10006db4:	4680      	mov	r8, r0
10006db6:	4689      	mov	r9, r1
10006db8:	468a      	mov	sl, r1
10006dba:	0876      	lsrs	r6, r6, #1
10006dbc:	429e      	cmp	r6, r3
10006dbe:	dd0c      	ble.n	10006dda <atan+0x36>
10006dc0:	4ba1      	ldr	r3, [pc, #644]	; (10007048 <atan+0x2a4>)
10006dc2:	429e      	cmp	r6, r3
10006dc4:	dd00      	ble.n	10006dc8 <atan+0x24>
10006dc6:	e0a0      	b.n	10006f0a <atan+0x166>
10006dc8:	d100      	bne.n	10006dcc <atan+0x28>
10006dca:	e09b      	b.n	10006f04 <atan+0x160>
10006dcc:	4653      	mov	r3, sl
10006dce:	2b00      	cmp	r3, #0
10006dd0:	dc00      	bgt.n	10006dd4 <atan+0x30>
10006dd2:	e0de      	b.n	10006f92 <atan+0x1ee>
10006dd4:	4b9d      	ldr	r3, [pc, #628]	; (1000704c <atan+0x2a8>)
10006dd6:	4a9e      	ldr	r2, [pc, #632]	; (10007050 <atan+0x2ac>)
10006dd8:	e09f      	b.n	10006f1a <atan+0x176>
10006dda:	4b9e      	ldr	r3, [pc, #632]	; (10007054 <atan+0x2b0>)
10006ddc:	429e      	cmp	r6, r3
10006dde:	dd00      	ble.n	10006de2 <atan+0x3e>
10006de0:	e0b1      	b.n	10006f46 <atan+0x1a2>
10006de2:	4b9d      	ldr	r3, [pc, #628]	; (10007058 <atan+0x2b4>)
10006de4:	429e      	cmp	r6, r3
10006de6:	dc00      	bgt.n	10006dea <atan+0x46>
10006de8:	e09f      	b.n	10006f2a <atan+0x186>
10006dea:	2301      	movs	r3, #1
10006dec:	425b      	negs	r3, r3
10006dee:	469b      	mov	fp, r3
10006df0:	4642      	mov	r2, r8
10006df2:	464b      	mov	r3, r9
10006df4:	4640      	mov	r0, r8
10006df6:	4649      	mov	r1, r9
10006df8:	f004 fe78 	bl	1000baec <__aeabi_dmul>
10006dfc:	1c06      	adds	r6, r0, #0
10006dfe:	1c0f      	adds	r7, r1, #0
10006e00:	1c32      	adds	r2, r6, #0
10006e02:	1c3b      	adds	r3, r7, #0
10006e04:	f004 fe72 	bl	1000baec <__aeabi_dmul>
10006e08:	1c04      	adds	r4, r0, #0
10006e0a:	1c0d      	adds	r5, r1, #0
10006e0c:	4a93      	ldr	r2, [pc, #588]	; (1000705c <atan+0x2b8>)
10006e0e:	4b94      	ldr	r3, [pc, #592]	; (10007060 <atan+0x2bc>)
10006e10:	f004 fe6c 	bl	1000baec <__aeabi_dmul>
10006e14:	4a93      	ldr	r2, [pc, #588]	; (10007064 <atan+0x2c0>)
10006e16:	4b94      	ldr	r3, [pc, #592]	; (10007068 <atan+0x2c4>)
10006e18:	f003 ff02 	bl	1000ac20 <__aeabi_dadd>
10006e1c:	1c22      	adds	r2, r4, #0
10006e1e:	1c2b      	adds	r3, r5, #0
10006e20:	f004 fe64 	bl	1000baec <__aeabi_dmul>
10006e24:	4a91      	ldr	r2, [pc, #580]	; (1000706c <atan+0x2c8>)
10006e26:	4b92      	ldr	r3, [pc, #584]	; (10007070 <atan+0x2cc>)
10006e28:	f003 fefa 	bl	1000ac20 <__aeabi_dadd>
10006e2c:	1c22      	adds	r2, r4, #0
10006e2e:	1c2b      	adds	r3, r5, #0
10006e30:	f004 fe5c 	bl	1000baec <__aeabi_dmul>
10006e34:	4a8f      	ldr	r2, [pc, #572]	; (10007074 <atan+0x2d0>)
10006e36:	4b90      	ldr	r3, [pc, #576]	; (10007078 <atan+0x2d4>)
10006e38:	f003 fef2 	bl	1000ac20 <__aeabi_dadd>
10006e3c:	1c22      	adds	r2, r4, #0
10006e3e:	1c2b      	adds	r3, r5, #0
10006e40:	f004 fe54 	bl	1000baec <__aeabi_dmul>
10006e44:	4a8d      	ldr	r2, [pc, #564]	; (1000707c <atan+0x2d8>)
10006e46:	4b8e      	ldr	r3, [pc, #568]	; (10007080 <atan+0x2dc>)
10006e48:	f003 feea 	bl	1000ac20 <__aeabi_dadd>
10006e4c:	1c22      	adds	r2, r4, #0
10006e4e:	1c2b      	adds	r3, r5, #0
10006e50:	f004 fe4c 	bl	1000baec <__aeabi_dmul>
10006e54:	4a8b      	ldr	r2, [pc, #556]	; (10007084 <atan+0x2e0>)
10006e56:	4b8c      	ldr	r3, [pc, #560]	; (10007088 <atan+0x2e4>)
10006e58:	f003 fee2 	bl	1000ac20 <__aeabi_dadd>
10006e5c:	1c32      	adds	r2, r6, #0
10006e5e:	1c3b      	adds	r3, r7, #0
10006e60:	f004 fe44 	bl	1000baec <__aeabi_dmul>
10006e64:	4a89      	ldr	r2, [pc, #548]	; (1000708c <atan+0x2e8>)
10006e66:	4b8a      	ldr	r3, [pc, #552]	; (10007090 <atan+0x2ec>)
10006e68:	1c06      	adds	r6, r0, #0
10006e6a:	1c0f      	adds	r7, r1, #0
10006e6c:	1c20      	adds	r0, r4, #0
10006e6e:	1c29      	adds	r1, r5, #0
10006e70:	f004 fe3c 	bl	1000baec <__aeabi_dmul>
10006e74:	4a87      	ldr	r2, [pc, #540]	; (10007094 <atan+0x2f0>)
10006e76:	4b88      	ldr	r3, [pc, #544]	; (10007098 <atan+0x2f4>)
10006e78:	f005 f8d2 	bl	1000c020 <__aeabi_dsub>
10006e7c:	1c22      	adds	r2, r4, #0
10006e7e:	1c2b      	adds	r3, r5, #0
10006e80:	f004 fe34 	bl	1000baec <__aeabi_dmul>
10006e84:	4a85      	ldr	r2, [pc, #532]	; (1000709c <atan+0x2f8>)
10006e86:	4b86      	ldr	r3, [pc, #536]	; (100070a0 <atan+0x2fc>)
10006e88:	f005 f8ca 	bl	1000c020 <__aeabi_dsub>
10006e8c:	1c22      	adds	r2, r4, #0
10006e8e:	1c2b      	adds	r3, r5, #0
10006e90:	f004 fe2c 	bl	1000baec <__aeabi_dmul>
10006e94:	4a83      	ldr	r2, [pc, #524]	; (100070a4 <atan+0x300>)
10006e96:	4b84      	ldr	r3, [pc, #528]	; (100070a8 <atan+0x304>)
10006e98:	f005 f8c2 	bl	1000c020 <__aeabi_dsub>
10006e9c:	1c22      	adds	r2, r4, #0
10006e9e:	1c2b      	adds	r3, r5, #0
10006ea0:	f004 fe24 	bl	1000baec <__aeabi_dmul>
10006ea4:	4a81      	ldr	r2, [pc, #516]	; (100070ac <atan+0x308>)
10006ea6:	4b82      	ldr	r3, [pc, #520]	; (100070b0 <atan+0x30c>)
10006ea8:	f005 f8ba 	bl	1000c020 <__aeabi_dsub>
10006eac:	1c22      	adds	r2, r4, #0
10006eae:	1c2b      	adds	r3, r5, #0
10006eb0:	f004 fe1c 	bl	1000baec <__aeabi_dmul>
10006eb4:	1c0b      	adds	r3, r1, #0
10006eb6:	4659      	mov	r1, fp
10006eb8:	1c02      	adds	r2, r0, #0
10006eba:	3101      	adds	r1, #1
10006ebc:	d100      	bne.n	10006ec0 <atan+0x11c>
10006ebe:	e070      	b.n	10006fa2 <atan+0x1fe>
10006ec0:	4659      	mov	r1, fp
10006ec2:	1c30      	adds	r0, r6, #0
10006ec4:	00cc      	lsls	r4, r1, #3
10006ec6:	1c39      	adds	r1, r7, #0
10006ec8:	f003 feaa 	bl	1000ac20 <__aeabi_dadd>
10006ecc:	4642      	mov	r2, r8
10006ece:	464b      	mov	r3, r9
10006ed0:	f004 fe0c 	bl	1000baec <__aeabi_dmul>
10006ed4:	4d77      	ldr	r5, [pc, #476]	; (100070b4 <atan+0x310>)
10006ed6:	4b78      	ldr	r3, [pc, #480]	; (100070b8 <atan+0x314>)
10006ed8:	192d      	adds	r5, r5, r4
10006eda:	191c      	adds	r4, r3, r4
10006edc:	6822      	ldr	r2, [r4, #0]
10006ede:	6863      	ldr	r3, [r4, #4]
10006ee0:	f005 f89e 	bl	1000c020 <__aeabi_dsub>
10006ee4:	4642      	mov	r2, r8
10006ee6:	464b      	mov	r3, r9
10006ee8:	f005 f89a 	bl	1000c020 <__aeabi_dsub>
10006eec:	1c02      	adds	r2, r0, #0
10006eee:	1c0b      	adds	r3, r1, #0
10006ef0:	6828      	ldr	r0, [r5, #0]
10006ef2:	6869      	ldr	r1, [r5, #4]
10006ef4:	f005 f894 	bl	1000c020 <__aeabi_dsub>
10006ef8:	4653      	mov	r3, sl
10006efa:	1c0a      	adds	r2, r1, #0
10006efc:	2b00      	cmp	r3, #0
10006efe:	db4b      	blt.n	10006f98 <atan+0x1f4>
10006f00:	1c03      	adds	r3, r0, #0
10006f02:	e00a      	b.n	10006f1a <atan+0x176>
10006f04:	2800      	cmp	r0, #0
10006f06:	d100      	bne.n	10006f0a <atan+0x166>
10006f08:	e760      	b.n	10006dcc <atan+0x28>
10006f0a:	4642      	mov	r2, r8
10006f0c:	464b      	mov	r3, r9
10006f0e:	4640      	mov	r0, r8
10006f10:	4649      	mov	r1, r9
10006f12:	f003 fe85 	bl	1000ac20 <__aeabi_dadd>
10006f16:	1c03      	adds	r3, r0, #0
10006f18:	1c0a      	adds	r2, r1, #0
10006f1a:	1c18      	adds	r0, r3, #0
10006f1c:	1c11      	adds	r1, r2, #0
10006f1e:	bc3c      	pop	{r2, r3, r4, r5}
10006f20:	4690      	mov	r8, r2
10006f22:	4699      	mov	r9, r3
10006f24:	46a2      	mov	sl, r4
10006f26:	46ab      	mov	fp, r5
10006f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10006f2a:	4a64      	ldr	r2, [pc, #400]	; (100070bc <atan+0x318>)
10006f2c:	4b64      	ldr	r3, [pc, #400]	; (100070c0 <atan+0x31c>)
10006f2e:	f003 fe77 	bl	1000ac20 <__aeabi_dadd>
10006f32:	2200      	movs	r2, #0
10006f34:	4b63      	ldr	r3, [pc, #396]	; (100070c4 <atan+0x320>)
10006f36:	f002 fee9 	bl	10009d0c <__aeabi_dcmpgt>
10006f3a:	2800      	cmp	r0, #0
10006f3c:	d100      	bne.n	10006f40 <atan+0x19c>
10006f3e:	e754      	b.n	10006dea <atan+0x46>
10006f40:	4643      	mov	r3, r8
10006f42:	464a      	mov	r2, r9
10006f44:	e7e9      	b.n	10006f1a <atan+0x176>
10006f46:	f000 f919 	bl	1000717c <fabs>
10006f4a:	4b5f      	ldr	r3, [pc, #380]	; (100070c8 <atan+0x324>)
10006f4c:	1c04      	adds	r4, r0, #0
10006f4e:	1c0d      	adds	r5, r1, #0
10006f50:	429e      	cmp	r6, r3
10006f52:	dc37      	bgt.n	10006fc4 <atan+0x220>
10006f54:	4b5d      	ldr	r3, [pc, #372]	; (100070cc <atan+0x328>)
10006f56:	429e      	cmp	r6, r3
10006f58:	dc5d      	bgt.n	10007016 <atan+0x272>
10006f5a:	1c22      	adds	r2, r4, #0
10006f5c:	1c2b      	adds	r3, r5, #0
10006f5e:	f003 fe5f 	bl	1000ac20 <__aeabi_dadd>
10006f62:	2200      	movs	r2, #0
10006f64:	4b57      	ldr	r3, [pc, #348]	; (100070c4 <atan+0x320>)
10006f66:	f005 f85b 	bl	1000c020 <__aeabi_dsub>
10006f6a:	2380      	movs	r3, #128	; 0x80
10006f6c:	1c06      	adds	r6, r0, #0
10006f6e:	1c0f      	adds	r7, r1, #0
10006f70:	2200      	movs	r2, #0
10006f72:	05db      	lsls	r3, r3, #23
10006f74:	1c20      	adds	r0, r4, #0
10006f76:	1c29      	adds	r1, r5, #0
10006f78:	f003 fe52 	bl	1000ac20 <__aeabi_dadd>
10006f7c:	1c0b      	adds	r3, r1, #0
10006f7e:	1c02      	adds	r2, r0, #0
10006f80:	1c39      	adds	r1, r7, #0
10006f82:	1c30      	adds	r0, r6, #0
10006f84:	f004 f974 	bl	1000b270 <__aeabi_ddiv>
10006f88:	2300      	movs	r3, #0
10006f8a:	4680      	mov	r8, r0
10006f8c:	4689      	mov	r9, r1
10006f8e:	469b      	mov	fp, r3
10006f90:	e72e      	b.n	10006df0 <atan+0x4c>
10006f92:	4b2e      	ldr	r3, [pc, #184]	; (1000704c <atan+0x2a8>)
10006f94:	4a4e      	ldr	r2, [pc, #312]	; (100070d0 <atan+0x32c>)
10006f96:	e7c0      	b.n	10006f1a <atan+0x176>
10006f98:	2280      	movs	r2, #128	; 0x80
10006f9a:	0612      	lsls	r2, r2, #24
10006f9c:	1c03      	adds	r3, r0, #0
10006f9e:	188a      	adds	r2, r1, r2
10006fa0:	e7bb      	b.n	10006f1a <atan+0x176>
10006fa2:	1c30      	adds	r0, r6, #0
10006fa4:	1c39      	adds	r1, r7, #0
10006fa6:	f003 fe3b 	bl	1000ac20 <__aeabi_dadd>
10006faa:	4642      	mov	r2, r8
10006fac:	464b      	mov	r3, r9
10006fae:	f004 fd9d 	bl	1000baec <__aeabi_dmul>
10006fb2:	1c02      	adds	r2, r0, #0
10006fb4:	1c0b      	adds	r3, r1, #0
10006fb6:	4640      	mov	r0, r8
10006fb8:	4649      	mov	r1, r9
10006fba:	f005 f831 	bl	1000c020 <__aeabi_dsub>
10006fbe:	1c03      	adds	r3, r0, #0
10006fc0:	1c0a      	adds	r2, r1, #0
10006fc2:	e7aa      	b.n	10006f1a <atan+0x176>
10006fc4:	4b43      	ldr	r3, [pc, #268]	; (100070d4 <atan+0x330>)
10006fc6:	429e      	cmp	r6, r3
10006fc8:	dc1a      	bgt.n	10007000 <atan+0x25c>
10006fca:	2200      	movs	r2, #0
10006fcc:	4b42      	ldr	r3, [pc, #264]	; (100070d8 <atan+0x334>)
10006fce:	f005 f827 	bl	1000c020 <__aeabi_dsub>
10006fd2:	2200      	movs	r2, #0
10006fd4:	1c06      	adds	r6, r0, #0
10006fd6:	1c0f      	adds	r7, r1, #0
10006fd8:	4b3f      	ldr	r3, [pc, #252]	; (100070d8 <atan+0x334>)
10006fda:	1c20      	adds	r0, r4, #0
10006fdc:	1c29      	adds	r1, r5, #0
10006fde:	f004 fd85 	bl	1000baec <__aeabi_dmul>
10006fe2:	2200      	movs	r2, #0
10006fe4:	4b37      	ldr	r3, [pc, #220]	; (100070c4 <atan+0x320>)
10006fe6:	f003 fe1b 	bl	1000ac20 <__aeabi_dadd>
10006fea:	1c0b      	adds	r3, r1, #0
10006fec:	1c02      	adds	r2, r0, #0
10006fee:	1c39      	adds	r1, r7, #0
10006ff0:	1c30      	adds	r0, r6, #0
10006ff2:	f004 f93d 	bl	1000b270 <__aeabi_ddiv>
10006ff6:	2302      	movs	r3, #2
10006ff8:	4680      	mov	r8, r0
10006ffa:	4689      	mov	r9, r1
10006ffc:	469b      	mov	fp, r3
10006ffe:	e6f7      	b.n	10006df0 <atan+0x4c>
10007000:	1c2b      	adds	r3, r5, #0
10007002:	2000      	movs	r0, #0
10007004:	4935      	ldr	r1, [pc, #212]	; (100070dc <atan+0x338>)
10007006:	1c22      	adds	r2, r4, #0
10007008:	f004 f932 	bl	1000b270 <__aeabi_ddiv>
1000700c:	2303      	movs	r3, #3
1000700e:	4680      	mov	r8, r0
10007010:	4689      	mov	r9, r1
10007012:	469b      	mov	fp, r3
10007014:	e6ec      	b.n	10006df0 <atan+0x4c>
10007016:	2200      	movs	r2, #0
10007018:	4b2a      	ldr	r3, [pc, #168]	; (100070c4 <atan+0x320>)
1000701a:	f005 f801 	bl	1000c020 <__aeabi_dsub>
1000701e:	2200      	movs	r2, #0
10007020:	1c06      	adds	r6, r0, #0
10007022:	1c0f      	adds	r7, r1, #0
10007024:	4b27      	ldr	r3, [pc, #156]	; (100070c4 <atan+0x320>)
10007026:	1c20      	adds	r0, r4, #0
10007028:	1c29      	adds	r1, r5, #0
1000702a:	f003 fdf9 	bl	1000ac20 <__aeabi_dadd>
1000702e:	1c0b      	adds	r3, r1, #0
10007030:	1c02      	adds	r2, r0, #0
10007032:	1c39      	adds	r1, r7, #0
10007034:	1c30      	adds	r0, r6, #0
10007036:	f004 f91b 	bl	1000b270 <__aeabi_ddiv>
1000703a:	2301      	movs	r3, #1
1000703c:	4680      	mov	r8, r0
1000703e:	4689      	mov	r9, r1
10007040:	469b      	mov	fp, r3
10007042:	e6d5      	b.n	10006df0 <atan+0x4c>
10007044:	440fffff 	.word	0x440fffff
10007048:	7ff00000 	.word	0x7ff00000
1000704c:	54442d18 	.word	0x54442d18
10007050:	3ff921fb 	.word	0x3ff921fb
10007054:	3fdbffff 	.word	0x3fdbffff
10007058:	3e1fffff 	.word	0x3e1fffff
1000705c:	e322da11 	.word	0xe322da11
10007060:	3f90ad3a 	.word	0x3f90ad3a
10007064:	24760deb 	.word	0x24760deb
10007068:	3fa97b4b 	.word	0x3fa97b4b
1000706c:	a0d03d51 	.word	0xa0d03d51
10007070:	3fb10d66 	.word	0x3fb10d66
10007074:	c54c206e 	.word	0xc54c206e
10007078:	3fb745cd 	.word	0x3fb745cd
1000707c:	920083ff 	.word	0x920083ff
10007080:	3fc24924 	.word	0x3fc24924
10007084:	5555550d 	.word	0x5555550d
10007088:	3fd55555 	.word	0x3fd55555
1000708c:	2c6a6c2f 	.word	0x2c6a6c2f
10007090:	bfa2b444 	.word	0xbfa2b444
10007094:	52defd9a 	.word	0x52defd9a
10007098:	3fadde2d 	.word	0x3fadde2d
1000709c:	af749a6d 	.word	0xaf749a6d
100070a0:	3fb3b0f2 	.word	0x3fb3b0f2
100070a4:	fe231671 	.word	0xfe231671
100070a8:	3fbc71c6 	.word	0x3fbc71c6
100070ac:	9998ebc4 	.word	0x9998ebc4
100070b0:	3fc99999 	.word	0x3fc99999
100070b4:	1000d140 	.word	0x1000d140
100070b8:	1000d120 	.word	0x1000d120
100070bc:	8800759c 	.word	0x8800759c
100070c0:	7e37e43c 	.word	0x7e37e43c
100070c4:	3ff00000 	.word	0x3ff00000
100070c8:	3ff2ffff 	.word	0x3ff2ffff
100070cc:	3fe5ffff 	.word	0x3fe5ffff
100070d0:	bff921fb 	.word	0xbff921fb
100070d4:	40037fff 	.word	0x40037fff
100070d8:	3ff80000 	.word	0x3ff80000
100070dc:	bff00000 	.word	0xbff00000

100070e0 <cos>:
100070e0:	b530      	push	{r4, r5, lr}
100070e2:	4a24      	ldr	r2, [pc, #144]	; (10007174 <cos+0x94>)
100070e4:	004b      	lsls	r3, r1, #1
100070e6:	b087      	sub	sp, #28
100070e8:	1c05      	adds	r5, r0, #0
100070ea:	1c0c      	adds	r4, r1, #0
100070ec:	085b      	lsrs	r3, r3, #1
100070ee:	4293      	cmp	r3, r2
100070f0:	dd1c      	ble.n	1000712c <cos+0x4c>
100070f2:	4a21      	ldr	r2, [pc, #132]	; (10007178 <cos+0x98>)
100070f4:	4293      	cmp	r3, r2
100070f6:	dd05      	ble.n	10007104 <cos+0x24>
100070f8:	1c2a      	adds	r2, r5, #0
100070fa:	1c23      	adds	r3, r4, #0
100070fc:	f004 ff90 	bl	1000c020 <__aeabi_dsub>
10007100:	b007      	add	sp, #28
10007102:	bd30      	pop	{r4, r5, pc}
10007104:	aa02      	add	r2, sp, #8
10007106:	f001 f8e1 	bl	100082cc <__ieee754_rem_pio2>
1000710a:	2303      	movs	r3, #3
1000710c:	4018      	ands	r0, r3
1000710e:	2801      	cmp	r0, #1
10007110:	d01c      	beq.n	1000714c <cos+0x6c>
10007112:	2802      	cmp	r0, #2
10007114:	d00f      	beq.n	10007136 <cos+0x56>
10007116:	2800      	cmp	r0, #0
10007118:	d024      	beq.n	10007164 <cos+0x84>
1000711a:	9802      	ldr	r0, [sp, #8]
1000711c:	9903      	ldr	r1, [sp, #12]
1000711e:	9a04      	ldr	r2, [sp, #16]
10007120:	9b05      	ldr	r3, [sp, #20]
10007122:	2401      	movs	r4, #1
10007124:	9400      	str	r4, [sp, #0]
10007126:	f002 f941 	bl	100093ac <__kernel_sin>
1000712a:	e7e9      	b.n	10007100 <cos+0x20>
1000712c:	2200      	movs	r2, #0
1000712e:	2300      	movs	r3, #0
10007130:	f001 fbda 	bl	100088e8 <__kernel_cos>
10007134:	e7e4      	b.n	10007100 <cos+0x20>
10007136:	9a04      	ldr	r2, [sp, #16]
10007138:	9b05      	ldr	r3, [sp, #20]
1000713a:	9802      	ldr	r0, [sp, #8]
1000713c:	9903      	ldr	r1, [sp, #12]
1000713e:	f001 fbd3 	bl	100088e8 <__kernel_cos>
10007142:	2380      	movs	r3, #128	; 0x80
10007144:	061b      	lsls	r3, r3, #24
10007146:	469c      	mov	ip, r3
10007148:	4461      	add	r1, ip
1000714a:	e7d9      	b.n	10007100 <cos+0x20>
1000714c:	9a04      	ldr	r2, [sp, #16]
1000714e:	9b05      	ldr	r3, [sp, #20]
10007150:	9000      	str	r0, [sp, #0]
10007152:	9802      	ldr	r0, [sp, #8]
10007154:	9903      	ldr	r1, [sp, #12]
10007156:	f002 f929 	bl	100093ac <__kernel_sin>
1000715a:	2380      	movs	r3, #128	; 0x80
1000715c:	061b      	lsls	r3, r3, #24
1000715e:	469c      	mov	ip, r3
10007160:	4461      	add	r1, ip
10007162:	e7cd      	b.n	10007100 <cos+0x20>
10007164:	9802      	ldr	r0, [sp, #8]
10007166:	9903      	ldr	r1, [sp, #12]
10007168:	9a04      	ldr	r2, [sp, #16]
1000716a:	9b05      	ldr	r3, [sp, #20]
1000716c:	f001 fbbc 	bl	100088e8 <__kernel_cos>
10007170:	e7c6      	b.n	10007100 <cos+0x20>
10007172:	46c0      	nop			; (mov r8, r8)
10007174:	3fe921fb 	.word	0x3fe921fb
10007178:	7fefffff 	.word	0x7fefffff

1000717c <fabs>:
1000717c:	0049      	lsls	r1, r1, #1
1000717e:	084b      	lsrs	r3, r1, #1
10007180:	1c19      	adds	r1, r3, #0
10007182:	4770      	bx	lr

10007184 <sin>:
10007184:	b530      	push	{r4, r5, lr}
10007186:	4a25      	ldr	r2, [pc, #148]	; (1000721c <sin+0x98>)
10007188:	004b      	lsls	r3, r1, #1
1000718a:	b087      	sub	sp, #28
1000718c:	1c05      	adds	r5, r0, #0
1000718e:	1c0c      	adds	r4, r1, #0
10007190:	085b      	lsrs	r3, r3, #1
10007192:	4293      	cmp	r3, r2
10007194:	dd1e      	ble.n	100071d4 <sin+0x50>
10007196:	4a22      	ldr	r2, [pc, #136]	; (10007220 <sin+0x9c>)
10007198:	4293      	cmp	r3, r2
1000719a:	dd05      	ble.n	100071a8 <sin+0x24>
1000719c:	1c2a      	adds	r2, r5, #0
1000719e:	1c23      	adds	r3, r4, #0
100071a0:	f004 ff3e 	bl	1000c020 <__aeabi_dsub>
100071a4:	b007      	add	sp, #28
100071a6:	bd30      	pop	{r4, r5, pc}
100071a8:	aa02      	add	r2, sp, #8
100071aa:	f001 f88f 	bl	100082cc <__ieee754_rem_pio2>
100071ae:	2303      	movs	r3, #3
100071b0:	4018      	ands	r0, r3
100071b2:	2801      	cmp	r0, #1
100071b4:	d022      	beq.n	100071fc <sin+0x78>
100071b6:	2802      	cmp	r0, #2
100071b8:	d013      	beq.n	100071e2 <sin+0x5e>
100071ba:	2800      	cmp	r0, #0
100071bc:	d025      	beq.n	1000720a <sin+0x86>
100071be:	9a04      	ldr	r2, [sp, #16]
100071c0:	9b05      	ldr	r3, [sp, #20]
100071c2:	9802      	ldr	r0, [sp, #8]
100071c4:	9903      	ldr	r1, [sp, #12]
100071c6:	f001 fb8f 	bl	100088e8 <__kernel_cos>
100071ca:	2380      	movs	r3, #128	; 0x80
100071cc:	061b      	lsls	r3, r3, #24
100071ce:	469c      	mov	ip, r3
100071d0:	4461      	add	r1, ip
100071d2:	e7e7      	b.n	100071a4 <sin+0x20>
100071d4:	2300      	movs	r3, #0
100071d6:	2200      	movs	r2, #0
100071d8:	9300      	str	r3, [sp, #0]
100071da:	2300      	movs	r3, #0
100071dc:	f002 f8e6 	bl	100093ac <__kernel_sin>
100071e0:	e7e0      	b.n	100071a4 <sin+0x20>
100071e2:	2401      	movs	r4, #1
100071e4:	9a04      	ldr	r2, [sp, #16]
100071e6:	9b05      	ldr	r3, [sp, #20]
100071e8:	9802      	ldr	r0, [sp, #8]
100071ea:	9903      	ldr	r1, [sp, #12]
100071ec:	9400      	str	r4, [sp, #0]
100071ee:	f002 f8dd 	bl	100093ac <__kernel_sin>
100071f2:	2380      	movs	r3, #128	; 0x80
100071f4:	061b      	lsls	r3, r3, #24
100071f6:	469c      	mov	ip, r3
100071f8:	4461      	add	r1, ip
100071fa:	e7d3      	b.n	100071a4 <sin+0x20>
100071fc:	9a04      	ldr	r2, [sp, #16]
100071fe:	9b05      	ldr	r3, [sp, #20]
10007200:	9802      	ldr	r0, [sp, #8]
10007202:	9903      	ldr	r1, [sp, #12]
10007204:	f001 fb70 	bl	100088e8 <__kernel_cos>
10007208:	e7cc      	b.n	100071a4 <sin+0x20>
1000720a:	2401      	movs	r4, #1
1000720c:	9802      	ldr	r0, [sp, #8]
1000720e:	9903      	ldr	r1, [sp, #12]
10007210:	9a04      	ldr	r2, [sp, #16]
10007212:	9b05      	ldr	r3, [sp, #20]
10007214:	9400      	str	r4, [sp, #0]
10007216:	f002 f8c9 	bl	100093ac <__kernel_sin>
1000721a:	e7c3      	b.n	100071a4 <sin+0x20>
1000721c:	3fe921fb 	.word	0x3fe921fb
10007220:	7fefffff 	.word	0x7fefffff

10007224 <tan>:
10007224:	b530      	push	{r4, r5, lr}
10007226:	4a13      	ldr	r2, [pc, #76]	; (10007274 <tan+0x50>)
10007228:	004b      	lsls	r3, r1, #1
1000722a:	b087      	sub	sp, #28
1000722c:	1c05      	adds	r5, r0, #0
1000722e:	1c0c      	adds	r4, r1, #0
10007230:	085b      	lsrs	r3, r3, #1
10007232:	4293      	cmp	r3, r2
10007234:	dd17      	ble.n	10007266 <tan+0x42>
10007236:	4a10      	ldr	r2, [pc, #64]	; (10007278 <tan+0x54>)
10007238:	4293      	cmp	r3, r2
1000723a:	dd05      	ble.n	10007248 <tan+0x24>
1000723c:	1c2a      	adds	r2, r5, #0
1000723e:	1c23      	adds	r3, r4, #0
10007240:	f004 feee 	bl	1000c020 <__aeabi_dsub>
10007244:	b007      	add	sp, #28
10007246:	bd30      	pop	{r4, r5, pc}
10007248:	aa02      	add	r2, sp, #8
1000724a:	f001 f83f 	bl	100082cc <__ieee754_rem_pio2>
1000724e:	9a04      	ldr	r2, [sp, #16]
10007250:	9b05      	ldr	r3, [sp, #20]
10007252:	2101      	movs	r1, #1
10007254:	4008      	ands	r0, r1
10007256:	0040      	lsls	r0, r0, #1
10007258:	1a08      	subs	r0, r1, r0
1000725a:	9000      	str	r0, [sp, #0]
1000725c:	9802      	ldr	r0, [sp, #8]
1000725e:	9903      	ldr	r1, [sp, #12]
10007260:	f002 f954 	bl	1000950c <__kernel_tan>
10007264:	e7ee      	b.n	10007244 <tan+0x20>
10007266:	2301      	movs	r3, #1
10007268:	2200      	movs	r2, #0
1000726a:	9300      	str	r3, [sp, #0]
1000726c:	2300      	movs	r3, #0
1000726e:	f002 f94d 	bl	1000950c <__kernel_tan>
10007272:	e7e7      	b.n	10007244 <tan+0x20>
10007274:	3fe921fb 	.word	0x3fe921fb
10007278:	7fefffff 	.word	0x7fefffff

1000727c <atan2>:
1000727c:	b508      	push	{r3, lr}
1000727e:	f000 fa0b 	bl	10007698 <__ieee754_atan2>
10007282:	bd08      	pop	{r3, pc}

10007284 <pow>:
10007284:	b5f0      	push	{r4, r5, r6, r7, lr}
10007286:	4646      	mov	r6, r8
10007288:	4657      	mov	r7, sl
1000728a:	b4c0      	push	{r6, r7}
1000728c:	b08f      	sub	sp, #60	; 0x3c
1000728e:	1c1f      	adds	r7, r3, #0
10007290:	9002      	str	r0, [sp, #8]
10007292:	9103      	str	r1, [sp, #12]
10007294:	1c16      	adds	r6, r2, #0
10007296:	f000 fad3 	bl	10007840 <__ieee754_pow>
1000729a:	1c04      	adds	r4, r0, #0
1000729c:	1c0d      	adds	r5, r1, #0
1000729e:	4bc8      	ldr	r3, [pc, #800]	; (100075c0 <pow+0x33c>)
100072a0:	9400      	str	r4, [sp, #0]
100072a2:	9501      	str	r5, [sp, #4]
100072a4:	4698      	mov	r8, r3
100072a6:	781b      	ldrb	r3, [r3, #0]
100072a8:	b25b      	sxtb	r3, r3
100072aa:	3301      	adds	r3, #1
100072ac:	d005      	beq.n	100072ba <pow+0x36>
100072ae:	1c30      	adds	r0, r6, #0
100072b0:	1c39      	adds	r1, r7, #0
100072b2:	f002 fba5 	bl	10009a00 <__fpclassifyd>
100072b6:	2800      	cmp	r0, #0
100072b8:	d106      	bne.n	100072c8 <pow+0x44>
100072ba:	9800      	ldr	r0, [sp, #0]
100072bc:	9901      	ldr	r1, [sp, #4]
100072be:	b00f      	add	sp, #60	; 0x3c
100072c0:	bc0c      	pop	{r2, r3}
100072c2:	4690      	mov	r8, r2
100072c4:	469a      	mov	sl, r3
100072c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100072c8:	9802      	ldr	r0, [sp, #8]
100072ca:	9903      	ldr	r1, [sp, #12]
100072cc:	f002 fb98 	bl	10009a00 <__fpclassifyd>
100072d0:	4682      	mov	sl, r0
100072d2:	2800      	cmp	r0, #0
100072d4:	d131      	bne.n	1000733a <pow+0xb6>
100072d6:	1c30      	adds	r0, r6, #0
100072d8:	1c39      	adds	r1, r7, #0
100072da:	2200      	movs	r2, #0
100072dc:	2300      	movs	r3, #0
100072de:	f002 fcfb 	bl	10009cd8 <__aeabi_dcmpeq>
100072e2:	2800      	cmp	r0, #0
100072e4:	d0e9      	beq.n	100072ba <pow+0x36>
100072e6:	2301      	movs	r3, #1
100072e8:	9304      	str	r3, [sp, #16]
100072ea:	4bb6      	ldr	r3, [pc, #728]	; (100075c4 <pow+0x340>)
100072ec:	ad04      	add	r5, sp, #16
100072ee:	606b      	str	r3, [r5, #4]
100072f0:	4653      	mov	r3, sl
100072f2:	2200      	movs	r2, #0
100072f4:	622b      	str	r3, [r5, #32]
100072f6:	9b02      	ldr	r3, [sp, #8]
100072f8:	9c03      	ldr	r4, [sp, #12]
100072fa:	60ab      	str	r3, [r5, #8]
100072fc:	60ec      	str	r4, [r5, #12]
100072fe:	4bb2      	ldr	r3, [pc, #712]	; (100075c8 <pow+0x344>)
10007300:	612e      	str	r6, [r5, #16]
10007302:	616f      	str	r7, [r5, #20]
10007304:	61aa      	str	r2, [r5, #24]
10007306:	61eb      	str	r3, [r5, #28]
10007308:	4643      	mov	r3, r8
1000730a:	781b      	ldrb	r3, [r3, #0]
1000730c:	b25b      	sxtb	r3, r3
1000730e:	1c5a      	adds	r2, r3, #1
10007310:	d00e      	beq.n	10007330 <pow+0xac>
10007312:	2b02      	cmp	r3, #2
10007314:	d00c      	beq.n	10007330 <pow+0xac>
10007316:	1c28      	adds	r0, r5, #0
10007318:	f002 fba0 	bl	10009a5c <matherr>
1000731c:	2800      	cmp	r0, #0
1000731e:	d100      	bne.n	10007322 <pow+0x9e>
10007320:	e080      	b.n	10007424 <pow+0x1a0>
10007322:	6a2b      	ldr	r3, [r5, #32]
10007324:	2b00      	cmp	r3, #0
10007326:	d003      	beq.n	10007330 <pow+0xac>
10007328:	f005 fd2e 	bl	1000cd88 <__errno>
1000732c:	6a2b      	ldr	r3, [r5, #32]
1000732e:	6003      	str	r3, [r0, #0]
10007330:	69ab      	ldr	r3, [r5, #24]
10007332:	69ec      	ldr	r4, [r5, #28]
10007334:	9300      	str	r3, [sp, #0]
10007336:	9401      	str	r4, [sp, #4]
10007338:	e7bf      	b.n	100072ba <pow+0x36>
1000733a:	9802      	ldr	r0, [sp, #8]
1000733c:	9903      	ldr	r1, [sp, #12]
1000733e:	2200      	movs	r2, #0
10007340:	2300      	movs	r3, #0
10007342:	f002 fcc9 	bl	10009cd8 <__aeabi_dcmpeq>
10007346:	2800      	cmp	r0, #0
10007348:	d022      	beq.n	10007390 <pow+0x10c>
1000734a:	1c30      	adds	r0, r6, #0
1000734c:	1c39      	adds	r1, r7, #0
1000734e:	2200      	movs	r2, #0
10007350:	2300      	movs	r3, #0
10007352:	f002 fcc1 	bl	10009cd8 <__aeabi_dcmpeq>
10007356:	1e04      	subs	r4, r0, #0
10007358:	d02c      	beq.n	100073b4 <pow+0x130>
1000735a:	2301      	movs	r3, #1
1000735c:	9304      	str	r3, [sp, #16]
1000735e:	4b99      	ldr	r3, [pc, #612]	; (100075c4 <pow+0x340>)
10007360:	ad04      	add	r5, sp, #16
10007362:	606b      	str	r3, [r5, #4]
10007364:	2300      	movs	r3, #0
10007366:	622b      	str	r3, [r5, #32]
10007368:	9b02      	ldr	r3, [sp, #8]
1000736a:	9c03      	ldr	r4, [sp, #12]
1000736c:	60ab      	str	r3, [r5, #8]
1000736e:	60ec      	str	r4, [r5, #12]
10007370:	2300      	movs	r3, #0
10007372:	2400      	movs	r4, #0
10007374:	61ab      	str	r3, [r5, #24]
10007376:	61ec      	str	r4, [r5, #28]
10007378:	4643      	mov	r3, r8
1000737a:	781b      	ldrb	r3, [r3, #0]
1000737c:	612e      	str	r6, [r5, #16]
1000737e:	616f      	str	r7, [r5, #20]
10007380:	b25b      	sxtb	r3, r3
10007382:	2b00      	cmp	r3, #0
10007384:	d0c7      	beq.n	10007316 <pow+0x92>
10007386:	2200      	movs	r2, #0
10007388:	4b8f      	ldr	r3, [pc, #572]	; (100075c8 <pow+0x344>)
1000738a:	61aa      	str	r2, [r5, #24]
1000738c:	61eb      	str	r3, [r5, #28]
1000738e:	e7cf      	b.n	10007330 <pow+0xac>
10007390:	1c20      	adds	r0, r4, #0
10007392:	1c29      	adds	r1, r5, #0
10007394:	f002 fa84 	bl	100098a0 <finite>
10007398:	4682      	mov	sl, r0
1000739a:	2800      	cmp	r0, #0
1000739c:	d047      	beq.n	1000742e <pow+0x1aa>
1000739e:	1c20      	adds	r0, r4, #0
100073a0:	1c29      	adds	r1, r5, #0
100073a2:	2200      	movs	r2, #0
100073a4:	2300      	movs	r3, #0
100073a6:	f002 fc97 	bl	10009cd8 <__aeabi_dcmpeq>
100073aa:	2800      	cmp	r0, #0
100073ac:	d166      	bne.n	1000747c <pow+0x1f8>
100073ae:	9400      	str	r4, [sp, #0]
100073b0:	9501      	str	r5, [sp, #4]
100073b2:	e782      	b.n	100072ba <pow+0x36>
100073b4:	1c30      	adds	r0, r6, #0
100073b6:	1c39      	adds	r1, r7, #0
100073b8:	f002 fa72 	bl	100098a0 <finite>
100073bc:	2800      	cmp	r0, #0
100073be:	d100      	bne.n	100073c2 <pow+0x13e>
100073c0:	e77b      	b.n	100072ba <pow+0x36>
100073c2:	1c30      	adds	r0, r6, #0
100073c4:	1c39      	adds	r1, r7, #0
100073c6:	2200      	movs	r2, #0
100073c8:	2300      	movs	r3, #0
100073ca:	f002 fc8b 	bl	10009ce4 <__aeabi_dcmplt>
100073ce:	2800      	cmp	r0, #0
100073d0:	d100      	bne.n	100073d4 <pow+0x150>
100073d2:	e772      	b.n	100072ba <pow+0x36>
100073d4:	2301      	movs	r3, #1
100073d6:	9304      	str	r3, [sp, #16]
100073d8:	4b7a      	ldr	r3, [pc, #488]	; (100075c4 <pow+0x340>)
100073da:	ad04      	add	r5, sp, #16
100073dc:	606b      	str	r3, [r5, #4]
100073de:	622c      	str	r4, [r5, #32]
100073e0:	9b02      	ldr	r3, [sp, #8]
100073e2:	9c03      	ldr	r4, [sp, #12]
100073e4:	60ab      	str	r3, [r5, #8]
100073e6:	60ec      	str	r4, [r5, #12]
100073e8:	4643      	mov	r3, r8
100073ea:	781b      	ldrb	r3, [r3, #0]
100073ec:	612e      	str	r6, [r5, #16]
100073ee:	616f      	str	r7, [r5, #20]
100073f0:	2b00      	cmp	r3, #0
100073f2:	d175      	bne.n	100074e0 <pow+0x25c>
100073f4:	2300      	movs	r3, #0
100073f6:	2400      	movs	r4, #0
100073f8:	61ab      	str	r3, [r5, #24]
100073fa:	61ec      	str	r4, [r5, #28]
100073fc:	1c28      	adds	r0, r5, #0
100073fe:	f002 fb2d 	bl	10009a5c <matherr>
10007402:	2800      	cmp	r0, #0
10007404:	d072      	beq.n	100074ec <pow+0x268>
10007406:	6a2b      	ldr	r3, [r5, #32]
10007408:	2b00      	cmp	r3, #0
1000740a:	d091      	beq.n	10007330 <pow+0xac>
1000740c:	e78c      	b.n	10007328 <pow+0xa4>
1000740e:	2000      	movs	r0, #0
10007410:	2100      	movs	r1, #0
10007412:	1c02      	adds	r2, r0, #0
10007414:	1c0b      	adds	r3, r1, #0
10007416:	f003 ff2b 	bl	1000b270 <__aeabi_ddiv>
1000741a:	61a8      	str	r0, [r5, #24]
1000741c:	61e9      	str	r1, [r5, #28]
1000741e:	2c02      	cmp	r4, #2
10007420:	d000      	beq.n	10007424 <pow+0x1a0>
10007422:	e778      	b.n	10007316 <pow+0x92>
10007424:	f005 fcb0 	bl	1000cd88 <__errno>
10007428:	2321      	movs	r3, #33	; 0x21
1000742a:	6003      	str	r3, [r0, #0]
1000742c:	e779      	b.n	10007322 <pow+0x9e>
1000742e:	9802      	ldr	r0, [sp, #8]
10007430:	9903      	ldr	r1, [sp, #12]
10007432:	f002 fa35 	bl	100098a0 <finite>
10007436:	2800      	cmp	r0, #0
10007438:	d0b1      	beq.n	1000739e <pow+0x11a>
1000743a:	1c30      	adds	r0, r6, #0
1000743c:	1c39      	adds	r1, r7, #0
1000743e:	f002 fa2f 	bl	100098a0 <finite>
10007442:	2800      	cmp	r0, #0
10007444:	d0ab      	beq.n	1000739e <pow+0x11a>
10007446:	1c29      	adds	r1, r5, #0
10007448:	1c20      	adds	r0, r4, #0
1000744a:	f002 fad9 	bl	10009a00 <__fpclassifyd>
1000744e:	ad04      	add	r5, sp, #16
10007450:	2800      	cmp	r0, #0
10007452:	d150      	bne.n	100074f6 <pow+0x272>
10007454:	2301      	movs	r3, #1
10007456:	9304      	str	r3, [sp, #16]
10007458:	4b5a      	ldr	r3, [pc, #360]	; (100075c4 <pow+0x340>)
1000745a:	6228      	str	r0, [r5, #32]
1000745c:	606b      	str	r3, [r5, #4]
1000745e:	9b02      	ldr	r3, [sp, #8]
10007460:	9c03      	ldr	r4, [sp, #12]
10007462:	60ab      	str	r3, [r5, #8]
10007464:	60ec      	str	r4, [r5, #12]
10007466:	4643      	mov	r3, r8
10007468:	781c      	ldrb	r4, [r3, #0]
1000746a:	612e      	str	r6, [r5, #16]
1000746c:	616f      	str	r7, [r5, #20]
1000746e:	2c00      	cmp	r4, #0
10007470:	d1cd      	bne.n	1000740e <pow+0x18a>
10007472:	2300      	movs	r3, #0
10007474:	2400      	movs	r4, #0
10007476:	61ab      	str	r3, [r5, #24]
10007478:	61ec      	str	r4, [r5, #28]
1000747a:	e74c      	b.n	10007316 <pow+0x92>
1000747c:	9802      	ldr	r0, [sp, #8]
1000747e:	9903      	ldr	r1, [sp, #12]
10007480:	f002 fa0e 	bl	100098a0 <finite>
10007484:	9400      	str	r4, [sp, #0]
10007486:	9501      	str	r5, [sp, #4]
10007488:	2800      	cmp	r0, #0
1000748a:	d100      	bne.n	1000748e <pow+0x20a>
1000748c:	e715      	b.n	100072ba <pow+0x36>
1000748e:	1c30      	adds	r0, r6, #0
10007490:	1c39      	adds	r1, r7, #0
10007492:	f002 fa05 	bl	100098a0 <finite>
10007496:	9400      	str	r4, [sp, #0]
10007498:	9501      	str	r5, [sp, #4]
1000749a:	2800      	cmp	r0, #0
1000749c:	d100      	bne.n	100074a0 <pow+0x21c>
1000749e:	e70c      	b.n	100072ba <pow+0x36>
100074a0:	2304      	movs	r3, #4
100074a2:	9304      	str	r3, [sp, #16]
100074a4:	4b47      	ldr	r3, [pc, #284]	; (100075c4 <pow+0x340>)
100074a6:	ad04      	add	r5, sp, #16
100074a8:	606b      	str	r3, [r5, #4]
100074aa:	2300      	movs	r3, #0
100074ac:	622b      	str	r3, [r5, #32]
100074ae:	9b02      	ldr	r3, [sp, #8]
100074b0:	9c03      	ldr	r4, [sp, #12]
100074b2:	60ab      	str	r3, [r5, #8]
100074b4:	60ec      	str	r4, [r5, #12]
100074b6:	2300      	movs	r3, #0
100074b8:	2400      	movs	r4, #0
100074ba:	61ab      	str	r3, [r5, #24]
100074bc:	61ec      	str	r4, [r5, #28]
100074be:	4643      	mov	r3, r8
100074c0:	781b      	ldrb	r3, [r3, #0]
100074c2:	612e      	str	r6, [r5, #16]
100074c4:	616f      	str	r7, [r5, #20]
100074c6:	b25b      	sxtb	r3, r3
100074c8:	2b02      	cmp	r3, #2
100074ca:	d004      	beq.n	100074d6 <pow+0x252>
100074cc:	1c28      	adds	r0, r5, #0
100074ce:	f002 fac5 	bl	10009a5c <matherr>
100074d2:	2800      	cmp	r0, #0
100074d4:	d197      	bne.n	10007406 <pow+0x182>
100074d6:	f005 fc57 	bl	1000cd88 <__errno>
100074da:	2322      	movs	r3, #34	; 0x22
100074dc:	6003      	str	r3, [r0, #0]
100074de:	e792      	b.n	10007406 <pow+0x182>
100074e0:	2000      	movs	r0, #0
100074e2:	493a      	ldr	r1, [pc, #232]	; (100075cc <pow+0x348>)
100074e4:	61a8      	str	r0, [r5, #24]
100074e6:	61e9      	str	r1, [r5, #28]
100074e8:	2b02      	cmp	r3, #2
100074ea:	d187      	bne.n	100073fc <pow+0x178>
100074ec:	f005 fc4c 	bl	1000cd88 <__errno>
100074f0:	2321      	movs	r3, #33	; 0x21
100074f2:	6003      	str	r3, [r0, #0]
100074f4:	e787      	b.n	10007406 <pow+0x182>
100074f6:	2303      	movs	r3, #3
100074f8:	9304      	str	r3, [sp, #16]
100074fa:	4b32      	ldr	r3, [pc, #200]	; (100075c4 <pow+0x340>)
100074fc:	612e      	str	r6, [r5, #16]
100074fe:	616f      	str	r7, [r5, #20]
10007500:	606b      	str	r3, [r5, #4]
10007502:	4653      	mov	r3, sl
10007504:	622b      	str	r3, [r5, #32]
10007506:	9b02      	ldr	r3, [sp, #8]
10007508:	9c03      	ldr	r4, [sp, #12]
1000750a:	60ab      	str	r3, [r5, #8]
1000750c:	60ec      	str	r4, [r5, #12]
1000750e:	4643      	mov	r3, r8
10007510:	781b      	ldrb	r3, [r3, #0]
10007512:	b25b      	sxtb	r3, r3
10007514:	2b00      	cmp	r3, #0
10007516:	d11c      	bne.n	10007552 <pow+0x2ce>
10007518:	9802      	ldr	r0, [sp, #8]
1000751a:	9903      	ldr	r1, [sp, #12]
1000751c:	22e0      	movs	r2, #224	; 0xe0
1000751e:	4b2c      	ldr	r3, [pc, #176]	; (100075d0 <pow+0x34c>)
10007520:	0612      	lsls	r2, r2, #24
10007522:	61aa      	str	r2, [r5, #24]
10007524:	61eb      	str	r3, [r5, #28]
10007526:	2200      	movs	r2, #0
10007528:	2300      	movs	r3, #0
1000752a:	f002 fbdb 	bl	10009ce4 <__aeabi_dcmplt>
1000752e:	2800      	cmp	r0, #0
10007530:	d130      	bne.n	10007594 <pow+0x310>
10007532:	4643      	mov	r3, r8
10007534:	781b      	ldrb	r3, [r3, #0]
10007536:	b25b      	sxtb	r3, r3
10007538:	2b02      	cmp	r3, #2
1000753a:	d005      	beq.n	10007548 <pow+0x2c4>
1000753c:	1c28      	adds	r0, r5, #0
1000753e:	f002 fa8d 	bl	10009a5c <matherr>
10007542:	2800      	cmp	r0, #0
10007544:	d000      	beq.n	10007548 <pow+0x2c4>
10007546:	e6ec      	b.n	10007322 <pow+0x9e>
10007548:	f005 fc1e 	bl	1000cd88 <__errno>
1000754c:	2322      	movs	r3, #34	; 0x22
1000754e:	6003      	str	r3, [r0, #0]
10007550:	e6e7      	b.n	10007322 <pow+0x9e>
10007552:	2200      	movs	r2, #0
10007554:	9802      	ldr	r0, [sp, #8]
10007556:	9903      	ldr	r1, [sp, #12]
10007558:	4b1e      	ldr	r3, [pc, #120]	; (100075d4 <pow+0x350>)
1000755a:	61aa      	str	r2, [r5, #24]
1000755c:	61eb      	str	r3, [r5, #28]
1000755e:	2200      	movs	r2, #0
10007560:	2300      	movs	r3, #0
10007562:	f002 fbbf 	bl	10009ce4 <__aeabi_dcmplt>
10007566:	2800      	cmp	r0, #0
10007568:	d0e3      	beq.n	10007532 <pow+0x2ae>
1000756a:	2200      	movs	r2, #0
1000756c:	4b1a      	ldr	r3, [pc, #104]	; (100075d8 <pow+0x354>)
1000756e:	1c30      	adds	r0, r6, #0
10007570:	1c39      	adds	r1, r7, #0
10007572:	f004 fabb 	bl	1000baec <__aeabi_dmul>
10007576:	1c06      	adds	r6, r0, #0
10007578:	1c0f      	adds	r7, r1, #0
1000757a:	f002 fa77 	bl	10009a6c <rint>
1000757e:	1c32      	adds	r2, r6, #0
10007580:	1c3b      	adds	r3, r7, #0
10007582:	f002 fba9 	bl	10009cd8 <__aeabi_dcmpeq>
10007586:	2800      	cmp	r0, #0
10007588:	d1d3      	bne.n	10007532 <pow+0x2ae>
1000758a:	2200      	movs	r2, #0
1000758c:	4b0f      	ldr	r3, [pc, #60]	; (100075cc <pow+0x348>)
1000758e:	61aa      	str	r2, [r5, #24]
10007590:	61eb      	str	r3, [r5, #28]
10007592:	e7ce      	b.n	10007532 <pow+0x2ae>
10007594:	2200      	movs	r2, #0
10007596:	4b10      	ldr	r3, [pc, #64]	; (100075d8 <pow+0x354>)
10007598:	1c30      	adds	r0, r6, #0
1000759a:	1c39      	adds	r1, r7, #0
1000759c:	f004 faa6 	bl	1000baec <__aeabi_dmul>
100075a0:	1c06      	adds	r6, r0, #0
100075a2:	1c0f      	adds	r7, r1, #0
100075a4:	f002 fa62 	bl	10009a6c <rint>
100075a8:	1c32      	adds	r2, r6, #0
100075aa:	1c3b      	adds	r3, r7, #0
100075ac:	f002 fb94 	bl	10009cd8 <__aeabi_dcmpeq>
100075b0:	2800      	cmp	r0, #0
100075b2:	d1be      	bne.n	10007532 <pow+0x2ae>
100075b4:	22e0      	movs	r2, #224	; 0xe0
100075b6:	4b09      	ldr	r3, [pc, #36]	; (100075dc <pow+0x358>)
100075b8:	0612      	lsls	r2, r2, #24
100075ba:	61aa      	str	r2, [r5, #24]
100075bc:	61eb      	str	r3, [r5, #28]
100075be:	e7b8      	b.n	10007532 <pow+0x2ae>
100075c0:	20000865 	.word	0x20000865
100075c4:	1000d160 	.word	0x1000d160
100075c8:	3ff00000 	.word	0x3ff00000
100075cc:	fff00000 	.word	0xfff00000
100075d0:	47efffff 	.word	0x47efffff
100075d4:	7ff00000 	.word	0x7ff00000
100075d8:	3fe00000 	.word	0x3fe00000
100075dc:	c7efffff 	.word	0xc7efffff

100075e0 <sqrt>:
100075e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100075e2:	4647      	mov	r7, r8
100075e4:	b480      	push	{r7}
100075e6:	b08c      	sub	sp, #48	; 0x30
100075e8:	1c04      	adds	r4, r0, #0
100075ea:	1c0d      	adds	r5, r1, #0
100075ec:	f001 f886 	bl	100086fc <__ieee754_sqrt>
100075f0:	4b27      	ldr	r3, [pc, #156]	; (10007690 <sqrt+0xb0>)
100075f2:	1c06      	adds	r6, r0, #0
100075f4:	4698      	mov	r8, r3
100075f6:	781b      	ldrb	r3, [r3, #0]
100075f8:	1c0f      	adds	r7, r1, #0
100075fa:	b25b      	sxtb	r3, r3
100075fc:	3301      	adds	r3, #1
100075fe:	d00d      	beq.n	1000761c <sqrt+0x3c>
10007600:	1c20      	adds	r0, r4, #0
10007602:	1c29      	adds	r1, r5, #0
10007604:	f002 f9fc 	bl	10009a00 <__fpclassifyd>
10007608:	2800      	cmp	r0, #0
1000760a:	d007      	beq.n	1000761c <sqrt+0x3c>
1000760c:	1c20      	adds	r0, r4, #0
1000760e:	1c29      	adds	r1, r5, #0
10007610:	2200      	movs	r2, #0
10007612:	2300      	movs	r3, #0
10007614:	f002 fb66 	bl	10009ce4 <__aeabi_dcmplt>
10007618:	2800      	cmp	r0, #0
1000761a:	d105      	bne.n	10007628 <sqrt+0x48>
1000761c:	1c30      	adds	r0, r6, #0
1000761e:	1c39      	adds	r1, r7, #0
10007620:	b00c      	add	sp, #48	; 0x30
10007622:	bc04      	pop	{r2}
10007624:	4690      	mov	r8, r2
10007626:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007628:	2301      	movs	r3, #1
1000762a:	9302      	str	r3, [sp, #8]
1000762c:	4b19      	ldr	r3, [pc, #100]	; (10007694 <sqrt+0xb4>)
1000762e:	9406      	str	r4, [sp, #24]
10007630:	9507      	str	r5, [sp, #28]
10007632:	9303      	str	r3, [sp, #12]
10007634:	2300      	movs	r3, #0
10007636:	930a      	str	r3, [sp, #40]	; 0x28
10007638:	4643      	mov	r3, r8
1000763a:	9404      	str	r4, [sp, #16]
1000763c:	9505      	str	r5, [sp, #20]
1000763e:	781c      	ldrb	r4, [r3, #0]
10007640:	2c00      	cmp	r4, #0
10007642:	d10f      	bne.n	10007664 <sqrt+0x84>
10007644:	2300      	movs	r3, #0
10007646:	2400      	movs	r4, #0
10007648:	9308      	str	r3, [sp, #32]
1000764a:	9409      	str	r4, [sp, #36]	; 0x24
1000764c:	a802      	add	r0, sp, #8
1000764e:	f002 fa05 	bl	10009a5c <matherr>
10007652:	2800      	cmp	r0, #0
10007654:	d010      	beq.n	10007678 <sqrt+0x98>
10007656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10007658:	9301      	str	r3, [sp, #4]
1000765a:	2b00      	cmp	r3, #0
1000765c:	d111      	bne.n	10007682 <sqrt+0xa2>
1000765e:	9e08      	ldr	r6, [sp, #32]
10007660:	9f09      	ldr	r7, [sp, #36]	; 0x24
10007662:	e7db      	b.n	1000761c <sqrt+0x3c>
10007664:	2000      	movs	r0, #0
10007666:	2100      	movs	r1, #0
10007668:	1c02      	adds	r2, r0, #0
1000766a:	1c0b      	adds	r3, r1, #0
1000766c:	f003 fe00 	bl	1000b270 <__aeabi_ddiv>
10007670:	9008      	str	r0, [sp, #32]
10007672:	9109      	str	r1, [sp, #36]	; 0x24
10007674:	2c02      	cmp	r4, #2
10007676:	d1e9      	bne.n	1000764c <sqrt+0x6c>
10007678:	f005 fb86 	bl	1000cd88 <__errno>
1000767c:	2321      	movs	r3, #33	; 0x21
1000767e:	6003      	str	r3, [r0, #0]
10007680:	e7e9      	b.n	10007656 <sqrt+0x76>
10007682:	f005 fb81 	bl	1000cd88 <__errno>
10007686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10007688:	9301      	str	r3, [sp, #4]
1000768a:	6003      	str	r3, [r0, #0]
1000768c:	e7e7      	b.n	1000765e <sqrt+0x7e>
1000768e:	46c0      	nop			; (mov r8, r8)
10007690:	20000865 	.word	0x20000865
10007694:	1000d164 	.word	0x1000d164

10007698 <__ieee754_atan2>:
10007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000769a:	464f      	mov	r7, r9
1000769c:	4646      	mov	r6, r8
1000769e:	1c0c      	adds	r4, r1, #0
100076a0:	4689      	mov	r9, r1
100076a2:	4251      	negs	r1, r2
100076a4:	b4c0      	push	{r6, r7}
100076a6:	1c05      	adds	r5, r0, #0
100076a8:	4311      	orrs	r1, r2
100076aa:	0058      	lsls	r0, r3, #1
100076ac:	4e56      	ldr	r6, [pc, #344]	; (10007808 <__ieee754_atan2+0x170>)
100076ae:	0840      	lsrs	r0, r0, #1
100076b0:	0fc9      	lsrs	r1, r1, #31
100076b2:	469c      	mov	ip, r3
100076b4:	4301      	orrs	r1, r0
100076b6:	42b1      	cmp	r1, r6
100076b8:	d83d      	bhi.n	10007736 <__ieee754_atan2+0x9e>
100076ba:	0061      	lsls	r1, r4, #1
100076bc:	0849      	lsrs	r1, r1, #1
100076be:	4688      	mov	r8, r1
100076c0:	4647      	mov	r7, r8
100076c2:	4269      	negs	r1, r5
100076c4:	4329      	orrs	r1, r5
100076c6:	0fc9      	lsrs	r1, r1, #31
100076c8:	4339      	orrs	r1, r7
100076ca:	42b1      	cmp	r1, r6
100076cc:	d833      	bhi.n	10007736 <__ieee754_atan2+0x9e>
100076ce:	494f      	ldr	r1, [pc, #316]	; (1000780c <__ieee754_atan2+0x174>)
100076d0:	1859      	adds	r1, r3, r1
100076d2:	4311      	orrs	r1, r2
100076d4:	d047      	beq.n	10007766 <__ieee754_atan2+0xce>
100076d6:	2602      	movs	r6, #2
100076d8:	1799      	asrs	r1, r3, #30
100076da:	400e      	ands	r6, r1
100076dc:	0fe1      	lsrs	r1, r4, #31
100076de:	430e      	orrs	r6, r1
100076e0:	4641      	mov	r1, r8
100076e2:	4329      	orrs	r1, r5
100076e4:	d031      	beq.n	1000774a <__ieee754_atan2+0xb2>
100076e6:	1c01      	adds	r1, r0, #0
100076e8:	4311      	orrs	r1, r2
100076ea:	d036      	beq.n	1000775a <__ieee754_atan2+0xc2>
100076ec:	4946      	ldr	r1, [pc, #280]	; (10007808 <__ieee754_atan2+0x170>)
100076ee:	4288      	cmp	r0, r1
100076f0:	d049      	beq.n	10007786 <__ieee754_atan2+0xee>
100076f2:	4945      	ldr	r1, [pc, #276]	; (10007808 <__ieee754_atan2+0x170>)
100076f4:	4588      	cmp	r8, r1
100076f6:	d030      	beq.n	1000775a <__ieee754_atan2+0xc2>
100076f8:	4641      	mov	r1, r8
100076fa:	1a08      	subs	r0, r1, r0
100076fc:	1500      	asrs	r0, r0, #20
100076fe:	283c      	cmp	r0, #60	; 0x3c
10007700:	dc3b      	bgt.n	1000777a <__ieee754_atan2+0xe2>
10007702:	4661      	mov	r1, ip
10007704:	2900      	cmp	r1, #0
10007706:	db5a      	blt.n	100077be <__ieee754_atan2+0x126>
10007708:	1c28      	adds	r0, r5, #0
1000770a:	1c21      	adds	r1, r4, #0
1000770c:	f003 fdb0 	bl	1000b270 <__aeabi_ddiv>
10007710:	f7ff fd34 	bl	1000717c <fabs>
10007714:	f7ff fb46 	bl	10006da4 <atan>
10007718:	2e01      	cmp	r6, #1
1000771a:	d040      	beq.n	1000779e <__ieee754_atan2+0x106>
1000771c:	2e02      	cmp	r6, #2
1000771e:	d043      	beq.n	100077a8 <__ieee754_atan2+0x110>
10007720:	2e00      	cmp	r6, #0
10007722:	d00e      	beq.n	10007742 <__ieee754_atan2+0xaa>
10007724:	4a3a      	ldr	r2, [pc, #232]	; (10007810 <__ieee754_atan2+0x178>)
10007726:	4b3b      	ldr	r3, [pc, #236]	; (10007814 <__ieee754_atan2+0x17c>)
10007728:	f004 fc7a 	bl	1000c020 <__aeabi_dsub>
1000772c:	4a3a      	ldr	r2, [pc, #232]	; (10007818 <__ieee754_atan2+0x180>)
1000772e:	4b3b      	ldr	r3, [pc, #236]	; (1000781c <__ieee754_atan2+0x184>)
10007730:	f004 fc76 	bl	1000c020 <__aeabi_dsub>
10007734:	e005      	b.n	10007742 <__ieee754_atan2+0xaa>
10007736:	1c10      	adds	r0, r2, #0
10007738:	1c19      	adds	r1, r3, #0
1000773a:	1c2a      	adds	r2, r5, #0
1000773c:	1c23      	adds	r3, r4, #0
1000773e:	f003 fa6f 	bl	1000ac20 <__aeabi_dadd>
10007742:	bc0c      	pop	{r2, r3}
10007744:	4690      	mov	r8, r2
10007746:	4699      	mov	r9, r3
10007748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000774a:	2e02      	cmp	r6, #2
1000774c:	d018      	beq.n	10007780 <__ieee754_atan2+0xe8>
1000774e:	dc0f      	bgt.n	10007770 <__ieee754_atan2+0xd8>
10007750:	2e00      	cmp	r6, #0
10007752:	dbc8      	blt.n	100076e6 <__ieee754_atan2+0x4e>
10007754:	1c28      	adds	r0, r5, #0
10007756:	1c21      	adds	r1, r4, #0
10007758:	e7f3      	b.n	10007742 <__ieee754_atan2+0xaa>
1000775a:	464b      	mov	r3, r9
1000775c:	482e      	ldr	r0, [pc, #184]	; (10007818 <__ieee754_atan2+0x180>)
1000775e:	2b00      	cmp	r3, #0
10007760:	db1b      	blt.n	1000779a <__ieee754_atan2+0x102>
10007762:	492f      	ldr	r1, [pc, #188]	; (10007820 <__ieee754_atan2+0x188>)
10007764:	e7ed      	b.n	10007742 <__ieee754_atan2+0xaa>
10007766:	1c28      	adds	r0, r5, #0
10007768:	1c21      	adds	r1, r4, #0
1000776a:	f7ff fb1b 	bl	10006da4 <atan>
1000776e:	e7e8      	b.n	10007742 <__ieee754_atan2+0xaa>
10007770:	2e03      	cmp	r6, #3
10007772:	d1b8      	bne.n	100076e6 <__ieee754_atan2+0x4e>
10007774:	4828      	ldr	r0, [pc, #160]	; (10007818 <__ieee754_atan2+0x180>)
10007776:	492b      	ldr	r1, [pc, #172]	; (10007824 <__ieee754_atan2+0x18c>)
10007778:	e7e3      	b.n	10007742 <__ieee754_atan2+0xaa>
1000777a:	4827      	ldr	r0, [pc, #156]	; (10007818 <__ieee754_atan2+0x180>)
1000777c:	4928      	ldr	r1, [pc, #160]	; (10007820 <__ieee754_atan2+0x188>)
1000777e:	e7cb      	b.n	10007718 <__ieee754_atan2+0x80>
10007780:	4825      	ldr	r0, [pc, #148]	; (10007818 <__ieee754_atan2+0x180>)
10007782:	4926      	ldr	r1, [pc, #152]	; (1000781c <__ieee754_atan2+0x184>)
10007784:	e7dd      	b.n	10007742 <__ieee754_atan2+0xaa>
10007786:	4580      	cmp	r8, r0
10007788:	d01e      	beq.n	100077c8 <__ieee754_atan2+0x130>
1000778a:	2e01      	cmp	r6, #1
1000778c:	d02c      	beq.n	100077e8 <__ieee754_atan2+0x150>
1000778e:	dd25      	ble.n	100077dc <__ieee754_atan2+0x144>
10007790:	2e02      	cmp	r6, #2
10007792:	d0f5      	beq.n	10007780 <__ieee754_atan2+0xe8>
10007794:	2e03      	cmp	r6, #3
10007796:	d0ed      	beq.n	10007774 <__ieee754_atan2+0xdc>
10007798:	e7ab      	b.n	100076f2 <__ieee754_atan2+0x5a>
1000779a:	4923      	ldr	r1, [pc, #140]	; (10007828 <__ieee754_atan2+0x190>)
1000779c:	e7d1      	b.n	10007742 <__ieee754_atan2+0xaa>
1000779e:	2480      	movs	r4, #128	; 0x80
100077a0:	0624      	lsls	r4, r4, #24
100077a2:	190b      	adds	r3, r1, r4
100077a4:	1c19      	adds	r1, r3, #0
100077a6:	e7cc      	b.n	10007742 <__ieee754_atan2+0xaa>
100077a8:	4a19      	ldr	r2, [pc, #100]	; (10007810 <__ieee754_atan2+0x178>)
100077aa:	4b1a      	ldr	r3, [pc, #104]	; (10007814 <__ieee754_atan2+0x17c>)
100077ac:	f004 fc38 	bl	1000c020 <__aeabi_dsub>
100077b0:	1c02      	adds	r2, r0, #0
100077b2:	1c0b      	adds	r3, r1, #0
100077b4:	4818      	ldr	r0, [pc, #96]	; (10007818 <__ieee754_atan2+0x180>)
100077b6:	4919      	ldr	r1, [pc, #100]	; (1000781c <__ieee754_atan2+0x184>)
100077b8:	f004 fc32 	bl	1000c020 <__aeabi_dsub>
100077bc:	e7c1      	b.n	10007742 <__ieee754_atan2+0xaa>
100077be:	303c      	adds	r0, #60	; 0x3c
100077c0:	daa2      	bge.n	10007708 <__ieee754_atan2+0x70>
100077c2:	2000      	movs	r0, #0
100077c4:	2100      	movs	r1, #0
100077c6:	e7a7      	b.n	10007718 <__ieee754_atan2+0x80>
100077c8:	2e01      	cmp	r6, #1
100077ca:	d019      	beq.n	10007800 <__ieee754_atan2+0x168>
100077cc:	dd10      	ble.n	100077f0 <__ieee754_atan2+0x158>
100077ce:	2e02      	cmp	r6, #2
100077d0:	d013      	beq.n	100077fa <__ieee754_atan2+0x162>
100077d2:	2e03      	cmp	r6, #3
100077d4:	d1c1      	bne.n	1000775a <__ieee754_atan2+0xc2>
100077d6:	4815      	ldr	r0, [pc, #84]	; (1000782c <__ieee754_atan2+0x194>)
100077d8:	4915      	ldr	r1, [pc, #84]	; (10007830 <__ieee754_atan2+0x198>)
100077da:	e7b2      	b.n	10007742 <__ieee754_atan2+0xaa>
100077dc:	2e00      	cmp	r6, #0
100077de:	d000      	beq.n	100077e2 <__ieee754_atan2+0x14a>
100077e0:	e787      	b.n	100076f2 <__ieee754_atan2+0x5a>
100077e2:	2000      	movs	r0, #0
100077e4:	2100      	movs	r1, #0
100077e6:	e7ac      	b.n	10007742 <__ieee754_atan2+0xaa>
100077e8:	2180      	movs	r1, #128	; 0x80
100077ea:	2000      	movs	r0, #0
100077ec:	0609      	lsls	r1, r1, #24
100077ee:	e7a8      	b.n	10007742 <__ieee754_atan2+0xaa>
100077f0:	2e00      	cmp	r6, #0
100077f2:	d1b2      	bne.n	1000775a <__ieee754_atan2+0xc2>
100077f4:	4808      	ldr	r0, [pc, #32]	; (10007818 <__ieee754_atan2+0x180>)
100077f6:	490f      	ldr	r1, [pc, #60]	; (10007834 <__ieee754_atan2+0x19c>)
100077f8:	e7a3      	b.n	10007742 <__ieee754_atan2+0xaa>
100077fa:	480c      	ldr	r0, [pc, #48]	; (1000782c <__ieee754_atan2+0x194>)
100077fc:	490e      	ldr	r1, [pc, #56]	; (10007838 <__ieee754_atan2+0x1a0>)
100077fe:	e7a0      	b.n	10007742 <__ieee754_atan2+0xaa>
10007800:	4805      	ldr	r0, [pc, #20]	; (10007818 <__ieee754_atan2+0x180>)
10007802:	490e      	ldr	r1, [pc, #56]	; (1000783c <__ieee754_atan2+0x1a4>)
10007804:	e79d      	b.n	10007742 <__ieee754_atan2+0xaa>
10007806:	46c0      	nop			; (mov r8, r8)
10007808:	7ff00000 	.word	0x7ff00000
1000780c:	c0100000 	.word	0xc0100000
10007810:	33145c07 	.word	0x33145c07
10007814:	3ca1a626 	.word	0x3ca1a626
10007818:	54442d18 	.word	0x54442d18
1000781c:	400921fb 	.word	0x400921fb
10007820:	3ff921fb 	.word	0x3ff921fb
10007824:	c00921fb 	.word	0xc00921fb
10007828:	bff921fb 	.word	0xbff921fb
1000782c:	7f3321d2 	.word	0x7f3321d2
10007830:	c002d97c 	.word	0xc002d97c
10007834:	3fe921fb 	.word	0x3fe921fb
10007838:	4002d97c 	.word	0x4002d97c
1000783c:	bfe921fb 	.word	0xbfe921fb

10007840 <__ieee754_pow>:
10007840:	b5f0      	push	{r4, r5, r6, r7, lr}
10007842:	4656      	mov	r6, sl
10007844:	464d      	mov	r5, r9
10007846:	4644      	mov	r4, r8
10007848:	465f      	mov	r7, fp
1000784a:	b4f0      	push	{r4, r5, r6, r7}
1000784c:	1c1c      	adds	r4, r3, #0
1000784e:	1c13      	adds	r3, r2, #0
10007850:	0067      	lsls	r7, r4, #1
10007852:	b08d      	sub	sp, #52	; 0x34
10007854:	087f      	lsrs	r7, r7, #1
10007856:	9300      	str	r3, [sp, #0]
10007858:	9401      	str	r4, [sp, #4]
1000785a:	1c06      	adds	r6, r0, #0
1000785c:	1c0d      	adds	r5, r1, #0
1000785e:	4680      	mov	r8, r0
10007860:	4689      	mov	r9, r1
10007862:	46a2      	mov	sl, r4
10007864:	433b      	orrs	r3, r7
10007866:	d031      	beq.n	100078cc <__ieee754_pow+0x8c>
10007868:	4b61      	ldr	r3, [pc, #388]	; (100079f0 <__ieee754_pow+0x1b0>)
1000786a:	006c      	lsls	r4, r5, #1
1000786c:	0864      	lsrs	r4, r4, #1
1000786e:	429c      	cmp	r4, r3
10007870:	dc28      	bgt.n	100078c4 <__ieee754_pow+0x84>
10007872:	d025      	beq.n	100078c0 <__ieee754_pow+0x80>
10007874:	429f      	cmp	r7, r3
10007876:	dc25      	bgt.n	100078c4 <__ieee754_pow+0x84>
10007878:	4b5d      	ldr	r3, [pc, #372]	; (100079f0 <__ieee754_pow+0x1b0>)
1000787a:	429f      	cmp	r7, r3
1000787c:	d100      	bne.n	10007880 <__ieee754_pow+0x40>
1000787e:	e076      	b.n	1000796e <__ieee754_pow+0x12e>
10007880:	2300      	movs	r3, #0
10007882:	469b      	mov	fp, r3
10007884:	464b      	mov	r3, r9
10007886:	2b00      	cmp	r3, #0
10007888:	da00      	bge.n	1000788c <__ieee754_pow+0x4c>
1000788a:	e074      	b.n	10007976 <__ieee754_pow+0x136>
1000788c:	2a00      	cmp	r2, #0
1000788e:	d12c      	bne.n	100078ea <__ieee754_pow+0xaa>
10007890:	4b57      	ldr	r3, [pc, #348]	; (100079f0 <__ieee754_pow+0x1b0>)
10007892:	429f      	cmp	r7, r3
10007894:	d100      	bne.n	10007898 <__ieee754_pow+0x58>
10007896:	e08a      	b.n	100079ae <__ieee754_pow+0x16e>
10007898:	4b56      	ldr	r3, [pc, #344]	; (100079f4 <__ieee754_pow+0x1b4>)
1000789a:	429f      	cmp	r7, r3
1000789c:	d05f      	beq.n	1000795e <__ieee754_pow+0x11e>
1000789e:	2380      	movs	r3, #128	; 0x80
100078a0:	05db      	lsls	r3, r3, #23
100078a2:	459a      	cmp	sl, r3
100078a4:	d101      	bne.n	100078aa <__ieee754_pow+0x6a>
100078a6:	f000 fbd1 	bl	1000804c <__ieee754_pow+0x80c>
100078aa:	4b53      	ldr	r3, [pc, #332]	; (100079f8 <__ieee754_pow+0x1b8>)
100078ac:	459a      	cmp	sl, r3
100078ae:	d11c      	bne.n	100078ea <__ieee754_pow+0xaa>
100078b0:	464b      	mov	r3, r9
100078b2:	2b00      	cmp	r3, #0
100078b4:	db19      	blt.n	100078ea <__ieee754_pow+0xaa>
100078b6:	1c30      	adds	r0, r6, #0
100078b8:	1c29      	adds	r1, r5, #0
100078ba:	f000 ff1f 	bl	100086fc <__ieee754_sqrt>
100078be:	e007      	b.n	100078d0 <__ieee754_pow+0x90>
100078c0:	2800      	cmp	r0, #0
100078c2:	d00c      	beq.n	100078de <__ieee754_pow+0x9e>
100078c4:	4b4d      	ldr	r3, [pc, #308]	; (100079fc <__ieee754_pow+0x1bc>)
100078c6:	18e0      	adds	r0, r4, r3
100078c8:	4330      	orrs	r0, r6
100078ca:	d10a      	bne.n	100078e2 <__ieee754_pow+0xa2>
100078cc:	2000      	movs	r0, #0
100078ce:	4949      	ldr	r1, [pc, #292]	; (100079f4 <__ieee754_pow+0x1b4>)
100078d0:	b00d      	add	sp, #52	; 0x34
100078d2:	bc3c      	pop	{r2, r3, r4, r5}
100078d4:	4690      	mov	r8, r2
100078d6:	4699      	mov	r9, r3
100078d8:	46a2      	mov	sl, r4
100078da:	46ab      	mov	fp, r5
100078dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100078de:	42a7      	cmp	r7, r4
100078e0:	ddca      	ble.n	10007878 <__ieee754_pow+0x38>
100078e2:	4847      	ldr	r0, [pc, #284]	; (10007a00 <__ieee754_pow+0x1c0>)
100078e4:	f002 f8bc 	bl	10009a60 <nan>
100078e8:	e7f2      	b.n	100078d0 <__ieee754_pow+0x90>
100078ea:	1c30      	adds	r0, r6, #0
100078ec:	1c29      	adds	r1, r5, #0
100078ee:	f7ff fc45 	bl	1000717c <fabs>
100078f2:	1c0b      	adds	r3, r1, #0
100078f4:	4641      	mov	r1, r8
100078f6:	1c02      	adds	r2, r0, #0
100078f8:	2900      	cmp	r1, #0
100078fa:	d01e      	beq.n	1000793a <__ieee754_pow+0xfa>
100078fc:	0fe9      	lsrs	r1, r5, #31
100078fe:	3901      	subs	r1, #1
10007900:	4688      	mov	r8, r1
10007902:	4659      	mov	r1, fp
10007904:	4640      	mov	r0, r8
10007906:	4301      	orrs	r1, r0
10007908:	d066      	beq.n	100079d8 <__ieee754_pow+0x198>
1000790a:	493e      	ldr	r1, [pc, #248]	; (10007a04 <__ieee754_pow+0x1c4>)
1000790c:	428f      	cmp	r7, r1
1000790e:	dc00      	bgt.n	10007912 <__ieee754_pow+0xd2>
10007910:	e088      	b.n	10007a24 <__ieee754_pow+0x1e4>
10007912:	493d      	ldr	r1, [pc, #244]	; (10007a08 <__ieee754_pow+0x1c8>)
10007914:	428f      	cmp	r7, r1
10007916:	dc01      	bgt.n	1000791c <__ieee754_pow+0xdc>
10007918:	f000 fbe0 	bl	100080dc <__ieee754_pow+0x89c>
1000791c:	4b3b      	ldr	r3, [pc, #236]	; (10007a0c <__ieee754_pow+0x1cc>)
1000791e:	429c      	cmp	r4, r3
10007920:	dc00      	bgt.n	10007924 <__ieee754_pow+0xe4>
10007922:	e382      	b.n	1000802a <__ieee754_pow+0x7ea>
10007924:	4653      	mov	r3, sl
10007926:	2b00      	cmp	r3, #0
10007928:	dc00      	bgt.n	1000792c <__ieee754_pow+0xec>
1000792a:	e382      	b.n	10008032 <__ieee754_pow+0x7f2>
1000792c:	4838      	ldr	r0, [pc, #224]	; (10007a10 <__ieee754_pow+0x1d0>)
1000792e:	4939      	ldr	r1, [pc, #228]	; (10007a14 <__ieee754_pow+0x1d4>)
10007930:	1c02      	adds	r2, r0, #0
10007932:	1c0b      	adds	r3, r1, #0
10007934:	f004 f8da 	bl	1000baec <__aeabi_dmul>
10007938:	e7ca      	b.n	100078d0 <__ieee754_pow+0x90>
1000793a:	2c00      	cmp	r4, #0
1000793c:	d004      	beq.n	10007948 <__ieee754_pow+0x108>
1000793e:	482d      	ldr	r0, [pc, #180]	; (100079f4 <__ieee754_pow+0x1b4>)
10007940:	00a9      	lsls	r1, r5, #2
10007942:	0889      	lsrs	r1, r1, #2
10007944:	4281      	cmp	r1, r0
10007946:	d1d9      	bne.n	100078fc <__ieee754_pow+0xbc>
10007948:	4651      	mov	r1, sl
1000794a:	2900      	cmp	r1, #0
1000794c:	da00      	bge.n	10007950 <__ieee754_pow+0x110>
1000794e:	e3bb      	b.n	100080c8 <__ieee754_pow+0x888>
10007950:	4649      	mov	r1, r9
10007952:	2900      	cmp	r1, #0
10007954:	da00      	bge.n	10007958 <__ieee754_pow+0x118>
10007956:	e36f      	b.n	10008038 <__ieee754_pow+0x7f8>
10007958:	1c10      	adds	r0, r2, #0
1000795a:	1c19      	adds	r1, r3, #0
1000795c:	e7b8      	b.n	100078d0 <__ieee754_pow+0x90>
1000795e:	4653      	mov	r3, sl
10007960:	2b00      	cmp	r3, #0
10007962:	da01      	bge.n	10007968 <__ieee754_pow+0x128>
10007964:	f000 fc20 	bl	100081a8 <__ieee754_pow+0x968>
10007968:	1c30      	adds	r0, r6, #0
1000796a:	1c29      	adds	r1, r5, #0
1000796c:	e7b0      	b.n	100078d0 <__ieee754_pow+0x90>
1000796e:	2a00      	cmp	r2, #0
10007970:	d100      	bne.n	10007974 <__ieee754_pow+0x134>
10007972:	e785      	b.n	10007880 <__ieee754_pow+0x40>
10007974:	e7a6      	b.n	100078c4 <__ieee754_pow+0x84>
10007976:	4b28      	ldr	r3, [pc, #160]	; (10007a18 <__ieee754_pow+0x1d8>)
10007978:	429f      	cmp	r7, r3
1000797a:	dc2a      	bgt.n	100079d2 <__ieee754_pow+0x192>
1000797c:	4b23      	ldr	r3, [pc, #140]	; (10007a0c <__ieee754_pow+0x1cc>)
1000797e:	429f      	cmp	r7, r3
10007980:	dc00      	bgt.n	10007984 <__ieee754_pow+0x144>
10007982:	e783      	b.n	1000788c <__ieee754_pow+0x4c>
10007984:	4925      	ldr	r1, [pc, #148]	; (10007a1c <__ieee754_pow+0x1dc>)
10007986:	1538      	asrs	r0, r7, #20
10007988:	4288      	cmp	r0, r1
1000798a:	dc01      	bgt.n	10007990 <__ieee754_pow+0x150>
1000798c:	f000 fc27 	bl	100081de <__ieee754_pow+0x99e>
10007990:	4b23      	ldr	r3, [pc, #140]	; (10007a20 <__ieee754_pow+0x1e0>)
10007992:	9900      	ldr	r1, [sp, #0]
10007994:	1a1b      	subs	r3, r3, r0
10007996:	40d9      	lsrs	r1, r3
10007998:	1c08      	adds	r0, r1, #0
1000799a:	4098      	lsls	r0, r3
1000799c:	4290      	cmp	r0, r2
1000799e:	d000      	beq.n	100079a2 <__ieee754_pow+0x162>
100079a0:	e774      	b.n	1000788c <__ieee754_pow+0x4c>
100079a2:	2301      	movs	r3, #1
100079a4:	4019      	ands	r1, r3
100079a6:	3301      	adds	r3, #1
100079a8:	1a5b      	subs	r3, r3, r1
100079aa:	469b      	mov	fp, r3
100079ac:	e76e      	b.n	1000788c <__ieee754_pow+0x4c>
100079ae:	4b13      	ldr	r3, [pc, #76]	; (100079fc <__ieee754_pow+0x1bc>)
100079b0:	18e0      	adds	r0, r4, r3
100079b2:	4306      	orrs	r6, r0
100079b4:	d100      	bne.n	100079b8 <__ieee754_pow+0x178>
100079b6:	e789      	b.n	100078cc <__ieee754_pow+0x8c>
100079b8:	4b14      	ldr	r3, [pc, #80]	; (10007a0c <__ieee754_pow+0x1cc>)
100079ba:	429c      	cmp	r4, r3
100079bc:	dc00      	bgt.n	100079c0 <__ieee754_pow+0x180>
100079be:	e375      	b.n	100080ac <__ieee754_pow+0x86c>
100079c0:	4653      	mov	r3, sl
100079c2:	2b00      	cmp	r3, #0
100079c4:	da00      	bge.n	100079c8 <__ieee754_pow+0x188>
100079c6:	e334      	b.n	10008032 <__ieee754_pow+0x7f2>
100079c8:	9b00      	ldr	r3, [sp, #0]
100079ca:	9c01      	ldr	r4, [sp, #4]
100079cc:	1c18      	adds	r0, r3, #0
100079ce:	1c21      	adds	r1, r4, #0
100079d0:	e77e      	b.n	100078d0 <__ieee754_pow+0x90>
100079d2:	2302      	movs	r3, #2
100079d4:	469b      	mov	fp, r3
100079d6:	e759      	b.n	1000788c <__ieee754_pow+0x4c>
100079d8:	1c30      	adds	r0, r6, #0
100079da:	1c29      	adds	r1, r5, #0
100079dc:	1c32      	adds	r2, r6, #0
100079de:	1c2b      	adds	r3, r5, #0
100079e0:	f004 fb1e 	bl	1000c020 <__aeabi_dsub>
100079e4:	1c02      	adds	r2, r0, #0
100079e6:	1c0b      	adds	r3, r1, #0
100079e8:	f003 fc42 	bl	1000b270 <__aeabi_ddiv>
100079ec:	e770      	b.n	100078d0 <__ieee754_pow+0x90>
100079ee:	46c0      	nop			; (mov r8, r8)
100079f0:	7ff00000 	.word	0x7ff00000
100079f4:	3ff00000 	.word	0x3ff00000
100079f8:	3fe00000 	.word	0x3fe00000
100079fc:	c0100000 	.word	0xc0100000
10007a00:	1000d168 	.word	0x1000d168
10007a04:	41e00000 	.word	0x41e00000
10007a08:	43f00000 	.word	0x43f00000
10007a0c:	3fefffff 	.word	0x3fefffff
10007a10:	8800759c 	.word	0x8800759c
10007a14:	7e37e43c 	.word	0x7e37e43c
10007a18:	433fffff 	.word	0x433fffff
10007a1c:	00000413 	.word	0x00000413
10007a20:	00000433 	.word	0x00000433
10007a24:	49e9      	ldr	r1, [pc, #932]	; (10007dcc <__ieee754_pow+0x58c>)
10007a26:	2000      	movs	r0, #0
10007a28:	428c      	cmp	r4, r1
10007a2a:	dc09      	bgt.n	10007a40 <__ieee754_pow+0x200>
10007a2c:	1c10      	adds	r0, r2, #0
10007a2e:	1c19      	adds	r1, r3, #0
10007a30:	2200      	movs	r2, #0
10007a32:	4be7      	ldr	r3, [pc, #924]	; (10007dd0 <__ieee754_pow+0x590>)
10007a34:	f004 f85a 	bl	1000baec <__aeabi_dmul>
10007a38:	1c02      	adds	r2, r0, #0
10007a3a:	2035      	movs	r0, #53	; 0x35
10007a3c:	1c0c      	adds	r4, r1, #0
10007a3e:	4240      	negs	r0, r0
10007a40:	4de4      	ldr	r5, [pc, #912]	; (10007dd4 <__ieee754_pow+0x594>)
10007a42:	1521      	asrs	r1, r4, #20
10007a44:	46ac      	mov	ip, r5
10007a46:	4461      	add	r1, ip
10007a48:	468a      	mov	sl, r1
10007a4a:	0324      	lsls	r4, r4, #12
10007a4c:	4de2      	ldr	r5, [pc, #904]	; (10007dd8 <__ieee754_pow+0x598>)
10007a4e:	49e3      	ldr	r1, [pc, #908]	; (10007ddc <__ieee754_pow+0x59c>)
10007a50:	0b24      	lsrs	r4, r4, #12
10007a52:	4482      	add	sl, r0
10007a54:	4325      	orrs	r5, r4
10007a56:	428c      	cmp	r4, r1
10007a58:	dc00      	bgt.n	10007a5c <__ieee754_pow+0x21c>
10007a5a:	e33c      	b.n	100080d6 <__ieee754_pow+0x896>
10007a5c:	49e0      	ldr	r1, [pc, #896]	; (10007de0 <__ieee754_pow+0x5a0>)
10007a5e:	428c      	cmp	r4, r1
10007a60:	dc01      	bgt.n	10007a66 <__ieee754_pow+0x226>
10007a62:	f000 fc21 	bl	100082a8 <__ieee754_pow+0xa68>
10007a66:	2101      	movs	r1, #1
10007a68:	468c      	mov	ip, r1
10007a6a:	49de      	ldr	r1, [pc, #888]	; (10007de4 <__ieee754_pow+0x5a4>)
10007a6c:	44e2      	add	sl, ip
10007a6e:	468c      	mov	ip, r1
10007a70:	2400      	movs	r4, #0
10007a72:	2100      	movs	r1, #0
10007a74:	4465      	add	r5, ip
10007a76:	00cb      	lsls	r3, r1, #3
10007a78:	4699      	mov	r9, r3
10007a7a:	1c16      	adds	r6, r2, #0
10007a7c:	1c2f      	adds	r7, r5, #0
10007a7e:	4bda      	ldr	r3, [pc, #872]	; (10007de8 <__ieee754_pow+0x5a8>)
10007a80:	1c30      	adds	r0, r6, #0
10007a82:	444b      	add	r3, r9
10007a84:	681a      	ldr	r2, [r3, #0]
10007a86:	685b      	ldr	r3, [r3, #4]
10007a88:	1c29      	adds	r1, r5, #0
10007a8a:	9606      	str	r6, [sp, #24]
10007a8c:	9707      	str	r7, [sp, #28]
10007a8e:	9208      	str	r2, [sp, #32]
10007a90:	9309      	str	r3, [sp, #36]	; 0x24
10007a92:	f004 fac5 	bl	1000c020 <__aeabi_dsub>
10007a96:	9a08      	ldr	r2, [sp, #32]
10007a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
10007a9a:	1c06      	adds	r6, r0, #0
10007a9c:	1c0f      	adds	r7, r1, #0
10007a9e:	9806      	ldr	r0, [sp, #24]
10007aa0:	9907      	ldr	r1, [sp, #28]
10007aa2:	f003 f8bd 	bl	1000ac20 <__aeabi_dadd>
10007aa6:	1c02      	adds	r2, r0, #0
10007aa8:	1c0b      	adds	r3, r1, #0
10007aaa:	2000      	movs	r0, #0
10007aac:	49ca      	ldr	r1, [pc, #808]	; (10007dd8 <__ieee754_pow+0x598>)
10007aae:	f003 fbdf 	bl	1000b270 <__aeabi_ddiv>
10007ab2:	1c02      	adds	r2, r0, #0
10007ab4:	1c0b      	adds	r3, r1, #0
10007ab6:	1c30      	adds	r0, r6, #0
10007ab8:	1c39      	adds	r1, r7, #0
10007aba:	920a      	str	r2, [sp, #40]	; 0x28
10007abc:	930b      	str	r3, [sp, #44]	; 0x2c
10007abe:	f004 f815 	bl	1000baec <__aeabi_dmul>
10007ac2:	1c0a      	adds	r2, r1, #0
10007ac4:	1c01      	adds	r1, r0, #0
10007ac6:	1c13      	adds	r3, r2, #0
10007ac8:	9104      	str	r1, [sp, #16]
10007aca:	9205      	str	r2, [sp, #20]
10007acc:	2200      	movs	r2, #0
10007ace:	9202      	str	r2, [sp, #8]
10007ad0:	9303      	str	r3, [sp, #12]
10007ad2:	2380      	movs	r3, #128	; 0x80
10007ad4:	106d      	asrs	r5, r5, #1
10007ad6:	059b      	lsls	r3, r3, #22
10007ad8:	431d      	orrs	r5, r3
10007ada:	2380      	movs	r3, #128	; 0x80
10007adc:	2000      	movs	r0, #0
10007ade:	031b      	lsls	r3, r3, #12
10007ae0:	18eb      	adds	r3, r5, r3
10007ae2:	1919      	adds	r1, r3, r4
10007ae4:	1c0d      	adds	r5, r1, #0
10007ae6:	1c04      	adds	r4, r0, #0
10007ae8:	9802      	ldr	r0, [sp, #8]
10007aea:	9903      	ldr	r1, [sp, #12]
10007aec:	1c22      	adds	r2, r4, #0
10007aee:	1c2b      	adds	r3, r5, #0
10007af0:	f003 fffc 	bl	1000baec <__aeabi_dmul>
10007af4:	1c02      	adds	r2, r0, #0
10007af6:	1c0b      	adds	r3, r1, #0
10007af8:	1c30      	adds	r0, r6, #0
10007afa:	1c39      	adds	r1, r7, #0
10007afc:	f004 fa90 	bl	1000c020 <__aeabi_dsub>
10007b00:	9a08      	ldr	r2, [sp, #32]
10007b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
10007b04:	1c06      	adds	r6, r0, #0
10007b06:	1c0f      	adds	r7, r1, #0
10007b08:	1c20      	adds	r0, r4, #0
10007b0a:	1c29      	adds	r1, r5, #0
10007b0c:	f004 fa88 	bl	1000c020 <__aeabi_dsub>
10007b10:	1c02      	adds	r2, r0, #0
10007b12:	1c0b      	adds	r3, r1, #0
10007b14:	9806      	ldr	r0, [sp, #24]
10007b16:	9907      	ldr	r1, [sp, #28]
10007b18:	f004 fa82 	bl	1000c020 <__aeabi_dsub>
10007b1c:	1c02      	adds	r2, r0, #0
10007b1e:	1c0b      	adds	r3, r1, #0
10007b20:	9802      	ldr	r0, [sp, #8]
10007b22:	9903      	ldr	r1, [sp, #12]
10007b24:	f003 ffe2 	bl	1000baec <__aeabi_dmul>
10007b28:	1c02      	adds	r2, r0, #0
10007b2a:	1c0b      	adds	r3, r1, #0
10007b2c:	1c30      	adds	r0, r6, #0
10007b2e:	1c39      	adds	r1, r7, #0
10007b30:	f004 fa76 	bl	1000c020 <__aeabi_dsub>
10007b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10007b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10007b38:	f003 ffd8 	bl	1000baec <__aeabi_dmul>
10007b3c:	9a04      	ldr	r2, [sp, #16]
10007b3e:	9b05      	ldr	r3, [sp, #20]
10007b40:	9006      	str	r0, [sp, #24]
10007b42:	9107      	str	r1, [sp, #28]
10007b44:	1c10      	adds	r0, r2, #0
10007b46:	1c19      	adds	r1, r3, #0
10007b48:	f003 ffd0 	bl	1000baec <__aeabi_dmul>
10007b4c:	1c04      	adds	r4, r0, #0
10007b4e:	1c0d      	adds	r5, r1, #0
10007b50:	1c22      	adds	r2, r4, #0
10007b52:	1c2b      	adds	r3, r5, #0
10007b54:	f003 ffca 	bl	1000baec <__aeabi_dmul>
10007b58:	4aa4      	ldr	r2, [pc, #656]	; (10007dec <__ieee754_pow+0x5ac>)
10007b5a:	1c06      	adds	r6, r0, #0
10007b5c:	1c0f      	adds	r7, r1, #0
10007b5e:	1c20      	adds	r0, r4, #0
10007b60:	1c29      	adds	r1, r5, #0
10007b62:	4ba3      	ldr	r3, [pc, #652]	; (10007df0 <__ieee754_pow+0x5b0>)
10007b64:	f003 ffc2 	bl	1000baec <__aeabi_dmul>
10007b68:	4aa2      	ldr	r2, [pc, #648]	; (10007df4 <__ieee754_pow+0x5b4>)
10007b6a:	4ba3      	ldr	r3, [pc, #652]	; (10007df8 <__ieee754_pow+0x5b8>)
10007b6c:	f003 f858 	bl	1000ac20 <__aeabi_dadd>
10007b70:	1c22      	adds	r2, r4, #0
10007b72:	1c2b      	adds	r3, r5, #0
10007b74:	f003 ffba 	bl	1000baec <__aeabi_dmul>
10007b78:	4aa0      	ldr	r2, [pc, #640]	; (10007dfc <__ieee754_pow+0x5bc>)
10007b7a:	4ba1      	ldr	r3, [pc, #644]	; (10007e00 <__ieee754_pow+0x5c0>)
10007b7c:	f003 f850 	bl	1000ac20 <__aeabi_dadd>
10007b80:	1c22      	adds	r2, r4, #0
10007b82:	1c2b      	adds	r3, r5, #0
10007b84:	f003 ffb2 	bl	1000baec <__aeabi_dmul>
10007b88:	4a9e      	ldr	r2, [pc, #632]	; (10007e04 <__ieee754_pow+0x5c4>)
10007b8a:	4b9f      	ldr	r3, [pc, #636]	; (10007e08 <__ieee754_pow+0x5c8>)
10007b8c:	f003 f848 	bl	1000ac20 <__aeabi_dadd>
10007b90:	1c22      	adds	r2, r4, #0
10007b92:	1c2b      	adds	r3, r5, #0
10007b94:	f003 ffaa 	bl	1000baec <__aeabi_dmul>
10007b98:	4a9c      	ldr	r2, [pc, #624]	; (10007e0c <__ieee754_pow+0x5cc>)
10007b9a:	4b9d      	ldr	r3, [pc, #628]	; (10007e10 <__ieee754_pow+0x5d0>)
10007b9c:	f003 f840 	bl	1000ac20 <__aeabi_dadd>
10007ba0:	1c22      	adds	r2, r4, #0
10007ba2:	1c2b      	adds	r3, r5, #0
10007ba4:	f003 ffa2 	bl	1000baec <__aeabi_dmul>
10007ba8:	4a9a      	ldr	r2, [pc, #616]	; (10007e14 <__ieee754_pow+0x5d4>)
10007baa:	4b9b      	ldr	r3, [pc, #620]	; (10007e18 <__ieee754_pow+0x5d8>)
10007bac:	f003 f838 	bl	1000ac20 <__aeabi_dadd>
10007bb0:	1c02      	adds	r2, r0, #0
10007bb2:	1c0b      	adds	r3, r1, #0
10007bb4:	1c30      	adds	r0, r6, #0
10007bb6:	1c39      	adds	r1, r7, #0
10007bb8:	f003 ff98 	bl	1000baec <__aeabi_dmul>
10007bbc:	9a04      	ldr	r2, [sp, #16]
10007bbe:	9b05      	ldr	r3, [sp, #20]
10007bc0:	1c04      	adds	r4, r0, #0
10007bc2:	1c0d      	adds	r5, r1, #0
10007bc4:	9802      	ldr	r0, [sp, #8]
10007bc6:	9903      	ldr	r1, [sp, #12]
10007bc8:	f003 f82a 	bl	1000ac20 <__aeabi_dadd>
10007bcc:	9a06      	ldr	r2, [sp, #24]
10007bce:	9b07      	ldr	r3, [sp, #28]
10007bd0:	f003 ff8c 	bl	1000baec <__aeabi_dmul>
10007bd4:	1c22      	adds	r2, r4, #0
10007bd6:	1c2b      	adds	r3, r5, #0
10007bd8:	f003 f822 	bl	1000ac20 <__aeabi_dadd>
10007bdc:	9b02      	ldr	r3, [sp, #8]
10007bde:	9c03      	ldr	r4, [sp, #12]
10007be0:	1c06      	adds	r6, r0, #0
10007be2:	1c0f      	adds	r7, r1, #0
10007be4:	1c1a      	adds	r2, r3, #0
10007be6:	1c18      	adds	r0, r3, #0
10007be8:	1c21      	adds	r1, r4, #0
10007bea:	1c23      	adds	r3, r4, #0
10007bec:	f003 ff7e 	bl	1000baec <__aeabi_dmul>
10007bf0:	1c0a      	adds	r2, r1, #0
10007bf2:	1c01      	adds	r1, r0, #0
10007bf4:	4b89      	ldr	r3, [pc, #548]	; (10007e1c <__ieee754_pow+0x5dc>)
10007bf6:	9108      	str	r1, [sp, #32]
10007bf8:	9209      	str	r2, [sp, #36]	; 0x24
10007bfa:	1c11      	adds	r1, r2, #0
10007bfc:	2200      	movs	r2, #0
10007bfe:	f003 f80f 	bl	1000ac20 <__aeabi_dadd>
10007c02:	1c32      	adds	r2, r6, #0
10007c04:	1c3b      	adds	r3, r7, #0
10007c06:	f003 f80b 	bl	1000ac20 <__aeabi_dadd>
10007c0a:	2400      	movs	r4, #0
10007c0c:	1c0d      	adds	r5, r1, #0
10007c0e:	9802      	ldr	r0, [sp, #8]
10007c10:	9903      	ldr	r1, [sp, #12]
10007c12:	1c22      	adds	r2, r4, #0
10007c14:	1c2b      	adds	r3, r5, #0
10007c16:	f003 ff69 	bl	1000baec <__aeabi_dmul>
10007c1a:	1c22      	adds	r2, r4, #0
10007c1c:	1c2b      	adds	r3, r5, #0
10007c1e:	9002      	str	r0, [sp, #8]
10007c20:	9103      	str	r1, [sp, #12]
10007c22:	9806      	ldr	r0, [sp, #24]
10007c24:	9907      	ldr	r1, [sp, #28]
10007c26:	f003 ff61 	bl	1000baec <__aeabi_dmul>
10007c2a:	2200      	movs	r2, #0
10007c2c:	9006      	str	r0, [sp, #24]
10007c2e:	9107      	str	r1, [sp, #28]
10007c30:	4b7a      	ldr	r3, [pc, #488]	; (10007e1c <__ieee754_pow+0x5dc>)
10007c32:	1c20      	adds	r0, r4, #0
10007c34:	1c29      	adds	r1, r5, #0
10007c36:	f004 f9f3 	bl	1000c020 <__aeabi_dsub>
10007c3a:	9a08      	ldr	r2, [sp, #32]
10007c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10007c3e:	f004 f9ef 	bl	1000c020 <__aeabi_dsub>
10007c42:	1c02      	adds	r2, r0, #0
10007c44:	1c0b      	adds	r3, r1, #0
10007c46:	1c30      	adds	r0, r6, #0
10007c48:	1c39      	adds	r1, r7, #0
10007c4a:	f004 f9e9 	bl	1000c020 <__aeabi_dsub>
10007c4e:	9a04      	ldr	r2, [sp, #16]
10007c50:	9b05      	ldr	r3, [sp, #20]
10007c52:	f003 ff4b 	bl	1000baec <__aeabi_dmul>
10007c56:	1c02      	adds	r2, r0, #0
10007c58:	1c0b      	adds	r3, r1, #0
10007c5a:	9806      	ldr	r0, [sp, #24]
10007c5c:	9907      	ldr	r1, [sp, #28]
10007c5e:	f002 ffdf 	bl	1000ac20 <__aeabi_dadd>
10007c62:	1c06      	adds	r6, r0, #0
10007c64:	1c0f      	adds	r7, r1, #0
10007c66:	9802      	ldr	r0, [sp, #8]
10007c68:	9903      	ldr	r1, [sp, #12]
10007c6a:	1c32      	adds	r2, r6, #0
10007c6c:	1c3b      	adds	r3, r7, #0
10007c6e:	f002 ffd7 	bl	1000ac20 <__aeabi_dadd>
10007c72:	2400      	movs	r4, #0
10007c74:	22e0      	movs	r2, #224	; 0xe0
10007c76:	1c20      	adds	r0, r4, #0
10007c78:	0612      	lsls	r2, r2, #24
10007c7a:	4b69      	ldr	r3, [pc, #420]	; (10007e20 <__ieee754_pow+0x5e0>)
10007c7c:	1c0d      	adds	r5, r1, #0
10007c7e:	f003 ff35 	bl	1000baec <__aeabi_dmul>
10007c82:	4a68      	ldr	r2, [pc, #416]	; (10007e24 <__ieee754_pow+0x5e4>)
10007c84:	9006      	str	r0, [sp, #24]
10007c86:	9107      	str	r1, [sp, #28]
10007c88:	4b67      	ldr	r3, [pc, #412]	; (10007e28 <__ieee754_pow+0x5e8>)
10007c8a:	1c20      	adds	r0, r4, #0
10007c8c:	1c29      	adds	r1, r5, #0
10007c8e:	f003 ff2d 	bl	1000baec <__aeabi_dmul>
10007c92:	9a02      	ldr	r2, [sp, #8]
10007c94:	9b03      	ldr	r3, [sp, #12]
10007c96:	9004      	str	r0, [sp, #16]
10007c98:	9105      	str	r1, [sp, #20]
10007c9a:	1c20      	adds	r0, r4, #0
10007c9c:	1c29      	adds	r1, r5, #0
10007c9e:	f004 f9bf 	bl	1000c020 <__aeabi_dsub>
10007ca2:	1c02      	adds	r2, r0, #0
10007ca4:	1c0b      	adds	r3, r1, #0
10007ca6:	1c30      	adds	r0, r6, #0
10007ca8:	1c39      	adds	r1, r7, #0
10007caa:	f004 f9b9 	bl	1000c020 <__aeabi_dsub>
10007cae:	4a5f      	ldr	r2, [pc, #380]	; (10007e2c <__ieee754_pow+0x5ec>)
10007cb0:	4b5b      	ldr	r3, [pc, #364]	; (10007e20 <__ieee754_pow+0x5e0>)
10007cb2:	f003 ff1b 	bl	1000baec <__aeabi_dmul>
10007cb6:	1c02      	adds	r2, r0, #0
10007cb8:	1c0b      	adds	r3, r1, #0
10007cba:	9804      	ldr	r0, [sp, #16]
10007cbc:	9905      	ldr	r1, [sp, #20]
10007cbe:	f002 ffaf 	bl	1000ac20 <__aeabi_dadd>
10007cc2:	4b5b      	ldr	r3, [pc, #364]	; (10007e30 <__ieee754_pow+0x5f0>)
10007cc4:	444b      	add	r3, r9
10007cc6:	681a      	ldr	r2, [r3, #0]
10007cc8:	685b      	ldr	r3, [r3, #4]
10007cca:	f002 ffa9 	bl	1000ac20 <__aeabi_dadd>
10007cce:	1c06      	adds	r6, r0, #0
10007cd0:	4650      	mov	r0, sl
10007cd2:	1c0f      	adds	r7, r1, #0
10007cd4:	f004 fd54 	bl	1000c780 <__aeabi_i2d>
10007cd8:	1c04      	adds	r4, r0, #0
10007cda:	1c0d      	adds	r5, r1, #0
10007cdc:	9806      	ldr	r0, [sp, #24]
10007cde:	9907      	ldr	r1, [sp, #28]
10007ce0:	4b54      	ldr	r3, [pc, #336]	; (10007e34 <__ieee754_pow+0x5f4>)
10007ce2:	444b      	add	r3, r9
10007ce4:	681a      	ldr	r2, [r3, #0]
10007ce6:	685b      	ldr	r3, [r3, #4]
10007ce8:	9204      	str	r2, [sp, #16]
10007cea:	9305      	str	r3, [sp, #20]
10007cec:	1c32      	adds	r2, r6, #0
10007cee:	1c3b      	adds	r3, r7, #0
10007cf0:	f002 ff96 	bl	1000ac20 <__aeabi_dadd>
10007cf4:	9a04      	ldr	r2, [sp, #16]
10007cf6:	9b05      	ldr	r3, [sp, #20]
10007cf8:	f002 ff92 	bl	1000ac20 <__aeabi_dadd>
10007cfc:	1c22      	adds	r2, r4, #0
10007cfe:	1c2b      	adds	r3, r5, #0
10007d00:	f002 ff8e 	bl	1000ac20 <__aeabi_dadd>
10007d04:	2000      	movs	r0, #0
10007d06:	1c22      	adds	r2, r4, #0
10007d08:	1c2b      	adds	r3, r5, #0
10007d0a:	9002      	str	r0, [sp, #8]
10007d0c:	9103      	str	r1, [sp, #12]
10007d0e:	f004 f987 	bl	1000c020 <__aeabi_dsub>
10007d12:	9a04      	ldr	r2, [sp, #16]
10007d14:	9b05      	ldr	r3, [sp, #20]
10007d16:	f004 f983 	bl	1000c020 <__aeabi_dsub>
10007d1a:	9a06      	ldr	r2, [sp, #24]
10007d1c:	9b07      	ldr	r3, [sp, #28]
10007d1e:	f004 f97f 	bl	1000c020 <__aeabi_dsub>
10007d22:	1c02      	adds	r2, r0, #0
10007d24:	1c0b      	adds	r3, r1, #0
10007d26:	1c30      	adds	r0, r6, #0
10007d28:	1c39      	adds	r1, r7, #0
10007d2a:	f004 f979 	bl	1000c020 <__aeabi_dsub>
10007d2e:	9004      	str	r0, [sp, #16]
10007d30:	9105      	str	r1, [sp, #20]
10007d32:	465b      	mov	r3, fp
10007d34:	4642      	mov	r2, r8
10007d36:	3b01      	subs	r3, #1
10007d38:	4313      	orrs	r3, r2
10007d3a:	d000      	beq.n	10007d3e <__ieee754_pow+0x4fe>
10007d3c:	e1b1      	b.n	100080a2 <__ieee754_pow+0x862>
10007d3e:	2300      	movs	r3, #0
10007d40:	4c3d      	ldr	r4, [pc, #244]	; (10007e38 <__ieee754_pow+0x5f8>)
10007d42:	9306      	str	r3, [sp, #24]
10007d44:	9407      	str	r4, [sp, #28]
10007d46:	9b00      	ldr	r3, [sp, #0]
10007d48:	9c01      	ldr	r4, [sp, #4]
10007d4a:	2600      	movs	r6, #0
10007d4c:	1c18      	adds	r0, r3, #0
10007d4e:	1c21      	adds	r1, r4, #0
10007d50:	1c23      	adds	r3, r4, #0
10007d52:	1c32      	adds	r2, r6, #0
10007d54:	f004 f964 	bl	1000c020 <__aeabi_dsub>
10007d58:	9a02      	ldr	r2, [sp, #8]
10007d5a:	9b03      	ldr	r3, [sp, #12]
10007d5c:	f003 fec6 	bl	1000baec <__aeabi_dmul>
10007d60:	9a04      	ldr	r2, [sp, #16]
10007d62:	9b05      	ldr	r3, [sp, #20]
10007d64:	1c0d      	adds	r5, r1, #0
10007d66:	1c27      	adds	r7, r4, #0
10007d68:	1c04      	adds	r4, r0, #0
10007d6a:	9800      	ldr	r0, [sp, #0]
10007d6c:	9901      	ldr	r1, [sp, #4]
10007d6e:	f003 febd 	bl	1000baec <__aeabi_dmul>
10007d72:	1c02      	adds	r2, r0, #0
10007d74:	1c0b      	adds	r3, r1, #0
10007d76:	1c20      	adds	r0, r4, #0
10007d78:	1c29      	adds	r1, r5, #0
10007d7a:	f002 ff51 	bl	1000ac20 <__aeabi_dadd>
10007d7e:	9a02      	ldr	r2, [sp, #8]
10007d80:	9b03      	ldr	r3, [sp, #12]
10007d82:	9000      	str	r0, [sp, #0]
10007d84:	9101      	str	r1, [sp, #4]
10007d86:	1c30      	adds	r0, r6, #0
10007d88:	1c39      	adds	r1, r7, #0
10007d8a:	f003 feaf 	bl	1000baec <__aeabi_dmul>
10007d8e:	1c04      	adds	r4, r0, #0
10007d90:	1c0d      	adds	r5, r1, #0
10007d92:	9800      	ldr	r0, [sp, #0]
10007d94:	9901      	ldr	r1, [sp, #4]
10007d96:	1c2b      	adds	r3, r5, #0
10007d98:	1c22      	adds	r2, r4, #0
10007d9a:	f002 ff41 	bl	1000ac20 <__aeabi_dadd>
10007d9e:	4b27      	ldr	r3, [pc, #156]	; (10007e3c <__ieee754_pow+0x5fc>)
10007da0:	4682      	mov	sl, r0
10007da2:	4689      	mov	r9, r1
10007da4:	4299      	cmp	r1, r3
10007da6:	dc00      	bgt.n	10007daa <__ieee754_pow+0x56a>
10007da8:	e158      	b.n	1000805c <__ieee754_pow+0x81c>
10007daa:	4b25      	ldr	r3, [pc, #148]	; (10007e40 <__ieee754_pow+0x600>)
10007dac:	444b      	add	r3, r9
10007dae:	4303      	orrs	r3, r0
10007db0:	d000      	beq.n	10007db4 <__ieee754_pow+0x574>
10007db2:	e201      	b.n	100081b8 <__ieee754_pow+0x978>
10007db4:	9800      	ldr	r0, [sp, #0]
10007db6:	9901      	ldr	r1, [sp, #4]
10007db8:	4a22      	ldr	r2, [pc, #136]	; (10007e44 <__ieee754_pow+0x604>)
10007dba:	4b23      	ldr	r3, [pc, #140]	; (10007e48 <__ieee754_pow+0x608>)
10007dbc:	f002 ff30 	bl	1000ac20 <__aeabi_dadd>
10007dc0:	1c22      	adds	r2, r4, #0
10007dc2:	1c06      	adds	r6, r0, #0
10007dc4:	1c0f      	adds	r7, r1, #0
10007dc6:	1c2b      	adds	r3, r5, #0
10007dc8:	e040      	b.n	10007e4c <__ieee754_pow+0x60c>
10007dca:	46c0      	nop			; (mov r8, r8)
10007dcc:	000fffff 	.word	0x000fffff
10007dd0:	43400000 	.word	0x43400000
10007dd4:	fffffc01 	.word	0xfffffc01
10007dd8:	3ff00000 	.word	0x3ff00000
10007ddc:	0003988e 	.word	0x0003988e
10007de0:	000bb679 	.word	0x000bb679
10007de4:	fff00000 	.word	0xfff00000
10007de8:	1000d190 	.word	0x1000d190
10007dec:	4a454eef 	.word	0x4a454eef
10007df0:	3fca7e28 	.word	0x3fca7e28
10007df4:	93c9db65 	.word	0x93c9db65
10007df8:	3fcd864a 	.word	0x3fcd864a
10007dfc:	a91d4101 	.word	0xa91d4101
10007e00:	3fd17460 	.word	0x3fd17460
10007e04:	518f264d 	.word	0x518f264d
10007e08:	3fd55555 	.word	0x3fd55555
10007e0c:	db6fabff 	.word	0xdb6fabff
10007e10:	3fdb6db6 	.word	0x3fdb6db6
10007e14:	33333303 	.word	0x33333303
10007e18:	3fe33333 	.word	0x3fe33333
10007e1c:	40080000 	.word	0x40080000
10007e20:	3feec709 	.word	0x3feec709
10007e24:	145b01f5 	.word	0x145b01f5
10007e28:	be3e2fe0 	.word	0xbe3e2fe0
10007e2c:	dc3a03fd 	.word	0xdc3a03fd
10007e30:	1000d180 	.word	0x1000d180
10007e34:	1000d170 	.word	0x1000d170
10007e38:	bff00000 	.word	0xbff00000
10007e3c:	408fffff 	.word	0x408fffff
10007e40:	bf700000 	.word	0xbf700000
10007e44:	652b82fe 	.word	0x652b82fe
10007e48:	3c971547 	.word	0x3c971547
10007e4c:	4650      	mov	r0, sl
10007e4e:	4649      	mov	r1, r9
10007e50:	f004 f8e6 	bl	1000c020 <__aeabi_dsub>
10007e54:	1c02      	adds	r2, r0, #0
10007e56:	1c0b      	adds	r3, r1, #0
10007e58:	1c30      	adds	r0, r6, #0
10007e5a:	1c39      	adds	r1, r7, #0
10007e5c:	f001 ff56 	bl	10009d0c <__aeabi_dcmpgt>
10007e60:	464e      	mov	r6, r9
10007e62:	2800      	cmp	r0, #0
10007e64:	d000      	beq.n	10007e68 <__ieee754_pow+0x628>
10007e66:	e1a7      	b.n	100081b8 <__ieee754_pow+0x978>
10007e68:	4be7      	ldr	r3, [pc, #924]	; (10008208 <__ieee754_pow+0x9c8>)
10007e6a:	1536      	asrs	r6, r6, #20
10007e6c:	18f1      	adds	r1, r6, r3
10007e6e:	2380      	movs	r3, #128	; 0x80
10007e70:	035b      	lsls	r3, r3, #13
10007e72:	4698      	mov	r8, r3
10007e74:	410b      	asrs	r3, r1
10007e76:	1c19      	adds	r1, r3, #0
10007e78:	48e4      	ldr	r0, [pc, #912]	; (1000820c <__ieee754_pow+0x9cc>)
10007e7a:	4449      	add	r1, r9
10007e7c:	4684      	mov	ip, r0
10007e7e:	004f      	lsls	r7, r1, #1
10007e80:	0d7f      	lsrs	r7, r7, #21
10007e82:	44bc      	add	ip, r7
10007e84:	4666      	mov	r6, ip
10007e86:	48e2      	ldr	r0, [pc, #904]	; (10008210 <__ieee754_pow+0x9d0>)
10007e88:	2200      	movs	r2, #0
10007e8a:	4130      	asrs	r0, r6
10007e8c:	1c0e      	adds	r6, r1, #0
10007e8e:	4386      	bics	r6, r0
10007e90:	4640      	mov	r0, r8
10007e92:	0309      	lsls	r1, r1, #12
10007e94:	0b09      	lsrs	r1, r1, #12
10007e96:	4308      	orrs	r0, r1
10007e98:	4649      	mov	r1, r9
10007e9a:	1c33      	adds	r3, r6, #0
10007e9c:	0fce      	lsrs	r6, r1, #31
10007e9e:	49dd      	ldr	r1, [pc, #884]	; (10008214 <__ieee754_pow+0x9d4>)
10007ea0:	1bc9      	subs	r1, r1, r7
10007ea2:	4108      	asrs	r0, r1
10007ea4:	1c01      	adds	r1, r0, #0
10007ea6:	4270      	negs	r0, r6
10007ea8:	4041      	eors	r1, r0
10007eaa:	4689      	mov	r9, r1
10007eac:	1c20      	adds	r0, r4, #0
10007eae:	1c29      	adds	r1, r5, #0
10007eb0:	f004 f8b6 	bl	1000c020 <__aeabi_dsub>
10007eb4:	1c04      	adds	r4, r0, #0
10007eb6:	1c0d      	adds	r5, r1, #0
10007eb8:	9800      	ldr	r0, [sp, #0]
10007eba:	9901      	ldr	r1, [sp, #4]
10007ebc:	1c2b      	adds	r3, r5, #0
10007ebe:	44b1      	add	r9, r6
10007ec0:	1c22      	adds	r2, r4, #0
10007ec2:	f002 fead 	bl	1000ac20 <__aeabi_dadd>
10007ec6:	464b      	mov	r3, r9
10007ec8:	051b      	lsls	r3, r3, #20
10007eca:	4698      	mov	r8, r3
10007ecc:	2000      	movs	r0, #0
10007ece:	2200      	movs	r2, #0
10007ed0:	4bd1      	ldr	r3, [pc, #836]	; (10008218 <__ieee754_pow+0x9d8>)
10007ed2:	1c06      	adds	r6, r0, #0
10007ed4:	1c0f      	adds	r7, r1, #0
10007ed6:	f003 fe09 	bl	1000baec <__aeabi_dmul>
10007eda:	1c22      	adds	r2, r4, #0
10007edc:	9002      	str	r0, [sp, #8]
10007ede:	9103      	str	r1, [sp, #12]
10007ee0:	1c2b      	adds	r3, r5, #0
10007ee2:	1c30      	adds	r0, r6, #0
10007ee4:	1c39      	adds	r1, r7, #0
10007ee6:	f004 f89b 	bl	1000c020 <__aeabi_dsub>
10007eea:	1c02      	adds	r2, r0, #0
10007eec:	1c0b      	adds	r3, r1, #0
10007eee:	9800      	ldr	r0, [sp, #0]
10007ef0:	9901      	ldr	r1, [sp, #4]
10007ef2:	f004 f895 	bl	1000c020 <__aeabi_dsub>
10007ef6:	4ac9      	ldr	r2, [pc, #804]	; (1000821c <__ieee754_pow+0x9dc>)
10007ef8:	4bc9      	ldr	r3, [pc, #804]	; (10008220 <__ieee754_pow+0x9e0>)
10007efa:	f003 fdf7 	bl	1000baec <__aeabi_dmul>
10007efe:	4ac9      	ldr	r2, [pc, #804]	; (10008224 <__ieee754_pow+0x9e4>)
10007f00:	1c04      	adds	r4, r0, #0
10007f02:	1c0d      	adds	r5, r1, #0
10007f04:	1c30      	adds	r0, r6, #0
10007f06:	1c39      	adds	r1, r7, #0
10007f08:	4bc7      	ldr	r3, [pc, #796]	; (10008228 <__ieee754_pow+0x9e8>)
10007f0a:	f003 fdef 	bl	1000baec <__aeabi_dmul>
10007f0e:	1c02      	adds	r2, r0, #0
10007f10:	1c0b      	adds	r3, r1, #0
10007f12:	1c20      	adds	r0, r4, #0
10007f14:	1c29      	adds	r1, r5, #0
10007f16:	f002 fe83 	bl	1000ac20 <__aeabi_dadd>
10007f1a:	1c04      	adds	r4, r0, #0
10007f1c:	1c0d      	adds	r5, r1, #0
10007f1e:	9802      	ldr	r0, [sp, #8]
10007f20:	9903      	ldr	r1, [sp, #12]
10007f22:	1c22      	adds	r2, r4, #0
10007f24:	1c2b      	adds	r3, r5, #0
10007f26:	f002 fe7b 	bl	1000ac20 <__aeabi_dadd>
10007f2a:	9a02      	ldr	r2, [sp, #8]
10007f2c:	9b03      	ldr	r3, [sp, #12]
10007f2e:	1c06      	adds	r6, r0, #0
10007f30:	1c0f      	adds	r7, r1, #0
10007f32:	f004 f875 	bl	1000c020 <__aeabi_dsub>
10007f36:	1c02      	adds	r2, r0, #0
10007f38:	1c0b      	adds	r3, r1, #0
10007f3a:	1c20      	adds	r0, r4, #0
10007f3c:	1c29      	adds	r1, r5, #0
10007f3e:	f004 f86f 	bl	1000c020 <__aeabi_dsub>
10007f42:	1c32      	adds	r2, r6, #0
10007f44:	9000      	str	r0, [sp, #0]
10007f46:	9101      	str	r1, [sp, #4]
10007f48:	1c3b      	adds	r3, r7, #0
10007f4a:	1c30      	adds	r0, r6, #0
10007f4c:	1c39      	adds	r1, r7, #0
10007f4e:	f003 fdcd 	bl	1000baec <__aeabi_dmul>
10007f52:	1c04      	adds	r4, r0, #0
10007f54:	1c0d      	adds	r5, r1, #0
10007f56:	4ab5      	ldr	r2, [pc, #724]	; (1000822c <__ieee754_pow+0x9ec>)
10007f58:	4bb5      	ldr	r3, [pc, #724]	; (10008230 <__ieee754_pow+0x9f0>)
10007f5a:	f003 fdc7 	bl	1000baec <__aeabi_dmul>
10007f5e:	4ab5      	ldr	r2, [pc, #724]	; (10008234 <__ieee754_pow+0x9f4>)
10007f60:	4bb5      	ldr	r3, [pc, #724]	; (10008238 <__ieee754_pow+0x9f8>)
10007f62:	f004 f85d 	bl	1000c020 <__aeabi_dsub>
10007f66:	1c22      	adds	r2, r4, #0
10007f68:	1c2b      	adds	r3, r5, #0
10007f6a:	f003 fdbf 	bl	1000baec <__aeabi_dmul>
10007f6e:	4ab3      	ldr	r2, [pc, #716]	; (1000823c <__ieee754_pow+0x9fc>)
10007f70:	4bb3      	ldr	r3, [pc, #716]	; (10008240 <__ieee754_pow+0xa00>)
10007f72:	f002 fe55 	bl	1000ac20 <__aeabi_dadd>
10007f76:	1c22      	adds	r2, r4, #0
10007f78:	1c2b      	adds	r3, r5, #0
10007f7a:	f003 fdb7 	bl	1000baec <__aeabi_dmul>
10007f7e:	4ab1      	ldr	r2, [pc, #708]	; (10008244 <__ieee754_pow+0xa04>)
10007f80:	4bb1      	ldr	r3, [pc, #708]	; (10008248 <__ieee754_pow+0xa08>)
10007f82:	f004 f84d 	bl	1000c020 <__aeabi_dsub>
10007f86:	1c22      	adds	r2, r4, #0
10007f88:	1c2b      	adds	r3, r5, #0
10007f8a:	f003 fdaf 	bl	1000baec <__aeabi_dmul>
10007f8e:	4aaf      	ldr	r2, [pc, #700]	; (1000824c <__ieee754_pow+0xa0c>)
10007f90:	4baf      	ldr	r3, [pc, #700]	; (10008250 <__ieee754_pow+0xa10>)
10007f92:	f002 fe45 	bl	1000ac20 <__aeabi_dadd>
10007f96:	1c22      	adds	r2, r4, #0
10007f98:	1c2b      	adds	r3, r5, #0
10007f9a:	f003 fda7 	bl	1000baec <__aeabi_dmul>
10007f9e:	1c02      	adds	r2, r0, #0
10007fa0:	1c0b      	adds	r3, r1, #0
10007fa2:	1c30      	adds	r0, r6, #0
10007fa4:	1c39      	adds	r1, r7, #0
10007fa6:	f004 f83b 	bl	1000c020 <__aeabi_dsub>
10007faa:	1c04      	adds	r4, r0, #0
10007fac:	1c0d      	adds	r5, r1, #0
10007fae:	1c22      	adds	r2, r4, #0
10007fb0:	1c2b      	adds	r3, r5, #0
10007fb2:	1c30      	adds	r0, r6, #0
10007fb4:	1c39      	adds	r1, r7, #0
10007fb6:	f003 fd99 	bl	1000baec <__aeabi_dmul>
10007fba:	2380      	movs	r3, #128	; 0x80
10007fbc:	9002      	str	r0, [sp, #8]
10007fbe:	9103      	str	r1, [sp, #12]
10007fc0:	2200      	movs	r2, #0
10007fc2:	1c20      	adds	r0, r4, #0
10007fc4:	1c29      	adds	r1, r5, #0
10007fc6:	05db      	lsls	r3, r3, #23
10007fc8:	f004 f82a 	bl	1000c020 <__aeabi_dsub>
10007fcc:	1c02      	adds	r2, r0, #0
10007fce:	1c0b      	adds	r3, r1, #0
10007fd0:	9802      	ldr	r0, [sp, #8]
10007fd2:	9903      	ldr	r1, [sp, #12]
10007fd4:	f003 f94c 	bl	1000b270 <__aeabi_ddiv>
10007fd8:	9a00      	ldr	r2, [sp, #0]
10007fda:	9b01      	ldr	r3, [sp, #4]
10007fdc:	1c04      	adds	r4, r0, #0
10007fde:	1c0d      	adds	r5, r1, #0
10007fe0:	1c30      	adds	r0, r6, #0
10007fe2:	1c39      	adds	r1, r7, #0
10007fe4:	f003 fd82 	bl	1000baec <__aeabi_dmul>
10007fe8:	9a00      	ldr	r2, [sp, #0]
10007fea:	9b01      	ldr	r3, [sp, #4]
10007fec:	f002 fe18 	bl	1000ac20 <__aeabi_dadd>
10007ff0:	1c02      	adds	r2, r0, #0
10007ff2:	1c0b      	adds	r3, r1, #0
10007ff4:	1c20      	adds	r0, r4, #0
10007ff6:	1c29      	adds	r1, r5, #0
10007ff8:	f004 f812 	bl	1000c020 <__aeabi_dsub>
10007ffc:	1c32      	adds	r2, r6, #0
10007ffe:	1c3b      	adds	r3, r7, #0
10008000:	f004 f80e 	bl	1000c020 <__aeabi_dsub>
10008004:	1c0b      	adds	r3, r1, #0
10008006:	1c02      	adds	r2, r0, #0
10008008:	4992      	ldr	r1, [pc, #584]	; (10008254 <__ieee754_pow+0xa14>)
1000800a:	2000      	movs	r0, #0
1000800c:	f004 f808 	bl	1000c020 <__aeabi_dsub>
10008010:	4643      	mov	r3, r8
10008012:	185c      	adds	r4, r3, r1
10008014:	1523      	asrs	r3, r4, #20
10008016:	2b00      	cmp	r3, #0
10008018:	dc00      	bgt.n	1000801c <__ieee754_pow+0x7dc>
1000801a:	e14f      	b.n	100082bc <__ieee754_pow+0xa7c>
1000801c:	1c02      	adds	r2, r0, #0
1000801e:	1c23      	adds	r3, r4, #0
10008020:	9806      	ldr	r0, [sp, #24]
10008022:	9907      	ldr	r1, [sp, #28]
10008024:	f003 fd62 	bl	1000baec <__aeabi_dmul>
10008028:	e452      	b.n	100078d0 <__ieee754_pow+0x90>
1000802a:	4653      	mov	r3, sl
1000802c:	2b00      	cmp	r3, #0
1000802e:	da00      	bge.n	10008032 <__ieee754_pow+0x7f2>
10008030:	e47c      	b.n	1000792c <__ieee754_pow+0xec>
10008032:	2000      	movs	r0, #0
10008034:	2100      	movs	r1, #0
10008036:	e44b      	b.n	100078d0 <__ieee754_pow+0x90>
10008038:	4987      	ldr	r1, [pc, #540]	; (10008258 <__ieee754_pow+0xa18>)
1000803a:	468c      	mov	ip, r1
1000803c:	4659      	mov	r1, fp
1000803e:	4464      	add	r4, ip
10008040:	430c      	orrs	r4, r1
10008042:	d000      	beq.n	10008046 <__ieee754_pow+0x806>
10008044:	e0c4      	b.n	100081d0 <__ieee754_pow+0x990>
10008046:	1c10      	adds	r0, r2, #0
10008048:	1c19      	adds	r1, r3, #0
1000804a:	e4c9      	b.n	100079e0 <__ieee754_pow+0x1a0>
1000804c:	1c30      	adds	r0, r6, #0
1000804e:	1c29      	adds	r1, r5, #0
10008050:	1c32      	adds	r2, r6, #0
10008052:	1c2b      	adds	r3, r5, #0
10008054:	f003 fd4a 	bl	1000baec <__aeabi_dmul>
10008058:	f7ff fc3a 	bl	100078d0 <__ieee754_pow+0x90>
1000805c:	4b7f      	ldr	r3, [pc, #508]	; (1000825c <__ieee754_pow+0xa1c>)
1000805e:	004e      	lsls	r6, r1, #1
10008060:	0876      	lsrs	r6, r6, #1
10008062:	429e      	cmp	r6, r3
10008064:	dc00      	bgt.n	10008068 <__ieee754_pow+0x828>
10008066:	e117      	b.n	10008298 <__ieee754_pow+0xa58>
10008068:	4b7d      	ldr	r3, [pc, #500]	; (10008260 <__ieee754_pow+0xa20>)
1000806a:	444b      	add	r3, r9
1000806c:	4303      	orrs	r3, r0
1000806e:	d10c      	bne.n	1000808a <__ieee754_pow+0x84a>
10008070:	1c22      	adds	r2, r4, #0
10008072:	1c2b      	adds	r3, r5, #0
10008074:	f003 ffd4 	bl	1000c020 <__aeabi_dsub>
10008078:	1c02      	adds	r2, r0, #0
1000807a:	1c0b      	adds	r3, r1, #0
1000807c:	9800      	ldr	r0, [sp, #0]
1000807e:	9901      	ldr	r1, [sp, #4]
10008080:	f001 fe3a 	bl	10009cf8 <__aeabi_dcmple>
10008084:	2800      	cmp	r0, #0
10008086:	d100      	bne.n	1000808a <__ieee754_pow+0x84a>
10008088:	e6ee      	b.n	10007e68 <__ieee754_pow+0x628>
1000808a:	9806      	ldr	r0, [sp, #24]
1000808c:	9907      	ldr	r1, [sp, #28]
1000808e:	4a75      	ldr	r2, [pc, #468]	; (10008264 <__ieee754_pow+0xa24>)
10008090:	4b75      	ldr	r3, [pc, #468]	; (10008268 <__ieee754_pow+0xa28>)
10008092:	f003 fd2b 	bl	1000baec <__aeabi_dmul>
10008096:	4a73      	ldr	r2, [pc, #460]	; (10008264 <__ieee754_pow+0xa24>)
10008098:	4b73      	ldr	r3, [pc, #460]	; (10008268 <__ieee754_pow+0xa28>)
1000809a:	f003 fd27 	bl	1000baec <__aeabi_dmul>
1000809e:	f7ff fc17 	bl	100078d0 <__ieee754_pow+0x90>
100080a2:	2300      	movs	r3, #0
100080a4:	4c6b      	ldr	r4, [pc, #428]	; (10008254 <__ieee754_pow+0xa14>)
100080a6:	9306      	str	r3, [sp, #24]
100080a8:	9407      	str	r4, [sp, #28]
100080aa:	e64c      	b.n	10007d46 <__ieee754_pow+0x506>
100080ac:	4653      	mov	r3, sl
100080ae:	2b00      	cmp	r3, #0
100080b0:	dabf      	bge.n	10008032 <__ieee754_pow+0x7f2>
100080b2:	9b00      	ldr	r3, [sp, #0]
100080b4:	9c01      	ldr	r4, [sp, #4]
100080b6:	2280      	movs	r2, #128	; 0x80
100080b8:	0612      	lsls	r2, r2, #24
100080ba:	1c18      	adds	r0, r3, #0
100080bc:	4694      	mov	ip, r2
100080be:	1c23      	adds	r3, r4, #0
100080c0:	4463      	add	r3, ip
100080c2:	1c19      	adds	r1, r3, #0
100080c4:	f7ff fc04 	bl	100078d0 <__ieee754_pow+0x90>
100080c8:	2000      	movs	r0, #0
100080ca:	4962      	ldr	r1, [pc, #392]	; (10008254 <__ieee754_pow+0xa14>)
100080cc:	f003 f8d0 	bl	1000b270 <__aeabi_ddiv>
100080d0:	1c02      	adds	r2, r0, #0
100080d2:	1c0b      	adds	r3, r1, #0
100080d4:	e43c      	b.n	10007950 <__ieee754_pow+0x110>
100080d6:	2400      	movs	r4, #0
100080d8:	2100      	movs	r1, #0
100080da:	e4cc      	b.n	10007a76 <__ieee754_pow+0x236>
100080dc:	4963      	ldr	r1, [pc, #396]	; (1000826c <__ieee754_pow+0xa2c>)
100080de:	428c      	cmp	r4, r1
100080e0:	dda3      	ble.n	1000802a <__ieee754_pow+0x7ea>
100080e2:	495c      	ldr	r1, [pc, #368]	; (10008254 <__ieee754_pow+0xa14>)
100080e4:	428c      	cmp	r4, r1
100080e6:	dd01      	ble.n	100080ec <__ieee754_pow+0x8ac>
100080e8:	f7ff fc1c 	bl	10007924 <__ieee754_pow+0xe4>
100080ec:	1c10      	adds	r0, r2, #0
100080ee:	1c19      	adds	r1, r3, #0
100080f0:	2200      	movs	r2, #0
100080f2:	4b58      	ldr	r3, [pc, #352]	; (10008254 <__ieee754_pow+0xa14>)
100080f4:	f003 ff94 	bl	1000c020 <__aeabi_dsub>
100080f8:	22c0      	movs	r2, #192	; 0xc0
100080fa:	4b5d      	ldr	r3, [pc, #372]	; (10008270 <__ieee754_pow+0xa30>)
100080fc:	05d2      	lsls	r2, r2, #23
100080fe:	1c04      	adds	r4, r0, #0
10008100:	1c0d      	adds	r5, r1, #0
10008102:	f003 fcf3 	bl	1000baec <__aeabi_dmul>
10008106:	4a5b      	ldr	r2, [pc, #364]	; (10008274 <__ieee754_pow+0xa34>)
10008108:	1c06      	adds	r6, r0, #0
1000810a:	1c0f      	adds	r7, r1, #0
1000810c:	1c20      	adds	r0, r4, #0
1000810e:	1c29      	adds	r1, r5, #0
10008110:	4b59      	ldr	r3, [pc, #356]	; (10008278 <__ieee754_pow+0xa38>)
10008112:	f003 fceb 	bl	1000baec <__aeabi_dmul>
10008116:	1c22      	adds	r2, r4, #0
10008118:	9002      	str	r0, [sp, #8]
1000811a:	9103      	str	r1, [sp, #12]
1000811c:	1c2b      	adds	r3, r5, #0
1000811e:	1c20      	adds	r0, r4, #0
10008120:	1c29      	adds	r1, r5, #0
10008122:	f003 fce3 	bl	1000baec <__aeabi_dmul>
10008126:	2200      	movs	r2, #0
10008128:	9004      	str	r0, [sp, #16]
1000812a:	9105      	str	r1, [sp, #20]
1000812c:	4b53      	ldr	r3, [pc, #332]	; (1000827c <__ieee754_pow+0xa3c>)
1000812e:	1c20      	adds	r0, r4, #0
10008130:	1c29      	adds	r1, r5, #0
10008132:	f003 fcdb 	bl	1000baec <__aeabi_dmul>
10008136:	1c02      	adds	r2, r0, #0
10008138:	1c0b      	adds	r3, r1, #0
1000813a:	4851      	ldr	r0, [pc, #324]	; (10008280 <__ieee754_pow+0xa40>)
1000813c:	4951      	ldr	r1, [pc, #324]	; (10008284 <__ieee754_pow+0xa44>)
1000813e:	f003 ff6f 	bl	1000c020 <__aeabi_dsub>
10008142:	1c22      	adds	r2, r4, #0
10008144:	1c2b      	adds	r3, r5, #0
10008146:	f003 fcd1 	bl	1000baec <__aeabi_dmul>
1000814a:	1c02      	adds	r2, r0, #0
1000814c:	1c0b      	adds	r3, r1, #0
1000814e:	2000      	movs	r0, #0
10008150:	494d      	ldr	r1, [pc, #308]	; (10008288 <__ieee754_pow+0xa48>)
10008152:	f003 ff65 	bl	1000c020 <__aeabi_dsub>
10008156:	1c02      	adds	r2, r0, #0
10008158:	1c0b      	adds	r3, r1, #0
1000815a:	9804      	ldr	r0, [sp, #16]
1000815c:	9905      	ldr	r1, [sp, #20]
1000815e:	f003 fcc5 	bl	1000baec <__aeabi_dmul>
10008162:	4a4a      	ldr	r2, [pc, #296]	; (1000828c <__ieee754_pow+0xa4c>)
10008164:	4b42      	ldr	r3, [pc, #264]	; (10008270 <__ieee754_pow+0xa30>)
10008166:	f003 fcc1 	bl	1000baec <__aeabi_dmul>
1000816a:	1c02      	adds	r2, r0, #0
1000816c:	1c0b      	adds	r3, r1, #0
1000816e:	9802      	ldr	r0, [sp, #8]
10008170:	9903      	ldr	r1, [sp, #12]
10008172:	f003 ff55 	bl	1000c020 <__aeabi_dsub>
10008176:	1c04      	adds	r4, r0, #0
10008178:	1c0d      	adds	r5, r1, #0
1000817a:	1c22      	adds	r2, r4, #0
1000817c:	1c2b      	adds	r3, r5, #0
1000817e:	1c30      	adds	r0, r6, #0
10008180:	1c39      	adds	r1, r7, #0
10008182:	f002 fd4d 	bl	1000ac20 <__aeabi_dadd>
10008186:	2200      	movs	r2, #0
10008188:	1c10      	adds	r0, r2, #0
1000818a:	1c3b      	adds	r3, r7, #0
1000818c:	1c32      	adds	r2, r6, #0
1000818e:	9002      	str	r0, [sp, #8]
10008190:	9103      	str	r1, [sp, #12]
10008192:	f003 ff45 	bl	1000c020 <__aeabi_dsub>
10008196:	1c02      	adds	r2, r0, #0
10008198:	1c0b      	adds	r3, r1, #0
1000819a:	1c20      	adds	r0, r4, #0
1000819c:	1c29      	adds	r1, r5, #0
1000819e:	f003 ff3f 	bl	1000c020 <__aeabi_dsub>
100081a2:	9004      	str	r0, [sp, #16]
100081a4:	9105      	str	r1, [sp, #20]
100081a6:	e5c4      	b.n	10007d32 <__ieee754_pow+0x4f2>
100081a8:	1c32      	adds	r2, r6, #0
100081aa:	1c2b      	adds	r3, r5, #0
100081ac:	2000      	movs	r0, #0
100081ae:	4929      	ldr	r1, [pc, #164]	; (10008254 <__ieee754_pow+0xa14>)
100081b0:	f003 f85e 	bl	1000b270 <__aeabi_ddiv>
100081b4:	f7ff fb8c 	bl	100078d0 <__ieee754_pow+0x90>
100081b8:	9806      	ldr	r0, [sp, #24]
100081ba:	9907      	ldr	r1, [sp, #28]
100081bc:	4a34      	ldr	r2, [pc, #208]	; (10008290 <__ieee754_pow+0xa50>)
100081be:	4b35      	ldr	r3, [pc, #212]	; (10008294 <__ieee754_pow+0xa54>)
100081c0:	f003 fc94 	bl	1000baec <__aeabi_dmul>
100081c4:	4a32      	ldr	r2, [pc, #200]	; (10008290 <__ieee754_pow+0xa50>)
100081c6:	4b33      	ldr	r3, [pc, #204]	; (10008294 <__ieee754_pow+0xa54>)
100081c8:	f003 fc90 	bl	1000baec <__aeabi_dmul>
100081cc:	f7ff fb80 	bl	100078d0 <__ieee754_pow+0x90>
100081d0:	4659      	mov	r1, fp
100081d2:	1c10      	adds	r0, r2, #0
100081d4:	2901      	cmp	r1, #1
100081d6:	d06c      	beq.n	100082b2 <__ieee754_pow+0xa72>
100081d8:	1c19      	adds	r1, r3, #0
100081da:	f7ff fb79 	bl	100078d0 <__ieee754_pow+0x90>
100081de:	2a00      	cmp	r2, #0
100081e0:	d001      	beq.n	100081e6 <__ieee754_pow+0x9a6>
100081e2:	f7ff fb82 	bl	100078ea <__ieee754_pow+0xaa>
100081e6:	1c3a      	adds	r2, r7, #0
100081e8:	1a09      	subs	r1, r1, r0
100081ea:	410a      	asrs	r2, r1
100081ec:	1c13      	adds	r3, r2, #0
100081ee:	408b      	lsls	r3, r1
100081f0:	42bb      	cmp	r3, r7
100081f2:	d001      	beq.n	100081f8 <__ieee754_pow+0x9b8>
100081f4:	f7ff fb50 	bl	10007898 <__ieee754_pow+0x58>
100081f8:	2301      	movs	r3, #1
100081fa:	4013      	ands	r3, r2
100081fc:	2202      	movs	r2, #2
100081fe:	1ad3      	subs	r3, r2, r3
10008200:	469b      	mov	fp, r3
10008202:	f7ff fb49 	bl	10007898 <__ieee754_pow+0x58>
10008206:	46c0      	nop			; (mov r8, r8)
10008208:	fffffc02 	.word	0xfffffc02
1000820c:	fffffc01 	.word	0xfffffc01
10008210:	000fffff 	.word	0x000fffff
10008214:	00000413 	.word	0x00000413
10008218:	3fe62e43 	.word	0x3fe62e43
1000821c:	fefa39ef 	.word	0xfefa39ef
10008220:	3fe62e42 	.word	0x3fe62e42
10008224:	0ca86c39 	.word	0x0ca86c39
10008228:	be205c61 	.word	0xbe205c61
1000822c:	72bea4d0 	.word	0x72bea4d0
10008230:	3e663769 	.word	0x3e663769
10008234:	c5d26bf1 	.word	0xc5d26bf1
10008238:	3ebbbd41 	.word	0x3ebbbd41
1000823c:	af25de2c 	.word	0xaf25de2c
10008240:	3f11566a 	.word	0x3f11566a
10008244:	16bebd93 	.word	0x16bebd93
10008248:	3f66c16c 	.word	0x3f66c16c
1000824c:	5555553e 	.word	0x5555553e
10008250:	3fc55555 	.word	0x3fc55555
10008254:	3ff00000 	.word	0x3ff00000
10008258:	c0100000 	.word	0xc0100000
1000825c:	4090cbff 	.word	0x4090cbff
10008260:	3f6f3400 	.word	0x3f6f3400
10008264:	c2f8f359 	.word	0xc2f8f359
10008268:	01a56e1f 	.word	0x01a56e1f
1000826c:	3feffffe 	.word	0x3feffffe
10008270:	3ff71547 	.word	0x3ff71547
10008274:	f85ddf44 	.word	0xf85ddf44
10008278:	3e54ae0b 	.word	0x3e54ae0b
1000827c:	3fd00000 	.word	0x3fd00000
10008280:	55555555 	.word	0x55555555
10008284:	3fd55555 	.word	0x3fd55555
10008288:	3fe00000 	.word	0x3fe00000
1000828c:	652b82fe 	.word	0x652b82fe
10008290:	8800759c 	.word	0x8800759c
10008294:	7e37e43c 	.word	0x7e37e43c
10008298:	4b0b      	ldr	r3, [pc, #44]	; (100082c8 <__ieee754_pow+0xa88>)
1000829a:	429e      	cmp	r6, r3
1000829c:	dd00      	ble.n	100082a0 <__ieee754_pow+0xa60>
1000829e:	e5e3      	b.n	10007e68 <__ieee754_pow+0x628>
100082a0:	2300      	movs	r3, #0
100082a2:	4698      	mov	r8, r3
100082a4:	4699      	mov	r9, r3
100082a6:	e611      	b.n	10007ecc <__ieee754_pow+0x68c>
100082a8:	2480      	movs	r4, #128	; 0x80
100082aa:	2101      	movs	r1, #1
100082ac:	02e4      	lsls	r4, r4, #11
100082ae:	f7ff fbe2 	bl	10007a76 <__ieee754_pow+0x236>
100082b2:	2180      	movs	r1, #128	; 0x80
100082b4:	0609      	lsls	r1, r1, #24
100082b6:	1859      	adds	r1, r3, r1
100082b8:	f7ff fb0a 	bl	100078d0 <__ieee754_pow+0x90>
100082bc:	464a      	mov	r2, r9
100082be:	f001 fc77 	bl	10009bb0 <scalbn>
100082c2:	1c02      	adds	r2, r0, #0
100082c4:	1c0b      	adds	r3, r1, #0
100082c6:	e6ab      	b.n	10008020 <__ieee754_pow+0x7e0>
100082c8:	3fe00000 	.word	0x3fe00000

100082cc <__ieee754_rem_pio2>:
100082cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100082ce:	4656      	mov	r6, sl
100082d0:	465f      	mov	r7, fp
100082d2:	464d      	mov	r5, r9
100082d4:	b4e0      	push	{r5, r6, r7}
100082d6:	004b      	lsls	r3, r1, #1
100082d8:	085e      	lsrs	r6, r3, #1
100082da:	4bd4      	ldr	r3, [pc, #848]	; (1000862c <__ieee754_rem_pio2+0x360>)
100082dc:	b090      	sub	sp, #64	; 0x40
100082de:	468a      	mov	sl, r1
100082e0:	429e      	cmp	r6, r3
100082e2:	dc00      	bgt.n	100082e6 <__ieee754_rem_pio2+0x1a>
100082e4:	e089      	b.n	100083fa <__ieee754_rem_pio2+0x12e>
100082e6:	4bd2      	ldr	r3, [pc, #840]	; (10008630 <__ieee754_rem_pio2+0x364>)
100082e8:	4691      	mov	r9, r2
100082ea:	1c0c      	adds	r4, r1, #0
100082ec:	1c05      	adds	r5, r0, #0
100082ee:	429e      	cmp	r6, r3
100082f0:	dc22      	bgt.n	10008338 <__ieee754_rem_pio2+0x6c>
100082f2:	4ad0      	ldr	r2, [pc, #832]	; (10008634 <__ieee754_rem_pio2+0x368>)
100082f4:	2c00      	cmp	r4, #0
100082f6:	dc00      	bgt.n	100082fa <__ieee754_rem_pio2+0x2e>
100082f8:	e1be      	b.n	10008678 <__ieee754_rem_pio2+0x3ac>
100082fa:	4bcf      	ldr	r3, [pc, #828]	; (10008638 <__ieee754_rem_pio2+0x36c>)
100082fc:	f003 fe90 	bl	1000c020 <__aeabi_dsub>
10008300:	4bcd      	ldr	r3, [pc, #820]	; (10008638 <__ieee754_rem_pio2+0x36c>)
10008302:	1c04      	adds	r4, r0, #0
10008304:	1c0d      	adds	r5, r1, #0
10008306:	429e      	cmp	r6, r3
10008308:	d100      	bne.n	1000830c <__ieee754_rem_pio2+0x40>
1000830a:	e090      	b.n	1000842e <__ieee754_rem_pio2+0x162>
1000830c:	4acb      	ldr	r2, [pc, #812]	; (1000863c <__ieee754_rem_pio2+0x370>)
1000830e:	4bcc      	ldr	r3, [pc, #816]	; (10008640 <__ieee754_rem_pio2+0x374>)
10008310:	f003 fe86 	bl	1000c020 <__aeabi_dsub>
10008314:	1c02      	adds	r2, r0, #0
10008316:	1c0b      	adds	r3, r1, #0
10008318:	4649      	mov	r1, r9
1000831a:	1c20      	adds	r0, r4, #0
1000831c:	600a      	str	r2, [r1, #0]
1000831e:	604b      	str	r3, [r1, #4]
10008320:	1c29      	adds	r1, r5, #0
10008322:	f003 fe7d 	bl	1000c020 <__aeabi_dsub>
10008326:	4bc6      	ldr	r3, [pc, #792]	; (10008640 <__ieee754_rem_pio2+0x374>)
10008328:	4ac4      	ldr	r2, [pc, #784]	; (1000863c <__ieee754_rem_pio2+0x370>)
1000832a:	f003 fe79 	bl	1000c020 <__aeabi_dsub>
1000832e:	464b      	mov	r3, r9
10008330:	6098      	str	r0, [r3, #8]
10008332:	60d9      	str	r1, [r3, #12]
10008334:	2001      	movs	r0, #1
10008336:	e069      	b.n	1000840c <__ieee754_rem_pio2+0x140>
10008338:	4bc2      	ldr	r3, [pc, #776]	; (10008644 <__ieee754_rem_pio2+0x378>)
1000833a:	429e      	cmp	r6, r3
1000833c:	dc00      	bgt.n	10008340 <__ieee754_rem_pio2+0x74>
1000833e:	e093      	b.n	10008468 <__ieee754_rem_pio2+0x19c>
10008340:	4bc1      	ldr	r3, [pc, #772]	; (10008648 <__ieee754_rem_pio2+0x37c>)
10008342:	429e      	cmp	r6, r3
10008344:	dc68      	bgt.n	10008418 <__ieee754_rem_pio2+0x14c>
10008346:	49c1      	ldr	r1, [pc, #772]	; (1000864c <__ieee754_rem_pio2+0x380>)
10008348:	1532      	asrs	r2, r6, #20
1000834a:	468b      	mov	fp, r1
1000834c:	4493      	add	fp, r2
1000834e:	465b      	mov	r3, fp
10008350:	051b      	lsls	r3, r3, #20
10008352:	1af5      	subs	r5, r6, r3
10008354:	1c29      	adds	r1, r5, #0
10008356:	1c04      	adds	r4, r0, #0
10008358:	f004 f9dc 	bl	1000c714 <__aeabi_d2iz>
1000835c:	f004 fa10 	bl	1000c780 <__aeabi_i2d>
10008360:	1c02      	adds	r2, r0, #0
10008362:	1c0b      	adds	r3, r1, #0
10008364:	1c20      	adds	r0, r4, #0
10008366:	1c29      	adds	r1, r5, #0
10008368:	920a      	str	r2, [sp, #40]	; 0x28
1000836a:	930b      	str	r3, [sp, #44]	; 0x2c
1000836c:	f003 fe58 	bl	1000c020 <__aeabi_dsub>
10008370:	2200      	movs	r2, #0
10008372:	4bb7      	ldr	r3, [pc, #732]	; (10008650 <__ieee754_rem_pio2+0x384>)
10008374:	f003 fbba 	bl	1000baec <__aeabi_dmul>
10008378:	1c0f      	adds	r7, r1, #0
1000837a:	1c06      	adds	r6, r0, #0
1000837c:	f004 f9ca 	bl	1000c714 <__aeabi_d2iz>
10008380:	f004 f9fe 	bl	1000c780 <__aeabi_i2d>
10008384:	1c04      	adds	r4, r0, #0
10008386:	1c0d      	adds	r5, r1, #0
10008388:	1c22      	adds	r2, r4, #0
1000838a:	1c2b      	adds	r3, r5, #0
1000838c:	1c30      	adds	r0, r6, #0
1000838e:	1c39      	adds	r1, r7, #0
10008390:	940c      	str	r4, [sp, #48]	; 0x30
10008392:	950d      	str	r5, [sp, #52]	; 0x34
10008394:	f003 fe44 	bl	1000c020 <__aeabi_dsub>
10008398:	2200      	movs	r2, #0
1000839a:	4bad      	ldr	r3, [pc, #692]	; (10008650 <__ieee754_rem_pio2+0x384>)
1000839c:	f003 fba6 	bl	1000baec <__aeabi_dmul>
100083a0:	2200      	movs	r2, #0
100083a2:	2300      	movs	r3, #0
100083a4:	900e      	str	r0, [sp, #56]	; 0x38
100083a6:	910f      	str	r1, [sp, #60]	; 0x3c
100083a8:	f001 fc96 	bl	10009cd8 <__aeabi_dcmpeq>
100083ac:	2800      	cmp	r0, #0
100083ae:	d100      	bne.n	100083b2 <__ieee754_rem_pio2+0xe6>
100083b0:	e181      	b.n	100086b6 <__ieee754_rem_pio2+0x3ea>
100083b2:	2300      	movs	r3, #0
100083b4:	2200      	movs	r2, #0
100083b6:	1c20      	adds	r0, r4, #0
100083b8:	1c29      	adds	r1, r5, #0
100083ba:	f001 fc8d 	bl	10009cd8 <__aeabi_dcmpeq>
100083be:	2202      	movs	r2, #2
100083c0:	1e43      	subs	r3, r0, #1
100083c2:	4198      	sbcs	r0, r3
100083c4:	1a13      	subs	r3, r2, r0
100083c6:	2202      	movs	r2, #2
100083c8:	9200      	str	r2, [sp, #0]
100083ca:	4aa2      	ldr	r2, [pc, #648]	; (10008654 <__ieee754_rem_pio2+0x388>)
100083cc:	a80a      	add	r0, sp, #40	; 0x28
100083ce:	9201      	str	r2, [sp, #4]
100083d0:	4649      	mov	r1, r9
100083d2:	465a      	mov	r2, fp
100083d4:	f000 fba2 	bl	10008b1c <__kernel_rem_pio2>
100083d8:	4653      	mov	r3, sl
100083da:	2b00      	cmp	r3, #0
100083dc:	da16      	bge.n	1000840c <__ieee754_rem_pio2+0x140>
100083de:	2280      	movs	r2, #128	; 0x80
100083e0:	464b      	mov	r3, r9
100083e2:	0612      	lsls	r2, r2, #24
100083e4:	4694      	mov	ip, r2
100083e6:	464a      	mov	r2, r9
100083e8:	685b      	ldr	r3, [r3, #4]
100083ea:	4240      	negs	r0, r0
100083ec:	4463      	add	r3, ip
100083ee:	6053      	str	r3, [r2, #4]
100083f0:	68d3      	ldr	r3, [r2, #12]
100083f2:	464a      	mov	r2, r9
100083f4:	4463      	add	r3, ip
100083f6:	60d3      	str	r3, [r2, #12]
100083f8:	e008      	b.n	1000840c <__ieee754_rem_pio2+0x140>
100083fa:	1c04      	adds	r4, r0, #0
100083fc:	1c0d      	adds	r5, r1, #0
100083fe:	2000      	movs	r0, #0
10008400:	2100      	movs	r1, #0
10008402:	6090      	str	r0, [r2, #8]
10008404:	60d1      	str	r1, [r2, #12]
10008406:	2000      	movs	r0, #0
10008408:	6014      	str	r4, [r2, #0]
1000840a:	6055      	str	r5, [r2, #4]
1000840c:	b010      	add	sp, #64	; 0x40
1000840e:	bc1c      	pop	{r2, r3, r4}
10008410:	4691      	mov	r9, r2
10008412:	469a      	mov	sl, r3
10008414:	46a3      	mov	fp, r4
10008416:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008418:	4653      	mov	r3, sl
1000841a:	1c2a      	adds	r2, r5, #0
1000841c:	f003 fe00 	bl	1000c020 <__aeabi_dsub>
10008420:	464b      	mov	r3, r9
10008422:	6098      	str	r0, [r3, #8]
10008424:	60d9      	str	r1, [r3, #12]
10008426:	6018      	str	r0, [r3, #0]
10008428:	6059      	str	r1, [r3, #4]
1000842a:	2000      	movs	r0, #0
1000842c:	e7ee      	b.n	1000840c <__ieee754_rem_pio2+0x140>
1000842e:	22d3      	movs	r2, #211	; 0xd3
10008430:	4b83      	ldr	r3, [pc, #524]	; (10008640 <__ieee754_rem_pio2+0x374>)
10008432:	0552      	lsls	r2, r2, #21
10008434:	f003 fdf4 	bl	1000c020 <__aeabi_dsub>
10008438:	4a87      	ldr	r2, [pc, #540]	; (10008658 <__ieee754_rem_pio2+0x38c>)
1000843a:	4b88      	ldr	r3, [pc, #544]	; (1000865c <__ieee754_rem_pio2+0x390>)
1000843c:	1c04      	adds	r4, r0, #0
1000843e:	1c0d      	adds	r5, r1, #0
10008440:	f003 fdee 	bl	1000c020 <__aeabi_dsub>
10008444:	1c02      	adds	r2, r0, #0
10008446:	1c0b      	adds	r3, r1, #0
10008448:	4649      	mov	r1, r9
1000844a:	1c20      	adds	r0, r4, #0
1000844c:	600a      	str	r2, [r1, #0]
1000844e:	604b      	str	r3, [r1, #4]
10008450:	1c29      	adds	r1, r5, #0
10008452:	f003 fde5 	bl	1000c020 <__aeabi_dsub>
10008456:	4b81      	ldr	r3, [pc, #516]	; (1000865c <__ieee754_rem_pio2+0x390>)
10008458:	4a7f      	ldr	r2, [pc, #508]	; (10008658 <__ieee754_rem_pio2+0x38c>)
1000845a:	f003 fde1 	bl	1000c020 <__aeabi_dsub>
1000845e:	464b      	mov	r3, r9
10008460:	6098      	str	r0, [r3, #8]
10008462:	60d9      	str	r1, [r3, #12]
10008464:	2001      	movs	r0, #1
10008466:	e7d1      	b.n	1000840c <__ieee754_rem_pio2+0x140>
10008468:	f7fe fe88 	bl	1000717c <fabs>
1000846c:	4a7c      	ldr	r2, [pc, #496]	; (10008660 <__ieee754_rem_pio2+0x394>)
1000846e:	4b7d      	ldr	r3, [pc, #500]	; (10008664 <__ieee754_rem_pio2+0x398>)
10008470:	1c04      	adds	r4, r0, #0
10008472:	1c0d      	adds	r5, r1, #0
10008474:	f003 fb3a 	bl	1000baec <__aeabi_dmul>
10008478:	2200      	movs	r2, #0
1000847a:	4b7b      	ldr	r3, [pc, #492]	; (10008668 <__ieee754_rem_pio2+0x39c>)
1000847c:	f002 fbd0 	bl	1000ac20 <__aeabi_dadd>
10008480:	f004 f948 	bl	1000c714 <__aeabi_d2iz>
10008484:	1c07      	adds	r7, r0, #0
10008486:	f004 f97b 	bl	1000c780 <__aeabi_i2d>
1000848a:	4a6a      	ldr	r2, [pc, #424]	; (10008634 <__ieee754_rem_pio2+0x368>)
1000848c:	4b6a      	ldr	r3, [pc, #424]	; (10008638 <__ieee754_rem_pio2+0x36c>)
1000848e:	9004      	str	r0, [sp, #16]
10008490:	9105      	str	r1, [sp, #20]
10008492:	f003 fb2b 	bl	1000baec <__aeabi_dmul>
10008496:	1c02      	adds	r2, r0, #0
10008498:	1c0b      	adds	r3, r1, #0
1000849a:	1c20      	adds	r0, r4, #0
1000849c:	1c29      	adds	r1, r5, #0
1000849e:	f003 fdbf 	bl	1000c020 <__aeabi_dsub>
100084a2:	4a66      	ldr	r2, [pc, #408]	; (1000863c <__ieee754_rem_pio2+0x370>)
100084a4:	9002      	str	r0, [sp, #8]
100084a6:	9103      	str	r1, [sp, #12]
100084a8:	9804      	ldr	r0, [sp, #16]
100084aa:	9905      	ldr	r1, [sp, #20]
100084ac:	4b64      	ldr	r3, [pc, #400]	; (10008640 <__ieee754_rem_pio2+0x374>)
100084ae:	f003 fb1d 	bl	1000baec <__aeabi_dmul>
100084b2:	9006      	str	r0, [sp, #24]
100084b4:	9107      	str	r1, [sp, #28]
100084b6:	9802      	ldr	r0, [sp, #8]
100084b8:	9903      	ldr	r1, [sp, #12]
100084ba:	2f1f      	cmp	r7, #31
100084bc:	dc33      	bgt.n	10008526 <__ieee754_rem_pio2+0x25a>
100084be:	1e7b      	subs	r3, r7, #1
100084c0:	4a6a      	ldr	r2, [pc, #424]	; (1000866c <__ieee754_rem_pio2+0x3a0>)
100084c2:	009b      	lsls	r3, r3, #2
100084c4:	589b      	ldr	r3, [r3, r2]
100084c6:	42b3      	cmp	r3, r6
100084c8:	d02d      	beq.n	10008526 <__ieee754_rem_pio2+0x25a>
100084ca:	9a06      	ldr	r2, [sp, #24]
100084cc:	9b07      	ldr	r3, [sp, #28]
100084ce:	f003 fda7 	bl	1000c020 <__aeabi_dsub>
100084d2:	1c0b      	adds	r3, r1, #0
100084d4:	1c0c      	adds	r4, r1, #0
100084d6:	1c02      	adds	r2, r0, #0
100084d8:	4649      	mov	r1, r9
100084da:	1c05      	adds	r5, r0, #0
100084dc:	600a      	str	r2, [r1, #0]
100084de:	604b      	str	r3, [r1, #4]
100084e0:	9802      	ldr	r0, [sp, #8]
100084e2:	9903      	ldr	r1, [sp, #12]
100084e4:	1c2a      	adds	r2, r5, #0
100084e6:	1c23      	adds	r3, r4, #0
100084e8:	f003 fd9a 	bl	1000c020 <__aeabi_dsub>
100084ec:	9a06      	ldr	r2, [sp, #24]
100084ee:	9b07      	ldr	r3, [sp, #28]
100084f0:	f003 fd96 	bl	1000c020 <__aeabi_dsub>
100084f4:	1c06      	adds	r6, r0, #0
100084f6:	1c0b      	adds	r3, r1, #0
100084f8:	4648      	mov	r0, r9
100084fa:	1c32      	adds	r2, r6, #0
100084fc:	6082      	str	r2, [r0, #8]
100084fe:	60c3      	str	r3, [r0, #12]
10008500:	4653      	mov	r3, sl
10008502:	1c38      	adds	r0, r7, #0
10008504:	2b00      	cmp	r3, #0
10008506:	db00      	blt.n	1000850a <__ieee754_rem_pio2+0x23e>
10008508:	e780      	b.n	1000840c <__ieee754_rem_pio2+0x140>
1000850a:	464b      	mov	r3, r9
1000850c:	601d      	str	r5, [r3, #0]
1000850e:	2380      	movs	r3, #128	; 0x80
10008510:	061b      	lsls	r3, r3, #24
10008512:	469c      	mov	ip, r3
10008514:	464b      	mov	r3, r9
10008516:	4464      	add	r4, ip
10008518:	605c      	str	r4, [r3, #4]
1000851a:	609e      	str	r6, [r3, #8]
1000851c:	464b      	mov	r3, r9
1000851e:	4461      	add	r1, ip
10008520:	60d9      	str	r1, [r3, #12]
10008522:	4278      	negs	r0, r7
10008524:	e772      	b.n	1000840c <__ieee754_rem_pio2+0x140>
10008526:	9a06      	ldr	r2, [sp, #24]
10008528:	9b07      	ldr	r3, [sp, #28]
1000852a:	f003 fd79 	bl	1000c020 <__aeabi_dsub>
1000852e:	1c0b      	adds	r3, r1, #0
10008530:	1c0c      	adds	r4, r1, #0
10008532:	1c02      	adds	r2, r0, #0
10008534:	4649      	mov	r1, r9
10008536:	600a      	str	r2, [r1, #0]
10008538:	604b      	str	r3, [r1, #4]
1000853a:	0063      	lsls	r3, r4, #1
1000853c:	1536      	asrs	r6, r6, #20
1000853e:	0d5b      	lsrs	r3, r3, #21
10008540:	1c05      	adds	r5, r0, #0
10008542:	1af3      	subs	r3, r6, r3
10008544:	2b10      	cmp	r3, #16
10008546:	ddcb      	ble.n	100084e0 <__ieee754_rem_pio2+0x214>
10008548:	9804      	ldr	r0, [sp, #16]
1000854a:	9905      	ldr	r1, [sp, #20]
1000854c:	22d3      	movs	r2, #211	; 0xd3
1000854e:	4b3c      	ldr	r3, [pc, #240]	; (10008640 <__ieee754_rem_pio2+0x374>)
10008550:	0552      	lsls	r2, r2, #21
10008552:	f003 facb 	bl	1000baec <__aeabi_dmul>
10008556:	1c04      	adds	r4, r0, #0
10008558:	1c0d      	adds	r5, r1, #0
1000855a:	9802      	ldr	r0, [sp, #8]
1000855c:	9903      	ldr	r1, [sp, #12]
1000855e:	1c22      	adds	r2, r4, #0
10008560:	1c2b      	adds	r3, r5, #0
10008562:	f003 fd5d 	bl	1000c020 <__aeabi_dsub>
10008566:	1c02      	adds	r2, r0, #0
10008568:	1c0b      	adds	r3, r1, #0
1000856a:	9802      	ldr	r0, [sp, #8]
1000856c:	9903      	ldr	r1, [sp, #12]
1000856e:	9208      	str	r2, [sp, #32]
10008570:	9309      	str	r3, [sp, #36]	; 0x24
10008572:	f003 fd55 	bl	1000c020 <__aeabi_dsub>
10008576:	1c22      	adds	r2, r4, #0
10008578:	1c2b      	adds	r3, r5, #0
1000857a:	f003 fd51 	bl	1000c020 <__aeabi_dsub>
1000857e:	1c04      	adds	r4, r0, #0
10008580:	1c0d      	adds	r5, r1, #0
10008582:	9804      	ldr	r0, [sp, #16]
10008584:	9905      	ldr	r1, [sp, #20]
10008586:	4a34      	ldr	r2, [pc, #208]	; (10008658 <__ieee754_rem_pio2+0x38c>)
10008588:	4b34      	ldr	r3, [pc, #208]	; (1000865c <__ieee754_rem_pio2+0x390>)
1000858a:	f003 faaf 	bl	1000baec <__aeabi_dmul>
1000858e:	1c22      	adds	r2, r4, #0
10008590:	1c2b      	adds	r3, r5, #0
10008592:	f003 fd45 	bl	1000c020 <__aeabi_dsub>
10008596:	1c03      	adds	r3, r0, #0
10008598:	1c0c      	adds	r4, r1, #0
1000859a:	9808      	ldr	r0, [sp, #32]
1000859c:	9909      	ldr	r1, [sp, #36]	; 0x24
1000859e:	9306      	str	r3, [sp, #24]
100085a0:	9407      	str	r4, [sp, #28]
100085a2:	1c1a      	adds	r2, r3, #0
100085a4:	1c23      	adds	r3, r4, #0
100085a6:	f003 fd3b 	bl	1000c020 <__aeabi_dsub>
100085aa:	1c02      	adds	r2, r0, #0
100085ac:	1c0b      	adds	r3, r1, #0
100085ae:	1c05      	adds	r5, r0, #0
100085b0:	4648      	mov	r0, r9
100085b2:	6002      	str	r2, [r0, #0]
100085b4:	6043      	str	r3, [r0, #4]
100085b6:	004b      	lsls	r3, r1, #1
100085b8:	0d5b      	lsrs	r3, r3, #21
100085ba:	1c0c      	adds	r4, r1, #0
100085bc:	9908      	ldr	r1, [sp, #32]
100085be:	9a09      	ldr	r2, [sp, #36]	; 0x24
100085c0:	1af3      	subs	r3, r6, r3
100085c2:	9102      	str	r1, [sp, #8]
100085c4:	9203      	str	r2, [sp, #12]
100085c6:	2b31      	cmp	r3, #49	; 0x31
100085c8:	dd8a      	ble.n	100084e0 <__ieee754_rem_pio2+0x214>
100085ca:	9804      	ldr	r0, [sp, #16]
100085cc:	9905      	ldr	r1, [sp, #20]
100085ce:	22b8      	movs	r2, #184	; 0xb8
100085d0:	4b22      	ldr	r3, [pc, #136]	; (1000865c <__ieee754_rem_pio2+0x390>)
100085d2:	0592      	lsls	r2, r2, #22
100085d4:	f003 fa8a 	bl	1000baec <__aeabi_dmul>
100085d8:	1c04      	adds	r4, r0, #0
100085da:	1c0d      	adds	r5, r1, #0
100085dc:	9802      	ldr	r0, [sp, #8]
100085de:	9903      	ldr	r1, [sp, #12]
100085e0:	1c22      	adds	r2, r4, #0
100085e2:	1c2b      	adds	r3, r5, #0
100085e4:	f003 fd1c 	bl	1000c020 <__aeabi_dsub>
100085e8:	1c02      	adds	r2, r0, #0
100085ea:	1c0b      	adds	r3, r1, #0
100085ec:	9808      	ldr	r0, [sp, #32]
100085ee:	9909      	ldr	r1, [sp, #36]	; 0x24
100085f0:	9202      	str	r2, [sp, #8]
100085f2:	9303      	str	r3, [sp, #12]
100085f4:	f003 fd14 	bl	1000c020 <__aeabi_dsub>
100085f8:	1c22      	adds	r2, r4, #0
100085fa:	1c2b      	adds	r3, r5, #0
100085fc:	f003 fd10 	bl	1000c020 <__aeabi_dsub>
10008600:	1c04      	adds	r4, r0, #0
10008602:	1c0d      	adds	r5, r1, #0
10008604:	9804      	ldr	r0, [sp, #16]
10008606:	9905      	ldr	r1, [sp, #20]
10008608:	4a19      	ldr	r2, [pc, #100]	; (10008670 <__ieee754_rem_pio2+0x3a4>)
1000860a:	4b1a      	ldr	r3, [pc, #104]	; (10008674 <__ieee754_rem_pio2+0x3a8>)
1000860c:	f003 fa6e 	bl	1000baec <__aeabi_dmul>
10008610:	1c22      	adds	r2, r4, #0
10008612:	1c2b      	adds	r3, r5, #0
10008614:	f003 fd04 	bl	1000c020 <__aeabi_dsub>
10008618:	1c03      	adds	r3, r0, #0
1000861a:	1c0c      	adds	r4, r1, #0
1000861c:	9802      	ldr	r0, [sp, #8]
1000861e:	9903      	ldr	r1, [sp, #12]
10008620:	9306      	str	r3, [sp, #24]
10008622:	9407      	str	r4, [sp, #28]
10008624:	1c1a      	adds	r2, r3, #0
10008626:	1c23      	adds	r3, r4, #0
10008628:	e751      	b.n	100084ce <__ieee754_rem_pio2+0x202>
1000862a:	46c0      	nop			; (mov r8, r8)
1000862c:	3fe921fb 	.word	0x3fe921fb
10008630:	4002d97b 	.word	0x4002d97b
10008634:	54400000 	.word	0x54400000
10008638:	3ff921fb 	.word	0x3ff921fb
1000863c:	1a626331 	.word	0x1a626331
10008640:	3dd0b461 	.word	0x3dd0b461
10008644:	413921fb 	.word	0x413921fb
10008648:	7fefffff 	.word	0x7fefffff
1000864c:	fffffbea 	.word	0xfffffbea
10008650:	41700000 	.word	0x41700000
10008654:	1000d220 	.word	0x1000d220
10008658:	2e037073 	.word	0x2e037073
1000865c:	3ba3198a 	.word	0x3ba3198a
10008660:	6dc9c883 	.word	0x6dc9c883
10008664:	3fe45f30 	.word	0x3fe45f30
10008668:	3fe00000 	.word	0x3fe00000
1000866c:	1000d1a0 	.word	0x1000d1a0
10008670:	252049c1 	.word	0x252049c1
10008674:	397b839a 	.word	0x397b839a
10008678:	4b1b      	ldr	r3, [pc, #108]	; (100086e8 <__ieee754_rem_pio2+0x41c>)
1000867a:	f002 fad1 	bl	1000ac20 <__aeabi_dadd>
1000867e:	4b1a      	ldr	r3, [pc, #104]	; (100086e8 <__ieee754_rem_pio2+0x41c>)
10008680:	1c04      	adds	r4, r0, #0
10008682:	1c0d      	adds	r5, r1, #0
10008684:	429e      	cmp	r6, r3
10008686:	d018      	beq.n	100086ba <__ieee754_rem_pio2+0x3ee>
10008688:	4a18      	ldr	r2, [pc, #96]	; (100086ec <__ieee754_rem_pio2+0x420>)
1000868a:	4b19      	ldr	r3, [pc, #100]	; (100086f0 <__ieee754_rem_pio2+0x424>)
1000868c:	f002 fac8 	bl	1000ac20 <__aeabi_dadd>
10008690:	1c02      	adds	r2, r0, #0
10008692:	1c0b      	adds	r3, r1, #0
10008694:	4649      	mov	r1, r9
10008696:	1c20      	adds	r0, r4, #0
10008698:	600a      	str	r2, [r1, #0]
1000869a:	604b      	str	r3, [r1, #4]
1000869c:	1c29      	adds	r1, r5, #0
1000869e:	f003 fcbf 	bl	1000c020 <__aeabi_dsub>
100086a2:	4a12      	ldr	r2, [pc, #72]	; (100086ec <__ieee754_rem_pio2+0x420>)
100086a4:	4b12      	ldr	r3, [pc, #72]	; (100086f0 <__ieee754_rem_pio2+0x424>)
100086a6:	f002 fabb 	bl	1000ac20 <__aeabi_dadd>
100086aa:	464b      	mov	r3, r9
100086ac:	6098      	str	r0, [r3, #8]
100086ae:	60d9      	str	r1, [r3, #12]
100086b0:	2001      	movs	r0, #1
100086b2:	4240      	negs	r0, r0
100086b4:	e6aa      	b.n	1000840c <__ieee754_rem_pio2+0x140>
100086b6:	2303      	movs	r3, #3
100086b8:	e685      	b.n	100083c6 <__ieee754_rem_pio2+0xfa>
100086ba:	22d3      	movs	r2, #211	; 0xd3
100086bc:	4b0c      	ldr	r3, [pc, #48]	; (100086f0 <__ieee754_rem_pio2+0x424>)
100086be:	0552      	lsls	r2, r2, #21
100086c0:	f002 faae 	bl	1000ac20 <__aeabi_dadd>
100086c4:	4a0b      	ldr	r2, [pc, #44]	; (100086f4 <__ieee754_rem_pio2+0x428>)
100086c6:	4b0c      	ldr	r3, [pc, #48]	; (100086f8 <__ieee754_rem_pio2+0x42c>)
100086c8:	1c04      	adds	r4, r0, #0
100086ca:	1c0d      	adds	r5, r1, #0
100086cc:	f002 faa8 	bl	1000ac20 <__aeabi_dadd>
100086d0:	1c02      	adds	r2, r0, #0
100086d2:	1c0b      	adds	r3, r1, #0
100086d4:	4649      	mov	r1, r9
100086d6:	1c20      	adds	r0, r4, #0
100086d8:	600a      	str	r2, [r1, #0]
100086da:	604b      	str	r3, [r1, #4]
100086dc:	1c29      	adds	r1, r5, #0
100086de:	f003 fc9f 	bl	1000c020 <__aeabi_dsub>
100086e2:	4a04      	ldr	r2, [pc, #16]	; (100086f4 <__ieee754_rem_pio2+0x428>)
100086e4:	4b04      	ldr	r3, [pc, #16]	; (100086f8 <__ieee754_rem_pio2+0x42c>)
100086e6:	e7de      	b.n	100086a6 <__ieee754_rem_pio2+0x3da>
100086e8:	3ff921fb 	.word	0x3ff921fb
100086ec:	1a626331 	.word	0x1a626331
100086f0:	3dd0b461 	.word	0x3dd0b461
100086f4:	2e037073 	.word	0x2e037073
100086f8:	3ba3198a 	.word	0x3ba3198a

100086fc <__ieee754_sqrt>:
100086fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100086fe:	4656      	mov	r6, sl
10008700:	464d      	mov	r5, r9
10008702:	4644      	mov	r4, r8
10008704:	465f      	mov	r7, fp
10008706:	4b75      	ldr	r3, [pc, #468]	; (100088dc <__ieee754_sqrt+0x1e0>)
10008708:	b4f0      	push	{r4, r5, r6, r7}
1000870a:	1c0a      	adds	r2, r1, #0
1000870c:	1c0e      	adds	r6, r1, #0
1000870e:	1c19      	adds	r1, r3, #0
10008710:	b083      	sub	sp, #12
10008712:	1c05      	adds	r5, r0, #0
10008714:	1c04      	adds	r4, r0, #0
10008716:	4031      	ands	r1, r6
10008718:	4299      	cmp	r1, r3
1000871a:	d100      	bne.n	1000871e <__ieee754_sqrt+0x22>
1000871c:	e0b7      	b.n	1000888e <__ieee754_sqrt+0x192>
1000871e:	2e00      	cmp	r6, #0
10008720:	dc00      	bgt.n	10008724 <__ieee754_sqrt+0x28>
10008722:	e093      	b.n	1000884c <__ieee754_sqrt+0x150>
10008724:	1531      	asrs	r1, r6, #20
10008726:	d100      	bne.n	1000872a <__ieee754_sqrt+0x2e>
10008728:	e0a0      	b.n	1000886c <__ieee754_sqrt+0x170>
1000872a:	4b6d      	ldr	r3, [pc, #436]	; (100088e0 <__ieee754_sqrt+0x1e4>)
1000872c:	0312      	lsls	r2, r2, #12
1000872e:	18ce      	adds	r6, r1, r3
10008730:	2380      	movs	r3, #128	; 0x80
10008732:	0b12      	lsrs	r2, r2, #12
10008734:	035b      	lsls	r3, r3, #13
10008736:	431a      	orrs	r2, r3
10008738:	07f3      	lsls	r3, r6, #31
1000873a:	d500      	bpl.n	1000873e <__ieee754_sqrt+0x42>
1000873c:	e077      	b.n	1000882e <__ieee754_sqrt+0x132>
1000873e:	1073      	asrs	r3, r6, #1
10008740:	0052      	lsls	r2, r2, #1
10008742:	4698      	mov	r8, r3
10008744:	0fe3      	lsrs	r3, r4, #31
10008746:	18d3      	adds	r3, r2, r3
10008748:	2280      	movs	r2, #128	; 0x80
1000874a:	2116      	movs	r1, #22
1000874c:	2700      	movs	r7, #0
1000874e:	2500      	movs	r5, #0
10008750:	0064      	lsls	r4, r4, #1
10008752:	0392      	lsls	r2, r2, #14
10008754:	18a8      	adds	r0, r5, r2
10008756:	4298      	cmp	r0, r3
10008758:	dc02      	bgt.n	10008760 <__ieee754_sqrt+0x64>
1000875a:	1885      	adds	r5, r0, r2
1000875c:	1a1b      	subs	r3, r3, r0
1000875e:	18bf      	adds	r7, r7, r2
10008760:	0fe0      	lsrs	r0, r4, #31
10008762:	005b      	lsls	r3, r3, #1
10008764:	3901      	subs	r1, #1
10008766:	181b      	adds	r3, r3, r0
10008768:	0064      	lsls	r4, r4, #1
1000876a:	0852      	lsrs	r2, r2, #1
1000876c:	2900      	cmp	r1, #0
1000876e:	d1f1      	bne.n	10008754 <__ieee754_sqrt+0x58>
10008770:	2200      	movs	r2, #0
10008772:	9201      	str	r2, [sp, #4]
10008774:	4694      	mov	ip, r2
10008776:	2280      	movs	r2, #128	; 0x80
10008778:	0612      	lsls	r2, r2, #24
1000877a:	2020      	movs	r0, #32
1000877c:	4692      	mov	sl, r2
1000877e:	e009      	b.n	10008794 <__ieee754_sqrt+0x98>
10008780:	42ab      	cmp	r3, r5
10008782:	d047      	beq.n	10008814 <__ieee754_sqrt+0x118>
10008784:	0fe1      	lsrs	r1, r4, #31
10008786:	005b      	lsls	r3, r3, #1
10008788:	3801      	subs	r0, #1
1000878a:	185b      	adds	r3, r3, r1
1000878c:	0064      	lsls	r4, r4, #1
1000878e:	0852      	lsrs	r2, r2, #1
10008790:	2800      	cmp	r0, #0
10008792:	d01e      	beq.n	100087d2 <__ieee754_sqrt+0xd6>
10008794:	4661      	mov	r1, ip
10008796:	1889      	adds	r1, r1, r2
10008798:	429d      	cmp	r5, r3
1000879a:	daf1      	bge.n	10008780 <__ieee754_sqrt+0x84>
1000879c:	188e      	adds	r6, r1, r2
1000879e:	46b4      	mov	ip, r6
100087a0:	0fce      	lsrs	r6, r1, #31
100087a2:	07f6      	lsls	r6, r6, #31
100087a4:	46a9      	mov	r9, r5
100087a6:	4556      	cmp	r6, sl
100087a8:	d02e      	beq.n	10008808 <__ieee754_sqrt+0x10c>
100087aa:	1b5b      	subs	r3, r3, r5
100087ac:	428c      	cmp	r4, r1
100087ae:	41ad      	sbcs	r5, r5
100087b0:	426d      	negs	r5, r5
100087b2:	1b5b      	subs	r3, r3, r5
100087b4:	1a64      	subs	r4, r4, r1
100087b6:	9901      	ldr	r1, [sp, #4]
100087b8:	005b      	lsls	r3, r3, #1
100087ba:	468b      	mov	fp, r1
100087bc:	4493      	add	fp, r2
100087be:	4659      	mov	r1, fp
100087c0:	3801      	subs	r0, #1
100087c2:	9101      	str	r1, [sp, #4]
100087c4:	0fe1      	lsrs	r1, r4, #31
100087c6:	464d      	mov	r5, r9
100087c8:	185b      	adds	r3, r3, r1
100087ca:	0064      	lsls	r4, r4, #1
100087cc:	0852      	lsrs	r2, r2, #1
100087ce:	2800      	cmp	r0, #0
100087d0:	d1e0      	bne.n	10008794 <__ieee754_sqrt+0x98>
100087d2:	4323      	orrs	r3, r4
100087d4:	d130      	bne.n	10008838 <__ieee754_sqrt+0x13c>
100087d6:	9b01      	ldr	r3, [sp, #4]
100087d8:	085b      	lsrs	r3, r3, #1
100087da:	4942      	ldr	r1, [pc, #264]	; (100088e4 <__ieee754_sqrt+0x1e8>)
100087dc:	107a      	asrs	r2, r7, #1
100087de:	468c      	mov	ip, r1
100087e0:	4462      	add	r2, ip
100087e2:	07f9      	lsls	r1, r7, #31
100087e4:	d502      	bpl.n	100087ec <__ieee754_sqrt+0xf0>
100087e6:	2180      	movs	r1, #128	; 0x80
100087e8:	0609      	lsls	r1, r1, #24
100087ea:	430b      	orrs	r3, r1
100087ec:	4641      	mov	r1, r8
100087ee:	050e      	lsls	r6, r1, #20
100087f0:	18b1      	adds	r1, r6, r2
100087f2:	1c1d      	adds	r5, r3, #0
100087f4:	1c0e      	adds	r6, r1, #0
100087f6:	1c28      	adds	r0, r5, #0
100087f8:	1c31      	adds	r1, r6, #0
100087fa:	b003      	add	sp, #12
100087fc:	bc3c      	pop	{r2, r3, r4, r5}
100087fe:	4690      	mov	r8, r2
10008800:	4699      	mov	r9, r3
10008802:	46a2      	mov	sl, r4
10008804:	46ab      	mov	fp, r5
10008806:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008808:	4666      	mov	r6, ip
1000880a:	2e00      	cmp	r6, #0
1000880c:	dbcd      	blt.n	100087aa <__ieee754_sqrt+0xae>
1000880e:	1c6e      	adds	r6, r5, #1
10008810:	46b1      	mov	r9, r6
10008812:	e7ca      	b.n	100087aa <__ieee754_sqrt+0xae>
10008814:	42a1      	cmp	r1, r4
10008816:	d808      	bhi.n	1000882a <__ieee754_sqrt+0x12e>
10008818:	188e      	adds	r6, r1, r2
1000881a:	46b4      	mov	ip, r6
1000881c:	0fce      	lsrs	r6, r1, #31
1000881e:	07f6      	lsls	r6, r6, #31
10008820:	4556      	cmp	r6, sl
10008822:	d041      	beq.n	100088a8 <__ieee754_sqrt+0x1ac>
10008824:	4699      	mov	r9, r3
10008826:	2300      	movs	r3, #0
10008828:	e7c4      	b.n	100087b4 <__ieee754_sqrt+0xb8>
1000882a:	1c1d      	adds	r5, r3, #0
1000882c:	e7aa      	b.n	10008784 <__ieee754_sqrt+0x88>
1000882e:	0fe3      	lsrs	r3, r4, #31
10008830:	0052      	lsls	r2, r2, #1
10008832:	18d2      	adds	r2, r2, r3
10008834:	0064      	lsls	r4, r4, #1
10008836:	e782      	b.n	1000873e <__ieee754_sqrt+0x42>
10008838:	9b01      	ldr	r3, [sp, #4]
1000883a:	3301      	adds	r3, #1
1000883c:	d03a      	beq.n	100088b4 <__ieee754_sqrt+0x1b8>
1000883e:	9a01      	ldr	r2, [sp, #4]
10008840:	2301      	movs	r3, #1
10008842:	4694      	mov	ip, r2
10008844:	4013      	ands	r3, r2
10008846:	4463      	add	r3, ip
10008848:	085b      	lsrs	r3, r3, #1
1000884a:	e7c6      	b.n	100087da <__ieee754_sqrt+0xde>
1000884c:	0073      	lsls	r3, r6, #1
1000884e:	085b      	lsrs	r3, r3, #1
10008850:	4303      	orrs	r3, r0
10008852:	d0d0      	beq.n	100087f6 <__ieee754_sqrt+0xfa>
10008854:	2100      	movs	r1, #0
10008856:	2e00      	cmp	r6, #0
10008858:	d133      	bne.n	100088c2 <__ieee754_sqrt+0x1c6>
1000885a:	0ae2      	lsrs	r2, r4, #11
1000885c:	3915      	subs	r1, #21
1000885e:	0564      	lsls	r4, r4, #21
10008860:	2a00      	cmp	r2, #0
10008862:	d0fa      	beq.n	1000885a <__ieee754_sqrt+0x15e>
10008864:	2380      	movs	r3, #128	; 0x80
10008866:	035b      	lsls	r3, r3, #13
10008868:	421a      	tst	r2, r3
1000886a:	d126      	bne.n	100088ba <__ieee754_sqrt+0x1be>
1000886c:	2080      	movs	r0, #128	; 0x80
1000886e:	2300      	movs	r3, #0
10008870:	0340      	lsls	r0, r0, #13
10008872:	0052      	lsls	r2, r2, #1
10008874:	3301      	adds	r3, #1
10008876:	4202      	tst	r2, r0
10008878:	d0fb      	beq.n	10008872 <__ieee754_sqrt+0x176>
1000887a:	2501      	movs	r5, #1
1000887c:	2020      	movs	r0, #32
1000887e:	1aed      	subs	r5, r5, r3
10008880:	1ac0      	subs	r0, r0, r3
10008882:	1949      	adds	r1, r1, r5
10008884:	1c25      	adds	r5, r4, #0
10008886:	40c5      	lsrs	r5, r0
10008888:	409c      	lsls	r4, r3
1000888a:	432a      	orrs	r2, r5
1000888c:	e74d      	b.n	1000872a <__ieee754_sqrt+0x2e>
1000888e:	1c2a      	adds	r2, r5, #0
10008890:	1c33      	adds	r3, r6, #0
10008892:	1c28      	adds	r0, r5, #0
10008894:	1c31      	adds	r1, r6, #0
10008896:	f003 f929 	bl	1000baec <__aeabi_dmul>
1000889a:	1c2a      	adds	r2, r5, #0
1000889c:	1c33      	adds	r3, r6, #0
1000889e:	f002 f9bf 	bl	1000ac20 <__aeabi_dadd>
100088a2:	1c05      	adds	r5, r0, #0
100088a4:	1c0e      	adds	r6, r1, #0
100088a6:	e7a6      	b.n	100087f6 <__ieee754_sqrt+0xfa>
100088a8:	4666      	mov	r6, ip
100088aa:	2e00      	cmp	r6, #0
100088ac:	daaf      	bge.n	1000880e <__ieee754_sqrt+0x112>
100088ae:	2300      	movs	r3, #0
100088b0:	46a9      	mov	r9, r5
100088b2:	e77f      	b.n	100087b4 <__ieee754_sqrt+0xb8>
100088b4:	3701      	adds	r7, #1
100088b6:	2300      	movs	r3, #0
100088b8:	e78f      	b.n	100087da <__ieee754_sqrt+0xde>
100088ba:	2020      	movs	r0, #32
100088bc:	2501      	movs	r5, #1
100088be:	2300      	movs	r3, #0
100088c0:	e7df      	b.n	10008882 <__ieee754_sqrt+0x186>
100088c2:	1c2a      	adds	r2, r5, #0
100088c4:	1c33      	adds	r3, r6, #0
100088c6:	1c28      	adds	r0, r5, #0
100088c8:	1c31      	adds	r1, r6, #0
100088ca:	f003 fba9 	bl	1000c020 <__aeabi_dsub>
100088ce:	1c02      	adds	r2, r0, #0
100088d0:	1c0b      	adds	r3, r1, #0
100088d2:	f002 fccd 	bl	1000b270 <__aeabi_ddiv>
100088d6:	1c05      	adds	r5, r0, #0
100088d8:	1c0e      	adds	r6, r1, #0
100088da:	e78c      	b.n	100087f6 <__ieee754_sqrt+0xfa>
100088dc:	7ff00000 	.word	0x7ff00000
100088e0:	fffffc01 	.word	0xfffffc01
100088e4:	3fe00000 	.word	0x3fe00000

100088e8 <__kernel_cos>:
100088e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100088ea:	464f      	mov	r7, r9
100088ec:	4646      	mov	r6, r8
100088ee:	b4c0      	push	{r6, r7}
100088f0:	b087      	sub	sp, #28
100088f2:	9200      	str	r2, [sp, #0]
100088f4:	9301      	str	r3, [sp, #4]
100088f6:	4b75      	ldr	r3, [pc, #468]	; (10008acc <__kernel_cos+0x1e4>)
100088f8:	004f      	lsls	r7, r1, #1
100088fa:	4681      	mov	r9, r0
100088fc:	4688      	mov	r8, r1
100088fe:	087f      	lsrs	r7, r7, #1
10008900:	429f      	cmp	r7, r3
10008902:	dc63      	bgt.n	100089cc <__kernel_cos+0xe4>
10008904:	f003 ff06 	bl	1000c714 <__aeabi_d2iz>
10008908:	2800      	cmp	r0, #0
1000890a:	d100      	bne.n	1000890e <__kernel_cos+0x26>
1000890c:	e0da      	b.n	10008ac4 <__kernel_cos+0x1dc>
1000890e:	464a      	mov	r2, r9
10008910:	4643      	mov	r3, r8
10008912:	4648      	mov	r0, r9
10008914:	4641      	mov	r1, r8
10008916:	f003 f8e9 	bl	1000baec <__aeabi_dmul>
1000891a:	1c04      	adds	r4, r0, #0
1000891c:	1c0d      	adds	r5, r1, #0
1000891e:	4a6c      	ldr	r2, [pc, #432]	; (10008ad0 <__kernel_cos+0x1e8>)
10008920:	4b6c      	ldr	r3, [pc, #432]	; (10008ad4 <__kernel_cos+0x1ec>)
10008922:	f003 f8e3 	bl	1000baec <__aeabi_dmul>
10008926:	4a6c      	ldr	r2, [pc, #432]	; (10008ad8 <__kernel_cos+0x1f0>)
10008928:	4b6c      	ldr	r3, [pc, #432]	; (10008adc <__kernel_cos+0x1f4>)
1000892a:	f002 f979 	bl	1000ac20 <__aeabi_dadd>
1000892e:	1c22      	adds	r2, r4, #0
10008930:	1c2b      	adds	r3, r5, #0
10008932:	f003 f8db 	bl	1000baec <__aeabi_dmul>
10008936:	4a6a      	ldr	r2, [pc, #424]	; (10008ae0 <__kernel_cos+0x1f8>)
10008938:	4b6a      	ldr	r3, [pc, #424]	; (10008ae4 <__kernel_cos+0x1fc>)
1000893a:	f003 fb71 	bl	1000c020 <__aeabi_dsub>
1000893e:	1c22      	adds	r2, r4, #0
10008940:	1c2b      	adds	r3, r5, #0
10008942:	f003 f8d3 	bl	1000baec <__aeabi_dmul>
10008946:	4a68      	ldr	r2, [pc, #416]	; (10008ae8 <__kernel_cos+0x200>)
10008948:	4b68      	ldr	r3, [pc, #416]	; (10008aec <__kernel_cos+0x204>)
1000894a:	f002 f969 	bl	1000ac20 <__aeabi_dadd>
1000894e:	1c22      	adds	r2, r4, #0
10008950:	1c2b      	adds	r3, r5, #0
10008952:	f003 f8cb 	bl	1000baec <__aeabi_dmul>
10008956:	4a66      	ldr	r2, [pc, #408]	; (10008af0 <__kernel_cos+0x208>)
10008958:	4b66      	ldr	r3, [pc, #408]	; (10008af4 <__kernel_cos+0x20c>)
1000895a:	f003 fb61 	bl	1000c020 <__aeabi_dsub>
1000895e:	1c22      	adds	r2, r4, #0
10008960:	1c2b      	adds	r3, r5, #0
10008962:	f003 f8c3 	bl	1000baec <__aeabi_dmul>
10008966:	4a64      	ldr	r2, [pc, #400]	; (10008af8 <__kernel_cos+0x210>)
10008968:	4b64      	ldr	r3, [pc, #400]	; (10008afc <__kernel_cos+0x214>)
1000896a:	f002 f959 	bl	1000ac20 <__aeabi_dadd>
1000896e:	1c22      	adds	r2, r4, #0
10008970:	1c2b      	adds	r3, r5, #0
10008972:	f003 f8bb 	bl	1000baec <__aeabi_dmul>
10008976:	9002      	str	r0, [sp, #8]
10008978:	9103      	str	r1, [sp, #12]
1000897a:	1c20      	adds	r0, r4, #0
1000897c:	1c29      	adds	r1, r5, #0
1000897e:	2200      	movs	r2, #0
10008980:	4b5f      	ldr	r3, [pc, #380]	; (10008b00 <__kernel_cos+0x218>)
10008982:	f003 f8b3 	bl	1000baec <__aeabi_dmul>
10008986:	9a02      	ldr	r2, [sp, #8]
10008988:	9b03      	ldr	r3, [sp, #12]
1000898a:	1c06      	adds	r6, r0, #0
1000898c:	1c0f      	adds	r7, r1, #0
1000898e:	1c20      	adds	r0, r4, #0
10008990:	1c29      	adds	r1, r5, #0
10008992:	f003 f8ab 	bl	1000baec <__aeabi_dmul>
10008996:	9a00      	ldr	r2, [sp, #0]
10008998:	9b01      	ldr	r3, [sp, #4]
1000899a:	1c04      	adds	r4, r0, #0
1000899c:	1c0d      	adds	r5, r1, #0
1000899e:	4648      	mov	r0, r9
100089a0:	4641      	mov	r1, r8
100089a2:	f003 f8a3 	bl	1000baec <__aeabi_dmul>
100089a6:	1c02      	adds	r2, r0, #0
100089a8:	1c0b      	adds	r3, r1, #0
100089aa:	1c20      	adds	r0, r4, #0
100089ac:	1c29      	adds	r1, r5, #0
100089ae:	f003 fb37 	bl	1000c020 <__aeabi_dsub>
100089b2:	1c02      	adds	r2, r0, #0
100089b4:	1c0b      	adds	r3, r1, #0
100089b6:	1c30      	adds	r0, r6, #0
100089b8:	1c39      	adds	r1, r7, #0
100089ba:	f003 fb31 	bl	1000c020 <__aeabi_dsub>
100089be:	1c02      	adds	r2, r0, #0
100089c0:	1c0b      	adds	r3, r1, #0
100089c2:	2000      	movs	r0, #0
100089c4:	494f      	ldr	r1, [pc, #316]	; (10008b04 <__kernel_cos+0x21c>)
100089c6:	f003 fb2b 	bl	1000c020 <__aeabi_dsub>
100089ca:	e070      	b.n	10008aae <__kernel_cos+0x1c6>
100089cc:	464a      	mov	r2, r9
100089ce:	4643      	mov	r3, r8
100089d0:	f003 f88c 	bl	1000baec <__aeabi_dmul>
100089d4:	1c04      	adds	r4, r0, #0
100089d6:	1c0d      	adds	r5, r1, #0
100089d8:	4a3d      	ldr	r2, [pc, #244]	; (10008ad0 <__kernel_cos+0x1e8>)
100089da:	4b3e      	ldr	r3, [pc, #248]	; (10008ad4 <__kernel_cos+0x1ec>)
100089dc:	f003 f886 	bl	1000baec <__aeabi_dmul>
100089e0:	4a3d      	ldr	r2, [pc, #244]	; (10008ad8 <__kernel_cos+0x1f0>)
100089e2:	4b3e      	ldr	r3, [pc, #248]	; (10008adc <__kernel_cos+0x1f4>)
100089e4:	f002 f91c 	bl	1000ac20 <__aeabi_dadd>
100089e8:	1c22      	adds	r2, r4, #0
100089ea:	1c2b      	adds	r3, r5, #0
100089ec:	f003 f87e 	bl	1000baec <__aeabi_dmul>
100089f0:	4a3b      	ldr	r2, [pc, #236]	; (10008ae0 <__kernel_cos+0x1f8>)
100089f2:	4b3c      	ldr	r3, [pc, #240]	; (10008ae4 <__kernel_cos+0x1fc>)
100089f4:	f003 fb14 	bl	1000c020 <__aeabi_dsub>
100089f8:	1c22      	adds	r2, r4, #0
100089fa:	1c2b      	adds	r3, r5, #0
100089fc:	f003 f876 	bl	1000baec <__aeabi_dmul>
10008a00:	4a39      	ldr	r2, [pc, #228]	; (10008ae8 <__kernel_cos+0x200>)
10008a02:	4b3a      	ldr	r3, [pc, #232]	; (10008aec <__kernel_cos+0x204>)
10008a04:	f002 f90c 	bl	1000ac20 <__aeabi_dadd>
10008a08:	1c22      	adds	r2, r4, #0
10008a0a:	1c2b      	adds	r3, r5, #0
10008a0c:	f003 f86e 	bl	1000baec <__aeabi_dmul>
10008a10:	4a37      	ldr	r2, [pc, #220]	; (10008af0 <__kernel_cos+0x208>)
10008a12:	4b38      	ldr	r3, [pc, #224]	; (10008af4 <__kernel_cos+0x20c>)
10008a14:	f003 fb04 	bl	1000c020 <__aeabi_dsub>
10008a18:	1c22      	adds	r2, r4, #0
10008a1a:	1c2b      	adds	r3, r5, #0
10008a1c:	f003 f866 	bl	1000baec <__aeabi_dmul>
10008a20:	4a35      	ldr	r2, [pc, #212]	; (10008af8 <__kernel_cos+0x210>)
10008a22:	4b36      	ldr	r3, [pc, #216]	; (10008afc <__kernel_cos+0x214>)
10008a24:	f002 f8fc 	bl	1000ac20 <__aeabi_dadd>
10008a28:	1c2b      	adds	r3, r5, #0
10008a2a:	1c22      	adds	r2, r4, #0
10008a2c:	f003 f85e 	bl	1000baec <__aeabi_dmul>
10008a30:	4b35      	ldr	r3, [pc, #212]	; (10008b08 <__kernel_cos+0x220>)
10008a32:	9002      	str	r0, [sp, #8]
10008a34:	9103      	str	r1, [sp, #12]
10008a36:	429f      	cmp	r7, r3
10008a38:	dd9f      	ble.n	1000897a <__kernel_cos+0x92>
10008a3a:	4b34      	ldr	r3, [pc, #208]	; (10008b0c <__kernel_cos+0x224>)
10008a3c:	2200      	movs	r2, #0
10008a3e:	429f      	cmp	r7, r3
10008a40:	dc3a      	bgt.n	10008ab8 <__kernel_cos+0x1d0>
10008a42:	4933      	ldr	r1, [pc, #204]	; (10008b10 <__kernel_cos+0x228>)
10008a44:	2000      	movs	r0, #0
10008a46:	187b      	adds	r3, r7, r1
10008a48:	492e      	ldr	r1, [pc, #184]	; (10008b04 <__kernel_cos+0x21c>)
10008a4a:	1c16      	adds	r6, r2, #0
10008a4c:	1c1f      	adds	r7, r3, #0
10008a4e:	f003 fae7 	bl	1000c020 <__aeabi_dsub>
10008a52:	9004      	str	r0, [sp, #16]
10008a54:	9105      	str	r1, [sp, #20]
10008a56:	1c20      	adds	r0, r4, #0
10008a58:	1c29      	adds	r1, r5, #0
10008a5a:	2200      	movs	r2, #0
10008a5c:	4b28      	ldr	r3, [pc, #160]	; (10008b00 <__kernel_cos+0x218>)
10008a5e:	f003 f845 	bl	1000baec <__aeabi_dmul>
10008a62:	1c32      	adds	r2, r6, #0
10008a64:	1c3b      	adds	r3, r7, #0
10008a66:	f003 fadb 	bl	1000c020 <__aeabi_dsub>
10008a6a:	9a02      	ldr	r2, [sp, #8]
10008a6c:	9b03      	ldr	r3, [sp, #12]
10008a6e:	1c06      	adds	r6, r0, #0
10008a70:	1c0f      	adds	r7, r1, #0
10008a72:	1c20      	adds	r0, r4, #0
10008a74:	1c29      	adds	r1, r5, #0
10008a76:	f003 f839 	bl	1000baec <__aeabi_dmul>
10008a7a:	9a00      	ldr	r2, [sp, #0]
10008a7c:	9b01      	ldr	r3, [sp, #4]
10008a7e:	1c04      	adds	r4, r0, #0
10008a80:	1c0d      	adds	r5, r1, #0
10008a82:	4648      	mov	r0, r9
10008a84:	4641      	mov	r1, r8
10008a86:	f003 f831 	bl	1000baec <__aeabi_dmul>
10008a8a:	1c02      	adds	r2, r0, #0
10008a8c:	1c0b      	adds	r3, r1, #0
10008a8e:	1c20      	adds	r0, r4, #0
10008a90:	1c29      	adds	r1, r5, #0
10008a92:	f003 fac5 	bl	1000c020 <__aeabi_dsub>
10008a96:	1c02      	adds	r2, r0, #0
10008a98:	1c0b      	adds	r3, r1, #0
10008a9a:	1c30      	adds	r0, r6, #0
10008a9c:	1c39      	adds	r1, r7, #0
10008a9e:	f003 fabf 	bl	1000c020 <__aeabi_dsub>
10008aa2:	1c02      	adds	r2, r0, #0
10008aa4:	1c0b      	adds	r3, r1, #0
10008aa6:	9804      	ldr	r0, [sp, #16]
10008aa8:	9905      	ldr	r1, [sp, #20]
10008aaa:	f003 fab9 	bl	1000c020 <__aeabi_dsub>
10008aae:	b007      	add	sp, #28
10008ab0:	bc0c      	pop	{r2, r3}
10008ab2:	4690      	mov	r8, r2
10008ab4:	4699      	mov	r9, r3
10008ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008ab8:	4b16      	ldr	r3, [pc, #88]	; (10008b14 <__kernel_cos+0x22c>)
10008aba:	2600      	movs	r6, #0
10008abc:	9204      	str	r2, [sp, #16]
10008abe:	9305      	str	r3, [sp, #20]
10008ac0:	4f15      	ldr	r7, [pc, #84]	; (10008b18 <__kernel_cos+0x230>)
10008ac2:	e7c8      	b.n	10008a56 <__kernel_cos+0x16e>
10008ac4:	2000      	movs	r0, #0
10008ac6:	490f      	ldr	r1, [pc, #60]	; (10008b04 <__kernel_cos+0x21c>)
10008ac8:	e7f1      	b.n	10008aae <__kernel_cos+0x1c6>
10008aca:	46c0      	nop			; (mov r8, r8)
10008acc:	3e3fffff 	.word	0x3e3fffff
10008ad0:	be8838d4 	.word	0xbe8838d4
10008ad4:	bda8fae9 	.word	0xbda8fae9
10008ad8:	bdb4b1c4 	.word	0xbdb4b1c4
10008adc:	3e21ee9e 	.word	0x3e21ee9e
10008ae0:	809c52ad 	.word	0x809c52ad
10008ae4:	3e927e4f 	.word	0x3e927e4f
10008ae8:	19cb1590 	.word	0x19cb1590
10008aec:	3efa01a0 	.word	0x3efa01a0
10008af0:	16c15177 	.word	0x16c15177
10008af4:	3f56c16c 	.word	0x3f56c16c
10008af8:	5555554c 	.word	0x5555554c
10008afc:	3fa55555 	.word	0x3fa55555
10008b00:	3fe00000 	.word	0x3fe00000
10008b04:	3ff00000 	.word	0x3ff00000
10008b08:	3fd33332 	.word	0x3fd33332
10008b0c:	3fe90000 	.word	0x3fe90000
10008b10:	ffe00000 	.word	0xffe00000
10008b14:	3fe70000 	.word	0x3fe70000
10008b18:	3fd20000 	.word	0x3fd20000

10008b1c <__kernel_rem_pio2>:
10008b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b1e:	4656      	mov	r6, sl
10008b20:	464d      	mov	r5, r9
10008b22:	4644      	mov	r4, r8
10008b24:	465f      	mov	r7, fp
10008b26:	b4f0      	push	{r4, r5, r6, r7}
10008b28:	4c8e      	ldr	r4, [pc, #568]	; (10008d64 <__kernel_rem_pio2+0x248>)
10008b2a:	44a5      	add	sp, r4
10008b2c:	9108      	str	r1, [sp, #32]
10008b2e:	1c19      	adds	r1, r3, #0
10008b30:	1c14      	adds	r4, r2, #0
10008b32:	9aa6      	ldr	r2, [sp, #664]	; 0x298
10008b34:	9309      	str	r3, [sp, #36]	; 0x24
10008b36:	4b8c      	ldr	r3, [pc, #560]	; (10008d68 <__kernel_rem_pio2+0x24c>)
10008b38:	0092      	lsls	r2, r2, #2
10008b3a:	58d2      	ldr	r2, [r2, r3]
10008b3c:	1c0b      	adds	r3, r1, #0
10008b3e:	9002      	str	r0, [sp, #8]
10008b40:	3b01      	subs	r3, #1
10008b42:	1ee0      	subs	r0, r4, #3
10008b44:	2118      	movs	r1, #24
10008b46:	1c1d      	adds	r5, r3, #0
10008b48:	1c16      	adds	r6, r2, #0
10008b4a:	9207      	str	r2, [sp, #28]
10008b4c:	9300      	str	r3, [sp, #0]
10008b4e:	f7f9 fd8b 	bl	10002668 <__aeabi_idiv>
10008b52:	43c3      	mvns	r3, r0
10008b54:	1c02      	adds	r2, r0, #0
10008b56:	17db      	asrs	r3, r3, #31
10008b58:	401a      	ands	r2, r3
10008b5a:	43d3      	mvns	r3, r2
10008b5c:	1c11      	adds	r1, r2, #0
10008b5e:	920c      	str	r2, [sp, #48]	; 0x30
10008b60:	005a      	lsls	r2, r3, #1
10008b62:	18d3      	adds	r3, r2, r3
10008b64:	00db      	lsls	r3, r3, #3
10008b66:	191b      	adds	r3, r3, r4
10008b68:	9304      	str	r3, [sp, #16]
10008b6a:	1b4c      	subs	r4, r1, r5
10008b6c:	19ae      	adds	r6, r5, r6
10008b6e:	d418      	bmi.n	10008ba2 <__kernel_rem_pio2+0x86>
10008b70:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
10008b72:	00a5      	lsls	r5, r4, #2
10008b74:	469c      	mov	ip, r3
10008b76:	19a6      	adds	r6, r4, r6
10008b78:	af24      	add	r7, sp, #144	; 0x90
10008b7a:	4465      	add	r5, ip
10008b7c:	3601      	adds	r6, #1
10008b7e:	e007      	b.n	10008b90 <__kernel_rem_pio2+0x74>
10008b80:	6828      	ldr	r0, [r5, #0]
10008b82:	f003 fdfd 	bl	1000c780 <__aeabi_i2d>
10008b86:	3401      	adds	r4, #1
10008b88:	c703      	stmia	r7!, {r0, r1}
10008b8a:	3504      	adds	r5, #4
10008b8c:	42b4      	cmp	r4, r6
10008b8e:	d008      	beq.n	10008ba2 <__kernel_rem_pio2+0x86>
10008b90:	2c00      	cmp	r4, #0
10008b92:	daf5      	bge.n	10008b80 <__kernel_rem_pio2+0x64>
10008b94:	2000      	movs	r0, #0
10008b96:	2100      	movs	r1, #0
10008b98:	3401      	adds	r4, #1
10008b9a:	c703      	stmia	r7!, {r0, r1}
10008b9c:	3504      	adds	r5, #4
10008b9e:	42b4      	cmp	r4, r6
10008ba0:	d1f6      	bne.n	10008b90 <__kernel_rem_pio2+0x74>
10008ba2:	9b07      	ldr	r3, [sp, #28]
10008ba4:	2b00      	cmp	r3, #0
10008ba6:	da01      	bge.n	10008bac <__kernel_rem_pio2+0x90>
10008ba8:	f000 fbec 	bl	10009384 <__kernel_rem_pio2+0x868>
10008bac:	2200      	movs	r2, #0
10008bae:	9b07      	ldr	r3, [sp, #28]
10008bb0:	4691      	mov	r9, r2
10008bb2:	3301      	adds	r3, #1
10008bb4:	00db      	lsls	r3, r3, #3
10008bb6:	469a      	mov	sl, r3
10008bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008bba:	aa74      	add	r2, sp, #464	; 0x1d0
10008bbc:	00db      	lsls	r3, r3, #3
10008bbe:	9206      	str	r2, [sp, #24]
10008bc0:	2208      	movs	r2, #8
10008bc2:	469c      	mov	ip, r3
10008bc4:	4252      	negs	r2, r2
10008bc6:	4462      	add	r2, ip
10008bc8:	4693      	mov	fp, r2
10008bca:	9303      	str	r3, [sp, #12]
10008bcc:	9b00      	ldr	r3, [sp, #0]
10008bce:	2b00      	cmp	r3, #0
10008bd0:	da00      	bge.n	10008bd4 <__kernel_rem_pio2+0xb8>
10008bd2:	e290      	b.n	100090f6 <__kernel_rem_pio2+0x5da>
10008bd4:	ab24      	add	r3, sp, #144	; 0x90
10008bd6:	469c      	mov	ip, r3
10008bd8:	465c      	mov	r4, fp
10008bda:	464b      	mov	r3, r9
10008bdc:	46e0      	mov	r8, ip
10008bde:	2600      	movs	r6, #0
10008be0:	2700      	movs	r7, #0
10008be2:	444c      	add	r4, r9
10008be4:	3b08      	subs	r3, #8
10008be6:	9d02      	ldr	r5, [sp, #8]
10008be8:	4464      	add	r4, ip
10008bea:	4498      	add	r8, r3
10008bec:	6822      	ldr	r2, [r4, #0]
10008bee:	6863      	ldr	r3, [r4, #4]
10008bf0:	cd03      	ldmia	r5!, {r0, r1}
10008bf2:	f002 ff7b 	bl	1000baec <__aeabi_dmul>
10008bf6:	1c02      	adds	r2, r0, #0
10008bf8:	1c0b      	adds	r3, r1, #0
10008bfa:	1c30      	adds	r0, r6, #0
10008bfc:	1c39      	adds	r1, r7, #0
10008bfe:	f002 f80f 	bl	1000ac20 <__aeabi_dadd>
10008c02:	3c08      	subs	r4, #8
10008c04:	1c06      	adds	r6, r0, #0
10008c06:	1c0f      	adds	r7, r1, #0
10008c08:	4544      	cmp	r4, r8
10008c0a:	d1ef      	bne.n	10008bec <__kernel_rem_pio2+0xd0>
10008c0c:	9b06      	ldr	r3, [sp, #24]
10008c0e:	444b      	add	r3, r9
10008c10:	601e      	str	r6, [r3, #0]
10008c12:	605f      	str	r7, [r3, #4]
10008c14:	2308      	movs	r3, #8
10008c16:	469c      	mov	ip, r3
10008c18:	44e1      	add	r9, ip
10008c1a:	45d1      	cmp	r9, sl
10008c1c:	d1d6      	bne.n	10008bcc <__kernel_rem_pio2+0xb0>
10008c1e:	9a07      	ldr	r2, [sp, #28]
10008c20:	4952      	ldr	r1, [pc, #328]	; (10008d6c <__kernel_rem_pio2+0x250>)
10008c22:	1c13      	adds	r3, r2, #0
10008c24:	468c      	mov	ip, r1
10008c26:	4463      	add	r3, ip
10008c28:	009b      	lsls	r3, r3, #2
10008c2a:	a810      	add	r0, sp, #64	; 0x40
10008c2c:	1c19      	adds	r1, r3, #0
10008c2e:	4684      	mov	ip, r0
10008c30:	4691      	mov	r9, r2
10008c32:	3304      	adds	r3, #4
10008c34:	4461      	add	r1, ip
10008c36:	4463      	add	r3, ip
10008c38:	910b      	str	r1, [sp, #44]	; 0x2c
10008c3a:	930d      	str	r3, [sp, #52]	; 0x34
10008c3c:	464b      	mov	r3, r9
10008c3e:	00db      	lsls	r3, r3, #3
10008c40:	1c1a      	adds	r2, r3, #0
10008c42:	9906      	ldr	r1, [sp, #24]
10008c44:	930a      	str	r3, [sp, #40]	; 0x28
10008c46:	4694      	mov	ip, r2
10008c48:	1c0b      	adds	r3, r1, #0
10008c4a:	4463      	add	r3, ip
10008c4c:	681e      	ldr	r6, [r3, #0]
10008c4e:	685f      	ldr	r7, [r3, #4]
10008c50:	464b      	mov	r3, r9
10008c52:	2b00      	cmp	r3, #0
10008c54:	dd32      	ble.n	10008cbc <__kernel_rem_pio2+0x1a0>
10008c56:	4688      	mov	r8, r1
10008c58:	ab10      	add	r3, sp, #64	; 0x40
10008c5a:	469a      	mov	sl, r3
10008c5c:	4b44      	ldr	r3, [pc, #272]	; (10008d70 <__kernel_rem_pio2+0x254>)
10008c5e:	444b      	add	r3, r9
10008c60:	00db      	lsls	r3, r3, #3
10008c62:	4498      	add	r8, r3
10008c64:	ab72      	add	r3, sp, #456	; 0x1c8
10008c66:	469b      	mov	fp, r3
10008c68:	2200      	movs	r2, #0
10008c6a:	4b42      	ldr	r3, [pc, #264]	; (10008d74 <__kernel_rem_pio2+0x258>)
10008c6c:	1c30      	adds	r0, r6, #0
10008c6e:	1c39      	adds	r1, r7, #0
10008c70:	f002 ff3c 	bl	1000baec <__aeabi_dmul>
10008c74:	f003 fd4e 	bl	1000c714 <__aeabi_d2iz>
10008c78:	f003 fd82 	bl	1000c780 <__aeabi_i2d>
10008c7c:	2200      	movs	r2, #0
10008c7e:	4b3e      	ldr	r3, [pc, #248]	; (10008d78 <__kernel_rem_pio2+0x25c>)
10008c80:	1c04      	adds	r4, r0, #0
10008c82:	1c0d      	adds	r5, r1, #0
10008c84:	f002 ff32 	bl	1000baec <__aeabi_dmul>
10008c88:	1c02      	adds	r2, r0, #0
10008c8a:	1c0b      	adds	r3, r1, #0
10008c8c:	1c30      	adds	r0, r6, #0
10008c8e:	1c39      	adds	r1, r7, #0
10008c90:	f003 f9c6 	bl	1000c020 <__aeabi_dsub>
10008c94:	f003 fd3e 	bl	1000c714 <__aeabi_d2iz>
10008c98:	4653      	mov	r3, sl
10008c9a:	c301      	stmia	r3!, {r0}
10008c9c:	469a      	mov	sl, r3
10008c9e:	4643      	mov	r3, r8
10008ca0:	1c20      	adds	r0, r4, #0
10008ca2:	681a      	ldr	r2, [r3, #0]
10008ca4:	685b      	ldr	r3, [r3, #4]
10008ca6:	1c29      	adds	r1, r5, #0
10008ca8:	f001 ffba 	bl	1000ac20 <__aeabi_dadd>
10008cac:	2308      	movs	r3, #8
10008cae:	425b      	negs	r3, r3
10008cb0:	469c      	mov	ip, r3
10008cb2:	44e0      	add	r8, ip
10008cb4:	1c06      	adds	r6, r0, #0
10008cb6:	1c0f      	adds	r7, r1, #0
10008cb8:	45d8      	cmp	r8, fp
10008cba:	d1d5      	bne.n	10008c68 <__kernel_rem_pio2+0x14c>
10008cbc:	9b04      	ldr	r3, [sp, #16]
10008cbe:	1c30      	adds	r0, r6, #0
10008cc0:	1c1a      	adds	r2, r3, #0
10008cc2:	1c39      	adds	r1, r7, #0
10008cc4:	4698      	mov	r8, r3
10008cc6:	f000 ff73 	bl	10009bb0 <scalbn>
10008cca:	23ff      	movs	r3, #255	; 0xff
10008ccc:	2200      	movs	r2, #0
10008cce:	059b      	lsls	r3, r3, #22
10008cd0:	1c04      	adds	r4, r0, #0
10008cd2:	1c0d      	adds	r5, r1, #0
10008cd4:	f002 ff0a 	bl	1000baec <__aeabi_dmul>
10008cd8:	f000 fdec 	bl	100098b4 <floor>
10008cdc:	2200      	movs	r2, #0
10008cde:	4b27      	ldr	r3, [pc, #156]	; (10008d7c <__kernel_rem_pio2+0x260>)
10008ce0:	f002 ff04 	bl	1000baec <__aeabi_dmul>
10008ce4:	1c02      	adds	r2, r0, #0
10008ce6:	1c0b      	adds	r3, r1, #0
10008ce8:	1c20      	adds	r0, r4, #0
10008cea:	1c29      	adds	r1, r5, #0
10008cec:	f003 f998 	bl	1000c020 <__aeabi_dsub>
10008cf0:	1c0d      	adds	r5, r1, #0
10008cf2:	1c04      	adds	r4, r0, #0
10008cf4:	f003 fd0e 	bl	1000c714 <__aeabi_d2iz>
10008cf8:	4682      	mov	sl, r0
10008cfa:	f003 fd41 	bl	1000c780 <__aeabi_i2d>
10008cfe:	1c02      	adds	r2, r0, #0
10008d00:	1c0b      	adds	r3, r1, #0
10008d02:	1c20      	adds	r0, r4, #0
10008d04:	1c29      	adds	r1, r5, #0
10008d06:	f003 f98b 	bl	1000c020 <__aeabi_dsub>
10008d0a:	1c06      	adds	r6, r0, #0
10008d0c:	4640      	mov	r0, r8
10008d0e:	1c0f      	adds	r7, r1, #0
10008d10:	2800      	cmp	r0, #0
10008d12:	dc00      	bgt.n	10008d16 <__kernel_rem_pio2+0x1fa>
10008d14:	e1cf      	b.n	100090b6 <__kernel_rem_pio2+0x59a>
10008d16:	464b      	mov	r3, r9
10008d18:	1e5a      	subs	r2, r3, #1
10008d1a:	0092      	lsls	r2, r2, #2
10008d1c:	ab10      	add	r3, sp, #64	; 0x40
10008d1e:	589b      	ldr	r3, [r3, r2]
10008d20:	2518      	movs	r5, #24
10008d22:	1c19      	adds	r1, r3, #0
10008d24:	1a2d      	subs	r5, r5, r0
10008d26:	4129      	asrs	r1, r5
10008d28:	448a      	add	sl, r1
10008d2a:	40a9      	lsls	r1, r5
10008d2c:	2517      	movs	r5, #23
10008d2e:	1a5b      	subs	r3, r3, r1
10008d30:	1a2d      	subs	r5, r5, r0
10008d32:	a910      	add	r1, sp, #64	; 0x40
10008d34:	508b      	str	r3, [r1, r2]
10008d36:	412b      	asrs	r3, r5
10008d38:	9305      	str	r3, [sp, #20]
10008d3a:	9b05      	ldr	r3, [sp, #20]
10008d3c:	2b00      	cmp	r3, #0
10008d3e:	dd4c      	ble.n	10008dda <__kernel_rem_pio2+0x2be>
10008d40:	2301      	movs	r3, #1
10008d42:	469c      	mov	ip, r3
10008d44:	464b      	mov	r3, r9
10008d46:	44e2      	add	sl, ip
10008d48:	2b00      	cmp	r3, #0
10008d4a:	dc00      	bgt.n	10008d4e <__kernel_rem_pio2+0x232>
10008d4c:	e318      	b.n	10009380 <__kernel_rem_pio2+0x864>
10008d4e:	2580      	movs	r5, #128	; 0x80
10008d50:	960e      	str	r6, [sp, #56]	; 0x38
10008d52:	970f      	str	r7, [sp, #60]	; 0x3c
10008d54:	ab10      	add	r3, sp, #64	; 0x40
10008d56:	2100      	movs	r1, #0
10008d58:	2400      	movs	r4, #0
10008d5a:	4809      	ldr	r0, [pc, #36]	; (10008d80 <__kernel_rem_pio2+0x264>)
10008d5c:	046d      	lsls	r5, r5, #17
10008d5e:	464e      	mov	r6, r9
10008d60:	e019      	b.n	10008d96 <__kernel_rem_pio2+0x27a>
10008d62:	46c0      	nop			; (mov r8, r8)
10008d64:	fffffd8c 	.word	0xfffffd8c
10008d68:	1000d328 	.word	0x1000d328
10008d6c:	3ffffffe 	.word	0x3ffffffe
10008d70:	1fffffff 	.word	0x1fffffff
10008d74:	3e700000 	.word	0x3e700000
10008d78:	41700000 	.word	0x41700000
10008d7c:	40200000 	.word	0x40200000
10008d80:	00ffffff 	.word	0x00ffffff
10008d84:	2a00      	cmp	r2, #0
10008d86:	d002      	beq.n	10008d8e <__kernel_rem_pio2+0x272>
10008d88:	1aaa      	subs	r2, r5, r2
10008d8a:	601a      	str	r2, [r3, #0]
10008d8c:	3401      	adds	r4, #1
10008d8e:	3101      	adds	r1, #1
10008d90:	3304      	adds	r3, #4
10008d92:	428e      	cmp	r6, r1
10008d94:	dd09      	ble.n	10008daa <__kernel_rem_pio2+0x28e>
10008d96:	681a      	ldr	r2, [r3, #0]
10008d98:	2c00      	cmp	r4, #0
10008d9a:	d0f3      	beq.n	10008d84 <__kernel_rem_pio2+0x268>
10008d9c:	1a82      	subs	r2, r0, r2
10008d9e:	3101      	adds	r1, #1
10008da0:	601a      	str	r2, [r3, #0]
10008da2:	2401      	movs	r4, #1
10008da4:	3304      	adds	r3, #4
10008da6:	428e      	cmp	r6, r1
10008da8:	dcf5      	bgt.n	10008d96 <__kernel_rem_pio2+0x27a>
10008daa:	46b1      	mov	r9, r6
10008dac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
10008dae:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
10008db0:	9b04      	ldr	r3, [sp, #16]
10008db2:	2b00      	cmp	r3, #0
10008db4:	dd0e      	ble.n	10008dd4 <__kernel_rem_pio2+0x2b8>
10008db6:	2b01      	cmp	r3, #1
10008db8:	d100      	bne.n	10008dbc <__kernel_rem_pio2+0x2a0>
10008dba:	e187      	b.n	100090cc <__kernel_rem_pio2+0x5b0>
10008dbc:	2b02      	cmp	r3, #2
10008dbe:	d109      	bne.n	10008dd4 <__kernel_rem_pio2+0x2b8>
10008dc0:	464b      	mov	r3, r9
10008dc2:	1e5a      	subs	r2, r3, #1
10008dc4:	0092      	lsls	r2, r2, #2
10008dc6:	ab10      	add	r3, sp, #64	; 0x40
10008dc8:	589b      	ldr	r3, [r3, r2]
10008dca:	a910      	add	r1, sp, #64	; 0x40
10008dcc:	930e      	str	r3, [sp, #56]	; 0x38
10008dce:	029b      	lsls	r3, r3, #10
10008dd0:	0a9b      	lsrs	r3, r3, #10
10008dd2:	508b      	str	r3, [r1, r2]
10008dd4:	9b05      	ldr	r3, [sp, #20]
10008dd6:	2b02      	cmp	r3, #2
10008dd8:	d07a      	beq.n	10008ed0 <__kernel_rem_pio2+0x3b4>
10008dda:	1c30      	adds	r0, r6, #0
10008ddc:	1c39      	adds	r1, r7, #0
10008dde:	2200      	movs	r2, #0
10008de0:	2300      	movs	r3, #0
10008de2:	f000 ff79 	bl	10009cd8 <__aeabi_dcmpeq>
10008de6:	2800      	cmp	r0, #0
10008de8:	d100      	bne.n	10008dec <__kernel_rem_pio2+0x2d0>
10008dea:	e092      	b.n	10008f12 <__kernel_rem_pio2+0x3f6>
10008dec:	464b      	mov	r3, r9
10008dee:	1e59      	subs	r1, r3, #1
10008df0:	9b07      	ldr	r3, [sp, #28]
10008df2:	428b      	cmp	r3, r1
10008df4:	dc0f      	bgt.n	10008e16 <__kernel_rem_pio2+0x2fa>
10008df6:	aa10      	add	r2, sp, #64	; 0x40
10008df8:	4694      	mov	ip, r2
10008dfa:	2200      	movs	r2, #0
10008dfc:	4bce      	ldr	r3, [pc, #824]	; (10009138 <__kernel_rem_pio2+0x61c>)
10008dfe:	980d      	ldr	r0, [sp, #52]	; 0x34
10008e00:	444b      	add	r3, r9
10008e02:	009b      	lsls	r3, r3, #2
10008e04:	4463      	add	r3, ip
10008e06:	681c      	ldr	r4, [r3, #0]
10008e08:	3b04      	subs	r3, #4
10008e0a:	4322      	orrs	r2, r4
10008e0c:	4283      	cmp	r3, r0
10008e0e:	d1fa      	bne.n	10008e06 <__kernel_rem_pio2+0x2ea>
10008e10:	2a00      	cmp	r2, #0
10008e12:	d000      	beq.n	10008e16 <__kernel_rem_pio2+0x2fa>
10008e14:	e1e5      	b.n	100091e2 <__kernel_rem_pio2+0x6c6>
10008e16:	9b07      	ldr	r3, [sp, #28]
10008e18:	aa10      	add	r2, sp, #64	; 0x40
10008e1a:	3b01      	subs	r3, #1
10008e1c:	009b      	lsls	r3, r3, #2
10008e1e:	58d3      	ldr	r3, [r2, r3]
10008e20:	2b00      	cmp	r3, #0
10008e22:	d000      	beq.n	10008e26 <__kernel_rem_pio2+0x30a>
10008e24:	e2aa      	b.n	1000937c <__kernel_rem_pio2+0x860>
10008e26:	2201      	movs	r2, #1
10008e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10008e2a:	3b04      	subs	r3, #4
10008e2c:	6859      	ldr	r1, [r3, #4]
10008e2e:	3201      	adds	r2, #1
10008e30:	2900      	cmp	r1, #0
10008e32:	d0fa      	beq.n	10008e2a <__kernel_rem_pio2+0x30e>
10008e34:	464b      	mov	r3, r9
10008e36:	444a      	add	r2, r9
10008e38:	3301      	adds	r3, #1
10008e3a:	9205      	str	r2, [sp, #20]
10008e3c:	4293      	cmp	r3, r2
10008e3e:	dc41      	bgt.n	10008ec4 <__kernel_rem_pio2+0x3a8>
10008e40:	99a7      	ldr	r1, [sp, #668]	; 0x29c
10008e42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10008e44:	468a      	mov	sl, r1
10008e46:	189a      	adds	r2, r3, r2
10008e48:	0092      	lsls	r2, r2, #2
10008e4a:	4492      	add	sl, r2
10008e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008e4e:	9906      	ldr	r1, [sp, #24]
10008e50:	4691      	mov	r9, r2
10008e52:	9a00      	ldr	r2, [sp, #0]
10008e54:	468b      	mov	fp, r1
10008e56:	4694      	mov	ip, r2
10008e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
10008e5a:	4463      	add	r3, ip
10008e5c:	1a9b      	subs	r3, r3, r2
10008e5e:	aa24      	add	r2, sp, #144	; 0x90
10008e60:	4690      	mov	r8, r2
10008e62:	00db      	lsls	r3, r3, #3
10008e64:	4498      	add	r8, r3
10008e66:	9b05      	ldr	r3, [sp, #20]
10008e68:	44d9      	add	r9, fp
10008e6a:	00db      	lsls	r3, r3, #3
10008e6c:	449b      	add	fp, r3
10008e6e:	9b03      	ldr	r3, [sp, #12]
10008e70:	4443      	add	r3, r8
10008e72:	1c1c      	adds	r4, r3, #0
10008e74:	4653      	mov	r3, sl
10008e76:	6818      	ldr	r0, [r3, #0]
10008e78:	f003 fc82 	bl	1000c780 <__aeabi_i2d>
10008e7c:	9b00      	ldr	r3, [sp, #0]
10008e7e:	6020      	str	r0, [r4, #0]
10008e80:	6061      	str	r1, [r4, #4]
10008e82:	2b00      	cmp	r3, #0
10008e84:	db21      	blt.n	10008eca <__kernel_rem_pio2+0x3ae>
10008e86:	2600      	movs	r6, #0
10008e88:	2700      	movs	r7, #0
10008e8a:	9d02      	ldr	r5, [sp, #8]
10008e8c:	6822      	ldr	r2, [r4, #0]
10008e8e:	6863      	ldr	r3, [r4, #4]
10008e90:	cd03      	ldmia	r5!, {r0, r1}
10008e92:	f002 fe2b 	bl	1000baec <__aeabi_dmul>
10008e96:	1c02      	adds	r2, r0, #0
10008e98:	1c0b      	adds	r3, r1, #0
10008e9a:	1c30      	adds	r0, r6, #0
10008e9c:	1c39      	adds	r1, r7, #0
10008e9e:	f001 febf 	bl	1000ac20 <__aeabi_dadd>
10008ea2:	3c08      	subs	r4, #8
10008ea4:	1c06      	adds	r6, r0, #0
10008ea6:	1c0f      	adds	r7, r1, #0
10008ea8:	4544      	cmp	r4, r8
10008eaa:	d1ef      	bne.n	10008e8c <__kernel_rem_pio2+0x370>
10008eac:	464b      	mov	r3, r9
10008eae:	609e      	str	r6, [r3, #8]
10008eb0:	60df      	str	r7, [r3, #12]
10008eb2:	2304      	movs	r3, #4
10008eb4:	469c      	mov	ip, r3
10008eb6:	3304      	adds	r3, #4
10008eb8:	44e2      	add	sl, ip
10008eba:	469c      	mov	ip, r3
10008ebc:	44e1      	add	r9, ip
10008ebe:	44e0      	add	r8, ip
10008ec0:	45d9      	cmp	r9, fp
10008ec2:	d1d4      	bne.n	10008e6e <__kernel_rem_pio2+0x352>
10008ec4:	9b05      	ldr	r3, [sp, #20]
10008ec6:	4699      	mov	r9, r3
10008ec8:	e6b8      	b.n	10008c3c <__kernel_rem_pio2+0x120>
10008eca:	2600      	movs	r6, #0
10008ecc:	2700      	movs	r7, #0
10008ece:	e7ed      	b.n	10008eac <__kernel_rem_pio2+0x390>
10008ed0:	1c32      	adds	r2, r6, #0
10008ed2:	1c3b      	adds	r3, r7, #0
10008ed4:	2000      	movs	r0, #0
10008ed6:	4999      	ldr	r1, [pc, #612]	; (1000913c <__kernel_rem_pio2+0x620>)
10008ed8:	f003 f8a2 	bl	1000c020 <__aeabi_dsub>
10008edc:	1c06      	adds	r6, r0, #0
10008ede:	1c0f      	adds	r7, r1, #0
10008ee0:	2c00      	cmp	r4, #0
10008ee2:	d100      	bne.n	10008ee6 <__kernel_rem_pio2+0x3ca>
10008ee4:	e779      	b.n	10008dda <__kernel_rem_pio2+0x2be>
10008ee6:	9a04      	ldr	r2, [sp, #16]
10008ee8:	2000      	movs	r0, #0
10008eea:	4994      	ldr	r1, [pc, #592]	; (1000913c <__kernel_rem_pio2+0x620>)
10008eec:	f000 fe60 	bl	10009bb0 <scalbn>
10008ef0:	1c02      	adds	r2, r0, #0
10008ef2:	1c0b      	adds	r3, r1, #0
10008ef4:	1c30      	adds	r0, r6, #0
10008ef6:	1c39      	adds	r1, r7, #0
10008ef8:	f003 f892 	bl	1000c020 <__aeabi_dsub>
10008efc:	1c06      	adds	r6, r0, #0
10008efe:	1c0f      	adds	r7, r1, #0
10008f00:	1c30      	adds	r0, r6, #0
10008f02:	1c39      	adds	r1, r7, #0
10008f04:	2200      	movs	r2, #0
10008f06:	2300      	movs	r3, #0
10008f08:	f000 fee6 	bl	10009cd8 <__aeabi_dcmpeq>
10008f0c:	2800      	cmp	r0, #0
10008f0e:	d000      	beq.n	10008f12 <__kernel_rem_pio2+0x3f6>
10008f10:	e76c      	b.n	10008dec <__kernel_rem_pio2+0x2d0>
10008f12:	4653      	mov	r3, sl
10008f14:	9309      	str	r3, [sp, #36]	; 0x24
10008f16:	9b04      	ldr	r3, [sp, #16]
10008f18:	1c30      	adds	r0, r6, #0
10008f1a:	425a      	negs	r2, r3
10008f1c:	1c39      	adds	r1, r7, #0
10008f1e:	f000 fe47 	bl	10009bb0 <scalbn>
10008f22:	2200      	movs	r2, #0
10008f24:	4b86      	ldr	r3, [pc, #536]	; (10009140 <__kernel_rem_pio2+0x624>)
10008f26:	1c04      	adds	r4, r0, #0
10008f28:	1c0d      	adds	r5, r1, #0
10008f2a:	f000 fef9 	bl	10009d20 <__aeabi_dcmpge>
10008f2e:	2800      	cmp	r0, #0
10008f30:	d100      	bne.n	10008f34 <__kernel_rem_pio2+0x418>
10008f32:	e22d      	b.n	10009390 <__kernel_rem_pio2+0x874>
10008f34:	2200      	movs	r2, #0
10008f36:	4b83      	ldr	r3, [pc, #524]	; (10009144 <__kernel_rem_pio2+0x628>)
10008f38:	1c20      	adds	r0, r4, #0
10008f3a:	1c29      	adds	r1, r5, #0
10008f3c:	f002 fdd6 	bl	1000baec <__aeabi_dmul>
10008f40:	f003 fbe8 	bl	1000c714 <__aeabi_d2iz>
10008f44:	464b      	mov	r3, r9
10008f46:	1c06      	adds	r6, r0, #0
10008f48:	009f      	lsls	r7, r3, #2
10008f4a:	f003 fc19 	bl	1000c780 <__aeabi_i2d>
10008f4e:	2200      	movs	r2, #0
10008f50:	4b7b      	ldr	r3, [pc, #492]	; (10009140 <__kernel_rem_pio2+0x624>)
10008f52:	f002 fdcb 	bl	1000baec <__aeabi_dmul>
10008f56:	1c02      	adds	r2, r0, #0
10008f58:	1c0b      	adds	r3, r1, #0
10008f5a:	1c20      	adds	r0, r4, #0
10008f5c:	1c29      	adds	r1, r5, #0
10008f5e:	f003 f85f 	bl	1000c020 <__aeabi_dsub>
10008f62:	f003 fbd7 	bl	1000c714 <__aeabi_d2iz>
10008f66:	ab10      	add	r3, sp, #64	; 0x40
10008f68:	51d8      	str	r0, [r3, r7]
10008f6a:	2301      	movs	r3, #1
10008f6c:	444b      	add	r3, r9
10008f6e:	4698      	mov	r8, r3
10008f70:	9b04      	ldr	r3, [sp, #16]
10008f72:	aa10      	add	r2, sp, #64	; 0x40
10008f74:	3318      	adds	r3, #24
10008f76:	9304      	str	r3, [sp, #16]
10008f78:	4643      	mov	r3, r8
10008f7a:	009b      	lsls	r3, r3, #2
10008f7c:	50d6      	str	r6, [r2, r3]
10008f7e:	2000      	movs	r0, #0
10008f80:	496e      	ldr	r1, [pc, #440]	; (1000913c <__kernel_rem_pio2+0x620>)
10008f82:	9a04      	ldr	r2, [sp, #16]
10008f84:	f000 fe14 	bl	10009bb0 <scalbn>
10008f88:	4643      	mov	r3, r8
10008f8a:	1c04      	adds	r4, r0, #0
10008f8c:	1c0d      	adds	r5, r1, #0
10008f8e:	2b00      	cmp	r3, #0
10008f90:	da00      	bge.n	10008f94 <__kernel_rem_pio2+0x478>
10008f92:	e0c8      	b.n	10009126 <__kernel_rem_pio2+0x60a>
10008f94:	009f      	lsls	r7, r3, #2
10008f96:	ab10      	add	r3, sp, #64	; 0x40
10008f98:	469c      	mov	ip, r3
10008f9a:	4643      	mov	r3, r8
10008f9c:	00db      	lsls	r3, r3, #3
10008f9e:	4467      	add	r7, ip
10008fa0:	469c      	mov	ip, r3
10008fa2:	9303      	str	r3, [sp, #12]
10008fa4:	ab72      	add	r3, sp, #456	; 0x1c8
10008fa6:	4699      	mov	r9, r3
10008fa8:	9e06      	ldr	r6, [sp, #24]
10008faa:	4466      	add	r6, ip
10008fac:	9600      	str	r6, [sp, #0]
10008fae:	6838      	ldr	r0, [r7, #0]
10008fb0:	f003 fbe6 	bl	1000c780 <__aeabi_i2d>
10008fb4:	1c22      	adds	r2, r4, #0
10008fb6:	1c2b      	adds	r3, r5, #0
10008fb8:	f002 fd98 	bl	1000baec <__aeabi_dmul>
10008fbc:	2200      	movs	r2, #0
10008fbe:	6030      	str	r0, [r6, #0]
10008fc0:	6071      	str	r1, [r6, #4]
10008fc2:	4b60      	ldr	r3, [pc, #384]	; (10009144 <__kernel_rem_pio2+0x628>)
10008fc4:	1c20      	adds	r0, r4, #0
10008fc6:	1c29      	adds	r1, r5, #0
10008fc8:	f002 fd90 	bl	1000baec <__aeabi_dmul>
10008fcc:	3e08      	subs	r6, #8
10008fce:	1c04      	adds	r4, r0, #0
10008fd0:	1c0d      	adds	r5, r1, #0
10008fd2:	3f04      	subs	r7, #4
10008fd4:	454e      	cmp	r6, r9
10008fd6:	d1ea      	bne.n	10008fae <__kernel_rem_pio2+0x492>
10008fd8:	4643      	mov	r3, r8
10008fda:	3301      	adds	r3, #1
10008fdc:	9302      	str	r3, [sp, #8]
10008fde:	2300      	movs	r3, #0
10008fe0:	469b      	mov	fp, r3
10008fe2:	ab4c      	add	r3, sp, #304	; 0x130
10008fe4:	4699      	mov	r9, r3
10008fe6:	9b07      	ldr	r3, [sp, #28]
10008fe8:	469a      	mov	sl, r3
10008fea:	4643      	mov	r3, r8
10008fec:	9304      	str	r3, [sp, #16]
10008fee:	4653      	mov	r3, sl
10008ff0:	2b00      	cmp	r3, #0
10008ff2:	da00      	bge.n	10008ff6 <__kernel_rem_pio2+0x4da>
10008ff4:	e094      	b.n	10009120 <__kernel_rem_pio2+0x604>
10008ff6:	465b      	mov	r3, fp
10008ff8:	2b00      	cmp	r3, #0
10008ffa:	da00      	bge.n	10008ffe <__kernel_rem_pio2+0x4e2>
10008ffc:	e090      	b.n	10009120 <__kernel_rem_pio2+0x604>
10008ffe:	4b52      	ldr	r3, [pc, #328]	; (10009148 <__kernel_rem_pio2+0x62c>)
10009000:	9d00      	ldr	r5, [sp, #0]
10009002:	4698      	mov	r8, r3
10009004:	2600      	movs	r6, #0
10009006:	2700      	movs	r7, #0
10009008:	2400      	movs	r4, #0
1000900a:	e005      	b.n	10009018 <__kernel_rem_pio2+0x4fc>
1000900c:	2308      	movs	r3, #8
1000900e:	469c      	mov	ip, r3
10009010:	3508      	adds	r5, #8
10009012:	44e0      	add	r8, ip
10009014:	455c      	cmp	r4, fp
10009016:	dc11      	bgt.n	1000903c <__kernel_rem_pio2+0x520>
10009018:	4643      	mov	r3, r8
1000901a:	6818      	ldr	r0, [r3, #0]
1000901c:	6859      	ldr	r1, [r3, #4]
1000901e:	682a      	ldr	r2, [r5, #0]
10009020:	686b      	ldr	r3, [r5, #4]
10009022:	f002 fd63 	bl	1000baec <__aeabi_dmul>
10009026:	1c02      	adds	r2, r0, #0
10009028:	1c0b      	adds	r3, r1, #0
1000902a:	1c30      	adds	r0, r6, #0
1000902c:	1c39      	adds	r1, r7, #0
1000902e:	f001 fdf7 	bl	1000ac20 <__aeabi_dadd>
10009032:	3401      	adds	r4, #1
10009034:	1c06      	adds	r6, r0, #0
10009036:	1c0f      	adds	r7, r1, #0
10009038:	45a2      	cmp	sl, r4
1000903a:	dae7      	bge.n	1000900c <__kernel_rem_pio2+0x4f0>
1000903c:	465b      	mov	r3, fp
1000903e:	00db      	lsls	r3, r3, #3
10009040:	444b      	add	r3, r9
10009042:	601e      	str	r6, [r3, #0]
10009044:	605f      	str	r7, [r3, #4]
10009046:	2301      	movs	r3, #1
10009048:	469c      	mov	ip, r3
1000904a:	9b00      	ldr	r3, [sp, #0]
1000904c:	44e3      	add	fp, ip
1000904e:	3b08      	subs	r3, #8
10009050:	9300      	str	r3, [sp, #0]
10009052:	9b02      	ldr	r3, [sp, #8]
10009054:	459b      	cmp	fp, r3
10009056:	d1ca      	bne.n	10008fee <__kernel_rem_pio2+0x4d2>
10009058:	9b04      	ldr	r3, [sp, #16]
1000905a:	4698      	mov	r8, r3
1000905c:	9ba6      	ldr	r3, [sp, #664]	; 0x298
1000905e:	2b02      	cmp	r3, #2
10009060:	dd00      	ble.n	10009064 <__kernel_rem_pio2+0x548>
10009062:	e100      	b.n	10009266 <__kernel_rem_pio2+0x74a>
10009064:	2b00      	cmp	r3, #0
10009066:	dd00      	ble.n	1000906a <__kernel_rem_pio2+0x54e>
10009068:	e0d7      	b.n	1000921a <__kernel_rem_pio2+0x6fe>
1000906a:	d118      	bne.n	1000909e <__kernel_rem_pio2+0x582>
1000906c:	9b03      	ldr	r3, [sp, #12]
1000906e:	2000      	movs	r0, #0
10009070:	444b      	add	r3, r9
10009072:	1c1c      	adds	r4, r3, #0
10009074:	2100      	movs	r1, #0
10009076:	4645      	mov	r5, r8
10009078:	6822      	ldr	r2, [r4, #0]
1000907a:	6863      	ldr	r3, [r4, #4]
1000907c:	f001 fdd0 	bl	1000ac20 <__aeabi_dadd>
10009080:	3c08      	subs	r4, #8
10009082:	3d01      	subs	r5, #1
10009084:	d2f8      	bcs.n	10009078 <__kernel_rem_pio2+0x55c>
10009086:	9b05      	ldr	r3, [sp, #20]
10009088:	2b00      	cmp	r3, #0
1000908a:	d003      	beq.n	10009094 <__kernel_rem_pio2+0x578>
1000908c:	2380      	movs	r3, #128	; 0x80
1000908e:	061b      	lsls	r3, r3, #24
10009090:	469c      	mov	ip, r3
10009092:	4461      	add	r1, ip
10009094:	1c0b      	adds	r3, r1, #0
10009096:	1c02      	adds	r2, r0, #0
10009098:	9908      	ldr	r1, [sp, #32]
1000909a:	600a      	str	r2, [r1, #0]
1000909c:	604b      	str	r3, [r1, #4]
1000909e:	2007      	movs	r0, #7
100090a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
100090a2:	4018      	ands	r0, r3
100090a4:	239d      	movs	r3, #157	; 0x9d
100090a6:	009b      	lsls	r3, r3, #2
100090a8:	449d      	add	sp, r3
100090aa:	bc3c      	pop	{r2, r3, r4, r5}
100090ac:	4690      	mov	r8, r2
100090ae:	4699      	mov	r9, r3
100090b0:	46a2      	mov	sl, r4
100090b2:	46ab      	mov	fp, r5
100090b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100090b6:	9b04      	ldr	r3, [sp, #16]
100090b8:	2b00      	cmp	r3, #0
100090ba:	d112      	bne.n	100090e2 <__kernel_rem_pio2+0x5c6>
100090bc:	464b      	mov	r3, r9
100090be:	3b01      	subs	r3, #1
100090c0:	009b      	lsls	r3, r3, #2
100090c2:	aa10      	add	r2, sp, #64	; 0x40
100090c4:	58d5      	ldr	r5, [r2, r3]
100090c6:	15eb      	asrs	r3, r5, #23
100090c8:	9305      	str	r3, [sp, #20]
100090ca:	e636      	b.n	10008d3a <__kernel_rem_pio2+0x21e>
100090cc:	464b      	mov	r3, r9
100090ce:	1e5a      	subs	r2, r3, #1
100090d0:	0092      	lsls	r2, r2, #2
100090d2:	ab10      	add	r3, sp, #64	; 0x40
100090d4:	589b      	ldr	r3, [r3, r2]
100090d6:	a910      	add	r1, sp, #64	; 0x40
100090d8:	930e      	str	r3, [sp, #56]	; 0x38
100090da:	025b      	lsls	r3, r3, #9
100090dc:	0a5b      	lsrs	r3, r3, #9
100090de:	508b      	str	r3, [r1, r2]
100090e0:	e678      	b.n	10008dd4 <__kernel_rem_pio2+0x2b8>
100090e2:	1c30      	adds	r0, r6, #0
100090e4:	2200      	movs	r2, #0
100090e6:	4b19      	ldr	r3, [pc, #100]	; (1000914c <__kernel_rem_pio2+0x630>)
100090e8:	f000 fe1a 	bl	10009d20 <__aeabi_dcmpge>
100090ec:	2800      	cmp	r0, #0
100090ee:	d105      	bne.n	100090fc <__kernel_rem_pio2+0x5e0>
100090f0:	2300      	movs	r3, #0
100090f2:	9305      	str	r3, [sp, #20]
100090f4:	e671      	b.n	10008dda <__kernel_rem_pio2+0x2be>
100090f6:	2600      	movs	r6, #0
100090f8:	2700      	movs	r7, #0
100090fa:	e587      	b.n	10008c0c <__kernel_rem_pio2+0xf0>
100090fc:	2301      	movs	r3, #1
100090fe:	469c      	mov	ip, r3
10009100:	3301      	adds	r3, #1
10009102:	9305      	str	r3, [sp, #20]
10009104:	464b      	mov	r3, r9
10009106:	44e2      	add	sl, ip
10009108:	2b00      	cmp	r3, #0
1000910a:	dd00      	ble.n	1000910e <__kernel_rem_pio2+0x5f2>
1000910c:	e61f      	b.n	10008d4e <__kernel_rem_pio2+0x232>
1000910e:	1c32      	adds	r2, r6, #0
10009110:	1c3b      	adds	r3, r7, #0
10009112:	2000      	movs	r0, #0
10009114:	4909      	ldr	r1, [pc, #36]	; (1000913c <__kernel_rem_pio2+0x620>)
10009116:	f002 ff83 	bl	1000c020 <__aeabi_dsub>
1000911a:	1c06      	adds	r6, r0, #0
1000911c:	1c0f      	adds	r7, r1, #0
1000911e:	e65c      	b.n	10008dda <__kernel_rem_pio2+0x2be>
10009120:	2600      	movs	r6, #0
10009122:	2700      	movs	r7, #0
10009124:	e78a      	b.n	1000903c <__kernel_rem_pio2+0x520>
10009126:	9ba6      	ldr	r3, [sp, #664]	; 0x298
10009128:	2b02      	cmp	r3, #2
1000912a:	dc39      	bgt.n	100091a0 <__kernel_rem_pio2+0x684>
1000912c:	2b00      	cmp	r3, #0
1000912e:	dc0f      	bgt.n	10009150 <__kernel_rem_pio2+0x634>
10009130:	d1b5      	bne.n	1000909e <__kernel_rem_pio2+0x582>
10009132:	2000      	movs	r0, #0
10009134:	2100      	movs	r1, #0
10009136:	e7a6      	b.n	10009086 <__kernel_rem_pio2+0x56a>
10009138:	3fffffff 	.word	0x3fffffff
1000913c:	3ff00000 	.word	0x3ff00000
10009140:	41700000 	.word	0x41700000
10009144:	3e700000 	.word	0x3e700000
10009148:	1000d338 	.word	0x1000d338
1000914c:	3fe00000 	.word	0x3fe00000
10009150:	9905      	ldr	r1, [sp, #20]
10009152:	2200      	movs	r2, #0
10009154:	2300      	movs	r3, #0
10009156:	2900      	cmp	r1, #0
10009158:	d073      	beq.n	10009242 <__kernel_rem_pio2+0x726>
1000915a:	2180      	movs	r1, #128	; 0x80
1000915c:	9808      	ldr	r0, [sp, #32]
1000915e:	0609      	lsls	r1, r1, #24
10009160:	1859      	adds	r1, r3, r1
10009162:	6002      	str	r2, [r0, #0]
10009164:	6041      	str	r1, [r0, #4]
10009166:	984c      	ldr	r0, [sp, #304]	; 0x130
10009168:	994d      	ldr	r1, [sp, #308]	; 0x134
1000916a:	f002 ff59 	bl	1000c020 <__aeabi_dsub>
1000916e:	4643      	mov	r3, r8
10009170:	2b00      	cmp	r3, #0
10009172:	dd0b      	ble.n	1000918c <__kernel_rem_pio2+0x670>
10009174:	2401      	movs	r4, #1
10009176:	4646      	mov	r6, r8
10009178:	ad4e      	add	r5, sp, #312	; 0x138
1000917a:	cd0c      	ldmia	r5!, {r2, r3}
1000917c:	3401      	adds	r4, #1
1000917e:	f001 fd4f 	bl	1000ac20 <__aeabi_dadd>
10009182:	42a6      	cmp	r6, r4
10009184:	daf9      	bge.n	1000917a <__kernel_rem_pio2+0x65e>
10009186:	9b05      	ldr	r3, [sp, #20]
10009188:	2b00      	cmp	r3, #0
1000918a:	d003      	beq.n	10009194 <__kernel_rem_pio2+0x678>
1000918c:	2380      	movs	r3, #128	; 0x80
1000918e:	061b      	lsls	r3, r3, #24
10009190:	469c      	mov	ip, r3
10009192:	4461      	add	r1, ip
10009194:	1c0b      	adds	r3, r1, #0
10009196:	1c02      	adds	r2, r0, #0
10009198:	9908      	ldr	r1, [sp, #32]
1000919a:	608a      	str	r2, [r1, #8]
1000919c:	60cb      	str	r3, [r1, #12]
1000919e:	e77e      	b.n	1000909e <__kernel_rem_pio2+0x582>
100091a0:	ab4c      	add	r3, sp, #304	; 0x130
100091a2:	4699      	mov	r9, r3
100091a4:	9ba6      	ldr	r3, [sp, #664]	; 0x298
100091a6:	2b03      	cmp	r3, #3
100091a8:	d000      	beq.n	100091ac <__kernel_rem_pio2+0x690>
100091aa:	e778      	b.n	1000909e <__kernel_rem_pio2+0x582>
100091ac:	9b05      	ldr	r3, [sp, #20]
100091ae:	2000      	movs	r0, #0
100091b0:	2100      	movs	r1, #0
100091b2:	2b00      	cmp	r3, #0
100091b4:	d100      	bne.n	100091b8 <__kernel_rem_pio2+0x69c>
100091b6:	e0d0      	b.n	1000935a <__kernel_rem_pio2+0x83e>
100091b8:	2480      	movs	r4, #128	; 0x80
100091ba:	9a08      	ldr	r2, [sp, #32]
100091bc:	9b4c      	ldr	r3, [sp, #304]	; 0x130
100091be:	0624      	lsls	r4, r4, #24
100091c0:	6013      	str	r3, [r2, #0]
100091c2:	464b      	mov	r3, r9
100091c4:	46a4      	mov	ip, r4
100091c6:	685b      	ldr	r3, [r3, #4]
100091c8:	4461      	add	r1, ip
100091ca:	4463      	add	r3, ip
100091cc:	6053      	str	r3, [r2, #4]
100091ce:	464b      	mov	r3, r9
100091d0:	689b      	ldr	r3, [r3, #8]
100091d2:	6110      	str	r0, [r2, #16]
100091d4:	6093      	str	r3, [r2, #8]
100091d6:	464b      	mov	r3, r9
100091d8:	68db      	ldr	r3, [r3, #12]
100091da:	6151      	str	r1, [r2, #20]
100091dc:	4463      	add	r3, ip
100091de:	60d3      	str	r3, [r2, #12]
100091e0:	e75d      	b.n	1000909e <__kernel_rem_pio2+0x582>
100091e2:	4653      	mov	r3, sl
100091e4:	4688      	mov	r8, r1
100091e6:	9309      	str	r3, [sp, #36]	; 0x24
100091e8:	4643      	mov	r3, r8
100091ea:	9904      	ldr	r1, [sp, #16]
100091ec:	009b      	lsls	r3, r3, #2
100091ee:	aa10      	add	r2, sp, #64	; 0x40
100091f0:	58d3      	ldr	r3, [r2, r3]
100091f2:	3918      	subs	r1, #24
100091f4:	9104      	str	r1, [sp, #16]
100091f6:	2b00      	cmp	r3, #0
100091f8:	d000      	beq.n	100091fc <__kernel_rem_pio2+0x6e0>
100091fa:	e6c0      	b.n	10008f7e <__kernel_rem_pio2+0x462>
100091fc:	4694      	mov	ip, r2
100091fe:	4642      	mov	r2, r8
10009200:	4b68      	ldr	r3, [pc, #416]	; (100093a4 <__kernel_rem_pio2+0x888>)
10009202:	4443      	add	r3, r8
10009204:	009b      	lsls	r3, r3, #2
10009206:	4463      	add	r3, ip
10009208:	3b04      	subs	r3, #4
1000920a:	6858      	ldr	r0, [r3, #4]
1000920c:	3a01      	subs	r2, #1
1000920e:	3918      	subs	r1, #24
10009210:	2800      	cmp	r0, #0
10009212:	d0f9      	beq.n	10009208 <__kernel_rem_pio2+0x6ec>
10009214:	4690      	mov	r8, r2
10009216:	9104      	str	r1, [sp, #16]
10009218:	e6b1      	b.n	10008f7e <__kernel_rem_pio2+0x462>
1000921a:	9b03      	ldr	r3, [sp, #12]
1000921c:	2200      	movs	r2, #0
1000921e:	444b      	add	r3, r9
10009220:	1c1c      	adds	r4, r3, #0
10009222:	2300      	movs	r3, #0
10009224:	ad4a      	add	r5, sp, #296	; 0x128
10009226:	1c10      	adds	r0, r2, #0
10009228:	1c19      	adds	r1, r3, #0
1000922a:	6822      	ldr	r2, [r4, #0]
1000922c:	6863      	ldr	r3, [r4, #4]
1000922e:	f001 fcf7 	bl	1000ac20 <__aeabi_dadd>
10009232:	3c08      	subs	r4, #8
10009234:	1c02      	adds	r2, r0, #0
10009236:	1c0b      	adds	r3, r1, #0
10009238:	42ac      	cmp	r4, r5
1000923a:	d1f4      	bne.n	10009226 <__kernel_rem_pio2+0x70a>
1000923c:	9905      	ldr	r1, [sp, #20]
1000923e:	2900      	cmp	r1, #0
10009240:	d18b      	bne.n	1000915a <__kernel_rem_pio2+0x63e>
10009242:	1c19      	adds	r1, r3, #0
10009244:	1c10      	adds	r0, r2, #0
10009246:	9c08      	ldr	r4, [sp, #32]
10009248:	6020      	str	r0, [r4, #0]
1000924a:	6061      	str	r1, [r4, #4]
1000924c:	984c      	ldr	r0, [sp, #304]	; 0x130
1000924e:	994d      	ldr	r1, [sp, #308]	; 0x134
10009250:	f002 fee6 	bl	1000c020 <__aeabi_dsub>
10009254:	4643      	mov	r3, r8
10009256:	2b00      	cmp	r3, #0
10009258:	dc8c      	bgt.n	10009174 <__kernel_rem_pio2+0x658>
1000925a:	1c0b      	adds	r3, r1, #0
1000925c:	1c02      	adds	r2, r0, #0
1000925e:	9908      	ldr	r1, [sp, #32]
10009260:	608a      	str	r2, [r1, #8]
10009262:	60cb      	str	r3, [r1, #12]
10009264:	e71b      	b.n	1000909e <__kernel_rem_pio2+0x582>
10009266:	9ba6      	ldr	r3, [sp, #664]	; 0x298
10009268:	2b03      	cmp	r3, #3
1000926a:	d000      	beq.n	1000926e <__kernel_rem_pio2+0x752>
1000926c:	e717      	b.n	1000909e <__kernel_rem_pio2+0x582>
1000926e:	4643      	mov	r3, r8
10009270:	2b00      	cmp	r3, #0
10009272:	dd9b      	ble.n	100091ac <__kernel_rem_pio2+0x690>
10009274:	9b03      	ldr	r3, [sp, #12]
10009276:	444b      	add	r3, r9
10009278:	681e      	ldr	r6, [r3, #0]
1000927a:	685f      	ldr	r7, [r3, #4]
1000927c:	4b4a      	ldr	r3, [pc, #296]	; (100093a8 <__kernel_rem_pio2+0x88c>)
1000927e:	4443      	add	r3, r8
10009280:	469b      	mov	fp, r3
10009282:	00db      	lsls	r3, r3, #3
10009284:	444b      	add	r3, r9
10009286:	469a      	mov	sl, r3
10009288:	4653      	mov	r3, sl
1000928a:	1c30      	adds	r0, r6, #0
1000928c:	685c      	ldr	r4, [r3, #4]
1000928e:	681b      	ldr	r3, [r3, #0]
10009290:	1c39      	adds	r1, r7, #0
10009292:	9300      	str	r3, [sp, #0]
10009294:	9401      	str	r4, [sp, #4]
10009296:	1c1a      	adds	r2, r3, #0
10009298:	1c23      	adds	r3, r4, #0
1000929a:	f001 fcc1 	bl	1000ac20 <__aeabi_dadd>
1000929e:	1c04      	adds	r4, r0, #0
100092a0:	1c0d      	adds	r5, r1, #0
100092a2:	9800      	ldr	r0, [sp, #0]
100092a4:	9901      	ldr	r1, [sp, #4]
100092a6:	1c22      	adds	r2, r4, #0
100092a8:	1c2b      	adds	r3, r5, #0
100092aa:	f002 feb9 	bl	1000c020 <__aeabi_dsub>
100092ae:	1c0b      	adds	r3, r1, #0
100092b0:	1c02      	adds	r2, r0, #0
100092b2:	1c39      	adds	r1, r7, #0
100092b4:	1c30      	adds	r0, r6, #0
100092b6:	f001 fcb3 	bl	1000ac20 <__aeabi_dadd>
100092ba:	4653      	mov	r3, sl
100092bc:	6098      	str	r0, [r3, #8]
100092be:	60d9      	str	r1, [r3, #12]
100092c0:	601c      	str	r4, [r3, #0]
100092c2:	605d      	str	r5, [r3, #4]
100092c4:	2308      	movs	r3, #8
100092c6:	425b      	negs	r3, r3
100092c8:	469c      	mov	ip, r3
100092ca:	ab4a      	add	r3, sp, #296	; 0x128
100092cc:	44e2      	add	sl, ip
100092ce:	1c26      	adds	r6, r4, #0
100092d0:	1c2f      	adds	r7, r5, #0
100092d2:	459a      	cmp	sl, r3
100092d4:	d1d8      	bne.n	10009288 <__kernel_rem_pio2+0x76c>
100092d6:	4643      	mov	r3, r8
100092d8:	2b01      	cmp	r3, #1
100092da:	dc00      	bgt.n	100092de <__kernel_rem_pio2+0x7c2>
100092dc:	e766      	b.n	100091ac <__kernel_rem_pio2+0x690>
100092de:	9b03      	ldr	r3, [sp, #12]
100092e0:	46ca      	mov	sl, r9
100092e2:	444b      	add	r3, r9
100092e4:	681e      	ldr	r6, [r3, #0]
100092e6:	685f      	ldr	r7, [r3, #4]
100092e8:	465b      	mov	r3, fp
100092ea:	00db      	lsls	r3, r3, #3
100092ec:	4698      	mov	r8, r3
100092ee:	44c2      	add	sl, r8
100092f0:	4653      	mov	r3, sl
100092f2:	1c32      	adds	r2, r6, #0
100092f4:	685c      	ldr	r4, [r3, #4]
100092f6:	681b      	ldr	r3, [r3, #0]
100092f8:	9300      	str	r3, [sp, #0]
100092fa:	9401      	str	r4, [sp, #4]
100092fc:	1c18      	adds	r0, r3, #0
100092fe:	1c21      	adds	r1, r4, #0
10009300:	1c3b      	adds	r3, r7, #0
10009302:	f001 fc8d 	bl	1000ac20 <__aeabi_dadd>
10009306:	1c04      	adds	r4, r0, #0
10009308:	1c0d      	adds	r5, r1, #0
1000930a:	9800      	ldr	r0, [sp, #0]
1000930c:	9901      	ldr	r1, [sp, #4]
1000930e:	1c22      	adds	r2, r4, #0
10009310:	1c2b      	adds	r3, r5, #0
10009312:	f002 fe85 	bl	1000c020 <__aeabi_dsub>
10009316:	1c3b      	adds	r3, r7, #0
10009318:	1c32      	adds	r2, r6, #0
1000931a:	f001 fc81 	bl	1000ac20 <__aeabi_dadd>
1000931e:	4653      	mov	r3, sl
10009320:	6098      	str	r0, [r3, #8]
10009322:	60d9      	str	r1, [r3, #12]
10009324:	601c      	str	r4, [r3, #0]
10009326:	605d      	str	r5, [r3, #4]
10009328:	2308      	movs	r3, #8
1000932a:	425b      	negs	r3, r3
1000932c:	469c      	mov	ip, r3
1000932e:	44e2      	add	sl, ip
10009330:	1c26      	adds	r6, r4, #0
10009332:	1c2f      	adds	r7, r5, #0
10009334:	45d1      	cmp	r9, sl
10009336:	d1db      	bne.n	100092f0 <__kernel_rem_pio2+0x7d4>
10009338:	4644      	mov	r4, r8
1000933a:	2000      	movs	r0, #0
1000933c:	2100      	movs	r1, #0
1000933e:	3408      	adds	r4, #8
10009340:	444c      	add	r4, r9
10009342:	ad4e      	add	r5, sp, #312	; 0x138
10009344:	6822      	ldr	r2, [r4, #0]
10009346:	6863      	ldr	r3, [r4, #4]
10009348:	3c08      	subs	r4, #8
1000934a:	f001 fc69 	bl	1000ac20 <__aeabi_dadd>
1000934e:	42ac      	cmp	r4, r5
10009350:	d1f8      	bne.n	10009344 <__kernel_rem_pio2+0x828>
10009352:	9b05      	ldr	r3, [sp, #20]
10009354:	2b00      	cmp	r3, #0
10009356:	d000      	beq.n	1000935a <__kernel_rem_pio2+0x83e>
10009358:	e72e      	b.n	100091b8 <__kernel_rem_pio2+0x69c>
1000935a:	9a4c      	ldr	r2, [sp, #304]	; 0x130
1000935c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
1000935e:	9c08      	ldr	r4, [sp, #32]
10009360:	6022      	str	r2, [r4, #0]
10009362:	6063      	str	r3, [r4, #4]
10009364:	464b      	mov	r3, r9
10009366:	689a      	ldr	r2, [r3, #8]
10009368:	68db      	ldr	r3, [r3, #12]
1000936a:	9200      	str	r2, [sp, #0]
1000936c:	9301      	str	r3, [sp, #4]
1000936e:	60a2      	str	r2, [r4, #8]
10009370:	60e3      	str	r3, [r4, #12]
10009372:	1c02      	adds	r2, r0, #0
10009374:	1c0b      	adds	r3, r1, #0
10009376:	6122      	str	r2, [r4, #16]
10009378:	6163      	str	r3, [r4, #20]
1000937a:	e690      	b.n	1000909e <__kernel_rem_pio2+0x582>
1000937c:	2201      	movs	r2, #1
1000937e:	e559      	b.n	10008e34 <__kernel_rem_pio2+0x318>
10009380:	2400      	movs	r4, #0
10009382:	e515      	b.n	10008db0 <__kernel_rem_pio2+0x294>
10009384:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009386:	00db      	lsls	r3, r3, #3
10009388:	9303      	str	r3, [sp, #12]
1000938a:	ab74      	add	r3, sp, #464	; 0x1d0
1000938c:	9306      	str	r3, [sp, #24]
1000938e:	e446      	b.n	10008c1e <__kernel_rem_pio2+0x102>
10009390:	464b      	mov	r3, r9
10009392:	1c20      	adds	r0, r4, #0
10009394:	1c29      	adds	r1, r5, #0
10009396:	009e      	lsls	r6, r3, #2
10009398:	f003 f9bc 	bl	1000c714 <__aeabi_d2iz>
1000939c:	ab10      	add	r3, sp, #64	; 0x40
1000939e:	5198      	str	r0, [r3, r6]
100093a0:	46c8      	mov	r8, r9
100093a2:	e5ec      	b.n	10008f7e <__kernel_rem_pio2+0x462>
100093a4:	3fffffff 	.word	0x3fffffff
100093a8:	1fffffff 	.word	0x1fffffff

100093ac <__kernel_sin>:
100093ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100093ae:	464f      	mov	r7, r9
100093b0:	4646      	mov	r6, r8
100093b2:	b4c0      	push	{r6, r7}
100093b4:	b087      	sub	sp, #28
100093b6:	9200      	str	r2, [sp, #0]
100093b8:	9301      	str	r3, [sp, #4]
100093ba:	4a46      	ldr	r2, [pc, #280]	; (100094d4 <__kernel_sin+0x128>)
100093bc:	004b      	lsls	r3, r1, #1
100093be:	4681      	mov	r9, r0
100093c0:	4688      	mov	r8, r1
100093c2:	085b      	lsrs	r3, r3, #1
100093c4:	4293      	cmp	r3, r2
100093c6:	dc07      	bgt.n	100093d8 <__kernel_sin+0x2c>
100093c8:	4641      	mov	r1, r8
100093ca:	4648      	mov	r0, r9
100093cc:	f003 f9a2 	bl	1000c714 <__aeabi_d2iz>
100093d0:	4641      	mov	r1, r8
100093d2:	1e03      	subs	r3, r0, #0
100093d4:	4648      	mov	r0, r9
100093d6:	d064      	beq.n	100094a2 <__kernel_sin+0xf6>
100093d8:	464a      	mov	r2, r9
100093da:	4643      	mov	r3, r8
100093dc:	4648      	mov	r0, r9
100093de:	4641      	mov	r1, r8
100093e0:	f002 fb84 	bl	1000baec <__aeabi_dmul>
100093e4:	464a      	mov	r2, r9
100093e6:	4643      	mov	r3, r8
100093e8:	1c04      	adds	r4, r0, #0
100093ea:	1c0d      	adds	r5, r1, #0
100093ec:	f002 fb7e 	bl	1000baec <__aeabi_dmul>
100093f0:	4a39      	ldr	r2, [pc, #228]	; (100094d8 <__kernel_sin+0x12c>)
100093f2:	4b3a      	ldr	r3, [pc, #232]	; (100094dc <__kernel_sin+0x130>)
100093f4:	1c06      	adds	r6, r0, #0
100093f6:	1c0f      	adds	r7, r1, #0
100093f8:	1c20      	adds	r0, r4, #0
100093fa:	1c29      	adds	r1, r5, #0
100093fc:	f002 fb76 	bl	1000baec <__aeabi_dmul>
10009400:	4a37      	ldr	r2, [pc, #220]	; (100094e0 <__kernel_sin+0x134>)
10009402:	4b38      	ldr	r3, [pc, #224]	; (100094e4 <__kernel_sin+0x138>)
10009404:	f002 fe0c 	bl	1000c020 <__aeabi_dsub>
10009408:	1c22      	adds	r2, r4, #0
1000940a:	1c2b      	adds	r3, r5, #0
1000940c:	f002 fb6e 	bl	1000baec <__aeabi_dmul>
10009410:	4a35      	ldr	r2, [pc, #212]	; (100094e8 <__kernel_sin+0x13c>)
10009412:	4b36      	ldr	r3, [pc, #216]	; (100094ec <__kernel_sin+0x140>)
10009414:	f001 fc04 	bl	1000ac20 <__aeabi_dadd>
10009418:	1c22      	adds	r2, r4, #0
1000941a:	1c2b      	adds	r3, r5, #0
1000941c:	f002 fb66 	bl	1000baec <__aeabi_dmul>
10009420:	4a33      	ldr	r2, [pc, #204]	; (100094f0 <__kernel_sin+0x144>)
10009422:	4b34      	ldr	r3, [pc, #208]	; (100094f4 <__kernel_sin+0x148>)
10009424:	f002 fdfc 	bl	1000c020 <__aeabi_dsub>
10009428:	1c22      	adds	r2, r4, #0
1000942a:	1c2b      	adds	r3, r5, #0
1000942c:	f002 fb5e 	bl	1000baec <__aeabi_dmul>
10009430:	4b31      	ldr	r3, [pc, #196]	; (100094f8 <__kernel_sin+0x14c>)
10009432:	4a32      	ldr	r2, [pc, #200]	; (100094fc <__kernel_sin+0x150>)
10009434:	f001 fbf4 	bl	1000ac20 <__aeabi_dadd>
10009438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000943a:	9002      	str	r0, [sp, #8]
1000943c:	9103      	str	r1, [sp, #12]
1000943e:	2b00      	cmp	r3, #0
10009440:	d034      	beq.n	100094ac <__kernel_sin+0x100>
10009442:	9800      	ldr	r0, [sp, #0]
10009444:	9901      	ldr	r1, [sp, #4]
10009446:	2200      	movs	r2, #0
10009448:	4b2d      	ldr	r3, [pc, #180]	; (10009500 <__kernel_sin+0x154>)
1000944a:	f002 fb4f 	bl	1000baec <__aeabi_dmul>
1000944e:	9a02      	ldr	r2, [sp, #8]
10009450:	9b03      	ldr	r3, [sp, #12]
10009452:	9004      	str	r0, [sp, #16]
10009454:	9105      	str	r1, [sp, #20]
10009456:	1c30      	adds	r0, r6, #0
10009458:	1c39      	adds	r1, r7, #0
1000945a:	f002 fb47 	bl	1000baec <__aeabi_dmul>
1000945e:	1c02      	adds	r2, r0, #0
10009460:	1c0b      	adds	r3, r1, #0
10009462:	9804      	ldr	r0, [sp, #16]
10009464:	9905      	ldr	r1, [sp, #20]
10009466:	f002 fddb 	bl	1000c020 <__aeabi_dsub>
1000946a:	1c22      	adds	r2, r4, #0
1000946c:	1c2b      	adds	r3, r5, #0
1000946e:	f002 fb3d 	bl	1000baec <__aeabi_dmul>
10009472:	9a00      	ldr	r2, [sp, #0]
10009474:	9b01      	ldr	r3, [sp, #4]
10009476:	f002 fdd3 	bl	1000c020 <__aeabi_dsub>
1000947a:	4a22      	ldr	r2, [pc, #136]	; (10009504 <__kernel_sin+0x158>)
1000947c:	1c04      	adds	r4, r0, #0
1000947e:	1c0d      	adds	r5, r1, #0
10009480:	4b21      	ldr	r3, [pc, #132]	; (10009508 <__kernel_sin+0x15c>)
10009482:	1c30      	adds	r0, r6, #0
10009484:	1c39      	adds	r1, r7, #0
10009486:	f002 fb31 	bl	1000baec <__aeabi_dmul>
1000948a:	1c02      	adds	r2, r0, #0
1000948c:	1c0b      	adds	r3, r1, #0
1000948e:	1c20      	adds	r0, r4, #0
10009490:	1c29      	adds	r1, r5, #0
10009492:	f001 fbc5 	bl	1000ac20 <__aeabi_dadd>
10009496:	1c02      	adds	r2, r0, #0
10009498:	1c0b      	adds	r3, r1, #0
1000949a:	4648      	mov	r0, r9
1000949c:	4641      	mov	r1, r8
1000949e:	f002 fdbf 	bl	1000c020 <__aeabi_dsub>
100094a2:	b007      	add	sp, #28
100094a4:	bc0c      	pop	{r2, r3}
100094a6:	4690      	mov	r8, r2
100094a8:	4699      	mov	r9, r3
100094aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100094ac:	9a02      	ldr	r2, [sp, #8]
100094ae:	9b03      	ldr	r3, [sp, #12]
100094b0:	1c20      	adds	r0, r4, #0
100094b2:	1c29      	adds	r1, r5, #0
100094b4:	f002 fb1a 	bl	1000baec <__aeabi_dmul>
100094b8:	4a12      	ldr	r2, [pc, #72]	; (10009504 <__kernel_sin+0x158>)
100094ba:	4b13      	ldr	r3, [pc, #76]	; (10009508 <__kernel_sin+0x15c>)
100094bc:	f002 fdb0 	bl	1000c020 <__aeabi_dsub>
100094c0:	1c32      	adds	r2, r6, #0
100094c2:	1c3b      	adds	r3, r7, #0
100094c4:	f002 fb12 	bl	1000baec <__aeabi_dmul>
100094c8:	464a      	mov	r2, r9
100094ca:	4643      	mov	r3, r8
100094cc:	f001 fba8 	bl	1000ac20 <__aeabi_dadd>
100094d0:	e7e7      	b.n	100094a2 <__kernel_sin+0xf6>
100094d2:	46c0      	nop			; (mov r8, r8)
100094d4:	3e3fffff 	.word	0x3e3fffff
100094d8:	5acfd57c 	.word	0x5acfd57c
100094dc:	3de5d93a 	.word	0x3de5d93a
100094e0:	8a2b9ceb 	.word	0x8a2b9ceb
100094e4:	3e5ae5e6 	.word	0x3e5ae5e6
100094e8:	57b1fe7d 	.word	0x57b1fe7d
100094ec:	3ec71de3 	.word	0x3ec71de3
100094f0:	19c161d5 	.word	0x19c161d5
100094f4:	3f2a01a0 	.word	0x3f2a01a0
100094f8:	3f811111 	.word	0x3f811111
100094fc:	1110f8a6 	.word	0x1110f8a6
10009500:	3fe00000 	.word	0x3fe00000
10009504:	55555549 	.word	0x55555549
10009508:	3fc55555 	.word	0x3fc55555

1000950c <__kernel_tan>:
1000950c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000950e:	465f      	mov	r7, fp
10009510:	4656      	mov	r6, sl
10009512:	464d      	mov	r5, r9
10009514:	4644      	mov	r4, r8
10009516:	b4f0      	push	{r4, r5, r6, r7}
10009518:	b089      	sub	sp, #36	; 0x24
1000951a:	9300      	str	r3, [sp, #0]
1000951c:	004b      	lsls	r3, r1, #1
1000951e:	085b      	lsrs	r3, r3, #1
10009520:	469a      	mov	sl, r3
10009522:	4bbd      	ldr	r3, [pc, #756]	; (10009818 <__kernel_tan+0x30c>)
10009524:	4681      	mov	r9, r0
10009526:	4688      	mov	r8, r1
10009528:	9202      	str	r2, [sp, #8]
1000952a:	468b      	mov	fp, r1
1000952c:	459a      	cmp	sl, r3
1000952e:	dc18      	bgt.n	10009562 <__kernel_tan+0x56>
10009530:	4648      	mov	r0, r9
10009532:	4641      	mov	r1, r8
10009534:	f003 f8ee 	bl	1000c714 <__aeabi_d2iz>
10009538:	2800      	cmp	r0, #0
1000953a:	d131      	bne.n	100095a0 <__kernel_tan+0x94>
1000953c:	464b      	mov	r3, r9
1000953e:	4652      	mov	r2, sl
10009540:	431a      	orrs	r2, r3
10009542:	9b12      	ldr	r3, [sp, #72]	; 0x48
10009544:	3301      	adds	r3, #1
10009546:	4313      	orrs	r3, r2
10009548:	d100      	bne.n	1000954c <__kernel_tan+0x40>
1000954a:	e14b      	b.n	100097e4 <__kernel_tan+0x2d8>
1000954c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000954e:	2b01      	cmp	r3, #1
10009550:	d100      	bne.n	10009554 <__kernel_tan+0x48>
10009552:	e15e      	b.n	10009812 <__kernel_tan+0x306>
10009554:	464a      	mov	r2, r9
10009556:	4643      	mov	r3, r8
10009558:	2000      	movs	r0, #0
1000955a:	49b0      	ldr	r1, [pc, #704]	; (1000981c <__kernel_tan+0x310>)
1000955c:	f001 fe88 	bl	1000b270 <__aeabi_ddiv>
10009560:	e0fb      	b.n	1000975a <__kernel_tan+0x24e>
10009562:	4baf      	ldr	r3, [pc, #700]	; (10009820 <__kernel_tan+0x314>)
10009564:	459a      	cmp	sl, r3
10009566:	dd1b      	ble.n	100095a0 <__kernel_tan+0x94>
10009568:	2900      	cmp	r1, #0
1000956a:	da00      	bge.n	1000956e <__kernel_tan+0x62>
1000956c:	e145      	b.n	100097fa <__kernel_tan+0x2ee>
1000956e:	464a      	mov	r2, r9
10009570:	4643      	mov	r3, r8
10009572:	48ac      	ldr	r0, [pc, #688]	; (10009824 <__kernel_tan+0x318>)
10009574:	49ac      	ldr	r1, [pc, #688]	; (10009828 <__kernel_tan+0x31c>)
10009576:	f002 fd53 	bl	1000c020 <__aeabi_dsub>
1000957a:	9a02      	ldr	r2, [sp, #8]
1000957c:	9b00      	ldr	r3, [sp, #0]
1000957e:	1c04      	adds	r4, r0, #0
10009580:	1c0d      	adds	r5, r1, #0
10009582:	48aa      	ldr	r0, [pc, #680]	; (1000982c <__kernel_tan+0x320>)
10009584:	49aa      	ldr	r1, [pc, #680]	; (10009830 <__kernel_tan+0x324>)
10009586:	f002 fd4b 	bl	1000c020 <__aeabi_dsub>
1000958a:	1c0b      	adds	r3, r1, #0
1000958c:	1c02      	adds	r2, r0, #0
1000958e:	1c29      	adds	r1, r5, #0
10009590:	1c20      	adds	r0, r4, #0
10009592:	f001 fb45 	bl	1000ac20 <__aeabi_dadd>
10009596:	2300      	movs	r3, #0
10009598:	4681      	mov	r9, r0
1000959a:	4688      	mov	r8, r1
1000959c:	9302      	str	r3, [sp, #8]
1000959e:	9300      	str	r3, [sp, #0]
100095a0:	464a      	mov	r2, r9
100095a2:	4643      	mov	r3, r8
100095a4:	4648      	mov	r0, r9
100095a6:	4641      	mov	r1, r8
100095a8:	f002 faa0 	bl	1000baec <__aeabi_dmul>
100095ac:	1c06      	adds	r6, r0, #0
100095ae:	1c0f      	adds	r7, r1, #0
100095b0:	1c32      	adds	r2, r6, #0
100095b2:	1c3b      	adds	r3, r7, #0
100095b4:	f002 fa9a 	bl	1000baec <__aeabi_dmul>
100095b8:	464a      	mov	r2, r9
100095ba:	1c04      	adds	r4, r0, #0
100095bc:	1c0d      	adds	r5, r1, #0
100095be:	4643      	mov	r3, r8
100095c0:	1c30      	adds	r0, r6, #0
100095c2:	1c39      	adds	r1, r7, #0
100095c4:	f002 fa92 	bl	1000baec <__aeabi_dmul>
100095c8:	4a9a      	ldr	r2, [pc, #616]	; (10009834 <__kernel_tan+0x328>)
100095ca:	9004      	str	r0, [sp, #16]
100095cc:	9105      	str	r1, [sp, #20]
100095ce:	4b9a      	ldr	r3, [pc, #616]	; (10009838 <__kernel_tan+0x32c>)
100095d0:	1c20      	adds	r0, r4, #0
100095d2:	1c29      	adds	r1, r5, #0
100095d4:	f002 fa8a 	bl	1000baec <__aeabi_dmul>
100095d8:	4a98      	ldr	r2, [pc, #608]	; (1000983c <__kernel_tan+0x330>)
100095da:	4b99      	ldr	r3, [pc, #612]	; (10009840 <__kernel_tan+0x334>)
100095dc:	f001 fb20 	bl	1000ac20 <__aeabi_dadd>
100095e0:	1c22      	adds	r2, r4, #0
100095e2:	1c2b      	adds	r3, r5, #0
100095e4:	f002 fa82 	bl	1000baec <__aeabi_dmul>
100095e8:	4a96      	ldr	r2, [pc, #600]	; (10009844 <__kernel_tan+0x338>)
100095ea:	4b97      	ldr	r3, [pc, #604]	; (10009848 <__kernel_tan+0x33c>)
100095ec:	f001 fb18 	bl	1000ac20 <__aeabi_dadd>
100095f0:	1c22      	adds	r2, r4, #0
100095f2:	1c2b      	adds	r3, r5, #0
100095f4:	f002 fa7a 	bl	1000baec <__aeabi_dmul>
100095f8:	4a94      	ldr	r2, [pc, #592]	; (1000984c <__kernel_tan+0x340>)
100095fa:	4b95      	ldr	r3, [pc, #596]	; (10009850 <__kernel_tan+0x344>)
100095fc:	f001 fb10 	bl	1000ac20 <__aeabi_dadd>
10009600:	1c22      	adds	r2, r4, #0
10009602:	1c2b      	adds	r3, r5, #0
10009604:	f002 fa72 	bl	1000baec <__aeabi_dmul>
10009608:	4a92      	ldr	r2, [pc, #584]	; (10009854 <__kernel_tan+0x348>)
1000960a:	4b93      	ldr	r3, [pc, #588]	; (10009858 <__kernel_tan+0x34c>)
1000960c:	f001 fb08 	bl	1000ac20 <__aeabi_dadd>
10009610:	1c22      	adds	r2, r4, #0
10009612:	1c2b      	adds	r3, r5, #0
10009614:	f002 fa6a 	bl	1000baec <__aeabi_dmul>
10009618:	4a90      	ldr	r2, [pc, #576]	; (1000985c <__kernel_tan+0x350>)
1000961a:	4b91      	ldr	r3, [pc, #580]	; (10009860 <__kernel_tan+0x354>)
1000961c:	f001 fb00 	bl	1000ac20 <__aeabi_dadd>
10009620:	4a90      	ldr	r2, [pc, #576]	; (10009864 <__kernel_tan+0x358>)
10009622:	9006      	str	r0, [sp, #24]
10009624:	9107      	str	r1, [sp, #28]
10009626:	4b90      	ldr	r3, [pc, #576]	; (10009868 <__kernel_tan+0x35c>)
10009628:	1c20      	adds	r0, r4, #0
1000962a:	1c29      	adds	r1, r5, #0
1000962c:	f002 fa5e 	bl	1000baec <__aeabi_dmul>
10009630:	4a8e      	ldr	r2, [pc, #568]	; (1000986c <__kernel_tan+0x360>)
10009632:	4b8f      	ldr	r3, [pc, #572]	; (10009870 <__kernel_tan+0x364>)
10009634:	f001 faf4 	bl	1000ac20 <__aeabi_dadd>
10009638:	1c22      	adds	r2, r4, #0
1000963a:	1c2b      	adds	r3, r5, #0
1000963c:	f002 fa56 	bl	1000baec <__aeabi_dmul>
10009640:	4a8c      	ldr	r2, [pc, #560]	; (10009874 <__kernel_tan+0x368>)
10009642:	4b8d      	ldr	r3, [pc, #564]	; (10009878 <__kernel_tan+0x36c>)
10009644:	f001 faec 	bl	1000ac20 <__aeabi_dadd>
10009648:	1c22      	adds	r2, r4, #0
1000964a:	1c2b      	adds	r3, r5, #0
1000964c:	f002 fa4e 	bl	1000baec <__aeabi_dmul>
10009650:	4a8a      	ldr	r2, [pc, #552]	; (1000987c <__kernel_tan+0x370>)
10009652:	4b8b      	ldr	r3, [pc, #556]	; (10009880 <__kernel_tan+0x374>)
10009654:	f001 fae4 	bl	1000ac20 <__aeabi_dadd>
10009658:	1c22      	adds	r2, r4, #0
1000965a:	1c2b      	adds	r3, r5, #0
1000965c:	f002 fa46 	bl	1000baec <__aeabi_dmul>
10009660:	4a88      	ldr	r2, [pc, #544]	; (10009884 <__kernel_tan+0x378>)
10009662:	4b89      	ldr	r3, [pc, #548]	; (10009888 <__kernel_tan+0x37c>)
10009664:	f001 fadc 	bl	1000ac20 <__aeabi_dadd>
10009668:	1c22      	adds	r2, r4, #0
1000966a:	1c2b      	adds	r3, r5, #0
1000966c:	f002 fa3e 	bl	1000baec <__aeabi_dmul>
10009670:	4a86      	ldr	r2, [pc, #536]	; (1000988c <__kernel_tan+0x380>)
10009672:	4b87      	ldr	r3, [pc, #540]	; (10009890 <__kernel_tan+0x384>)
10009674:	f001 fad4 	bl	1000ac20 <__aeabi_dadd>
10009678:	1c32      	adds	r2, r6, #0
1000967a:	1c3b      	adds	r3, r7, #0
1000967c:	f002 fa36 	bl	1000baec <__aeabi_dmul>
10009680:	1c02      	adds	r2, r0, #0
10009682:	1c0b      	adds	r3, r1, #0
10009684:	9806      	ldr	r0, [sp, #24]
10009686:	9907      	ldr	r1, [sp, #28]
10009688:	f001 faca 	bl	1000ac20 <__aeabi_dadd>
1000968c:	9a04      	ldr	r2, [sp, #16]
1000968e:	9b05      	ldr	r3, [sp, #20]
10009690:	f002 fa2c 	bl	1000baec <__aeabi_dmul>
10009694:	9d02      	ldr	r5, [sp, #8]
10009696:	9c00      	ldr	r4, [sp, #0]
10009698:	1c2a      	adds	r2, r5, #0
1000969a:	1c23      	adds	r3, r4, #0
1000969c:	f001 fac0 	bl	1000ac20 <__aeabi_dadd>
100096a0:	1c32      	adds	r2, r6, #0
100096a2:	1c3b      	adds	r3, r7, #0
100096a4:	f002 fa22 	bl	1000baec <__aeabi_dmul>
100096a8:	1c2a      	adds	r2, r5, #0
100096aa:	1c23      	adds	r3, r4, #0
100096ac:	f001 fab8 	bl	1000ac20 <__aeabi_dadd>
100096b0:	1c04      	adds	r4, r0, #0
100096b2:	1c0d      	adds	r5, r1, #0
100096b4:	9804      	ldr	r0, [sp, #16]
100096b6:	9905      	ldr	r1, [sp, #20]
100096b8:	4a76      	ldr	r2, [pc, #472]	; (10009894 <__kernel_tan+0x388>)
100096ba:	4b77      	ldr	r3, [pc, #476]	; (10009898 <__kernel_tan+0x38c>)
100096bc:	f002 fa16 	bl	1000baec <__aeabi_dmul>
100096c0:	1c22      	adds	r2, r4, #0
100096c2:	1c2b      	adds	r3, r5, #0
100096c4:	f001 faac 	bl	1000ac20 <__aeabi_dadd>
100096c8:	1c0b      	adds	r3, r1, #0
100096ca:	1c02      	adds	r2, r0, #0
100096cc:	4641      	mov	r1, r8
100096ce:	4648      	mov	r0, r9
100096d0:	9200      	str	r2, [sp, #0]
100096d2:	9301      	str	r3, [sp, #4]
100096d4:	f001 faa4 	bl	1000ac20 <__aeabi_dadd>
100096d8:	4b51      	ldr	r3, [pc, #324]	; (10009820 <__kernel_tan+0x314>)
100096da:	1c04      	adds	r4, r0, #0
100096dc:	1c0d      	adds	r5, r1, #0
100096de:	459a      	cmp	sl, r3
100096e0:	dc42      	bgt.n	10009768 <__kernel_tan+0x25c>
100096e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
100096e4:	2b01      	cmp	r3, #1
100096e6:	d038      	beq.n	1000975a <__kernel_tan+0x24e>
100096e8:	1c0b      	adds	r3, r1, #0
100096ea:	2200      	movs	r2, #0
100096ec:	2000      	movs	r0, #0
100096ee:	9202      	str	r2, [sp, #8]
100096f0:	9303      	str	r3, [sp, #12]
100096f2:	494a      	ldr	r1, [pc, #296]	; (1000981c <__kernel_tan+0x310>)
100096f4:	1c22      	adds	r2, r4, #0
100096f6:	1c2b      	adds	r3, r5, #0
100096f8:	f001 fdba 	bl	1000b270 <__aeabi_ddiv>
100096fc:	464a      	mov	r2, r9
100096fe:	1c0d      	adds	r5, r1, #0
10009700:	1c04      	adds	r4, r0, #0
10009702:	9802      	ldr	r0, [sp, #8]
10009704:	9903      	ldr	r1, [sp, #12]
10009706:	4643      	mov	r3, r8
10009708:	f002 fc8a 	bl	1000c020 <__aeabi_dsub>
1000970c:	1c02      	adds	r2, r0, #0
1000970e:	1c0b      	adds	r3, r1, #0
10009710:	9800      	ldr	r0, [sp, #0]
10009712:	9901      	ldr	r1, [sp, #4]
10009714:	f002 fc84 	bl	1000c020 <__aeabi_dsub>
10009718:	2600      	movs	r6, #0
1000971a:	1c02      	adds	r2, r0, #0
1000971c:	1c0b      	adds	r3, r1, #0
1000971e:	1c30      	adds	r0, r6, #0
10009720:	1c29      	adds	r1, r5, #0
10009722:	f002 f9e3 	bl	1000baec <__aeabi_dmul>
10009726:	9a02      	ldr	r2, [sp, #8]
10009728:	9b03      	ldr	r3, [sp, #12]
1000972a:	9000      	str	r0, [sp, #0]
1000972c:	9101      	str	r1, [sp, #4]
1000972e:	1c30      	adds	r0, r6, #0
10009730:	1c29      	adds	r1, r5, #0
10009732:	f002 f9db 	bl	1000baec <__aeabi_dmul>
10009736:	2200      	movs	r2, #0
10009738:	4b58      	ldr	r3, [pc, #352]	; (1000989c <__kernel_tan+0x390>)
1000973a:	f001 fa71 	bl	1000ac20 <__aeabi_dadd>
1000973e:	1c02      	adds	r2, r0, #0
10009740:	1c0b      	adds	r3, r1, #0
10009742:	9800      	ldr	r0, [sp, #0]
10009744:	9901      	ldr	r1, [sp, #4]
10009746:	f001 fa6b 	bl	1000ac20 <__aeabi_dadd>
1000974a:	1c22      	adds	r2, r4, #0
1000974c:	1c2b      	adds	r3, r5, #0
1000974e:	f002 f9cd 	bl	1000baec <__aeabi_dmul>
10009752:	1c32      	adds	r2, r6, #0
10009754:	1c2b      	adds	r3, r5, #0
10009756:	f001 fa63 	bl	1000ac20 <__aeabi_dadd>
1000975a:	b009      	add	sp, #36	; 0x24
1000975c:	bc3c      	pop	{r2, r3, r4, r5}
1000975e:	4690      	mov	r8, r2
10009760:	4699      	mov	r9, r3
10009762:	46a2      	mov	sl, r4
10009764:	46ab      	mov	fp, r5
10009766:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009768:	9812      	ldr	r0, [sp, #72]	; 0x48
1000976a:	f003 f809 	bl	1000c780 <__aeabi_i2d>
1000976e:	465b      	mov	r3, fp
10009770:	1c06      	adds	r6, r0, #0
10009772:	1798      	asrs	r0, r3, #30
10009774:	2302      	movs	r3, #2
10009776:	4018      	ands	r0, r3
10009778:	3b01      	subs	r3, #1
1000977a:	1a18      	subs	r0, r3, r0
1000977c:	1c0f      	adds	r7, r1, #0
1000977e:	f002 ffff 	bl	1000c780 <__aeabi_i2d>
10009782:	1c22      	adds	r2, r4, #0
10009784:	9002      	str	r0, [sp, #8]
10009786:	9103      	str	r1, [sp, #12]
10009788:	1c2b      	adds	r3, r5, #0
1000978a:	1c20      	adds	r0, r4, #0
1000978c:	1c29      	adds	r1, r5, #0
1000978e:	f002 f9ad 	bl	1000baec <__aeabi_dmul>
10009792:	1c32      	adds	r2, r6, #0
10009794:	9004      	str	r0, [sp, #16]
10009796:	9105      	str	r1, [sp, #20]
10009798:	1c3b      	adds	r3, r7, #0
1000979a:	1c20      	adds	r0, r4, #0
1000979c:	1c29      	adds	r1, r5, #0
1000979e:	f001 fa3f 	bl	1000ac20 <__aeabi_dadd>
100097a2:	1c02      	adds	r2, r0, #0
100097a4:	1c0b      	adds	r3, r1, #0
100097a6:	9804      	ldr	r0, [sp, #16]
100097a8:	9905      	ldr	r1, [sp, #20]
100097aa:	f001 fd61 	bl	1000b270 <__aeabi_ddiv>
100097ae:	9a00      	ldr	r2, [sp, #0]
100097b0:	9b01      	ldr	r3, [sp, #4]
100097b2:	f002 fc35 	bl	1000c020 <__aeabi_dsub>
100097b6:	1c02      	adds	r2, r0, #0
100097b8:	1c0b      	adds	r3, r1, #0
100097ba:	4648      	mov	r0, r9
100097bc:	4641      	mov	r1, r8
100097be:	f002 fc2f 	bl	1000c020 <__aeabi_dsub>
100097c2:	1c02      	adds	r2, r0, #0
100097c4:	1c0b      	adds	r3, r1, #0
100097c6:	f001 fa2b 	bl	1000ac20 <__aeabi_dadd>
100097ca:	1c02      	adds	r2, r0, #0
100097cc:	1c0b      	adds	r3, r1, #0
100097ce:	1c30      	adds	r0, r6, #0
100097d0:	1c39      	adds	r1, r7, #0
100097d2:	f002 fc25 	bl	1000c020 <__aeabi_dsub>
100097d6:	1c02      	adds	r2, r0, #0
100097d8:	1c0b      	adds	r3, r1, #0
100097da:	9802      	ldr	r0, [sp, #8]
100097dc:	9903      	ldr	r1, [sp, #12]
100097de:	f002 f985 	bl	1000baec <__aeabi_dmul>
100097e2:	e7ba      	b.n	1000975a <__kernel_tan+0x24e>
100097e4:	4648      	mov	r0, r9
100097e6:	4641      	mov	r1, r8
100097e8:	f7fd fcc8 	bl	1000717c <fabs>
100097ec:	1c02      	adds	r2, r0, #0
100097ee:	1c0b      	adds	r3, r1, #0
100097f0:	2000      	movs	r0, #0
100097f2:	492a      	ldr	r1, [pc, #168]	; (1000989c <__kernel_tan+0x390>)
100097f4:	f001 fd3c 	bl	1000b270 <__aeabi_ddiv>
100097f8:	e7af      	b.n	1000975a <__kernel_tan+0x24e>
100097fa:	2280      	movs	r2, #128	; 0x80
100097fc:	2180      	movs	r1, #128	; 0x80
100097fe:	0612      	lsls	r2, r2, #24
10009800:	4694      	mov	ip, r2
10009802:	9b00      	ldr	r3, [sp, #0]
10009804:	0609      	lsls	r1, r1, #24
10009806:	4441      	add	r1, r8
10009808:	4463      	add	r3, ip
1000980a:	4681      	mov	r9, r0
1000980c:	4688      	mov	r8, r1
1000980e:	9300      	str	r3, [sp, #0]
10009810:	e6ad      	b.n	1000956e <__kernel_tan+0x62>
10009812:	4648      	mov	r0, r9
10009814:	4641      	mov	r1, r8
10009816:	e7a0      	b.n	1000975a <__kernel_tan+0x24e>
10009818:	3e2fffff 	.word	0x3e2fffff
1000981c:	bff00000 	.word	0xbff00000
10009820:	3fe59427 	.word	0x3fe59427
10009824:	54442d18 	.word	0x54442d18
10009828:	3fe921fb 	.word	0x3fe921fb
1000982c:	33145c07 	.word	0x33145c07
10009830:	3c81a626 	.word	0x3c81a626
10009834:	db605373 	.word	0xdb605373
10009838:	bef375cb 	.word	0xbef375cb
1000983c:	a03792a6 	.word	0xa03792a6
10009840:	3f147e88 	.word	0x3f147e88
10009844:	f2f26501 	.word	0xf2f26501
10009848:	3f4344d8 	.word	0x3f4344d8
1000984c:	c9560328 	.word	0xc9560328
10009850:	3f6d6d22 	.word	0x3f6d6d22
10009854:	8406d637 	.word	0x8406d637
10009858:	3f9664f4 	.word	0x3f9664f4
1000985c:	1110fe7a 	.word	0x1110fe7a
10009860:	3fc11111 	.word	0x3fc11111
10009864:	74bf7ad4 	.word	0x74bf7ad4
10009868:	3efb2a70 	.word	0x3efb2a70
1000986c:	32f0a7e9 	.word	0x32f0a7e9
10009870:	3f12b80f 	.word	0x3f12b80f
10009874:	1a8d1068 	.word	0x1a8d1068
10009878:	3f3026f7 	.word	0x3f3026f7
1000987c:	fee08315 	.word	0xfee08315
10009880:	3f57dbc8 	.word	0x3f57dbc8
10009884:	e96e8493 	.word	0xe96e8493
10009888:	3f8226e3 	.word	0x3f8226e3
1000988c:	1bb341fe 	.word	0x1bb341fe
10009890:	3faba1ba 	.word	0x3faba1ba
10009894:	55555563 	.word	0x55555563
10009898:	3fd55555 	.word	0x3fd55555
1000989c:	3ff00000 	.word	0x3ff00000

100098a0 <finite>:
100098a0:	4b03      	ldr	r3, [pc, #12]	; (100098b0 <finite+0x10>)
100098a2:	0048      	lsls	r0, r1, #1
100098a4:	469c      	mov	ip, r3
100098a6:	0840      	lsrs	r0, r0, #1
100098a8:	4460      	add	r0, ip
100098aa:	0fc0      	lsrs	r0, r0, #31
100098ac:	4770      	bx	lr
100098ae:	46c0      	nop			; (mov r8, r8)
100098b0:	80100000 	.word	0x80100000

100098b4 <floor>:
100098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100098b6:	465f      	mov	r7, fp
100098b8:	464d      	mov	r5, r9
100098ba:	4644      	mov	r4, r8
100098bc:	4656      	mov	r6, sl
100098be:	b4f0      	push	{r4, r5, r6, r7}
100098c0:	4b48      	ldr	r3, [pc, #288]	; (100099e4 <floor+0x130>)
100098c2:	004d      	lsls	r5, r1, #1
100098c4:	0d6d      	lsrs	r5, r5, #21
100098c6:	18ef      	adds	r7, r5, r3
100098c8:	b083      	sub	sp, #12
100098ca:	1c06      	adds	r6, r0, #0
100098cc:	1c0c      	adds	r4, r1, #0
100098ce:	4688      	mov	r8, r1
100098d0:	468b      	mov	fp, r1
100098d2:	4681      	mov	r9, r0
100098d4:	2f13      	cmp	r7, #19
100098d6:	dc27      	bgt.n	10009928 <floor+0x74>
100098d8:	2f00      	cmp	r7, #0
100098da:	db54      	blt.n	10009986 <floor+0xd2>
100098dc:	4d42      	ldr	r5, [pc, #264]	; (100099e8 <floor+0x134>)
100098de:	4641      	mov	r1, r8
100098e0:	413d      	asrs	r5, r7
100098e2:	4029      	ands	r1, r5
100098e4:	4301      	orrs	r1, r0
100098e6:	1c02      	adds	r2, r0, #0
100098e8:	1c23      	adds	r3, r4, #0
100098ea:	2900      	cmp	r1, #0
100098ec:	d013      	beq.n	10009916 <floor+0x62>
100098ee:	4a3f      	ldr	r2, [pc, #252]	; (100099ec <floor+0x138>)
100098f0:	4b3f      	ldr	r3, [pc, #252]	; (100099f0 <floor+0x13c>)
100098f2:	1c21      	adds	r1, r4, #0
100098f4:	f001 f994 	bl	1000ac20 <__aeabi_dadd>
100098f8:	2200      	movs	r2, #0
100098fa:	2300      	movs	r3, #0
100098fc:	f000 fa06 	bl	10009d0c <__aeabi_dcmpgt>
10009900:	2800      	cmp	r0, #0
10009902:	d006      	beq.n	10009912 <floor+0x5e>
10009904:	2c00      	cmp	r4, #0
10009906:	db4e      	blt.n	100099a6 <floor+0xf2>
10009908:	465b      	mov	r3, fp
1000990a:	43ab      	bics	r3, r5
1000990c:	4698      	mov	r8, r3
1000990e:	2300      	movs	r3, #0
10009910:	4699      	mov	r9, r3
10009912:	4643      	mov	r3, r8
10009914:	464a      	mov	r2, r9
10009916:	1c10      	adds	r0, r2, #0
10009918:	1c19      	adds	r1, r3, #0
1000991a:	b003      	add	sp, #12
1000991c:	bc3c      	pop	{r2, r3, r4, r5}
1000991e:	4690      	mov	r8, r2
10009920:	4699      	mov	r9, r3
10009922:	46a2      	mov	sl, r4
10009924:	46ab      	mov	fp, r5
10009926:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009928:	2f33      	cmp	r7, #51	; 0x33
1000992a:	dd0c      	ble.n	10009946 <floor+0x92>
1000992c:	1c0b      	adds	r3, r1, #0
1000992e:	2180      	movs	r1, #128	; 0x80
10009930:	1c02      	adds	r2, r0, #0
10009932:	00c9      	lsls	r1, r1, #3
10009934:	428f      	cmp	r7, r1
10009936:	d1ee      	bne.n	10009916 <floor+0x62>
10009938:	1c32      	adds	r2, r6, #0
1000993a:	1c21      	adds	r1, r4, #0
1000993c:	f001 f970 	bl	1000ac20 <__aeabi_dadd>
10009940:	1c02      	adds	r2, r0, #0
10009942:	1c0b      	adds	r3, r1, #0
10009944:	e7e7      	b.n	10009916 <floor+0x62>
10009946:	2201      	movs	r2, #1
10009948:	4b2a      	ldr	r3, [pc, #168]	; (100099f4 <floor+0x140>)
1000994a:	4252      	negs	r2, r2
1000994c:	18eb      	adds	r3, r5, r3
1000994e:	40da      	lsrs	r2, r3
10009950:	1c11      	adds	r1, r2, #0
10009952:	9201      	str	r2, [sp, #4]
10009954:	1c23      	adds	r3, r4, #0
10009956:	1c02      	adds	r2, r0, #0
10009958:	4201      	tst	r1, r0
1000995a:	d0dc      	beq.n	10009916 <floor+0x62>
1000995c:	4a23      	ldr	r2, [pc, #140]	; (100099ec <floor+0x138>)
1000995e:	4b24      	ldr	r3, [pc, #144]	; (100099f0 <floor+0x13c>)
10009960:	1c21      	adds	r1, r4, #0
10009962:	f001 f95d 	bl	1000ac20 <__aeabi_dadd>
10009966:	2200      	movs	r2, #0
10009968:	2300      	movs	r3, #0
1000996a:	f000 f9cf 	bl	10009d0c <__aeabi_dcmpgt>
1000996e:	2800      	cmp	r0, #0
10009970:	d0cf      	beq.n	10009912 <floor+0x5e>
10009972:	2c00      	cmp	r4, #0
10009974:	db1c      	blt.n	100099b0 <floor+0xfc>
10009976:	464b      	mov	r3, r9
10009978:	9a01      	ldr	r2, [sp, #4]
1000997a:	46d8      	mov	r8, fp
1000997c:	4393      	bics	r3, r2
1000997e:	4699      	mov	r9, r3
10009980:	4643      	mov	r3, r8
10009982:	464a      	mov	r2, r9
10009984:	e7c7      	b.n	10009916 <floor+0x62>
10009986:	4a19      	ldr	r2, [pc, #100]	; (100099ec <floor+0x138>)
10009988:	4b19      	ldr	r3, [pc, #100]	; (100099f0 <floor+0x13c>)
1000998a:	f001 f949 	bl	1000ac20 <__aeabi_dadd>
1000998e:	2200      	movs	r2, #0
10009990:	2300      	movs	r3, #0
10009992:	f000 f9bb 	bl	10009d0c <__aeabi_dcmpgt>
10009996:	2800      	cmp	r0, #0
10009998:	d0bb      	beq.n	10009912 <floor+0x5e>
1000999a:	2c00      	cmp	r4, #0
1000999c:	db15      	blt.n	100099ca <floor+0x116>
1000999e:	2300      	movs	r3, #0
100099a0:	4699      	mov	r9, r3
100099a2:	4698      	mov	r8, r3
100099a4:	e7b5      	b.n	10009912 <floor+0x5e>
100099a6:	2380      	movs	r3, #128	; 0x80
100099a8:	035b      	lsls	r3, r3, #13
100099aa:	413b      	asrs	r3, r7
100099ac:	449b      	add	fp, r3
100099ae:	e7ab      	b.n	10009908 <floor+0x54>
100099b0:	2f14      	cmp	r7, #20
100099b2:	d013      	beq.n	100099dc <floor+0x128>
100099b4:	4b10      	ldr	r3, [pc, #64]	; (100099f8 <floor+0x144>)
100099b6:	1b5d      	subs	r5, r3, r5
100099b8:	2301      	movs	r3, #1
100099ba:	40ab      	lsls	r3, r5
100099bc:	4699      	mov	r9, r3
100099be:	44b1      	add	r9, r6
100099c0:	45b1      	cmp	r9, r6
100099c2:	419b      	sbcs	r3, r3
100099c4:	425b      	negs	r3, r3
100099c6:	449b      	add	fp, r3
100099c8:	e7d5      	b.n	10009976 <floor+0xc2>
100099ca:	2300      	movs	r3, #0
100099cc:	0064      	lsls	r4, r4, #1
100099ce:	0864      	lsrs	r4, r4, #1
100099d0:	4326      	orrs	r6, r4
100099d2:	4699      	mov	r9, r3
100099d4:	d09d      	beq.n	10009912 <floor+0x5e>
100099d6:	4b09      	ldr	r3, [pc, #36]	; (100099fc <floor+0x148>)
100099d8:	4698      	mov	r8, r3
100099da:	e79a      	b.n	10009912 <floor+0x5e>
100099dc:	2301      	movs	r3, #1
100099de:	469c      	mov	ip, r3
100099e0:	44e3      	add	fp, ip
100099e2:	e7c8      	b.n	10009976 <floor+0xc2>
100099e4:	fffffc01 	.word	0xfffffc01
100099e8:	000fffff 	.word	0x000fffff
100099ec:	8800759c 	.word	0x8800759c
100099f0:	7e37e43c 	.word	0x7e37e43c
100099f4:	fffffbed 	.word	0xfffffbed
100099f8:	00000433 	.word	0x00000433
100099fc:	bff00000 	.word	0xbff00000

10009a00 <__fpclassifyd>:
10009a00:	1c0a      	adds	r2, r1, #0
10009a02:	1c03      	adds	r3, r0, #0
10009a04:	4302      	orrs	r2, r0
10009a06:	b530      	push	{r4, r5, lr}
10009a08:	2002      	movs	r0, #2
10009a0a:	2a00      	cmp	r2, #0
10009a0c:	d100      	bne.n	10009a10 <__fpclassifyd+0x10>
10009a0e:	bd30      	pop	{r4, r5, pc}
10009a10:	2280      	movs	r2, #128	; 0x80
10009a12:	0612      	lsls	r2, r2, #24
10009a14:	4291      	cmp	r1, r2
10009a16:	d016      	beq.n	10009a46 <__fpclassifyd+0x46>
10009a18:	4a0c      	ldr	r2, [pc, #48]	; (10009a4c <__fpclassifyd+0x4c>)
10009a1a:	2004      	movs	r0, #4
10009a1c:	188c      	adds	r4, r1, r2
10009a1e:	4a0c      	ldr	r2, [pc, #48]	; (10009a50 <__fpclassifyd+0x50>)
10009a20:	4294      	cmp	r4, r2
10009a22:	d9f4      	bls.n	10009a0e <__fpclassifyd+0xe>
10009a24:	4c0b      	ldr	r4, [pc, #44]	; (10009a54 <__fpclassifyd+0x54>)
10009a26:	190c      	adds	r4, r1, r4
10009a28:	4294      	cmp	r4, r2
10009a2a:	d9f0      	bls.n	10009a0e <__fpclassifyd+0xe>
10009a2c:	4a0a      	ldr	r2, [pc, #40]	; (10009a58 <__fpclassifyd+0x58>)
10009a2e:	0049      	lsls	r1, r1, #1
10009a30:	0849      	lsrs	r1, r1, #1
10009a32:	2003      	movs	r0, #3
10009a34:	4291      	cmp	r1, r2
10009a36:	d9ea      	bls.n	10009a0e <__fpclassifyd+0xe>
10009a38:	4a06      	ldr	r2, [pc, #24]	; (10009a54 <__fpclassifyd+0x54>)
10009a3a:	2000      	movs	r0, #0
10009a3c:	4291      	cmp	r1, r2
10009a3e:	d1e6      	bne.n	10009a0e <__fpclassifyd+0xe>
10009a40:	4258      	negs	r0, r3
10009a42:	4158      	adcs	r0, r3
10009a44:	e7e3      	b.n	10009a0e <__fpclassifyd+0xe>
10009a46:	2b00      	cmp	r3, #0
10009a48:	d0e1      	beq.n	10009a0e <__fpclassifyd+0xe>
10009a4a:	e7ef      	b.n	10009a2c <__fpclassifyd+0x2c>
10009a4c:	fff00000 	.word	0xfff00000
10009a50:	7fdfffff 	.word	0x7fdfffff
10009a54:	7ff00000 	.word	0x7ff00000
10009a58:	000fffff 	.word	0x000fffff

10009a5c <matherr>:
10009a5c:	2000      	movs	r0, #0
10009a5e:	4770      	bx	lr

10009a60 <nan>:
10009a60:	2000      	movs	r0, #0
10009a62:	4901      	ldr	r1, [pc, #4]	; (10009a68 <nan+0x8>)
10009a64:	4770      	bx	lr
10009a66:	46c0      	nop			; (mov r8, r8)
10009a68:	7ff80000 	.word	0x7ff80000

10009a6c <rint>:
10009a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009a6e:	4647      	mov	r7, r8
10009a70:	b480      	push	{r7}
10009a72:	004b      	lsls	r3, r1, #1
10009a74:	4a4a      	ldr	r2, [pc, #296]	; (10009ba0 <rint+0x134>)
10009a76:	0d5b      	lsrs	r3, r3, #21
10009a78:	189d      	adds	r5, r3, r2
10009a7a:	b082      	sub	sp, #8
10009a7c:	1c07      	adds	r7, r0, #0
10009a7e:	1c0c      	adds	r4, r1, #0
10009a80:	0fce      	lsrs	r6, r1, #31
10009a82:	2d13      	cmp	r5, #19
10009a84:	dc39      	bgt.n	10009afa <rint+0x8e>
10009a86:	2d00      	cmp	r5, #0
10009a88:	db59      	blt.n	10009b3e <rint+0xd2>
10009a8a:	4f46      	ldr	r7, [pc, #280]	; (10009ba4 <rint+0x138>)
10009a8c:	1c02      	adds	r2, r0, #0
10009a8e:	412f      	asrs	r7, r5
10009a90:	1c3b      	adds	r3, r7, #0
10009a92:	400b      	ands	r3, r1
10009a94:	4303      	orrs	r3, r0
10009a96:	469c      	mov	ip, r3
10009a98:	46b8      	mov	r8, r7
10009a9a:	4667      	mov	r7, ip
10009a9c:	1c0b      	adds	r3, r1, #0
10009a9e:	2f00      	cmp	r7, #0
10009aa0:	d025      	beq.n	10009aee <rint+0x82>
10009aa2:	4643      	mov	r3, r8
10009aa4:	085b      	lsrs	r3, r3, #1
10009aa6:	1c1a      	adds	r2, r3, #0
10009aa8:	400a      	ands	r2, r1
10009aaa:	4310      	orrs	r0, r2
10009aac:	2700      	movs	r7, #0
10009aae:	2800      	cmp	r0, #0
10009ab0:	d008      	beq.n	10009ac4 <rint+0x58>
10009ab2:	2d13      	cmp	r5, #19
10009ab4:	d100      	bne.n	10009ab8 <rint+0x4c>
10009ab6:	e06f      	b.n	10009b98 <rint+0x12c>
10009ab8:	4399      	bics	r1, r3
10009aba:	2380      	movs	r3, #128	; 0x80
10009abc:	02db      	lsls	r3, r3, #11
10009abe:	412b      	asrs	r3, r5
10009ac0:	4319      	orrs	r1, r3
10009ac2:	1c0c      	adds	r4, r1, #0
10009ac4:	4938      	ldr	r1, [pc, #224]	; (10009ba8 <rint+0x13c>)
10009ac6:	00f6      	lsls	r6, r6, #3
10009ac8:	198e      	adds	r6, r1, r6
10009aca:	1c23      	adds	r3, r4, #0
10009acc:	6834      	ldr	r4, [r6, #0]
10009ace:	6875      	ldr	r5, [r6, #4]
10009ad0:	1c3a      	adds	r2, r7, #0
10009ad2:	1c20      	adds	r0, r4, #0
10009ad4:	1c29      	adds	r1, r5, #0
10009ad6:	f001 f8a3 	bl	1000ac20 <__aeabi_dadd>
10009ada:	9000      	str	r0, [sp, #0]
10009adc:	9101      	str	r1, [sp, #4]
10009ade:	9800      	ldr	r0, [sp, #0]
10009ae0:	9901      	ldr	r1, [sp, #4]
10009ae2:	1c22      	adds	r2, r4, #0
10009ae4:	1c2b      	adds	r3, r5, #0
10009ae6:	f002 fa9b 	bl	1000c020 <__aeabi_dsub>
10009aea:	1c02      	adds	r2, r0, #0
10009aec:	1c0b      	adds	r3, r1, #0
10009aee:	1c10      	adds	r0, r2, #0
10009af0:	1c19      	adds	r1, r3, #0
10009af2:	b002      	add	sp, #8
10009af4:	bc04      	pop	{r2}
10009af6:	4690      	mov	r8, r2
10009af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009afa:	2d33      	cmp	r5, #51	; 0x33
10009afc:	dd0b      	ble.n	10009b16 <rint+0xaa>
10009afe:	1c0b      	adds	r3, r1, #0
10009b00:	2180      	movs	r1, #128	; 0x80
10009b02:	1c02      	adds	r2, r0, #0
10009b04:	00c9      	lsls	r1, r1, #3
10009b06:	428d      	cmp	r5, r1
10009b08:	d1f1      	bne.n	10009aee <rint+0x82>
10009b0a:	1c21      	adds	r1, r4, #0
10009b0c:	f001 f888 	bl	1000ac20 <__aeabi_dadd>
10009b10:	1c02      	adds	r2, r0, #0
10009b12:	1c0b      	adds	r3, r1, #0
10009b14:	e7eb      	b.n	10009aee <rint+0x82>
10009b16:	4a25      	ldr	r2, [pc, #148]	; (10009bac <rint+0x140>)
10009b18:	189d      	adds	r5, r3, r2
10009b1a:	2301      	movs	r3, #1
10009b1c:	425b      	negs	r3, r3
10009b1e:	40eb      	lsrs	r3, r5
10009b20:	469c      	mov	ip, r3
10009b22:	1c0b      	adds	r3, r1, #0
10009b24:	4661      	mov	r1, ip
10009b26:	1c02      	adds	r2, r0, #0
10009b28:	4201      	tst	r1, r0
10009b2a:	d0e0      	beq.n	10009aee <rint+0x82>
10009b2c:	084b      	lsrs	r3, r1, #1
10009b2e:	4203      	tst	r3, r0
10009b30:	d0c8      	beq.n	10009ac4 <rint+0x58>
10009b32:	2780      	movs	r7, #128	; 0x80
10009b34:	05ff      	lsls	r7, r7, #23
10009b36:	412f      	asrs	r7, r5
10009b38:	4398      	bics	r0, r3
10009b3a:	4307      	orrs	r7, r0
10009b3c:	e7c2      	b.n	10009ac4 <rint+0x58>
10009b3e:	004c      	lsls	r4, r1, #1
10009b40:	0864      	lsrs	r4, r4, #1
10009b42:	4304      	orrs	r4, r0
10009b44:	1c02      	adds	r2, r0, #0
10009b46:	1c0b      	adds	r3, r1, #0
10009b48:	2c00      	cmp	r4, #0
10009b4a:	d0d0      	beq.n	10009aee <rint+0x82>
10009b4c:	0309      	lsls	r1, r1, #12
10009b4e:	0b09      	lsrs	r1, r1, #12
10009b50:	4301      	orrs	r1, r0
10009b52:	424a      	negs	r2, r1
10009b54:	4311      	orrs	r1, r2
10009b56:	2280      	movs	r2, #128	; 0x80
10009b58:	0b09      	lsrs	r1, r1, #12
10009b5a:	0312      	lsls	r2, r2, #12
10009b5c:	0c5b      	lsrs	r3, r3, #17
10009b5e:	4011      	ands	r1, r2
10009b60:	045b      	lsls	r3, r3, #17
10009b62:	1c02      	adds	r2, r0, #0
10009b64:	4319      	orrs	r1, r3
10009b66:	4810      	ldr	r0, [pc, #64]	; (10009ba8 <rint+0x13c>)
10009b68:	1c0b      	adds	r3, r1, #0
10009b6a:	00f1      	lsls	r1, r6, #3
10009b6c:	1841      	adds	r1, r0, r1
10009b6e:	680c      	ldr	r4, [r1, #0]
10009b70:	684d      	ldr	r5, [r1, #4]
10009b72:	1c20      	adds	r0, r4, #0
10009b74:	1c29      	adds	r1, r5, #0
10009b76:	f001 f853 	bl	1000ac20 <__aeabi_dadd>
10009b7a:	9000      	str	r0, [sp, #0]
10009b7c:	9101      	str	r1, [sp, #4]
10009b7e:	9800      	ldr	r0, [sp, #0]
10009b80:	9901      	ldr	r1, [sp, #4]
10009b82:	1c22      	adds	r2, r4, #0
10009b84:	1c2b      	adds	r3, r5, #0
10009b86:	f002 fa4b 	bl	1000c020 <__aeabi_dsub>
10009b8a:	004b      	lsls	r3, r1, #1
10009b8c:	085b      	lsrs	r3, r3, #1
10009b8e:	07f6      	lsls	r6, r6, #31
10009b90:	431e      	orrs	r6, r3
10009b92:	1c02      	adds	r2, r0, #0
10009b94:	1c33      	adds	r3, r6, #0
10009b96:	e7aa      	b.n	10009aee <rint+0x82>
10009b98:	2780      	movs	r7, #128	; 0x80
10009b9a:	063f      	lsls	r7, r7, #24
10009b9c:	e78c      	b.n	10009ab8 <rint+0x4c>
10009b9e:	46c0      	nop			; (mov r8, r8)
10009ba0:	fffffc01 	.word	0xfffffc01
10009ba4:	000fffff 	.word	0x000fffff
10009ba8:	1000d378 	.word	0x1000d378
10009bac:	fffffbed 	.word	0xfffffbed

10009bb0 <scalbn>:
10009bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009bb2:	4f31      	ldr	r7, [pc, #196]	; (10009c78 <scalbn+0xc8>)
10009bb4:	1c16      	adds	r6, r2, #0
10009bb6:	1c3b      	adds	r3, r7, #0
10009bb8:	400b      	ands	r3, r1
10009bba:	1c04      	adds	r4, r0, #0
10009bbc:	1c0d      	adds	r5, r1, #0
10009bbe:	1c0a      	adds	r2, r1, #0
10009bc0:	151b      	asrs	r3, r3, #20
10009bc2:	d120      	bne.n	10009c06 <scalbn+0x56>
10009bc4:	004b      	lsls	r3, r1, #1
10009bc6:	085b      	lsrs	r3, r3, #1
10009bc8:	4303      	orrs	r3, r0
10009bca:	d01b      	beq.n	10009c04 <scalbn+0x54>
10009bcc:	2200      	movs	r2, #0
10009bce:	4b2b      	ldr	r3, [pc, #172]	; (10009c7c <scalbn+0xcc>)
10009bd0:	f001 ff8c 	bl	1000baec <__aeabi_dmul>
10009bd4:	4b2a      	ldr	r3, [pc, #168]	; (10009c80 <scalbn+0xd0>)
10009bd6:	1c04      	adds	r4, r0, #0
10009bd8:	1c0d      	adds	r5, r1, #0
10009bda:	1c0a      	adds	r2, r1, #0
10009bdc:	429e      	cmp	r6, r3
10009bde:	db22      	blt.n	10009c26 <scalbn+0x76>
10009be0:	400f      	ands	r7, r1
10009be2:	153f      	asrs	r7, r7, #20
10009be4:	1c3b      	adds	r3, r7, #0
10009be6:	4927      	ldr	r1, [pc, #156]	; (10009c84 <scalbn+0xd4>)
10009be8:	3b36      	subs	r3, #54	; 0x36
10009bea:	199b      	adds	r3, r3, r6
10009bec:	428b      	cmp	r3, r1
10009bee:	dd11      	ble.n	10009c14 <scalbn+0x64>
10009bf0:	1c22      	adds	r2, r4, #0
10009bf2:	1c2b      	adds	r3, r5, #0
10009bf4:	4824      	ldr	r0, [pc, #144]	; (10009c88 <scalbn+0xd8>)
10009bf6:	4925      	ldr	r1, [pc, #148]	; (10009c8c <scalbn+0xdc>)
10009bf8:	f000 f856 	bl	10009ca8 <copysign>
10009bfc:	4a22      	ldr	r2, [pc, #136]	; (10009c88 <scalbn+0xd8>)
10009bfe:	4b23      	ldr	r3, [pc, #140]	; (10009c8c <scalbn+0xdc>)
10009c00:	f001 ff74 	bl	1000baec <__aeabi_dmul>
10009c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009c06:	4922      	ldr	r1, [pc, #136]	; (10009c90 <scalbn+0xe0>)
10009c08:	428b      	cmp	r3, r1
10009c0a:	d022      	beq.n	10009c52 <scalbn+0xa2>
10009c0c:	491d      	ldr	r1, [pc, #116]	; (10009c84 <scalbn+0xd4>)
10009c0e:	199b      	adds	r3, r3, r6
10009c10:	428b      	cmp	r3, r1
10009c12:	dced      	bgt.n	10009bf0 <scalbn+0x40>
10009c14:	2b00      	cmp	r3, #0
10009c16:	dd0b      	ble.n	10009c30 <scalbn+0x80>
10009c18:	491e      	ldr	r1, [pc, #120]	; (10009c94 <scalbn+0xe4>)
10009c1a:	051b      	lsls	r3, r3, #20
10009c1c:	400a      	ands	r2, r1
10009c1e:	4313      	orrs	r3, r2
10009c20:	1c20      	adds	r0, r4, #0
10009c22:	1c19      	adds	r1, r3, #0
10009c24:	e7ee      	b.n	10009c04 <scalbn+0x54>
10009c26:	4a1c      	ldr	r2, [pc, #112]	; (10009c98 <scalbn+0xe8>)
10009c28:	4b1c      	ldr	r3, [pc, #112]	; (10009c9c <scalbn+0xec>)
10009c2a:	f001 ff5f 	bl	1000baec <__aeabi_dmul>
10009c2e:	e7e9      	b.n	10009c04 <scalbn+0x54>
10009c30:	1c19      	adds	r1, r3, #0
10009c32:	3135      	adds	r1, #53	; 0x35
10009c34:	da13      	bge.n	10009c5e <scalbn+0xae>
10009c36:	4b1a      	ldr	r3, [pc, #104]	; (10009ca0 <scalbn+0xf0>)
10009c38:	429e      	cmp	r6, r3
10009c3a:	dcd9      	bgt.n	10009bf0 <scalbn+0x40>
10009c3c:	1c22      	adds	r2, r4, #0
10009c3e:	1c2b      	adds	r3, r5, #0
10009c40:	4815      	ldr	r0, [pc, #84]	; (10009c98 <scalbn+0xe8>)
10009c42:	4916      	ldr	r1, [pc, #88]	; (10009c9c <scalbn+0xec>)
10009c44:	f000 f830 	bl	10009ca8 <copysign>
10009c48:	4a13      	ldr	r2, [pc, #76]	; (10009c98 <scalbn+0xe8>)
10009c4a:	4b14      	ldr	r3, [pc, #80]	; (10009c9c <scalbn+0xec>)
10009c4c:	f001 ff4e 	bl	1000baec <__aeabi_dmul>
10009c50:	e7d8      	b.n	10009c04 <scalbn+0x54>
10009c52:	1c29      	adds	r1, r5, #0
10009c54:	1c22      	adds	r2, r4, #0
10009c56:	1c2b      	adds	r3, r5, #0
10009c58:	f000 ffe2 	bl	1000ac20 <__aeabi_dadd>
10009c5c:	e7d2      	b.n	10009c04 <scalbn+0x54>
10009c5e:	490d      	ldr	r1, [pc, #52]	; (10009c94 <scalbn+0xe4>)
10009c60:	3336      	adds	r3, #54	; 0x36
10009c62:	400a      	ands	r2, r1
10009c64:	051b      	lsls	r3, r3, #20
10009c66:	4313      	orrs	r3, r2
10009c68:	1c20      	adds	r0, r4, #0
10009c6a:	1c19      	adds	r1, r3, #0
10009c6c:	2200      	movs	r2, #0
10009c6e:	4b0d      	ldr	r3, [pc, #52]	; (10009ca4 <scalbn+0xf4>)
10009c70:	f001 ff3c 	bl	1000baec <__aeabi_dmul>
10009c74:	e7c6      	b.n	10009c04 <scalbn+0x54>
10009c76:	46c0      	nop			; (mov r8, r8)
10009c78:	7ff00000 	.word	0x7ff00000
10009c7c:	43500000 	.word	0x43500000
10009c80:	ffff3cb0 	.word	0xffff3cb0
10009c84:	000007fe 	.word	0x000007fe
10009c88:	8800759c 	.word	0x8800759c
10009c8c:	7e37e43c 	.word	0x7e37e43c
10009c90:	000007ff 	.word	0x000007ff
10009c94:	800fffff 	.word	0x800fffff
10009c98:	c2f8f359 	.word	0xc2f8f359
10009c9c:	01a56e1f 	.word	0x01a56e1f
10009ca0:	0000c350 	.word	0x0000c350
10009ca4:	3c900000 	.word	0x3c900000

10009ca8 <copysign>:
10009ca8:	b530      	push	{r4, r5, lr}
10009caa:	004a      	lsls	r2, r1, #1
10009cac:	0fdb      	lsrs	r3, r3, #31
10009cae:	0852      	lsrs	r2, r2, #1
10009cb0:	07db      	lsls	r3, r3, #31
10009cb2:	4313      	orrs	r3, r2
10009cb4:	1c19      	adds	r1, r3, #0
10009cb6:	bd30      	pop	{r4, r5, pc}

10009cb8 <__aeabi_cdrcmple>:
10009cb8:	4684      	mov	ip, r0
10009cba:	1c10      	adds	r0, r2, #0
10009cbc:	4662      	mov	r2, ip
10009cbe:	468c      	mov	ip, r1
10009cc0:	1c19      	adds	r1, r3, #0
10009cc2:	4663      	mov	r3, ip
10009cc4:	e000      	b.n	10009cc8 <__aeabi_cdcmpeq>
10009cc6:	46c0      	nop			; (mov r8, r8)

10009cc8 <__aeabi_cdcmpeq>:
10009cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10009cca:	f001 fea9 	bl	1000ba20 <__ledf2>
10009cce:	2800      	cmp	r0, #0
10009cd0:	d401      	bmi.n	10009cd6 <__aeabi_cdcmpeq+0xe>
10009cd2:	2100      	movs	r1, #0
10009cd4:	42c8      	cmn	r0, r1
10009cd6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10009cd8 <__aeabi_dcmpeq>:
10009cd8:	b510      	push	{r4, lr}
10009cda:	f001 fded 	bl	1000b8b8 <__eqdf2>
10009cde:	4240      	negs	r0, r0
10009ce0:	3001      	adds	r0, #1
10009ce2:	bd10      	pop	{r4, pc}

10009ce4 <__aeabi_dcmplt>:
10009ce4:	b510      	push	{r4, lr}
10009ce6:	f001 fe9b 	bl	1000ba20 <__ledf2>
10009cea:	2800      	cmp	r0, #0
10009cec:	db01      	blt.n	10009cf2 <__aeabi_dcmplt+0xe>
10009cee:	2000      	movs	r0, #0
10009cf0:	bd10      	pop	{r4, pc}
10009cf2:	2001      	movs	r0, #1
10009cf4:	bd10      	pop	{r4, pc}
10009cf6:	46c0      	nop			; (mov r8, r8)

10009cf8 <__aeabi_dcmple>:
10009cf8:	b510      	push	{r4, lr}
10009cfa:	f001 fe91 	bl	1000ba20 <__ledf2>
10009cfe:	2800      	cmp	r0, #0
10009d00:	dd01      	ble.n	10009d06 <__aeabi_dcmple+0xe>
10009d02:	2000      	movs	r0, #0
10009d04:	bd10      	pop	{r4, pc}
10009d06:	2001      	movs	r0, #1
10009d08:	bd10      	pop	{r4, pc}
10009d0a:	46c0      	nop			; (mov r8, r8)

10009d0c <__aeabi_dcmpgt>:
10009d0c:	b510      	push	{r4, lr}
10009d0e:	f001 fe17 	bl	1000b940 <__gedf2>
10009d12:	2800      	cmp	r0, #0
10009d14:	dc01      	bgt.n	10009d1a <__aeabi_dcmpgt+0xe>
10009d16:	2000      	movs	r0, #0
10009d18:	bd10      	pop	{r4, pc}
10009d1a:	2001      	movs	r0, #1
10009d1c:	bd10      	pop	{r4, pc}
10009d1e:	46c0      	nop			; (mov r8, r8)

10009d20 <__aeabi_dcmpge>:
10009d20:	b510      	push	{r4, lr}
10009d22:	f001 fe0d 	bl	1000b940 <__gedf2>
10009d26:	2800      	cmp	r0, #0
10009d28:	da01      	bge.n	10009d2e <__aeabi_dcmpge+0xe>
10009d2a:	2000      	movs	r0, #0
10009d2c:	bd10      	pop	{r4, pc}
10009d2e:	2001      	movs	r0, #1
10009d30:	bd10      	pop	{r4, pc}
10009d32:	46c0      	nop			; (mov r8, r8)

10009d34 <__aeabi_cfrcmple>:
10009d34:	4684      	mov	ip, r0
10009d36:	1c08      	adds	r0, r1, #0
10009d38:	4661      	mov	r1, ip
10009d3a:	e7ff      	b.n	10009d3c <__aeabi_cfcmpeq>

10009d3c <__aeabi_cfcmpeq>:
10009d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10009d3e:	f000 fc11 	bl	1000a564 <__lesf2>
10009d42:	2800      	cmp	r0, #0
10009d44:	d401      	bmi.n	10009d4a <__aeabi_cfcmpeq+0xe>
10009d46:	2100      	movs	r1, #0
10009d48:	42c8      	cmn	r0, r1
10009d4a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10009d4c <__aeabi_fcmpeq>:
10009d4c:	b510      	push	{r4, lr}
10009d4e:	f000 fb95 	bl	1000a47c <__eqsf2>
10009d52:	4240      	negs	r0, r0
10009d54:	3001      	adds	r0, #1
10009d56:	bd10      	pop	{r4, pc}

10009d58 <__aeabi_fcmplt>:
10009d58:	b510      	push	{r4, lr}
10009d5a:	f000 fc03 	bl	1000a564 <__lesf2>
10009d5e:	2800      	cmp	r0, #0
10009d60:	db01      	blt.n	10009d66 <__aeabi_fcmplt+0xe>
10009d62:	2000      	movs	r0, #0
10009d64:	bd10      	pop	{r4, pc}
10009d66:	2001      	movs	r0, #1
10009d68:	bd10      	pop	{r4, pc}
10009d6a:	46c0      	nop			; (mov r8, r8)

10009d6c <__aeabi_fcmple>:
10009d6c:	b510      	push	{r4, lr}
10009d6e:	f000 fbf9 	bl	1000a564 <__lesf2>
10009d72:	2800      	cmp	r0, #0
10009d74:	dd01      	ble.n	10009d7a <__aeabi_fcmple+0xe>
10009d76:	2000      	movs	r0, #0
10009d78:	bd10      	pop	{r4, pc}
10009d7a:	2001      	movs	r0, #1
10009d7c:	bd10      	pop	{r4, pc}
10009d7e:	46c0      	nop			; (mov r8, r8)

10009d80 <__aeabi_fcmpgt>:
10009d80:	b510      	push	{r4, lr}
10009d82:	f000 fba5 	bl	1000a4d0 <__gesf2>
10009d86:	2800      	cmp	r0, #0
10009d88:	dc01      	bgt.n	10009d8e <__aeabi_fcmpgt+0xe>
10009d8a:	2000      	movs	r0, #0
10009d8c:	bd10      	pop	{r4, pc}
10009d8e:	2001      	movs	r0, #1
10009d90:	bd10      	pop	{r4, pc}
10009d92:	46c0      	nop			; (mov r8, r8)

10009d94 <__aeabi_fcmpge>:
10009d94:	b510      	push	{r4, lr}
10009d96:	f000 fb9b 	bl	1000a4d0 <__gesf2>
10009d9a:	2800      	cmp	r0, #0
10009d9c:	da01      	bge.n	10009da2 <__aeabi_fcmpge+0xe>
10009d9e:	2000      	movs	r0, #0
10009da0:	bd10      	pop	{r4, pc}
10009da2:	2001      	movs	r0, #1
10009da4:	bd10      	pop	{r4, pc}
10009da6:	46c0      	nop			; (mov r8, r8)

10009da8 <__clzsi2>:
10009da8:	211c      	movs	r1, #28
10009daa:	2301      	movs	r3, #1
10009dac:	041b      	lsls	r3, r3, #16
10009dae:	4298      	cmp	r0, r3
10009db0:	d301      	bcc.n	10009db6 <__clzsi2+0xe>
10009db2:	0c00      	lsrs	r0, r0, #16
10009db4:	3910      	subs	r1, #16
10009db6:	0a1b      	lsrs	r3, r3, #8
10009db8:	4298      	cmp	r0, r3
10009dba:	d301      	bcc.n	10009dc0 <__clzsi2+0x18>
10009dbc:	0a00      	lsrs	r0, r0, #8
10009dbe:	3908      	subs	r1, #8
10009dc0:	091b      	lsrs	r3, r3, #4
10009dc2:	4298      	cmp	r0, r3
10009dc4:	d301      	bcc.n	10009dca <__clzsi2+0x22>
10009dc6:	0900      	lsrs	r0, r0, #4
10009dc8:	3904      	subs	r1, #4
10009dca:	a202      	add	r2, pc, #8	; (adr r2, 10009dd4 <__clzsi2+0x2c>)
10009dcc:	5c10      	ldrb	r0, [r2, r0]
10009dce:	1840      	adds	r0, r0, r1
10009dd0:	4770      	bx	lr
10009dd2:	46c0      	nop			; (mov r8, r8)
10009dd4:	02020304 	.word	0x02020304
10009dd8:	01010101 	.word	0x01010101
	...

10009de4 <__aeabi_uldivmod>:
10009de4:	2b00      	cmp	r3, #0
10009de6:	d111      	bne.n	10009e0c <__aeabi_uldivmod+0x28>
10009de8:	2a00      	cmp	r2, #0
10009dea:	d10f      	bne.n	10009e0c <__aeabi_uldivmod+0x28>
10009dec:	2900      	cmp	r1, #0
10009dee:	d100      	bne.n	10009df2 <__aeabi_uldivmod+0xe>
10009df0:	2800      	cmp	r0, #0
10009df2:	d002      	beq.n	10009dfa <__aeabi_uldivmod+0x16>
10009df4:	2100      	movs	r1, #0
10009df6:	43c9      	mvns	r1, r1
10009df8:	1c08      	adds	r0, r1, #0
10009dfa:	b407      	push	{r0, r1, r2}
10009dfc:	4802      	ldr	r0, [pc, #8]	; (10009e08 <__aeabi_uldivmod+0x24>)
10009dfe:	a102      	add	r1, pc, #8	; (adr r1, 10009e08 <__aeabi_uldivmod+0x24>)
10009e00:	1840      	adds	r0, r0, r1
10009e02:	9002      	str	r0, [sp, #8]
10009e04:	bd03      	pop	{r0, r1, pc}
10009e06:	46c0      	nop			; (mov r8, r8)
10009e08:	00002c1d 	.word	0x00002c1d
10009e0c:	b403      	push	{r0, r1}
10009e0e:	4668      	mov	r0, sp
10009e10:	b501      	push	{r0, lr}
10009e12:	9802      	ldr	r0, [sp, #8]
10009e14:	f000 f864 	bl	10009ee0 <__gnu_uldivmod_helper>
10009e18:	9b01      	ldr	r3, [sp, #4]
10009e1a:	469e      	mov	lr, r3
10009e1c:	b002      	add	sp, #8
10009e1e:	bc0c      	pop	{r2, r3}
10009e20:	4770      	bx	lr
10009e22:	46c0      	nop			; (mov r8, r8)

10009e24 <__aeabi_lmul>:
10009e24:	b5f0      	push	{r4, r5, r6, r7, lr}
10009e26:	464f      	mov	r7, r9
10009e28:	4646      	mov	r6, r8
10009e2a:	0405      	lsls	r5, r0, #16
10009e2c:	0c2d      	lsrs	r5, r5, #16
10009e2e:	1c2c      	adds	r4, r5, #0
10009e30:	b4c0      	push	{r6, r7}
10009e32:	0417      	lsls	r7, r2, #16
10009e34:	0c16      	lsrs	r6, r2, #16
10009e36:	0c3f      	lsrs	r7, r7, #16
10009e38:	4699      	mov	r9, r3
10009e3a:	0c03      	lsrs	r3, r0, #16
10009e3c:	437c      	muls	r4, r7
10009e3e:	4375      	muls	r5, r6
10009e40:	435f      	muls	r7, r3
10009e42:	4373      	muls	r3, r6
10009e44:	197d      	adds	r5, r7, r5
10009e46:	0c26      	lsrs	r6, r4, #16
10009e48:	19ad      	adds	r5, r5, r6
10009e4a:	469c      	mov	ip, r3
10009e4c:	42af      	cmp	r7, r5
10009e4e:	d903      	bls.n	10009e58 <__aeabi_lmul+0x34>
10009e50:	2380      	movs	r3, #128	; 0x80
10009e52:	025b      	lsls	r3, r3, #9
10009e54:	4698      	mov	r8, r3
10009e56:	44c4      	add	ip, r8
10009e58:	464b      	mov	r3, r9
10009e5a:	4351      	muls	r1, r2
10009e5c:	4343      	muls	r3, r0
10009e5e:	0424      	lsls	r4, r4, #16
10009e60:	0c2e      	lsrs	r6, r5, #16
10009e62:	0c24      	lsrs	r4, r4, #16
10009e64:	042d      	lsls	r5, r5, #16
10009e66:	4466      	add	r6, ip
10009e68:	192c      	adds	r4, r5, r4
10009e6a:	1859      	adds	r1, r3, r1
10009e6c:	1989      	adds	r1, r1, r6
10009e6e:	1c20      	adds	r0, r4, #0
10009e70:	bc0c      	pop	{r2, r3}
10009e72:	4690      	mov	r8, r2
10009e74:	4699      	mov	r9, r3
10009e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

10009e78 <__aeabi_f2uiz>:
10009e78:	219e      	movs	r1, #158	; 0x9e
10009e7a:	b510      	push	{r4, lr}
10009e7c:	05c9      	lsls	r1, r1, #23
10009e7e:	1c04      	adds	r4, r0, #0
10009e80:	f7ff ff88 	bl	10009d94 <__aeabi_fcmpge>
10009e84:	2800      	cmp	r0, #0
10009e86:	d103      	bne.n	10009e90 <__aeabi_f2uiz+0x18>
10009e88:	1c20      	adds	r0, r4, #0
10009e8a:	f000 fe61 	bl	1000ab50 <__aeabi_f2iz>
10009e8e:	bd10      	pop	{r4, pc}
10009e90:	219e      	movs	r1, #158	; 0x9e
10009e92:	1c20      	adds	r0, r4, #0
10009e94:	05c9      	lsls	r1, r1, #23
10009e96:	f000 fcdd 	bl	1000a854 <__aeabi_fsub>
10009e9a:	f000 fe59 	bl	1000ab50 <__aeabi_f2iz>
10009e9e:	2380      	movs	r3, #128	; 0x80
10009ea0:	061b      	lsls	r3, r3, #24
10009ea2:	469c      	mov	ip, r3
10009ea4:	4460      	add	r0, ip
10009ea6:	e7f2      	b.n	10009e8e <__aeabi_f2uiz+0x16>

10009ea8 <__gnu_ldivmod_helper>:
10009ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009eaa:	b083      	sub	sp, #12
10009eac:	1c16      	adds	r6, r2, #0
10009eae:	1c1f      	adds	r7, r3, #0
10009eb0:	9000      	str	r0, [sp, #0]
10009eb2:	9101      	str	r1, [sp, #4]
10009eb4:	f002 fdb8 	bl	1000ca28 <__divdi3>
10009eb8:	1c04      	adds	r4, r0, #0
10009eba:	1c0d      	adds	r5, r1, #0
10009ebc:	1c22      	adds	r2, r4, #0
10009ebe:	1c2b      	adds	r3, r5, #0
10009ec0:	1c30      	adds	r0, r6, #0
10009ec2:	1c39      	adds	r1, r7, #0
10009ec4:	f7ff ffae 	bl	10009e24 <__aeabi_lmul>
10009ec8:	9a00      	ldr	r2, [sp, #0]
10009eca:	9b01      	ldr	r3, [sp, #4]
10009ecc:	1a12      	subs	r2, r2, r0
10009ece:	418b      	sbcs	r3, r1
10009ed0:	9908      	ldr	r1, [sp, #32]
10009ed2:	1c20      	adds	r0, r4, #0
10009ed4:	600a      	str	r2, [r1, #0]
10009ed6:	604b      	str	r3, [r1, #4]
10009ed8:	1c29      	adds	r1, r5, #0
10009eda:	b003      	add	sp, #12
10009edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ede:	46c0      	nop			; (mov r8, r8)

10009ee0 <__gnu_uldivmod_helper>:
10009ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ee2:	1c14      	adds	r4, r2, #0
10009ee4:	b083      	sub	sp, #12
10009ee6:	1c1d      	adds	r5, r3, #0
10009ee8:	9000      	str	r0, [sp, #0]
10009eea:	9101      	str	r1, [sp, #4]
10009eec:	f002 fe94 	bl	1000cc18 <__udivdi3>
10009ef0:	1c22      	adds	r2, r4, #0
10009ef2:	1c2b      	adds	r3, r5, #0
10009ef4:	1c06      	adds	r6, r0, #0
10009ef6:	1c0f      	adds	r7, r1, #0
10009ef8:	f7ff ff94 	bl	10009e24 <__aeabi_lmul>
10009efc:	9a00      	ldr	r2, [sp, #0]
10009efe:	9b01      	ldr	r3, [sp, #4]
10009f00:	1a12      	subs	r2, r2, r0
10009f02:	418b      	sbcs	r3, r1
10009f04:	9908      	ldr	r1, [sp, #32]
10009f06:	1c30      	adds	r0, r6, #0
10009f08:	600a      	str	r2, [r1, #0]
10009f0a:	604b      	str	r3, [r1, #4]
10009f0c:	1c39      	adds	r1, r7, #0
10009f0e:	b003      	add	sp, #12
10009f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f12:	46c0      	nop			; (mov r8, r8)

10009f14 <__aeabi_fadd>:
10009f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009f16:	004a      	lsls	r2, r1, #1
10009f18:	0243      	lsls	r3, r0, #9
10009f1a:	0044      	lsls	r4, r0, #1
10009f1c:	024e      	lsls	r6, r1, #9
10009f1e:	0fc5      	lsrs	r5, r0, #31
10009f20:	0e24      	lsrs	r4, r4, #24
10009f22:	1c28      	adds	r0, r5, #0
10009f24:	099b      	lsrs	r3, r3, #6
10009f26:	0e12      	lsrs	r2, r2, #24
10009f28:	0fc9      	lsrs	r1, r1, #31
10009f2a:	09b7      	lsrs	r7, r6, #6
10009f2c:	428d      	cmp	r5, r1
10009f2e:	d040      	beq.n	10009fb2 <__aeabi_fadd+0x9e>
10009f30:	1aa0      	subs	r0, r4, r2
10009f32:	2800      	cmp	r0, #0
10009f34:	dc00      	bgt.n	10009f38 <__aeabi_fadd+0x24>
10009f36:	e084      	b.n	1000a042 <__aeabi_fadd+0x12e>
10009f38:	2a00      	cmp	r2, #0
10009f3a:	d11c      	bne.n	10009f76 <__aeabi_fadd+0x62>
10009f3c:	2f00      	cmp	r7, #0
10009f3e:	d15c      	bne.n	10009ffa <__aeabi_fadd+0xe6>
10009f40:	075a      	lsls	r2, r3, #29
10009f42:	d004      	beq.n	10009f4e <__aeabi_fadd+0x3a>
10009f44:	220f      	movs	r2, #15
10009f46:	401a      	ands	r2, r3
10009f48:	2a04      	cmp	r2, #4
10009f4a:	d000      	beq.n	10009f4e <__aeabi_fadd+0x3a>
10009f4c:	3304      	adds	r3, #4
10009f4e:	2280      	movs	r2, #128	; 0x80
10009f50:	04d2      	lsls	r2, r2, #19
10009f52:	401a      	ands	r2, r3
10009f54:	1c28      	adds	r0, r5, #0
10009f56:	2a00      	cmp	r2, #0
10009f58:	d024      	beq.n	10009fa4 <__aeabi_fadd+0x90>
10009f5a:	3401      	adds	r4, #1
10009f5c:	2cff      	cmp	r4, #255	; 0xff
10009f5e:	d100      	bne.n	10009f62 <__aeabi_fadd+0x4e>
10009f60:	e07b      	b.n	1000a05a <__aeabi_fadd+0x146>
10009f62:	019b      	lsls	r3, r3, #6
10009f64:	0a5b      	lsrs	r3, r3, #9
10009f66:	b2e4      	uxtb	r4, r4
10009f68:	025b      	lsls	r3, r3, #9
10009f6a:	05e4      	lsls	r4, r4, #23
10009f6c:	0a5b      	lsrs	r3, r3, #9
10009f6e:	4323      	orrs	r3, r4
10009f70:	07c0      	lsls	r0, r0, #31
10009f72:	4318      	orrs	r0, r3
10009f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009f76:	2cff      	cmp	r4, #255	; 0xff
10009f78:	d0e2      	beq.n	10009f40 <__aeabi_fadd+0x2c>
10009f7a:	2280      	movs	r2, #128	; 0x80
10009f7c:	04d2      	lsls	r2, r2, #19
10009f7e:	4317      	orrs	r7, r2
10009f80:	2601      	movs	r6, #1
10009f82:	281b      	cmp	r0, #27
10009f84:	dc08      	bgt.n	10009f98 <__aeabi_fadd+0x84>
10009f86:	1c39      	adds	r1, r7, #0
10009f88:	2220      	movs	r2, #32
10009f8a:	1c3e      	adds	r6, r7, #0
10009f8c:	40c1      	lsrs	r1, r0
10009f8e:	1a10      	subs	r0, r2, r0
10009f90:	4086      	lsls	r6, r0
10009f92:	1e77      	subs	r7, r6, #1
10009f94:	41be      	sbcs	r6, r7
10009f96:	430e      	orrs	r6, r1
10009f98:	1b9b      	subs	r3, r3, r6
10009f9a:	015a      	lsls	r2, r3, #5
10009f9c:	d433      	bmi.n	1000a006 <__aeabi_fadd+0xf2>
10009f9e:	1c28      	adds	r0, r5, #0
10009fa0:	075a      	lsls	r2, r3, #29
10009fa2:	d1cf      	bne.n	10009f44 <__aeabi_fadd+0x30>
10009fa4:	08db      	lsrs	r3, r3, #3
10009fa6:	2cff      	cmp	r4, #255	; 0xff
10009fa8:	d01e      	beq.n	10009fe8 <__aeabi_fadd+0xd4>
10009faa:	025b      	lsls	r3, r3, #9
10009fac:	0a5b      	lsrs	r3, r3, #9
10009fae:	b2e4      	uxtb	r4, r4
10009fb0:	e7da      	b.n	10009f68 <__aeabi_fadd+0x54>
10009fb2:	1aa1      	subs	r1, r4, r2
10009fb4:	2900      	cmp	r1, #0
10009fb6:	dd57      	ble.n	1000a068 <__aeabi_fadd+0x154>
10009fb8:	2a00      	cmp	r2, #0
10009fba:	d03a      	beq.n	1000a032 <__aeabi_fadd+0x11e>
10009fbc:	2cff      	cmp	r4, #255	; 0xff
10009fbe:	d0bf      	beq.n	10009f40 <__aeabi_fadd+0x2c>
10009fc0:	2280      	movs	r2, #128	; 0x80
10009fc2:	04d2      	lsls	r2, r2, #19
10009fc4:	4317      	orrs	r7, r2
10009fc6:	2601      	movs	r6, #1
10009fc8:	291b      	cmp	r1, #27
10009fca:	dd72      	ble.n	1000a0b2 <__aeabi_fadd+0x19e>
10009fcc:	199b      	adds	r3, r3, r6
10009fce:	015a      	lsls	r2, r3, #5
10009fd0:	d5e5      	bpl.n	10009f9e <__aeabi_fadd+0x8a>
10009fd2:	3401      	adds	r4, #1
10009fd4:	2cff      	cmp	r4, #255	; 0xff
10009fd6:	d100      	bne.n	10009fda <__aeabi_fadd+0xc6>
10009fd8:	e087      	b.n	1000a0ea <__aeabi_fadd+0x1d6>
10009fda:	2101      	movs	r1, #1
10009fdc:	4a8a      	ldr	r2, [pc, #552]	; (1000a208 <__aeabi_fadd+0x2f4>)
10009fde:	4019      	ands	r1, r3
10009fe0:	4013      	ands	r3, r2
10009fe2:	085b      	lsrs	r3, r3, #1
10009fe4:	430b      	orrs	r3, r1
10009fe6:	e7ab      	b.n	10009f40 <__aeabi_fadd+0x2c>
10009fe8:	2b00      	cmp	r3, #0
10009fea:	d036      	beq.n	1000a05a <__aeabi_fadd+0x146>
10009fec:	2280      	movs	r2, #128	; 0x80
10009fee:	03d2      	lsls	r2, r2, #15
10009ff0:	4313      	orrs	r3, r2
10009ff2:	025b      	lsls	r3, r3, #9
10009ff4:	0a5b      	lsrs	r3, r3, #9
10009ff6:	24ff      	movs	r4, #255	; 0xff
10009ff8:	e7b6      	b.n	10009f68 <__aeabi_fadd+0x54>
10009ffa:	3801      	subs	r0, #1
10009ffc:	2800      	cmp	r0, #0
10009ffe:	d13f      	bne.n	1000a080 <__aeabi_fadd+0x16c>
1000a000:	1bdb      	subs	r3, r3, r7
1000a002:	015a      	lsls	r2, r3, #5
1000a004:	d5cb      	bpl.n	10009f9e <__aeabi_fadd+0x8a>
1000a006:	019b      	lsls	r3, r3, #6
1000a008:	099e      	lsrs	r6, r3, #6
1000a00a:	1c30      	adds	r0, r6, #0
1000a00c:	f7ff fecc 	bl	10009da8 <__clzsi2>
1000a010:	3805      	subs	r0, #5
1000a012:	4086      	lsls	r6, r0
1000a014:	4284      	cmp	r4, r0
1000a016:	dc23      	bgt.n	1000a060 <__aeabi_fadd+0x14c>
1000a018:	1b00      	subs	r0, r0, r4
1000a01a:	241f      	movs	r4, #31
1000a01c:	1c32      	adds	r2, r6, #0
1000a01e:	1c43      	adds	r3, r0, #1
1000a020:	1a20      	subs	r0, r4, r0
1000a022:	40da      	lsrs	r2, r3
1000a024:	4086      	lsls	r6, r0
1000a026:	1c13      	adds	r3, r2, #0
1000a028:	1e74      	subs	r4, r6, #1
1000a02a:	41a6      	sbcs	r6, r4
1000a02c:	2400      	movs	r4, #0
1000a02e:	4333      	orrs	r3, r6
1000a030:	e786      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a032:	2f00      	cmp	r7, #0
1000a034:	d100      	bne.n	1000a038 <__aeabi_fadd+0x124>
1000a036:	e783      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a038:	3901      	subs	r1, #1
1000a03a:	2900      	cmp	r1, #0
1000a03c:	d150      	bne.n	1000a0e0 <__aeabi_fadd+0x1cc>
1000a03e:	19db      	adds	r3, r3, r7
1000a040:	e7c5      	b.n	10009fce <__aeabi_fadd+0xba>
1000a042:	2800      	cmp	r0, #0
1000a044:	d120      	bne.n	1000a088 <__aeabi_fadd+0x174>
1000a046:	1c62      	adds	r2, r4, #1
1000a048:	b2d2      	uxtb	r2, r2
1000a04a:	2a01      	cmp	r2, #1
1000a04c:	dd5e      	ble.n	1000a10c <__aeabi_fadd+0x1f8>
1000a04e:	1bde      	subs	r6, r3, r7
1000a050:	0172      	lsls	r2, r6, #5
1000a052:	d528      	bpl.n	1000a0a6 <__aeabi_fadd+0x192>
1000a054:	1afe      	subs	r6, r7, r3
1000a056:	1c0d      	adds	r5, r1, #0
1000a058:	e7d7      	b.n	1000a00a <__aeabi_fadd+0xf6>
1000a05a:	24ff      	movs	r4, #255	; 0xff
1000a05c:	2300      	movs	r3, #0
1000a05e:	e783      	b.n	10009f68 <__aeabi_fadd+0x54>
1000a060:	4b69      	ldr	r3, [pc, #420]	; (1000a208 <__aeabi_fadd+0x2f4>)
1000a062:	1a24      	subs	r4, r4, r0
1000a064:	4033      	ands	r3, r6
1000a066:	e76b      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a068:	2900      	cmp	r1, #0
1000a06a:	d158      	bne.n	1000a11e <__aeabi_fadd+0x20a>
1000a06c:	1c62      	adds	r2, r4, #1
1000a06e:	b2d1      	uxtb	r1, r2
1000a070:	2901      	cmp	r1, #1
1000a072:	dd3c      	ble.n	1000a0ee <__aeabi_fadd+0x1da>
1000a074:	2aff      	cmp	r2, #255	; 0xff
1000a076:	d037      	beq.n	1000a0e8 <__aeabi_fadd+0x1d4>
1000a078:	18fb      	adds	r3, r7, r3
1000a07a:	085b      	lsrs	r3, r3, #1
1000a07c:	1c14      	adds	r4, r2, #0
1000a07e:	e75f      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a080:	2cff      	cmp	r4, #255	; 0xff
1000a082:	d000      	beq.n	1000a086 <__aeabi_fadd+0x172>
1000a084:	e77c      	b.n	10009f80 <__aeabi_fadd+0x6c>
1000a086:	e75b      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a088:	2c00      	cmp	r4, #0
1000a08a:	d01e      	beq.n	1000a0ca <__aeabi_fadd+0x1b6>
1000a08c:	2aff      	cmp	r2, #255	; 0xff
1000a08e:	d023      	beq.n	1000a0d8 <__aeabi_fadd+0x1c4>
1000a090:	2480      	movs	r4, #128	; 0x80
1000a092:	04e4      	lsls	r4, r4, #19
1000a094:	4240      	negs	r0, r0
1000a096:	4323      	orrs	r3, r4
1000a098:	281b      	cmp	r0, #27
1000a09a:	dd5b      	ble.n	1000a154 <__aeabi_fadd+0x240>
1000a09c:	2301      	movs	r3, #1
1000a09e:	1afb      	subs	r3, r7, r3
1000a0a0:	1c14      	adds	r4, r2, #0
1000a0a2:	1c0d      	adds	r5, r1, #0
1000a0a4:	e7ad      	b.n	1000a002 <__aeabi_fadd+0xee>
1000a0a6:	2e00      	cmp	r6, #0
1000a0a8:	d1af      	bne.n	1000a00a <__aeabi_fadd+0xf6>
1000a0aa:	2300      	movs	r3, #0
1000a0ac:	2000      	movs	r0, #0
1000a0ae:	2400      	movs	r4, #0
1000a0b0:	e778      	b.n	10009fa4 <__aeabi_fadd+0x90>
1000a0b2:	1c3a      	adds	r2, r7, #0
1000a0b4:	40ca      	lsrs	r2, r1
1000a0b6:	4694      	mov	ip, r2
1000a0b8:	2220      	movs	r2, #32
1000a0ba:	1c3e      	adds	r6, r7, #0
1000a0bc:	1a51      	subs	r1, r2, r1
1000a0be:	408e      	lsls	r6, r1
1000a0c0:	4662      	mov	r2, ip
1000a0c2:	1e77      	subs	r7, r6, #1
1000a0c4:	41be      	sbcs	r6, r7
1000a0c6:	4316      	orrs	r6, r2
1000a0c8:	e780      	b.n	10009fcc <__aeabi_fadd+0xb8>
1000a0ca:	2b00      	cmp	r3, #0
1000a0cc:	d03e      	beq.n	1000a14c <__aeabi_fadd+0x238>
1000a0ce:	43c0      	mvns	r0, r0
1000a0d0:	2800      	cmp	r0, #0
1000a0d2:	d0e4      	beq.n	1000a09e <__aeabi_fadd+0x18a>
1000a0d4:	2aff      	cmp	r2, #255	; 0xff
1000a0d6:	d1df      	bne.n	1000a098 <__aeabi_fadd+0x184>
1000a0d8:	1c3b      	adds	r3, r7, #0
1000a0da:	24ff      	movs	r4, #255	; 0xff
1000a0dc:	1c0d      	adds	r5, r1, #0
1000a0de:	e72f      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a0e0:	2cff      	cmp	r4, #255	; 0xff
1000a0e2:	d000      	beq.n	1000a0e6 <__aeabi_fadd+0x1d2>
1000a0e4:	e76f      	b.n	10009fc6 <__aeabi_fadd+0xb2>
1000a0e6:	e72b      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a0e8:	24ff      	movs	r4, #255	; 0xff
1000a0ea:	2300      	movs	r3, #0
1000a0ec:	e75a      	b.n	10009fa4 <__aeabi_fadd+0x90>
1000a0ee:	2c00      	cmp	r4, #0
1000a0f0:	d15a      	bne.n	1000a1a8 <__aeabi_fadd+0x294>
1000a0f2:	2b00      	cmp	r3, #0
1000a0f4:	d07f      	beq.n	1000a1f6 <__aeabi_fadd+0x2e2>
1000a0f6:	2f00      	cmp	r7, #0
1000a0f8:	d100      	bne.n	1000a0fc <__aeabi_fadd+0x1e8>
1000a0fa:	e721      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a0fc:	19db      	adds	r3, r3, r7
1000a0fe:	015a      	lsls	r2, r3, #5
1000a100:	d400      	bmi.n	1000a104 <__aeabi_fadd+0x1f0>
1000a102:	e74c      	b.n	10009f9e <__aeabi_fadd+0x8a>
1000a104:	4a40      	ldr	r2, [pc, #256]	; (1000a208 <__aeabi_fadd+0x2f4>)
1000a106:	3401      	adds	r4, #1
1000a108:	4013      	ands	r3, r2
1000a10a:	e719      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a10c:	2c00      	cmp	r4, #0
1000a10e:	d115      	bne.n	1000a13c <__aeabi_fadd+0x228>
1000a110:	2b00      	cmp	r3, #0
1000a112:	d12f      	bne.n	1000a174 <__aeabi_fadd+0x260>
1000a114:	2f00      	cmp	r7, #0
1000a116:	d05d      	beq.n	1000a1d4 <__aeabi_fadd+0x2c0>
1000a118:	1c3b      	adds	r3, r7, #0
1000a11a:	1c0d      	adds	r5, r1, #0
1000a11c:	e710      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a11e:	2c00      	cmp	r4, #0
1000a120:	d121      	bne.n	1000a166 <__aeabi_fadd+0x252>
1000a122:	2b00      	cmp	r3, #0
1000a124:	d053      	beq.n	1000a1ce <__aeabi_fadd+0x2ba>
1000a126:	43c9      	mvns	r1, r1
1000a128:	2900      	cmp	r1, #0
1000a12a:	d004      	beq.n	1000a136 <__aeabi_fadd+0x222>
1000a12c:	2aff      	cmp	r2, #255	; 0xff
1000a12e:	d04b      	beq.n	1000a1c8 <__aeabi_fadd+0x2b4>
1000a130:	291b      	cmp	r1, #27
1000a132:	dd57      	ble.n	1000a1e4 <__aeabi_fadd+0x2d0>
1000a134:	2301      	movs	r3, #1
1000a136:	19db      	adds	r3, r3, r7
1000a138:	1c14      	adds	r4, r2, #0
1000a13a:	e748      	b.n	10009fce <__aeabi_fadd+0xba>
1000a13c:	2b00      	cmp	r3, #0
1000a13e:	d122      	bne.n	1000a186 <__aeabi_fadd+0x272>
1000a140:	2f00      	cmp	r7, #0
1000a142:	d04a      	beq.n	1000a1da <__aeabi_fadd+0x2c6>
1000a144:	1c3b      	adds	r3, r7, #0
1000a146:	1c0d      	adds	r5, r1, #0
1000a148:	24ff      	movs	r4, #255	; 0xff
1000a14a:	e6f9      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a14c:	1c3b      	adds	r3, r7, #0
1000a14e:	1c14      	adds	r4, r2, #0
1000a150:	1c0d      	adds	r5, r1, #0
1000a152:	e6f5      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a154:	1c1d      	adds	r5, r3, #0
1000a156:	2420      	movs	r4, #32
1000a158:	40c5      	lsrs	r5, r0
1000a15a:	1a20      	subs	r0, r4, r0
1000a15c:	4083      	lsls	r3, r0
1000a15e:	1e58      	subs	r0, r3, #1
1000a160:	4183      	sbcs	r3, r0
1000a162:	432b      	orrs	r3, r5
1000a164:	e79b      	b.n	1000a09e <__aeabi_fadd+0x18a>
1000a166:	2aff      	cmp	r2, #255	; 0xff
1000a168:	d02e      	beq.n	1000a1c8 <__aeabi_fadd+0x2b4>
1000a16a:	2480      	movs	r4, #128	; 0x80
1000a16c:	04e4      	lsls	r4, r4, #19
1000a16e:	4249      	negs	r1, r1
1000a170:	4323      	orrs	r3, r4
1000a172:	e7dd      	b.n	1000a130 <__aeabi_fadd+0x21c>
1000a174:	2f00      	cmp	r7, #0
1000a176:	d100      	bne.n	1000a17a <__aeabi_fadd+0x266>
1000a178:	e6e2      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a17a:	1bda      	subs	r2, r3, r7
1000a17c:	0150      	lsls	r0, r2, #5
1000a17e:	d53c      	bpl.n	1000a1fa <__aeabi_fadd+0x2e6>
1000a180:	1afb      	subs	r3, r7, r3
1000a182:	1c0d      	adds	r5, r1, #0
1000a184:	e6dc      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a186:	24ff      	movs	r4, #255	; 0xff
1000a188:	2f00      	cmp	r7, #0
1000a18a:	d100      	bne.n	1000a18e <__aeabi_fadd+0x27a>
1000a18c:	e6d8      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a18e:	2280      	movs	r2, #128	; 0x80
1000a190:	08db      	lsrs	r3, r3, #3
1000a192:	03d2      	lsls	r2, r2, #15
1000a194:	4213      	tst	r3, r2
1000a196:	d004      	beq.n	1000a1a2 <__aeabi_fadd+0x28e>
1000a198:	08fe      	lsrs	r6, r7, #3
1000a19a:	4216      	tst	r6, r2
1000a19c:	d101      	bne.n	1000a1a2 <__aeabi_fadd+0x28e>
1000a19e:	1c33      	adds	r3, r6, #0
1000a1a0:	1c0d      	adds	r5, r1, #0
1000a1a2:	00db      	lsls	r3, r3, #3
1000a1a4:	24ff      	movs	r4, #255	; 0xff
1000a1a6:	e6cb      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a1a8:	2b00      	cmp	r3, #0
1000a1aa:	d00d      	beq.n	1000a1c8 <__aeabi_fadd+0x2b4>
1000a1ac:	24ff      	movs	r4, #255	; 0xff
1000a1ae:	2f00      	cmp	r7, #0
1000a1b0:	d100      	bne.n	1000a1b4 <__aeabi_fadd+0x2a0>
1000a1b2:	e6c5      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a1b4:	2280      	movs	r2, #128	; 0x80
1000a1b6:	08db      	lsrs	r3, r3, #3
1000a1b8:	03d2      	lsls	r2, r2, #15
1000a1ba:	4213      	tst	r3, r2
1000a1bc:	d0f1      	beq.n	1000a1a2 <__aeabi_fadd+0x28e>
1000a1be:	08fe      	lsrs	r6, r7, #3
1000a1c0:	4216      	tst	r6, r2
1000a1c2:	d1ee      	bne.n	1000a1a2 <__aeabi_fadd+0x28e>
1000a1c4:	1c33      	adds	r3, r6, #0
1000a1c6:	e7ec      	b.n	1000a1a2 <__aeabi_fadd+0x28e>
1000a1c8:	1c3b      	adds	r3, r7, #0
1000a1ca:	24ff      	movs	r4, #255	; 0xff
1000a1cc:	e6b8      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a1ce:	1c3b      	adds	r3, r7, #0
1000a1d0:	1c14      	adds	r4, r2, #0
1000a1d2:	e6b5      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a1d4:	1c23      	adds	r3, r4, #0
1000a1d6:	2000      	movs	r0, #0
1000a1d8:	e6e4      	b.n	10009fa4 <__aeabi_fadd+0x90>
1000a1da:	2380      	movs	r3, #128	; 0x80
1000a1dc:	2000      	movs	r0, #0
1000a1de:	049b      	lsls	r3, r3, #18
1000a1e0:	24ff      	movs	r4, #255	; 0xff
1000a1e2:	e6df      	b.n	10009fa4 <__aeabi_fadd+0x90>
1000a1e4:	1c1e      	adds	r6, r3, #0
1000a1e6:	2420      	movs	r4, #32
1000a1e8:	40ce      	lsrs	r6, r1
1000a1ea:	1a61      	subs	r1, r4, r1
1000a1ec:	408b      	lsls	r3, r1
1000a1ee:	1e59      	subs	r1, r3, #1
1000a1f0:	418b      	sbcs	r3, r1
1000a1f2:	4333      	orrs	r3, r6
1000a1f4:	e79f      	b.n	1000a136 <__aeabi_fadd+0x222>
1000a1f6:	1c3b      	adds	r3, r7, #0
1000a1f8:	e6a2      	b.n	10009f40 <__aeabi_fadd+0x2c>
1000a1fa:	1e13      	subs	r3, r2, #0
1000a1fc:	d000      	beq.n	1000a200 <__aeabi_fadd+0x2ec>
1000a1fe:	e6ce      	b.n	10009f9e <__aeabi_fadd+0x8a>
1000a200:	2300      	movs	r3, #0
1000a202:	2000      	movs	r0, #0
1000a204:	e6ce      	b.n	10009fa4 <__aeabi_fadd+0x90>
1000a206:	46c0      	nop			; (mov r8, r8)
1000a208:	fbffffff 	.word	0xfbffffff

1000a20c <__aeabi_fdiv>:
1000a20c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a20e:	4656      	mov	r6, sl
1000a210:	464d      	mov	r5, r9
1000a212:	465f      	mov	r7, fp
1000a214:	4644      	mov	r4, r8
1000a216:	b4f0      	push	{r4, r5, r6, r7}
1000a218:	0243      	lsls	r3, r0, #9
1000a21a:	0045      	lsls	r5, r0, #1
1000a21c:	0fc7      	lsrs	r7, r0, #31
1000a21e:	b083      	sub	sp, #12
1000a220:	468a      	mov	sl, r1
1000a222:	0a5c      	lsrs	r4, r3, #9
1000a224:	0e2e      	lsrs	r6, r5, #24
1000a226:	46b9      	mov	r9, r7
1000a228:	d041      	beq.n	1000a2ae <__aeabi_fdiv+0xa2>
1000a22a:	2eff      	cmp	r6, #255	; 0xff
1000a22c:	d026      	beq.n	1000a27c <__aeabi_fdiv+0x70>
1000a22e:	2380      	movs	r3, #128	; 0x80
1000a230:	041b      	lsls	r3, r3, #16
1000a232:	4323      	orrs	r3, r4
1000a234:	00dc      	lsls	r4, r3, #3
1000a236:	2300      	movs	r3, #0
1000a238:	4698      	mov	r8, r3
1000a23a:	469b      	mov	fp, r3
1000a23c:	3e7f      	subs	r6, #127	; 0x7f
1000a23e:	4653      	mov	r3, sl
1000a240:	025b      	lsls	r3, r3, #9
1000a242:	0a5d      	lsrs	r5, r3, #9
1000a244:	4653      	mov	r3, sl
1000a246:	005a      	lsls	r2, r3, #1
1000a248:	0fdb      	lsrs	r3, r3, #31
1000a24a:	0e12      	lsrs	r2, r2, #24
1000a24c:	469a      	mov	sl, r3
1000a24e:	d039      	beq.n	1000a2c4 <__aeabi_fdiv+0xb8>
1000a250:	2aff      	cmp	r2, #255	; 0xff
1000a252:	d033      	beq.n	1000a2bc <__aeabi_fdiv+0xb0>
1000a254:	2380      	movs	r3, #128	; 0x80
1000a256:	041b      	lsls	r3, r3, #16
1000a258:	432b      	orrs	r3, r5
1000a25a:	00dd      	lsls	r5, r3, #3
1000a25c:	2300      	movs	r3, #0
1000a25e:	3a7f      	subs	r2, #127	; 0x7f
1000a260:	4651      	mov	r1, sl
1000a262:	1ab2      	subs	r2, r6, r2
1000a264:	4646      	mov	r6, r8
1000a266:	4079      	eors	r1, r7
1000a268:	1c08      	adds	r0, r1, #0
1000a26a:	9201      	str	r2, [sp, #4]
1000a26c:	431e      	orrs	r6, r3
1000a26e:	2e0f      	cmp	r6, #15
1000a270:	d900      	bls.n	1000a274 <__aeabi_fdiv+0x68>
1000a272:	e076      	b.n	1000a362 <__aeabi_fdiv+0x156>
1000a274:	4a7e      	ldr	r2, [pc, #504]	; (1000a470 <__aeabi_fdiv+0x264>)
1000a276:	00b6      	lsls	r6, r6, #2
1000a278:	5996      	ldr	r6, [r2, r6]
1000a27a:	46b7      	mov	pc, r6
1000a27c:	2c00      	cmp	r4, #0
1000a27e:	d130      	bne.n	1000a2e2 <__aeabi_fdiv+0xd6>
1000a280:	2308      	movs	r3, #8
1000a282:	4698      	mov	r8, r3
1000a284:	3b06      	subs	r3, #6
1000a286:	469b      	mov	fp, r3
1000a288:	e7d9      	b.n	1000a23e <__aeabi_fdiv+0x32>
1000a28a:	2380      	movs	r3, #128	; 0x80
1000a28c:	2100      	movs	r1, #0
1000a28e:	03db      	lsls	r3, r3, #15
1000a290:	24ff      	movs	r4, #255	; 0xff
1000a292:	025b      	lsls	r3, r3, #9
1000a294:	05e4      	lsls	r4, r4, #23
1000a296:	0a5b      	lsrs	r3, r3, #9
1000a298:	07c9      	lsls	r1, r1, #31
1000a29a:	4323      	orrs	r3, r4
1000a29c:	430b      	orrs	r3, r1
1000a29e:	1c18      	adds	r0, r3, #0
1000a2a0:	b003      	add	sp, #12
1000a2a2:	bc3c      	pop	{r2, r3, r4, r5}
1000a2a4:	4690      	mov	r8, r2
1000a2a6:	4699      	mov	r9, r3
1000a2a8:	46a2      	mov	sl, r4
1000a2aa:	46ab      	mov	fp, r5
1000a2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a2ae:	2c00      	cmp	r4, #0
1000a2b0:	d128      	bne.n	1000a304 <__aeabi_fdiv+0xf8>
1000a2b2:	2304      	movs	r3, #4
1000a2b4:	4698      	mov	r8, r3
1000a2b6:	3b03      	subs	r3, #3
1000a2b8:	469b      	mov	fp, r3
1000a2ba:	e7c0      	b.n	1000a23e <__aeabi_fdiv+0x32>
1000a2bc:	2d00      	cmp	r5, #0
1000a2be:	d11f      	bne.n	1000a300 <__aeabi_fdiv+0xf4>
1000a2c0:	2302      	movs	r3, #2
1000a2c2:	e002      	b.n	1000a2ca <__aeabi_fdiv+0xbe>
1000a2c4:	2d00      	cmp	r5, #0
1000a2c6:	d111      	bne.n	1000a2ec <__aeabi_fdiv+0xe0>
1000a2c8:	2301      	movs	r3, #1
1000a2ca:	1ab2      	subs	r2, r6, r2
1000a2cc:	4650      	mov	r0, sl
1000a2ce:	4646      	mov	r6, r8
1000a2d0:	4078      	eors	r0, r7
1000a2d2:	9201      	str	r2, [sp, #4]
1000a2d4:	431e      	orrs	r6, r3
1000a2d6:	2e0f      	cmp	r6, #15
1000a2d8:	d827      	bhi.n	1000a32a <__aeabi_fdiv+0x11e>
1000a2da:	4966      	ldr	r1, [pc, #408]	; (1000a474 <__aeabi_fdiv+0x268>)
1000a2dc:	00b6      	lsls	r6, r6, #2
1000a2de:	5989      	ldr	r1, [r1, r6]
1000a2e0:	468f      	mov	pc, r1
1000a2e2:	230c      	movs	r3, #12
1000a2e4:	4698      	mov	r8, r3
1000a2e6:	3b09      	subs	r3, #9
1000a2e8:	469b      	mov	fp, r3
1000a2ea:	e7a8      	b.n	1000a23e <__aeabi_fdiv+0x32>
1000a2ec:	1c28      	adds	r0, r5, #0
1000a2ee:	f7ff fd5b 	bl	10009da8 <__clzsi2>
1000a2f2:	2276      	movs	r2, #118	; 0x76
1000a2f4:	1f43      	subs	r3, r0, #5
1000a2f6:	4252      	negs	r2, r2
1000a2f8:	409d      	lsls	r5, r3
1000a2fa:	1a12      	subs	r2, r2, r0
1000a2fc:	2300      	movs	r3, #0
1000a2fe:	e7af      	b.n	1000a260 <__aeabi_fdiv+0x54>
1000a300:	2303      	movs	r3, #3
1000a302:	e7ad      	b.n	1000a260 <__aeabi_fdiv+0x54>
1000a304:	1c20      	adds	r0, r4, #0
1000a306:	f7ff fd4f 	bl	10009da8 <__clzsi2>
1000a30a:	1f43      	subs	r3, r0, #5
1000a30c:	409c      	lsls	r4, r3
1000a30e:	2376      	movs	r3, #118	; 0x76
1000a310:	425b      	negs	r3, r3
1000a312:	1a1e      	subs	r6, r3, r0
1000a314:	2300      	movs	r3, #0
1000a316:	4698      	mov	r8, r3
1000a318:	469b      	mov	fp, r3
1000a31a:	e790      	b.n	1000a23e <__aeabi_fdiv+0x32>
1000a31c:	2500      	movs	r5, #0
1000a31e:	46d1      	mov	r9, sl
1000a320:	469b      	mov	fp, r3
1000a322:	465b      	mov	r3, fp
1000a324:	4648      	mov	r0, r9
1000a326:	2b02      	cmp	r3, #2
1000a328:	d16f      	bne.n	1000a40a <__aeabi_fdiv+0x1fe>
1000a32a:	2101      	movs	r1, #1
1000a32c:	24ff      	movs	r4, #255	; 0xff
1000a32e:	4001      	ands	r1, r0
1000a330:	2300      	movs	r3, #0
1000a332:	e7ae      	b.n	1000a292 <__aeabi_fdiv+0x86>
1000a334:	237e      	movs	r3, #126	; 0x7e
1000a336:	9a01      	ldr	r2, [sp, #4]
1000a338:	425b      	negs	r3, r3
1000a33a:	1a9b      	subs	r3, r3, r2
1000a33c:	2b1b      	cmp	r3, #27
1000a33e:	dd6d      	ble.n	1000a41c <__aeabi_fdiv+0x210>
1000a340:	2101      	movs	r1, #1
1000a342:	464b      	mov	r3, r9
1000a344:	4019      	ands	r1, r3
1000a346:	2400      	movs	r4, #0
1000a348:	2300      	movs	r3, #0
1000a34a:	e7a2      	b.n	1000a292 <__aeabi_fdiv+0x86>
1000a34c:	2380      	movs	r3, #128	; 0x80
1000a34e:	03db      	lsls	r3, r3, #15
1000a350:	421c      	tst	r4, r3
1000a352:	d149      	bne.n	1000a3e8 <__aeabi_fdiv+0x1dc>
1000a354:	2380      	movs	r3, #128	; 0x80
1000a356:	03db      	lsls	r3, r3, #15
1000a358:	4323      	orrs	r3, r4
1000a35a:	025b      	lsls	r3, r3, #9
1000a35c:	0a5b      	lsrs	r3, r3, #9
1000a35e:	1c39      	adds	r1, r7, #0
1000a360:	e796      	b.n	1000a290 <__aeabi_fdiv+0x84>
1000a362:	0163      	lsls	r3, r4, #5
1000a364:	016d      	lsls	r5, r5, #5
1000a366:	42ab      	cmp	r3, r5
1000a368:	d337      	bcc.n	1000a3da <__aeabi_fdiv+0x1ce>
1000a36a:	4689      	mov	r9, r1
1000a36c:	201a      	movs	r0, #26
1000a36e:	2101      	movs	r1, #1
1000a370:	1b5b      	subs	r3, r3, r5
1000a372:	2401      	movs	r4, #1
1000a374:	1c1e      	adds	r6, r3, #0
1000a376:	0049      	lsls	r1, r1, #1
1000a378:	005b      	lsls	r3, r3, #1
1000a37a:	2e00      	cmp	r6, #0
1000a37c:	db01      	blt.n	1000a382 <__aeabi_fdiv+0x176>
1000a37e:	42ab      	cmp	r3, r5
1000a380:	d301      	bcc.n	1000a386 <__aeabi_fdiv+0x17a>
1000a382:	1b5b      	subs	r3, r3, r5
1000a384:	4321      	orrs	r1, r4
1000a386:	3801      	subs	r0, #1
1000a388:	2800      	cmp	r0, #0
1000a38a:	d1f3      	bne.n	1000a374 <__aeabi_fdiv+0x168>
1000a38c:	1e58      	subs	r0, r3, #1
1000a38e:	4183      	sbcs	r3, r0
1000a390:	430b      	orrs	r3, r1
1000a392:	1c1d      	adds	r5, r3, #0
1000a394:	9c01      	ldr	r4, [sp, #4]
1000a396:	347f      	adds	r4, #127	; 0x7f
1000a398:	2c00      	cmp	r4, #0
1000a39a:	ddcb      	ble.n	1000a334 <__aeabi_fdiv+0x128>
1000a39c:	076b      	lsls	r3, r5, #29
1000a39e:	d004      	beq.n	1000a3aa <__aeabi_fdiv+0x19e>
1000a3a0:	230f      	movs	r3, #15
1000a3a2:	402b      	ands	r3, r5
1000a3a4:	2b04      	cmp	r3, #4
1000a3a6:	d000      	beq.n	1000a3aa <__aeabi_fdiv+0x19e>
1000a3a8:	3504      	adds	r5, #4
1000a3aa:	012b      	lsls	r3, r5, #4
1000a3ac:	d504      	bpl.n	1000a3b8 <__aeabi_fdiv+0x1ac>
1000a3ae:	9a01      	ldr	r2, [sp, #4]
1000a3b0:	4b31      	ldr	r3, [pc, #196]	; (1000a478 <__aeabi_fdiv+0x26c>)
1000a3b2:	3280      	adds	r2, #128	; 0x80
1000a3b4:	1c14      	adds	r4, r2, #0
1000a3b6:	401d      	ands	r5, r3
1000a3b8:	2cfe      	cmp	r4, #254	; 0xfe
1000a3ba:	dd07      	ble.n	1000a3cc <__aeabi_fdiv+0x1c0>
1000a3bc:	464b      	mov	r3, r9
1000a3be:	2101      	movs	r1, #1
1000a3c0:	24ff      	movs	r4, #255	; 0xff
1000a3c2:	4019      	ands	r1, r3
1000a3c4:	2300      	movs	r3, #0
1000a3c6:	e764      	b.n	1000a292 <__aeabi_fdiv+0x86>
1000a3c8:	1c25      	adds	r5, r4, #0
1000a3ca:	e7aa      	b.n	1000a322 <__aeabi_fdiv+0x116>
1000a3cc:	2101      	movs	r1, #1
1000a3ce:	464a      	mov	r2, r9
1000a3d0:	01ab      	lsls	r3, r5, #6
1000a3d2:	0a5b      	lsrs	r3, r3, #9
1000a3d4:	b2e4      	uxtb	r4, r4
1000a3d6:	4011      	ands	r1, r2
1000a3d8:	e75b      	b.n	1000a292 <__aeabi_fdiv+0x86>
1000a3da:	9a01      	ldr	r2, [sp, #4]
1000a3dc:	4689      	mov	r9, r1
1000a3de:	3a01      	subs	r2, #1
1000a3e0:	9201      	str	r2, [sp, #4]
1000a3e2:	201b      	movs	r0, #27
1000a3e4:	2100      	movs	r1, #0
1000a3e6:	e7c4      	b.n	1000a372 <__aeabi_fdiv+0x166>
1000a3e8:	421d      	tst	r5, r3
1000a3ea:	d007      	beq.n	1000a3fc <__aeabi_fdiv+0x1f0>
1000a3ec:	4323      	orrs	r3, r4
1000a3ee:	025b      	lsls	r3, r3, #9
1000a3f0:	0a5b      	lsrs	r3, r3, #9
1000a3f2:	1c39      	adds	r1, r7, #0
1000a3f4:	e74c      	b.n	1000a290 <__aeabi_fdiv+0x84>
1000a3f6:	2500      	movs	r5, #0
1000a3f8:	0263      	lsls	r3, r4, #9
1000a3fa:	d5ab      	bpl.n	1000a354 <__aeabi_fdiv+0x148>
1000a3fc:	2380      	movs	r3, #128	; 0x80
1000a3fe:	03db      	lsls	r3, r3, #15
1000a400:	432b      	orrs	r3, r5
1000a402:	025b      	lsls	r3, r3, #9
1000a404:	0a5b      	lsrs	r3, r3, #9
1000a406:	4651      	mov	r1, sl
1000a408:	e742      	b.n	1000a290 <__aeabi_fdiv+0x84>
1000a40a:	2b03      	cmp	r3, #3
1000a40c:	d025      	beq.n	1000a45a <__aeabi_fdiv+0x24e>
1000a40e:	2b01      	cmp	r3, #1
1000a410:	d1c0      	bne.n	1000a394 <__aeabi_fdiv+0x188>
1000a412:	2101      	movs	r1, #1
1000a414:	2400      	movs	r4, #0
1000a416:	4001      	ands	r1, r0
1000a418:	2300      	movs	r3, #0
1000a41a:	e73a      	b.n	1000a292 <__aeabi_fdiv+0x86>
1000a41c:	1c29      	adds	r1, r5, #0
1000a41e:	40d9      	lsrs	r1, r3
1000a420:	1c2b      	adds	r3, r5, #0
1000a422:	9a01      	ldr	r2, [sp, #4]
1000a424:	329e      	adds	r2, #158	; 0x9e
1000a426:	4093      	lsls	r3, r2
1000a428:	1e5d      	subs	r5, r3, #1
1000a42a:	41ab      	sbcs	r3, r5
1000a42c:	430b      	orrs	r3, r1
1000a42e:	075a      	lsls	r2, r3, #29
1000a430:	d004      	beq.n	1000a43c <__aeabi_fdiv+0x230>
1000a432:	220f      	movs	r2, #15
1000a434:	401a      	ands	r2, r3
1000a436:	2a04      	cmp	r2, #4
1000a438:	d000      	beq.n	1000a43c <__aeabi_fdiv+0x230>
1000a43a:	3304      	adds	r3, #4
1000a43c:	015a      	lsls	r2, r3, #5
1000a43e:	d505      	bpl.n	1000a44c <__aeabi_fdiv+0x240>
1000a440:	464b      	mov	r3, r9
1000a442:	2101      	movs	r1, #1
1000a444:	2401      	movs	r4, #1
1000a446:	4019      	ands	r1, r3
1000a448:	2300      	movs	r3, #0
1000a44a:	e722      	b.n	1000a292 <__aeabi_fdiv+0x86>
1000a44c:	2101      	movs	r1, #1
1000a44e:	464a      	mov	r2, r9
1000a450:	019b      	lsls	r3, r3, #6
1000a452:	0a5b      	lsrs	r3, r3, #9
1000a454:	4011      	ands	r1, r2
1000a456:	2400      	movs	r4, #0
1000a458:	e71b      	b.n	1000a292 <__aeabi_fdiv+0x86>
1000a45a:	2380      	movs	r3, #128	; 0x80
1000a45c:	2101      	movs	r1, #1
1000a45e:	464a      	mov	r2, r9
1000a460:	03db      	lsls	r3, r3, #15
1000a462:	432b      	orrs	r3, r5
1000a464:	025b      	lsls	r3, r3, #9
1000a466:	400a      	ands	r2, r1
1000a468:	0a5b      	lsrs	r3, r3, #9
1000a46a:	1c11      	adds	r1, r2, #0
1000a46c:	e710      	b.n	1000a290 <__aeabi_fdiv+0x84>
1000a46e:	46c0      	nop			; (mov r8, r8)
1000a470:	1000d388 	.word	0x1000d388
1000a474:	1000d3c8 	.word	0x1000d3c8
1000a478:	f7ffffff 	.word	0xf7ffffff

1000a47c <__eqsf2>:
1000a47c:	0243      	lsls	r3, r0, #9
1000a47e:	b570      	push	{r4, r5, r6, lr}
1000a480:	0042      	lsls	r2, r0, #1
1000a482:	004c      	lsls	r4, r1, #1
1000a484:	0a5d      	lsrs	r5, r3, #9
1000a486:	0fc3      	lsrs	r3, r0, #31
1000a488:	0248      	lsls	r0, r1, #9
1000a48a:	0e12      	lsrs	r2, r2, #24
1000a48c:	0a46      	lsrs	r6, r0, #9
1000a48e:	0e24      	lsrs	r4, r4, #24
1000a490:	0fc9      	lsrs	r1, r1, #31
1000a492:	2aff      	cmp	r2, #255	; 0xff
1000a494:	d005      	beq.n	1000a4a2 <__eqsf2+0x26>
1000a496:	2cff      	cmp	r4, #255	; 0xff
1000a498:	d008      	beq.n	1000a4ac <__eqsf2+0x30>
1000a49a:	2001      	movs	r0, #1
1000a49c:	42a2      	cmp	r2, r4
1000a49e:	d00b      	beq.n	1000a4b8 <__eqsf2+0x3c>
1000a4a0:	bd70      	pop	{r4, r5, r6, pc}
1000a4a2:	2001      	movs	r0, #1
1000a4a4:	2d00      	cmp	r5, #0
1000a4a6:	d1fb      	bne.n	1000a4a0 <__eqsf2+0x24>
1000a4a8:	2cff      	cmp	r4, #255	; 0xff
1000a4aa:	d1f6      	bne.n	1000a49a <__eqsf2+0x1e>
1000a4ac:	2001      	movs	r0, #1
1000a4ae:	2e00      	cmp	r6, #0
1000a4b0:	d1f6      	bne.n	1000a4a0 <__eqsf2+0x24>
1000a4b2:	2001      	movs	r0, #1
1000a4b4:	42a2      	cmp	r2, r4
1000a4b6:	d1f3      	bne.n	1000a4a0 <__eqsf2+0x24>
1000a4b8:	42b5      	cmp	r5, r6
1000a4ba:	d1f1      	bne.n	1000a4a0 <__eqsf2+0x24>
1000a4bc:	428b      	cmp	r3, r1
1000a4be:	d005      	beq.n	1000a4cc <__eqsf2+0x50>
1000a4c0:	2a00      	cmp	r2, #0
1000a4c2:	d1ed      	bne.n	1000a4a0 <__eqsf2+0x24>
1000a4c4:	1c28      	adds	r0, r5, #0
1000a4c6:	1e43      	subs	r3, r0, #1
1000a4c8:	4198      	sbcs	r0, r3
1000a4ca:	e7e9      	b.n	1000a4a0 <__eqsf2+0x24>
1000a4cc:	2000      	movs	r0, #0
1000a4ce:	e7e7      	b.n	1000a4a0 <__eqsf2+0x24>

1000a4d0 <__gesf2>:
1000a4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a4d2:	0243      	lsls	r3, r0, #9
1000a4d4:	024d      	lsls	r5, r1, #9
1000a4d6:	004a      	lsls	r2, r1, #1
1000a4d8:	0044      	lsls	r4, r0, #1
1000a4da:	0a5e      	lsrs	r6, r3, #9
1000a4dc:	0e24      	lsrs	r4, r4, #24
1000a4de:	0fc3      	lsrs	r3, r0, #31
1000a4e0:	0a6d      	lsrs	r5, r5, #9
1000a4e2:	0e12      	lsrs	r2, r2, #24
1000a4e4:	0fc9      	lsrs	r1, r1, #31
1000a4e6:	2cff      	cmp	r4, #255	; 0xff
1000a4e8:	d00d      	beq.n	1000a506 <__gesf2+0x36>
1000a4ea:	2aff      	cmp	r2, #255	; 0xff
1000a4ec:	d031      	beq.n	1000a552 <__gesf2+0x82>
1000a4ee:	2c00      	cmp	r4, #0
1000a4f0:	d10d      	bne.n	1000a50e <__gesf2+0x3e>
1000a4f2:	4277      	negs	r7, r6
1000a4f4:	4177      	adcs	r7, r6
1000a4f6:	2a00      	cmp	r2, #0
1000a4f8:	d123      	bne.n	1000a542 <__gesf2+0x72>
1000a4fa:	2d00      	cmp	r5, #0
1000a4fc:	d121      	bne.n	1000a542 <__gesf2+0x72>
1000a4fe:	2000      	movs	r0, #0
1000a500:	2f00      	cmp	r7, #0
1000a502:	d10b      	bne.n	1000a51c <__gesf2+0x4c>
1000a504:	e007      	b.n	1000a516 <__gesf2+0x46>
1000a506:	2e00      	cmp	r6, #0
1000a508:	d128      	bne.n	1000a55c <__gesf2+0x8c>
1000a50a:	2aff      	cmp	r2, #255	; 0xff
1000a50c:	d021      	beq.n	1000a552 <__gesf2+0x82>
1000a50e:	2a00      	cmp	r2, #0
1000a510:	d005      	beq.n	1000a51e <__gesf2+0x4e>
1000a512:	428b      	cmp	r3, r1
1000a514:	d007      	beq.n	1000a526 <__gesf2+0x56>
1000a516:	4258      	negs	r0, r3
1000a518:	2301      	movs	r3, #1
1000a51a:	4318      	orrs	r0, r3
1000a51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a51e:	2d00      	cmp	r5, #0
1000a520:	d0f9      	beq.n	1000a516 <__gesf2+0x46>
1000a522:	428b      	cmp	r3, r1
1000a524:	d1f7      	bne.n	1000a516 <__gesf2+0x46>
1000a526:	4294      	cmp	r4, r2
1000a528:	dcf5      	bgt.n	1000a516 <__gesf2+0x46>
1000a52a:	db04      	blt.n	1000a536 <__gesf2+0x66>
1000a52c:	42ae      	cmp	r6, r5
1000a52e:	d8f2      	bhi.n	1000a516 <__gesf2+0x46>
1000a530:	2000      	movs	r0, #0
1000a532:	42ae      	cmp	r6, r5
1000a534:	d2f2      	bcs.n	1000a51c <__gesf2+0x4c>
1000a536:	4258      	negs	r0, r3
1000a538:	4143      	adcs	r3, r0
1000a53a:	2001      	movs	r0, #1
1000a53c:	425b      	negs	r3, r3
1000a53e:	4318      	orrs	r0, r3
1000a540:	e7ec      	b.n	1000a51c <__gesf2+0x4c>
1000a542:	2f00      	cmp	r7, #0
1000a544:	d0e5      	beq.n	1000a512 <__gesf2+0x42>
1000a546:	4248      	negs	r0, r1
1000a548:	4141      	adcs	r1, r0
1000a54a:	2001      	movs	r0, #1
1000a54c:	4249      	negs	r1, r1
1000a54e:	4308      	orrs	r0, r1
1000a550:	e7e4      	b.n	1000a51c <__gesf2+0x4c>
1000a552:	2d00      	cmp	r5, #0
1000a554:	d102      	bne.n	1000a55c <__gesf2+0x8c>
1000a556:	2c00      	cmp	r4, #0
1000a558:	d0cb      	beq.n	1000a4f2 <__gesf2+0x22>
1000a55a:	e7da      	b.n	1000a512 <__gesf2+0x42>
1000a55c:	2002      	movs	r0, #2
1000a55e:	4240      	negs	r0, r0
1000a560:	e7dc      	b.n	1000a51c <__gesf2+0x4c>
1000a562:	46c0      	nop			; (mov r8, r8)

1000a564 <__lesf2>:
1000a564:	0243      	lsls	r3, r0, #9
1000a566:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a568:	0042      	lsls	r2, r0, #1
1000a56a:	004c      	lsls	r4, r1, #1
1000a56c:	0a5e      	lsrs	r6, r3, #9
1000a56e:	0fc3      	lsrs	r3, r0, #31
1000a570:	0248      	lsls	r0, r1, #9
1000a572:	0e12      	lsrs	r2, r2, #24
1000a574:	0a45      	lsrs	r5, r0, #9
1000a576:	0e24      	lsrs	r4, r4, #24
1000a578:	0fc9      	lsrs	r1, r1, #31
1000a57a:	2aff      	cmp	r2, #255	; 0xff
1000a57c:	d00f      	beq.n	1000a59e <__lesf2+0x3a>
1000a57e:	2cff      	cmp	r4, #255	; 0xff
1000a580:	d01a      	beq.n	1000a5b8 <__lesf2+0x54>
1000a582:	2a00      	cmp	r2, #0
1000a584:	d110      	bne.n	1000a5a8 <__lesf2+0x44>
1000a586:	4277      	negs	r7, r6
1000a588:	4177      	adcs	r7, r6
1000a58a:	2c00      	cmp	r4, #0
1000a58c:	d029      	beq.n	1000a5e2 <__lesf2+0x7e>
1000a58e:	2f00      	cmp	r7, #0
1000a590:	d017      	beq.n	1000a5c2 <__lesf2+0x5e>
1000a592:	4248      	negs	r0, r1
1000a594:	4141      	adcs	r1, r0
1000a596:	2001      	movs	r0, #1
1000a598:	4249      	negs	r1, r1
1000a59a:	4308      	orrs	r0, r1
1000a59c:	e00b      	b.n	1000a5b6 <__lesf2+0x52>
1000a59e:	2002      	movs	r0, #2
1000a5a0:	2e00      	cmp	r6, #0
1000a5a2:	d108      	bne.n	1000a5b6 <__lesf2+0x52>
1000a5a4:	2cff      	cmp	r4, #255	; 0xff
1000a5a6:	d007      	beq.n	1000a5b8 <__lesf2+0x54>
1000a5a8:	2c00      	cmp	r4, #0
1000a5aa:	d10a      	bne.n	1000a5c2 <__lesf2+0x5e>
1000a5ac:	2d00      	cmp	r5, #0
1000a5ae:	d108      	bne.n	1000a5c2 <__lesf2+0x5e>
1000a5b0:	4258      	negs	r0, r3
1000a5b2:	2301      	movs	r3, #1
1000a5b4:	4318      	orrs	r0, r3
1000a5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a5b8:	2002      	movs	r0, #2
1000a5ba:	2d00      	cmp	r5, #0
1000a5bc:	d1fb      	bne.n	1000a5b6 <__lesf2+0x52>
1000a5be:	2a00      	cmp	r2, #0
1000a5c0:	d0e1      	beq.n	1000a586 <__lesf2+0x22>
1000a5c2:	428b      	cmp	r3, r1
1000a5c4:	d1f4      	bne.n	1000a5b0 <__lesf2+0x4c>
1000a5c6:	42a2      	cmp	r2, r4
1000a5c8:	dcf2      	bgt.n	1000a5b0 <__lesf2+0x4c>
1000a5ca:	db04      	blt.n	1000a5d6 <__lesf2+0x72>
1000a5cc:	42ae      	cmp	r6, r5
1000a5ce:	d8ef      	bhi.n	1000a5b0 <__lesf2+0x4c>
1000a5d0:	2000      	movs	r0, #0
1000a5d2:	42ae      	cmp	r6, r5
1000a5d4:	d2ef      	bcs.n	1000a5b6 <__lesf2+0x52>
1000a5d6:	4258      	negs	r0, r3
1000a5d8:	4143      	adcs	r3, r0
1000a5da:	2001      	movs	r0, #1
1000a5dc:	425b      	negs	r3, r3
1000a5de:	4318      	orrs	r0, r3
1000a5e0:	e7e9      	b.n	1000a5b6 <__lesf2+0x52>
1000a5e2:	2d00      	cmp	r5, #0
1000a5e4:	d1d3      	bne.n	1000a58e <__lesf2+0x2a>
1000a5e6:	2000      	movs	r0, #0
1000a5e8:	2f00      	cmp	r7, #0
1000a5ea:	d1e4      	bne.n	1000a5b6 <__lesf2+0x52>
1000a5ec:	e7e0      	b.n	1000a5b0 <__lesf2+0x4c>
1000a5ee:	46c0      	nop			; (mov r8, r8)

1000a5f0 <__aeabi_fmul>:
1000a5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a5f2:	465f      	mov	r7, fp
1000a5f4:	4656      	mov	r6, sl
1000a5f6:	464d      	mov	r5, r9
1000a5f8:	4644      	mov	r4, r8
1000a5fa:	b4f0      	push	{r4, r5, r6, r7}
1000a5fc:	0245      	lsls	r5, r0, #9
1000a5fe:	0046      	lsls	r6, r0, #1
1000a600:	0fc4      	lsrs	r4, r0, #31
1000a602:	b083      	sub	sp, #12
1000a604:	1c0f      	adds	r7, r1, #0
1000a606:	0a6d      	lsrs	r5, r5, #9
1000a608:	0e36      	lsrs	r6, r6, #24
1000a60a:	46a3      	mov	fp, r4
1000a60c:	d045      	beq.n	1000a69a <__aeabi_fmul+0xaa>
1000a60e:	2eff      	cmp	r6, #255	; 0xff
1000a610:	d025      	beq.n	1000a65e <__aeabi_fmul+0x6e>
1000a612:	2380      	movs	r3, #128	; 0x80
1000a614:	041b      	lsls	r3, r3, #16
1000a616:	431d      	orrs	r5, r3
1000a618:	2300      	movs	r3, #0
1000a61a:	469a      	mov	sl, r3
1000a61c:	00ed      	lsls	r5, r5, #3
1000a61e:	3e7f      	subs	r6, #127	; 0x7f
1000a620:	9301      	str	r3, [sp, #4]
1000a622:	027b      	lsls	r3, r7, #9
1000a624:	0a5b      	lsrs	r3, r3, #9
1000a626:	4698      	mov	r8, r3
1000a628:	0078      	lsls	r0, r7, #1
1000a62a:	0ffb      	lsrs	r3, r7, #31
1000a62c:	0e00      	lsrs	r0, r0, #24
1000a62e:	4699      	mov	r9, r3
1000a630:	d040      	beq.n	1000a6b4 <__aeabi_fmul+0xc4>
1000a632:	28ff      	cmp	r0, #255	; 0xff
1000a634:	d038      	beq.n	1000a6a8 <__aeabi_fmul+0xb8>
1000a636:	2380      	movs	r3, #128	; 0x80
1000a638:	4642      	mov	r2, r8
1000a63a:	041b      	lsls	r3, r3, #16
1000a63c:	4313      	orrs	r3, r2
1000a63e:	00db      	lsls	r3, r3, #3
1000a640:	4698      	mov	r8, r3
1000a642:	2300      	movs	r3, #0
1000a644:	387f      	subs	r0, #127	; 0x7f
1000a646:	464a      	mov	r2, r9
1000a648:	9f01      	ldr	r7, [sp, #4]
1000a64a:	1830      	adds	r0, r6, r0
1000a64c:	4062      	eors	r2, r4
1000a64e:	1c41      	adds	r1, r0, #1
1000a650:	431f      	orrs	r7, r3
1000a652:	2f0f      	cmp	r7, #15
1000a654:	d869      	bhi.n	1000a72a <__aeabi_fmul+0x13a>
1000a656:	4e7d      	ldr	r6, [pc, #500]	; (1000a84c <__aeabi_fmul+0x25c>)
1000a658:	00bf      	lsls	r7, r7, #2
1000a65a:	59f6      	ldr	r6, [r6, r7]
1000a65c:	46b7      	mov	pc, r6
1000a65e:	2d00      	cmp	r5, #0
1000a660:	d145      	bne.n	1000a6ee <__aeabi_fmul+0xfe>
1000a662:	2308      	movs	r3, #8
1000a664:	9301      	str	r3, [sp, #4]
1000a666:	3b06      	subs	r3, #6
1000a668:	469a      	mov	sl, r3
1000a66a:	e7da      	b.n	1000a622 <__aeabi_fmul+0x32>
1000a66c:	4693      	mov	fp, r2
1000a66e:	4653      	mov	r3, sl
1000a670:	2b02      	cmp	r3, #2
1000a672:	d12f      	bne.n	1000a6d4 <__aeabi_fmul+0xe4>
1000a674:	465b      	mov	r3, fp
1000a676:	2401      	movs	r4, #1
1000a678:	2500      	movs	r5, #0
1000a67a:	401c      	ands	r4, r3
1000a67c:	23ff      	movs	r3, #255	; 0xff
1000a67e:	026d      	lsls	r5, r5, #9
1000a680:	05db      	lsls	r3, r3, #23
1000a682:	0a6d      	lsrs	r5, r5, #9
1000a684:	07e4      	lsls	r4, r4, #31
1000a686:	431d      	orrs	r5, r3
1000a688:	4325      	orrs	r5, r4
1000a68a:	1c28      	adds	r0, r5, #0
1000a68c:	b003      	add	sp, #12
1000a68e:	bc3c      	pop	{r2, r3, r4, r5}
1000a690:	4690      	mov	r8, r2
1000a692:	4699      	mov	r9, r3
1000a694:	46a2      	mov	sl, r4
1000a696:	46ab      	mov	fp, r5
1000a698:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a69a:	2d00      	cmp	r5, #0
1000a69c:	d12c      	bne.n	1000a6f8 <__aeabi_fmul+0x108>
1000a69e:	2304      	movs	r3, #4
1000a6a0:	9301      	str	r3, [sp, #4]
1000a6a2:	3b03      	subs	r3, #3
1000a6a4:	469a      	mov	sl, r3
1000a6a6:	e7bc      	b.n	1000a622 <__aeabi_fmul+0x32>
1000a6a8:	4643      	mov	r3, r8
1000a6aa:	425a      	negs	r2, r3
1000a6ac:	4153      	adcs	r3, r2
1000a6ae:	2203      	movs	r2, #3
1000a6b0:	1ad3      	subs	r3, r2, r3
1000a6b2:	e7c8      	b.n	1000a646 <__aeabi_fmul+0x56>
1000a6b4:	4642      	mov	r2, r8
1000a6b6:	2301      	movs	r3, #1
1000a6b8:	2a00      	cmp	r2, #0
1000a6ba:	d0c4      	beq.n	1000a646 <__aeabi_fmul+0x56>
1000a6bc:	4640      	mov	r0, r8
1000a6be:	f7ff fb73 	bl	10009da8 <__clzsi2>
1000a6c2:	4642      	mov	r2, r8
1000a6c4:	1f43      	subs	r3, r0, #5
1000a6c6:	409a      	lsls	r2, r3
1000a6c8:	2376      	movs	r3, #118	; 0x76
1000a6ca:	425b      	negs	r3, r3
1000a6cc:	1a18      	subs	r0, r3, r0
1000a6ce:	4690      	mov	r8, r2
1000a6d0:	2300      	movs	r3, #0
1000a6d2:	e7b8      	b.n	1000a646 <__aeabi_fmul+0x56>
1000a6d4:	2b03      	cmp	r3, #3
1000a6d6:	d100      	bne.n	1000a6da <__aeabi_fmul+0xea>
1000a6d8:	e0ad      	b.n	1000a836 <__aeabi_fmul+0x246>
1000a6da:	2b01      	cmp	r3, #1
1000a6dc:	d000      	beq.n	1000a6e0 <__aeabi_fmul+0xf0>
1000a6de:	e08c      	b.n	1000a7fa <__aeabi_fmul+0x20a>
1000a6e0:	465b      	mov	r3, fp
1000a6e2:	4654      	mov	r4, sl
1000a6e4:	401c      	ands	r4, r3
1000a6e6:	b2e4      	uxtb	r4, r4
1000a6e8:	2300      	movs	r3, #0
1000a6ea:	2500      	movs	r5, #0
1000a6ec:	e7c7      	b.n	1000a67e <__aeabi_fmul+0x8e>
1000a6ee:	230c      	movs	r3, #12
1000a6f0:	9301      	str	r3, [sp, #4]
1000a6f2:	3b09      	subs	r3, #9
1000a6f4:	469a      	mov	sl, r3
1000a6f6:	e794      	b.n	1000a622 <__aeabi_fmul+0x32>
1000a6f8:	1c28      	adds	r0, r5, #0
1000a6fa:	f7ff fb55 	bl	10009da8 <__clzsi2>
1000a6fe:	2676      	movs	r6, #118	; 0x76
1000a700:	1f43      	subs	r3, r0, #5
1000a702:	409d      	lsls	r5, r3
1000a704:	2300      	movs	r3, #0
1000a706:	4276      	negs	r6, r6
1000a708:	1a36      	subs	r6, r6, r0
1000a70a:	9301      	str	r3, [sp, #4]
1000a70c:	469a      	mov	sl, r3
1000a70e:	e788      	b.n	1000a622 <__aeabi_fmul+0x32>
1000a710:	2580      	movs	r5, #128	; 0x80
1000a712:	2400      	movs	r4, #0
1000a714:	03ed      	lsls	r5, r5, #15
1000a716:	23ff      	movs	r3, #255	; 0xff
1000a718:	e7b1      	b.n	1000a67e <__aeabi_fmul+0x8e>
1000a71a:	4645      	mov	r5, r8
1000a71c:	46cb      	mov	fp, r9
1000a71e:	469a      	mov	sl, r3
1000a720:	e7a5      	b.n	1000a66e <__aeabi_fmul+0x7e>
1000a722:	4645      	mov	r5, r8
1000a724:	4693      	mov	fp, r2
1000a726:	469a      	mov	sl, r3
1000a728:	e7a1      	b.n	1000a66e <__aeabi_fmul+0x7e>
1000a72a:	4643      	mov	r3, r8
1000a72c:	042c      	lsls	r4, r5, #16
1000a72e:	0c1b      	lsrs	r3, r3, #16
1000a730:	469c      	mov	ip, r3
1000a732:	0c23      	lsrs	r3, r4, #16
1000a734:	4644      	mov	r4, r8
1000a736:	0426      	lsls	r6, r4, #16
1000a738:	1c1c      	adds	r4, r3, #0
1000a73a:	0c36      	lsrs	r6, r6, #16
1000a73c:	0c2f      	lsrs	r7, r5, #16
1000a73e:	4374      	muls	r4, r6
1000a740:	1c35      	adds	r5, r6, #0
1000a742:	4666      	mov	r6, ip
1000a744:	437d      	muls	r5, r7
1000a746:	4373      	muls	r3, r6
1000a748:	4377      	muls	r7, r6
1000a74a:	18eb      	adds	r3, r5, r3
1000a74c:	0c26      	lsrs	r6, r4, #16
1000a74e:	199e      	adds	r6, r3, r6
1000a750:	42b5      	cmp	r5, r6
1000a752:	d903      	bls.n	1000a75c <__aeabi_fmul+0x16c>
1000a754:	2380      	movs	r3, #128	; 0x80
1000a756:	025b      	lsls	r3, r3, #9
1000a758:	469c      	mov	ip, r3
1000a75a:	4467      	add	r7, ip
1000a75c:	0424      	lsls	r4, r4, #16
1000a75e:	0433      	lsls	r3, r6, #16
1000a760:	0c24      	lsrs	r4, r4, #16
1000a762:	191b      	adds	r3, r3, r4
1000a764:	019d      	lsls	r5, r3, #6
1000a766:	1e6c      	subs	r4, r5, #1
1000a768:	41a5      	sbcs	r5, r4
1000a76a:	0e9b      	lsrs	r3, r3, #26
1000a76c:	0c36      	lsrs	r6, r6, #16
1000a76e:	432b      	orrs	r3, r5
1000a770:	19bd      	adds	r5, r7, r6
1000a772:	01ad      	lsls	r5, r5, #6
1000a774:	431d      	orrs	r5, r3
1000a776:	012b      	lsls	r3, r5, #4
1000a778:	d504      	bpl.n	1000a784 <__aeabi_fmul+0x194>
1000a77a:	2301      	movs	r3, #1
1000a77c:	0868      	lsrs	r0, r5, #1
1000a77e:	401d      	ands	r5, r3
1000a780:	4305      	orrs	r5, r0
1000a782:	1c08      	adds	r0, r1, #0
1000a784:	1c03      	adds	r3, r0, #0
1000a786:	337f      	adds	r3, #127	; 0x7f
1000a788:	2b00      	cmp	r3, #0
1000a78a:	dd2c      	ble.n	1000a7e6 <__aeabi_fmul+0x1f6>
1000a78c:	0769      	lsls	r1, r5, #29
1000a78e:	d004      	beq.n	1000a79a <__aeabi_fmul+0x1aa>
1000a790:	210f      	movs	r1, #15
1000a792:	4029      	ands	r1, r5
1000a794:	2904      	cmp	r1, #4
1000a796:	d000      	beq.n	1000a79a <__aeabi_fmul+0x1aa>
1000a798:	3504      	adds	r5, #4
1000a79a:	0129      	lsls	r1, r5, #4
1000a79c:	d503      	bpl.n	1000a7a6 <__aeabi_fmul+0x1b6>
1000a79e:	4b2c      	ldr	r3, [pc, #176]	; (1000a850 <__aeabi_fmul+0x260>)
1000a7a0:	401d      	ands	r5, r3
1000a7a2:	1c03      	adds	r3, r0, #0
1000a7a4:	3380      	adds	r3, #128	; 0x80
1000a7a6:	2bfe      	cmp	r3, #254	; 0xfe
1000a7a8:	dd17      	ble.n	1000a7da <__aeabi_fmul+0x1ea>
1000a7aa:	2401      	movs	r4, #1
1000a7ac:	23ff      	movs	r3, #255	; 0xff
1000a7ae:	4014      	ands	r4, r2
1000a7b0:	2500      	movs	r5, #0
1000a7b2:	e764      	b.n	1000a67e <__aeabi_fmul+0x8e>
1000a7b4:	2080      	movs	r0, #128	; 0x80
1000a7b6:	03c0      	lsls	r0, r0, #15
1000a7b8:	4205      	tst	r5, r0
1000a7ba:	d009      	beq.n	1000a7d0 <__aeabi_fmul+0x1e0>
1000a7bc:	4643      	mov	r3, r8
1000a7be:	4203      	tst	r3, r0
1000a7c0:	d106      	bne.n	1000a7d0 <__aeabi_fmul+0x1e0>
1000a7c2:	4645      	mov	r5, r8
1000a7c4:	4305      	orrs	r5, r0
1000a7c6:	026d      	lsls	r5, r5, #9
1000a7c8:	0a6d      	lsrs	r5, r5, #9
1000a7ca:	464c      	mov	r4, r9
1000a7cc:	23ff      	movs	r3, #255	; 0xff
1000a7ce:	e756      	b.n	1000a67e <__aeabi_fmul+0x8e>
1000a7d0:	4305      	orrs	r5, r0
1000a7d2:	026d      	lsls	r5, r5, #9
1000a7d4:	0a6d      	lsrs	r5, r5, #9
1000a7d6:	23ff      	movs	r3, #255	; 0xff
1000a7d8:	e751      	b.n	1000a67e <__aeabi_fmul+0x8e>
1000a7da:	2401      	movs	r4, #1
1000a7dc:	01ad      	lsls	r5, r5, #6
1000a7de:	0a6d      	lsrs	r5, r5, #9
1000a7e0:	b2db      	uxtb	r3, r3
1000a7e2:	4014      	ands	r4, r2
1000a7e4:	e74b      	b.n	1000a67e <__aeabi_fmul+0x8e>
1000a7e6:	237e      	movs	r3, #126	; 0x7e
1000a7e8:	425b      	negs	r3, r3
1000a7ea:	1a1b      	subs	r3, r3, r0
1000a7ec:	2b1b      	cmp	r3, #27
1000a7ee:	dd07      	ble.n	1000a800 <__aeabi_fmul+0x210>
1000a7f0:	2401      	movs	r4, #1
1000a7f2:	2300      	movs	r3, #0
1000a7f4:	4014      	ands	r4, r2
1000a7f6:	2500      	movs	r5, #0
1000a7f8:	e741      	b.n	1000a67e <__aeabi_fmul+0x8e>
1000a7fa:	1c08      	adds	r0, r1, #0
1000a7fc:	465a      	mov	r2, fp
1000a7fe:	e7c1      	b.n	1000a784 <__aeabi_fmul+0x194>
1000a800:	309e      	adds	r0, #158	; 0x9e
1000a802:	1c29      	adds	r1, r5, #0
1000a804:	4085      	lsls	r5, r0
1000a806:	40d9      	lsrs	r1, r3
1000a808:	1e68      	subs	r0, r5, #1
1000a80a:	4185      	sbcs	r5, r0
1000a80c:	430d      	orrs	r5, r1
1000a80e:	076b      	lsls	r3, r5, #29
1000a810:	d004      	beq.n	1000a81c <__aeabi_fmul+0x22c>
1000a812:	230f      	movs	r3, #15
1000a814:	402b      	ands	r3, r5
1000a816:	2b04      	cmp	r3, #4
1000a818:	d000      	beq.n	1000a81c <__aeabi_fmul+0x22c>
1000a81a:	3504      	adds	r5, #4
1000a81c:	016b      	lsls	r3, r5, #5
1000a81e:	d504      	bpl.n	1000a82a <__aeabi_fmul+0x23a>
1000a820:	2401      	movs	r4, #1
1000a822:	2301      	movs	r3, #1
1000a824:	4014      	ands	r4, r2
1000a826:	2500      	movs	r5, #0
1000a828:	e729      	b.n	1000a67e <__aeabi_fmul+0x8e>
1000a82a:	2401      	movs	r4, #1
1000a82c:	01ad      	lsls	r5, r5, #6
1000a82e:	0a6d      	lsrs	r5, r5, #9
1000a830:	4014      	ands	r4, r2
1000a832:	2300      	movs	r3, #0
1000a834:	e723      	b.n	1000a67e <__aeabi_fmul+0x8e>
1000a836:	2380      	movs	r3, #128	; 0x80
1000a838:	03db      	lsls	r3, r3, #15
1000a83a:	431d      	orrs	r5, r3
1000a83c:	2401      	movs	r4, #1
1000a83e:	465b      	mov	r3, fp
1000a840:	026d      	lsls	r5, r5, #9
1000a842:	4023      	ands	r3, r4
1000a844:	1c1c      	adds	r4, r3, #0
1000a846:	0a6d      	lsrs	r5, r5, #9
1000a848:	23ff      	movs	r3, #255	; 0xff
1000a84a:	e718      	b.n	1000a67e <__aeabi_fmul+0x8e>
1000a84c:	1000d408 	.word	0x1000d408
1000a850:	f7ffffff 	.word	0xf7ffffff

1000a854 <__aeabi_fsub>:
1000a854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a856:	004a      	lsls	r2, r1, #1
1000a858:	0243      	lsls	r3, r0, #9
1000a85a:	0044      	lsls	r4, r0, #1
1000a85c:	024d      	lsls	r5, r1, #9
1000a85e:	0fc0      	lsrs	r0, r0, #31
1000a860:	0e24      	lsrs	r4, r4, #24
1000a862:	1c06      	adds	r6, r0, #0
1000a864:	099b      	lsrs	r3, r3, #6
1000a866:	0e12      	lsrs	r2, r2, #24
1000a868:	0fc9      	lsrs	r1, r1, #31
1000a86a:	09ad      	lsrs	r5, r5, #6
1000a86c:	2aff      	cmp	r2, #255	; 0xff
1000a86e:	d100      	bne.n	1000a872 <__aeabi_fsub+0x1e>
1000a870:	e075      	b.n	1000a95e <__aeabi_fsub+0x10a>
1000a872:	2701      	movs	r7, #1
1000a874:	4079      	eors	r1, r7
1000a876:	4288      	cmp	r0, r1
1000a878:	d050      	beq.n	1000a91c <__aeabi_fsub+0xc8>
1000a87a:	1aa0      	subs	r0, r4, r2
1000a87c:	2800      	cmp	r0, #0
1000a87e:	dc00      	bgt.n	1000a882 <__aeabi_fsub+0x2e>
1000a880:	e08f      	b.n	1000a9a2 <__aeabi_fsub+0x14e>
1000a882:	2a00      	cmp	r2, #0
1000a884:	d11e      	bne.n	1000a8c4 <__aeabi_fsub+0x70>
1000a886:	2d00      	cmp	r5, #0
1000a888:	d000      	beq.n	1000a88c <__aeabi_fsub+0x38>
1000a88a:	e075      	b.n	1000a978 <__aeabi_fsub+0x124>
1000a88c:	075a      	lsls	r2, r3, #29
1000a88e:	d004      	beq.n	1000a89a <__aeabi_fsub+0x46>
1000a890:	220f      	movs	r2, #15
1000a892:	401a      	ands	r2, r3
1000a894:	2a04      	cmp	r2, #4
1000a896:	d000      	beq.n	1000a89a <__aeabi_fsub+0x46>
1000a898:	3304      	adds	r3, #4
1000a89a:	2280      	movs	r2, #128	; 0x80
1000a89c:	2001      	movs	r0, #1
1000a89e:	04d2      	lsls	r2, r2, #19
1000a8a0:	401a      	ands	r2, r3
1000a8a2:	4030      	ands	r0, r6
1000a8a4:	2a00      	cmp	r2, #0
1000a8a6:	d032      	beq.n	1000a90e <__aeabi_fsub+0xba>
1000a8a8:	3401      	adds	r4, #1
1000a8aa:	2cff      	cmp	r4, #255	; 0xff
1000a8ac:	d100      	bne.n	1000a8b0 <__aeabi_fsub+0x5c>
1000a8ae:	e084      	b.n	1000a9ba <__aeabi_fsub+0x166>
1000a8b0:	019b      	lsls	r3, r3, #6
1000a8b2:	0a5b      	lsrs	r3, r3, #9
1000a8b4:	b2e4      	uxtb	r4, r4
1000a8b6:	025b      	lsls	r3, r3, #9
1000a8b8:	05e4      	lsls	r4, r4, #23
1000a8ba:	0a5b      	lsrs	r3, r3, #9
1000a8bc:	4323      	orrs	r3, r4
1000a8be:	07c0      	lsls	r0, r0, #31
1000a8c0:	4318      	orrs	r0, r3
1000a8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a8c4:	2cff      	cmp	r4, #255	; 0xff
1000a8c6:	d0e1      	beq.n	1000a88c <__aeabi_fsub+0x38>
1000a8c8:	2280      	movs	r2, #128	; 0x80
1000a8ca:	04d2      	lsls	r2, r2, #19
1000a8cc:	4315      	orrs	r5, r2
1000a8ce:	281b      	cmp	r0, #27
1000a8d0:	dd7a      	ble.n	1000a9c8 <__aeabi_fsub+0x174>
1000a8d2:	2501      	movs	r5, #1
1000a8d4:	1b5b      	subs	r3, r3, r5
1000a8d6:	015a      	lsls	r2, r3, #5
1000a8d8:	d55d      	bpl.n	1000a996 <__aeabi_fsub+0x142>
1000a8da:	019b      	lsls	r3, r3, #6
1000a8dc:	099f      	lsrs	r7, r3, #6
1000a8de:	1c38      	adds	r0, r7, #0
1000a8e0:	f7ff fa62 	bl	10009da8 <__clzsi2>
1000a8e4:	3805      	subs	r0, #5
1000a8e6:	4087      	lsls	r7, r0
1000a8e8:	4284      	cmp	r4, r0
1000a8ea:	dc69      	bgt.n	1000a9c0 <__aeabi_fsub+0x16c>
1000a8ec:	1b00      	subs	r0, r0, r4
1000a8ee:	241f      	movs	r4, #31
1000a8f0:	1c3a      	adds	r2, r7, #0
1000a8f2:	1c43      	adds	r3, r0, #1
1000a8f4:	1a20      	subs	r0, r4, r0
1000a8f6:	40da      	lsrs	r2, r3
1000a8f8:	4087      	lsls	r7, r0
1000a8fa:	1c13      	adds	r3, r2, #0
1000a8fc:	1e7c      	subs	r4, r7, #1
1000a8fe:	41a7      	sbcs	r7, r4
1000a900:	2400      	movs	r4, #0
1000a902:	433b      	orrs	r3, r7
1000a904:	e7c2      	b.n	1000a88c <__aeabi_fsub+0x38>
1000a906:	1e13      	subs	r3, r2, #0
1000a908:	d145      	bne.n	1000a996 <__aeabi_fsub+0x142>
1000a90a:	2300      	movs	r3, #0
1000a90c:	2000      	movs	r0, #0
1000a90e:	08db      	lsrs	r3, r3, #3
1000a910:	2cff      	cmp	r4, #255	; 0xff
1000a912:	d028      	beq.n	1000a966 <__aeabi_fsub+0x112>
1000a914:	025b      	lsls	r3, r3, #9
1000a916:	0a5b      	lsrs	r3, r3, #9
1000a918:	b2e4      	uxtb	r4, r4
1000a91a:	e7cc      	b.n	1000a8b6 <__aeabi_fsub+0x62>
1000a91c:	1aa1      	subs	r1, r4, r2
1000a91e:	2900      	cmp	r1, #0
1000a920:	dd5b      	ble.n	1000a9da <__aeabi_fsub+0x186>
1000a922:	2a00      	cmp	r2, #0
1000a924:	d02e      	beq.n	1000a984 <__aeabi_fsub+0x130>
1000a926:	2cff      	cmp	r4, #255	; 0xff
1000a928:	d0b0      	beq.n	1000a88c <__aeabi_fsub+0x38>
1000a92a:	2280      	movs	r2, #128	; 0x80
1000a92c:	04d2      	lsls	r2, r2, #19
1000a92e:	4315      	orrs	r5, r2
1000a930:	291b      	cmp	r1, #27
1000a932:	dc74      	bgt.n	1000aa1e <__aeabi_fsub+0x1ca>
1000a934:	1c2f      	adds	r7, r5, #0
1000a936:	2220      	movs	r2, #32
1000a938:	40cf      	lsrs	r7, r1
1000a93a:	1a51      	subs	r1, r2, r1
1000a93c:	408d      	lsls	r5, r1
1000a93e:	1e69      	subs	r1, r5, #1
1000a940:	418d      	sbcs	r5, r1
1000a942:	433d      	orrs	r5, r7
1000a944:	195b      	adds	r3, r3, r5
1000a946:	015a      	lsls	r2, r3, #5
1000a948:	d525      	bpl.n	1000a996 <__aeabi_fsub+0x142>
1000a94a:	3401      	adds	r4, #1
1000a94c:	2cff      	cmp	r4, #255	; 0xff
1000a94e:	d074      	beq.n	1000aa3a <__aeabi_fsub+0x1e6>
1000a950:	2101      	movs	r1, #1
1000a952:	4a7e      	ldr	r2, [pc, #504]	; (1000ab4c <__aeabi_fsub+0x2f8>)
1000a954:	4019      	ands	r1, r3
1000a956:	4013      	ands	r3, r2
1000a958:	085b      	lsrs	r3, r3, #1
1000a95a:	430b      	orrs	r3, r1
1000a95c:	e796      	b.n	1000a88c <__aeabi_fsub+0x38>
1000a95e:	2d00      	cmp	r5, #0
1000a960:	d000      	beq.n	1000a964 <__aeabi_fsub+0x110>
1000a962:	e788      	b.n	1000a876 <__aeabi_fsub+0x22>
1000a964:	e785      	b.n	1000a872 <__aeabi_fsub+0x1e>
1000a966:	2b00      	cmp	r3, #0
1000a968:	d027      	beq.n	1000a9ba <__aeabi_fsub+0x166>
1000a96a:	2280      	movs	r2, #128	; 0x80
1000a96c:	03d2      	lsls	r2, r2, #15
1000a96e:	4313      	orrs	r3, r2
1000a970:	025b      	lsls	r3, r3, #9
1000a972:	0a5b      	lsrs	r3, r3, #9
1000a974:	24ff      	movs	r4, #255	; 0xff
1000a976:	e79e      	b.n	1000a8b6 <__aeabi_fsub+0x62>
1000a978:	3801      	subs	r0, #1
1000a97a:	2800      	cmp	r0, #0
1000a97c:	d0aa      	beq.n	1000a8d4 <__aeabi_fsub+0x80>
1000a97e:	2cff      	cmp	r4, #255	; 0xff
1000a980:	d1a5      	bne.n	1000a8ce <__aeabi_fsub+0x7a>
1000a982:	e783      	b.n	1000a88c <__aeabi_fsub+0x38>
1000a984:	2d00      	cmp	r5, #0
1000a986:	d100      	bne.n	1000a98a <__aeabi_fsub+0x136>
1000a988:	e780      	b.n	1000a88c <__aeabi_fsub+0x38>
1000a98a:	3901      	subs	r1, #1
1000a98c:	2900      	cmp	r1, #0
1000a98e:	d0d9      	beq.n	1000a944 <__aeabi_fsub+0xf0>
1000a990:	2cff      	cmp	r4, #255	; 0xff
1000a992:	d1cd      	bne.n	1000a930 <__aeabi_fsub+0xdc>
1000a994:	e77a      	b.n	1000a88c <__aeabi_fsub+0x38>
1000a996:	075a      	lsls	r2, r3, #29
1000a998:	d000      	beq.n	1000a99c <__aeabi_fsub+0x148>
1000a99a:	e779      	b.n	1000a890 <__aeabi_fsub+0x3c>
1000a99c:	2001      	movs	r0, #1
1000a99e:	4030      	ands	r0, r6
1000a9a0:	e7b5      	b.n	1000a90e <__aeabi_fsub+0xba>
1000a9a2:	2800      	cmp	r0, #0
1000a9a4:	d125      	bne.n	1000a9f2 <__aeabi_fsub+0x19e>
1000a9a6:	1c62      	adds	r2, r4, #1
1000a9a8:	b2d2      	uxtb	r2, r2
1000a9aa:	2a01      	cmp	r2, #1
1000a9ac:	dd55      	ble.n	1000aa5a <__aeabi_fsub+0x206>
1000a9ae:	1b5f      	subs	r7, r3, r5
1000a9b0:	017a      	lsls	r2, r7, #5
1000a9b2:	d52d      	bpl.n	1000aa10 <__aeabi_fsub+0x1bc>
1000a9b4:	1aef      	subs	r7, r5, r3
1000a9b6:	1c0e      	adds	r6, r1, #0
1000a9b8:	e791      	b.n	1000a8de <__aeabi_fsub+0x8a>
1000a9ba:	24ff      	movs	r4, #255	; 0xff
1000a9bc:	2300      	movs	r3, #0
1000a9be:	e77a      	b.n	1000a8b6 <__aeabi_fsub+0x62>
1000a9c0:	4b62      	ldr	r3, [pc, #392]	; (1000ab4c <__aeabi_fsub+0x2f8>)
1000a9c2:	1a24      	subs	r4, r4, r0
1000a9c4:	403b      	ands	r3, r7
1000a9c6:	e761      	b.n	1000a88c <__aeabi_fsub+0x38>
1000a9c8:	1c29      	adds	r1, r5, #0
1000a9ca:	2220      	movs	r2, #32
1000a9cc:	40c1      	lsrs	r1, r0
1000a9ce:	1a10      	subs	r0, r2, r0
1000a9d0:	4085      	lsls	r5, r0
1000a9d2:	1e68      	subs	r0, r5, #1
1000a9d4:	4185      	sbcs	r5, r0
1000a9d6:	430d      	orrs	r5, r1
1000a9d8:	e77c      	b.n	1000a8d4 <__aeabi_fsub+0x80>
1000a9da:	2900      	cmp	r1, #0
1000a9dc:	d146      	bne.n	1000aa6c <__aeabi_fsub+0x218>
1000a9de:	1c62      	adds	r2, r4, #1
1000a9e0:	b2d1      	uxtb	r1, r2
1000a9e2:	2901      	cmp	r1, #1
1000a9e4:	dd2b      	ble.n	1000aa3e <__aeabi_fsub+0x1ea>
1000a9e6:	2aff      	cmp	r2, #255	; 0xff
1000a9e8:	d026      	beq.n	1000aa38 <__aeabi_fsub+0x1e4>
1000a9ea:	18eb      	adds	r3, r5, r3
1000a9ec:	085b      	lsrs	r3, r3, #1
1000a9ee:	1c14      	adds	r4, r2, #0
1000a9f0:	e74c      	b.n	1000a88c <__aeabi_fsub+0x38>
1000a9f2:	2c00      	cmp	r4, #0
1000a9f4:	d015      	beq.n	1000aa22 <__aeabi_fsub+0x1ce>
1000a9f6:	2aff      	cmp	r2, #255	; 0xff
1000a9f8:	d01a      	beq.n	1000aa30 <__aeabi_fsub+0x1dc>
1000a9fa:	2480      	movs	r4, #128	; 0x80
1000a9fc:	04e4      	lsls	r4, r4, #19
1000a9fe:	4240      	negs	r0, r0
1000aa00:	4323      	orrs	r3, r4
1000aa02:	281b      	cmp	r0, #27
1000aa04:	dd4d      	ble.n	1000aaa2 <__aeabi_fsub+0x24e>
1000aa06:	2301      	movs	r3, #1
1000aa08:	1aeb      	subs	r3, r5, r3
1000aa0a:	1c14      	adds	r4, r2, #0
1000aa0c:	1c0e      	adds	r6, r1, #0
1000aa0e:	e762      	b.n	1000a8d6 <__aeabi_fsub+0x82>
1000aa10:	2f00      	cmp	r7, #0
1000aa12:	d000      	beq.n	1000aa16 <__aeabi_fsub+0x1c2>
1000aa14:	e763      	b.n	1000a8de <__aeabi_fsub+0x8a>
1000aa16:	2300      	movs	r3, #0
1000aa18:	2000      	movs	r0, #0
1000aa1a:	2400      	movs	r4, #0
1000aa1c:	e777      	b.n	1000a90e <__aeabi_fsub+0xba>
1000aa1e:	2501      	movs	r5, #1
1000aa20:	e790      	b.n	1000a944 <__aeabi_fsub+0xf0>
1000aa22:	2b00      	cmp	r3, #0
1000aa24:	d039      	beq.n	1000aa9a <__aeabi_fsub+0x246>
1000aa26:	43c0      	mvns	r0, r0
1000aa28:	2800      	cmp	r0, #0
1000aa2a:	d0ed      	beq.n	1000aa08 <__aeabi_fsub+0x1b4>
1000aa2c:	2aff      	cmp	r2, #255	; 0xff
1000aa2e:	d1e8      	bne.n	1000aa02 <__aeabi_fsub+0x1ae>
1000aa30:	1c2b      	adds	r3, r5, #0
1000aa32:	24ff      	movs	r4, #255	; 0xff
1000aa34:	1c0e      	adds	r6, r1, #0
1000aa36:	e729      	b.n	1000a88c <__aeabi_fsub+0x38>
1000aa38:	24ff      	movs	r4, #255	; 0xff
1000aa3a:	2300      	movs	r3, #0
1000aa3c:	e767      	b.n	1000a90e <__aeabi_fsub+0xba>
1000aa3e:	2c00      	cmp	r4, #0
1000aa40:	d15a      	bne.n	1000aaf8 <__aeabi_fsub+0x2a4>
1000aa42:	2b00      	cmp	r3, #0
1000aa44:	d07f      	beq.n	1000ab46 <__aeabi_fsub+0x2f2>
1000aa46:	2d00      	cmp	r5, #0
1000aa48:	d100      	bne.n	1000aa4c <__aeabi_fsub+0x1f8>
1000aa4a:	e71f      	b.n	1000a88c <__aeabi_fsub+0x38>
1000aa4c:	195b      	adds	r3, r3, r5
1000aa4e:	015a      	lsls	r2, r3, #5
1000aa50:	d5a1      	bpl.n	1000a996 <__aeabi_fsub+0x142>
1000aa52:	4a3e      	ldr	r2, [pc, #248]	; (1000ab4c <__aeabi_fsub+0x2f8>)
1000aa54:	3401      	adds	r4, #1
1000aa56:	4013      	ands	r3, r2
1000aa58:	e718      	b.n	1000a88c <__aeabi_fsub+0x38>
1000aa5a:	2c00      	cmp	r4, #0
1000aa5c:	d115      	bne.n	1000aa8a <__aeabi_fsub+0x236>
1000aa5e:	2b00      	cmp	r3, #0
1000aa60:	d12f      	bne.n	1000aac2 <__aeabi_fsub+0x26e>
1000aa62:	2d00      	cmp	r5, #0
1000aa64:	d05e      	beq.n	1000ab24 <__aeabi_fsub+0x2d0>
1000aa66:	1c2b      	adds	r3, r5, #0
1000aa68:	1c0e      	adds	r6, r1, #0
1000aa6a:	e70f      	b.n	1000a88c <__aeabi_fsub+0x38>
1000aa6c:	2c00      	cmp	r4, #0
1000aa6e:	d121      	bne.n	1000aab4 <__aeabi_fsub+0x260>
1000aa70:	2b00      	cmp	r3, #0
1000aa72:	d054      	beq.n	1000ab1e <__aeabi_fsub+0x2ca>
1000aa74:	43c9      	mvns	r1, r1
1000aa76:	2900      	cmp	r1, #0
1000aa78:	d004      	beq.n	1000aa84 <__aeabi_fsub+0x230>
1000aa7a:	2aff      	cmp	r2, #255	; 0xff
1000aa7c:	d04c      	beq.n	1000ab18 <__aeabi_fsub+0x2c4>
1000aa7e:	291b      	cmp	r1, #27
1000aa80:	dd58      	ble.n	1000ab34 <__aeabi_fsub+0x2e0>
1000aa82:	2301      	movs	r3, #1
1000aa84:	195b      	adds	r3, r3, r5
1000aa86:	1c14      	adds	r4, r2, #0
1000aa88:	e75d      	b.n	1000a946 <__aeabi_fsub+0xf2>
1000aa8a:	2b00      	cmp	r3, #0
1000aa8c:	d123      	bne.n	1000aad6 <__aeabi_fsub+0x282>
1000aa8e:	2d00      	cmp	r5, #0
1000aa90:	d04b      	beq.n	1000ab2a <__aeabi_fsub+0x2d6>
1000aa92:	1c2b      	adds	r3, r5, #0
1000aa94:	1c0e      	adds	r6, r1, #0
1000aa96:	24ff      	movs	r4, #255	; 0xff
1000aa98:	e6f8      	b.n	1000a88c <__aeabi_fsub+0x38>
1000aa9a:	1c2b      	adds	r3, r5, #0
1000aa9c:	1c14      	adds	r4, r2, #0
1000aa9e:	1c0e      	adds	r6, r1, #0
1000aaa0:	e6f4      	b.n	1000a88c <__aeabi_fsub+0x38>
1000aaa2:	1c1e      	adds	r6, r3, #0
1000aaa4:	2420      	movs	r4, #32
1000aaa6:	40c6      	lsrs	r6, r0
1000aaa8:	1a20      	subs	r0, r4, r0
1000aaaa:	4083      	lsls	r3, r0
1000aaac:	1e58      	subs	r0, r3, #1
1000aaae:	4183      	sbcs	r3, r0
1000aab0:	4333      	orrs	r3, r6
1000aab2:	e7a9      	b.n	1000aa08 <__aeabi_fsub+0x1b4>
1000aab4:	2aff      	cmp	r2, #255	; 0xff
1000aab6:	d02f      	beq.n	1000ab18 <__aeabi_fsub+0x2c4>
1000aab8:	2480      	movs	r4, #128	; 0x80
1000aaba:	04e4      	lsls	r4, r4, #19
1000aabc:	4249      	negs	r1, r1
1000aabe:	4323      	orrs	r3, r4
1000aac0:	e7dd      	b.n	1000aa7e <__aeabi_fsub+0x22a>
1000aac2:	2d00      	cmp	r5, #0
1000aac4:	d100      	bne.n	1000aac8 <__aeabi_fsub+0x274>
1000aac6:	e6e1      	b.n	1000a88c <__aeabi_fsub+0x38>
1000aac8:	1b5a      	subs	r2, r3, r5
1000aaca:	0150      	lsls	r0, r2, #5
1000aacc:	d400      	bmi.n	1000aad0 <__aeabi_fsub+0x27c>
1000aace:	e71a      	b.n	1000a906 <__aeabi_fsub+0xb2>
1000aad0:	1aeb      	subs	r3, r5, r3
1000aad2:	1c0e      	adds	r6, r1, #0
1000aad4:	e6da      	b.n	1000a88c <__aeabi_fsub+0x38>
1000aad6:	24ff      	movs	r4, #255	; 0xff
1000aad8:	2d00      	cmp	r5, #0
1000aada:	d100      	bne.n	1000aade <__aeabi_fsub+0x28a>
1000aadc:	e6d6      	b.n	1000a88c <__aeabi_fsub+0x38>
1000aade:	2280      	movs	r2, #128	; 0x80
1000aae0:	08db      	lsrs	r3, r3, #3
1000aae2:	03d2      	lsls	r2, r2, #15
1000aae4:	4213      	tst	r3, r2
1000aae6:	d004      	beq.n	1000aaf2 <__aeabi_fsub+0x29e>
1000aae8:	08ed      	lsrs	r5, r5, #3
1000aaea:	4215      	tst	r5, r2
1000aaec:	d101      	bne.n	1000aaf2 <__aeabi_fsub+0x29e>
1000aaee:	1c2b      	adds	r3, r5, #0
1000aaf0:	1c0e      	adds	r6, r1, #0
1000aaf2:	00db      	lsls	r3, r3, #3
1000aaf4:	24ff      	movs	r4, #255	; 0xff
1000aaf6:	e6c9      	b.n	1000a88c <__aeabi_fsub+0x38>
1000aaf8:	2b00      	cmp	r3, #0
1000aafa:	d00d      	beq.n	1000ab18 <__aeabi_fsub+0x2c4>
1000aafc:	24ff      	movs	r4, #255	; 0xff
1000aafe:	2d00      	cmp	r5, #0
1000ab00:	d100      	bne.n	1000ab04 <__aeabi_fsub+0x2b0>
1000ab02:	e6c3      	b.n	1000a88c <__aeabi_fsub+0x38>
1000ab04:	2280      	movs	r2, #128	; 0x80
1000ab06:	08db      	lsrs	r3, r3, #3
1000ab08:	03d2      	lsls	r2, r2, #15
1000ab0a:	4213      	tst	r3, r2
1000ab0c:	d0f1      	beq.n	1000aaf2 <__aeabi_fsub+0x29e>
1000ab0e:	08ed      	lsrs	r5, r5, #3
1000ab10:	4215      	tst	r5, r2
1000ab12:	d1ee      	bne.n	1000aaf2 <__aeabi_fsub+0x29e>
1000ab14:	1c2b      	adds	r3, r5, #0
1000ab16:	e7ec      	b.n	1000aaf2 <__aeabi_fsub+0x29e>
1000ab18:	1c2b      	adds	r3, r5, #0
1000ab1a:	24ff      	movs	r4, #255	; 0xff
1000ab1c:	e6b6      	b.n	1000a88c <__aeabi_fsub+0x38>
1000ab1e:	1c2b      	adds	r3, r5, #0
1000ab20:	1c14      	adds	r4, r2, #0
1000ab22:	e6b3      	b.n	1000a88c <__aeabi_fsub+0x38>
1000ab24:	1c23      	adds	r3, r4, #0
1000ab26:	2000      	movs	r0, #0
1000ab28:	e6f1      	b.n	1000a90e <__aeabi_fsub+0xba>
1000ab2a:	2380      	movs	r3, #128	; 0x80
1000ab2c:	2000      	movs	r0, #0
1000ab2e:	049b      	lsls	r3, r3, #18
1000ab30:	24ff      	movs	r4, #255	; 0xff
1000ab32:	e6ec      	b.n	1000a90e <__aeabi_fsub+0xba>
1000ab34:	1c1f      	adds	r7, r3, #0
1000ab36:	2420      	movs	r4, #32
1000ab38:	40cf      	lsrs	r7, r1
1000ab3a:	1a61      	subs	r1, r4, r1
1000ab3c:	408b      	lsls	r3, r1
1000ab3e:	1e59      	subs	r1, r3, #1
1000ab40:	418b      	sbcs	r3, r1
1000ab42:	433b      	orrs	r3, r7
1000ab44:	e79e      	b.n	1000aa84 <__aeabi_fsub+0x230>
1000ab46:	1c2b      	adds	r3, r5, #0
1000ab48:	e6a0      	b.n	1000a88c <__aeabi_fsub+0x38>
1000ab4a:	46c0      	nop			; (mov r8, r8)
1000ab4c:	fbffffff 	.word	0xfbffffff

1000ab50 <__aeabi_f2iz>:
1000ab50:	0242      	lsls	r2, r0, #9
1000ab52:	0a51      	lsrs	r1, r2, #9
1000ab54:	0042      	lsls	r2, r0, #1
1000ab56:	0fc3      	lsrs	r3, r0, #31
1000ab58:	0e12      	lsrs	r2, r2, #24
1000ab5a:	2000      	movs	r0, #0
1000ab5c:	2a7e      	cmp	r2, #126	; 0x7e
1000ab5e:	dd0d      	ble.n	1000ab7c <__aeabi_f2iz+0x2c>
1000ab60:	2a9d      	cmp	r2, #157	; 0x9d
1000ab62:	dc0c      	bgt.n	1000ab7e <__aeabi_f2iz+0x2e>
1000ab64:	2080      	movs	r0, #128	; 0x80
1000ab66:	0400      	lsls	r0, r0, #16
1000ab68:	4301      	orrs	r1, r0
1000ab6a:	2a95      	cmp	r2, #149	; 0x95
1000ab6c:	dc0a      	bgt.n	1000ab84 <__aeabi_f2iz+0x34>
1000ab6e:	2096      	movs	r0, #150	; 0x96
1000ab70:	1a82      	subs	r2, r0, r2
1000ab72:	40d1      	lsrs	r1, r2
1000ab74:	1c0a      	adds	r2, r1, #0
1000ab76:	4258      	negs	r0, r3
1000ab78:	4042      	eors	r2, r0
1000ab7a:	18d0      	adds	r0, r2, r3
1000ab7c:	4770      	bx	lr
1000ab7e:	4a03      	ldr	r2, [pc, #12]	; (1000ab8c <__aeabi_f2iz+0x3c>)
1000ab80:	1898      	adds	r0, r3, r2
1000ab82:	e7fb      	b.n	1000ab7c <__aeabi_f2iz+0x2c>
1000ab84:	3a96      	subs	r2, #150	; 0x96
1000ab86:	4091      	lsls	r1, r2
1000ab88:	1c0a      	adds	r2, r1, #0
1000ab8a:	e7f4      	b.n	1000ab76 <__aeabi_f2iz+0x26>
1000ab8c:	7fffffff 	.word	0x7fffffff

1000ab90 <__aeabi_i2f>:
1000ab90:	b570      	push	{r4, r5, r6, lr}
1000ab92:	1e04      	subs	r4, r0, #0
1000ab94:	d039      	beq.n	1000ac0a <__aeabi_i2f+0x7a>
1000ab96:	0fc5      	lsrs	r5, r0, #31
1000ab98:	d000      	beq.n	1000ab9c <__aeabi_i2f+0xc>
1000ab9a:	4244      	negs	r4, r0
1000ab9c:	1c20      	adds	r0, r4, #0
1000ab9e:	f7ff f903 	bl	10009da8 <__clzsi2>
1000aba2:	239e      	movs	r3, #158	; 0x9e
1000aba4:	1c26      	adds	r6, r4, #0
1000aba6:	1a1b      	subs	r3, r3, r0
1000aba8:	2b96      	cmp	r3, #150	; 0x96
1000abaa:	dc07      	bgt.n	1000abbc <__aeabi_i2f+0x2c>
1000abac:	2808      	cmp	r0, #8
1000abae:	dd01      	ble.n	1000abb4 <__aeabi_i2f+0x24>
1000abb0:	3808      	subs	r0, #8
1000abb2:	4084      	lsls	r4, r0
1000abb4:	0264      	lsls	r4, r4, #9
1000abb6:	0a64      	lsrs	r4, r4, #9
1000abb8:	b2d8      	uxtb	r0, r3
1000abba:	e01e      	b.n	1000abfa <__aeabi_i2f+0x6a>
1000abbc:	2b99      	cmp	r3, #153	; 0x99
1000abbe:	dd0a      	ble.n	1000abd6 <__aeabi_i2f+0x46>
1000abc0:	2205      	movs	r2, #5
1000abc2:	1c21      	adds	r1, r4, #0
1000abc4:	1a12      	subs	r2, r2, r0
1000abc6:	40d1      	lsrs	r1, r2
1000abc8:	1c0a      	adds	r2, r1, #0
1000abca:	1c01      	adds	r1, r0, #0
1000abcc:	311b      	adds	r1, #27
1000abce:	408e      	lsls	r6, r1
1000abd0:	1e71      	subs	r1, r6, #1
1000abd2:	418e      	sbcs	r6, r1
1000abd4:	4316      	orrs	r6, r2
1000abd6:	2805      	cmp	r0, #5
1000abd8:	dd01      	ble.n	1000abde <__aeabi_i2f+0x4e>
1000abda:	1f42      	subs	r2, r0, #5
1000abdc:	4096      	lsls	r6, r2
1000abde:	4c0f      	ldr	r4, [pc, #60]	; (1000ac1c <__aeabi_i2f+0x8c>)
1000abe0:	4034      	ands	r4, r6
1000abe2:	0772      	lsls	r2, r6, #29
1000abe4:	d004      	beq.n	1000abf0 <__aeabi_i2f+0x60>
1000abe6:	220f      	movs	r2, #15
1000abe8:	4016      	ands	r6, r2
1000abea:	2e04      	cmp	r6, #4
1000abec:	d000      	beq.n	1000abf0 <__aeabi_i2f+0x60>
1000abee:	3404      	adds	r4, #4
1000abf0:	0162      	lsls	r2, r4, #5
1000abf2:	d40e      	bmi.n	1000ac12 <__aeabi_i2f+0x82>
1000abf4:	01a4      	lsls	r4, r4, #6
1000abf6:	0a64      	lsrs	r4, r4, #9
1000abf8:	b2d8      	uxtb	r0, r3
1000abfa:	0264      	lsls	r4, r4, #9
1000abfc:	05c0      	lsls	r0, r0, #23
1000abfe:	0a64      	lsrs	r4, r4, #9
1000ac00:	07ed      	lsls	r5, r5, #31
1000ac02:	4304      	orrs	r4, r0
1000ac04:	432c      	orrs	r4, r5
1000ac06:	1c20      	adds	r0, r4, #0
1000ac08:	bd70      	pop	{r4, r5, r6, pc}
1000ac0a:	2500      	movs	r5, #0
1000ac0c:	2000      	movs	r0, #0
1000ac0e:	2400      	movs	r4, #0
1000ac10:	e7f3      	b.n	1000abfa <__aeabi_i2f+0x6a>
1000ac12:	4b02      	ldr	r3, [pc, #8]	; (1000ac1c <__aeabi_i2f+0x8c>)
1000ac14:	401c      	ands	r4, r3
1000ac16:	239f      	movs	r3, #159	; 0x9f
1000ac18:	1a1b      	subs	r3, r3, r0
1000ac1a:	e7eb      	b.n	1000abf4 <__aeabi_i2f+0x64>
1000ac1c:	fbffffff 	.word	0xfbffffff

1000ac20 <__aeabi_dadd>:
1000ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ac22:	4645      	mov	r5, r8
1000ac24:	4657      	mov	r7, sl
1000ac26:	464e      	mov	r6, r9
1000ac28:	4694      	mov	ip, r2
1000ac2a:	004c      	lsls	r4, r1, #1
1000ac2c:	030a      	lsls	r2, r1, #12
1000ac2e:	0fc9      	lsrs	r1, r1, #31
1000ac30:	b4e0      	push	{r5, r6, r7}
1000ac32:	4688      	mov	r8, r1
1000ac34:	1c0e      	adds	r6, r1, #0
1000ac36:	0319      	lsls	r1, r3, #12
1000ac38:	0f47      	lsrs	r7, r0, #29
1000ac3a:	00c5      	lsls	r5, r0, #3
1000ac3c:	0a48      	lsrs	r0, r1, #9
1000ac3e:	4661      	mov	r1, ip
1000ac40:	0f49      	lsrs	r1, r1, #29
1000ac42:	4301      	orrs	r1, r0
1000ac44:	4660      	mov	r0, ip
1000ac46:	0a52      	lsrs	r2, r2, #9
1000ac48:	4317      	orrs	r7, r2
1000ac4a:	00c0      	lsls	r0, r0, #3
1000ac4c:	005a      	lsls	r2, r3, #1
1000ac4e:	0d64      	lsrs	r4, r4, #21
1000ac50:	0d52      	lsrs	r2, r2, #21
1000ac52:	0fdb      	lsrs	r3, r3, #31
1000ac54:	4684      	mov	ip, r0
1000ac56:	4598      	cmp	r8, r3
1000ac58:	d100      	bne.n	1000ac5c <__aeabi_dadd+0x3c>
1000ac5a:	e0a7      	b.n	1000adac <__aeabi_dadd+0x18c>
1000ac5c:	1aa0      	subs	r0, r4, r2
1000ac5e:	2800      	cmp	r0, #0
1000ac60:	dc00      	bgt.n	1000ac64 <__aeabi_dadd+0x44>
1000ac62:	e101      	b.n	1000ae68 <__aeabi_dadd+0x248>
1000ac64:	2a00      	cmp	r2, #0
1000ac66:	d13d      	bne.n	1000ace4 <__aeabi_dadd+0xc4>
1000ac68:	4663      	mov	r3, ip
1000ac6a:	430b      	orrs	r3, r1
1000ac6c:	d000      	beq.n	1000ac70 <__aeabi_dadd+0x50>
1000ac6e:	e0d4      	b.n	1000ae1a <__aeabi_dadd+0x1fa>
1000ac70:	076b      	lsls	r3, r5, #29
1000ac72:	d100      	bne.n	1000ac76 <__aeabi_dadd+0x56>
1000ac74:	e088      	b.n	1000ad88 <__aeabi_dadd+0x168>
1000ac76:	230f      	movs	r3, #15
1000ac78:	402b      	ands	r3, r5
1000ac7a:	2b04      	cmp	r3, #4
1000ac7c:	d100      	bne.n	1000ac80 <__aeabi_dadd+0x60>
1000ac7e:	e083      	b.n	1000ad88 <__aeabi_dadd+0x168>
1000ac80:	1d2a      	adds	r2, r5, #4
1000ac82:	42aa      	cmp	r2, r5
1000ac84:	41ad      	sbcs	r5, r5
1000ac86:	2380      	movs	r3, #128	; 0x80
1000ac88:	426d      	negs	r5, r5
1000ac8a:	197f      	adds	r7, r7, r5
1000ac8c:	041b      	lsls	r3, r3, #16
1000ac8e:	403b      	ands	r3, r7
1000ac90:	4646      	mov	r6, r8
1000ac92:	1c15      	adds	r5, r2, #0
1000ac94:	2b00      	cmp	r3, #0
1000ac96:	d100      	bne.n	1000ac9a <__aeabi_dadd+0x7a>
1000ac98:	e07c      	b.n	1000ad94 <__aeabi_dadd+0x174>
1000ac9a:	4bcc      	ldr	r3, [pc, #816]	; (1000afcc <__aeabi_dadd+0x3ac>)
1000ac9c:	3401      	adds	r4, #1
1000ac9e:	429c      	cmp	r4, r3
1000aca0:	d100      	bne.n	1000aca4 <__aeabi_dadd+0x84>
1000aca2:	e0fd      	b.n	1000aea0 <__aeabi_dadd+0x280>
1000aca4:	1c3a      	adds	r2, r7, #0
1000aca6:	4bca      	ldr	r3, [pc, #808]	; (1000afd0 <__aeabi_dadd+0x3b0>)
1000aca8:	08ed      	lsrs	r5, r5, #3
1000acaa:	401a      	ands	r2, r3
1000acac:	0750      	lsls	r0, r2, #29
1000acae:	0564      	lsls	r4, r4, #21
1000acb0:	0252      	lsls	r2, r2, #9
1000acb2:	4305      	orrs	r5, r0
1000acb4:	0b12      	lsrs	r2, r2, #12
1000acb6:	0d64      	lsrs	r4, r4, #21
1000acb8:	2100      	movs	r1, #0
1000acba:	0312      	lsls	r2, r2, #12
1000acbc:	0d0b      	lsrs	r3, r1, #20
1000acbe:	051b      	lsls	r3, r3, #20
1000acc0:	0564      	lsls	r4, r4, #21
1000acc2:	0b12      	lsrs	r2, r2, #12
1000acc4:	431a      	orrs	r2, r3
1000acc6:	0863      	lsrs	r3, r4, #1
1000acc8:	4cc2      	ldr	r4, [pc, #776]	; (1000afd4 <__aeabi_dadd+0x3b4>)
1000acca:	07f6      	lsls	r6, r6, #31
1000accc:	4014      	ands	r4, r2
1000acce:	431c      	orrs	r4, r3
1000acd0:	0064      	lsls	r4, r4, #1
1000acd2:	0864      	lsrs	r4, r4, #1
1000acd4:	4334      	orrs	r4, r6
1000acd6:	1c28      	adds	r0, r5, #0
1000acd8:	1c21      	adds	r1, r4, #0
1000acda:	bc1c      	pop	{r2, r3, r4}
1000acdc:	4690      	mov	r8, r2
1000acde:	4699      	mov	r9, r3
1000ace0:	46a2      	mov	sl, r4
1000ace2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ace4:	4bb9      	ldr	r3, [pc, #740]	; (1000afcc <__aeabi_dadd+0x3ac>)
1000ace6:	429c      	cmp	r4, r3
1000ace8:	d0c2      	beq.n	1000ac70 <__aeabi_dadd+0x50>
1000acea:	2380      	movs	r3, #128	; 0x80
1000acec:	041b      	lsls	r3, r3, #16
1000acee:	4319      	orrs	r1, r3
1000acf0:	2838      	cmp	r0, #56	; 0x38
1000acf2:	dd00      	ble.n	1000acf6 <__aeabi_dadd+0xd6>
1000acf4:	e0ec      	b.n	1000aed0 <__aeabi_dadd+0x2b0>
1000acf6:	281f      	cmp	r0, #31
1000acf8:	dd00      	ble.n	1000acfc <__aeabi_dadd+0xdc>
1000acfa:	e121      	b.n	1000af40 <__aeabi_dadd+0x320>
1000acfc:	2220      	movs	r2, #32
1000acfe:	1c0e      	adds	r6, r1, #0
1000ad00:	4663      	mov	r3, ip
1000ad02:	1a12      	subs	r2, r2, r0
1000ad04:	4096      	lsls	r6, r2
1000ad06:	40c3      	lsrs	r3, r0
1000ad08:	4333      	orrs	r3, r6
1000ad0a:	4666      	mov	r6, ip
1000ad0c:	4096      	lsls	r6, r2
1000ad0e:	1c32      	adds	r2, r6, #0
1000ad10:	1e56      	subs	r6, r2, #1
1000ad12:	41b2      	sbcs	r2, r6
1000ad14:	4313      	orrs	r3, r2
1000ad16:	1c0a      	adds	r2, r1, #0
1000ad18:	40c2      	lsrs	r2, r0
1000ad1a:	1aeb      	subs	r3, r5, r3
1000ad1c:	429d      	cmp	r5, r3
1000ad1e:	41b6      	sbcs	r6, r6
1000ad20:	1c1d      	adds	r5, r3, #0
1000ad22:	1aba      	subs	r2, r7, r2
1000ad24:	4276      	negs	r6, r6
1000ad26:	1b97      	subs	r7, r2, r6
1000ad28:	023b      	lsls	r3, r7, #8
1000ad2a:	d400      	bmi.n	1000ad2e <__aeabi_dadd+0x10e>
1000ad2c:	e097      	b.n	1000ae5e <__aeabi_dadd+0x23e>
1000ad2e:	027a      	lsls	r2, r7, #9
1000ad30:	0a56      	lsrs	r6, r2, #9
1000ad32:	2e00      	cmp	r6, #0
1000ad34:	d100      	bne.n	1000ad38 <__aeabi_dadd+0x118>
1000ad36:	e0b6      	b.n	1000aea6 <__aeabi_dadd+0x286>
1000ad38:	1c30      	adds	r0, r6, #0
1000ad3a:	f7ff f835 	bl	10009da8 <__clzsi2>
1000ad3e:	1c03      	adds	r3, r0, #0
1000ad40:	3b08      	subs	r3, #8
1000ad42:	2b1f      	cmp	r3, #31
1000ad44:	dd00      	ble.n	1000ad48 <__aeabi_dadd+0x128>
1000ad46:	e0b7      	b.n	1000aeb8 <__aeabi_dadd+0x298>
1000ad48:	409e      	lsls	r6, r3
1000ad4a:	1c37      	adds	r7, r6, #0
1000ad4c:	2628      	movs	r6, #40	; 0x28
1000ad4e:	1c2a      	adds	r2, r5, #0
1000ad50:	1a36      	subs	r6, r6, r0
1000ad52:	40f2      	lsrs	r2, r6
1000ad54:	1c16      	adds	r6, r2, #0
1000ad56:	409d      	lsls	r5, r3
1000ad58:	433e      	orrs	r6, r7
1000ad5a:	429c      	cmp	r4, r3
1000ad5c:	dd00      	ble.n	1000ad60 <__aeabi_dadd+0x140>
1000ad5e:	e0b2      	b.n	1000aec6 <__aeabi_dadd+0x2a6>
1000ad60:	1b1c      	subs	r4, r3, r4
1000ad62:	1c62      	adds	r2, r4, #1
1000ad64:	2a1f      	cmp	r2, #31
1000ad66:	dd00      	ble.n	1000ad6a <__aeabi_dadd+0x14a>
1000ad68:	e0d8      	b.n	1000af1c <__aeabi_dadd+0x2fc>
1000ad6a:	231f      	movs	r3, #31
1000ad6c:	1c29      	adds	r1, r5, #0
1000ad6e:	1b1c      	subs	r4, r3, r4
1000ad70:	1c33      	adds	r3, r6, #0
1000ad72:	40a5      	lsls	r5, r4
1000ad74:	40a3      	lsls	r3, r4
1000ad76:	40d1      	lsrs	r1, r2
1000ad78:	1e6c      	subs	r4, r5, #1
1000ad7a:	41a5      	sbcs	r5, r4
1000ad7c:	40d6      	lsrs	r6, r2
1000ad7e:	4319      	orrs	r1, r3
1000ad80:	430d      	orrs	r5, r1
1000ad82:	1c37      	adds	r7, r6, #0
1000ad84:	2400      	movs	r4, #0
1000ad86:	e773      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000ad88:	2380      	movs	r3, #128	; 0x80
1000ad8a:	041b      	lsls	r3, r3, #16
1000ad8c:	403b      	ands	r3, r7
1000ad8e:	4646      	mov	r6, r8
1000ad90:	d000      	beq.n	1000ad94 <__aeabi_dadd+0x174>
1000ad92:	e782      	b.n	1000ac9a <__aeabi_dadd+0x7a>
1000ad94:	4b8d      	ldr	r3, [pc, #564]	; (1000afcc <__aeabi_dadd+0x3ac>)
1000ad96:	08ed      	lsrs	r5, r5, #3
1000ad98:	0778      	lsls	r0, r7, #29
1000ad9a:	4305      	orrs	r5, r0
1000ad9c:	08fa      	lsrs	r2, r7, #3
1000ad9e:	429c      	cmp	r4, r3
1000ada0:	d032      	beq.n	1000ae08 <__aeabi_dadd+0x1e8>
1000ada2:	0312      	lsls	r2, r2, #12
1000ada4:	0564      	lsls	r4, r4, #21
1000ada6:	0b12      	lsrs	r2, r2, #12
1000ada8:	0d64      	lsrs	r4, r4, #21
1000adaa:	e785      	b.n	1000acb8 <__aeabi_dadd+0x98>
1000adac:	1aa3      	subs	r3, r4, r2
1000adae:	2b00      	cmp	r3, #0
1000adb0:	dc00      	bgt.n	1000adb4 <__aeabi_dadd+0x194>
1000adb2:	e094      	b.n	1000aede <__aeabi_dadd+0x2be>
1000adb4:	2a00      	cmp	r2, #0
1000adb6:	d03c      	beq.n	1000ae32 <__aeabi_dadd+0x212>
1000adb8:	4a84      	ldr	r2, [pc, #528]	; (1000afcc <__aeabi_dadd+0x3ac>)
1000adba:	4294      	cmp	r4, r2
1000adbc:	d100      	bne.n	1000adc0 <__aeabi_dadd+0x1a0>
1000adbe:	e757      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000adc0:	2280      	movs	r2, #128	; 0x80
1000adc2:	0412      	lsls	r2, r2, #16
1000adc4:	4311      	orrs	r1, r2
1000adc6:	2b38      	cmp	r3, #56	; 0x38
1000adc8:	dc00      	bgt.n	1000adcc <__aeabi_dadd+0x1ac>
1000adca:	e105      	b.n	1000afd8 <__aeabi_dadd+0x3b8>
1000adcc:	4663      	mov	r3, ip
1000adce:	4319      	orrs	r1, r3
1000add0:	1e48      	subs	r0, r1, #1
1000add2:	4181      	sbcs	r1, r0
1000add4:	2200      	movs	r2, #0
1000add6:	b2c8      	uxtb	r0, r1
1000add8:	1940      	adds	r0, r0, r5
1000adda:	42a8      	cmp	r0, r5
1000addc:	419b      	sbcs	r3, r3
1000adde:	1c05      	adds	r5, r0, #0
1000ade0:	19d2      	adds	r2, r2, r7
1000ade2:	425b      	negs	r3, r3
1000ade4:	18d7      	adds	r7, r2, r3
1000ade6:	023b      	lsls	r3, r7, #8
1000ade8:	d539      	bpl.n	1000ae5e <__aeabi_dadd+0x23e>
1000adea:	4b78      	ldr	r3, [pc, #480]	; (1000afcc <__aeabi_dadd+0x3ac>)
1000adec:	3401      	adds	r4, #1
1000adee:	429c      	cmp	r4, r3
1000adf0:	d100      	bne.n	1000adf4 <__aeabi_dadd+0x1d4>
1000adf2:	e14c      	b.n	1000b08e <__aeabi_dadd+0x46e>
1000adf4:	2001      	movs	r0, #1
1000adf6:	4a76      	ldr	r2, [pc, #472]	; (1000afd0 <__aeabi_dadd+0x3b0>)
1000adf8:	086b      	lsrs	r3, r5, #1
1000adfa:	403a      	ands	r2, r7
1000adfc:	4028      	ands	r0, r5
1000adfe:	4318      	orrs	r0, r3
1000ae00:	07d5      	lsls	r5, r2, #31
1000ae02:	4305      	orrs	r5, r0
1000ae04:	0857      	lsrs	r7, r2, #1
1000ae06:	e733      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000ae08:	1c2b      	adds	r3, r5, #0
1000ae0a:	4313      	orrs	r3, r2
1000ae0c:	d048      	beq.n	1000aea0 <__aeabi_dadd+0x280>
1000ae0e:	2380      	movs	r3, #128	; 0x80
1000ae10:	031b      	lsls	r3, r3, #12
1000ae12:	431a      	orrs	r2, r3
1000ae14:	0312      	lsls	r2, r2, #12
1000ae16:	0b12      	lsrs	r2, r2, #12
1000ae18:	e74e      	b.n	1000acb8 <__aeabi_dadd+0x98>
1000ae1a:	3801      	subs	r0, #1
1000ae1c:	2800      	cmp	r0, #0
1000ae1e:	d178      	bne.n	1000af12 <__aeabi_dadd+0x2f2>
1000ae20:	4663      	mov	r3, ip
1000ae22:	1aee      	subs	r6, r5, r3
1000ae24:	42b5      	cmp	r5, r6
1000ae26:	419b      	sbcs	r3, r3
1000ae28:	1a7a      	subs	r2, r7, r1
1000ae2a:	425b      	negs	r3, r3
1000ae2c:	1ad7      	subs	r7, r2, r3
1000ae2e:	1c35      	adds	r5, r6, #0
1000ae30:	e77a      	b.n	1000ad28 <__aeabi_dadd+0x108>
1000ae32:	1c02      	adds	r2, r0, #0
1000ae34:	430a      	orrs	r2, r1
1000ae36:	d100      	bne.n	1000ae3a <__aeabi_dadd+0x21a>
1000ae38:	e71a      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000ae3a:	3b01      	subs	r3, #1
1000ae3c:	2b00      	cmp	r3, #0
1000ae3e:	d000      	beq.n	1000ae42 <__aeabi_dadd+0x222>
1000ae40:	e0f2      	b.n	1000b028 <__aeabi_dadd+0x408>
1000ae42:	1940      	adds	r0, r0, r5
1000ae44:	42a8      	cmp	r0, r5
1000ae46:	419b      	sbcs	r3, r3
1000ae48:	19ca      	adds	r2, r1, r7
1000ae4a:	425b      	negs	r3, r3
1000ae4c:	18d7      	adds	r7, r2, r3
1000ae4e:	1c05      	adds	r5, r0, #0
1000ae50:	e7c9      	b.n	1000ade6 <__aeabi_dadd+0x1c6>
1000ae52:	1c13      	adds	r3, r2, #0
1000ae54:	4333      	orrs	r3, r6
1000ae56:	d100      	bne.n	1000ae5a <__aeabi_dadd+0x23a>
1000ae58:	e118      	b.n	1000b08c <__aeabi_dadd+0x46c>
1000ae5a:	1c17      	adds	r7, r2, #0
1000ae5c:	1c35      	adds	r5, r6, #0
1000ae5e:	4646      	mov	r6, r8
1000ae60:	076b      	lsls	r3, r5, #29
1000ae62:	d000      	beq.n	1000ae66 <__aeabi_dadd+0x246>
1000ae64:	e707      	b.n	1000ac76 <__aeabi_dadd+0x56>
1000ae66:	e795      	b.n	1000ad94 <__aeabi_dadd+0x174>
1000ae68:	2800      	cmp	r0, #0
1000ae6a:	d17a      	bne.n	1000af62 <__aeabi_dadd+0x342>
1000ae6c:	1c62      	adds	r2, r4, #1
1000ae6e:	0552      	lsls	r2, r2, #21
1000ae70:	0d52      	lsrs	r2, r2, #21
1000ae72:	2a01      	cmp	r2, #1
1000ae74:	dc00      	bgt.n	1000ae78 <__aeabi_dadd+0x258>
1000ae76:	e0fb      	b.n	1000b070 <__aeabi_dadd+0x450>
1000ae78:	4662      	mov	r2, ip
1000ae7a:	1aaa      	subs	r2, r5, r2
1000ae7c:	4295      	cmp	r5, r2
1000ae7e:	41b6      	sbcs	r6, r6
1000ae80:	4691      	mov	r9, r2
1000ae82:	1a78      	subs	r0, r7, r1
1000ae84:	4272      	negs	r2, r6
1000ae86:	1a86      	subs	r6, r0, r2
1000ae88:	0232      	lsls	r2, r6, #8
1000ae8a:	d400      	bmi.n	1000ae8e <__aeabi_dadd+0x26e>
1000ae8c:	e093      	b.n	1000afb6 <__aeabi_dadd+0x396>
1000ae8e:	4662      	mov	r2, ip
1000ae90:	1b55      	subs	r5, r2, r5
1000ae92:	45ac      	cmp	ip, r5
1000ae94:	4180      	sbcs	r0, r0
1000ae96:	1bcf      	subs	r7, r1, r7
1000ae98:	4240      	negs	r0, r0
1000ae9a:	1a3e      	subs	r6, r7, r0
1000ae9c:	4698      	mov	r8, r3
1000ae9e:	e748      	b.n	1000ad32 <__aeabi_dadd+0x112>
1000aea0:	2200      	movs	r2, #0
1000aea2:	2500      	movs	r5, #0
1000aea4:	e708      	b.n	1000acb8 <__aeabi_dadd+0x98>
1000aea6:	1c28      	adds	r0, r5, #0
1000aea8:	f7fe ff7e 	bl	10009da8 <__clzsi2>
1000aeac:	3020      	adds	r0, #32
1000aeae:	1c03      	adds	r3, r0, #0
1000aeb0:	3b08      	subs	r3, #8
1000aeb2:	2b1f      	cmp	r3, #31
1000aeb4:	dc00      	bgt.n	1000aeb8 <__aeabi_dadd+0x298>
1000aeb6:	e747      	b.n	1000ad48 <__aeabi_dadd+0x128>
1000aeb8:	3828      	subs	r0, #40	; 0x28
1000aeba:	4085      	lsls	r5, r0
1000aebc:	1c2e      	adds	r6, r5, #0
1000aebe:	2500      	movs	r5, #0
1000aec0:	429c      	cmp	r4, r3
1000aec2:	dc00      	bgt.n	1000aec6 <__aeabi_dadd+0x2a6>
1000aec4:	e74c      	b.n	1000ad60 <__aeabi_dadd+0x140>
1000aec6:	4a42      	ldr	r2, [pc, #264]	; (1000afd0 <__aeabi_dadd+0x3b0>)
1000aec8:	1ae4      	subs	r4, r4, r3
1000aeca:	4016      	ands	r6, r2
1000aecc:	1c37      	adds	r7, r6, #0
1000aece:	e6cf      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000aed0:	4663      	mov	r3, ip
1000aed2:	4319      	orrs	r1, r3
1000aed4:	1e4b      	subs	r3, r1, #1
1000aed6:	4199      	sbcs	r1, r3
1000aed8:	2200      	movs	r2, #0
1000aeda:	b2cb      	uxtb	r3, r1
1000aedc:	e71d      	b.n	1000ad1a <__aeabi_dadd+0xfa>
1000aede:	2b00      	cmp	r3, #0
1000aee0:	d000      	beq.n	1000aee4 <__aeabi_dadd+0x2c4>
1000aee2:	e0f2      	b.n	1000b0ca <__aeabi_dadd+0x4aa>
1000aee4:	1c60      	adds	r0, r4, #1
1000aee6:	0543      	lsls	r3, r0, #21
1000aee8:	0d5b      	lsrs	r3, r3, #21
1000aeea:	2b01      	cmp	r3, #1
1000aeec:	dc00      	bgt.n	1000aef0 <__aeabi_dadd+0x2d0>
1000aeee:	e0a4      	b.n	1000b03a <__aeabi_dadd+0x41a>
1000aef0:	4b36      	ldr	r3, [pc, #216]	; (1000afcc <__aeabi_dadd+0x3ac>)
1000aef2:	4298      	cmp	r0, r3
1000aef4:	d100      	bne.n	1000aef8 <__aeabi_dadd+0x2d8>
1000aef6:	e121      	b.n	1000b13c <__aeabi_dadd+0x51c>
1000aef8:	4663      	mov	r3, ip
1000aefa:	195c      	adds	r4, r3, r5
1000aefc:	42ac      	cmp	r4, r5
1000aefe:	419b      	sbcs	r3, r3
1000af00:	19cf      	adds	r7, r1, r7
1000af02:	425b      	negs	r3, r3
1000af04:	18fa      	adds	r2, r7, r3
1000af06:	0864      	lsrs	r4, r4, #1
1000af08:	07d5      	lsls	r5, r2, #31
1000af0a:	4325      	orrs	r5, r4
1000af0c:	0857      	lsrs	r7, r2, #1
1000af0e:	1c04      	adds	r4, r0, #0
1000af10:	e6ae      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000af12:	4b2e      	ldr	r3, [pc, #184]	; (1000afcc <__aeabi_dadd+0x3ac>)
1000af14:	429c      	cmp	r4, r3
1000af16:	d000      	beq.n	1000af1a <__aeabi_dadd+0x2fa>
1000af18:	e6ea      	b.n	1000acf0 <__aeabi_dadd+0xd0>
1000af1a:	e6a9      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000af1c:	1c21      	adds	r1, r4, #0
1000af1e:	1c33      	adds	r3, r6, #0
1000af20:	391f      	subs	r1, #31
1000af22:	40cb      	lsrs	r3, r1
1000af24:	1c19      	adds	r1, r3, #0
1000af26:	2a20      	cmp	r2, #32
1000af28:	d100      	bne.n	1000af2c <__aeabi_dadd+0x30c>
1000af2a:	e082      	b.n	1000b032 <__aeabi_dadd+0x412>
1000af2c:	233f      	movs	r3, #63	; 0x3f
1000af2e:	1b1c      	subs	r4, r3, r4
1000af30:	40a6      	lsls	r6, r4
1000af32:	4335      	orrs	r5, r6
1000af34:	1e6e      	subs	r6, r5, #1
1000af36:	41b5      	sbcs	r5, r6
1000af38:	2700      	movs	r7, #0
1000af3a:	430d      	orrs	r5, r1
1000af3c:	2400      	movs	r4, #0
1000af3e:	e78e      	b.n	1000ae5e <__aeabi_dadd+0x23e>
1000af40:	1c03      	adds	r3, r0, #0
1000af42:	1c0e      	adds	r6, r1, #0
1000af44:	3b20      	subs	r3, #32
1000af46:	40de      	lsrs	r6, r3
1000af48:	2820      	cmp	r0, #32
1000af4a:	d074      	beq.n	1000b036 <__aeabi_dadd+0x416>
1000af4c:	2340      	movs	r3, #64	; 0x40
1000af4e:	1a1b      	subs	r3, r3, r0
1000af50:	4099      	lsls	r1, r3
1000af52:	1c0b      	adds	r3, r1, #0
1000af54:	4662      	mov	r2, ip
1000af56:	4313      	orrs	r3, r2
1000af58:	1e59      	subs	r1, r3, #1
1000af5a:	418b      	sbcs	r3, r1
1000af5c:	2200      	movs	r2, #0
1000af5e:	4333      	orrs	r3, r6
1000af60:	e6db      	b.n	1000ad1a <__aeabi_dadd+0xfa>
1000af62:	2c00      	cmp	r4, #0
1000af64:	d050      	beq.n	1000b008 <__aeabi_dadd+0x3e8>
1000af66:	4c19      	ldr	r4, [pc, #100]	; (1000afcc <__aeabi_dadd+0x3ac>)
1000af68:	42a2      	cmp	r2, r4
1000af6a:	d100      	bne.n	1000af6e <__aeabi_dadd+0x34e>
1000af6c:	e0a8      	b.n	1000b0c0 <__aeabi_dadd+0x4a0>
1000af6e:	2480      	movs	r4, #128	; 0x80
1000af70:	0424      	lsls	r4, r4, #16
1000af72:	4240      	negs	r0, r0
1000af74:	4327      	orrs	r7, r4
1000af76:	2838      	cmp	r0, #56	; 0x38
1000af78:	dd00      	ble.n	1000af7c <__aeabi_dadd+0x35c>
1000af7a:	e0d9      	b.n	1000b130 <__aeabi_dadd+0x510>
1000af7c:	281f      	cmp	r0, #31
1000af7e:	dd00      	ble.n	1000af82 <__aeabi_dadd+0x362>
1000af80:	e139      	b.n	1000b1f6 <__aeabi_dadd+0x5d6>
1000af82:	2420      	movs	r4, #32
1000af84:	1c3e      	adds	r6, r7, #0
1000af86:	1a24      	subs	r4, r4, r0
1000af88:	40a6      	lsls	r6, r4
1000af8a:	46b0      	mov	r8, r6
1000af8c:	1c2e      	adds	r6, r5, #0
1000af8e:	46a1      	mov	r9, r4
1000af90:	40c6      	lsrs	r6, r0
1000af92:	4644      	mov	r4, r8
1000af94:	4326      	orrs	r6, r4
1000af96:	464c      	mov	r4, r9
1000af98:	40a5      	lsls	r5, r4
1000af9a:	1e6c      	subs	r4, r5, #1
1000af9c:	41a5      	sbcs	r5, r4
1000af9e:	40c7      	lsrs	r7, r0
1000afa0:	4335      	orrs	r5, r6
1000afa2:	4660      	mov	r0, ip
1000afa4:	1b45      	subs	r5, r0, r5
1000afa6:	1bcf      	subs	r7, r1, r7
1000afa8:	45ac      	cmp	ip, r5
1000afaa:	4189      	sbcs	r1, r1
1000afac:	4249      	negs	r1, r1
1000afae:	1a7f      	subs	r7, r7, r1
1000afb0:	1c14      	adds	r4, r2, #0
1000afb2:	4698      	mov	r8, r3
1000afb4:	e6b8      	b.n	1000ad28 <__aeabi_dadd+0x108>
1000afb6:	464b      	mov	r3, r9
1000afb8:	464d      	mov	r5, r9
1000afba:	4333      	orrs	r3, r6
1000afbc:	d000      	beq.n	1000afc0 <__aeabi_dadd+0x3a0>
1000afbe:	e6b8      	b.n	1000ad32 <__aeabi_dadd+0x112>
1000afc0:	2600      	movs	r6, #0
1000afc2:	2700      	movs	r7, #0
1000afc4:	2400      	movs	r4, #0
1000afc6:	2500      	movs	r5, #0
1000afc8:	e6e4      	b.n	1000ad94 <__aeabi_dadd+0x174>
1000afca:	46c0      	nop			; (mov r8, r8)
1000afcc:	000007ff 	.word	0x000007ff
1000afd0:	ff7fffff 	.word	0xff7fffff
1000afd4:	800fffff 	.word	0x800fffff
1000afd8:	2b1f      	cmp	r3, #31
1000afda:	dc5b      	bgt.n	1000b094 <__aeabi_dadd+0x474>
1000afdc:	2220      	movs	r2, #32
1000afde:	1c08      	adds	r0, r1, #0
1000afe0:	1ad2      	subs	r2, r2, r3
1000afe2:	4090      	lsls	r0, r2
1000afe4:	4681      	mov	r9, r0
1000afe6:	4660      	mov	r0, ip
1000afe8:	4692      	mov	sl, r2
1000afea:	40d8      	lsrs	r0, r3
1000afec:	464a      	mov	r2, r9
1000afee:	4310      	orrs	r0, r2
1000aff0:	4681      	mov	r9, r0
1000aff2:	4652      	mov	r2, sl
1000aff4:	4660      	mov	r0, ip
1000aff6:	4090      	lsls	r0, r2
1000aff8:	1c02      	adds	r2, r0, #0
1000affa:	1e50      	subs	r0, r2, #1
1000affc:	4182      	sbcs	r2, r0
1000affe:	4648      	mov	r0, r9
1000b000:	4310      	orrs	r0, r2
1000b002:	1c0a      	adds	r2, r1, #0
1000b004:	40da      	lsrs	r2, r3
1000b006:	e6e7      	b.n	1000add8 <__aeabi_dadd+0x1b8>
1000b008:	1c3c      	adds	r4, r7, #0
1000b00a:	432c      	orrs	r4, r5
1000b00c:	d058      	beq.n	1000b0c0 <__aeabi_dadd+0x4a0>
1000b00e:	43c0      	mvns	r0, r0
1000b010:	2800      	cmp	r0, #0
1000b012:	d151      	bne.n	1000b0b8 <__aeabi_dadd+0x498>
1000b014:	4660      	mov	r0, ip
1000b016:	1b45      	subs	r5, r0, r5
1000b018:	45ac      	cmp	ip, r5
1000b01a:	4180      	sbcs	r0, r0
1000b01c:	1bcf      	subs	r7, r1, r7
1000b01e:	4240      	negs	r0, r0
1000b020:	1a3f      	subs	r7, r7, r0
1000b022:	1c14      	adds	r4, r2, #0
1000b024:	4698      	mov	r8, r3
1000b026:	e67f      	b.n	1000ad28 <__aeabi_dadd+0x108>
1000b028:	4a8f      	ldr	r2, [pc, #572]	; (1000b268 <__aeabi_dadd+0x648>)
1000b02a:	4294      	cmp	r4, r2
1000b02c:	d000      	beq.n	1000b030 <__aeabi_dadd+0x410>
1000b02e:	e6ca      	b.n	1000adc6 <__aeabi_dadd+0x1a6>
1000b030:	e61e      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b032:	2600      	movs	r6, #0
1000b034:	e77d      	b.n	1000af32 <__aeabi_dadd+0x312>
1000b036:	2300      	movs	r3, #0
1000b038:	e78c      	b.n	1000af54 <__aeabi_dadd+0x334>
1000b03a:	1c3b      	adds	r3, r7, #0
1000b03c:	432b      	orrs	r3, r5
1000b03e:	2c00      	cmp	r4, #0
1000b040:	d000      	beq.n	1000b044 <__aeabi_dadd+0x424>
1000b042:	e0bd      	b.n	1000b1c0 <__aeabi_dadd+0x5a0>
1000b044:	2b00      	cmp	r3, #0
1000b046:	d100      	bne.n	1000b04a <__aeabi_dadd+0x42a>
1000b048:	e0f5      	b.n	1000b236 <__aeabi_dadd+0x616>
1000b04a:	4663      	mov	r3, ip
1000b04c:	430b      	orrs	r3, r1
1000b04e:	d100      	bne.n	1000b052 <__aeabi_dadd+0x432>
1000b050:	e60e      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b052:	4663      	mov	r3, ip
1000b054:	195b      	adds	r3, r3, r5
1000b056:	42ab      	cmp	r3, r5
1000b058:	4180      	sbcs	r0, r0
1000b05a:	19ca      	adds	r2, r1, r7
1000b05c:	4240      	negs	r0, r0
1000b05e:	1817      	adds	r7, r2, r0
1000b060:	023a      	lsls	r2, r7, #8
1000b062:	d400      	bmi.n	1000b066 <__aeabi_dadd+0x446>
1000b064:	e0fc      	b.n	1000b260 <__aeabi_dadd+0x640>
1000b066:	4a81      	ldr	r2, [pc, #516]	; (1000b26c <__aeabi_dadd+0x64c>)
1000b068:	1c1d      	adds	r5, r3, #0
1000b06a:	4017      	ands	r7, r2
1000b06c:	3401      	adds	r4, #1
1000b06e:	e5ff      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b070:	1c3a      	adds	r2, r7, #0
1000b072:	432a      	orrs	r2, r5
1000b074:	2c00      	cmp	r4, #0
1000b076:	d151      	bne.n	1000b11c <__aeabi_dadd+0x4fc>
1000b078:	2a00      	cmp	r2, #0
1000b07a:	d000      	beq.n	1000b07e <__aeabi_dadd+0x45e>
1000b07c:	e085      	b.n	1000b18a <__aeabi_dadd+0x56a>
1000b07e:	4662      	mov	r2, ip
1000b080:	430a      	orrs	r2, r1
1000b082:	d003      	beq.n	1000b08c <__aeabi_dadd+0x46c>
1000b084:	1c0f      	adds	r7, r1, #0
1000b086:	4665      	mov	r5, ip
1000b088:	4698      	mov	r8, r3
1000b08a:	e5f1      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b08c:	2600      	movs	r6, #0
1000b08e:	2700      	movs	r7, #0
1000b090:	2500      	movs	r5, #0
1000b092:	e67f      	b.n	1000ad94 <__aeabi_dadd+0x174>
1000b094:	1c18      	adds	r0, r3, #0
1000b096:	1c0a      	adds	r2, r1, #0
1000b098:	3820      	subs	r0, #32
1000b09a:	40c2      	lsrs	r2, r0
1000b09c:	2b20      	cmp	r3, #32
1000b09e:	d100      	bne.n	1000b0a2 <__aeabi_dadd+0x482>
1000b0a0:	e0a7      	b.n	1000b1f2 <__aeabi_dadd+0x5d2>
1000b0a2:	2040      	movs	r0, #64	; 0x40
1000b0a4:	1ac0      	subs	r0, r0, r3
1000b0a6:	4081      	lsls	r1, r0
1000b0a8:	1c08      	adds	r0, r1, #0
1000b0aa:	4663      	mov	r3, ip
1000b0ac:	4318      	orrs	r0, r3
1000b0ae:	1e41      	subs	r1, r0, #1
1000b0b0:	4188      	sbcs	r0, r1
1000b0b2:	4310      	orrs	r0, r2
1000b0b4:	2200      	movs	r2, #0
1000b0b6:	e68f      	b.n	1000add8 <__aeabi_dadd+0x1b8>
1000b0b8:	4c6b      	ldr	r4, [pc, #428]	; (1000b268 <__aeabi_dadd+0x648>)
1000b0ba:	42a2      	cmp	r2, r4
1000b0bc:	d000      	beq.n	1000b0c0 <__aeabi_dadd+0x4a0>
1000b0be:	e75a      	b.n	1000af76 <__aeabi_dadd+0x356>
1000b0c0:	1c0f      	adds	r7, r1, #0
1000b0c2:	4665      	mov	r5, ip
1000b0c4:	1c14      	adds	r4, r2, #0
1000b0c6:	4698      	mov	r8, r3
1000b0c8:	e5d2      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b0ca:	2c00      	cmp	r4, #0
1000b0cc:	d13a      	bne.n	1000b144 <__aeabi_dadd+0x524>
1000b0ce:	1c38      	adds	r0, r7, #0
1000b0d0:	4328      	orrs	r0, r5
1000b0d2:	d071      	beq.n	1000b1b8 <__aeabi_dadd+0x598>
1000b0d4:	43db      	mvns	r3, r3
1000b0d6:	2b00      	cmp	r3, #0
1000b0d8:	d018      	beq.n	1000b10c <__aeabi_dadd+0x4ec>
1000b0da:	4863      	ldr	r0, [pc, #396]	; (1000b268 <__aeabi_dadd+0x648>)
1000b0dc:	4282      	cmp	r2, r0
1000b0de:	d06b      	beq.n	1000b1b8 <__aeabi_dadd+0x598>
1000b0e0:	2b38      	cmp	r3, #56	; 0x38
1000b0e2:	dd00      	ble.n	1000b0e6 <__aeabi_dadd+0x4c6>
1000b0e4:	e09d      	b.n	1000b222 <__aeabi_dadd+0x602>
1000b0e6:	2b1f      	cmp	r3, #31
1000b0e8:	dd00      	ble.n	1000b0ec <__aeabi_dadd+0x4cc>
1000b0ea:	e0a7      	b.n	1000b23c <__aeabi_dadd+0x61c>
1000b0ec:	2020      	movs	r0, #32
1000b0ee:	1c3c      	adds	r4, r7, #0
1000b0f0:	1ac0      	subs	r0, r0, r3
1000b0f2:	4084      	lsls	r4, r0
1000b0f4:	46a1      	mov	r9, r4
1000b0f6:	1c2c      	adds	r4, r5, #0
1000b0f8:	4682      	mov	sl, r0
1000b0fa:	40dc      	lsrs	r4, r3
1000b0fc:	4648      	mov	r0, r9
1000b0fe:	4304      	orrs	r4, r0
1000b100:	4650      	mov	r0, sl
1000b102:	4085      	lsls	r5, r0
1000b104:	1e68      	subs	r0, r5, #1
1000b106:	4185      	sbcs	r5, r0
1000b108:	40df      	lsrs	r7, r3
1000b10a:	4325      	orrs	r5, r4
1000b10c:	4465      	add	r5, ip
1000b10e:	4565      	cmp	r5, ip
1000b110:	419b      	sbcs	r3, r3
1000b112:	187f      	adds	r7, r7, r1
1000b114:	425b      	negs	r3, r3
1000b116:	18ff      	adds	r7, r7, r3
1000b118:	1c14      	adds	r4, r2, #0
1000b11a:	e664      	b.n	1000ade6 <__aeabi_dadd+0x1c6>
1000b11c:	2a00      	cmp	r2, #0
1000b11e:	d119      	bne.n	1000b154 <__aeabi_dadd+0x534>
1000b120:	4662      	mov	r2, ip
1000b122:	430a      	orrs	r2, r1
1000b124:	d077      	beq.n	1000b216 <__aeabi_dadd+0x5f6>
1000b126:	1c0f      	adds	r7, r1, #0
1000b128:	4665      	mov	r5, ip
1000b12a:	4698      	mov	r8, r3
1000b12c:	4c4e      	ldr	r4, [pc, #312]	; (1000b268 <__aeabi_dadd+0x648>)
1000b12e:	e59f      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b130:	433d      	orrs	r5, r7
1000b132:	1e6f      	subs	r7, r5, #1
1000b134:	41bd      	sbcs	r5, r7
1000b136:	2700      	movs	r7, #0
1000b138:	b2ed      	uxtb	r5, r5
1000b13a:	e732      	b.n	1000afa2 <__aeabi_dadd+0x382>
1000b13c:	1c04      	adds	r4, r0, #0
1000b13e:	2700      	movs	r7, #0
1000b140:	2500      	movs	r5, #0
1000b142:	e627      	b.n	1000ad94 <__aeabi_dadd+0x174>
1000b144:	4848      	ldr	r0, [pc, #288]	; (1000b268 <__aeabi_dadd+0x648>)
1000b146:	4282      	cmp	r2, r0
1000b148:	d036      	beq.n	1000b1b8 <__aeabi_dadd+0x598>
1000b14a:	2080      	movs	r0, #128	; 0x80
1000b14c:	0400      	lsls	r0, r0, #16
1000b14e:	425b      	negs	r3, r3
1000b150:	4307      	orrs	r7, r0
1000b152:	e7c5      	b.n	1000b0e0 <__aeabi_dadd+0x4c0>
1000b154:	4662      	mov	r2, ip
1000b156:	430a      	orrs	r2, r1
1000b158:	d049      	beq.n	1000b1ee <__aeabi_dadd+0x5ce>
1000b15a:	2480      	movs	r4, #128	; 0x80
1000b15c:	08ed      	lsrs	r5, r5, #3
1000b15e:	0778      	lsls	r0, r7, #29
1000b160:	08fa      	lsrs	r2, r7, #3
1000b162:	0324      	lsls	r4, r4, #12
1000b164:	4328      	orrs	r0, r5
1000b166:	4222      	tst	r2, r4
1000b168:	d009      	beq.n	1000b17e <__aeabi_dadd+0x55e>
1000b16a:	08ce      	lsrs	r6, r1, #3
1000b16c:	4226      	tst	r6, r4
1000b16e:	d106      	bne.n	1000b17e <__aeabi_dadd+0x55e>
1000b170:	4662      	mov	r2, ip
1000b172:	074f      	lsls	r7, r1, #29
1000b174:	1c38      	adds	r0, r7, #0
1000b176:	08d2      	lsrs	r2, r2, #3
1000b178:	4310      	orrs	r0, r2
1000b17a:	4698      	mov	r8, r3
1000b17c:	1c32      	adds	r2, r6, #0
1000b17e:	00d2      	lsls	r2, r2, #3
1000b180:	0f47      	lsrs	r7, r0, #29
1000b182:	4317      	orrs	r7, r2
1000b184:	00c5      	lsls	r5, r0, #3
1000b186:	4c38      	ldr	r4, [pc, #224]	; (1000b268 <__aeabi_dadd+0x648>)
1000b188:	e572      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b18a:	4662      	mov	r2, ip
1000b18c:	430a      	orrs	r2, r1
1000b18e:	d100      	bne.n	1000b192 <__aeabi_dadd+0x572>
1000b190:	e56e      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b192:	4662      	mov	r2, ip
1000b194:	1aae      	subs	r6, r5, r2
1000b196:	42b5      	cmp	r5, r6
1000b198:	4192      	sbcs	r2, r2
1000b19a:	1a78      	subs	r0, r7, r1
1000b19c:	4252      	negs	r2, r2
1000b19e:	1a82      	subs	r2, r0, r2
1000b1a0:	0210      	lsls	r0, r2, #8
1000b1a2:	d400      	bmi.n	1000b1a6 <__aeabi_dadd+0x586>
1000b1a4:	e655      	b.n	1000ae52 <__aeabi_dadd+0x232>
1000b1a6:	4662      	mov	r2, ip
1000b1a8:	1b55      	subs	r5, r2, r5
1000b1aa:	45ac      	cmp	ip, r5
1000b1ac:	4180      	sbcs	r0, r0
1000b1ae:	1bca      	subs	r2, r1, r7
1000b1b0:	4240      	negs	r0, r0
1000b1b2:	1a17      	subs	r7, r2, r0
1000b1b4:	4698      	mov	r8, r3
1000b1b6:	e55b      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b1b8:	1c0f      	adds	r7, r1, #0
1000b1ba:	4665      	mov	r5, ip
1000b1bc:	1c14      	adds	r4, r2, #0
1000b1be:	e557      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b1c0:	2b00      	cmp	r3, #0
1000b1c2:	d034      	beq.n	1000b22e <__aeabi_dadd+0x60e>
1000b1c4:	4663      	mov	r3, ip
1000b1c6:	430b      	orrs	r3, r1
1000b1c8:	d011      	beq.n	1000b1ee <__aeabi_dadd+0x5ce>
1000b1ca:	2480      	movs	r4, #128	; 0x80
1000b1cc:	08ed      	lsrs	r5, r5, #3
1000b1ce:	0778      	lsls	r0, r7, #29
1000b1d0:	08fa      	lsrs	r2, r7, #3
1000b1d2:	0324      	lsls	r4, r4, #12
1000b1d4:	4328      	orrs	r0, r5
1000b1d6:	4222      	tst	r2, r4
1000b1d8:	d0d1      	beq.n	1000b17e <__aeabi_dadd+0x55e>
1000b1da:	08cb      	lsrs	r3, r1, #3
1000b1dc:	4223      	tst	r3, r4
1000b1de:	d1ce      	bne.n	1000b17e <__aeabi_dadd+0x55e>
1000b1e0:	4662      	mov	r2, ip
1000b1e2:	074f      	lsls	r7, r1, #29
1000b1e4:	1c38      	adds	r0, r7, #0
1000b1e6:	08d2      	lsrs	r2, r2, #3
1000b1e8:	4310      	orrs	r0, r2
1000b1ea:	1c1a      	adds	r2, r3, #0
1000b1ec:	e7c7      	b.n	1000b17e <__aeabi_dadd+0x55e>
1000b1ee:	4c1e      	ldr	r4, [pc, #120]	; (1000b268 <__aeabi_dadd+0x648>)
1000b1f0:	e53e      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b1f2:	2000      	movs	r0, #0
1000b1f4:	e759      	b.n	1000b0aa <__aeabi_dadd+0x48a>
1000b1f6:	1c04      	adds	r4, r0, #0
1000b1f8:	1c3e      	adds	r6, r7, #0
1000b1fa:	3c20      	subs	r4, #32
1000b1fc:	40e6      	lsrs	r6, r4
1000b1fe:	1c34      	adds	r4, r6, #0
1000b200:	2820      	cmp	r0, #32
1000b202:	d02b      	beq.n	1000b25c <__aeabi_dadd+0x63c>
1000b204:	2640      	movs	r6, #64	; 0x40
1000b206:	1a30      	subs	r0, r6, r0
1000b208:	4087      	lsls	r7, r0
1000b20a:	433d      	orrs	r5, r7
1000b20c:	1e6f      	subs	r7, r5, #1
1000b20e:	41bd      	sbcs	r5, r7
1000b210:	2700      	movs	r7, #0
1000b212:	4325      	orrs	r5, r4
1000b214:	e6c5      	b.n	1000afa2 <__aeabi_dadd+0x382>
1000b216:	2780      	movs	r7, #128	; 0x80
1000b218:	2600      	movs	r6, #0
1000b21a:	03ff      	lsls	r7, r7, #15
1000b21c:	4c12      	ldr	r4, [pc, #72]	; (1000b268 <__aeabi_dadd+0x648>)
1000b21e:	2500      	movs	r5, #0
1000b220:	e5b8      	b.n	1000ad94 <__aeabi_dadd+0x174>
1000b222:	433d      	orrs	r5, r7
1000b224:	1e6f      	subs	r7, r5, #1
1000b226:	41bd      	sbcs	r5, r7
1000b228:	2700      	movs	r7, #0
1000b22a:	b2ed      	uxtb	r5, r5
1000b22c:	e76e      	b.n	1000b10c <__aeabi_dadd+0x4ec>
1000b22e:	1c0f      	adds	r7, r1, #0
1000b230:	4665      	mov	r5, ip
1000b232:	4c0d      	ldr	r4, [pc, #52]	; (1000b268 <__aeabi_dadd+0x648>)
1000b234:	e51c      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b236:	1c0f      	adds	r7, r1, #0
1000b238:	4665      	mov	r5, ip
1000b23a:	e519      	b.n	1000ac70 <__aeabi_dadd+0x50>
1000b23c:	1c1c      	adds	r4, r3, #0
1000b23e:	1c38      	adds	r0, r7, #0
1000b240:	3c20      	subs	r4, #32
1000b242:	40e0      	lsrs	r0, r4
1000b244:	1c04      	adds	r4, r0, #0
1000b246:	2b20      	cmp	r3, #32
1000b248:	d00c      	beq.n	1000b264 <__aeabi_dadd+0x644>
1000b24a:	2040      	movs	r0, #64	; 0x40
1000b24c:	1ac3      	subs	r3, r0, r3
1000b24e:	409f      	lsls	r7, r3
1000b250:	433d      	orrs	r5, r7
1000b252:	1e6f      	subs	r7, r5, #1
1000b254:	41bd      	sbcs	r5, r7
1000b256:	2700      	movs	r7, #0
1000b258:	4325      	orrs	r5, r4
1000b25a:	e757      	b.n	1000b10c <__aeabi_dadd+0x4ec>
1000b25c:	2700      	movs	r7, #0
1000b25e:	e7d4      	b.n	1000b20a <__aeabi_dadd+0x5ea>
1000b260:	1c1d      	adds	r5, r3, #0
1000b262:	e5fc      	b.n	1000ae5e <__aeabi_dadd+0x23e>
1000b264:	2700      	movs	r7, #0
1000b266:	e7f3      	b.n	1000b250 <__aeabi_dadd+0x630>
1000b268:	000007ff 	.word	0x000007ff
1000b26c:	ff7fffff 	.word	0xff7fffff

1000b270 <__aeabi_ddiv>:
1000b270:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b272:	465f      	mov	r7, fp
1000b274:	4656      	mov	r6, sl
1000b276:	464d      	mov	r5, r9
1000b278:	4644      	mov	r4, r8
1000b27a:	b4f0      	push	{r4, r5, r6, r7}
1000b27c:	030f      	lsls	r7, r1, #12
1000b27e:	b087      	sub	sp, #28
1000b280:	4698      	mov	r8, r3
1000b282:	004d      	lsls	r5, r1, #1
1000b284:	0b3b      	lsrs	r3, r7, #12
1000b286:	0fcc      	lsrs	r4, r1, #31
1000b288:	1c06      	adds	r6, r0, #0
1000b28a:	4692      	mov	sl, r2
1000b28c:	4681      	mov	r9, r0
1000b28e:	469b      	mov	fp, r3
1000b290:	0d6d      	lsrs	r5, r5, #21
1000b292:	9401      	str	r4, [sp, #4]
1000b294:	d06b      	beq.n	1000b36e <__aeabi_ddiv+0xfe>
1000b296:	4b66      	ldr	r3, [pc, #408]	; (1000b430 <__aeabi_ddiv+0x1c0>)
1000b298:	429d      	cmp	r5, r3
1000b29a:	d035      	beq.n	1000b308 <__aeabi_ddiv+0x98>
1000b29c:	2780      	movs	r7, #128	; 0x80
1000b29e:	465b      	mov	r3, fp
1000b2a0:	037f      	lsls	r7, r7, #13
1000b2a2:	431f      	orrs	r7, r3
1000b2a4:	00f3      	lsls	r3, r6, #3
1000b2a6:	4699      	mov	r9, r3
1000b2a8:	4b62      	ldr	r3, [pc, #392]	; (1000b434 <__aeabi_ddiv+0x1c4>)
1000b2aa:	00ff      	lsls	r7, r7, #3
1000b2ac:	0f40      	lsrs	r0, r0, #29
1000b2ae:	469c      	mov	ip, r3
1000b2b0:	4307      	orrs	r7, r0
1000b2b2:	2300      	movs	r3, #0
1000b2b4:	46bb      	mov	fp, r7
1000b2b6:	2600      	movs	r6, #0
1000b2b8:	4465      	add	r5, ip
1000b2ba:	9300      	str	r3, [sp, #0]
1000b2bc:	4642      	mov	r2, r8
1000b2be:	0317      	lsls	r7, r2, #12
1000b2c0:	0050      	lsls	r0, r2, #1
1000b2c2:	0fd2      	lsrs	r2, r2, #31
1000b2c4:	4653      	mov	r3, sl
1000b2c6:	0b3f      	lsrs	r7, r7, #12
1000b2c8:	0d40      	lsrs	r0, r0, #21
1000b2ca:	4690      	mov	r8, r2
1000b2cc:	d100      	bne.n	1000b2d0 <__aeabi_ddiv+0x60>
1000b2ce:	e072      	b.n	1000b3b6 <__aeabi_ddiv+0x146>
1000b2d0:	4a57      	ldr	r2, [pc, #348]	; (1000b430 <__aeabi_ddiv+0x1c0>)
1000b2d2:	4290      	cmp	r0, r2
1000b2d4:	d067      	beq.n	1000b3a6 <__aeabi_ddiv+0x136>
1000b2d6:	2380      	movs	r3, #128	; 0x80
1000b2d8:	035b      	lsls	r3, r3, #13
1000b2da:	431f      	orrs	r7, r3
1000b2dc:	4653      	mov	r3, sl
1000b2de:	4a55      	ldr	r2, [pc, #340]	; (1000b434 <__aeabi_ddiv+0x1c4>)
1000b2e0:	0f5b      	lsrs	r3, r3, #29
1000b2e2:	00ff      	lsls	r7, r7, #3
1000b2e4:	431f      	orrs	r7, r3
1000b2e6:	4694      	mov	ip, r2
1000b2e8:	4653      	mov	r3, sl
1000b2ea:	2100      	movs	r1, #0
1000b2ec:	00db      	lsls	r3, r3, #3
1000b2ee:	4460      	add	r0, ip
1000b2f0:	4642      	mov	r2, r8
1000b2f2:	4062      	eors	r2, r4
1000b2f4:	4692      	mov	sl, r2
1000b2f6:	1a2d      	subs	r5, r5, r0
1000b2f8:	430e      	orrs	r6, r1
1000b2fa:	2e0f      	cmp	r6, #15
1000b2fc:	d900      	bls.n	1000b300 <__aeabi_ddiv+0x90>
1000b2fe:	e0a1      	b.n	1000b444 <__aeabi_ddiv+0x1d4>
1000b300:	484d      	ldr	r0, [pc, #308]	; (1000b438 <__aeabi_ddiv+0x1c8>)
1000b302:	00b6      	lsls	r6, r6, #2
1000b304:	5980      	ldr	r0, [r0, r6]
1000b306:	4687      	mov	pc, r0
1000b308:	465b      	mov	r3, fp
1000b30a:	431e      	orrs	r6, r3
1000b30c:	d000      	beq.n	1000b310 <__aeabi_ddiv+0xa0>
1000b30e:	e076      	b.n	1000b3fe <__aeabi_ddiv+0x18e>
1000b310:	2300      	movs	r3, #0
1000b312:	469b      	mov	fp, r3
1000b314:	4699      	mov	r9, r3
1000b316:	3302      	adds	r3, #2
1000b318:	2608      	movs	r6, #8
1000b31a:	9300      	str	r3, [sp, #0]
1000b31c:	e7ce      	b.n	1000b2bc <__aeabi_ddiv+0x4c>
1000b31e:	4699      	mov	r9, r3
1000b320:	4643      	mov	r3, r8
1000b322:	46bb      	mov	fp, r7
1000b324:	9301      	str	r3, [sp, #4]
1000b326:	9100      	str	r1, [sp, #0]
1000b328:	9b00      	ldr	r3, [sp, #0]
1000b32a:	2b02      	cmp	r3, #2
1000b32c:	d16b      	bne.n	1000b406 <__aeabi_ddiv+0x196>
1000b32e:	9b01      	ldr	r3, [sp, #4]
1000b330:	469a      	mov	sl, r3
1000b332:	2100      	movs	r1, #0
1000b334:	4653      	mov	r3, sl
1000b336:	2201      	movs	r2, #1
1000b338:	2700      	movs	r7, #0
1000b33a:	4689      	mov	r9, r1
1000b33c:	401a      	ands	r2, r3
1000b33e:	4b3c      	ldr	r3, [pc, #240]	; (1000b430 <__aeabi_ddiv+0x1c0>)
1000b340:	2100      	movs	r1, #0
1000b342:	033f      	lsls	r7, r7, #12
1000b344:	0d0c      	lsrs	r4, r1, #20
1000b346:	0524      	lsls	r4, r4, #20
1000b348:	0b3f      	lsrs	r7, r7, #12
1000b34a:	4327      	orrs	r7, r4
1000b34c:	4c3b      	ldr	r4, [pc, #236]	; (1000b43c <__aeabi_ddiv+0x1cc>)
1000b34e:	051b      	lsls	r3, r3, #20
1000b350:	4027      	ands	r7, r4
1000b352:	431f      	orrs	r7, r3
1000b354:	007f      	lsls	r7, r7, #1
1000b356:	07d2      	lsls	r2, r2, #31
1000b358:	087f      	lsrs	r7, r7, #1
1000b35a:	4317      	orrs	r7, r2
1000b35c:	4648      	mov	r0, r9
1000b35e:	1c39      	adds	r1, r7, #0
1000b360:	b007      	add	sp, #28
1000b362:	bc3c      	pop	{r2, r3, r4, r5}
1000b364:	4690      	mov	r8, r2
1000b366:	4699      	mov	r9, r3
1000b368:	46a2      	mov	sl, r4
1000b36a:	46ab      	mov	fp, r5
1000b36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b36e:	4303      	orrs	r3, r0
1000b370:	d03e      	beq.n	1000b3f0 <__aeabi_ddiv+0x180>
1000b372:	465b      	mov	r3, fp
1000b374:	2b00      	cmp	r3, #0
1000b376:	d100      	bne.n	1000b37a <__aeabi_ddiv+0x10a>
1000b378:	e19c      	b.n	1000b6b4 <__aeabi_ddiv+0x444>
1000b37a:	4658      	mov	r0, fp
1000b37c:	f7fe fd14 	bl	10009da8 <__clzsi2>
1000b380:	2328      	movs	r3, #40	; 0x28
1000b382:	1c31      	adds	r1, r6, #0
1000b384:	1a1b      	subs	r3, r3, r0
1000b386:	1c02      	adds	r2, r0, #0
1000b388:	465f      	mov	r7, fp
1000b38a:	40d9      	lsrs	r1, r3
1000b38c:	3a08      	subs	r2, #8
1000b38e:	4097      	lsls	r7, r2
1000b390:	1c0b      	adds	r3, r1, #0
1000b392:	4096      	lsls	r6, r2
1000b394:	433b      	orrs	r3, r7
1000b396:	469b      	mov	fp, r3
1000b398:	46b1      	mov	r9, r6
1000b39a:	2300      	movs	r3, #0
1000b39c:	4d28      	ldr	r5, [pc, #160]	; (1000b440 <__aeabi_ddiv+0x1d0>)
1000b39e:	2600      	movs	r6, #0
1000b3a0:	1a2d      	subs	r5, r5, r0
1000b3a2:	9300      	str	r3, [sp, #0]
1000b3a4:	e78a      	b.n	1000b2bc <__aeabi_ddiv+0x4c>
1000b3a6:	4652      	mov	r2, sl
1000b3a8:	2103      	movs	r1, #3
1000b3aa:	433a      	orrs	r2, r7
1000b3ac:	d1a0      	bne.n	1000b2f0 <__aeabi_ddiv+0x80>
1000b3ae:	2700      	movs	r7, #0
1000b3b0:	2300      	movs	r3, #0
1000b3b2:	2102      	movs	r1, #2
1000b3b4:	e79c      	b.n	1000b2f0 <__aeabi_ddiv+0x80>
1000b3b6:	4652      	mov	r2, sl
1000b3b8:	433a      	orrs	r2, r7
1000b3ba:	d015      	beq.n	1000b3e8 <__aeabi_ddiv+0x178>
1000b3bc:	2f00      	cmp	r7, #0
1000b3be:	d100      	bne.n	1000b3c2 <__aeabi_ddiv+0x152>
1000b3c0:	e185      	b.n	1000b6ce <__aeabi_ddiv+0x45e>
1000b3c2:	1c38      	adds	r0, r7, #0
1000b3c4:	f7fe fcf0 	bl	10009da8 <__clzsi2>
1000b3c8:	1c02      	adds	r2, r0, #0
1000b3ca:	2128      	movs	r1, #40	; 0x28
1000b3cc:	4650      	mov	r0, sl
1000b3ce:	1a89      	subs	r1, r1, r2
1000b3d0:	1c13      	adds	r3, r2, #0
1000b3d2:	40c8      	lsrs	r0, r1
1000b3d4:	4651      	mov	r1, sl
1000b3d6:	3b08      	subs	r3, #8
1000b3d8:	4099      	lsls	r1, r3
1000b3da:	409f      	lsls	r7, r3
1000b3dc:	1c0b      	adds	r3, r1, #0
1000b3de:	4307      	orrs	r7, r0
1000b3e0:	4817      	ldr	r0, [pc, #92]	; (1000b440 <__aeabi_ddiv+0x1d0>)
1000b3e2:	2100      	movs	r1, #0
1000b3e4:	1a80      	subs	r0, r0, r2
1000b3e6:	e783      	b.n	1000b2f0 <__aeabi_ddiv+0x80>
1000b3e8:	2700      	movs	r7, #0
1000b3ea:	2300      	movs	r3, #0
1000b3ec:	2101      	movs	r1, #1
1000b3ee:	e77f      	b.n	1000b2f0 <__aeabi_ddiv+0x80>
1000b3f0:	2300      	movs	r3, #0
1000b3f2:	469b      	mov	fp, r3
1000b3f4:	4699      	mov	r9, r3
1000b3f6:	3301      	adds	r3, #1
1000b3f8:	2604      	movs	r6, #4
1000b3fa:	9300      	str	r3, [sp, #0]
1000b3fc:	e75e      	b.n	1000b2bc <__aeabi_ddiv+0x4c>
1000b3fe:	2303      	movs	r3, #3
1000b400:	260c      	movs	r6, #12
1000b402:	9300      	str	r3, [sp, #0]
1000b404:	e75a      	b.n	1000b2bc <__aeabi_ddiv+0x4c>
1000b406:	2b03      	cmp	r3, #3
1000b408:	d100      	bne.n	1000b40c <__aeabi_ddiv+0x19c>
1000b40a:	e23c      	b.n	1000b886 <__aeabi_ddiv+0x616>
1000b40c:	2b01      	cmp	r3, #1
1000b40e:	d000      	beq.n	1000b412 <__aeabi_ddiv+0x1a2>
1000b410:	e1bf      	b.n	1000b792 <__aeabi_ddiv+0x522>
1000b412:	1c1a      	adds	r2, r3, #0
1000b414:	9b01      	ldr	r3, [sp, #4]
1000b416:	401a      	ands	r2, r3
1000b418:	2100      	movs	r1, #0
1000b41a:	2300      	movs	r3, #0
1000b41c:	2700      	movs	r7, #0
1000b41e:	4689      	mov	r9, r1
1000b420:	e78e      	b.n	1000b340 <__aeabi_ddiv+0xd0>
1000b422:	2300      	movs	r3, #0
1000b424:	2780      	movs	r7, #128	; 0x80
1000b426:	4699      	mov	r9, r3
1000b428:	2200      	movs	r2, #0
1000b42a:	033f      	lsls	r7, r7, #12
1000b42c:	4b00      	ldr	r3, [pc, #0]	; (1000b430 <__aeabi_ddiv+0x1c0>)
1000b42e:	e787      	b.n	1000b340 <__aeabi_ddiv+0xd0>
1000b430:	000007ff 	.word	0x000007ff
1000b434:	fffffc01 	.word	0xfffffc01
1000b438:	1000d448 	.word	0x1000d448
1000b43c:	800fffff 	.word	0x800fffff
1000b440:	fffffc0d 	.word	0xfffffc0d
1000b444:	45bb      	cmp	fp, r7
1000b446:	d900      	bls.n	1000b44a <__aeabi_ddiv+0x1da>
1000b448:	e151      	b.n	1000b6ee <__aeabi_ddiv+0x47e>
1000b44a:	d100      	bne.n	1000b44e <__aeabi_ddiv+0x1de>
1000b44c:	e14c      	b.n	1000b6e8 <__aeabi_ddiv+0x478>
1000b44e:	464a      	mov	r2, r9
1000b450:	9203      	str	r2, [sp, #12]
1000b452:	2200      	movs	r2, #0
1000b454:	465c      	mov	r4, fp
1000b456:	4690      	mov	r8, r2
1000b458:	3d01      	subs	r5, #1
1000b45a:	0e18      	lsrs	r0, r3, #24
1000b45c:	023f      	lsls	r7, r7, #8
1000b45e:	4338      	orrs	r0, r7
1000b460:	021b      	lsls	r3, r3, #8
1000b462:	9301      	str	r3, [sp, #4]
1000b464:	0c03      	lsrs	r3, r0, #16
1000b466:	4699      	mov	r9, r3
1000b468:	0403      	lsls	r3, r0, #16
1000b46a:	0c1b      	lsrs	r3, r3, #16
1000b46c:	4649      	mov	r1, r9
1000b46e:	1c06      	adds	r6, r0, #0
1000b470:	1c20      	adds	r0, r4, #0
1000b472:	1c1f      	adds	r7, r3, #0
1000b474:	9300      	str	r3, [sp, #0]
1000b476:	f7f7 f8cf 	bl	10002618 <__aeabi_uidiv>
1000b47a:	1c02      	adds	r2, r0, #0
1000b47c:	437a      	muls	r2, r7
1000b47e:	9002      	str	r0, [sp, #8]
1000b480:	4649      	mov	r1, r9
1000b482:	1c20      	adds	r0, r4, #0
1000b484:	1c17      	adds	r7, r2, #0
1000b486:	f7f7 f917 	bl	100026b8 <__aeabi_uidivmod>
1000b48a:	9b03      	ldr	r3, [sp, #12]
1000b48c:	0409      	lsls	r1, r1, #16
1000b48e:	0c1b      	lsrs	r3, r3, #16
1000b490:	4319      	orrs	r1, r3
1000b492:	428f      	cmp	r7, r1
1000b494:	d90c      	bls.n	1000b4b0 <__aeabi_ddiv+0x240>
1000b496:	9b02      	ldr	r3, [sp, #8]
1000b498:	1989      	adds	r1, r1, r6
1000b49a:	3b01      	subs	r3, #1
1000b49c:	428e      	cmp	r6, r1
1000b49e:	d900      	bls.n	1000b4a2 <__aeabi_ddiv+0x232>
1000b4a0:	e152      	b.n	1000b748 <__aeabi_ddiv+0x4d8>
1000b4a2:	428f      	cmp	r7, r1
1000b4a4:	d800      	bhi.n	1000b4a8 <__aeabi_ddiv+0x238>
1000b4a6:	e14f      	b.n	1000b748 <__aeabi_ddiv+0x4d8>
1000b4a8:	9b02      	ldr	r3, [sp, #8]
1000b4aa:	1989      	adds	r1, r1, r6
1000b4ac:	3b02      	subs	r3, #2
1000b4ae:	9302      	str	r3, [sp, #8]
1000b4b0:	1bcc      	subs	r4, r1, r7
1000b4b2:	1c20      	adds	r0, r4, #0
1000b4b4:	4649      	mov	r1, r9
1000b4b6:	f7f7 f8af 	bl	10002618 <__aeabi_uidiv>
1000b4ba:	9f00      	ldr	r7, [sp, #0]
1000b4bc:	4683      	mov	fp, r0
1000b4be:	4347      	muls	r7, r0
1000b4c0:	4649      	mov	r1, r9
1000b4c2:	1c20      	adds	r0, r4, #0
1000b4c4:	f7f7 f8f8 	bl	100026b8 <__aeabi_uidivmod>
1000b4c8:	9a03      	ldr	r2, [sp, #12]
1000b4ca:	040b      	lsls	r3, r1, #16
1000b4cc:	0414      	lsls	r4, r2, #16
1000b4ce:	0c24      	lsrs	r4, r4, #16
1000b4d0:	4323      	orrs	r3, r4
1000b4d2:	429f      	cmp	r7, r3
1000b4d4:	d90d      	bls.n	1000b4f2 <__aeabi_ddiv+0x282>
1000b4d6:	465a      	mov	r2, fp
1000b4d8:	199b      	adds	r3, r3, r6
1000b4da:	3a01      	subs	r2, #1
1000b4dc:	429e      	cmp	r6, r3
1000b4de:	d900      	bls.n	1000b4e2 <__aeabi_ddiv+0x272>
1000b4e0:	e130      	b.n	1000b744 <__aeabi_ddiv+0x4d4>
1000b4e2:	429f      	cmp	r7, r3
1000b4e4:	d800      	bhi.n	1000b4e8 <__aeabi_ddiv+0x278>
1000b4e6:	e12d      	b.n	1000b744 <__aeabi_ddiv+0x4d4>
1000b4e8:	2202      	movs	r2, #2
1000b4ea:	4252      	negs	r2, r2
1000b4ec:	4694      	mov	ip, r2
1000b4ee:	199b      	adds	r3, r3, r6
1000b4f0:	44e3      	add	fp, ip
1000b4f2:	9a02      	ldr	r2, [sp, #8]
1000b4f4:	1bdb      	subs	r3, r3, r7
1000b4f6:	0417      	lsls	r7, r2, #16
1000b4f8:	465a      	mov	r2, fp
1000b4fa:	433a      	orrs	r2, r7
1000b4fc:	4693      	mov	fp, r2
1000b4fe:	9c01      	ldr	r4, [sp, #4]
1000b500:	0c17      	lsrs	r7, r2, #16
1000b502:	0c22      	lsrs	r2, r4, #16
1000b504:	1c10      	adds	r0, r2, #0
1000b506:	9204      	str	r2, [sp, #16]
1000b508:	465a      	mov	r2, fp
1000b50a:	0411      	lsls	r1, r2, #16
1000b50c:	0422      	lsls	r2, r4, #16
1000b50e:	0c12      	lsrs	r2, r2, #16
1000b510:	1c14      	adds	r4, r2, #0
1000b512:	0c09      	lsrs	r1, r1, #16
1000b514:	437c      	muls	r4, r7
1000b516:	9205      	str	r2, [sp, #20]
1000b518:	434a      	muls	r2, r1
1000b51a:	4341      	muls	r1, r0
1000b51c:	4347      	muls	r7, r0
1000b51e:	1861      	adds	r1, r4, r1
1000b520:	0c10      	lsrs	r0, r2, #16
1000b522:	1809      	adds	r1, r1, r0
1000b524:	428c      	cmp	r4, r1
1000b526:	d903      	bls.n	1000b530 <__aeabi_ddiv+0x2c0>
1000b528:	2080      	movs	r0, #128	; 0x80
1000b52a:	0240      	lsls	r0, r0, #9
1000b52c:	4684      	mov	ip, r0
1000b52e:	4467      	add	r7, ip
1000b530:	0c0c      	lsrs	r4, r1, #16
1000b532:	0412      	lsls	r2, r2, #16
1000b534:	0408      	lsls	r0, r1, #16
1000b536:	0c12      	lsrs	r2, r2, #16
1000b538:	193c      	adds	r4, r7, r4
1000b53a:	1881      	adds	r1, r0, r2
1000b53c:	42a3      	cmp	r3, r4
1000b53e:	d200      	bcs.n	1000b542 <__aeabi_ddiv+0x2d2>
1000b540:	e0e5      	b.n	1000b70e <__aeabi_ddiv+0x49e>
1000b542:	d100      	bne.n	1000b546 <__aeabi_ddiv+0x2d6>
1000b544:	e0df      	b.n	1000b706 <__aeabi_ddiv+0x496>
1000b546:	1b1f      	subs	r7, r3, r4
1000b548:	4643      	mov	r3, r8
1000b54a:	1a5c      	subs	r4, r3, r1
1000b54c:	45a0      	cmp	r8, r4
1000b54e:	4192      	sbcs	r2, r2
1000b550:	4252      	negs	r2, r2
1000b552:	1abf      	subs	r7, r7, r2
1000b554:	42b7      	cmp	r7, r6
1000b556:	d100      	bne.n	1000b55a <__aeabi_ddiv+0x2ea>
1000b558:	e10e      	b.n	1000b778 <__aeabi_ddiv+0x508>
1000b55a:	1c38      	adds	r0, r7, #0
1000b55c:	4649      	mov	r1, r9
1000b55e:	f7f7 f85b 	bl	10002618 <__aeabi_uidiv>
1000b562:	9b00      	ldr	r3, [sp, #0]
1000b564:	9002      	str	r0, [sp, #8]
1000b566:	4343      	muls	r3, r0
1000b568:	4649      	mov	r1, r9
1000b56a:	1c38      	adds	r0, r7, #0
1000b56c:	4698      	mov	r8, r3
1000b56e:	f7f7 f8a3 	bl	100026b8 <__aeabi_uidivmod>
1000b572:	0c23      	lsrs	r3, r4, #16
1000b574:	040f      	lsls	r7, r1, #16
1000b576:	431f      	orrs	r7, r3
1000b578:	45b8      	cmp	r8, r7
1000b57a:	d90c      	bls.n	1000b596 <__aeabi_ddiv+0x326>
1000b57c:	9b02      	ldr	r3, [sp, #8]
1000b57e:	19bf      	adds	r7, r7, r6
1000b580:	3b01      	subs	r3, #1
1000b582:	42be      	cmp	r6, r7
1000b584:	d900      	bls.n	1000b588 <__aeabi_ddiv+0x318>
1000b586:	e0fb      	b.n	1000b780 <__aeabi_ddiv+0x510>
1000b588:	45b8      	cmp	r8, r7
1000b58a:	d800      	bhi.n	1000b58e <__aeabi_ddiv+0x31e>
1000b58c:	e0f8      	b.n	1000b780 <__aeabi_ddiv+0x510>
1000b58e:	9b02      	ldr	r3, [sp, #8]
1000b590:	19bf      	adds	r7, r7, r6
1000b592:	3b02      	subs	r3, #2
1000b594:	9302      	str	r3, [sp, #8]
1000b596:	4643      	mov	r3, r8
1000b598:	1aff      	subs	r7, r7, r3
1000b59a:	4649      	mov	r1, r9
1000b59c:	1c38      	adds	r0, r7, #0
1000b59e:	f7f7 f83b 	bl	10002618 <__aeabi_uidiv>
1000b5a2:	9b00      	ldr	r3, [sp, #0]
1000b5a4:	9003      	str	r0, [sp, #12]
1000b5a6:	4343      	muls	r3, r0
1000b5a8:	4649      	mov	r1, r9
1000b5aa:	1c38      	adds	r0, r7, #0
1000b5ac:	4698      	mov	r8, r3
1000b5ae:	f7f7 f883 	bl	100026b8 <__aeabi_uidivmod>
1000b5b2:	0424      	lsls	r4, r4, #16
1000b5b4:	0409      	lsls	r1, r1, #16
1000b5b6:	0c24      	lsrs	r4, r4, #16
1000b5b8:	4321      	orrs	r1, r4
1000b5ba:	4588      	cmp	r8, r1
1000b5bc:	d90c      	bls.n	1000b5d8 <__aeabi_ddiv+0x368>
1000b5be:	9b03      	ldr	r3, [sp, #12]
1000b5c0:	1989      	adds	r1, r1, r6
1000b5c2:	3b01      	subs	r3, #1
1000b5c4:	428e      	cmp	r6, r1
1000b5c6:	d900      	bls.n	1000b5ca <__aeabi_ddiv+0x35a>
1000b5c8:	e0dc      	b.n	1000b784 <__aeabi_ddiv+0x514>
1000b5ca:	4588      	cmp	r8, r1
1000b5cc:	d800      	bhi.n	1000b5d0 <__aeabi_ddiv+0x360>
1000b5ce:	e0d9      	b.n	1000b784 <__aeabi_ddiv+0x514>
1000b5d0:	9b03      	ldr	r3, [sp, #12]
1000b5d2:	1989      	adds	r1, r1, r6
1000b5d4:	3b02      	subs	r3, #2
1000b5d6:	9303      	str	r3, [sp, #12]
1000b5d8:	4643      	mov	r3, r8
1000b5da:	1ac9      	subs	r1, r1, r3
1000b5dc:	9b02      	ldr	r3, [sp, #8]
1000b5de:	9a03      	ldr	r2, [sp, #12]
1000b5e0:	041b      	lsls	r3, r3, #16
1000b5e2:	9c05      	ldr	r4, [sp, #20]
1000b5e4:	431a      	orrs	r2, r3
1000b5e6:	0c10      	lsrs	r0, r2, #16
1000b5e8:	0413      	lsls	r3, r2, #16
1000b5ea:	4691      	mov	r9, r2
1000b5ec:	1c22      	adds	r2, r4, #0
1000b5ee:	9f04      	ldr	r7, [sp, #16]
1000b5f0:	0c1b      	lsrs	r3, r3, #16
1000b5f2:	435a      	muls	r2, r3
1000b5f4:	4344      	muls	r4, r0
1000b5f6:	437b      	muls	r3, r7
1000b5f8:	4378      	muls	r0, r7
1000b5fa:	18e3      	adds	r3, r4, r3
1000b5fc:	0c17      	lsrs	r7, r2, #16
1000b5fe:	19db      	adds	r3, r3, r7
1000b600:	429c      	cmp	r4, r3
1000b602:	d903      	bls.n	1000b60c <__aeabi_ddiv+0x39c>
1000b604:	2480      	movs	r4, #128	; 0x80
1000b606:	0264      	lsls	r4, r4, #9
1000b608:	46a4      	mov	ip, r4
1000b60a:	4460      	add	r0, ip
1000b60c:	0c1c      	lsrs	r4, r3, #16
1000b60e:	0412      	lsls	r2, r2, #16
1000b610:	041b      	lsls	r3, r3, #16
1000b612:	0c12      	lsrs	r2, r2, #16
1000b614:	1900      	adds	r0, r0, r4
1000b616:	189b      	adds	r3, r3, r2
1000b618:	4281      	cmp	r1, r0
1000b61a:	d200      	bcs.n	1000b61e <__aeabi_ddiv+0x3ae>
1000b61c:	e096      	b.n	1000b74c <__aeabi_ddiv+0x4dc>
1000b61e:	d100      	bne.n	1000b622 <__aeabi_ddiv+0x3b2>
1000b620:	e0fc      	b.n	1000b81c <__aeabi_ddiv+0x5ac>
1000b622:	464a      	mov	r2, r9
1000b624:	2301      	movs	r3, #1
1000b626:	431a      	orrs	r2, r3
1000b628:	4691      	mov	r9, r2
1000b62a:	4b9b      	ldr	r3, [pc, #620]	; (1000b898 <__aeabi_ddiv+0x628>)
1000b62c:	18eb      	adds	r3, r5, r3
1000b62e:	2b00      	cmp	r3, #0
1000b630:	dc00      	bgt.n	1000b634 <__aeabi_ddiv+0x3c4>
1000b632:	e099      	b.n	1000b768 <__aeabi_ddiv+0x4f8>
1000b634:	464a      	mov	r2, r9
1000b636:	0752      	lsls	r2, r2, #29
1000b638:	d00a      	beq.n	1000b650 <__aeabi_ddiv+0x3e0>
1000b63a:	220f      	movs	r2, #15
1000b63c:	4649      	mov	r1, r9
1000b63e:	400a      	ands	r2, r1
1000b640:	2a04      	cmp	r2, #4
1000b642:	d005      	beq.n	1000b650 <__aeabi_ddiv+0x3e0>
1000b644:	3104      	adds	r1, #4
1000b646:	4549      	cmp	r1, r9
1000b648:	4192      	sbcs	r2, r2
1000b64a:	4689      	mov	r9, r1
1000b64c:	4252      	negs	r2, r2
1000b64e:	4493      	add	fp, r2
1000b650:	465a      	mov	r2, fp
1000b652:	01d2      	lsls	r2, r2, #7
1000b654:	d506      	bpl.n	1000b664 <__aeabi_ddiv+0x3f4>
1000b656:	465a      	mov	r2, fp
1000b658:	4b90      	ldr	r3, [pc, #576]	; (1000b89c <__aeabi_ddiv+0x62c>)
1000b65a:	401a      	ands	r2, r3
1000b65c:	2380      	movs	r3, #128	; 0x80
1000b65e:	4693      	mov	fp, r2
1000b660:	00db      	lsls	r3, r3, #3
1000b662:	18eb      	adds	r3, r5, r3
1000b664:	4a8e      	ldr	r2, [pc, #568]	; (1000b8a0 <__aeabi_ddiv+0x630>)
1000b666:	4293      	cmp	r3, r2
1000b668:	dd00      	ble.n	1000b66c <__aeabi_ddiv+0x3fc>
1000b66a:	e662      	b.n	1000b332 <__aeabi_ddiv+0xc2>
1000b66c:	464a      	mov	r2, r9
1000b66e:	4659      	mov	r1, fp
1000b670:	08d2      	lsrs	r2, r2, #3
1000b672:	0749      	lsls	r1, r1, #29
1000b674:	4311      	orrs	r1, r2
1000b676:	465a      	mov	r2, fp
1000b678:	4689      	mov	r9, r1
1000b67a:	0257      	lsls	r7, r2, #9
1000b67c:	4651      	mov	r1, sl
1000b67e:	2201      	movs	r2, #1
1000b680:	055b      	lsls	r3, r3, #21
1000b682:	0b3f      	lsrs	r7, r7, #12
1000b684:	0d5b      	lsrs	r3, r3, #21
1000b686:	400a      	ands	r2, r1
1000b688:	e65a      	b.n	1000b340 <__aeabi_ddiv+0xd0>
1000b68a:	2080      	movs	r0, #128	; 0x80
1000b68c:	465a      	mov	r2, fp
1000b68e:	0300      	lsls	r0, r0, #12
1000b690:	4202      	tst	r2, r0
1000b692:	d008      	beq.n	1000b6a6 <__aeabi_ddiv+0x436>
1000b694:	4207      	tst	r7, r0
1000b696:	d106      	bne.n	1000b6a6 <__aeabi_ddiv+0x436>
1000b698:	4307      	orrs	r7, r0
1000b69a:	033f      	lsls	r7, r7, #12
1000b69c:	4699      	mov	r9, r3
1000b69e:	0b3f      	lsrs	r7, r7, #12
1000b6a0:	4642      	mov	r2, r8
1000b6a2:	4b80      	ldr	r3, [pc, #512]	; (1000b8a4 <__aeabi_ddiv+0x634>)
1000b6a4:	e64c      	b.n	1000b340 <__aeabi_ddiv+0xd0>
1000b6a6:	465f      	mov	r7, fp
1000b6a8:	4307      	orrs	r7, r0
1000b6aa:	033f      	lsls	r7, r7, #12
1000b6ac:	0b3f      	lsrs	r7, r7, #12
1000b6ae:	1c22      	adds	r2, r4, #0
1000b6b0:	4b7c      	ldr	r3, [pc, #496]	; (1000b8a4 <__aeabi_ddiv+0x634>)
1000b6b2:	e645      	b.n	1000b340 <__aeabi_ddiv+0xd0>
1000b6b4:	f7fe fb78 	bl	10009da8 <__clzsi2>
1000b6b8:	1c03      	adds	r3, r0, #0
1000b6ba:	3020      	adds	r0, #32
1000b6bc:	2827      	cmp	r0, #39	; 0x27
1000b6be:	dc00      	bgt.n	1000b6c2 <__aeabi_ddiv+0x452>
1000b6c0:	e65e      	b.n	1000b380 <__aeabi_ddiv+0x110>
1000b6c2:	3b08      	subs	r3, #8
1000b6c4:	409e      	lsls	r6, r3
1000b6c6:	2300      	movs	r3, #0
1000b6c8:	46b3      	mov	fp, r6
1000b6ca:	4699      	mov	r9, r3
1000b6cc:	e665      	b.n	1000b39a <__aeabi_ddiv+0x12a>
1000b6ce:	4650      	mov	r0, sl
1000b6d0:	f7fe fb6a 	bl	10009da8 <__clzsi2>
1000b6d4:	1c02      	adds	r2, r0, #0
1000b6d6:	3220      	adds	r2, #32
1000b6d8:	2a27      	cmp	r2, #39	; 0x27
1000b6da:	dc00      	bgt.n	1000b6de <__aeabi_ddiv+0x46e>
1000b6dc:	e675      	b.n	1000b3ca <__aeabi_ddiv+0x15a>
1000b6de:	4657      	mov	r7, sl
1000b6e0:	3808      	subs	r0, #8
1000b6e2:	4087      	lsls	r7, r0
1000b6e4:	2300      	movs	r3, #0
1000b6e6:	e67b      	b.n	1000b3e0 <__aeabi_ddiv+0x170>
1000b6e8:	4599      	cmp	r9, r3
1000b6ea:	d200      	bcs.n	1000b6ee <__aeabi_ddiv+0x47e>
1000b6ec:	e6af      	b.n	1000b44e <__aeabi_ddiv+0x1de>
1000b6ee:	465a      	mov	r2, fp
1000b6f0:	4659      	mov	r1, fp
1000b6f2:	0854      	lsrs	r4, r2, #1
1000b6f4:	464a      	mov	r2, r9
1000b6f6:	07c8      	lsls	r0, r1, #31
1000b6f8:	0852      	lsrs	r2, r2, #1
1000b6fa:	4302      	orrs	r2, r0
1000b6fc:	9203      	str	r2, [sp, #12]
1000b6fe:	464a      	mov	r2, r9
1000b700:	07d2      	lsls	r2, r2, #31
1000b702:	4690      	mov	r8, r2
1000b704:	e6a9      	b.n	1000b45a <__aeabi_ddiv+0x1ea>
1000b706:	2700      	movs	r7, #0
1000b708:	4588      	cmp	r8, r1
1000b70a:	d300      	bcc.n	1000b70e <__aeabi_ddiv+0x49e>
1000b70c:	e71c      	b.n	1000b548 <__aeabi_ddiv+0x2d8>
1000b70e:	9f01      	ldr	r7, [sp, #4]
1000b710:	465a      	mov	r2, fp
1000b712:	46bc      	mov	ip, r7
1000b714:	44e0      	add	r8, ip
1000b716:	45b8      	cmp	r8, r7
1000b718:	41bf      	sbcs	r7, r7
1000b71a:	427f      	negs	r7, r7
1000b71c:	19bf      	adds	r7, r7, r6
1000b71e:	18ff      	adds	r7, r7, r3
1000b720:	3a01      	subs	r2, #1
1000b722:	42be      	cmp	r6, r7
1000b724:	d206      	bcs.n	1000b734 <__aeabi_ddiv+0x4c4>
1000b726:	42bc      	cmp	r4, r7
1000b728:	d85f      	bhi.n	1000b7ea <__aeabi_ddiv+0x57a>
1000b72a:	d100      	bne.n	1000b72e <__aeabi_ddiv+0x4be>
1000b72c:	e09f      	b.n	1000b86e <__aeabi_ddiv+0x5fe>
1000b72e:	1b3f      	subs	r7, r7, r4
1000b730:	4693      	mov	fp, r2
1000b732:	e709      	b.n	1000b548 <__aeabi_ddiv+0x2d8>
1000b734:	42b7      	cmp	r7, r6
1000b736:	d1fa      	bne.n	1000b72e <__aeabi_ddiv+0x4be>
1000b738:	9b01      	ldr	r3, [sp, #4]
1000b73a:	4543      	cmp	r3, r8
1000b73c:	d9f3      	bls.n	1000b726 <__aeabi_ddiv+0x4b6>
1000b73e:	1b37      	subs	r7, r6, r4
1000b740:	4693      	mov	fp, r2
1000b742:	e701      	b.n	1000b548 <__aeabi_ddiv+0x2d8>
1000b744:	4693      	mov	fp, r2
1000b746:	e6d4      	b.n	1000b4f2 <__aeabi_ddiv+0x282>
1000b748:	9302      	str	r3, [sp, #8]
1000b74a:	e6b1      	b.n	1000b4b0 <__aeabi_ddiv+0x240>
1000b74c:	464a      	mov	r2, r9
1000b74e:	1989      	adds	r1, r1, r6
1000b750:	3a01      	subs	r2, #1
1000b752:	428e      	cmp	r6, r1
1000b754:	d918      	bls.n	1000b788 <__aeabi_ddiv+0x518>
1000b756:	4691      	mov	r9, r2
1000b758:	4281      	cmp	r1, r0
1000b75a:	d000      	beq.n	1000b75e <__aeabi_ddiv+0x4ee>
1000b75c:	e761      	b.n	1000b622 <__aeabi_ddiv+0x3b2>
1000b75e:	9a01      	ldr	r2, [sp, #4]
1000b760:	429a      	cmp	r2, r3
1000b762:	d000      	beq.n	1000b766 <__aeabi_ddiv+0x4f6>
1000b764:	e75d      	b.n	1000b622 <__aeabi_ddiv+0x3b2>
1000b766:	e760      	b.n	1000b62a <__aeabi_ddiv+0x3ba>
1000b768:	4f4f      	ldr	r7, [pc, #316]	; (1000b8a8 <__aeabi_ddiv+0x638>)
1000b76a:	1b7f      	subs	r7, r7, r5
1000b76c:	2f38      	cmp	r7, #56	; 0x38
1000b76e:	dd13      	ble.n	1000b798 <__aeabi_ddiv+0x528>
1000b770:	2201      	movs	r2, #1
1000b772:	4653      	mov	r3, sl
1000b774:	401a      	ands	r2, r3
1000b776:	e64f      	b.n	1000b418 <__aeabi_ddiv+0x1a8>
1000b778:	2301      	movs	r3, #1
1000b77a:	425b      	negs	r3, r3
1000b77c:	4699      	mov	r9, r3
1000b77e:	e754      	b.n	1000b62a <__aeabi_ddiv+0x3ba>
1000b780:	9302      	str	r3, [sp, #8]
1000b782:	e708      	b.n	1000b596 <__aeabi_ddiv+0x326>
1000b784:	9303      	str	r3, [sp, #12]
1000b786:	e727      	b.n	1000b5d8 <__aeabi_ddiv+0x368>
1000b788:	4288      	cmp	r0, r1
1000b78a:	d83c      	bhi.n	1000b806 <__aeabi_ddiv+0x596>
1000b78c:	d074      	beq.n	1000b878 <__aeabi_ddiv+0x608>
1000b78e:	4691      	mov	r9, r2
1000b790:	e747      	b.n	1000b622 <__aeabi_ddiv+0x3b2>
1000b792:	9b01      	ldr	r3, [sp, #4]
1000b794:	469a      	mov	sl, r3
1000b796:	e748      	b.n	1000b62a <__aeabi_ddiv+0x3ba>
1000b798:	2f1f      	cmp	r7, #31
1000b79a:	dc44      	bgt.n	1000b826 <__aeabi_ddiv+0x5b6>
1000b79c:	4b43      	ldr	r3, [pc, #268]	; (1000b8ac <__aeabi_ddiv+0x63c>)
1000b79e:	464a      	mov	r2, r9
1000b7a0:	469c      	mov	ip, r3
1000b7a2:	465b      	mov	r3, fp
1000b7a4:	4465      	add	r5, ip
1000b7a6:	40fa      	lsrs	r2, r7
1000b7a8:	40ab      	lsls	r3, r5
1000b7aa:	4313      	orrs	r3, r2
1000b7ac:	464a      	mov	r2, r9
1000b7ae:	40aa      	lsls	r2, r5
1000b7b0:	1c15      	adds	r5, r2, #0
1000b7b2:	1e6a      	subs	r2, r5, #1
1000b7b4:	4195      	sbcs	r5, r2
1000b7b6:	465a      	mov	r2, fp
1000b7b8:	40fa      	lsrs	r2, r7
1000b7ba:	432b      	orrs	r3, r5
1000b7bc:	1c17      	adds	r7, r2, #0
1000b7be:	075a      	lsls	r2, r3, #29
1000b7c0:	d009      	beq.n	1000b7d6 <__aeabi_ddiv+0x566>
1000b7c2:	220f      	movs	r2, #15
1000b7c4:	401a      	ands	r2, r3
1000b7c6:	2a04      	cmp	r2, #4
1000b7c8:	d005      	beq.n	1000b7d6 <__aeabi_ddiv+0x566>
1000b7ca:	1d1a      	adds	r2, r3, #4
1000b7cc:	429a      	cmp	r2, r3
1000b7ce:	419b      	sbcs	r3, r3
1000b7d0:	425b      	negs	r3, r3
1000b7d2:	18ff      	adds	r7, r7, r3
1000b7d4:	1c13      	adds	r3, r2, #0
1000b7d6:	023a      	lsls	r2, r7, #8
1000b7d8:	d53e      	bpl.n	1000b858 <__aeabi_ddiv+0x5e8>
1000b7da:	4653      	mov	r3, sl
1000b7dc:	2201      	movs	r2, #1
1000b7de:	2100      	movs	r1, #0
1000b7e0:	401a      	ands	r2, r3
1000b7e2:	2700      	movs	r7, #0
1000b7e4:	2301      	movs	r3, #1
1000b7e6:	4689      	mov	r9, r1
1000b7e8:	e5aa      	b.n	1000b340 <__aeabi_ddiv+0xd0>
1000b7ea:	2302      	movs	r3, #2
1000b7ec:	425b      	negs	r3, r3
1000b7ee:	469c      	mov	ip, r3
1000b7f0:	9a01      	ldr	r2, [sp, #4]
1000b7f2:	44e3      	add	fp, ip
1000b7f4:	4694      	mov	ip, r2
1000b7f6:	44e0      	add	r8, ip
1000b7f8:	4590      	cmp	r8, r2
1000b7fa:	419b      	sbcs	r3, r3
1000b7fc:	425b      	negs	r3, r3
1000b7fe:	199b      	adds	r3, r3, r6
1000b800:	19df      	adds	r7, r3, r7
1000b802:	1b3f      	subs	r7, r7, r4
1000b804:	e6a0      	b.n	1000b548 <__aeabi_ddiv+0x2d8>
1000b806:	9f01      	ldr	r7, [sp, #4]
1000b808:	464a      	mov	r2, r9
1000b80a:	007c      	lsls	r4, r7, #1
1000b80c:	42bc      	cmp	r4, r7
1000b80e:	41bf      	sbcs	r7, r7
1000b810:	427f      	negs	r7, r7
1000b812:	19bf      	adds	r7, r7, r6
1000b814:	3a02      	subs	r2, #2
1000b816:	19c9      	adds	r1, r1, r7
1000b818:	9401      	str	r4, [sp, #4]
1000b81a:	e79c      	b.n	1000b756 <__aeabi_ddiv+0x4e6>
1000b81c:	2b00      	cmp	r3, #0
1000b81e:	d195      	bne.n	1000b74c <__aeabi_ddiv+0x4dc>
1000b820:	2200      	movs	r2, #0
1000b822:	9201      	str	r2, [sp, #4]
1000b824:	e79b      	b.n	1000b75e <__aeabi_ddiv+0x4ee>
1000b826:	465a      	mov	r2, fp
1000b828:	4b21      	ldr	r3, [pc, #132]	; (1000b8b0 <__aeabi_ddiv+0x640>)
1000b82a:	1b5b      	subs	r3, r3, r5
1000b82c:	40da      	lsrs	r2, r3
1000b82e:	2f20      	cmp	r7, #32
1000b830:	d027      	beq.n	1000b882 <__aeabi_ddiv+0x612>
1000b832:	4b20      	ldr	r3, [pc, #128]	; (1000b8b4 <__aeabi_ddiv+0x644>)
1000b834:	469c      	mov	ip, r3
1000b836:	465b      	mov	r3, fp
1000b838:	4465      	add	r5, ip
1000b83a:	40ab      	lsls	r3, r5
1000b83c:	4649      	mov	r1, r9
1000b83e:	430b      	orrs	r3, r1
1000b840:	1e59      	subs	r1, r3, #1
1000b842:	418b      	sbcs	r3, r1
1000b844:	4313      	orrs	r3, r2
1000b846:	2207      	movs	r2, #7
1000b848:	2700      	movs	r7, #0
1000b84a:	401a      	ands	r2, r3
1000b84c:	d007      	beq.n	1000b85e <__aeabi_ddiv+0x5ee>
1000b84e:	220f      	movs	r2, #15
1000b850:	2700      	movs	r7, #0
1000b852:	401a      	ands	r2, r3
1000b854:	2a04      	cmp	r2, #4
1000b856:	d1b8      	bne.n	1000b7ca <__aeabi_ddiv+0x55a>
1000b858:	077a      	lsls	r2, r7, #29
1000b85a:	027f      	lsls	r7, r7, #9
1000b85c:	0b3f      	lsrs	r7, r7, #12
1000b85e:	08db      	lsrs	r3, r3, #3
1000b860:	4313      	orrs	r3, r2
1000b862:	4699      	mov	r9, r3
1000b864:	2201      	movs	r2, #1
1000b866:	4653      	mov	r3, sl
1000b868:	401a      	ands	r2, r3
1000b86a:	2300      	movs	r3, #0
1000b86c:	e568      	b.n	1000b340 <__aeabi_ddiv+0xd0>
1000b86e:	4541      	cmp	r1, r8
1000b870:	d8bb      	bhi.n	1000b7ea <__aeabi_ddiv+0x57a>
1000b872:	4693      	mov	fp, r2
1000b874:	2700      	movs	r7, #0
1000b876:	e667      	b.n	1000b548 <__aeabi_ddiv+0x2d8>
1000b878:	9c01      	ldr	r4, [sp, #4]
1000b87a:	429c      	cmp	r4, r3
1000b87c:	d3c3      	bcc.n	1000b806 <__aeabi_ddiv+0x596>
1000b87e:	4691      	mov	r9, r2
1000b880:	e76d      	b.n	1000b75e <__aeabi_ddiv+0x4ee>
1000b882:	2300      	movs	r3, #0
1000b884:	e7da      	b.n	1000b83c <__aeabi_ddiv+0x5cc>
1000b886:	2780      	movs	r7, #128	; 0x80
1000b888:	465b      	mov	r3, fp
1000b88a:	033f      	lsls	r7, r7, #12
1000b88c:	431f      	orrs	r7, r3
1000b88e:	033f      	lsls	r7, r7, #12
1000b890:	0b3f      	lsrs	r7, r7, #12
1000b892:	9a01      	ldr	r2, [sp, #4]
1000b894:	4b03      	ldr	r3, [pc, #12]	; (1000b8a4 <__aeabi_ddiv+0x634>)
1000b896:	e553      	b.n	1000b340 <__aeabi_ddiv+0xd0>
1000b898:	000003ff 	.word	0x000003ff
1000b89c:	feffffff 	.word	0xfeffffff
1000b8a0:	000007fe 	.word	0x000007fe
1000b8a4:	000007ff 	.word	0x000007ff
1000b8a8:	fffffc02 	.word	0xfffffc02
1000b8ac:	0000041e 	.word	0x0000041e
1000b8b0:	fffffbe2 	.word	0xfffffbe2
1000b8b4:	0000043e 	.word	0x0000043e

1000b8b8 <__eqdf2>:
1000b8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b8ba:	465f      	mov	r7, fp
1000b8bc:	464d      	mov	r5, r9
1000b8be:	4644      	mov	r4, r8
1000b8c0:	4656      	mov	r6, sl
1000b8c2:	b4f0      	push	{r4, r5, r6, r7}
1000b8c4:	031f      	lsls	r7, r3, #12
1000b8c6:	005c      	lsls	r4, r3, #1
1000b8c8:	0fdb      	lsrs	r3, r3, #31
1000b8ca:	4699      	mov	r9, r3
1000b8cc:	4b1b      	ldr	r3, [pc, #108]	; (1000b93c <__eqdf2+0x84>)
1000b8ce:	030e      	lsls	r6, r1, #12
1000b8d0:	004d      	lsls	r5, r1, #1
1000b8d2:	0fc9      	lsrs	r1, r1, #31
1000b8d4:	4684      	mov	ip, r0
1000b8d6:	0b36      	lsrs	r6, r6, #12
1000b8d8:	0d6d      	lsrs	r5, r5, #21
1000b8da:	468b      	mov	fp, r1
1000b8dc:	4690      	mov	r8, r2
1000b8de:	0b3f      	lsrs	r7, r7, #12
1000b8e0:	0d64      	lsrs	r4, r4, #21
1000b8e2:	429d      	cmp	r5, r3
1000b8e4:	d00c      	beq.n	1000b900 <__eqdf2+0x48>
1000b8e6:	4b15      	ldr	r3, [pc, #84]	; (1000b93c <__eqdf2+0x84>)
1000b8e8:	429c      	cmp	r4, r3
1000b8ea:	d010      	beq.n	1000b90e <__eqdf2+0x56>
1000b8ec:	2301      	movs	r3, #1
1000b8ee:	42a5      	cmp	r5, r4
1000b8f0:	d014      	beq.n	1000b91c <__eqdf2+0x64>
1000b8f2:	1c18      	adds	r0, r3, #0
1000b8f4:	bc3c      	pop	{r2, r3, r4, r5}
1000b8f6:	4690      	mov	r8, r2
1000b8f8:	4699      	mov	r9, r3
1000b8fa:	46a2      	mov	sl, r4
1000b8fc:	46ab      	mov	fp, r5
1000b8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b900:	1c31      	adds	r1, r6, #0
1000b902:	2301      	movs	r3, #1
1000b904:	4301      	orrs	r1, r0
1000b906:	d1f4      	bne.n	1000b8f2 <__eqdf2+0x3a>
1000b908:	4b0c      	ldr	r3, [pc, #48]	; (1000b93c <__eqdf2+0x84>)
1000b90a:	429c      	cmp	r4, r3
1000b90c:	d1ee      	bne.n	1000b8ec <__eqdf2+0x34>
1000b90e:	433a      	orrs	r2, r7
1000b910:	2301      	movs	r3, #1
1000b912:	2a00      	cmp	r2, #0
1000b914:	d1ed      	bne.n	1000b8f2 <__eqdf2+0x3a>
1000b916:	2301      	movs	r3, #1
1000b918:	42a5      	cmp	r5, r4
1000b91a:	d1ea      	bne.n	1000b8f2 <__eqdf2+0x3a>
1000b91c:	42be      	cmp	r6, r7
1000b91e:	d1e8      	bne.n	1000b8f2 <__eqdf2+0x3a>
1000b920:	45c4      	cmp	ip, r8
1000b922:	d1e6      	bne.n	1000b8f2 <__eqdf2+0x3a>
1000b924:	45cb      	cmp	fp, r9
1000b926:	d006      	beq.n	1000b936 <__eqdf2+0x7e>
1000b928:	2d00      	cmp	r5, #0
1000b92a:	d1e2      	bne.n	1000b8f2 <__eqdf2+0x3a>
1000b92c:	4330      	orrs	r0, r6
1000b92e:	1c03      	adds	r3, r0, #0
1000b930:	1e58      	subs	r0, r3, #1
1000b932:	4183      	sbcs	r3, r0
1000b934:	e7dd      	b.n	1000b8f2 <__eqdf2+0x3a>
1000b936:	2300      	movs	r3, #0
1000b938:	e7db      	b.n	1000b8f2 <__eqdf2+0x3a>
1000b93a:	46c0      	nop			; (mov r8, r8)
1000b93c:	000007ff 	.word	0x000007ff

1000b940 <__gedf2>:
1000b940:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b942:	4657      	mov	r7, sl
1000b944:	4645      	mov	r5, r8
1000b946:	464e      	mov	r6, r9
1000b948:	b4e0      	push	{r5, r6, r7}
1000b94a:	030f      	lsls	r7, r1, #12
1000b94c:	004e      	lsls	r6, r1, #1
1000b94e:	0fc9      	lsrs	r1, r1, #31
1000b950:	468a      	mov	sl, r1
1000b952:	4932      	ldr	r1, [pc, #200]	; (1000ba1c <__gedf2+0xdc>)
1000b954:	031d      	lsls	r5, r3, #12
1000b956:	005c      	lsls	r4, r3, #1
1000b958:	4684      	mov	ip, r0
1000b95a:	0b3f      	lsrs	r7, r7, #12
1000b95c:	0d76      	lsrs	r6, r6, #21
1000b95e:	4690      	mov	r8, r2
1000b960:	0b2d      	lsrs	r5, r5, #12
1000b962:	0d64      	lsrs	r4, r4, #21
1000b964:	0fdb      	lsrs	r3, r3, #31
1000b966:	428e      	cmp	r6, r1
1000b968:	d00f      	beq.n	1000b98a <__gedf2+0x4a>
1000b96a:	428c      	cmp	r4, r1
1000b96c:	d039      	beq.n	1000b9e2 <__gedf2+0xa2>
1000b96e:	2e00      	cmp	r6, #0
1000b970:	d110      	bne.n	1000b994 <__gedf2+0x54>
1000b972:	4338      	orrs	r0, r7
1000b974:	4241      	negs	r1, r0
1000b976:	4141      	adcs	r1, r0
1000b978:	4689      	mov	r9, r1
1000b97a:	2c00      	cmp	r4, #0
1000b97c:	d127      	bne.n	1000b9ce <__gedf2+0x8e>
1000b97e:	432a      	orrs	r2, r5
1000b980:	d125      	bne.n	1000b9ce <__gedf2+0x8e>
1000b982:	2000      	movs	r0, #0
1000b984:	2900      	cmp	r1, #0
1000b986:	d10e      	bne.n	1000b9a6 <__gedf2+0x66>
1000b988:	e008      	b.n	1000b99c <__gedf2+0x5c>
1000b98a:	1c39      	adds	r1, r7, #0
1000b98c:	4301      	orrs	r1, r0
1000b98e:	d12e      	bne.n	1000b9ee <__gedf2+0xae>
1000b990:	42b4      	cmp	r4, r6
1000b992:	d026      	beq.n	1000b9e2 <__gedf2+0xa2>
1000b994:	2c00      	cmp	r4, #0
1000b996:	d00b      	beq.n	1000b9b0 <__gedf2+0x70>
1000b998:	459a      	cmp	sl, r3
1000b99a:	d00d      	beq.n	1000b9b8 <__gedf2+0x78>
1000b99c:	4653      	mov	r3, sl
1000b99e:	4259      	negs	r1, r3
1000b9a0:	2301      	movs	r3, #1
1000b9a2:	4319      	orrs	r1, r3
1000b9a4:	1c08      	adds	r0, r1, #0
1000b9a6:	bc1c      	pop	{r2, r3, r4}
1000b9a8:	4690      	mov	r8, r2
1000b9aa:	4699      	mov	r9, r3
1000b9ac:	46a2      	mov	sl, r4
1000b9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b9b0:	432a      	orrs	r2, r5
1000b9b2:	d0f3      	beq.n	1000b99c <__gedf2+0x5c>
1000b9b4:	459a      	cmp	sl, r3
1000b9b6:	d1f1      	bne.n	1000b99c <__gedf2+0x5c>
1000b9b8:	42a6      	cmp	r6, r4
1000b9ba:	dcef      	bgt.n	1000b99c <__gedf2+0x5c>
1000b9bc:	da1a      	bge.n	1000b9f4 <__gedf2+0xb4>
1000b9be:	4650      	mov	r0, sl
1000b9c0:	4241      	negs	r1, r0
1000b9c2:	4148      	adcs	r0, r1
1000b9c4:	2301      	movs	r3, #1
1000b9c6:	4241      	negs	r1, r0
1000b9c8:	4319      	orrs	r1, r3
1000b9ca:	1c08      	adds	r0, r1, #0
1000b9cc:	e7eb      	b.n	1000b9a6 <__gedf2+0x66>
1000b9ce:	464a      	mov	r2, r9
1000b9d0:	2a00      	cmp	r2, #0
1000b9d2:	d0e1      	beq.n	1000b998 <__gedf2+0x58>
1000b9d4:	4258      	negs	r0, r3
1000b9d6:	4158      	adcs	r0, r3
1000b9d8:	2201      	movs	r2, #1
1000b9da:	4241      	negs	r1, r0
1000b9dc:	4311      	orrs	r1, r2
1000b9de:	1c08      	adds	r0, r1, #0
1000b9e0:	e7e1      	b.n	1000b9a6 <__gedf2+0x66>
1000b9e2:	1c29      	adds	r1, r5, #0
1000b9e4:	4311      	orrs	r1, r2
1000b9e6:	d102      	bne.n	1000b9ee <__gedf2+0xae>
1000b9e8:	2e00      	cmp	r6, #0
1000b9ea:	d0c2      	beq.n	1000b972 <__gedf2+0x32>
1000b9ec:	e7d4      	b.n	1000b998 <__gedf2+0x58>
1000b9ee:	2002      	movs	r0, #2
1000b9f0:	4240      	negs	r0, r0
1000b9f2:	e7d8      	b.n	1000b9a6 <__gedf2+0x66>
1000b9f4:	42af      	cmp	r7, r5
1000b9f6:	d8d1      	bhi.n	1000b99c <__gedf2+0x5c>
1000b9f8:	d009      	beq.n	1000ba0e <__gedf2+0xce>
1000b9fa:	2000      	movs	r0, #0
1000b9fc:	42af      	cmp	r7, r5
1000b9fe:	d2d2      	bcs.n	1000b9a6 <__gedf2+0x66>
1000ba00:	4650      	mov	r0, sl
1000ba02:	4241      	negs	r1, r0
1000ba04:	4148      	adcs	r0, r1
1000ba06:	2301      	movs	r3, #1
1000ba08:	4240      	negs	r0, r0
1000ba0a:	4318      	orrs	r0, r3
1000ba0c:	e7cb      	b.n	1000b9a6 <__gedf2+0x66>
1000ba0e:	45c4      	cmp	ip, r8
1000ba10:	d8c4      	bhi.n	1000b99c <__gedf2+0x5c>
1000ba12:	2000      	movs	r0, #0
1000ba14:	45c4      	cmp	ip, r8
1000ba16:	d3f3      	bcc.n	1000ba00 <__gedf2+0xc0>
1000ba18:	e7c5      	b.n	1000b9a6 <__gedf2+0x66>
1000ba1a:	46c0      	nop			; (mov r8, r8)
1000ba1c:	000007ff 	.word	0x000007ff

1000ba20 <__ledf2>:
1000ba20:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba22:	465f      	mov	r7, fp
1000ba24:	464d      	mov	r5, r9
1000ba26:	4644      	mov	r4, r8
1000ba28:	4656      	mov	r6, sl
1000ba2a:	4680      	mov	r8, r0
1000ba2c:	b4f0      	push	{r4, r5, r6, r7}
1000ba2e:	1c06      	adds	r6, r0, #0
1000ba30:	0308      	lsls	r0, r1, #12
1000ba32:	0b00      	lsrs	r0, r0, #12
1000ba34:	4684      	mov	ip, r0
1000ba36:	482c      	ldr	r0, [pc, #176]	; (1000bae8 <__ledf2+0xc8>)
1000ba38:	004c      	lsls	r4, r1, #1
1000ba3a:	031f      	lsls	r7, r3, #12
1000ba3c:	005d      	lsls	r5, r3, #1
1000ba3e:	0fc9      	lsrs	r1, r1, #31
1000ba40:	0d64      	lsrs	r4, r4, #21
1000ba42:	468b      	mov	fp, r1
1000ba44:	4691      	mov	r9, r2
1000ba46:	0b3f      	lsrs	r7, r7, #12
1000ba48:	0d6d      	lsrs	r5, r5, #21
1000ba4a:	0fdb      	lsrs	r3, r3, #31
1000ba4c:	4284      	cmp	r4, r0
1000ba4e:	d012      	beq.n	1000ba76 <__ledf2+0x56>
1000ba50:	4285      	cmp	r5, r0
1000ba52:	d025      	beq.n	1000baa0 <__ledf2+0x80>
1000ba54:	2c00      	cmp	r4, #0
1000ba56:	d114      	bne.n	1000ba82 <__ledf2+0x62>
1000ba58:	4661      	mov	r1, ip
1000ba5a:	430e      	orrs	r6, r1
1000ba5c:	4270      	negs	r0, r6
1000ba5e:	4146      	adcs	r6, r0
1000ba60:	2d00      	cmp	r5, #0
1000ba62:	d035      	beq.n	1000bad0 <__ledf2+0xb0>
1000ba64:	2e00      	cmp	r6, #0
1000ba66:	d021      	beq.n	1000baac <__ledf2+0x8c>
1000ba68:	4258      	negs	r0, r3
1000ba6a:	4158      	adcs	r0, r3
1000ba6c:	2101      	movs	r1, #1
1000ba6e:	4243      	negs	r3, r0
1000ba70:	430b      	orrs	r3, r1
1000ba72:	1c18      	adds	r0, r3, #0
1000ba74:	e00e      	b.n	1000ba94 <__ledf2+0x74>
1000ba76:	4661      	mov	r1, ip
1000ba78:	2002      	movs	r0, #2
1000ba7a:	4331      	orrs	r1, r6
1000ba7c:	d10a      	bne.n	1000ba94 <__ledf2+0x74>
1000ba7e:	42a5      	cmp	r5, r4
1000ba80:	d00e      	beq.n	1000baa0 <__ledf2+0x80>
1000ba82:	2d00      	cmp	r5, #0
1000ba84:	d112      	bne.n	1000baac <__ledf2+0x8c>
1000ba86:	433a      	orrs	r2, r7
1000ba88:	d110      	bne.n	1000baac <__ledf2+0x8c>
1000ba8a:	465b      	mov	r3, fp
1000ba8c:	4259      	negs	r1, r3
1000ba8e:	2301      	movs	r3, #1
1000ba90:	4319      	orrs	r1, r3
1000ba92:	1c08      	adds	r0, r1, #0
1000ba94:	bc3c      	pop	{r2, r3, r4, r5}
1000ba96:	4690      	mov	r8, r2
1000ba98:	4699      	mov	r9, r3
1000ba9a:	46a2      	mov	sl, r4
1000ba9c:	46ab      	mov	fp, r5
1000ba9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000baa0:	1c39      	adds	r1, r7, #0
1000baa2:	2002      	movs	r0, #2
1000baa4:	4311      	orrs	r1, r2
1000baa6:	d1f5      	bne.n	1000ba94 <__ledf2+0x74>
1000baa8:	2c00      	cmp	r4, #0
1000baaa:	d0d5      	beq.n	1000ba58 <__ledf2+0x38>
1000baac:	459b      	cmp	fp, r3
1000baae:	d1ec      	bne.n	1000ba8a <__ledf2+0x6a>
1000bab0:	42ac      	cmp	r4, r5
1000bab2:	dcea      	bgt.n	1000ba8a <__ledf2+0x6a>
1000bab4:	db05      	blt.n	1000bac2 <__ledf2+0xa2>
1000bab6:	45bc      	cmp	ip, r7
1000bab8:	d8e7      	bhi.n	1000ba8a <__ledf2+0x6a>
1000baba:	d00f      	beq.n	1000badc <__ledf2+0xbc>
1000babc:	2000      	movs	r0, #0
1000babe:	45bc      	cmp	ip, r7
1000bac0:	d2e8      	bcs.n	1000ba94 <__ledf2+0x74>
1000bac2:	4658      	mov	r0, fp
1000bac4:	4241      	negs	r1, r0
1000bac6:	4148      	adcs	r0, r1
1000bac8:	4241      	negs	r1, r0
1000baca:	2001      	movs	r0, #1
1000bacc:	4308      	orrs	r0, r1
1000bace:	e7e1      	b.n	1000ba94 <__ledf2+0x74>
1000bad0:	433a      	orrs	r2, r7
1000bad2:	d1c7      	bne.n	1000ba64 <__ledf2+0x44>
1000bad4:	2000      	movs	r0, #0
1000bad6:	2e00      	cmp	r6, #0
1000bad8:	d1dc      	bne.n	1000ba94 <__ledf2+0x74>
1000bada:	e7d6      	b.n	1000ba8a <__ledf2+0x6a>
1000badc:	45c8      	cmp	r8, r9
1000bade:	d8d4      	bhi.n	1000ba8a <__ledf2+0x6a>
1000bae0:	2000      	movs	r0, #0
1000bae2:	45c8      	cmp	r8, r9
1000bae4:	d3ed      	bcc.n	1000bac2 <__ledf2+0xa2>
1000bae6:	e7d5      	b.n	1000ba94 <__ledf2+0x74>
1000bae8:	000007ff 	.word	0x000007ff

1000baec <__aeabi_dmul>:
1000baec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000baee:	465f      	mov	r7, fp
1000baf0:	4656      	mov	r6, sl
1000baf2:	464d      	mov	r5, r9
1000baf4:	4644      	mov	r4, r8
1000baf6:	b4f0      	push	{r4, r5, r6, r7}
1000baf8:	1c05      	adds	r5, r0, #0
1000bafa:	1c06      	adds	r6, r0, #0
1000bafc:	0308      	lsls	r0, r1, #12
1000bafe:	b087      	sub	sp, #28
1000bb00:	4699      	mov	r9, r3
1000bb02:	004f      	lsls	r7, r1, #1
1000bb04:	0b03      	lsrs	r3, r0, #12
1000bb06:	0fcc      	lsrs	r4, r1, #31
1000bb08:	4692      	mov	sl, r2
1000bb0a:	469b      	mov	fp, r3
1000bb0c:	0d7f      	lsrs	r7, r7, #21
1000bb0e:	9401      	str	r4, [sp, #4]
1000bb10:	d067      	beq.n	1000bbe2 <__aeabi_dmul+0xf6>
1000bb12:	4b6c      	ldr	r3, [pc, #432]	; (1000bcc4 <__aeabi_dmul+0x1d8>)
1000bb14:	429f      	cmp	r7, r3
1000bb16:	d036      	beq.n	1000bb86 <__aeabi_dmul+0x9a>
1000bb18:	2080      	movs	r0, #128	; 0x80
1000bb1a:	465b      	mov	r3, fp
1000bb1c:	0340      	lsls	r0, r0, #13
1000bb1e:	4318      	orrs	r0, r3
1000bb20:	00c0      	lsls	r0, r0, #3
1000bb22:	0f6b      	lsrs	r3, r5, #29
1000bb24:	4318      	orrs	r0, r3
1000bb26:	4b68      	ldr	r3, [pc, #416]	; (1000bcc8 <__aeabi_dmul+0x1dc>)
1000bb28:	4683      	mov	fp, r0
1000bb2a:	469c      	mov	ip, r3
1000bb2c:	2300      	movs	r3, #0
1000bb2e:	4698      	mov	r8, r3
1000bb30:	00ee      	lsls	r6, r5, #3
1000bb32:	4467      	add	r7, ip
1000bb34:	9300      	str	r3, [sp, #0]
1000bb36:	464b      	mov	r3, r9
1000bb38:	4649      	mov	r1, r9
1000bb3a:	031d      	lsls	r5, r3, #12
1000bb3c:	0fc9      	lsrs	r1, r1, #31
1000bb3e:	005b      	lsls	r3, r3, #1
1000bb40:	4652      	mov	r2, sl
1000bb42:	0b2d      	lsrs	r5, r5, #12
1000bb44:	0d5b      	lsrs	r3, r3, #21
1000bb46:	4689      	mov	r9, r1
1000bb48:	d100      	bne.n	1000bb4c <__aeabi_dmul+0x60>
1000bb4a:	e06e      	b.n	1000bc2a <__aeabi_dmul+0x13e>
1000bb4c:	495d      	ldr	r1, [pc, #372]	; (1000bcc4 <__aeabi_dmul+0x1d8>)
1000bb4e:	428b      	cmp	r3, r1
1000bb50:	d064      	beq.n	1000bc1c <__aeabi_dmul+0x130>
1000bb52:	2080      	movs	r0, #128	; 0x80
1000bb54:	495c      	ldr	r1, [pc, #368]	; (1000bcc8 <__aeabi_dmul+0x1dc>)
1000bb56:	0340      	lsls	r0, r0, #13
1000bb58:	468c      	mov	ip, r1
1000bb5a:	2100      	movs	r1, #0
1000bb5c:	4305      	orrs	r5, r0
1000bb5e:	00ed      	lsls	r5, r5, #3
1000bb60:	0f50      	lsrs	r0, r2, #29
1000bb62:	4305      	orrs	r5, r0
1000bb64:	00d2      	lsls	r2, r2, #3
1000bb66:	4463      	add	r3, ip
1000bb68:	4648      	mov	r0, r9
1000bb6a:	18ff      	adds	r7, r7, r3
1000bb6c:	1c7b      	adds	r3, r7, #1
1000bb6e:	469a      	mov	sl, r3
1000bb70:	9b00      	ldr	r3, [sp, #0]
1000bb72:	4060      	eors	r0, r4
1000bb74:	9002      	str	r0, [sp, #8]
1000bb76:	430b      	orrs	r3, r1
1000bb78:	2b0f      	cmp	r3, #15
1000bb7a:	d900      	bls.n	1000bb7e <__aeabi_dmul+0x92>
1000bb7c:	e0ac      	b.n	1000bcd8 <__aeabi_dmul+0x1ec>
1000bb7e:	4853      	ldr	r0, [pc, #332]	; (1000bccc <__aeabi_dmul+0x1e0>)
1000bb80:	009b      	lsls	r3, r3, #2
1000bb82:	58c3      	ldr	r3, [r0, r3]
1000bb84:	469f      	mov	pc, r3
1000bb86:	465b      	mov	r3, fp
1000bb88:	431d      	orrs	r5, r3
1000bb8a:	d000      	beq.n	1000bb8e <__aeabi_dmul+0xa2>
1000bb8c:	e082      	b.n	1000bc94 <__aeabi_dmul+0x1a8>
1000bb8e:	2308      	movs	r3, #8
1000bb90:	9300      	str	r3, [sp, #0]
1000bb92:	2300      	movs	r3, #0
1000bb94:	469b      	mov	fp, r3
1000bb96:	3302      	adds	r3, #2
1000bb98:	2600      	movs	r6, #0
1000bb9a:	4698      	mov	r8, r3
1000bb9c:	e7cb      	b.n	1000bb36 <__aeabi_dmul+0x4a>
1000bb9e:	9b02      	ldr	r3, [sp, #8]
1000bba0:	9301      	str	r3, [sp, #4]
1000bba2:	4643      	mov	r3, r8
1000bba4:	2b02      	cmp	r3, #2
1000bba6:	d159      	bne.n	1000bc5c <__aeabi_dmul+0x170>
1000bba8:	2401      	movs	r4, #1
1000bbaa:	2500      	movs	r5, #0
1000bbac:	2600      	movs	r6, #0
1000bbae:	9b01      	ldr	r3, [sp, #4]
1000bbb0:	401c      	ands	r4, r3
1000bbb2:	4b44      	ldr	r3, [pc, #272]	; (1000bcc4 <__aeabi_dmul+0x1d8>)
1000bbb4:	2100      	movs	r1, #0
1000bbb6:	032d      	lsls	r5, r5, #12
1000bbb8:	0d0a      	lsrs	r2, r1, #20
1000bbba:	0512      	lsls	r2, r2, #20
1000bbbc:	0b2d      	lsrs	r5, r5, #12
1000bbbe:	4315      	orrs	r5, r2
1000bbc0:	4a43      	ldr	r2, [pc, #268]	; (1000bcd0 <__aeabi_dmul+0x1e4>)
1000bbc2:	051b      	lsls	r3, r3, #20
1000bbc4:	4015      	ands	r5, r2
1000bbc6:	431d      	orrs	r5, r3
1000bbc8:	006d      	lsls	r5, r5, #1
1000bbca:	07e4      	lsls	r4, r4, #31
1000bbcc:	086d      	lsrs	r5, r5, #1
1000bbce:	4325      	orrs	r5, r4
1000bbd0:	1c30      	adds	r0, r6, #0
1000bbd2:	1c29      	adds	r1, r5, #0
1000bbd4:	b007      	add	sp, #28
1000bbd6:	bc3c      	pop	{r2, r3, r4, r5}
1000bbd8:	4690      	mov	r8, r2
1000bbda:	4699      	mov	r9, r3
1000bbdc:	46a2      	mov	sl, r4
1000bbde:	46ab      	mov	fp, r5
1000bbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bbe2:	432b      	orrs	r3, r5
1000bbe4:	d04e      	beq.n	1000bc84 <__aeabi_dmul+0x198>
1000bbe6:	465b      	mov	r3, fp
1000bbe8:	2b00      	cmp	r3, #0
1000bbea:	d100      	bne.n	1000bbee <__aeabi_dmul+0x102>
1000bbec:	e185      	b.n	1000befa <__aeabi_dmul+0x40e>
1000bbee:	4658      	mov	r0, fp
1000bbf0:	f7fe f8da 	bl	10009da8 <__clzsi2>
1000bbf4:	1c02      	adds	r2, r0, #0
1000bbf6:	2328      	movs	r3, #40	; 0x28
1000bbf8:	1c29      	adds	r1, r5, #0
1000bbfa:	1a9b      	subs	r3, r3, r2
1000bbfc:	1c16      	adds	r6, r2, #0
1000bbfe:	4658      	mov	r0, fp
1000bc00:	40d9      	lsrs	r1, r3
1000bc02:	3e08      	subs	r6, #8
1000bc04:	40b0      	lsls	r0, r6
1000bc06:	1c0b      	adds	r3, r1, #0
1000bc08:	40b5      	lsls	r5, r6
1000bc0a:	4303      	orrs	r3, r0
1000bc0c:	469b      	mov	fp, r3
1000bc0e:	1c2e      	adds	r6, r5, #0
1000bc10:	2300      	movs	r3, #0
1000bc12:	4f30      	ldr	r7, [pc, #192]	; (1000bcd4 <__aeabi_dmul+0x1e8>)
1000bc14:	9300      	str	r3, [sp, #0]
1000bc16:	1abf      	subs	r7, r7, r2
1000bc18:	4698      	mov	r8, r3
1000bc1a:	e78c      	b.n	1000bb36 <__aeabi_dmul+0x4a>
1000bc1c:	4651      	mov	r1, sl
1000bc1e:	4329      	orrs	r1, r5
1000bc20:	d12e      	bne.n	1000bc80 <__aeabi_dmul+0x194>
1000bc22:	2500      	movs	r5, #0
1000bc24:	2200      	movs	r2, #0
1000bc26:	2102      	movs	r1, #2
1000bc28:	e79e      	b.n	1000bb68 <__aeabi_dmul+0x7c>
1000bc2a:	4651      	mov	r1, sl
1000bc2c:	4329      	orrs	r1, r5
1000bc2e:	d023      	beq.n	1000bc78 <__aeabi_dmul+0x18c>
1000bc30:	2d00      	cmp	r5, #0
1000bc32:	d100      	bne.n	1000bc36 <__aeabi_dmul+0x14a>
1000bc34:	e154      	b.n	1000bee0 <__aeabi_dmul+0x3f4>
1000bc36:	1c28      	adds	r0, r5, #0
1000bc38:	f7fe f8b6 	bl	10009da8 <__clzsi2>
1000bc3c:	1c03      	adds	r3, r0, #0
1000bc3e:	2128      	movs	r1, #40	; 0x28
1000bc40:	4650      	mov	r0, sl
1000bc42:	1ac9      	subs	r1, r1, r3
1000bc44:	1c1a      	adds	r2, r3, #0
1000bc46:	40c8      	lsrs	r0, r1
1000bc48:	4651      	mov	r1, sl
1000bc4a:	3a08      	subs	r2, #8
1000bc4c:	4091      	lsls	r1, r2
1000bc4e:	4095      	lsls	r5, r2
1000bc50:	1c0a      	adds	r2, r1, #0
1000bc52:	4305      	orrs	r5, r0
1000bc54:	481f      	ldr	r0, [pc, #124]	; (1000bcd4 <__aeabi_dmul+0x1e8>)
1000bc56:	2100      	movs	r1, #0
1000bc58:	1ac3      	subs	r3, r0, r3
1000bc5a:	e785      	b.n	1000bb68 <__aeabi_dmul+0x7c>
1000bc5c:	2b03      	cmp	r3, #3
1000bc5e:	d100      	bne.n	1000bc62 <__aeabi_dmul+0x176>
1000bc60:	e1c2      	b.n	1000bfe8 <__aeabi_dmul+0x4fc>
1000bc62:	2b01      	cmp	r3, #1
1000bc64:	d000      	beq.n	1000bc68 <__aeabi_dmul+0x17c>
1000bc66:	e16d      	b.n	1000bf44 <__aeabi_dmul+0x458>
1000bc68:	4644      	mov	r4, r8
1000bc6a:	9b01      	ldr	r3, [sp, #4]
1000bc6c:	2500      	movs	r5, #0
1000bc6e:	401c      	ands	r4, r3
1000bc70:	b2e4      	uxtb	r4, r4
1000bc72:	2300      	movs	r3, #0
1000bc74:	2600      	movs	r6, #0
1000bc76:	e79d      	b.n	1000bbb4 <__aeabi_dmul+0xc8>
1000bc78:	2500      	movs	r5, #0
1000bc7a:	2200      	movs	r2, #0
1000bc7c:	2101      	movs	r1, #1
1000bc7e:	e773      	b.n	1000bb68 <__aeabi_dmul+0x7c>
1000bc80:	2103      	movs	r1, #3
1000bc82:	e771      	b.n	1000bb68 <__aeabi_dmul+0x7c>
1000bc84:	2304      	movs	r3, #4
1000bc86:	9300      	str	r3, [sp, #0]
1000bc88:	2300      	movs	r3, #0
1000bc8a:	469b      	mov	fp, r3
1000bc8c:	3301      	adds	r3, #1
1000bc8e:	2600      	movs	r6, #0
1000bc90:	4698      	mov	r8, r3
1000bc92:	e750      	b.n	1000bb36 <__aeabi_dmul+0x4a>
1000bc94:	230c      	movs	r3, #12
1000bc96:	9300      	str	r3, [sp, #0]
1000bc98:	3b09      	subs	r3, #9
1000bc9a:	4698      	mov	r8, r3
1000bc9c:	e74b      	b.n	1000bb36 <__aeabi_dmul+0x4a>
1000bc9e:	2580      	movs	r5, #128	; 0x80
1000bca0:	2400      	movs	r4, #0
1000bca2:	032d      	lsls	r5, r5, #12
1000bca4:	2600      	movs	r6, #0
1000bca6:	4b07      	ldr	r3, [pc, #28]	; (1000bcc4 <__aeabi_dmul+0x1d8>)
1000bca8:	e784      	b.n	1000bbb4 <__aeabi_dmul+0xc8>
1000bcaa:	464b      	mov	r3, r9
1000bcac:	46ab      	mov	fp, r5
1000bcae:	1c16      	adds	r6, r2, #0
1000bcb0:	9301      	str	r3, [sp, #4]
1000bcb2:	4688      	mov	r8, r1
1000bcb4:	e775      	b.n	1000bba2 <__aeabi_dmul+0xb6>
1000bcb6:	9b02      	ldr	r3, [sp, #8]
1000bcb8:	46ab      	mov	fp, r5
1000bcba:	1c16      	adds	r6, r2, #0
1000bcbc:	9301      	str	r3, [sp, #4]
1000bcbe:	4688      	mov	r8, r1
1000bcc0:	e76f      	b.n	1000bba2 <__aeabi_dmul+0xb6>
1000bcc2:	46c0      	nop			; (mov r8, r8)
1000bcc4:	000007ff 	.word	0x000007ff
1000bcc8:	fffffc01 	.word	0xfffffc01
1000bccc:	1000d488 	.word	0x1000d488
1000bcd0:	800fffff 	.word	0x800fffff
1000bcd4:	fffffc0d 	.word	0xfffffc0d
1000bcd8:	0c33      	lsrs	r3, r6, #16
1000bcda:	0436      	lsls	r6, r6, #16
1000bcdc:	0c36      	lsrs	r6, r6, #16
1000bcde:	469c      	mov	ip, r3
1000bce0:	1c33      	adds	r3, r6, #0
1000bce2:	0c14      	lsrs	r4, r2, #16
1000bce4:	0412      	lsls	r2, r2, #16
1000bce6:	0c12      	lsrs	r2, r2, #16
1000bce8:	4353      	muls	r3, r2
1000bcea:	4698      	mov	r8, r3
1000bcec:	4663      	mov	r3, ip
1000bcee:	4353      	muls	r3, r2
1000bcf0:	4699      	mov	r9, r3
1000bcf2:	4663      	mov	r3, ip
1000bcf4:	4363      	muls	r3, r4
1000bcf6:	9301      	str	r3, [sp, #4]
1000bcf8:	1c33      	adds	r3, r6, #0
1000bcfa:	4641      	mov	r1, r8
1000bcfc:	4363      	muls	r3, r4
1000bcfe:	0c09      	lsrs	r1, r1, #16
1000bd00:	444b      	add	r3, r9
1000bd02:	185b      	adds	r3, r3, r1
1000bd04:	4599      	cmp	r9, r3
1000bd06:	d905      	bls.n	1000bd14 <__aeabi_dmul+0x228>
1000bd08:	2080      	movs	r0, #128	; 0x80
1000bd0a:	0240      	lsls	r0, r0, #9
1000bd0c:	4681      	mov	r9, r0
1000bd0e:	9901      	ldr	r1, [sp, #4]
1000bd10:	4449      	add	r1, r9
1000bd12:	9101      	str	r1, [sp, #4]
1000bd14:	0c19      	lsrs	r1, r3, #16
1000bd16:	9103      	str	r1, [sp, #12]
1000bd18:	4641      	mov	r1, r8
1000bd1a:	0409      	lsls	r1, r1, #16
1000bd1c:	0c09      	lsrs	r1, r1, #16
1000bd1e:	041b      	lsls	r3, r3, #16
1000bd20:	185b      	adds	r3, r3, r1
1000bd22:	9304      	str	r3, [sp, #16]
1000bd24:	0c2b      	lsrs	r3, r5, #16
1000bd26:	4698      	mov	r8, r3
1000bd28:	1c33      	adds	r3, r6, #0
1000bd2a:	042d      	lsls	r5, r5, #16
1000bd2c:	0c29      	lsrs	r1, r5, #16
1000bd2e:	434b      	muls	r3, r1
1000bd30:	4660      	mov	r0, ip
1000bd32:	9300      	str	r3, [sp, #0]
1000bd34:	4643      	mov	r3, r8
1000bd36:	4665      	mov	r5, ip
1000bd38:	4358      	muls	r0, r3
1000bd3a:	435e      	muls	r6, r3
1000bd3c:	9b00      	ldr	r3, [sp, #0]
1000bd3e:	434d      	muls	r5, r1
1000bd40:	0c1b      	lsrs	r3, r3, #16
1000bd42:	4699      	mov	r9, r3
1000bd44:	19ae      	adds	r6, r5, r6
1000bd46:	444e      	add	r6, r9
1000bd48:	4684      	mov	ip, r0
1000bd4a:	42b5      	cmp	r5, r6
1000bd4c:	d903      	bls.n	1000bd56 <__aeabi_dmul+0x26a>
1000bd4e:	2380      	movs	r3, #128	; 0x80
1000bd50:	025b      	lsls	r3, r3, #9
1000bd52:	4699      	mov	r9, r3
1000bd54:	44cc      	add	ip, r9
1000bd56:	0c35      	lsrs	r5, r6, #16
1000bd58:	1c2b      	adds	r3, r5, #0
1000bd5a:	9803      	ldr	r0, [sp, #12]
1000bd5c:	4463      	add	r3, ip
1000bd5e:	4684      	mov	ip, r0
1000bd60:	9305      	str	r3, [sp, #20]
1000bd62:	9b00      	ldr	r3, [sp, #0]
1000bd64:	0436      	lsls	r6, r6, #16
1000bd66:	041b      	lsls	r3, r3, #16
1000bd68:	0c1b      	lsrs	r3, r3, #16
1000bd6a:	18f3      	adds	r3, r6, r3
1000bd6c:	449c      	add	ip, r3
1000bd6e:	4660      	mov	r0, ip
1000bd70:	9003      	str	r0, [sp, #12]
1000bd72:	4658      	mov	r0, fp
1000bd74:	0405      	lsls	r5, r0, #16
1000bd76:	0c06      	lsrs	r6, r0, #16
1000bd78:	0c28      	lsrs	r0, r5, #16
1000bd7a:	4684      	mov	ip, r0
1000bd7c:	4350      	muls	r0, r2
1000bd7e:	1c35      	adds	r5, r6, #0
1000bd80:	4681      	mov	r9, r0
1000bd82:	4660      	mov	r0, ip
1000bd84:	4365      	muls	r5, r4
1000bd86:	4344      	muls	r4, r0
1000bd88:	4648      	mov	r0, r9
1000bd8a:	0c00      	lsrs	r0, r0, #16
1000bd8c:	4683      	mov	fp, r0
1000bd8e:	4372      	muls	r2, r6
1000bd90:	1914      	adds	r4, r2, r4
1000bd92:	445c      	add	r4, fp
1000bd94:	42a2      	cmp	r2, r4
1000bd96:	d903      	bls.n	1000bda0 <__aeabi_dmul+0x2b4>
1000bd98:	2280      	movs	r2, #128	; 0x80
1000bd9a:	0252      	lsls	r2, r2, #9
1000bd9c:	4693      	mov	fp, r2
1000bd9e:	445d      	add	r5, fp
1000bda0:	0c22      	lsrs	r2, r4, #16
1000bda2:	18ad      	adds	r5, r5, r2
1000bda4:	464a      	mov	r2, r9
1000bda6:	0412      	lsls	r2, r2, #16
1000bda8:	0c12      	lsrs	r2, r2, #16
1000bdaa:	0424      	lsls	r4, r4, #16
1000bdac:	4640      	mov	r0, r8
1000bdae:	18a4      	adds	r4, r4, r2
1000bdb0:	4662      	mov	r2, ip
1000bdb2:	434a      	muls	r2, r1
1000bdb4:	4371      	muls	r1, r6
1000bdb6:	4346      	muls	r6, r0
1000bdb8:	4660      	mov	r0, ip
1000bdba:	9600      	str	r6, [sp, #0]
1000bdbc:	4646      	mov	r6, r8
1000bdbe:	4370      	muls	r0, r6
1000bdc0:	4680      	mov	r8, r0
1000bdc2:	0c10      	lsrs	r0, r2, #16
1000bdc4:	4684      	mov	ip, r0
1000bdc6:	4488      	add	r8, r1
1000bdc8:	44e0      	add	r8, ip
1000bdca:	4541      	cmp	r1, r8
1000bdcc:	d905      	bls.n	1000bdda <__aeabi_dmul+0x2ee>
1000bdce:	2180      	movs	r1, #128	; 0x80
1000bdd0:	0249      	lsls	r1, r1, #9
1000bdd2:	468c      	mov	ip, r1
1000bdd4:	9900      	ldr	r1, [sp, #0]
1000bdd6:	4461      	add	r1, ip
1000bdd8:	9100      	str	r1, [sp, #0]
1000bdda:	9801      	ldr	r0, [sp, #4]
1000bddc:	9903      	ldr	r1, [sp, #12]
1000bdde:	4684      	mov	ip, r0
1000bde0:	4461      	add	r1, ip
1000bde2:	4299      	cmp	r1, r3
1000bde4:	419b      	sbcs	r3, r3
1000bde6:	425b      	negs	r3, r3
1000bde8:	4699      	mov	r9, r3
1000bdea:	9805      	ldr	r0, [sp, #20]
1000bdec:	4643      	mov	r3, r8
1000bdee:	4684      	mov	ip, r0
1000bdf0:	0412      	lsls	r2, r2, #16
1000bdf2:	0c12      	lsrs	r2, r2, #16
1000bdf4:	041b      	lsls	r3, r3, #16
1000bdf6:	189b      	adds	r3, r3, r2
1000bdf8:	4463      	add	r3, ip
1000bdfa:	469c      	mov	ip, r3
1000bdfc:	46ab      	mov	fp, r5
1000bdfe:	4283      	cmp	r3, r0
1000be00:	419b      	sbcs	r3, r3
1000be02:	4640      	mov	r0, r8
1000be04:	190a      	adds	r2, r1, r4
1000be06:	44cc      	add	ip, r9
1000be08:	42a2      	cmp	r2, r4
1000be0a:	4189      	sbcs	r1, r1
1000be0c:	44e3      	add	fp, ip
1000be0e:	45cc      	cmp	ip, r9
1000be10:	41b6      	sbcs	r6, r6
1000be12:	465c      	mov	r4, fp
1000be14:	0c00      	lsrs	r0, r0, #16
1000be16:	4680      	mov	r8, r0
1000be18:	4249      	negs	r1, r1
1000be1a:	4276      	negs	r6, r6
1000be1c:	425b      	negs	r3, r3
1000be1e:	1864      	adds	r4, r4, r1
1000be20:	4333      	orrs	r3, r6
1000be22:	4498      	add	r8, r3
1000be24:	428c      	cmp	r4, r1
1000be26:	4189      	sbcs	r1, r1
1000be28:	45ab      	cmp	fp, r5
1000be2a:	419b      	sbcs	r3, r3
1000be2c:	4249      	negs	r1, r1
1000be2e:	425b      	negs	r3, r3
1000be30:	4319      	orrs	r1, r3
1000be32:	1c0d      	adds	r5, r1, #0
1000be34:	9b00      	ldr	r3, [sp, #0]
1000be36:	4445      	add	r5, r8
1000be38:	18ee      	adds	r6, r5, r3
1000be3a:	0276      	lsls	r6, r6, #9
1000be3c:	0de5      	lsrs	r5, r4, #23
1000be3e:	432e      	orrs	r6, r5
1000be40:	46b3      	mov	fp, r6
1000be42:	9b04      	ldr	r3, [sp, #16]
1000be44:	0256      	lsls	r6, r2, #9
1000be46:	431e      	orrs	r6, r3
1000be48:	1e73      	subs	r3, r6, #1
1000be4a:	419e      	sbcs	r6, r3
1000be4c:	465b      	mov	r3, fp
1000be4e:	0dd2      	lsrs	r2, r2, #23
1000be50:	4332      	orrs	r2, r6
1000be52:	0266      	lsls	r6, r4, #9
1000be54:	4316      	orrs	r6, r2
1000be56:	01db      	lsls	r3, r3, #7
1000be58:	d50a      	bpl.n	1000be70 <__aeabi_dmul+0x384>
1000be5a:	2301      	movs	r3, #1
1000be5c:	4033      	ands	r3, r6
1000be5e:	0876      	lsrs	r6, r6, #1
1000be60:	431e      	orrs	r6, r3
1000be62:	465b      	mov	r3, fp
1000be64:	07db      	lsls	r3, r3, #31
1000be66:	431e      	orrs	r6, r3
1000be68:	465b      	mov	r3, fp
1000be6a:	085b      	lsrs	r3, r3, #1
1000be6c:	469b      	mov	fp, r3
1000be6e:	4657      	mov	r7, sl
1000be70:	4b63      	ldr	r3, [pc, #396]	; (1000c000 <__aeabi_dmul+0x514>)
1000be72:	18fb      	adds	r3, r7, r3
1000be74:	2b00      	cmp	r3, #0
1000be76:	dd5a      	ble.n	1000bf2e <__aeabi_dmul+0x442>
1000be78:	0772      	lsls	r2, r6, #29
1000be7a:	d009      	beq.n	1000be90 <__aeabi_dmul+0x3a4>
1000be7c:	220f      	movs	r2, #15
1000be7e:	4032      	ands	r2, r6
1000be80:	2a04      	cmp	r2, #4
1000be82:	d005      	beq.n	1000be90 <__aeabi_dmul+0x3a4>
1000be84:	1d32      	adds	r2, r6, #4
1000be86:	42b2      	cmp	r2, r6
1000be88:	41b6      	sbcs	r6, r6
1000be8a:	4276      	negs	r6, r6
1000be8c:	44b3      	add	fp, r6
1000be8e:	1c16      	adds	r6, r2, #0
1000be90:	465a      	mov	r2, fp
1000be92:	01d2      	lsls	r2, r2, #7
1000be94:	d506      	bpl.n	1000bea4 <__aeabi_dmul+0x3b8>
1000be96:	465a      	mov	r2, fp
1000be98:	4b5a      	ldr	r3, [pc, #360]	; (1000c004 <__aeabi_dmul+0x518>)
1000be9a:	401a      	ands	r2, r3
1000be9c:	2380      	movs	r3, #128	; 0x80
1000be9e:	4693      	mov	fp, r2
1000bea0:	00db      	lsls	r3, r3, #3
1000bea2:	18fb      	adds	r3, r7, r3
1000bea4:	4a58      	ldr	r2, [pc, #352]	; (1000c008 <__aeabi_dmul+0x51c>)
1000bea6:	4293      	cmp	r3, r2
1000bea8:	dd34      	ble.n	1000bf14 <__aeabi_dmul+0x428>
1000beaa:	2401      	movs	r4, #1
1000beac:	9b02      	ldr	r3, [sp, #8]
1000beae:	2500      	movs	r5, #0
1000beb0:	401c      	ands	r4, r3
1000beb2:	2600      	movs	r6, #0
1000beb4:	4b55      	ldr	r3, [pc, #340]	; (1000c00c <__aeabi_dmul+0x520>)
1000beb6:	e67d      	b.n	1000bbb4 <__aeabi_dmul+0xc8>
1000beb8:	2080      	movs	r0, #128	; 0x80
1000beba:	465b      	mov	r3, fp
1000bebc:	0300      	lsls	r0, r0, #12
1000bebe:	4203      	tst	r3, r0
1000bec0:	d008      	beq.n	1000bed4 <__aeabi_dmul+0x3e8>
1000bec2:	4205      	tst	r5, r0
1000bec4:	d106      	bne.n	1000bed4 <__aeabi_dmul+0x3e8>
1000bec6:	4305      	orrs	r5, r0
1000bec8:	032d      	lsls	r5, r5, #12
1000beca:	0b2d      	lsrs	r5, r5, #12
1000becc:	464c      	mov	r4, r9
1000bece:	1c16      	adds	r6, r2, #0
1000bed0:	4b4e      	ldr	r3, [pc, #312]	; (1000c00c <__aeabi_dmul+0x520>)
1000bed2:	e66f      	b.n	1000bbb4 <__aeabi_dmul+0xc8>
1000bed4:	465d      	mov	r5, fp
1000bed6:	4305      	orrs	r5, r0
1000bed8:	032d      	lsls	r5, r5, #12
1000beda:	0b2d      	lsrs	r5, r5, #12
1000bedc:	4b4b      	ldr	r3, [pc, #300]	; (1000c00c <__aeabi_dmul+0x520>)
1000bede:	e669      	b.n	1000bbb4 <__aeabi_dmul+0xc8>
1000bee0:	4650      	mov	r0, sl
1000bee2:	f7fd ff61 	bl	10009da8 <__clzsi2>
1000bee6:	1c03      	adds	r3, r0, #0
1000bee8:	3320      	adds	r3, #32
1000beea:	2b27      	cmp	r3, #39	; 0x27
1000beec:	dc00      	bgt.n	1000bef0 <__aeabi_dmul+0x404>
1000beee:	e6a6      	b.n	1000bc3e <__aeabi_dmul+0x152>
1000bef0:	4655      	mov	r5, sl
1000bef2:	3808      	subs	r0, #8
1000bef4:	4085      	lsls	r5, r0
1000bef6:	2200      	movs	r2, #0
1000bef8:	e6ac      	b.n	1000bc54 <__aeabi_dmul+0x168>
1000befa:	1c28      	adds	r0, r5, #0
1000befc:	f7fd ff54 	bl	10009da8 <__clzsi2>
1000bf00:	1c02      	adds	r2, r0, #0
1000bf02:	3220      	adds	r2, #32
1000bf04:	2a27      	cmp	r2, #39	; 0x27
1000bf06:	dc00      	bgt.n	1000bf0a <__aeabi_dmul+0x41e>
1000bf08:	e675      	b.n	1000bbf6 <__aeabi_dmul+0x10a>
1000bf0a:	3808      	subs	r0, #8
1000bf0c:	4085      	lsls	r5, r0
1000bf0e:	2600      	movs	r6, #0
1000bf10:	46ab      	mov	fp, r5
1000bf12:	e67d      	b.n	1000bc10 <__aeabi_dmul+0x124>
1000bf14:	465a      	mov	r2, fp
1000bf16:	08f6      	lsrs	r6, r6, #3
1000bf18:	0752      	lsls	r2, r2, #29
1000bf1a:	4316      	orrs	r6, r2
1000bf1c:	465a      	mov	r2, fp
1000bf1e:	2401      	movs	r4, #1
1000bf20:	0255      	lsls	r5, r2, #9
1000bf22:	9a02      	ldr	r2, [sp, #8]
1000bf24:	055b      	lsls	r3, r3, #21
1000bf26:	0b2d      	lsrs	r5, r5, #12
1000bf28:	0d5b      	lsrs	r3, r3, #21
1000bf2a:	4014      	ands	r4, r2
1000bf2c:	e642      	b.n	1000bbb4 <__aeabi_dmul+0xc8>
1000bf2e:	4d38      	ldr	r5, [pc, #224]	; (1000c010 <__aeabi_dmul+0x524>)
1000bf30:	1bed      	subs	r5, r5, r7
1000bf32:	2d38      	cmp	r5, #56	; 0x38
1000bf34:	dd0a      	ble.n	1000bf4c <__aeabi_dmul+0x460>
1000bf36:	2401      	movs	r4, #1
1000bf38:	9b02      	ldr	r3, [sp, #8]
1000bf3a:	2500      	movs	r5, #0
1000bf3c:	401c      	ands	r4, r3
1000bf3e:	2600      	movs	r6, #0
1000bf40:	2300      	movs	r3, #0
1000bf42:	e637      	b.n	1000bbb4 <__aeabi_dmul+0xc8>
1000bf44:	9b01      	ldr	r3, [sp, #4]
1000bf46:	4657      	mov	r7, sl
1000bf48:	9302      	str	r3, [sp, #8]
1000bf4a:	e791      	b.n	1000be70 <__aeabi_dmul+0x384>
1000bf4c:	2d1f      	cmp	r5, #31
1000bf4e:	dc25      	bgt.n	1000bf9c <__aeabi_dmul+0x4b0>
1000bf50:	4b30      	ldr	r3, [pc, #192]	; (1000c014 <__aeabi_dmul+0x528>)
1000bf52:	1c32      	adds	r2, r6, #0
1000bf54:	469c      	mov	ip, r3
1000bf56:	4467      	add	r7, ip
1000bf58:	40be      	lsls	r6, r7
1000bf5a:	465b      	mov	r3, fp
1000bf5c:	40bb      	lsls	r3, r7
1000bf5e:	1c37      	adds	r7, r6, #0
1000bf60:	40ea      	lsrs	r2, r5
1000bf62:	1e7e      	subs	r6, r7, #1
1000bf64:	41b7      	sbcs	r7, r6
1000bf66:	4313      	orrs	r3, r2
1000bf68:	433b      	orrs	r3, r7
1000bf6a:	1c1e      	adds	r6, r3, #0
1000bf6c:	465b      	mov	r3, fp
1000bf6e:	40eb      	lsrs	r3, r5
1000bf70:	1c1d      	adds	r5, r3, #0
1000bf72:	0773      	lsls	r3, r6, #29
1000bf74:	d009      	beq.n	1000bf8a <__aeabi_dmul+0x49e>
1000bf76:	230f      	movs	r3, #15
1000bf78:	4033      	ands	r3, r6
1000bf7a:	2b04      	cmp	r3, #4
1000bf7c:	d005      	beq.n	1000bf8a <__aeabi_dmul+0x49e>
1000bf7e:	1d33      	adds	r3, r6, #4
1000bf80:	42b3      	cmp	r3, r6
1000bf82:	41b6      	sbcs	r6, r6
1000bf84:	4276      	negs	r6, r6
1000bf86:	19ad      	adds	r5, r5, r6
1000bf88:	1c1e      	adds	r6, r3, #0
1000bf8a:	022b      	lsls	r3, r5, #8
1000bf8c:	d520      	bpl.n	1000bfd0 <__aeabi_dmul+0x4e4>
1000bf8e:	2401      	movs	r4, #1
1000bf90:	9b02      	ldr	r3, [sp, #8]
1000bf92:	2500      	movs	r5, #0
1000bf94:	401c      	ands	r4, r3
1000bf96:	2600      	movs	r6, #0
1000bf98:	2301      	movs	r3, #1
1000bf9a:	e60b      	b.n	1000bbb4 <__aeabi_dmul+0xc8>
1000bf9c:	465a      	mov	r2, fp
1000bf9e:	4b1e      	ldr	r3, [pc, #120]	; (1000c018 <__aeabi_dmul+0x52c>)
1000bfa0:	1bdb      	subs	r3, r3, r7
1000bfa2:	40da      	lsrs	r2, r3
1000bfa4:	1c13      	adds	r3, r2, #0
1000bfa6:	2d20      	cmp	r5, #32
1000bfa8:	d01c      	beq.n	1000bfe4 <__aeabi_dmul+0x4f8>
1000bfaa:	4a1c      	ldr	r2, [pc, #112]	; (1000c01c <__aeabi_dmul+0x530>)
1000bfac:	4694      	mov	ip, r2
1000bfae:	465a      	mov	r2, fp
1000bfb0:	4467      	add	r7, ip
1000bfb2:	40ba      	lsls	r2, r7
1000bfb4:	1c17      	adds	r7, r2, #0
1000bfb6:	433e      	orrs	r6, r7
1000bfb8:	1e72      	subs	r2, r6, #1
1000bfba:	4196      	sbcs	r6, r2
1000bfbc:	431e      	orrs	r6, r3
1000bfbe:	2307      	movs	r3, #7
1000bfc0:	2500      	movs	r5, #0
1000bfc2:	4033      	ands	r3, r6
1000bfc4:	d007      	beq.n	1000bfd6 <__aeabi_dmul+0x4ea>
1000bfc6:	230f      	movs	r3, #15
1000bfc8:	2500      	movs	r5, #0
1000bfca:	4033      	ands	r3, r6
1000bfcc:	2b04      	cmp	r3, #4
1000bfce:	d1d6      	bne.n	1000bf7e <__aeabi_dmul+0x492>
1000bfd0:	076b      	lsls	r3, r5, #29
1000bfd2:	026d      	lsls	r5, r5, #9
1000bfd4:	0b2d      	lsrs	r5, r5, #12
1000bfd6:	2401      	movs	r4, #1
1000bfd8:	08f6      	lsrs	r6, r6, #3
1000bfda:	431e      	orrs	r6, r3
1000bfdc:	9b02      	ldr	r3, [sp, #8]
1000bfde:	401c      	ands	r4, r3
1000bfe0:	2300      	movs	r3, #0
1000bfe2:	e5e7      	b.n	1000bbb4 <__aeabi_dmul+0xc8>
1000bfe4:	2700      	movs	r7, #0
1000bfe6:	e7e6      	b.n	1000bfb6 <__aeabi_dmul+0x4ca>
1000bfe8:	2580      	movs	r5, #128	; 0x80
1000bfea:	465b      	mov	r3, fp
1000bfec:	2401      	movs	r4, #1
1000bfee:	032d      	lsls	r5, r5, #12
1000bff0:	431d      	orrs	r5, r3
1000bff2:	9b01      	ldr	r3, [sp, #4]
1000bff4:	032d      	lsls	r5, r5, #12
1000bff6:	4023      	ands	r3, r4
1000bff8:	1c1c      	adds	r4, r3, #0
1000bffa:	0b2d      	lsrs	r5, r5, #12
1000bffc:	4b03      	ldr	r3, [pc, #12]	; (1000c00c <__aeabi_dmul+0x520>)
1000bffe:	e5d9      	b.n	1000bbb4 <__aeabi_dmul+0xc8>
1000c000:	000003ff 	.word	0x000003ff
1000c004:	feffffff 	.word	0xfeffffff
1000c008:	000007fe 	.word	0x000007fe
1000c00c:	000007ff 	.word	0x000007ff
1000c010:	fffffc02 	.word	0xfffffc02
1000c014:	0000041e 	.word	0x0000041e
1000c018:	fffffbe2 	.word	0xfffffbe2
1000c01c:	0000043e 	.word	0x0000043e

1000c020 <__aeabi_dsub>:
1000c020:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c022:	464d      	mov	r5, r9
1000c024:	4644      	mov	r4, r8
1000c026:	465f      	mov	r7, fp
1000c028:	4656      	mov	r6, sl
1000c02a:	b4f0      	push	{r4, r5, r6, r7}
1000c02c:	1c0e      	adds	r6, r1, #0
1000c02e:	1c11      	adds	r1, r2, #0
1000c030:	0332      	lsls	r2, r6, #12
1000c032:	0a52      	lsrs	r2, r2, #9
1000c034:	0f47      	lsrs	r7, r0, #29
1000c036:	4317      	orrs	r7, r2
1000c038:	00c5      	lsls	r5, r0, #3
1000c03a:	031a      	lsls	r2, r3, #12
1000c03c:	0058      	lsls	r0, r3, #1
1000c03e:	0fdb      	lsrs	r3, r3, #31
1000c040:	4699      	mov	r9, r3
1000c042:	0a52      	lsrs	r2, r2, #9
1000c044:	0f4b      	lsrs	r3, r1, #29
1000c046:	b083      	sub	sp, #12
1000c048:	431a      	orrs	r2, r3
1000c04a:	00cb      	lsls	r3, r1, #3
1000c04c:	9301      	str	r3, [sp, #4]
1000c04e:	4bcf      	ldr	r3, [pc, #828]	; (1000c38c <__aeabi_dsub+0x36c>)
1000c050:	0074      	lsls	r4, r6, #1
1000c052:	0ff6      	lsrs	r6, r6, #31
1000c054:	0d64      	lsrs	r4, r4, #21
1000c056:	46b0      	mov	r8, r6
1000c058:	0d40      	lsrs	r0, r0, #21
1000c05a:	4298      	cmp	r0, r3
1000c05c:	d100      	bne.n	1000c060 <__aeabi_dsub+0x40>
1000c05e:	e0e8      	b.n	1000c232 <__aeabi_dsub+0x212>
1000c060:	2301      	movs	r3, #1
1000c062:	4649      	mov	r1, r9
1000c064:	4059      	eors	r1, r3
1000c066:	1c0b      	adds	r3, r1, #0
1000c068:	429e      	cmp	r6, r3
1000c06a:	d100      	bne.n	1000c06e <__aeabi_dsub+0x4e>
1000c06c:	e0b1      	b.n	1000c1d2 <__aeabi_dsub+0x1b2>
1000c06e:	1a26      	subs	r6, r4, r0
1000c070:	2e00      	cmp	r6, #0
1000c072:	dc00      	bgt.n	1000c076 <__aeabi_dsub+0x56>
1000c074:	e11c      	b.n	1000c2b0 <__aeabi_dsub+0x290>
1000c076:	2800      	cmp	r0, #0
1000c078:	d142      	bne.n	1000c100 <__aeabi_dsub+0xe0>
1000c07a:	1c13      	adds	r3, r2, #0
1000c07c:	9901      	ldr	r1, [sp, #4]
1000c07e:	430b      	orrs	r3, r1
1000c080:	d000      	beq.n	1000c084 <__aeabi_dsub+0x64>
1000c082:	e0e6      	b.n	1000c252 <__aeabi_dsub+0x232>
1000c084:	076b      	lsls	r3, r5, #29
1000c086:	d100      	bne.n	1000c08a <__aeabi_dsub+0x6a>
1000c088:	e08e      	b.n	1000c1a8 <__aeabi_dsub+0x188>
1000c08a:	230f      	movs	r3, #15
1000c08c:	402b      	ands	r3, r5
1000c08e:	2b04      	cmp	r3, #4
1000c090:	d100      	bne.n	1000c094 <__aeabi_dsub+0x74>
1000c092:	e089      	b.n	1000c1a8 <__aeabi_dsub+0x188>
1000c094:	1d2a      	adds	r2, r5, #4
1000c096:	42aa      	cmp	r2, r5
1000c098:	41ad      	sbcs	r5, r5
1000c09a:	2380      	movs	r3, #128	; 0x80
1000c09c:	2601      	movs	r6, #1
1000c09e:	4641      	mov	r1, r8
1000c0a0:	426d      	negs	r5, r5
1000c0a2:	197f      	adds	r7, r7, r5
1000c0a4:	041b      	lsls	r3, r3, #16
1000c0a6:	403b      	ands	r3, r7
1000c0a8:	400e      	ands	r6, r1
1000c0aa:	1c15      	adds	r5, r2, #0
1000c0ac:	2b00      	cmp	r3, #0
1000c0ae:	d100      	bne.n	1000c0b2 <__aeabi_dsub+0x92>
1000c0b0:	e083      	b.n	1000c1ba <__aeabi_dsub+0x19a>
1000c0b2:	4bb6      	ldr	r3, [pc, #728]	; (1000c38c <__aeabi_dsub+0x36c>)
1000c0b4:	3401      	adds	r4, #1
1000c0b6:	429c      	cmp	r4, r3
1000c0b8:	d100      	bne.n	1000c0bc <__aeabi_dsub+0x9c>
1000c0ba:	e116      	b.n	1000c2ea <__aeabi_dsub+0x2ca>
1000c0bc:	1c3a      	adds	r2, r7, #0
1000c0be:	4bb4      	ldr	r3, [pc, #720]	; (1000c390 <__aeabi_dsub+0x370>)
1000c0c0:	08ed      	lsrs	r5, r5, #3
1000c0c2:	401a      	ands	r2, r3
1000c0c4:	0750      	lsls	r0, r2, #29
1000c0c6:	0564      	lsls	r4, r4, #21
1000c0c8:	0252      	lsls	r2, r2, #9
1000c0ca:	4305      	orrs	r5, r0
1000c0cc:	0b12      	lsrs	r2, r2, #12
1000c0ce:	0d64      	lsrs	r4, r4, #21
1000c0d0:	2100      	movs	r1, #0
1000c0d2:	0312      	lsls	r2, r2, #12
1000c0d4:	0d0b      	lsrs	r3, r1, #20
1000c0d6:	051b      	lsls	r3, r3, #20
1000c0d8:	0564      	lsls	r4, r4, #21
1000c0da:	0b12      	lsrs	r2, r2, #12
1000c0dc:	431a      	orrs	r2, r3
1000c0de:	0863      	lsrs	r3, r4, #1
1000c0e0:	4cac      	ldr	r4, [pc, #688]	; (1000c394 <__aeabi_dsub+0x374>)
1000c0e2:	07f6      	lsls	r6, r6, #31
1000c0e4:	4014      	ands	r4, r2
1000c0e6:	431c      	orrs	r4, r3
1000c0e8:	0064      	lsls	r4, r4, #1
1000c0ea:	0864      	lsrs	r4, r4, #1
1000c0ec:	4334      	orrs	r4, r6
1000c0ee:	1c28      	adds	r0, r5, #0
1000c0f0:	1c21      	adds	r1, r4, #0
1000c0f2:	b003      	add	sp, #12
1000c0f4:	bc3c      	pop	{r2, r3, r4, r5}
1000c0f6:	4690      	mov	r8, r2
1000c0f8:	4699      	mov	r9, r3
1000c0fa:	46a2      	mov	sl, r4
1000c0fc:	46ab      	mov	fp, r5
1000c0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c100:	4ba2      	ldr	r3, [pc, #648]	; (1000c38c <__aeabi_dsub+0x36c>)
1000c102:	429c      	cmp	r4, r3
1000c104:	d0be      	beq.n	1000c084 <__aeabi_dsub+0x64>
1000c106:	2380      	movs	r3, #128	; 0x80
1000c108:	041b      	lsls	r3, r3, #16
1000c10a:	431a      	orrs	r2, r3
1000c10c:	2e38      	cmp	r6, #56	; 0x38
1000c10e:	dd00      	ble.n	1000c112 <__aeabi_dsub+0xf2>
1000c110:	e103      	b.n	1000c31a <__aeabi_dsub+0x2fa>
1000c112:	2e1f      	cmp	r6, #31
1000c114:	dd00      	ble.n	1000c118 <__aeabi_dsub+0xf8>
1000c116:	e13f      	b.n	1000c398 <__aeabi_dsub+0x378>
1000c118:	2020      	movs	r0, #32
1000c11a:	1b83      	subs	r3, r0, r6
1000c11c:	4699      	mov	r9, r3
1000c11e:	1c13      	adds	r3, r2, #0
1000c120:	4649      	mov	r1, r9
1000c122:	408b      	lsls	r3, r1
1000c124:	469c      	mov	ip, r3
1000c126:	9b01      	ldr	r3, [sp, #4]
1000c128:	4660      	mov	r0, ip
1000c12a:	40f3      	lsrs	r3, r6
1000c12c:	4303      	orrs	r3, r0
1000c12e:	9801      	ldr	r0, [sp, #4]
1000c130:	40f2      	lsrs	r2, r6
1000c132:	4088      	lsls	r0, r1
1000c134:	1c01      	adds	r1, r0, #0
1000c136:	1e48      	subs	r0, r1, #1
1000c138:	4181      	sbcs	r1, r0
1000c13a:	430b      	orrs	r3, r1
1000c13c:	1aeb      	subs	r3, r5, r3
1000c13e:	429d      	cmp	r5, r3
1000c140:	4180      	sbcs	r0, r0
1000c142:	1c1d      	adds	r5, r3, #0
1000c144:	1aba      	subs	r2, r7, r2
1000c146:	4240      	negs	r0, r0
1000c148:	1a17      	subs	r7, r2, r0
1000c14a:	023b      	lsls	r3, r7, #8
1000c14c:	d400      	bmi.n	1000c150 <__aeabi_dsub+0x130>
1000c14e:	e0a8      	b.n	1000c2a2 <__aeabi_dsub+0x282>
1000c150:	027a      	lsls	r2, r7, #9
1000c152:	0a56      	lsrs	r6, r2, #9
1000c154:	2e00      	cmp	r6, #0
1000c156:	d100      	bne.n	1000c15a <__aeabi_dsub+0x13a>
1000c158:	e0ca      	b.n	1000c2f0 <__aeabi_dsub+0x2d0>
1000c15a:	1c30      	adds	r0, r6, #0
1000c15c:	f7fd fe24 	bl	10009da8 <__clzsi2>
1000c160:	1c03      	adds	r3, r0, #0
1000c162:	3b08      	subs	r3, #8
1000c164:	2b1f      	cmp	r3, #31
1000c166:	dd00      	ble.n	1000c16a <__aeabi_dsub+0x14a>
1000c168:	e0cb      	b.n	1000c302 <__aeabi_dsub+0x2e2>
1000c16a:	2228      	movs	r2, #40	; 0x28
1000c16c:	1c29      	adds	r1, r5, #0
1000c16e:	1a12      	subs	r2, r2, r0
1000c170:	40d1      	lsrs	r1, r2
1000c172:	409e      	lsls	r6, r3
1000c174:	1c0a      	adds	r2, r1, #0
1000c176:	409d      	lsls	r5, r3
1000c178:	4332      	orrs	r2, r6
1000c17a:	429c      	cmp	r4, r3
1000c17c:	dd00      	ble.n	1000c180 <__aeabi_dsub+0x160>
1000c17e:	e0c8      	b.n	1000c312 <__aeabi_dsub+0x2f2>
1000c180:	1b1c      	subs	r4, r3, r4
1000c182:	1c67      	adds	r7, r4, #1
1000c184:	2f1f      	cmp	r7, #31
1000c186:	dd00      	ble.n	1000c18a <__aeabi_dsub+0x16a>
1000c188:	e0ed      	b.n	1000c366 <__aeabi_dsub+0x346>
1000c18a:	231f      	movs	r3, #31
1000c18c:	1c29      	adds	r1, r5, #0
1000c18e:	1b1c      	subs	r4, r3, r4
1000c190:	1c13      	adds	r3, r2, #0
1000c192:	40a5      	lsls	r5, r4
1000c194:	40a3      	lsls	r3, r4
1000c196:	40f9      	lsrs	r1, r7
1000c198:	1e6c      	subs	r4, r5, #1
1000c19a:	41a5      	sbcs	r5, r4
1000c19c:	40fa      	lsrs	r2, r7
1000c19e:	4319      	orrs	r1, r3
1000c1a0:	430d      	orrs	r5, r1
1000c1a2:	1c17      	adds	r7, r2, #0
1000c1a4:	2400      	movs	r4, #0
1000c1a6:	e76d      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c1a8:	2380      	movs	r3, #128	; 0x80
1000c1aa:	2601      	movs	r6, #1
1000c1ac:	4642      	mov	r2, r8
1000c1ae:	041b      	lsls	r3, r3, #16
1000c1b0:	403b      	ands	r3, r7
1000c1b2:	4016      	ands	r6, r2
1000c1b4:	2b00      	cmp	r3, #0
1000c1b6:	d000      	beq.n	1000c1ba <__aeabi_dsub+0x19a>
1000c1b8:	e77b      	b.n	1000c0b2 <__aeabi_dsub+0x92>
1000c1ba:	4b74      	ldr	r3, [pc, #464]	; (1000c38c <__aeabi_dsub+0x36c>)
1000c1bc:	08ed      	lsrs	r5, r5, #3
1000c1be:	0778      	lsls	r0, r7, #29
1000c1c0:	4305      	orrs	r5, r0
1000c1c2:	08fa      	lsrs	r2, r7, #3
1000c1c4:	429c      	cmp	r4, r3
1000c1c6:	d03b      	beq.n	1000c240 <__aeabi_dsub+0x220>
1000c1c8:	0312      	lsls	r2, r2, #12
1000c1ca:	0564      	lsls	r4, r4, #21
1000c1cc:	0b12      	lsrs	r2, r2, #12
1000c1ce:	0d64      	lsrs	r4, r4, #21
1000c1d0:	e77e      	b.n	1000c0d0 <__aeabi_dsub+0xb0>
1000c1d2:	1a23      	subs	r3, r4, r0
1000c1d4:	469a      	mov	sl, r3
1000c1d6:	2b00      	cmp	r3, #0
1000c1d8:	dc00      	bgt.n	1000c1dc <__aeabi_dsub+0x1bc>
1000c1da:	e0a5      	b.n	1000c328 <__aeabi_dsub+0x308>
1000c1dc:	2800      	cmp	r0, #0
1000c1de:	d044      	beq.n	1000c26a <__aeabi_dsub+0x24a>
1000c1e0:	486a      	ldr	r0, [pc, #424]	; (1000c38c <__aeabi_dsub+0x36c>)
1000c1e2:	4284      	cmp	r4, r0
1000c1e4:	d100      	bne.n	1000c1e8 <__aeabi_dsub+0x1c8>
1000c1e6:	e74d      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c1e8:	2080      	movs	r0, #128	; 0x80
1000c1ea:	0400      	lsls	r0, r0, #16
1000c1ec:	4302      	orrs	r2, r0
1000c1ee:	4653      	mov	r3, sl
1000c1f0:	2b38      	cmp	r3, #56	; 0x38
1000c1f2:	dc00      	bgt.n	1000c1f6 <__aeabi_dsub+0x1d6>
1000c1f4:	e11c      	b.n	1000c430 <__aeabi_dsub+0x410>
1000c1f6:	9b01      	ldr	r3, [sp, #4]
1000c1f8:	431a      	orrs	r2, r3
1000c1fa:	1e51      	subs	r1, r2, #1
1000c1fc:	418a      	sbcs	r2, r1
1000c1fe:	b2d1      	uxtb	r1, r2
1000c200:	2200      	movs	r2, #0
1000c202:	1949      	adds	r1, r1, r5
1000c204:	42a9      	cmp	r1, r5
1000c206:	4180      	sbcs	r0, r0
1000c208:	1c0d      	adds	r5, r1, #0
1000c20a:	19d2      	adds	r2, r2, r7
1000c20c:	4240      	negs	r0, r0
1000c20e:	1817      	adds	r7, r2, r0
1000c210:	023b      	lsls	r3, r7, #8
1000c212:	d546      	bpl.n	1000c2a2 <__aeabi_dsub+0x282>
1000c214:	4b5d      	ldr	r3, [pc, #372]	; (1000c38c <__aeabi_dsub+0x36c>)
1000c216:	3401      	adds	r4, #1
1000c218:	429c      	cmp	r4, r3
1000c21a:	d100      	bne.n	1000c21e <__aeabi_dsub+0x1fe>
1000c21c:	e169      	b.n	1000c4f2 <__aeabi_dsub+0x4d2>
1000c21e:	2001      	movs	r0, #1
1000c220:	4a5b      	ldr	r2, [pc, #364]	; (1000c390 <__aeabi_dsub+0x370>)
1000c222:	086b      	lsrs	r3, r5, #1
1000c224:	403a      	ands	r2, r7
1000c226:	4028      	ands	r0, r5
1000c228:	4318      	orrs	r0, r3
1000c22a:	07d5      	lsls	r5, r2, #31
1000c22c:	4305      	orrs	r5, r0
1000c22e:	0857      	lsrs	r7, r2, #1
1000c230:	e728      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c232:	1c13      	adds	r3, r2, #0
1000c234:	9901      	ldr	r1, [sp, #4]
1000c236:	430b      	orrs	r3, r1
1000c238:	d100      	bne.n	1000c23c <__aeabi_dsub+0x21c>
1000c23a:	e711      	b.n	1000c060 <__aeabi_dsub+0x40>
1000c23c:	464b      	mov	r3, r9
1000c23e:	e713      	b.n	1000c068 <__aeabi_dsub+0x48>
1000c240:	1c2b      	adds	r3, r5, #0
1000c242:	4313      	orrs	r3, r2
1000c244:	d051      	beq.n	1000c2ea <__aeabi_dsub+0x2ca>
1000c246:	2380      	movs	r3, #128	; 0x80
1000c248:	031b      	lsls	r3, r3, #12
1000c24a:	431a      	orrs	r2, r3
1000c24c:	0312      	lsls	r2, r2, #12
1000c24e:	0b12      	lsrs	r2, r2, #12
1000c250:	e73e      	b.n	1000c0d0 <__aeabi_dsub+0xb0>
1000c252:	3e01      	subs	r6, #1
1000c254:	2e00      	cmp	r6, #0
1000c256:	d000      	beq.n	1000c25a <__aeabi_dsub+0x23a>
1000c258:	e080      	b.n	1000c35c <__aeabi_dsub+0x33c>
1000c25a:	1a69      	subs	r1, r5, r1
1000c25c:	428d      	cmp	r5, r1
1000c25e:	419b      	sbcs	r3, r3
1000c260:	1aba      	subs	r2, r7, r2
1000c262:	425b      	negs	r3, r3
1000c264:	1ad7      	subs	r7, r2, r3
1000c266:	1c0d      	adds	r5, r1, #0
1000c268:	e76f      	b.n	1000c14a <__aeabi_dsub+0x12a>
1000c26a:	1c10      	adds	r0, r2, #0
1000c26c:	9b01      	ldr	r3, [sp, #4]
1000c26e:	4318      	orrs	r0, r3
1000c270:	d100      	bne.n	1000c274 <__aeabi_dsub+0x254>
1000c272:	e707      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c274:	2301      	movs	r3, #1
1000c276:	425b      	negs	r3, r3
1000c278:	469c      	mov	ip, r3
1000c27a:	44e2      	add	sl, ip
1000c27c:	4653      	mov	r3, sl
1000c27e:	2b00      	cmp	r3, #0
1000c280:	d000      	beq.n	1000c284 <__aeabi_dsub+0x264>
1000c282:	e102      	b.n	1000c48a <__aeabi_dsub+0x46a>
1000c284:	9b01      	ldr	r3, [sp, #4]
1000c286:	19d2      	adds	r2, r2, r7
1000c288:	1959      	adds	r1, r3, r5
1000c28a:	42a9      	cmp	r1, r5
1000c28c:	419b      	sbcs	r3, r3
1000c28e:	425b      	negs	r3, r3
1000c290:	18d7      	adds	r7, r2, r3
1000c292:	1c0d      	adds	r5, r1, #0
1000c294:	e7bc      	b.n	1000c210 <__aeabi_dsub+0x1f0>
1000c296:	4663      	mov	r3, ip
1000c298:	4303      	orrs	r3, r0
1000c29a:	d100      	bne.n	1000c29e <__aeabi_dsub+0x27e>
1000c29c:	e128      	b.n	1000c4f0 <__aeabi_dsub+0x4d0>
1000c29e:	1c07      	adds	r7, r0, #0
1000c2a0:	4665      	mov	r5, ip
1000c2a2:	076b      	lsls	r3, r5, #29
1000c2a4:	d000      	beq.n	1000c2a8 <__aeabi_dsub+0x288>
1000c2a6:	e6f0      	b.n	1000c08a <__aeabi_dsub+0x6a>
1000c2a8:	2601      	movs	r6, #1
1000c2aa:	4643      	mov	r3, r8
1000c2ac:	401e      	ands	r6, r3
1000c2ae:	e784      	b.n	1000c1ba <__aeabi_dsub+0x19a>
1000c2b0:	2e00      	cmp	r6, #0
1000c2b2:	d000      	beq.n	1000c2b6 <__aeabi_dsub+0x296>
1000c2b4:	e081      	b.n	1000c3ba <__aeabi_dsub+0x39a>
1000c2b6:	1c60      	adds	r0, r4, #1
1000c2b8:	0540      	lsls	r0, r0, #21
1000c2ba:	0d40      	lsrs	r0, r0, #21
1000c2bc:	2801      	cmp	r0, #1
1000c2be:	dc00      	bgt.n	1000c2c2 <__aeabi_dsub+0x2a2>
1000c2c0:	e107      	b.n	1000c4d2 <__aeabi_dsub+0x4b2>
1000c2c2:	9901      	ldr	r1, [sp, #4]
1000c2c4:	1a68      	subs	r0, r5, r1
1000c2c6:	4684      	mov	ip, r0
1000c2c8:	4565      	cmp	r5, ip
1000c2ca:	41b6      	sbcs	r6, r6
1000c2cc:	1ab8      	subs	r0, r7, r2
1000c2ce:	4276      	negs	r6, r6
1000c2d0:	1b86      	subs	r6, r0, r6
1000c2d2:	0230      	lsls	r0, r6, #8
1000c2d4:	d400      	bmi.n	1000c2d8 <__aeabi_dsub+0x2b8>
1000c2d6:	e0a1      	b.n	1000c41c <__aeabi_dsub+0x3fc>
1000c2d8:	468c      	mov	ip, r1
1000c2da:	1b4d      	subs	r5, r1, r5
1000c2dc:	45ac      	cmp	ip, r5
1000c2de:	4189      	sbcs	r1, r1
1000c2e0:	1bd2      	subs	r2, r2, r7
1000c2e2:	4249      	negs	r1, r1
1000c2e4:	1a56      	subs	r6, r2, r1
1000c2e6:	4698      	mov	r8, r3
1000c2e8:	e734      	b.n	1000c154 <__aeabi_dsub+0x134>
1000c2ea:	2200      	movs	r2, #0
1000c2ec:	2500      	movs	r5, #0
1000c2ee:	e6ef      	b.n	1000c0d0 <__aeabi_dsub+0xb0>
1000c2f0:	1c28      	adds	r0, r5, #0
1000c2f2:	f7fd fd59 	bl	10009da8 <__clzsi2>
1000c2f6:	3020      	adds	r0, #32
1000c2f8:	1c03      	adds	r3, r0, #0
1000c2fa:	3b08      	subs	r3, #8
1000c2fc:	2b1f      	cmp	r3, #31
1000c2fe:	dc00      	bgt.n	1000c302 <__aeabi_dsub+0x2e2>
1000c300:	e733      	b.n	1000c16a <__aeabi_dsub+0x14a>
1000c302:	1c02      	adds	r2, r0, #0
1000c304:	3a28      	subs	r2, #40	; 0x28
1000c306:	4095      	lsls	r5, r2
1000c308:	1c2a      	adds	r2, r5, #0
1000c30a:	2500      	movs	r5, #0
1000c30c:	429c      	cmp	r4, r3
1000c30e:	dc00      	bgt.n	1000c312 <__aeabi_dsub+0x2f2>
1000c310:	e736      	b.n	1000c180 <__aeabi_dsub+0x160>
1000c312:	4f1f      	ldr	r7, [pc, #124]	; (1000c390 <__aeabi_dsub+0x370>)
1000c314:	1ae4      	subs	r4, r4, r3
1000c316:	4017      	ands	r7, r2
1000c318:	e6b4      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c31a:	9b01      	ldr	r3, [sp, #4]
1000c31c:	431a      	orrs	r2, r3
1000c31e:	1e51      	subs	r1, r2, #1
1000c320:	418a      	sbcs	r2, r1
1000c322:	b2d3      	uxtb	r3, r2
1000c324:	2200      	movs	r2, #0
1000c326:	e709      	b.n	1000c13c <__aeabi_dsub+0x11c>
1000c328:	2b00      	cmp	r3, #0
1000c32a:	d000      	beq.n	1000c32e <__aeabi_dsub+0x30e>
1000c32c:	e101      	b.n	1000c532 <__aeabi_dsub+0x512>
1000c32e:	1c60      	adds	r0, r4, #1
1000c330:	0543      	lsls	r3, r0, #21
1000c332:	0d5b      	lsrs	r3, r3, #21
1000c334:	2b01      	cmp	r3, #1
1000c336:	dc00      	bgt.n	1000c33a <__aeabi_dsub+0x31a>
1000c338:	e0b0      	b.n	1000c49c <__aeabi_dsub+0x47c>
1000c33a:	4b14      	ldr	r3, [pc, #80]	; (1000c38c <__aeabi_dsub+0x36c>)
1000c33c:	4298      	cmp	r0, r3
1000c33e:	d100      	bne.n	1000c342 <__aeabi_dsub+0x322>
1000c340:	e11e      	b.n	1000c580 <__aeabi_dsub+0x560>
1000c342:	9b01      	ldr	r3, [sp, #4]
1000c344:	19d2      	adds	r2, r2, r7
1000c346:	1959      	adds	r1, r3, r5
1000c348:	42a9      	cmp	r1, r5
1000c34a:	419b      	sbcs	r3, r3
1000c34c:	425b      	negs	r3, r3
1000c34e:	18d2      	adds	r2, r2, r3
1000c350:	0849      	lsrs	r1, r1, #1
1000c352:	07d5      	lsls	r5, r2, #31
1000c354:	430d      	orrs	r5, r1
1000c356:	0857      	lsrs	r7, r2, #1
1000c358:	1c04      	adds	r4, r0, #0
1000c35a:	e693      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c35c:	4b0b      	ldr	r3, [pc, #44]	; (1000c38c <__aeabi_dsub+0x36c>)
1000c35e:	429c      	cmp	r4, r3
1000c360:	d000      	beq.n	1000c364 <__aeabi_dsub+0x344>
1000c362:	e6d3      	b.n	1000c10c <__aeabi_dsub+0xec>
1000c364:	e68e      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c366:	1c21      	adds	r1, r4, #0
1000c368:	1c13      	adds	r3, r2, #0
1000c36a:	391f      	subs	r1, #31
1000c36c:	40cb      	lsrs	r3, r1
1000c36e:	1c19      	adds	r1, r3, #0
1000c370:	2f20      	cmp	r7, #32
1000c372:	d100      	bne.n	1000c376 <__aeabi_dsub+0x356>
1000c374:	e08e      	b.n	1000c494 <__aeabi_dsub+0x474>
1000c376:	233f      	movs	r3, #63	; 0x3f
1000c378:	1b1c      	subs	r4, r3, r4
1000c37a:	40a2      	lsls	r2, r4
1000c37c:	4315      	orrs	r5, r2
1000c37e:	1e6a      	subs	r2, r5, #1
1000c380:	4195      	sbcs	r5, r2
1000c382:	2700      	movs	r7, #0
1000c384:	430d      	orrs	r5, r1
1000c386:	2400      	movs	r4, #0
1000c388:	e78b      	b.n	1000c2a2 <__aeabi_dsub+0x282>
1000c38a:	46c0      	nop			; (mov r8, r8)
1000c38c:	000007ff 	.word	0x000007ff
1000c390:	ff7fffff 	.word	0xff7fffff
1000c394:	800fffff 	.word	0x800fffff
1000c398:	1c33      	adds	r3, r6, #0
1000c39a:	1c10      	adds	r0, r2, #0
1000c39c:	3b20      	subs	r3, #32
1000c39e:	40d8      	lsrs	r0, r3
1000c3a0:	2e20      	cmp	r6, #32
1000c3a2:	d079      	beq.n	1000c498 <__aeabi_dsub+0x478>
1000c3a4:	2340      	movs	r3, #64	; 0x40
1000c3a6:	1b9b      	subs	r3, r3, r6
1000c3a8:	409a      	lsls	r2, r3
1000c3aa:	1c13      	adds	r3, r2, #0
1000c3ac:	9a01      	ldr	r2, [sp, #4]
1000c3ae:	4313      	orrs	r3, r2
1000c3b0:	1e59      	subs	r1, r3, #1
1000c3b2:	418b      	sbcs	r3, r1
1000c3b4:	2200      	movs	r2, #0
1000c3b6:	4303      	orrs	r3, r0
1000c3b8:	e6c0      	b.n	1000c13c <__aeabi_dsub+0x11c>
1000c3ba:	2c00      	cmp	r4, #0
1000c3bc:	d053      	beq.n	1000c466 <__aeabi_dsub+0x446>
1000c3be:	4cc7      	ldr	r4, [pc, #796]	; (1000c6dc <__aeabi_dsub+0x6bc>)
1000c3c0:	42a0      	cmp	r0, r4
1000c3c2:	d100      	bne.n	1000c3c6 <__aeabi_dsub+0x3a6>
1000c3c4:	e0b0      	b.n	1000c528 <__aeabi_dsub+0x508>
1000c3c6:	2480      	movs	r4, #128	; 0x80
1000c3c8:	4271      	negs	r1, r6
1000c3ca:	4689      	mov	r9, r1
1000c3cc:	0424      	lsls	r4, r4, #16
1000c3ce:	4327      	orrs	r7, r4
1000c3d0:	4649      	mov	r1, r9
1000c3d2:	2938      	cmp	r1, #56	; 0x38
1000c3d4:	dd00      	ble.n	1000c3d8 <__aeabi_dsub+0x3b8>
1000c3d6:	e0cd      	b.n	1000c574 <__aeabi_dsub+0x554>
1000c3d8:	291f      	cmp	r1, #31
1000c3da:	dd00      	ble.n	1000c3de <__aeabi_dsub+0x3be>
1000c3dc:	e159      	b.n	1000c692 <__aeabi_dsub+0x672>
1000c3de:	2420      	movs	r4, #32
1000c3e0:	1c3e      	adds	r6, r7, #0
1000c3e2:	1a61      	subs	r1, r4, r1
1000c3e4:	408e      	lsls	r6, r1
1000c3e6:	468a      	mov	sl, r1
1000c3e8:	46b0      	mov	r8, r6
1000c3ea:	4649      	mov	r1, r9
1000c3ec:	1c2e      	adds	r6, r5, #0
1000c3ee:	40ce      	lsrs	r6, r1
1000c3f0:	4651      	mov	r1, sl
1000c3f2:	46b4      	mov	ip, r6
1000c3f4:	408d      	lsls	r5, r1
1000c3f6:	4664      	mov	r4, ip
1000c3f8:	4646      	mov	r6, r8
1000c3fa:	4649      	mov	r1, r9
1000c3fc:	4326      	orrs	r6, r4
1000c3fe:	1e6c      	subs	r4, r5, #1
1000c400:	41a5      	sbcs	r5, r4
1000c402:	40cf      	lsrs	r7, r1
1000c404:	4335      	orrs	r5, r6
1000c406:	9901      	ldr	r1, [sp, #4]
1000c408:	1bd7      	subs	r7, r2, r7
1000c40a:	468c      	mov	ip, r1
1000c40c:	1b4d      	subs	r5, r1, r5
1000c40e:	45ac      	cmp	ip, r5
1000c410:	4192      	sbcs	r2, r2
1000c412:	4252      	negs	r2, r2
1000c414:	1abf      	subs	r7, r7, r2
1000c416:	1c04      	adds	r4, r0, #0
1000c418:	4698      	mov	r8, r3
1000c41a:	e696      	b.n	1000c14a <__aeabi_dsub+0x12a>
1000c41c:	4663      	mov	r3, ip
1000c41e:	4665      	mov	r5, ip
1000c420:	4333      	orrs	r3, r6
1000c422:	d000      	beq.n	1000c426 <__aeabi_dsub+0x406>
1000c424:	e696      	b.n	1000c154 <__aeabi_dsub+0x134>
1000c426:	2600      	movs	r6, #0
1000c428:	2700      	movs	r7, #0
1000c42a:	2400      	movs	r4, #0
1000c42c:	2500      	movs	r5, #0
1000c42e:	e6c4      	b.n	1000c1ba <__aeabi_dsub+0x19a>
1000c430:	2b1f      	cmp	r3, #31
1000c432:	dc61      	bgt.n	1000c4f8 <__aeabi_dsub+0x4d8>
1000c434:	2020      	movs	r0, #32
1000c436:	1ac3      	subs	r3, r0, r3
1000c438:	469b      	mov	fp, r3
1000c43a:	1c13      	adds	r3, r2, #0
1000c43c:	4659      	mov	r1, fp
1000c43e:	408b      	lsls	r3, r1
1000c440:	4651      	mov	r1, sl
1000c442:	4699      	mov	r9, r3
1000c444:	9b01      	ldr	r3, [sp, #4]
1000c446:	40cb      	lsrs	r3, r1
1000c448:	469c      	mov	ip, r3
1000c44a:	464b      	mov	r3, r9
1000c44c:	4660      	mov	r0, ip
1000c44e:	4303      	orrs	r3, r0
1000c450:	469c      	mov	ip, r3
1000c452:	465b      	mov	r3, fp
1000c454:	9901      	ldr	r1, [sp, #4]
1000c456:	4099      	lsls	r1, r3
1000c458:	4663      	mov	r3, ip
1000c45a:	1e48      	subs	r0, r1, #1
1000c45c:	4181      	sbcs	r1, r0
1000c45e:	4319      	orrs	r1, r3
1000c460:	4653      	mov	r3, sl
1000c462:	40da      	lsrs	r2, r3
1000c464:	e6cd      	b.n	1000c202 <__aeabi_dsub+0x1e2>
1000c466:	1c3c      	adds	r4, r7, #0
1000c468:	432c      	orrs	r4, r5
1000c46a:	d05d      	beq.n	1000c528 <__aeabi_dsub+0x508>
1000c46c:	43f1      	mvns	r1, r6
1000c46e:	4689      	mov	r9, r1
1000c470:	2900      	cmp	r1, #0
1000c472:	d155      	bne.n	1000c520 <__aeabi_dsub+0x500>
1000c474:	9901      	ldr	r1, [sp, #4]
1000c476:	1bd2      	subs	r2, r2, r7
1000c478:	468c      	mov	ip, r1
1000c47a:	1b4d      	subs	r5, r1, r5
1000c47c:	45ac      	cmp	ip, r5
1000c47e:	4189      	sbcs	r1, r1
1000c480:	4249      	negs	r1, r1
1000c482:	1a57      	subs	r7, r2, r1
1000c484:	1c04      	adds	r4, r0, #0
1000c486:	4698      	mov	r8, r3
1000c488:	e65f      	b.n	1000c14a <__aeabi_dsub+0x12a>
1000c48a:	4894      	ldr	r0, [pc, #592]	; (1000c6dc <__aeabi_dsub+0x6bc>)
1000c48c:	4284      	cmp	r4, r0
1000c48e:	d000      	beq.n	1000c492 <__aeabi_dsub+0x472>
1000c490:	e6ad      	b.n	1000c1ee <__aeabi_dsub+0x1ce>
1000c492:	e5f7      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c494:	2200      	movs	r2, #0
1000c496:	e771      	b.n	1000c37c <__aeabi_dsub+0x35c>
1000c498:	2300      	movs	r3, #0
1000c49a:	e787      	b.n	1000c3ac <__aeabi_dsub+0x38c>
1000c49c:	1c3b      	adds	r3, r7, #0
1000c49e:	432b      	orrs	r3, r5
1000c4a0:	2c00      	cmp	r4, #0
1000c4a2:	d000      	beq.n	1000c4a6 <__aeabi_dsub+0x486>
1000c4a4:	e0da      	b.n	1000c65c <__aeabi_dsub+0x63c>
1000c4a6:	2b00      	cmp	r3, #0
1000c4a8:	d100      	bne.n	1000c4ac <__aeabi_dsub+0x48c>
1000c4aa:	e113      	b.n	1000c6d4 <__aeabi_dsub+0x6b4>
1000c4ac:	1c13      	adds	r3, r2, #0
1000c4ae:	9901      	ldr	r1, [sp, #4]
1000c4b0:	430b      	orrs	r3, r1
1000c4b2:	d100      	bne.n	1000c4b6 <__aeabi_dsub+0x496>
1000c4b4:	e5e6      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c4b6:	1949      	adds	r1, r1, r5
1000c4b8:	42a9      	cmp	r1, r5
1000c4ba:	419b      	sbcs	r3, r3
1000c4bc:	19d2      	adds	r2, r2, r7
1000c4be:	425b      	negs	r3, r3
1000c4c0:	18d7      	adds	r7, r2, r3
1000c4c2:	023b      	lsls	r3, r7, #8
1000c4c4:	d400      	bmi.n	1000c4c8 <__aeabi_dsub+0x4a8>
1000c4c6:	e121      	b.n	1000c70c <__aeabi_dsub+0x6ec>
1000c4c8:	4b85      	ldr	r3, [pc, #532]	; (1000c6e0 <__aeabi_dsub+0x6c0>)
1000c4ca:	1c0d      	adds	r5, r1, #0
1000c4cc:	401f      	ands	r7, r3
1000c4ce:	1c04      	adds	r4, r0, #0
1000c4d0:	e5d8      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c4d2:	1c38      	adds	r0, r7, #0
1000c4d4:	4328      	orrs	r0, r5
1000c4d6:	2c00      	cmp	r4, #0
1000c4d8:	d140      	bne.n	1000c55c <__aeabi_dsub+0x53c>
1000c4da:	2800      	cmp	r0, #0
1000c4dc:	d000      	beq.n	1000c4e0 <__aeabi_dsub+0x4c0>
1000c4de:	e083      	b.n	1000c5e8 <__aeabi_dsub+0x5c8>
1000c4e0:	1c10      	adds	r0, r2, #0
1000c4e2:	9901      	ldr	r1, [sp, #4]
1000c4e4:	4308      	orrs	r0, r1
1000c4e6:	d003      	beq.n	1000c4f0 <__aeabi_dsub+0x4d0>
1000c4e8:	1c17      	adds	r7, r2, #0
1000c4ea:	1c0d      	adds	r5, r1, #0
1000c4ec:	4698      	mov	r8, r3
1000c4ee:	e5c9      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c4f0:	2600      	movs	r6, #0
1000c4f2:	2700      	movs	r7, #0
1000c4f4:	2500      	movs	r5, #0
1000c4f6:	e660      	b.n	1000c1ba <__aeabi_dsub+0x19a>
1000c4f8:	4650      	mov	r0, sl
1000c4fa:	1c13      	adds	r3, r2, #0
1000c4fc:	3820      	subs	r0, #32
1000c4fe:	40c3      	lsrs	r3, r0
1000c500:	1c18      	adds	r0, r3, #0
1000c502:	4653      	mov	r3, sl
1000c504:	2b20      	cmp	r3, #32
1000c506:	d100      	bne.n	1000c50a <__aeabi_dsub+0x4ea>
1000c508:	e0c1      	b.n	1000c68e <__aeabi_dsub+0x66e>
1000c50a:	2340      	movs	r3, #64	; 0x40
1000c50c:	4651      	mov	r1, sl
1000c50e:	1a5b      	subs	r3, r3, r1
1000c510:	409a      	lsls	r2, r3
1000c512:	9901      	ldr	r1, [sp, #4]
1000c514:	4311      	orrs	r1, r2
1000c516:	1e4a      	subs	r2, r1, #1
1000c518:	4191      	sbcs	r1, r2
1000c51a:	2200      	movs	r2, #0
1000c51c:	4301      	orrs	r1, r0
1000c51e:	e670      	b.n	1000c202 <__aeabi_dsub+0x1e2>
1000c520:	4c6e      	ldr	r4, [pc, #440]	; (1000c6dc <__aeabi_dsub+0x6bc>)
1000c522:	42a0      	cmp	r0, r4
1000c524:	d000      	beq.n	1000c528 <__aeabi_dsub+0x508>
1000c526:	e753      	b.n	1000c3d0 <__aeabi_dsub+0x3b0>
1000c528:	1c17      	adds	r7, r2, #0
1000c52a:	9d01      	ldr	r5, [sp, #4]
1000c52c:	1c04      	adds	r4, r0, #0
1000c52e:	4698      	mov	r8, r3
1000c530:	e5a8      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c532:	2c00      	cmp	r4, #0
1000c534:	d128      	bne.n	1000c588 <__aeabi_dsub+0x568>
1000c536:	1c3c      	adds	r4, r7, #0
1000c538:	432c      	orrs	r4, r5
1000c53a:	d100      	bne.n	1000c53e <__aeabi_dsub+0x51e>
1000c53c:	e08a      	b.n	1000c654 <__aeabi_dsub+0x634>
1000c53e:	43db      	mvns	r3, r3
1000c540:	469a      	mov	sl, r3
1000c542:	2b00      	cmp	r3, #0
1000c544:	d000      	beq.n	1000c548 <__aeabi_dsub+0x528>
1000c546:	e082      	b.n	1000c64e <__aeabi_dsub+0x62e>
1000c548:	9b01      	ldr	r3, [sp, #4]
1000c54a:	19d2      	adds	r2, r2, r7
1000c54c:	469c      	mov	ip, r3
1000c54e:	4465      	add	r5, ip
1000c550:	429d      	cmp	r5, r3
1000c552:	4189      	sbcs	r1, r1
1000c554:	4249      	negs	r1, r1
1000c556:	1857      	adds	r7, r2, r1
1000c558:	1c04      	adds	r4, r0, #0
1000c55a:	e659      	b.n	1000c210 <__aeabi_dsub+0x1f0>
1000c55c:	2800      	cmp	r0, #0
1000c55e:	d15b      	bne.n	1000c618 <__aeabi_dsub+0x5f8>
1000c560:	1c10      	adds	r0, r2, #0
1000c562:	9901      	ldr	r1, [sp, #4]
1000c564:	4308      	orrs	r0, r1
1000c566:	d100      	bne.n	1000c56a <__aeabi_dsub+0x54a>
1000c568:	e0a4      	b.n	1000c6b4 <__aeabi_dsub+0x694>
1000c56a:	1c17      	adds	r7, r2, #0
1000c56c:	1c0d      	adds	r5, r1, #0
1000c56e:	4698      	mov	r8, r3
1000c570:	4c5a      	ldr	r4, [pc, #360]	; (1000c6dc <__aeabi_dsub+0x6bc>)
1000c572:	e587      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c574:	433d      	orrs	r5, r7
1000c576:	1e6f      	subs	r7, r5, #1
1000c578:	41bd      	sbcs	r5, r7
1000c57a:	2700      	movs	r7, #0
1000c57c:	b2ed      	uxtb	r5, r5
1000c57e:	e742      	b.n	1000c406 <__aeabi_dsub+0x3e6>
1000c580:	1c04      	adds	r4, r0, #0
1000c582:	2700      	movs	r7, #0
1000c584:	2500      	movs	r5, #0
1000c586:	e618      	b.n	1000c1ba <__aeabi_dsub+0x19a>
1000c588:	4c54      	ldr	r4, [pc, #336]	; (1000c6dc <__aeabi_dsub+0x6bc>)
1000c58a:	42a0      	cmp	r0, r4
1000c58c:	d062      	beq.n	1000c654 <__aeabi_dsub+0x634>
1000c58e:	4653      	mov	r3, sl
1000c590:	2480      	movs	r4, #128	; 0x80
1000c592:	425b      	negs	r3, r3
1000c594:	469a      	mov	sl, r3
1000c596:	0424      	lsls	r4, r4, #16
1000c598:	4327      	orrs	r7, r4
1000c59a:	4653      	mov	r3, sl
1000c59c:	2b38      	cmp	r3, #56	; 0x38
1000c59e:	dd00      	ble.n	1000c5a2 <__aeabi_dsub+0x582>
1000c5a0:	e08e      	b.n	1000c6c0 <__aeabi_dsub+0x6a0>
1000c5a2:	2b1f      	cmp	r3, #31
1000c5a4:	dd00      	ble.n	1000c5a8 <__aeabi_dsub+0x588>
1000c5a6:	e09d      	b.n	1000c6e4 <__aeabi_dsub+0x6c4>
1000c5a8:	2420      	movs	r4, #32
1000c5aa:	1ae3      	subs	r3, r4, r3
1000c5ac:	469b      	mov	fp, r3
1000c5ae:	1c3b      	adds	r3, r7, #0
1000c5b0:	4659      	mov	r1, fp
1000c5b2:	408b      	lsls	r3, r1
1000c5b4:	4651      	mov	r1, sl
1000c5b6:	4699      	mov	r9, r3
1000c5b8:	1c2b      	adds	r3, r5, #0
1000c5ba:	40cb      	lsrs	r3, r1
1000c5bc:	469c      	mov	ip, r3
1000c5be:	464b      	mov	r3, r9
1000c5c0:	4664      	mov	r4, ip
1000c5c2:	4323      	orrs	r3, r4
1000c5c4:	469c      	mov	ip, r3
1000c5c6:	465b      	mov	r3, fp
1000c5c8:	409d      	lsls	r5, r3
1000c5ca:	4663      	mov	r3, ip
1000c5cc:	1e6c      	subs	r4, r5, #1
1000c5ce:	41a5      	sbcs	r5, r4
1000c5d0:	40cf      	lsrs	r7, r1
1000c5d2:	431d      	orrs	r5, r3
1000c5d4:	9b01      	ldr	r3, [sp, #4]
1000c5d6:	18bf      	adds	r7, r7, r2
1000c5d8:	469c      	mov	ip, r3
1000c5da:	4465      	add	r5, ip
1000c5dc:	429d      	cmp	r5, r3
1000c5de:	4192      	sbcs	r2, r2
1000c5e0:	4252      	negs	r2, r2
1000c5e2:	18bf      	adds	r7, r7, r2
1000c5e4:	1c04      	adds	r4, r0, #0
1000c5e6:	e613      	b.n	1000c210 <__aeabi_dsub+0x1f0>
1000c5e8:	1c10      	adds	r0, r2, #0
1000c5ea:	9901      	ldr	r1, [sp, #4]
1000c5ec:	4308      	orrs	r0, r1
1000c5ee:	d100      	bne.n	1000c5f2 <__aeabi_dsub+0x5d2>
1000c5f0:	e548      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c5f2:	1a68      	subs	r0, r5, r1
1000c5f4:	4684      	mov	ip, r0
1000c5f6:	4285      	cmp	r5, r0
1000c5f8:	4180      	sbcs	r0, r0
1000c5fa:	1abe      	subs	r6, r7, r2
1000c5fc:	4240      	negs	r0, r0
1000c5fe:	1a30      	subs	r0, r6, r0
1000c600:	0206      	lsls	r6, r0, #8
1000c602:	d400      	bmi.n	1000c606 <__aeabi_dsub+0x5e6>
1000c604:	e647      	b.n	1000c296 <__aeabi_dsub+0x276>
1000c606:	468c      	mov	ip, r1
1000c608:	1b4d      	subs	r5, r1, r5
1000c60a:	45ac      	cmp	ip, r5
1000c60c:	4189      	sbcs	r1, r1
1000c60e:	1bd2      	subs	r2, r2, r7
1000c610:	4249      	negs	r1, r1
1000c612:	1a57      	subs	r7, r2, r1
1000c614:	4698      	mov	r8, r3
1000c616:	e535      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c618:	1c10      	adds	r0, r2, #0
1000c61a:	9901      	ldr	r1, [sp, #4]
1000c61c:	4308      	orrs	r0, r1
1000c61e:	d034      	beq.n	1000c68a <__aeabi_dsub+0x66a>
1000c620:	2480      	movs	r4, #128	; 0x80
1000c622:	0778      	lsls	r0, r7, #29
1000c624:	08ed      	lsrs	r5, r5, #3
1000c626:	08ff      	lsrs	r7, r7, #3
1000c628:	0324      	lsls	r4, r4, #12
1000c62a:	4328      	orrs	r0, r5
1000c62c:	4227      	tst	r7, r4
1000c62e:	d008      	beq.n	1000c642 <__aeabi_dsub+0x622>
1000c630:	08d6      	lsrs	r6, r2, #3
1000c632:	4226      	tst	r6, r4
1000c634:	d105      	bne.n	1000c642 <__aeabi_dsub+0x622>
1000c636:	08c9      	lsrs	r1, r1, #3
1000c638:	0752      	lsls	r2, r2, #29
1000c63a:	430a      	orrs	r2, r1
1000c63c:	1c10      	adds	r0, r2, #0
1000c63e:	1c37      	adds	r7, r6, #0
1000c640:	4698      	mov	r8, r3
1000c642:	00ff      	lsls	r7, r7, #3
1000c644:	0f42      	lsrs	r2, r0, #29
1000c646:	4317      	orrs	r7, r2
1000c648:	00c5      	lsls	r5, r0, #3
1000c64a:	4c24      	ldr	r4, [pc, #144]	; (1000c6dc <__aeabi_dsub+0x6bc>)
1000c64c:	e51a      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c64e:	4c23      	ldr	r4, [pc, #140]	; (1000c6dc <__aeabi_dsub+0x6bc>)
1000c650:	42a0      	cmp	r0, r4
1000c652:	d1a2      	bne.n	1000c59a <__aeabi_dsub+0x57a>
1000c654:	1c17      	adds	r7, r2, #0
1000c656:	9d01      	ldr	r5, [sp, #4]
1000c658:	1c04      	adds	r4, r0, #0
1000c65a:	e513      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c65c:	2b00      	cmp	r3, #0
1000c65e:	d035      	beq.n	1000c6cc <__aeabi_dsub+0x6ac>
1000c660:	1c13      	adds	r3, r2, #0
1000c662:	9901      	ldr	r1, [sp, #4]
1000c664:	430b      	orrs	r3, r1
1000c666:	d010      	beq.n	1000c68a <__aeabi_dsub+0x66a>
1000c668:	2480      	movs	r4, #128	; 0x80
1000c66a:	0778      	lsls	r0, r7, #29
1000c66c:	08ed      	lsrs	r5, r5, #3
1000c66e:	08ff      	lsrs	r7, r7, #3
1000c670:	0324      	lsls	r4, r4, #12
1000c672:	4328      	orrs	r0, r5
1000c674:	4227      	tst	r7, r4
1000c676:	d0e4      	beq.n	1000c642 <__aeabi_dsub+0x622>
1000c678:	08d3      	lsrs	r3, r2, #3
1000c67a:	4223      	tst	r3, r4
1000c67c:	d1e1      	bne.n	1000c642 <__aeabi_dsub+0x622>
1000c67e:	08c9      	lsrs	r1, r1, #3
1000c680:	0752      	lsls	r2, r2, #29
1000c682:	430a      	orrs	r2, r1
1000c684:	1c10      	adds	r0, r2, #0
1000c686:	1c1f      	adds	r7, r3, #0
1000c688:	e7db      	b.n	1000c642 <__aeabi_dsub+0x622>
1000c68a:	4c14      	ldr	r4, [pc, #80]	; (1000c6dc <__aeabi_dsub+0x6bc>)
1000c68c:	e4fa      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c68e:	2200      	movs	r2, #0
1000c690:	e73f      	b.n	1000c512 <__aeabi_dsub+0x4f2>
1000c692:	464c      	mov	r4, r9
1000c694:	1c3e      	adds	r6, r7, #0
1000c696:	3c20      	subs	r4, #32
1000c698:	40e6      	lsrs	r6, r4
1000c69a:	4649      	mov	r1, r9
1000c69c:	1c34      	adds	r4, r6, #0
1000c69e:	2920      	cmp	r1, #32
1000c6a0:	d032      	beq.n	1000c708 <__aeabi_dsub+0x6e8>
1000c6a2:	2640      	movs	r6, #64	; 0x40
1000c6a4:	1a76      	subs	r6, r6, r1
1000c6a6:	40b7      	lsls	r7, r6
1000c6a8:	433d      	orrs	r5, r7
1000c6aa:	1e6f      	subs	r7, r5, #1
1000c6ac:	41bd      	sbcs	r5, r7
1000c6ae:	2700      	movs	r7, #0
1000c6b0:	4325      	orrs	r5, r4
1000c6b2:	e6a8      	b.n	1000c406 <__aeabi_dsub+0x3e6>
1000c6b4:	2780      	movs	r7, #128	; 0x80
1000c6b6:	2600      	movs	r6, #0
1000c6b8:	03ff      	lsls	r7, r7, #15
1000c6ba:	4c08      	ldr	r4, [pc, #32]	; (1000c6dc <__aeabi_dsub+0x6bc>)
1000c6bc:	2500      	movs	r5, #0
1000c6be:	e57c      	b.n	1000c1ba <__aeabi_dsub+0x19a>
1000c6c0:	433d      	orrs	r5, r7
1000c6c2:	1e6f      	subs	r7, r5, #1
1000c6c4:	41bd      	sbcs	r5, r7
1000c6c6:	2700      	movs	r7, #0
1000c6c8:	b2ed      	uxtb	r5, r5
1000c6ca:	e783      	b.n	1000c5d4 <__aeabi_dsub+0x5b4>
1000c6cc:	1c17      	adds	r7, r2, #0
1000c6ce:	9d01      	ldr	r5, [sp, #4]
1000c6d0:	4c02      	ldr	r4, [pc, #8]	; (1000c6dc <__aeabi_dsub+0x6bc>)
1000c6d2:	e4d7      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c6d4:	1c17      	adds	r7, r2, #0
1000c6d6:	9d01      	ldr	r5, [sp, #4]
1000c6d8:	e4d4      	b.n	1000c084 <__aeabi_dsub+0x64>
1000c6da:	46c0      	nop			; (mov r8, r8)
1000c6dc:	000007ff 	.word	0x000007ff
1000c6e0:	ff7fffff 	.word	0xff7fffff
1000c6e4:	4654      	mov	r4, sl
1000c6e6:	1c3b      	adds	r3, r7, #0
1000c6e8:	3c20      	subs	r4, #32
1000c6ea:	40e3      	lsrs	r3, r4
1000c6ec:	1c1c      	adds	r4, r3, #0
1000c6ee:	4653      	mov	r3, sl
1000c6f0:	2b20      	cmp	r3, #32
1000c6f2:	d00d      	beq.n	1000c710 <__aeabi_dsub+0x6f0>
1000c6f4:	2340      	movs	r3, #64	; 0x40
1000c6f6:	4651      	mov	r1, sl
1000c6f8:	1a5b      	subs	r3, r3, r1
1000c6fa:	409f      	lsls	r7, r3
1000c6fc:	433d      	orrs	r5, r7
1000c6fe:	1e6f      	subs	r7, r5, #1
1000c700:	41bd      	sbcs	r5, r7
1000c702:	2700      	movs	r7, #0
1000c704:	4325      	orrs	r5, r4
1000c706:	e765      	b.n	1000c5d4 <__aeabi_dsub+0x5b4>
1000c708:	2700      	movs	r7, #0
1000c70a:	e7cd      	b.n	1000c6a8 <__aeabi_dsub+0x688>
1000c70c:	1c0d      	adds	r5, r1, #0
1000c70e:	e5c8      	b.n	1000c2a2 <__aeabi_dsub+0x282>
1000c710:	2700      	movs	r7, #0
1000c712:	e7f3      	b.n	1000c6fc <__aeabi_dsub+0x6dc>

1000c714 <__aeabi_d2iz>:
1000c714:	030b      	lsls	r3, r1, #12
1000c716:	b530      	push	{r4, r5, lr}
1000c718:	4c13      	ldr	r4, [pc, #76]	; (1000c768 <__aeabi_d2iz+0x54>)
1000c71a:	0b1a      	lsrs	r2, r3, #12
1000c71c:	004b      	lsls	r3, r1, #1
1000c71e:	1c05      	adds	r5, r0, #0
1000c720:	0d5b      	lsrs	r3, r3, #21
1000c722:	0fc9      	lsrs	r1, r1, #31
1000c724:	2000      	movs	r0, #0
1000c726:	42a3      	cmp	r3, r4
1000c728:	dd10      	ble.n	1000c74c <__aeabi_d2iz+0x38>
1000c72a:	4810      	ldr	r0, [pc, #64]	; (1000c76c <__aeabi_d2iz+0x58>)
1000c72c:	4283      	cmp	r3, r0
1000c72e:	dc0e      	bgt.n	1000c74e <__aeabi_d2iz+0x3a>
1000c730:	2080      	movs	r0, #128	; 0x80
1000c732:	4c0f      	ldr	r4, [pc, #60]	; (1000c770 <__aeabi_d2iz+0x5c>)
1000c734:	0340      	lsls	r0, r0, #13
1000c736:	4302      	orrs	r2, r0
1000c738:	1ae4      	subs	r4, r4, r3
1000c73a:	2c1f      	cmp	r4, #31
1000c73c:	dd0a      	ble.n	1000c754 <__aeabi_d2iz+0x40>
1000c73e:	480d      	ldr	r0, [pc, #52]	; (1000c774 <__aeabi_d2iz+0x60>)
1000c740:	1ac3      	subs	r3, r0, r3
1000c742:	40da      	lsrs	r2, r3
1000c744:	1c13      	adds	r3, r2, #0
1000c746:	4248      	negs	r0, r1
1000c748:	4043      	eors	r3, r0
1000c74a:	1858      	adds	r0, r3, r1
1000c74c:	bd30      	pop	{r4, r5, pc}
1000c74e:	4b0a      	ldr	r3, [pc, #40]	; (1000c778 <__aeabi_d2iz+0x64>)
1000c750:	18c8      	adds	r0, r1, r3
1000c752:	e7fb      	b.n	1000c74c <__aeabi_d2iz+0x38>
1000c754:	1c28      	adds	r0, r5, #0
1000c756:	40e0      	lsrs	r0, r4
1000c758:	4c08      	ldr	r4, [pc, #32]	; (1000c77c <__aeabi_d2iz+0x68>)
1000c75a:	46a4      	mov	ip, r4
1000c75c:	4463      	add	r3, ip
1000c75e:	409a      	lsls	r2, r3
1000c760:	1c13      	adds	r3, r2, #0
1000c762:	4303      	orrs	r3, r0
1000c764:	e7ef      	b.n	1000c746 <__aeabi_d2iz+0x32>
1000c766:	46c0      	nop			; (mov r8, r8)
1000c768:	000003fe 	.word	0x000003fe
1000c76c:	0000041d 	.word	0x0000041d
1000c770:	00000433 	.word	0x00000433
1000c774:	00000413 	.word	0x00000413
1000c778:	7fffffff 	.word	0x7fffffff
1000c77c:	fffffbed 	.word	0xfffffbed

1000c780 <__aeabi_i2d>:
1000c780:	b538      	push	{r3, r4, r5, lr}
1000c782:	1e04      	subs	r4, r0, #0
1000c784:	d016      	beq.n	1000c7b4 <__aeabi_i2d+0x34>
1000c786:	0fc5      	lsrs	r5, r0, #31
1000c788:	d000      	beq.n	1000c78c <__aeabi_i2d+0xc>
1000c78a:	4244      	negs	r4, r0
1000c78c:	1c20      	adds	r0, r4, #0
1000c78e:	f7fd fb0b 	bl	10009da8 <__clzsi2>
1000c792:	4b17      	ldr	r3, [pc, #92]	; (1000c7f0 <__aeabi_i2d+0x70>)
1000c794:	1a1b      	subs	r3, r3, r0
1000c796:	280a      	cmp	r0, #10
1000c798:	dc21      	bgt.n	1000c7de <__aeabi_i2d+0x5e>
1000c79a:	1c02      	adds	r2, r0, #0
1000c79c:	1c21      	adds	r1, r4, #0
1000c79e:	3215      	adds	r2, #21
1000c7a0:	4091      	lsls	r1, r2
1000c7a2:	1c0a      	adds	r2, r1, #0
1000c7a4:	210b      	movs	r1, #11
1000c7a6:	1a08      	subs	r0, r1, r0
1000c7a8:	40c4      	lsrs	r4, r0
1000c7aa:	055b      	lsls	r3, r3, #21
1000c7ac:	0324      	lsls	r4, r4, #12
1000c7ae:	0b24      	lsrs	r4, r4, #12
1000c7b0:	0d5b      	lsrs	r3, r3, #21
1000c7b2:	e003      	b.n	1000c7bc <__aeabi_i2d+0x3c>
1000c7b4:	2500      	movs	r5, #0
1000c7b6:	2300      	movs	r3, #0
1000c7b8:	2400      	movs	r4, #0
1000c7ba:	2200      	movs	r2, #0
1000c7bc:	2100      	movs	r1, #0
1000c7be:	1c10      	adds	r0, r2, #0
1000c7c0:	0324      	lsls	r4, r4, #12
1000c7c2:	0d0a      	lsrs	r2, r1, #20
1000c7c4:	0512      	lsls	r2, r2, #20
1000c7c6:	0b24      	lsrs	r4, r4, #12
1000c7c8:	4314      	orrs	r4, r2
1000c7ca:	4a0a      	ldr	r2, [pc, #40]	; (1000c7f4 <__aeabi_i2d+0x74>)
1000c7cc:	051b      	lsls	r3, r3, #20
1000c7ce:	4014      	ands	r4, r2
1000c7d0:	431c      	orrs	r4, r3
1000c7d2:	0064      	lsls	r4, r4, #1
1000c7d4:	07ed      	lsls	r5, r5, #31
1000c7d6:	0864      	lsrs	r4, r4, #1
1000c7d8:	432c      	orrs	r4, r5
1000c7da:	1c21      	adds	r1, r4, #0
1000c7dc:	bd38      	pop	{r3, r4, r5, pc}
1000c7de:	380b      	subs	r0, #11
1000c7e0:	4084      	lsls	r4, r0
1000c7e2:	055b      	lsls	r3, r3, #21
1000c7e4:	0324      	lsls	r4, r4, #12
1000c7e6:	0b24      	lsrs	r4, r4, #12
1000c7e8:	0d5b      	lsrs	r3, r3, #21
1000c7ea:	2200      	movs	r2, #0
1000c7ec:	e7e6      	b.n	1000c7bc <__aeabi_i2d+0x3c>
1000c7ee:	46c0      	nop			; (mov r8, r8)
1000c7f0:	0000041e 	.word	0x0000041e
1000c7f4:	800fffff 	.word	0x800fffff

1000c7f8 <__aeabi_ui2d>:
1000c7f8:	b510      	push	{r4, lr}
1000c7fa:	1e04      	subs	r4, r0, #0
1000c7fc:	d010      	beq.n	1000c820 <__aeabi_ui2d+0x28>
1000c7fe:	f7fd fad3 	bl	10009da8 <__clzsi2>
1000c802:	4a14      	ldr	r2, [pc, #80]	; (1000c854 <__aeabi_ui2d+0x5c>)
1000c804:	1a12      	subs	r2, r2, r0
1000c806:	280a      	cmp	r0, #10
1000c808:	dc1a      	bgt.n	1000c840 <__aeabi_ui2d+0x48>
1000c80a:	230b      	movs	r3, #11
1000c80c:	1c21      	adds	r1, r4, #0
1000c80e:	1a1b      	subs	r3, r3, r0
1000c810:	40d9      	lsrs	r1, r3
1000c812:	3015      	adds	r0, #21
1000c814:	030b      	lsls	r3, r1, #12
1000c816:	0552      	lsls	r2, r2, #21
1000c818:	4084      	lsls	r4, r0
1000c81a:	0b1b      	lsrs	r3, r3, #12
1000c81c:	0d52      	lsrs	r2, r2, #21
1000c81e:	e001      	b.n	1000c824 <__aeabi_ui2d+0x2c>
1000c820:	2200      	movs	r2, #0
1000c822:	2300      	movs	r3, #0
1000c824:	2100      	movs	r1, #0
1000c826:	031b      	lsls	r3, r3, #12
1000c828:	1c20      	adds	r0, r4, #0
1000c82a:	0b1c      	lsrs	r4, r3, #12
1000c82c:	0d0b      	lsrs	r3, r1, #20
1000c82e:	051b      	lsls	r3, r3, #20
1000c830:	4323      	orrs	r3, r4
1000c832:	4c09      	ldr	r4, [pc, #36]	; (1000c858 <__aeabi_ui2d+0x60>)
1000c834:	0512      	lsls	r2, r2, #20
1000c836:	4023      	ands	r3, r4
1000c838:	4313      	orrs	r3, r2
1000c83a:	005b      	lsls	r3, r3, #1
1000c83c:	0859      	lsrs	r1, r3, #1
1000c83e:	bd10      	pop	{r4, pc}
1000c840:	1c03      	adds	r3, r0, #0
1000c842:	3b0b      	subs	r3, #11
1000c844:	409c      	lsls	r4, r3
1000c846:	0552      	lsls	r2, r2, #21
1000c848:	0323      	lsls	r3, r4, #12
1000c84a:	0b1b      	lsrs	r3, r3, #12
1000c84c:	0d52      	lsrs	r2, r2, #21
1000c84e:	2400      	movs	r4, #0
1000c850:	e7e8      	b.n	1000c824 <__aeabi_ui2d+0x2c>
1000c852:	46c0      	nop			; (mov r8, r8)
1000c854:	0000041e 	.word	0x0000041e
1000c858:	800fffff 	.word	0x800fffff

1000c85c <__aeabi_f2d>:
1000c85c:	0042      	lsls	r2, r0, #1
1000c85e:	0e12      	lsrs	r2, r2, #24
1000c860:	1c51      	adds	r1, r2, #1
1000c862:	b538      	push	{r3, r4, r5, lr}
1000c864:	b2c9      	uxtb	r1, r1
1000c866:	0243      	lsls	r3, r0, #9
1000c868:	0a5d      	lsrs	r5, r3, #9
1000c86a:	0fc4      	lsrs	r4, r0, #31
1000c86c:	2901      	cmp	r1, #1
1000c86e:	dd15      	ble.n	1000c89c <__aeabi_f2d+0x40>
1000c870:	21e0      	movs	r1, #224	; 0xe0
1000c872:	0089      	lsls	r1, r1, #2
1000c874:	468c      	mov	ip, r1
1000c876:	076d      	lsls	r5, r5, #29
1000c878:	0b1b      	lsrs	r3, r3, #12
1000c87a:	4462      	add	r2, ip
1000c87c:	2100      	movs	r1, #0
1000c87e:	1c28      	adds	r0, r5, #0
1000c880:	0d0d      	lsrs	r5, r1, #20
1000c882:	052d      	lsls	r5, r5, #20
1000c884:	432b      	orrs	r3, r5
1000c886:	4d1c      	ldr	r5, [pc, #112]	; (1000c8f8 <__aeabi_f2d+0x9c>)
1000c888:	0552      	lsls	r2, r2, #21
1000c88a:	402b      	ands	r3, r5
1000c88c:	0852      	lsrs	r2, r2, #1
1000c88e:	4313      	orrs	r3, r2
1000c890:	005b      	lsls	r3, r3, #1
1000c892:	07e4      	lsls	r4, r4, #31
1000c894:	085b      	lsrs	r3, r3, #1
1000c896:	4323      	orrs	r3, r4
1000c898:	1c19      	adds	r1, r3, #0
1000c89a:	bd38      	pop	{r3, r4, r5, pc}
1000c89c:	2a00      	cmp	r2, #0
1000c89e:	d115      	bne.n	1000c8cc <__aeabi_f2d+0x70>
1000c8a0:	2d00      	cmp	r5, #0
1000c8a2:	d01f      	beq.n	1000c8e4 <__aeabi_f2d+0x88>
1000c8a4:	1c28      	adds	r0, r5, #0
1000c8a6:	f7fd fa7f 	bl	10009da8 <__clzsi2>
1000c8aa:	280a      	cmp	r0, #10
1000c8ac:	dc1d      	bgt.n	1000c8ea <__aeabi_f2d+0x8e>
1000c8ae:	230b      	movs	r3, #11
1000c8b0:	1c2a      	adds	r2, r5, #0
1000c8b2:	1a1b      	subs	r3, r3, r0
1000c8b4:	40da      	lsrs	r2, r3
1000c8b6:	1c13      	adds	r3, r2, #0
1000c8b8:	1c02      	adds	r2, r0, #0
1000c8ba:	3215      	adds	r2, #21
1000c8bc:	4095      	lsls	r5, r2
1000c8be:	4a0f      	ldr	r2, [pc, #60]	; (1000c8fc <__aeabi_f2d+0xa0>)
1000c8c0:	031b      	lsls	r3, r3, #12
1000c8c2:	1a12      	subs	r2, r2, r0
1000c8c4:	0552      	lsls	r2, r2, #21
1000c8c6:	0b1b      	lsrs	r3, r3, #12
1000c8c8:	0d52      	lsrs	r2, r2, #21
1000c8ca:	e7d7      	b.n	1000c87c <__aeabi_f2d+0x20>
1000c8cc:	2d00      	cmp	r5, #0
1000c8ce:	d006      	beq.n	1000c8de <__aeabi_f2d+0x82>
1000c8d0:	2280      	movs	r2, #128	; 0x80
1000c8d2:	0b1b      	lsrs	r3, r3, #12
1000c8d4:	0312      	lsls	r2, r2, #12
1000c8d6:	4313      	orrs	r3, r2
1000c8d8:	076d      	lsls	r5, r5, #29
1000c8da:	4a09      	ldr	r2, [pc, #36]	; (1000c900 <__aeabi_f2d+0xa4>)
1000c8dc:	e7ce      	b.n	1000c87c <__aeabi_f2d+0x20>
1000c8de:	4a08      	ldr	r2, [pc, #32]	; (1000c900 <__aeabi_f2d+0xa4>)
1000c8e0:	2300      	movs	r3, #0
1000c8e2:	e7cb      	b.n	1000c87c <__aeabi_f2d+0x20>
1000c8e4:	2200      	movs	r2, #0
1000c8e6:	2300      	movs	r3, #0
1000c8e8:	e7c8      	b.n	1000c87c <__aeabi_f2d+0x20>
1000c8ea:	1c03      	adds	r3, r0, #0
1000c8ec:	3b0b      	subs	r3, #11
1000c8ee:	409d      	lsls	r5, r3
1000c8f0:	1c2b      	adds	r3, r5, #0
1000c8f2:	2500      	movs	r5, #0
1000c8f4:	e7e3      	b.n	1000c8be <__aeabi_f2d+0x62>
1000c8f6:	46c0      	nop			; (mov r8, r8)
1000c8f8:	800fffff 	.word	0x800fffff
1000c8fc:	00000389 	.word	0x00000389
1000c900:	000007ff 	.word	0x000007ff

1000c904 <__aeabi_d2f>:
1000c904:	b570      	push	{r4, r5, r6, lr}
1000c906:	030b      	lsls	r3, r1, #12
1000c908:	004d      	lsls	r5, r1, #1
1000c90a:	0f44      	lsrs	r4, r0, #29
1000c90c:	0d6d      	lsrs	r5, r5, #21
1000c90e:	0a5b      	lsrs	r3, r3, #9
1000c910:	4323      	orrs	r3, r4
1000c912:	1c6c      	adds	r4, r5, #1
1000c914:	0564      	lsls	r4, r4, #21
1000c916:	0fc9      	lsrs	r1, r1, #31
1000c918:	00c2      	lsls	r2, r0, #3
1000c91a:	0d64      	lsrs	r4, r4, #21
1000c91c:	2c01      	cmp	r4, #1
1000c91e:	dd2a      	ble.n	1000c976 <__aeabi_d2f+0x72>
1000c920:	4c3b      	ldr	r4, [pc, #236]	; (1000ca10 <__aeabi_d2f+0x10c>)
1000c922:	192c      	adds	r4, r5, r4
1000c924:	2cfe      	cmp	r4, #254	; 0xfe
1000c926:	dc1a      	bgt.n	1000c95e <__aeabi_d2f+0x5a>
1000c928:	2c00      	cmp	r4, #0
1000c92a:	dd35      	ble.n	1000c998 <__aeabi_d2f+0x94>
1000c92c:	0180      	lsls	r0, r0, #6
1000c92e:	1e45      	subs	r5, r0, #1
1000c930:	41a8      	sbcs	r0, r5
1000c932:	00db      	lsls	r3, r3, #3
1000c934:	4303      	orrs	r3, r0
1000c936:	0f52      	lsrs	r2, r2, #29
1000c938:	4313      	orrs	r3, r2
1000c93a:	075a      	lsls	r2, r3, #29
1000c93c:	d004      	beq.n	1000c948 <__aeabi_d2f+0x44>
1000c93e:	220f      	movs	r2, #15
1000c940:	401a      	ands	r2, r3
1000c942:	2a04      	cmp	r2, #4
1000c944:	d000      	beq.n	1000c948 <__aeabi_d2f+0x44>
1000c946:	3304      	adds	r3, #4
1000c948:	2280      	movs	r2, #128	; 0x80
1000c94a:	04d2      	lsls	r2, r2, #19
1000c94c:	401a      	ands	r2, r3
1000c94e:	d027      	beq.n	1000c9a0 <__aeabi_d2f+0x9c>
1000c950:	3401      	adds	r4, #1
1000c952:	2cff      	cmp	r4, #255	; 0xff
1000c954:	d003      	beq.n	1000c95e <__aeabi_d2f+0x5a>
1000c956:	019b      	lsls	r3, r3, #6
1000c958:	0a5b      	lsrs	r3, r3, #9
1000c95a:	b2e4      	uxtb	r4, r4
1000c95c:	e001      	b.n	1000c962 <__aeabi_d2f+0x5e>
1000c95e:	24ff      	movs	r4, #255	; 0xff
1000c960:	2300      	movs	r3, #0
1000c962:	025b      	lsls	r3, r3, #9
1000c964:	05e4      	lsls	r4, r4, #23
1000c966:	0a5b      	lsrs	r3, r3, #9
1000c968:	4323      	orrs	r3, r4
1000c96a:	005b      	lsls	r3, r3, #1
1000c96c:	07c9      	lsls	r1, r1, #31
1000c96e:	085b      	lsrs	r3, r3, #1
1000c970:	430b      	orrs	r3, r1
1000c972:	1c18      	adds	r0, r3, #0
1000c974:	bd70      	pop	{r4, r5, r6, pc}
1000c976:	2d00      	cmp	r5, #0
1000c978:	d106      	bne.n	1000c988 <__aeabi_d2f+0x84>
1000c97a:	4313      	orrs	r3, r2
1000c97c:	d10e      	bne.n	1000c99c <__aeabi_d2f+0x98>
1000c97e:	2400      	movs	r4, #0
1000c980:	025b      	lsls	r3, r3, #9
1000c982:	0a5b      	lsrs	r3, r3, #9
1000c984:	b2e4      	uxtb	r4, r4
1000c986:	e7ec      	b.n	1000c962 <__aeabi_d2f+0x5e>
1000c988:	431a      	orrs	r2, r3
1000c98a:	d0e8      	beq.n	1000c95e <__aeabi_d2f+0x5a>
1000c98c:	2080      	movs	r0, #128	; 0x80
1000c98e:	00db      	lsls	r3, r3, #3
1000c990:	0480      	lsls	r0, r0, #18
1000c992:	4303      	orrs	r3, r0
1000c994:	24ff      	movs	r4, #255	; 0xff
1000c996:	e7d0      	b.n	1000c93a <__aeabi_d2f+0x36>
1000c998:	3417      	adds	r4, #23
1000c99a:	da0c      	bge.n	1000c9b6 <__aeabi_d2f+0xb2>
1000c99c:	2305      	movs	r3, #5
1000c99e:	2400      	movs	r4, #0
1000c9a0:	08db      	lsrs	r3, r3, #3
1000c9a2:	2cff      	cmp	r4, #255	; 0xff
1000c9a4:	d1ec      	bne.n	1000c980 <__aeabi_d2f+0x7c>
1000c9a6:	2b00      	cmp	r3, #0
1000c9a8:	d02d      	beq.n	1000ca06 <__aeabi_d2f+0x102>
1000c9aa:	2280      	movs	r2, #128	; 0x80
1000c9ac:	03d2      	lsls	r2, r2, #15
1000c9ae:	4313      	orrs	r3, r2
1000c9b0:	025b      	lsls	r3, r3, #9
1000c9b2:	0a5b      	lsrs	r3, r3, #9
1000c9b4:	e7d5      	b.n	1000c962 <__aeabi_d2f+0x5e>
1000c9b6:	2480      	movs	r4, #128	; 0x80
1000c9b8:	4816      	ldr	r0, [pc, #88]	; (1000ca14 <__aeabi_d2f+0x110>)
1000c9ba:	0424      	lsls	r4, r4, #16
1000c9bc:	4323      	orrs	r3, r4
1000c9be:	1b40      	subs	r0, r0, r5
1000c9c0:	281f      	cmp	r0, #31
1000c9c2:	dc0d      	bgt.n	1000c9e0 <__aeabi_d2f+0xdc>
1000c9c4:	4c14      	ldr	r4, [pc, #80]	; (1000ca18 <__aeabi_d2f+0x114>)
1000c9c6:	46a4      	mov	ip, r4
1000c9c8:	4465      	add	r5, ip
1000c9ca:	40ab      	lsls	r3, r5
1000c9cc:	1c1c      	adds	r4, r3, #0
1000c9ce:	1c13      	adds	r3, r2, #0
1000c9d0:	40ab      	lsls	r3, r5
1000c9d2:	1e5d      	subs	r5, r3, #1
1000c9d4:	41ab      	sbcs	r3, r5
1000c9d6:	40c2      	lsrs	r2, r0
1000c9d8:	4323      	orrs	r3, r4
1000c9da:	4313      	orrs	r3, r2
1000c9dc:	2400      	movs	r4, #0
1000c9de:	e7ac      	b.n	1000c93a <__aeabi_d2f+0x36>
1000c9e0:	1c1e      	adds	r6, r3, #0
1000c9e2:	4c0e      	ldr	r4, [pc, #56]	; (1000ca1c <__aeabi_d2f+0x118>)
1000c9e4:	1b64      	subs	r4, r4, r5
1000c9e6:	40e6      	lsrs	r6, r4
1000c9e8:	1c34      	adds	r4, r6, #0
1000c9ea:	2820      	cmp	r0, #32
1000c9ec:	d00d      	beq.n	1000ca0a <__aeabi_d2f+0x106>
1000c9ee:	480c      	ldr	r0, [pc, #48]	; (1000ca20 <__aeabi_d2f+0x11c>)
1000c9f0:	4684      	mov	ip, r0
1000c9f2:	4465      	add	r5, ip
1000c9f4:	40ab      	lsls	r3, r5
1000c9f6:	1c1d      	adds	r5, r3, #0
1000c9f8:	432a      	orrs	r2, r5
1000c9fa:	1e53      	subs	r3, r2, #1
1000c9fc:	419a      	sbcs	r2, r3
1000c9fe:	1c13      	adds	r3, r2, #0
1000ca00:	4323      	orrs	r3, r4
1000ca02:	2400      	movs	r4, #0
1000ca04:	e799      	b.n	1000c93a <__aeabi_d2f+0x36>
1000ca06:	2300      	movs	r3, #0
1000ca08:	e7ab      	b.n	1000c962 <__aeabi_d2f+0x5e>
1000ca0a:	2500      	movs	r5, #0
1000ca0c:	e7f4      	b.n	1000c9f8 <__aeabi_d2f+0xf4>
1000ca0e:	46c0      	nop			; (mov r8, r8)
1000ca10:	fffffc80 	.word	0xfffffc80
1000ca14:	0000039e 	.word	0x0000039e
1000ca18:	fffffc82 	.word	0xfffffc82
1000ca1c:	0000037e 	.word	0x0000037e
1000ca20:	fffffca2 	.word	0xfffffca2

1000ca24 <__aeabi_idiv0>:
1000ca24:	4770      	bx	lr
1000ca26:	46c0      	nop			; (mov r8, r8)

1000ca28 <__divdi3>:
1000ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ca2a:	4644      	mov	r4, r8
1000ca2c:	465f      	mov	r7, fp
1000ca2e:	4656      	mov	r6, sl
1000ca30:	464d      	mov	r5, r9
1000ca32:	b4f0      	push	{r4, r5, r6, r7}
1000ca34:	1c1c      	adds	r4, r3, #0
1000ca36:	b085      	sub	sp, #20
1000ca38:	2900      	cmp	r1, #0
1000ca3a:	da00      	bge.n	1000ca3e <__divdi3+0x16>
1000ca3c:	e0a9      	b.n	1000cb92 <__divdi3+0x16a>
1000ca3e:	1c0f      	adds	r7, r1, #0
1000ca40:	2100      	movs	r1, #0
1000ca42:	1c06      	adds	r6, r0, #0
1000ca44:	4688      	mov	r8, r1
1000ca46:	1c10      	adds	r0, r2, #0
1000ca48:	1c19      	adds	r1, r3, #0
1000ca4a:	2c00      	cmp	r4, #0
1000ca4c:	da00      	bge.n	1000ca50 <__divdi3+0x28>
1000ca4e:	e097      	b.n	1000cb80 <__divdi3+0x158>
1000ca50:	1c34      	adds	r4, r6, #0
1000ca52:	1c3d      	adds	r5, r7, #0
1000ca54:	4682      	mov	sl, r0
1000ca56:	4689      	mov	r9, r1
1000ca58:	42b9      	cmp	r1, r7
1000ca5a:	d873      	bhi.n	1000cb44 <__divdi3+0x11c>
1000ca5c:	d070      	beq.n	1000cb40 <__divdi3+0x118>
1000ca5e:	4649      	mov	r1, r9
1000ca60:	4650      	mov	r0, sl
1000ca62:	f000 f985 	bl	1000cd70 <__clzdi2>
1000ca66:	4683      	mov	fp, r0
1000ca68:	1c39      	adds	r1, r7, #0
1000ca6a:	1c30      	adds	r0, r6, #0
1000ca6c:	f000 f980 	bl	1000cd70 <__clzdi2>
1000ca70:	465b      	mov	r3, fp
1000ca72:	1a18      	subs	r0, r3, r0
1000ca74:	1c03      	adds	r3, r0, #0
1000ca76:	4683      	mov	fp, r0
1000ca78:	3b20      	subs	r3, #32
1000ca7a:	469c      	mov	ip, r3
1000ca7c:	d500      	bpl.n	1000ca80 <__divdi3+0x58>
1000ca7e:	e09c      	b.n	1000cbba <__divdi3+0x192>
1000ca80:	2300      	movs	r3, #0
1000ca82:	2200      	movs	r2, #0
1000ca84:	4651      	mov	r1, sl
1000ca86:	9200      	str	r2, [sp, #0]
1000ca88:	9301      	str	r3, [sp, #4]
1000ca8a:	4663      	mov	r3, ip
1000ca8c:	4099      	lsls	r1, r3
1000ca8e:	9101      	str	r1, [sp, #4]
1000ca90:	4651      	mov	r1, sl
1000ca92:	4081      	lsls	r1, r0
1000ca94:	9b01      	ldr	r3, [sp, #4]
1000ca96:	9100      	str	r1, [sp, #0]
1000ca98:	42bb      	cmp	r3, r7
1000ca9a:	d900      	bls.n	1000ca9e <__divdi3+0x76>
1000ca9c:	e083      	b.n	1000cba6 <__divdi3+0x17e>
1000ca9e:	d100      	bne.n	1000caa2 <__divdi3+0x7a>
1000caa0:	e07e      	b.n	1000cba0 <__divdi3+0x178>
1000caa2:	9a00      	ldr	r2, [sp, #0]
1000caa4:	9b01      	ldr	r3, [sp, #4]
1000caa6:	1c34      	adds	r4, r6, #0
1000caa8:	1c3d      	adds	r5, r7, #0
1000caaa:	1aa4      	subs	r4, r4, r2
1000caac:	419d      	sbcs	r5, r3
1000caae:	4663      	mov	r3, ip
1000cab0:	2b00      	cmp	r3, #0
1000cab2:	da00      	bge.n	1000cab6 <__divdi3+0x8e>
1000cab4:	e09a      	b.n	1000cbec <__divdi3+0x1c4>
1000cab6:	2600      	movs	r6, #0
1000cab8:	2700      	movs	r7, #0
1000caba:	9602      	str	r6, [sp, #8]
1000cabc:	9703      	str	r7, [sp, #12]
1000cabe:	3601      	adds	r6, #1
1000cac0:	409e      	lsls	r6, r3
1000cac2:	9603      	str	r6, [sp, #12]
1000cac4:	2601      	movs	r6, #1
1000cac6:	4086      	lsls	r6, r0
1000cac8:	9602      	str	r6, [sp, #8]
1000caca:	2800      	cmp	r0, #0
1000cacc:	d100      	bne.n	1000cad0 <__divdi3+0xa8>
1000cace:	e071      	b.n	1000cbb4 <__divdi3+0x18c>
1000cad0:	9900      	ldr	r1, [sp, #0]
1000cad2:	9a01      	ldr	r2, [sp, #4]
1000cad4:	07d3      	lsls	r3, r2, #31
1000cad6:	4699      	mov	r9, r3
1000cad8:	464b      	mov	r3, r9
1000cada:	084e      	lsrs	r6, r1, #1
1000cadc:	431e      	orrs	r6, r3
1000cade:	0857      	lsrs	r7, r2, #1
1000cae0:	2300      	movs	r3, #0
1000cae2:	2201      	movs	r2, #1
1000cae4:	e00c      	b.n	1000cb00 <__divdi3+0xd8>
1000cae6:	42af      	cmp	r7, r5
1000cae8:	d101      	bne.n	1000caee <__divdi3+0xc6>
1000caea:	42a6      	cmp	r6, r4
1000caec:	d80a      	bhi.n	1000cb04 <__divdi3+0xdc>
1000caee:	1ba4      	subs	r4, r4, r6
1000caf0:	41bd      	sbcs	r5, r7
1000caf2:	1924      	adds	r4, r4, r4
1000caf4:	416d      	adcs	r5, r5
1000caf6:	3801      	subs	r0, #1
1000caf8:	18a4      	adds	r4, r4, r2
1000cafa:	415d      	adcs	r5, r3
1000cafc:	2800      	cmp	r0, #0
1000cafe:	d006      	beq.n	1000cb0e <__divdi3+0xe6>
1000cb00:	42af      	cmp	r7, r5
1000cb02:	d9f0      	bls.n	1000cae6 <__divdi3+0xbe>
1000cb04:	3801      	subs	r0, #1
1000cb06:	1924      	adds	r4, r4, r4
1000cb08:	416d      	adcs	r5, r5
1000cb0a:	2800      	cmp	r0, #0
1000cb0c:	d1f8      	bne.n	1000cb00 <__divdi3+0xd8>
1000cb0e:	2220      	movs	r2, #32
1000cb10:	9e02      	ldr	r6, [sp, #8]
1000cb12:	9f03      	ldr	r7, [sp, #12]
1000cb14:	465b      	mov	r3, fp
1000cb16:	4252      	negs	r2, r2
1000cb18:	1936      	adds	r6, r6, r4
1000cb1a:	416f      	adcs	r7, r5
1000cb1c:	1899      	adds	r1, r3, r2
1000cb1e:	d45a      	bmi.n	1000cbd6 <__divdi3+0x1ae>
1000cb20:	1c28      	adds	r0, r5, #0
1000cb22:	40c8      	lsrs	r0, r1
1000cb24:	1c2c      	adds	r4, r5, #0
1000cb26:	465b      	mov	r3, fp
1000cb28:	40dc      	lsrs	r4, r3
1000cb2a:	2900      	cmp	r1, #0
1000cb2c:	db68      	blt.n	1000cc00 <__divdi3+0x1d8>
1000cb2e:	1c04      	adds	r4, r0, #0
1000cb30:	408c      	lsls	r4, r1
1000cb32:	1c23      	adds	r3, r4, #0
1000cb34:	4659      	mov	r1, fp
1000cb36:	4088      	lsls	r0, r1
1000cb38:	1c02      	adds	r2, r0, #0
1000cb3a:	1ab6      	subs	r6, r6, r2
1000cb3c:	419f      	sbcs	r7, r3
1000cb3e:	e003      	b.n	1000cb48 <__divdi3+0x120>
1000cb40:	42b0      	cmp	r0, r6
1000cb42:	d98c      	bls.n	1000ca5e <__divdi3+0x36>
1000cb44:	2600      	movs	r6, #0
1000cb46:	2700      	movs	r7, #0
1000cb48:	4641      	mov	r1, r8
1000cb4a:	1e4b      	subs	r3, r1, #1
1000cb4c:	4199      	sbcs	r1, r3
1000cb4e:	2300      	movs	r3, #0
1000cb50:	9100      	str	r1, [sp, #0]
1000cb52:	9301      	str	r3, [sp, #4]
1000cb54:	9a00      	ldr	r2, [sp, #0]
1000cb56:	9b01      	ldr	r3, [sp, #4]
1000cb58:	2500      	movs	r5, #0
1000cb5a:	4254      	negs	r4, r2
1000cb5c:	419d      	sbcs	r5, r3
1000cb5e:	1c33      	adds	r3, r6, #0
1000cb60:	4063      	eors	r3, r4
1000cb62:	1c18      	adds	r0, r3, #0
1000cb64:	1c3b      	adds	r3, r7, #0
1000cb66:	406b      	eors	r3, r5
1000cb68:	1c19      	adds	r1, r3, #0
1000cb6a:	9b00      	ldr	r3, [sp, #0]
1000cb6c:	9c01      	ldr	r4, [sp, #4]
1000cb6e:	18c0      	adds	r0, r0, r3
1000cb70:	4161      	adcs	r1, r4
1000cb72:	b005      	add	sp, #20
1000cb74:	bc3c      	pop	{r2, r3, r4, r5}
1000cb76:	4690      	mov	r8, r2
1000cb78:	4699      	mov	r9, r3
1000cb7a:	46a2      	mov	sl, r4
1000cb7c:	46ab      	mov	fp, r5
1000cb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cb80:	4643      	mov	r3, r8
1000cb82:	43db      	mvns	r3, r3
1000cb84:	1c0c      	adds	r4, r1, #0
1000cb86:	4698      	mov	r8, r3
1000cb88:	1c13      	adds	r3, r2, #0
1000cb8a:	2100      	movs	r1, #0
1000cb8c:	4258      	negs	r0, r3
1000cb8e:	41a1      	sbcs	r1, r4
1000cb90:	e75e      	b.n	1000ca50 <__divdi3+0x28>
1000cb92:	2700      	movs	r7, #0
1000cb94:	4246      	negs	r6, r0
1000cb96:	418f      	sbcs	r7, r1
1000cb98:	2101      	movs	r1, #1
1000cb9a:	4249      	negs	r1, r1
1000cb9c:	4688      	mov	r8, r1
1000cb9e:	e752      	b.n	1000ca46 <__divdi3+0x1e>
1000cba0:	42b1      	cmp	r1, r6
1000cba2:	d800      	bhi.n	1000cba6 <__divdi3+0x17e>
1000cba4:	e77d      	b.n	1000caa2 <__divdi3+0x7a>
1000cba6:	2600      	movs	r6, #0
1000cba8:	2700      	movs	r7, #0
1000cbaa:	9602      	str	r6, [sp, #8]
1000cbac:	9703      	str	r7, [sp, #12]
1000cbae:	2800      	cmp	r0, #0
1000cbb0:	d000      	beq.n	1000cbb4 <__divdi3+0x18c>
1000cbb2:	e78d      	b.n	1000cad0 <__divdi3+0xa8>
1000cbb4:	9e02      	ldr	r6, [sp, #8]
1000cbb6:	9f03      	ldr	r7, [sp, #12]
1000cbb8:	e7c6      	b.n	1000cb48 <__divdi3+0x120>
1000cbba:	2120      	movs	r1, #32
1000cbbc:	4653      	mov	r3, sl
1000cbbe:	1a09      	subs	r1, r1, r0
1000cbc0:	40cb      	lsrs	r3, r1
1000cbc2:	2200      	movs	r2, #0
1000cbc4:	1c19      	adds	r1, r3, #0
1000cbc6:	2300      	movs	r3, #0
1000cbc8:	9200      	str	r2, [sp, #0]
1000cbca:	9301      	str	r3, [sp, #4]
1000cbcc:	464b      	mov	r3, r9
1000cbce:	4083      	lsls	r3, r0
1000cbd0:	430b      	orrs	r3, r1
1000cbd2:	9301      	str	r3, [sp, #4]
1000cbd4:	e75c      	b.n	1000ca90 <__divdi3+0x68>
1000cbd6:	465a      	mov	r2, fp
1000cbd8:	2320      	movs	r3, #32
1000cbda:	1a9b      	subs	r3, r3, r2
1000cbdc:	1c2a      	adds	r2, r5, #0
1000cbde:	409a      	lsls	r2, r3
1000cbe0:	1c20      	adds	r0, r4, #0
1000cbe2:	1c13      	adds	r3, r2, #0
1000cbe4:	465a      	mov	r2, fp
1000cbe6:	40d0      	lsrs	r0, r2
1000cbe8:	4318      	orrs	r0, r3
1000cbea:	e79b      	b.n	1000cb24 <__divdi3+0xfc>
1000cbec:	2620      	movs	r6, #32
1000cbee:	2700      	movs	r7, #0
1000cbf0:	1a33      	subs	r3, r6, r0
1000cbf2:	2600      	movs	r6, #0
1000cbf4:	9602      	str	r6, [sp, #8]
1000cbf6:	9703      	str	r7, [sp, #12]
1000cbf8:	2701      	movs	r7, #1
1000cbfa:	40df      	lsrs	r7, r3
1000cbfc:	9703      	str	r7, [sp, #12]
1000cbfe:	e761      	b.n	1000cac4 <__divdi3+0x9c>
1000cc00:	465b      	mov	r3, fp
1000cc02:	2120      	movs	r1, #32
1000cc04:	465d      	mov	r5, fp
1000cc06:	1ac9      	subs	r1, r1, r3
1000cc08:	1c03      	adds	r3, r0, #0
1000cc0a:	40ac      	lsls	r4, r5
1000cc0c:	40cb      	lsrs	r3, r1
1000cc0e:	1c19      	adds	r1, r3, #0
1000cc10:	1c23      	adds	r3, r4, #0
1000cc12:	430b      	orrs	r3, r1
1000cc14:	e78e      	b.n	1000cb34 <__divdi3+0x10c>
1000cc16:	46c0      	nop			; (mov r8, r8)

1000cc18 <__udivdi3>:
1000cc18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc1a:	4645      	mov	r5, r8
1000cc1c:	464e      	mov	r6, r9
1000cc1e:	4657      	mov	r7, sl
1000cc20:	b4e0      	push	{r5, r6, r7}
1000cc22:	1c04      	adds	r4, r0, #0
1000cc24:	b082      	sub	sp, #8
1000cc26:	1c0d      	adds	r5, r1, #0
1000cc28:	4691      	mov	r9, r2
1000cc2a:	4698      	mov	r8, r3
1000cc2c:	428b      	cmp	r3, r1
1000cc2e:	d862      	bhi.n	1000ccf6 <__udivdi3+0xde>
1000cc30:	d05f      	beq.n	1000ccf2 <__udivdi3+0xda>
1000cc32:	4641      	mov	r1, r8
1000cc34:	4648      	mov	r0, r9
1000cc36:	f000 f89b 	bl	1000cd70 <__clzdi2>
1000cc3a:	1c29      	adds	r1, r5, #0
1000cc3c:	1c06      	adds	r6, r0, #0
1000cc3e:	1c20      	adds	r0, r4, #0
1000cc40:	f000 f896 	bl	1000cd70 <__clzdi2>
1000cc44:	2320      	movs	r3, #32
1000cc46:	1a31      	subs	r1, r6, r0
1000cc48:	425b      	negs	r3, r3
1000cc4a:	468a      	mov	sl, r1
1000cc4c:	18c8      	adds	r0, r1, r3
1000cc4e:	d465      	bmi.n	1000cd1c <__udivdi3+0x104>
1000cc50:	464b      	mov	r3, r9
1000cc52:	4083      	lsls	r3, r0
1000cc54:	1c1f      	adds	r7, r3, #0
1000cc56:	464b      	mov	r3, r9
1000cc58:	408b      	lsls	r3, r1
1000cc5a:	1c1e      	adds	r6, r3, #0
1000cc5c:	42af      	cmp	r7, r5
1000cc5e:	d858      	bhi.n	1000cd12 <__udivdi3+0xfa>
1000cc60:	d055      	beq.n	1000cd0e <__udivdi3+0xf6>
1000cc62:	1ba4      	subs	r4, r4, r6
1000cc64:	41bd      	sbcs	r5, r7
1000cc66:	2800      	cmp	r0, #0
1000cc68:	da00      	bge.n	1000cc6c <__udivdi3+0x54>
1000cc6a:	e077      	b.n	1000cd5c <__udivdi3+0x144>
1000cc6c:	2200      	movs	r2, #0
1000cc6e:	2300      	movs	r3, #0
1000cc70:	9200      	str	r2, [sp, #0]
1000cc72:	9301      	str	r3, [sp, #4]
1000cc74:	3201      	adds	r2, #1
1000cc76:	4082      	lsls	r2, r0
1000cc78:	9201      	str	r2, [sp, #4]
1000cc7a:	2301      	movs	r3, #1
1000cc7c:	408b      	lsls	r3, r1
1000cc7e:	9300      	str	r3, [sp, #0]
1000cc80:	2900      	cmp	r1, #0
1000cc82:	d03c      	beq.n	1000ccfe <__udivdi3+0xe6>
1000cc84:	07fb      	lsls	r3, r7, #31
1000cc86:	4698      	mov	r8, r3
1000cc88:	4640      	mov	r0, r8
1000cc8a:	0872      	lsrs	r2, r6, #1
1000cc8c:	087b      	lsrs	r3, r7, #1
1000cc8e:	4302      	orrs	r2, r0
1000cc90:	2601      	movs	r6, #1
1000cc92:	2700      	movs	r7, #0
1000cc94:	e00c      	b.n	1000ccb0 <__udivdi3+0x98>
1000cc96:	42ab      	cmp	r3, r5
1000cc98:	d101      	bne.n	1000cc9e <__udivdi3+0x86>
1000cc9a:	42a2      	cmp	r2, r4
1000cc9c:	d80a      	bhi.n	1000ccb4 <__udivdi3+0x9c>
1000cc9e:	1aa4      	subs	r4, r4, r2
1000cca0:	419d      	sbcs	r5, r3
1000cca2:	1924      	adds	r4, r4, r4
1000cca4:	416d      	adcs	r5, r5
1000cca6:	3901      	subs	r1, #1
1000cca8:	19a4      	adds	r4, r4, r6
1000ccaa:	417d      	adcs	r5, r7
1000ccac:	2900      	cmp	r1, #0
1000ccae:	d006      	beq.n	1000ccbe <__udivdi3+0xa6>
1000ccb0:	42ab      	cmp	r3, r5
1000ccb2:	d9f0      	bls.n	1000cc96 <__udivdi3+0x7e>
1000ccb4:	3901      	subs	r1, #1
1000ccb6:	1924      	adds	r4, r4, r4
1000ccb8:	416d      	adcs	r5, r5
1000ccba:	2900      	cmp	r1, #0
1000ccbc:	d1f8      	bne.n	1000ccb0 <__udivdi3+0x98>
1000ccbe:	2220      	movs	r2, #32
1000ccc0:	9800      	ldr	r0, [sp, #0]
1000ccc2:	9901      	ldr	r1, [sp, #4]
1000ccc4:	4653      	mov	r3, sl
1000ccc6:	4252      	negs	r2, r2
1000ccc8:	1900      	adds	r0, r0, r4
1000ccca:	4169      	adcs	r1, r5
1000cccc:	189e      	adds	r6, r3, r2
1000ccce:	d43a      	bmi.n	1000cd46 <__udivdi3+0x12e>
1000ccd0:	1c2f      	adds	r7, r5, #0
1000ccd2:	40f7      	lsrs	r7, r6
1000ccd4:	4653      	mov	r3, sl
1000ccd6:	40dd      	lsrs	r5, r3
1000ccd8:	2e00      	cmp	r6, #0
1000ccda:	db29      	blt.n	1000cd30 <__udivdi3+0x118>
1000ccdc:	1c3c      	adds	r4, r7, #0
1000ccde:	40b4      	lsls	r4, r6
1000cce0:	1c23      	adds	r3, r4, #0
1000cce2:	4654      	mov	r4, sl
1000cce4:	40a7      	lsls	r7, r4
1000cce6:	1c3a      	adds	r2, r7, #0
1000cce8:	1a80      	subs	r0, r0, r2
1000ccea:	4199      	sbcs	r1, r3
1000ccec:	9000      	str	r0, [sp, #0]
1000ccee:	9101      	str	r1, [sp, #4]
1000ccf0:	e005      	b.n	1000ccfe <__udivdi3+0xe6>
1000ccf2:	4282      	cmp	r2, r0
1000ccf4:	d99d      	bls.n	1000cc32 <__udivdi3+0x1a>
1000ccf6:	2300      	movs	r3, #0
1000ccf8:	2400      	movs	r4, #0
1000ccfa:	9300      	str	r3, [sp, #0]
1000ccfc:	9401      	str	r4, [sp, #4]
1000ccfe:	9800      	ldr	r0, [sp, #0]
1000cd00:	9901      	ldr	r1, [sp, #4]
1000cd02:	b002      	add	sp, #8
1000cd04:	bc1c      	pop	{r2, r3, r4}
1000cd06:	4690      	mov	r8, r2
1000cd08:	4699      	mov	r9, r3
1000cd0a:	46a2      	mov	sl, r4
1000cd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd0e:	42a3      	cmp	r3, r4
1000cd10:	d9a7      	bls.n	1000cc62 <__udivdi3+0x4a>
1000cd12:	2200      	movs	r2, #0
1000cd14:	2300      	movs	r3, #0
1000cd16:	9200      	str	r2, [sp, #0]
1000cd18:	9301      	str	r3, [sp, #4]
1000cd1a:	e7b1      	b.n	1000cc80 <__udivdi3+0x68>
1000cd1c:	2220      	movs	r2, #32
1000cd1e:	464b      	mov	r3, r9
1000cd20:	1a52      	subs	r2, r2, r1
1000cd22:	40d3      	lsrs	r3, r2
1000cd24:	1c1a      	adds	r2, r3, #0
1000cd26:	4643      	mov	r3, r8
1000cd28:	408b      	lsls	r3, r1
1000cd2a:	1c1f      	adds	r7, r3, #0
1000cd2c:	4317      	orrs	r7, r2
1000cd2e:	e792      	b.n	1000cc56 <__udivdi3+0x3e>
1000cd30:	4653      	mov	r3, sl
1000cd32:	2420      	movs	r4, #32
1000cd34:	4656      	mov	r6, sl
1000cd36:	1ae4      	subs	r4, r4, r3
1000cd38:	1c3b      	adds	r3, r7, #0
1000cd3a:	40b5      	lsls	r5, r6
1000cd3c:	40e3      	lsrs	r3, r4
1000cd3e:	1c1c      	adds	r4, r3, #0
1000cd40:	1c2b      	adds	r3, r5, #0
1000cd42:	4323      	orrs	r3, r4
1000cd44:	e7cd      	b.n	1000cce2 <__udivdi3+0xca>
1000cd46:	4652      	mov	r2, sl
1000cd48:	2320      	movs	r3, #32
1000cd4a:	1a9b      	subs	r3, r3, r2
1000cd4c:	1c2a      	adds	r2, r5, #0
1000cd4e:	409a      	lsls	r2, r3
1000cd50:	1c27      	adds	r7, r4, #0
1000cd52:	1c13      	adds	r3, r2, #0
1000cd54:	4652      	mov	r2, sl
1000cd56:	40d7      	lsrs	r7, r2
1000cd58:	431f      	orrs	r7, r3
1000cd5a:	e7bb      	b.n	1000ccd4 <__udivdi3+0xbc>
1000cd5c:	2320      	movs	r3, #32
1000cd5e:	2200      	movs	r2, #0
1000cd60:	1a58      	subs	r0, r3, r1
1000cd62:	2300      	movs	r3, #0
1000cd64:	9200      	str	r2, [sp, #0]
1000cd66:	9301      	str	r3, [sp, #4]
1000cd68:	3201      	adds	r2, #1
1000cd6a:	40c2      	lsrs	r2, r0
1000cd6c:	9201      	str	r2, [sp, #4]
1000cd6e:	e784      	b.n	1000cc7a <__udivdi3+0x62>

1000cd70 <__clzdi2>:
1000cd70:	b510      	push	{r4, lr}
1000cd72:	2900      	cmp	r1, #0
1000cd74:	d103      	bne.n	1000cd7e <__clzdi2+0xe>
1000cd76:	f7fd f817 	bl	10009da8 <__clzsi2>
1000cd7a:	3020      	adds	r0, #32
1000cd7c:	e002      	b.n	1000cd84 <__clzdi2+0x14>
1000cd7e:	1c08      	adds	r0, r1, #0
1000cd80:	f7fd f812 	bl	10009da8 <__clzsi2>
1000cd84:	bd10      	pop	{r4, pc}
1000cd86:	46c0      	nop			; (mov r8, r8)

1000cd88 <__errno>:
1000cd88:	4b01      	ldr	r3, [pc, #4]	; (1000cd90 <__errno+0x8>)
1000cd8a:	6818      	ldr	r0, [r3, #0]
1000cd8c:	4770      	bx	lr
1000cd8e:	46c0      	nop			; (mov r8, r8)
1000cd90:	200008c8 	.word	0x200008c8

1000cd94 <__libc_init_array>:
1000cd94:	4b0e      	ldr	r3, [pc, #56]	; (1000cdd0 <__libc_init_array+0x3c>)
1000cd96:	b570      	push	{r4, r5, r6, lr}
1000cd98:	2500      	movs	r5, #0
1000cd9a:	1c1e      	adds	r6, r3, #0
1000cd9c:	4c0d      	ldr	r4, [pc, #52]	; (1000cdd4 <__libc_init_array+0x40>)
1000cd9e:	1ae4      	subs	r4, r4, r3
1000cda0:	10a4      	asrs	r4, r4, #2
1000cda2:	42a5      	cmp	r5, r4
1000cda4:	d004      	beq.n	1000cdb0 <__libc_init_array+0x1c>
1000cda6:	00ab      	lsls	r3, r5, #2
1000cda8:	58f3      	ldr	r3, [r6, r3]
1000cdaa:	4798      	blx	r3
1000cdac:	3501      	adds	r5, #1
1000cdae:	e7f8      	b.n	1000cda2 <__libc_init_array+0xe>
1000cdb0:	f7f5 fcde 	bl	10002770 <_init>
1000cdb4:	4b08      	ldr	r3, [pc, #32]	; (1000cdd8 <__libc_init_array+0x44>)
1000cdb6:	2500      	movs	r5, #0
1000cdb8:	1c1e      	adds	r6, r3, #0
1000cdba:	4c08      	ldr	r4, [pc, #32]	; (1000cddc <__libc_init_array+0x48>)
1000cdbc:	1ae4      	subs	r4, r4, r3
1000cdbe:	10a4      	asrs	r4, r4, #2
1000cdc0:	42a5      	cmp	r5, r4
1000cdc2:	d004      	beq.n	1000cdce <__libc_init_array+0x3a>
1000cdc4:	00ab      	lsls	r3, r5, #2
1000cdc6:	58f3      	ldr	r3, [r6, r3]
1000cdc8:	4798      	blx	r3
1000cdca:	3501      	adds	r5, #1
1000cdcc:	e7f8      	b.n	1000cdc0 <__libc_init_array+0x2c>
1000cdce:	bd70      	pop	{r4, r5, r6, pc}
1000cdd0:	200008cc 	.word	0x200008cc
1000cdd4:	200008cc 	.word	0x200008cc
1000cdd8:	200008cc 	.word	0x200008cc
1000cddc:	200008cc 	.word	0x200008cc

1000cde0 <memcpy>:
1000cde0:	2300      	movs	r3, #0
1000cde2:	b510      	push	{r4, lr}
1000cde4:	4293      	cmp	r3, r2
1000cde6:	d003      	beq.n	1000cdf0 <memcpy+0x10>
1000cde8:	5ccc      	ldrb	r4, [r1, r3]
1000cdea:	54c4      	strb	r4, [r0, r3]
1000cdec:	3301      	adds	r3, #1
1000cdee:	e7f9      	b.n	1000cde4 <memcpy+0x4>
1000cdf0:	bd10      	pop	{r4, pc}
1000cdf2:	0000      	movs	r0, r0
1000cdf4:	100024ae 	.word	0x100024ae
1000cdf8:	100024ae 	.word	0x100024ae
1000cdfc:	100024b8 	.word	0x100024b8
1000ce00:	100024b8 	.word	0x100024b8
1000ce04:	100024e6 	.word	0x100024e6
1000ce08:	100024e6 	.word	0x100024e6
1000ce0c:	100024e6 	.word	0x100024e6
1000ce10:	100024e6 	.word	0x100024e6
1000ce14:	100024c2 	.word	0x100024c2
1000ce18:	100024ce 	.word	0x100024ce
1000ce1c:	100024da 	.word	0x100024da
1000ce20:	100024da 	.word	0x100024da

1000ce24 <PWM_servo_fl_compare_config>:
1000ce24:	00000000 00000005                       ........

1000ce2c <PWM_servo_fl_gpio_out_config>:
1000ce2c:	000000a4 00010000                       ........

1000ce34 <PWM_servo_fr_compare_config>:
1000ce34:	00000000 00000005                       ........

1000ce3c <PWM_servo_fr_gpio_out_config>:
1000ce3c:	000000a4 00010000                       ........

1000ce44 <PWM_servo_rl_compare_config>:
1000ce44:	00000000 00000005                       ........

1000ce4c <PWM_servo_rl_gpio_out_config>:
1000ce4c:	000000a4 00010000                       ........

1000ce54 <PWM_servo_rr_compare_config>:
1000ce54:	00000000 00000005                       ........

1000ce5c <PWM_servo_rr_gpio_out_config>:
1000ce5c:	000000a4 00010000                       ........

1000ce64 <RC_Connected>:
1000ce64:	40010600 40040200 00000000 00000000     ...@...@........
1000ce74:	00000004 0000013d 030c0002 01030301     ....=...........

1000ce84 <RC_AUX1>:
1000ce84:	40010630 40040400 00000000 00000000     0..@...@........
1000ce94:	00000002 0000003d 03060001 01060302     ....=...........

1000cea4 <CAN_RX_ULTRASONIC>:
1000cea4:	03040002 00000001                       ........

1000ceac <INTERRUPT_TIMER_10us>:
1000ceac:	03080001 00000001                       ........

1000ceb4 <INTERRUPT_TIMER_CONTROL>:
1000ceb4:	03070002 00000001                       ........

1000cebc <CAN_RX_INVERTER>:
1000cebc:	03030002 00000001                       ........

1000cec4 <GLOBAL_SCU_XMC1_0_config>:
1000cec4:	01030303 00000101                       ........

1000cecc <RC_no_data_LED>:
1000cecc:	40040400 00000080 00010000 00000000     ...@............

1000cedc <CALC_TIME_INDICATOR>:
1000cedc:	40040300 00000080 00010000 00000001     ...@............

1000ceec <MODE_001>:
1000ceec:	40040400 00000080 00010000 00000001     ...@............

1000cefc <MODE_010>:
1000cefc:	40040400 00000080 00010000 00000002     ...@............

1000cf0c <MODE_100>:
1000cf0c:	40040400 00000080 00010000 00000003     ...@............

1000cf1c <WATCHDOG_LED_BLUE>:
1000cf1c:	40040400 00000080 00010000 00000004     ...@............

1000cf2c <LED_CAN_ERROR>:
1000cf2c:	40040000 00000000 00000000 00000006     ...@............

1000cf3c <LED_CA_FRONT>:
1000cf3c:	40040000 00000080 00010000 00000007     ...@............

1000cf4c <LED_CA_LEFT>:
1000cf4c:	40040000 00000080 00010000 00000008     ...@............

1000cf5c <LED_CA_RIGHT>:
1000cf5c:	40040000 00000080 00010000 00000005     ...@............
1000cf6c:	00010000 03300000 00010000 00000000     ......0.........

1000cf7c <CAPTURE_RC_Steering_input>:
1000cf7c:	40040400 0000000a                       ...@....

1000cf84 <CAPTURE_RC_Steering_input_pin_config>:
	...

1000cf8c <CAPTURE_RC_Steering_event0_config>:
1000cf8c:	00000115                                ....

1000cf90 <CAPTURE_RC_Steering_event1_config>:
1000cf90:	00000215                                ....

1000cf94 <CAPTURE_RC_Steering_config>:
1000cf94:	00011060 000000f0                       `.......

1000cf9c <CAPTURE_RC_Speed_input>:
1000cf9c:	40040400 0000000b                       ...@....

1000cfa4 <CAPTURE_RC_Speed_input_pin_config>:
	...

1000cfac <CAPTURE_RC_Speed_event0_config>:
1000cfac:	00000115                                ....

1000cfb0 <CAPTURE_RC_Speed_event1_config>:
1000cfb0:	00000215                                ....

1000cfb4 <CAPTURE_RC_Speed_config>:
1000cfb4:	00011060 000000f0                       `.......

1000cfbc <CAN_NODE_0_gpio_out>:
1000cfbc:	40040400 00000009                       ...@....

1000cfc4 <CAN_NODE_0_gpio_out_config>:
1000cfc4:	000000a4 00000001                       ........

1000cfcc <CAN_NODE_0_gpio_in>:
1000cfcc:	40040400 00000008                       ...@....

1000cfd4 <CAN_NODE_0_gpio_in_config>:
	...

1000cfdc <CAN_NODE_0_BitTimeConfig>:
1000cfdc:	02dc6c00 0007a120 00011f40              .l.. ...@...

1000cfe8 <CAN_NODE_0_sr>:
1000cfe8:	00000000                                ....

1000cfec <CAN_NODE_0_LMO_01_Config>:
1000cfec:	20000748 00000009 00000000              H.. ........

1000cff8 <CAN_NODE_0_LMO_02_Config>:
1000cff8:	20000768 0000000c 00000000              h.. ........

1000d004 <CAN_NODE_0_LMO_03_Config>:
1000d004:	20000788 00000013 00000001              ... ........

1000d010 <CAN_NODE_0_LMO_04_Config>:
1000d010:	200007a8 00000011 00000001              ... ........

1000d01c <CAN_NODE_0_LMO_05_Config>:
1000d01c:	200007c8 00000012 00000001              ... ........

1000d028 <CAN_NODE_0_LMO_06_Config>:
1000d028:	200007e8 00000008 00000001              ... ........

1000d034 <CAN_NODE_0_LMO_07_Config>:
1000d034:	20000808 0001000b 00000001              ... ........

1000d040 <CAN_NODE_0>:
1000d040:	200006d4 50040300 1000cfdc 1000cfec     ... ...P........
1000d050:	1000cff8 1000d004 1000d010 1000d01c     ................
1000d060:	1000d028 1000d034 00000000 00000000     (...4...........
	...
1000d0cc:	1000cfe8 1000cfbc 1000cfc4 1000cfcc     ................
1000d0dc:	1000cfd4 00070102 00000000 10005620     ............ V..
1000d0ec:	10004932 10004d22 10005110 10005542     2I.."M...Q..BU..
1000d0fc:	100055a0 100058d2 100058e0 100058e0     .U...X...X...X..
1000d10c:	100058e0 10005824 100058e0 01010101     .X..$X...X......
1000d11c:	00000000                                ....

1000d120 <atanlo>:
1000d120:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
1000d130:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

1000d140 <atanhi>:
1000d140:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
1000d150:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
1000d160:	00776f70 74727173 00000000 00000000     pow.sqrt........

1000d170 <dp_h>:
	...
1000d178:	40000000 3fe2b803                       ...@...?

1000d180 <dp_l>:
	...
1000d188:	43cfd006 3e4cfdeb                       ...C..L>

1000d190 <bp>:
1000d190:	00000000 3ff00000 00000000 3ff80000     .......?.......?

1000d1a0 <npio2_hw>:
1000d1a0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
1000d1b0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
1000d1c0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
1000d1d0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
1000d1e0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
1000d1f0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
1000d200:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
1000d210:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

1000d220 <two_over_pi>:
1000d220:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
1000d230:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
1000d240:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
1000d250:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
1000d260:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
1000d270:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
1000d280:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
1000d290:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
1000d2a0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
1000d2b0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
1000d2c0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
1000d2d0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
1000d2e0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
1000d2f0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
1000d300:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
1000d310:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
1000d320:	0060e27b 00c08c6b                       {.`.k...

1000d328 <init_jk>:
1000d328:	00000002 00000003 00000004 00000006     ................

1000d338 <PIo2>:
1000d338:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
1000d348:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
1000d358:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
1000d368:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

1000d378 <TWO52>:
1000d378:	00000000 43300000 00000000 c3300000     ......0C......0.
1000d388:	1000a362 1000a32a 1000a346 1000a31e     b...*...F.......
1000d398:	1000a346 1000a28a 1000a346 1000a31e     F.......F.......
1000d3a8:	1000a32a 1000a32a 1000a28a 1000a31e     *...*...........
1000d3b8:	1000a3c8 1000a3c8 1000a3c8 1000a34c     ............L...
1000d3c8:	1000a32a 1000a32a 1000a412 1000a31c     *...*...........
1000d3d8:	1000a412 1000a28a 1000a412 1000a31c     ................
1000d3e8:	1000a32a 1000a32a 1000a28a 1000a31c     *...*...........
1000d3f8:	1000a3c8 1000a3c8 1000a3c8 1000a3f6     ................
1000d408:	1000a72a 1000a722 1000a722 1000a71a     *..."...".......
1000d418:	1000a66c 1000a66c 1000a710 1000a71a     l...l...........
1000d428:	1000a66c 1000a710 1000a66c 1000a71a     l.......l.......
1000d438:	1000a66e 1000a66e 1000a66e 1000a7b4     n...n...n.......
1000d448:	1000b444 1000b332 1000b418 1000b31e     D...2...........
1000d458:	1000b418 1000b422 1000b418 1000b31e     ...."...........
1000d468:	1000b332 1000b332 1000b422 1000b31e     2...2...".......
1000d478:	1000b328 1000b328 1000b328 1000b68a     (...(...(.......
1000d488:	1000bcd8 1000bcb6 1000bcb6 1000bcaa     ................
1000d498:	1000bb9e 1000bb9e 1000bc9e 1000bcaa     ................
1000d4a8:	1000bb9e 1000bc9e 1000bb9e 1000bcaa     ................
1000d4b8:	1000bba2 1000bba2 1000bba2 1000beb8     ................
1000d4c8:	00000043                                C...

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	10003285 	.word	0x10003285
	Insert_InterruptVeener IRQ1	
200000d4:	10003295 	.word	0x10003295
	Insert_InterruptVeener IRQ2	
200000d8:	100032a5 	.word	0x100032a5
	Insert_InterruptVeener IRQ3	
200000dc:	1000440d 	.word	0x1000440d
	Insert_InterruptVeener IRQ4	
200000e0:	100046b9 	.word	0x100046b9
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	10005dd1 	.word	0x10005dd1
	Insert_InterruptVeener IRQ7	
200000ec:	10006a21 	.word	0x10006a21
	Insert_InterruptVeener IRQ8	
200000f0:	10005abd 	.word	0x10005abd
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ12	
20000100:	10005ce5 	.word	0x10005ce5
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
