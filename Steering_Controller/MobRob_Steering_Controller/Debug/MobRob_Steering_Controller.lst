
MobRob_Steering_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bf64  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  1000cf64  1000cf64  0000cf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .VENEER_Code  00000144  2000000c  1000cf6c  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  4 .data         0000037c  20000550  1000d0b0  00010550  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000234  200008cc  0000077c  000108cc  2**2
                  ALLOC
  6 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  7 .debug_aranges 00000ff0  00000000  00000000  000108d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001dc87  00000000  00000000  000118c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004a10  00000000  00000000  0002f547  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000ae17  00000000  00000000  00033f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00003bbc  00000000  00000000  0003ed70  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000981e  00000000  00000000  0004292c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004f5c  00000000  00000000  0004c14a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cb8  00000000  00000000  000510a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 000012e6  00000000  00000000  00051d60  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	1000cf6c 	.word	0x1000cf6c
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	1000d0b0 	.word	0x1000d0b0
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	200008cc 	.word	0x200008cc
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	1000d42c 	.word	0x1000d42c
	ldr	r2, =__ram_code_start
10001084:	200008cc 	.word	0x200008cc
	ldr	r3, =__ram_code_end
10001088:	200008cc 	.word	0x200008cc
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	200008cc 	.word	0x200008cc
	ldr	r2, =__bss_end
10001090:	20000afc 	.word	0x20000afc
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	1000c851 	.word	0x1000c851
    blx  r0
#endif

    ldr  r0, =main
10001098:	10006575 	.word	0x10006575

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f002 f992 	bl	100033cc <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f002 f9de 	bl	10003468 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f001 fa86 	bl	10002618 <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f001 fa73 	bl	10002618 <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	200008cc 	.word	0x200008cc
10001168:	200008d0 	.word	0x200008d0
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
10001188:	b580      	push	{r7, lr}
1000118a:	b082      	sub	sp, #8
1000118c:	af00      	add	r7, sp, #0
1000118e:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(eru);
}
10001190:	46bd      	mov	sp, r7
10001192:	b002      	add	sp, #8
10001194:	bd80      	pop	{r7, pc}
10001196:	46c0      	nop			; (mov r8, r8)

10001198 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001198:	b590      	push	{r4, r7, lr}
1000119a:	b085      	sub	sp, #20
1000119c:	af00      	add	r7, sp, #0
1000119e:	60f8      	str	r0, [r7, #12]
100011a0:	607a      	str	r2, [r7, #4]
100011a2:	230b      	movs	r3, #11
100011a4:	18fb      	adds	r3, r7, r3
100011a6:	1c0a      	adds	r2, r1, #0
100011a8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100011aa:	230b      	movs	r3, #11
100011ac:	18fb      	adds	r3, r7, r3
100011ae:	781b      	ldrb	r3, [r3, #0]
100011b0:	089b      	lsrs	r3, r3, #2
100011b2:	b2db      	uxtb	r3, r3
100011b4:	1c18      	adds	r0, r3, #0
100011b6:	230b      	movs	r3, #11
100011b8:	18fb      	adds	r3, r7, r3
100011ba:	781b      	ldrb	r3, [r3, #0]
100011bc:	089b      	lsrs	r3, r3, #2
100011be:	b2db      	uxtb	r3, r3
100011c0:	1c1a      	adds	r2, r3, #0
100011c2:	68fb      	ldr	r3, [r7, #12]
100011c4:	3204      	adds	r2, #4
100011c6:	0092      	lsls	r2, r2, #2
100011c8:	58d3      	ldr	r3, [r2, r3]
100011ca:	220b      	movs	r2, #11
100011cc:	18ba      	adds	r2, r7, r2
100011ce:	7812      	ldrb	r2, [r2, #0]
100011d0:	2103      	movs	r1, #3
100011d2:	400a      	ands	r2, r1
100011d4:	00d2      	lsls	r2, r2, #3
100011d6:	1c11      	adds	r1, r2, #0
100011d8:	22fc      	movs	r2, #252	; 0xfc
100011da:	408a      	lsls	r2, r1
100011dc:	43d2      	mvns	r2, r2
100011de:	401a      	ands	r2, r3
100011e0:	1c11      	adds	r1, r2, #0
100011e2:	68fb      	ldr	r3, [r7, #12]
100011e4:	1d02      	adds	r2, r0, #4
100011e6:	0092      	lsls	r2, r2, #2
100011e8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011ea:	68fb      	ldr	r3, [r7, #12]
100011ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011ee:	220b      	movs	r2, #11
100011f0:	18ba      	adds	r2, r7, r2
100011f2:	7812      	ldrb	r2, [r2, #0]
100011f4:	0052      	lsls	r2, r2, #1
100011f6:	1c11      	adds	r1, r2, #0
100011f8:	2203      	movs	r2, #3
100011fa:	408a      	lsls	r2, r1
100011fc:	43d2      	mvns	r2, r2
100011fe:	401a      	ands	r2, r3
10001200:	68fb      	ldr	r3, [r7, #12]
10001202:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001204:	230b      	movs	r3, #11
10001206:	18fb      	adds	r3, r7, r3
10001208:	781b      	ldrb	r3, [r3, #0]
1000120a:	08db      	lsrs	r3, r3, #3
1000120c:	b2db      	uxtb	r3, r3
1000120e:	1c18      	adds	r0, r3, #0
10001210:	230b      	movs	r3, #11
10001212:	18fb      	adds	r3, r7, r3
10001214:	781b      	ldrb	r3, [r3, #0]
10001216:	08db      	lsrs	r3, r3, #3
10001218:	b2db      	uxtb	r3, r3
1000121a:	1c1a      	adds	r2, r3, #0
1000121c:	68fb      	ldr	r3, [r7, #12]
1000121e:	3210      	adds	r2, #16
10001220:	0092      	lsls	r2, r2, #2
10001222:	58d3      	ldr	r3, [r2, r3]
10001224:	220b      	movs	r2, #11
10001226:	18ba      	adds	r2, r7, r2
10001228:	7812      	ldrb	r2, [r2, #0]
1000122a:	2107      	movs	r1, #7
1000122c:	400a      	ands	r2, r1
1000122e:	0092      	lsls	r2, r2, #2
10001230:	1c11      	adds	r1, r2, #0
10001232:	2204      	movs	r2, #4
10001234:	408a      	lsls	r2, r1
10001236:	43d2      	mvns	r2, r2
10001238:	401a      	ands	r2, r3
1000123a:	1c11      	adds	r1, r2, #0
1000123c:	68fb      	ldr	r3, [r7, #12]
1000123e:	1c02      	adds	r2, r0, #0
10001240:	3210      	adds	r2, #16
10001242:	0092      	lsls	r2, r2, #2
10001244:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001246:	230b      	movs	r3, #11
10001248:	18fb      	adds	r3, r7, r3
1000124a:	781b      	ldrb	r3, [r3, #0]
1000124c:	08db      	lsrs	r3, r3, #3
1000124e:	b2db      	uxtb	r3, r3
10001250:	1c18      	adds	r0, r3, #0
10001252:	230b      	movs	r3, #11
10001254:	18fb      	adds	r3, r7, r3
10001256:	781b      	ldrb	r3, [r3, #0]
10001258:	08db      	lsrs	r3, r3, #3
1000125a:	b2db      	uxtb	r3, r3
1000125c:	1c1a      	adds	r2, r3, #0
1000125e:	68fb      	ldr	r3, [r7, #12]
10001260:	3210      	adds	r2, #16
10001262:	0092      	lsls	r2, r2, #2
10001264:	58d2      	ldr	r2, [r2, r3]
10001266:	687b      	ldr	r3, [r7, #4]
10001268:	785b      	ldrb	r3, [r3, #1]
1000126a:	1c1c      	adds	r4, r3, #0
1000126c:	230b      	movs	r3, #11
1000126e:	18fb      	adds	r3, r7, r3
10001270:	781b      	ldrb	r3, [r3, #0]
10001272:	2107      	movs	r1, #7
10001274:	400b      	ands	r3, r1
10001276:	009b      	lsls	r3, r3, #2
10001278:	409c      	lsls	r4, r3
1000127a:	1c23      	adds	r3, r4, #0
1000127c:	431a      	orrs	r2, r3
1000127e:	1c11      	adds	r1, r2, #0
10001280:	68fb      	ldr	r3, [r7, #12]
10001282:	1c02      	adds	r2, r0, #0
10001284:	3210      	adds	r2, #16
10001286:	0092      	lsls	r2, r2, #2
10001288:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000128a:	68fb      	ldr	r3, [r7, #12]
1000128c:	4a20      	ldr	r2, [pc, #128]	; (10001310 <XMC_GPIO_Init+0x178>)
1000128e:	4293      	cmp	r3, r2
10001290:	d10b      	bne.n	100012aa <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001292:	68fb      	ldr	r3, [r7, #12]
10001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001296:	220b      	movs	r2, #11
10001298:	18ba      	adds	r2, r7, r2
1000129a:	7812      	ldrb	r2, [r2, #0]
1000129c:	2101      	movs	r1, #1
1000129e:	4091      	lsls	r1, r2
100012a0:	1c0a      	adds	r2, r1, #0
100012a2:	43d2      	mvns	r2, r2
100012a4:	401a      	ands	r2, r3
100012a6:	68fb      	ldr	r3, [r7, #12]
100012a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
100012aa:	687b      	ldr	r3, [r7, #4]
100012ac:	781b      	ldrb	r3, [r3, #0]
100012ae:	b2db      	uxtb	r3, r3
100012b0:	b25b      	sxtb	r3, r3
100012b2:	2b00      	cmp	r3, #0
100012b4:	da07      	bge.n	100012c6 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
100012b6:	687b      	ldr	r3, [r7, #4]
100012b8:	685a      	ldr	r2, [r3, #4]
100012ba:	230b      	movs	r3, #11
100012bc:	18fb      	adds	r3, r7, r3
100012be:	781b      	ldrb	r3, [r3, #0]
100012c0:	409a      	lsls	r2, r3
100012c2:	68fb      	ldr	r3, [r7, #12]
100012c4:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012c6:	230b      	movs	r3, #11
100012c8:	18fb      	adds	r3, r7, r3
100012ca:	781b      	ldrb	r3, [r3, #0]
100012cc:	089b      	lsrs	r3, r3, #2
100012ce:	b2db      	uxtb	r3, r3
100012d0:	1c18      	adds	r0, r3, #0
100012d2:	230b      	movs	r3, #11
100012d4:	18fb      	adds	r3, r7, r3
100012d6:	781b      	ldrb	r3, [r3, #0]
100012d8:	089b      	lsrs	r3, r3, #2
100012da:	b2db      	uxtb	r3, r3
100012dc:	1c1a      	adds	r2, r3, #0
100012de:	68fb      	ldr	r3, [r7, #12]
100012e0:	3204      	adds	r2, #4
100012e2:	0092      	lsls	r2, r2, #2
100012e4:	58d2      	ldr	r2, [r2, r3]
100012e6:	687b      	ldr	r3, [r7, #4]
100012e8:	781b      	ldrb	r3, [r3, #0]
100012ea:	1c1c      	adds	r4, r3, #0
100012ec:	230b      	movs	r3, #11
100012ee:	18fb      	adds	r3, r7, r3
100012f0:	781b      	ldrb	r3, [r3, #0]
100012f2:	2103      	movs	r1, #3
100012f4:	400b      	ands	r3, r1
100012f6:	00db      	lsls	r3, r3, #3
100012f8:	409c      	lsls	r4, r3
100012fa:	1c23      	adds	r3, r4, #0
100012fc:	431a      	orrs	r2, r3
100012fe:	1c11      	adds	r1, r2, #0
10001300:	68fb      	ldr	r3, [r7, #12]
10001302:	1d02      	adds	r2, r0, #4
10001304:	0092      	lsls	r2, r2, #2
10001306:	50d1      	str	r1, [r2, r3]
}
10001308:	46bd      	mov	sp, r7
1000130a:	b005      	add	sp, #20
1000130c:	bd90      	pop	{r4, r7, pc}
1000130e:	46c0      	nop			; (mov r8, r8)
10001310:	40040200 	.word	0x40040200

10001314 <XMC_SCU_INTERRUPT_EnableEvent>:
}
#endif

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
10001314:	b5b0      	push	{r4, r5, r7, lr}
10001316:	b082      	sub	sp, #8
10001318:	af00      	add	r7, sp, #0
1000131a:	6038      	str	r0, [r7, #0]
1000131c:	6079      	str	r1, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
1000131e:	4b09      	ldr	r3, [pc, #36]	; (10001344 <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
10001320:	4a08      	ldr	r2, [pc, #32]	; (10001344 <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
10001322:	6851      	ldr	r1, [r2, #4]
10001324:	683a      	ldr	r2, [r7, #0]
10001326:	430a      	orrs	r2, r1
10001328:	605a      	str	r2, [r3, #4]
#if UC_SERIES == XMC14
  SCU_INTERRUPT->SRMSK1 |= (uint32_t)(event >> 32U);
1000132a:	4b06      	ldr	r3, [pc, #24]	; (10001344 <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
1000132c:	4a05      	ldr	r2, [pc, #20]	; (10001344 <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
1000132e:	6a52      	ldr	r2, [r2, #36]	; 0x24
10001330:	6879      	ldr	r1, [r7, #4]
10001332:	000c      	movs	r4, r1
10001334:	2100      	movs	r1, #0
10001336:	1c0d      	adds	r5, r1, #0
10001338:	1c21      	adds	r1, r4, #0
1000133a:	430a      	orrs	r2, r1
1000133c:	625a      	str	r2, [r3, #36]	; 0x24
#endif
}
1000133e:	46bd      	mov	sp, r7
10001340:	b002      	add	sp, #8
10001342:	bdb0      	pop	{r4, r5, r7, pc}
10001344:	40010038 	.word	0x40010038

10001348 <XMC_SCU_INTERUPT_GetEventStatus>:
#endif
}

/* API to get the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
10001348:	b5b0      	push	{r4, r5, r7, lr}
1000134a:	b082      	sub	sp, #8
1000134c:	af00      	add	r7, sp, #0
  XMC_SCU_INTERRUPT_EVENT_t tmp;

  tmp = SCU_INTERRUPT->SRRAW;
1000134e:	4b0e      	ldr	r3, [pc, #56]	; (10001388 <XMC_SCU_INTERUPT_GetEventStatus+0x40>)
10001350:	681b      	ldr	r3, [r3, #0]
10001352:	603b      	str	r3, [r7, #0]
10001354:	2300      	movs	r3, #0
10001356:	607b      	str	r3, [r7, #4]
#if UC_SERIES == XMC14
  tmp |= ((int64_t)SCU_INTERRUPT->SRRAW1 << 32U);
10001358:	4b0b      	ldr	r3, [pc, #44]	; (10001388 <XMC_SCU_INTERUPT_GetEventStatus+0x40>)
1000135a:	6a1b      	ldr	r3, [r3, #32]
1000135c:	1c1c      	adds	r4, r3, #0
1000135e:	2300      	movs	r3, #0
10001360:	1c1d      	adds	r5, r3, #0
10001362:	0022      	movs	r2, r4
10001364:	2300      	movs	r3, #0
10001366:	1c19      	adds	r1, r3, #0
10001368:	1c0b      	adds	r3, r1, #0
1000136a:	1c14      	adds	r4, r2, #0
1000136c:	683a      	ldr	r2, [r7, #0]
1000136e:	431a      	orrs	r2, r3
10001370:	603a      	str	r2, [r7, #0]
10001372:	687a      	ldr	r2, [r7, #4]
10001374:	4322      	orrs	r2, r4
10001376:	1c13      	adds	r3, r2, #0
10001378:	607b      	str	r3, [r7, #4]
#endif
  return (tmp);
1000137a:	683b      	ldr	r3, [r7, #0]
1000137c:	687c      	ldr	r4, [r7, #4]
}
1000137e:	1c18      	adds	r0, r3, #0
10001380:	1c21      	adds	r1, r4, #0
10001382:	46bd      	mov	sp, r7
10001384:	b002      	add	sp, #8
10001386:	bdb0      	pop	{r4, r5, r7, pc}
10001388:	40010038 	.word	0x40010038

1000138c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
1000138c:	b5b0      	push	{r4, r5, r7, lr}
1000138e:	b082      	sub	sp, #8
10001390:	af00      	add	r7, sp, #0
10001392:	6038      	str	r0, [r7, #0]
10001394:	6079      	str	r1, [r7, #4]
  SCU_INTERRUPT->SRCLR |= (uint32_t)event;
10001396:	4b09      	ldr	r3, [pc, #36]	; (100013bc <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
10001398:	4a08      	ldr	r2, [pc, #32]	; (100013bc <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
1000139a:	6891      	ldr	r1, [r2, #8]
1000139c:	683a      	ldr	r2, [r7, #0]
1000139e:	430a      	orrs	r2, r1
100013a0:	609a      	str	r2, [r3, #8]
#if UC_SERIES == XMC14
  SCU_INTERRUPT->SRCLR1 |= (uint32_t)(event >> 32U);
100013a2:	4b06      	ldr	r3, [pc, #24]	; (100013bc <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
100013a4:	4a05      	ldr	r2, [pc, #20]	; (100013bc <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
100013a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
100013a8:	6879      	ldr	r1, [r7, #4]
100013aa:	000c      	movs	r4, r1
100013ac:	2100      	movs	r1, #0
100013ae:	1c0d      	adds	r5, r1, #0
100013b0:	1c21      	adds	r1, r4, #0
100013b2:	430a      	orrs	r2, r1
100013b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
100013b6:	46bd      	mov	sp, r7
100013b8:	b002      	add	sp, #8
100013ba:	bdb0      	pop	{r4, r5, r7, pc}
100013bc:	40010038 	.word	0x40010038

100013c0 <XMC_SCU_LockProtectedBits>:

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
100013c0:	b580      	push	{r7, lr}
100013c2:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100013c4:	4b02      	ldr	r3, [pc, #8]	; (100013d0 <XMC_SCU_LockProtectedBits+0x10>)
100013c6:	22c3      	movs	r2, #195	; 0xc3
100013c8:	625a      	str	r2, [r3, #36]	; 0x24
}
100013ca:	46bd      	mov	sp, r7
100013cc:	bd80      	pop	{r7, pc}
100013ce:	46c0      	nop			; (mov r8, r8)
100013d0:	40010000 	.word	0x40010000

100013d4 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
100013d4:	b580      	push	{r7, lr}
100013d6:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100013d8:	4b05      	ldr	r3, [pc, #20]	; (100013f0 <XMC_SCU_UnlockProtectedBits+0x1c>)
100013da:	22c0      	movs	r2, #192	; 0xc0
100013dc:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100013de:	46c0      	nop			; (mov r8, r8)
100013e0:	4b03      	ldr	r3, [pc, #12]	; (100013f0 <XMC_SCU_UnlockProtectedBits+0x1c>)
100013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100013e4:	2204      	movs	r2, #4
100013e6:	4013      	ands	r3, r2
100013e8:	d1fa      	bne.n	100013e0 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
100013ea:	46bd      	mov	sp, r7
100013ec:	bd80      	pop	{r7, pc}
100013ee:	46c0      	nop			; (mov r8, r8)
100013f0:	40010000 	.word	0x40010000

100013f4 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
100013f4:	b580      	push	{r7, lr}
100013f6:	b086      	sub	sp, #24
100013f8:	af00      	add	r7, sp, #0
100013fa:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
100013fc:	f7ff ffea 	bl	100013d4 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10001400:	687b      	ldr	r3, [r7, #4]
10001402:	799b      	ldrb	r3, [r3, #6]
10001404:	2b30      	cmp	r3, #48	; 0x30
10001406:	d053      	beq.n	100014b0 <XMC_SCU_CLOCK_Init+0xbc>
  {
    if (OSCHP_GetFrequency() > 20000000U)
10001408:	f7ff feb6 	bl	10001178 <OSCHP_GetFrequency>
1000140c:	1e02      	subs	r2, r0, #0
1000140e:	4b49      	ldr	r3, [pc, #292]	; (10001534 <XMC_SCU_CLOCK_Init+0x140>)
10001410:	429a      	cmp	r2, r3
10001412:	d909      	bls.n	10001428 <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10001414:	4a48      	ldr	r2, [pc, #288]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
10001416:	4948      	ldr	r1, [pc, #288]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
10001418:	2390      	movs	r3, #144	; 0x90
1000141a:	5acb      	ldrh	r3, [r1, r3]
1000141c:	b29b      	uxth	r3, r3
1000141e:	2140      	movs	r1, #64	; 0x40
10001420:	430b      	orrs	r3, r1
10001422:	b299      	uxth	r1, r3
10001424:	2390      	movs	r3, #144	; 0x90
10001426:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001428:	4a43      	ldr	r2, [pc, #268]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
1000142a:	4943      	ldr	r1, [pc, #268]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
1000142c:	2390      	movs	r3, #144	; 0x90
1000142e:	5acb      	ldrh	r3, [r1, r3]
10001430:	b29b      	uxth	r3, r3
10001432:	b29b      	uxth	r3, r3
10001434:	1c19      	adds	r1, r3, #0
10001436:	2332      	movs	r3, #50	; 0x32
10001438:	4399      	bics	r1, r3
1000143a:	1c0b      	adds	r3, r1, #0
1000143c:	b299      	uxth	r1, r3
                               config->oschp_mode;
1000143e:	687b      	ldr	r3, [r7, #4]
10001440:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001442:	b29b      	uxth	r3, r3
10001444:	430b      	orrs	r3, r1
10001446:	b29b      	uxth	r3, r3
10001448:	b299      	uxth	r1, r3
1000144a:	2390      	movs	r3, #144	; 0x90
1000144c:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* clear the status bit before restarting the detection. */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
1000144e:	4b3b      	ldr	r3, [pc, #236]	; (1000153c <XMC_SCU_CLOCK_Init+0x148>)
10001450:	2202      	movs	r2, #2
10001452:	629a      	str	r2, [r3, #40]	; 0x28

      /* According to errata SCU_CM.023, to reset the XOWD it is needed to disable/enable the watchdog,
         keeping in between at least one DCO2 cycle */

      /* Disable XOWD */
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10001454:	4b3a      	ldr	r3, [pc, #232]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001456:	4a3a      	ldr	r2, [pc, #232]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001458:	6952      	ldr	r2, [r2, #20]
1000145a:	493a      	ldr	r1, [pc, #232]	; (10001544 <XMC_SCU_CLOCK_Init+0x150>)
1000145c:	400a      	ands	r2, r1
1000145e:	615a      	str	r2, [r3, #20]
10001460:	4b39      	ldr	r3, [pc, #228]	; (10001548 <XMC_SCU_CLOCK_Init+0x154>)
10001462:	617b      	str	r3, [r7, #20]
10001464:	e000      	b.n	10001468 <XMC_SCU_CLOCK_Init+0x74>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001466:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001468:	697b      	ldr	r3, [r7, #20]
1000146a:	3b01      	subs	r3, #1
1000146c:	617b      	str	r3, [r7, #20]
1000146e:	697b      	ldr	r3, [r7, #20]
10001470:	2b00      	cmp	r3, #0
10001472:	d1f8      	bne.n	10001466 <XMC_SCU_CLOCK_Init+0x72>
      /* Clock domains synchronization, at least 1 DCO2 cycle */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(538);

      /* Enable XOWD */
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk | SCU_CLK_OSCCSR_XOWDRES_Msk;
10001474:	4b32      	ldr	r3, [pc, #200]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001476:	4a32      	ldr	r2, [pc, #200]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001478:	6952      	ldr	r2, [r2, #20]
1000147a:	21c0      	movs	r1, #192	; 0xc0
1000147c:	0489      	lsls	r1, r1, #18
1000147e:	430a      	orrs	r2, r1
10001480:	615a      	str	r2, [r3, #20]

      /* OSCCSR.XOWDRES bit will be automatically reset to 0 after XOWD is reset */
      while (SCU_CLK->OSCCSR & SCU_CLK_OSCCSR_XOWDRES_Msk);
10001482:	46c0      	nop			; (mov r8, r8)
10001484:	4b2e      	ldr	r3, [pc, #184]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001486:	695a      	ldr	r2, [r3, #20]
10001488:	2380      	movs	r3, #128	; 0x80
1000148a:	045b      	lsls	r3, r3, #17
1000148c:	4013      	ands	r3, r2
1000148e:	d1f9      	bne.n	10001484 <XMC_SCU_CLOCK_Init+0x90>
10001490:	4b2e      	ldr	r3, [pc, #184]	; (1000154c <XMC_SCU_CLOCK_Init+0x158>)
10001492:	613b      	str	r3, [r7, #16]
10001494:	e000      	b.n	10001498 <XMC_SCU_CLOCK_Init+0xa4>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
10001496:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
10001498:	693b      	ldr	r3, [r7, #16]
1000149a:	3b01      	subs	r3, #1
1000149c:	613b      	str	r3, [r7, #16]
1000149e:	693b      	ldr	r3, [r7, #16]
100014a0:	2b00      	cmp	r3, #0
100014a2:	d1f8      	bne.n	10001496 <XMC_SCU_CLOCK_Init+0xa2>
      /* Wait a at least 5 DCO2 cycles for the update of the XTAL OWD result */
      /* delay value calculation assuming worst case DCO1=48Mhz and 3cycles per delay iteration */
      delay(2685);

    }
    while (SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
100014a4:	4b25      	ldr	r3, [pc, #148]	; (1000153c <XMC_SCU_CLOCK_Init+0x148>)
100014a6:	6a1b      	ldr	r3, [r3, #32]
100014a8:	2202      	movs	r2, #2
100014aa:	4013      	ands	r3, r2
100014ac:	d1cf      	bne.n	1000144e <XMC_SCU_CLOCK_Init+0x5a>
100014ae:	e009      	b.n	100014c4 <XMC_SCU_CLOCK_Init+0xd0>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
100014b0:	4a21      	ldr	r2, [pc, #132]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
100014b2:	4921      	ldr	r1, [pc, #132]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
100014b4:	2390      	movs	r3, #144	; 0x90
100014b6:	5acb      	ldrh	r3, [r1, r3]
100014b8:	b29b      	uxth	r3, r3
100014ba:	2130      	movs	r1, #48	; 0x30
100014bc:	430b      	orrs	r3, r1
100014be:	b299      	uxth	r1, r3
100014c0:	2390      	movs	r3, #144	; 0x90
100014c2:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
100014c4:	4a1c      	ldr	r2, [pc, #112]	; (10001538 <XMC_SCU_CLOCK_Init+0x144>)
100014c6:	687b      	ldr	r3, [r7, #4]
100014c8:	79db      	ldrb	r3, [r3, #7]
100014ca:	b299      	uxth	r1, r3
100014cc:	238c      	movs	r3, #140	; 0x8c
100014ce:	52d1      	strh	r1, [r2, r3]
#ifndef DISABLE_WAIT_RTC_XTAL_OSC_STARTUP
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
100014d0:	687b      	ldr	r3, [r7, #4]
100014d2:	79db      	ldrb	r3, [r3, #7]
100014d4:	2b00      	cmp	r3, #0
100014d6:	d109      	bne.n	100014ec <XMC_SCU_CLOCK_Init+0xf8>
100014d8:	4b1d      	ldr	r3, [pc, #116]	; (10001550 <XMC_SCU_CLOCK_Init+0x15c>)
100014da:	60fb      	str	r3, [r7, #12]
100014dc:	e000      	b.n	100014e0 <XMC_SCU_CLOCK_Init+0xec>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
  {
    __NOP();
100014de:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while (--cycles > 0U)
100014e0:	68fb      	ldr	r3, [r7, #12]
100014e2:	3b01      	subs	r3, #1
100014e4:	60fb      	str	r3, [r7, #12]
100014e6:	68fb      	ldr	r3, [r7, #12]
100014e8:	2b00      	cmp	r3, #0
100014ea:	d1f8      	bne.n	100014de <XMC_SCU_CLOCK_Init+0xea>
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
100014ec:	4b14      	ldr	r3, [pc, #80]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
100014ee:	4a14      	ldr	r2, [pc, #80]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
100014f0:	69d2      	ldr	r2, [r2, #28]
100014f2:	4918      	ldr	r1, [pc, #96]	; (10001554 <XMC_SCU_CLOCK_Init+0x160>)
100014f4:	400a      	ands	r2, r1
                    config->dclk_src;
100014f6:	6879      	ldr	r1, [r7, #4]
100014f8:	8889      	ldrh	r1, [r1, #4]
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }
#endif

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
100014fa:	430a      	orrs	r2, r1
100014fc:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100014fe:	4a10      	ldr	r2, [pc, #64]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001500:	4b0f      	ldr	r3, [pc, #60]	; (10001540 <XMC_SCU_CLOCK_Init+0x14c>)
10001502:	681b      	ldr	r3, [r3, #0]
10001504:	4914      	ldr	r1, [pc, #80]	; (10001558 <XMC_SCU_CLOCK_Init+0x164>)
10001506:	4019      	ands	r1, r3
                   config->rtc_src |
10001508:	687b      	ldr	r3, [r7, #4]
1000150a:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
1000150c:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
1000150e:	687b      	ldr	r3, [r7, #4]
10001510:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001512:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001514:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
10001516:	f7ff ff53 	bl	100013c0 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
1000151a:	687b      	ldr	r3, [r7, #4]
1000151c:	789b      	ldrb	r3, [r3, #2]
1000151e:	1c1a      	adds	r2, r3, #0
10001520:	687b      	ldr	r3, [r7, #4]
10001522:	881b      	ldrh	r3, [r3, #0]
10001524:	1c10      	adds	r0, r2, #0
10001526:	1c19      	adds	r1, r3, #0
10001528:	f000 f832 	bl	10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
1000152c:	46bd      	mov	sp, r7
1000152e:	b006      	add	sp, #24
10001530:	bd80      	pop	{r7, pc}
10001532:	46c0      	nop			; (mov r8, r8)
10001534:	01312d00 	.word	0x01312d00
10001538:	40011000 	.word	0x40011000
1000153c:	40010038 	.word	0x40010038
10001540:	40010300 	.word	0x40010300
10001544:	fdffffff 	.word	0xfdffffff
10001548:	0000021a 	.word	0x0000021a
1000154c:	00000a7d 	.word	0x00000a7d
10001550:	00632ea0 	.word	0x00632ea0
10001554:	fffffdff 	.word	0xfffffdff
10001558:	fff0ffff 	.word	0xfff0ffff

1000155c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
1000155c:	b580      	push	{r7, lr}
1000155e:	b082      	sub	sp, #8
10001560:	af00      	add	r7, sp, #0
10001562:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
10001564:	f7ff ff36 	bl	100013d4 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001568:	4b08      	ldr	r3, [pc, #32]	; (1000158c <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
1000156a:	4a08      	ldr	r2, [pc, #32]	; (1000158c <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
1000156c:	6911      	ldr	r1, [r2, #16]
1000156e:	687a      	ldr	r2, [r7, #4]
10001570:	430a      	orrs	r2, r1
10001572:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001574:	46c0      	nop			; (mov r8, r8)
10001576:	4b05      	ldr	r3, [pc, #20]	; (1000158c <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
10001578:	681a      	ldr	r2, [r3, #0]
1000157a:	2380      	movs	r3, #128	; 0x80
1000157c:	05db      	lsls	r3, r3, #23
1000157e:	4013      	ands	r3, r2
10001580:	d1f9      	bne.n	10001576 <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
10001582:	f7ff ff1d 	bl	100013c0 <XMC_SCU_LockProtectedBits>
}
10001586:	46bd      	mov	sp, r7
10001588:	b002      	add	sp, #8
1000158a:	bd80      	pop	{r7, pc}
1000158c:	40010300 	.word	0x40010300

10001590 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10001590:	b580      	push	{r7, lr}
10001592:	b084      	sub	sp, #16
10001594:	af00      	add	r7, sp, #0
10001596:	6078      	str	r0, [r7, #4]
10001598:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
1000159a:	f7ff ff1b 	bl	100013d4 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000159e:	4b27      	ldr	r3, [pc, #156]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015a0:	681a      	ldr	r2, [r3, #0]
100015a2:	23ff      	movs	r3, #255	; 0xff
100015a4:	021b      	lsls	r3, r3, #8
100015a6:	4013      	ands	r3, r2
100015a8:	0a1b      	lsrs	r3, r3, #8
100015aa:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
100015ac:	4b23      	ldr	r3, [pc, #140]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015ae:	4a23      	ldr	r2, [pc, #140]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015b0:	69d2      	ldr	r2, [r2, #28]
100015b2:	2103      	movs	r1, #3
100015b4:	438a      	bics	r2, r1
100015b6:	1c11      	adds	r1, r2, #0
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
100015b8:	683a      	ldr	r2, [r7, #0]
100015ba:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
100015bc:	430a      	orrs	r2, r1
100015be:	61da      	str	r2, [r3, #28]
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015c0:	4b1e      	ldr	r3, [pc, #120]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015c2:	4a1e      	ldr	r2, [pc, #120]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015c4:	6812      	ldr	r2, [r2, #0]
100015c6:	491e      	ldr	r1, [pc, #120]	; (10001640 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
100015c8:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
100015ca:	683a      	ldr	r2, [r7, #0]
100015cc:	20ff      	movs	r0, #255	; 0xff
100015ce:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015d0:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
100015d2:	491c      	ldr	r1, [pc, #112]	; (10001644 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
100015d4:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015d6:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015d8:	46c0      	nop			; (mov r8, r8)
100015da:	4b18      	ldr	r3, [pc, #96]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100015dc:	681a      	ldr	r2, [r3, #0]
100015de:	2380      	movs	r3, #128	; 0x80
100015e0:	05db      	lsls	r3, r3, #23
100015e2:	4013      	ands	r3, r2
100015e4:	d1f9      	bne.n	100015da <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
100015e6:	68fa      	ldr	r2, [r7, #12]
100015e8:	687b      	ldr	r3, [r7, #4]
100015ea:	429a      	cmp	r2, r3
100015ec:	d806      	bhi.n	100015fc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
100015ee:	68fa      	ldr	r2, [r7, #12]
100015f0:	687b      	ldr	r3, [r7, #4]
100015f2:	1c10      	adds	r0, r2, #0
100015f4:	1c19      	adds	r1, r3, #0
100015f6:	f000 f853 	bl	100016a0 <XMC_SCU_CLOCK_lFrequencyDownScaling>
100015fa:	e005      	b.n	10001608 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
100015fc:	68fa      	ldr	r2, [r7, #12]
100015fe:	687b      	ldr	r3, [r7, #4]
10001600:	1c10      	adds	r0, r2, #0
10001602:	1c19      	adds	r1, r3, #0
10001604:	f000 f822 	bl	1000164c <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001608:	4b0c      	ldr	r3, [pc, #48]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000160a:	4a0c      	ldr	r2, [pc, #48]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000160c:	6812      	ldr	r2, [r2, #0]
1000160e:	490e      	ldr	r1, [pc, #56]	; (10001648 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
10001610:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001612:	687a      	ldr	r2, [r7, #4]
10001614:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001616:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001618:	490a      	ldr	r1, [pc, #40]	; (10001644 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
1000161a:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000161c:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000161e:	46c0      	nop			; (mov r8, r8)
10001620:	4b06      	ldr	r3, [pc, #24]	; (1000163c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001622:	681a      	ldr	r2, [r3, #0]
10001624:	2380      	movs	r3, #128	; 0x80
10001626:	05db      	lsls	r3, r3, #23
10001628:	4013      	ands	r3, r2
1000162a:	d1f9      	bne.n	10001620 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
1000162c:	f7ff fec8 	bl	100013c0 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10001630:	f7ff fd3e 	bl	100010b0 <SystemCoreClockUpdate>

}
10001634:	46bd      	mov	sp, r7
10001636:	b004      	add	sp, #16
10001638:	bd80      	pop	{r7, pc}
1000163a:	46c0      	nop			; (mov r8, r8)
1000163c:	40010300 	.word	0x40010300
10001640:	c00fff00 	.word	0xc00fff00
10001644:	3ff00000 	.word	0x3ff00000
10001648:	c00f00ff 	.word	0xc00f00ff

1000164c <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
1000164c:	b580      	push	{r7, lr}
1000164e:	b082      	sub	sp, #8
10001650:	af00      	add	r7, sp, #0
10001652:	6078      	str	r0, [r7, #4]
10001654:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
10001656:	e014      	b.n	10001682 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
10001658:	687b      	ldr	r3, [r7, #4]
1000165a:	089b      	lsrs	r3, r3, #2
1000165c:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000165e:	4b0d      	ldr	r3, [pc, #52]	; (10001694 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001660:	4a0c      	ldr	r2, [pc, #48]	; (10001694 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001662:	6812      	ldr	r2, [r2, #0]
10001664:	490c      	ldr	r1, [pc, #48]	; (10001698 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
10001666:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001668:	687a      	ldr	r2, [r7, #4]
1000166a:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000166c:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000166e:	490b      	ldr	r1, [pc, #44]	; (1000169c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
10001670:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001672:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001674:	46c0      	nop			; (mov r8, r8)
10001676:	4b07      	ldr	r3, [pc, #28]	; (10001694 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001678:	681a      	ldr	r2, [r3, #0]
1000167a:	2380      	movs	r3, #128	; 0x80
1000167c:	05db      	lsls	r3, r3, #23
1000167e:	4013      	ands	r3, r2
10001680:	d1f9      	bne.n	10001676 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10001682:	683b      	ldr	r3, [r7, #0]
10001684:	009a      	lsls	r2, r3, #2
10001686:	687b      	ldr	r3, [r7, #4]
10001688:	429a      	cmp	r2, r3
1000168a:	d3e5      	bcc.n	10001658 <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
1000168c:	46bd      	mov	sp, r7
1000168e:	b002      	add	sp, #8
10001690:	bd80      	pop	{r7, pc}
10001692:	46c0      	nop			; (mov r8, r8)
10001694:	40010300 	.word	0x40010300
10001698:	c00f00ff 	.word	0xc00f00ff
1000169c:	3ff00000 	.word	0x3ff00000

100016a0 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100016a0:	b580      	push	{r7, lr}
100016a2:	b082      	sub	sp, #8
100016a4:	af00      	add	r7, sp, #0
100016a6:	6078      	str	r0, [r7, #4]
100016a8:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
100016aa:	e019      	b.n	100016e0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
100016ac:	687b      	ldr	r3, [r7, #4]
100016ae:	2b00      	cmp	r3, #0
100016b0:	d101      	bne.n	100016b6 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
100016b2:	2301      	movs	r3, #1
100016b4:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
100016b6:	687b      	ldr	r3, [r7, #4]
100016b8:	009b      	lsls	r3, r3, #2
100016ba:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100016bc:	4b0c      	ldr	r3, [pc, #48]	; (100016f0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
100016be:	4a0c      	ldr	r2, [pc, #48]	; (100016f0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
100016c0:	6812      	ldr	r2, [r2, #0]
100016c2:	490c      	ldr	r1, [pc, #48]	; (100016f4 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
100016c4:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100016c6:	687a      	ldr	r2, [r7, #4]
100016c8:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100016ca:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100016cc:	490a      	ldr	r1, [pc, #40]	; (100016f8 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
100016ce:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100016d0:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100016d2:	46c0      	nop			; (mov r8, r8)
100016d4:	4b06      	ldr	r3, [pc, #24]	; (100016f0 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
100016d6:	681a      	ldr	r2, [r3, #0]
100016d8:	2380      	movs	r3, #128	; 0x80
100016da:	05db      	lsls	r3, r3, #23
100016dc:	4013      	ands	r3, r2
100016de:	d1f9      	bne.n	100016d4 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
100016e0:	687b      	ldr	r3, [r7, #4]
100016e2:	009a      	lsls	r2, r3, #2
100016e4:	683b      	ldr	r3, [r7, #0]
100016e6:	429a      	cmp	r2, r3
100016e8:	d3e0      	bcc.n	100016ac <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
100016ea:	46bd      	mov	sp, r7
100016ec:	b002      	add	sp, #8
100016ee:	bd80      	pop	{r7, pc}
100016f0:	40010300 	.word	0x40010300
100016f4:	c00f00ff 	.word	0xc00f00ff
100016f8:	3ff00000 	.word	0x3ff00000

100016fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
100016fc:	b580      	push	{r7, lr}
100016fe:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10001700:	4b02      	ldr	r3, [pc, #8]	; (1000170c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
10001702:	681b      	ldr	r3, [r3, #0]
}
10001704:	1c18      	adds	r0, r3, #0
10001706:	46bd      	mov	sp, r7
10001708:	bd80      	pop	{r7, pc}
1000170a:	46c0      	nop			; (mov r8, r8)
1000170c:	20003ffc 	.word	0x20003ffc

10001710 <XMC_SCU_INTERRUPT_SetEventHandler>:

/*
 * API to assign the event handler function to be executed on occurrence of the selected event
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
10001710:	b5f0      	push	{r4, r5, r6, r7, lr}
10001712:	b087      	sub	sp, #28
10001714:	af00      	add	r7, sp, #0
10001716:	60b8      	str	r0, [r7, #8]
10001718:	60f9      	str	r1, [r7, #12]
1000171a:	607a      	str	r2, [r7, #4]
  XMC_SCU_STATUS_t status;

  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;
1000171c:	2200      	movs	r2, #0
1000171e:	617a      	str	r2, [r7, #20]

  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001720:	e002      	b.n	10001728 <XMC_SCU_INTERRUPT_SetEventHandler+0x18>
  {
    index++;
10001722:	697a      	ldr	r2, [r7, #20]
10001724:	3201      	adds	r2, #1
10001726:	617a      	str	r2, [r7, #20]
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;

  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001728:	697a      	ldr	r2, [r7, #20]
1000172a:	1c11      	adds	r1, r2, #0
1000172c:	3920      	subs	r1, #32
1000172e:	2900      	cmp	r1, #0
10001730:	db03      	blt.n	1000173a <XMC_SCU_INTERRUPT_SetEventHandler+0x2a>
10001732:	68f8      	ldr	r0, [r7, #12]
10001734:	40c8      	lsrs	r0, r1
10001736:	1c03      	adds	r3, r0, #0
10001738:	e008      	b.n	1000174c <XMC_SCU_INTERRUPT_SetEventHandler+0x3c>
1000173a:	2120      	movs	r1, #32
1000173c:	1a89      	subs	r1, r1, r2
1000173e:	68f8      	ldr	r0, [r7, #12]
10001740:	4088      	lsls	r0, r1
10001742:	1c01      	adds	r1, r0, #0
10001744:	68b8      	ldr	r0, [r7, #8]
10001746:	40d0      	lsrs	r0, r2
10001748:	1c03      	adds	r3, r0, #0
1000174a:	430b      	orrs	r3, r1
1000174c:	68f9      	ldr	r1, [r7, #12]
1000174e:	40d1      	lsrs	r1, r2
10001750:	1c0c      	adds	r4, r1, #0
10001752:	2201      	movs	r2, #1
10001754:	401a      	ands	r2, r3
10001756:	1c15      	adds	r5, r2, #0
10001758:	2200      	movs	r2, #0
1000175a:	4022      	ands	r2, r4
1000175c:	1c16      	adds	r6, r2, #0
1000175e:	1c2a      	adds	r2, r5, #0
10001760:	4332      	orrs	r2, r6
10001762:	d102      	bne.n	1000176a <XMC_SCU_INTERRUPT_SetEventHandler+0x5a>
10001764:	697a      	ldr	r2, [r7, #20]
10001766:	2a3f      	cmp	r2, #63	; 0x3f
10001768:	d9db      	bls.n	10001722 <XMC_SCU_INTERRUPT_SetEventHandler+0x12>
  {
    index++;
  }

  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
1000176a:	697b      	ldr	r3, [r7, #20]
1000176c:	2b40      	cmp	r3, #64	; 0x40
1000176e:	d104      	bne.n	1000177a <XMC_SCU_INTERRUPT_SetEventHandler+0x6a>
  {
    status = XMC_SCU_STATUS_ERROR;
10001770:	2313      	movs	r3, #19
10001772:	18fb      	adds	r3, r7, r3
10001774:	2201      	movs	r2, #1
10001776:	701a      	strb	r2, [r3, #0]
10001778:	e008      	b.n	1000178c <XMC_SCU_INTERRUPT_SetEventHandler+0x7c>
  }
  else
  {
    event_handler_list[index] = handler;
1000177a:	4b08      	ldr	r3, [pc, #32]	; (1000179c <XMC_SCU_INTERRUPT_SetEventHandler+0x8c>)
1000177c:	697a      	ldr	r2, [r7, #20]
1000177e:	0092      	lsls	r2, r2, #2
10001780:	6879      	ldr	r1, [r7, #4]
10001782:	50d1      	str	r1, [r2, r3]
    status = XMC_SCU_STATUS_OK;
10001784:	2313      	movs	r3, #19
10001786:	18fb      	adds	r3, r7, r3
10001788:	2200      	movs	r2, #0
1000178a:	701a      	strb	r2, [r3, #0]
  }

  return (status);
1000178c:	2313      	movs	r3, #19
1000178e:	18fb      	adds	r3, r7, r3
10001790:	781b      	ldrb	r3, [r3, #0]
}
10001792:	1c18      	adds	r0, r3, #0
10001794:	46bd      	mov	sp, r7
10001796:	b007      	add	sp, #28
10001798:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000179a:	46c0      	nop			; (mov r8, r8)
1000179c:	200008d4 	.word	0x200008d4

100017a0 <XMC_SCU_IRQHandler>:

/*
 * A common function to execute callback functions for multiple events
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
100017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100017a2:	b08f      	sub	sp, #60	; 0x3c
100017a4:	af00      	add	r7, sp, #0
100017a6:	61f8      	str	r0, [r7, #28]

  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
100017a8:	2300      	movs	r3, #0
100017aa:	637b      	str	r3, [r7, #52]	; 0x34
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
100017ac:	f7ff fdcc 	bl	10001348 <XMC_SCU_INTERUPT_GetEventStatus>
100017b0:	4a38      	ldr	r2, [pc, #224]	; (10001894 <XMC_SCU_IRQHandler+0xf4>)
100017b2:	69fb      	ldr	r3, [r7, #28]
100017b4:	00db      	lsls	r3, r3, #3
100017b6:	18d3      	adds	r3, r2, r3
100017b8:	681a      	ldr	r2, [r3, #0]
100017ba:	685b      	ldr	r3, [r3, #4]
100017bc:	1c16      	adds	r6, r2, #0
100017be:	4006      	ands	r6, r0
100017c0:	62be      	str	r6, [r7, #40]	; 0x28
100017c2:	400b      	ands	r3, r1
100017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  XMC_SCU_INTERRUPT_ClearEventStatus(event);
100017c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
100017c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100017ca:	1c10      	adds	r0, r2, #0
100017cc:	1c19      	adds	r1, r3, #0
100017ce:	f7ff fddd 	bl	1000138c <XMC_SCU_INTERRUPT_ClearEventStatus>

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100017d2:	e055      	b.n	10001880 <XMC_SCU_IRQHandler+0xe0>
  {
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
100017d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100017d6:	1c1a      	adds	r2, r3, #0
100017d8:	3a20      	subs	r2, #32
100017da:	2a00      	cmp	r2, #0
100017dc:	db03      	blt.n	100017e6 <XMC_SCU_IRQHandler+0x46>
100017de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
100017e0:	40d1      	lsrs	r1, r2
100017e2:	1c0c      	adds	r4, r1, #0
100017e4:	e008      	b.n	100017f8 <XMC_SCU_IRQHandler+0x58>
100017e6:	2220      	movs	r2, #32
100017e8:	1ad2      	subs	r2, r2, r3
100017ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
100017ec:	4091      	lsls	r1, r2
100017ee:	1c0a      	adds	r2, r1, #0
100017f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
100017f2:	40d9      	lsrs	r1, r3
100017f4:	1c0c      	adds	r4, r1, #0
100017f6:	4314      	orrs	r4, r2
100017f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100017fa:	40da      	lsrs	r2, r3
100017fc:	1c15      	adds	r5, r2, #0
100017fe:	2301      	movs	r3, #1
10001800:	4023      	ands	r3, r4
10001802:	60bb      	str	r3, [r7, #8]
10001804:	2300      	movs	r3, #0
10001806:	402b      	ands	r3, r5
10001808:	60fb      	str	r3, [r7, #12]
1000180a:	68b9      	ldr	r1, [r7, #8]
1000180c:	68fa      	ldr	r2, [r7, #12]
1000180e:	1c0b      	adds	r3, r1, #0
10001810:	4313      	orrs	r3, r2
10001812:	d032      	beq.n	1000187a <XMC_SCU_IRQHandler+0xda>
    {
      event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
10001814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10001816:	1c1a      	adds	r2, r3, #0
10001818:	3a20      	subs	r2, #32
1000181a:	2a00      	cmp	r2, #0
1000181c:	db03      	blt.n	10001826 <XMC_SCU_IRQHandler+0x86>
1000181e:	2101      	movs	r1, #1
10001820:	4091      	lsls	r1, r2
10001822:	6179      	str	r1, [r7, #20]
10001824:	e00a      	b.n	1000183c <XMC_SCU_IRQHandler+0x9c>
10001826:	2220      	movs	r2, #32
10001828:	1ad2      	subs	r2, r2, r3
1000182a:	2101      	movs	r1, #1
1000182c:	40d1      	lsrs	r1, r2
1000182e:	1c0a      	adds	r2, r1, #0
10001830:	2100      	movs	r1, #0
10001832:	4099      	lsls	r1, r3
10001834:	6179      	str	r1, [r7, #20]
10001836:	6979      	ldr	r1, [r7, #20]
10001838:	4311      	orrs	r1, r2
1000183a:	6179      	str	r1, [r7, #20]
1000183c:	2201      	movs	r2, #1
1000183e:	409a      	lsls	r2, r3
10001840:	613a      	str	r2, [r7, #16]
10001842:	6939      	ldr	r1, [r7, #16]
10001844:	697a      	ldr	r2, [r7, #20]
10001846:	1c0b      	adds	r3, r1, #0
10001848:	43db      	mvns	r3, r3
1000184a:	603b      	str	r3, [r7, #0]
1000184c:	1c13      	adds	r3, r2, #0
1000184e:	43db      	mvns	r3, r3
10001850:	607b      	str	r3, [r7, #4]
10001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001854:	6838      	ldr	r0, [r7, #0]
10001856:	6879      	ldr	r1, [r7, #4]
10001858:	1c02      	adds	r2, r0, #0
1000185a:	4013      	ands	r3, r2
1000185c:	62bb      	str	r3, [r7, #40]	; 0x28
1000185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001860:	1c0a      	adds	r2, r1, #0
10001862:	4013      	ands	r3, r2
10001864:	62fb      	str	r3, [r7, #44]	; 0x2c
      event_handler = event_handler_list[index];
10001866:	4b0c      	ldr	r3, [pc, #48]	; (10001898 <XMC_SCU_IRQHandler+0xf8>)
10001868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000186a:	0092      	lsls	r2, r2, #2
1000186c:	58d3      	ldr	r3, [r2, r3]
1000186e:	627b      	str	r3, [r7, #36]	; 0x24
      if (event_handler != NULL)
10001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001872:	2b00      	cmp	r3, #0
10001874:	d001      	beq.n	1000187a <XMC_SCU_IRQHandler+0xda>
      {
        event_handler();
10001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001878:	4798      	blx	r3
      }

      /* break; XMC1: Only PULSE interrupts */
    }
    index++;
1000187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000187c:	3301      	adds	r3, #1
1000187e:	637b      	str	r3, [r7, #52]	; 0x34

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10001884:	4313      	orrs	r3, r2
10001886:	d002      	beq.n	1000188e <XMC_SCU_IRQHandler+0xee>
10001888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000188a:	2b3f      	cmp	r3, #63	; 0x3f
1000188c:	d9a2      	bls.n	100017d4 <XMC_SCU_IRQHandler+0x34>

      /* break; XMC1: Only PULSE interrupts */
    }
    index++;
  }
}
1000188e:	46bd      	mov	sp, r7
10001890:	b00f      	add	sp, #60	; 0x3c
10001892:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001894:	20000550 	.word	0x20000550
10001898:	200008d4 	.word	0x200008d4

1000189c <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
1000189c:	b580      	push	{r7, lr}
1000189e:	b082      	sub	sp, #8
100018a0:	af00      	add	r7, sp, #0
100018a2:	1c02      	adds	r2, r0, #0
100018a4:	1dfb      	adds	r3, r7, #7
100018a6:	701a      	strb	r2, [r3, #0]
100018a8:	1d3b      	adds	r3, r7, #4
100018aa:	1c0a      	adds	r2, r1, #0
100018ac:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
100018ae:	1d3b      	adds	r3, r7, #4
100018b0:	1d3a      	adds	r2, r7, #4
100018b2:	8812      	ldrh	r2, [r2, #0]
100018b4:	2103      	movs	r1, #3
100018b6:	400a      	ands	r2, r1
100018b8:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
100018ba:	1dfb      	adds	r3, r7, #7
100018bc:	781b      	ldrb	r3, [r3, #0]
100018be:	2b0f      	cmp	r3, #15
100018c0:	d813      	bhi.n	100018ea <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100018c2:	4b18      	ldr	r3, [pc, #96]	; (10001924 <XMC_SCU_SetInterruptControl+0x88>)
100018c4:	4a17      	ldr	r2, [pc, #92]	; (10001924 <XMC_SCU_SetInterruptControl+0x88>)
100018c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
100018c8:	1df9      	adds	r1, r7, #7
100018ca:	7809      	ldrb	r1, [r1, #0]
100018cc:	0049      	lsls	r1, r1, #1
100018ce:	1c08      	adds	r0, r1, #0
100018d0:	2103      	movs	r1, #3
100018d2:	4081      	lsls	r1, r0
100018d4:	43c9      	mvns	r1, r1
100018d6:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
100018d8:	1d39      	adds	r1, r7, #4
100018da:	8809      	ldrh	r1, [r1, #0]
100018dc:	1df8      	adds	r0, r7, #7
100018de:	7800      	ldrb	r0, [r0, #0]
100018e0:	0040      	lsls	r0, r0, #1
100018e2:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
100018e4:	430a      	orrs	r2, r1
100018e6:	66da      	str	r2, [r3, #108]	; 0x6c
100018e8:	e018      	b.n	1000191c <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
100018ea:	1dfb      	adds	r3, r7, #7
100018ec:	1dfa      	adds	r2, r7, #7
100018ee:	7812      	ldrb	r2, [r2, #0]
100018f0:	210f      	movs	r1, #15
100018f2:	400a      	ands	r2, r1
100018f4:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100018f6:	4b0b      	ldr	r3, [pc, #44]	; (10001924 <XMC_SCU_SetInterruptControl+0x88>)
100018f8:	4a0a      	ldr	r2, [pc, #40]	; (10001924 <XMC_SCU_SetInterruptControl+0x88>)
100018fa:	6f12      	ldr	r2, [r2, #112]	; 0x70
100018fc:	1df9      	adds	r1, r7, #7
100018fe:	7809      	ldrb	r1, [r1, #0]
10001900:	0049      	lsls	r1, r1, #1
10001902:	1c08      	adds	r0, r1, #0
10001904:	2103      	movs	r1, #3
10001906:	4081      	lsls	r1, r0
10001908:	43c9      	mvns	r1, r1
1000190a:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
1000190c:	1d39      	adds	r1, r7, #4
1000190e:	8809      	ldrh	r1, [r1, #0]
10001910:	1df8      	adds	r0, r7, #7
10001912:	7800      	ldrb	r0, [r0, #0]
10001914:	0040      	lsls	r0, r0, #1
10001916:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
10001918:	430a      	orrs	r2, r1
1000191a:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
1000191c:	46bd      	mov	sp, r7
1000191e:	b002      	add	sp, #8
10001920:	bd80      	pop	{r7, pc}
10001922:	46c0      	nop			; (mov r8, r8)
10001924:	40010000 	.word	0x40010000

10001928 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
10001928:	b580      	push	{r7, lr}
1000192a:	b082      	sub	sp, #8
1000192c:	af00      	add	r7, sp, #0
1000192e:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
10001930:	687a      	ldr	r2, [r7, #4]
10001932:	23e2      	movs	r3, #226	; 0xe2
10001934:	005b      	lsls	r3, r3, #1
10001936:	58d2      	ldr	r2, [r2, r3]
10001938:	23c0      	movs	r3, #192	; 0xc0
1000193a:	009b      	lsls	r3, r3, #2
1000193c:	4013      	ands	r3, r2
1000193e:	425a      	negs	r2, r3
10001940:	4153      	adcs	r3, r2
10001942:	b2db      	uxtb	r3, r3
}
10001944:	1c18      	adds	r0, r3, #0
10001946:	46bd      	mov	sp, r7
10001948:	b002      	add	sp, #8
1000194a:	bd80      	pop	{r7, pc}

1000194c <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
1000194c:	b590      	push	{r4, r7, lr}
1000194e:	b083      	sub	sp, #12
10001950:	af00      	add	r7, sp, #0
10001952:	6078      	str	r0, [r7, #4]
10001954:	1c0c      	adds	r4, r1, #0
10001956:	1c10      	adds	r0, r2, #0
10001958:	1c19      	adds	r1, r3, #0
1000195a:	1cfb      	adds	r3, r7, #3
1000195c:	1c22      	adds	r2, r4, #0
1000195e:	701a      	strb	r2, [r3, #0]
10001960:	1cbb      	adds	r3, r7, #2
10001962:	1c02      	adds	r2, r0, #0
10001964:	701a      	strb	r2, [r3, #0]
10001966:	1c7b      	adds	r3, r7, #1
10001968:	1c0a      	adds	r2, r1, #0
1000196a:	701a      	strb	r2, [r3, #0]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
1000196c:	1cfb      	adds	r3, r7, #3
1000196e:	781a      	ldrb	r2, [r3, #0]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10001970:	1cbb      	adds	r3, r7, #2
10001972:	781b      	ldrb	r3, [r3, #0]
10001974:	0419      	lsls	r1, r3, #16
10001976:	23ff      	movs	r3, #255	; 0xff
10001978:	041b      	lsls	r3, r3, #16
1000197a:	400b      	ands	r3, r1
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
1000197c:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
1000197e:	1c7b      	adds	r3, r7, #1
10001980:	781b      	ldrb	r3, [r3, #0]
10001982:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10001984:	431a      	orrs	r2, r3
10001986:	1c11      	adds	r1, r2, #0
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10001988:	687a      	ldr	r2, [r7, #4]
1000198a:	23e2      	movs	r3, #226	; 0xe2
1000198c:	005b      	lsls	r3, r3, #1
1000198e:	50d1      	str	r1, [r2, r3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
10001990:	46bd      	mov	sp, r7
10001992:	b003      	add	sp, #12
10001994:	bd90      	pop	{r4, r7, pc}
10001996:	46c0      	nop			; (mov r8, r8)

10001998 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10001998:	b580      	push	{r7, lr}
1000199a:	b082      	sub	sp, #8
1000199c:	af00      	add	r7, sp, #0
1000199e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
100019a0:	687b      	ldr	r3, [r7, #4]
100019a2:	681b      	ldr	r3, [r3, #0]
100019a4:	2240      	movs	r2, #64	; 0x40
100019a6:	431a      	orrs	r2, r3
100019a8:	687b      	ldr	r3, [r7, #4]
100019aa:	601a      	str	r2, [r3, #0]
}
100019ac:	46bd      	mov	sp, r7
100019ae:	b002      	add	sp, #8
100019b0:	bd80      	pop	{r7, pc}
100019b2:	46c0      	nop			; (mov r8, r8)

100019b4 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
100019b4:	b580      	push	{r7, lr}
100019b6:	b082      	sub	sp, #8
100019b8:	af00      	add	r7, sp, #0
100019ba:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
100019bc:	687b      	ldr	r3, [r7, #4]
100019be:	681b      	ldr	r3, [r3, #0]
100019c0:	2240      	movs	r2, #64	; 0x40
100019c2:	4393      	bics	r3, r2
100019c4:	1c1a      	adds	r2, r3, #0
100019c6:	687b      	ldr	r3, [r7, #4]
100019c8:	601a      	str	r2, [r3, #0]
}
100019ca:	46bd      	mov	sp, r7
100019cc:	b002      	add	sp, #8
100019ce:	bd80      	pop	{r7, pc}

100019d0 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
100019d0:	b580      	push	{r7, lr}
100019d2:	b082      	sub	sp, #8
100019d4:	af00      	add	r7, sp, #0
100019d6:	6078      	str	r0, [r7, #4]
100019d8:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
100019da:	687a      	ldr	r2, [r7, #4]
100019dc:	683b      	ldr	r3, [r7, #0]
100019de:	4293      	cmp	r3, r2
100019e0:	d200      	bcs.n	100019e4 <max+0x14>
100019e2:	1c13      	adds	r3, r2, #0
}
100019e4:	1c18      	adds	r0, r3, #0
100019e6:	46bd      	mov	sp, r7
100019e8:	b002      	add	sp, #8
100019ea:	bd80      	pop	{r7, pc}

100019ec <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
100019ec:	b580      	push	{r7, lr}
100019ee:	b082      	sub	sp, #8
100019f0:	af00      	add	r7, sp, #0
100019f2:	6078      	str	r0, [r7, #4]
100019f4:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
100019f6:	687a      	ldr	r2, [r7, #4]
100019f8:	683b      	ldr	r3, [r7, #0]
100019fa:	4293      	cmp	r3, r2
100019fc:	d900      	bls.n	10001a00 <min+0x14>
100019fe:	1c13      	adds	r3, r2, #0
}
10001a00:	1c18      	adds	r0, r3, #0
10001a02:	46bd      	mov	sp, r7
10001a04:	b002      	add	sp, #8
10001a06:	bd80      	pop	{r7, pc}

10001a08 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
10001a08:	b580      	push	{r7, lr}
10001a0a:	b088      	sub	sp, #32
10001a0c:	af00      	add	r7, sp, #0
10001a0e:	6078      	str	r0, [r7, #4]
10001a10:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
10001a12:	683b      	ldr	r3, [r7, #0]
10001a14:	681a      	ldr	r2, [r3, #0]
10001a16:	683b      	ldr	r3, [r7, #0]
10001a18:	685b      	ldr	r3, [r3, #4]
10001a1a:	1c10      	adds	r0, r2, #0
10001a1c:	1c19      	adds	r1, r3, #0
10001a1e:	f000 fe4b 	bl	100026b8 <__aeabi_uidivmod>
10001a22:	1e0b      	subs	r3, r1, #0
10001a24:	d000      	beq.n	10001a28 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x20>
10001a26:	e096      	b.n	10001b56 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14e>
  {
    uint32_t prescaler = 0;
10001a28:	2300      	movs	r3, #0
10001a2a:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
10001a2c:	2300      	movs	r3, #0
10001a2e:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
10001a30:	683b      	ldr	r3, [r7, #0]
10001a32:	681a      	ldr	r2, [r3, #0]
10001a34:	683b      	ldr	r3, [r7, #0]
10001a36:	685b      	ldr	r3, [r3, #4]
10001a38:	1c10      	adds	r0, r2, #0
10001a3a:	1c19      	adds	r1, r3, #0
10001a3c:	f000 fdec 	bl	10002618 <__aeabi_uidiv>
10001a40:	1c03      	adds	r3, r0, #0
10001a42:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
10001a44:	2319      	movs	r3, #25
10001a46:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
10001a48:	2300      	movs	r3, #0
10001a4a:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
10001a4c:	2300      	movs	r3, #0
10001a4e:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
10001a50:	e049      	b.n	10001ae6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
10001a52:	68bb      	ldr	r3, [r7, #8]
10001a54:	1c18      	adds	r0, r3, #0
10001a56:	6979      	ldr	r1, [r7, #20]
10001a58:	f000 fe2e 	bl	100026b8 <__aeabi_uidivmod>
10001a5c:	1e0b      	subs	r3, r1, #0
10001a5e:	d13f      	bne.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
10001a60:	2300      	movs	r3, #0
10001a62:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
10001a64:	68b8      	ldr	r0, [r7, #8]
10001a66:	6979      	ldr	r1, [r7, #20]
10001a68:	f000 fdd6 	bl	10002618 <__aeabi_uidiv>
10001a6c:	1c03      	adds	r3, r0, #0
10001a6e:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
10001a70:	69fb      	ldr	r3, [r7, #28]
10001a72:	2b00      	cmp	r3, #0
10001a74:	d034      	beq.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001a76:	69fa      	ldr	r2, [r7, #28]
10001a78:	2380      	movs	r3, #128	; 0x80
10001a7a:	009b      	lsls	r3, r3, #2
10001a7c:	429a      	cmp	r2, r3
10001a7e:	d82f      	bhi.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
10001a80:	69fb      	ldr	r3, [r7, #28]
10001a82:	2b3f      	cmp	r3, #63	; 0x3f
10001a84:	d909      	bls.n	10001a9a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
10001a86:	69fb      	ldr	r3, [r7, #28]
10001a88:	2207      	movs	r2, #7
10001a8a:	4013      	ands	r3, r2
10001a8c:	d003      	beq.n	10001a96 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
10001a8e:	697b      	ldr	r3, [r7, #20]
10001a90:	3b01      	subs	r3, #1
10001a92:	617b      	str	r3, [r7, #20]
              continue;
10001a94:	e027      	b.n	10001ae6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
10001a96:	2301      	movs	r3, #1
10001a98:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
10001a9a:	697b      	ldr	r3, [r7, #20]
10001a9c:	3b01      	subs	r3, #1
10001a9e:	683a      	ldr	r2, [r7, #0]
10001aa0:	8912      	ldrh	r2, [r2, #8]
10001aa2:	4353      	muls	r3, r2
10001aa4:	1c18      	adds	r0, r3, #0
10001aa6:	492e      	ldr	r1, [pc, #184]	; (10001b60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x158>)
10001aa8:	f000 fdb6 	bl	10002618 <__aeabi_uidiv>
10001aac:	1c03      	adds	r3, r0, #0
10001aae:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
10001ab0:	697a      	ldr	r2, [r7, #20]
10001ab2:	693b      	ldr	r3, [r7, #16]
10001ab4:	1ad3      	subs	r3, r2, r3
10001ab6:	3b01      	subs	r3, #1
10001ab8:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
10001aba:	693b      	ldr	r3, [r7, #16]
10001abc:	2b02      	cmp	r3, #2
10001abe:	d90f      	bls.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001ac0:	693b      	ldr	r3, [r7, #16]
10001ac2:	2b0f      	cmp	r3, #15
10001ac4:	d80c      	bhi.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001ac6:	68fb      	ldr	r3, [r7, #12]
10001ac8:	2b01      	cmp	r3, #1
10001aca:	d909      	bls.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
10001acc:	68fb      	ldr	r3, [r7, #12]
10001ace:	2b06      	cmp	r3, #6
10001ad0:	d806      	bhi.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
10001ad2:	683b      	ldr	r3, [r7, #0]
10001ad4:	895b      	ldrh	r3, [r3, #10]
10001ad6:	1e1a      	subs	r2, r3, #0
10001ad8:	68fb      	ldr	r3, [r7, #12]
10001ada:	429a      	cmp	r2, r3
10001adc:	d800      	bhi.n	10001ae0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
10001ade:	e005      	b.n	10001aec <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
10001ae0:	697b      	ldr	r3, [r7, #20]
10001ae2:	3b01      	subs	r3, #1
10001ae4:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
10001ae6:	697b      	ldr	r3, [r7, #20]
10001ae8:	2b07      	cmp	r3, #7
10001aea:	d8b2      	bhi.n	10001a52 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x4a>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
10001aec:	697b      	ldr	r3, [r7, #20]
10001aee:	2b07      	cmp	r3, #7
10001af0:	d931      	bls.n	10001b56 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14e>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
10001af2:	687b      	ldr	r3, [r7, #4]
10001af4:	1c18      	adds	r0, r3, #0
10001af6:	f7ff ff4f 	bl	10001998 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
10001afa:	68fb      	ldr	r3, [r7, #12]
10001afc:	3b01      	subs	r3, #1
10001afe:	031a      	lsls	r2, r3, #12
10001b00:	23e0      	movs	r3, #224	; 0xe0
10001b02:	01db      	lsls	r3, r3, #7
10001b04:	401a      	ands	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
10001b06:	683b      	ldr	r3, [r7, #0]
10001b08:	895b      	ldrh	r3, [r3, #10]
10001b0a:	3b01      	subs	r3, #1
10001b0c:	019b      	lsls	r3, r3, #6
10001b0e:	21ff      	movs	r1, #255	; 0xff
10001b10:	400b      	ands	r3, r1
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
10001b12:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
10001b14:	693b      	ldr	r3, [r7, #16]
10001b16:	3b01      	subs	r3, #1
10001b18:	0219      	lsls	r1, r3, #8
10001b1a:	23f0      	movs	r3, #240	; 0xf0
10001b1c:	011b      	lsls	r3, r3, #4
10001b1e:	400b      	ands	r3, r1

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
10001b20:	431a      	orrs	r2, r3
10001b22:	1c11      	adds	r1, r2, #0
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
10001b24:	69ba      	ldr	r2, [r7, #24]
10001b26:	1c13      	adds	r3, r2, #0
10001b28:	005b      	lsls	r3, r3, #1
10001b2a:	189b      	adds	r3, r3, r2
10001b2c:	1c1a      	adds	r2, r3, #0
10001b2e:	69fb      	ldr	r3, [r7, #28]
10001b30:	40d3      	lsrs	r3, r2
10001b32:	3b01      	subs	r3, #1
10001b34:	223f      	movs	r2, #63	; 0x3f
10001b36:	4013      	ands	r3, r2
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
10001b38:	1c0a      	adds	r2, r1, #0
10001b3a:	431a      	orrs	r2, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
10001b3c:	69bb      	ldr	r3, [r7, #24]
10001b3e:	03db      	lsls	r3, r3, #15
10001b40:	041b      	lsls	r3, r3, #16
10001b42:	0c1b      	lsrs	r3, r3, #16

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
10001b44:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
10001b46:	687b      	ldr	r3, [r7, #4]
10001b48:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
10001b4a:	687b      	ldr	r3, [r7, #4]
10001b4c:	1c18      	adds	r0, r3, #0
10001b4e:	f7ff ff31 	bl	100019b4 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
10001b52:	2300      	movs	r3, #0
10001b54:	e000      	b.n	10001b58 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x150>
    }
  }

  return XMC_CAN_STATUS_ERROR;
10001b56:	2301      	movs	r3, #1
}
10001b58:	1c18      	adds	r0, r3, #0
10001b5a:	46bd      	mov	sp, r7
10001b5c:	b008      	add	sp, #32
10001b5e:	bd80      	pop	{r7, pc}
10001b60:	00002710 	.word	0x00002710

10001b64 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
10001b64:	b590      	push	{r4, r7, lr}
10001b66:	b083      	sub	sp, #12
10001b68:	af00      	add	r7, sp, #0
10001b6a:	6078      	str	r0, [r7, #4]
10001b6c:	1c08      	adds	r0, r1, #0
10001b6e:	1c11      	adds	r1, r2, #0
10001b70:	1cfb      	adds	r3, r7, #3
10001b72:	1c02      	adds	r2, r0, #0
10001b74:	701a      	strb	r2, [r3, #0]
10001b76:	1cbb      	adds	r3, r7, #2
10001b78:	1c0a      	adds	r2, r1, #0
10001b7a:	701a      	strb	r2, [r3, #0]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
10001b7c:	46c0      	nop			; (mov r8, r8)
10001b7e:	687b      	ldr	r3, [r7, #4]
10001b80:	1c18      	adds	r0, r3, #0
10001b82:	f7ff fed1 	bl	10001928 <XMC_CAN_IsPanelControlReady>
10001b86:	1c03      	adds	r3, r0, #0
10001b88:	1c1a      	adds	r2, r3, #0
10001b8a:	2301      	movs	r3, #1
10001b8c:	4053      	eors	r3, r2
10001b8e:	b2db      	uxtb	r3, r3
10001b90:	2b00      	cmp	r3, #0
10001b92:	d1f4      	bne.n	10001b7e <XMC_CAN_AllocateMOtoNodeList+0x1a>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
10001b94:	1cfb      	adds	r3, r7, #3
10001b96:	781b      	ldrb	r3, [r3, #0]
10001b98:	3301      	adds	r3, #1
10001b9a:	b2dc      	uxtb	r4, r3
10001b9c:	687a      	ldr	r2, [r7, #4]
10001b9e:	1cbb      	adds	r3, r7, #2
10001ba0:	781b      	ldrb	r3, [r3, #0]
10001ba2:	1c10      	adds	r0, r2, #0
10001ba4:	2102      	movs	r1, #2
10001ba6:	1c1a      	adds	r2, r3, #0
10001ba8:	1c23      	adds	r3, r4, #0
10001baa:	f7ff fecf 	bl	1000194c <XMC_CAN_PanelControl>
}
10001bae:	46bd      	mov	sp, r7
10001bb0:	b003      	add	sp, #12
10001bb2:	bd90      	pop	{r4, r7, pc}

10001bb4 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
10001bb4:	b580      	push	{r7, lr}
10001bb6:	b082      	sub	sp, #8
10001bb8:	af00      	add	r7, sp, #0
10001bba:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
10001bbc:	2380      	movs	r3, #128	; 0x80
10001bbe:	039b      	lsls	r3, r3, #14
10001bc0:	1c18      	adds	r0, r3, #0
10001bc2:	f7ff fccb 	bl	1000155c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
10001bc6:	687b      	ldr	r3, [r7, #4]
10001bc8:	681b      	ldr	r3, [r3, #0]
10001bca:	2201      	movs	r2, #1
10001bcc:	4393      	bics	r3, r2
10001bce:	1c1a      	adds	r2, r3, #0
10001bd0:	687b      	ldr	r3, [r7, #4]
10001bd2:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
10001bd4:	46c0      	nop			; (mov r8, r8)
10001bd6:	687b      	ldr	r3, [r7, #4]
10001bd8:	681b      	ldr	r3, [r3, #0]
10001bda:	2202      	movs	r2, #2
10001bdc:	4013      	ands	r3, r2
10001bde:	d1fa      	bne.n	10001bd6 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
10001be0:	46bd      	mov	sp, r7
10001be2:	b002      	add	sp, #8
10001be4:	bd80      	pop	{r7, pc}
10001be6:	46c0      	nop			; (mov r8, r8)

10001be8 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
10001be8:	b580      	push	{r7, lr}
10001bea:	b082      	sub	sp, #8
10001bec:	af00      	add	r7, sp, #0
10001bee:	6078      	str	r0, [r7, #4]
10001bf0:	1c0a      	adds	r2, r1, #0
10001bf2:	1cfb      	adds	r3, r7, #3
10001bf4:	701a      	strb	r2, [r3, #0]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
10001bf6:	687a      	ldr	r2, [r7, #4]
10001bf8:	23e4      	movs	r3, #228	; 0xe4
10001bfa:	005b      	lsls	r3, r3, #1
10001bfc:	58d3      	ldr	r3, [r2, r3]
10001bfe:	220f      	movs	r2, #15
10001c00:	4393      	bics	r3, r2
10001c02:	1c1a      	adds	r2, r3, #0
10001c04:	1cfb      	adds	r3, r7, #3
10001c06:	781b      	ldrb	r3, [r3, #0]
10001c08:	431a      	orrs	r2, r3
10001c0a:	1c11      	adds	r1, r2, #0
10001c0c:	687a      	ldr	r2, [r7, #4]
10001c0e:	23e4      	movs	r3, #228	; 0xe4
10001c10:	005b      	lsls	r3, r3, #1
10001c12:	50d1      	str	r1, [r2, r3]
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
10001c14:	46bd      	mov	sp, r7
10001c16:	b002      	add	sp, #8
10001c18:	bd80      	pop	{r7, pc}
10001c1a:	46c0      	nop			; (mov r8, r8)

10001c1c <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
10001c1c:	b580      	push	{r7, lr}
10001c1e:	b082      	sub	sp, #8
10001c20:	af00      	add	r7, sp, #0
10001c22:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
10001c24:	687a      	ldr	r2, [r7, #4]
10001c26:	23e4      	movs	r3, #228	; 0xe4
10001c28:	005b      	lsls	r3, r3, #1
10001c2a:	58d3      	ldr	r3, [r2, r3]
10001c2c:	b2db      	uxtb	r3, r3
10001c2e:	220f      	movs	r2, #15
10001c30:	4013      	ands	r3, r2
10001c32:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
10001c34:	1c18      	adds	r0, r3, #0
10001c36:	46bd      	mov	sp, r7
10001c38:	b002      	add	sp, #8
10001c3a:	bd80      	pop	{r7, pc}

10001c3c <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
10001c3c:	b580      	push	{r7, lr}
10001c3e:	b084      	sub	sp, #16
10001c40:	af00      	add	r7, sp, #0
10001c42:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
10001c44:	2300      	movs	r3, #0
10001c46:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
10001c48:	687b      	ldr	r3, [r7, #4]
10001c4a:	1c18      	adds	r0, r3, #0
10001c4c:	f7ff ffe6 	bl	10001c1c <XMC_CAN_GetBaudrateClockSource>
10001c50:	1e03      	subs	r3, r0, #0
10001c52:	2b01      	cmp	r3, #1
10001c54:	d002      	beq.n	10001c5c <XMC_CAN_GetBaudrateClockFrequency+0x20>
10001c56:	2b02      	cmp	r3, #2
10001c58:	d005      	beq.n	10001c66 <XMC_CAN_GetBaudrateClockFrequency+0x2a>
10001c5a:	e009      	b.n	10001c70 <XMC_CAN_GetBaudrateClockFrequency+0x34>
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#else
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10001c5c:	f7ff fd4e 	bl	100016fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10001c60:	1c03      	adds	r3, r0, #0
10001c62:	60fb      	str	r3, [r7, #12]
      break;
10001c64:	e004      	b.n	10001c70 <XMC_CAN_GetBaudrateClockFrequency+0x34>
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
10001c66:	f7ff fa87 	bl	10001178 <OSCHP_GetFrequency>
10001c6a:	1c03      	adds	r3, r0, #0
10001c6c:	60fb      	str	r3, [r7, #12]
      break;
10001c6e:	46c0      	nop			; (mov r8, r8)
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
10001c70:	68fb      	ldr	r3, [r7, #12]
}
10001c72:	1c18      	adds	r0, r3, #0
10001c74:	46bd      	mov	sp, r7
10001c76:	b004      	add	sp, #16
10001c78:	bd80      	pop	{r7, pc}
10001c7a:	46c0      	nop			; (mov r8, r8)

10001c7c <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
10001c7c:	b580      	push	{r7, lr}
10001c7e:	b088      	sub	sp, #32
10001c80:	af00      	add	r7, sp, #0
10001c82:	60f8      	str	r0, [r7, #12]
10001c84:	607a      	str	r2, [r7, #4]
10001c86:	230b      	movs	r3, #11
10001c88:	18fb      	adds	r3, r7, r3
10001c8a:	1c0a      	adds	r2, r1, #0
10001c8c:	701a      	strb	r2, [r3, #0]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
10001c8e:	68fb      	ldr	r3, [r7, #12]
10001c90:	1c18      	adds	r0, r3, #0
10001c92:	f7ff ff8f 	bl	10001bb4 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
10001c96:	68fa      	ldr	r2, [r7, #12]
10001c98:	230b      	movs	r3, #11
10001c9a:	18fb      	adds	r3, r7, r3
10001c9c:	781b      	ldrb	r3, [r3, #0]
10001c9e:	1c10      	adds	r0, r2, #0
10001ca0:	1c19      	adds	r1, r3, #0
10001ca2:	f7ff ffa1 	bl	10001be8 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
10001ca6:	68fb      	ldr	r3, [r7, #12]
10001ca8:	1c18      	adds	r0, r3, #0
10001caa:	f7ff ffc7 	bl	10001c3c <XMC_CAN_GetBaudrateClockFrequency>
10001cae:	1c03      	adds	r3, r0, #0
10001cb0:	61fb      	str	r3, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
10001cb2:	69f8      	ldr	r0, [r7, #28]
10001cb4:	6879      	ldr	r1, [r7, #4]
10001cb6:	f000 fcaf 	bl	10002618 <__aeabi_uidiv>
10001cba:	1c03      	adds	r3, r0, #0
10001cbc:	1c1a      	adds	r2, r3, #0
10001cbe:	2380      	movs	r3, #128	; 0x80
10001cc0:	00db      	lsls	r3, r3, #3
10001cc2:	1a9b      	subs	r3, r3, r2
10001cc4:	2000      	movs	r0, #0
10001cc6:	1c19      	adds	r1, r3, #0
10001cc8:	f7ff fe82 	bl	100019d0 <max>
10001ccc:	1c02      	adds	r2, r0, #0
10001cce:	4b12      	ldr	r3, [pc, #72]	; (10001d18 <XMC_CAN_InitEx+0x9c>)
10001cd0:	1c10      	adds	r0, r2, #0
10001cd2:	1c19      	adds	r1, r3, #0
10001cd4:	f7ff fe8a 	bl	100019ec <min>
10001cd8:	1c03      	adds	r3, r0, #0
10001cda:	61bb      	str	r3, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
10001cdc:	69bb      	ldr	r3, [r7, #24]
10001cde:	2280      	movs	r2, #128	; 0x80
10001ce0:	00d2      	lsls	r2, r2, #3
10001ce2:	1ad3      	subs	r3, r2, r3
10001ce4:	69f8      	ldr	r0, [r7, #28]
10001ce6:	1c19      	adds	r1, r3, #0
10001ce8:	f000 fc96 	bl	10002618 <__aeabi_uidiv>
10001cec:	1c03      	adds	r3, r0, #0
10001cee:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
10001cf0:	68fb      	ldr	r3, [r7, #12]
10001cf2:	68db      	ldr	r3, [r3, #12]
10001cf4:	4a09      	ldr	r2, [pc, #36]	; (10001d1c <XMC_CAN_InitEx+0xa0>)
10001cf6:	401a      	ands	r2, r3
10001cf8:	68fb      	ldr	r3, [r7, #12]
10001cfa:	60da      	str	r2, [r3, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
10001cfc:	68fb      	ldr	r3, [r7, #12]
10001cfe:	68da      	ldr	r2, [r3, #12]
10001d00:	69bb      	ldr	r3, [r7, #24]
10001d02:	4313      	orrs	r3, r2
10001d04:	2280      	movs	r2, #128	; 0x80
10001d06:	01d2      	lsls	r2, r2, #7
10001d08:	431a      	orrs	r2, r3
10001d0a:	68fb      	ldr	r3, [r7, #12]
10001d0c:	60da      	str	r2, [r3, #12]

  return freq_n;
10001d0e:	697b      	ldr	r3, [r7, #20]
}
10001d10:	1c18      	adds	r0, r3, #0
10001d12:	46bd      	mov	sp, r7
10001d14:	b008      	add	sp, #32
10001d16:	bd80      	pop	{r7, pc}
10001d18:	000003ff 	.word	0x000003ff
10001d1c:	ffff3c00 	.word	0xffff3c00

10001d20 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
10001d20:	b580      	push	{r7, lr}
10001d22:	b086      	sub	sp, #24
10001d24:	af00      	add	r7, sp, #0
10001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
10001d28:	687b      	ldr	r3, [r7, #4]
10001d2a:	681b      	ldr	r3, [r3, #0]
10001d2c:	4a48      	ldr	r2, [pc, #288]	; (10001e50 <XMC_CAN_MO_Config+0x130>)
10001d2e:	4694      	mov	ip, r2
10001d30:	4463      	add	r3, ip
10001d32:	095b      	lsrs	r3, r3, #5
10001d34:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
10001d36:	697b      	ldr	r3, [r7, #20]
10001d38:	095b      	lsrs	r3, r3, #5
10001d3a:	035a      	lsls	r2, r3, #13
10001d3c:	697b      	ldr	r3, [r7, #20]
10001d3e:	211f      	movs	r1, #31
10001d40:	400b      	ands	r3, r1
10001d42:	021b      	lsls	r3, r3, #8
10001d44:	4313      	orrs	r3, r2
10001d46:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
10001d48:	687b      	ldr	r3, [r7, #4]
10001d4a:	681b      	ldr	r3, [r3, #0]
10001d4c:	687a      	ldr	r2, [r7, #4]
10001d4e:	6812      	ldr	r2, [r2, #0]
10001d50:	6892      	ldr	r2, [r2, #8]
10001d52:	4940      	ldr	r1, [pc, #256]	; (10001e54 <XMC_CAN_MO_Config+0x134>)
10001d54:	400a      	ands	r2, r1
10001d56:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
10001d58:	687b      	ldr	r3, [r7, #4]
10001d5a:	681b      	ldr	r3, [r3, #0]
10001d5c:	687a      	ldr	r2, [r7, #4]
10001d5e:	6812      	ldr	r2, [r2, #0]
10001d60:	6891      	ldr	r1, [r2, #8]
10001d62:	693a      	ldr	r2, [r7, #16]
10001d64:	430a      	orrs	r2, r1
10001d66:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10001d68:	687b      	ldr	r3, [r7, #4]
10001d6a:	79db      	ldrb	r3, [r3, #7]
10001d6c:	2220      	movs	r2, #32
10001d6e:	4013      	ands	r3, r2
10001d70:	b2db      	uxtb	r3, r3
10001d72:	2b00      	cmp	r3, #0
10001d74:	d007      	beq.n	10001d86 <XMC_CAN_MO_Config+0x66>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10001d76:	687b      	ldr	r3, [r7, #4]
10001d78:	79db      	ldrb	r3, [r3, #7]
10001d7a:	2220      	movs	r2, #32
10001d7c:	4013      	ands	r3, r2
10001d7e:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10001d80:	2b00      	cmp	r3, #0
10001d82:	d100      	bne.n	10001d86 <XMC_CAN_MO_Config+0x66>
10001d84:	e061      	b.n	10001e4a <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10001d86:	687b      	ldr	r3, [r7, #4]
10001d88:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10001d8a:	2b00      	cmp	r3, #0
10001d8c:	d004      	beq.n	10001d98 <XMC_CAN_MO_Config+0x78>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
10001d8e:	687b      	ldr	r3, [r7, #4]
10001d90:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10001d92:	2b01      	cmp	r3, #1
10001d94:	d000      	beq.n	10001d98 <XMC_CAN_MO_Config+0x78>
10001d96:	e058      	b.n	10001e4a <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001d98:	687b      	ldr	r3, [r7, #4]
10001d9a:	681b      	ldr	r3, [r3, #0]
10001d9c:	2220      	movs	r2, #32
10001d9e:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
10001da0:	687b      	ldr	r3, [r7, #4]
10001da2:	79db      	ldrb	r3, [r3, #7]
10001da4:	2220      	movs	r2, #32
10001da6:	4013      	ands	r3, r2
10001da8:	b2db      	uxtb	r3, r3
10001daa:	2b00      	cmp	r3, #0
10001dac:	d128      	bne.n	10001e00 <XMC_CAN_MO_Config+0xe0>
    {
      reg = can_mo->mo_ar;
10001dae:	687b      	ldr	r3, [r7, #4]
10001db0:	685b      	ldr	r3, [r3, #4]
10001db2:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
10001db4:	68fb      	ldr	r3, [r7, #12]
10001db6:	0f5b      	lsrs	r3, r3, #29
10001db8:	075b      	lsls	r3, r3, #29
10001dba:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
10001dbc:	687b      	ldr	r3, [r7, #4]
10001dbe:	685b      	ldr	r3, [r3, #4]
10001dc0:	00db      	lsls	r3, r3, #3
10001dc2:	08db      	lsrs	r3, r3, #3
10001dc4:	049b      	lsls	r3, r3, #18
10001dc6:	1c1a      	adds	r2, r3, #0
10001dc8:	68fb      	ldr	r3, [r7, #12]
10001dca:	4313      	orrs	r3, r2
10001dcc:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
10001dce:	687b      	ldr	r3, [r7, #4]
10001dd0:	681b      	ldr	r3, [r3, #0]
10001dd2:	68fa      	ldr	r2, [r7, #12]
10001dd4:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
10001dd6:	687b      	ldr	r3, [r7, #4]
10001dd8:	689b      	ldr	r3, [r3, #8]
10001dda:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
10001ddc:	68fb      	ldr	r3, [r7, #12]
10001dde:	0f5b      	lsrs	r3, r3, #29
10001de0:	075b      	lsls	r3, r3, #29
10001de2:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
10001de4:	687b      	ldr	r3, [r7, #4]
10001de6:	689b      	ldr	r3, [r3, #8]
10001de8:	00db      	lsls	r3, r3, #3
10001dea:	08db      	lsrs	r3, r3, #3
10001dec:	049b      	lsls	r3, r3, #18
10001dee:	1c1a      	adds	r2, r3, #0
10001df0:	68fb      	ldr	r3, [r7, #12]
10001df2:	4313      	orrs	r3, r2
10001df4:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
10001df6:	687b      	ldr	r3, [r7, #4]
10001df8:	681b      	ldr	r3, [r3, #0]
10001dfa:	68fa      	ldr	r2, [r7, #12]
10001dfc:	60da      	str	r2, [r3, #12]
10001dfe:	e009      	b.n	10001e14 <XMC_CAN_MO_Config+0xf4>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
10001e00:	687b      	ldr	r3, [r7, #4]
10001e02:	681b      	ldr	r3, [r3, #0]
10001e04:	687a      	ldr	r2, [r7, #4]
10001e06:	6852      	ldr	r2, [r2, #4]
10001e08:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
10001e0a:	687b      	ldr	r3, [r7, #4]
10001e0c:	681b      	ldr	r3, [r3, #0]
10001e0e:	687a      	ldr	r2, [r7, #4]
10001e10:	6892      	ldr	r2, [r2, #8]
10001e12:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001e14:	687b      	ldr	r3, [r7, #4]
10001e16:	7e1b      	ldrb	r3, [r3, #24]
10001e18:	2b01      	cmp	r3, #1
10001e1a:	d10d      	bne.n	10001e38 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
10001e1c:	687b      	ldr	r3, [r7, #4]
10001e1e:	1c18      	adds	r0, r3, #0
10001e20:	f000 f81e 	bl	10001e60 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
10001e24:	687b      	ldr	r3, [r7, #4]
10001e26:	681b      	ldr	r3, [r3, #0]
10001e28:	2280      	movs	r2, #128	; 0x80
10001e2a:	0512      	lsls	r2, r2, #20
10001e2c:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001e2e:	687b      	ldr	r3, [r7, #4]
10001e30:	681b      	ldr	r3, [r3, #0]
10001e32:	4a09      	ldr	r2, [pc, #36]	; (10001e58 <XMC_CAN_MO_Config+0x138>)
10001e34:	61da      	str	r2, [r3, #28]
10001e36:	e008      	b.n	10001e4a <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
10001e38:	687b      	ldr	r3, [r7, #4]
10001e3a:	681b      	ldr	r3, [r3, #0]
10001e3c:	2280      	movs	r2, #128	; 0x80
10001e3e:	0112      	lsls	r2, r2, #4
10001e40:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10001e42:	687b      	ldr	r3, [r7, #4]
10001e44:	681b      	ldr	r3, [r3, #0]
10001e46:	4a05      	ldr	r2, [pc, #20]	; (10001e5c <XMC_CAN_MO_Config+0x13c>)
10001e48:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
10001e4a:	46bd      	mov	sp, r7
10001e4c:	b006      	add	sp, #24
10001e4e:	bd80      	pop	{r7, pc}
10001e50:	affbf000 	.word	0xaffbf000
10001e54:	ffff00ff 	.word	0xffff00ff
10001e58:	062000c0 	.word	0x062000c0
10001e5c:	00a00640 	.word	0x00a00640

10001e60 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
10001e60:	b580      	push	{r7, lr}
10001e62:	b084      	sub	sp, #16
10001e64:	af00      	add	r7, sp, #0
10001e66:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001e68:	230f      	movs	r3, #15
10001e6a:	18fb      	adds	r3, r7, r3
10001e6c:	2203      	movs	r2, #3
10001e6e:	701a      	strb	r2, [r3, #0]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
10001e70:	687b      	ldr	r3, [r7, #4]
10001e72:	7e1b      	ldrb	r3, [r3, #24]
10001e74:	2b01      	cmp	r3, #1
10001e76:	d125      	bne.n	10001ec4 <XMC_CAN_MO_UpdateData+0x64>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10001e78:	687b      	ldr	r3, [r7, #4]
10001e7a:	681b      	ldr	r3, [r3, #0]
10001e7c:	2220      	movs	r2, #32
10001e7e:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001e80:	687b      	ldr	r3, [r7, #4]
10001e82:	681b      	ldr	r3, [r3, #0]
10001e84:	687a      	ldr	r2, [r7, #4]
10001e86:	6812      	ldr	r2, [r2, #0]
10001e88:	6812      	ldr	r2, [r2, #0]
10001e8a:	4914      	ldr	r1, [pc, #80]	; (10001edc <XMC_CAN_MO_UpdateData+0x7c>)
10001e8c:	4011      	ands	r1, r2
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
10001e8e:	687a      	ldr	r2, [r7, #4]
10001e90:	7b12      	ldrb	r2, [r2, #12]
10001e92:	0610      	lsls	r0, r2, #24
10001e94:	22f0      	movs	r2, #240	; 0xf0
10001e96:	0512      	lsls	r2, r2, #20
10001e98:	4002      	ands	r2, r0
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10001e9a:	430a      	orrs	r2, r1
10001e9c:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
10001e9e:	687b      	ldr	r3, [r7, #4]
10001ea0:	681b      	ldr	r3, [r3, #0]
10001ea2:	687a      	ldr	r2, [r7, #4]
10001ea4:	6912      	ldr	r2, [r2, #16]
10001ea6:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
10001ea8:	687b      	ldr	r3, [r7, #4]
10001eaa:	681b      	ldr	r3, [r3, #0]
10001eac:	687a      	ldr	r2, [r7, #4]
10001eae:	6952      	ldr	r2, [r2, #20]
10001eb0:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
10001eb2:	687b      	ldr	r3, [r7, #4]
10001eb4:	681b      	ldr	r3, [r3, #0]
10001eb6:	4a0a      	ldr	r2, [pc, #40]	; (10001ee0 <XMC_CAN_MO_UpdateData+0x80>)
10001eb8:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001eba:	230f      	movs	r3, #15
10001ebc:	18fb      	adds	r3, r7, r3
10001ebe:	2200      	movs	r2, #0
10001ec0:	701a      	strb	r2, [r3, #0]
10001ec2:	e003      	b.n	10001ecc <XMC_CAN_MO_UpdateData+0x6c>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001ec4:	230f      	movs	r3, #15
10001ec6:	18fb      	adds	r3, r7, r3
10001ec8:	2203      	movs	r2, #3
10001eca:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001ecc:	230f      	movs	r3, #15
10001ece:	18fb      	adds	r3, r7, r3
10001ed0:	781b      	ldrb	r3, [r3, #0]
}
10001ed2:	1c18      	adds	r0, r3, #0
10001ed4:	46bd      	mov	sp, r7
10001ed6:	b004      	add	sp, #16
10001ed8:	bd80      	pop	{r7, pc}
10001eda:	46c0      	nop			; (mov r8, r8)
10001edc:	f0ffffff 	.word	0xf0ffffff
10001ee0:	00280040 	.word	0x00280040

10001ee4 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
10001ee4:	b580      	push	{r7, lr}
10001ee6:	b086      	sub	sp, #24
10001ee8:	af00      	add	r7, sp, #0
10001eea:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10001eec:	2317      	movs	r3, #23
10001eee:	18fb      	adds	r3, r7, r3
10001ef0:	2201      	movs	r2, #1
10001ef2:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
10001ef4:	687b      	ldr	r3, [r7, #4]
10001ef6:	681b      	ldr	r3, [r3, #0]
10001ef8:	69db      	ldr	r3, [r3, #28]
10001efa:	2220      	movs	r2, #32
10001efc:	4013      	ands	r3, r2
10001efe:	095b      	lsrs	r3, r3, #5
10001f00:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
10001f02:	687b      	ldr	r3, [r7, #4]
10001f04:	681b      	ldr	r3, [r3, #0]
10001f06:	69da      	ldr	r2, [r3, #28]
10001f08:	2380      	movs	r3, #128	; 0x80
10001f0a:	005b      	lsls	r3, r3, #1
10001f0c:	4013      	ands	r3, r2
10001f0e:	0a1b      	lsrs	r3, r3, #8
10001f10:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
10001f12:	693b      	ldr	r3, [r7, #16]
10001f14:	2b00      	cmp	r3, #0
10001f16:	d104      	bne.n	10001f22 <XMC_CAN_MO_Transmit+0x3e>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
10001f18:	2317      	movs	r3, #23
10001f1a:	18fb      	adds	r3, r7, r3
10001f1c:	2204      	movs	r2, #4
10001f1e:	701a      	strb	r2, [r3, #0]
10001f20:	e010      	b.n	10001f44 <XMC_CAN_MO_Transmit+0x60>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
10001f22:	68fb      	ldr	r3, [r7, #12]
10001f24:	2b01      	cmp	r3, #1
10001f26:	d104      	bne.n	10001f32 <XMC_CAN_MO_Transmit+0x4e>
  {
    error = XMC_CAN_STATUS_BUSY;
10001f28:	2317      	movs	r3, #23
10001f2a:	18fb      	adds	r3, r7, r3
10001f2c:	2202      	movs	r2, #2
10001f2e:	701a      	strb	r2, [r3, #0]
10001f30:	e008      	b.n	10001f44 <XMC_CAN_MO_Transmit+0x60>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
10001f32:	687b      	ldr	r3, [r7, #4]
10001f34:	681b      	ldr	r3, [r3, #0]
10001f36:	22e0      	movs	r2, #224	; 0xe0
10001f38:	04d2      	lsls	r2, r2, #19
10001f3a:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10001f3c:	2317      	movs	r3, #23
10001f3e:	18fb      	adds	r3, r7, r3
10001f40:	2200      	movs	r2, #0
10001f42:	701a      	strb	r2, [r3, #0]
  }
  return error;
10001f44:	2317      	movs	r3, #23
10001f46:	18fb      	adds	r3, r7, r3
10001f48:	781b      	ldrb	r3, [r3, #0]
}
10001f4a:	1c18      	adds	r0, r3, #0
10001f4c:	46bd      	mov	sp, r7
10001f4e:	b006      	add	sp, #24
10001f50:	bd80      	pop	{r7, pc}
10001f52:	46c0      	nop			; (mov r8, r8)

10001f54 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
10001f54:	b580      	push	{r7, lr}
10001f56:	b086      	sub	sp, #24
10001f58:	af00      	add	r7, sp, #0
10001f5a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10001f5c:	2317      	movs	r3, #23
10001f5e:	18fb      	adds	r3, r7, r3
10001f60:	2201      	movs	r2, #1
10001f62:	701a      	strb	r2, [r3, #0]
  uint8_t rx_pnd = 0U;
10001f64:	2316      	movs	r3, #22
10001f66:	18fb      	adds	r3, r7, r3
10001f68:	2200      	movs	r2, #0
10001f6a:	701a      	strb	r2, [r3, #0]
  uint8_t new_data = 0U;
10001f6c:	2315      	movs	r3, #21
10001f6e:	18fb      	adds	r3, r7, r3
10001f70:	2200      	movs	r2, #0
10001f72:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
10001f74:	687b      	ldr	r3, [r7, #4]
10001f76:	681b      	ldr	r3, [r3, #0]
10001f78:	69da      	ldr	r2, [r3, #28]
10001f7a:	2380      	movs	r3, #128	; 0x80
10001f7c:	011b      	lsls	r3, r3, #4
10001f7e:	4013      	ands	r3, r2
10001f80:	0adb      	lsrs	r3, r3, #11
10001f82:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
10001f84:	687b      	ldr	r3, [r7, #4]
10001f86:	681b      	ldr	r3, [r3, #0]
10001f88:	69db      	ldr	r3, [r3, #28]
10001f8a:	2204      	movs	r2, #4
10001f8c:	4013      	ands	r3, r2
10001f8e:	089b      	lsrs	r3, r3, #2
10001f90:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
10001f92:	693b      	ldr	r3, [r7, #16]
10001f94:	2b00      	cmp	r3, #0
10001f96:	d004      	beq.n	10001fa2 <XMC_CAN_MO_Receive+0x4e>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10001f98:	2317      	movs	r3, #23
10001f9a:	18fb      	adds	r3, r7, r3
10001f9c:	2203      	movs	r2, #3
10001f9e:	701a      	strb	r2, [r3, #0]
10001fa0:	e0d3      	b.n	1000214a <XMC_CAN_MO_Receive+0x1f6>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
10001fa2:	68fb      	ldr	r3, [r7, #12]
10001fa4:	2b01      	cmp	r3, #1
10001fa6:	d104      	bne.n	10001fb2 <XMC_CAN_MO_Receive+0x5e>
  {
    error = XMC_CAN_STATUS_BUSY;
10001fa8:	2317      	movs	r3, #23
10001faa:	18fb      	adds	r3, r7, r3
10001fac:	2202      	movs	r2, #2
10001fae:	701a      	strb	r2, [r3, #0]
10001fb0:	e0cb      	b.n	1000214a <XMC_CAN_MO_Receive+0x1f6>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
10001fb2:	687b      	ldr	r3, [r7, #4]
10001fb4:	681b      	ldr	r3, [r3, #0]
10001fb6:	2208      	movs	r2, #8
10001fb8:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
10001fba:	687b      	ldr	r3, [r7, #4]
10001fbc:	681b      	ldr	r3, [r3, #0]
10001fbe:	699a      	ldr	r2, [r3, #24]
10001fc0:	2380      	movs	r3, #128	; 0x80
10001fc2:	059b      	lsls	r3, r3, #22
10001fc4:	4013      	ands	r3, r2
10001fc6:	0f5b      	lsrs	r3, r3, #29
10001fc8:	d151      	bne.n	1000206e <XMC_CAN_MO_Receive+0x11a>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
10001fca:	687b      	ldr	r3, [r7, #4]
10001fcc:	79da      	ldrb	r2, [r3, #7]
10001fce:	2120      	movs	r1, #32
10001fd0:	438a      	bics	r2, r1
10001fd2:	71da      	strb	r2, [r3, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
10001fd4:	687b      	ldr	r3, [r7, #4]
10001fd6:	681b      	ldr	r3, [r3, #0]
10001fd8:	699b      	ldr	r3, [r3, #24]
10001fda:	4a5f      	ldr	r2, [pc, #380]	; (10002158 <XMC_CAN_MO_Receive+0x204>)
10001fdc:	4013      	ands	r3, r2
10001fde:	0c9b      	lsrs	r3, r3, #18
10001fe0:	00db      	lsls	r3, r3, #3
10001fe2:	08da      	lsrs	r2, r3, #3
10001fe4:	687b      	ldr	r3, [r7, #4]
10001fe6:	00d2      	lsls	r2, r2, #3
10001fe8:	08d2      	lsrs	r2, r2, #3
10001fea:	6859      	ldr	r1, [r3, #4]
10001fec:	0f49      	lsrs	r1, r1, #29
10001fee:	0749      	lsls	r1, r1, #29
10001ff0:	430a      	orrs	r2, r1
10001ff2:	605a      	str	r2, [r3, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
10001ff4:	687b      	ldr	r3, [r7, #4]
10001ff6:	681b      	ldr	r3, [r3, #0]
10001ff8:	68da      	ldr	r2, [r3, #12]
10001ffa:	2380      	movs	r3, #128	; 0x80
10001ffc:	059b      	lsls	r3, r3, #22
10001ffe:	4013      	ands	r3, r2
10002000:	0f5b      	lsrs	r3, r3, #29
10002002:	b2db      	uxtb	r3, r3
10002004:	1c1a      	adds	r2, r3, #0
10002006:	2301      	movs	r3, #1
10002008:	4013      	ands	r3, r2
1000200a:	b2da      	uxtb	r2, r3
1000200c:	687b      	ldr	r3, [r7, #4]
1000200e:	2101      	movs	r1, #1
10002010:	400a      	ands	r2, r1
10002012:	0150      	lsls	r0, r2, #5
10002014:	7ada      	ldrb	r2, [r3, #11]
10002016:	2120      	movs	r1, #32
10002018:	438a      	bics	r2, r1
1000201a:	1c11      	adds	r1, r2, #0
1000201c:	1c02      	adds	r2, r0, #0
1000201e:	430a      	orrs	r2, r1
10002020:	72da      	strb	r2, [r3, #11]
        if (can_mo->can_ide_mask == 1U)
10002022:	687b      	ldr	r3, [r7, #4]
10002024:	7adb      	ldrb	r3, [r3, #11]
10002026:	2220      	movs	r2, #32
10002028:	4013      	ands	r3, r2
1000202a:	b2db      	uxtb	r3, r3
1000202c:	2b00      	cmp	r3, #0
1000202e:	d010      	beq.n	10002052 <XMC_CAN_MO_Receive+0xfe>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
10002030:	687b      	ldr	r3, [r7, #4]
10002032:	681b      	ldr	r3, [r3, #0]
10002034:	68db      	ldr	r3, [r3, #12]
10002036:	4a48      	ldr	r2, [pc, #288]	; (10002158 <XMC_CAN_MO_Receive+0x204>)
10002038:	4013      	ands	r3, r2
1000203a:	0c9b      	lsrs	r3, r3, #18
1000203c:	00db      	lsls	r3, r3, #3
1000203e:	08da      	lsrs	r2, r3, #3
10002040:	687b      	ldr	r3, [r7, #4]
10002042:	00d2      	lsls	r2, r2, #3
10002044:	08d2      	lsrs	r2, r2, #3
10002046:	6899      	ldr	r1, [r3, #8]
10002048:	0f49      	lsrs	r1, r1, #29
1000204a:	0749      	lsls	r1, r1, #29
1000204c:	430a      	orrs	r2, r1
1000204e:	609a      	str	r2, [r3, #8]
10002050:	e043      	b.n	100020da <XMC_CAN_MO_Receive+0x186>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
10002052:	687b      	ldr	r3, [r7, #4]
10002054:	681b      	ldr	r3, [r3, #0]
10002056:	68db      	ldr	r3, [r3, #12]
10002058:	00db      	lsls	r3, r3, #3
1000205a:	08da      	lsrs	r2, r3, #3
1000205c:	687b      	ldr	r3, [r7, #4]
1000205e:	00d2      	lsls	r2, r2, #3
10002060:	08d2      	lsrs	r2, r2, #3
10002062:	6899      	ldr	r1, [r3, #8]
10002064:	0f49      	lsrs	r1, r1, #29
10002066:	0749      	lsls	r1, r1, #29
10002068:	430a      	orrs	r2, r1
1000206a:	609a      	str	r2, [r3, #8]
1000206c:	e035      	b.n	100020da <XMC_CAN_MO_Receive+0x186>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
1000206e:	687b      	ldr	r3, [r7, #4]
10002070:	79da      	ldrb	r2, [r3, #7]
10002072:	2120      	movs	r1, #32
10002074:	430a      	orrs	r2, r1
10002076:	71da      	strb	r2, [r3, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
10002078:	687b      	ldr	r3, [r7, #4]
1000207a:	681b      	ldr	r3, [r3, #0]
1000207c:	699b      	ldr	r3, [r3, #24]
1000207e:	00db      	lsls	r3, r3, #3
10002080:	08da      	lsrs	r2, r3, #3
10002082:	687b      	ldr	r3, [r7, #4]
10002084:	00d2      	lsls	r2, r2, #3
10002086:	08d2      	lsrs	r2, r2, #3
10002088:	6859      	ldr	r1, [r3, #4]
1000208a:	0f49      	lsrs	r1, r1, #29
1000208c:	0749      	lsls	r1, r1, #29
1000208e:	430a      	orrs	r2, r1
10002090:	605a      	str	r2, [r3, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
10002092:	687b      	ldr	r3, [r7, #4]
10002094:	681b      	ldr	r3, [r3, #0]
10002096:	68db      	ldr	r3, [r3, #12]
10002098:	00db      	lsls	r3, r3, #3
1000209a:	08da      	lsrs	r2, r3, #3
1000209c:	687b      	ldr	r3, [r7, #4]
1000209e:	00d2      	lsls	r2, r2, #3
100020a0:	08d2      	lsrs	r2, r2, #3
100020a2:	6899      	ldr	r1, [r3, #8]
100020a4:	0f49      	lsrs	r1, r1, #29
100020a6:	0749      	lsls	r1, r1, #29
100020a8:	430a      	orrs	r2, r1
100020aa:	609a      	str	r2, [r3, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
100020ac:	687b      	ldr	r3, [r7, #4]
100020ae:	681b      	ldr	r3, [r3, #0]
100020b0:	68da      	ldr	r2, [r3, #12]
100020b2:	2380      	movs	r3, #128	; 0x80
100020b4:	059b      	lsls	r3, r3, #22
100020b6:	4013      	ands	r3, r2
100020b8:	0f5b      	lsrs	r3, r3, #29
100020ba:	b2db      	uxtb	r3, r3
100020bc:	1c1a      	adds	r2, r3, #0
100020be:	2301      	movs	r3, #1
100020c0:	4013      	ands	r3, r2
100020c2:	b2da      	uxtb	r2, r3
100020c4:	687b      	ldr	r3, [r7, #4]
100020c6:	2101      	movs	r1, #1
100020c8:	400a      	ands	r2, r1
100020ca:	0150      	lsls	r0, r2, #5
100020cc:	7ada      	ldrb	r2, [r3, #11]
100020ce:	2120      	movs	r1, #32
100020d0:	438a      	bics	r2, r1
100020d2:	1c11      	adds	r1, r2, #0
100020d4:	1c02      	adds	r2, r0, #0
100020d6:	430a      	orrs	r2, r1
100020d8:	72da      	strb	r2, [r3, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
100020da:	687b      	ldr	r3, [r7, #4]
100020dc:	681b      	ldr	r3, [r3, #0]
100020de:	681a      	ldr	r2, [r3, #0]
100020e0:	23f0      	movs	r3, #240	; 0xf0
100020e2:	051b      	lsls	r3, r3, #20
100020e4:	4013      	ands	r3, r2
100020e6:	0e1b      	lsrs	r3, r3, #24
100020e8:	b2da      	uxtb	r2, r3
100020ea:	687b      	ldr	r3, [r7, #4]
100020ec:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
100020ee:	687b      	ldr	r3, [r7, #4]
100020f0:	681b      	ldr	r3, [r3, #0]
100020f2:	691a      	ldr	r2, [r3, #16]
100020f4:	687b      	ldr	r3, [r7, #4]
100020f6:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
100020f8:	687b      	ldr	r3, [r7, #4]
100020fa:	681b      	ldr	r3, [r3, #0]
100020fc:	695a      	ldr	r2, [r3, #20]
100020fe:	687b      	ldr	r3, [r7, #4]
10002100:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
10002102:	687b      	ldr	r3, [r7, #4]
10002104:	681b      	ldr	r3, [r3, #0]
10002106:	69db      	ldr	r3, [r3, #28]
10002108:	2204      	movs	r2, #4
1000210a:	4013      	ands	r3, r2
1000210c:	089a      	lsrs	r2, r3, #2
1000210e:	2316      	movs	r3, #22
10002110:	18fb      	adds	r3, r7, r3
10002112:	701a      	strb	r2, [r3, #0]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
10002114:	687b      	ldr	r3, [r7, #4]
10002116:	681b      	ldr	r3, [r3, #0]
10002118:	69db      	ldr	r3, [r3, #28]
1000211a:	2208      	movs	r2, #8
1000211c:	4013      	ands	r3, r2
1000211e:	08da      	lsrs	r2, r3, #3
10002120:	2315      	movs	r3, #21
10002122:	18fb      	adds	r3, r7, r3
10002124:	701a      	strb	r2, [r3, #0]
    }
    while ((rx_pnd != 0U) && (new_data != 0U));
10002126:	2316      	movs	r3, #22
10002128:	18fb      	adds	r3, r7, r3
1000212a:	781b      	ldrb	r3, [r3, #0]
1000212c:	2b00      	cmp	r3, #0
1000212e:	d005      	beq.n	1000213c <XMC_CAN_MO_Receive+0x1e8>
10002130:	2315      	movs	r3, #21
10002132:	18fb      	adds	r3, r7, r3
10002134:	781b      	ldrb	r3, [r3, #0]
10002136:	2b00      	cmp	r3, #0
10002138:	d000      	beq.n	1000213c <XMC_CAN_MO_Receive+0x1e8>
1000213a:	e73a      	b.n	10001fb2 <XMC_CAN_MO_Receive+0x5e>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
1000213c:	687b      	ldr	r3, [r7, #4]
1000213e:	2200      	movs	r2, #0
10002140:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
10002142:	2317      	movs	r3, #23
10002144:	18fb      	adds	r3, r7, r3
10002146:	2200      	movs	r2, #0
10002148:	701a      	strb	r2, [r3, #0]
  }
  return error;
1000214a:	2317      	movs	r3, #23
1000214c:	18fb      	adds	r3, r7, r3
1000214e:	781b      	ldrb	r3, [r3, #0]
}
10002150:	1c18      	adds	r0, r3, #0
10002152:	46bd      	mov	sp, r7
10002154:	b006      	add	sp, #24
10002156:	bd80      	pop	{r7, pc}
10002158:	1ffc0000 	.word	0x1ffc0000

1000215c <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
1000215c:	b580      	push	{r7, lr}
1000215e:	b082      	sub	sp, #8
10002160:	af00      	add	r7, sp, #0
10002162:	6078      	str	r0, [r7, #4]
10002164:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
10002166:	683a      	ldr	r2, [r7, #0]
10002168:	2380      	movs	r3, #128	; 0x80
1000216a:	03db      	lsls	r3, r3, #15
1000216c:	429a      	cmp	r2, r3
1000216e:	d006      	beq.n	1000217e <XMC_CAN_NODE_EnableEvent+0x22>
  {
    can_node->NCR |= (uint32_t)event;
10002170:	687b      	ldr	r3, [r7, #4]
10002172:	681a      	ldr	r2, [r3, #0]
10002174:	683b      	ldr	r3, [r7, #0]
10002176:	431a      	orrs	r2, r3
10002178:	687b      	ldr	r3, [r7, #4]
1000217a:	601a      	str	r2, [r3, #0]
1000217c:	e005      	b.n	1000218a <XMC_CAN_NODE_EnableEvent+0x2e>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
1000217e:	687b      	ldr	r3, [r7, #4]
10002180:	699a      	ldr	r2, [r3, #24]
10002182:	683b      	ldr	r3, [r7, #0]
10002184:	431a      	orrs	r2, r3
10002186:	687b      	ldr	r3, [r7, #4]
10002188:	619a      	str	r2, [r3, #24]
  }
}
1000218a:	46bd      	mov	sp, r7
1000218c:	b002      	add	sp, #8
1000218e:	bd80      	pop	{r7, pc}

10002190 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10002190:	b580      	push	{r7, lr}
10002192:	b082      	sub	sp, #8
10002194:	af00      	add	r7, sp, #0
10002196:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10002198:	687b      	ldr	r3, [r7, #4]
1000219a:	2280      	movs	r2, #128	; 0x80
1000219c:	0052      	lsls	r2, r2, #1
1000219e:	60da      	str	r2, [r3, #12]
}
100021a0:	46bd      	mov	sp, r7
100021a2:	b002      	add	sp, #8
100021a4:	bd80      	pop	{r7, pc}
100021a6:	46c0      	nop			; (mov r8, r8)

100021a8 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
100021a8:	b580      	push	{r7, lr}
100021aa:	b082      	sub	sp, #8
100021ac:	af00      	add	r7, sp, #0
100021ae:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
100021b0:	687b      	ldr	r3, [r7, #4]
100021b2:	4a09      	ldr	r2, [pc, #36]	; (100021d8 <XMC_CCU4_lUngateClock+0x30>)
100021b4:	4293      	cmp	r3, r2
100021b6:	d103      	bne.n	100021c0 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
100021b8:	2004      	movs	r0, #4
100021ba:	f7ff f9cf 	bl	1000155c <XMC_SCU_CLOCK_UngatePeripheralClock>
100021be:	e008      	b.n	100021d2 <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
100021c0:	687b      	ldr	r3, [r7, #4]
100021c2:	4a06      	ldr	r2, [pc, #24]	; (100021dc <XMC_CCU4_lUngateClock+0x34>)
100021c4:	4293      	cmp	r3, r2
100021c6:	d104      	bne.n	100021d2 <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
100021c8:	2380      	movs	r3, #128	; 0x80
100021ca:	029b      	lsls	r3, r3, #10
100021cc:	1c18      	adds	r0, r3, #0
100021ce:	f7ff f9c5 	bl	1000155c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
100021d2:	46bd      	mov	sp, r7
100021d4:	b002      	add	sp, #8
100021d6:	bd80      	pop	{r7, pc}
100021d8:	48040000 	.word	0x48040000
100021dc:	48044000 	.word	0x48044000

100021e0 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
100021e0:	b580      	push	{r7, lr}
100021e2:	b082      	sub	sp, #8
100021e4:	af00      	add	r7, sp, #0
100021e6:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
100021e8:	687b      	ldr	r3, [r7, #4]
100021ea:	1c18      	adds	r0, r3, #0
100021ec:	f7ff ffdc 	bl	100021a8 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
100021f0:	46bd      	mov	sp, r7
100021f2:	b002      	add	sp, #8
100021f4:	bd80      	pop	{r7, pc}
100021f6:	46c0      	nop			; (mov r8, r8)

100021f8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100021f8:	b580      	push	{r7, lr}
100021fa:	b084      	sub	sp, #16
100021fc:	af00      	add	r7, sp, #0
100021fe:	6078      	str	r0, [r7, #4]
10002200:	1c0a      	adds	r2, r1, #0
10002202:	1cfb      	adds	r3, r7, #3
10002204:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
10002206:	687b      	ldr	r3, [r7, #4]
10002208:	1c18      	adds	r0, r3, #0
1000220a:	f7ff ffe9 	bl	100021e0 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
1000220e:	687b      	ldr	r3, [r7, #4]
10002210:	1c18      	adds	r0, r3, #0
10002212:	f7ff ffbd 	bl	10002190 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
10002216:	687b      	ldr	r3, [r7, #4]
10002218:	681b      	ldr	r3, [r3, #0]
1000221a:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
1000221c:	68fb      	ldr	r3, [r7, #12]
1000221e:	4a07      	ldr	r2, [pc, #28]	; (1000223c <XMC_CCU4_Init+0x44>)
10002220:	4013      	ands	r3, r2
10002222:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10002224:	1cfb      	adds	r3, r7, #3
10002226:	781b      	ldrb	r3, [r3, #0]
10002228:	039b      	lsls	r3, r3, #14
1000222a:	68fa      	ldr	r2, [r7, #12]
1000222c:	4313      	orrs	r3, r2
1000222e:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
10002230:	687b      	ldr	r3, [r7, #4]
10002232:	68fa      	ldr	r2, [r7, #12]
10002234:	601a      	str	r2, [r3, #0]
}
10002236:	46bd      	mov	sp, r7
10002238:	b004      	add	sp, #16
1000223a:	bd80      	pop	{r7, pc}
1000223c:	ffff3fff 	.word	0xffff3fff

10002240 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10002240:	b580      	push	{r7, lr}
10002242:	b082      	sub	sp, #8
10002244:	af00      	add	r7, sp, #0
10002246:	6078      	str	r0, [r7, #4]
10002248:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
1000224a:	683b      	ldr	r3, [r7, #0]
1000224c:	681a      	ldr	r2, [r3, #0]
1000224e:	687b      	ldr	r3, [r7, #4]
10002250:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10002252:	683b      	ldr	r3, [r7, #0]
10002254:	795b      	ldrb	r3, [r3, #5]
10002256:	069b      	lsls	r3, r3, #26
10002258:	0fdb      	lsrs	r3, r3, #31
1000225a:	b2db      	uxtb	r3, r3
1000225c:	051a      	lsls	r2, r3, #20
1000225e:	687b      	ldr	r3, [r7, #4]
10002260:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10002262:	683b      	ldr	r3, [r7, #0]
10002264:	791b      	ldrb	r3, [r3, #4]
10002266:	071b      	lsls	r3, r3, #28
10002268:	0f1b      	lsrs	r3, r3, #28
1000226a:	b2db      	uxtb	r3, r3
1000226c:	1c1a      	adds	r2, r3, #0
1000226e:	687b      	ldr	r3, [r7, #4]
10002270:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10002272:	683b      	ldr	r3, [r7, #0]
10002274:	795b      	ldrb	r3, [r3, #5]
10002276:	071b      	lsls	r3, r3, #28
10002278:	0f1b      	lsrs	r3, r3, #28
1000227a:	b2db      	uxtb	r3, r3
1000227c:	1c1a      	adds	r2, r3, #0
1000227e:	687b      	ldr	r3, [r7, #4]
10002280:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
10002282:	683b      	ldr	r3, [r7, #0]
10002284:	795b      	ldrb	r3, [r3, #5]
10002286:	06db      	lsls	r3, r3, #27
10002288:	0fdb      	lsrs	r3, r3, #31
1000228a:	b2db      	uxtb	r3, r3
1000228c:	1c1a      	adds	r2, r3, #0
1000228e:	687b      	ldr	r3, [r7, #4]
10002290:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10002292:	683b      	ldr	r3, [r7, #0]
10002294:	791b      	ldrb	r3, [r3, #4]
10002296:	061b      	lsls	r3, r3, #24
10002298:	0f1b      	lsrs	r3, r3, #28
1000229a:	b2db      	uxtb	r3, r3
1000229c:	1c1a      	adds	r2, r3, #0
1000229e:	687b      	ldr	r3, [r7, #4]
100022a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
100022a2:	46bd      	mov	sp, r7
100022a4:	b002      	add	sp, #8
100022a6:	bd80      	pop	{r7, pc}

100022a8 <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
100022a8:	b580      	push	{r7, lr}
100022aa:	b082      	sub	sp, #8
100022ac:	af00      	add	r7, sp, #0
100022ae:	6078      	str	r0, [r7, #4]
100022b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
100022b2:	683b      	ldr	r3, [r7, #0]
100022b4:	681a      	ldr	r2, [r3, #0]
100022b6:	687b      	ldr	r3, [r7, #4]
100022b8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
100022ba:	683b      	ldr	r3, [r7, #0]
100022bc:	795b      	ldrb	r3, [r3, #5]
100022be:	07db      	lsls	r3, r3, #31
100022c0:	0fdb      	lsrs	r3, r3, #31
100022c2:	b2db      	uxtb	r3, r3
100022c4:	051a      	lsls	r2, r3, #20
100022c6:	687b      	ldr	r3, [r7, #4]
100022c8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
100022ca:	683b      	ldr	r3, [r7, #0]
100022cc:	791b      	ldrb	r3, [r3, #4]
100022ce:	071b      	lsls	r3, r3, #28
100022d0:	0f1b      	lsrs	r3, r3, #28
100022d2:	b2db      	uxtb	r3, r3
100022d4:	1c1a      	adds	r2, r3, #0
100022d6:	687b      	ldr	r3, [r7, #4]
100022d8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
100022da:	683b      	ldr	r3, [r7, #0]
100022dc:	791b      	ldrb	r3, [r3, #4]
100022de:	061b      	lsls	r3, r3, #24
100022e0:	0f1b      	lsrs	r3, r3, #28
100022e2:	b2db      	uxtb	r3, r3
100022e4:	1c1a      	adds	r2, r3, #0
100022e6:	687b      	ldr	r3, [r7, #4]
100022e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
100022ea:	46bd      	mov	sp, r7
100022ec:	b002      	add	sp, #8
100022ee:	bd80      	pop	{r7, pc}

100022f0 <XMC_CCU4_SLICE_Capture0Config>:
  slice->CMC = cmc;
}

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
100022f0:	b580      	push	{r7, lr}
100022f2:	b084      	sub	sp, #16
100022f4:	af00      	add	r7, sp, #0
100022f6:	6078      	str	r0, [r7, #4]
100022f8:	1c0a      	adds	r2, r1, #0
100022fa:	1cfb      	adds	r3, r7, #3
100022fc:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
100022fe:	687b      	ldr	r3, [r7, #4]
10002300:	685b      	ldr	r3, [r3, #4]
10002302:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
10002304:	68fb      	ldr	r3, [r7, #12]
10002306:	2230      	movs	r2, #48	; 0x30
10002308:	4393      	bics	r3, r2
1000230a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
1000230c:	1cfb      	adds	r3, r7, #3
1000230e:	781b      	ldrb	r3, [r3, #0]
10002310:	011b      	lsls	r3, r3, #4
10002312:	68fa      	ldr	r2, [r7, #12]
10002314:	4313      	orrs	r3, r2
10002316:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10002318:	687b      	ldr	r3, [r7, #4]
1000231a:	68fa      	ldr	r2, [r7, #12]
1000231c:	605a      	str	r2, [r3, #4]
}
1000231e:	46bd      	mov	sp, r7
10002320:	b004      	add	sp, #16
10002322:	bd80      	pop	{r7, pc}

10002324 <XMC_CCU4_SLICE_Capture1Config>:

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
10002324:	b580      	push	{r7, lr}
10002326:	b084      	sub	sp, #16
10002328:	af00      	add	r7, sp, #0
1000232a:	6078      	str	r0, [r7, #4]
1000232c:	1c0a      	adds	r2, r1, #0
1000232e:	1cfb      	adds	r3, r7, #3
10002330:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the gate function */
  cmc = slice->CMC;
10002332:	687b      	ldr	r3, [r7, #4]
10002334:	685b      	ldr	r3, [r3, #4]
10002336:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
10002338:	68fb      	ldr	r3, [r7, #12]
1000233a:	22c0      	movs	r2, #192	; 0xc0
1000233c:	4393      	bics	r3, r2
1000233e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
10002340:	1cfb      	adds	r3, r7, #3
10002342:	781b      	ldrb	r3, [r3, #0]
10002344:	019b      	lsls	r3, r3, #6
10002346:	68fa      	ldr	r2, [r7, #12]
10002348:	4313      	orrs	r3, r2
1000234a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
1000234c:	687b      	ldr	r3, [r7, #4]
1000234e:	68fa      	ldr	r2, [r7, #12]
10002350:	605a      	str	r2, [r3, #4]
}
10002352:	46bd      	mov	sp, r7
10002354:	b004      	add	sp, #16
10002356:	bd80      	pop	{r7, pc}

10002358 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
10002358:	b580      	push	{r7, lr}
1000235a:	b088      	sub	sp, #32
1000235c:	af00      	add	r7, sp, #0
1000235e:	60f8      	str	r0, [r7, #12]
10002360:	607a      	str	r2, [r7, #4]
10002362:	230b      	movs	r3, #11
10002364:	18fb      	adds	r3, r7, r3
10002366:	1c0a      	adds	r2, r1, #0
10002368:	701a      	strb	r2, [r3, #0]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) || \
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
1000236a:	231f      	movs	r3, #31
1000236c:	18fb      	adds	r3, r7, r3
1000236e:	220b      	movs	r2, #11
10002370:	18ba      	adds	r2, r7, r2
10002372:	7812      	ldrb	r2, [r2, #0]
10002374:	3a01      	subs	r2, #1
10002376:	701a      	strb	r2, [r3, #0]

#if defined(CCU4V3) /* Defined for XMC1400 devices only */
  ins = slice->INS2;
10002378:	68fb      	ldr	r3, [r7, #12]
1000237a:	681b      	ldr	r3, [r3, #0]
1000237c:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
1000237e:	2317      	movs	r3, #23
10002380:	18fb      	adds	r3, r7, r3
10002382:	221f      	movs	r2, #31
10002384:	18ba      	adds	r2, r7, r2
10002386:	7812      	ldrb	r2, [r2, #0]
10002388:	0092      	lsls	r2, r2, #2
1000238a:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
1000238c:	2317      	movs	r3, #23
1000238e:	18fb      	adds	r3, r7, r3
10002390:	781b      	ldrb	r3, [r3, #0]
10002392:	2203      	movs	r2, #3
10002394:	409a      	lsls	r2, r3
10002396:	1c13      	adds	r3, r2, #0
10002398:	43da      	mvns	r2, r3
1000239a:	69bb      	ldr	r3, [r7, #24]
1000239c:	4013      	ands	r3, r2
1000239e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
100023a0:	687b      	ldr	r3, [r7, #4]
100023a2:	785b      	ldrb	r3, [r3, #1]
100023a4:	1c1a      	adds	r2, r3, #0
100023a6:	2317      	movs	r3, #23
100023a8:	18fb      	adds	r3, r7, r3
100023aa:	781b      	ldrb	r3, [r3, #0]
100023ac:	409a      	lsls	r2, r3
100023ae:	1c13      	adds	r3, r2, #0
100023b0:	69ba      	ldr	r2, [r7, #24]
100023b2:	4313      	orrs	r3, r2
100023b4:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
100023b6:	231f      	movs	r3, #31
100023b8:	18fb      	adds	r3, r7, r3
100023ba:	781b      	ldrb	r3, [r3, #0]
100023bc:	009b      	lsls	r3, r3, #2
100023be:	b2da      	uxtb	r2, r3
100023c0:	2317      	movs	r3, #23
100023c2:	18fb      	adds	r3, r7, r3
100023c4:	3202      	adds	r2, #2
100023c6:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
100023c8:	2317      	movs	r3, #23
100023ca:	18fb      	adds	r3, r7, r3
100023cc:	781b      	ldrb	r3, [r3, #0]
100023ce:	2201      	movs	r2, #1
100023d0:	409a      	lsls	r2, r3
100023d2:	1c13      	adds	r3, r2, #0
100023d4:	43da      	mvns	r2, r3
100023d6:	69bb      	ldr	r3, [r7, #24]
100023d8:	4013      	ands	r3, r2
100023da:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
100023dc:	687b      	ldr	r3, [r7, #4]
100023de:	789b      	ldrb	r3, [r3, #2]
100023e0:	1c1a      	adds	r2, r3, #0
100023e2:	2317      	movs	r3, #23
100023e4:	18fb      	adds	r3, r7, r3
100023e6:	781b      	ldrb	r3, [r3, #0]
100023e8:	409a      	lsls	r2, r3
100023ea:	1c13      	adds	r3, r2, #0
100023ec:	69ba      	ldr	r2, [r7, #24]
100023ee:	4313      	orrs	r3, r2
100023f0:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
100023f2:	231f      	movs	r3, #31
100023f4:	18fb      	adds	r3, r7, r3
100023f6:	781b      	ldrb	r3, [r3, #0]
100023f8:	009b      	lsls	r3, r3, #2
100023fa:	b2da      	uxtb	r2, r3
100023fc:	2317      	movs	r3, #23
100023fe:	18fb      	adds	r3, r7, r3
10002400:	3210      	adds	r2, #16
10002402:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10002404:	2317      	movs	r3, #23
10002406:	18fb      	adds	r3, r7, r3
10002408:	781b      	ldrb	r3, [r3, #0]
1000240a:	2203      	movs	r2, #3
1000240c:	409a      	lsls	r2, r3
1000240e:	1c13      	adds	r3, r2, #0
10002410:	43da      	mvns	r2, r3
10002412:	69bb      	ldr	r3, [r7, #24]
10002414:	4013      	ands	r3, r2
10002416:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
10002418:	687b      	ldr	r3, [r7, #4]
1000241a:	78db      	ldrb	r3, [r3, #3]
1000241c:	1c1a      	adds	r2, r3, #0
1000241e:	2317      	movs	r3, #23
10002420:	18fb      	adds	r3, r7, r3
10002422:	781b      	ldrb	r3, [r3, #0]
10002424:	409a      	lsls	r2, r3
10002426:	1c13      	adds	r3, r2, #0
10002428:	69ba      	ldr	r2, [r7, #24]
1000242a:	4313      	orrs	r3, r2
1000242c:	61bb      	str	r3, [r7, #24]

  slice->INS2 = ins;
1000242e:	68fb      	ldr	r3, [r7, #12]
10002430:	69ba      	ldr	r2, [r7, #24]
10002432:	601a      	str	r2, [r3, #0]

  ins = slice->INS1;
10002434:	68fb      	ldr	r3, [r7, #12]
10002436:	22d8      	movs	r2, #216	; 0xd8
10002438:	589b      	ldr	r3, [r3, r2]
1000243a:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
1000243c:	2317      	movs	r3, #23
1000243e:	18fb      	adds	r3, r7, r3
10002440:	221f      	movs	r2, #31
10002442:	18ba      	adds	r2, r7, r2
10002444:	7812      	ldrb	r2, [r2, #0]
10002446:	00d2      	lsls	r2, r2, #3
10002448:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
1000244a:	2317      	movs	r3, #23
1000244c:	18fb      	adds	r3, r7, r3
1000244e:	781b      	ldrb	r3, [r3, #0]
10002450:	223f      	movs	r2, #63	; 0x3f
10002452:	409a      	lsls	r2, r3
10002454:	1c13      	adds	r3, r2, #0
10002456:	43da      	mvns	r2, r3
10002458:	69bb      	ldr	r3, [r7, #24]
1000245a:	4013      	ands	r3, r2
1000245c:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
1000245e:	687b      	ldr	r3, [r7, #4]
10002460:	781b      	ldrb	r3, [r3, #0]
10002462:	1c1a      	adds	r2, r3, #0
10002464:	2317      	movs	r3, #23
10002466:	18fb      	adds	r3, r7, r3
10002468:	781b      	ldrb	r3, [r3, #0]
1000246a:	409a      	lsls	r2, r3
1000246c:	1c13      	adds	r3, r2, #0
1000246e:	69ba      	ldr	r2, [r7, #24]
10002470:	4313      	orrs	r3, r2
10002472:	61bb      	str	r3, [r7, #24]

  slice->INS1 = ins;
10002474:	68fb      	ldr	r3, [r7, #12]
10002476:	21d8      	movs	r1, #216	; 0xd8
10002478:	69ba      	ldr	r2, [r7, #24]
1000247a:	505a      	str	r2, [r3, r1]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS = ins;
#endif
}
1000247c:	46bd      	mov	sp, r7
1000247e:	b008      	add	sp, #32
10002480:	bd80      	pop	{r7, pc}
10002482:	46c0      	nop			; (mov r8, r8)

10002484 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10002484:	b580      	push	{r7, lr}
10002486:	b086      	sub	sp, #24
10002488:	af00      	add	r7, sp, #0
1000248a:	6078      	str	r0, [r7, #4]
1000248c:	1c08      	adds	r0, r1, #0
1000248e:	1c11      	adds	r1, r2, #0
10002490:	1cfb      	adds	r3, r7, #3
10002492:	1c02      	adds	r2, r0, #0
10002494:	701a      	strb	r2, [r3, #0]
10002496:	1cbb      	adds	r3, r7, #2
10002498:	1c0a      	adds	r2, r1, #0
1000249a:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
1000249c:	1cfb      	adds	r3, r7, #3
1000249e:	781b      	ldrb	r3, [r3, #0]
100024a0:	2b0b      	cmp	r3, #11
100024a2:	d820      	bhi.n	100024e6 <XMC_CCU4_SLICE_SetInterruptNode+0x62>
100024a4:	009a      	lsls	r2, r3, #2
100024a6:	4b20      	ldr	r3, [pc, #128]	; (10002528 <XMC_CCU4_SLICE_SetInterruptNode+0xa4>)
100024a8:	18d3      	adds	r3, r2, r3
100024aa:	681b      	ldr	r3, [r3, #0]
100024ac:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
100024ae:	2303      	movs	r3, #3
100024b0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
100024b2:	2300      	movs	r3, #0
100024b4:	617b      	str	r3, [r7, #20]
      break;
100024b6:	e01b      	b.n	100024f0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
100024b8:	230c      	movs	r3, #12
100024ba:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
100024bc:	2302      	movs	r3, #2
100024be:	617b      	str	r3, [r7, #20]
      break;
100024c0:	e016      	b.n	100024f0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
100024c2:	23c0      	movs	r3, #192	; 0xc0
100024c4:	009b      	lsls	r3, r3, #2
100024c6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
100024c8:	2308      	movs	r3, #8
100024ca:	617b      	str	r3, [r7, #20]
      break;
100024cc:	e010      	b.n	100024f0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
100024ce:	23c0      	movs	r3, #192	; 0xc0
100024d0:	011b      	lsls	r3, r3, #4
100024d2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
100024d4:	230a      	movs	r3, #10
100024d6:	617b      	str	r3, [r7, #20]
      break;
100024d8:	e00a      	b.n	100024f0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
100024da:	23c0      	movs	r3, #192	; 0xc0
100024dc:	019b      	lsls	r3, r3, #6
100024de:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
100024e0:	230c      	movs	r3, #12
100024e2:	617b      	str	r3, [r7, #20]
      break;
100024e4:	e004      	b.n	100024f0 <XMC_CCU4_SLICE_SetInterruptNode+0x6c>
	  
	default:
	  mask = 0;
100024e6:	2300      	movs	r3, #0
100024e8:	613b      	str	r3, [r7, #16]
	  pos = 0;
100024ea:	2300      	movs	r3, #0
100024ec:	617b      	str	r3, [r7, #20]
	  break;
100024ee:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
100024f0:	693b      	ldr	r3, [r7, #16]
100024f2:	2b00      	cmp	r3, #0
100024f4:	d014      	beq.n	10002520 <XMC_CCU4_SLICE_SetInterruptNode+0x9c>
  {
    srs = slice->SRS;
100024f6:	687b      	ldr	r3, [r7, #4]
100024f8:	22a8      	movs	r2, #168	; 0xa8
100024fa:	589b      	ldr	r3, [r3, r2]
100024fc:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
100024fe:	693b      	ldr	r3, [r7, #16]
10002500:	43da      	mvns	r2, r3
10002502:	68fb      	ldr	r3, [r7, #12]
10002504:	4013      	ands	r3, r2
10002506:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
10002508:	1cbb      	adds	r3, r7, #2
1000250a:	781a      	ldrb	r2, [r3, #0]
1000250c:	697b      	ldr	r3, [r7, #20]
1000250e:	409a      	lsls	r2, r3
10002510:	1c13      	adds	r3, r2, #0
10002512:	68fa      	ldr	r2, [r7, #12]
10002514:	4313      	orrs	r3, r2
10002516:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
10002518:	687b      	ldr	r3, [r7, #4]
1000251a:	21a8      	movs	r1, #168	; 0xa8
1000251c:	68fa      	ldr	r2, [r7, #12]
1000251e:	505a      	str	r2, [r3, r1]
  }
}
10002520:	46bd      	mov	sp, r7
10002522:	b006      	add	sp, #24
10002524:	bd80      	pop	{r7, pc}
10002526:	46c0      	nop			; (mov r8, r8)
10002528:	1000c8b0 	.word	0x1000c8b0

1000252c <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
1000252c:	b580      	push	{r7, lr}
1000252e:	b084      	sub	sp, #16
10002530:	af00      	add	r7, sp, #0
10002532:	60f8      	str	r0, [r7, #12]
10002534:	607a      	str	r2, [r7, #4]
10002536:	230b      	movs	r3, #11
10002538:	18fb      	adds	r3, r7, r3
1000253a:	1c0a      	adds	r2, r1, #0
1000253c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
1000253e:	68fb      	ldr	r3, [r7, #12]
10002540:	1c18      	adds	r0, r3, #0
10002542:	f7fe fe21 	bl	10001188 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
10002546:	68fb      	ldr	r3, [r7, #12]
10002548:	681b      	ldr	r3, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
1000254a:	220b      	movs	r2, #11
1000254c:	18ba      	adds	r2, r7, r2
1000254e:	7812      	ldrb	r2, [r2, #0]
10002550:	0092      	lsls	r2, r2, #2
10002552:	1c11      	adds	r1, r2, #0
10002554:	220f      	movs	r2, #15
10002556:	408a      	lsls	r2, r1
10002558:	43d2      	mvns	r2, r2
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
1000255a:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
1000255c:	687b      	ldr	r3, [r7, #4]
1000255e:	681b      	ldr	r3, [r3, #0]
10002560:	210b      	movs	r1, #11
10002562:	1879      	adds	r1, r7, r1
10002564:	7809      	ldrb	r1, [r1, #0]
10002566:	0089      	lsls	r1, r1, #2
10002568:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
1000256a:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
1000256c:	68fb      	ldr	r3, [r7, #12]
1000256e:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));

  eru->EXICON[channel] = config->raw;
10002570:	230b      	movs	r3, #11
10002572:	18fb      	adds	r3, r7, r3
10002574:	781a      	ldrb	r2, [r3, #0]
10002576:	687b      	ldr	r3, [r7, #4]
10002578:	6859      	ldr	r1, [r3, #4]
1000257a:	68fb      	ldr	r3, [r7, #12]
1000257c:	3204      	adds	r2, #4
1000257e:	0092      	lsls	r2, r2, #2
10002580:	50d1      	str	r1, [r2, r3]
}
10002582:	46bd      	mov	sp, r7
10002584:	b004      	add	sp, #16
10002586:	bd80      	pop	{r7, pc}

10002588 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
10002588:	b590      	push	{r4, r7, lr}
1000258a:	b083      	sub	sp, #12
1000258c:	af00      	add	r7, sp, #0
1000258e:	6078      	str	r0, [r7, #4]
10002590:	1c08      	adds	r0, r1, #0
10002592:	1c11      	adds	r1, r2, #0
10002594:	1cfb      	adds	r3, r7, #3
10002596:	1c02      	adds	r2, r0, #0
10002598:	701a      	strb	r2, [r3, #0]
1000259a:	1cbb      	adds	r3, r7, #2
1000259c:	1c0a      	adds	r2, r1, #0
1000259e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
100025a0:	1cfb      	adds	r3, r7, #3
100025a2:	781a      	ldrb	r2, [r3, #0]
100025a4:	1cbb      	adds	r3, r7, #2
100025a6:	781b      	ldrb	r3, [r3, #0]
100025a8:	2103      	movs	r1, #3
100025aa:	400b      	ands	r3, r1
100025ac:	b2d9      	uxtb	r1, r3
100025ae:	687b      	ldr	r3, [r7, #4]
100025b0:	3208      	adds	r2, #8
100025b2:	0092      	lsls	r2, r2, #2
100025b4:	2003      	movs	r0, #3
100025b6:	4001      	ands	r1, r0
100025b8:	0109      	lsls	r1, r1, #4
100025ba:	58d0      	ldr	r0, [r2, r3]
100025bc:	2430      	movs	r4, #48	; 0x30
100025be:	43a0      	bics	r0, r4
100025c0:	4301      	orrs	r1, r0
100025c2:	50d1      	str	r1, [r2, r3]

}
100025c4:	46bd      	mov	sp, r7
100025c6:	b003      	add	sp, #12
100025c8:	bd90      	pop	{r4, r7, pc}
100025ca:	46c0      	nop			; (mov r8, r8)

100025cc <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
100025cc:	b580      	push	{r7, lr}
100025ce:	b082      	sub	sp, #8
100025d0:	af00      	add	r7, sp, #0
100025d2:	6078      	str	r0, [r7, #4]
100025d4:	1c08      	adds	r0, r1, #0
100025d6:	1c11      	adds	r1, r2, #0
100025d8:	1cfb      	adds	r3, r7, #3
100025da:	1c02      	adds	r2, r0, #0
100025dc:	701a      	strb	r2, [r3, #0]
100025de:	1cbb      	adds	r3, r7, #2
100025e0:	1c0a      	adds	r2, r1, #0
100025e2:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100025e4:	687b      	ldr	r3, [r7, #4]
100025e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100025e8:	1cfa      	adds	r2, r7, #3
100025ea:	7812      	ldrb	r2, [r2, #0]
100025ec:	0052      	lsls	r2, r2, #1
100025ee:	1c11      	adds	r1, r2, #0
100025f0:	2203      	movs	r2, #3
100025f2:	408a      	lsls	r2, r1
100025f4:	43d2      	mvns	r2, r2
100025f6:	401a      	ands	r2, r3
100025f8:	687b      	ldr	r3, [r7, #4]
100025fa:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100025fc:	687b      	ldr	r3, [r7, #4]
100025fe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10002600:	1cbb      	adds	r3, r7, #2
10002602:	781b      	ldrb	r3, [r3, #0]
10002604:	1cf9      	adds	r1, r7, #3
10002606:	7809      	ldrb	r1, [r1, #0]
10002608:	0049      	lsls	r1, r1, #1
1000260a:	408b      	lsls	r3, r1
1000260c:	431a      	orrs	r2, r3
1000260e:	687b      	ldr	r3, [r7, #4]
10002610:	675a      	str	r2, [r3, #116]	; 0x74
}
10002612:	46bd      	mov	sp, r7
10002614:	b002      	add	sp, #8
10002616:	bd80      	pop	{r7, pc}

10002618 <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
10002618:	b580      	push	{r7, lr}
1000261a:	b088      	sub	sp, #32
1000261c:	af00      	add	r7, sp, #0
1000261e:	6078      	str	r0, [r7, #4]
10002620:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10002622:	f3ef 8310 	mrs	r3, PRIMASK
10002626:	617b      	str	r3, [r7, #20]
  return(result);
10002628:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000262a:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000262c:	b672      	cpsid	i
  __disable_irq ();
  return status;
1000262e:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10002630:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10002632:	4b0c      	ldr	r3, [pc, #48]	; (10002664 <__aeabi_uidiv+0x4c>)
10002634:	2204      	movs	r2, #4
10002636:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10002638:	4b0a      	ldr	r3, [pc, #40]	; (10002664 <__aeabi_uidiv+0x4c>)
1000263a:	687a      	ldr	r2, [r7, #4]
1000263c:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
1000263e:	4b09      	ldr	r3, [pc, #36]	; (10002664 <__aeabi_uidiv+0x4c>)
10002640:	683a      	ldr	r2, [r7, #0]
10002642:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10002644:	4b07      	ldr	r3, [pc, #28]	; (10002664 <__aeabi_uidiv+0x4c>)
10002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002648:	61bb      	str	r3, [r7, #24]
1000264a:	69fb      	ldr	r3, [r7, #28]
1000264c:	60fb      	str	r3, [r7, #12]
1000264e:	68fb      	ldr	r3, [r7, #12]
10002650:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002652:	68bb      	ldr	r3, [r7, #8]
10002654:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
10002658:	69bb      	ldr	r3, [r7, #24]
}
1000265a:	1c18      	adds	r0, r3, #0
1000265c:	46bd      	mov	sp, r7
1000265e:	b008      	add	sp, #32
10002660:	bd80      	pop	{r7, pc}
10002662:	46c0      	nop			; (mov r8, r8)
10002664:	40030000 	.word	0x40030000

10002668 <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
10002668:	b580      	push	{r7, lr}
1000266a:	b088      	sub	sp, #32
1000266c:	af00      	add	r7, sp, #0
1000266e:	6078      	str	r0, [r7, #4]
10002670:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10002672:	f3ef 8310 	mrs	r3, PRIMASK
10002676:	617b      	str	r3, [r7, #20]
  return(result);
10002678:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000267a:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000267c:	b672      	cpsid	i
  __disable_irq ();
  return status;
1000267e:	693b      	ldr	r3, [r7, #16]
/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10002680:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
10002682:	4b0c      	ldr	r3, [pc, #48]	; (100026b4 <__aeabi_idiv+0x4c>)
10002684:	2200      	movs	r2, #0
10002686:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10002688:	4b0a      	ldr	r3, [pc, #40]	; (100026b4 <__aeabi_idiv+0x4c>)
1000268a:	687a      	ldr	r2, [r7, #4]
1000268c:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
1000268e:	4b09      	ldr	r3, [pc, #36]	; (100026b4 <__aeabi_idiv+0x4c>)
10002690:	683a      	ldr	r2, [r7, #0]
10002692:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10002694:	4b07      	ldr	r3, [pc, #28]	; (100026b4 <__aeabi_idiv+0x4c>)
10002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002698:	61bb      	str	r3, [r7, #24]
1000269a:	69fb      	ldr	r3, [r7, #28]
1000269c:	60fb      	str	r3, [r7, #12]
1000269e:	68fb      	ldr	r3, [r7, #12]
100026a0:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100026a2:	68bb      	ldr	r3, [r7, #8]
100026a4:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
100026a8:	69bb      	ldr	r3, [r7, #24]
}
100026aa:	1c18      	adds	r0, r3, #0
100026ac:	46bd      	mov	sp, r7
100026ae:	b008      	add	sp, #32
100026b0:	bd80      	pop	{r7, pc}
100026b2:	46c0      	nop			; (mov r8, r8)
100026b4:	40030000 	.word	0x40030000

100026b8 <__aeabi_uidivmod>:

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
100026b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100026ba:	b08d      	sub	sp, #52	; 0x34
100026bc:	af00      	add	r7, sp, #0
100026be:	6078      	str	r0, [r7, #4]
100026c0:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100026c2:	f3ef 8210 	mrs	r2, PRIMASK
100026c6:	617a      	str	r2, [r7, #20]
  return(result);
100026c8:	697a      	ldr	r2, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
100026ca:	613a      	str	r2, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100026cc:	b672      	cpsid	i
  __disable_irq ();
  return status;
100026ce:	693a      	ldr	r2, [r7, #16]
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
100026d0:	62fa      	str	r2, [r7, #44]	; 0x2c

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100026d2:	4a15      	ldr	r2, [pc, #84]	; (10002728 <__aeabi_uidivmod+0x70>)
100026d4:	2104      	movs	r1, #4
100026d6:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
100026d8:	4a13      	ldr	r2, [pc, #76]	; (10002728 <__aeabi_uidivmod+0x70>)
100026da:	6879      	ldr	r1, [r7, #4]
100026dc:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
100026de:	4a12      	ldr	r2, [pc, #72]	; (10002728 <__aeabi_uidivmod+0x70>)
100026e0:	6839      	ldr	r1, [r7, #0]
100026e2:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;
100026e4:	4a10      	ldr	r2, [pc, #64]	; (10002728 <__aeabi_uidivmod+0x70>)
100026e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
100026e8:	623a      	str	r2, [r7, #32]
100026ea:	2200      	movs	r2, #0
100026ec:	627a      	str	r2, [r7, #36]	; 0x24
  quot = (uint64_t)MATH->QUOT;
100026ee:	4a0e      	ldr	r2, [pc, #56]	; (10002728 <__aeabi_uidivmod+0x70>)
100026f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
100026f2:	61ba      	str	r2, [r7, #24]
100026f4:	2200      	movs	r2, #0
100026f6:	61fa      	str	r2, [r7, #28]
100026f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100026fa:	60fa      	str	r2, [r7, #12]
100026fc:	68fa      	ldr	r2, [r7, #12]
100026fe:	60ba      	str	r2, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002700:	68ba      	ldr	r2, [r7, #8]
10002702:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((remainder << 32) | quot);
10002706:	6a3a      	ldr	r2, [r7, #32]
10002708:	0014      	movs	r4, r2
1000270a:	2200      	movs	r2, #0
1000270c:	1c13      	adds	r3, r2, #0
1000270e:	69ba      	ldr	r2, [r7, #24]
10002710:	431a      	orrs	r2, r3
10002712:	1c15      	adds	r5, r2, #0
10002714:	69fa      	ldr	r2, [r7, #28]
10002716:	4322      	orrs	r2, r4
10002718:	1c16      	adds	r6, r2, #0
1000271a:	1c2b      	adds	r3, r5, #0
1000271c:	1c34      	adds	r4, r6, #0
}
1000271e:	1c18      	adds	r0, r3, #0
10002720:	1c21      	adds	r1, r4, #0
10002722:	46bd      	mov	sp, r7
10002724:	b00d      	add	sp, #52	; 0x34
10002726:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002728:	40030000 	.word	0x40030000

1000272c <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
1000272c:	b580      	push	{r7, lr}
1000272e:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
10002730:	2380      	movs	r3, #128	; 0x80
10002732:	009b      	lsls	r3, r3, #2
10002734:	1c18      	adds	r0, r3, #0
10002736:	f7fe ff11 	bl	1000155c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
#endif
}
1000273a:	46bd      	mov	sp, r7
1000273c:	bd80      	pop	{r7, pc}
1000273e:	46c0      	nop			; (mov r8, r8)

10002740 <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
10002740:	b580      	push	{r7, lr}
10002742:	b082      	sub	sp, #8
10002744:	af00      	add	r7, sp, #0
10002746:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
10002748:	f7ff fff0 	bl	1000272c <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
1000274c:	4a07      	ldr	r2, [pc, #28]	; (1000276c <XMC_WDT_Init+0x2c>)
1000274e:	687b      	ldr	r3, [r7, #4]
10002750:	689b      	ldr	r3, [r3, #8]
10002752:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
10002754:	4a05      	ldr	r2, [pc, #20]	; (1000276c <XMC_WDT_Init+0x2c>)
10002756:	687b      	ldr	r3, [r7, #4]
10002758:	685b      	ldr	r3, [r3, #4]
1000275a:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
1000275c:	4a03      	ldr	r2, [pc, #12]	; (1000276c <XMC_WDT_Init+0x2c>)
1000275e:	687b      	ldr	r3, [r7, #4]
10002760:	681b      	ldr	r3, [r3, #0]
10002762:	6153      	str	r3, [r2, #20]
}
10002764:	46bd      	mov	sp, r7
10002766:	b002      	add	sp, #8
10002768:	bd80      	pop	{r7, pc}
1000276a:	46c0      	nop			; (mov r8, r8)
1000276c:	40020000 	.word	0x40020000

10002770 <_init>:
  }
}

/* Init */
void _init(void)
{}
10002770:	b580      	push	{r7, lr}
10002772:	af00      	add	r7, sp, #0
10002774:	46bd      	mov	sp, r7
10002776:	bd80      	pop	{r7, pc}

10002778 <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
10002778:	b590      	push	{r4, r7, lr}
1000277a:	b085      	sub	sp, #20
1000277c:	af00      	add	r7, sp, #0
1000277e:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
10002780:	230f      	movs	r3, #15
10002782:	18fb      	adds	r3, r7, r3
10002784:	2200      	movs	r2, #0
10002786:	701a      	strb	r2, [r3, #0]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
10002788:	687b      	ldr	r3, [r7, #4]
1000278a:	7b1b      	ldrb	r3, [r3, #12]
1000278c:	2201      	movs	r2, #1
1000278e:	4053      	eors	r3, r2
10002790:	b2db      	uxtb	r3, r3
10002792:	2b00      	cmp	r3, #0
10002794:	d014      	beq.n	100027c0 <WATCHDOG_Init+0x48>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
10002796:	230f      	movs	r3, #15
10002798:	18fc      	adds	r4, r7, r3
1000279a:	687b      	ldr	r3, [r7, #4]
1000279c:	1c18      	adds	r0, r3, #0
1000279e:	f000 f817 	bl	100027d0 <WATCHDOG_lPrewarning_Configure>
100027a2:	1c03      	adds	r3, r0, #0
100027a4:	7023      	strb	r3, [r4, #0]
      if(WATCHDOG_STATUS_FAILURE != status)
100027a6:	230f      	movs	r3, #15
100027a8:	18fb      	adds	r3, r7, r3
100027aa:	781b      	ldrb	r3, [r3, #0]
100027ac:	2b01      	cmp	r3, #1
100027ae:	d007      	beq.n	100027c0 <WATCHDOG_Init+0x48>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
100027b0:	687b      	ldr	r3, [r7, #4]
100027b2:	681b      	ldr	r3, [r3, #0]
100027b4:	1c18      	adds	r0, r3, #0
100027b6:	f7ff ffc3 	bl	10002740 <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
100027ba:	687b      	ldr	r3, [r7, #4]
100027bc:	2201      	movs	r2, #1
100027be:	731a      	strb	r2, [r3, #12]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
100027c0:	230f      	movs	r3, #15
100027c2:	18fb      	adds	r3, r7, r3
100027c4:	781b      	ldrb	r3, [r3, #0]
}
100027c6:	1c18      	adds	r0, r3, #0
100027c8:	46bd      	mov	sp, r7
100027ca:	b005      	add	sp, #20
100027cc:	bd90      	pop	{r4, r7, pc}
100027ce:	46c0      	nop			; (mov r8, r8)

100027d0 <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
100027d0:	b590      	push	{r4, r7, lr}
100027d2:	b085      	sub	sp, #20
100027d4:	af00      	add	r7, sp, #0
100027d6:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
100027d8:	230f      	movs	r3, #15
100027da:	18fb      	adds	r3, r7, r3
100027dc:	2200      	movs	r2, #0
100027de:	701a      	strb	r2, [r3, #0]
  /* Normal interrupt generation */
#if (WATCHDOG_EVENT_VIA_SCU == 1U)
  #if(UC_FAMILY == XMC4)
    status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC4_Init(handle->scu_global_handler);
  #else
    status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC1_Init(handle->scu_global_handler);
100027e0:	687b      	ldr	r3, [r7, #4]
100027e2:	685b      	ldr	r3, [r3, #4]
100027e4:	220f      	movs	r2, #15
100027e6:	18bc      	adds	r4, r7, r2
100027e8:	1c18      	adds	r0, r3, #0
100027ea:	f000 fcef 	bl	100031cc <GLOBAL_SCU_XMC1_Init>
100027ee:	1c03      	adds	r3, r0, #0
100027f0:	7023      	strb	r3, [r4, #0]
  #endif
    if ((handle->callback_func_ptr != NULL) &&  (status != WATCHDOG_STATUS_FAILURE))
100027f2:	687b      	ldr	r3, [r7, #4]
100027f4:	689b      	ldr	r3, [r3, #8]
100027f6:	2b00      	cmp	r3, #0
100027f8:	d014      	beq.n	10002824 <WATCHDOG_lPrewarning_Configure+0x54>
100027fa:	230f      	movs	r3, #15
100027fc:	18fb      	adds	r3, r7, r3
100027fe:	781b      	ldrb	r3, [r3, #0]
10002800:	2b01      	cmp	r3, #1
10002802:	d00f      	beq.n	10002824 <WATCHDOG_lPrewarning_Configure+0x54>
    {
      /* Enable the pre-warn event */
      XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
10002804:	2001      	movs	r0, #1
10002806:	2100      	movs	r1, #0
10002808:	f7fe fd84 	bl	10001314 <XMC_SCU_INTERRUPT_EnableEvent>
      /* Register User defined Event Handler function */
	  #if(UC_FAMILY == XMC4)
      status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(GLOBAL_SCU_XMC4_EVENT_WDT_WARNING,
    		                                                       handle->callback_func_ptr);
	  #else
      status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback(GLOBAL_SCU_XMC1_EVENT_WDT_WARNING,
1000280c:	687b      	ldr	r3, [r7, #4]
1000280e:	689b      	ldr	r3, [r3, #8]
10002810:	220f      	movs	r2, #15
10002812:	18bc      	adds	r4, r7, r2
10002814:	2001      	movs	r0, #1
10002816:	2100      	movs	r1, #0
10002818:	1c1a      	adds	r2, r3, #0
1000281a:	f000 fd4b 	bl	100032b4 <GLOBAL_SCU_XMC1_RegisterCallback>
1000281e:	1c03      	adds	r3, r0, #0
10002820:	7023      	strb	r3, [r4, #0]
10002822:	e003      	b.n	1000282c <WATCHDOG_lPrewarning_Configure+0x5c>
    		                                                       handle->callback_func_ptr);
	  #endif
    }
    else
    {
      status = WATCHDOG_STATUS_FAILURE;
10002824:	230f      	movs	r3, #15
10002826:	18fb      	adds	r3, r7, r3
10002828:	2201      	movs	r2, #1
1000282a:	701a      	strb	r2, [r3, #0]
#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
#endif

  return (status);
1000282c:	230f      	movs	r3, #15
1000282e:	18fb      	adds	r3, r7, r3
10002830:	781b      	ldrb	r3, [r3, #0]
}
10002832:	1c18      	adds	r0, r3, #0
10002834:	46bd      	mov	sp, r7
10002836:	b005      	add	sp, #20
10002838:	bd90      	pop	{r4, r7, pc}
1000283a:	46c0      	nop			; (mov r8, r8)

1000283c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
1000283c:	b580      	push	{r7, lr}
1000283e:	b082      	sub	sp, #8
10002840:	af00      	add	r7, sp, #0
10002842:	6078      	str	r0, [r7, #4]
10002844:	1c0a      	adds	r2, r1, #0
10002846:	1cfb      	adds	r3, r7, #3
10002848:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
1000284a:	1cfb      	adds	r3, r7, #3
1000284c:	781b      	ldrb	r3, [r3, #0]
1000284e:	2201      	movs	r2, #1
10002850:	409a      	lsls	r2, r3
10002852:	687b      	ldr	r3, [r7, #4]
10002854:	60da      	str	r2, [r3, #12]
}
10002856:	46bd      	mov	sp, r7
10002858:	b002      	add	sp, #8
1000285a:	bd80      	pop	{r7, pc}

1000285c <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
1000285c:	b580      	push	{r7, lr}
1000285e:	b082      	sub	sp, #8
10002860:	af00      	add	r7, sp, #0
10002862:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10002864:	687b      	ldr	r3, [r7, #4]
10002866:	2201      	movs	r2, #1
10002868:	60da      	str	r2, [r3, #12]
}
1000286a:	46bd      	mov	sp, r7
1000286c:	b002      	add	sp, #8
1000286e:	bd80      	pop	{r7, pc}

10002870 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
10002870:	b580      	push	{r7, lr}
10002872:	b082      	sub	sp, #8
10002874:	af00      	add	r7, sp, #0
10002876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
10002878:	687b      	ldr	r3, [r7, #4]
1000287a:	2202      	movs	r2, #2
1000287c:	611a      	str	r2, [r3, #16]
}
1000287e:	46bd      	mov	sp, r7
10002880:	b002      	add	sp, #8
10002882:	bd80      	pop	{r7, pc}

10002884 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10002884:	b580      	push	{r7, lr}
10002886:	b082      	sub	sp, #8
10002888:	af00      	add	r7, sp, #0
1000288a:	6078      	str	r0, [r7, #4]
1000288c:	1c0a      	adds	r2, r1, #0
1000288e:	1cbb      	adds	r3, r7, #2
10002890:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10002892:	1cbb      	adds	r3, r7, #2
10002894:	881a      	ldrh	r2, [r3, #0]
10002896:	687b      	ldr	r3, [r7, #4]
10002898:	635a      	str	r2, [r3, #52]	; 0x34
}
1000289a:	46bd      	mov	sp, r7
1000289c:	b002      	add	sp, #8
1000289e:	bd80      	pop	{r7, pc}

100028a0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
100028a0:	b580      	push	{r7, lr}
100028a2:	b082      	sub	sp, #8
100028a4:	af00      	add	r7, sp, #0
100028a6:	6078      	str	r0, [r7, #4]
100028a8:	1c0a      	adds	r2, r1, #0
100028aa:	1cbb      	adds	r3, r7, #2
100028ac:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
100028ae:	1cbb      	adds	r3, r7, #2
100028b0:	881a      	ldrh	r2, [r3, #0]
100028b2:	687b      	ldr	r3, [r7, #4]
100028b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
100028b6:	46bd      	mov	sp, r7
100028b8:	b002      	add	sp, #8
100028ba:	bd80      	pop	{r7, pc}

100028bc <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
100028bc:	b580      	push	{r7, lr}
100028be:	b082      	sub	sp, #8
100028c0:	af00      	add	r7, sp, #0
100028c2:	6078      	str	r0, [r7, #4]
100028c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
100028c6:	687b      	ldr	r3, [r7, #4]
100028c8:	683a      	ldr	r2, [r7, #0]
100028ca:	611a      	str	r2, [r3, #16]
}
100028cc:	46bd      	mov	sp, r7
100028ce:	b002      	add	sp, #8
100028d0:	bd80      	pop	{r7, pc}
100028d2:	46c0      	nop			; (mov r8, r8)

100028d4 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
100028d4:	b580      	push	{r7, lr}
100028d6:	b082      	sub	sp, #8
100028d8:	af00      	add	r7, sp, #0
100028da:	6078      	str	r0, [r7, #4]
100028dc:	1c0a      	adds	r2, r1, #0
100028de:	1cfb      	adds	r3, r7, #3
100028e0:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
100028e2:	687b      	ldr	r3, [r7, #4]
100028e4:	22a4      	movs	r2, #164	; 0xa4
100028e6:	589a      	ldr	r2, [r3, r2]
100028e8:	1cfb      	adds	r3, r7, #3
100028ea:	781b      	ldrb	r3, [r3, #0]
100028ec:	2101      	movs	r1, #1
100028ee:	4099      	lsls	r1, r3
100028f0:	1c0b      	adds	r3, r1, #0
100028f2:	431a      	orrs	r2, r3
100028f4:	687b      	ldr	r3, [r7, #4]
100028f6:	21a4      	movs	r1, #164	; 0xa4
100028f8:	505a      	str	r2, [r3, r1]
}
100028fa:	46bd      	mov	sp, r7
100028fc:	b002      	add	sp, #8
100028fe:	bd80      	pop	{r7, pc}

10002900 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
10002900:	b590      	push	{r4, r7, lr}
10002902:	b085      	sub	sp, #20
10002904:	af00      	add	r7, sp, #0
10002906:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
10002908:	230f      	movs	r3, #15
1000290a:	18fb      	adds	r3, r7, r3
1000290c:	2200      	movs	r2, #0
1000290e:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
10002910:	687b      	ldr	r3, [r7, #4]
10002912:	2226      	movs	r2, #38	; 0x26
10002914:	5c9b      	ldrb	r3, [r3, r2]
10002916:	2201      	movs	r2, #1
10002918:	4053      	eors	r3, r2
1000291a:	b2db      	uxtb	r3, r3
1000291c:	2b00      	cmp	r3, #0
1000291e:	d00c      	beq.n	1000293a <TIMER_Init+0x3a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10002920:	687b      	ldr	r3, [r7, #4]
10002922:	2221      	movs	r2, #33	; 0x21
10002924:	5c9b      	ldrb	r3, [r3, r2]
10002926:	2b00      	cmp	r3, #0
10002928:	d107      	bne.n	1000293a <TIMER_Init+0x3a>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
1000292a:	230f      	movs	r3, #15
1000292c:	18fc      	adds	r4, r7, r3
1000292e:	687b      	ldr	r3, [r7, #4]
10002930:	1c18      	adds	r0, r3, #0
10002932:	f000 f809 	bl	10002948 <TIMER_CCU4_lInit>
10002936:	1c03      	adds	r3, r0, #0
10002938:	7023      	strb	r3, [r4, #0]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
1000293a:	230f      	movs	r3, #15
1000293c:	18fb      	adds	r3, r7, r3
1000293e:	781b      	ldrb	r3, [r3, #0]
}
10002940:	1c18      	adds	r0, r3, #0
10002942:	46bd      	mov	sp, r7
10002944:	b005      	add	sp, #20
10002946:	bd90      	pop	{r4, r7, pc}

10002948 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
10002948:	b590      	push	{r4, r7, lr}
1000294a:	b085      	sub	sp, #20
1000294c:	af00      	add	r7, sp, #0
1000294e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
10002950:	687b      	ldr	r3, [r7, #4]
10002952:	691b      	ldr	r3, [r3, #16]
10002954:	220f      	movs	r2, #15
10002956:	18bc      	adds	r4, r7, r2
10002958:	1c18      	adds	r0, r3, #0
1000295a:	f000 fccf 	bl	100032fc <GLOBAL_CCU4_Init>
1000295e:	1c03      	adds	r3, r0, #0
10002960:	7023      	strb	r3, [r4, #0]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
10002962:	687b      	ldr	r3, [r7, #4]
10002964:	691b      	ldr	r3, [r3, #16]
10002966:	689a      	ldr	r2, [r3, #8]
10002968:	687b      	ldr	r3, [r7, #4]
1000296a:	7e1b      	ldrb	r3, [r3, #24]
1000296c:	1c10      	adds	r0, r2, #0
1000296e:	1c19      	adds	r1, r3, #0
10002970:	f7ff ff64 	bl	1000283c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
10002974:	687b      	ldr	r3, [r7, #4]
10002976:	695a      	ldr	r2, [r3, #20]
10002978:	687b      	ldr	r3, [r7, #4]
1000297a:	69db      	ldr	r3, [r3, #28]
1000297c:	1c10      	adds	r0, r2, #0
1000297e:	1c19      	adds	r1, r3, #0
10002980:	f7ff fc5e 	bl	10002240 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
10002984:	687b      	ldr	r3, [r7, #4]
10002986:	1c18      	adds	r0, r3, #0
10002988:	f000 f830 	bl	100029ec <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
1000298c:	687b      	ldr	r3, [r7, #4]
1000298e:	2225      	movs	r2, #37	; 0x25
10002990:	5c9b      	ldrb	r3, [r3, r2]
10002992:	2b00      	cmp	r3, #0
10002994:	d00f      	beq.n	100029b6 <TIMER_CCU4_lInit+0x6e>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10002996:	687b      	ldr	r3, [r7, #4]
10002998:	6959      	ldr	r1, [r3, #20]
1000299a:	687b      	ldr	r3, [r7, #4]
1000299c:	2220      	movs	r2, #32
1000299e:	5c9b      	ldrb	r3, [r3, r2]
100029a0:	1c08      	adds	r0, r1, #0
100029a2:	2100      	movs	r1, #0
100029a4:	1c1a      	adds	r2, r3, #0
100029a6:	f7ff fd6d 	bl	10002484 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100029aa:	687b      	ldr	r3, [r7, #4]
100029ac:	695b      	ldr	r3, [r3, #20]
100029ae:	1c18      	adds	r0, r3, #0
100029b0:	2100      	movs	r1, #0
100029b2:	f7ff ff8f 	bl	100028d4 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
100029b6:	687b      	ldr	r3, [r7, #4]
100029b8:	695b      	ldr	r3, [r3, #20]
100029ba:	1c18      	adds	r0, r3, #0
100029bc:	f7ff ff58 	bl	10002870 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
100029c0:	687b      	ldr	r3, [r7, #4]
100029c2:	2226      	movs	r2, #38	; 0x26
100029c4:	2101      	movs	r1, #1
100029c6:	5499      	strb	r1, [r3, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
100029c8:	687b      	ldr	r3, [r7, #4]
100029ca:	2224      	movs	r2, #36	; 0x24
100029cc:	5c9b      	ldrb	r3, [r3, r2]
100029ce:	2b00      	cmp	r3, #0
100029d0:	d004      	beq.n	100029dc <TIMER_CCU4_lInit+0x94>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
100029d2:	687b      	ldr	r3, [r7, #4]
100029d4:	695b      	ldr	r3, [r3, #20]
100029d6:	1c18      	adds	r0, r3, #0
100029d8:	f7ff ff40 	bl	1000285c <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
100029dc:	230f      	movs	r3, #15
100029de:	18fb      	adds	r3, r7, r3
100029e0:	781b      	ldrb	r3, [r3, #0]
}
100029e2:	1c18      	adds	r0, r3, #0
100029e4:	46bd      	mov	sp, r7
100029e6:	b005      	add	sp, #20
100029e8:	bd90      	pop	{r4, r7, pc}
100029ea:	46c0      	nop			; (mov r8, r8)

100029ec <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
100029ec:	b580      	push	{r7, lr}
100029ee:	b082      	sub	sp, #8
100029f0:	af00      	add	r7, sp, #0
100029f2:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
100029f4:	687b      	ldr	r3, [r7, #4]
100029f6:	695a      	ldr	r2, [r3, #20]
100029f8:	687b      	ldr	r3, [r7, #4]
100029fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
100029fc:	1c10      	adds	r0, r2, #0
100029fe:	1c19      	adds	r1, r3, #0
10002a00:	f7ff ff40 	bl	10002884 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
10002a04:	687b      	ldr	r3, [r7, #4]
10002a06:	695b      	ldr	r3, [r3, #20]
10002a08:	1c18      	adds	r0, r3, #0
10002a0a:	2100      	movs	r1, #0
10002a0c:	f7ff ff48 	bl	100028a0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
10002a10:	687b      	ldr	r3, [r7, #4]
10002a12:	691b      	ldr	r3, [r3, #16]
10002a14:	689a      	ldr	r2, [r3, #8]
10002a16:	687b      	ldr	r3, [r7, #4]
10002a18:	68db      	ldr	r3, [r3, #12]
10002a1a:	1c10      	adds	r0, r2, #0
10002a1c:	1c19      	adds	r1, r3, #0
10002a1e:	f7ff ff4d 	bl	100028bc <XMC_CCU4_EnableShadowTransfer>
}
10002a22:	46bd      	mov	sp, r7
10002a24:	b002      	add	sp, #8
10002a26:	bd80      	pop	{r7, pc}

10002a28 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10002a28:	b580      	push	{r7, lr}
10002a2a:	b082      	sub	sp, #8
10002a2c:	af00      	add	r7, sp, #0
10002a2e:	6078      	str	r0, [r7, #4]
10002a30:	1c0a      	adds	r2, r1, #0
10002a32:	1cfb      	adds	r3, r7, #3
10002a34:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
10002a36:	1cfb      	adds	r3, r7, #3
10002a38:	781b      	ldrb	r3, [r3, #0]
10002a3a:	2201      	movs	r2, #1
10002a3c:	409a      	lsls	r2, r3
10002a3e:	687b      	ldr	r3, [r7, #4]
10002a40:	60da      	str	r2, [r3, #12]
}
10002a42:	46bd      	mov	sp, r7
10002a44:	b002      	add	sp, #8
10002a46:	bd80      	pop	{r7, pc}

10002a48 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10002a48:	b580      	push	{r7, lr}
10002a4a:	b082      	sub	sp, #8
10002a4c:	af00      	add	r7, sp, #0
10002a4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10002a50:	687b      	ldr	r3, [r7, #4]
10002a52:	2201      	movs	r2, #1
10002a54:	60da      	str	r2, [r3, #12]
}
10002a56:	46bd      	mov	sp, r7
10002a58:	b002      	add	sp, #8
10002a5a:	bd80      	pop	{r7, pc}

10002a5c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10002a5c:	b580      	push	{r7, lr}
10002a5e:	b082      	sub	sp, #8
10002a60:	af00      	add	r7, sp, #0
10002a62:	6078      	str	r0, [r7, #4]
10002a64:	1c0a      	adds	r2, r1, #0
10002a66:	1cbb      	adds	r3, r7, #2
10002a68:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10002a6a:	1cbb      	adds	r3, r7, #2
10002a6c:	881a      	ldrh	r2, [r3, #0]
10002a6e:	687b      	ldr	r3, [r7, #4]
10002a70:	635a      	str	r2, [r3, #52]	; 0x34
}
10002a72:	46bd      	mov	sp, r7
10002a74:	b002      	add	sp, #8
10002a76:	bd80      	pop	{r7, pc}

10002a78 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10002a78:	b580      	push	{r7, lr}
10002a7a:	b082      	sub	sp, #8
10002a7c:	af00      	add	r7, sp, #0
10002a7e:	6078      	str	r0, [r7, #4]
10002a80:	1c0a      	adds	r2, r1, #0
10002a82:	1cbb      	adds	r3, r7, #2
10002a84:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10002a86:	1cbb      	adds	r3, r7, #2
10002a88:	881a      	ldrh	r2, [r3, #0]
10002a8a:	687b      	ldr	r3, [r7, #4]
10002a8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002a8e:	46bd      	mov	sp, r7
10002a90:	b002      	add	sp, #8
10002a92:	bd80      	pop	{r7, pc}

10002a94 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002a94:	b580      	push	{r7, lr}
10002a96:	b082      	sub	sp, #8
10002a98:	af00      	add	r7, sp, #0
10002a9a:	6078      	str	r0, [r7, #4]
10002a9c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10002a9e:	687b      	ldr	r3, [r7, #4]
10002aa0:	683a      	ldr	r2, [r7, #0]
10002aa2:	611a      	str	r2, [r3, #16]
}
10002aa4:	46bd      	mov	sp, r7
10002aa6:	b002      	add	sp, #8
10002aa8:	bd80      	pop	{r7, pc}
10002aaa:	46c0      	nop			; (mov r8, r8)

10002aac <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10002aac:	b580      	push	{r7, lr}
10002aae:	b082      	sub	sp, #8
10002ab0:	af00      	add	r7, sp, #0
10002ab2:	6078      	str	r0, [r7, #4]
10002ab4:	1c0a      	adds	r2, r1, #0
10002ab6:	1cfb      	adds	r3, r7, #3
10002ab8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10002aba:	687b      	ldr	r3, [r7, #4]
10002abc:	22a4      	movs	r2, #164	; 0xa4
10002abe:	589a      	ldr	r2, [r3, r2]
10002ac0:	1cfb      	adds	r3, r7, #3
10002ac2:	781b      	ldrb	r3, [r3, #0]
10002ac4:	2101      	movs	r1, #1
10002ac6:	4099      	lsls	r1, r3
10002ac8:	1c0b      	adds	r3, r1, #0
10002aca:	431a      	orrs	r2, r3
10002acc:	687b      	ldr	r3, [r7, #4]
10002ace:	21a4      	movs	r1, #164	; 0xa4
10002ad0:	505a      	str	r2, [r3, r1]
}
10002ad2:	46bd      	mov	sp, r7
10002ad4:	b002      	add	sp, #8
10002ad6:	bd80      	pop	{r7, pc}

10002ad8 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
10002ad8:	b590      	push	{r4, r7, lr}
10002ada:	b085      	sub	sp, #20
10002adc:	af00      	add	r7, sp, #0
10002ade:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
10002ae0:	230f      	movs	r3, #15
10002ae2:	18fb      	adds	r3, r7, r3
10002ae4:	2201      	movs	r2, #1
10002ae6:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL));

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
10002ae8:	687b      	ldr	r3, [r7, #4]
10002aea:	2229      	movs	r2, #41	; 0x29
10002aec:	5c9b      	ldrb	r3, [r3, r2]
10002aee:	2b02      	cmp	r3, #2
10002af0:	d155      	bne.n	10002b9e <PWM_lCCU4_Init+0xc6>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
10002af2:	687b      	ldr	r3, [r7, #4]
10002af4:	681b      	ldr	r3, [r3, #0]
10002af6:	220f      	movs	r2, #15
10002af8:	18bc      	adds	r4, r7, r2
10002afa:	1c18      	adds	r0, r3, #0
10002afc:	f000 fbfe 	bl	100032fc <GLOBAL_CCU4_Init>
10002b00:	1c03      	adds	r3, r0, #0
10002b02:	7023      	strb	r3, [r4, #0]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
10002b04:	230f      	movs	r3, #15
10002b06:	18fb      	adds	r3, r7, r3
10002b08:	781b      	ldrb	r3, [r3, #0]
10002b0a:	2b00      	cmp	r3, #0
10002b0c:	d143      	bne.n	10002b96 <PWM_lCCU4_Init+0xbe>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
10002b0e:	687b      	ldr	r3, [r7, #4]
10002b10:	689a      	ldr	r2, [r3, #8]
10002b12:	687b      	ldr	r3, [r7, #4]
10002b14:	68db      	ldr	r3, [r3, #12]
10002b16:	1c10      	adds	r0, r2, #0
10002b18:	1c19      	adds	r1, r3, #0
10002b1a:	f7ff fb91 	bl	10002240 <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
10002b1e:	687b      	ldr	r3, [r7, #4]
10002b20:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
10002b22:	687b      	ldr	r3, [r7, #4]
10002b24:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
10002b26:	b29b      	uxth	r3, r3
10002b28:	1c10      	adds	r0, r2, #0
10002b2a:	1c19      	adds	r1, r3, #0
10002b2c:	f7ff ff96 	bl	10002a5c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
10002b30:	687b      	ldr	r3, [r7, #4]
10002b32:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
10002b34:	687b      	ldr	r3, [r7, #4]
10002b36:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
10002b38:	b29b      	uxth	r3, r3
10002b3a:	1c10      	adds	r0, r2, #0
10002b3c:	1c19      	adds	r1, r3, #0
10002b3e:	f7ff ff9b 	bl	10002a78 <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
10002b42:	687b      	ldr	r3, [r7, #4]
10002b44:	685a      	ldr	r2, [r3, #4]
10002b46:	687b      	ldr	r3, [r7, #4]
10002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002b4a:	1c10      	adds	r0, r2, #0
10002b4c:	1c19      	adds	r1, r3, #0
10002b4e:	f7ff ffa1 	bl	10002a94 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
10002b52:	687b      	ldr	r3, [r7, #4]
10002b54:	1c18      	adds	r0, r3, #0
10002b56:	f000 f829 	bl	10002bac <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
10002b5a:	687b      	ldr	r3, [r7, #4]
10002b5c:	6919      	ldr	r1, [r3, #16]
10002b5e:	687b      	ldr	r3, [r7, #4]
10002b60:	222c      	movs	r2, #44	; 0x2c
10002b62:	5c9a      	ldrb	r2, [r3, r2]
10002b64:	687b      	ldr	r3, [r7, #4]
10002b66:	695b      	ldr	r3, [r3, #20]
10002b68:	1c08      	adds	r0, r1, #0
10002b6a:	1c11      	adds	r1, r2, #0
10002b6c:	1c1a      	adds	r2, r3, #0
10002b6e:	f7fe fb13 	bl	10001198 <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
10002b72:	687b      	ldr	r3, [r7, #4]
10002b74:	2229      	movs	r2, #41	; 0x29
10002b76:	2100      	movs	r1, #0
10002b78:	5499      	strb	r1, [r3, r2]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
10002b7a:	687b      	ldr	r3, [r7, #4]
10002b7c:	222f      	movs	r2, #47	; 0x2f
10002b7e:	5c9b      	ldrb	r3, [r3, r2]
10002b80:	2b00      	cmp	r3, #0
10002b82:	d003      	beq.n	10002b8c <PWM_lCCU4_Init+0xb4>
      {
        PWM_Start(handle_ptr);
10002b84:	687b      	ldr	r3, [r7, #4]
10002b86:	1c18      	adds	r0, r3, #0
10002b88:	f000 f8c6 	bl	10002d18 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
10002b8c:	230f      	movs	r3, #15
10002b8e:	18fb      	adds	r3, r7, r3
10002b90:	2200      	movs	r2, #0
10002b92:	701a      	strb	r2, [r3, #0]
10002b94:	e003      	b.n	10002b9e <PWM_lCCU4_Init+0xc6>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
10002b96:	687b      	ldr	r3, [r7, #4]
10002b98:	2229      	movs	r2, #41	; 0x29
10002b9a:	2102      	movs	r1, #2
10002b9c:	5499      	strb	r1, [r3, r2]
    }

  }
  return (status);
10002b9e:	230f      	movs	r3, #15
10002ba0:	18fb      	adds	r3, r7, r3
10002ba2:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_lCCU4_Init() api */
10002ba4:	1c18      	adds	r0, r3, #0
10002ba6:	46bd      	mov	sp, r7
10002ba8:	b005      	add	sp, #20
10002baa:	bd90      	pop	{r4, r7, pc}

10002bac <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
10002bac:	b580      	push	{r7, lr}
10002bae:	b082      	sub	sp, #8
10002bb0:	af00      	add	r7, sp, #0
10002bb2:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
10002bb4:	687b      	ldr	r3, [r7, #4]
10002bb6:	2230      	movs	r2, #48	; 0x30
10002bb8:	5c9b      	ldrb	r3, [r3, r2]
10002bba:	2b00      	cmp	r3, #0
10002bbc:	d00f      	beq.n	10002bde <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002bbe:	687b      	ldr	r3, [r7, #4]
10002bc0:	689b      	ldr	r3, [r3, #8]
10002bc2:	1c18      	adds	r0, r3, #0
10002bc4:	2100      	movs	r1, #0
10002bc6:	f7ff ff71 	bl	10002aac <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
10002bca:	687b      	ldr	r3, [r7, #4]
10002bcc:	6899      	ldr	r1, [r3, #8]
10002bce:	687b      	ldr	r3, [r7, #4]
10002bd0:	222a      	movs	r2, #42	; 0x2a
10002bd2:	5c9b      	ldrb	r3, [r3, r2]
10002bd4:	1c08      	adds	r0, r1, #0
10002bd6:	2100      	movs	r1, #0
10002bd8:	1c1a      	adds	r2, r3, #0
10002bda:	f7ff fc53 	bl	10002484 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
10002bde:	687b      	ldr	r3, [r7, #4]
10002be0:	2231      	movs	r2, #49	; 0x31
10002be2:	5c9b      	ldrb	r3, [r3, r2]
10002be4:	2b00      	cmp	r3, #0
10002be6:	d00f      	beq.n	10002c08 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
10002be8:	687b      	ldr	r3, [r7, #4]
10002bea:	689b      	ldr	r3, [r3, #8]
10002bec:	1c18      	adds	r0, r3, #0
10002bee:	2102      	movs	r1, #2
10002bf0:	f7ff ff5c 	bl	10002aac <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
10002bf4:	687b      	ldr	r3, [r7, #4]
10002bf6:	6899      	ldr	r1, [r3, #8]
10002bf8:	687b      	ldr	r3, [r7, #4]
10002bfa:	222b      	movs	r2, #43	; 0x2b
10002bfc:	5c9b      	ldrb	r3, [r3, r2]
10002bfe:	1c08      	adds	r0, r1, #0
10002c00:	2102      	movs	r1, #2
10002c02:	1c1a      	adds	r2, r3, #0
10002c04:	f7ff fc3e 	bl	10002484 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
10002c08:	46bd      	mov	sp, r7
10002c0a:	b002      	add	sp, #8
10002c0c:	bd80      	pop	{r7, pc}
10002c0e:	46c0      	nop			; (mov r8, r8)

10002c10 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
10002c10:	b580      	push	{r7, lr}
10002c12:	b082      	sub	sp, #8
10002c14:	af00      	add	r7, sp, #0
10002c16:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
10002c18:	687b      	ldr	r3, [r7, #4]
10002c1a:	2229      	movs	r2, #41	; 0x29
10002c1c:	5c9b      	ldrb	r3, [r3, r2]
10002c1e:	2b00      	cmp	r3, #0
10002c20:	d004      	beq.n	10002c2c <PWM_lCCU4_Start+0x1c>
10002c22:	687b      	ldr	r3, [r7, #4]
10002c24:	2229      	movs	r2, #41	; 0x29
10002c26:	5c9b      	ldrb	r3, [r3, r2]
10002c28:	2b04      	cmp	r3, #4
10002c2a:	d111      	bne.n	10002c50 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
10002c2c:	687b      	ldr	r3, [r7, #4]
10002c2e:	6859      	ldr	r1, [r3, #4]
10002c30:	687b      	ldr	r3, [r7, #4]
10002c32:	222e      	movs	r2, #46	; 0x2e
10002c34:	5c9b      	ldrb	r3, [r3, r2]
10002c36:	1c08      	adds	r0, r1, #0
10002c38:	1c19      	adds	r1, r3, #0
10002c3a:	f7ff fef5 	bl	10002a28 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
10002c3e:	687b      	ldr	r3, [r7, #4]
10002c40:	689b      	ldr	r3, [r3, #8]
10002c42:	1c18      	adds	r0, r3, #0
10002c44:	f7ff ff00 	bl	10002a48 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
10002c48:	687b      	ldr	r3, [r7, #4]
10002c4a:	2229      	movs	r2, #41	; 0x29
10002c4c:	2103      	movs	r1, #3
10002c4e:	5499      	strb	r1, [r3, r2]
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
10002c50:	46bd      	mov	sp, r7
10002c52:	b002      	add	sp, #8
10002c54:	bd80      	pop	{r7, pc}
10002c56:	46c0      	nop			; (mov r8, r8)

10002c58 <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
10002c58:	b580      	push	{r7, lr}
10002c5a:	b086      	sub	sp, #24
10002c5c:	af00      	add	r7, sp, #0
10002c5e:	6078      	str	r0, [r7, #4]
10002c60:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)));

  status = PWM_STATUS_FAILURE;
10002c62:	2317      	movs	r3, #23
10002c64:	18fb      	adds	r3, r7, r3
10002c66:	2201      	movs	r2, #1
10002c68:	701a      	strb	r2, [r3, #0]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
10002c6a:	687b      	ldr	r3, [r7, #4]
10002c6c:	2229      	movs	r2, #41	; 0x29
10002c6e:	5c9b      	ldrb	r3, [r3, r2]
10002c70:	2b02      	cmp	r3, #2
10002c72:	d02c      	beq.n	10002cce <PWM_lCCU4_SetDutyCycle+0x76>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
10002c74:	683b      	ldr	r3, [r7, #0]
10002c76:	4a19      	ldr	r2, [pc, #100]	; (10002cdc <PWM_lCCU4_SetDutyCycle+0x84>)
10002c78:	4293      	cmp	r3, r2
10002c7a:	d828      	bhi.n	10002cce <PWM_lCCU4_SetDutyCycle+0x76>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
10002c7c:	687b      	ldr	r3, [r7, #4]
10002c7e:	69db      	ldr	r3, [r3, #28]
10002c80:	3301      	adds	r3, #1
10002c82:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
10002c84:	683b      	ldr	r3, [r7, #0]
10002c86:	4a15      	ldr	r2, [pc, #84]	; (10002cdc <PWM_lCCU4_SetDutyCycle+0x84>)
10002c88:	1ad3      	subs	r3, r2, r3
10002c8a:	693a      	ldr	r2, [r7, #16]
10002c8c:	4353      	muls	r3, r2
10002c8e:	1c18      	adds	r0, r3, #0
10002c90:	4912      	ldr	r1, [pc, #72]	; (10002cdc <PWM_lCCU4_SetDutyCycle+0x84>)
10002c92:	f7ff fcc1 	bl	10002618 <__aeabi_uidiv>
10002c96:	1c03      	adds	r3, r0, #0
10002c98:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
10002c9a:	687b      	ldr	r3, [r7, #4]
10002c9c:	68fa      	ldr	r2, [r7, #12]
10002c9e:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
10002ca0:	687b      	ldr	r3, [r7, #4]
10002ca2:	683a      	ldr	r2, [r7, #0]
10002ca4:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
10002ca6:	687b      	ldr	r3, [r7, #4]
10002ca8:	689a      	ldr	r2, [r3, #8]
10002caa:	68fb      	ldr	r3, [r7, #12]
10002cac:	b29b      	uxth	r3, r3
10002cae:	1c10      	adds	r0, r2, #0
10002cb0:	1c19      	adds	r1, r3, #0
10002cb2:	f7ff fee1 	bl	10002a78 <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
10002cb6:	687b      	ldr	r3, [r7, #4]
10002cb8:	685a      	ldr	r2, [r3, #4]
10002cba:	687b      	ldr	r3, [r7, #4]
10002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002cbe:	1c10      	adds	r0, r2, #0
10002cc0:	1c19      	adds	r1, r3, #0
10002cc2:	f7ff fee7 	bl	10002a94 <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
10002cc6:	2317      	movs	r3, #23
10002cc8:	18fb      	adds	r3, r7, r3
10002cca:	2200      	movs	r2, #0
10002ccc:	701a      	strb	r2, [r3, #0]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
10002cce:	2317      	movs	r3, #23
10002cd0:	18fb      	adds	r3, r7, r3
10002cd2:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_lCCU4_SetDutyCycle() api */
10002cd4:	1c18      	adds	r0, r3, #0
10002cd6:	46bd      	mov	sp, r7
10002cd8:	b006      	add	sp, #24
10002cda:	bd80      	pop	{r7, pc}
10002cdc:	00002710 	.word	0x00002710

10002ce0 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
10002ce0:	b590      	push	{r4, r7, lr}
10002ce2:	b085      	sub	sp, #20
10002ce4:	af00      	add	r7, sp, #0
10002ce6:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
10002ce8:	230f      	movs	r3, #15
10002cea:	18fb      	adds	r3, r7, r3
10002cec:	2201      	movs	r2, #1
10002cee:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
10002cf0:	687b      	ldr	r3, [r7, #4]
10002cf2:	2228      	movs	r2, #40	; 0x28
10002cf4:	5c9b      	ldrb	r3, [r3, r2]
10002cf6:	2b00      	cmp	r3, #0
10002cf8:	d107      	bne.n	10002d0a <PWM_Init+0x2a>
  {
    status = PWM_lCCU4_Init(handle_ptr);
10002cfa:	230f      	movs	r3, #15
10002cfc:	18fc      	adds	r4, r7, r3
10002cfe:	687b      	ldr	r3, [r7, #4]
10002d00:	1c18      	adds	r0, r3, #0
10002d02:	f7ff fee9 	bl	10002ad8 <PWM_lCCU4_Init>
10002d06:	1c03      	adds	r3, r0, #0
10002d08:	7023      	strb	r3, [r4, #0]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
10002d0a:	230f      	movs	r3, #15
10002d0c:	18fb      	adds	r3, r7, r3
10002d0e:	781b      	ldrb	r3, [r3, #0]
}
10002d10:	1c18      	adds	r0, r3, #0
10002d12:	46bd      	mov	sp, r7
10002d14:	b005      	add	sp, #20
10002d16:	bd90      	pop	{r4, r7, pc}

10002d18 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
10002d18:	b580      	push	{r7, lr}
10002d1a:	b082      	sub	sp, #8
10002d1c:	af00      	add	r7, sp, #0
10002d1e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
10002d20:	687b      	ldr	r3, [r7, #4]
10002d22:	2228      	movs	r2, #40	; 0x28
10002d24:	5c9b      	ldrb	r3, [r3, r2]
10002d26:	2b00      	cmp	r3, #0
10002d28:	d103      	bne.n	10002d32 <PWM_Start+0x1a>
  {
    PWM_lCCU4_Start(handle_ptr);
10002d2a:	687b      	ldr	r3, [r7, #4]
10002d2c:	1c18      	adds	r0, r3, #0
10002d2e:	f7ff ff6f 	bl	10002c10 <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
10002d32:	46bd      	mov	sp, r7
10002d34:	b002      	add	sp, #8
10002d36:	bd80      	pop	{r7, pc}

10002d38 <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
10002d38:	b590      	push	{r4, r7, lr}
10002d3a:	b085      	sub	sp, #20
10002d3c:	af00      	add	r7, sp, #0
10002d3e:	6078      	str	r0, [r7, #4]
10002d40:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
10002d42:	230f      	movs	r3, #15
10002d44:	18fb      	adds	r3, r7, r3
10002d46:	2201      	movs	r2, #1
10002d48:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL));

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
10002d4a:	687b      	ldr	r3, [r7, #4]
10002d4c:	2228      	movs	r2, #40	; 0x28
10002d4e:	5c9b      	ldrb	r3, [r3, r2]
10002d50:	2b00      	cmp	r3, #0
10002d52:	d109      	bne.n	10002d68 <PWM_SetDutyCycle+0x30>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
10002d54:	230f      	movs	r3, #15
10002d56:	18fc      	adds	r4, r7, r3
10002d58:	687a      	ldr	r2, [r7, #4]
10002d5a:	683b      	ldr	r3, [r7, #0]
10002d5c:	1c10      	adds	r0, r2, #0
10002d5e:	1c19      	adds	r1, r3, #0
10002d60:	f7ff ff7a 	bl	10002c58 <PWM_lCCU4_SetDutyCycle>
10002d64:	1c03      	adds	r3, r0, #0
10002d66:	7023      	strb	r3, [r4, #0]
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif
  return (status);
10002d68:	230f      	movs	r3, #15
10002d6a:	18fb      	adds	r3, r7, r3
10002d6c:	781b      	ldrb	r3, [r3, #0]
}
10002d6e:	1c18      	adds	r0, r3, #0
10002d70:	46bd      	mov	sp, r7
10002d72:	b005      	add	sp, #20
10002d74:	bd90      	pop	{r4, r7, pc}
10002d76:	46c0      	nop			; (mov r8, r8)

10002d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002d78:	b580      	push	{r7, lr}
10002d7a:	b082      	sub	sp, #8
10002d7c:	af00      	add	r7, sp, #0
10002d7e:	1c02      	adds	r2, r0, #0
10002d80:	1dfb      	adds	r3, r7, #7
10002d82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002d84:	1dfb      	adds	r3, r7, #7
10002d86:	781b      	ldrb	r3, [r3, #0]
10002d88:	2b7f      	cmp	r3, #127	; 0x7f
10002d8a:	d809      	bhi.n	10002da0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002d8c:	4b06      	ldr	r3, [pc, #24]	; (10002da8 <__NVIC_EnableIRQ+0x30>)
10002d8e:	1dfa      	adds	r2, r7, #7
10002d90:	7812      	ldrb	r2, [r2, #0]
10002d92:	1c11      	adds	r1, r2, #0
10002d94:	221f      	movs	r2, #31
10002d96:	400a      	ands	r2, r1
10002d98:	2101      	movs	r1, #1
10002d9a:	4091      	lsls	r1, r2
10002d9c:	1c0a      	adds	r2, r1, #0
10002d9e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002da0:	46bd      	mov	sp, r7
10002da2:	b002      	add	sp, #8
10002da4:	bd80      	pop	{r7, pc}
10002da6:	46c0      	nop			; (mov r8, r8)
10002da8:	e000e100 	.word	0xe000e100

10002dac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10002dac:	b580      	push	{r7, lr}
10002dae:	b082      	sub	sp, #8
10002db0:	af00      	add	r7, sp, #0
10002db2:	1c02      	adds	r2, r0, #0
10002db4:	1dfb      	adds	r3, r7, #7
10002db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002db8:	1dfb      	adds	r3, r7, #7
10002dba:	781b      	ldrb	r3, [r3, #0]
10002dbc:	2b7f      	cmp	r3, #127	; 0x7f
10002dbe:	d80a      	bhi.n	10002dd6 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002dc0:	4906      	ldr	r1, [pc, #24]	; (10002ddc <__NVIC_ClearPendingIRQ+0x30>)
10002dc2:	1dfb      	adds	r3, r7, #7
10002dc4:	781b      	ldrb	r3, [r3, #0]
10002dc6:	1c1a      	adds	r2, r3, #0
10002dc8:	231f      	movs	r3, #31
10002dca:	4013      	ands	r3, r2
10002dcc:	2201      	movs	r2, #1
10002dce:	409a      	lsls	r2, r3
10002dd0:	23c0      	movs	r3, #192	; 0xc0
10002dd2:	005b      	lsls	r3, r3, #1
10002dd4:	50ca      	str	r2, [r1, r3]
  }
}
10002dd6:	46bd      	mov	sp, r7
10002dd8:	b002      	add	sp, #8
10002dda:	bd80      	pop	{r7, pc}
10002ddc:	e000e100 	.word	0xe000e100

10002de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002de0:	b5b0      	push	{r4, r5, r7, lr}
10002de2:	b082      	sub	sp, #8
10002de4:	af00      	add	r7, sp, #0
10002de6:	1c02      	adds	r2, r0, #0
10002de8:	6039      	str	r1, [r7, #0]
10002dea:	1dfb      	adds	r3, r7, #7
10002dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002dee:	1dfb      	adds	r3, r7, #7
10002df0:	781b      	ldrb	r3, [r3, #0]
10002df2:	2b7f      	cmp	r3, #127	; 0x7f
10002df4:	d827      	bhi.n	10002e46 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002df6:	4c2d      	ldr	r4, [pc, #180]	; (10002eac <__NVIC_SetPriority+0xcc>)
10002df8:	1dfb      	adds	r3, r7, #7
10002dfa:	781b      	ldrb	r3, [r3, #0]
10002dfc:	b25b      	sxtb	r3, r3
10002dfe:	089b      	lsrs	r3, r3, #2
10002e00:	492a      	ldr	r1, [pc, #168]	; (10002eac <__NVIC_SetPriority+0xcc>)
10002e02:	1dfa      	adds	r2, r7, #7
10002e04:	7812      	ldrb	r2, [r2, #0]
10002e06:	b252      	sxtb	r2, r2
10002e08:	0892      	lsrs	r2, r2, #2
10002e0a:	32c0      	adds	r2, #192	; 0xc0
10002e0c:	0092      	lsls	r2, r2, #2
10002e0e:	5852      	ldr	r2, [r2, r1]
10002e10:	1df9      	adds	r1, r7, #7
10002e12:	7809      	ldrb	r1, [r1, #0]
10002e14:	1c08      	adds	r0, r1, #0
10002e16:	2103      	movs	r1, #3
10002e18:	4001      	ands	r1, r0
10002e1a:	00c9      	lsls	r1, r1, #3
10002e1c:	1c08      	adds	r0, r1, #0
10002e1e:	21ff      	movs	r1, #255	; 0xff
10002e20:	4081      	lsls	r1, r0
10002e22:	43c9      	mvns	r1, r1
10002e24:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002e26:	683a      	ldr	r2, [r7, #0]
10002e28:	0192      	lsls	r2, r2, #6
10002e2a:	20ff      	movs	r0, #255	; 0xff
10002e2c:	4002      	ands	r2, r0
10002e2e:	1df8      	adds	r0, r7, #7
10002e30:	7800      	ldrb	r0, [r0, #0]
10002e32:	1c05      	adds	r5, r0, #0
10002e34:	2003      	movs	r0, #3
10002e36:	4028      	ands	r0, r5
10002e38:	00c0      	lsls	r0, r0, #3
10002e3a:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002e3c:	430a      	orrs	r2, r1
10002e3e:	33c0      	adds	r3, #192	; 0xc0
10002e40:	009b      	lsls	r3, r3, #2
10002e42:	511a      	str	r2, [r3, r4]
10002e44:	e02e      	b.n	10002ea4 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002e46:	4c1a      	ldr	r4, [pc, #104]	; (10002eb0 <__NVIC_SetPriority+0xd0>)
10002e48:	1dfb      	adds	r3, r7, #7
10002e4a:	781b      	ldrb	r3, [r3, #0]
10002e4c:	1c1a      	adds	r2, r3, #0
10002e4e:	230f      	movs	r3, #15
10002e50:	4013      	ands	r3, r2
10002e52:	3b08      	subs	r3, #8
10002e54:	0899      	lsrs	r1, r3, #2
10002e56:	4a16      	ldr	r2, [pc, #88]	; (10002eb0 <__NVIC_SetPriority+0xd0>)
10002e58:	1dfb      	adds	r3, r7, #7
10002e5a:	781b      	ldrb	r3, [r3, #0]
10002e5c:	1c18      	adds	r0, r3, #0
10002e5e:	230f      	movs	r3, #15
10002e60:	4003      	ands	r3, r0
10002e62:	3b08      	subs	r3, #8
10002e64:	089b      	lsrs	r3, r3, #2
10002e66:	3306      	adds	r3, #6
10002e68:	009b      	lsls	r3, r3, #2
10002e6a:	18d3      	adds	r3, r2, r3
10002e6c:	685b      	ldr	r3, [r3, #4]
10002e6e:	1dfa      	adds	r2, r7, #7
10002e70:	7812      	ldrb	r2, [r2, #0]
10002e72:	1c10      	adds	r0, r2, #0
10002e74:	2203      	movs	r2, #3
10002e76:	4002      	ands	r2, r0
10002e78:	00d2      	lsls	r2, r2, #3
10002e7a:	1c10      	adds	r0, r2, #0
10002e7c:	22ff      	movs	r2, #255	; 0xff
10002e7e:	4082      	lsls	r2, r0
10002e80:	43d2      	mvns	r2, r2
10002e82:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002e84:	683b      	ldr	r3, [r7, #0]
10002e86:	019b      	lsls	r3, r3, #6
10002e88:	20ff      	movs	r0, #255	; 0xff
10002e8a:	4003      	ands	r3, r0
10002e8c:	1df8      	adds	r0, r7, #7
10002e8e:	7800      	ldrb	r0, [r0, #0]
10002e90:	1c05      	adds	r5, r0, #0
10002e92:	2003      	movs	r0, #3
10002e94:	4028      	ands	r0, r5
10002e96:	00c0      	lsls	r0, r0, #3
10002e98:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002e9a:	431a      	orrs	r2, r3
10002e9c:	1d8b      	adds	r3, r1, #6
10002e9e:	009b      	lsls	r3, r3, #2
10002ea0:	18e3      	adds	r3, r4, r3
10002ea2:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002ea4:	46bd      	mov	sp, r7
10002ea6:	b002      	add	sp, #8
10002ea8:	bdb0      	pop	{r4, r5, r7, pc}
10002eaa:	46c0      	nop			; (mov r8, r8)
10002eac:	e000e100 	.word	0xe000e100
10002eb0:	e000ed00 	.word	0xe000ed00

10002eb4 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
10002eb4:	b580      	push	{r7, lr}
10002eb6:	b082      	sub	sp, #8
10002eb8:	af00      	add	r7, sp, #0
10002eba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
10002ebc:	687b      	ldr	r3, [r7, #4]
10002ebe:	6859      	ldr	r1, [r3, #4]
10002ec0:	687b      	ldr	r3, [r7, #4]
10002ec2:	7f9a      	ldrb	r2, [r3, #30]
10002ec4:	687b      	ldr	r3, [r7, #4]
10002ec6:	3308      	adds	r3, #8
10002ec8:	1c08      	adds	r0, r1, #0
10002eca:	1c11      	adds	r1, r2, #0
10002ecc:	1c1a      	adds	r2, r3, #0
10002ece:	f7fe f963 	bl	10001198 <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
10002ed2:	687b      	ldr	r3, [r7, #4]
10002ed4:	6819      	ldr	r1, [r3, #0]
10002ed6:	687b      	ldr	r3, [r7, #4]
10002ed8:	7f1a      	ldrb	r2, [r3, #28]
10002eda:	687b      	ldr	r3, [r7, #4]
10002edc:	3310      	adds	r3, #16
10002ede:	1c08      	adds	r0, r1, #0
10002ee0:	1c11      	adds	r1, r2, #0
10002ee2:	1c1a      	adds	r2, r3, #0
10002ee4:	f7ff fb22 	bl	1000252c <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
10002ee8:	687b      	ldr	r3, [r7, #4]
10002eea:	681a      	ldr	r2, [r3, #0]
10002eec:	687b      	ldr	r3, [r7, #4]
10002eee:	7f5b      	ldrb	r3, [r3, #29]
10002ef0:	1c10      	adds	r0, r2, #0
10002ef2:	1c19      	adds	r1, r3, #0
10002ef4:	2201      	movs	r2, #1
10002ef6:	f7ff fb47 	bl	10002588 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
10002efa:	687b      	ldr	r3, [r7, #4]
10002efc:	7e9a      	ldrb	r2, [r3, #26]
10002efe:	687b      	ldr	r3, [r7, #4]
10002f00:	7edb      	ldrb	r3, [r3, #27]
10002f02:	1c19      	adds	r1, r3, #0
10002f04:	b253      	sxtb	r3, r2
10002f06:	1c18      	adds	r0, r3, #0
10002f08:	f7ff ff6a 	bl	10002de0 <__NVIC_SetPriority>
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
10002f0c:	687b      	ldr	r3, [r7, #4]
10002f0e:	7e9b      	ldrb	r3, [r3, #26]
10002f10:	b2da      	uxtb	r2, r3
10002f12:	687b      	ldr	r3, [r7, #4]
10002f14:	8b1b      	ldrh	r3, [r3, #24]
10002f16:	1c10      	adds	r0, r2, #0
10002f18:	1c19      	adds	r1, r3, #0
10002f1a:	f7fe fcbf 	bl	1000189c <XMC_SCU_SetInterruptControl>
#endif
  if (true == handle->enable_at_init)
10002f1e:	687b      	ldr	r3, [r7, #4]
10002f20:	7fdb      	ldrb	r3, [r3, #31]
10002f22:	2b00      	cmp	r3, #0
10002f24:	d00b      	beq.n	10002f3e <PIN_INTERRUPT_Init+0x8a>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
10002f26:	687b      	ldr	r3, [r7, #4]
10002f28:	7e9b      	ldrb	r3, [r3, #26]
10002f2a:	b25b      	sxtb	r3, r3
10002f2c:	1c18      	adds	r0, r3, #0
10002f2e:	f7ff ff3d 	bl	10002dac <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
10002f32:	687b      	ldr	r3, [r7, #4]
10002f34:	7e9b      	ldrb	r3, [r3, #26]
10002f36:	b25b      	sxtb	r3, r3
10002f38:	1c18      	adds	r0, r3, #0
10002f3a:	f7ff ff1d 	bl	10002d78 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
10002f3e:	2300      	movs	r3, #0
}
10002f40:	1c18      	adds	r0, r3, #0
10002f42:	46bd      	mov	sp, r7
10002f44:	b002      	add	sp, #8
10002f46:	bd80      	pop	{r7, pc}

10002f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002f48:	b580      	push	{r7, lr}
10002f4a:	b082      	sub	sp, #8
10002f4c:	af00      	add	r7, sp, #0
10002f4e:	1c02      	adds	r2, r0, #0
10002f50:	1dfb      	adds	r3, r7, #7
10002f52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002f54:	1dfb      	adds	r3, r7, #7
10002f56:	781b      	ldrb	r3, [r3, #0]
10002f58:	2b7f      	cmp	r3, #127	; 0x7f
10002f5a:	d809      	bhi.n	10002f70 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002f5c:	4b06      	ldr	r3, [pc, #24]	; (10002f78 <__NVIC_EnableIRQ+0x30>)
10002f5e:	1dfa      	adds	r2, r7, #7
10002f60:	7812      	ldrb	r2, [r2, #0]
10002f62:	1c11      	adds	r1, r2, #0
10002f64:	221f      	movs	r2, #31
10002f66:	400a      	ands	r2, r1
10002f68:	2101      	movs	r1, #1
10002f6a:	4091      	lsls	r1, r2
10002f6c:	1c0a      	adds	r2, r1, #0
10002f6e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002f70:	46bd      	mov	sp, r7
10002f72:	b002      	add	sp, #8
10002f74:	bd80      	pop	{r7, pc}
10002f76:	46c0      	nop			; (mov r8, r8)
10002f78:	e000e100 	.word	0xe000e100

10002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002f7c:	b5b0      	push	{r4, r5, r7, lr}
10002f7e:	b082      	sub	sp, #8
10002f80:	af00      	add	r7, sp, #0
10002f82:	1c02      	adds	r2, r0, #0
10002f84:	6039      	str	r1, [r7, #0]
10002f86:	1dfb      	adds	r3, r7, #7
10002f88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002f8a:	1dfb      	adds	r3, r7, #7
10002f8c:	781b      	ldrb	r3, [r3, #0]
10002f8e:	2b7f      	cmp	r3, #127	; 0x7f
10002f90:	d827      	bhi.n	10002fe2 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002f92:	4c2d      	ldr	r4, [pc, #180]	; (10003048 <__NVIC_SetPriority+0xcc>)
10002f94:	1dfb      	adds	r3, r7, #7
10002f96:	781b      	ldrb	r3, [r3, #0]
10002f98:	b25b      	sxtb	r3, r3
10002f9a:	089b      	lsrs	r3, r3, #2
10002f9c:	492a      	ldr	r1, [pc, #168]	; (10003048 <__NVIC_SetPriority+0xcc>)
10002f9e:	1dfa      	adds	r2, r7, #7
10002fa0:	7812      	ldrb	r2, [r2, #0]
10002fa2:	b252      	sxtb	r2, r2
10002fa4:	0892      	lsrs	r2, r2, #2
10002fa6:	32c0      	adds	r2, #192	; 0xc0
10002fa8:	0092      	lsls	r2, r2, #2
10002faa:	5852      	ldr	r2, [r2, r1]
10002fac:	1df9      	adds	r1, r7, #7
10002fae:	7809      	ldrb	r1, [r1, #0]
10002fb0:	1c08      	adds	r0, r1, #0
10002fb2:	2103      	movs	r1, #3
10002fb4:	4001      	ands	r1, r0
10002fb6:	00c9      	lsls	r1, r1, #3
10002fb8:	1c08      	adds	r0, r1, #0
10002fba:	21ff      	movs	r1, #255	; 0xff
10002fbc:	4081      	lsls	r1, r0
10002fbe:	43c9      	mvns	r1, r1
10002fc0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002fc2:	683a      	ldr	r2, [r7, #0]
10002fc4:	0192      	lsls	r2, r2, #6
10002fc6:	20ff      	movs	r0, #255	; 0xff
10002fc8:	4002      	ands	r2, r0
10002fca:	1df8      	adds	r0, r7, #7
10002fcc:	7800      	ldrb	r0, [r0, #0]
10002fce:	1c05      	adds	r5, r0, #0
10002fd0:	2003      	movs	r0, #3
10002fd2:	4028      	ands	r0, r5
10002fd4:	00c0      	lsls	r0, r0, #3
10002fd6:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002fd8:	430a      	orrs	r2, r1
10002fda:	33c0      	adds	r3, #192	; 0xc0
10002fdc:	009b      	lsls	r3, r3, #2
10002fde:	511a      	str	r2, [r3, r4]
10002fe0:	e02e      	b.n	10003040 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002fe2:	4c1a      	ldr	r4, [pc, #104]	; (1000304c <__NVIC_SetPriority+0xd0>)
10002fe4:	1dfb      	adds	r3, r7, #7
10002fe6:	781b      	ldrb	r3, [r3, #0]
10002fe8:	1c1a      	adds	r2, r3, #0
10002fea:	230f      	movs	r3, #15
10002fec:	4013      	ands	r3, r2
10002fee:	3b08      	subs	r3, #8
10002ff0:	0899      	lsrs	r1, r3, #2
10002ff2:	4a16      	ldr	r2, [pc, #88]	; (1000304c <__NVIC_SetPriority+0xd0>)
10002ff4:	1dfb      	adds	r3, r7, #7
10002ff6:	781b      	ldrb	r3, [r3, #0]
10002ff8:	1c18      	adds	r0, r3, #0
10002ffa:	230f      	movs	r3, #15
10002ffc:	4003      	ands	r3, r0
10002ffe:	3b08      	subs	r3, #8
10003000:	089b      	lsrs	r3, r3, #2
10003002:	3306      	adds	r3, #6
10003004:	009b      	lsls	r3, r3, #2
10003006:	18d3      	adds	r3, r2, r3
10003008:	685b      	ldr	r3, [r3, #4]
1000300a:	1dfa      	adds	r2, r7, #7
1000300c:	7812      	ldrb	r2, [r2, #0]
1000300e:	1c10      	adds	r0, r2, #0
10003010:	2203      	movs	r2, #3
10003012:	4002      	ands	r2, r0
10003014:	00d2      	lsls	r2, r2, #3
10003016:	1c10      	adds	r0, r2, #0
10003018:	22ff      	movs	r2, #255	; 0xff
1000301a:	4082      	lsls	r2, r0
1000301c:	43d2      	mvns	r2, r2
1000301e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003020:	683b      	ldr	r3, [r7, #0]
10003022:	019b      	lsls	r3, r3, #6
10003024:	20ff      	movs	r0, #255	; 0xff
10003026:	4003      	ands	r3, r0
10003028:	1df8      	adds	r0, r7, #7
1000302a:	7800      	ldrb	r0, [r0, #0]
1000302c:	1c05      	adds	r5, r0, #0
1000302e:	2003      	movs	r0, #3
10003030:	4028      	ands	r0, r5
10003032:	00c0      	lsls	r0, r0, #3
10003034:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003036:	431a      	orrs	r2, r3
10003038:	1d8b      	adds	r3, r1, #6
1000303a:	009b      	lsls	r3, r3, #2
1000303c:	18e3      	adds	r3, r4, r3
1000303e:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10003040:	46bd      	mov	sp, r7
10003042:	b002      	add	sp, #8
10003044:	bdb0      	pop	{r4, r5, r7, pc}
10003046:	46c0      	nop			; (mov r8, r8)
10003048:	e000e100 	.word	0xe000e100
1000304c:	e000ed00 	.word	0xe000ed00

10003050 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
10003050:	b580      	push	{r7, lr}
10003052:	b082      	sub	sp, #8
10003054:	af00      	add	r7, sp, #0
10003056:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
10003058:	687b      	ldr	r3, [r7, #4]
1000305a:	789b      	ldrb	r3, [r3, #2]
1000305c:	b25b      	sxtb	r3, r3
1000305e:	1c18      	adds	r0, r3, #0
10003060:	f7ff ff72 	bl	10002f48 <__NVIC_EnableIRQ>
}
10003064:	46bd      	mov	sp, r7
10003066:	b002      	add	sp, #8
10003068:	bd80      	pop	{r7, pc}
1000306a:	46c0      	nop			; (mov r8, r8)

1000306c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
1000306c:	b580      	push	{r7, lr}
1000306e:	b082      	sub	sp, #8
10003070:	af00      	add	r7, sp, #0
10003072:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
10003074:	687b      	ldr	r3, [r7, #4]
10003076:	789a      	ldrb	r2, [r3, #2]
10003078:	687b      	ldr	r3, [r7, #4]
1000307a:	78db      	ldrb	r3, [r3, #3]
1000307c:	1c19      	adds	r1, r3, #0
1000307e:	b253      	sxtb	r3, r2
10003080:	1c18      	adds	r0, r3, #0
10003082:	f7ff ff7b 	bl	10002f7c <__NVIC_SetPriority>
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
10003086:	687b      	ldr	r3, [r7, #4]
10003088:	789b      	ldrb	r3, [r3, #2]
1000308a:	b2da      	uxtb	r2, r3
1000308c:	687b      	ldr	r3, [r7, #4]
1000308e:	789b      	ldrb	r3, [r3, #2]
10003090:	b25b      	sxtb	r3, r3
10003092:	021b      	lsls	r3, r3, #8
10003094:	b299      	uxth	r1, r3
10003096:	687b      	ldr	r3, [r7, #4]
10003098:	881b      	ldrh	r3, [r3, #0]
1000309a:	b29b      	uxth	r3, r3
1000309c:	430b      	orrs	r3, r1
1000309e:	b29b      	uxth	r3, r3
100030a0:	b29b      	uxth	r3, r3
100030a2:	1c10      	adds	r0, r2, #0
100030a4:	1c19      	adds	r1, r3, #0
100030a6:	f7fe fbf9 	bl	1000189c <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
100030aa:	687b      	ldr	r3, [r7, #4]
100030ac:	791b      	ldrb	r3, [r3, #4]
100030ae:	2b00      	cmp	r3, #0
100030b0:	d003      	beq.n	100030ba <INTERRUPT_Init+0x4e>
  {
    INTERRUPT_Enable(handler);
100030b2:	687b      	ldr	r3, [r7, #4]
100030b4:	1c18      	adds	r0, r3, #0
100030b6:	f7ff ffcb 	bl	10003050 <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
100030ba:	2300      	movs	r3, #0
}
100030bc:	1c18      	adds	r0, r3, #0
100030be:	46bd      	mov	sp, r7
100030c0:	b002      	add	sp, #8
100030c2:	bd80      	pop	{r7, pc}

100030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100030c4:	b580      	push	{r7, lr}
100030c6:	b082      	sub	sp, #8
100030c8:	af00      	add	r7, sp, #0
100030ca:	1c02      	adds	r2, r0, #0
100030cc:	1dfb      	adds	r3, r7, #7
100030ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100030d0:	1dfb      	adds	r3, r7, #7
100030d2:	781b      	ldrb	r3, [r3, #0]
100030d4:	2b7f      	cmp	r3, #127	; 0x7f
100030d6:	d809      	bhi.n	100030ec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100030d8:	4b06      	ldr	r3, [pc, #24]	; (100030f4 <__NVIC_EnableIRQ+0x30>)
100030da:	1dfa      	adds	r2, r7, #7
100030dc:	7812      	ldrb	r2, [r2, #0]
100030de:	1c11      	adds	r1, r2, #0
100030e0:	221f      	movs	r2, #31
100030e2:	400a      	ands	r2, r1
100030e4:	2101      	movs	r1, #1
100030e6:	4091      	lsls	r1, r2
100030e8:	1c0a      	adds	r2, r1, #0
100030ea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100030ec:	46bd      	mov	sp, r7
100030ee:	b002      	add	sp, #8
100030f0:	bd80      	pop	{r7, pc}
100030f2:	46c0      	nop			; (mov r8, r8)
100030f4:	e000e100 	.word	0xe000e100

100030f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100030f8:	b5b0      	push	{r4, r5, r7, lr}
100030fa:	b082      	sub	sp, #8
100030fc:	af00      	add	r7, sp, #0
100030fe:	1c02      	adds	r2, r0, #0
10003100:	6039      	str	r1, [r7, #0]
10003102:	1dfb      	adds	r3, r7, #7
10003104:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003106:	1dfb      	adds	r3, r7, #7
10003108:	781b      	ldrb	r3, [r3, #0]
1000310a:	2b7f      	cmp	r3, #127	; 0x7f
1000310c:	d827      	bhi.n	1000315e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000310e:	4c2d      	ldr	r4, [pc, #180]	; (100031c4 <__NVIC_SetPriority+0xcc>)
10003110:	1dfb      	adds	r3, r7, #7
10003112:	781b      	ldrb	r3, [r3, #0]
10003114:	b25b      	sxtb	r3, r3
10003116:	089b      	lsrs	r3, r3, #2
10003118:	492a      	ldr	r1, [pc, #168]	; (100031c4 <__NVIC_SetPriority+0xcc>)
1000311a:	1dfa      	adds	r2, r7, #7
1000311c:	7812      	ldrb	r2, [r2, #0]
1000311e:	b252      	sxtb	r2, r2
10003120:	0892      	lsrs	r2, r2, #2
10003122:	32c0      	adds	r2, #192	; 0xc0
10003124:	0092      	lsls	r2, r2, #2
10003126:	5852      	ldr	r2, [r2, r1]
10003128:	1df9      	adds	r1, r7, #7
1000312a:	7809      	ldrb	r1, [r1, #0]
1000312c:	1c08      	adds	r0, r1, #0
1000312e:	2103      	movs	r1, #3
10003130:	4001      	ands	r1, r0
10003132:	00c9      	lsls	r1, r1, #3
10003134:	1c08      	adds	r0, r1, #0
10003136:	21ff      	movs	r1, #255	; 0xff
10003138:	4081      	lsls	r1, r0
1000313a:	43c9      	mvns	r1, r1
1000313c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000313e:	683a      	ldr	r2, [r7, #0]
10003140:	0192      	lsls	r2, r2, #6
10003142:	20ff      	movs	r0, #255	; 0xff
10003144:	4002      	ands	r2, r0
10003146:	1df8      	adds	r0, r7, #7
10003148:	7800      	ldrb	r0, [r0, #0]
1000314a:	1c05      	adds	r5, r0, #0
1000314c:	2003      	movs	r0, #3
1000314e:	4028      	ands	r0, r5
10003150:	00c0      	lsls	r0, r0, #3
10003152:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003154:	430a      	orrs	r2, r1
10003156:	33c0      	adds	r3, #192	; 0xc0
10003158:	009b      	lsls	r3, r3, #2
1000315a:	511a      	str	r2, [r3, r4]
1000315c:	e02e      	b.n	100031bc <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000315e:	4c1a      	ldr	r4, [pc, #104]	; (100031c8 <__NVIC_SetPriority+0xd0>)
10003160:	1dfb      	adds	r3, r7, #7
10003162:	781b      	ldrb	r3, [r3, #0]
10003164:	1c1a      	adds	r2, r3, #0
10003166:	230f      	movs	r3, #15
10003168:	4013      	ands	r3, r2
1000316a:	3b08      	subs	r3, #8
1000316c:	0899      	lsrs	r1, r3, #2
1000316e:	4a16      	ldr	r2, [pc, #88]	; (100031c8 <__NVIC_SetPriority+0xd0>)
10003170:	1dfb      	adds	r3, r7, #7
10003172:	781b      	ldrb	r3, [r3, #0]
10003174:	1c18      	adds	r0, r3, #0
10003176:	230f      	movs	r3, #15
10003178:	4003      	ands	r3, r0
1000317a:	3b08      	subs	r3, #8
1000317c:	089b      	lsrs	r3, r3, #2
1000317e:	3306      	adds	r3, #6
10003180:	009b      	lsls	r3, r3, #2
10003182:	18d3      	adds	r3, r2, r3
10003184:	685b      	ldr	r3, [r3, #4]
10003186:	1dfa      	adds	r2, r7, #7
10003188:	7812      	ldrb	r2, [r2, #0]
1000318a:	1c10      	adds	r0, r2, #0
1000318c:	2203      	movs	r2, #3
1000318e:	4002      	ands	r2, r0
10003190:	00d2      	lsls	r2, r2, #3
10003192:	1c10      	adds	r0, r2, #0
10003194:	22ff      	movs	r2, #255	; 0xff
10003196:	4082      	lsls	r2, r0
10003198:	43d2      	mvns	r2, r2
1000319a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000319c:	683b      	ldr	r3, [r7, #0]
1000319e:	019b      	lsls	r3, r3, #6
100031a0:	20ff      	movs	r0, #255	; 0xff
100031a2:	4003      	ands	r3, r0
100031a4:	1df8      	adds	r0, r7, #7
100031a6:	7800      	ldrb	r0, [r0, #0]
100031a8:	1c05      	adds	r5, r0, #0
100031aa:	2003      	movs	r0, #3
100031ac:	4028      	ands	r0, r5
100031ae:	00c0      	lsls	r0, r0, #3
100031b0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100031b2:	431a      	orrs	r2, r3
100031b4:	1d8b      	adds	r3, r1, #6
100031b6:	009b      	lsls	r3, r3, #2
100031b8:	18e3      	adds	r3, r4, r3
100031ba:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100031bc:	46bd      	mov	sp, r7
100031be:	b002      	add	sp, #8
100031c0:	bdb0      	pop	{r4, r5, r7, pc}
100031c2:	46c0      	nop			; (mov r8, r8)
100031c4:	e000e100 	.word	0xe000e100
100031c8:	e000ed00 	.word	0xe000ed00

100031cc <GLOBAL_SCU_XMC1_Init>:

/*  Function to configure SCU Interrupts based on  user configuration.
 * 
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_XMC1_t*const handle)
{
100031cc:	b580      	push	{r7, lr}
100031ce:	b084      	sub	sp, #16
100031d0:	af00      	add	r7, sp, #0
100031d2:	6078      	str	r0, [r7, #4]
  GLOBAL_SCU_XMC1_STATUS_t initstatus;

  XMC_ASSERT("GLOBAL_SCU_XMC1_Init: NULL handle", (handle != NULL));

  if (handle->initialized == false)
100031d4:	687b      	ldr	r3, [r7, #4]
100031d6:	791b      	ldrb	r3, [r3, #4]
100031d8:	2201      	movs	r2, #1
100031da:	4053      	eors	r3, r2
100031dc:	b2db      	uxtb	r3, r3
100031de:	2b00      	cmp	r3, #0
100031e0:	d044      	beq.n	1000326c <GLOBAL_SCU_XMC1_Init+0xa0>
  {
    NVIC_SetPriority((IRQn_Type)0U,(uint32_t)handle->config->priority[0]);
100031e2:	687b      	ldr	r3, [r7, #4]
100031e4:	681b      	ldr	r3, [r3, #0]
100031e6:	781b      	ldrb	r3, [r3, #0]
100031e8:	2000      	movs	r0, #0
100031ea:	1c19      	adds	r1, r3, #0
100031ec:	f7ff ff84 	bl	100030f8 <__NVIC_SetPriority>
  	NVIC_SetPriority((IRQn_Type)1U,(uint32_t)handle->config->priority[1]);
100031f0:	687b      	ldr	r3, [r7, #4]
100031f2:	681b      	ldr	r3, [r3, #0]
100031f4:	785b      	ldrb	r3, [r3, #1]
100031f6:	2001      	movs	r0, #1
100031f8:	1c19      	adds	r1, r3, #0
100031fa:	f7ff ff7d 	bl	100030f8 <__NVIC_SetPriority>
  	NVIC_SetPriority((IRQn_Type)2U,(uint32_t)handle->config->priority[2]);
100031fe:	687b      	ldr	r3, [r7, #4]
10003200:	681b      	ldr	r3, [r3, #0]
10003202:	789b      	ldrb	r3, [r3, #2]
10003204:	2002      	movs	r0, #2
10003206:	1c19      	adds	r1, r3, #0
10003208:	f7ff ff76 	bl	100030f8 <__NVIC_SetPriority>

  	/* enable the IRQ0 */
  	if (handle->config->enable_at_init[0] == true)
1000320c:	687b      	ldr	r3, [r7, #4]
1000320e:	681b      	ldr	r3, [r3, #0]
10003210:	78db      	ldrb	r3, [r3, #3]
10003212:	2b00      	cmp	r3, #0
10003214:	d006      	beq.n	10003224 <GLOBAL_SCU_XMC1_Init+0x58>
  	{
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(0, XMC_SCU_IRQCTRL_SCU_SR0_IRQ0);
10003216:	2000      	movs	r0, #0
10003218:	2100      	movs	r1, #0
1000321a:	f7fe fb3f 	bl	1000189c <XMC_SCU_SetInterruptControl>
#endif
  	  NVIC_EnableIRQ((IRQn_Type)0U);
1000321e:	2000      	movs	r0, #0
10003220:	f7ff ff50 	bl	100030c4 <__NVIC_EnableIRQ>
  	}
  	/* enable the IRQ1 */
  	if (handle->config->enable_at_init[1] == true)
10003224:	687b      	ldr	r3, [r7, #4]
10003226:	681b      	ldr	r3, [r3, #0]
10003228:	791b      	ldrb	r3, [r3, #4]
1000322a:	2b00      	cmp	r3, #0
1000322c:	d008      	beq.n	10003240 <GLOBAL_SCU_XMC1_Init+0x74>
  	{
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(1, XMC_SCU_IRQCTRL_SCU_SR1_IRQ1);
1000322e:	2380      	movs	r3, #128	; 0x80
10003230:	005b      	lsls	r3, r3, #1
10003232:	2001      	movs	r0, #1
10003234:	1c19      	adds	r1, r3, #0
10003236:	f7fe fb31 	bl	1000189c <XMC_SCU_SetInterruptControl>
#endif
  	  NVIC_EnableIRQ((IRQn_Type)1U);
1000323a:	2001      	movs	r0, #1
1000323c:	f7ff ff42 	bl	100030c4 <__NVIC_EnableIRQ>
  	}
  	/* enable the IRQ2 */
  	if (handle->config->enable_at_init[2] == true)
10003240:	687b      	ldr	r3, [r7, #4]
10003242:	681b      	ldr	r3, [r3, #0]
10003244:	795b      	ldrb	r3, [r3, #5]
10003246:	2b00      	cmp	r3, #0
10003248:	d008      	beq.n	1000325c <GLOBAL_SCU_XMC1_Init+0x90>
  	{
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(2, XMC_SCU_IRQCTRL_SCU_SR2_IRQ2);
1000324a:	2380      	movs	r3, #128	; 0x80
1000324c:	009b      	lsls	r3, r3, #2
1000324e:	2002      	movs	r0, #2
10003250:	1c19      	adds	r1, r3, #0
10003252:	f7fe fb23 	bl	1000189c <XMC_SCU_SetInterruptControl>
#endif
      NVIC_EnableIRQ((IRQn_Type)2U);
10003256:	2002      	movs	r0, #2
10003258:	f7ff ff34 	bl	100030c4 <__NVIC_EnableIRQ>
  	}
	handle->initialized = true;
1000325c:	687b      	ldr	r3, [r7, #4]
1000325e:	2201      	movs	r2, #1
10003260:	711a      	strb	r2, [r3, #4]
    initstatus = GLOBAL_SCU_XMC1_STATUS_SUCCESS;
10003262:	230f      	movs	r3, #15
10003264:	18fb      	adds	r3, r7, r3
10003266:	2200      	movs	r2, #0
10003268:	701a      	strb	r2, [r3, #0]
1000326a:	e003      	b.n	10003274 <GLOBAL_SCU_XMC1_Init+0xa8>
  }
  else
  {
    initstatus = GLOBAL_SCU_XMC1_STATUS_FAILURE;
1000326c:	230f      	movs	r3, #15
1000326e:	18fb      	adds	r3, r7, r3
10003270:	2201      	movs	r2, #1
10003272:	701a      	strb	r2, [r3, #0]
  }
  	
  return (initstatus);
10003274:	230f      	movs	r3, #15
10003276:	18fb      	adds	r3, r7, r3
10003278:	781b      	ldrb	r3, [r3, #0]
}
1000327a:	1c18      	adds	r0, r3, #0
1000327c:	46bd      	mov	sp, r7
1000327e:	b004      	add	sp, #16
10003280:	bd80      	pop	{r7, pc}
10003282:	46c0      	nop			; (mov r8, r8)

10003284 <IRQ0_Handler>:
#else
/*
 * @brief  IRQ0 Interrupt Handler
 */
void IRQ0_Handler(void)
{
10003284:	b580      	push	{r7, lr}
10003286:	af00      	add	r7, sp, #0
  XMC_SCU_IRQHandler(0);
10003288:	2000      	movs	r0, #0
1000328a:	f7fe fa89 	bl	100017a0 <XMC_SCU_IRQHandler>
}
1000328e:	46bd      	mov	sp, r7
10003290:	bd80      	pop	{r7, pc}
10003292:	46c0      	nop			; (mov r8, r8)

10003294 <IRQ1_Handler>:

/*  IRQ1 Interrupt Handler.
 *
 */
void IRQ1_Handler(void)
{
10003294:	b580      	push	{r7, lr}
10003296:	af00      	add	r7, sp, #0
  XMC_SCU_IRQHandler(1);
10003298:	2001      	movs	r0, #1
1000329a:	f7fe fa81 	bl	100017a0 <XMC_SCU_IRQHandler>
}
1000329e:	46bd      	mov	sp, r7
100032a0:	bd80      	pop	{r7, pc}
100032a2:	46c0      	nop			; (mov r8, r8)

100032a4 <IRQ2_Handler>:

/*  IRQ2 Interrupt Handler.
 *
 */
void IRQ2_Handler(void)
{
100032a4:	b580      	push	{r7, lr}
100032a6:	af00      	add	r7, sp, #0
  XMC_SCU_IRQHandler(2);
100032a8:	2002      	movs	r0, #2
100032aa:	f7fe fa79 	bl	100017a0 <XMC_SCU_IRQHandler>
}
100032ae:	46bd      	mov	sp, r7
100032b0:	bd80      	pop	{r7, pc}
100032b2:	46c0      	nop			; (mov r8, r8)

100032b4 <GLOBAL_SCU_XMC1_RegisterCallback>:
/*
 * @brief  Function to register callback event
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_RegisterCallback(const GLOBAL_SCU_XMC1_EVENT_t event,
                                                          const GLOBAL_SCU_XMC1_EVENT_HANDLER_t handler)
{
100032b4:	b5b0      	push	{r4, r5, r7, lr}
100032b6:	b086      	sub	sp, #24
100032b8:	af00      	add	r7, sp, #0
100032ba:	60b8      	str	r0, [r7, #8]
100032bc:	60f9      	str	r1, [r7, #12]
100032be:	607a      	str	r2, [r7, #4]
  GLOBAL_SCU_XMC1_STATUS_t status;

  XMC_ASSERT("GLOBAL_SCU_XMC1_RegisterCallback: Invalid event", (GLOBAL_SCU_XMC1_CHECK_EVENT(event)));
  XMC_ASSERT("GLOBAL_SCU_XMC1_RegisterCallback: NULL Handle", (handler != NULL));
  
  status = (GLOBAL_SCU_XMC1_STATUS_t)XMC_SCU_INTERRUPT_SetEventHandler(event, handler);
100032c0:	2317      	movs	r3, #23
100032c2:	18fd      	adds	r5, r7, r3
100032c4:	68bb      	ldr	r3, [r7, #8]
100032c6:	68fc      	ldr	r4, [r7, #12]
100032c8:	687a      	ldr	r2, [r7, #4]
100032ca:	1c18      	adds	r0, r3, #0
100032cc:	1c21      	adds	r1, r4, #0
100032ce:	f7fe fa1f 	bl	10001710 <XMC_SCU_INTERRUPT_SetEventHandler>
100032d2:	1c03      	adds	r3, r0, #0
100032d4:	702b      	strb	r3, [r5, #0]

  return (status);
100032d6:	2317      	movs	r3, #23
100032d8:	18fb      	adds	r3, r7, r3
100032da:	781b      	ldrb	r3, [r3, #0]
}
100032dc:	1c18      	adds	r0, r3, #0
100032de:	46bd      	mov	sp, r7
100032e0:	b006      	add	sp, #24
100032e2:	bdb0      	pop	{r4, r5, r7, pc}

100032e4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
100032e4:	b580      	push	{r7, lr}
100032e6:	b082      	sub	sp, #8
100032e8:	af00      	add	r7, sp, #0
100032ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
100032ec:	687b      	ldr	r3, [r7, #4]
100032ee:	2280      	movs	r2, #128	; 0x80
100032f0:	0052      	lsls	r2, r2, #1
100032f2:	60da      	str	r2, [r3, #12]
}
100032f4:	46bd      	mov	sp, r7
100032f6:	b002      	add	sp, #8
100032f8:	bd80      	pop	{r7, pc}
100032fa:	46c0      	nop			; (mov r8, r8)

100032fc <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
100032fc:	b580      	push	{r7, lr}
100032fe:	b082      	sub	sp, #8
10003300:	af00      	add	r7, sp, #0
10003302:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10003304:	687b      	ldr	r3, [r7, #4]
10003306:	7b5b      	ldrb	r3, [r3, #13]
10003308:	2201      	movs	r2, #1
1000330a:	4053      	eors	r3, r2
1000330c:	b2db      	uxtb	r3, r3
1000330e:	2b00      	cmp	r3, #0
10003310:	d00f      	beq.n	10003332 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
10003312:	687b      	ldr	r3, [r7, #4]
10003314:	689a      	ldr	r2, [r3, #8]
10003316:	687b      	ldr	r3, [r7, #4]
10003318:	7b1b      	ldrb	r3, [r3, #12]
1000331a:	1c10      	adds	r0, r2, #0
1000331c:	1c19      	adds	r1, r3, #0
1000331e:	f7fe ff6b 	bl	100021f8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
10003322:	687b      	ldr	r3, [r7, #4]
10003324:	689b      	ldr	r3, [r3, #8]
10003326:	1c18      	adds	r0, r3, #0
10003328:	f7ff ffdc 	bl	100032e4 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
1000332c:	687b      	ldr	r3, [r7, #4]
1000332e:	2201      	movs	r2, #1
10003330:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
10003332:	2300      	movs	r3, #0
}
10003334:	1c18      	adds	r0, r3, #0
10003336:	46bd      	mov	sp, r7
10003338:	b002      	add	sp, #8
1000333a:	bd80      	pop	{r7, pc}

1000333c <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
1000333c:	b580      	push	{r7, lr}
1000333e:	b084      	sub	sp, #16
10003340:	af00      	add	r7, sp, #0
10003342:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
10003344:	230f      	movs	r3, #15
10003346:	18fb      	adds	r3, r7, r3
10003348:	2200      	movs	r2, #0
1000334a:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
1000334c:	687b      	ldr	r3, [r7, #4]
1000334e:	7a5b      	ldrb	r3, [r3, #9]
10003350:	2201      	movs	r2, #1
10003352:	4053      	eors	r3, r2
10003354:	b2db      	uxtb	r3, r3
10003356:	2b00      	cmp	r3, #0
10003358:	d011      	beq.n	1000337e <GLOBAL_CAN_Init+0x42>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
1000335a:	687b      	ldr	r3, [r7, #4]
1000335c:	6859      	ldr	r1, [r3, #4]
1000335e:	687b      	ldr	r3, [r7, #4]
10003360:	7a1a      	ldrb	r2, [r3, #8]
10003362:	687b      	ldr	r3, [r7, #4]
10003364:	681b      	ldr	r3, [r3, #0]
10003366:	1c08      	adds	r0, r1, #0
10003368:	1c11      	adds	r1, r2, #0
1000336a:	1c1a      	adds	r2, r3, #0
1000336c:	f7fe fc86 	bl	10001c7c <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
10003370:	687b      	ldr	r3, [r7, #4]
10003372:	2201      	movs	r2, #1
10003374:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
10003376:	230f      	movs	r3, #15
10003378:	18fb      	adds	r3, r7, r3
1000337a:	2200      	movs	r2, #0
1000337c:	701a      	strb	r2, [r3, #0]
  }
  return (status);
1000337e:	230f      	movs	r3, #15
10003380:	18fb      	adds	r3, r7, r3
10003382:	781b      	ldrb	r3, [r3, #0]

}
10003384:	1c18      	adds	r0, r3, #0
10003386:	46bd      	mov	sp, r7
10003388:	b004      	add	sp, #16
1000338a:	bd80      	pop	{r7, pc}

1000338c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
1000338c:	b580      	push	{r7, lr}
1000338e:	b082      	sub	sp, #8
10003390:	af00      	add	r7, sp, #0
10003392:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10003394:	687b      	ldr	r3, [r7, #4]
10003396:	6819      	ldr	r1, [r3, #0]
10003398:	687b      	ldr	r3, [r7, #4]
1000339a:	7b1a      	ldrb	r2, [r3, #12]
1000339c:	687b      	ldr	r3, [r7, #4]
1000339e:	3304      	adds	r3, #4
100033a0:	1c08      	adds	r0, r1, #0
100033a2:	1c11      	adds	r1, r2, #0
100033a4:	1c1a      	adds	r2, r3, #0
100033a6:	f7fd fef7 	bl	10001198 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
100033aa:	687b      	ldr	r3, [r7, #4]
100033ac:	6819      	ldr	r1, [r3, #0]
100033ae:	687b      	ldr	r3, [r7, #4]
100033b0:	7b1a      	ldrb	r2, [r3, #12]
100033b2:	687b      	ldr	r3, [r7, #4]
100033b4:	7b5b      	ldrb	r3, [r3, #13]
100033b6:	1c08      	adds	r0, r1, #0
100033b8:	1c11      	adds	r1, r2, #0
100033ba:	1c1a      	adds	r2, r3, #0
100033bc:	f7ff f906 	bl	100025cc <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
100033c0:	2300      	movs	r3, #0
}
100033c2:	1c18      	adds	r0, r3, #0
100033c4:	46bd      	mov	sp, r7
100033c6:	b002      	add	sp, #8
100033c8:	bd80      	pop	{r7, pc}
100033ca:	46c0      	nop			; (mov r8, r8)

100033cc <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
100033cc:	b580      	push	{r7, lr}
100033ce:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
100033d0:	4b03      	ldr	r3, [pc, #12]	; (100033e0 <SystemCoreSetup+0x14>)
100033d2:	4a03      	ldr	r2, [pc, #12]	; (100033e0 <SystemCoreSetup+0x14>)
100033d4:	6e92      	ldr	r2, [r2, #104]	; 0x68
100033d6:	2101      	movs	r1, #1
100033d8:	438a      	bics	r2, r1
100033da:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
100033dc:	46bd      	mov	sp, r7
100033de:	bd80      	pop	{r7, pc}
100033e0:	40010000 	.word	0x40010000

100033e4 <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
100033e4:	b580      	push	{r7, lr}
100033e6:	b084      	sub	sp, #16
100033e8:	af00      	add	r7, sp, #0
100033ea:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
100033ec:	230f      	movs	r3, #15
100033ee:	18fb      	adds	r3, r7, r3
100033f0:	2200      	movs	r2, #0
100033f2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100033f4:	230e      	movs	r3, #14
100033f6:	18fb      	adds	r3, r7, r3
100033f8:	2200      	movs	r2, #0
100033fa:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
100033fc:	230d      	movs	r3, #13
100033fe:	18fb      	adds	r3, r7, r3
10003400:	2200      	movs	r2, #0
10003402:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10003404:	230c      	movs	r3, #12
10003406:	18fb      	adds	r3, r7, r3
10003408:	2200      	movs	r2, #0
1000340a:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
1000340c:	230b      	movs	r3, #11
1000340e:	18fb      	adds	r3, r7, r3
10003410:	2200      	movs	r2, #0
10003412:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
10003414:	687b      	ldr	r3, [r7, #4]
10003416:	781b      	ldrb	r3, [r3, #0]
10003418:	2201      	movs	r2, #1
1000341a:	4053      	eors	r3, r2
1000341c:	b2db      	uxtb	r3, r3
1000341e:	2b00      	cmp	r3, #0
10003420:	d01b      	beq.n	1000345a <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
10003422:	230e      	movs	r3, #14
10003424:	18fa      	adds	r2, r7, r3
10003426:	230d      	movs	r3, #13
10003428:	18fb      	adds	r3, r7, r3
1000342a:	7812      	ldrb	r2, [r2, #0]
1000342c:	781b      	ldrb	r3, [r3, #0]
1000342e:	4313      	orrs	r3, r2
10003430:	b2da      	uxtb	r2, r3
10003432:	230c      	movs	r3, #12
10003434:	18fb      	adds	r3, r7, r3
10003436:	781b      	ldrb	r3, [r3, #0]
10003438:	4313      	orrs	r3, r2
1000343a:	b2d9      	uxtb	r1, r3
1000343c:	230f      	movs	r3, #15
1000343e:	18fb      	adds	r3, r7, r3
10003440:	220b      	movs	r2, #11
10003442:	18ba      	adds	r2, r7, r2
10003444:	7812      	ldrb	r2, [r2, #0]
10003446:	430a      	orrs	r2, r1
10003448:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
1000344a:	230f      	movs	r3, #15
1000344c:	18fb      	adds	r3, r7, r3
1000344e:	781b      	ldrb	r3, [r3, #0]
10003450:	2b00      	cmp	r3, #0
10003452:	d102      	bne.n	1000345a <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10003454:	687b      	ldr	r3, [r7, #4]
10003456:	2201      	movs	r2, #1
10003458:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
1000345a:	230f      	movs	r3, #15
1000345c:	18fb      	adds	r3, r7, r3
1000345e:	781b      	ldrb	r3, [r3, #0]
}
10003460:	1c18      	adds	r0, r3, #0
10003462:	46bd      	mov	sp, r7
10003464:	b004      	add	sp, #16
10003466:	bd80      	pop	{r7, pc}

10003468 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10003468:	b590      	push	{r4, r7, lr}
1000346a:	b085      	sub	sp, #20
1000346c:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
1000346e:	1c3b      	adds	r3, r7, #0
10003470:	4a05      	ldr	r2, [pc, #20]	; (10003488 <SystemCoreClockSetup+0x20>)
10003472:	ca13      	ldmia	r2!, {r0, r1, r4}
10003474:	c313      	stmia	r3!, {r0, r1, r4}
10003476:	6812      	ldr	r2, [r2, #0]
10003478:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
1000347a:	1c3b      	adds	r3, r7, #0
1000347c:	1c18      	adds	r0, r3, #0
1000347e:	f7fd ffb9 	bl	100013f4 <XMC_SCU_CLOCK_Init>
}
10003482:	46bd      	mov	sp, r7
10003484:	b005      	add	sp, #20
10003486:	bd90      	pop	{r4, r7, pc}
10003488:	1000ca08 	.word	0x1000ca08

1000348c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
1000348c:	b580      	push	{r7, lr}
1000348e:	b082      	sub	sp, #8
10003490:	af00      	add	r7, sp, #0
10003492:	6078      	str	r0, [r7, #4]
10003494:	1c0a      	adds	r2, r1, #0
10003496:	1cfb      	adds	r3, r7, #3
10003498:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
1000349a:	1cfb      	adds	r3, r7, #3
1000349c:	781b      	ldrb	r3, [r3, #0]
1000349e:	2201      	movs	r2, #1
100034a0:	409a      	lsls	r2, r3
100034a2:	687b      	ldr	r3, [r7, #4]
100034a4:	60da      	str	r2, [r3, #12]
}
100034a6:	46bd      	mov	sp, r7
100034a8:	b002      	add	sp, #8
100034aa:	bd80      	pop	{r7, pc}

100034ac <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
100034ac:	b580      	push	{r7, lr}
100034ae:	b082      	sub	sp, #8
100034b0:	af00      	add	r7, sp, #0
100034b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
100034b4:	687b      	ldr	r3, [r7, #4]
100034b6:	2201      	movs	r2, #1
100034b8:	60da      	str	r2, [r3, #12]
}
100034ba:	46bd      	mov	sp, r7
100034bc:	b002      	add	sp, #8
100034be:	bd80      	pop	{r7, pc}

100034c0 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
100034c0:	b580      	push	{r7, lr}
100034c2:	b082      	sub	sp, #8
100034c4:	af00      	add	r7, sp, #0
100034c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
100034c8:	687b      	ldr	r3, [r7, #4]
100034ca:	2202      	movs	r2, #2
100034cc:	611a      	str	r2, [r3, #16]
}
100034ce:	46bd      	mov	sp, r7
100034d0:	b002      	add	sp, #8
100034d2:	bd80      	pop	{r7, pc}

100034d4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
100034d4:	b580      	push	{r7, lr}
100034d6:	b082      	sub	sp, #8
100034d8:	af00      	add	r7, sp, #0
100034da:	6078      	str	r0, [r7, #4]
100034dc:	1c0a      	adds	r2, r1, #0
100034de:	1cbb      	adds	r3, r7, #2
100034e0:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
100034e2:	1cbb      	adds	r3, r7, #2
100034e4:	881a      	ldrh	r2, [r3, #0]
100034e6:	687b      	ldr	r3, [r7, #4]
100034e8:	635a      	str	r2, [r3, #52]	; 0x34
}
100034ea:	46bd      	mov	sp, r7
100034ec:	b002      	add	sp, #8
100034ee:	bd80      	pop	{r7, pc}

100034f0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
100034f0:	b580      	push	{r7, lr}
100034f2:	b082      	sub	sp, #8
100034f4:	af00      	add	r7, sp, #0
100034f6:	6078      	str	r0, [r7, #4]
100034f8:	1c0a      	adds	r2, r1, #0
100034fa:	1cbb      	adds	r3, r7, #2
100034fc:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
100034fe:	1cbb      	adds	r3, r7, #2
10003500:	881a      	ldrh	r2, [r3, #0]
10003502:	687b      	ldr	r3, [r7, #4]
10003504:	63da      	str	r2, [r3, #60]	; 0x3c
}
10003506:	46bd      	mov	sp, r7
10003508:	b002      	add	sp, #8
1000350a:	bd80      	pop	{r7, pc}

1000350c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
1000350c:	b580      	push	{r7, lr}
1000350e:	b082      	sub	sp, #8
10003510:	af00      	add	r7, sp, #0
10003512:	6078      	str	r0, [r7, #4]
10003514:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10003516:	687b      	ldr	r3, [r7, #4]
10003518:	683a      	ldr	r2, [r7, #0]
1000351a:	611a      	str	r2, [r3, #16]
}
1000351c:	46bd      	mov	sp, r7
1000351e:	b002      	add	sp, #8
10003520:	bd80      	pop	{r7, pc}
10003522:	46c0      	nop			; (mov r8, r8)

10003524 <CAPTURE_Init>:
  return version;
}

/* This function initializes a capture APP based on user configuration. */
CAPTURE_STATUS_t CAPTURE_Init(CAPTURE_t *const handler)
{
10003524:	b590      	push	{r4, r7, lr}
10003526:	b085      	sub	sp, #20
10003528:	af00      	add	r7, sp, #0
1000352a:	6078      	str	r0, [r7, #4]
  CAPTURE_STATUS_t status;

  XMC_ASSERT ("CAPTURE_Init:handler NULL", (handler != NULL));

  status = CAPTURE_STATUS_SUCCESS;
1000352c:	230f      	movs	r3, #15
1000352e:	18fb      	adds	r3, r7, r3
10003530:	2200      	movs	r2, #0
10003532:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handler->initialized)
10003534:	687b      	ldr	r3, [r7, #4]
10003536:	2231      	movs	r2, #49	; 0x31
10003538:	5c9b      	ldrb	r3, [r3, r2]
1000353a:	2201      	movs	r2, #1
1000353c:	4053      	eors	r3, r2
1000353e:	b2db      	uxtb	r3, r3
10003540:	2b00      	cmp	r3, #0
10003542:	d038      	beq.n	100035b6 <CAPTURE_Init+0x92>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
10003544:	687b      	ldr	r3, [r7, #4]
10003546:	222d      	movs	r2, #45	; 0x2d
10003548:	5c9b      	ldrb	r3, [r3, r2]
1000354a:	2b00      	cmp	r3, #0
1000354c:	d111      	bne.n	10003572 <CAPTURE_Init+0x4e>
    {
      status = (CAPTURE_STATUS_t) GLOBAL_CCU4_Init (handler->global_ccu4_handler);
1000354e:	687b      	ldr	r3, [r7, #4]
10003550:	695b      	ldr	r3, [r3, #20]
10003552:	220f      	movs	r2, #15
10003554:	18bc      	adds	r4, r7, r2
10003556:	1c18      	adds	r0, r3, #0
10003558:	f7ff fed0 	bl	100032fc <GLOBAL_CCU4_Init>
1000355c:	1c03      	adds	r3, r0, #0
1000355e:	7023      	strb	r3, [r4, #0]
      if (status == CAPTURE_STATUS_SUCCESS)
10003560:	230f      	movs	r3, #15
10003562:	18fb      	adds	r3, r7, r3
10003564:	781b      	ldrb	r3, [r3, #0]
10003566:	2b00      	cmp	r3, #0
10003568:	d103      	bne.n	10003572 <CAPTURE_Init+0x4e>
      {
        /* Configure CCU4 capture for the required time tick settings */
        CAPTURE_CCU4_lInit (handler);
1000356a:	687b      	ldr	r3, [r7, #4]
1000356c:	1c18      	adds	r0, r3, #0
1000356e:	f000 f8fb 	bl	10003768 <CAPTURE_CCU4_lInit>
      }
    }
#endif

#ifdef CAPTURE_GPIO_USED
    if (handler->input != NULL)
10003572:	687b      	ldr	r3, [r7, #4]
10003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003576:	2b00      	cmp	r3, #0
10003578:	d00c      	beq.n	10003594 <CAPTURE_Init+0x70>
    {
      XMC_GPIO_Init (handler->input->port, handler->input->pin, handler->input_pin_config);
1000357a:	687b      	ldr	r3, [r7, #4]
1000357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000357e:	6819      	ldr	r1, [r3, #0]
10003580:	687b      	ldr	r3, [r7, #4]
10003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003584:	791a      	ldrb	r2, [r3, #4]
10003586:	687b      	ldr	r3, [r7, #4]
10003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000358a:	1c08      	adds	r0, r1, #0
1000358c:	1c11      	adds	r1, r2, #0
1000358e:	1c1a      	adds	r2, r3, #0
10003590:	f7fd fe02 	bl	10001198 <XMC_GPIO_Init>

    }
#endif

    /* update the initialization flag as true for particular instance. */
    handler->initialized = true;
10003594:	687b      	ldr	r3, [r7, #4]
10003596:	2231      	movs	r2, #49	; 0x31
10003598:	2101      	movs	r1, #1
1000359a:	5499      	strb	r1, [r3, r2]

    /* Check whether the start of the timer is enabled during initialization or not */
    if (handler->start_control == true)
1000359c:	687b      	ldr	r3, [r7, #4]
1000359e:	222f      	movs	r2, #47	; 0x2f
100035a0:	5c9b      	ldrb	r3, [r3, r2]
100035a2:	2b00      	cmp	r3, #0
100035a4:	d007      	beq.n	100035b6 <CAPTURE_Init+0x92>
    {
      status = CAPTURE_Start(handler);
100035a6:	230f      	movs	r3, #15
100035a8:	18fc      	adds	r4, r7, r3
100035aa:	687b      	ldr	r3, [r7, #4]
100035ac:	1c18      	adds	r0, r3, #0
100035ae:	f000 f809 	bl	100035c4 <CAPTURE_Start>
100035b2:	1c03      	adds	r3, r0, #0
100035b4:	7023      	strb	r3, [r4, #0]
    }
  }

  return (status);
100035b6:	230f      	movs	r3, #15
100035b8:	18fb      	adds	r3, r7, r3
100035ba:	781b      	ldrb	r3, [r3, #0]
}
100035bc:	1c18      	adds	r0, r3, #0
100035be:	46bd      	mov	sp, r7
100035c0:	b005      	add	sp, #20
100035c2:	bd90      	pop	{r4, r7, pc}

100035c4 <CAPTURE_Start>:

/* This function starts the capture timer. */
CAPTURE_STATUS_t CAPTURE_Start(const CAPTURE_t *const handler)
{
100035c4:	b580      	push	{r7, lr}
100035c6:	b084      	sub	sp, #16
100035c8:	af00      	add	r7, sp, #0
100035ca:	6078      	str	r0, [r7, #4]
  CAPTURE_STATUS_t status;

  XMC_ASSERT ("CAPTURE_Start:handler NULL", (handler != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handler->initialized)
100035cc:	687b      	ldr	r3, [r7, #4]
100035ce:	2231      	movs	r2, #49	; 0x31
100035d0:	5c9b      	ldrb	r3, [r3, r2]
100035d2:	2b00      	cmp	r3, #0
100035d4:	d020      	beq.n	10003618 <CAPTURE_Start+0x54>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
100035d6:	687b      	ldr	r3, [r7, #4]
100035d8:	222d      	movs	r2, #45	; 0x2d
100035da:	5c9b      	ldrb	r3, [r3, r2]
100035dc:	2b00      	cmp	r3, #0
100035de:	d116      	bne.n	1000360e <CAPTURE_Start+0x4a>
    {
      (void)handler->ccu4_slice_ptr->CV[0];
100035e0:	687b      	ldr	r3, [r7, #4]
100035e2:	699b      	ldr	r3, [r3, #24]
100035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      (void)handler->ccu4_slice_ptr->CV[1];
100035e6:	687b      	ldr	r3, [r7, #4]
100035e8:	699b      	ldr	r3, [r3, #24]
100035ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      (void)handler->ccu4_slice_ptr->CV[2];
100035ec:	687b      	ldr	r3, [r7, #4]
100035ee:	699b      	ldr	r3, [r3, #24]
100035f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
      (void)handler->ccu4_slice_ptr->CV[3];
100035f2:	687b      	ldr	r3, [r7, #4]
100035f4:	699b      	ldr	r3, [r3, #24]
100035f6:	2280      	movs	r2, #128	; 0x80
100035f8:	589b      	ldr	r3, [r3, r2]

      /* Start the capture manually */
      XMC_CCU4_SLICE_ClearTimer (handler->ccu4_slice_ptr);
100035fa:	687b      	ldr	r3, [r7, #4]
100035fc:	699b      	ldr	r3, [r3, #24]
100035fe:	1c18      	adds	r0, r3, #0
10003600:	f7ff ff5e 	bl	100034c0 <XMC_CCU4_SLICE_ClearTimer>
      /* Start the capture manually */
      XMC_CCU4_SLICE_StartTimer (handler->ccu4_slice_ptr);
10003604:	687b      	ldr	r3, [r7, #4]
10003606:	699b      	ldr	r3, [r3, #24]
10003608:	1c18      	adds	r0, r3, #0
1000360a:	f7ff ff4f 	bl	100034ac <XMC_CCU4_SLICE_StartTimer>
      XMC_CCU8_SLICE_ClearTimer (handler->ccu8_slice_ptr);
      /* Start the capture manually */
      XMC_CCU8_SLICE_StartTimer (handler->ccu8_slice_ptr);
    }
#endif
    status = CAPTURE_STATUS_SUCCESS;
1000360e:	230f      	movs	r3, #15
10003610:	18fb      	adds	r3, r7, r3
10003612:	2200      	movs	r2, #0
10003614:	701a      	strb	r2, [r3, #0]
10003616:	e003      	b.n	10003620 <CAPTURE_Start+0x5c>
    }
#endif
  }
  else
  {
    status = CAPTURE_STATUS_FAILURE;
10003618:	230f      	movs	r3, #15
1000361a:	18fb      	adds	r3, r7, r3
1000361c:	2201      	movs	r2, #1
1000361e:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10003620:	230f      	movs	r3, #15
10003622:	18fb      	adds	r3, r7, r3
10003624:	781b      	ldrb	r3, [r3, #0]
}
10003626:	1c18      	adds	r0, r3, #0
10003628:	46bd      	mov	sp, r7
1000362a:	b004      	add	sp, #16
1000362c:	bd80      	pop	{r7, pc}
1000362e:	46c0      	nop			; (mov r8, r8)

10003630 <CAPTURE_GetCapturedTimeInNanoSec>:
  return (status);
}


CAPTURE_STATUS_t CAPTURE_GetCapturedTimeInNanoSec(const CAPTURE_t *const handler, uint32_t *const captured_time)
{
10003630:	b590      	push	{r4, r7, lr}
10003632:	b087      	sub	sp, #28
10003634:	af00      	add	r7, sp, #0
10003636:	6078      	str	r0, [r7, #4]
10003638:	6039      	str	r1, [r7, #0]
  CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
1000363a:	2317      	movs	r3, #23
1000363c:	18fb      	adds	r3, r7, r3
1000363e:	2200      	movs	r2, #0
10003640:	701a      	strb	r2, [r3, #0]
  CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
10003642:	2316      	movs	r3, #22
10003644:	18fb      	adds	r3, r7, r3
10003646:	2200      	movs	r2, #0
10003648:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT ("CAPTURE_GetCapturedTimeInNanoSec:handler NULL", (handler != NULL));
  XMC_ASSERT ("CAPTURE_GetCapturedTimeInNanoSec:NULL data pointer", (captured_time != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handler->initialized)
1000364a:	687b      	ldr	r3, [r7, #4]
1000364c:	2231      	movs	r2, #49	; 0x31
1000364e:	5c9b      	ldrb	r3, [r3, r2]
10003650:	2b00      	cmp	r3, #0
10003652:	d100      	bne.n	10003656 <CAPTURE_GetCapturedTimeInNanoSec+0x26>
10003654:	e07c      	b.n	10003750 <CAPTURE_GetCapturedTimeInNanoSec+0x120>
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
10003656:	687b      	ldr	r3, [r7, #4]
10003658:	222d      	movs	r2, #45	; 0x2d
1000365a:	5c9b      	ldrb	r3, [r3, r2]
1000365c:	2b00      	cmp	r3, #0
1000365e:	d000      	beq.n	10003662 <CAPTURE_GetCapturedTimeInNanoSec+0x32>
10003660:	e07a      	b.n	10003758 <CAPTURE_GetCapturedTimeInNanoSec+0x128>
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
10003662:	687b      	ldr	r3, [r7, #4]
10003664:	222e      	movs	r2, #46	; 0x2e
10003666:	5c9b      	ldrb	r3, [r3, r2]
10003668:	2b00      	cmp	r3, #0
1000366a:	d004      	beq.n	10003676 <CAPTURE_GetCapturedTimeInNanoSec+0x46>
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
1000366c:	687b      	ldr	r3, [r7, #4]
1000366e:	222e      	movs	r2, #46	; 0x2e
10003670:	5c9b      	ldrb	r3, [r3, r2]
  if (true == handler->initialized)
  {
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
10003672:	2b03      	cmp	r3, #3
10003674:	d14d      	bne.n	10003712 <CAPTURE_GetCapturedTimeInNanoSec+0xe2>
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
      {
        uint32_t captured_time_low_reg = 0U;
10003676:	2300      	movs	r3, #0
10003678:	613b      	str	r3, [r7, #16]
        uint32_t captured_time_high_reg = 0U;
1000367a:	2300      	movs	r3, #0
1000367c:	60fb      	str	r3, [r7, #12]

        status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
1000367e:	687b      	ldr	r3, [r7, #4]
10003680:	699a      	ldr	r2, [r3, #24]
10003682:	2317      	movs	r3, #23
10003684:	18fc      	adds	r4, r7, r3
10003686:	2310      	movs	r3, #16
10003688:	18fb      	adds	r3, r7, r3
1000368a:	1c10      	adds	r0, r2, #0
1000368c:	2100      	movs	r1, #0
1000368e:	1c1a      	adds	r2, r3, #0
10003690:	f000 f99a 	bl	100039c8 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
10003694:	1c03      	adds	r3, r0, #0
10003696:	7023      	strb	r3, [r4, #0]
                                                                  XMC_CCU4_SLICE_CAP_REG_SET_LOW,
                                                                  &captured_time_low_reg);

        status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
10003698:	687b      	ldr	r3, [r7, #4]
1000369a:	699a      	ldr	r2, [r3, #24]
1000369c:	2316      	movs	r3, #22
1000369e:	18fc      	adds	r4, r7, r3
100036a0:	230c      	movs	r3, #12
100036a2:	18fb      	adds	r3, r7, r3
100036a4:	1c10      	adds	r0, r2, #0
100036a6:	2101      	movs	r1, #1
100036a8:	1c1a      	adds	r2, r3, #0
100036aa:	f000 f98d 	bl	100039c8 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
100036ae:	1c03      	adds	r3, r0, #0
100036b0:	7023      	strb	r3, [r4, #0]
                                                                   XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
                                                                   &captured_time_high_reg);

        /*calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_low_reg, true);
100036b2:	687a      	ldr	r2, [r7, #4]
100036b4:	2310      	movs	r3, #16
100036b6:	18fb      	adds	r3, r7, r3
100036b8:	1c10      	adds	r0, r2, #0
100036ba:	1c19      	adds	r1, r3, #0
100036bc:	2201      	movs	r2, #1
100036be:	f000 f8af 	bl	10003820 <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
        captured_time_low_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_time_low_reg);
100036c2:	693b      	ldr	r3, [r7, #16]
100036c4:	687a      	ldr	r2, [r7, #4]
100036c6:	1c10      	adds	r0, r2, #0
100036c8:	1c19      	adds	r1, r3, #0
100036ca:	f000 f911 	bl	100038f0 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
100036ce:	1c03      	adds	r3, r0, #0
100036d0:	613b      	str	r3, [r7, #16]

        /* calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_high_reg, false);
100036d2:	687a      	ldr	r2, [r7, #4]
100036d4:	230c      	movs	r3, #12
100036d6:	18fb      	adds	r3, r7, r3
100036d8:	1c10      	adds	r0, r2, #0
100036da:	1c19      	adds	r1, r3, #0
100036dc:	2200      	movs	r2, #0
100036de:	f000 f89f 	bl	10003820 <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured_time_high_reg**/
        captured_time_high_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_time_high_reg);
100036e2:	68fb      	ldr	r3, [r7, #12]
100036e4:	687a      	ldr	r2, [r7, #4]
100036e6:	1c10      	adds	r0, r2, #0
100036e8:	1c19      	adds	r1, r3, #0
100036ea:	f000 f901 	bl	100038f0 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
100036ee:	1c03      	adds	r3, r0, #0
100036f0:	60fb      	str	r3, [r7, #12]

        /* add both high and lower register value*/
        *captured_time = captured_time_low_reg + captured_time_high_reg;
100036f2:	693a      	ldr	r2, [r7, #16]
100036f4:	68fb      	ldr	r3, [r7, #12]
100036f6:	18d2      	adds	r2, r2, r3
100036f8:	683b      	ldr	r3, [r7, #0]
100036fa:	601a      	str	r2, [r3, #0]

        if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
100036fc:	2316      	movs	r3, #22
100036fe:	18fb      	adds	r3, r7, r3
10003700:	781b      	ldrb	r3, [r3, #0]
10003702:	2b02      	cmp	r3, #2
10003704:	d104      	bne.n	10003710 <CAPTURE_GetCapturedTimeInNanoSec+0xe0>
        {
          status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
10003706:	2317      	movs	r3, #23
10003708:	18fb      	adds	r3, r7, r3
1000370a:	2202      	movs	r2, #2
1000370c:	701a      	strb	r2, [r3, #0]
#ifdef CAPTURE_CCU4_USED
    if (CAPTURE_MODULE_CCU4 == handler->capture_module)
    {
      if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
          (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
      {
1000370e:	e01e      	b.n	1000374e <CAPTURE_GetCapturedTimeInNanoSec+0x11e>
10003710:	e01d      	b.n	1000374e <CAPTURE_GetCapturedTimeInNanoSec+0x11e>
          status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
        }
      }
      else
      {
        status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
10003712:	687b      	ldr	r3, [r7, #4]
10003714:	699a      	ldr	r2, [r3, #24]
10003716:	2317      	movs	r3, #23
10003718:	18fc      	adds	r4, r7, r3
1000371a:	683b      	ldr	r3, [r7, #0]
1000371c:	1c10      	adds	r0, r2, #0
1000371e:	2101      	movs	r1, #1
10003720:	1c1a      	adds	r2, r3, #0
10003722:	f000 f951 	bl	100039c8 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>
10003726:	1c03      	adds	r3, r0, #0
10003728:	7023      	strb	r3, [r4, #0]
                                                                  XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
                                                                  captured_time);

        /* calculate time tick from capture value and pre-scale value of captured register**/
        CAPTURE_lCalculateTimeTickFromTimerValue (handler, captured_time, true);
1000372a:	687a      	ldr	r2, [r7, #4]
1000372c:	683b      	ldr	r3, [r7, #0]
1000372e:	1c10      	adds	r0, r2, #0
10003730:	1c19      	adds	r1, r3, #0
10003732:	2201      	movs	r2, #1
10003734:	f000 f874 	bl	10003820 <CAPTURE_lCalculateTimeTickFromTimerValue>
        /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
        *captured_time = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, *captured_time);
10003738:	683b      	ldr	r3, [r7, #0]
1000373a:	681b      	ldr	r3, [r3, #0]
1000373c:	687a      	ldr	r2, [r7, #4]
1000373e:	1c10      	adds	r0, r2, #0
10003740:	1c19      	adds	r1, r3, #0
10003742:	f000 f8d5 	bl	100038f0 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>
10003746:	1c02      	adds	r2, r0, #0
10003748:	683b      	ldr	r3, [r7, #0]
1000374a:	601a      	str	r2, [r3, #0]
1000374c:	e004      	b.n	10003758 <CAPTURE_GetCapturedTimeInNanoSec+0x128>
1000374e:	e003      	b.n	10003758 <CAPTURE_GetCapturedTimeInNanoSec+0x128>
    }
#endif
  }
  else
  {
    status = CAPTURE_STATUS_FAILURE;
10003750:	2317      	movs	r3, #23
10003752:	18fb      	adds	r3, r7, r3
10003754:	2201      	movs	r2, #1
10003756:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10003758:	2317      	movs	r3, #23
1000375a:	18fb      	adds	r3, r7, r3
1000375c:	781b      	ldrb	r3, [r3, #0]
}
1000375e:	1c18      	adds	r0, r3, #0
10003760:	46bd      	mov	sp, r7
10003762:	b007      	add	sp, #28
10003764:	bd90      	pop	{r4, r7, pc}
10003766:	46c0      	nop			; (mov r8, r8)

10003768 <CAPTURE_CCU4_lInit>:
/*********************************************************************************************************************
* PRIVATE API IMPLEMENTATION
**********************************************************************************************************************/
#ifdef CAPTURE_CCU4_USED
static void CAPTURE_CCU4_lInit(const CAPTURE_t *const handler)
{
10003768:	b580      	push	{r7, lr}
1000376a:	b082      	sub	sp, #8
1000376c:	af00      	add	r7, sp, #0
1000376e:	6078      	str	r0, [r7, #4]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CaptureInit(handler->ccu4_slice_ptr, handler->ccu4_slice_config_ptr);
10003770:	687b      	ldr	r3, [r7, #4]
10003772:	699a      	ldr	r2, [r3, #24]
10003774:	687b      	ldr	r3, [r7, #4]
10003776:	69db      	ldr	r3, [r3, #28]
10003778:	1c10      	adds	r0, r2, #0
1000377a:	1c19      	adds	r1, r3, #0
1000377c:	f7fe fd94 	bl	100022a8 <XMC_CCU4_SLICE_CaptureInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  CAPTURE_CCU4_lShadowTransfer(handler);
10003780:	687b      	ldr	r3, [r7, #4]
10003782:	1c18      	adds	r0, r3, #0
10003784:	f000 f82c 	bl	100037e0 <CAPTURE_CCU4_lShadowTransfer>

  /************Configure External Events***************/
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0, handler->ccu4_event0_ptr);
10003788:	687b      	ldr	r3, [r7, #4]
1000378a:	699a      	ldr	r2, [r3, #24]
1000378c:	687b      	ldr	r3, [r7, #4]
1000378e:	68db      	ldr	r3, [r3, #12]
10003790:	1c10      	adds	r0, r2, #0
10003792:	2101      	movs	r1, #1
10003794:	1c1a      	adds	r2, r3, #0
10003796:	f7fe fddf 	bl	10002358 <XMC_CCU4_SLICE_ConfigureEvent>
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1, handler->ccu4_event1_ptr);
1000379a:	687b      	ldr	r3, [r7, #4]
1000379c:	699a      	ldr	r2, [r3, #24]
1000379e:	687b      	ldr	r3, [r7, #4]
100037a0:	691b      	ldr	r3, [r3, #16]
100037a2:	1c10      	adds	r0, r2, #0
100037a4:	2102      	movs	r1, #2
100037a6:	1c1a      	adds	r2, r3, #0
100037a8:	f7fe fdd6 	bl	10002358 <XMC_CCU4_SLICE_ConfigureEvent>
  XMC_CCU4_SLICE_Capture0Config(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0);
100037ac:	687b      	ldr	r3, [r7, #4]
100037ae:	699b      	ldr	r3, [r3, #24]
100037b0:	1c18      	adds	r0, r3, #0
100037b2:	2101      	movs	r1, #1
100037b4:	f7fe fd9c 	bl	100022f0 <XMC_CCU4_SLICE_Capture0Config>
  XMC_CCU4_SLICE_Capture1Config(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1);
100037b8:	687b      	ldr	r3, [r7, #4]
100037ba:	699b      	ldr	r3, [r3, #24]
100037bc:	1c18      	adds	r0, r3, #0
100037be:	2102      	movs	r1, #2
100037c0:	f7fe fdb0 	bl	10002324 <XMC_CCU4_SLICE_Capture1Config>
    XMC_CCU4_SLICE_EnableEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
  }
  #endif

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handler->global_ccu4_handler->module_ptr, handler->ccu_slice_number);
100037c4:	687b      	ldr	r3, [r7, #4]
100037c6:	695b      	ldr	r3, [r3, #20]
100037c8:	6899      	ldr	r1, [r3, #8]
100037ca:	687b      	ldr	r3, [r7, #4]
100037cc:	222c      	movs	r2, #44	; 0x2c
100037ce:	5c9b      	ldrb	r3, [r3, r2]
100037d0:	1c08      	adds	r0, r1, #0
100037d2:	1c19      	adds	r1, r3, #0
100037d4:	f7ff fe5a 	bl	1000348c <XMC_CCU4_EnableClock>
}
100037d8:	46bd      	mov	sp, r7
100037da:	b002      	add	sp, #8
100037dc:	bd80      	pop	{r7, pc}
100037de:	46c0      	nop			; (mov r8, r8)

100037e0 <CAPTURE_CCU4_lShadowTransfer>:

static void CAPTURE_CCU4_lShadowTransfer(const CAPTURE_t *const handler)
{
100037e0:	b580      	push	{r7, lr}
100037e2:	b082      	sub	sp, #8
100037e4:	af00      	add	r7, sp, #0
100037e6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handler->ccu4_slice_ptr, CAPTURE_PERIOD_16BIT_MAX);
100037e8:	687b      	ldr	r3, [r7, #4]
100037ea:	699b      	ldr	r3, [r3, #24]
100037ec:	4a0b      	ldr	r2, [pc, #44]	; (1000381c <CAPTURE_CCU4_lShadowTransfer+0x3c>)
100037ee:	1c18      	adds	r0, r3, #0
100037f0:	1c11      	adds	r1, r2, #0
100037f2:	f7ff fe6f 	bl	100034d4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handler->ccu4_slice_ptr, 0x0U);
100037f6:	687b      	ldr	r3, [r7, #4]
100037f8:	699b      	ldr	r3, [r3, #24]
100037fa:	1c18      	adds	r0, r3, #0
100037fc:	2100      	movs	r1, #0
100037fe:	f7ff fe77 	bl	100034f0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handler->global_ccu4_handler->module_ptr, handler->shadow_mask);
10003802:	687b      	ldr	r3, [r7, #4]
10003804:	695b      	ldr	r3, [r3, #20]
10003806:	689a      	ldr	r2, [r3, #8]
10003808:	687b      	ldr	r3, [r7, #4]
1000380a:	689b      	ldr	r3, [r3, #8]
1000380c:	1c10      	adds	r0, r2, #0
1000380e:	1c19      	adds	r1, r3, #0
10003810:	f7ff fe7c 	bl	1000350c <XMC_CCU4_EnableShadowTransfer>
}
10003814:	46bd      	mov	sp, r7
10003816:	b002      	add	sp, #8
10003818:	bd80      	pop	{r7, pc}
1000381a:	46c0      	nop			; (mov r8, r8)
1000381c:	0000ffff 	.word	0x0000ffff

10003820 <CAPTURE_lCalculateTimeTickFromTimerValue>:
#endif

static void CAPTURE_lCalculateTimeTickFromTimerValue(const CAPTURE_t *const handler,
                                                     uint32_t *const timer_val_ptr,
                                                     bool is_increment)
{
10003820:	b580      	push	{r7, lr}
10003822:	b08c      	sub	sp, #48	; 0x30
10003824:	af00      	add	r7, sp, #0
10003826:	60f8      	str	r0, [r7, #12]
10003828:	60b9      	str	r1, [r7, #8]
1000382a:	1dfb      	adds	r3, r7, #7
1000382c:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  uint32_t psc_psiv_val = 0U;
1000382e:	2300      	movs	r3, #0
10003830:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool is_float_prescaler = false;
10003832:	232b      	movs	r3, #43	; 0x2b
10003834:	18fb      	adds	r3, r7, r3
10003836:	2200      	movs	r2, #0
10003838:	701a      	strb	r2, [r3, #0]
  uint32_t cxv_captv_val = (uint32_t)((uint32_t)*timer_val_ptr & 0xFFFFU);
1000383a:	68bb      	ldr	r3, [r7, #8]
1000383c:	681b      	ldr	r3, [r3, #0]
1000383e:	041b      	lsls	r3, r3, #16
10003840:	0c1b      	lsrs	r3, r3, #16
10003842:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cxv_fpcv_val = (uint32_t)((uint32_t)*timer_val_ptr >> 16U) & 0xFU;
10003844:	68bb      	ldr	r3, [r7, #8]
10003846:	681b      	ldr	r3, [r3, #0]
10003848:	0c1b      	lsrs	r3, r3, #16
1000384a:	220f      	movs	r2, #15
1000384c:	4013      	ands	r3, r2
1000384e:	61bb      	str	r3, [r7, #24]

  /* Period measured should be added 1 to get actual value*/
  if (is_increment == true)
10003850:	1dfb      	adds	r3, r7, #7
10003852:	781b      	ldrb	r3, [r3, #0]
10003854:	2b00      	cmp	r3, #0
10003856:	d002      	beq.n	1000385e <CAPTURE_lCalculateTimeTickFromTimerValue+0x3e>
  {
    cxv_captv_val = cxv_captv_val + 1U;
10003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000385a:	3301      	adds	r3, #1
1000385c:	627b      	str	r3, [r7, #36]	; 0x24
  }
#ifdef CAPTURE_CCU4_USED
  if (CAPTURE_MODULE_CCU4 == handler->capture_module)
1000385e:	68fb      	ldr	r3, [r7, #12]
10003860:	222d      	movs	r2, #45	; 0x2d
10003862:	5c9b      	ldrb	r3, [r3, r2]
10003864:	2b00      	cmp	r3, #0
10003866:	d112      	bne.n	1000388e <CAPTURE_lCalculateTimeTickFromTimerValue+0x6e>
  {
    psc_psiv_val = handler->ccu4_slice_config_ptr->prescaler_initval;
10003868:	68fb      	ldr	r3, [r7, #12]
1000386a:	69db      	ldr	r3, [r3, #28]
1000386c:	791b      	ldrb	r3, [r3, #4]
1000386e:	071b      	lsls	r3, r3, #28
10003870:	0f1b      	lsrs	r3, r3, #28
10003872:	b2db      	uxtb	r3, r3
10003874:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (handler->ccu4_slice_config_ptr->prescaler_mode == (uint32_t)XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT)
10003876:	68fb      	ldr	r3, [r7, #12]
10003878:	69db      	ldr	r3, [r3, #28]
1000387a:	789b      	ldrb	r3, [r3, #2]
1000387c:	2201      	movs	r2, #1
1000387e:	4013      	ands	r3, r2
10003880:	b2db      	uxtb	r3, r3
10003882:	2b00      	cmp	r3, #0
10003884:	d003      	beq.n	1000388e <CAPTURE_lCalculateTimeTickFromTimerValue+0x6e>
    {
      is_float_prescaler =  true;
10003886:	232b      	movs	r3, #43	; 0x2b
10003888:	18fb      	adds	r3, r7, r3
1000388a:	2201      	movs	r2, #1
1000388c:	701a      	strb	r2, [r3, #0]
      is_float_prescaler =  true;
    }
  }
#endif

  if (is_float_prescaler == true)
1000388e:	232b      	movs	r3, #43	; 0x2b
10003890:	18fb      	adds	r3, r7, r3
10003892:	781b      	ldrb	r3, [r3, #0]
10003894:	2b00      	cmp	r3, #0
10003896:	d023      	beq.n	100038e0 <CAPTURE_lCalculateTimeTickFromTimerValue+0xc0>
  {
    int32_t loop = 0;
10003898:	2300      	movs	r3, #0
1000389a:	623b      	str	r3, [r7, #32]
    uint32_t prescaler_value;
    uint32_t timer_val = 0U;
1000389c:	2300      	movs	r3, #0
1000389e:	61fb      	str	r3, [r7, #28]

    prescaler_value = cxv_fpcv_val - psc_psiv_val;
100038a0:	69ba      	ldr	r2, [r7, #24]
100038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100038a4:	1ad3      	subs	r3, r2, r3
100038a6:	617b      	str	r3, [r7, #20]

    for (loop = (int32_t)prescaler_value; loop > 0; loop--)
100038a8:	697b      	ldr	r3, [r7, #20]
100038aa:	623b      	str	r3, [r7, #32]
100038ac:	e00a      	b.n	100038c4 <CAPTURE_lCalculateTimeTickFromTimerValue+0xa4>
    {
      timer_val = (uint32_t)timer_val << 1U;
100038ae:	69fb      	ldr	r3, [r7, #28]
100038b0:	005b      	lsls	r3, r3, #1
100038b2:	61fb      	str	r3, [r7, #28]
      timer_val += 65535U;
100038b4:	69fb      	ldr	r3, [r7, #28]
100038b6:	4a0d      	ldr	r2, [pc, #52]	; (100038ec <CAPTURE_lCalculateTimeTickFromTimerValue+0xcc>)
100038b8:	4694      	mov	ip, r2
100038ba:	4463      	add	r3, ip
100038bc:	61fb      	str	r3, [r7, #28]
    uint32_t prescaler_value;
    uint32_t timer_val = 0U;

    prescaler_value = cxv_fpcv_val - psc_psiv_val;

    for (loop = (int32_t)prescaler_value; loop > 0; loop--)
100038be:	6a3b      	ldr	r3, [r7, #32]
100038c0:	3b01      	subs	r3, #1
100038c2:	623b      	str	r3, [r7, #32]
100038c4:	6a3b      	ldr	r3, [r7, #32]
100038c6:	2b00      	cmp	r3, #0
100038c8:	dcf1      	bgt.n	100038ae <CAPTURE_lCalculateTimeTickFromTimerValue+0x8e>
    {
      timer_val = (uint32_t)timer_val << 1U;
      timer_val += 65535U;
    }

    timer_val += (uint32_t)(cxv_captv_val * (1UL << prescaler_value));
100038ca:	697b      	ldr	r3, [r7, #20]
100038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100038ce:	409a      	lsls	r2, r3
100038d0:	1c13      	adds	r3, r2, #0
100038d2:	69fa      	ldr	r2, [r7, #28]
100038d4:	18d3      	adds	r3, r2, r3
100038d6:	61fb      	str	r3, [r7, #28]
    *timer_val_ptr = timer_val;
100038d8:	68bb      	ldr	r3, [r7, #8]
100038da:	69fa      	ldr	r2, [r7, #28]
100038dc:	601a      	str	r2, [r3, #0]
100038de:	e002      	b.n	100038e6 <CAPTURE_lCalculateTimeTickFromTimerValue+0xc6>
  }
  else
  {
    *timer_val_ptr = cxv_captv_val;
100038e0:	68bb      	ldr	r3, [r7, #8]
100038e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100038e4:	601a      	str	r2, [r3, #0]
  }
}
100038e6:	46bd      	mov	sp, r7
100038e8:	b00c      	add	sp, #48	; 0x30
100038ea:	bd80      	pop	{r7, pc}
100038ec:	0000ffff 	.word	0x0000ffff

100038f0 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick>:

static uint32_t CAPTURE_lCalculateTimeInNanoSecFromTimerTick(const CAPTURE_t *const handler, uint32_t timer_val)
{
100038f0:	b5b0      	push	{r4, r5, r7, lr}
100038f2:	b08e      	sub	sp, #56	; 0x38
100038f4:	af00      	add	r7, sp, #0
100038f6:	60f8      	str	r0, [r7, #12]
100038f8:	60b9      	str	r1, [r7, #8]
  uint64_t singal_period_long_long;
  uint32_t inv_sig_resolution_in_sec = 1U;
100038fa:	2301      	movs	r3, #1
100038fc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t norm_timer_val;
  uint32_t norm_inv_sig_resolution_in_sec;
  uint32_t min_norm;
  uint32_t psc_psiv_val = 0U;
100038fe:	2300      	movs	r3, #0
10003900:	62fb      	str	r3, [r7, #44]	; 0x2c

#ifdef CAPTURE_CCU4_USED
  if (CAPTURE_MODULE_CCU4 == handler->capture_module)
10003902:	68fb      	ldr	r3, [r7, #12]
10003904:	222d      	movs	r2, #45	; 0x2d
10003906:	5c9b      	ldrb	r3, [r3, r2]
10003908:	2b00      	cmp	r3, #0
1000390a:	d10d      	bne.n	10003928 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x38>
  {
    psc_psiv_val = handler->ccu4_slice_config_ptr->prescaler_initval;
1000390c:	68fb      	ldr	r3, [r7, #12]
1000390e:	69db      	ldr	r3, [r3, #28]
10003910:	791b      	ldrb	r3, [r3, #4]
10003912:	071b      	lsls	r3, r3, #28
10003914:	0f1b      	lsrs	r3, r3, #28
10003916:	b2db      	uxtb	r3, r3
10003918:	62fb      	str	r3, [r7, #44]	; 0x2c
    inv_sig_resolution_in_sec = handler->global_ccu4_handler->module_frequency >> psc_psiv_val;
1000391a:	68fb      	ldr	r3, [r7, #12]
1000391c:	695b      	ldr	r3, [r3, #20]
1000391e:	681a      	ldr	r2, [r3, #0]
10003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10003922:	40da      	lsrs	r2, r3
10003924:	1c13      	adds	r3, r2, #0
10003926:	637b      	str	r3, [r7, #52]	; 0x34
10003928:	68bb      	ldr	r3, [r7, #8]
1000392a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
1000392c:	697b      	ldr	r3, [r7, #20]
1000392e:	2b00      	cmp	r3, #0
10003930:	d101      	bne.n	10003936 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x46>
  {
    return 32U;
10003932:	2320      	movs	r3, #32
10003934:	e004      	b.n	10003940 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x50>
  }
  return __builtin_clz(value);
10003936:	6978      	ldr	r0, [r7, #20]
10003938:	f005 ff94 	bl	10009864 <__clzsi2>
1000393c:	1c03      	adds	r3, r0, #0
1000393e:	b2db      	uxtb	r3, r3
    psc_psiv_val = handler->ccu8_slice_config_ptr->prescaler_initval;
    inv_sig_resolution_in_sec = handler->global_ccu8_handler->module_frequency >> psc_psiv_val;
  }
#endif

  norm_timer_val = (uint32_t)__CLZ(timer_val);
10003940:	62bb      	str	r3, [r7, #40]	; 0x28
10003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003944:	613b      	str	r3, [r7, #16]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
10003946:	693b      	ldr	r3, [r7, #16]
10003948:	2b00      	cmp	r3, #0
1000394a:	d101      	bne.n	10003950 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x60>
  {
    return 32U;
1000394c:	2320      	movs	r3, #32
1000394e:	e004      	b.n	1000395a <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x6a>
  }
  return __builtin_clz(value);
10003950:	6938      	ldr	r0, [r7, #16]
10003952:	f005 ff87 	bl	10009864 <__clzsi2>
10003956:	1c03      	adds	r3, r0, #0
10003958:	b2db      	uxtb	r3, r3
  norm_inv_sig_resolution_in_sec = (uint32_t)__CLZ(inv_sig_resolution_in_sec);
1000395a:	627b      	str	r3, [r7, #36]	; 0x24

  if (norm_timer_val > norm_inv_sig_resolution_in_sec)
1000395c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003960:	429a      	cmp	r2, r3
10003962:	d902      	bls.n	1000396a <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x7a>
  {
    min_norm = norm_inv_sig_resolution_in_sec;
10003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003966:	633b      	str	r3, [r7, #48]	; 0x30
10003968:	e001      	b.n	1000396e <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0x7e>
  }
  else
  {
    min_norm = norm_timer_val;
1000396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000396c:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Normalized the value to get better precision*/
  timer_val = timer_val << min_norm;
1000396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10003970:	68ba      	ldr	r2, [r7, #8]
10003972:	409a      	lsls	r2, r3
10003974:	1c13      	adds	r3, r2, #0
10003976:	60bb      	str	r3, [r7, #8]
  inv_sig_resolution_in_sec = inv_sig_resolution_in_sec << min_norm;
10003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000397a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000397c:	409a      	lsls	r2, r3
1000397e:	1c13      	adds	r3, r2, #0
10003980:	637b      	str	r3, [r7, #52]	; 0x34

  singal_period_long_long = (((uint64_t) timer_val) * 1000000000U) / inv_sig_resolution_in_sec;
10003982:	68bb      	ldr	r3, [r7, #8]
10003984:	603b      	str	r3, [r7, #0]
10003986:	2300      	movs	r3, #0
10003988:	607b      	str	r3, [r7, #4]
1000398a:	6838      	ldr	r0, [r7, #0]
1000398c:	6879      	ldr	r1, [r7, #4]
1000398e:	4a0d      	ldr	r2, [pc, #52]	; (100039c4 <CAPTURE_lCalculateTimeInNanoSecFromTimerTick+0xd4>)
10003990:	2300      	movs	r3, #0
10003992:	f005 ffa5 	bl	100098e0 <__aeabi_lmul>
10003996:	1c02      	adds	r2, r0, #0
10003998:	1c0b      	adds	r3, r1, #0
1000399a:	1c11      	adds	r1, r2, #0
1000399c:	1c1a      	adds	r2, r3, #0
1000399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100039a0:	1c1c      	adds	r4, r3, #0
100039a2:	2300      	movs	r3, #0
100039a4:	1c1d      	adds	r5, r3, #0
100039a6:	1c08      	adds	r0, r1, #0
100039a8:	1c11      	adds	r1, r2, #0
100039aa:	1c22      	adds	r2, r4, #0
100039ac:	1c2b      	adds	r3, r5, #0
100039ae:	f005 ff77 	bl	100098a0 <__aeabi_uldivmod>
100039b2:	1c03      	adds	r3, r0, #0
100039b4:	1c0c      	adds	r4, r1, #0
100039b6:	61bb      	str	r3, [r7, #24]
100039b8:	61fc      	str	r4, [r7, #28]

  return ((uint32_t)singal_period_long_long);
100039ba:	69bb      	ldr	r3, [r7, #24]
}
100039bc:	1c18      	adds	r0, r3, #0
100039be:	46bd      	mov	sp, r7
100039c0:	b00e      	add	sp, #56	; 0x38
100039c2:	bdb0      	pop	{r4, r5, r7, pc}
100039c4:	3b9aca00 	.word	0x3b9aca00

100039c8 <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue>:
#ifdef  CAPTURE_CCU4_USED
/* @brief Retrieves the latest captured timer value from CCU4*/
static CAPTURE_STATUS_t CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(const XMC_CCU4_SLICE_t * const slice,
                                                                         const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                                         uint32_t * const val_ptr)
{
100039c8:	b580      	push	{r7, lr}
100039ca:	b088      	sub	sp, #32
100039cc:	af00      	add	r7, sp, #0
100039ce:	60f8      	str	r0, [r7, #12]
100039d0:	607a      	str	r2, [r7, #4]
100039d2:	230b      	movs	r3, #11
100039d4:	18fb      	adds	r3, r7, r3
100039d6:	1c0a      	adds	r2, r1, #0
100039d8:	701a      	strb	r2, [r3, #0]
              ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) || (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));

  XMC_ASSERT ("CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue:Invalid Extended Capture Mode ",
              ((slice->TC) & CCU4_CC4_TC_ECM_Msk) == 0);

  retval = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
100039da:	231f      	movs	r3, #31
100039dc:	18fb      	adds	r3, r7, r3
100039de:	2202      	movs	r2, #2
100039e0:	701a      	strb	r2, [r3, #0]

  if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
100039e2:	230b      	movs	r3, #11
100039e4:	18fb      	adds	r3, r7, r3
100039e6:	781b      	ldrb	r3, [r3, #0]
100039e8:	2b01      	cmp	r3, #1
100039ea:	d120      	bne.n	10003a2e <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x66>
  {
    /* read capture values*/
    *val_ptr = slice->CV[CAPTURE_SLICE_CAP_REGISTER_3];
100039ec:	68fb      	ldr	r3, [r7, #12]
100039ee:	2280      	movs	r2, #128	; 0x80
100039f0:	589a      	ldr	r2, [r3, r2]
100039f2:	687b      	ldr	r3, [r7, #4]
100039f4:	601a      	str	r2, [r3, #0]
    /* check for new data or full Flag*/
    if ((*val_ptr) & CCU4_CC4_CV_FFL_Msk)
100039f6:	687b      	ldr	r3, [r7, #4]
100039f8:	681a      	ldr	r2, [r3, #0]
100039fa:	2380      	movs	r3, #128	; 0x80
100039fc:	035b      	lsls	r3, r3, #13
100039fe:	4013      	ands	r3, r2
10003a00:	d004      	beq.n	10003a0c <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x44>
    {
      retval = CAPTURE_STATUS_SUCCESS;
10003a02:	231f      	movs	r3, #31
10003a04:	18fb      	adds	r3, r7, r3
10003a06:	2200      	movs	r2, #0
10003a08:	701a      	strb	r2, [r3, #0]
10003a0a:	e02e      	b.n	10003a6a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
    }
    else
    {
      volatile uint32_t capture_reg_value_low;
      capture_reg_value_low = slice->CV[CAPTURE_SLICE_CAP_REGISTER_2];
10003a0c:	68fb      	ldr	r3, [r7, #12]
10003a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10003a10:	61bb      	str	r3, [r7, #24]
      /* check for new data or full Flag*/
      if (capture_reg_value_low & CCU4_CC4_CV_FFL_Msk)
10003a12:	69ba      	ldr	r2, [r7, #24]
10003a14:	2380      	movs	r3, #128	; 0x80
10003a16:	035b      	lsls	r3, r3, #13
10003a18:	4013      	ands	r3, r2
10003a1a:	d007      	beq.n	10003a2c <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x64>
      {
        retval = CAPTURE_STATUS_SUCCESS;
10003a1c:	231f      	movs	r3, #31
10003a1e:	18fb      	adds	r3, r7, r3
10003a20:	2200      	movs	r2, #0
10003a22:	701a      	strb	r2, [r3, #0]
        *val_ptr = capture_reg_value_low;
10003a24:	69ba      	ldr	r2, [r7, #24]
10003a26:	687b      	ldr	r3, [r7, #4]
10003a28:	601a      	str	r2, [r3, #0]
10003a2a:	e01e      	b.n	10003a6a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
10003a2c:	e01d      	b.n	10003a6a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
    }
  }
  else
  {
    /* read capture values*/
    *val_ptr = slice->CV[CAPTURE_SLICE_CAP_REGISTER_1];
10003a2e:	68fb      	ldr	r3, [r7, #12]
10003a30:	6f9a      	ldr	r2, [r3, #120]	; 0x78
10003a32:	687b      	ldr	r3, [r7, #4]
10003a34:	601a      	str	r2, [r3, #0]
    /* check for new data or full Flag*/
    if ((*val_ptr) & CCU4_CC4_CV_FFL_Msk)
10003a36:	687b      	ldr	r3, [r7, #4]
10003a38:	681a      	ldr	r2, [r3, #0]
10003a3a:	2380      	movs	r3, #128	; 0x80
10003a3c:	035b      	lsls	r3, r3, #13
10003a3e:	4013      	ands	r3, r2
10003a40:	d004      	beq.n	10003a4c <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0x84>
    {
      retval = CAPTURE_STATUS_SUCCESS;
10003a42:	231f      	movs	r3, #31
10003a44:	18fb      	adds	r3, r7, r3
10003a46:	2200      	movs	r2, #0
10003a48:	701a      	strb	r2, [r3, #0]
10003a4a:	e00e      	b.n	10003a6a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
    }
    else
    {
      volatile uint32_t capture_reg_value_low;
      capture_reg_value_low = slice->CV[CAPTURE_SLICE_CAP_REGISTER_0];
10003a4c:	68fb      	ldr	r3, [r7, #12]
10003a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10003a50:	617b      	str	r3, [r7, #20]
      /* check for new data or full Flag*/
      if (capture_reg_value_low & CCU4_CC4_CV_FFL_Msk)
10003a52:	697a      	ldr	r2, [r7, #20]
10003a54:	2380      	movs	r3, #128	; 0x80
10003a56:	035b      	lsls	r3, r3, #13
10003a58:	4013      	ands	r3, r2
10003a5a:	d006      	beq.n	10003a6a <CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue+0xa2>
      {
        retval = CAPTURE_STATUS_SUCCESS;
10003a5c:	231f      	movs	r3, #31
10003a5e:	18fb      	adds	r3, r7, r3
10003a60:	2200      	movs	r2, #0
10003a62:	701a      	strb	r2, [r3, #0]
        *val_ptr = capture_reg_value_low;
10003a64:	697a      	ldr	r2, [r7, #20]
10003a66:	687b      	ldr	r3, [r7, #4]
10003a68:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return retval;
10003a6a:	231f      	movs	r3, #31
10003a6c:	18fb      	adds	r3, r7, r3
10003a6e:	781b      	ldrb	r3, [r3, #0]
}
10003a70:	1c18      	adds	r0, r3, #0
10003a72:	46bd      	mov	sp, r7
10003a74:	b008      	add	sp, #32
10003a76:	bd80      	pop	{r7, pc}

10003a78 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
10003a78:	b580      	push	{r7, lr}
10003a7a:	b084      	sub	sp, #16
10003a7c:	af00      	add	r7, sp, #0
10003a7e:	60f8      	str	r0, [r7, #12]
10003a80:	607a      	str	r2, [r7, #4]
10003a82:	230b      	movs	r3, #11
10003a84:	18fb      	adds	r3, r7, r3
10003a86:	1c0a      	adds	r2, r1, #0
10003a88:	701a      	strb	r2, [r3, #0]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
10003a8a:	68fb      	ldr	r3, [r7, #12]
10003a8c:	689b      	ldr	r3, [r3, #8]
10003a8e:	220b      	movs	r2, #11
10003a90:	18ba      	adds	r2, r7, r2
10003a92:	7812      	ldrb	r2, [r2, #0]
10003a94:	2107      	movs	r1, #7
10003a96:	4091      	lsls	r1, r2
10003a98:	1c0a      	adds	r2, r1, #0
10003a9a:	43d2      	mvns	r2, r2
10003a9c:	401a      	ands	r2, r3
10003a9e:	230b      	movs	r3, #11
10003aa0:	18fb      	adds	r3, r7, r3
10003aa2:	781b      	ldrb	r3, [r3, #0]
10003aa4:	6879      	ldr	r1, [r7, #4]
10003aa6:	4099      	lsls	r1, r3
10003aa8:	1c0b      	adds	r3, r1, #0
10003aaa:	431a      	orrs	r2, r3
10003aac:	68fb      	ldr	r3, [r7, #12]
10003aae:	609a      	str	r2, [r3, #8]
}
10003ab0:	46bd      	mov	sp, r7
10003ab2:	b004      	add	sp, #16
10003ab4:	bd80      	pop	{r7, pc}
10003ab6:	46c0      	nop			; (mov r8, r8)

10003ab8 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
10003ab8:	b580      	push	{r7, lr}
10003aba:	b082      	sub	sp, #8
10003abc:	af00      	add	r7, sp, #0
10003abe:	6078      	str	r0, [r7, #4]
10003ac0:	1c0a      	adds	r2, r1, #0
10003ac2:	1cfb      	adds	r3, r7, #3
10003ac4:	701a      	strb	r2, [r3, #0]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10003ac6:	687b      	ldr	r3, [r7, #4]
10003ac8:	68db      	ldr	r3, [r3, #12]
10003aca:	2207      	movs	r2, #7
10003acc:	4393      	bics	r3, r2
10003ace:	1c1a      	adds	r2, r3, #0
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
10003ad0:	1cfb      	adds	r3, r7, #3
10003ad2:	781b      	ldrb	r3, [r3, #0]
10003ad4:	2107      	movs	r1, #7
10003ad6:	400b      	ands	r3, r1
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10003ad8:	431a      	orrs	r2, r3
10003ada:	687b      	ldr	r3, [r7, #4]
10003adc:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
10003ade:	46bd      	mov	sp, r7
10003ae0:	b002      	add	sp, #8
10003ae2:	bd80      	pop	{r7, pc}

10003ae4 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
10003ae4:	b580      	push	{r7, lr}
10003ae6:	b082      	sub	sp, #8
10003ae8:	af00      	add	r7, sp, #0
10003aea:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
10003aec:	687b      	ldr	r3, [r7, #4]
10003aee:	68db      	ldr	r3, [r3, #12]
10003af0:	2280      	movs	r2, #128	; 0x80
10003af2:	0052      	lsls	r2, r2, #1
10003af4:	431a      	orrs	r2, r3
10003af6:	687b      	ldr	r3, [r7, #4]
10003af8:	60da      	str	r2, [r3, #12]
}
10003afa:	46bd      	mov	sp, r7
10003afc:	b002      	add	sp, #8
10003afe:	bd80      	pop	{r7, pc}

10003b00 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10003b00:	b580      	push	{r7, lr}
10003b02:	b082      	sub	sp, #8
10003b04:	af00      	add	r7, sp, #0
10003b06:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
10003b08:	687b      	ldr	r3, [r7, #4]
10003b0a:	681b      	ldr	r3, [r3, #0]
10003b0c:	2240      	movs	r2, #64	; 0x40
10003b0e:	431a      	orrs	r2, r3
10003b10:	687b      	ldr	r3, [r7, #4]
10003b12:	601a      	str	r2, [r3, #0]
}
10003b14:	46bd      	mov	sp, r7
10003b16:	b002      	add	sp, #8
10003b18:	bd80      	pop	{r7, pc}
10003b1a:	46c0      	nop			; (mov r8, r8)

10003b1c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10003b1c:	b580      	push	{r7, lr}
10003b1e:	b082      	sub	sp, #8
10003b20:	af00      	add	r7, sp, #0
10003b22:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10003b24:	687b      	ldr	r3, [r7, #4]
10003b26:	681b      	ldr	r3, [r3, #0]
10003b28:	2240      	movs	r2, #64	; 0x40
10003b2a:	4393      	bics	r3, r2
10003b2c:	1c1a      	adds	r2, r3, #0
10003b2e:	687b      	ldr	r3, [r7, #4]
10003b30:	601a      	str	r2, [r3, #0]
}
10003b32:	46bd      	mov	sp, r7
10003b34:	b002      	add	sp, #8
10003b36:	bd80      	pop	{r7, pc}

10003b38 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
10003b38:	b580      	push	{r7, lr}
10003b3a:	b082      	sub	sp, #8
10003b3c:	af00      	add	r7, sp, #0
10003b3e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
10003b40:	687b      	ldr	r3, [r7, #4]
10003b42:	681b      	ldr	r3, [r3, #0]
10003b44:	2201      	movs	r2, #1
10003b46:	431a      	orrs	r2, r3
10003b48:	687b      	ldr	r3, [r7, #4]
10003b4a:	601a      	str	r2, [r3, #0]
}
10003b4c:	46bd      	mov	sp, r7
10003b4e:	b002      	add	sp, #8
10003b50:	bd80      	pop	{r7, pc}
10003b52:	46c0      	nop			; (mov r8, r8)

10003b54 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
10003b54:	b580      	push	{r7, lr}
10003b56:	b082      	sub	sp, #8
10003b58:	af00      	add	r7, sp, #0
10003b5a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
10003b5c:	687b      	ldr	r3, [r7, #4]
10003b5e:	681b      	ldr	r3, [r3, #0]
10003b60:	2201      	movs	r2, #1
10003b62:	4393      	bics	r3, r2
10003b64:	1c1a      	adds	r2, r3, #0
10003b66:	687b      	ldr	r3, [r7, #4]
10003b68:	601a      	str	r2, [r3, #0]
}
10003b6a:	46bd      	mov	sp, r7
10003b6c:	b002      	add	sp, #8
10003b6e:	bd80      	pop	{r7, pc}

10003b70 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
10003b70:	b580      	push	{r7, lr}
10003b72:	b082      	sub	sp, #8
10003b74:	af00      	add	r7, sp, #0
10003b76:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
10003b78:	687b      	ldr	r3, [r7, #4]
10003b7a:	681b      	ldr	r3, [r3, #0]
10003b7c:	2280      	movs	r2, #128	; 0x80
10003b7e:	4393      	bics	r3, r2
10003b80:	1c1a      	adds	r2, r3, #0
10003b82:	687b      	ldr	r3, [r7, #4]
10003b84:	601a      	str	r2, [r3, #0]
}
10003b86:	46bd      	mov	sp, r7
10003b88:	b002      	add	sp, #8
10003b8a:	bd80      	pop	{r7, pc}

10003b8c <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
10003b8c:	b580      	push	{r7, lr}
10003b8e:	b084      	sub	sp, #16
10003b90:	af00      	add	r7, sp, #0
10003b92:	60f8      	str	r0, [r7, #12]
10003b94:	607a      	str	r2, [r7, #4]
10003b96:	230b      	movs	r3, #11
10003b98:	18fb      	adds	r3, r7, r3
10003b9a:	1c0a      	adds	r2, r1, #0
10003b9c:	701a      	strb	r2, [r3, #0]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
10003b9e:	68fb      	ldr	r3, [r7, #12]
10003ba0:	681b      	ldr	r3, [r3, #0]
10003ba2:	68fa      	ldr	r2, [r7, #12]
10003ba4:	6812      	ldr	r2, [r2, #0]
10003ba6:	6892      	ldr	r2, [r2, #8]
10003ba8:	210b      	movs	r1, #11
10003baa:	1879      	adds	r1, r7, r1
10003bac:	7809      	ldrb	r1, [r1, #0]
10003bae:	2007      	movs	r0, #7
10003bb0:	4088      	lsls	r0, r1
10003bb2:	1c01      	adds	r1, r0, #0
10003bb4:	43c9      	mvns	r1, r1
10003bb6:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
10003bb8:	220b      	movs	r2, #11
10003bba:	18ba      	adds	r2, r7, r2
10003bbc:	7812      	ldrb	r2, [r2, #0]
10003bbe:	6878      	ldr	r0, [r7, #4]
10003bc0:	4090      	lsls	r0, r2
10003bc2:	1c02      	adds	r2, r0, #0

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
10003bc4:	430a      	orrs	r2, r1
10003bc6:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
10003bc8:	46bd      	mov	sp, r7
10003bca:	b004      	add	sp, #16
10003bcc:	bd80      	pop	{r7, pc}
10003bce:	46c0      	nop			; (mov r8, r8)

10003bd0 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
10003bd0:	b580      	push	{r7, lr}
10003bd2:	b082      	sub	sp, #8
10003bd4:	af00      	add	r7, sp, #0
10003bd6:	6078      	str	r0, [r7, #4]
10003bd8:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
10003bda:	687b      	ldr	r3, [r7, #4]
10003bdc:	681b      	ldr	r3, [r3, #0]
10003bde:	687a      	ldr	r2, [r7, #4]
10003be0:	6812      	ldr	r2, [r2, #0]
10003be2:	6811      	ldr	r1, [r2, #0]
10003be4:	683a      	ldr	r2, [r7, #0]
10003be6:	430a      	orrs	r2, r1
10003be8:	601a      	str	r2, [r3, #0]
}
10003bea:	46bd      	mov	sp, r7
10003bec:	b002      	add	sp, #8
10003bee:	bd80      	pop	{r7, pc}

10003bf0 <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
10003bf0:	b580      	push	{r7, lr}
10003bf2:	b082      	sub	sp, #8
10003bf4:	af00      	add	r7, sp, #0
10003bf6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
10003bf8:	687b      	ldr	r3, [r7, #4]
10003bfa:	681a      	ldr	r2, [r3, #0]
10003bfc:	2380      	movs	r3, #128	; 0x80
10003bfe:	029b      	lsls	r3, r3, #10
10003c00:	1c10      	adds	r0, r2, #0
10003c02:	1c19      	adds	r1, r3, #0
10003c04:	f7ff ffe4 	bl	10003bd0 <XMC_CAN_MO_EnableEvent>
}
10003c08:	46bd      	mov	sp, r7
10003c0a:	b002      	add	sp, #8
10003c0c:	bd80      	pop	{r7, pc}
10003c0e:	46c0      	nop			; (mov r8, r8)

10003c10 <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
10003c10:	b580      	push	{r7, lr}
10003c12:	b082      	sub	sp, #8
10003c14:	af00      	add	r7, sp, #0
10003c16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
10003c18:	687b      	ldr	r3, [r7, #4]
10003c1a:	681a      	ldr	r2, [r3, #0]
10003c1c:	2380      	movs	r3, #128	; 0x80
10003c1e:	025b      	lsls	r3, r3, #9
10003c20:	1c10      	adds	r0, r2, #0
10003c22:	1c19      	adds	r1, r3, #0
10003c24:	f7ff ffd4 	bl	10003bd0 <XMC_CAN_MO_EnableEvent>
}
10003c28:	46bd      	mov	sp, r7
10003c2a:	b002      	add	sp, #8
10003c2c:	bd80      	pop	{r7, pc}
10003c2e:	46c0      	nop			; (mov r8, r8)

10003c30 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
10003c30:	b580      	push	{r7, lr}
10003c32:	b084      	sub	sp, #16
10003c34:	af00      	add	r7, sp, #0
10003c36:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
10003c38:	2300      	movs	r3, #0
10003c3a:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
10003c3c:	687b      	ldr	r3, [r7, #4]
10003c3e:	1c18      	adds	r0, r3, #0
10003c40:	f000 f832 	bl	10003ca8 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
10003c44:	687b      	ldr	r3, [r7, #4]
10003c46:	22a4      	movs	r2, #164	; 0xa4
10003c48:	5c9b      	ldrb	r3, [r3, r2]
10003c4a:	2b00      	cmp	r3, #0
10003c4c:	d003      	beq.n	10003c56 <CAN_NODE_SetNodeEvents+0x26>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
10003c4e:	68fb      	ldr	r3, [r7, #12]
10003c50:	2202      	movs	r2, #2
10003c52:	4313      	orrs	r3, r2
10003c54:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
10003c56:	687b      	ldr	r3, [r7, #4]
10003c58:	22a3      	movs	r2, #163	; 0xa3
10003c5a:	5c9b      	ldrb	r3, [r3, r2]
10003c5c:	2b00      	cmp	r3, #0
10003c5e:	d003      	beq.n	10003c68 <CAN_NODE_SetNodeEvents+0x38>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
10003c60:	68fb      	ldr	r3, [r7, #12]
10003c62:	2204      	movs	r2, #4
10003c64:	4313      	orrs	r3, r2
10003c66:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
10003c68:	687b      	ldr	r3, [r7, #4]
10003c6a:	22a5      	movs	r2, #165	; 0xa5
10003c6c:	5c9b      	ldrb	r3, [r3, r2]
10003c6e:	2b00      	cmp	r3, #0
10003c70:	d003      	beq.n	10003c7a <CAN_NODE_SetNodeEvents+0x4a>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
10003c72:	68fb      	ldr	r3, [r7, #12]
10003c74:	2208      	movs	r2, #8
10003c76:	4313      	orrs	r3, r2
10003c78:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
10003c7a:	687b      	ldr	r3, [r7, #4]
10003c7c:	685a      	ldr	r2, [r3, #4]
10003c7e:	68fb      	ldr	r3, [r7, #12]
10003c80:	1c10      	adds	r0, r2, #0
10003c82:	1c19      	adds	r1, r3, #0
10003c84:	f7fe fa6a 	bl	1000215c <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
10003c88:	687b      	ldr	r3, [r7, #4]
10003c8a:	22a6      	movs	r2, #166	; 0xa6
10003c8c:	5c9b      	ldrb	r3, [r3, r2]
10003c8e:	2b00      	cmp	r3, #0
10003c90:	d007      	beq.n	10003ca2 <CAN_NODE_SetNodeEvents+0x72>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
10003c92:	687b      	ldr	r3, [r7, #4]
10003c94:	685a      	ldr	r2, [r3, #4]
10003c96:	2380      	movs	r3, #128	; 0x80
10003c98:	03db      	lsls	r3, r3, #15
10003c9a:	1c10      	adds	r0, r2, #0
10003c9c:	1c19      	adds	r1, r3, #0
10003c9e:	f7fe fa5d 	bl	1000215c <XMC_CAN_NODE_EnableEvent>
  }

}
10003ca2:	46bd      	mov	sp, r7
10003ca4:	b004      	add	sp, #16
10003ca6:	bd80      	pop	{r7, pc}

10003ca8 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
10003ca8:	b580      	push	{r7, lr}
10003caa:	b082      	sub	sp, #8
10003cac:	af00      	add	r7, sp, #0
10003cae:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
10003cb0:	687b      	ldr	r3, [r7, #4]
10003cb2:	6859      	ldr	r1, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
10003cb4:	687b      	ldr	r3, [r7, #4]
10003cb6:	228c      	movs	r2, #140	; 0x8c
10003cb8:	589b      	ldr	r3, [r3, r2]
10003cba:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
10003cbc:	1c08      	adds	r0, r1, #0
10003cbe:	2100      	movs	r1, #0
10003cc0:	1c1a      	adds	r2, r3, #0
10003cc2:	f7ff fed9 	bl	10003a78 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
10003cc6:	687b      	ldr	r3, [r7, #4]
10003cc8:	6859      	ldr	r1, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
10003cca:	687b      	ldr	r3, [r7, #4]
10003ccc:	228c      	movs	r2, #140	; 0x8c
10003cce:	589b      	ldr	r3, [r3, r2]
10003cd0:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
10003cd2:	1c08      	adds	r0, r1, #0
10003cd4:	2104      	movs	r1, #4
10003cd6:	1c1a      	adds	r2, r3, #0
10003cd8:	f7ff fece 	bl	10003a78 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
10003cdc:	687b      	ldr	r3, [r7, #4]
10003cde:	6859      	ldr	r1, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
10003ce0:	687b      	ldr	r3, [r7, #4]
10003ce2:	228c      	movs	r2, #140	; 0x8c
10003ce4:	589b      	ldr	r3, [r3, r2]
10003ce6:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
10003ce8:	1c08      	adds	r0, r1, #0
10003cea:	2108      	movs	r1, #8
10003cec:	1c1a      	adds	r2, r3, #0
10003cee:	f7ff fec3 	bl	10003a78 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
10003cf2:	687b      	ldr	r3, [r7, #4]
10003cf4:	6859      	ldr	r1, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
10003cf6:	687b      	ldr	r3, [r7, #4]
10003cf8:	228c      	movs	r2, #140	; 0x8c
10003cfa:	589b      	ldr	r3, [r3, r2]
10003cfc:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
10003cfe:	1c08      	adds	r0, r1, #0
10003d00:	210c      	movs	r1, #12
10003d02:	1c1a      	adds	r2, r3, #0
10003d04:	f7ff feb8 	bl	10003a78 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
10003d08:	46bd      	mov	sp, r7
10003d0a:	b002      	add	sp, #8
10003d0c:	bd80      	pop	{r7, pc}
10003d0e:	46c0      	nop			; (mov r8, r8)

10003d10 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
10003d10:	b580      	push	{r7, lr}
10003d12:	b082      	sub	sp, #8
10003d14:	af00      	add	r7, sp, #0
10003d16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
10003d18:	687b      	ldr	r3, [r7, #4]
10003d1a:	681b      	ldr	r3, [r3, #0]
10003d1c:	1c18      	adds	r0, r3, #0
10003d1e:	f7fd ffff 	bl	10001d20 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
10003d22:	687b      	ldr	r3, [r7, #4]
10003d24:	79db      	ldrb	r3, [r3, #7]
10003d26:	2b00      	cmp	r3, #0
10003d28:	d00c      	beq.n	10003d44 <CAN_NODE_MO_Init+0x34>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
10003d2a:	687b      	ldr	r3, [r7, #4]
10003d2c:	681a      	ldr	r2, [r3, #0]
10003d2e:	687b      	ldr	r3, [r7, #4]
10003d30:	795b      	ldrb	r3, [r3, #5]
10003d32:	1c10      	adds	r0, r2, #0
10003d34:	2104      	movs	r1, #4
10003d36:	1c1a      	adds	r2, r3, #0
10003d38:	f7ff ff28 	bl	10003b8c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
10003d3c:	687b      	ldr	r3, [r7, #4]
10003d3e:	1c18      	adds	r0, r3, #0
10003d40:	f7ff ff56 	bl	10003bf0 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
10003d44:	687b      	ldr	r3, [r7, #4]
10003d46:	7a1b      	ldrb	r3, [r3, #8]
10003d48:	2b00      	cmp	r3, #0
10003d4a:	d00c      	beq.n	10003d66 <CAN_NODE_MO_Init+0x56>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
10003d4c:	687b      	ldr	r3, [r7, #4]
10003d4e:	681a      	ldr	r2, [r3, #0]
10003d50:	687b      	ldr	r3, [r7, #4]
10003d52:	799b      	ldrb	r3, [r3, #6]
10003d54:	1c10      	adds	r0, r2, #0
10003d56:	2100      	movs	r1, #0
10003d58:	1c1a      	adds	r2, r3, #0
10003d5a:	f7ff ff17 	bl	10003b8c <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
10003d5e:	687b      	ldr	r3, [r7, #4]
10003d60:	1c18      	adds	r0, r3, #0
10003d62:	f7ff ff55 	bl	10003c10 <CAN_NODE_MO_EnableRxEvent>
  }

}
10003d66:	46bd      	mov	sp, r7
10003d68:	b002      	add	sp, #8
10003d6a:	bd80      	pop	{r7, pc}

10003d6c <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
10003d6c:	b590      	push	{r4, r7, lr}
10003d6e:	b085      	sub	sp, #20
10003d70:	af00      	add	r7, sp, #0
10003d72:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10003d74:	230f      	movs	r3, #15
10003d76:	18fb      	adds	r3, r7, r3
10003d78:	2200      	movs	r2, #0
10003d7a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
10003d7c:	687b      	ldr	r3, [r7, #4]
10003d7e:	681b      	ldr	r3, [r3, #0]
10003d80:	220f      	movs	r2, #15
10003d82:	18bc      	adds	r4, r7, r2
10003d84:	1c18      	adds	r0, r3, #0
10003d86:	f7fe f8ad 	bl	10001ee4 <XMC_CAN_MO_Transmit>
10003d8a:	1c03      	adds	r3, r0, #0
10003d8c:	7023      	strb	r3, [r4, #0]
  return (status);
10003d8e:	230f      	movs	r3, #15
10003d90:	18fb      	adds	r3, r7, r3
10003d92:	781b      	ldrb	r3, [r3, #0]
}
10003d94:	1c18      	adds	r0, r3, #0
10003d96:	46bd      	mov	sp, r7
10003d98:	b005      	add	sp, #20
10003d9a:	bd90      	pop	{r4, r7, pc}

10003d9c <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
10003d9c:	b590      	push	{r4, r7, lr}
10003d9e:	b085      	sub	sp, #20
10003da0:	af00      	add	r7, sp, #0
10003da2:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10003da4:	230f      	movs	r3, #15
10003da6:	18fb      	adds	r3, r7, r3
10003da8:	2200      	movs	r2, #0
10003daa:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
10003dac:	687b      	ldr	r3, [r7, #4]
10003dae:	681b      	ldr	r3, [r3, #0]
10003db0:	220f      	movs	r2, #15
10003db2:	18bc      	adds	r4, r7, r2
10003db4:	1c18      	adds	r0, r3, #0
10003db6:	f7fe f8cd 	bl	10001f54 <XMC_CAN_MO_Receive>
10003dba:	1c03      	adds	r3, r0, #0
10003dbc:	7023      	strb	r3, [r4, #0]
  return (status);
10003dbe:	230f      	movs	r3, #15
10003dc0:	18fb      	adds	r3, r7, r3
10003dc2:	781b      	ldrb	r3, [r3, #0]
}
10003dc4:	1c18      	adds	r0, r3, #0
10003dc6:	46bd      	mov	sp, r7
10003dc8:	b005      	add	sp, #20
10003dca:	bd90      	pop	{r4, r7, pc}

10003dcc <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
10003dcc:	b590      	push	{r4, r7, lr}
10003dce:	b085      	sub	sp, #20
10003dd0:	af00      	add	r7, sp, #0
10003dd2:	6078      	str	r0, [r7, #4]
10003dd4:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10003dd6:	230f      	movs	r3, #15
10003dd8:	18fb      	adds	r3, r7, r3
10003dda:	2200      	movs	r2, #0
10003ddc:	701a      	strb	r2, [r3, #0]
  uint32_t *data_pointer = (uint32_t*) array_data;
10003dde:	683b      	ldr	r3, [r7, #0]
10003de0:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
10003de2:	687b      	ldr	r3, [r7, #4]
10003de4:	681b      	ldr	r3, [r3, #0]
10003de6:	68ba      	ldr	r2, [r7, #8]
10003de8:	6812      	ldr	r2, [r2, #0]
10003dea:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
10003dec:	687b      	ldr	r3, [r7, #4]
10003dee:	681b      	ldr	r3, [r3, #0]
10003df0:	68ba      	ldr	r2, [r7, #8]
10003df2:	6852      	ldr	r2, [r2, #4]
10003df4:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
10003df6:	687b      	ldr	r3, [r7, #4]
10003df8:	681b      	ldr	r3, [r3, #0]
10003dfa:	220f      	movs	r2, #15
10003dfc:	18bc      	adds	r4, r7, r2
10003dfe:	1c18      	adds	r0, r3, #0
10003e00:	f7fe f82e 	bl	10001e60 <XMC_CAN_MO_UpdateData>
10003e04:	1c03      	adds	r3, r0, #0
10003e06:	7023      	strb	r3, [r4, #0]
  return (status);
10003e08:	230f      	movs	r3, #15
10003e0a:	18fb      	adds	r3, r7, r3
10003e0c:	781b      	ldrb	r3, [r3, #0]
}
10003e0e:	1c18      	adds	r0, r3, #0
10003e10:	46bd      	mov	sp, r7
10003e12:	b005      	add	sp, #20
10003e14:	bd90      	pop	{r4, r7, pc}
10003e16:	46c0      	nop			; (mov r8, r8)

10003e18 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
10003e18:	b590      	push	{r4, r7, lr}
10003e1a:	b087      	sub	sp, #28
10003e1c:	af00      	add	r7, sp, #0
10003e1e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
10003e20:	2317      	movs	r3, #23
10003e22:	18fb      	adds	r3, r7, r3
10003e24:	2200      	movs	r2, #0
10003e26:	701a      	strb	r2, [r3, #0]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
10003e28:	687b      	ldr	r3, [r7, #4]
10003e2a:	2290      	movs	r2, #144	; 0x90
10003e2c:	589b      	ldr	r3, [r3, r2]
10003e2e:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
10003e30:	687b      	ldr	r3, [r7, #4]
10003e32:	681b      	ldr	r3, [r3, #0]
10003e34:	2217      	movs	r2, #23
10003e36:	18bc      	adds	r4, r7, r2
10003e38:	1c18      	adds	r0, r3, #0
10003e3a:	f7ff fa7f 	bl	1000333c <GLOBAL_CAN_Init>
10003e3e:	1c03      	adds	r3, r0, #0
10003e40:	7023      	strb	r3, [r4, #0]

  if (status == CAN_NODE_STATUS_SUCCESS)
10003e42:	2317      	movs	r3, #23
10003e44:	18fb      	adds	r3, r7, r3
10003e46:	781b      	ldrb	r3, [r3, #0]
10003e48:	2b00      	cmp	r3, #0
10003e4a:	d000      	beq.n	10003e4e <CAN_NODE_Init+0x36>
10003e4c:	e085      	b.n	10003f5a <CAN_NODE_Init+0x142>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
10003e4e:	687b      	ldr	r3, [r7, #4]
10003e50:	685a      	ldr	r2, [r3, #4]
10003e52:	687b      	ldr	r3, [r7, #4]
10003e54:	689b      	ldr	r3, [r3, #8]
10003e56:	1c10      	adds	r0, r2, #0
10003e58:	1c19      	adds	r1, r3, #0
10003e5a:	f7fd fdd5 	bl	10001a08 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
10003e5e:	1e03      	subs	r3, r0, #0
10003e60:	d176      	bne.n	10003f50 <CAN_NODE_Init+0x138>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
10003e62:	687b      	ldr	r3, [r7, #4]
10003e64:	685b      	ldr	r3, [r3, #4]
10003e66:	1c18      	adds	r0, r3, #0
10003e68:	f7ff fe4a 	bl	10003b00 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
10003e6c:	687b      	ldr	r3, [r7, #4]
10003e6e:	685b      	ldr	r3, [r3, #4]
10003e70:	1c18      	adds	r0, r3, #0
10003e72:	f7ff fe61 	bl	10003b38 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
10003e76:	687b      	ldr	r3, [r7, #4]
10003e78:	685b      	ldr	r3, [r3, #4]
10003e7a:	1c18      	adds	r0, r3, #0
10003e7c:	f7ff fe78 	bl	10003b70 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
10003e80:	687b      	ldr	r3, [r7, #4]
10003e82:	22a7      	movs	r2, #167	; 0xa7
10003e84:	5c9b      	ldrb	r3, [r3, r2]
10003e86:	2b00      	cmp	r3, #0
10003e88:	d005      	beq.n	10003e96 <CAN_NODE_Init+0x7e>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
10003e8a:	687b      	ldr	r3, [r7, #4]
10003e8c:	685b      	ldr	r3, [r3, #4]
10003e8e:	1c18      	adds	r0, r3, #0
10003e90:	f7ff fe28 	bl	10003ae4 <XMC_CAN_NODE_EnableLoopBack>
10003e94:	e016      	b.n	10003ec4 <CAN_NODE_Init+0xac>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
10003e96:	687b      	ldr	r3, [r7, #4]
10003e98:	2298      	movs	r2, #152	; 0x98
10003e9a:	589b      	ldr	r3, [r3, r2]
10003e9c:	6818      	ldr	r0, [r3, #0]
10003e9e:	687b      	ldr	r3, [r7, #4]
10003ea0:	2298      	movs	r2, #152	; 0x98
10003ea2:	589b      	ldr	r3, [r3, r2]
10003ea4:	7919      	ldrb	r1, [r3, #4]
10003ea6:	687b      	ldr	r3, [r7, #4]
10003ea8:	229c      	movs	r2, #156	; 0x9c
10003eaa:	589b      	ldr	r3, [r3, r2]
10003eac:	1c1a      	adds	r2, r3, #0
10003eae:	f7fd f973 	bl	10001198 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
10003eb2:	687b      	ldr	r3, [r7, #4]
10003eb4:	6859      	ldr	r1, [r3, #4]
10003eb6:	687b      	ldr	r3, [r7, #4]
10003eb8:	22a0      	movs	r2, #160	; 0xa0
10003eba:	5c9b      	ldrb	r3, [r3, r2]
10003ebc:	1c08      	adds	r0, r1, #0
10003ebe:	1c19      	adds	r1, r3, #0
10003ec0:	f7ff fdfa 	bl	10003ab8 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
10003ec4:	687b      	ldr	r3, [r7, #4]
10003ec6:	1c18      	adds	r0, r3, #0
10003ec8:	f7ff feb2 	bl	10003c30 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
10003ecc:	2300      	movs	r3, #0
10003ece:	613b      	str	r3, [r7, #16]
10003ed0:	e01a      	b.n	10003f08 <CAN_NODE_Init+0xf0>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
10003ed2:	687a      	ldr	r2, [r7, #4]
10003ed4:	693b      	ldr	r3, [r7, #16]
10003ed6:	3302      	adds	r3, #2
10003ed8:	009b      	lsls	r3, r3, #2
10003eda:	18d3      	adds	r3, r2, r3
10003edc:	685b      	ldr	r3, [r3, #4]
10003ede:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
10003ee0:	687b      	ldr	r3, [r7, #4]
10003ee2:	681b      	ldr	r3, [r3, #0]
10003ee4:	6859      	ldr	r1, [r3, #4]
10003ee6:	687b      	ldr	r3, [r7, #4]
10003ee8:	22a1      	movs	r2, #161	; 0xa1
10003eea:	5c9a      	ldrb	r2, [r3, r2]
10003eec:	68bb      	ldr	r3, [r7, #8]
10003eee:	791b      	ldrb	r3, [r3, #4]
10003ef0:	1c08      	adds	r0, r1, #0
10003ef2:	1c11      	adds	r1, r2, #0
10003ef4:	1c1a      	adds	r2, r3, #0
10003ef6:	f7fd fe35 	bl	10001b64 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
10003efa:	68bb      	ldr	r3, [r7, #8]
10003efc:	1c18      	adds	r0, r3, #0
10003efe:	f7ff ff07 	bl	10003d10 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
10003f02:	693b      	ldr	r3, [r7, #16]
10003f04:	3301      	adds	r3, #1
10003f06:	613b      	str	r3, [r7, #16]
10003f08:	687b      	ldr	r3, [r7, #4]
10003f0a:	22a2      	movs	r2, #162	; 0xa2
10003f0c:	5c9b      	ldrb	r3, [r3, r2]
10003f0e:	1e1a      	subs	r2, r3, #0
10003f10:	693b      	ldr	r3, [r7, #16]
10003f12:	429a      	cmp	r2, r3
10003f14:	d8dd      	bhi.n	10003ed2 <CAN_NODE_Init+0xba>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
10003f16:	687b      	ldr	r3, [r7, #4]
10003f18:	685b      	ldr	r3, [r3, #4]
10003f1a:	1c18      	adds	r0, r3, #0
10003f1c:	f7ff fdfe 	bl	10003b1c <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
10003f20:	687b      	ldr	r3, [r7, #4]
10003f22:	685b      	ldr	r3, [r3, #4]
10003f24:	1c18      	adds	r0, r3, #0
10003f26:	f7ff fe15 	bl	10003b54 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
10003f2a:	687b      	ldr	r3, [r7, #4]
10003f2c:	22a7      	movs	r2, #167	; 0xa7
10003f2e:	5c9b      	ldrb	r3, [r3, r2]
10003f30:	2201      	movs	r2, #1
10003f32:	4053      	eors	r3, r2
10003f34:	b2db      	uxtb	r3, r3
10003f36:	2b00      	cmp	r3, #0
10003f38:	d013      	beq.n	10003f62 <CAN_NODE_Init+0x14a>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
10003f3a:	68fb      	ldr	r3, [r7, #12]
10003f3c:	6818      	ldr	r0, [r3, #0]
10003f3e:	68fb      	ldr	r3, [r7, #12]
10003f40:	7919      	ldrb	r1, [r3, #4]
10003f42:	687b      	ldr	r3, [r7, #4]
10003f44:	2294      	movs	r2, #148	; 0x94
10003f46:	589b      	ldr	r3, [r3, r2]
10003f48:	1c1a      	adds	r2, r3, #0
10003f4a:	f7fd f925 	bl	10001198 <XMC_GPIO_Init>
10003f4e:	e008      	b.n	10003f62 <CAN_NODE_Init+0x14a>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
10003f50:	2317      	movs	r3, #23
10003f52:	18fb      	adds	r3, r7, r3
10003f54:	2201      	movs	r2, #1
10003f56:	701a      	strb	r2, [r3, #0]
10003f58:	e003      	b.n	10003f62 <CAN_NODE_Init+0x14a>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
10003f5a:	2317      	movs	r3, #23
10003f5c:	18fb      	adds	r3, r7, r3
10003f5e:	2201      	movs	r2, #1
10003f60:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10003f62:	2317      	movs	r3, #23
10003f64:	18fb      	adds	r3, r7, r3
10003f66:	781b      	ldrb	r3, [r3, #0]
}
10003f68:	1c18      	adds	r0, r3, #0
10003f6a:	46bd      	mov	sp, r7
10003f6c:	b007      	add	sp, #28
10003f6e:	bd90      	pop	{r4, r7, pc}

10003f70 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
10003f70:	b590      	push	{r4, r7, lr}
10003f72:	b083      	sub	sp, #12
10003f74:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10003f76:	1dfb      	adds	r3, r7, #7
10003f78:	2200      	movs	r2, #0
10003f7a:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10003f7c:	1dfc      	adds	r4, r7, #7
10003f7e:	4b8a      	ldr	r3, [pc, #552]	; (100041a8 <DAVE_Init+0x238>)
10003f80:	1c18      	adds	r0, r3, #0
10003f82:	f7ff fa2f 	bl	100033e4 <CLOCK_XMC1_Init>
10003f86:	1c03      	adds	r3, r0, #0
10003f88:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10003f8a:	1dfb      	adds	r3, r7, #7
10003f8c:	781b      	ldrb	r3, [r3, #0]
10003f8e:	2b00      	cmp	r3, #0
10003f90:	d106      	bne.n	10003fa0 <DAVE_Init+0x30>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
10003f92:	1dfc      	adds	r4, r7, #7
10003f94:	4b85      	ldr	r3, [pc, #532]	; (100041ac <DAVE_Init+0x23c>)
10003f96:	1c18      	adds	r0, r3, #0
10003f98:	f7ff ff3e 	bl	10003e18 <CAN_NODE_Init>
10003f9c:	1c03      	adds	r3, r0, #0
10003f9e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10003fa0:	1dfb      	adds	r3, r7, #7
10003fa2:	781b      	ldrb	r3, [r3, #0]
10003fa4:	2b00      	cmp	r3, #0
10003fa6:	d106      	bne.n	10003fb6 <DAVE_Init+0x46>
  {
	 /**  Initialization of INTERRUPT APP instance CAN_RX_ULTRASONIC */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CAN_RX_ULTRASONIC); 
10003fa8:	1dfc      	adds	r4, r7, #7
10003faa:	4b81      	ldr	r3, [pc, #516]	; (100041b0 <DAVE_Init+0x240>)
10003fac:	1c18      	adds	r0, r3, #0
10003fae:	f7ff f85d 	bl	1000306c <INTERRUPT_Init>
10003fb2:	1c03      	adds	r3, r0, #0
10003fb4:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10003fb6:	1dfb      	adds	r3, r7, #7
10003fb8:	781b      	ldrb	r3, [r3, #0]
10003fba:	2b00      	cmp	r3, #0
10003fbc:	d106      	bne.n	10003fcc <DAVE_Init+0x5c>
  {
	 /**  Initialization of PWM APP instance PWM_servo_fl */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_servo_fl); 
10003fbe:	1dfc      	adds	r4, r7, #7
10003fc0:	4b7c      	ldr	r3, [pc, #496]	; (100041b4 <DAVE_Init+0x244>)
10003fc2:	1c18      	adds	r0, r3, #0
10003fc4:	f7fe fe8c 	bl	10002ce0 <PWM_Init>
10003fc8:	1c03      	adds	r3, r0, #0
10003fca:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10003fcc:	1dfb      	adds	r3, r7, #7
10003fce:	781b      	ldrb	r3, [r3, #0]
10003fd0:	2b00      	cmp	r3, #0
10003fd2:	d106      	bne.n	10003fe2 <DAVE_Init+0x72>
  {
	 /**  Initialization of PWM APP instance PWM_servo_fr */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_servo_fr); 
10003fd4:	1dfc      	adds	r4, r7, #7
10003fd6:	4b78      	ldr	r3, [pc, #480]	; (100041b8 <DAVE_Init+0x248>)
10003fd8:	1c18      	adds	r0, r3, #0
10003fda:	f7fe fe81 	bl	10002ce0 <PWM_Init>
10003fde:	1c03      	adds	r3, r0, #0
10003fe0:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10003fe2:	1dfb      	adds	r3, r7, #7
10003fe4:	781b      	ldrb	r3, [r3, #0]
10003fe6:	2b00      	cmp	r3, #0
10003fe8:	d106      	bne.n	10003ff8 <DAVE_Init+0x88>
  {
	 /**  Initialization of PWM APP instance PWM_servo_rl */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_servo_rl); 
10003fea:	1dfc      	adds	r4, r7, #7
10003fec:	4b73      	ldr	r3, [pc, #460]	; (100041bc <DAVE_Init+0x24c>)
10003fee:	1c18      	adds	r0, r3, #0
10003ff0:	f7fe fe76 	bl	10002ce0 <PWM_Init>
10003ff4:	1c03      	adds	r3, r0, #0
10003ff6:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10003ff8:	1dfb      	adds	r3, r7, #7
10003ffa:	781b      	ldrb	r3, [r3, #0]
10003ffc:	2b00      	cmp	r3, #0
10003ffe:	d106      	bne.n	1000400e <DAVE_Init+0x9e>
  {
	 /**  Initialization of PWM APP instance PWM_servo_rr */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_servo_rr); 
10004000:	1dfc      	adds	r4, r7, #7
10004002:	4b6f      	ldr	r3, [pc, #444]	; (100041c0 <DAVE_Init+0x250>)
10004004:	1c18      	adds	r0, r3, #0
10004006:	f7fe fe6b 	bl	10002ce0 <PWM_Init>
1000400a:	1c03      	adds	r3, r0, #0
1000400c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000400e:	1dfb      	adds	r3, r7, #7
10004010:	781b      	ldrb	r3, [r3, #0]
10004012:	2b00      	cmp	r3, #0
10004014:	d106      	bne.n	10004024 <DAVE_Init+0xb4>
  {
	 /**  Initialization of TIMER APP instance TIMER_10us */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_10us); 
10004016:	1dfc      	adds	r4, r7, #7
10004018:	4b6a      	ldr	r3, [pc, #424]	; (100041c4 <DAVE_Init+0x254>)
1000401a:	1c18      	adds	r0, r3, #0
1000401c:	f7fe fc70 	bl	10002900 <TIMER_Init>
10004020:	1c03      	adds	r3, r0, #0
10004022:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004024:	1dfb      	adds	r3, r7, #7
10004026:	781b      	ldrb	r3, [r3, #0]
10004028:	2b00      	cmp	r3, #0
1000402a:	d106      	bne.n	1000403a <DAVE_Init+0xca>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TIMER_10us */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TIMER_10us); 
1000402c:	1dfc      	adds	r4, r7, #7
1000402e:	4b66      	ldr	r3, [pc, #408]	; (100041c8 <DAVE_Init+0x258>)
10004030:	1c18      	adds	r0, r3, #0
10004032:	f7ff f81b 	bl	1000306c <INTERRUPT_Init>
10004036:	1c03      	adds	r3, r0, #0
10004038:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000403a:	1dfb      	adds	r3, r7, #7
1000403c:	781b      	ldrb	r3, [r3, #0]
1000403e:	2b00      	cmp	r3, #0
10004040:	d106      	bne.n	10004050 <DAVE_Init+0xe0>
  {
	 /**  Initialization of CAPTURE APP instance CAPTURE_RC_Steering */
	 init_status = (DAVE_STATUS_t)CAPTURE_Init(&CAPTURE_RC_Steering); 
10004042:	1dfc      	adds	r4, r7, #7
10004044:	4b61      	ldr	r3, [pc, #388]	; (100041cc <DAVE_Init+0x25c>)
10004046:	1c18      	adds	r0, r3, #0
10004048:	f7ff fa6c 	bl	10003524 <CAPTURE_Init>
1000404c:	1c03      	adds	r3, r0, #0
1000404e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004050:	1dfb      	adds	r3, r7, #7
10004052:	781b      	ldrb	r3, [r3, #0]
10004054:	2b00      	cmp	r3, #0
10004056:	d106      	bne.n	10004066 <DAVE_Init+0xf6>
  {
	 /**  Initialization of CAPTURE APP instance CAPTURE_RC_Speed */
	 init_status = (DAVE_STATUS_t)CAPTURE_Init(&CAPTURE_RC_Speed); 
10004058:	1dfc      	adds	r4, r7, #7
1000405a:	4b5d      	ldr	r3, [pc, #372]	; (100041d0 <DAVE_Init+0x260>)
1000405c:	1c18      	adds	r0, r3, #0
1000405e:	f7ff fa61 	bl	10003524 <CAPTURE_Init>
10004062:	1c03      	adds	r3, r0, #0
10004064:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004066:	1dfb      	adds	r3, r7, #7
10004068:	781b      	ldrb	r3, [r3, #0]
1000406a:	2b00      	cmp	r3, #0
1000406c:	d106      	bne.n	1000407c <DAVE_Init+0x10c>
  {
	 /**  Initialization of DIGITAL_IO APP instance RC_no_data_LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RC_no_data_LED); 
1000406e:	1dfc      	adds	r4, r7, #7
10004070:	4b58      	ldr	r3, [pc, #352]	; (100041d4 <DAVE_Init+0x264>)
10004072:	1c18      	adds	r0, r3, #0
10004074:	f7ff f98a 	bl	1000338c <DIGITAL_IO_Init>
10004078:	1c03      	adds	r3, r0, #0
1000407a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000407c:	1dfb      	adds	r3, r7, #7
1000407e:	781b      	ldrb	r3, [r3, #0]
10004080:	2b00      	cmp	r3, #0
10004082:	d106      	bne.n	10004092 <DAVE_Init+0x122>
  {
	 /**  Initialization of TIMER APP instance TIMER_CONTROL */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_CONTROL); 
10004084:	1dfc      	adds	r4, r7, #7
10004086:	4b54      	ldr	r3, [pc, #336]	; (100041d8 <DAVE_Init+0x268>)
10004088:	1c18      	adds	r0, r3, #0
1000408a:	f7fe fc39 	bl	10002900 <TIMER_Init>
1000408e:	1c03      	adds	r3, r0, #0
10004090:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004092:	1dfb      	adds	r3, r7, #7
10004094:	781b      	ldrb	r3, [r3, #0]
10004096:	2b00      	cmp	r3, #0
10004098:	d106      	bne.n	100040a8 <DAVE_Init+0x138>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TIMER_CONTROL */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TIMER_CONTROL); 
1000409a:	1dfc      	adds	r4, r7, #7
1000409c:	4b4f      	ldr	r3, [pc, #316]	; (100041dc <DAVE_Init+0x26c>)
1000409e:	1c18      	adds	r0, r3, #0
100040a0:	f7fe ffe4 	bl	1000306c <INTERRUPT_Init>
100040a4:	1c03      	adds	r3, r0, #0
100040a6:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100040a8:	1dfb      	adds	r3, r7, #7
100040aa:	781b      	ldrb	r3, [r3, #0]
100040ac:	2b00      	cmp	r3, #0
100040ae:	d106      	bne.n	100040be <DAVE_Init+0x14e>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance RC_Connected */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&RC_Connected); 
100040b0:	1dfc      	adds	r4, r7, #7
100040b2:	4b4b      	ldr	r3, [pc, #300]	; (100041e0 <DAVE_Init+0x270>)
100040b4:	1c18      	adds	r0, r3, #0
100040b6:	f7fe fefd 	bl	10002eb4 <PIN_INTERRUPT_Init>
100040ba:	1c03      	adds	r3, r0, #0
100040bc:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100040be:	1dfb      	adds	r3, r7, #7
100040c0:	781b      	ldrb	r3, [r3, #0]
100040c2:	2b00      	cmp	r3, #0
100040c4:	d106      	bne.n	100040d4 <DAVE_Init+0x164>
  {
	 /**  Initialization of DIGITAL_IO APP instance CALC_TIME_INDICATOR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CALC_TIME_INDICATOR); 
100040c6:	1dfc      	adds	r4, r7, #7
100040c8:	4b46      	ldr	r3, [pc, #280]	; (100041e4 <DAVE_Init+0x274>)
100040ca:	1c18      	adds	r0, r3, #0
100040cc:	f7ff f95e 	bl	1000338c <DIGITAL_IO_Init>
100040d0:	1c03      	adds	r3, r0, #0
100040d2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100040d4:	1dfb      	adds	r3, r7, #7
100040d6:	781b      	ldrb	r3, [r3, #0]
100040d8:	2b00      	cmp	r3, #0
100040da:	d106      	bne.n	100040ea <DAVE_Init+0x17a>
  {
	 /**  Initialization of DIGITAL_IO APP instance MODE_001 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MODE_001); 
100040dc:	1dfc      	adds	r4, r7, #7
100040de:	4b42      	ldr	r3, [pc, #264]	; (100041e8 <DAVE_Init+0x278>)
100040e0:	1c18      	adds	r0, r3, #0
100040e2:	f7ff f953 	bl	1000338c <DIGITAL_IO_Init>
100040e6:	1c03      	adds	r3, r0, #0
100040e8:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
100040ea:	1dfb      	adds	r3, r7, #7
100040ec:	781b      	ldrb	r3, [r3, #0]
100040ee:	2b00      	cmp	r3, #0
100040f0:	d106      	bne.n	10004100 <DAVE_Init+0x190>
  {
	 /**  Initialization of DIGITAL_IO APP instance MODE_010 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MODE_010); 
100040f2:	1dfc      	adds	r4, r7, #7
100040f4:	4b3d      	ldr	r3, [pc, #244]	; (100041ec <DAVE_Init+0x27c>)
100040f6:	1c18      	adds	r0, r3, #0
100040f8:	f7ff f948 	bl	1000338c <DIGITAL_IO_Init>
100040fc:	1c03      	adds	r3, r0, #0
100040fe:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004100:	1dfb      	adds	r3, r7, #7
10004102:	781b      	ldrb	r3, [r3, #0]
10004104:	2b00      	cmp	r3, #0
10004106:	d106      	bne.n	10004116 <DAVE_Init+0x1a6>
  {
	 /**  Initialization of DIGITAL_IO APP instance MODE_100 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MODE_100); 
10004108:	1dfc      	adds	r4, r7, #7
1000410a:	4b39      	ldr	r3, [pc, #228]	; (100041f0 <DAVE_Init+0x280>)
1000410c:	1c18      	adds	r0, r3, #0
1000410e:	f7ff f93d 	bl	1000338c <DIGITAL_IO_Init>
10004112:	1c03      	adds	r3, r0, #0
10004114:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004116:	1dfb      	adds	r3, r7, #7
10004118:	781b      	ldrb	r3, [r3, #0]
1000411a:	2b00      	cmp	r3, #0
1000411c:	d106      	bne.n	1000412c <DAVE_Init+0x1bc>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG_0 */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG_0); 
1000411e:	1dfc      	adds	r4, r7, #7
10004120:	4b34      	ldr	r3, [pc, #208]	; (100041f4 <DAVE_Init+0x284>)
10004122:	1c18      	adds	r0, r3, #0
10004124:	f7fe fb28 	bl	10002778 <WATCHDOG_Init>
10004128:	1c03      	adds	r3, r0, #0
1000412a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000412c:	1dfb      	adds	r3, r7, #7
1000412e:	781b      	ldrb	r3, [r3, #0]
10004130:	2b00      	cmp	r3, #0
10004132:	d106      	bne.n	10004142 <DAVE_Init+0x1d2>
  {
	 /**  Initialization of DIGITAL_IO APP instance WATCHDOG_LED_BLUE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&WATCHDOG_LED_BLUE); 
10004134:	1dfc      	adds	r4, r7, #7
10004136:	4b30      	ldr	r3, [pc, #192]	; (100041f8 <DAVE_Init+0x288>)
10004138:	1c18      	adds	r0, r3, #0
1000413a:	f7ff f927 	bl	1000338c <DIGITAL_IO_Init>
1000413e:	1c03      	adds	r3, r0, #0
10004140:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004142:	1dfb      	adds	r3, r7, #7
10004144:	781b      	ldrb	r3, [r3, #0]
10004146:	2b00      	cmp	r3, #0
10004148:	d106      	bne.n	10004158 <DAVE_Init+0x1e8>
  {
	 /**  Initialization of INTERRUPT APP instance CAN_RX_INVERTER */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CAN_RX_INVERTER); 
1000414a:	1dfc      	adds	r4, r7, #7
1000414c:	4b2b      	ldr	r3, [pc, #172]	; (100041fc <DAVE_Init+0x28c>)
1000414e:	1c18      	adds	r0, r3, #0
10004150:	f7fe ff8c 	bl	1000306c <INTERRUPT_Init>
10004154:	1c03      	adds	r3, r0, #0
10004156:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004158:	1dfb      	adds	r3, r7, #7
1000415a:	781b      	ldrb	r3, [r3, #0]
1000415c:	2b00      	cmp	r3, #0
1000415e:	d106      	bne.n	1000416e <DAVE_Init+0x1fe>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance RC_AUX1 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&RC_AUX1); 
10004160:	1dfc      	adds	r4, r7, #7
10004162:	4b27      	ldr	r3, [pc, #156]	; (10004200 <DAVE_Init+0x290>)
10004164:	1c18      	adds	r0, r3, #0
10004166:	f7fe fea5 	bl	10002eb4 <PIN_INTERRUPT_Init>
1000416a:	1c03      	adds	r3, r0, #0
1000416c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
1000416e:	1dfb      	adds	r3, r7, #7
10004170:	781b      	ldrb	r3, [r3, #0]
10004172:	2b00      	cmp	r3, #0
10004174:	d106      	bne.n	10004184 <DAVE_Init+0x214>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_CAN_ERROR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_CAN_ERROR); 
10004176:	1dfc      	adds	r4, r7, #7
10004178:	4b22      	ldr	r3, [pc, #136]	; (10004204 <DAVE_Init+0x294>)
1000417a:	1c18      	adds	r0, r3, #0
1000417c:	f7ff f906 	bl	1000338c <DIGITAL_IO_Init>
10004180:	1c03      	adds	r3, r0, #0
10004182:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10004184:	1dfb      	adds	r3, r7, #7
10004186:	781b      	ldrb	r3, [r3, #0]
10004188:	2b00      	cmp	r3, #0
1000418a:	d106      	bne.n	1000419a <DAVE_Init+0x22a>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_COLLISION_AVOID */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_COLLISION_AVOID); 
1000418c:	1dfc      	adds	r4, r7, #7
1000418e:	4b1e      	ldr	r3, [pc, #120]	; (10004208 <DAVE_Init+0x298>)
10004190:	1c18      	adds	r0, r3, #0
10004192:	f7ff f8fb 	bl	1000338c <DIGITAL_IO_Init>
10004196:	1c03      	adds	r3, r0, #0
10004198:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
1000419a:	1dfb      	adds	r3, r7, #7
1000419c:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
1000419e:	1c18      	adds	r0, r3, #0
100041a0:	46bd      	mov	sp, r7
100041a2:	b003      	add	sp, #12
100041a4:	bd90      	pop	{r4, r7, pc}
100041a6:	46c0      	nop			; (mov r8, r8)
100041a8:	200009dc 	.word	0x200009dc
100041ac:	1000cadc 	.word	0x1000cadc
100041b0:	1000c960 	.word	0x1000c960
100041b4:	200005dc 	.word	0x200005dc
100041b8:	20000610 	.word	0x20000610
100041bc:	20000644 	.word	0x20000644
100041c0:	20000678 	.word	0x20000678
100041c4:	20000584 	.word	0x20000584
100041c8:	1000c968 	.word	0x1000c968
100041cc:	200006e0 	.word	0x200006e0
100041d0:	20000714 	.word	0x20000714
100041d4:	1000c988 	.word	0x1000c988
100041d8:	200005b4 	.word	0x200005b4
100041dc:	1000c970 	.word	0x1000c970
100041e0:	1000c920 	.word	0x1000c920
100041e4:	1000c998 	.word	0x1000c998
100041e8:	1000c9a8 	.word	0x1000c9a8
100041ec:	1000c9b8 	.word	0x1000c9b8
100041f0:	1000c9c8 	.word	0x1000c9c8
100041f4:	20000574 	.word	0x20000574
100041f8:	1000c9d8 	.word	0x1000c9d8
100041fc:	1000c978 	.word	0x1000c978
10004200:	1000c940 	.word	0x1000c940
10004204:	1000c9e8 	.word	0x1000c9e8
10004208:	1000c9f8 	.word	0x1000c9f8

1000420c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
1000420c:	b580      	push	{r7, lr}
1000420e:	b082      	sub	sp, #8
10004210:	af00      	add	r7, sp, #0
10004212:	6078      	str	r0, [r7, #4]
10004214:	1c0a      	adds	r2, r1, #0
10004216:	1cfb      	adds	r3, r7, #3
10004218:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
1000421a:	1cfb      	adds	r3, r7, #3
1000421c:	781b      	ldrb	r3, [r3, #0]
1000421e:	2201      	movs	r2, #1
10004220:	409a      	lsls	r2, r3
10004222:	687b      	ldr	r3, [r7, #4]
10004224:	605a      	str	r2, [r3, #4]
}
10004226:	46bd      	mov	sp, r7
10004228:	b002      	add	sp, #8
1000422a:	bd80      	pop	{r7, pc}

1000422c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
1000422c:	b580      	push	{r7, lr}
1000422e:	b082      	sub	sp, #8
10004230:	af00      	add	r7, sp, #0
10004232:	6078      	str	r0, [r7, #4]
10004234:	1c0a      	adds	r2, r1, #0
10004236:	1cfb      	adds	r3, r7, #3
10004238:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
1000423a:	1cfb      	adds	r3, r7, #3
1000423c:	781b      	ldrb	r3, [r3, #0]
1000423e:	2280      	movs	r2, #128	; 0x80
10004240:	0252      	lsls	r2, r2, #9
10004242:	409a      	lsls	r2, r3
10004244:	687b      	ldr	r3, [r7, #4]
10004246:	605a      	str	r2, [r3, #4]
}
10004248:	46bd      	mov	sp, r7
1000424a:	b002      	add	sp, #8
1000424c:	bd80      	pop	{r7, pc}
1000424e:	46c0      	nop			; (mov r8, r8)

10004250 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10004250:	b580      	push	{r7, lr}
10004252:	b082      	sub	sp, #8
10004254:	af00      	add	r7, sp, #0
10004256:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10004258:	687b      	ldr	r3, [r7, #4]
1000425a:	681a      	ldr	r2, [r3, #0]
1000425c:	687b      	ldr	r3, [r7, #4]
1000425e:	7b1b      	ldrb	r3, [r3, #12]
10004260:	1c10      	adds	r0, r2, #0
10004262:	1c19      	adds	r1, r3, #0
10004264:	f7ff ffd2 	bl	1000420c <XMC_GPIO_SetOutputHigh>
}
10004268:	46bd      	mov	sp, r7
1000426a:	b002      	add	sp, #8
1000426c:	bd80      	pop	{r7, pc}
1000426e:	46c0      	nop			; (mov r8, r8)

10004270 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10004270:	b580      	push	{r7, lr}
10004272:	b082      	sub	sp, #8
10004274:	af00      	add	r7, sp, #0
10004276:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10004278:	687b      	ldr	r3, [r7, #4]
1000427a:	681a      	ldr	r2, [r3, #0]
1000427c:	687b      	ldr	r3, [r7, #4]
1000427e:	7b1b      	ldrb	r3, [r3, #12]
10004280:	1c10      	adds	r0, r2, #0
10004282:	1c19      	adds	r1, r3, #0
10004284:	f7ff ffd2 	bl	1000422c <XMC_GPIO_SetOutputLow>
}
10004288:	46bd      	mov	sp, r7
1000428a:	b002      	add	sp, #8
1000428c:	bd80      	pop	{r7, pc}
1000428e:	46c0      	nop			; (mov r8, r8)

10004290 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
10004290:	b580      	push	{r7, lr}
10004292:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
10004294:	4b02      	ldr	r3, [pc, #8]	; (100042a0 <XMC_WDT_Service+0x10>)
10004296:	4a03      	ldr	r2, [pc, #12]	; (100042a4 <XMC_WDT_Service+0x14>)
10004298:	609a      	str	r2, [r3, #8]
}
1000429a:	46bd      	mov	sp, r7
1000429c:	bd80      	pop	{r7, pc}
1000429e:	46c0      	nop			; (mov r8, r8)
100042a0:	40020000 	.word	0x40020000
100042a4:	abadcafe 	.word	0xabadcafe

100042a8 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
100042a8:	b580      	push	{r7, lr}
100042aa:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
100042ac:	f7ff fff0 	bl	10004290 <XMC_WDT_Service>
}
100042b0:	46bd      	mov	sp, r7
100042b2:	bd80      	pop	{r7, pc}

100042b4 <CAN_reset_distance>:
volatile uint8_t CAN_state_Ultrasonic = 0;
volatile uint16_t Ultrasonic_cm_C = 0;
volatile uint16_t Ultrasonic_cm_L = 0;
volatile uint16_t Ultrasonic_cm_R = 0;

void CAN_reset_distance(uint8_t distance_to_reset[4]){
100042b4:	b580      	push	{r7, lr}
100042b6:	b086      	sub	sp, #24
100042b8:	af00      	add	r7, sp, #0
100042ba:	6078      	str	r0, [r7, #4]
	uint8_t TX[8] ={0};
100042bc:	230c      	movs	r3, #12
100042be:	18fb      	adds	r3, r7, r3
100042c0:	2200      	movs	r2, #0
100042c2:	601a      	str	r2, [r3, #0]
100042c4:	2200      	movs	r2, #0
100042c6:	605a      	str	r2, [r3, #4]
	uint8_t i;
	for(i = 0; i < 4; i++){	TX[i] = distance_to_reset[i];}
100042c8:	2317      	movs	r3, #23
100042ca:	18fb      	adds	r3, r7, r3
100042cc:	2200      	movs	r2, #0
100042ce:	701a      	strb	r2, [r3, #0]
100042d0:	e012      	b.n	100042f8 <CAN_reset_distance+0x44>
100042d2:	2317      	movs	r3, #23
100042d4:	18fb      	adds	r3, r7, r3
100042d6:	781b      	ldrb	r3, [r3, #0]
100042d8:	2217      	movs	r2, #23
100042da:	18ba      	adds	r2, r7, r2
100042dc:	7812      	ldrb	r2, [r2, #0]
100042de:	6879      	ldr	r1, [r7, #4]
100042e0:	188a      	adds	r2, r1, r2
100042e2:	7811      	ldrb	r1, [r2, #0]
100042e4:	220c      	movs	r2, #12
100042e6:	18ba      	adds	r2, r7, r2
100042e8:	54d1      	strb	r1, [r2, r3]
100042ea:	2317      	movs	r3, #23
100042ec:	18fb      	adds	r3, r7, r3
100042ee:	781a      	ldrb	r2, [r3, #0]
100042f0:	2317      	movs	r3, #23
100042f2:	18fb      	adds	r3, r7, r3
100042f4:	3201      	adds	r2, #1
100042f6:	701a      	strb	r2, [r3, #0]
100042f8:	2317      	movs	r3, #23
100042fa:	18fb      	adds	r3, r7, r3
100042fc:	781b      	ldrb	r3, [r3, #0]
100042fe:	2b03      	cmp	r3, #3
10004300:	d9e7      	bls.n	100042d2 <CAN_reset_distance+0x1e>

	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[1], (uint8_t*)TX);
10004302:	4b08      	ldr	r3, [pc, #32]	; (10004324 <CAN_reset_distance+0x70>)
10004304:	691a      	ldr	r2, [r3, #16]
10004306:	230c      	movs	r3, #12
10004308:	18fb      	adds	r3, r7, r3
1000430a:	1c10      	adds	r0, r2, #0
1000430c:	1c19      	adds	r1, r3, #0
1000430e:	f7ff fd5d 	bl	10003dcc <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[1]); //Transmit the data of message object1
10004312:	4b04      	ldr	r3, [pc, #16]	; (10004324 <CAN_reset_distance+0x70>)
10004314:	691b      	ldr	r3, [r3, #16]
10004316:	1c18      	adds	r0, r3, #0
10004318:	f7ff fd28 	bl	10003d6c <CAN_NODE_MO_Transmit>
}
1000431c:	46bd      	mov	sp, r7
1000431e:	b006      	add	sp, #24
10004320:	bd80      	pop	{r7, pc}
10004322:	46c0      	nop			; (mov r8, r8)
10004324:	1000cadc 	.word	0x1000cadc

10004328 <CAN_send_Speeds>:

void CAN_send_Speeds(float Speed_data[4]){
10004328:	b580      	push	{r7, lr}
1000432a:	b084      	sub	sp, #16
1000432c:	af00      	add	r7, sp, #0
1000432e:	6078      	str	r0, [r7, #4]

	int16_t Speeds_int16[4] ={Speed_data[0] *1000, Speed_data[1] *1000, Speed_data[2] *1000, Speed_data[3] *1000}; // in int16_t mm/s converter back on inverter
10004330:	687b      	ldr	r3, [r7, #4]
10004332:	681b      	ldr	r3, [r3, #0]
10004334:	1c18      	adds	r0, r3, #0
10004336:	4926      	ldr	r1, [pc, #152]	; (100043d0 <CAN_send_Speeds+0xa8>)
10004338:	f005 feb8 	bl	1000a0ac <__aeabi_fmul>
1000433c:	1c03      	adds	r3, r0, #0
1000433e:	1c18      	adds	r0, r3, #0
10004340:	f006 f964 	bl	1000a60c <__aeabi_f2iz>
10004344:	1c03      	adds	r3, r0, #0
10004346:	b29a      	uxth	r2, r3
10004348:	2308      	movs	r3, #8
1000434a:	18fb      	adds	r3, r7, r3
1000434c:	801a      	strh	r2, [r3, #0]
1000434e:	687b      	ldr	r3, [r7, #4]
10004350:	3304      	adds	r3, #4
10004352:	681b      	ldr	r3, [r3, #0]
10004354:	1c18      	adds	r0, r3, #0
10004356:	491e      	ldr	r1, [pc, #120]	; (100043d0 <CAN_send_Speeds+0xa8>)
10004358:	f005 fea8 	bl	1000a0ac <__aeabi_fmul>
1000435c:	1c03      	adds	r3, r0, #0
1000435e:	1c18      	adds	r0, r3, #0
10004360:	f006 f954 	bl	1000a60c <__aeabi_f2iz>
10004364:	1c03      	adds	r3, r0, #0
10004366:	b29a      	uxth	r2, r3
10004368:	2308      	movs	r3, #8
1000436a:	18fb      	adds	r3, r7, r3
1000436c:	805a      	strh	r2, [r3, #2]
1000436e:	687b      	ldr	r3, [r7, #4]
10004370:	3308      	adds	r3, #8
10004372:	681b      	ldr	r3, [r3, #0]
10004374:	1c18      	adds	r0, r3, #0
10004376:	4916      	ldr	r1, [pc, #88]	; (100043d0 <CAN_send_Speeds+0xa8>)
10004378:	f005 fe98 	bl	1000a0ac <__aeabi_fmul>
1000437c:	1c03      	adds	r3, r0, #0
1000437e:	1c18      	adds	r0, r3, #0
10004380:	f006 f944 	bl	1000a60c <__aeabi_f2iz>
10004384:	1c03      	adds	r3, r0, #0
10004386:	b29a      	uxth	r2, r3
10004388:	2308      	movs	r3, #8
1000438a:	18fb      	adds	r3, r7, r3
1000438c:	809a      	strh	r2, [r3, #4]
1000438e:	687b      	ldr	r3, [r7, #4]
10004390:	330c      	adds	r3, #12
10004392:	681b      	ldr	r3, [r3, #0]
10004394:	1c18      	adds	r0, r3, #0
10004396:	490e      	ldr	r1, [pc, #56]	; (100043d0 <CAN_send_Speeds+0xa8>)
10004398:	f005 fe88 	bl	1000a0ac <__aeabi_fmul>
1000439c:	1c03      	adds	r3, r0, #0
1000439e:	1c18      	adds	r0, r3, #0
100043a0:	f006 f934 	bl	1000a60c <__aeabi_f2iz>
100043a4:	1c03      	adds	r3, r0, #0
100043a6:	b29a      	uxth	r2, r3
100043a8:	2308      	movs	r3, #8
100043aa:	18fb      	adds	r3, r7, r3
100043ac:	80da      	strh	r2, [r3, #6]

	CAN_NODE_MO_UpdateData((void*) CAN_NODE_0.lmobj_ptr[0], (uint8_t*)Speeds_int16);
100043ae:	4b09      	ldr	r3, [pc, #36]	; (100043d4 <CAN_send_Speeds+0xac>)
100043b0:	68da      	ldr	r2, [r3, #12]
100043b2:	2308      	movs	r3, #8
100043b4:	18fb      	adds	r3, r7, r3
100043b6:	1c10      	adds	r0, r2, #0
100043b8:	1c19      	adds	r1, r3, #0
100043ba:	f7ff fd07 	bl	10003dcc <CAN_NODE_MO_UpdateData>
	CAN_NODE_MO_Transmit((void*) CAN_NODE_0.lmobj_ptr[0]); //Transmit the data of message object1
100043be:	4b05      	ldr	r3, [pc, #20]	; (100043d4 <CAN_send_Speeds+0xac>)
100043c0:	68db      	ldr	r3, [r3, #12]
100043c2:	1c18      	adds	r0, r3, #0
100043c4:	f7ff fcd2 	bl	10003d6c <CAN_NODE_MO_Transmit>

}
100043c8:	46bd      	mov	sp, r7
100043ca:	b004      	add	sp, #16
100043cc:	bd80      	pop	{r7, pc}
100043ce:	46c0      	nop			; (mov r8, r8)
100043d0:	447a0000 	.word	0x447a0000
100043d4:	1000cadc 	.word	0x1000cadc

100043d8 <IRQ3_Handler>:

void CAN_RX_INVERTER_ISR(void) {
100043d8:	b580      	push	{r7, lr}
100043da:	af00      	add	r7, sp, #0
	WATCHDOG_Service();
100043dc:	f7ff ff64 	bl	100042a8 <WATCHDOG_Service>
	DIGITAL_IO_SetOutputLow(&WATCHDOG_LED_BLUE);
100043e0:	4b09      	ldr	r3, [pc, #36]	; (10004408 <IRQ3_Handler+0x30>)
100043e2:	1c18      	adds	r0, r3, #0
100043e4:	f7ff ff44 	bl	10004270 <DIGITAL_IO_SetOutputLow>

	CAN_RX_Inverter_count++;
100043e8:	4b08      	ldr	r3, [pc, #32]	; (1000440c <IRQ3_Handler+0x34>)
100043ea:	781b      	ldrb	r3, [r3, #0]
100043ec:	b2db      	uxtb	r3, r3
100043ee:	3301      	adds	r3, #1
100043f0:	b2da      	uxtb	r2, r3
100043f2:	4b06      	ldr	r3, [pc, #24]	; (1000440c <IRQ3_Handler+0x34>)
100043f4:	701a      	strb	r2, [r3, #0]
	if(CAN_RX_Inverter_count == 4) CAN_RX_Inverter_Read_Data(); // read data after all for have reviced asseumes all 4 are working
100043f6:	4b05      	ldr	r3, [pc, #20]	; (1000440c <IRQ3_Handler+0x34>)
100043f8:	781b      	ldrb	r3, [r3, #0]
100043fa:	b2db      	uxtb	r3, r3
100043fc:	2b04      	cmp	r3, #4
100043fe:	d101      	bne.n	10004404 <IRQ3_Handler+0x2c>
10004400:	f000 f806 	bl	10004410 <CAN_RX_Inverter_Read_Data>
}
10004404:	46bd      	mov	sp, r7
10004406:	bd80      	pop	{r7, pc}
10004408:	1000c9d8 	.word	0x1000c9d8
1000440c:	200009e4 	.word	0x200009e4

10004410 <CAN_RX_Inverter_Read_Data>:

void CAN_RX_Inverter_Read_Data(){
10004410:	b590      	push	{r4, r7, lr}
10004412:	b089      	sub	sp, #36	; 0x24
10004414:	af00      	add	r7, sp, #0
	uint8_t Motor_on_rover;
	for(Motor_on_rover = 0; Motor_on_rover < 4; Motor_on_rover ++){
10004416:	231f      	movs	r3, #31
10004418:	18fb      	adds	r3, r7, r3
1000441a:	2200      	movs	r2, #0
1000441c:	701a      	strb	r2, [r3, #0]
1000441e:	e103      	b.n	10004628 <CAN_RX_Inverter_Read_Data+0x218>
		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[Motor_on_rover + 2]->mo_ptr;
10004420:	231f      	movs	r3, #31
10004422:	18fb      	adds	r3, r7, r3
10004424:	781b      	ldrb	r3, [r3, #0]
10004426:	3302      	adds	r3, #2
10004428:	4a84      	ldr	r2, [pc, #528]	; (1000463c <CAN_RX_Inverter_Read_Data+0x22c>)
1000442a:	3302      	adds	r3, #2
1000442c:	009b      	lsls	r3, r3, #2
1000442e:	18d3      	adds	r3, r2, r3
10004430:	685b      	ldr	r3, [r3, #4]
10004432:	681b      	ldr	r3, [r3, #0]
10004434:	61bb      	str	r3, [r7, #24]
		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[Motor_on_rover + 2]);
10004436:	231f      	movs	r3, #31
10004438:	18fb      	adds	r3, r7, r3
1000443a:	781b      	ldrb	r3, [r3, #0]
1000443c:	3302      	adds	r3, #2
1000443e:	4a7f      	ldr	r2, [pc, #508]	; (1000463c <CAN_RX_Inverter_Read_Data+0x22c>)
10004440:	3302      	adds	r3, #2
10004442:	009b      	lsls	r3, r3, #2
10004444:	18d3      	adds	r3, r2, r3
10004446:	685b      	ldr	r3, [r3, #4]
10004448:	1c18      	adds	r0, r3, #0
1000444a:	f7ff fca7 	bl	10003d9c <CAN_NODE_MO_Receive>

		uint8_t data_RX[8];
		uint8_t i;
		for(i = 0 ; i < 8 ; i ++){
1000444e:	231e      	movs	r3, #30
10004450:	18fb      	adds	r3, r7, r3
10004452:	2200      	movs	r2, #0
10004454:	701a      	strb	r2, [r3, #0]
10004456:	e012      	b.n	1000447e <CAN_RX_Inverter_Read_Data+0x6e>
			 data_RX[i] = lmsgobjct_ptr_1->can_data_byte[i];
10004458:	231e      	movs	r3, #30
1000445a:	18fb      	adds	r3, r7, r3
1000445c:	781b      	ldrb	r3, [r3, #0]
1000445e:	221e      	movs	r2, #30
10004460:	18ba      	adds	r2, r7, r2
10004462:	7812      	ldrb	r2, [r2, #0]
10004464:	69b9      	ldr	r1, [r7, #24]
10004466:	188a      	adds	r2, r1, r2
10004468:	7c11      	ldrb	r1, [r2, #16]
1000446a:	220c      	movs	r2, #12
1000446c:	18ba      	adds	r2, r7, r2
1000446e:	54d1      	strb	r1, [r2, r3]
		XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[Motor_on_rover + 2]->mo_ptr;
		CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[Motor_on_rover + 2]);

		uint8_t data_RX[8];
		uint8_t i;
		for(i = 0 ; i < 8 ; i ++){
10004470:	231e      	movs	r3, #30
10004472:	18fb      	adds	r3, r7, r3
10004474:	781a      	ldrb	r2, [r3, #0]
10004476:	231e      	movs	r3, #30
10004478:	18fb      	adds	r3, r7, r3
1000447a:	3201      	adds	r2, #1
1000447c:	701a      	strb	r2, [r3, #0]
1000447e:	231e      	movs	r3, #30
10004480:	18fb      	adds	r3, r7, r3
10004482:	781b      	ldrb	r3, [r3, #0]
10004484:	2b07      	cmp	r3, #7
10004486:	d9e7      	bls.n	10004458 <CAN_RX_Inverter_Read_Data+0x48>
			 data_RX[i] = lmsgobjct_ptr_1->can_data_byte[i];
		}

		uint8_t Motor_on_rover_RX = (data_RX[0 * 2 + 1] << 8) | data_RX[0 * 2];
10004488:	230c      	movs	r3, #12
1000448a:	18fb      	adds	r3, r7, r3
1000448c:	785b      	ldrb	r3, [r3, #1]
1000448e:	021b      	lsls	r3, r3, #8
10004490:	b2da      	uxtb	r2, r3
10004492:	230c      	movs	r3, #12
10004494:	18fb      	adds	r3, r7, r3
10004496:	781b      	ldrb	r3, [r3, #0]
10004498:	b2db      	uxtb	r3, r3
1000449a:	4313      	orrs	r3, r2
1000449c:	b2da      	uxtb	r2, r3
1000449e:	2317      	movs	r3, #23
100044a0:	18fb      	adds	r3, r7, r3
100044a2:	701a      	strb	r2, [r3, #0]
		if(Motor_on_rover_RX == Motor_on_rover){
100044a4:	2317      	movs	r3, #23
100044a6:	18fa      	adds	r2, r7, r3
100044a8:	231f      	movs	r3, #31
100044aa:	18fb      	adds	r3, r7, r3
100044ac:	7812      	ldrb	r2, [r2, #0]
100044ae:	781b      	ldrb	r3, [r3, #0]
100044b0:	429a      	cmp	r2, r3
100044b2:	d000      	beq.n	100044b6 <CAN_RX_Inverter_Read_Data+0xa6>
100044b4:	e0ad      	b.n	10004612 <CAN_RX_Inverter_Read_Data+0x202>
			DIGITAL_IO_SetOutputLow(&LED_CAN_ERROR);
100044b6:	4b62      	ldr	r3, [pc, #392]	; (10004640 <CAN_RX_Inverter_Read_Data+0x230>)
100044b8:	1c18      	adds	r0, r3, #0
100044ba:	f7ff fed9 	bl	10004270 <DIGITAL_IO_SetOutputLow>

			uint8_t i;
			int16_t values_int16[3] = {0};
100044be:	1d3b      	adds	r3, r7, #4
100044c0:	2200      	movs	r2, #0
100044c2:	601a      	str	r2, [r3, #0]
100044c4:	2200      	movs	r2, #0
100044c6:	809a      	strh	r2, [r3, #4]
			for(i = 1 ; i < 4 ; i ++){
100044c8:	231d      	movs	r3, #29
100044ca:	18fb      	adds	r3, r7, r3
100044cc:	2201      	movs	r2, #1
100044ce:	701a      	strb	r2, [r3, #0]
100044d0:	e06b      	b.n	100045aa <CAN_RX_Inverter_Read_Data+0x19a>
				 if(i == 1) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
100044d2:	231d      	movs	r3, #29
100044d4:	18fb      	adds	r3, r7, r3
100044d6:	781b      	ldrb	r3, [r3, #0]
100044d8:	2b01      	cmp	r3, #1
100044da:	d11c      	bne.n	10004516 <CAN_RX_Inverter_Read_Data+0x106>
100044dc:	231d      	movs	r3, #29
100044de:	18fb      	adds	r3, r7, r3
100044e0:	781b      	ldrb	r3, [r3, #0]
100044e2:	1e5a      	subs	r2, r3, #1
100044e4:	231d      	movs	r3, #29
100044e6:	18fb      	adds	r3, r7, r3
100044e8:	781b      	ldrb	r3, [r3, #0]
100044ea:	005b      	lsls	r3, r3, #1
100044ec:	3301      	adds	r3, #1
100044ee:	210c      	movs	r1, #12
100044f0:	1879      	adds	r1, r7, r1
100044f2:	5ccb      	ldrb	r3, [r1, r3]
100044f4:	021b      	lsls	r3, r3, #8
100044f6:	b298      	uxth	r0, r3
100044f8:	231d      	movs	r3, #29
100044fa:	18fb      	adds	r3, r7, r3
100044fc:	781b      	ldrb	r3, [r3, #0]
100044fe:	005b      	lsls	r3, r3, #1
10004500:	210c      	movs	r1, #12
10004502:	1879      	adds	r1, r7, r1
10004504:	5ccb      	ldrb	r3, [r1, r3]
10004506:	b29b      	uxth	r3, r3
10004508:	1c01      	adds	r1, r0, #0
1000450a:	430b      	orrs	r3, r1
1000450c:	b299      	uxth	r1, r3
1000450e:	1d3b      	adds	r3, r7, #4
10004510:	0052      	lsls	r2, r2, #1
10004512:	52d1      	strh	r1, [r2, r3]
10004514:	e042      	b.n	1000459c <CAN_RX_Inverter_Read_Data+0x18c>
				 else if(i == 2) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
10004516:	231d      	movs	r3, #29
10004518:	18fb      	adds	r3, r7, r3
1000451a:	781b      	ldrb	r3, [r3, #0]
1000451c:	2b02      	cmp	r3, #2
1000451e:	d11c      	bne.n	1000455a <CAN_RX_Inverter_Read_Data+0x14a>
10004520:	231d      	movs	r3, #29
10004522:	18fb      	adds	r3, r7, r3
10004524:	781b      	ldrb	r3, [r3, #0]
10004526:	1e5a      	subs	r2, r3, #1
10004528:	231d      	movs	r3, #29
1000452a:	18fb      	adds	r3, r7, r3
1000452c:	781b      	ldrb	r3, [r3, #0]
1000452e:	005b      	lsls	r3, r3, #1
10004530:	3301      	adds	r3, #1
10004532:	210c      	movs	r1, #12
10004534:	1879      	adds	r1, r7, r1
10004536:	5ccb      	ldrb	r3, [r1, r3]
10004538:	021b      	lsls	r3, r3, #8
1000453a:	b298      	uxth	r0, r3
1000453c:	231d      	movs	r3, #29
1000453e:	18fb      	adds	r3, r7, r3
10004540:	781b      	ldrb	r3, [r3, #0]
10004542:	005b      	lsls	r3, r3, #1
10004544:	210c      	movs	r1, #12
10004546:	1879      	adds	r1, r7, r1
10004548:	5ccb      	ldrb	r3, [r1, r3]
1000454a:	b29b      	uxth	r3, r3
1000454c:	1c01      	adds	r1, r0, #0
1000454e:	430b      	orrs	r3, r1
10004550:	b299      	uxth	r1, r3
10004552:	1d3b      	adds	r3, r7, #4
10004554:	0052      	lsls	r2, r2, #1
10004556:	52d1      	strh	r1, [r2, r3]
10004558:	e020      	b.n	1000459c <CAN_RX_Inverter_Read_Data+0x18c>
				 else if(i == 3) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
1000455a:	231d      	movs	r3, #29
1000455c:	18fb      	adds	r3, r7, r3
1000455e:	781b      	ldrb	r3, [r3, #0]
10004560:	2b03      	cmp	r3, #3
10004562:	d11b      	bne.n	1000459c <CAN_RX_Inverter_Read_Data+0x18c>
10004564:	231d      	movs	r3, #29
10004566:	18fb      	adds	r3, r7, r3
10004568:	781b      	ldrb	r3, [r3, #0]
1000456a:	1e5a      	subs	r2, r3, #1
1000456c:	231d      	movs	r3, #29
1000456e:	18fb      	adds	r3, r7, r3
10004570:	781b      	ldrb	r3, [r3, #0]
10004572:	005b      	lsls	r3, r3, #1
10004574:	3301      	adds	r3, #1
10004576:	210c      	movs	r1, #12
10004578:	1879      	adds	r1, r7, r1
1000457a:	5ccb      	ldrb	r3, [r1, r3]
1000457c:	021b      	lsls	r3, r3, #8
1000457e:	b298      	uxth	r0, r3
10004580:	231d      	movs	r3, #29
10004582:	18fb      	adds	r3, r7, r3
10004584:	781b      	ldrb	r3, [r3, #0]
10004586:	005b      	lsls	r3, r3, #1
10004588:	210c      	movs	r1, #12
1000458a:	1879      	adds	r1, r7, r1
1000458c:	5ccb      	ldrb	r3, [r1, r3]
1000458e:	b29b      	uxth	r3, r3
10004590:	1c01      	adds	r1, r0, #0
10004592:	430b      	orrs	r3, r1
10004594:	b299      	uxth	r1, r3
10004596:	1d3b      	adds	r3, r7, #4
10004598:	0052      	lsls	r2, r2, #1
1000459a:	52d1      	strh	r1, [r2, r3]
		if(Motor_on_rover_RX == Motor_on_rover){
			DIGITAL_IO_SetOutputLow(&LED_CAN_ERROR);

			uint8_t i;
			int16_t values_int16[3] = {0};
			for(i = 1 ; i < 4 ; i ++){
1000459c:	231d      	movs	r3, #29
1000459e:	18fb      	adds	r3, r7, r3
100045a0:	781a      	ldrb	r2, [r3, #0]
100045a2:	231d      	movs	r3, #29
100045a4:	18fb      	adds	r3, r7, r3
100045a6:	3201      	adds	r2, #1
100045a8:	701a      	strb	r2, [r3, #0]
100045aa:	231d      	movs	r3, #29
100045ac:	18fb      	adds	r3, r7, r3
100045ae:	781b      	ldrb	r3, [r3, #0]
100045b0:	2b03      	cmp	r3, #3
100045b2:	d98e      	bls.n	100044d2 <CAN_RX_Inverter_Read_Data+0xc2>
				 if(i == 1) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
				 else if(i == 2) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
				 else if(i == 3) values_int16[i - 1] = (data_RX[i * 2 + 1] << 8) | data_RX[i * 2];
			 }

			Inveter_CAN_OK[Motor_on_rover] = values_int16[0];
100045b4:	231f      	movs	r3, #31
100045b6:	18fb      	adds	r3, r7, r3
100045b8:	781b      	ldrb	r3, [r3, #0]
100045ba:	1d3a      	adds	r2, r7, #4
100045bc:	8812      	ldrh	r2, [r2, #0]
100045be:	b2d1      	uxtb	r1, r2
100045c0:	4a20      	ldr	r2, [pc, #128]	; (10004644 <CAN_RX_Inverter_Read_Data+0x234>)
100045c2:	54d1      	strb	r1, [r2, r3]
			Actual_Speeds[Motor_on_rover] = (float)values_int16[1] / 1000;
100045c4:	231f      	movs	r3, #31
100045c6:	18fb      	adds	r3, r7, r3
100045c8:	781c      	ldrb	r4, [r3, #0]
100045ca:	1d3b      	adds	r3, r7, #4
100045cc:	885b      	ldrh	r3, [r3, #2]
100045ce:	b21b      	sxth	r3, r3
100045d0:	1c18      	adds	r0, r3, #0
100045d2:	f006 f83b 	bl	1000a64c <__aeabi_i2f>
100045d6:	1c03      	adds	r3, r0, #0
100045d8:	1c18      	adds	r0, r3, #0
100045da:	491b      	ldr	r1, [pc, #108]	; (10004648 <CAN_RX_Inverter_Read_Data+0x238>)
100045dc:	f005 fb74 	bl	10009cc8 <__aeabi_fdiv>
100045e0:	1c03      	adds	r3, r0, #0
100045e2:	1c19      	adds	r1, r3, #0
100045e4:	4b19      	ldr	r3, [pc, #100]	; (1000464c <CAN_RX_Inverter_Read_Data+0x23c>)
100045e6:	00a2      	lsls	r2, r4, #2
100045e8:	50d1      	str	r1, [r2, r3]
			Actual_Distance[Motor_on_rover] = (float)values_int16[2] / 1000;
100045ea:	231f      	movs	r3, #31
100045ec:	18fb      	adds	r3, r7, r3
100045ee:	781c      	ldrb	r4, [r3, #0]
100045f0:	1d3b      	adds	r3, r7, #4
100045f2:	889b      	ldrh	r3, [r3, #4]
100045f4:	b21b      	sxth	r3, r3
100045f6:	1c18      	adds	r0, r3, #0
100045f8:	f006 f828 	bl	1000a64c <__aeabi_i2f>
100045fc:	1c03      	adds	r3, r0, #0
100045fe:	1c18      	adds	r0, r3, #0
10004600:	4911      	ldr	r1, [pc, #68]	; (10004648 <CAN_RX_Inverter_Read_Data+0x238>)
10004602:	f005 fb61 	bl	10009cc8 <__aeabi_fdiv>
10004606:	1c03      	adds	r3, r0, #0
10004608:	1c19      	adds	r1, r3, #0
1000460a:	4b11      	ldr	r3, [pc, #68]	; (10004650 <CAN_RX_Inverter_Read_Data+0x240>)
1000460c:	00a2      	lsls	r2, r4, #2
1000460e:	50d1      	str	r1, [r2, r3]
10004610:	e003      	b.n	1000461a <CAN_RX_Inverter_Read_Data+0x20a>


			}
		else DIGITAL_IO_SetOutputHigh(&LED_CAN_ERROR);
10004612:	4b0b      	ldr	r3, [pc, #44]	; (10004640 <CAN_RX_Inverter_Read_Data+0x230>)
10004614:	1c18      	adds	r0, r3, #0
10004616:	f7ff fe1b 	bl	10004250 <DIGITAL_IO_SetOutputHigh>
	if(CAN_RX_Inverter_count == 4) CAN_RX_Inverter_Read_Data(); // read data after all for have reviced asseumes all 4 are working
}

void CAN_RX_Inverter_Read_Data(){
	uint8_t Motor_on_rover;
	for(Motor_on_rover = 0; Motor_on_rover < 4; Motor_on_rover ++){
1000461a:	231f      	movs	r3, #31
1000461c:	18fb      	adds	r3, r7, r3
1000461e:	781a      	ldrb	r2, [r3, #0]
10004620:	231f      	movs	r3, #31
10004622:	18fb      	adds	r3, r7, r3
10004624:	3201      	adds	r2, #1
10004626:	701a      	strb	r2, [r3, #0]
10004628:	231f      	movs	r3, #31
1000462a:	18fb      	adds	r3, r7, r3
1000462c:	781b      	ldrb	r3, [r3, #0]
1000462e:	2b03      	cmp	r3, #3
10004630:	d800      	bhi.n	10004634 <CAN_RX_Inverter_Read_Data+0x224>
10004632:	e6f5      	b.n	10004420 <CAN_RX_Inverter_Read_Data+0x10>

			}
		else DIGITAL_IO_SetOutputHigh(&LED_CAN_ERROR);
	}

}
10004634:	46bd      	mov	sp, r7
10004636:	b009      	add	sp, #36	; 0x24
10004638:	bd90      	pop	{r4, r7, pc}
1000463a:	46c0      	nop			; (mov r8, r8)
1000463c:	1000cadc 	.word	0x1000cadc
10004640:	1000c9e8 	.word	0x1000c9e8
10004644:	200009e0 	.word	0x200009e0
10004648:	447a0000 	.word	0x447a0000
1000464c:	20000a50 	.word	0x20000a50
10004650:	20000a60 	.word	0x20000a60

10004654 <IRQ4_Handler>:


void CAN_RX_ULTRASONIC_ISR(void) { // recide data
10004654:	b580      	push	{r7, lr}
10004656:	b084      	sub	sp, #16
10004658:	af00      	add	r7, sp, #0
	XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
1000465a:	4b3a      	ldr	r3, [pc, #232]	; (10004744 <IRQ4_Handler+0xf0>)
1000465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000465e:	681b      	ldr	r3, [r3, #0]
10004660:	60bb      	str	r3, [r7, #8]
	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]);
10004662:	4b38      	ldr	r3, [pc, #224]	; (10004744 <IRQ4_Handler+0xf0>)
10004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004666:	1c18      	adds	r0, r3, #0
10004668:	f7ff fb98 	bl	10003d9c <CAN_NODE_MO_Receive>

	uint8_t data_RX[8];
	uint8_t i;
	for(i = 0 ; i < 8 ; i ++){
1000466c:	230f      	movs	r3, #15
1000466e:	18fb      	adds	r3, r7, r3
10004670:	2200      	movs	r2, #0
10004672:	701a      	strb	r2, [r3, #0]
10004674:	e011      	b.n	1000469a <IRQ4_Handler+0x46>
		 data_RX[i] = lmsgobjct_ptr_1->can_data_byte[i];
10004676:	230f      	movs	r3, #15
10004678:	18fb      	adds	r3, r7, r3
1000467a:	781b      	ldrb	r3, [r3, #0]
1000467c:	220f      	movs	r2, #15
1000467e:	18ba      	adds	r2, r7, r2
10004680:	7812      	ldrb	r2, [r2, #0]
10004682:	68b9      	ldr	r1, [r7, #8]
10004684:	188a      	adds	r2, r1, r2
10004686:	7c11      	ldrb	r1, [r2, #16]
10004688:	1c3a      	adds	r2, r7, #0
1000468a:	54d1      	strb	r1, [r2, r3]
	XMC_CAN_MO_t* lmsgobjct_ptr_1 = CAN_NODE_0.lmobj_ptr[6]->mo_ptr;
	CAN_NODE_MO_Receive((void*) CAN_NODE_0.lmobj_ptr[6]);

	uint8_t data_RX[8];
	uint8_t i;
	for(i = 0 ; i < 8 ; i ++){
1000468c:	230f      	movs	r3, #15
1000468e:	18fb      	adds	r3, r7, r3
10004690:	781a      	ldrb	r2, [r3, #0]
10004692:	230f      	movs	r3, #15
10004694:	18fb      	adds	r3, r7, r3
10004696:	3201      	adds	r2, #1
10004698:	701a      	strb	r2, [r3, #0]
1000469a:	230f      	movs	r3, #15
1000469c:	18fb      	adds	r3, r7, r3
1000469e:	781b      	ldrb	r3, [r3, #0]
100046a0:	2b07      	cmp	r3, #7
100046a2:	d9e8      	bls.n	10004676 <IRQ4_Handler+0x22>
		 data_RX[i] = lmsgobjct_ptr_1->can_data_byte[i];
	}

	CAN_state_Ultrasonic = (data_RX[0 * 2 + 1] << 8) | data_RX[0 * 2];
100046a4:	1c3b      	adds	r3, r7, #0
100046a6:	785b      	ldrb	r3, [r3, #1]
100046a8:	021b      	lsls	r3, r3, #8
100046aa:	b2da      	uxtb	r2, r3
100046ac:	1c3b      	adds	r3, r7, #0
100046ae:	781b      	ldrb	r3, [r3, #0]
100046b0:	b2db      	uxtb	r3, r3
100046b2:	4313      	orrs	r3, r2
100046b4:	b2db      	uxtb	r3, r3
100046b6:	b2da      	uxtb	r2, r3
100046b8:	4b23      	ldr	r3, [pc, #140]	; (10004748 <IRQ4_Handler+0xf4>)
100046ba:	701a      	strb	r2, [r3, #0]
	Ultrasonic_cm_C = (data_RX[1 * 2 + 1] << 8) | data_RX[1 * 2];
100046bc:	1c3b      	adds	r3, r7, #0
100046be:	78db      	ldrb	r3, [r3, #3]
100046c0:	021b      	lsls	r3, r3, #8
100046c2:	b29a      	uxth	r2, r3
100046c4:	1c3b      	adds	r3, r7, #0
100046c6:	789b      	ldrb	r3, [r3, #2]
100046c8:	b29b      	uxth	r3, r3
100046ca:	4313      	orrs	r3, r2
100046cc:	b29b      	uxth	r3, r3
100046ce:	b29a      	uxth	r2, r3
100046d0:	4b1e      	ldr	r3, [pc, #120]	; (1000474c <IRQ4_Handler+0xf8>)
100046d2:	801a      	strh	r2, [r3, #0]
	Ultrasonic_cm_L = (data_RX[2 * 2 + 1] << 8) | data_RX[2 * 2];
100046d4:	1c3b      	adds	r3, r7, #0
100046d6:	795b      	ldrb	r3, [r3, #5]
100046d8:	021b      	lsls	r3, r3, #8
100046da:	b29a      	uxth	r2, r3
100046dc:	1c3b      	adds	r3, r7, #0
100046de:	791b      	ldrb	r3, [r3, #4]
100046e0:	b29b      	uxth	r3, r3
100046e2:	4313      	orrs	r3, r2
100046e4:	b29b      	uxth	r3, r3
100046e6:	b29a      	uxth	r2, r3
100046e8:	4b19      	ldr	r3, [pc, #100]	; (10004750 <IRQ4_Handler+0xfc>)
100046ea:	801a      	strh	r2, [r3, #0]
	Ultrasonic_cm_R = (data_RX[3 * 2 + 1] << 8) | data_RX[3 * 2];
100046ec:	1c3b      	adds	r3, r7, #0
100046ee:	79db      	ldrb	r3, [r3, #7]
100046f0:	021b      	lsls	r3, r3, #8
100046f2:	b29a      	uxth	r2, r3
100046f4:	1c3b      	adds	r3, r7, #0
100046f6:	799b      	ldrb	r3, [r3, #6]
100046f8:	b29b      	uxth	r3, r3
100046fa:	4313      	orrs	r3, r2
100046fc:	b29b      	uxth	r3, r3
100046fe:	b29a      	uxth	r2, r3
10004700:	4b14      	ldr	r3, [pc, #80]	; (10004754 <IRQ4_Handler+0x100>)
10004702:	801a      	strh	r2, [r3, #0]

	Ultra_sonic_filter(Ultrasonic_cm_C,  Ultrasonic_cm_L,  Ultrasonic_cm_R,   ALPHA_ULTARSONIC);
10004704:	4b11      	ldr	r3, [pc, #68]	; (1000474c <IRQ4_Handler+0xf8>)
10004706:	881b      	ldrh	r3, [r3, #0]
10004708:	b29b      	uxth	r3, r3
1000470a:	b298      	uxth	r0, r3
1000470c:	4b10      	ldr	r3, [pc, #64]	; (10004750 <IRQ4_Handler+0xfc>)
1000470e:	881b      	ldrh	r3, [r3, #0]
10004710:	b29b      	uxth	r3, r3
10004712:	b299      	uxth	r1, r3
10004714:	4b0f      	ldr	r3, [pc, #60]	; (10004754 <IRQ4_Handler+0x100>)
10004716:	881b      	ldrh	r3, [r3, #0]
10004718:	b29b      	uxth	r3, r3
1000471a:	b29a      	uxth	r2, r3
1000471c:	4b0e      	ldr	r3, [pc, #56]	; (10004758 <IRQ4_Handler+0x104>)
1000471e:	681b      	ldr	r3, [r3, #0]
10004720:	b200      	sxth	r0, r0
10004722:	b209      	sxth	r1, r1
10004724:	b212      	sxth	r2, r2
10004726:	f001 fbd3 	bl	10005ed0 <Ultra_sonic_filter>

	CAN_Ultrasonic_No_messasge_count = 0;
1000472a:	4b0c      	ldr	r3, [pc, #48]	; (1000475c <IRQ4_Handler+0x108>)
1000472c:	2200      	movs	r2, #0
1000472e:	701a      	strb	r2, [r3, #0]

	WATCHDOG_Service();
10004730:	f7ff fdba 	bl	100042a8 <WATCHDOG_Service>
	DIGITAL_IO_SetOutputLow(&WATCHDOG_LED_BLUE);
10004734:	4b0a      	ldr	r3, [pc, #40]	; (10004760 <IRQ4_Handler+0x10c>)
10004736:	1c18      	adds	r0, r3, #0
10004738:	f7ff fd9a 	bl	10004270 <DIGITAL_IO_SetOutputLow>
}
1000473c:	46bd      	mov	sp, r7
1000473e:	b004      	add	sp, #16
10004740:	bd80      	pop	{r7, pc}
10004742:	46c0      	nop			; (mov r8, r8)
10004744:	1000cadc 	.word	0x1000cadc
10004748:	200009e5 	.word	0x200009e5
1000474c:	200009e6 	.word	0x200009e6
10004750:	200009e8 	.word	0x200009e8
10004754:	200009ea 	.word	0x200009ea
10004758:	2000082c 	.word	0x2000082c
1000475c:	20000828 	.word	0x20000828
10004760:	1000c9d8 	.word	0x1000c9d8

10004764 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10004764:	b580      	push	{r7, lr}
10004766:	b082      	sub	sp, #8
10004768:	af00      	add	r7, sp, #0
1000476a:	6078      	str	r0, [r7, #4]
1000476c:	1c0a      	adds	r2, r1, #0
1000476e:	1cfb      	adds	r3, r7, #3
10004770:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10004772:	1cfb      	adds	r3, r7, #3
10004774:	781b      	ldrb	r3, [r3, #0]
10004776:	2201      	movs	r2, #1
10004778:	409a      	lsls	r2, r3
1000477a:	687b      	ldr	r3, [r7, #4]
1000477c:	605a      	str	r2, [r3, #4]
}
1000477e:	46bd      	mov	sp, r7
10004780:	b002      	add	sp, #8
10004782:	bd80      	pop	{r7, pc}

10004784 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10004784:	b580      	push	{r7, lr}
10004786:	b082      	sub	sp, #8
10004788:	af00      	add	r7, sp, #0
1000478a:	6078      	str	r0, [r7, #4]
1000478c:	1c0a      	adds	r2, r1, #0
1000478e:	1cfb      	adds	r3, r7, #3
10004790:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10004792:	1cfb      	adds	r3, r7, #3
10004794:	781b      	ldrb	r3, [r3, #0]
10004796:	2280      	movs	r2, #128	; 0x80
10004798:	0252      	lsls	r2, r2, #9
1000479a:	409a      	lsls	r2, r3
1000479c:	687b      	ldr	r3, [r7, #4]
1000479e:	605a      	str	r2, [r3, #4]
}
100047a0:	46bd      	mov	sp, r7
100047a2:	b002      	add	sp, #8
100047a4:	bd80      	pop	{r7, pc}
100047a6:	46c0      	nop			; (mov r8, r8)

100047a8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
100047a8:	b580      	push	{r7, lr}
100047aa:	b082      	sub	sp, #8
100047ac:	af00      	add	r7, sp, #0
100047ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
100047b0:	687b      	ldr	r3, [r7, #4]
100047b2:	681a      	ldr	r2, [r3, #0]
100047b4:	687b      	ldr	r3, [r7, #4]
100047b6:	7b1b      	ldrb	r3, [r3, #12]
100047b8:	1c10      	adds	r0, r2, #0
100047ba:	1c19      	adds	r1, r3, #0
100047bc:	f7ff ffd2 	bl	10004764 <XMC_GPIO_SetOutputHigh>
}
100047c0:	46bd      	mov	sp, r7
100047c2:	b002      	add	sp, #8
100047c4:	bd80      	pop	{r7, pc}
100047c6:	46c0      	nop			; (mov r8, r8)

100047c8 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
100047c8:	b580      	push	{r7, lr}
100047ca:	b082      	sub	sp, #8
100047cc:	af00      	add	r7, sp, #0
100047ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
100047d0:	687b      	ldr	r3, [r7, #4]
100047d2:	681a      	ldr	r2, [r3, #0]
100047d4:	687b      	ldr	r3, [r7, #4]
100047d6:	7b1b      	ldrb	r3, [r3, #12]
100047d8:	1c10      	adds	r0, r2, #0
100047da:	1c19      	adds	r1, r3, #0
100047dc:	f7ff ffd2 	bl	10004784 <XMC_GPIO_SetOutputLow>
}
100047e0:	46bd      	mov	sp, r7
100047e2:	b002      	add	sp, #8
100047e4:	bd80      	pop	{r7, pc}
100047e6:	46c0      	nop			; (mov r8, r8)

100047e8 <Steering_Function>:

float trajctory_x = 0, trajctory_y = 0;
float avg_Speeds =0 ;


void Steering_Function(float Steering_direction_cal, float Driving_speed_cal, uint8_t Steering_mode_cal){
100047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100047ea:	b085      	sub	sp, #20
100047ec:	af00      	add	r7, sp, #0
100047ee:	60f8      	str	r0, [r7, #12]
100047f0:	60b9      	str	r1, [r7, #8]
100047f2:	1dfb      	adds	r3, r7, #7
100047f4:	701a      	strb	r2, [r3, #0]
	New_Input = 0;
100047f6:	4bb8      	ldr	r3, [pc, #736]	; (10004ad8 <Steering_Function+0x2f0>)
100047f8:	2200      	movs	r2, #0
100047fa:	701a      	strb	r2, [r3, #0]

	if(Driving_speed_cal > MAX_Speed) Driving_speed_cal = MAX_Speed;
100047fc:	68b8      	ldr	r0, [r7, #8]
100047fe:	21fe      	movs	r1, #254	; 0xfe
10004800:	0589      	lsls	r1, r1, #22
10004802:	f005 f81b 	bl	1000983c <__aeabi_fcmpgt>
10004806:	1e03      	subs	r3, r0, #0
10004808:	d002      	beq.n	10004810 <Steering_Function+0x28>
1000480a:	23fe      	movs	r3, #254	; 0xfe
1000480c:	059b      	lsls	r3, r3, #22
1000480e:	60bb      	str	r3, [r7, #8]
	if(Driving_speed_cal < -MAX_Speed) Driving_speed_cal = -MAX_Speed;
10004810:	68b8      	ldr	r0, [r7, #8]
10004812:	49b2      	ldr	r1, [pc, #712]	; (10004adc <Steering_Function+0x2f4>)
10004814:	f004 fffe 	bl	10009814 <__aeabi_fcmplt>
10004818:	1e03      	subs	r3, r0, #0
1000481a:	d001      	beq.n	10004820 <Steering_Function+0x38>
1000481c:	4baf      	ldr	r3, [pc, #700]	; (10004adc <Steering_Function+0x2f4>)
1000481e:	60bb      	str	r3, [r7, #8]
	if((0 < Driving_speed_cal) & (Driving_speed_cal < MIN_Speed)) Driving_speed_cal = 0;
10004820:	2301      	movs	r3, #1
10004822:	1c1c      	adds	r4, r3, #0
10004824:	68b8      	ldr	r0, [r7, #8]
10004826:	2100      	movs	r1, #0
10004828:	f005 f808 	bl	1000983c <__aeabi_fcmpgt>
1000482c:	1e03      	subs	r3, r0, #0
1000482e:	d101      	bne.n	10004834 <Steering_Function+0x4c>
10004830:	2300      	movs	r3, #0
10004832:	1c1c      	adds	r4, r3, #0
10004834:	b2e4      	uxtb	r4, r4
10004836:	68b8      	ldr	r0, [r7, #8]
10004838:	f007 fd6e 	bl	1000c318 <__aeabi_f2d>
1000483c:	1c0a      	adds	r2, r1, #0
1000483e:	1c01      	adds	r1, r0, #0
10004840:	2301      	movs	r3, #1
10004842:	1c1d      	adds	r5, r3, #0
10004844:	1c08      	adds	r0, r1, #0
10004846:	1c11      	adds	r1, r2, #0
10004848:	4aa5      	ldr	r2, [pc, #660]	; (10004ae0 <Steering_Function+0x2f8>)
1000484a:	4ba6      	ldr	r3, [pc, #664]	; (10004ae4 <Steering_Function+0x2fc>)
1000484c:	f004 ffa8 	bl	100097a0 <__aeabi_dcmplt>
10004850:	1e03      	subs	r3, r0, #0
10004852:	d101      	bne.n	10004858 <Steering_Function+0x70>
10004854:	2300      	movs	r3, #0
10004856:	1c1d      	adds	r5, r3, #0
10004858:	b2eb      	uxtb	r3, r5
1000485a:	4023      	ands	r3, r4
1000485c:	b2db      	uxtb	r3, r3
1000485e:	2b00      	cmp	r3, #0
10004860:	d001      	beq.n	10004866 <Steering_Function+0x7e>
10004862:	2300      	movs	r3, #0
10004864:	60bb      	str	r3, [r7, #8]
	if((0 > Driving_speed_cal) & (Driving_speed_cal > -MIN_Speed)) Driving_speed_cal = 0;
10004866:	2301      	movs	r3, #1
10004868:	1c1c      	adds	r4, r3, #0
1000486a:	68b8      	ldr	r0, [r7, #8]
1000486c:	2100      	movs	r1, #0
1000486e:	f004 ffd1 	bl	10009814 <__aeabi_fcmplt>
10004872:	1e03      	subs	r3, r0, #0
10004874:	d101      	bne.n	1000487a <Steering_Function+0x92>
10004876:	2300      	movs	r3, #0
10004878:	1c1c      	adds	r4, r3, #0
1000487a:	b2e4      	uxtb	r4, r4
1000487c:	68b8      	ldr	r0, [r7, #8]
1000487e:	f007 fd4b 	bl	1000c318 <__aeabi_f2d>
10004882:	1c0a      	adds	r2, r1, #0
10004884:	1c01      	adds	r1, r0, #0
10004886:	2301      	movs	r3, #1
10004888:	1c1d      	adds	r5, r3, #0
1000488a:	1c08      	adds	r0, r1, #0
1000488c:	1c11      	adds	r1, r2, #0
1000488e:	4a94      	ldr	r2, [pc, #592]	; (10004ae0 <Steering_Function+0x2f8>)
10004890:	4b95      	ldr	r3, [pc, #596]	; (10004ae8 <Steering_Function+0x300>)
10004892:	f004 ff99 	bl	100097c8 <__aeabi_dcmpgt>
10004896:	1e03      	subs	r3, r0, #0
10004898:	d101      	bne.n	1000489e <Steering_Function+0xb6>
1000489a:	2300      	movs	r3, #0
1000489c:	1c1d      	adds	r5, r3, #0
1000489e:	b2eb      	uxtb	r3, r5
100048a0:	4023      	ands	r3, r4
100048a2:	b2db      	uxtb	r3, r3
100048a4:	2b00      	cmp	r3, #0
100048a6:	d001      	beq.n	100048ac <Steering_Function+0xc4>
100048a8:	2300      	movs	r3, #0
100048aa:	60bb      	str	r3, [r7, #8]

	switch(Steering_mode_cal) // options 'Front'; 'Rear'; '4_Wheel'; 'Carb'; 'Rotate'
100048ac:	1dfb      	adds	r3, r7, #7
100048ae:	781b      	ldrb	r3, [r3, #0]
100048b0:	2b05      	cmp	r3, #5
100048b2:	d901      	bls.n	100048b8 <Steering_Function+0xd0>
100048b4:	f000 fe49 	bl	1000554a <Steering_Function+0xd62>
100048b8:	009a      	lsls	r2, r3, #2
100048ba:	4b8c      	ldr	r3, [pc, #560]	; (10004aec <Steering_Function+0x304>)
100048bc:	18d3      	adds	r3, r2, r3
100048be:	681b      	ldr	r3, [r3, #0]
100048c0:	469f      	mov	pc, r3
	{
		case FRONT://#############################################################
			// steering limits
			if(Steering_direction_cal > 50) Steering_direction_cal = 50;
100048c2:	68f8      	ldr	r0, [r7, #12]
100048c4:	498a      	ldr	r1, [pc, #552]	; (10004af0 <Steering_Function+0x308>)
100048c6:	f004 ffb9 	bl	1000983c <__aeabi_fcmpgt>
100048ca:	1e03      	subs	r3, r0, #0
100048cc:	d001      	beq.n	100048d2 <Steering_Function+0xea>
100048ce:	4b88      	ldr	r3, [pc, #544]	; (10004af0 <Steering_Function+0x308>)
100048d0:	60fb      	str	r3, [r7, #12]
			if(Steering_direction_cal < -50) Steering_direction_cal = -50;
100048d2:	68f8      	ldr	r0, [r7, #12]
100048d4:	4987      	ldr	r1, [pc, #540]	; (10004af4 <Steering_Function+0x30c>)
100048d6:	f004 ff9d 	bl	10009814 <__aeabi_fcmplt>
100048da:	1e03      	subs	r3, r0, #0
100048dc:	d001      	beq.n	100048e2 <Steering_Function+0xfa>
100048de:	4b85      	ldr	r3, [pc, #532]	; (10004af4 <Steering_Function+0x30c>)
100048e0:	60fb      	str	r3, [r7, #12]

			// pre calc
			R_Turn = WHEEL_BASE / tan(Steering_direction_cal / RAD_TO_DEG); // to truni graduis converstion
100048e2:	68f8      	ldr	r0, [r7, #12]
100048e4:	f007 fd18 	bl	1000c318 <__aeabi_f2d>
100048e8:	1c03      	adds	r3, r0, #0
100048ea:	1c0c      	adds	r4, r1, #0
100048ec:	1c18      	adds	r0, r3, #0
100048ee:	1c21      	adds	r1, r4, #0
100048f0:	4a81      	ldr	r2, [pc, #516]	; (10004af8 <Steering_Function+0x310>)
100048f2:	4b82      	ldr	r3, [pc, #520]	; (10004afc <Steering_Function+0x314>)
100048f4:	f006 fa1a 	bl	1000ad2c <__aeabi_ddiv>
100048f8:	1c03      	adds	r3, r0, #0
100048fa:	1c0c      	adds	r4, r1, #0
100048fc:	1c18      	adds	r0, r3, #0
100048fe:	1c21      	adds	r1, r4, #0
10004900:	f002 f9f6 	bl	10006cf0 <tan>
10004904:	1c03      	adds	r3, r0, #0
10004906:	1c0c      	adds	r4, r1, #0
10004908:	487d      	ldr	r0, [pc, #500]	; (10004b00 <Steering_Function+0x318>)
1000490a:	497e      	ldr	r1, [pc, #504]	; (10004b04 <Steering_Function+0x31c>)
1000490c:	1c1a      	adds	r2, r3, #0
1000490e:	1c23      	adds	r3, r4, #0
10004910:	f006 fa0c 	bl	1000ad2c <__aeabi_ddiv>
10004914:	1c03      	adds	r3, r0, #0
10004916:	1c0c      	adds	r4, r1, #0
10004918:	1c18      	adds	r0, r3, #0
1000491a:	1c21      	adds	r1, r4, #0
1000491c:	f007 fd50 	bl	1000c3c0 <__aeabi_d2f>
10004920:	1c02      	adds	r2, r0, #0
10004922:	4b79      	ldr	r3, [pc, #484]	; (10004b08 <Steering_Function+0x320>)
10004924:	601a      	str	r2, [r3, #0]
			Speed_ratio = (2 * (copysign(R_Turn,1) + HALF_TRACK_WIDTH) * M_PI) / (2 * copysign(R_Turn,1) * M_PI);
10004926:	4b78      	ldr	r3, [pc, #480]	; (10004b08 <Steering_Function+0x320>)
10004928:	681b      	ldr	r3, [r3, #0]
1000492a:	005b      	lsls	r3, r3, #1
1000492c:	085b      	lsrs	r3, r3, #1
1000492e:	1c18      	adds	r0, r3, #0
10004930:	f007 fcf2 	bl	1000c318 <__aeabi_f2d>
10004934:	1c03      	adds	r3, r0, #0
10004936:	1c0c      	adds	r4, r1, #0
10004938:	1c18      	adds	r0, r3, #0
1000493a:	1c21      	adds	r1, r4, #0
1000493c:	4a73      	ldr	r2, [pc, #460]	; (10004b0c <Steering_Function+0x324>)
1000493e:	4b74      	ldr	r3, [pc, #464]	; (10004b10 <Steering_Function+0x328>)
10004940:	f005 fecc 	bl	1000a6dc <__aeabi_dadd>
10004944:	1c03      	adds	r3, r0, #0
10004946:	1c0c      	adds	r4, r1, #0
10004948:	1c18      	adds	r0, r3, #0
1000494a:	1c21      	adds	r1, r4, #0
1000494c:	1c1a      	adds	r2, r3, #0
1000494e:	1c23      	adds	r3, r4, #0
10004950:	f005 fec4 	bl	1000a6dc <__aeabi_dadd>
10004954:	1c03      	adds	r3, r0, #0
10004956:	1c0c      	adds	r4, r1, #0
10004958:	1c18      	adds	r0, r3, #0
1000495a:	1c21      	adds	r1, r4, #0
1000495c:	4a6d      	ldr	r2, [pc, #436]	; (10004b14 <Steering_Function+0x32c>)
1000495e:	4b6e      	ldr	r3, [pc, #440]	; (10004b18 <Steering_Function+0x330>)
10004960:	f006 fe22 	bl	1000b5a8 <__aeabi_dmul>
10004964:	1c03      	adds	r3, r0, #0
10004966:	1c0c      	adds	r4, r1, #0
10004968:	1c1d      	adds	r5, r3, #0
1000496a:	1c26      	adds	r6, r4, #0
1000496c:	4b66      	ldr	r3, [pc, #408]	; (10004b08 <Steering_Function+0x320>)
1000496e:	681b      	ldr	r3, [r3, #0]
10004970:	005b      	lsls	r3, r3, #1
10004972:	085b      	lsrs	r3, r3, #1
10004974:	1c18      	adds	r0, r3, #0
10004976:	f007 fccf 	bl	1000c318 <__aeabi_f2d>
1000497a:	1c03      	adds	r3, r0, #0
1000497c:	1c0c      	adds	r4, r1, #0
1000497e:	1c18      	adds	r0, r3, #0
10004980:	1c21      	adds	r1, r4, #0
10004982:	1c1a      	adds	r2, r3, #0
10004984:	1c23      	adds	r3, r4, #0
10004986:	f005 fea9 	bl	1000a6dc <__aeabi_dadd>
1000498a:	1c03      	adds	r3, r0, #0
1000498c:	1c0c      	adds	r4, r1, #0
1000498e:	1c18      	adds	r0, r3, #0
10004990:	1c21      	adds	r1, r4, #0
10004992:	4a60      	ldr	r2, [pc, #384]	; (10004b14 <Steering_Function+0x32c>)
10004994:	4b60      	ldr	r3, [pc, #384]	; (10004b18 <Steering_Function+0x330>)
10004996:	f006 fe07 	bl	1000b5a8 <__aeabi_dmul>
1000499a:	1c03      	adds	r3, r0, #0
1000499c:	1c0c      	adds	r4, r1, #0
1000499e:	1c28      	adds	r0, r5, #0
100049a0:	1c31      	adds	r1, r6, #0
100049a2:	1c1a      	adds	r2, r3, #0
100049a4:	1c23      	adds	r3, r4, #0
100049a6:	f006 f9c1 	bl	1000ad2c <__aeabi_ddiv>
100049aa:	1c03      	adds	r3, r0, #0
100049ac:	1c0c      	adds	r4, r1, #0
100049ae:	1c18      	adds	r0, r3, #0
100049b0:	1c21      	adds	r1, r4, #0
100049b2:	f007 fd05 	bl	1000c3c0 <__aeabi_d2f>
100049b6:	1c02      	adds	r2, r0, #0
100049b8:	4b58      	ldr	r3, [pc, #352]	; (10004b1c <Steering_Function+0x334>)
100049ba:	601a      	str	r2, [r3, #0]

			if((R_TRUN_MIN < R_Turn) && (R_Turn < R_TRUN_MAX)){
100049bc:	4b52      	ldr	r3, [pc, #328]	; (10004b08 <Steering_Function+0x320>)
100049be:	681b      	ldr	r3, [r3, #0]
100049c0:	1c18      	adds	r0, r3, #0
100049c2:	f007 fca9 	bl	1000c318 <__aeabi_f2d>
100049c6:	1c03      	adds	r3, r0, #0
100049c8:	1c0c      	adds	r4, r1, #0
100049ca:	1c18      	adds	r0, r3, #0
100049cc:	1c21      	adds	r1, r4, #0
100049ce:	4a44      	ldr	r2, [pc, #272]	; (10004ae0 <Steering_Function+0x2f8>)
100049d0:	4b44      	ldr	r3, [pc, #272]	; (10004ae4 <Steering_Function+0x2fc>)
100049d2:	f004 fef9 	bl	100097c8 <__aeabi_dcmpgt>
100049d6:	1e03      	subs	r3, r0, #0
100049d8:	d100      	bne.n	100049dc <Steering_Function+0x1f4>
100049da:	e0af      	b.n	10004b3c <Steering_Function+0x354>
100049dc:	4b4a      	ldr	r3, [pc, #296]	; (10004b08 <Steering_Function+0x320>)
100049de:	681b      	ldr	r3, [r3, #0]
100049e0:	1c18      	adds	r0, r3, #0
100049e2:	494f      	ldr	r1, [pc, #316]	; (10004b20 <Steering_Function+0x338>)
100049e4:	f004 ff16 	bl	10009814 <__aeabi_fcmplt>
100049e8:	1e03      	subs	r3, r0, #0
100049ea:	d100      	bne.n	100049ee <Steering_Function+0x206>
100049ec:	e0a6      	b.n	10004b3c <Steering_Function+0x354>
				angle_fl = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // out wheel
100049ee:	4b46      	ldr	r3, [pc, #280]	; (10004b08 <Steering_Function+0x320>)
100049f0:	681b      	ldr	r3, [r3, #0]
100049f2:	1c18      	adds	r0, r3, #0
100049f4:	f007 fc90 	bl	1000c318 <__aeabi_f2d>
100049f8:	1c03      	adds	r3, r0, #0
100049fa:	1c0c      	adds	r4, r1, #0
100049fc:	1c18      	adds	r0, r3, #0
100049fe:	1c21      	adds	r1, r4, #0
10004a00:	4a42      	ldr	r2, [pc, #264]	; (10004b0c <Steering_Function+0x324>)
10004a02:	4b43      	ldr	r3, [pc, #268]	; (10004b10 <Steering_Function+0x328>)
10004a04:	f005 fe6a 	bl	1000a6dc <__aeabi_dadd>
10004a08:	1c03      	adds	r3, r0, #0
10004a0a:	1c0c      	adds	r4, r1, #0
10004a0c:	483c      	ldr	r0, [pc, #240]	; (10004b00 <Steering_Function+0x318>)
10004a0e:	493d      	ldr	r1, [pc, #244]	; (10004b04 <Steering_Function+0x31c>)
10004a10:	1c1a      	adds	r2, r3, #0
10004a12:	1c23      	adds	r3, r4, #0
10004a14:	f006 f98a 	bl	1000ad2c <__aeabi_ddiv>
10004a18:	1c03      	adds	r3, r0, #0
10004a1a:	1c0c      	adds	r4, r1, #0
10004a1c:	1c18      	adds	r0, r3, #0
10004a1e:	1c21      	adds	r1, r4, #0
10004a20:	f001 ff1e 	bl	10006860 <atan>
10004a24:	1c03      	adds	r3, r0, #0
10004a26:	1c0c      	adds	r4, r1, #0
10004a28:	1c18      	adds	r0, r3, #0
10004a2a:	1c21      	adds	r1, r4, #0
10004a2c:	4a32      	ldr	r2, [pc, #200]	; (10004af8 <Steering_Function+0x310>)
10004a2e:	4b33      	ldr	r3, [pc, #204]	; (10004afc <Steering_Function+0x314>)
10004a30:	f006 fdba 	bl	1000b5a8 <__aeabi_dmul>
10004a34:	1c03      	adds	r3, r0, #0
10004a36:	1c0c      	adds	r4, r1, #0
10004a38:	1c18      	adds	r0, r3, #0
10004a3a:	1c21      	adds	r1, r4, #0
10004a3c:	f007 fcc0 	bl	1000c3c0 <__aeabi_d2f>
10004a40:	1c02      	adds	r2, r0, #0
10004a42:	4b38      	ldr	r3, [pc, #224]	; (10004b24 <Steering_Function+0x33c>)
10004a44:	601a      	str	r2, [r3, #0]
				angle_fr = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // in wheel
10004a46:	4b30      	ldr	r3, [pc, #192]	; (10004b08 <Steering_Function+0x320>)
10004a48:	681b      	ldr	r3, [r3, #0]
10004a4a:	1c18      	adds	r0, r3, #0
10004a4c:	f007 fc64 	bl	1000c318 <__aeabi_f2d>
10004a50:	1c03      	adds	r3, r0, #0
10004a52:	1c0c      	adds	r4, r1, #0
10004a54:	1c18      	adds	r0, r3, #0
10004a56:	1c21      	adds	r1, r4, #0
10004a58:	4a2c      	ldr	r2, [pc, #176]	; (10004b0c <Steering_Function+0x324>)
10004a5a:	4b2d      	ldr	r3, [pc, #180]	; (10004b10 <Steering_Function+0x328>)
10004a5c:	f007 f83e 	bl	1000badc <__aeabi_dsub>
10004a60:	1c03      	adds	r3, r0, #0
10004a62:	1c0c      	adds	r4, r1, #0
10004a64:	4826      	ldr	r0, [pc, #152]	; (10004b00 <Steering_Function+0x318>)
10004a66:	4927      	ldr	r1, [pc, #156]	; (10004b04 <Steering_Function+0x31c>)
10004a68:	1c1a      	adds	r2, r3, #0
10004a6a:	1c23      	adds	r3, r4, #0
10004a6c:	f006 f95e 	bl	1000ad2c <__aeabi_ddiv>
10004a70:	1c03      	adds	r3, r0, #0
10004a72:	1c0c      	adds	r4, r1, #0
10004a74:	1c18      	adds	r0, r3, #0
10004a76:	1c21      	adds	r1, r4, #0
10004a78:	f001 fef2 	bl	10006860 <atan>
10004a7c:	1c03      	adds	r3, r0, #0
10004a7e:	1c0c      	adds	r4, r1, #0
10004a80:	1c18      	adds	r0, r3, #0
10004a82:	1c21      	adds	r1, r4, #0
10004a84:	4a1c      	ldr	r2, [pc, #112]	; (10004af8 <Steering_Function+0x310>)
10004a86:	4b1d      	ldr	r3, [pc, #116]	; (10004afc <Steering_Function+0x314>)
10004a88:	f006 fd8e 	bl	1000b5a8 <__aeabi_dmul>
10004a8c:	1c03      	adds	r3, r0, #0
10004a8e:	1c0c      	adds	r4, r1, #0
10004a90:	1c18      	adds	r0, r3, #0
10004a92:	1c21      	adds	r1, r4, #0
10004a94:	f007 fc94 	bl	1000c3c0 <__aeabi_d2f>
10004a98:	1c02      	adds	r2, r0, #0
10004a9a:	4b23      	ldr	r3, [pc, #140]	; (10004b28 <Steering_Function+0x340>)
10004a9c:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal * Speed_ratio;
10004a9e:	4b1f      	ldr	r3, [pc, #124]	; (10004b1c <Steering_Function+0x334>)
10004aa0:	681b      	ldr	r3, [r3, #0]
10004aa2:	1c18      	adds	r0, r3, #0
10004aa4:	68b9      	ldr	r1, [r7, #8]
10004aa6:	f005 fb01 	bl	1000a0ac <__aeabi_fmul>
10004aaa:	1c03      	adds	r3, r0, #0
10004aac:	1c1a      	adds	r2, r3, #0
10004aae:	4b1f      	ldr	r3, [pc, #124]	; (10004b2c <Steering_Function+0x344>)
10004ab0:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal / Speed_ratio;
10004ab2:	4b1a      	ldr	r3, [pc, #104]	; (10004b1c <Steering_Function+0x334>)
10004ab4:	681b      	ldr	r3, [r3, #0]
10004ab6:	68b8      	ldr	r0, [r7, #8]
10004ab8:	1c19      	adds	r1, r3, #0
10004aba:	f005 f905 	bl	10009cc8 <__aeabi_fdiv>
10004abe:	1c03      	adds	r3, r0, #0
10004ac0:	1c1a      	adds	r2, r3, #0
10004ac2:	4b1b      	ldr	r3, [pc, #108]	; (10004b30 <Steering_Function+0x348>)
10004ac4:	601a      	str	r2, [r3, #0]
				//speed_rl = Driving_speed_cal * Speed_ratio;
				//speed_rr = Driving_speed_cal / Speed_ratio;

				speed_rl = speed_fl;
10004ac6:	4b19      	ldr	r3, [pc, #100]	; (10004b2c <Steering_Function+0x344>)
10004ac8:	681a      	ldr	r2, [r3, #0]
10004aca:	4b1a      	ldr	r3, [pc, #104]	; (10004b34 <Steering_Function+0x34c>)
10004acc:	601a      	str	r2, [r3, #0]
				speed_rr = speed_fr;
10004ace:	4b18      	ldr	r3, [pc, #96]	; (10004b30 <Steering_Function+0x348>)
10004ad0:	681a      	ldr	r2, [r3, #0]
10004ad2:	4b19      	ldr	r3, [pc, #100]	; (10004b38 <Steering_Function+0x350>)
10004ad4:	601a      	str	r2, [r3, #0]
10004ad6:	e0d0      	b.n	10004c7a <Steering_Function+0x492>
10004ad8:	20000a70 	.word	0x20000a70
10004adc:	bf800000 	.word	0xbf800000
10004ae0:	9999999a 	.word	0x9999999a
10004ae4:	3fa99999 	.word	0x3fa99999
10004ae8:	bfa99999 	.word	0xbfa99999
10004aec:	1000cb84 	.word	0x1000cb84
10004af0:	42480000 	.word	0x42480000
10004af4:	c2480000 	.word	0xc2480000
10004af8:	2584f4c7 	.word	0x2584f4c7
10004afc:	404ca61e 	.word	0x404ca61e
10004b00:	3126e979 	.word	0x3126e979
10004b04:	3fdcac08 	.word	0x3fdcac08
10004b08:	20000acc 	.word	0x20000acc
10004b0c:	1a9fbe77 	.word	0x1a9fbe77
10004b10:	3fc4dd2f 	.word	0x3fc4dd2f
10004b14:	54442d18 	.word	0x54442d18
10004b18:	400921fb 	.word	0x400921fb
10004b1c:	20000ad0 	.word	0x20000ad0
10004b20:	41a00000 	.word	0x41a00000
10004b24:	200009fc 	.word	0x200009fc
10004b28:	20000a00 	.word	0x20000a00
10004b2c:	200009ec 	.word	0x200009ec
10004b30:	200009f0 	.word	0x200009f0
10004b34:	200009f4 	.word	0x200009f4
10004b38:	200009f8 	.word	0x200009f8
			}
			else if((- R_TRUN_MIN > R_Turn) && (R_Turn > -R_TRUN_MAX)){
10004b3c:	4bd8      	ldr	r3, [pc, #864]	; (10004ea0 <Steering_Function+0x6b8>)
10004b3e:	681b      	ldr	r3, [r3, #0]
10004b40:	1c18      	adds	r0, r3, #0
10004b42:	f007 fbe9 	bl	1000c318 <__aeabi_f2d>
10004b46:	1c03      	adds	r3, r0, #0
10004b48:	1c0c      	adds	r4, r1, #0
10004b4a:	1c18      	adds	r0, r3, #0
10004b4c:	1c21      	adds	r1, r4, #0
10004b4e:	4ad5      	ldr	r2, [pc, #852]	; (10004ea4 <Steering_Function+0x6bc>)
10004b50:	4bd5      	ldr	r3, [pc, #852]	; (10004ea8 <Steering_Function+0x6c0>)
10004b52:	f004 fe25 	bl	100097a0 <__aeabi_dcmplt>
10004b56:	1e03      	subs	r3, r0, #0
10004b58:	d100      	bne.n	10004b5c <Steering_Function+0x374>
10004b5a:	e07c      	b.n	10004c56 <Steering_Function+0x46e>
10004b5c:	4bd0      	ldr	r3, [pc, #832]	; (10004ea0 <Steering_Function+0x6b8>)
10004b5e:	681b      	ldr	r3, [r3, #0]
10004b60:	1c18      	adds	r0, r3, #0
10004b62:	49d2      	ldr	r1, [pc, #840]	; (10004eac <Steering_Function+0x6c4>)
10004b64:	f004 fe6a 	bl	1000983c <__aeabi_fcmpgt>
10004b68:	1e03      	subs	r3, r0, #0
10004b6a:	d074      	beq.n	10004c56 <Steering_Function+0x46e>
				angle_fl = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // in wheel
10004b6c:	4bcc      	ldr	r3, [pc, #816]	; (10004ea0 <Steering_Function+0x6b8>)
10004b6e:	681b      	ldr	r3, [r3, #0]
10004b70:	1c18      	adds	r0, r3, #0
10004b72:	f007 fbd1 	bl	1000c318 <__aeabi_f2d>
10004b76:	1c03      	adds	r3, r0, #0
10004b78:	1c0c      	adds	r4, r1, #0
10004b7a:	1c18      	adds	r0, r3, #0
10004b7c:	1c21      	adds	r1, r4, #0
10004b7e:	4acc      	ldr	r2, [pc, #816]	; (10004eb0 <Steering_Function+0x6c8>)
10004b80:	4bcc      	ldr	r3, [pc, #816]	; (10004eb4 <Steering_Function+0x6cc>)
10004b82:	f005 fdab 	bl	1000a6dc <__aeabi_dadd>
10004b86:	1c03      	adds	r3, r0, #0
10004b88:	1c0c      	adds	r4, r1, #0
10004b8a:	48cb      	ldr	r0, [pc, #812]	; (10004eb8 <Steering_Function+0x6d0>)
10004b8c:	49cb      	ldr	r1, [pc, #812]	; (10004ebc <Steering_Function+0x6d4>)
10004b8e:	1c1a      	adds	r2, r3, #0
10004b90:	1c23      	adds	r3, r4, #0
10004b92:	f006 f8cb 	bl	1000ad2c <__aeabi_ddiv>
10004b96:	1c03      	adds	r3, r0, #0
10004b98:	1c0c      	adds	r4, r1, #0
10004b9a:	1c18      	adds	r0, r3, #0
10004b9c:	1c21      	adds	r1, r4, #0
10004b9e:	f001 fe5f 	bl	10006860 <atan>
10004ba2:	1c03      	adds	r3, r0, #0
10004ba4:	1c0c      	adds	r4, r1, #0
10004ba6:	1c18      	adds	r0, r3, #0
10004ba8:	1c21      	adds	r1, r4, #0
10004baa:	4ac5      	ldr	r2, [pc, #788]	; (10004ec0 <Steering_Function+0x6d8>)
10004bac:	4bc5      	ldr	r3, [pc, #788]	; (10004ec4 <Steering_Function+0x6dc>)
10004bae:	f006 fcfb 	bl	1000b5a8 <__aeabi_dmul>
10004bb2:	1c03      	adds	r3, r0, #0
10004bb4:	1c0c      	adds	r4, r1, #0
10004bb6:	1c18      	adds	r0, r3, #0
10004bb8:	1c21      	adds	r1, r4, #0
10004bba:	f007 fc01 	bl	1000c3c0 <__aeabi_d2f>
10004bbe:	1c02      	adds	r2, r0, #0
10004bc0:	4bc1      	ldr	r3, [pc, #772]	; (10004ec8 <Steering_Function+0x6e0>)
10004bc2:	601a      	str	r2, [r3, #0]
				angle_fr = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // out wheel
10004bc4:	4bb6      	ldr	r3, [pc, #728]	; (10004ea0 <Steering_Function+0x6b8>)
10004bc6:	681b      	ldr	r3, [r3, #0]
10004bc8:	1c18      	adds	r0, r3, #0
10004bca:	f007 fba5 	bl	1000c318 <__aeabi_f2d>
10004bce:	1c03      	adds	r3, r0, #0
10004bd0:	1c0c      	adds	r4, r1, #0
10004bd2:	1c18      	adds	r0, r3, #0
10004bd4:	1c21      	adds	r1, r4, #0
10004bd6:	4ab6      	ldr	r2, [pc, #728]	; (10004eb0 <Steering_Function+0x6c8>)
10004bd8:	4bb6      	ldr	r3, [pc, #728]	; (10004eb4 <Steering_Function+0x6cc>)
10004bda:	f006 ff7f 	bl	1000badc <__aeabi_dsub>
10004bde:	1c03      	adds	r3, r0, #0
10004be0:	1c0c      	adds	r4, r1, #0
10004be2:	48b5      	ldr	r0, [pc, #724]	; (10004eb8 <Steering_Function+0x6d0>)
10004be4:	49b5      	ldr	r1, [pc, #724]	; (10004ebc <Steering_Function+0x6d4>)
10004be6:	1c1a      	adds	r2, r3, #0
10004be8:	1c23      	adds	r3, r4, #0
10004bea:	f006 f89f 	bl	1000ad2c <__aeabi_ddiv>
10004bee:	1c03      	adds	r3, r0, #0
10004bf0:	1c0c      	adds	r4, r1, #0
10004bf2:	1c18      	adds	r0, r3, #0
10004bf4:	1c21      	adds	r1, r4, #0
10004bf6:	f001 fe33 	bl	10006860 <atan>
10004bfa:	1c03      	adds	r3, r0, #0
10004bfc:	1c0c      	adds	r4, r1, #0
10004bfe:	1c18      	adds	r0, r3, #0
10004c00:	1c21      	adds	r1, r4, #0
10004c02:	4aaf      	ldr	r2, [pc, #700]	; (10004ec0 <Steering_Function+0x6d8>)
10004c04:	4baf      	ldr	r3, [pc, #700]	; (10004ec4 <Steering_Function+0x6dc>)
10004c06:	f006 fccf 	bl	1000b5a8 <__aeabi_dmul>
10004c0a:	1c03      	adds	r3, r0, #0
10004c0c:	1c0c      	adds	r4, r1, #0
10004c0e:	1c18      	adds	r0, r3, #0
10004c10:	1c21      	adds	r1, r4, #0
10004c12:	f007 fbd5 	bl	1000c3c0 <__aeabi_d2f>
10004c16:	1c02      	adds	r2, r0, #0
10004c18:	4bac      	ldr	r3, [pc, #688]	; (10004ecc <Steering_Function+0x6e4>)
10004c1a:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal / Speed_ratio;
10004c1c:	4bac      	ldr	r3, [pc, #688]	; (10004ed0 <Steering_Function+0x6e8>)
10004c1e:	681b      	ldr	r3, [r3, #0]
10004c20:	68b8      	ldr	r0, [r7, #8]
10004c22:	1c19      	adds	r1, r3, #0
10004c24:	f005 f850 	bl	10009cc8 <__aeabi_fdiv>
10004c28:	1c03      	adds	r3, r0, #0
10004c2a:	1c1a      	adds	r2, r3, #0
10004c2c:	4ba9      	ldr	r3, [pc, #676]	; (10004ed4 <Steering_Function+0x6ec>)
10004c2e:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal * Speed_ratio;
10004c30:	4ba7      	ldr	r3, [pc, #668]	; (10004ed0 <Steering_Function+0x6e8>)
10004c32:	681b      	ldr	r3, [r3, #0]
10004c34:	1c18      	adds	r0, r3, #0
10004c36:	68b9      	ldr	r1, [r7, #8]
10004c38:	f005 fa38 	bl	1000a0ac <__aeabi_fmul>
10004c3c:	1c03      	adds	r3, r0, #0
10004c3e:	1c1a      	adds	r2, r3, #0
10004c40:	4ba5      	ldr	r3, [pc, #660]	; (10004ed8 <Steering_Function+0x6f0>)
10004c42:	601a      	str	r2, [r3, #0]
				//speed_rl = Driving_speed_cal / Speed_ratio;
				//speed_rr = Driving_speed_cal * Speed_ratio;

				speed_rl = speed_fl;
10004c44:	4ba3      	ldr	r3, [pc, #652]	; (10004ed4 <Steering_Function+0x6ec>)
10004c46:	681a      	ldr	r2, [r3, #0]
10004c48:	4ba4      	ldr	r3, [pc, #656]	; (10004edc <Steering_Function+0x6f4>)
10004c4a:	601a      	str	r2, [r3, #0]
				speed_rr = speed_fr;
10004c4c:	4ba2      	ldr	r3, [pc, #648]	; (10004ed8 <Steering_Function+0x6f0>)
10004c4e:	681a      	ldr	r2, [r3, #0]
10004c50:	4ba3      	ldr	r3, [pc, #652]	; (10004ee0 <Steering_Function+0x6f8>)
10004c52:	601a      	str	r2, [r3, #0]
10004c54:	e011      	b.n	10004c7a <Steering_Function+0x492>
			}
			else{
				angle_fl = 0;
10004c56:	4b9c      	ldr	r3, [pc, #624]	; (10004ec8 <Steering_Function+0x6e0>)
10004c58:	2200      	movs	r2, #0
10004c5a:	601a      	str	r2, [r3, #0]
				angle_fr = 0;
10004c5c:	4b9b      	ldr	r3, [pc, #620]	; (10004ecc <Steering_Function+0x6e4>)
10004c5e:	2200      	movs	r2, #0
10004c60:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal;
10004c62:	4b9c      	ldr	r3, [pc, #624]	; (10004ed4 <Steering_Function+0x6ec>)
10004c64:	68ba      	ldr	r2, [r7, #8]
10004c66:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal;
10004c68:	4b9b      	ldr	r3, [pc, #620]	; (10004ed8 <Steering_Function+0x6f0>)
10004c6a:	68ba      	ldr	r2, [r7, #8]
10004c6c:	601a      	str	r2, [r3, #0]
				speed_rl = Driving_speed_cal;
10004c6e:	4b9b      	ldr	r3, [pc, #620]	; (10004edc <Steering_Function+0x6f4>)
10004c70:	68ba      	ldr	r2, [r7, #8]
10004c72:	601a      	str	r2, [r3, #0]
				speed_rr = Driving_speed_cal;
10004c74:	4b9a      	ldr	r3, [pc, #616]	; (10004ee0 <Steering_Function+0x6f8>)
10004c76:	68ba      	ldr	r2, [r7, #8]
10004c78:	601a      	str	r2, [r3, #0]
			}

			//rear axle
			angle_rl = 0;
10004c7a:	4b9a      	ldr	r3, [pc, #616]	; (10004ee4 <Steering_Function+0x6fc>)
10004c7c:	2200      	movs	r2, #0
10004c7e:	601a      	str	r2, [r3, #0]
			angle_rr = 0;
10004c80:	4b99      	ldr	r3, [pc, #612]	; (10004ee8 <Steering_Function+0x700>)
10004c82:	2200      	movs	r2, #0
10004c84:	601a      	str	r2, [r3, #0]
			break;
10004c86:	f000 fc78 	bl	1000557a <Steering_Function+0xd92>

		case BACK:// rear #############################################################
			// steering limits
			if(Steering_direction_cal > 50) Steering_direction_cal = 50;
10004c8a:	68f8      	ldr	r0, [r7, #12]
10004c8c:	4997      	ldr	r1, [pc, #604]	; (10004eec <Steering_Function+0x704>)
10004c8e:	f004 fdd5 	bl	1000983c <__aeabi_fcmpgt>
10004c92:	1e03      	subs	r3, r0, #0
10004c94:	d001      	beq.n	10004c9a <Steering_Function+0x4b2>
10004c96:	4b95      	ldr	r3, [pc, #596]	; (10004eec <Steering_Function+0x704>)
10004c98:	60fb      	str	r3, [r7, #12]
			if(Steering_direction_cal < -50) Steering_direction_cal = -50;
10004c9a:	68f8      	ldr	r0, [r7, #12]
10004c9c:	4994      	ldr	r1, [pc, #592]	; (10004ef0 <Steering_Function+0x708>)
10004c9e:	f004 fdb9 	bl	10009814 <__aeabi_fcmplt>
10004ca2:	1e03      	subs	r3, r0, #0
10004ca4:	d001      	beq.n	10004caa <Steering_Function+0x4c2>
10004ca6:	4b92      	ldr	r3, [pc, #584]	; (10004ef0 <Steering_Function+0x708>)
10004ca8:	60fb      	str	r3, [r7, #12]

			// pre calc
			R_Turn = WHEEL_BASE / tan(Steering_direction_cal / RAD_TO_DEG); // to truni graduis converstion
10004caa:	68f8      	ldr	r0, [r7, #12]
10004cac:	f007 fb34 	bl	1000c318 <__aeabi_f2d>
10004cb0:	1c03      	adds	r3, r0, #0
10004cb2:	1c0c      	adds	r4, r1, #0
10004cb4:	1c18      	adds	r0, r3, #0
10004cb6:	1c21      	adds	r1, r4, #0
10004cb8:	4a81      	ldr	r2, [pc, #516]	; (10004ec0 <Steering_Function+0x6d8>)
10004cba:	4b82      	ldr	r3, [pc, #520]	; (10004ec4 <Steering_Function+0x6dc>)
10004cbc:	f006 f836 	bl	1000ad2c <__aeabi_ddiv>
10004cc0:	1c03      	adds	r3, r0, #0
10004cc2:	1c0c      	adds	r4, r1, #0
10004cc4:	1c18      	adds	r0, r3, #0
10004cc6:	1c21      	adds	r1, r4, #0
10004cc8:	f002 f812 	bl	10006cf0 <tan>
10004ccc:	1c03      	adds	r3, r0, #0
10004cce:	1c0c      	adds	r4, r1, #0
10004cd0:	4879      	ldr	r0, [pc, #484]	; (10004eb8 <Steering_Function+0x6d0>)
10004cd2:	497a      	ldr	r1, [pc, #488]	; (10004ebc <Steering_Function+0x6d4>)
10004cd4:	1c1a      	adds	r2, r3, #0
10004cd6:	1c23      	adds	r3, r4, #0
10004cd8:	f006 f828 	bl	1000ad2c <__aeabi_ddiv>
10004cdc:	1c03      	adds	r3, r0, #0
10004cde:	1c0c      	adds	r4, r1, #0
10004ce0:	1c18      	adds	r0, r3, #0
10004ce2:	1c21      	adds	r1, r4, #0
10004ce4:	f007 fb6c 	bl	1000c3c0 <__aeabi_d2f>
10004ce8:	1c02      	adds	r2, r0, #0
10004cea:	4b6d      	ldr	r3, [pc, #436]	; (10004ea0 <Steering_Function+0x6b8>)
10004cec:	601a      	str	r2, [r3, #0]
			Speed_ratio = (2 * (copysign(R_Turn,1) + HALF_TRACK_WIDTH) * M_PI) / (2 * copysign(R_Turn,1) * M_PI);
10004cee:	4b6c      	ldr	r3, [pc, #432]	; (10004ea0 <Steering_Function+0x6b8>)
10004cf0:	681b      	ldr	r3, [r3, #0]
10004cf2:	005b      	lsls	r3, r3, #1
10004cf4:	085b      	lsrs	r3, r3, #1
10004cf6:	1c18      	adds	r0, r3, #0
10004cf8:	f007 fb0e 	bl	1000c318 <__aeabi_f2d>
10004cfc:	1c03      	adds	r3, r0, #0
10004cfe:	1c0c      	adds	r4, r1, #0
10004d00:	1c18      	adds	r0, r3, #0
10004d02:	1c21      	adds	r1, r4, #0
10004d04:	4a6a      	ldr	r2, [pc, #424]	; (10004eb0 <Steering_Function+0x6c8>)
10004d06:	4b6b      	ldr	r3, [pc, #428]	; (10004eb4 <Steering_Function+0x6cc>)
10004d08:	f005 fce8 	bl	1000a6dc <__aeabi_dadd>
10004d0c:	1c03      	adds	r3, r0, #0
10004d0e:	1c0c      	adds	r4, r1, #0
10004d10:	1c18      	adds	r0, r3, #0
10004d12:	1c21      	adds	r1, r4, #0
10004d14:	1c1a      	adds	r2, r3, #0
10004d16:	1c23      	adds	r3, r4, #0
10004d18:	f005 fce0 	bl	1000a6dc <__aeabi_dadd>
10004d1c:	1c03      	adds	r3, r0, #0
10004d1e:	1c0c      	adds	r4, r1, #0
10004d20:	1c18      	adds	r0, r3, #0
10004d22:	1c21      	adds	r1, r4, #0
10004d24:	4a73      	ldr	r2, [pc, #460]	; (10004ef4 <Steering_Function+0x70c>)
10004d26:	4b74      	ldr	r3, [pc, #464]	; (10004ef8 <Steering_Function+0x710>)
10004d28:	f006 fc3e 	bl	1000b5a8 <__aeabi_dmul>
10004d2c:	1c03      	adds	r3, r0, #0
10004d2e:	1c0c      	adds	r4, r1, #0
10004d30:	1c1d      	adds	r5, r3, #0
10004d32:	1c26      	adds	r6, r4, #0
10004d34:	4b5a      	ldr	r3, [pc, #360]	; (10004ea0 <Steering_Function+0x6b8>)
10004d36:	681b      	ldr	r3, [r3, #0]
10004d38:	005b      	lsls	r3, r3, #1
10004d3a:	085b      	lsrs	r3, r3, #1
10004d3c:	1c18      	adds	r0, r3, #0
10004d3e:	f007 faeb 	bl	1000c318 <__aeabi_f2d>
10004d42:	1c03      	adds	r3, r0, #0
10004d44:	1c0c      	adds	r4, r1, #0
10004d46:	1c18      	adds	r0, r3, #0
10004d48:	1c21      	adds	r1, r4, #0
10004d4a:	1c1a      	adds	r2, r3, #0
10004d4c:	1c23      	adds	r3, r4, #0
10004d4e:	f005 fcc5 	bl	1000a6dc <__aeabi_dadd>
10004d52:	1c03      	adds	r3, r0, #0
10004d54:	1c0c      	adds	r4, r1, #0
10004d56:	1c18      	adds	r0, r3, #0
10004d58:	1c21      	adds	r1, r4, #0
10004d5a:	4a66      	ldr	r2, [pc, #408]	; (10004ef4 <Steering_Function+0x70c>)
10004d5c:	4b66      	ldr	r3, [pc, #408]	; (10004ef8 <Steering_Function+0x710>)
10004d5e:	f006 fc23 	bl	1000b5a8 <__aeabi_dmul>
10004d62:	1c03      	adds	r3, r0, #0
10004d64:	1c0c      	adds	r4, r1, #0
10004d66:	1c28      	adds	r0, r5, #0
10004d68:	1c31      	adds	r1, r6, #0
10004d6a:	1c1a      	adds	r2, r3, #0
10004d6c:	1c23      	adds	r3, r4, #0
10004d6e:	f005 ffdd 	bl	1000ad2c <__aeabi_ddiv>
10004d72:	1c03      	adds	r3, r0, #0
10004d74:	1c0c      	adds	r4, r1, #0
10004d76:	1c18      	adds	r0, r3, #0
10004d78:	1c21      	adds	r1, r4, #0
10004d7a:	f007 fb21 	bl	1000c3c0 <__aeabi_d2f>
10004d7e:	1c02      	adds	r2, r0, #0
10004d80:	4b53      	ldr	r3, [pc, #332]	; (10004ed0 <Steering_Function+0x6e8>)
10004d82:	601a      	str	r2, [r3, #0]

			if((R_TRUN_MIN < R_Turn) && (R_Turn < R_TRUN_MAX)){
10004d84:	4b46      	ldr	r3, [pc, #280]	; (10004ea0 <Steering_Function+0x6b8>)
10004d86:	681b      	ldr	r3, [r3, #0]
10004d88:	1c18      	adds	r0, r3, #0
10004d8a:	f007 fac5 	bl	1000c318 <__aeabi_f2d>
10004d8e:	1c03      	adds	r3, r0, #0
10004d90:	1c0c      	adds	r4, r1, #0
10004d92:	1c18      	adds	r0, r3, #0
10004d94:	1c21      	adds	r1, r4, #0
10004d96:	4a43      	ldr	r2, [pc, #268]	; (10004ea4 <Steering_Function+0x6bc>)
10004d98:	4b58      	ldr	r3, [pc, #352]	; (10004efc <Steering_Function+0x714>)
10004d9a:	f004 fd15 	bl	100097c8 <__aeabi_dcmpgt>
10004d9e:	1e03      	subs	r3, r0, #0
10004da0:	d100      	bne.n	10004da4 <Steering_Function+0x5bc>
10004da2:	e0b1      	b.n	10004f08 <Steering_Function+0x720>
10004da4:	4b3e      	ldr	r3, [pc, #248]	; (10004ea0 <Steering_Function+0x6b8>)
10004da6:	681b      	ldr	r3, [r3, #0]
10004da8:	1c18      	adds	r0, r3, #0
10004daa:	4955      	ldr	r1, [pc, #340]	; (10004f00 <Steering_Function+0x718>)
10004dac:	f004 fd32 	bl	10009814 <__aeabi_fcmplt>
10004db0:	1e03      	subs	r3, r0, #0
10004db2:	d100      	bne.n	10004db6 <Steering_Function+0x5ce>
10004db4:	e0a8      	b.n	10004f08 <Steering_Function+0x720>
				angle_rl = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // out wheel
10004db6:	4b3a      	ldr	r3, [pc, #232]	; (10004ea0 <Steering_Function+0x6b8>)
10004db8:	681b      	ldr	r3, [r3, #0]
10004dba:	1c18      	adds	r0, r3, #0
10004dbc:	f007 faac 	bl	1000c318 <__aeabi_f2d>
10004dc0:	1c03      	adds	r3, r0, #0
10004dc2:	1c0c      	adds	r4, r1, #0
10004dc4:	1c18      	adds	r0, r3, #0
10004dc6:	1c21      	adds	r1, r4, #0
10004dc8:	4a39      	ldr	r2, [pc, #228]	; (10004eb0 <Steering_Function+0x6c8>)
10004dca:	4b3a      	ldr	r3, [pc, #232]	; (10004eb4 <Steering_Function+0x6cc>)
10004dcc:	f005 fc86 	bl	1000a6dc <__aeabi_dadd>
10004dd0:	1c03      	adds	r3, r0, #0
10004dd2:	1c0c      	adds	r4, r1, #0
10004dd4:	4838      	ldr	r0, [pc, #224]	; (10004eb8 <Steering_Function+0x6d0>)
10004dd6:	4939      	ldr	r1, [pc, #228]	; (10004ebc <Steering_Function+0x6d4>)
10004dd8:	1c1a      	adds	r2, r3, #0
10004dda:	1c23      	adds	r3, r4, #0
10004ddc:	f005 ffa6 	bl	1000ad2c <__aeabi_ddiv>
10004de0:	1c03      	adds	r3, r0, #0
10004de2:	1c0c      	adds	r4, r1, #0
10004de4:	1c18      	adds	r0, r3, #0
10004de6:	1c21      	adds	r1, r4, #0
10004de8:	f001 fd3a 	bl	10006860 <atan>
10004dec:	1c03      	adds	r3, r0, #0
10004dee:	1c0c      	adds	r4, r1, #0
10004df0:	1c18      	adds	r0, r3, #0
10004df2:	1c21      	adds	r1, r4, #0
10004df4:	4a32      	ldr	r2, [pc, #200]	; (10004ec0 <Steering_Function+0x6d8>)
10004df6:	4b43      	ldr	r3, [pc, #268]	; (10004f04 <Steering_Function+0x71c>)
10004df8:	f006 fbd6 	bl	1000b5a8 <__aeabi_dmul>
10004dfc:	1c03      	adds	r3, r0, #0
10004dfe:	1c0c      	adds	r4, r1, #0
10004e00:	1c18      	adds	r0, r3, #0
10004e02:	1c21      	adds	r1, r4, #0
10004e04:	f007 fadc 	bl	1000c3c0 <__aeabi_d2f>
10004e08:	1c02      	adds	r2, r0, #0
10004e0a:	4b36      	ldr	r3, [pc, #216]	; (10004ee4 <Steering_Function+0x6fc>)
10004e0c:	601a      	str	r2, [r3, #0]
				angle_rr = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // in wheel
10004e0e:	4b24      	ldr	r3, [pc, #144]	; (10004ea0 <Steering_Function+0x6b8>)
10004e10:	681b      	ldr	r3, [r3, #0]
10004e12:	1c18      	adds	r0, r3, #0
10004e14:	f007 fa80 	bl	1000c318 <__aeabi_f2d>
10004e18:	1c03      	adds	r3, r0, #0
10004e1a:	1c0c      	adds	r4, r1, #0
10004e1c:	1c18      	adds	r0, r3, #0
10004e1e:	1c21      	adds	r1, r4, #0
10004e20:	4a23      	ldr	r2, [pc, #140]	; (10004eb0 <Steering_Function+0x6c8>)
10004e22:	4b24      	ldr	r3, [pc, #144]	; (10004eb4 <Steering_Function+0x6cc>)
10004e24:	f006 fe5a 	bl	1000badc <__aeabi_dsub>
10004e28:	1c03      	adds	r3, r0, #0
10004e2a:	1c0c      	adds	r4, r1, #0
10004e2c:	4822      	ldr	r0, [pc, #136]	; (10004eb8 <Steering_Function+0x6d0>)
10004e2e:	4923      	ldr	r1, [pc, #140]	; (10004ebc <Steering_Function+0x6d4>)
10004e30:	1c1a      	adds	r2, r3, #0
10004e32:	1c23      	adds	r3, r4, #0
10004e34:	f005 ff7a 	bl	1000ad2c <__aeabi_ddiv>
10004e38:	1c03      	adds	r3, r0, #0
10004e3a:	1c0c      	adds	r4, r1, #0
10004e3c:	1c18      	adds	r0, r3, #0
10004e3e:	1c21      	adds	r1, r4, #0
10004e40:	f001 fd0e 	bl	10006860 <atan>
10004e44:	1c03      	adds	r3, r0, #0
10004e46:	1c0c      	adds	r4, r1, #0
10004e48:	1c18      	adds	r0, r3, #0
10004e4a:	1c21      	adds	r1, r4, #0
10004e4c:	4a1c      	ldr	r2, [pc, #112]	; (10004ec0 <Steering_Function+0x6d8>)
10004e4e:	4b2d      	ldr	r3, [pc, #180]	; (10004f04 <Steering_Function+0x71c>)
10004e50:	f006 fbaa 	bl	1000b5a8 <__aeabi_dmul>
10004e54:	1c03      	adds	r3, r0, #0
10004e56:	1c0c      	adds	r4, r1, #0
10004e58:	1c18      	adds	r0, r3, #0
10004e5a:	1c21      	adds	r1, r4, #0
10004e5c:	f007 fab0 	bl	1000c3c0 <__aeabi_d2f>
10004e60:	1c02      	adds	r2, r0, #0
10004e62:	4b21      	ldr	r3, [pc, #132]	; (10004ee8 <Steering_Function+0x700>)
10004e64:	601a      	str	r2, [r3, #0]


				speed_fl = Driving_speed_cal * Speed_ratio;
10004e66:	4b1a      	ldr	r3, [pc, #104]	; (10004ed0 <Steering_Function+0x6e8>)
10004e68:	681b      	ldr	r3, [r3, #0]
10004e6a:	1c18      	adds	r0, r3, #0
10004e6c:	68b9      	ldr	r1, [r7, #8]
10004e6e:	f005 f91d 	bl	1000a0ac <__aeabi_fmul>
10004e72:	1c03      	adds	r3, r0, #0
10004e74:	1c1a      	adds	r2, r3, #0
10004e76:	4b17      	ldr	r3, [pc, #92]	; (10004ed4 <Steering_Function+0x6ec>)
10004e78:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal / Speed_ratio;
10004e7a:	4b15      	ldr	r3, [pc, #84]	; (10004ed0 <Steering_Function+0x6e8>)
10004e7c:	681b      	ldr	r3, [r3, #0]
10004e7e:	68b8      	ldr	r0, [r7, #8]
10004e80:	1c19      	adds	r1, r3, #0
10004e82:	f004 ff21 	bl	10009cc8 <__aeabi_fdiv>
10004e86:	1c03      	adds	r3, r0, #0
10004e88:	1c1a      	adds	r2, r3, #0
10004e8a:	4b13      	ldr	r3, [pc, #76]	; (10004ed8 <Steering_Function+0x6f0>)
10004e8c:	601a      	str	r2, [r3, #0]
				//speed_rl = Driving_speed_cal * Speed_ratio;
				//speed_rr = Driving_speed_cal / Speed_ratio;

				speed_rl = speed_fl;
10004e8e:	4b11      	ldr	r3, [pc, #68]	; (10004ed4 <Steering_Function+0x6ec>)
10004e90:	681a      	ldr	r2, [r3, #0]
10004e92:	4b12      	ldr	r3, [pc, #72]	; (10004edc <Steering_Function+0x6f4>)
10004e94:	601a      	str	r2, [r3, #0]
				speed_rr = speed_fr;
10004e96:	4b10      	ldr	r3, [pc, #64]	; (10004ed8 <Steering_Function+0x6f0>)
10004e98:	681a      	ldr	r2, [r3, #0]
10004e9a:	4b11      	ldr	r3, [pc, #68]	; (10004ee0 <Steering_Function+0x6f8>)
10004e9c:	601a      	str	r2, [r3, #0]
10004e9e:	e0d2      	b.n	10005046 <Steering_Function+0x85e>
10004ea0:	20000acc 	.word	0x20000acc
10004ea4:	9999999a 	.word	0x9999999a
10004ea8:	bfa99999 	.word	0xbfa99999
10004eac:	c1a00000 	.word	0xc1a00000
10004eb0:	1a9fbe77 	.word	0x1a9fbe77
10004eb4:	3fc4dd2f 	.word	0x3fc4dd2f
10004eb8:	3126e979 	.word	0x3126e979
10004ebc:	3fdcac08 	.word	0x3fdcac08
10004ec0:	2584f4c7 	.word	0x2584f4c7
10004ec4:	404ca61e 	.word	0x404ca61e
10004ec8:	200009fc 	.word	0x200009fc
10004ecc:	20000a00 	.word	0x20000a00
10004ed0:	20000ad0 	.word	0x20000ad0
10004ed4:	200009ec 	.word	0x200009ec
10004ed8:	200009f0 	.word	0x200009f0
10004edc:	200009f4 	.word	0x200009f4
10004ee0:	200009f8 	.word	0x200009f8
10004ee4:	20000a04 	.word	0x20000a04
10004ee8:	20000a08 	.word	0x20000a08
10004eec:	42480000 	.word	0x42480000
10004ef0:	c2480000 	.word	0xc2480000
10004ef4:	54442d18 	.word	0x54442d18
10004ef8:	400921fb 	.word	0x400921fb
10004efc:	3fa99999 	.word	0x3fa99999
10004f00:	41a00000 	.word	0x41a00000
10004f04:	c04ca61e 	.word	0xc04ca61e
			}
			else if((- R_TRUN_MIN > R_Turn) && (R_Turn > -R_TRUN_MAX)){
10004f08:	4bdf      	ldr	r3, [pc, #892]	; (10005288 <Steering_Function+0xaa0>)
10004f0a:	681b      	ldr	r3, [r3, #0]
10004f0c:	1c18      	adds	r0, r3, #0
10004f0e:	f007 fa03 	bl	1000c318 <__aeabi_f2d>
10004f12:	1c03      	adds	r3, r0, #0
10004f14:	1c0c      	adds	r4, r1, #0
10004f16:	1c18      	adds	r0, r3, #0
10004f18:	1c21      	adds	r1, r4, #0
10004f1a:	4adc      	ldr	r2, [pc, #880]	; (1000528c <Steering_Function+0xaa4>)
10004f1c:	4bdc      	ldr	r3, [pc, #880]	; (10005290 <Steering_Function+0xaa8>)
10004f1e:	f004 fc3f 	bl	100097a0 <__aeabi_dcmplt>
10004f22:	1e03      	subs	r3, r0, #0
10004f24:	d100      	bne.n	10004f28 <Steering_Function+0x740>
10004f26:	e07c      	b.n	10005022 <Steering_Function+0x83a>
10004f28:	4bd7      	ldr	r3, [pc, #860]	; (10005288 <Steering_Function+0xaa0>)
10004f2a:	681b      	ldr	r3, [r3, #0]
10004f2c:	1c18      	adds	r0, r3, #0
10004f2e:	49d9      	ldr	r1, [pc, #868]	; (10005294 <Steering_Function+0xaac>)
10004f30:	f004 fc84 	bl	1000983c <__aeabi_fcmpgt>
10004f34:	1e03      	subs	r3, r0, #0
10004f36:	d074      	beq.n	10005022 <Steering_Function+0x83a>
				angle_rl = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // in wheel
10004f38:	4bd3      	ldr	r3, [pc, #844]	; (10005288 <Steering_Function+0xaa0>)
10004f3a:	681b      	ldr	r3, [r3, #0]
10004f3c:	1c18      	adds	r0, r3, #0
10004f3e:	f007 f9eb 	bl	1000c318 <__aeabi_f2d>
10004f42:	1c03      	adds	r3, r0, #0
10004f44:	1c0c      	adds	r4, r1, #0
10004f46:	1c18      	adds	r0, r3, #0
10004f48:	1c21      	adds	r1, r4, #0
10004f4a:	4ad3      	ldr	r2, [pc, #844]	; (10005298 <Steering_Function+0xab0>)
10004f4c:	4bd3      	ldr	r3, [pc, #844]	; (1000529c <Steering_Function+0xab4>)
10004f4e:	f005 fbc5 	bl	1000a6dc <__aeabi_dadd>
10004f52:	1c03      	adds	r3, r0, #0
10004f54:	1c0c      	adds	r4, r1, #0
10004f56:	48d2      	ldr	r0, [pc, #840]	; (100052a0 <Steering_Function+0xab8>)
10004f58:	49d2      	ldr	r1, [pc, #840]	; (100052a4 <Steering_Function+0xabc>)
10004f5a:	1c1a      	adds	r2, r3, #0
10004f5c:	1c23      	adds	r3, r4, #0
10004f5e:	f005 fee5 	bl	1000ad2c <__aeabi_ddiv>
10004f62:	1c03      	adds	r3, r0, #0
10004f64:	1c0c      	adds	r4, r1, #0
10004f66:	1c18      	adds	r0, r3, #0
10004f68:	1c21      	adds	r1, r4, #0
10004f6a:	f001 fc79 	bl	10006860 <atan>
10004f6e:	1c03      	adds	r3, r0, #0
10004f70:	1c0c      	adds	r4, r1, #0
10004f72:	1c18      	adds	r0, r3, #0
10004f74:	1c21      	adds	r1, r4, #0
10004f76:	4acc      	ldr	r2, [pc, #816]	; (100052a8 <Steering_Function+0xac0>)
10004f78:	4bcc      	ldr	r3, [pc, #816]	; (100052ac <Steering_Function+0xac4>)
10004f7a:	f006 fb15 	bl	1000b5a8 <__aeabi_dmul>
10004f7e:	1c03      	adds	r3, r0, #0
10004f80:	1c0c      	adds	r4, r1, #0
10004f82:	1c18      	adds	r0, r3, #0
10004f84:	1c21      	adds	r1, r4, #0
10004f86:	f007 fa1b 	bl	1000c3c0 <__aeabi_d2f>
10004f8a:	1c02      	adds	r2, r0, #0
10004f8c:	4bc8      	ldr	r3, [pc, #800]	; (100052b0 <Steering_Function+0xac8>)
10004f8e:	601a      	str	r2, [r3, #0]
				angle_rr = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // out wheel
10004f90:	4bbd      	ldr	r3, [pc, #756]	; (10005288 <Steering_Function+0xaa0>)
10004f92:	681b      	ldr	r3, [r3, #0]
10004f94:	1c18      	adds	r0, r3, #0
10004f96:	f007 f9bf 	bl	1000c318 <__aeabi_f2d>
10004f9a:	1c03      	adds	r3, r0, #0
10004f9c:	1c0c      	adds	r4, r1, #0
10004f9e:	1c18      	adds	r0, r3, #0
10004fa0:	1c21      	adds	r1, r4, #0
10004fa2:	4abd      	ldr	r2, [pc, #756]	; (10005298 <Steering_Function+0xab0>)
10004fa4:	4bbd      	ldr	r3, [pc, #756]	; (1000529c <Steering_Function+0xab4>)
10004fa6:	f006 fd99 	bl	1000badc <__aeabi_dsub>
10004faa:	1c03      	adds	r3, r0, #0
10004fac:	1c0c      	adds	r4, r1, #0
10004fae:	48bc      	ldr	r0, [pc, #752]	; (100052a0 <Steering_Function+0xab8>)
10004fb0:	49bc      	ldr	r1, [pc, #752]	; (100052a4 <Steering_Function+0xabc>)
10004fb2:	1c1a      	adds	r2, r3, #0
10004fb4:	1c23      	adds	r3, r4, #0
10004fb6:	f005 feb9 	bl	1000ad2c <__aeabi_ddiv>
10004fba:	1c03      	adds	r3, r0, #0
10004fbc:	1c0c      	adds	r4, r1, #0
10004fbe:	1c18      	adds	r0, r3, #0
10004fc0:	1c21      	adds	r1, r4, #0
10004fc2:	f001 fc4d 	bl	10006860 <atan>
10004fc6:	1c03      	adds	r3, r0, #0
10004fc8:	1c0c      	adds	r4, r1, #0
10004fca:	1c18      	adds	r0, r3, #0
10004fcc:	1c21      	adds	r1, r4, #0
10004fce:	4ab6      	ldr	r2, [pc, #728]	; (100052a8 <Steering_Function+0xac0>)
10004fd0:	4bb6      	ldr	r3, [pc, #728]	; (100052ac <Steering_Function+0xac4>)
10004fd2:	f006 fae9 	bl	1000b5a8 <__aeabi_dmul>
10004fd6:	1c03      	adds	r3, r0, #0
10004fd8:	1c0c      	adds	r4, r1, #0
10004fda:	1c18      	adds	r0, r3, #0
10004fdc:	1c21      	adds	r1, r4, #0
10004fde:	f007 f9ef 	bl	1000c3c0 <__aeabi_d2f>
10004fe2:	1c02      	adds	r2, r0, #0
10004fe4:	4bb3      	ldr	r3, [pc, #716]	; (100052b4 <Steering_Function+0xacc>)
10004fe6:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal / Speed_ratio;
10004fe8:	4bb3      	ldr	r3, [pc, #716]	; (100052b8 <Steering_Function+0xad0>)
10004fea:	681b      	ldr	r3, [r3, #0]
10004fec:	68b8      	ldr	r0, [r7, #8]
10004fee:	1c19      	adds	r1, r3, #0
10004ff0:	f004 fe6a 	bl	10009cc8 <__aeabi_fdiv>
10004ff4:	1c03      	adds	r3, r0, #0
10004ff6:	1c1a      	adds	r2, r3, #0
10004ff8:	4bb0      	ldr	r3, [pc, #704]	; (100052bc <Steering_Function+0xad4>)
10004ffa:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal * Speed_ratio;
10004ffc:	4bae      	ldr	r3, [pc, #696]	; (100052b8 <Steering_Function+0xad0>)
10004ffe:	681b      	ldr	r3, [r3, #0]
10005000:	1c18      	adds	r0, r3, #0
10005002:	68b9      	ldr	r1, [r7, #8]
10005004:	f005 f852 	bl	1000a0ac <__aeabi_fmul>
10005008:	1c03      	adds	r3, r0, #0
1000500a:	1c1a      	adds	r2, r3, #0
1000500c:	4bac      	ldr	r3, [pc, #688]	; (100052c0 <Steering_Function+0xad8>)
1000500e:	601a      	str	r2, [r3, #0]
				//speed_rl = Driving_speed_cal / Speed_ratio;
				//speed_rr = Driving_speed_cal * Speed_ratio;

				speed_rl = speed_fl;
10005010:	4baa      	ldr	r3, [pc, #680]	; (100052bc <Steering_Function+0xad4>)
10005012:	681a      	ldr	r2, [r3, #0]
10005014:	4bab      	ldr	r3, [pc, #684]	; (100052c4 <Steering_Function+0xadc>)
10005016:	601a      	str	r2, [r3, #0]
				speed_rr = speed_fr;
10005018:	4ba9      	ldr	r3, [pc, #676]	; (100052c0 <Steering_Function+0xad8>)
1000501a:	681a      	ldr	r2, [r3, #0]
1000501c:	4baa      	ldr	r3, [pc, #680]	; (100052c8 <Steering_Function+0xae0>)
1000501e:	601a      	str	r2, [r3, #0]
10005020:	e011      	b.n	10005046 <Steering_Function+0x85e>
			}
			else{
				angle_rl = 0;
10005022:	4ba3      	ldr	r3, [pc, #652]	; (100052b0 <Steering_Function+0xac8>)
10005024:	2200      	movs	r2, #0
10005026:	601a      	str	r2, [r3, #0]
				angle_rr = 0;
10005028:	4ba2      	ldr	r3, [pc, #648]	; (100052b4 <Steering_Function+0xacc>)
1000502a:	2200      	movs	r2, #0
1000502c:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal;
1000502e:	4ba3      	ldr	r3, [pc, #652]	; (100052bc <Steering_Function+0xad4>)
10005030:	68ba      	ldr	r2, [r7, #8]
10005032:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal;
10005034:	4ba2      	ldr	r3, [pc, #648]	; (100052c0 <Steering_Function+0xad8>)
10005036:	68ba      	ldr	r2, [r7, #8]
10005038:	601a      	str	r2, [r3, #0]
				speed_rl = Driving_speed_cal;
1000503a:	4ba2      	ldr	r3, [pc, #648]	; (100052c4 <Steering_Function+0xadc>)
1000503c:	68ba      	ldr	r2, [r7, #8]
1000503e:	601a      	str	r2, [r3, #0]
				speed_rr = Driving_speed_cal;
10005040:	4ba1      	ldr	r3, [pc, #644]	; (100052c8 <Steering_Function+0xae0>)
10005042:	68ba      	ldr	r2, [r7, #8]
10005044:	601a      	str	r2, [r3, #0]
			}

			//rear axle
			angle_fl = 0;
10005046:	4ba1      	ldr	r3, [pc, #644]	; (100052cc <Steering_Function+0xae4>)
10005048:	2200      	movs	r2, #0
1000504a:	601a      	str	r2, [r3, #0]
			angle_fr = 0;
1000504c:	4ba0      	ldr	r3, [pc, #640]	; (100052d0 <Steering_Function+0xae8>)
1000504e:	2200      	movs	r2, #0
10005050:	601a      	str	r2, [r3, #0]
			break;
10005052:	e292      	b.n	1000557a <Steering_Function+0xd92>

		case ALL_WHEEL: // 4 wheel #############################################################
			// steering limits
			if(Steering_direction_cal > 30) Steering_direction_cal = 30;
10005054:	68f8      	ldr	r0, [r7, #12]
10005056:	499f      	ldr	r1, [pc, #636]	; (100052d4 <Steering_Function+0xaec>)
10005058:	f004 fbf0 	bl	1000983c <__aeabi_fcmpgt>
1000505c:	1e03      	subs	r3, r0, #0
1000505e:	d001      	beq.n	10005064 <Steering_Function+0x87c>
10005060:	4b9c      	ldr	r3, [pc, #624]	; (100052d4 <Steering_Function+0xaec>)
10005062:	60fb      	str	r3, [r7, #12]
			if(Steering_direction_cal < -30) Steering_direction_cal = -30;
10005064:	68f8      	ldr	r0, [r7, #12]
10005066:	499c      	ldr	r1, [pc, #624]	; (100052d8 <Steering_Function+0xaf0>)
10005068:	f004 fbd4 	bl	10009814 <__aeabi_fcmplt>
1000506c:	1e03      	subs	r3, r0, #0
1000506e:	d001      	beq.n	10005074 <Steering_Function+0x88c>
10005070:	4b99      	ldr	r3, [pc, #612]	; (100052d8 <Steering_Function+0xaf0>)
10005072:	60fb      	str	r3, [r7, #12]

			// pre calc
			R_Turn = HALF_WHEEL_BASE / tan(Steering_direction_cal / RAD_TO_DEG); // to truni graduis converstion
10005074:	68f8      	ldr	r0, [r7, #12]
10005076:	f007 f94f 	bl	1000c318 <__aeabi_f2d>
1000507a:	1c03      	adds	r3, r0, #0
1000507c:	1c0c      	adds	r4, r1, #0
1000507e:	1c18      	adds	r0, r3, #0
10005080:	1c21      	adds	r1, r4, #0
10005082:	4a89      	ldr	r2, [pc, #548]	; (100052a8 <Steering_Function+0xac0>)
10005084:	4b95      	ldr	r3, [pc, #596]	; (100052dc <Steering_Function+0xaf4>)
10005086:	f005 fe51 	bl	1000ad2c <__aeabi_ddiv>
1000508a:	1c03      	adds	r3, r0, #0
1000508c:	1c0c      	adds	r4, r1, #0
1000508e:	1c18      	adds	r0, r3, #0
10005090:	1c21      	adds	r1, r4, #0
10005092:	f001 fe2d 	bl	10006cf0 <tan>
10005096:	1c03      	adds	r3, r0, #0
10005098:	1c0c      	adds	r4, r1, #0
1000509a:	4891      	ldr	r0, [pc, #580]	; (100052e0 <Steering_Function+0xaf8>)
1000509c:	4991      	ldr	r1, [pc, #580]	; (100052e4 <Steering_Function+0xafc>)
1000509e:	1c1a      	adds	r2, r3, #0
100050a0:	1c23      	adds	r3, r4, #0
100050a2:	f005 fe43 	bl	1000ad2c <__aeabi_ddiv>
100050a6:	1c03      	adds	r3, r0, #0
100050a8:	1c0c      	adds	r4, r1, #0
100050aa:	1c18      	adds	r0, r3, #0
100050ac:	1c21      	adds	r1, r4, #0
100050ae:	f007 f987 	bl	1000c3c0 <__aeabi_d2f>
100050b2:	1c02      	adds	r2, r0, #0
100050b4:	4b74      	ldr	r3, [pc, #464]	; (10005288 <Steering_Function+0xaa0>)
100050b6:	601a      	str	r2, [r3, #0]
			Speed_ratio = (2 * (copysign(R_Turn,1) + HALF_TRACK_WIDTH) * M_PI) / (2 * copysign(R_Turn,1) * M_PI);
100050b8:	4b73      	ldr	r3, [pc, #460]	; (10005288 <Steering_Function+0xaa0>)
100050ba:	681b      	ldr	r3, [r3, #0]
100050bc:	005b      	lsls	r3, r3, #1
100050be:	085b      	lsrs	r3, r3, #1
100050c0:	1c18      	adds	r0, r3, #0
100050c2:	f007 f929 	bl	1000c318 <__aeabi_f2d>
100050c6:	1c03      	adds	r3, r0, #0
100050c8:	1c0c      	adds	r4, r1, #0
100050ca:	1c18      	adds	r0, r3, #0
100050cc:	1c21      	adds	r1, r4, #0
100050ce:	4a72      	ldr	r2, [pc, #456]	; (10005298 <Steering_Function+0xab0>)
100050d0:	4b72      	ldr	r3, [pc, #456]	; (1000529c <Steering_Function+0xab4>)
100050d2:	f005 fb03 	bl	1000a6dc <__aeabi_dadd>
100050d6:	1c03      	adds	r3, r0, #0
100050d8:	1c0c      	adds	r4, r1, #0
100050da:	1c18      	adds	r0, r3, #0
100050dc:	1c21      	adds	r1, r4, #0
100050de:	1c1a      	adds	r2, r3, #0
100050e0:	1c23      	adds	r3, r4, #0
100050e2:	f005 fafb 	bl	1000a6dc <__aeabi_dadd>
100050e6:	1c03      	adds	r3, r0, #0
100050e8:	1c0c      	adds	r4, r1, #0
100050ea:	1c18      	adds	r0, r3, #0
100050ec:	1c21      	adds	r1, r4, #0
100050ee:	4a7e      	ldr	r2, [pc, #504]	; (100052e8 <Steering_Function+0xb00>)
100050f0:	4b7e      	ldr	r3, [pc, #504]	; (100052ec <Steering_Function+0xb04>)
100050f2:	f006 fa59 	bl	1000b5a8 <__aeabi_dmul>
100050f6:	1c03      	adds	r3, r0, #0
100050f8:	1c0c      	adds	r4, r1, #0
100050fa:	1c1d      	adds	r5, r3, #0
100050fc:	1c26      	adds	r6, r4, #0
100050fe:	4b62      	ldr	r3, [pc, #392]	; (10005288 <Steering_Function+0xaa0>)
10005100:	681b      	ldr	r3, [r3, #0]
10005102:	005b      	lsls	r3, r3, #1
10005104:	085b      	lsrs	r3, r3, #1
10005106:	1c18      	adds	r0, r3, #0
10005108:	f007 f906 	bl	1000c318 <__aeabi_f2d>
1000510c:	1c03      	adds	r3, r0, #0
1000510e:	1c0c      	adds	r4, r1, #0
10005110:	1c18      	adds	r0, r3, #0
10005112:	1c21      	adds	r1, r4, #0
10005114:	1c1a      	adds	r2, r3, #0
10005116:	1c23      	adds	r3, r4, #0
10005118:	f005 fae0 	bl	1000a6dc <__aeabi_dadd>
1000511c:	1c03      	adds	r3, r0, #0
1000511e:	1c0c      	adds	r4, r1, #0
10005120:	1c18      	adds	r0, r3, #0
10005122:	1c21      	adds	r1, r4, #0
10005124:	4a70      	ldr	r2, [pc, #448]	; (100052e8 <Steering_Function+0xb00>)
10005126:	4b71      	ldr	r3, [pc, #452]	; (100052ec <Steering_Function+0xb04>)
10005128:	f006 fa3e 	bl	1000b5a8 <__aeabi_dmul>
1000512c:	1c03      	adds	r3, r0, #0
1000512e:	1c0c      	adds	r4, r1, #0
10005130:	1c28      	adds	r0, r5, #0
10005132:	1c31      	adds	r1, r6, #0
10005134:	1c1a      	adds	r2, r3, #0
10005136:	1c23      	adds	r3, r4, #0
10005138:	f005 fdf8 	bl	1000ad2c <__aeabi_ddiv>
1000513c:	1c03      	adds	r3, r0, #0
1000513e:	1c0c      	adds	r4, r1, #0
10005140:	1c18      	adds	r0, r3, #0
10005142:	1c21      	adds	r1, r4, #0
10005144:	f007 f93c 	bl	1000c3c0 <__aeabi_d2f>
10005148:	1c02      	adds	r2, r0, #0
1000514a:	4b5b      	ldr	r3, [pc, #364]	; (100052b8 <Steering_Function+0xad0>)
1000514c:	601a      	str	r2, [r3, #0]

			if((R_TRUN_MIN < R_Turn) && (R_Turn < R_TRUN_MAX)){ // trun right positive R
1000514e:	4b4e      	ldr	r3, [pc, #312]	; (10005288 <Steering_Function+0xaa0>)
10005150:	681b      	ldr	r3, [r3, #0]
10005152:	1c18      	adds	r0, r3, #0
10005154:	f007 f8e0 	bl	1000c318 <__aeabi_f2d>
10005158:	1c03      	adds	r3, r0, #0
1000515a:	1c0c      	adds	r4, r1, #0
1000515c:	1c18      	adds	r0, r3, #0
1000515e:	1c21      	adds	r1, r4, #0
10005160:	4a4a      	ldr	r2, [pc, #296]	; (1000528c <Steering_Function+0xaa4>)
10005162:	4b63      	ldr	r3, [pc, #396]	; (100052f0 <Steering_Function+0xb08>)
10005164:	f004 fb30 	bl	100097c8 <__aeabi_dcmpgt>
10005168:	1e03      	subs	r3, r0, #0
1000516a:	d100      	bne.n	1000516e <Steering_Function+0x986>
1000516c:	e0c4      	b.n	100052f8 <Steering_Function+0xb10>
1000516e:	4b46      	ldr	r3, [pc, #280]	; (10005288 <Steering_Function+0xaa0>)
10005170:	681b      	ldr	r3, [r3, #0]
10005172:	1c18      	adds	r0, r3, #0
10005174:	495f      	ldr	r1, [pc, #380]	; (100052f4 <Steering_Function+0xb0c>)
10005176:	f004 fb4d 	bl	10009814 <__aeabi_fcmplt>
1000517a:	1e03      	subs	r3, r0, #0
1000517c:	d100      	bne.n	10005180 <Steering_Function+0x998>
1000517e:	e0bb      	b.n	100052f8 <Steering_Function+0xb10>
				angle_fl = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // out wheel
10005180:	4b41      	ldr	r3, [pc, #260]	; (10005288 <Steering_Function+0xaa0>)
10005182:	681b      	ldr	r3, [r3, #0]
10005184:	1c18      	adds	r0, r3, #0
10005186:	f007 f8c7 	bl	1000c318 <__aeabi_f2d>
1000518a:	1c03      	adds	r3, r0, #0
1000518c:	1c0c      	adds	r4, r1, #0
1000518e:	1c18      	adds	r0, r3, #0
10005190:	1c21      	adds	r1, r4, #0
10005192:	4a41      	ldr	r2, [pc, #260]	; (10005298 <Steering_Function+0xab0>)
10005194:	4b41      	ldr	r3, [pc, #260]	; (1000529c <Steering_Function+0xab4>)
10005196:	f005 faa1 	bl	1000a6dc <__aeabi_dadd>
1000519a:	1c03      	adds	r3, r0, #0
1000519c:	1c0c      	adds	r4, r1, #0
1000519e:	4840      	ldr	r0, [pc, #256]	; (100052a0 <Steering_Function+0xab8>)
100051a0:	4940      	ldr	r1, [pc, #256]	; (100052a4 <Steering_Function+0xabc>)
100051a2:	1c1a      	adds	r2, r3, #0
100051a4:	1c23      	adds	r3, r4, #0
100051a6:	f005 fdc1 	bl	1000ad2c <__aeabi_ddiv>
100051aa:	1c03      	adds	r3, r0, #0
100051ac:	1c0c      	adds	r4, r1, #0
100051ae:	1c18      	adds	r0, r3, #0
100051b0:	1c21      	adds	r1, r4, #0
100051b2:	f001 fb55 	bl	10006860 <atan>
100051b6:	1c03      	adds	r3, r0, #0
100051b8:	1c0c      	adds	r4, r1, #0
100051ba:	1c18      	adds	r0, r3, #0
100051bc:	1c21      	adds	r1, r4, #0
100051be:	4a3a      	ldr	r2, [pc, #232]	; (100052a8 <Steering_Function+0xac0>)
100051c0:	4b46      	ldr	r3, [pc, #280]	; (100052dc <Steering_Function+0xaf4>)
100051c2:	f006 f9f1 	bl	1000b5a8 <__aeabi_dmul>
100051c6:	1c03      	adds	r3, r0, #0
100051c8:	1c0c      	adds	r4, r1, #0
100051ca:	1c18      	adds	r0, r3, #0
100051cc:	1c21      	adds	r1, r4, #0
100051ce:	f007 f8f7 	bl	1000c3c0 <__aeabi_d2f>
100051d2:	1c02      	adds	r2, r0, #0
100051d4:	4b3d      	ldr	r3, [pc, #244]	; (100052cc <Steering_Function+0xae4>)
100051d6:	601a      	str	r2, [r3, #0]
				angle_fr = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // in wheel
100051d8:	4b2b      	ldr	r3, [pc, #172]	; (10005288 <Steering_Function+0xaa0>)
100051da:	681b      	ldr	r3, [r3, #0]
100051dc:	1c18      	adds	r0, r3, #0
100051de:	f007 f89b 	bl	1000c318 <__aeabi_f2d>
100051e2:	1c03      	adds	r3, r0, #0
100051e4:	1c0c      	adds	r4, r1, #0
100051e6:	1c18      	adds	r0, r3, #0
100051e8:	1c21      	adds	r1, r4, #0
100051ea:	4a2b      	ldr	r2, [pc, #172]	; (10005298 <Steering_Function+0xab0>)
100051ec:	4b2b      	ldr	r3, [pc, #172]	; (1000529c <Steering_Function+0xab4>)
100051ee:	f006 fc75 	bl	1000badc <__aeabi_dsub>
100051f2:	1c03      	adds	r3, r0, #0
100051f4:	1c0c      	adds	r4, r1, #0
100051f6:	482a      	ldr	r0, [pc, #168]	; (100052a0 <Steering_Function+0xab8>)
100051f8:	492a      	ldr	r1, [pc, #168]	; (100052a4 <Steering_Function+0xabc>)
100051fa:	1c1a      	adds	r2, r3, #0
100051fc:	1c23      	adds	r3, r4, #0
100051fe:	f005 fd95 	bl	1000ad2c <__aeabi_ddiv>
10005202:	1c03      	adds	r3, r0, #0
10005204:	1c0c      	adds	r4, r1, #0
10005206:	1c18      	adds	r0, r3, #0
10005208:	1c21      	adds	r1, r4, #0
1000520a:	f001 fb29 	bl	10006860 <atan>
1000520e:	1c03      	adds	r3, r0, #0
10005210:	1c0c      	adds	r4, r1, #0
10005212:	1c18      	adds	r0, r3, #0
10005214:	1c21      	adds	r1, r4, #0
10005216:	4a24      	ldr	r2, [pc, #144]	; (100052a8 <Steering_Function+0xac0>)
10005218:	4b30      	ldr	r3, [pc, #192]	; (100052dc <Steering_Function+0xaf4>)
1000521a:	f006 f9c5 	bl	1000b5a8 <__aeabi_dmul>
1000521e:	1c03      	adds	r3, r0, #0
10005220:	1c0c      	adds	r4, r1, #0
10005222:	1c18      	adds	r0, r3, #0
10005224:	1c21      	adds	r1, r4, #0
10005226:	f007 f8cb 	bl	1000c3c0 <__aeabi_d2f>
1000522a:	1c02      	adds	r2, r0, #0
1000522c:	4b28      	ldr	r3, [pc, #160]	; (100052d0 <Steering_Function+0xae8>)
1000522e:	601a      	str	r2, [r3, #0]
				//angle_rl = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // out wheel
				//angle_rr = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // in wheel

				angle_rl = -angle_fl;
10005230:	4b26      	ldr	r3, [pc, #152]	; (100052cc <Steering_Function+0xae4>)
10005232:	681b      	ldr	r3, [r3, #0]
10005234:	2280      	movs	r2, #128	; 0x80
10005236:	0612      	lsls	r2, r2, #24
10005238:	405a      	eors	r2, r3
1000523a:	4b1d      	ldr	r3, [pc, #116]	; (100052b0 <Steering_Function+0xac8>)
1000523c:	601a      	str	r2, [r3, #0]
				angle_rr = -angle_fr;
1000523e:	4b24      	ldr	r3, [pc, #144]	; (100052d0 <Steering_Function+0xae8>)
10005240:	681b      	ldr	r3, [r3, #0]
10005242:	2280      	movs	r2, #128	; 0x80
10005244:	0612      	lsls	r2, r2, #24
10005246:	405a      	eors	r2, r3
10005248:	4b1a      	ldr	r3, [pc, #104]	; (100052b4 <Steering_Function+0xacc>)
1000524a:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal * Speed_ratio;
1000524c:	4b1a      	ldr	r3, [pc, #104]	; (100052b8 <Steering_Function+0xad0>)
1000524e:	681b      	ldr	r3, [r3, #0]
10005250:	1c18      	adds	r0, r3, #0
10005252:	68b9      	ldr	r1, [r7, #8]
10005254:	f004 ff2a 	bl	1000a0ac <__aeabi_fmul>
10005258:	1c03      	adds	r3, r0, #0
1000525a:	1c1a      	adds	r2, r3, #0
1000525c:	4b17      	ldr	r3, [pc, #92]	; (100052bc <Steering_Function+0xad4>)
1000525e:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal / Speed_ratio;
10005260:	4b15      	ldr	r3, [pc, #84]	; (100052b8 <Steering_Function+0xad0>)
10005262:	681b      	ldr	r3, [r3, #0]
10005264:	68b8      	ldr	r0, [r7, #8]
10005266:	1c19      	adds	r1, r3, #0
10005268:	f004 fd2e 	bl	10009cc8 <__aeabi_fdiv>
1000526c:	1c03      	adds	r3, r0, #0
1000526e:	1c1a      	adds	r2, r3, #0
10005270:	4b13      	ldr	r3, [pc, #76]	; (100052c0 <Steering_Function+0xad8>)
10005272:	601a      	str	r2, [r3, #0]
				//speed_rl = Driving_speed_cal * Speed_ratio;
				//speed_rr = Driving_speed_cal / Speed_ratio;

				speed_rl = speed_fl;
10005274:	4b11      	ldr	r3, [pc, #68]	; (100052bc <Steering_Function+0xad4>)
10005276:	681a      	ldr	r2, [r3, #0]
10005278:	4b12      	ldr	r3, [pc, #72]	; (100052c4 <Steering_Function+0xadc>)
1000527a:	601a      	str	r2, [r3, #0]
				speed_rr = speed_fr;
1000527c:	4b10      	ldr	r3, [pc, #64]	; (100052c0 <Steering_Function+0xad8>)
1000527e:	681a      	ldr	r2, [r3, #0]
10005280:	4b11      	ldr	r3, [pc, #68]	; (100052c8 <Steering_Function+0xae0>)
10005282:	601a      	str	r2, [r3, #0]
10005284:	e0ed      	b.n	10005462 <Steering_Function+0xc7a>
10005286:	46c0      	nop			; (mov r8, r8)
10005288:	20000acc 	.word	0x20000acc
1000528c:	9999999a 	.word	0x9999999a
10005290:	bfa99999 	.word	0xbfa99999
10005294:	c1a00000 	.word	0xc1a00000
10005298:	1a9fbe77 	.word	0x1a9fbe77
1000529c:	3fc4dd2f 	.word	0x3fc4dd2f
100052a0:	3126e979 	.word	0x3126e979
100052a4:	3fdcac08 	.word	0x3fdcac08
100052a8:	2584f4c7 	.word	0x2584f4c7
100052ac:	c04ca61e 	.word	0xc04ca61e
100052b0:	20000a04 	.word	0x20000a04
100052b4:	20000a08 	.word	0x20000a08
100052b8:	20000ad0 	.word	0x20000ad0
100052bc:	200009ec 	.word	0x200009ec
100052c0:	200009f0 	.word	0x200009f0
100052c4:	200009f4 	.word	0x200009f4
100052c8:	200009f8 	.word	0x200009f8
100052cc:	200009fc 	.word	0x200009fc
100052d0:	20000a00 	.word	0x20000a00
100052d4:	41f00000 	.word	0x41f00000
100052d8:	c1f00000 	.word	0xc1f00000
100052dc:	404ca61e 	.word	0x404ca61e
100052e0:	c28f5c29 	.word	0xc28f5c29
100052e4:	3fcc28f5 	.word	0x3fcc28f5
100052e8:	54442d18 	.word	0x54442d18
100052ec:	400921fb 	.word	0x400921fb
100052f0:	3fa99999 	.word	0x3fa99999
100052f4:	41a00000 	.word	0x41a00000
			}
			else if((- R_TRUN_MIN > R_Turn) && (R_Turn > -R_TRUN_MAX)){ // trun left positive R
100052f8:	4bb1      	ldr	r3, [pc, #708]	; (100055c0 <Steering_Function+0xdd8>)
100052fa:	681b      	ldr	r3, [r3, #0]
100052fc:	1c18      	adds	r0, r3, #0
100052fe:	f007 f80b 	bl	1000c318 <__aeabi_f2d>
10005302:	1c03      	adds	r3, r0, #0
10005304:	1c0c      	adds	r4, r1, #0
10005306:	1c18      	adds	r0, r3, #0
10005308:	1c21      	adds	r1, r4, #0
1000530a:	4aae      	ldr	r2, [pc, #696]	; (100055c4 <Steering_Function+0xddc>)
1000530c:	4bae      	ldr	r3, [pc, #696]	; (100055c8 <Steering_Function+0xde0>)
1000530e:	f004 fa47 	bl	100097a0 <__aeabi_dcmplt>
10005312:	1e03      	subs	r3, r0, #0
10005314:	d100      	bne.n	10005318 <Steering_Function+0xb30>
10005316:	e08b      	b.n	10005430 <Steering_Function+0xc48>
10005318:	4ba9      	ldr	r3, [pc, #676]	; (100055c0 <Steering_Function+0xdd8>)
1000531a:	681b      	ldr	r3, [r3, #0]
1000531c:	1c18      	adds	r0, r3, #0
1000531e:	49ab      	ldr	r1, [pc, #684]	; (100055cc <Steering_Function+0xde4>)
10005320:	f004 fa8c 	bl	1000983c <__aeabi_fcmpgt>
10005324:	1e03      	subs	r3, r0, #0
10005326:	d100      	bne.n	1000532a <Steering_Function+0xb42>
10005328:	e082      	b.n	10005430 <Steering_Function+0xc48>
				angle_fl = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // in wheel
1000532a:	4ba5      	ldr	r3, [pc, #660]	; (100055c0 <Steering_Function+0xdd8>)
1000532c:	681b      	ldr	r3, [r3, #0]
1000532e:	1c18      	adds	r0, r3, #0
10005330:	f006 fff2 	bl	1000c318 <__aeabi_f2d>
10005334:	1c03      	adds	r3, r0, #0
10005336:	1c0c      	adds	r4, r1, #0
10005338:	1c18      	adds	r0, r3, #0
1000533a:	1c21      	adds	r1, r4, #0
1000533c:	4aa4      	ldr	r2, [pc, #656]	; (100055d0 <Steering_Function+0xde8>)
1000533e:	4ba5      	ldr	r3, [pc, #660]	; (100055d4 <Steering_Function+0xdec>)
10005340:	f005 f9cc 	bl	1000a6dc <__aeabi_dadd>
10005344:	1c03      	adds	r3, r0, #0
10005346:	1c0c      	adds	r4, r1, #0
10005348:	48a3      	ldr	r0, [pc, #652]	; (100055d8 <Steering_Function+0xdf0>)
1000534a:	49a4      	ldr	r1, [pc, #656]	; (100055dc <Steering_Function+0xdf4>)
1000534c:	1c1a      	adds	r2, r3, #0
1000534e:	1c23      	adds	r3, r4, #0
10005350:	f005 fcec 	bl	1000ad2c <__aeabi_ddiv>
10005354:	1c03      	adds	r3, r0, #0
10005356:	1c0c      	adds	r4, r1, #0
10005358:	1c18      	adds	r0, r3, #0
1000535a:	1c21      	adds	r1, r4, #0
1000535c:	f001 fa80 	bl	10006860 <atan>
10005360:	1c03      	adds	r3, r0, #0
10005362:	1c0c      	adds	r4, r1, #0
10005364:	1c18      	adds	r0, r3, #0
10005366:	1c21      	adds	r1, r4, #0
10005368:	4a9d      	ldr	r2, [pc, #628]	; (100055e0 <Steering_Function+0xdf8>)
1000536a:	4b9e      	ldr	r3, [pc, #632]	; (100055e4 <Steering_Function+0xdfc>)
1000536c:	f006 f91c 	bl	1000b5a8 <__aeabi_dmul>
10005370:	1c03      	adds	r3, r0, #0
10005372:	1c0c      	adds	r4, r1, #0
10005374:	1c18      	adds	r0, r3, #0
10005376:	1c21      	adds	r1, r4, #0
10005378:	f007 f822 	bl	1000c3c0 <__aeabi_d2f>
1000537c:	1c02      	adds	r2, r0, #0
1000537e:	4b9a      	ldr	r3, [pc, #616]	; (100055e8 <Steering_Function+0xe00>)
10005380:	601a      	str	r2, [r3, #0]
				angle_fr = RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // out wheel
10005382:	4b8f      	ldr	r3, [pc, #572]	; (100055c0 <Steering_Function+0xdd8>)
10005384:	681b      	ldr	r3, [r3, #0]
10005386:	1c18      	adds	r0, r3, #0
10005388:	f006 ffc6 	bl	1000c318 <__aeabi_f2d>
1000538c:	1c03      	adds	r3, r0, #0
1000538e:	1c0c      	adds	r4, r1, #0
10005390:	1c18      	adds	r0, r3, #0
10005392:	1c21      	adds	r1, r4, #0
10005394:	4a8e      	ldr	r2, [pc, #568]	; (100055d0 <Steering_Function+0xde8>)
10005396:	4b8f      	ldr	r3, [pc, #572]	; (100055d4 <Steering_Function+0xdec>)
10005398:	f006 fba0 	bl	1000badc <__aeabi_dsub>
1000539c:	1c03      	adds	r3, r0, #0
1000539e:	1c0c      	adds	r4, r1, #0
100053a0:	488d      	ldr	r0, [pc, #564]	; (100055d8 <Steering_Function+0xdf0>)
100053a2:	498e      	ldr	r1, [pc, #568]	; (100055dc <Steering_Function+0xdf4>)
100053a4:	1c1a      	adds	r2, r3, #0
100053a6:	1c23      	adds	r3, r4, #0
100053a8:	f005 fcc0 	bl	1000ad2c <__aeabi_ddiv>
100053ac:	1c03      	adds	r3, r0, #0
100053ae:	1c0c      	adds	r4, r1, #0
100053b0:	1c18      	adds	r0, r3, #0
100053b2:	1c21      	adds	r1, r4, #0
100053b4:	f001 fa54 	bl	10006860 <atan>
100053b8:	1c03      	adds	r3, r0, #0
100053ba:	1c0c      	adds	r4, r1, #0
100053bc:	1c18      	adds	r0, r3, #0
100053be:	1c21      	adds	r1, r4, #0
100053c0:	4a87      	ldr	r2, [pc, #540]	; (100055e0 <Steering_Function+0xdf8>)
100053c2:	4b88      	ldr	r3, [pc, #544]	; (100055e4 <Steering_Function+0xdfc>)
100053c4:	f006 f8f0 	bl	1000b5a8 <__aeabi_dmul>
100053c8:	1c03      	adds	r3, r0, #0
100053ca:	1c0c      	adds	r4, r1, #0
100053cc:	1c18      	adds	r0, r3, #0
100053ce:	1c21      	adds	r1, r4, #0
100053d0:	f006 fff6 	bl	1000c3c0 <__aeabi_d2f>
100053d4:	1c02      	adds	r2, r0, #0
100053d6:	4b85      	ldr	r3, [pc, #532]	; (100055ec <Steering_Function+0xe04>)
100053d8:	601a      	str	r2, [r3, #0]
				//angle_rl = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn + HALF_TRACK_WIDTH)); // in wheel
				//angle_rr = - RAD_TO_DEG * atan(WHEEL_BASE /(R_Turn - HALF_TRACK_WIDTH)); // in wheel

				angle_rl = -angle_fl;
100053da:	4b83      	ldr	r3, [pc, #524]	; (100055e8 <Steering_Function+0xe00>)
100053dc:	681b      	ldr	r3, [r3, #0]
100053de:	2280      	movs	r2, #128	; 0x80
100053e0:	0612      	lsls	r2, r2, #24
100053e2:	405a      	eors	r2, r3
100053e4:	4b82      	ldr	r3, [pc, #520]	; (100055f0 <Steering_Function+0xe08>)
100053e6:	601a      	str	r2, [r3, #0]
				angle_rr = -angle_fr;
100053e8:	4b80      	ldr	r3, [pc, #512]	; (100055ec <Steering_Function+0xe04>)
100053ea:	681b      	ldr	r3, [r3, #0]
100053ec:	2280      	movs	r2, #128	; 0x80
100053ee:	0612      	lsls	r2, r2, #24
100053f0:	405a      	eors	r2, r3
100053f2:	4b80      	ldr	r3, [pc, #512]	; (100055f4 <Steering_Function+0xe0c>)
100053f4:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal / Speed_ratio;
100053f6:	4b80      	ldr	r3, [pc, #512]	; (100055f8 <Steering_Function+0xe10>)
100053f8:	681b      	ldr	r3, [r3, #0]
100053fa:	68b8      	ldr	r0, [r7, #8]
100053fc:	1c19      	adds	r1, r3, #0
100053fe:	f004 fc63 	bl	10009cc8 <__aeabi_fdiv>
10005402:	1c03      	adds	r3, r0, #0
10005404:	1c1a      	adds	r2, r3, #0
10005406:	4b7d      	ldr	r3, [pc, #500]	; (100055fc <Steering_Function+0xe14>)
10005408:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal * Speed_ratio;
1000540a:	4b7b      	ldr	r3, [pc, #492]	; (100055f8 <Steering_Function+0xe10>)
1000540c:	681b      	ldr	r3, [r3, #0]
1000540e:	1c18      	adds	r0, r3, #0
10005410:	68b9      	ldr	r1, [r7, #8]
10005412:	f004 fe4b 	bl	1000a0ac <__aeabi_fmul>
10005416:	1c03      	adds	r3, r0, #0
10005418:	1c1a      	adds	r2, r3, #0
1000541a:	4b79      	ldr	r3, [pc, #484]	; (10005600 <Steering_Function+0xe18>)
1000541c:	601a      	str	r2, [r3, #0]
				//speed_rl = Driving_speed_cal / Speed_ratio;
				//speed_rr = Driving_speed_cal * Speed_ratio;

				speed_rl = speed_fl;
1000541e:	4b77      	ldr	r3, [pc, #476]	; (100055fc <Steering_Function+0xe14>)
10005420:	681a      	ldr	r2, [r3, #0]
10005422:	4b78      	ldr	r3, [pc, #480]	; (10005604 <Steering_Function+0xe1c>)
10005424:	601a      	str	r2, [r3, #0]
				speed_rr = speed_fr;
10005426:	4b76      	ldr	r3, [pc, #472]	; (10005600 <Steering_Function+0xe18>)
10005428:	681a      	ldr	r2, [r3, #0]
1000542a:	4b77      	ldr	r3, [pc, #476]	; (10005608 <Steering_Function+0xe20>)
1000542c:	601a      	str	r2, [r3, #0]
1000542e:	e018      	b.n	10005462 <Steering_Function+0xc7a>
			}
			else{// starigt driving
				angle_fl = 0;
10005430:	4b6d      	ldr	r3, [pc, #436]	; (100055e8 <Steering_Function+0xe00>)
10005432:	2200      	movs	r2, #0
10005434:	601a      	str	r2, [r3, #0]
				angle_fr = 0;
10005436:	4b6d      	ldr	r3, [pc, #436]	; (100055ec <Steering_Function+0xe04>)
10005438:	2200      	movs	r2, #0
1000543a:	601a      	str	r2, [r3, #0]
				angle_rl = 0;
1000543c:	4b6c      	ldr	r3, [pc, #432]	; (100055f0 <Steering_Function+0xe08>)
1000543e:	2200      	movs	r2, #0
10005440:	601a      	str	r2, [r3, #0]
				angle_rr = 0;
10005442:	4b6c      	ldr	r3, [pc, #432]	; (100055f4 <Steering_Function+0xe0c>)
10005444:	2200      	movs	r2, #0
10005446:	601a      	str	r2, [r3, #0]

				speed_fl = Driving_speed_cal;
10005448:	4b6c      	ldr	r3, [pc, #432]	; (100055fc <Steering_Function+0xe14>)
1000544a:	68ba      	ldr	r2, [r7, #8]
1000544c:	601a      	str	r2, [r3, #0]
				speed_fr = Driving_speed_cal;
1000544e:	4b6c      	ldr	r3, [pc, #432]	; (10005600 <Steering_Function+0xe18>)
10005450:	68ba      	ldr	r2, [r7, #8]
10005452:	601a      	str	r2, [r3, #0]
				speed_rl = Driving_speed_cal;
10005454:	4b6b      	ldr	r3, [pc, #428]	; (10005604 <Steering_Function+0xe1c>)
10005456:	68ba      	ldr	r2, [r7, #8]
10005458:	601a      	str	r2, [r3, #0]
				speed_rr = Driving_speed_cal;
1000545a:	4b6b      	ldr	r3, [pc, #428]	; (10005608 <Steering_Function+0xe20>)
1000545c:	68ba      	ldr	r2, [r7, #8]
1000545e:	601a      	str	r2, [r3, #0]
			}
			break;
10005460:	e08b      	b.n	1000557a <Steering_Function+0xd92>
10005462:	e08a      	b.n	1000557a <Steering_Function+0xd92>

		case CRAB:  //carb //#############################################################
			Steering_direction_cal = Steering_direction_cal * 2.5; // mach data from remote
10005464:	68f8      	ldr	r0, [r7, #12]
10005466:	4969      	ldr	r1, [pc, #420]	; (1000560c <Steering_Function+0xe24>)
10005468:	f004 fe20 	bl	1000a0ac <__aeabi_fmul>
1000546c:	1c03      	adds	r3, r0, #0
1000546e:	60fb      	str	r3, [r7, #12]
			if(Steering_direction_cal > 190) Steering_direction_cal = 190;
10005470:	68f8      	ldr	r0, [r7, #12]
10005472:	4967      	ldr	r1, [pc, #412]	; (10005610 <Steering_Function+0xe28>)
10005474:	f004 f9e2 	bl	1000983c <__aeabi_fcmpgt>
10005478:	1e03      	subs	r3, r0, #0
1000547a:	d001      	beq.n	10005480 <Steering_Function+0xc98>
1000547c:	4b64      	ldr	r3, [pc, #400]	; (10005610 <Steering_Function+0xe28>)
1000547e:	60fb      	str	r3, [r7, #12]
			if(Steering_direction_cal < -190) Steering_direction_cal = -190;
10005480:	68f8      	ldr	r0, [r7, #12]
10005482:	4964      	ldr	r1, [pc, #400]	; (10005614 <Steering_Function+0xe2c>)
10005484:	f004 f9c6 	bl	10009814 <__aeabi_fcmplt>
10005488:	1e03      	subs	r3, r0, #0
1000548a:	d001      	beq.n	10005490 <Steering_Function+0xca8>
1000548c:	4b61      	ldr	r3, [pc, #388]	; (10005614 <Steering_Function+0xe2c>)
1000548e:	60fb      	str	r3, [r7, #12]
			// steering
			angle_fl = Steering_direction_cal;
10005490:	4b55      	ldr	r3, [pc, #340]	; (100055e8 <Steering_Function+0xe00>)
10005492:	68fa      	ldr	r2, [r7, #12]
10005494:	601a      	str	r2, [r3, #0]
			angle_fr = Steering_direction_cal;
10005496:	4b55      	ldr	r3, [pc, #340]	; (100055ec <Steering_Function+0xe04>)
10005498:	68fa      	ldr	r2, [r7, #12]
1000549a:	601a      	str	r2, [r3, #0]
			angle_rl = Steering_direction_cal;
1000549c:	4b54      	ldr	r3, [pc, #336]	; (100055f0 <Steering_Function+0xe08>)
1000549e:	68fa      	ldr	r2, [r7, #12]
100054a0:	601a      	str	r2, [r3, #0]
			angle_rr = Steering_direction_cal;
100054a2:	4b54      	ldr	r3, [pc, #336]	; (100055f4 <Steering_Function+0xe0c>)
100054a4:	68fa      	ldr	r2, [r7, #12]
100054a6:	601a      	str	r2, [r3, #0]
			 // speed
			 speed_fl = Driving_speed_cal;
100054a8:	4b54      	ldr	r3, [pc, #336]	; (100055fc <Steering_Function+0xe14>)
100054aa:	68ba      	ldr	r2, [r7, #8]
100054ac:	601a      	str	r2, [r3, #0]
			 speed_fr = Driving_speed_cal;
100054ae:	4b54      	ldr	r3, [pc, #336]	; (10005600 <Steering_Function+0xe18>)
100054b0:	68ba      	ldr	r2, [r7, #8]
100054b2:	601a      	str	r2, [r3, #0]
			 speed_rl = Driving_speed_cal;
100054b4:	4b53      	ldr	r3, [pc, #332]	; (10005604 <Steering_Function+0xe1c>)
100054b6:	68ba      	ldr	r2, [r7, #8]
100054b8:	601a      	str	r2, [r3, #0]
			 speed_rr = Driving_speed_cal;
100054ba:	4b53      	ldr	r3, [pc, #332]	; (10005608 <Steering_Function+0xe20>)
100054bc:	68ba      	ldr	r2, [r7, #8]
100054be:	601a      	str	r2, [r3, #0]

			break;
100054c0:	e05b      	b.n	1000557a <Steering_Function+0xd92>

		case ROTATE: // rotate #############################################################
			// steering agel for turng in place
			angle_fl = ROTATION_ANGLE + ROTATION_ANGLE_OFFSET;
100054c2:	4b49      	ldr	r3, [pc, #292]	; (100055e8 <Steering_Function+0xe00>)
100054c4:	4a54      	ldr	r2, [pc, #336]	; (10005618 <Steering_Function+0xe30>)
100054c6:	601a      	str	r2, [r3, #0]
			angle_fr = -ROTATION_ANGLE + ROTATION_ANGLE_OFFSET;
100054c8:	4b48      	ldr	r3, [pc, #288]	; (100055ec <Steering_Function+0xe04>)
100054ca:	4a54      	ldr	r2, [pc, #336]	; (1000561c <Steering_Function+0xe34>)
100054cc:	601a      	str	r2, [r3, #0]
			angle_rl = -ROTATION_ANGLE + ROTATION_ANGLE_OFFSET;
100054ce:	4b48      	ldr	r3, [pc, #288]	; (100055f0 <Steering_Function+0xe08>)
100054d0:	4a52      	ldr	r2, [pc, #328]	; (1000561c <Steering_Function+0xe34>)
100054d2:	601a      	str	r2, [r3, #0]
			angle_rr = ROTATION_ANGLE + ROTATION_ANGLE_OFFSET;
100054d4:	4b47      	ldr	r3, [pc, #284]	; (100055f4 <Steering_Function+0xe0c>)
100054d6:	4a50      	ldr	r2, [pc, #320]	; (10005618 <Steering_Function+0xe30>)
100054d8:	601a      	str	r2, [r3, #0]

			 // speed
			if (Steering_direction_cal > 10){
100054da:	68f8      	ldr	r0, [r7, #12]
100054dc:	4950      	ldr	r1, [pc, #320]	; (10005620 <Steering_Function+0xe38>)
100054de:	f004 f9ad 	bl	1000983c <__aeabi_fcmpgt>
100054e2:	1e03      	subs	r3, r0, #0
100054e4:	d00e      	beq.n	10005504 <Steering_Function+0xd1c>
				speed_fl = ROTATION_SPEED;
100054e6:	4b45      	ldr	r3, [pc, #276]	; (100055fc <Steering_Function+0xe14>)
100054e8:	22fa      	movs	r2, #250	; 0xfa
100054ea:	0592      	lsls	r2, r2, #22
100054ec:	601a      	str	r2, [r3, #0]
				speed_fr = -ROTATION_SPEED;
100054ee:	4b44      	ldr	r3, [pc, #272]	; (10005600 <Steering_Function+0xe18>)
100054f0:	4a4c      	ldr	r2, [pc, #304]	; (10005624 <Steering_Function+0xe3c>)
100054f2:	601a      	str	r2, [r3, #0]
				speed_rl = ROTATION_SPEED;
100054f4:	4b43      	ldr	r3, [pc, #268]	; (10005604 <Steering_Function+0xe1c>)
100054f6:	22fa      	movs	r2, #250	; 0xfa
100054f8:	0592      	lsls	r2, r2, #22
100054fa:	601a      	str	r2, [r3, #0]
				speed_rr = -ROTATION_SPEED;
100054fc:	4b42      	ldr	r3, [pc, #264]	; (10005608 <Steering_Function+0xe20>)
100054fe:	4a49      	ldr	r2, [pc, #292]	; (10005624 <Steering_Function+0xe3c>)
10005500:	601a      	str	r2, [r3, #0]
10005502:	e021      	b.n	10005548 <Steering_Function+0xd60>
			}
			else if(Steering_direction_cal < -10){
10005504:	68f8      	ldr	r0, [r7, #12]
10005506:	4948      	ldr	r1, [pc, #288]	; (10005628 <Steering_Function+0xe40>)
10005508:	f004 f984 	bl	10009814 <__aeabi_fcmplt>
1000550c:	1e03      	subs	r3, r0, #0
1000550e:	d00e      	beq.n	1000552e <Steering_Function+0xd46>
				speed_fl = -ROTATION_SPEED;
10005510:	4b3a      	ldr	r3, [pc, #232]	; (100055fc <Steering_Function+0xe14>)
10005512:	4a44      	ldr	r2, [pc, #272]	; (10005624 <Steering_Function+0xe3c>)
10005514:	601a      	str	r2, [r3, #0]
				speed_fr = ROTATION_SPEED;
10005516:	4b3a      	ldr	r3, [pc, #232]	; (10005600 <Steering_Function+0xe18>)
10005518:	22fa      	movs	r2, #250	; 0xfa
1000551a:	0592      	lsls	r2, r2, #22
1000551c:	601a      	str	r2, [r3, #0]
				speed_rl = -ROTATION_SPEED;
1000551e:	4b39      	ldr	r3, [pc, #228]	; (10005604 <Steering_Function+0xe1c>)
10005520:	4a40      	ldr	r2, [pc, #256]	; (10005624 <Steering_Function+0xe3c>)
10005522:	601a      	str	r2, [r3, #0]
				speed_rr = ROTATION_SPEED;
10005524:	4b38      	ldr	r3, [pc, #224]	; (10005608 <Steering_Function+0xe20>)
10005526:	22fa      	movs	r2, #250	; 0xfa
10005528:	0592      	lsls	r2, r2, #22
1000552a:	601a      	str	r2, [r3, #0]
1000552c:	e00c      	b.n	10005548 <Steering_Function+0xd60>
			}
			else{
				speed_fl = 0;
1000552e:	4b33      	ldr	r3, [pc, #204]	; (100055fc <Steering_Function+0xe14>)
10005530:	2200      	movs	r2, #0
10005532:	601a      	str	r2, [r3, #0]
				speed_fr = 0;
10005534:	4b32      	ldr	r3, [pc, #200]	; (10005600 <Steering_Function+0xe18>)
10005536:	2200      	movs	r2, #0
10005538:	601a      	str	r2, [r3, #0]
				speed_rl = 0;
1000553a:	4b32      	ldr	r3, [pc, #200]	; (10005604 <Steering_Function+0xe1c>)
1000553c:	2200      	movs	r2, #0
1000553e:	601a      	str	r2, [r3, #0]
				speed_rr = 0;
10005540:	4b31      	ldr	r3, [pc, #196]	; (10005608 <Steering_Function+0xe20>)
10005542:	2200      	movs	r2, #0
10005544:	601a      	str	r2, [r3, #0]
			}
			break;
10005546:	e018      	b.n	1000557a <Steering_Function+0xd92>
10005548:	e017      	b.n	1000557a <Steering_Function+0xd92>

		default:
			angle_fl = 0;
1000554a:	4b27      	ldr	r3, [pc, #156]	; (100055e8 <Steering_Function+0xe00>)
1000554c:	2200      	movs	r2, #0
1000554e:	601a      	str	r2, [r3, #0]
			angle_fr = 0;
10005550:	4b26      	ldr	r3, [pc, #152]	; (100055ec <Steering_Function+0xe04>)
10005552:	2200      	movs	r2, #0
10005554:	601a      	str	r2, [r3, #0]
			angle_rl = 0;
10005556:	4b26      	ldr	r3, [pc, #152]	; (100055f0 <Steering_Function+0xe08>)
10005558:	2200      	movs	r2, #0
1000555a:	601a      	str	r2, [r3, #0]
			angle_rr = 0;
1000555c:	4b25      	ldr	r3, [pc, #148]	; (100055f4 <Steering_Function+0xe0c>)
1000555e:	2200      	movs	r2, #0
10005560:	601a      	str	r2, [r3, #0]

			speed_fl = 0;
10005562:	4b26      	ldr	r3, [pc, #152]	; (100055fc <Steering_Function+0xe14>)
10005564:	2200      	movs	r2, #0
10005566:	601a      	str	r2, [r3, #0]
			speed_fr = 0;
10005568:	4b25      	ldr	r3, [pc, #148]	; (10005600 <Steering_Function+0xe18>)
1000556a:	2200      	movs	r2, #0
1000556c:	601a      	str	r2, [r3, #0]
			speed_rl = 0;
1000556e:	4b25      	ldr	r3, [pc, #148]	; (10005604 <Steering_Function+0xe1c>)
10005570:	2200      	movs	r2, #0
10005572:	601a      	str	r2, [r3, #0]
			speed_rr = 0;
10005574:	4b24      	ldr	r3, [pc, #144]	; (10005608 <Steering_Function+0xe20>)
10005576:	2200      	movs	r2, #0
10005578:	601a      	str	r2, [r3, #0]

	}
  // set gobal vars
  Steering_Angles[0] = angle_fl;
1000557a:	4b1b      	ldr	r3, [pc, #108]	; (100055e8 <Steering_Function+0xe00>)
1000557c:	681a      	ldr	r2, [r3, #0]
1000557e:	4b2b      	ldr	r3, [pc, #172]	; (1000562c <Steering_Function+0xe44>)
10005580:	601a      	str	r2, [r3, #0]
  Steering_Angles[1] = angle_fr;
10005582:	4b1a      	ldr	r3, [pc, #104]	; (100055ec <Steering_Function+0xe04>)
10005584:	681a      	ldr	r2, [r3, #0]
10005586:	4b29      	ldr	r3, [pc, #164]	; (1000562c <Steering_Function+0xe44>)
10005588:	605a      	str	r2, [r3, #4]
  Steering_Angles[2] = angle_rl;
1000558a:	4b19      	ldr	r3, [pc, #100]	; (100055f0 <Steering_Function+0xe08>)
1000558c:	681a      	ldr	r2, [r3, #0]
1000558e:	4b27      	ldr	r3, [pc, #156]	; (1000562c <Steering_Function+0xe44>)
10005590:	609a      	str	r2, [r3, #8]
  Steering_Angles[3] = angle_rr;
10005592:	4b18      	ldr	r3, [pc, #96]	; (100055f4 <Steering_Function+0xe0c>)
10005594:	681a      	ldr	r2, [r3, #0]
10005596:	4b25      	ldr	r3, [pc, #148]	; (1000562c <Steering_Function+0xe44>)
10005598:	60da      	str	r2, [r3, #12]

  Speeds[0] = speed_fl;
1000559a:	4b18      	ldr	r3, [pc, #96]	; (100055fc <Steering_Function+0xe14>)
1000559c:	681a      	ldr	r2, [r3, #0]
1000559e:	4b24      	ldr	r3, [pc, #144]	; (10005630 <Steering_Function+0xe48>)
100055a0:	601a      	str	r2, [r3, #0]
  Speeds[1] = speed_fr;
100055a2:	4b17      	ldr	r3, [pc, #92]	; (10005600 <Steering_Function+0xe18>)
100055a4:	681a      	ldr	r2, [r3, #0]
100055a6:	4b22      	ldr	r3, [pc, #136]	; (10005630 <Steering_Function+0xe48>)
100055a8:	605a      	str	r2, [r3, #4]
  Speeds[2] = speed_rl;
100055aa:	4b16      	ldr	r3, [pc, #88]	; (10005604 <Steering_Function+0xe1c>)
100055ac:	681a      	ldr	r2, [r3, #0]
100055ae:	4b20      	ldr	r3, [pc, #128]	; (10005630 <Steering_Function+0xe48>)
100055b0:	609a      	str	r2, [r3, #8]
  Speeds[3] = speed_rr;
100055b2:	4b15      	ldr	r3, [pc, #84]	; (10005608 <Steering_Function+0xe20>)
100055b4:	681a      	ldr	r2, [r3, #0]
100055b6:	4b1e      	ldr	r3, [pc, #120]	; (10005630 <Steering_Function+0xe48>)
100055b8:	60da      	str	r2, [r3, #12]

}
100055ba:	46bd      	mov	sp, r7
100055bc:	b005      	add	sp, #20
100055be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100055c0:	20000acc 	.word	0x20000acc
100055c4:	9999999a 	.word	0x9999999a
100055c8:	bfa99999 	.word	0xbfa99999
100055cc:	c1a00000 	.word	0xc1a00000
100055d0:	1a9fbe77 	.word	0x1a9fbe77
100055d4:	3fc4dd2f 	.word	0x3fc4dd2f
100055d8:	3126e979 	.word	0x3126e979
100055dc:	3fdcac08 	.word	0x3fdcac08
100055e0:	2584f4c7 	.word	0x2584f4c7
100055e4:	404ca61e 	.word	0x404ca61e
100055e8:	200009fc 	.word	0x200009fc
100055ec:	20000a00 	.word	0x20000a00
100055f0:	20000a04 	.word	0x20000a04
100055f4:	20000a08 	.word	0x20000a08
100055f8:	20000ad0 	.word	0x20000ad0
100055fc:	200009ec 	.word	0x200009ec
10005600:	200009f0 	.word	0x200009f0
10005604:	200009f4 	.word	0x200009f4
10005608:	200009f8 	.word	0x200009f8
1000560c:	40200000 	.word	0x40200000
10005610:	433e0000 	.word	0x433e0000
10005614:	c33e0000 	.word	0xc33e0000
10005618:	426bd70a 	.word	0x426bd70a
1000561c:	c243d70a 	.word	0xc243d70a
10005620:	41200000 	.word	0x41200000
10005624:	be800000 	.word	0xbe800000
10005628:	c1200000 	.word	0xc1200000
1000562c:	20000a40 	.word	0x20000a40
10005630:	20000a20 	.word	0x20000a20

10005634 <Trajcetory_calc>:


void Trajcetory_calc(){
10005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005636:	af00      	add	r7, sp, #0

	avg_Speeds = average(Speeds,4);
10005638:	4b4f      	ldr	r3, [pc, #316]	; (10005778 <Trajcetory_calc+0x144>)
1000563a:	1c18      	adds	r0, r3, #0
1000563c:	2104      	movs	r1, #4
1000563e:	f001 f8e5 	bl	1000680c <average>
10005642:	1c02      	adds	r2, r0, #0
10005644:	4b4d      	ldr	r3, [pc, #308]	; (1000577c <Trajcetory_calc+0x148>)
10005646:	601a      	str	r2, [r3, #0]

	switch(Steering_mode) // options 'Front'; 'Rear'; '4_Wheel'; 'Carb'; 'Rotate'
10005648:	4b4d      	ldr	r3, [pc, #308]	; (10005780 <Trajcetory_calc+0x14c>)
1000564a:	781b      	ldrb	r3, [r3, #0]
1000564c:	b2db      	uxtb	r3, r3
1000564e:	2b05      	cmp	r3, #5
10005650:	d85b      	bhi.n	1000570a <Trajcetory_calc+0xd6>
10005652:	009a      	lsls	r2, r3, #2
10005654:	4b4b      	ldr	r3, [pc, #300]	; (10005784 <Trajcetory_calc+0x150>)
10005656:	18d3      	adds	r3, r2, r3
10005658:	681b      	ldr	r3, [r3, #0]
1000565a:	469f      	mov	pc, r3
			case ALL_WHEEL: // 4 wheel #############################################################

				break;

			case CRAB:  //carb //#############################################################
				trajctory_x = avg_Speeds * cos(Steering_Angles[0] / RAD_TO_DEG);
1000565c:	4b47      	ldr	r3, [pc, #284]	; (1000577c <Trajcetory_calc+0x148>)
1000565e:	681b      	ldr	r3, [r3, #0]
10005660:	1c18      	adds	r0, r3, #0
10005662:	f006 fe59 	bl	1000c318 <__aeabi_f2d>
10005666:	1c05      	adds	r5, r0, #0
10005668:	1c0e      	adds	r6, r1, #0
1000566a:	4b47      	ldr	r3, [pc, #284]	; (10005788 <Trajcetory_calc+0x154>)
1000566c:	681b      	ldr	r3, [r3, #0]
1000566e:	1c18      	adds	r0, r3, #0
10005670:	f006 fe52 	bl	1000c318 <__aeabi_f2d>
10005674:	1c03      	adds	r3, r0, #0
10005676:	1c0c      	adds	r4, r1, #0
10005678:	1c18      	adds	r0, r3, #0
1000567a:	1c21      	adds	r1, r4, #0
1000567c:	4a43      	ldr	r2, [pc, #268]	; (1000578c <Trajcetory_calc+0x158>)
1000567e:	4b44      	ldr	r3, [pc, #272]	; (10005790 <Trajcetory_calc+0x15c>)
10005680:	f005 fb54 	bl	1000ad2c <__aeabi_ddiv>
10005684:	1c03      	adds	r3, r0, #0
10005686:	1c0c      	adds	r4, r1, #0
10005688:	1c18      	adds	r0, r3, #0
1000568a:	1c21      	adds	r1, r4, #0
1000568c:	f001 fa8e 	bl	10006bac <cos>
10005690:	1c03      	adds	r3, r0, #0
10005692:	1c0c      	adds	r4, r1, #0
10005694:	1c28      	adds	r0, r5, #0
10005696:	1c31      	adds	r1, r6, #0
10005698:	1c1a      	adds	r2, r3, #0
1000569a:	1c23      	adds	r3, r4, #0
1000569c:	f005 ff84 	bl	1000b5a8 <__aeabi_dmul>
100056a0:	1c03      	adds	r3, r0, #0
100056a2:	1c0c      	adds	r4, r1, #0
100056a4:	1c18      	adds	r0, r3, #0
100056a6:	1c21      	adds	r1, r4, #0
100056a8:	f006 fe8a 	bl	1000c3c0 <__aeabi_d2f>
100056ac:	1c02      	adds	r2, r0, #0
100056ae:	4b39      	ldr	r3, [pc, #228]	; (10005794 <Trajcetory_calc+0x160>)
100056b0:	601a      	str	r2, [r3, #0]
				trajctory_y = avg_Speeds * sin(Steering_Angles[0] / RAD_TO_DEG);
100056b2:	4b32      	ldr	r3, [pc, #200]	; (1000577c <Trajcetory_calc+0x148>)
100056b4:	681b      	ldr	r3, [r3, #0]
100056b6:	1c18      	adds	r0, r3, #0
100056b8:	f006 fe2e 	bl	1000c318 <__aeabi_f2d>
100056bc:	1c05      	adds	r5, r0, #0
100056be:	1c0e      	adds	r6, r1, #0
100056c0:	4b31      	ldr	r3, [pc, #196]	; (10005788 <Trajcetory_calc+0x154>)
100056c2:	681b      	ldr	r3, [r3, #0]
100056c4:	1c18      	adds	r0, r3, #0
100056c6:	f006 fe27 	bl	1000c318 <__aeabi_f2d>
100056ca:	1c03      	adds	r3, r0, #0
100056cc:	1c0c      	adds	r4, r1, #0
100056ce:	1c18      	adds	r0, r3, #0
100056d0:	1c21      	adds	r1, r4, #0
100056d2:	4a2e      	ldr	r2, [pc, #184]	; (1000578c <Trajcetory_calc+0x158>)
100056d4:	4b2e      	ldr	r3, [pc, #184]	; (10005790 <Trajcetory_calc+0x15c>)
100056d6:	f005 fb29 	bl	1000ad2c <__aeabi_ddiv>
100056da:	1c03      	adds	r3, r0, #0
100056dc:	1c0c      	adds	r4, r1, #0
100056de:	1c18      	adds	r0, r3, #0
100056e0:	1c21      	adds	r1, r4, #0
100056e2:	f001 fab5 	bl	10006c50 <sin>
100056e6:	1c03      	adds	r3, r0, #0
100056e8:	1c0c      	adds	r4, r1, #0
100056ea:	1c28      	adds	r0, r5, #0
100056ec:	1c31      	adds	r1, r6, #0
100056ee:	1c1a      	adds	r2, r3, #0
100056f0:	1c23      	adds	r3, r4, #0
100056f2:	f005 ff59 	bl	1000b5a8 <__aeabi_dmul>
100056f6:	1c03      	adds	r3, r0, #0
100056f8:	1c0c      	adds	r4, r1, #0
100056fa:	1c18      	adds	r0, r3, #0
100056fc:	1c21      	adds	r1, r4, #0
100056fe:	f006 fe5f 	bl	1000c3c0 <__aeabi_d2f>
10005702:	1c02      	adds	r2, r0, #0
10005704:	4b24      	ldr	r3, [pc, #144]	; (10005798 <Trajcetory_calc+0x164>)
10005706:	601a      	str	r2, [r3, #0]


				break;
10005708:	e007      	b.n	1000571a <Trajcetory_calc+0xe6>

				break;

			default :

			trajctory_x = 0;
1000570a:	4b22      	ldr	r3, [pc, #136]	; (10005794 <Trajcetory_calc+0x160>)
1000570c:	2200      	movs	r2, #0
1000570e:	601a      	str	r2, [r3, #0]
			trajctory_y = 0;
10005710:	4b21      	ldr	r3, [pc, #132]	; (10005798 <Trajcetory_calc+0x164>)
10005712:	2200      	movs	r2, #0
10005714:	601a      	str	r2, [r3, #0]
10005716:	e000      	b.n	1000571a <Trajcetory_calc+0xe6>

	switch(Steering_mode) // options 'Front'; 'Rear'; '4_Wheel'; 'Carb'; 'Rotate'
		{
			case FRONT://#############################################################
				//trajctory_x =
				break;
10005718:	46c0      	nop			; (mov r8, r8)
			trajctory_x = 0;
			trajctory_y = 0;
		}

	//trajectory_angle = angel_of_2D_vetor_deg(Trajctory); // atan(trajctory_x / trajctory_y) / RAD_TO_DEG;
	Trajctory[0] = trajctory_x;
1000571a:	4b1e      	ldr	r3, [pc, #120]	; (10005794 <Trajcetory_calc+0x160>)
1000571c:	681a      	ldr	r2, [r3, #0]
1000571e:	4b1f      	ldr	r3, [pc, #124]	; (1000579c <Trajcetory_calc+0x168>)
10005720:	601a      	str	r2, [r3, #0]
	Trajctory[1] = trajctory_y;
10005722:	4b1d      	ldr	r3, [pc, #116]	; (10005798 <Trajcetory_calc+0x164>)
10005724:	681a      	ldr	r2, [r3, #0]
10005726:	4b1d      	ldr	r3, [pc, #116]	; (1000579c <Trajcetory_calc+0x168>)
10005728:	605a      	str	r2, [r3, #4]
	trajectory_angle = atan2(trajctory_y,trajctory_x) * RAD_TO_DEG;
1000572a:	4b1b      	ldr	r3, [pc, #108]	; (10005798 <Trajcetory_calc+0x164>)
1000572c:	681b      	ldr	r3, [r3, #0]
1000572e:	1c18      	adds	r0, r3, #0
10005730:	f006 fdf2 	bl	1000c318 <__aeabi_f2d>
10005734:	1c05      	adds	r5, r0, #0
10005736:	1c0e      	adds	r6, r1, #0
10005738:	4b16      	ldr	r3, [pc, #88]	; (10005794 <Trajcetory_calc+0x160>)
1000573a:	681b      	ldr	r3, [r3, #0]
1000573c:	1c18      	adds	r0, r3, #0
1000573e:	f006 fdeb 	bl	1000c318 <__aeabi_f2d>
10005742:	1c03      	adds	r3, r0, #0
10005744:	1c0c      	adds	r4, r1, #0
10005746:	1c28      	adds	r0, r5, #0
10005748:	1c31      	adds	r1, r6, #0
1000574a:	1c1a      	adds	r2, r3, #0
1000574c:	1c23      	adds	r3, r4, #0
1000574e:	f001 fafb 	bl	10006d48 <atan2>
10005752:	1c03      	adds	r3, r0, #0
10005754:	1c0c      	adds	r4, r1, #0
10005756:	1c18      	adds	r0, r3, #0
10005758:	1c21      	adds	r1, r4, #0
1000575a:	4a0c      	ldr	r2, [pc, #48]	; (1000578c <Trajcetory_calc+0x158>)
1000575c:	4b0c      	ldr	r3, [pc, #48]	; (10005790 <Trajcetory_calc+0x15c>)
1000575e:	f005 ff23 	bl	1000b5a8 <__aeabi_dmul>
10005762:	1c03      	adds	r3, r0, #0
10005764:	1c0c      	adds	r4, r1, #0
10005766:	1c18      	adds	r0, r3, #0
10005768:	1c21      	adds	r1, r4, #0
1000576a:	f006 fe29 	bl	1000c3c0 <__aeabi_d2f>
1000576e:	1c02      	adds	r2, r0, #0
10005770:	4b0b      	ldr	r3, [pc, #44]	; (100057a0 <Trajcetory_calc+0x16c>)
10005772:	601a      	str	r2, [r3, #0]
}
10005774:	46bd      	mov	sp, r7
10005776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10005778:	20000a20 	.word	0x20000a20
1000577c:	20000a14 	.word	0x20000a14
10005780:	2000082a 	.word	0x2000082a
10005784:	1000cb9c 	.word	0x1000cb9c
10005788:	20000a40 	.word	0x20000a40
1000578c:	2584f4c7 	.word	0x2584f4c7
10005790:	404ca61e 	.word	0x404ca61e
10005794:	20000a0c 	.word	0x20000a0c
10005798:	20000a10 	.word	0x20000a10
1000579c:	20000a7c 	.word	0x20000a7c
100057a0:	20000a84 	.word	0x20000a84

100057a4 <mode_led>:



void mode_led(uint8_t var){
100057a4:	b580      	push	{r7, lr}
100057a6:	b082      	sub	sp, #8
100057a8:	af00      	add	r7, sp, #0
100057aa:	1c02      	adds	r2, r0, #0
100057ac:	1dfb      	adds	r3, r7, #7
100057ae:	701a      	strb	r2, [r3, #0]
	if(CHECK_BIT(var,0)){
100057b0:	1dfb      	adds	r3, r7, #7
100057b2:	781b      	ldrb	r3, [r3, #0]
100057b4:	2201      	movs	r2, #1
100057b6:	4013      	ands	r3, r2
100057b8:	d004      	beq.n	100057c4 <mode_led+0x20>
		DIGITAL_IO_SetOutputLow(&MODE_001);
100057ba:	4b17      	ldr	r3, [pc, #92]	; (10005818 <mode_led+0x74>)
100057bc:	1c18      	adds	r0, r3, #0
100057be:	f7ff f803 	bl	100047c8 <DIGITAL_IO_SetOutputLow>
100057c2:	e003      	b.n	100057cc <mode_led+0x28>
	}
	else{
		DIGITAL_IO_SetOutputHigh(&MODE_001);
100057c4:	4b14      	ldr	r3, [pc, #80]	; (10005818 <mode_led+0x74>)
100057c6:	1c18      	adds	r0, r3, #0
100057c8:	f7fe ffee 	bl	100047a8 <DIGITAL_IO_SetOutputHigh>
	}

	if(CHECK_BIT(var,1)){
100057cc:	1dfb      	adds	r3, r7, #7
100057ce:	781b      	ldrb	r3, [r3, #0]
100057d0:	085b      	lsrs	r3, r3, #1
100057d2:	b2db      	uxtb	r3, r3
100057d4:	1c1a      	adds	r2, r3, #0
100057d6:	2301      	movs	r3, #1
100057d8:	4013      	ands	r3, r2
100057da:	d004      	beq.n	100057e6 <mode_led+0x42>
		DIGITAL_IO_SetOutputLow(&MODE_010);
100057dc:	4b0f      	ldr	r3, [pc, #60]	; (1000581c <mode_led+0x78>)
100057de:	1c18      	adds	r0, r3, #0
100057e0:	f7fe fff2 	bl	100047c8 <DIGITAL_IO_SetOutputLow>
100057e4:	e003      	b.n	100057ee <mode_led+0x4a>
	}
	else{
		DIGITAL_IO_SetOutputHigh(&MODE_010);
100057e6:	4b0d      	ldr	r3, [pc, #52]	; (1000581c <mode_led+0x78>)
100057e8:	1c18      	adds	r0, r3, #0
100057ea:	f7fe ffdd 	bl	100047a8 <DIGITAL_IO_SetOutputHigh>
	}

	if(CHECK_BIT(var,2)){
100057ee:	1dfb      	adds	r3, r7, #7
100057f0:	781b      	ldrb	r3, [r3, #0]
100057f2:	089b      	lsrs	r3, r3, #2
100057f4:	b2db      	uxtb	r3, r3
100057f6:	1c1a      	adds	r2, r3, #0
100057f8:	2301      	movs	r3, #1
100057fa:	4013      	ands	r3, r2
100057fc:	d004      	beq.n	10005808 <mode_led+0x64>
		DIGITAL_IO_SetOutputLow(&MODE_100);
100057fe:	4b08      	ldr	r3, [pc, #32]	; (10005820 <mode_led+0x7c>)
10005800:	1c18      	adds	r0, r3, #0
10005802:	f7fe ffe1 	bl	100047c8 <DIGITAL_IO_SetOutputLow>
10005806:	e003      	b.n	10005810 <mode_led+0x6c>
	}
	else{
		DIGITAL_IO_SetOutputHigh(&MODE_100);
10005808:	4b05      	ldr	r3, [pc, #20]	; (10005820 <mode_led+0x7c>)
1000580a:	1c18      	adds	r0, r3, #0
1000580c:	f7fe ffcc 	bl	100047a8 <DIGITAL_IO_SetOutputHigh>
	}
}
10005810:	46bd      	mov	sp, r7
10005812:	b002      	add	sp, #8
10005814:	bd80      	pop	{r7, pc}
10005816:	46c0      	nop			; (mov r8, r8)
10005818:	1000c9a8 	.word	0x1000c9a8
1000581c:	1000c9b8 	.word	0x1000c9b8
10005820:	1000c9c8 	.word	0x1000c9c8

10005824 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10005824:	b580      	push	{r7, lr}
10005826:	b082      	sub	sp, #8
10005828:	af00      	add	r7, sp, #0
1000582a:	6078      	str	r0, [r7, #4]
1000582c:	1c0a      	adds	r2, r1, #0
1000582e:	1cfb      	adds	r3, r7, #3
10005830:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10005832:	1cfb      	adds	r3, r7, #3
10005834:	781b      	ldrb	r3, [r3, #0]
10005836:	2201      	movs	r2, #1
10005838:	409a      	lsls	r2, r3
1000583a:	687b      	ldr	r3, [r7, #4]
1000583c:	605a      	str	r2, [r3, #4]
}
1000583e:	46bd      	mov	sp, r7
10005840:	b002      	add	sp, #8
10005842:	bd80      	pop	{r7, pc}

10005844 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10005844:	b580      	push	{r7, lr}
10005846:	b082      	sub	sp, #8
10005848:	af00      	add	r7, sp, #0
1000584a:	6078      	str	r0, [r7, #4]
1000584c:	1c0a      	adds	r2, r1, #0
1000584e:	1cfb      	adds	r3, r7, #3
10005850:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10005852:	1cfb      	adds	r3, r7, #3
10005854:	781b      	ldrb	r3, [r3, #0]
10005856:	2280      	movs	r2, #128	; 0x80
10005858:	0252      	lsls	r2, r2, #9
1000585a:	409a      	lsls	r2, r3
1000585c:	687b      	ldr	r3, [r7, #4]
1000585e:	605a      	str	r2, [r3, #4]
}
10005860:	46bd      	mov	sp, r7
10005862:	b002      	add	sp, #8
10005864:	bd80      	pop	{r7, pc}
10005866:	46c0      	nop			; (mov r8, r8)

10005868 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10005868:	b580      	push	{r7, lr}
1000586a:	b082      	sub	sp, #8
1000586c:	af00      	add	r7, sp, #0
1000586e:	6078      	str	r0, [r7, #4]
10005870:	1c0a      	adds	r2, r1, #0
10005872:	1cfb      	adds	r3, r7, #3
10005874:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
10005876:	687b      	ldr	r3, [r7, #4]
10005878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000587a:	1cfb      	adds	r3, r7, #3
1000587c:	781b      	ldrb	r3, [r3, #0]
1000587e:	40da      	lsrs	r2, r3
10005880:	1c13      	adds	r3, r2, #0
10005882:	2201      	movs	r2, #1
10005884:	4013      	ands	r3, r2
}
10005886:	1c18      	adds	r0, r3, #0
10005888:	46bd      	mov	sp, r7
1000588a:	b002      	add	sp, #8
1000588c:	bd80      	pop	{r7, pc}
1000588e:	46c0      	nop			; (mov r8, r8)

10005890 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10005890:	b580      	push	{r7, lr}
10005892:	b082      	sub	sp, #8
10005894:	af00      	add	r7, sp, #0
10005896:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10005898:	687b      	ldr	r3, [r7, #4]
1000589a:	681a      	ldr	r2, [r3, #0]
1000589c:	687b      	ldr	r3, [r7, #4]
1000589e:	7b1b      	ldrb	r3, [r3, #12]
100058a0:	1c10      	adds	r0, r2, #0
100058a2:	1c19      	adds	r1, r3, #0
100058a4:	f7ff ffbe 	bl	10005824 <XMC_GPIO_SetOutputHigh>
}
100058a8:	46bd      	mov	sp, r7
100058aa:	b002      	add	sp, #8
100058ac:	bd80      	pop	{r7, pc}
100058ae:	46c0      	nop			; (mov r8, r8)

100058b0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
100058b0:	b580      	push	{r7, lr}
100058b2:	b082      	sub	sp, #8
100058b4:	af00      	add	r7, sp, #0
100058b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
100058b8:	687b      	ldr	r3, [r7, #4]
100058ba:	681a      	ldr	r2, [r3, #0]
100058bc:	687b      	ldr	r3, [r7, #4]
100058be:	7b1b      	ldrb	r3, [r3, #12]
100058c0:	1c10      	adds	r0, r2, #0
100058c2:	1c19      	adds	r1, r3, #0
100058c4:	f7ff ffbe 	bl	10005844 <XMC_GPIO_SetOutputLow>
}
100058c8:	46bd      	mov	sp, r7
100058ca:	b002      	add	sp, #8
100058cc:	bd80      	pop	{r7, pc}
100058ce:	46c0      	nop			; (mov r8, r8)

100058d0 <PIN_INTERRUPT_GetPinValue>:
*   return (1);
* }
*  @endcode
*/
__STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
{
100058d0:	b580      	push	{r7, lr}
100058d2:	b082      	sub	sp, #8
100058d4:	af00      	add	r7, sp, #0
100058d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
  return (XMC_GPIO_GetInput(handle->port, handle->pin));
100058d8:	687b      	ldr	r3, [r7, #4]
100058da:	685a      	ldr	r2, [r3, #4]
100058dc:	687b      	ldr	r3, [r7, #4]
100058de:	7f9b      	ldrb	r3, [r3, #30]
100058e0:	1c10      	adds	r0, r2, #0
100058e2:	1c19      	adds	r1, r3, #0
100058e4:	f7ff ffc0 	bl	10005868 <XMC_GPIO_GetInput>
100058e8:	1c03      	adds	r3, r0, #0
}
100058ea:	1c18      	adds	r0, r3, #0
100058ec:	46bd      	mov	sp, r7
100058ee:	b002      	add	sp, #8
100058f0:	bd80      	pop	{r7, pc}
100058f2:	46c0      	nop			; (mov r8, r8)

100058f4 <IRQ8_Handler>:
volatile uint8_t RC_Gear_state = 2, RC_AUX1_state = 2;
volatile uint8_t RC_Gear_duty = 2, RC_Gear_duty_OLD =2, RC_AUX1_duty = 2;
uint8_t RC_Speed_Stop = 1;


void INTERRUPT_TIMER_10us_ISR(void){ // every 1ms so 10kHz
100058f4:	b580      	push	{r7, lr}
100058f6:	af00      	add	r7, sp, #0
	if(RC_Gear_state == 1)RC_gear_100us_counter ++;
100058f8:	4b0a      	ldr	r3, [pc, #40]	; (10005924 <IRQ8_Handler+0x30>)
100058fa:	781b      	ldrb	r3, [r3, #0]
100058fc:	b2db      	uxtb	r3, r3
100058fe:	2b01      	cmp	r3, #1
10005900:	d104      	bne.n	1000590c <IRQ8_Handler+0x18>
10005902:	4b09      	ldr	r3, [pc, #36]	; (10005928 <IRQ8_Handler+0x34>)
10005904:	681b      	ldr	r3, [r3, #0]
10005906:	1c5a      	adds	r2, r3, #1
10005908:	4b07      	ldr	r3, [pc, #28]	; (10005928 <IRQ8_Handler+0x34>)
1000590a:	601a      	str	r2, [r3, #0]
	if(RC_AUX1_state == 1)RC_AUX1_100us_counter ++;
1000590c:	4b07      	ldr	r3, [pc, #28]	; (1000592c <IRQ8_Handler+0x38>)
1000590e:	781b      	ldrb	r3, [r3, #0]
10005910:	b2db      	uxtb	r3, r3
10005912:	2b01      	cmp	r3, #1
10005914:	d104      	bne.n	10005920 <IRQ8_Handler+0x2c>
10005916:	4b06      	ldr	r3, [pc, #24]	; (10005930 <IRQ8_Handler+0x3c>)
10005918:	681b      	ldr	r3, [r3, #0]
1000591a:	1c5a      	adds	r2, r3, #1
1000591c:	4b04      	ldr	r3, [pc, #16]	; (10005930 <IRQ8_Handler+0x3c>)
1000591e:	601a      	str	r2, [r3, #0]
}
10005920:	46bd      	mov	sp, r7
10005922:	bd80      	pop	{r7, pc}
10005924:	20000838 	.word	0x20000838
10005928:	20000a9c 	.word	0x20000a9c
1000592c:	20000839 	.word	0x20000839
10005930:	20000aa0 	.word	0x20000aa0

10005934 <RC_Recive>:



void RC_Recive(void){
10005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005936:	af00      	add	r7, sp, #0

	CAPTURE_Start(&CAPTURE_RC_Steering);
10005938:	4b7a      	ldr	r3, [pc, #488]	; (10005b24 <RC_Recive+0x1f0>)
1000593a:	1c18      	adds	r0, r3, #0
1000593c:	f7fd fe42 	bl	100035c4 <CAPTURE_Start>
	CAPTURE_Start(&CAPTURE_RC_Speed);
10005940:	4b79      	ldr	r3, [pc, #484]	; (10005b28 <RC_Recive+0x1f4>)
10005942:	1c18      	adds	r0, r3, #0
10005944:	f7fd fe3e 	bl	100035c4 <CAPTURE_Start>

	CAPTURE_GetCapturedTimeInNanoSec(&CAPTURE_RC_Steering, &captured_time_Steering);
10005948:	4a76      	ldr	r2, [pc, #472]	; (10005b24 <RC_Recive+0x1f0>)
1000594a:	4b78      	ldr	r3, [pc, #480]	; (10005b2c <RC_Recive+0x1f8>)
1000594c:	1c10      	adds	r0, r2, #0
1000594e:	1c19      	adds	r1, r3, #0
10005950:	f7fd fe6e 	bl	10003630 <CAPTURE_GetCapturedTimeInNanoSec>
	CAPTURE_GetCapturedTimeInNanoSec(&CAPTURE_RC_Speed, &captured_time_Speed);
10005954:	4a74      	ldr	r2, [pc, #464]	; (10005b28 <RC_Recive+0x1f4>)
10005956:	4b76      	ldr	r3, [pc, #472]	; (10005b30 <RC_Recive+0x1fc>)
10005958:	1c10      	adds	r0, r2, #0
1000595a:	1c19      	adds	r1, r3, #0
1000595c:	f7fd fe68 	bl	10003630 <CAPTURE_GetCapturedTimeInNanoSec>

	if(RC_Speed_Stop == 1){
10005960:	4b74      	ldr	r3, [pc, #464]	; (10005b34 <RC_Recive+0x200>)
10005962:	781b      	ldrb	r3, [r3, #0]
10005964:	2b01      	cmp	r3, #1
10005966:	d15c      	bne.n	10005a22 <RC_Recive+0xee>
		if((captured_time_Speed >= 1000000) && (captured_time_Speed <= 2000000)){
10005968:	4b71      	ldr	r3, [pc, #452]	; (10005b30 <RC_Recive+0x1fc>)
1000596a:	681b      	ldr	r3, [r3, #0]
1000596c:	4a72      	ldr	r2, [pc, #456]	; (10005b38 <RC_Recive+0x204>)
1000596e:	4293      	cmp	r3, r2
10005970:	d950      	bls.n	10005a14 <RC_Recive+0xe0>
10005972:	4b6f      	ldr	r3, [pc, #444]	; (10005b30 <RC_Recive+0x1fc>)
10005974:	681b      	ldr	r3, [r3, #0]
10005976:	4a71      	ldr	r2, [pc, #452]	; (10005b3c <RC_Recive+0x208>)
10005978:	4293      	cmp	r3, r2
1000597a:	d84b      	bhi.n	10005a14 <RC_Recive+0xe0>
		  RC_Speed = ((double)captured_time_Speed - RC_NP_SPEED) * RC_Speed_ns_to_mps; // form +-0.6m/s
1000597c:	4b6c      	ldr	r3, [pc, #432]	; (10005b30 <RC_Recive+0x1fc>)
1000597e:	681b      	ldr	r3, [r3, #0]
10005980:	1c18      	adds	r0, r3, #0
10005982:	f006 fc97 	bl	1000c2b4 <__aeabi_ui2d>
10005986:	1c03      	adds	r3, r0, #0
10005988:	1c0c      	adds	r4, r1, #0
1000598a:	1c18      	adds	r0, r3, #0
1000598c:	1c21      	adds	r1, r4, #0
1000598e:	2200      	movs	r2, #0
10005990:	4b6b      	ldr	r3, [pc, #428]	; (10005b40 <RC_Recive+0x20c>)
10005992:	f006 f8a3 	bl	1000badc <__aeabi_dsub>
10005996:	1c03      	adds	r3, r0, #0
10005998:	1c0c      	adds	r4, r1, #0
1000599a:	1c1d      	adds	r5, r3, #0
1000599c:	1c26      	adds	r6, r4, #0
1000599e:	4b69      	ldr	r3, [pc, #420]	; (10005b44 <RC_Recive+0x210>)
100059a0:	681b      	ldr	r3, [r3, #0]
100059a2:	1c18      	adds	r0, r3, #0
100059a4:	f006 fcb8 	bl	1000c318 <__aeabi_f2d>
100059a8:	1c03      	adds	r3, r0, #0
100059aa:	1c0c      	adds	r4, r1, #0
100059ac:	1c28      	adds	r0, r5, #0
100059ae:	1c31      	adds	r1, r6, #0
100059b0:	1c1a      	adds	r2, r3, #0
100059b2:	1c23      	adds	r3, r4, #0
100059b4:	f005 fdf8 	bl	1000b5a8 <__aeabi_dmul>
100059b8:	1c03      	adds	r3, r0, #0
100059ba:	1c0c      	adds	r4, r1, #0
100059bc:	1c18      	adds	r0, r3, #0
100059be:	1c21      	adds	r1, r4, #0
100059c0:	f006 fcfe 	bl	1000c3c0 <__aeabi_d2f>
100059c4:	1c02      	adds	r2, r0, #0
100059c6:	4b60      	ldr	r3, [pc, #384]	; (10005b48 <RC_Recive+0x214>)
100059c8:	601a      	str	r2, [r3, #0]
		  if((RC_Speed < 0.1) && (RC_Speed > -0.1)) RC_Speed = 0; // to have accutal 0
100059ca:	4b5f      	ldr	r3, [pc, #380]	; (10005b48 <RC_Recive+0x214>)
100059cc:	681b      	ldr	r3, [r3, #0]
100059ce:	1c18      	adds	r0, r3, #0
100059d0:	f006 fca2 	bl	1000c318 <__aeabi_f2d>
100059d4:	1c03      	adds	r3, r0, #0
100059d6:	1c0c      	adds	r4, r1, #0
100059d8:	1c18      	adds	r0, r3, #0
100059da:	1c21      	adds	r1, r4, #0
100059dc:	4a5b      	ldr	r2, [pc, #364]	; (10005b4c <RC_Recive+0x218>)
100059de:	4b5c      	ldr	r3, [pc, #368]	; (10005b50 <RC_Recive+0x21c>)
100059e0:	f003 fede 	bl	100097a0 <__aeabi_dcmplt>
100059e4:	1e03      	subs	r3, r0, #0
100059e6:	d011      	beq.n	10005a0c <RC_Recive+0xd8>
100059e8:	4b57      	ldr	r3, [pc, #348]	; (10005b48 <RC_Recive+0x214>)
100059ea:	681b      	ldr	r3, [r3, #0]
100059ec:	1c18      	adds	r0, r3, #0
100059ee:	f006 fc93 	bl	1000c318 <__aeabi_f2d>
100059f2:	1c03      	adds	r3, r0, #0
100059f4:	1c0c      	adds	r4, r1, #0
100059f6:	1c18      	adds	r0, r3, #0
100059f8:	1c21      	adds	r1, r4, #0
100059fa:	4a54      	ldr	r2, [pc, #336]	; (10005b4c <RC_Recive+0x218>)
100059fc:	4b55      	ldr	r3, [pc, #340]	; (10005b54 <RC_Recive+0x220>)
100059fe:	f003 fee3 	bl	100097c8 <__aeabi_dcmpgt>
10005a02:	1e03      	subs	r3, r0, #0
10005a04:	d002      	beq.n	10005a0c <RC_Recive+0xd8>
10005a06:	4b50      	ldr	r3, [pc, #320]	; (10005b48 <RC_Recive+0x214>)
10005a08:	2200      	movs	r2, #0
10005a0a:	601a      	str	r2, [r3, #0]
		  RC_no_Speed_data_counter = 0;
10005a0c:	4b52      	ldr	r3, [pc, #328]	; (10005b58 <RC_Recive+0x224>)
10005a0e:	2200      	movs	r2, #0
10005a10:	701a      	strb	r2, [r3, #0]
10005a12:	e009      	b.n	10005a28 <RC_Recive+0xf4>
		}
		else{
			RC_no_Speed_data_counter ++;
10005a14:	4b50      	ldr	r3, [pc, #320]	; (10005b58 <RC_Recive+0x224>)
10005a16:	781b      	ldrb	r3, [r3, #0]
10005a18:	3301      	adds	r3, #1
10005a1a:	b2da      	uxtb	r2, r3
10005a1c:	4b4e      	ldr	r3, [pc, #312]	; (10005b58 <RC_Recive+0x224>)
10005a1e:	701a      	strb	r2, [r3, #0]
10005a20:	e002      	b.n	10005a28 <RC_Recive+0xf4>
		}
	}
	else RC_Speed = 0;
10005a22:	4b49      	ldr	r3, [pc, #292]	; (10005b48 <RC_Recive+0x214>)
10005a24:	2200      	movs	r2, #0
10005a26:	601a      	str	r2, [r3, #0]

	if((captured_time_Steering >= 1000000) && (captured_time_Steering <= 2000000)){
10005a28:	4b40      	ldr	r3, [pc, #256]	; (10005b2c <RC_Recive+0x1f8>)
10005a2a:	681b      	ldr	r3, [r3, #0]
10005a2c:	4a42      	ldr	r2, [pc, #264]	; (10005b38 <RC_Recive+0x204>)
10005a2e:	4293      	cmp	r3, r2
10005a30:	d947      	bls.n	10005ac2 <RC_Recive+0x18e>
10005a32:	4b3e      	ldr	r3, [pc, #248]	; (10005b2c <RC_Recive+0x1f8>)
10005a34:	681b      	ldr	r3, [r3, #0]
10005a36:	4a41      	ldr	r2, [pc, #260]	; (10005b3c <RC_Recive+0x208>)
10005a38:	4293      	cmp	r3, r2
10005a3a:	d842      	bhi.n	10005ac2 <RC_Recive+0x18e>
	  RC_Steering = -(((double)captured_time_Steering - RC_NP_STEERING) * RC_Steering_ns_to_deg); // form +-90m/s
10005a3c:	4b3b      	ldr	r3, [pc, #236]	; (10005b2c <RC_Recive+0x1f8>)
10005a3e:	681b      	ldr	r3, [r3, #0]
10005a40:	1c18      	adds	r0, r3, #0
10005a42:	f006 fc37 	bl	1000c2b4 <__aeabi_ui2d>
10005a46:	1c03      	adds	r3, r0, #0
10005a48:	1c0c      	adds	r4, r1, #0
10005a4a:	1c18      	adds	r0, r3, #0
10005a4c:	1c21      	adds	r1, r4, #0
10005a4e:	2200      	movs	r2, #0
10005a50:	4b42      	ldr	r3, [pc, #264]	; (10005b5c <RC_Recive+0x228>)
10005a52:	f006 f843 	bl	1000badc <__aeabi_dsub>
10005a56:	1c03      	adds	r3, r0, #0
10005a58:	1c0c      	adds	r4, r1, #0
10005a5a:	1c1d      	adds	r5, r3, #0
10005a5c:	1c26      	adds	r6, r4, #0
10005a5e:	4b40      	ldr	r3, [pc, #256]	; (10005b60 <RC_Recive+0x22c>)
10005a60:	681b      	ldr	r3, [r3, #0]
10005a62:	1c18      	adds	r0, r3, #0
10005a64:	f006 fc58 	bl	1000c318 <__aeabi_f2d>
10005a68:	1c03      	adds	r3, r0, #0
10005a6a:	1c0c      	adds	r4, r1, #0
10005a6c:	1c28      	adds	r0, r5, #0
10005a6e:	1c31      	adds	r1, r6, #0
10005a70:	1c1a      	adds	r2, r3, #0
10005a72:	1c23      	adds	r3, r4, #0
10005a74:	f005 fd98 	bl	1000b5a8 <__aeabi_dmul>
10005a78:	1c03      	adds	r3, r0, #0
10005a7a:	1c0c      	adds	r4, r1, #0
10005a7c:	1c18      	adds	r0, r3, #0
10005a7e:	1c21      	adds	r1, r4, #0
10005a80:	f006 fc9e 	bl	1000c3c0 <__aeabi_d2f>
10005a84:	1c02      	adds	r2, r0, #0
10005a86:	2380      	movs	r3, #128	; 0x80
10005a88:	061b      	lsls	r3, r3, #24
10005a8a:	405a      	eors	r2, r3
10005a8c:	4b35      	ldr	r3, [pc, #212]	; (10005b64 <RC_Recive+0x230>)
10005a8e:	601a      	str	r2, [r3, #0]
	  if((RC_Steering < 2) && (RC_Steering > -2)) RC_Steering = 0; // to have accutal 0
10005a90:	4b34      	ldr	r3, [pc, #208]	; (10005b64 <RC_Recive+0x230>)
10005a92:	681b      	ldr	r3, [r3, #0]
10005a94:	1c18      	adds	r0, r3, #0
10005a96:	2180      	movs	r1, #128	; 0x80
10005a98:	05c9      	lsls	r1, r1, #23
10005a9a:	f003 febb 	bl	10009814 <__aeabi_fcmplt>
10005a9e:	1e03      	subs	r3, r0, #0
10005aa0:	d00b      	beq.n	10005aba <RC_Recive+0x186>
10005aa2:	4b30      	ldr	r3, [pc, #192]	; (10005b64 <RC_Recive+0x230>)
10005aa4:	681b      	ldr	r3, [r3, #0]
10005aa6:	1c18      	adds	r0, r3, #0
10005aa8:	21c0      	movs	r1, #192	; 0xc0
10005aaa:	0609      	lsls	r1, r1, #24
10005aac:	f003 fec6 	bl	1000983c <__aeabi_fcmpgt>
10005ab0:	1e03      	subs	r3, r0, #0
10005ab2:	d002      	beq.n	10005aba <RC_Recive+0x186>
10005ab4:	4b2b      	ldr	r3, [pc, #172]	; (10005b64 <RC_Recive+0x230>)
10005ab6:	2200      	movs	r2, #0
10005ab8:	601a      	str	r2, [r3, #0]
	  RC_no_Steering_data_counter = 0;
10005aba:	4b2b      	ldr	r3, [pc, #172]	; (10005b68 <RC_Recive+0x234>)
10005abc:	2200      	movs	r2, #0
10005abe:	701a      	strb	r2, [r3, #0]
10005ac0:	e005      	b.n	10005ace <RC_Recive+0x19a>
	}
	else{
	  RC_no_Steering_data_counter ++;
10005ac2:	4b29      	ldr	r3, [pc, #164]	; (10005b68 <RC_Recive+0x234>)
10005ac4:	781b      	ldrb	r3, [r3, #0]
10005ac6:	3301      	adds	r3, #1
10005ac8:	b2da      	uxtb	r2, r3
10005aca:	4b27      	ldr	r3, [pc, #156]	; (10005b68 <RC_Recive+0x234>)
10005acc:	701a      	strb	r2, [r3, #0]
	}

	if(RC_no_Speed_data_counter > 20 || RC_no_Steering_data_counter > 20 ){ // internall values not ok
10005ace:	4b22      	ldr	r3, [pc, #136]	; (10005b58 <RC_Recive+0x224>)
10005ad0:	781b      	ldrb	r3, [r3, #0]
10005ad2:	2b14      	cmp	r3, #20
10005ad4:	d803      	bhi.n	10005ade <RC_Recive+0x1aa>
10005ad6:	4b24      	ldr	r3, [pc, #144]	; (10005b68 <RC_Recive+0x234>)
10005ad8:	781b      	ldrb	r3, [r3, #0]
10005ada:	2b14      	cmp	r3, #20
10005adc:	d910      	bls.n	10005b00 <RC_Recive+0x1cc>
	  DIGITAL_IO_SetOutputLow(&RC_no_data_LED);
10005ade:	4b23      	ldr	r3, [pc, #140]	; (10005b6c <RC_Recive+0x238>)
10005ae0:	1c18      	adds	r0, r3, #0
10005ae2:	f7ff fee5 	bl	100058b0 <DIGITAL_IO_SetOutputLow>
	  RC_no_Speed_data_counter = 20;
10005ae6:	4b1c      	ldr	r3, [pc, #112]	; (10005b58 <RC_Recive+0x224>)
10005ae8:	2214      	movs	r2, #20
10005aea:	701a      	strb	r2, [r3, #0]
	  RC_no_Steering_data_counter = 20;
10005aec:	4b1e      	ldr	r3, [pc, #120]	; (10005b68 <RC_Recive+0x234>)
10005aee:	2214      	movs	r2, #20
10005af0:	701a      	strb	r2, [r3, #0]

	  //set gobal vars 0
	  Driving_speed = 0;
10005af2:	4b1f      	ldr	r3, [pc, #124]	; (10005b70 <RC_Recive+0x23c>)
10005af4:	2200      	movs	r2, #0
10005af6:	601a      	str	r2, [r3, #0]
	  Steering_direction = 0;
10005af8:	4b1e      	ldr	r3, [pc, #120]	; (10005b74 <RC_Recive+0x240>)
10005afa:	2200      	movs	r2, #0
10005afc:	601a      	str	r2, [r3, #0]
10005afe:	e00b      	b.n	10005b18 <RC_Recive+0x1e4>
	}
	else{ // values filternig
	  DIGITAL_IO_SetOutputHigh(&RC_no_data_LED);
10005b00:	4b1a      	ldr	r3, [pc, #104]	; (10005b6c <RC_Recive+0x238>)
10005b02:	1c18      	adds	r0, r3, #0
10005b04:	f7ff fec4 	bl	10005890 <DIGITAL_IO_SetOutputHigh>

	  //set gobal vars stanart
	  Driving_speed = RC_Speed;
10005b08:	4b0f      	ldr	r3, [pc, #60]	; (10005b48 <RC_Recive+0x214>)
10005b0a:	681a      	ldr	r2, [r3, #0]
10005b0c:	4b18      	ldr	r3, [pc, #96]	; (10005b70 <RC_Recive+0x23c>)
10005b0e:	601a      	str	r2, [r3, #0]
	  Steering_direction = RC_Steering;
10005b10:	4b14      	ldr	r3, [pc, #80]	; (10005b64 <RC_Recive+0x230>)
10005b12:	681a      	ldr	r2, [r3, #0]
10005b14:	4b17      	ldr	r3, [pc, #92]	; (10005b74 <RC_Recive+0x240>)
10005b16:	601a      	str	r2, [r3, #0]
	}

	New_Input = 1; //goalb var to tell it that there in new data to calculate
10005b18:	4b17      	ldr	r3, [pc, #92]	; (10005b78 <RC_Recive+0x244>)
10005b1a:	2201      	movs	r2, #1
10005b1c:	701a      	strb	r2, [r3, #0]
}
10005b1e:	46bd      	mov	sp, r7
10005b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10005b22:	46c0      	nop			; (mov r8, r8)
10005b24:	200006e0 	.word	0x200006e0
10005b28:	20000714 	.word	0x20000714
10005b2c:	20000a88 	.word	0x20000a88
10005b30:	20000a8c 	.word	0x20000a8c
10005b34:	2000083d 	.word	0x2000083d
10005b38:	000f423f 	.word	0x000f423f
10005b3c:	001e8480 	.word	0x001e8480
10005b40:	4136e360 	.word	0x4136e360
10005b44:	20000830 	.word	0x20000830
10005b48:	20000a94 	.word	0x20000a94
10005b4c:	9999999a 	.word	0x9999999a
10005b50:	3fb99999 	.word	0x3fb99999
10005b54:	bfb99999 	.word	0xbfb99999
10005b58:	20000a90 	.word	0x20000a90
10005b5c:	4137cdc0 	.word	0x4137cdc0
10005b60:	20000834 	.word	0x20000834
10005b64:	20000a98 	.word	0x20000a98
10005b68:	20000a91 	.word	0x20000a91
10005b6c:	1000c988 	.word	0x1000c988
10005b70:	20000a1c 	.word	0x20000a1c
10005b74:	20000a18 	.word	0x20000a18
10005b78:	20000a70 	.word	0x20000a70

10005b7c <IRQ12_Handler>:

void RC_Connected_ISR(void){
10005b7c:	b580      	push	{r7, lr}
10005b7e:	b082      	sub	sp, #8
10005b80:	af00      	add	r7, sp, #0

	if(RC_controll == 1){
10005b82:	4b31      	ldr	r3, [pc, #196]	; (10005c48 <IRQ12_Handler+0xcc>)
10005b84:	781b      	ldrb	r3, [r3, #0]
10005b86:	b2db      	uxtb	r3, r3
10005b88:	2b01      	cmp	r3, #1
10005b8a:	d159      	bne.n	10005c40 <IRQ12_Handler+0xc4>

		RC_Gear_state =  PIN_INTERRUPT_GetPinValue(&RC_Connected); // pin haig or low
10005b8c:	4b2f      	ldr	r3, [pc, #188]	; (10005c4c <IRQ12_Handler+0xd0>)
10005b8e:	1c18      	adds	r0, r3, #0
10005b90:	f7ff fe9e 	bl	100058d0 <PIN_INTERRUPT_GetPinValue>
10005b94:	1c03      	adds	r3, r0, #0
10005b96:	b2da      	uxtb	r2, r3
10005b98:	4b2d      	ldr	r3, [pc, #180]	; (10005c50 <IRQ12_Handler+0xd4>)
10005b9a:	701a      	strb	r2, [r3, #0]

		if(RC_Gear_state == 0){// do nothing during high
10005b9c:	4b2c      	ldr	r3, [pc, #176]	; (10005c50 <IRQ12_Handler+0xd4>)
10005b9e:	781b      	ldrb	r3, [r3, #0]
10005ba0:	b2db      	uxtb	r3, r3
10005ba2:	2b00      	cmp	r3, #0
10005ba4:	d14c      	bne.n	10005c40 <IRQ12_Handler+0xc4>

			RC_Recive(); // get speed and steering data
10005ba6:	f7ff fec5 	bl	10005934 <RC_Recive>

			uint32_t RC_Gear_on_time_100us = RC_gear_100us_counter;
10005baa:	4b2a      	ldr	r3, [pc, #168]	; (10005c54 <IRQ12_Handler+0xd8>)
10005bac:	681b      	ldr	r3, [r3, #0]
10005bae:	607b      	str	r3, [r7, #4]
			RC_gear_100us_counter = 0;
10005bb0:	4b28      	ldr	r3, [pc, #160]	; (10005c54 <IRQ12_Handler+0xd8>)
10005bb2:	2200      	movs	r2, #0
10005bb4:	601a      	str	r2, [r3, #0]

			if((80 < RC_Gear_on_time_100us) && (RC_Gear_on_time_100us < 150)) RC_Gear_duty= 0;
10005bb6:	687b      	ldr	r3, [r7, #4]
10005bb8:	2b50      	cmp	r3, #80	; 0x50
10005bba:	d906      	bls.n	10005bca <IRQ12_Handler+0x4e>
10005bbc:	687b      	ldr	r3, [r7, #4]
10005bbe:	2b95      	cmp	r3, #149	; 0x95
10005bc0:	d803      	bhi.n	10005bca <IRQ12_Handler+0x4e>
10005bc2:	4b25      	ldr	r3, [pc, #148]	; (10005c58 <IRQ12_Handler+0xdc>)
10005bc4:	2200      	movs	r2, #0
10005bc6:	701a      	strb	r2, [r3, #0]
10005bc8:	e00c      	b.n	10005be4 <IRQ12_Handler+0x68>
			else if ((150 < RC_Gear_on_time_100us) && (RC_Gear_on_time_100us < 210)) RC_Gear_duty = 1;
10005bca:	687b      	ldr	r3, [r7, #4]
10005bcc:	2b96      	cmp	r3, #150	; 0x96
10005bce:	d906      	bls.n	10005bde <IRQ12_Handler+0x62>
10005bd0:	687b      	ldr	r3, [r7, #4]
10005bd2:	2bd1      	cmp	r3, #209	; 0xd1
10005bd4:	d803      	bhi.n	10005bde <IRQ12_Handler+0x62>
10005bd6:	4b20      	ldr	r3, [pc, #128]	; (10005c58 <IRQ12_Handler+0xdc>)
10005bd8:	2201      	movs	r2, #1
10005bda:	701a      	strb	r2, [r3, #0]
10005bdc:	e002      	b.n	10005be4 <IRQ12_Handler+0x68>
			else RC_Gear_duty = 2;
10005bde:	4b1e      	ldr	r3, [pc, #120]	; (10005c58 <IRQ12_Handler+0xdc>)
10005be0:	2202      	movs	r2, #2
10005be2:	701a      	strb	r2, [r3, #0]


			if(modeswitch_colldown == 0){
10005be4:	4b1d      	ldr	r3, [pc, #116]	; (10005c5c <IRQ12_Handler+0xe0>)
10005be6:	781b      	ldrb	r3, [r3, #0]
10005be8:	b2db      	uxtb	r3, r3
10005bea:	2b00      	cmp	r3, #0
10005bec:	d11c      	bne.n	10005c28 <IRQ12_Handler+0xac>
				if(RC_Gear_duty == 0 && RC_Gear_duty_OLD == 1){
10005bee:	4b1a      	ldr	r3, [pc, #104]	; (10005c58 <IRQ12_Handler+0xdc>)
10005bf0:	781b      	ldrb	r3, [r3, #0]
10005bf2:	b2db      	uxtb	r3, r3
10005bf4:	2b00      	cmp	r3, #0
10005bf6:	d11e      	bne.n	10005c36 <IRQ12_Handler+0xba>
10005bf8:	4b19      	ldr	r3, [pc, #100]	; (10005c60 <IRQ12_Handler+0xe4>)
10005bfa:	781b      	ldrb	r3, [r3, #0]
10005bfc:	b2db      	uxtb	r3, r3
10005bfe:	2b01      	cmp	r3, #1
10005c00:	d119      	bne.n	10005c36 <IRQ12_Handler+0xba>
					Steering_mode ++;
10005c02:	4b18      	ldr	r3, [pc, #96]	; (10005c64 <IRQ12_Handler+0xe8>)
10005c04:	781b      	ldrb	r3, [r3, #0]
10005c06:	b2db      	uxtb	r3, r3
10005c08:	3301      	adds	r3, #1
10005c0a:	b2da      	uxtb	r2, r3
10005c0c:	4b15      	ldr	r3, [pc, #84]	; (10005c64 <IRQ12_Handler+0xe8>)
10005c0e:	701a      	strb	r2, [r3, #0]
					if(Steering_mode > 5)Steering_mode = 0;
10005c10:	4b14      	ldr	r3, [pc, #80]	; (10005c64 <IRQ12_Handler+0xe8>)
10005c12:	781b      	ldrb	r3, [r3, #0]
10005c14:	b2db      	uxtb	r3, r3
10005c16:	2b05      	cmp	r3, #5
10005c18:	d902      	bls.n	10005c20 <IRQ12_Handler+0xa4>
10005c1a:	4b12      	ldr	r3, [pc, #72]	; (10005c64 <IRQ12_Handler+0xe8>)
10005c1c:	2200      	movs	r2, #0
10005c1e:	701a      	strb	r2, [r3, #0]
					modeswitch_colldown = 10;
10005c20:	4b0e      	ldr	r3, [pc, #56]	; (10005c5c <IRQ12_Handler+0xe0>)
10005c22:	220a      	movs	r2, #10
10005c24:	701a      	strb	r2, [r3, #0]
10005c26:	e006      	b.n	10005c36 <IRQ12_Handler+0xba>
				}
			}
			else modeswitch_colldown--;
10005c28:	4b0c      	ldr	r3, [pc, #48]	; (10005c5c <IRQ12_Handler+0xe0>)
10005c2a:	781b      	ldrb	r3, [r3, #0]
10005c2c:	b2db      	uxtb	r3, r3
10005c2e:	3b01      	subs	r3, #1
10005c30:	b2da      	uxtb	r2, r3
10005c32:	4b0a      	ldr	r3, [pc, #40]	; (10005c5c <IRQ12_Handler+0xe0>)
10005c34:	701a      	strb	r2, [r3, #0]
			RC_Gear_duty_OLD = RC_Gear_duty;
10005c36:	4b08      	ldr	r3, [pc, #32]	; (10005c58 <IRQ12_Handler+0xdc>)
10005c38:	781b      	ldrb	r3, [r3, #0]
10005c3a:	b2da      	uxtb	r2, r3
10005c3c:	4b08      	ldr	r3, [pc, #32]	; (10005c60 <IRQ12_Handler+0xe4>)
10005c3e:	701a      	strb	r2, [r3, #0]
		}
	}
}
10005c40:	46bd      	mov	sp, r7
10005c42:	b002      	add	sp, #8
10005c44:	bd80      	pop	{r7, pc}
10005c46:	46c0      	nop			; (mov r8, r8)
10005c48:	20000829 	.word	0x20000829
10005c4c:	1000c920 	.word	0x1000c920
10005c50:	20000838 	.word	0x20000838
10005c54:	20000a9c 	.word	0x20000a9c
10005c58:	2000083a 	.word	0x2000083a
10005c5c:	2000082b 	.word	0x2000082b
10005c60:	2000083b 	.word	0x2000083b
10005c64:	2000082a 	.word	0x2000082a

10005c68 <IRQ6_Handler>:

void RC_AUX1_ISR(void){
10005c68:	b580      	push	{r7, lr}
10005c6a:	b082      	sub	sp, #8
10005c6c:	af00      	add	r7, sp, #0
	if(RC_controll == 1){
10005c6e:	4b1f      	ldr	r3, [pc, #124]	; (10005cec <IRQ6_Handler+0x84>)
10005c70:	781b      	ldrb	r3, [r3, #0]
10005c72:	b2db      	uxtb	r3, r3
10005c74:	2b01      	cmp	r3, #1
10005c76:	d135      	bne.n	10005ce4 <IRQ6_Handler+0x7c>
		RC_AUX1_state =  PIN_INTERRUPT_GetPinValue(&RC_AUX1); // pin haig or low
10005c78:	4b1d      	ldr	r3, [pc, #116]	; (10005cf0 <IRQ6_Handler+0x88>)
10005c7a:	1c18      	adds	r0, r3, #0
10005c7c:	f7ff fe28 	bl	100058d0 <PIN_INTERRUPT_GetPinValue>
10005c80:	1c03      	adds	r3, r0, #0
10005c82:	b2da      	uxtb	r2, r3
10005c84:	4b1b      	ldr	r3, [pc, #108]	; (10005cf4 <IRQ6_Handler+0x8c>)
10005c86:	701a      	strb	r2, [r3, #0]

		if(RC_AUX1_state == 0){// do nothing during high
10005c88:	4b1a      	ldr	r3, [pc, #104]	; (10005cf4 <IRQ6_Handler+0x8c>)
10005c8a:	781b      	ldrb	r3, [r3, #0]
10005c8c:	b2db      	uxtb	r3, r3
10005c8e:	2b00      	cmp	r3, #0
10005c90:	d128      	bne.n	10005ce4 <IRQ6_Handler+0x7c>
			uint32_t RC_AUX1_on_time_100us = RC_AUX1_100us_counter;
10005c92:	4b19      	ldr	r3, [pc, #100]	; (10005cf8 <IRQ6_Handler+0x90>)
10005c94:	681b      	ldr	r3, [r3, #0]
10005c96:	607b      	str	r3, [r7, #4]
			RC_AUX1_100us_counter = 0;
10005c98:	4b17      	ldr	r3, [pc, #92]	; (10005cf8 <IRQ6_Handler+0x90>)
10005c9a:	2200      	movs	r2, #0
10005c9c:	601a      	str	r2, [r3, #0]

			if((80 < RC_AUX1_on_time_100us) && (RC_AUX1_on_time_100us < 150)) RC_AUX1_duty= 0;
10005c9e:	687b      	ldr	r3, [r7, #4]
10005ca0:	2b50      	cmp	r3, #80	; 0x50
10005ca2:	d906      	bls.n	10005cb2 <IRQ6_Handler+0x4a>
10005ca4:	687b      	ldr	r3, [r7, #4]
10005ca6:	2b95      	cmp	r3, #149	; 0x95
10005ca8:	d803      	bhi.n	10005cb2 <IRQ6_Handler+0x4a>
10005caa:	4b14      	ldr	r3, [pc, #80]	; (10005cfc <IRQ6_Handler+0x94>)
10005cac:	2200      	movs	r2, #0
10005cae:	701a      	strb	r2, [r3, #0]
10005cb0:	e00c      	b.n	10005ccc <IRQ6_Handler+0x64>
			else if ((150 < RC_AUX1_on_time_100us) && (RC_AUX1_on_time_100us < 210)) RC_AUX1_duty = 1;
10005cb2:	687b      	ldr	r3, [r7, #4]
10005cb4:	2b96      	cmp	r3, #150	; 0x96
10005cb6:	d906      	bls.n	10005cc6 <IRQ6_Handler+0x5e>
10005cb8:	687b      	ldr	r3, [r7, #4]
10005cba:	2bd1      	cmp	r3, #209	; 0xd1
10005cbc:	d803      	bhi.n	10005cc6 <IRQ6_Handler+0x5e>
10005cbe:	4b0f      	ldr	r3, [pc, #60]	; (10005cfc <IRQ6_Handler+0x94>)
10005cc0:	2201      	movs	r2, #1
10005cc2:	701a      	strb	r2, [r3, #0]
10005cc4:	e002      	b.n	10005ccc <IRQ6_Handler+0x64>
			else RC_AUX1_duty = 2;
10005cc6:	4b0d      	ldr	r3, [pc, #52]	; (10005cfc <IRQ6_Handler+0x94>)
10005cc8:	2202      	movs	r2, #2
10005cca:	701a      	strb	r2, [r3, #0]


			if(RC_AUX1_duty == 1)RC_Speed_Stop = 1;
10005ccc:	4b0b      	ldr	r3, [pc, #44]	; (10005cfc <IRQ6_Handler+0x94>)
10005cce:	781b      	ldrb	r3, [r3, #0]
10005cd0:	b2db      	uxtb	r3, r3
10005cd2:	2b01      	cmp	r3, #1
10005cd4:	d103      	bne.n	10005cde <IRQ6_Handler+0x76>
10005cd6:	4b0a      	ldr	r3, [pc, #40]	; (10005d00 <IRQ6_Handler+0x98>)
10005cd8:	2201      	movs	r2, #1
10005cda:	701a      	strb	r2, [r3, #0]
10005cdc:	e002      	b.n	10005ce4 <IRQ6_Handler+0x7c>
			else RC_Speed_Stop = 0;
10005cde:	4b08      	ldr	r3, [pc, #32]	; (10005d00 <IRQ6_Handler+0x98>)
10005ce0:	2200      	movs	r2, #0
10005ce2:	701a      	strb	r2, [r3, #0]
		}
	}
}
10005ce4:	46bd      	mov	sp, r7
10005ce6:	b002      	add	sp, #8
10005ce8:	bd80      	pop	{r7, pc}
10005cea:	46c0      	nop			; (mov r8, r8)
10005cec:	20000829 	.word	0x20000829
10005cf0:	1000c940 	.word	0x1000c940
10005cf4:	20000839 	.word	0x20000839
10005cf8:	20000aa0 	.word	0x20000aa0
10005cfc:	2000083c 	.word	0x2000083c
10005d00:	2000083d 	.word	0x2000083d

10005d04 <Steering_set_Angles>:
uint16_t NP[4] = {805, 733, 708, 700}; //servo nutral points PWM duty values
uint16_t NPfl = 805; int NPfr = 750; int NPrl = 750; int NPrr = 750; // serov defalut 750

float Servo_PWMs[4] = {0, 0, 0, 0};

void Steering_set_Angles(float Angles_data[4]){
10005d04:	b5b0      	push	{r4, r5, r7, lr}
10005d06:	b084      	sub	sp, #16
10005d08:	af00      	add	r7, sp, #0
10005d0a:	6078      	str	r0, [r7, #4]
	float deg_PWM = 0.645; // deg to PWM singlan converstion factor
10005d0c:	4b46      	ldr	r3, [pc, #280]	; (10005e28 <Steering_set_Angles+0x124>)
10005d0e:	60bb      	str	r3, [r7, #8]

	// calcuation of PWM for Angle on each wheel

	for(uint8_t i = 0 ; i < 4 ; i ++){
10005d10:	230f      	movs	r3, #15
10005d12:	18fb      	adds	r3, r7, r3
10005d14:	2200      	movs	r2, #0
10005d16:	701a      	strb	r2, [r3, #0]
10005d18:	e052      	b.n	10005dc0 <Steering_set_Angles+0xbc>
		Servo_PWMs[i] = -Angles_data[i]*deg_PWM + NP[i];
10005d1a:	230f      	movs	r3, #15
10005d1c:	18fb      	adds	r3, r7, r3
10005d1e:	781c      	ldrb	r4, [r3, #0]
10005d20:	230f      	movs	r3, #15
10005d22:	18fb      	adds	r3, r7, r3
10005d24:	781b      	ldrb	r3, [r3, #0]
10005d26:	009b      	lsls	r3, r3, #2
10005d28:	687a      	ldr	r2, [r7, #4]
10005d2a:	18d3      	adds	r3, r2, r3
10005d2c:	681b      	ldr	r3, [r3, #0]
10005d2e:	2280      	movs	r2, #128	; 0x80
10005d30:	0612      	lsls	r2, r2, #24
10005d32:	4053      	eors	r3, r2
10005d34:	1c18      	adds	r0, r3, #0
10005d36:	68b9      	ldr	r1, [r7, #8]
10005d38:	f004 f9b8 	bl	1000a0ac <__aeabi_fmul>
10005d3c:	1c03      	adds	r3, r0, #0
10005d3e:	1c1d      	adds	r5, r3, #0
10005d40:	230f      	movs	r3, #15
10005d42:	18fb      	adds	r3, r7, r3
10005d44:	781a      	ldrb	r2, [r3, #0]
10005d46:	4b39      	ldr	r3, [pc, #228]	; (10005e2c <Steering_set_Angles+0x128>)
10005d48:	0052      	lsls	r2, r2, #1
10005d4a:	5ad3      	ldrh	r3, [r2, r3]
10005d4c:	1c18      	adds	r0, r3, #0
10005d4e:	f004 fc7d 	bl	1000a64c <__aeabi_i2f>
10005d52:	1c03      	adds	r3, r0, #0
10005d54:	1c28      	adds	r0, r5, #0
10005d56:	1c19      	adds	r1, r3, #0
10005d58:	f003 fe3a 	bl	100099d0 <__aeabi_fadd>
10005d5c:	1c03      	adds	r3, r0, #0
10005d5e:	1c19      	adds	r1, r3, #0
10005d60:	4b33      	ldr	r3, [pc, #204]	; (10005e30 <Steering_set_Angles+0x12c>)
10005d62:	00a2      	lsls	r2, r4, #2
10005d64:	50d1      	str	r1, [r2, r3]

		//limitinbg max servor Angle to 1.75 rot in each dirction
		if(Servo_PWMs[i] > 950) { Servo_PWMs[i] = 950;}
10005d66:	230f      	movs	r3, #15
10005d68:	18fb      	adds	r3, r7, r3
10005d6a:	781a      	ldrb	r2, [r3, #0]
10005d6c:	4b30      	ldr	r3, [pc, #192]	; (10005e30 <Steering_set_Angles+0x12c>)
10005d6e:	0092      	lsls	r2, r2, #2
10005d70:	58d3      	ldr	r3, [r2, r3]
10005d72:	1c18      	adds	r0, r3, #0
10005d74:	492f      	ldr	r1, [pc, #188]	; (10005e34 <Steering_set_Angles+0x130>)
10005d76:	f003 fd61 	bl	1000983c <__aeabi_fcmpgt>
10005d7a:	1e03      	subs	r3, r0, #0
10005d7c:	d006      	beq.n	10005d8c <Steering_set_Angles+0x88>
10005d7e:	230f      	movs	r3, #15
10005d80:	18fb      	adds	r3, r7, r3
10005d82:	781a      	ldrb	r2, [r3, #0]
10005d84:	4b2a      	ldr	r3, [pc, #168]	; (10005e30 <Steering_set_Angles+0x12c>)
10005d86:	0092      	lsls	r2, r2, #2
10005d88:	492a      	ldr	r1, [pc, #168]	; (10005e34 <Steering_set_Angles+0x130>)
10005d8a:	50d1      	str	r1, [r2, r3]
		if(Servo_PWMs[i] < 550) { Servo_PWMs[i] = 550;}
10005d8c:	230f      	movs	r3, #15
10005d8e:	18fb      	adds	r3, r7, r3
10005d90:	781a      	ldrb	r2, [r3, #0]
10005d92:	4b27      	ldr	r3, [pc, #156]	; (10005e30 <Steering_set_Angles+0x12c>)
10005d94:	0092      	lsls	r2, r2, #2
10005d96:	58d3      	ldr	r3, [r2, r3]
10005d98:	1c18      	adds	r0, r3, #0
10005d9a:	4927      	ldr	r1, [pc, #156]	; (10005e38 <Steering_set_Angles+0x134>)
10005d9c:	f003 fd3a 	bl	10009814 <__aeabi_fcmplt>
10005da0:	1e03      	subs	r3, r0, #0
10005da2:	d006      	beq.n	10005db2 <Steering_set_Angles+0xae>
10005da4:	230f      	movs	r3, #15
10005da6:	18fb      	adds	r3, r7, r3
10005da8:	781a      	ldrb	r2, [r3, #0]
10005daa:	4b21      	ldr	r3, [pc, #132]	; (10005e30 <Steering_set_Angles+0x12c>)
10005dac:	0092      	lsls	r2, r2, #2
10005dae:	4922      	ldr	r1, [pc, #136]	; (10005e38 <Steering_set_Angles+0x134>)
10005db0:	50d1      	str	r1, [r2, r3]
void Steering_set_Angles(float Angles_data[4]){
	float deg_PWM = 0.645; // deg to PWM singlan converstion factor

	// calcuation of PWM for Angle on each wheel

	for(uint8_t i = 0 ; i < 4 ; i ++){
10005db2:	230f      	movs	r3, #15
10005db4:	18fb      	adds	r3, r7, r3
10005db6:	781a      	ldrb	r2, [r3, #0]
10005db8:	230f      	movs	r3, #15
10005dba:	18fb      	adds	r3, r7, r3
10005dbc:	3201      	adds	r2, #1
10005dbe:	701a      	strb	r2, [r3, #0]
10005dc0:	230f      	movs	r3, #15
10005dc2:	18fb      	adds	r3, r7, r3
10005dc4:	781b      	ldrb	r3, [r3, #0]
10005dc6:	2b03      	cmp	r3, #3
10005dc8:	d9a7      	bls.n	10005d1a <Steering_set_Angles+0x16>
		if(Servo_PWMs[i] > 950) { Servo_PWMs[i] = 950;}
		if(Servo_PWMs[i] < 550) { Servo_PWMs[i] = 550;}
		}

	//seting PWM values
	PWM_SetDutyCycle(&PWM_servo_fl,Servo_PWMs[0]);
10005dca:	4b19      	ldr	r3, [pc, #100]	; (10005e30 <Steering_set_Angles+0x12c>)
10005dcc:	681b      	ldr	r3, [r3, #0]
10005dce:	1c18      	adds	r0, r3, #0
10005dd0:	f003 fdb0 	bl	10009934 <__aeabi_f2uiz>
10005dd4:	1c02      	adds	r2, r0, #0
10005dd6:	4b19      	ldr	r3, [pc, #100]	; (10005e3c <Steering_set_Angles+0x138>)
10005dd8:	1c18      	adds	r0, r3, #0
10005dda:	1c11      	adds	r1, r2, #0
10005ddc:	f7fc ffac 	bl	10002d38 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_servo_fr,Servo_PWMs[1]);
10005de0:	4b13      	ldr	r3, [pc, #76]	; (10005e30 <Steering_set_Angles+0x12c>)
10005de2:	685b      	ldr	r3, [r3, #4]
10005de4:	1c18      	adds	r0, r3, #0
10005de6:	f003 fda5 	bl	10009934 <__aeabi_f2uiz>
10005dea:	1c02      	adds	r2, r0, #0
10005dec:	4b14      	ldr	r3, [pc, #80]	; (10005e40 <Steering_set_Angles+0x13c>)
10005dee:	1c18      	adds	r0, r3, #0
10005df0:	1c11      	adds	r1, r2, #0
10005df2:	f7fc ffa1 	bl	10002d38 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_servo_rl,Servo_PWMs[2]);
10005df6:	4b0e      	ldr	r3, [pc, #56]	; (10005e30 <Steering_set_Angles+0x12c>)
10005df8:	689b      	ldr	r3, [r3, #8]
10005dfa:	1c18      	adds	r0, r3, #0
10005dfc:	f003 fd9a 	bl	10009934 <__aeabi_f2uiz>
10005e00:	1c02      	adds	r2, r0, #0
10005e02:	4b10      	ldr	r3, [pc, #64]	; (10005e44 <Steering_set_Angles+0x140>)
10005e04:	1c18      	adds	r0, r3, #0
10005e06:	1c11      	adds	r1, r2, #0
10005e08:	f7fc ff96 	bl	10002d38 <PWM_SetDutyCycle>
	PWM_SetDutyCycle(&PWM_servo_rr,Servo_PWMs[3]);
10005e0c:	4b08      	ldr	r3, [pc, #32]	; (10005e30 <Steering_set_Angles+0x12c>)
10005e0e:	68db      	ldr	r3, [r3, #12]
10005e10:	1c18      	adds	r0, r3, #0
10005e12:	f003 fd8f 	bl	10009934 <__aeabi_f2uiz>
10005e16:	1c02      	adds	r2, r0, #0
10005e18:	4b0b      	ldr	r3, [pc, #44]	; (10005e48 <Steering_set_Angles+0x144>)
10005e1a:	1c18      	adds	r0, r3, #0
10005e1c:	1c11      	adds	r1, r2, #0
10005e1e:	f7fc ff8b 	bl	10002d38 <PWM_SetDutyCycle>

}
10005e22:	46bd      	mov	sp, r7
10005e24:	b004      	add	sp, #16
10005e26:	bdb0      	pop	{r4, r5, r7, pc}
10005e28:	3f251eb8 	.word	0x3f251eb8
10005e2c:	20000840 	.word	0x20000840
10005e30:	20000aa4 	.word	0x20000aa4
10005e34:	446d8000 	.word	0x446d8000
10005e38:	44098000 	.word	0x44098000
10005e3c:	200005dc 	.word	0x200005dc
10005e40:	20000610 	.word	0x20000610
10005e44:	20000644 	.word	0x20000644
10005e48:	20000678 	.word	0x20000678

10005e4c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10005e4c:	b580      	push	{r7, lr}
10005e4e:	b082      	sub	sp, #8
10005e50:	af00      	add	r7, sp, #0
10005e52:	6078      	str	r0, [r7, #4]
10005e54:	1c0a      	adds	r2, r1, #0
10005e56:	1cfb      	adds	r3, r7, #3
10005e58:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10005e5a:	1cfb      	adds	r3, r7, #3
10005e5c:	781b      	ldrb	r3, [r3, #0]
10005e5e:	2201      	movs	r2, #1
10005e60:	409a      	lsls	r2, r3
10005e62:	687b      	ldr	r3, [r7, #4]
10005e64:	605a      	str	r2, [r3, #4]
}
10005e66:	46bd      	mov	sp, r7
10005e68:	b002      	add	sp, #8
10005e6a:	bd80      	pop	{r7, pc}

10005e6c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10005e6c:	b580      	push	{r7, lr}
10005e6e:	b082      	sub	sp, #8
10005e70:	af00      	add	r7, sp, #0
10005e72:	6078      	str	r0, [r7, #4]
10005e74:	1c0a      	adds	r2, r1, #0
10005e76:	1cfb      	adds	r3, r7, #3
10005e78:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10005e7a:	1cfb      	adds	r3, r7, #3
10005e7c:	781b      	ldrb	r3, [r3, #0]
10005e7e:	2280      	movs	r2, #128	; 0x80
10005e80:	0252      	lsls	r2, r2, #9
10005e82:	409a      	lsls	r2, r3
10005e84:	687b      	ldr	r3, [r7, #4]
10005e86:	605a      	str	r2, [r3, #4]
}
10005e88:	46bd      	mov	sp, r7
10005e8a:	b002      	add	sp, #8
10005e8c:	bd80      	pop	{r7, pc}
10005e8e:	46c0      	nop			; (mov r8, r8)

10005e90 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10005e90:	b580      	push	{r7, lr}
10005e92:	b082      	sub	sp, #8
10005e94:	af00      	add	r7, sp, #0
10005e96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10005e98:	687b      	ldr	r3, [r7, #4]
10005e9a:	681a      	ldr	r2, [r3, #0]
10005e9c:	687b      	ldr	r3, [r7, #4]
10005e9e:	7b1b      	ldrb	r3, [r3, #12]
10005ea0:	1c10      	adds	r0, r2, #0
10005ea2:	1c19      	adds	r1, r3, #0
10005ea4:	f7ff ffd2 	bl	10005e4c <XMC_GPIO_SetOutputHigh>
}
10005ea8:	46bd      	mov	sp, r7
10005eaa:	b002      	add	sp, #8
10005eac:	bd80      	pop	{r7, pc}
10005eae:	46c0      	nop			; (mov r8, r8)

10005eb0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10005eb0:	b580      	push	{r7, lr}
10005eb2:	b082      	sub	sp, #8
10005eb4:	af00      	add	r7, sp, #0
10005eb6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10005eb8:	687b      	ldr	r3, [r7, #4]
10005eba:	681a      	ldr	r2, [r3, #0]
10005ebc:	687b      	ldr	r3, [r7, #4]
10005ebe:	7b1b      	ldrb	r3, [r3, #12]
10005ec0:	1c10      	adds	r0, r2, #0
10005ec2:	1c19      	adds	r1, r3, #0
10005ec4:	f7ff ffd2 	bl	10005e6c <XMC_GPIO_SetOutputLow>
}
10005ec8:	46bd      	mov	sp, r7
10005eca:	b002      	add	sp, #8
10005ecc:	bd80      	pop	{r7, pc}
10005ece:	46c0      	nop			; (mov r8, r8)

10005ed0 <Ultra_sonic_filter>:
// obstacels
//float Obstacel_F = 4, Obstacel_L = 4, Obstacel_R = 4; // y vaule alwasy stays 4



void Ultra_sonic_filter(int16_t Ultrasonic_cm_C_clc, int16_t Ultrasonic_cm_L_clc, int16_t Ultrasonic_cm_R_clc, float ALPHA_ULTARSONIC){
10005ed0:	b590      	push	{r4, r7, lr}
10005ed2:	b087      	sub	sp, #28
10005ed4:	af00      	add	r7, sp, #0
10005ed6:	1c04      	adds	r4, r0, #0
10005ed8:	1c08      	adds	r0, r1, #0
10005eda:	1c11      	adds	r1, r2, #0
10005edc:	607b      	str	r3, [r7, #4]
10005ede:	230e      	movs	r3, #14
10005ee0:	18fb      	adds	r3, r7, r3
10005ee2:	1c22      	adds	r2, r4, #0
10005ee4:	801a      	strh	r2, [r3, #0]
10005ee6:	230c      	movs	r3, #12
10005ee8:	18fb      	adds	r3, r7, r3
10005eea:	1c02      	adds	r2, r0, #0
10005eec:	801a      	strh	r2, [r3, #0]
10005eee:	230a      	movs	r3, #10
10005ef0:	18fb      	adds	r3, r7, r3
10005ef2:	1c0a      	adds	r2, r1, #0
10005ef4:	801a      	strh	r2, [r3, #0]

	if(Ultrasonic_cm_C_clc != 0){
10005ef6:	230e      	movs	r3, #14
10005ef8:	18fb      	adds	r3, r7, r3
10005efa:	2200      	movs	r2, #0
10005efc:	5e9b      	ldrsh	r3, [r3, r2]
10005efe:	2b00      	cmp	r3, #0
10005f00:	d01c      	beq.n	10005f3c <Ultra_sonic_filter+0x6c>
		Ultrsonic_data_invaildcounter[0] = 0;
10005f02:	4b75      	ldr	r3, [pc, #468]	; (100060d8 <Ultra_sonic_filter+0x208>)
10005f04:	2200      	movs	r2, #0
10005f06:	701a      	strb	r2, [r3, #0]
		Ultra_m_C = Exp_moving_average((float)Ultrasonic_cm_C_clc / 100 , Ultra_m_C, ALPHA_ULTARSONIC);
10005f08:	230e      	movs	r3, #14
10005f0a:	18fb      	adds	r3, r7, r3
10005f0c:	2200      	movs	r2, #0
10005f0e:	5e9b      	ldrsh	r3, [r3, r2]
10005f10:	1c18      	adds	r0, r3, #0
10005f12:	f004 fb9b 	bl	1000a64c <__aeabi_i2f>
10005f16:	1c03      	adds	r3, r0, #0
10005f18:	1c18      	adds	r0, r3, #0
10005f1a:	4970      	ldr	r1, [pc, #448]	; (100060dc <Ultra_sonic_filter+0x20c>)
10005f1c:	f003 fed4 	bl	10009cc8 <__aeabi_fdiv>
10005f20:	1c03      	adds	r3, r0, #0
10005f22:	1c19      	adds	r1, r3, #0
10005f24:	4b6e      	ldr	r3, [pc, #440]	; (100060e0 <Ultra_sonic_filter+0x210>)
10005f26:	681a      	ldr	r2, [r3, #0]
10005f28:	687b      	ldr	r3, [r7, #4]
10005f2a:	1c08      	adds	r0, r1, #0
10005f2c:	1c11      	adds	r1, r2, #0
10005f2e:	1c1a      	adds	r2, r3, #0
10005f30:	f000 fc4c 	bl	100067cc <Exp_moving_average>
10005f34:	1c02      	adds	r2, r0, #0
10005f36:	4b6a      	ldr	r3, [pc, #424]	; (100060e0 <Ultra_sonic_filter+0x210>)
10005f38:	601a      	str	r2, [r3, #0]
10005f3a:	e005      	b.n	10005f48 <Ultra_sonic_filter+0x78>
	}
	else Ultrsonic_data_invaildcounter[0]++;
10005f3c:	4b66      	ldr	r3, [pc, #408]	; (100060d8 <Ultra_sonic_filter+0x208>)
10005f3e:	781b      	ldrb	r3, [r3, #0]
10005f40:	3301      	adds	r3, #1
10005f42:	b2da      	uxtb	r2, r3
10005f44:	4b64      	ldr	r3, [pc, #400]	; (100060d8 <Ultra_sonic_filter+0x208>)
10005f46:	701a      	strb	r2, [r3, #0]

	if(Ultrasonic_cm_L_clc != 0){
10005f48:	230c      	movs	r3, #12
10005f4a:	18fb      	adds	r3, r7, r3
10005f4c:	2200      	movs	r2, #0
10005f4e:	5e9b      	ldrsh	r3, [r3, r2]
10005f50:	2b00      	cmp	r3, #0
10005f52:	d029      	beq.n	10005fa8 <Ultra_sonic_filter+0xd8>
		obstructed_L = Ultrasoinc_Obstructet_Test(Steering_Angles[0]);
10005f54:	4b63      	ldr	r3, [pc, #396]	; (100060e4 <Ultra_sonic_filter+0x214>)
10005f56:	681b      	ldr	r3, [r3, #0]
10005f58:	1c18      	adds	r0, r3, #0
10005f5a:	f000 f8d3 	bl	10006104 <Ultrasoinc_Obstructet_Test>
10005f5e:	1c03      	adds	r3, r0, #0
10005f60:	1c1a      	adds	r2, r3, #0
10005f62:	4b61      	ldr	r3, [pc, #388]	; (100060e8 <Ultra_sonic_filter+0x218>)
10005f64:	701a      	strb	r2, [r3, #0]
		if(obstructed_L == 0) {
10005f66:	4b60      	ldr	r3, [pc, #384]	; (100060e8 <Ultra_sonic_filter+0x218>)
10005f68:	781b      	ldrb	r3, [r3, #0]
10005f6a:	2b00      	cmp	r3, #0
10005f6c:	d122      	bne.n	10005fb4 <Ultra_sonic_filter+0xe4>
			Ultrsonic_data_invaildcounter[1] = 0;
10005f6e:	4b5a      	ldr	r3, [pc, #360]	; (100060d8 <Ultra_sonic_filter+0x208>)
10005f70:	2200      	movs	r2, #0
10005f72:	705a      	strb	r2, [r3, #1]
			Ultra_m_L = Exp_moving_average((float)Ultrasonic_cm_L_clc / 100 , Ultra_m_L, ALPHA_ULTARSONIC);
10005f74:	230c      	movs	r3, #12
10005f76:	18fb      	adds	r3, r7, r3
10005f78:	2200      	movs	r2, #0
10005f7a:	5e9b      	ldrsh	r3, [r3, r2]
10005f7c:	1c18      	adds	r0, r3, #0
10005f7e:	f004 fb65 	bl	1000a64c <__aeabi_i2f>
10005f82:	1c03      	adds	r3, r0, #0
10005f84:	1c18      	adds	r0, r3, #0
10005f86:	4955      	ldr	r1, [pc, #340]	; (100060dc <Ultra_sonic_filter+0x20c>)
10005f88:	f003 fe9e 	bl	10009cc8 <__aeabi_fdiv>
10005f8c:	1c03      	adds	r3, r0, #0
10005f8e:	1c19      	adds	r1, r3, #0
10005f90:	4b56      	ldr	r3, [pc, #344]	; (100060ec <Ultra_sonic_filter+0x21c>)
10005f92:	681a      	ldr	r2, [r3, #0]
10005f94:	687b      	ldr	r3, [r7, #4]
10005f96:	1c08      	adds	r0, r1, #0
10005f98:	1c11      	adds	r1, r2, #0
10005f9a:	1c1a      	adds	r2, r3, #0
10005f9c:	f000 fc16 	bl	100067cc <Exp_moving_average>
10005fa0:	1c02      	adds	r2, r0, #0
10005fa2:	4b52      	ldr	r3, [pc, #328]	; (100060ec <Ultra_sonic_filter+0x21c>)
10005fa4:	601a      	str	r2, [r3, #0]
10005fa6:	e005      	b.n	10005fb4 <Ultra_sonic_filter+0xe4>
		}
	}
	else Ultrsonic_data_invaildcounter[1]++;
10005fa8:	4b4b      	ldr	r3, [pc, #300]	; (100060d8 <Ultra_sonic_filter+0x208>)
10005faa:	785b      	ldrb	r3, [r3, #1]
10005fac:	3301      	adds	r3, #1
10005fae:	b2da      	uxtb	r2, r3
10005fb0:	4b49      	ldr	r3, [pc, #292]	; (100060d8 <Ultra_sonic_filter+0x208>)
10005fb2:	705a      	strb	r2, [r3, #1]

	if(Ultrasonic_cm_R_clc != 0){
10005fb4:	230a      	movs	r3, #10
10005fb6:	18fb      	adds	r3, r7, r3
10005fb8:	2200      	movs	r2, #0
10005fba:	5e9b      	ldrsh	r3, [r3, r2]
10005fbc:	2b00      	cmp	r3, #0
10005fbe:	d02c      	beq.n	1000601a <Ultra_sonic_filter+0x14a>
		obstructed_R = Ultrasoinc_Obstructet_Test( - Steering_Angles[1]); // neagtiv becasue right wheel
10005fc0:	4b48      	ldr	r3, [pc, #288]	; (100060e4 <Ultra_sonic_filter+0x214>)
10005fc2:	685b      	ldr	r3, [r3, #4]
10005fc4:	2280      	movs	r2, #128	; 0x80
10005fc6:	0612      	lsls	r2, r2, #24
10005fc8:	4053      	eors	r3, r2
10005fca:	1c18      	adds	r0, r3, #0
10005fcc:	f000 f89a 	bl	10006104 <Ultrasoinc_Obstructet_Test>
10005fd0:	1c03      	adds	r3, r0, #0
10005fd2:	1c1a      	adds	r2, r3, #0
10005fd4:	4b46      	ldr	r3, [pc, #280]	; (100060f0 <Ultra_sonic_filter+0x220>)
10005fd6:	701a      	strb	r2, [r3, #0]
		if(obstructed_R == 0){
10005fd8:	4b45      	ldr	r3, [pc, #276]	; (100060f0 <Ultra_sonic_filter+0x220>)
10005fda:	781b      	ldrb	r3, [r3, #0]
10005fdc:	2b00      	cmp	r3, #0
10005fde:	d122      	bne.n	10006026 <Ultra_sonic_filter+0x156>
			Ultrsonic_data_invaildcounter[2] = 0;
10005fe0:	4b3d      	ldr	r3, [pc, #244]	; (100060d8 <Ultra_sonic_filter+0x208>)
10005fe2:	2200      	movs	r2, #0
10005fe4:	709a      	strb	r2, [r3, #2]
			Ultra_m_R = Exp_moving_average((float)Ultrasonic_cm_R_clc / 100 , Ultra_m_R, ALPHA_ULTARSONIC);
10005fe6:	230a      	movs	r3, #10
10005fe8:	18fb      	adds	r3, r7, r3
10005fea:	2200      	movs	r2, #0
10005fec:	5e9b      	ldrsh	r3, [r3, r2]
10005fee:	1c18      	adds	r0, r3, #0
10005ff0:	f004 fb2c 	bl	1000a64c <__aeabi_i2f>
10005ff4:	1c03      	adds	r3, r0, #0
10005ff6:	1c18      	adds	r0, r3, #0
10005ff8:	4938      	ldr	r1, [pc, #224]	; (100060dc <Ultra_sonic_filter+0x20c>)
10005ffa:	f003 fe65 	bl	10009cc8 <__aeabi_fdiv>
10005ffe:	1c03      	adds	r3, r0, #0
10006000:	1c19      	adds	r1, r3, #0
10006002:	4b3c      	ldr	r3, [pc, #240]	; (100060f4 <Ultra_sonic_filter+0x224>)
10006004:	681a      	ldr	r2, [r3, #0]
10006006:	687b      	ldr	r3, [r7, #4]
10006008:	1c08      	adds	r0, r1, #0
1000600a:	1c11      	adds	r1, r2, #0
1000600c:	1c1a      	adds	r2, r3, #0
1000600e:	f000 fbdd 	bl	100067cc <Exp_moving_average>
10006012:	1c02      	adds	r2, r0, #0
10006014:	4b37      	ldr	r3, [pc, #220]	; (100060f4 <Ultra_sonic_filter+0x224>)
10006016:	601a      	str	r2, [r3, #0]
10006018:	e005      	b.n	10006026 <Ultra_sonic_filter+0x156>
		}
	}
	else Ultrsonic_data_invaildcounter[2]++;
1000601a:	4b2f      	ldr	r3, [pc, #188]	; (100060d8 <Ultra_sonic_filter+0x208>)
1000601c:	789b      	ldrb	r3, [r3, #2]
1000601e:	3301      	adds	r3, #1
10006020:	b2da      	uxtb	r2, r3
10006022:	4b2d      	ldr	r3, [pc, #180]	; (100060d8 <Ultra_sonic_filter+0x208>)
10006024:	709a      	strb	r2, [r3, #2]

	for(uint8_t i = 0; i < 3; i++){ // counter overflow stop
10006026:	2317      	movs	r3, #23
10006028:	18fb      	adds	r3, r7, r3
1000602a:	2200      	movs	r2, #0
1000602c:	701a      	strb	r2, [r3, #0]
1000602e:	e013      	b.n	10006058 <Ultra_sonic_filter+0x188>
		if( Ultrsonic_data_invaildcounter[i] > ULRTA_NUM_NO_DATA_INVALID) Ultrsonic_data_invaildcounter[i] = ULRTA_NUM_NO_DATA_INVALID;
10006030:	2317      	movs	r3, #23
10006032:	18fb      	adds	r3, r7, r3
10006034:	781b      	ldrb	r3, [r3, #0]
10006036:	4a28      	ldr	r2, [pc, #160]	; (100060d8 <Ultra_sonic_filter+0x208>)
10006038:	5cd3      	ldrb	r3, [r2, r3]
1000603a:	2b28      	cmp	r3, #40	; 0x28
1000603c:	d905      	bls.n	1000604a <Ultra_sonic_filter+0x17a>
1000603e:	2317      	movs	r3, #23
10006040:	18fb      	adds	r3, r7, r3
10006042:	781b      	ldrb	r3, [r3, #0]
10006044:	4a24      	ldr	r2, [pc, #144]	; (100060d8 <Ultra_sonic_filter+0x208>)
10006046:	2128      	movs	r1, #40	; 0x28
10006048:	54d1      	strb	r1, [r2, r3]
			Ultra_m_R = Exp_moving_average((float)Ultrasonic_cm_R_clc / 100 , Ultra_m_R, ALPHA_ULTARSONIC);
		}
	}
	else Ultrsonic_data_invaildcounter[2]++;

	for(uint8_t i = 0; i < 3; i++){ // counter overflow stop
1000604a:	2317      	movs	r3, #23
1000604c:	18fb      	adds	r3, r7, r3
1000604e:	781a      	ldrb	r2, [r3, #0]
10006050:	2317      	movs	r3, #23
10006052:	18fb      	adds	r3, r7, r3
10006054:	3201      	adds	r2, #1
10006056:	701a      	strb	r2, [r3, #0]
10006058:	2317      	movs	r3, #23
1000605a:	18fb      	adds	r3, r7, r3
1000605c:	781b      	ldrb	r3, [r3, #0]
1000605e:	2b02      	cmp	r3, #2
10006060:	d9e6      	bls.n	10006030 <Ultra_sonic_filter+0x160>
		if( Ultrsonic_data_invaildcounter[i] > ULRTA_NUM_NO_DATA_INVALID) Ultrsonic_data_invaildcounter[i] = ULRTA_NUM_NO_DATA_INVALID;
	}

	if(Ultrsonic_data_invaildcounter[0] < ULRTA_NUM_NO_DATA_INVALID ){
10006062:	4b1d      	ldr	r3, [pc, #116]	; (100060d8 <Ultra_sonic_filter+0x208>)
10006064:	781b      	ldrb	r3, [r3, #0]
10006066:	2b27      	cmp	r3, #39	; 0x27
10006068:	d80a      	bhi.n	10006080 <Ultra_sonic_filter+0x1b0>
		Obstacel_F.angle = 0;
1000606a:	4b23      	ldr	r3, [pc, #140]	; (100060f8 <Ultra_sonic_filter+0x228>)
1000606c:	2200      	movs	r2, #0
1000606e:	609a      	str	r2, [r3, #8]
		Obstacel_F.distance = Ultra_m_C;
10006070:	4b1b      	ldr	r3, [pc, #108]	; (100060e0 <Ultra_sonic_filter+0x210>)
10006072:	681a      	ldr	r2, [r3, #0]
10006074:	4b20      	ldr	r3, [pc, #128]	; (100060f8 <Ultra_sonic_filter+0x228>)
10006076:	605a      	str	r2, [r3, #4]
		Obstacel_F.isValid = 1;
10006078:	4b1f      	ldr	r3, [pc, #124]	; (100060f8 <Ultra_sonic_filter+0x228>)
1000607a:	2201      	movs	r2, #1
1000607c:	701a      	strb	r2, [r3, #0]
1000607e:	e002      	b.n	10006086 <Ultra_sonic_filter+0x1b6>
	}
	else Obstacel_F.isValid = 0;
10006080:	4b1d      	ldr	r3, [pc, #116]	; (100060f8 <Ultra_sonic_filter+0x228>)
10006082:	2200      	movs	r2, #0
10006084:	701a      	strb	r2, [r3, #0]

	if(Ultrsonic_data_invaildcounter[1] < ULRTA_NUM_NO_DATA_INVALID ){
10006086:	4b14      	ldr	r3, [pc, #80]	; (100060d8 <Ultra_sonic_filter+0x208>)
10006088:	785b      	ldrb	r3, [r3, #1]
1000608a:	2b27      	cmp	r3, #39	; 0x27
1000608c:	d80b      	bhi.n	100060a6 <Ultra_sonic_filter+0x1d6>
		Obstacel_L.angle = Steering_Angles[0];
1000608e:	4b15      	ldr	r3, [pc, #84]	; (100060e4 <Ultra_sonic_filter+0x214>)
10006090:	681a      	ldr	r2, [r3, #0]
10006092:	4b1a      	ldr	r3, [pc, #104]	; (100060fc <Ultra_sonic_filter+0x22c>)
10006094:	609a      	str	r2, [r3, #8]
		Obstacel_L.distance = Ultra_m_L;
10006096:	4b15      	ldr	r3, [pc, #84]	; (100060ec <Ultra_sonic_filter+0x21c>)
10006098:	681a      	ldr	r2, [r3, #0]
1000609a:	4b18      	ldr	r3, [pc, #96]	; (100060fc <Ultra_sonic_filter+0x22c>)
1000609c:	605a      	str	r2, [r3, #4]
		Obstacel_L.isValid = 1;
1000609e:	4b17      	ldr	r3, [pc, #92]	; (100060fc <Ultra_sonic_filter+0x22c>)
100060a0:	2201      	movs	r2, #1
100060a2:	701a      	strb	r2, [r3, #0]
100060a4:	e002      	b.n	100060ac <Ultra_sonic_filter+0x1dc>
	}
	else Obstacel_L.isValid = 0;
100060a6:	4b15      	ldr	r3, [pc, #84]	; (100060fc <Ultra_sonic_filter+0x22c>)
100060a8:	2200      	movs	r2, #0
100060aa:	701a      	strb	r2, [r3, #0]

	if(Ultrsonic_data_invaildcounter[2] < ULRTA_NUM_NO_DATA_INVALID ){
100060ac:	4b0a      	ldr	r3, [pc, #40]	; (100060d8 <Ultra_sonic_filter+0x208>)
100060ae:	789b      	ldrb	r3, [r3, #2]
100060b0:	2b27      	cmp	r3, #39	; 0x27
100060b2:	d80b      	bhi.n	100060cc <Ultra_sonic_filter+0x1fc>
		Obstacel_R.angle = Steering_Angles[1];
100060b4:	4b0b      	ldr	r3, [pc, #44]	; (100060e4 <Ultra_sonic_filter+0x214>)
100060b6:	685a      	ldr	r2, [r3, #4]
100060b8:	4b11      	ldr	r3, [pc, #68]	; (10006100 <Ultra_sonic_filter+0x230>)
100060ba:	609a      	str	r2, [r3, #8]
		Obstacel_R.distance = Ultra_m_R;
100060bc:	4b0d      	ldr	r3, [pc, #52]	; (100060f4 <Ultra_sonic_filter+0x224>)
100060be:	681a      	ldr	r2, [r3, #0]
100060c0:	4b0f      	ldr	r3, [pc, #60]	; (10006100 <Ultra_sonic_filter+0x230>)
100060c2:	605a      	str	r2, [r3, #4]
		Obstacel_R.isValid = 1;
100060c4:	4b0e      	ldr	r3, [pc, #56]	; (10006100 <Ultra_sonic_filter+0x230>)
100060c6:	2201      	movs	r2, #1
100060c8:	701a      	strb	r2, [r3, #0]
100060ca:	e002      	b.n	100060d2 <Ultra_sonic_filter+0x202>
	}
	else Obstacel_R.isValid = 0;
100060cc:	4b0c      	ldr	r3, [pc, #48]	; (10006100 <Ultra_sonic_filter+0x230>)
100060ce:	2200      	movs	r2, #0
100060d0:	701a      	strb	r2, [r3, #0]
	obstacel_R_x = Obstacel_R[0];
	obstacel_R_y = Obstacel_R[1];
	*/


}
100060d2:	46bd      	mov	sp, r7
100060d4:	b007      	add	sp, #28
100060d6:	bd90      	pop	{r4, r7, pc}
100060d8:	20000854 	.word	0x20000854
100060dc:	42c80000 	.word	0x42c80000
100060e0:	20000848 	.word	0x20000848
100060e4:	20000a40 	.word	0x20000a40
100060e8:	20000ab4 	.word	0x20000ab4
100060ec:	2000084c 	.word	0x2000084c
100060f0:	20000ab5 	.word	0x20000ab5
100060f4:	20000850 	.word	0x20000850
100060f8:	20000aec 	.word	0x20000aec
100060fc:	20000ad4 	.word	0x20000ad4
10006100:	20000ae0 	.word	0x20000ae0

10006104 <Ultrasoinc_Obstructet_Test>:

uint8_t Ultrasoinc_Obstructet_Test(float Angle){
10006104:	b590      	push	{r4, r7, lr}
10006106:	b085      	sub	sp, #20
10006108:	af00      	add	r7, sp, #0
1000610a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0; i < 3; i++){ // if rotate around multipel times
1000610c:	230f      	movs	r3, #15
1000610e:	18fb      	adds	r3, r7, r3
10006110:	2200      	movs	r2, #0
10006112:	701a      	strb	r2, [r3, #0]
10006114:	e06d      	b.n	100061f2 <Ultrasoinc_Obstructet_Test+0xee>
		if(Angle > 0){
10006116:	6878      	ldr	r0, [r7, #4]
10006118:	2100      	movs	r1, #0
1000611a:	f003 fb8f 	bl	1000983c <__aeabi_fcmpgt>
1000611e:	1e03      	subs	r3, r0, #0
10006120:	d02d      	beq.n	1000617e <Ultrasoinc_Obstructet_Test+0x7a>
			if((Angle - (POS_OBSTRUCTED_ANGLE_MIN + (i * 360))) * (Angle - (POS_OBSTRUCTED_ANGLE_MAX + (i * 360))) <= 0){
10006122:	230f      	movs	r3, #15
10006124:	18fb      	adds	r3, r7, r3
10006126:	781b      	ldrb	r3, [r3, #0]
10006128:	22b4      	movs	r2, #180	; 0xb4
1000612a:	0052      	lsls	r2, r2, #1
1000612c:	4353      	muls	r3, r2
1000612e:	3332      	adds	r3, #50	; 0x32
10006130:	1c18      	adds	r0, r3, #0
10006132:	f004 fa8b 	bl	1000a64c <__aeabi_i2f>
10006136:	1c03      	adds	r3, r0, #0
10006138:	6878      	ldr	r0, [r7, #4]
1000613a:	1c19      	adds	r1, r3, #0
1000613c:	f004 f8e8 	bl	1000a310 <__aeabi_fsub>
10006140:	1c03      	adds	r3, r0, #0
10006142:	1c1c      	adds	r4, r3, #0
10006144:	230f      	movs	r3, #15
10006146:	18fb      	adds	r3, r7, r3
10006148:	781b      	ldrb	r3, [r3, #0]
1000614a:	22b4      	movs	r2, #180	; 0xb4
1000614c:	0052      	lsls	r2, r2, #1
1000614e:	4353      	muls	r3, r2
10006150:	33d2      	adds	r3, #210	; 0xd2
10006152:	1c18      	adds	r0, r3, #0
10006154:	f004 fa7a 	bl	1000a64c <__aeabi_i2f>
10006158:	1c03      	adds	r3, r0, #0
1000615a:	6878      	ldr	r0, [r7, #4]
1000615c:	1c19      	adds	r1, r3, #0
1000615e:	f004 f8d7 	bl	1000a310 <__aeabi_fsub>
10006162:	1c03      	adds	r3, r0, #0
10006164:	1c20      	adds	r0, r4, #0
10006166:	1c19      	adds	r1, r3, #0
10006168:	f003 ffa0 	bl	1000a0ac <__aeabi_fmul>
1000616c:	1c03      	adds	r3, r0, #0
1000616e:	1c18      	adds	r0, r3, #0
10006170:	2100      	movs	r1, #0
10006172:	f003 fb59 	bl	10009828 <__aeabi_fcmple>
10006176:	1e03      	subs	r3, r0, #0
10006178:	d001      	beq.n	1000617e <Ultrasoinc_Obstructet_Test+0x7a>
				return 1;
1000617a:	2301      	movs	r3, #1
1000617c:	e03f      	b.n	100061fe <Ultrasoinc_Obstructet_Test+0xfa>
			}
		}

		if(Angle < 0){
1000617e:	6878      	ldr	r0, [r7, #4]
10006180:	2100      	movs	r1, #0
10006182:	f003 fb47 	bl	10009814 <__aeabi_fcmplt>
10006186:	1e03      	subs	r3, r0, #0
10006188:	d02c      	beq.n	100061e4 <Ultrasoinc_Obstructet_Test+0xe0>
			if((Angle - (NEG_OBSTRUCTED_ANGLE_MIN - (i * 360))) * (Angle - (NEG_OBSTRUCTED_ANGLE_MAX - (i * 360))) <= 0){
1000618a:	230f      	movs	r3, #15
1000618c:	18fb      	adds	r3, r7, r3
1000618e:	781b      	ldrb	r3, [r3, #0]
10006190:	4a1d      	ldr	r2, [pc, #116]	; (10006208 <Ultrasoinc_Obstructet_Test+0x104>)
10006192:	4353      	muls	r3, r2
10006194:	3b96      	subs	r3, #150	; 0x96
10006196:	1c18      	adds	r0, r3, #0
10006198:	f004 fa58 	bl	1000a64c <__aeabi_i2f>
1000619c:	1c03      	adds	r3, r0, #0
1000619e:	6878      	ldr	r0, [r7, #4]
100061a0:	1c19      	adds	r1, r3, #0
100061a2:	f004 f8b5 	bl	1000a310 <__aeabi_fsub>
100061a6:	1c03      	adds	r3, r0, #0
100061a8:	1c1c      	adds	r4, r3, #0
100061aa:	230f      	movs	r3, #15
100061ac:	18fb      	adds	r3, r7, r3
100061ae:	781b      	ldrb	r3, [r3, #0]
100061b0:	4a15      	ldr	r2, [pc, #84]	; (10006208 <Ultrasoinc_Obstructet_Test+0x104>)
100061b2:	4353      	muls	r3, r2
100061b4:	3b37      	subs	r3, #55	; 0x37
100061b6:	3bff      	subs	r3, #255	; 0xff
100061b8:	1c18      	adds	r0, r3, #0
100061ba:	f004 fa47 	bl	1000a64c <__aeabi_i2f>
100061be:	1c03      	adds	r3, r0, #0
100061c0:	6878      	ldr	r0, [r7, #4]
100061c2:	1c19      	adds	r1, r3, #0
100061c4:	f004 f8a4 	bl	1000a310 <__aeabi_fsub>
100061c8:	1c03      	adds	r3, r0, #0
100061ca:	1c20      	adds	r0, r4, #0
100061cc:	1c19      	adds	r1, r3, #0
100061ce:	f003 ff6d 	bl	1000a0ac <__aeabi_fmul>
100061d2:	1c03      	adds	r3, r0, #0
100061d4:	1c18      	adds	r0, r3, #0
100061d6:	2100      	movs	r1, #0
100061d8:	f003 fb26 	bl	10009828 <__aeabi_fcmple>
100061dc:	1e03      	subs	r3, r0, #0
100061de:	d001      	beq.n	100061e4 <Ultrasoinc_Obstructet_Test+0xe0>
						return 1;
100061e0:	2301      	movs	r3, #1
100061e2:	e00c      	b.n	100061fe <Ultrasoinc_Obstructet_Test+0xfa>

}

uint8_t Ultrasoinc_Obstructet_Test(float Angle){
	uint8_t i;
	for(i = 0; i < 3; i++){ // if rotate around multipel times
100061e4:	230f      	movs	r3, #15
100061e6:	18fb      	adds	r3, r7, r3
100061e8:	781a      	ldrb	r2, [r3, #0]
100061ea:	230f      	movs	r3, #15
100061ec:	18fb      	adds	r3, r7, r3
100061ee:	3201      	adds	r2, #1
100061f0:	701a      	strb	r2, [r3, #0]
100061f2:	230f      	movs	r3, #15
100061f4:	18fb      	adds	r3, r7, r3
100061f6:	781b      	ldrb	r3, [r3, #0]
100061f8:	2b02      	cmp	r3, #2
100061fa:	d98c      	bls.n	10006116 <Ultrasoinc_Obstructet_Test+0x12>
						return 1;
			}
		}
	}

	return 0;
100061fc:	2300      	movs	r3, #0
}
100061fe:	1c18      	adds	r0, r3, #0
10006200:	46bd      	mov	sp, r7
10006202:	b005      	add	sp, #20
10006204:	bd90      	pop	{r4, r7, pc}
10006206:	46c0      	nop			; (mov r8, r8)
10006208:	fffffe98 	.word	0xfffffe98

1000620c <Collision_voidance>:


void Collision_voidance(){
1000620c:	b590      	push	{r4, r7, lr}
1000620e:	b083      	sub	sp, #12
10006210:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&LED_COLLISION_AVOID);
10006212:	4b43      	ldr	r3, [pc, #268]	; (10006320 <Collision_voidance+0x114>)
10006214:	1c18      	adds	r0, r3, #0
10006216:	f7ff fe4b 	bl	10005eb0 <DIGITAL_IO_SetOutputLow>

	// check if reciveing from Ulatrasoic sesnors node
	CAN_Ultrasonic_No_messasge_count ++;
1000621a:	4b42      	ldr	r3, [pc, #264]	; (10006324 <Collision_voidance+0x118>)
1000621c:	781b      	ldrb	r3, [r3, #0]
1000621e:	b2db      	uxtb	r3, r3
10006220:	3301      	adds	r3, #1
10006222:	b2da      	uxtb	r2, r3
10006224:	4b3f      	ldr	r3, [pc, #252]	; (10006324 <Collision_voidance+0x118>)
10006226:	701a      	strb	r2, [r3, #0]
	if(CAN_Ultrasonic_No_messasge_count > 200) {
10006228:	4b3e      	ldr	r3, [pc, #248]	; (10006324 <Collision_voidance+0x118>)
1000622a:	781b      	ldrb	r3, [r3, #0]
1000622c:	b2db      	uxtb	r3, r3
1000622e:	2bc8      	cmp	r3, #200	; 0xc8
10006230:	d903      	bls.n	1000623a <Collision_voidance+0x2e>
		CAN_Ultrasonic_No_messasge_count = 200;
10006232:	4b3c      	ldr	r3, [pc, #240]	; (10006324 <Collision_voidance+0x118>)
10006234:	22c8      	movs	r2, #200	; 0xc8
10006236:	701a      	strb	r2, [r3, #0]
		return;
10006238:	e06e      	b.n	10006318 <Collision_voidance+0x10c>
	}

	Speed_reduction_ratio = 1;
1000623a:	4b3b      	ldr	r3, [pc, #236]	; (10006328 <Collision_voidance+0x11c>)
1000623c:	22fe      	movs	r2, #254	; 0xfe
1000623e:	0592      	lsls	r2, r2, #22
10006240:	601a      	str	r2, [r3, #0]
	Speed_limit = MAX_Speed + 0.01; // + 0.01 to avoid float bs
10006242:	4b3a      	ldr	r3, [pc, #232]	; (1000632c <Collision_voidance+0x120>)
10006244:	4a3a      	ldr	r2, [pc, #232]	; (10006330 <Collision_voidance+0x124>)
10006246:	601a      	str	r2, [r3, #0]
	new_Speed_limit = MAX_Speed;
10006248:	4b3a      	ldr	r3, [pc, #232]	; (10006334 <Collision_voidance+0x128>)
1000624a:	22fe      	movs	r2, #254	; 0xfe
1000624c:	0592      	lsls	r2, r2, #22
1000624e:	601a      	str	r2, [r3, #0]


	Obstacel_CA_check(Obstacel_F);
10006250:	4b39      	ldr	r3, [pc, #228]	; (10006338 <Collision_voidance+0x12c>)
10006252:	6818      	ldr	r0, [r3, #0]
10006254:	6859      	ldr	r1, [r3, #4]
10006256:	689a      	ldr	r2, [r3, #8]
10006258:	f000 f87c 	bl	10006354 <Obstacel_CA_check>
	//Obstacel_CA_check(Obstacel_L);
	//Obstacel_CA_check(Obstacel_R);

	//CA aktive
	if(Speed_reduction_ratio != 1)DIGITAL_IO_SetOutputHigh(&LED_COLLISION_AVOID);
1000625c:	4b32      	ldr	r3, [pc, #200]	; (10006328 <Collision_voidance+0x11c>)
1000625e:	681b      	ldr	r3, [r3, #0]
10006260:	1c18      	adds	r0, r3, #0
10006262:	21fe      	movs	r1, #254	; 0xfe
10006264:	0589      	lsls	r1, r1, #22
10006266:	f003 facf 	bl	10009808 <__aeabi_fcmpeq>
1000626a:	1e03      	subs	r3, r0, #0
1000626c:	d104      	bne.n	10006278 <Collision_voidance+0x6c>
1000626e:	4b2c      	ldr	r3, [pc, #176]	; (10006320 <Collision_voidance+0x114>)
10006270:	1c18      	adds	r0, r3, #0
10006272:	f7ff fe0d 	bl	10005e90 <DIGITAL_IO_SetOutputHigh>
10006276:	e020      	b.n	100062ba <Collision_voidance+0xae>
	else if(Speed_limit < MAX_Speed){
10006278:	4b2c      	ldr	r3, [pc, #176]	; (1000632c <Collision_voidance+0x120>)
1000627a:	681b      	ldr	r3, [r3, #0]
1000627c:	1c18      	adds	r0, r3, #0
1000627e:	21fe      	movs	r1, #254	; 0xfe
10006280:	0589      	lsls	r1, r1, #22
10006282:	f003 fac7 	bl	10009814 <__aeabi_fcmplt>
10006286:	1e03      	subs	r3, r0, #0
10006288:	d017      	beq.n	100062ba <Collision_voidance+0xae>
		if(Speeds[0] != 0) Speed_reduction_ratio = Speed_limit / Speeds[0];
1000628a:	4b2c      	ldr	r3, [pc, #176]	; (1000633c <Collision_voidance+0x130>)
1000628c:	681b      	ldr	r3, [r3, #0]
1000628e:	1c18      	adds	r0, r3, #0
10006290:	2100      	movs	r1, #0
10006292:	f003 fab9 	bl	10009808 <__aeabi_fcmpeq>
10006296:	1e03      	subs	r3, r0, #0
10006298:	d10b      	bne.n	100062b2 <Collision_voidance+0xa6>
1000629a:	4b24      	ldr	r3, [pc, #144]	; (1000632c <Collision_voidance+0x120>)
1000629c:	681a      	ldr	r2, [r3, #0]
1000629e:	4b27      	ldr	r3, [pc, #156]	; (1000633c <Collision_voidance+0x130>)
100062a0:	681b      	ldr	r3, [r3, #0]
100062a2:	1c10      	adds	r0, r2, #0
100062a4:	1c19      	adds	r1, r3, #0
100062a6:	f003 fd0f 	bl	10009cc8 <__aeabi_fdiv>
100062aa:	1c03      	adds	r3, r0, #0
100062ac:	1c1a      	adds	r2, r3, #0
100062ae:	4b1e      	ldr	r3, [pc, #120]	; (10006328 <Collision_voidance+0x11c>)
100062b0:	601a      	str	r2, [r3, #0]
		DIGITAL_IO_SetOutputHigh(&LED_COLLISION_AVOID);
100062b2:	4b1b      	ldr	r3, [pc, #108]	; (10006320 <Collision_voidance+0x114>)
100062b4:	1c18      	adds	r0, r3, #0
100062b6:	f7ff fdeb 	bl	10005e90 <DIGITAL_IO_SetOutputHigh>
	}

	// speed output with reduction if CA active
	for(uint8_t i = 0; i < 4; i ++){
100062ba:	1dfb      	adds	r3, r7, #7
100062bc:	2200      	movs	r2, #0
100062be:	701a      	strb	r2, [r3, #0]
100062c0:	e016      	b.n	100062f0 <Collision_voidance+0xe4>
		Speeds_CA[i] = Speeds[i] * Speed_reduction_ratio;
100062c2:	1dfb      	adds	r3, r7, #7
100062c4:	781c      	ldrb	r4, [r3, #0]
100062c6:	1dfb      	adds	r3, r7, #7
100062c8:	781a      	ldrb	r2, [r3, #0]
100062ca:	4b1c      	ldr	r3, [pc, #112]	; (1000633c <Collision_voidance+0x130>)
100062cc:	0092      	lsls	r2, r2, #2
100062ce:	58d2      	ldr	r2, [r2, r3]
100062d0:	4b15      	ldr	r3, [pc, #84]	; (10006328 <Collision_voidance+0x11c>)
100062d2:	681b      	ldr	r3, [r3, #0]
100062d4:	1c10      	adds	r0, r2, #0
100062d6:	1c19      	adds	r1, r3, #0
100062d8:	f003 fee8 	bl	1000a0ac <__aeabi_fmul>
100062dc:	1c03      	adds	r3, r0, #0
100062de:	1c19      	adds	r1, r3, #0
100062e0:	4b17      	ldr	r3, [pc, #92]	; (10006340 <Collision_voidance+0x134>)
100062e2:	00a2      	lsls	r2, r4, #2
100062e4:	50d1      	str	r1, [r2, r3]
		if(Speeds[0] != 0) Speed_reduction_ratio = Speed_limit / Speeds[0];
		DIGITAL_IO_SetOutputHigh(&LED_COLLISION_AVOID);
	}

	// speed output with reduction if CA active
	for(uint8_t i = 0; i < 4; i ++){
100062e6:	1dfb      	adds	r3, r7, #7
100062e8:	781a      	ldrb	r2, [r3, #0]
100062ea:	1dfb      	adds	r3, r7, #7
100062ec:	3201      	adds	r2, #1
100062ee:	701a      	strb	r2, [r3, #0]
100062f0:	1dfb      	adds	r3, r7, #7
100062f2:	781b      	ldrb	r3, [r3, #0]
100062f4:	2b03      	cmp	r3, #3
100062f6:	d9e4      	bls.n	100062c2 <Collision_voidance+0xb6>
		Speeds_CA[i] = Speeds[i] * Speed_reduction_ratio;
	}

	speed_CA_fl = Speeds_CA[0];
100062f8:	4b11      	ldr	r3, [pc, #68]	; (10006340 <Collision_voidance+0x134>)
100062fa:	681a      	ldr	r2, [r3, #0]
100062fc:	4b11      	ldr	r3, [pc, #68]	; (10006344 <Collision_voidance+0x138>)
100062fe:	601a      	str	r2, [r3, #0]
	speed_CA_fr = Speeds_CA[1];
10006300:	4b0f      	ldr	r3, [pc, #60]	; (10006340 <Collision_voidance+0x134>)
10006302:	685a      	ldr	r2, [r3, #4]
10006304:	4b10      	ldr	r3, [pc, #64]	; (10006348 <Collision_voidance+0x13c>)
10006306:	601a      	str	r2, [r3, #0]
	speed_CA_rl = Speeds_CA[2];
10006308:	4b0d      	ldr	r3, [pc, #52]	; (10006340 <Collision_voidance+0x134>)
1000630a:	689a      	ldr	r2, [r3, #8]
1000630c:	4b0f      	ldr	r3, [pc, #60]	; (1000634c <Collision_voidance+0x140>)
1000630e:	601a      	str	r2, [r3, #0]
	speed_CA_rr = Speeds_CA[3];
10006310:	4b0b      	ldr	r3, [pc, #44]	; (10006340 <Collision_voidance+0x134>)
10006312:	68da      	ldr	r2, [r3, #12]
10006314:	4b0e      	ldr	r3, [pc, #56]	; (10006350 <Collision_voidance+0x144>)
10006316:	601a      	str	r2, [r3, #0]

}
10006318:	46bd      	mov	sp, r7
1000631a:	b003      	add	sp, #12
1000631c:	bd90      	pop	{r4, r7, pc}
1000631e:	46c0      	nop			; (mov r8, r8)
10006320:	1000c9f8 	.word	0x1000c9f8
10006324:	20000828 	.word	0x20000828
10006328:	20000858 	.word	0x20000858
1000632c:	2000085c 	.word	0x2000085c
10006330:	3f8147ae 	.word	0x3f8147ae
10006334:	20000860 	.word	0x20000860
10006338:	20000aec 	.word	0x20000aec
1000633c:	20000a20 	.word	0x20000a20
10006340:	20000a30 	.word	0x20000a30
10006344:	20000ab8 	.word	0x20000ab8
10006348:	20000abc 	.word	0x20000abc
1000634c:	20000ac0 	.word	0x20000ac0
10006350:	20000ac4 	.word	0x20000ac4

10006354 <Obstacel_CA_check>:

void Obstacel_CA_check(Obstacel obstacel){
10006354:	b5f0      	push	{r4, r5, r6, r7, lr}
10006356:	b087      	sub	sp, #28
10006358:	af00      	add	r7, sp, #0
1000635a:	1d3b      	adds	r3, r7, #4
1000635c:	6018      	str	r0, [r3, #0]
1000635e:	6059      	str	r1, [r3, #4]
10006360:	609a      	str	r2, [r3, #8]
	if(obstacel.isValid){
10006362:	1d3b      	adds	r3, r7, #4
10006364:	781b      	ldrb	r3, [r3, #0]
10006366:	2b00      	cmp	r3, #0
10006368:	d100      	bne.n	1000636c <Obstacel_CA_check+0x18>
1000636a:	e087      	b.n	1000647c <Obstacel_CA_check+0x128>
		if(obstacel.distance < CA_START){
1000636c:	1d3b      	adds	r3, r7, #4
1000636e:	685b      	ldr	r3, [r3, #4]
10006370:	1c18      	adds	r0, r3, #0
10006372:	21fe      	movs	r1, #254	; 0xfe
10006374:	0589      	lsls	r1, r1, #22
10006376:	f003 fa4d 	bl	10009814 <__aeabi_fcmplt>
1000637a:	1e03      	subs	r3, r0, #0
1000637c:	d100      	bne.n	10006380 <Obstacel_CA_check+0x2c>
1000637e:	e07d      	b.n	1000647c <Obstacel_CA_check+0x128>
			if(within_MAX_MIN(obstacel.angle, trajectory_angle + CA_ANGLE, trajectory_angle - CA_ANGLE)){
10006380:	1d3b      	adds	r3, r7, #4
10006382:	689c      	ldr	r4, [r3, #8]
10006384:	4b3f      	ldr	r3, [pc, #252]	; (10006484 <Obstacel_CA_check+0x130>)
10006386:	681b      	ldr	r3, [r3, #0]
10006388:	1c18      	adds	r0, r3, #0
1000638a:	493f      	ldr	r1, [pc, #252]	; (10006488 <Obstacel_CA_check+0x134>)
1000638c:	f003 fb20 	bl	100099d0 <__aeabi_fadd>
10006390:	1c03      	adds	r3, r0, #0
10006392:	1c1d      	adds	r5, r3, #0
10006394:	4b3b      	ldr	r3, [pc, #236]	; (10006484 <Obstacel_CA_check+0x130>)
10006396:	681b      	ldr	r3, [r3, #0]
10006398:	1c18      	adds	r0, r3, #0
1000639a:	493b      	ldr	r1, [pc, #236]	; (10006488 <Obstacel_CA_check+0x134>)
1000639c:	f003 ffb8 	bl	1000a310 <__aeabi_fsub>
100063a0:	1c03      	adds	r3, r0, #0
100063a2:	1c20      	adds	r0, r4, #0
100063a4:	1c29      	adds	r1, r5, #0
100063a6:	1c1a      	adds	r2, r3, #0
100063a8:	f000 f9ac 	bl	10006704 <within_MAX_MIN>
100063ac:	1e03      	subs	r3, r0, #0
100063ae:	d065      	beq.n	1000647c <Obstacel_CA_check+0x128>
				float abs_trajctory = vector_abs_value(Trajctory);
100063b0:	4b36      	ldr	r3, [pc, #216]	; (1000648c <Obstacel_CA_check+0x138>)
100063b2:	1c18      	adds	r0, r3, #0
100063b4:	f000 f9ca 	bl	1000674c <vector_abs_value>
100063b8:	1c03      	adds	r3, r0, #0
100063ba:	617b      	str	r3, [r7, #20]
				if( abs_trajctory > 0.01){
100063bc:	6978      	ldr	r0, [r7, #20]
100063be:	f005 ffab 	bl	1000c318 <__aeabi_f2d>
100063c2:	1c03      	adds	r3, r0, #0
100063c4:	1c0c      	adds	r4, r1, #0
100063c6:	1c18      	adds	r0, r3, #0
100063c8:	1c21      	adds	r1, r4, #0
100063ca:	4a31      	ldr	r2, [pc, #196]	; (10006490 <Obstacel_CA_check+0x13c>)
100063cc:	4b31      	ldr	r3, [pc, #196]	; (10006494 <Obstacel_CA_check+0x140>)
100063ce:	f003 f9fb 	bl	100097c8 <__aeabi_dcmpgt>
100063d2:	1e03      	subs	r3, r0, #0
100063d4:	d052      	beq.n	1000647c <Obstacel_CA_check+0x128>
					if(obstacel.distance  < CA_STOP) Speed_reduction_ratio = 0; // stop
100063d6:	1d3b      	adds	r3, r7, #4
100063d8:	685b      	ldr	r3, [r3, #4]
100063da:	1c18      	adds	r0, r3, #0
100063dc:	f005 ff9c 	bl	1000c318 <__aeabi_f2d>
100063e0:	1c03      	adds	r3, r0, #0
100063e2:	1c0c      	adds	r4, r1, #0
100063e4:	1c18      	adds	r0, r3, #0
100063e6:	1c21      	adds	r1, r4, #0
100063e8:	4a2b      	ldr	r2, [pc, #172]	; (10006498 <Obstacel_CA_check+0x144>)
100063ea:	4b2c      	ldr	r3, [pc, #176]	; (1000649c <Obstacel_CA_check+0x148>)
100063ec:	f003 f9d8 	bl	100097a0 <__aeabi_dcmplt>
100063f0:	1e03      	subs	r3, r0, #0
100063f2:	d003      	beq.n	100063fc <Obstacel_CA_check+0xa8>
100063f4:	4b2a      	ldr	r3, [pc, #168]	; (100064a0 <Obstacel_CA_check+0x14c>)
100063f6:	2200      	movs	r2, #0
100063f8:	601a      	str	r2, [r3, #0]
100063fa:	e03f      	b.n	1000647c <Obstacel_CA_check+0x128>
					else if(abs_trajctory > obstacel.distance  - CA_STOP){
100063fc:	6978      	ldr	r0, [r7, #20]
100063fe:	f005 ff8b 	bl	1000c318 <__aeabi_f2d>
10006402:	1c05      	adds	r5, r0, #0
10006404:	1c0e      	adds	r6, r1, #0
10006406:	1d3b      	adds	r3, r7, #4
10006408:	685b      	ldr	r3, [r3, #4]
1000640a:	1c18      	adds	r0, r3, #0
1000640c:	f005 ff84 	bl	1000c318 <__aeabi_f2d>
10006410:	1c03      	adds	r3, r0, #0
10006412:	1c0c      	adds	r4, r1, #0
10006414:	1c18      	adds	r0, r3, #0
10006416:	1c21      	adds	r1, r4, #0
10006418:	4a1f      	ldr	r2, [pc, #124]	; (10006498 <Obstacel_CA_check+0x144>)
1000641a:	4b20      	ldr	r3, [pc, #128]	; (1000649c <Obstacel_CA_check+0x148>)
1000641c:	f005 fb5e 	bl	1000badc <__aeabi_dsub>
10006420:	1c03      	adds	r3, r0, #0
10006422:	1c0c      	adds	r4, r1, #0
10006424:	1c28      	adds	r0, r5, #0
10006426:	1c31      	adds	r1, r6, #0
10006428:	1c1a      	adds	r2, r3, #0
1000642a:	1c23      	adds	r3, r4, #0
1000642c:	f003 f9cc 	bl	100097c8 <__aeabi_dcmpgt>
10006430:	1e03      	subs	r3, r0, #0
10006432:	d023      	beq.n	1000647c <Obstacel_CA_check+0x128>
						   new_Speed_limit = obstacel.distance  - CA_STOP; // speed reduction
10006434:	1d3b      	adds	r3, r7, #4
10006436:	685b      	ldr	r3, [r3, #4]
10006438:	1c18      	adds	r0, r3, #0
1000643a:	f005 ff6d 	bl	1000c318 <__aeabi_f2d>
1000643e:	1c03      	adds	r3, r0, #0
10006440:	1c0c      	adds	r4, r1, #0
10006442:	1c18      	adds	r0, r3, #0
10006444:	1c21      	adds	r1, r4, #0
10006446:	4a14      	ldr	r2, [pc, #80]	; (10006498 <Obstacel_CA_check+0x144>)
10006448:	4b14      	ldr	r3, [pc, #80]	; (1000649c <Obstacel_CA_check+0x148>)
1000644a:	f005 fb47 	bl	1000badc <__aeabi_dsub>
1000644e:	1c03      	adds	r3, r0, #0
10006450:	1c0c      	adds	r4, r1, #0
10006452:	1c18      	adds	r0, r3, #0
10006454:	1c21      	adds	r1, r4, #0
10006456:	f005 ffb3 	bl	1000c3c0 <__aeabi_d2f>
1000645a:	1c02      	adds	r2, r0, #0
1000645c:	4b11      	ldr	r3, [pc, #68]	; (100064a4 <Obstacel_CA_check+0x150>)
1000645e:	601a      	str	r2, [r3, #0]
						if( Speed_limit > new_Speed_limit) Speed_limit = new_Speed_limit;
10006460:	4b11      	ldr	r3, [pc, #68]	; (100064a8 <Obstacel_CA_check+0x154>)
10006462:	681a      	ldr	r2, [r3, #0]
10006464:	4b0f      	ldr	r3, [pc, #60]	; (100064a4 <Obstacel_CA_check+0x150>)
10006466:	681b      	ldr	r3, [r3, #0]
10006468:	1c10      	adds	r0, r2, #0
1000646a:	1c19      	adds	r1, r3, #0
1000646c:	f003 f9e6 	bl	1000983c <__aeabi_fcmpgt>
10006470:	1e03      	subs	r3, r0, #0
10006472:	d003      	beq.n	1000647c <Obstacel_CA_check+0x128>
10006474:	4b0b      	ldr	r3, [pc, #44]	; (100064a4 <Obstacel_CA_check+0x150>)
10006476:	681a      	ldr	r2, [r3, #0]
10006478:	4b0b      	ldr	r3, [pc, #44]	; (100064a8 <Obstacel_CA_check+0x154>)
1000647a:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
}
1000647c:	46bd      	mov	sp, r7
1000647e:	b007      	add	sp, #28
10006480:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006482:	46c0      	nop			; (mov r8, r8)
10006484:	20000a84 	.word	0x20000a84
10006488:	41700000 	.word	0x41700000
1000648c:	20000a7c 	.word	0x20000a7c
10006490:	47ae147b 	.word	0x47ae147b
10006494:	3f847ae1 	.word	0x3f847ae1
10006498:	9999999a 	.word	0x9999999a
1000649c:	3fc99999 	.word	0x3fc99999
100064a0:	20000858 	.word	0x20000858
100064a4:	20000860 	.word	0x20000860
100064a8:	2000085c 	.word	0x2000085c

100064ac <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100064ac:	b580      	push	{r7, lr}
100064ae:	b082      	sub	sp, #8
100064b0:	af00      	add	r7, sp, #0
100064b2:	6078      	str	r0, [r7, #4]
100064b4:	1c0a      	adds	r2, r1, #0
100064b6:	1cfb      	adds	r3, r7, #3
100064b8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
100064ba:	1cfb      	adds	r3, r7, #3
100064bc:	781b      	ldrb	r3, [r3, #0]
100064be:	2201      	movs	r2, #1
100064c0:	409a      	lsls	r2, r3
100064c2:	687b      	ldr	r3, [r7, #4]
100064c4:	605a      	str	r2, [r3, #4]
}
100064c6:	46bd      	mov	sp, r7
100064c8:	b002      	add	sp, #8
100064ca:	bd80      	pop	{r7, pc}

100064cc <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100064cc:	b580      	push	{r7, lr}
100064ce:	b082      	sub	sp, #8
100064d0:	af00      	add	r7, sp, #0
100064d2:	6078      	str	r0, [r7, #4]
100064d4:	1c0a      	adds	r2, r1, #0
100064d6:	1cfb      	adds	r3, r7, #3
100064d8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100064da:	1cfb      	adds	r3, r7, #3
100064dc:	781b      	ldrb	r3, [r3, #0]
100064de:	2280      	movs	r2, #128	; 0x80
100064e0:	0252      	lsls	r2, r2, #9
100064e2:	409a      	lsls	r2, r3
100064e4:	687b      	ldr	r3, [r7, #4]
100064e6:	605a      	str	r2, [r3, #4]
}
100064e8:	46bd      	mov	sp, r7
100064ea:	b002      	add	sp, #8
100064ec:	bd80      	pop	{r7, pc}
100064ee:	46c0      	nop			; (mov r8, r8)

100064f0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
100064f0:	b580      	push	{r7, lr}
100064f2:	b082      	sub	sp, #8
100064f4:	af00      	add	r7, sp, #0
100064f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
100064f8:	687b      	ldr	r3, [r7, #4]
100064fa:	681a      	ldr	r2, [r3, #0]
100064fc:	687b      	ldr	r3, [r7, #4]
100064fe:	7b1b      	ldrb	r3, [r3, #12]
10006500:	1c10      	adds	r0, r2, #0
10006502:	1c19      	adds	r1, r3, #0
10006504:	f7ff ffd2 	bl	100064ac <XMC_GPIO_SetOutputHigh>
}
10006508:	46bd      	mov	sp, r7
1000650a:	b002      	add	sp, #8
1000650c:	bd80      	pop	{r7, pc}
1000650e:	46c0      	nop			; (mov r8, r8)

10006510 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10006510:	b580      	push	{r7, lr}
10006512:	b082      	sub	sp, #8
10006514:	af00      	add	r7, sp, #0
10006516:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10006518:	687b      	ldr	r3, [r7, #4]
1000651a:	681a      	ldr	r2, [r3, #0]
1000651c:	687b      	ldr	r3, [r7, #4]
1000651e:	7b1b      	ldrb	r3, [r3, #12]
10006520:	1c10      	adds	r0, r2, #0
10006522:	1c19      	adds	r1, r3, #0
10006524:	f7ff ffd2 	bl	100064cc <XMC_GPIO_SetOutputLow>
}
10006528:	46bd      	mov	sp, r7
1000652a:	b002      	add	sp, #8
1000652c:	bd80      	pop	{r7, pc}
1000652e:	46c0      	nop			; (mov r8, r8)

10006530 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
10006530:	b580      	push	{r7, lr}
10006532:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
10006534:	4b03      	ldr	r3, [pc, #12]	; (10006544 <XMC_WDT_Start+0x14>)
10006536:	4a03      	ldr	r2, [pc, #12]	; (10006544 <XMC_WDT_Start+0x14>)
10006538:	6852      	ldr	r2, [r2, #4]
1000653a:	2101      	movs	r1, #1
1000653c:	430a      	orrs	r2, r1
1000653e:	605a      	str	r2, [r3, #4]
}
10006540:	46bd      	mov	sp, r7
10006542:	bd80      	pop	{r7, pc}
10006544:	40020000 	.word	0x40020000

10006548 <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
10006548:	b580      	push	{r7, lr}
1000654a:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
1000654c:	4b02      	ldr	r3, [pc, #8]	; (10006558 <XMC_WDT_ClearAlarm+0x10>)
1000654e:	2201      	movs	r2, #1
10006550:	61da      	str	r2, [r3, #28]
}
10006552:	46bd      	mov	sp, r7
10006554:	bd80      	pop	{r7, pc}
10006556:	46c0      	nop			; (mov r8, r8)
10006558:	40020000 	.word	0x40020000

1000655c <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
1000655c:	b580      	push	{r7, lr}
1000655e:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
10006560:	f7ff ffe6 	bl	10006530 <XMC_WDT_Start>
}
10006564:	46bd      	mov	sp, r7
10006566:	bd80      	pop	{r7, pc}

10006568 <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
10006568:	b580      	push	{r7, lr}
1000656a:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
1000656c:	f7ff ffec 	bl	10006548 <XMC_WDT_ClearAlarm>
}
10006570:	46bd      	mov	sp, r7
10006572:	bd80      	pop	{r7, pc}

10006574 <main>:
CAN_NODE_STATUS_t init_status;
int CAN_OK = 0;


int main(void)
{
10006574:	b590      	push	{r4, r7, lr}
10006576:	b083      	sub	sp, #12
10006578:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
1000657a:	1dfc      	adds	r4, r7, #7
1000657c:	f7fd fcf8 	bl	10003f70 <DAVE_Init>
10006580:	1c03      	adds	r3, r0, #0
10006582:	7023      	strb	r3, [r4, #0]

  if (status != DAVE_STATUS_SUCCESS)
10006584:	1dfb      	adds	r3, r7, #7
10006586:	781b      	ldrb	r3, [r3, #0]
10006588:	2b00      	cmp	r3, #0
1000658a:	d000      	beq.n	1000658e <main+0x1a>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
1000658c:	e7fe      	b.n	1000658c <main+0x18>
  }

  //Initialization of CAN
  	//CAN_NODE_STATUS_t init_status;
  	init_status = CAN_NODE_Init(&CAN_NODE_0);
1000658e:	4b09      	ldr	r3, [pc, #36]	; (100065b4 <main+0x40>)
10006590:	1c18      	adds	r0, r3, #0
10006592:	f7fd fc41 	bl	10003e18 <CAN_NODE_Init>
10006596:	1c03      	adds	r3, r0, #0
10006598:	1c1a      	adds	r2, r3, #0
1000659a:	4b07      	ldr	r3, [pc, #28]	; (100065b8 <main+0x44>)
1000659c:	701a      	strb	r2, [r3, #0]

  	if (init_status != CAN_NODE_STATUS_SUCCESS) {
1000659e:	4b06      	ldr	r3, [pc, #24]	; (100065b8 <main+0x44>)
100065a0:	781b      	ldrb	r3, [r3, #0]
100065a2:	2b00      	cmp	r3, #0
100065a4:	d102      	bne.n	100065ac <main+0x38>
  		XMC_DEBUG("CAN initialization failed\n");
  	}
  	else{
  		CAN_OK = 1;
100065a6:	4b05      	ldr	r3, [pc, #20]	; (100065bc <main+0x48>)
100065a8:	2201      	movs	r2, #1
100065aa:	601a      	str	r2, [r3, #0]
  	}

  	WATCHDOG_Start(); // watchdog restart if CAN not working
100065ac:	f7ff ffd6 	bl	1000655c <WATCHDOG_Start>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	 // Servo_NP_setting();	  // nutral point servo setting
  }
100065b0:	e7fe      	b.n	100065b0 <main+0x3c>
100065b2:	46c0      	nop			; (mov r8, r8)
100065b4:	1000cadc 	.word	0x1000cadc
100065b8:	20000af8 	.word	0x20000af8
100065bc:	20000ac8 	.word	0x20000ac8

100065c0 <Watchdog_Handler>:
}

void Watchdog_Handler(void) // to do restates if can is not working a problem wenn power from the buck or plab supplie but ok like this
{
100065c0:	b580      	push	{r7, lr}
100065c2:	af00      	add	r7, sp, #0
  WATCHDOG_ClearAlarm(); /* Clear the alarm event */
100065c4:	f7ff ffd0 	bl	10006568 <WATCHDOG_ClearAlarm>
  DIGITAL_IO_SetOutputHigh(&WATCHDOG_LED_BLUE);
100065c8:	4b02      	ldr	r3, [pc, #8]	; (100065d4 <Watchdog_Handler+0x14>)
100065ca:	1c18      	adds	r0, r3, #0
100065cc:	f7ff ff90 	bl	100064f0 <DIGITAL_IO_SetOutputHigh>
}
100065d0:	46bd      	mov	sp, r7
100065d2:	bd80      	pop	{r7, pc}
100065d4:	1000c9d8 	.word	0x1000c9d8

100065d8 <IRQ7_Handler>:


void TIMER_CONTROL_ISR(void){
100065d8:	b580      	push	{r7, lr}
100065da:	b082      	sub	sp, #8
100065dc:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&CALC_TIME_INDICATOR);
100065de:	4b3c      	ldr	r3, [pc, #240]	; (100066d0 <IRQ7_Handler+0xf8>)
100065e0:	1c18      	adds	r0, r3, #0
100065e2:	f7ff ff85 	bl	100064f0 <DIGITAL_IO_SetOutputHigh>
	mode_led(Steering_mode);
100065e6:	4b3b      	ldr	r3, [pc, #236]	; (100066d4 <IRQ7_Handler+0xfc>)
100065e8:	781b      	ldrb	r3, [r3, #0]
100065ea:	b2db      	uxtb	r3, r3
100065ec:	1c18      	adds	r0, r3, #0
100065ee:	f7ff f8d9 	bl	100057a4 <mode_led>

	if(RC_controll == 1){
100065f2:	4b39      	ldr	r3, [pc, #228]	; (100066d8 <IRQ7_Handler+0x100>)
100065f4:	781b      	ldrb	r3, [r3, #0]
100065f6:	b2db      	uxtb	r3, r3
100065f8:	2b01      	cmp	r3, #1
100065fa:	d107      	bne.n	1000660c <IRQ7_Handler+0x34>
		if( NO_New_Input_counter > 9){
100065fc:	4b37      	ldr	r3, [pc, #220]	; (100066dc <IRQ7_Handler+0x104>)
100065fe:	681b      	ldr	r3, [r3, #0]
10006600:	2b09      	cmp	r3, #9
10006602:	d903      	bls.n	1000660c <IRQ7_Handler+0x34>
			DIGITAL_IO_SetOutputLow(&RC_no_data_LED);
10006604:	4b36      	ldr	r3, [pc, #216]	; (100066e0 <IRQ7_Handler+0x108>)
10006606:	1c18      	adds	r0, r3, #0
10006608:	f7ff ff82 	bl	10006510 <DIGITAL_IO_SetOutputLow>
		}
	}


	if(New_Input == 1){
1000660c:	4b35      	ldr	r3, [pc, #212]	; (100066e4 <IRQ7_Handler+0x10c>)
1000660e:	781b      	ldrb	r3, [r3, #0]
10006610:	b2db      	uxtb	r3, r3
10006612:	2b01      	cmp	r3, #1
10006614:	d10f      	bne.n	10006636 <IRQ7_Handler+0x5e>
	Steering_Function(Steering_direction, Driving_speed, Steering_mode);
10006616:	4b34      	ldr	r3, [pc, #208]	; (100066e8 <IRQ7_Handler+0x110>)
10006618:	6819      	ldr	r1, [r3, #0]
1000661a:	4b34      	ldr	r3, [pc, #208]	; (100066ec <IRQ7_Handler+0x114>)
1000661c:	681a      	ldr	r2, [r3, #0]
1000661e:	4b2d      	ldr	r3, [pc, #180]	; (100066d4 <IRQ7_Handler+0xfc>)
10006620:	781b      	ldrb	r3, [r3, #0]
10006622:	b2db      	uxtb	r3, r3
10006624:	1c08      	adds	r0, r1, #0
10006626:	1c11      	adds	r1, r2, #0
10006628:	1c1a      	adds	r2, r3, #0
1000662a:	f7fe f8dd 	bl	100047e8 <Steering_Function>
	NO_New_Input_counter = 0;
1000662e:	4b2b      	ldr	r3, [pc, #172]	; (100066dc <IRQ7_Handler+0x104>)
10006630:	2200      	movs	r2, #0
10006632:	601a      	str	r2, [r3, #0]
10006634:	e023      	b.n	1000667e <IRQ7_Handler+0xa6>

	}
	else{
		NO_New_Input_counter ++;
10006636:	4b29      	ldr	r3, [pc, #164]	; (100066dc <IRQ7_Handler+0x104>)
10006638:	681b      	ldr	r3, [r3, #0]
1000663a:	1c5a      	adds	r2, r3, #1
1000663c:	4b27      	ldr	r3, [pc, #156]	; (100066dc <IRQ7_Handler+0x104>)
1000663e:	601a      	str	r2, [r3, #0]
		if( NO_New_Input_counter > 10){
10006640:	4b26      	ldr	r3, [pc, #152]	; (100066dc <IRQ7_Handler+0x104>)
10006642:	681b      	ldr	r3, [r3, #0]
10006644:	2b0a      	cmp	r3, #10
10006646:	d91a      	bls.n	1000667e <IRQ7_Handler+0xa6>
			NO_New_Input_counter = 10;
10006648:	4b24      	ldr	r3, [pc, #144]	; (100066dc <IRQ7_Handler+0x104>)
1000664a:	220a      	movs	r2, #10
1000664c:	601a      	str	r2, [r3, #0]

			  Steering_Angles[0] = 0;
1000664e:	4b28      	ldr	r3, [pc, #160]	; (100066f0 <IRQ7_Handler+0x118>)
10006650:	2200      	movs	r2, #0
10006652:	601a      	str	r2, [r3, #0]
			  Steering_Angles[1] = 0;
10006654:	4b26      	ldr	r3, [pc, #152]	; (100066f0 <IRQ7_Handler+0x118>)
10006656:	2200      	movs	r2, #0
10006658:	605a      	str	r2, [r3, #4]
			  Steering_Angles[2] = 0;
1000665a:	4b25      	ldr	r3, [pc, #148]	; (100066f0 <IRQ7_Handler+0x118>)
1000665c:	2200      	movs	r2, #0
1000665e:	609a      	str	r2, [r3, #8]
			  Steering_Angles[3] = 0;
10006660:	4b23      	ldr	r3, [pc, #140]	; (100066f0 <IRQ7_Handler+0x118>)
10006662:	2200      	movs	r2, #0
10006664:	60da      	str	r2, [r3, #12]

			  Speeds[0] = 0;
10006666:	4b23      	ldr	r3, [pc, #140]	; (100066f4 <IRQ7_Handler+0x11c>)
10006668:	2200      	movs	r2, #0
1000666a:	601a      	str	r2, [r3, #0]
			  Speeds[1] = 0;
1000666c:	4b21      	ldr	r3, [pc, #132]	; (100066f4 <IRQ7_Handler+0x11c>)
1000666e:	2200      	movs	r2, #0
10006670:	605a      	str	r2, [r3, #4]
			  Speeds[2] = 0;
10006672:	4b20      	ldr	r3, [pc, #128]	; (100066f4 <IRQ7_Handler+0x11c>)
10006674:	2200      	movs	r2, #0
10006676:	609a      	str	r2, [r3, #8]
			  Speeds[3] = 0;
10006678:	4b1e      	ldr	r3, [pc, #120]	; (100066f4 <IRQ7_Handler+0x11c>)
1000667a:	2200      	movs	r2, #0
1000667c:	60da      	str	r2, [r3, #12]
		}
	}

	//set Angles PWM
	Steering_set_Angles(Steering_Angles);
1000667e:	4b1c      	ldr	r3, [pc, #112]	; (100066f0 <IRQ7_Handler+0x118>)
10006680:	1c18      	adds	r0, r3, #0
10006682:	f7ff fb3f 	bl	10005d04 <Steering_set_Angles>

	Trajcetory_calc();
10006686:	f7fe ffd5 	bl	10005634 <Trajcetory_calc>

	Collision_voidance();
1000668a:	f7ff fdbf 	bl	1000620c <Collision_voidance>

	//send traget speeds to inverter
	CAN_send_Speeds(Speeds_CA);
1000668e:	4b1a      	ldr	r3, [pc, #104]	; (100066f8 <IRQ7_Handler+0x120>)
10006690:	1c18      	adds	r0, r3, #0
10006692:	f7fd fe49 	bl	10004328 <CAN_send_Speeds>

	//
	if(reset_distance == 1){
10006696:	4b19      	ldr	r3, [pc, #100]	; (100066fc <IRQ7_Handler+0x124>)
10006698:	781b      	ldrb	r3, [r3, #0]
1000669a:	b2db      	uxtb	r3, r3
1000669c:	2b01      	cmp	r3, #1
1000669e:	d110      	bne.n	100066c2 <IRQ7_Handler+0xea>
		reset_distance = 0;
100066a0:	4b16      	ldr	r3, [pc, #88]	; (100066fc <IRQ7_Handler+0x124>)
100066a2:	2200      	movs	r2, #0
100066a4:	701a      	strb	r2, [r3, #0]
		uint8_t all[4] = {1,1,1,1};
100066a6:	1d3a      	adds	r2, r7, #4
100066a8:	4b15      	ldr	r3, [pc, #84]	; (10006700 <IRQ7_Handler+0x128>)
100066aa:	1c11      	adds	r1, r2, #0
100066ac:	1c1a      	adds	r2, r3, #0
100066ae:	2304      	movs	r3, #4
100066b0:	1c08      	adds	r0, r1, #0
100066b2:	1c11      	adds	r1, r2, #0
100066b4:	1c1a      	adds	r2, r3, #0
100066b6:	f006 f8f1 	bl	1000c89c <memcpy>
		CAN_reset_distance(all);
100066ba:	1d3b      	adds	r3, r7, #4
100066bc:	1c18      	adds	r0, r3, #0
100066be:	f7fd fdf9 	bl	100042b4 <CAN_reset_distance>
	}


	DIGITAL_IO_SetOutputLow(&CALC_TIME_INDICATOR);
100066c2:	4b03      	ldr	r3, [pc, #12]	; (100066d0 <IRQ7_Handler+0xf8>)
100066c4:	1c18      	adds	r0, r3, #0
100066c6:	f7ff ff23 	bl	10006510 <DIGITAL_IO_SetOutputLow>
}
100066ca:	46bd      	mov	sp, r7
100066cc:	b002      	add	sp, #8
100066ce:	bd80      	pop	{r7, pc}
100066d0:	1000c998 	.word	0x1000c998
100066d4:	2000082a 	.word	0x2000082a
100066d8:	20000829 	.word	0x20000829
100066dc:	20000a74 	.word	0x20000a74
100066e0:	1000c988 	.word	0x1000c988
100066e4:	20000a70 	.word	0x20000a70
100066e8:	20000a18 	.word	0x20000a18
100066ec:	20000a1c 	.word	0x20000a1c
100066f0:	20000a40 	.word	0x20000a40
100066f4:	20000a20 	.word	0x20000a20
100066f8:	20000a30 	.word	0x20000a30
100066fc:	20000a78 	.word	0x20000a78
10006700:	1000cbb4 	.word	0x1000cbb4

10006704 <within_MAX_MIN>:

/**
 * This is the function definition.
 * It is the actual body of the function which was declared elsewhere.
 */
bool within_MAX_MIN(float num, float max, float min){
10006704:	b590      	push	{r4, r7, lr}
10006706:	b085      	sub	sp, #20
10006708:	af00      	add	r7, sp, #0
1000670a:	60f8      	str	r0, [r7, #12]
1000670c:	60b9      	str	r1, [r7, #8]
1000670e:	607a      	str	r2, [r7, #4]
	if((num-min)*(num-max) <= 0) return 1;
10006710:	68f8      	ldr	r0, [r7, #12]
10006712:	6879      	ldr	r1, [r7, #4]
10006714:	f003 fdfc 	bl	1000a310 <__aeabi_fsub>
10006718:	1c03      	adds	r3, r0, #0
1000671a:	1c1c      	adds	r4, r3, #0
1000671c:	68f8      	ldr	r0, [r7, #12]
1000671e:	68b9      	ldr	r1, [r7, #8]
10006720:	f003 fdf6 	bl	1000a310 <__aeabi_fsub>
10006724:	1c03      	adds	r3, r0, #0
10006726:	1c20      	adds	r0, r4, #0
10006728:	1c19      	adds	r1, r3, #0
1000672a:	f003 fcbf 	bl	1000a0ac <__aeabi_fmul>
1000672e:	1c03      	adds	r3, r0, #0
10006730:	1c18      	adds	r0, r3, #0
10006732:	2100      	movs	r1, #0
10006734:	f003 f878 	bl	10009828 <__aeabi_fcmple>
10006738:	1e03      	subs	r3, r0, #0
1000673a:	d001      	beq.n	10006740 <within_MAX_MIN+0x3c>
1000673c:	2301      	movs	r3, #1
1000673e:	e000      	b.n	10006742 <within_MAX_MIN+0x3e>
	else return 0;
10006740:	2300      	movs	r3, #0
}
10006742:	1c18      	adds	r0, r3, #0
10006744:	46bd      	mov	sp, r7
10006746:	b005      	add	sp, #20
10006748:	bd90      	pop	{r4, r7, pc}
1000674a:	46c0      	nop			; (mov r8, r8)

1000674c <vector_abs_value>:

float pythagoras(float a, float b){
	return sqrt(pow(a,2) + pow(b,2));
}

float vector_abs_value(float a[2]){
1000674c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000674e:	b083      	sub	sp, #12
10006750:	af00      	add	r7, sp, #0
10006752:	6078      	str	r0, [r7, #4]
	return sqrt(pow(a[0],2) + pow(a[1],2));
10006754:	687b      	ldr	r3, [r7, #4]
10006756:	681b      	ldr	r3, [r3, #0]
10006758:	1c18      	adds	r0, r3, #0
1000675a:	f005 fddd 	bl	1000c318 <__aeabi_f2d>
1000675e:	1c0a      	adds	r2, r1, #0
10006760:	1c01      	adds	r1, r0, #0
10006762:	2300      	movs	r3, #0
10006764:	2480      	movs	r4, #128	; 0x80
10006766:	05e4      	lsls	r4, r4, #23
10006768:	1c08      	adds	r0, r1, #0
1000676a:	1c11      	adds	r1, r2, #0
1000676c:	1c1a      	adds	r2, r3, #0
1000676e:	1c23      	adds	r3, r4, #0
10006770:	f000 faee 	bl	10006d50 <pow>
10006774:	1c05      	adds	r5, r0, #0
10006776:	1c0e      	adds	r6, r1, #0
10006778:	687b      	ldr	r3, [r7, #4]
1000677a:	3304      	adds	r3, #4
1000677c:	681b      	ldr	r3, [r3, #0]
1000677e:	1c18      	adds	r0, r3, #0
10006780:	f005 fdca 	bl	1000c318 <__aeabi_f2d>
10006784:	1c0a      	adds	r2, r1, #0
10006786:	1c01      	adds	r1, r0, #0
10006788:	2300      	movs	r3, #0
1000678a:	2480      	movs	r4, #128	; 0x80
1000678c:	05e4      	lsls	r4, r4, #23
1000678e:	1c08      	adds	r0, r1, #0
10006790:	1c11      	adds	r1, r2, #0
10006792:	1c1a      	adds	r2, r3, #0
10006794:	1c23      	adds	r3, r4, #0
10006796:	f000 fadb 	bl	10006d50 <pow>
1000679a:	1c03      	adds	r3, r0, #0
1000679c:	1c0c      	adds	r4, r1, #0
1000679e:	1c28      	adds	r0, r5, #0
100067a0:	1c31      	adds	r1, r6, #0
100067a2:	1c1a      	adds	r2, r3, #0
100067a4:	1c23      	adds	r3, r4, #0
100067a6:	f003 ff99 	bl	1000a6dc <__aeabi_dadd>
100067aa:	1c03      	adds	r3, r0, #0
100067ac:	1c0c      	adds	r4, r1, #0
100067ae:	1c18      	adds	r0, r3, #0
100067b0:	1c21      	adds	r1, r4, #0
100067b2:	f000 fc7b 	bl	100070ac <sqrt>
100067b6:	1c03      	adds	r3, r0, #0
100067b8:	1c0c      	adds	r4, r1, #0
100067ba:	1c18      	adds	r0, r3, #0
100067bc:	1c21      	adds	r1, r4, #0
100067be:	f005 fdff 	bl	1000c3c0 <__aeabi_d2f>
100067c2:	1c03      	adds	r3, r0, #0
}
100067c4:	1c18      	adds	r0, r3, #0
100067c6:	46bd      	mov	sp, r7
100067c8:	b003      	add	sp, #12
100067ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

100067cc <Exp_moving_average>:

float Exp_moving_average(float new_value, float value, float ALPHA){
100067cc:	b590      	push	{r4, r7, lr}
100067ce:	b085      	sub	sp, #20
100067d0:	af00      	add	r7, sp, #0
100067d2:	60f8      	str	r0, [r7, #12]
100067d4:	60b9      	str	r1, [r7, #8]
100067d6:	607a      	str	r2, [r7, #4]
	return ((new_value * ALPHA) + ((1 - ALPHA) * value));
100067d8:	68f8      	ldr	r0, [r7, #12]
100067da:	6879      	ldr	r1, [r7, #4]
100067dc:	f003 fc66 	bl	1000a0ac <__aeabi_fmul>
100067e0:	1c03      	adds	r3, r0, #0
100067e2:	1c1c      	adds	r4, r3, #0
100067e4:	20fe      	movs	r0, #254	; 0xfe
100067e6:	0580      	lsls	r0, r0, #22
100067e8:	6879      	ldr	r1, [r7, #4]
100067ea:	f003 fd91 	bl	1000a310 <__aeabi_fsub>
100067ee:	1c03      	adds	r3, r0, #0
100067f0:	1c18      	adds	r0, r3, #0
100067f2:	68b9      	ldr	r1, [r7, #8]
100067f4:	f003 fc5a 	bl	1000a0ac <__aeabi_fmul>
100067f8:	1c03      	adds	r3, r0, #0
100067fa:	1c20      	adds	r0, r4, #0
100067fc:	1c19      	adds	r1, r3, #0
100067fe:	f003 f8e7 	bl	100099d0 <__aeabi_fadd>
10006802:	1c03      	adds	r3, r0, #0
}
10006804:	1c18      	adds	r0, r3, #0
10006806:	46bd      	mov	sp, r7
10006808:	b005      	add	sp, #20
1000680a:	bd90      	pop	{r4, r7, pc}

1000680c <average>:

float average(float a[],int num_values) {
1000680c:	b580      	push	{r7, lr}
1000680e:	b084      	sub	sp, #16
10006810:	af00      	add	r7, sp, #0
10006812:	6078      	str	r0, [r7, #4]
10006814:	6039      	str	r1, [r7, #0]
    float sum = 0;
10006816:	2300      	movs	r3, #0
10006818:	60fb      	str	r3, [r7, #12]
    int i;
    for(i = 0; i < num_values; i++){
1000681a:	2300      	movs	r3, #0
1000681c:	60bb      	str	r3, [r7, #8]
1000681e:	e00d      	b.n	1000683c <average+0x30>
        sum += a[i];
10006820:	68bb      	ldr	r3, [r7, #8]
10006822:	009b      	lsls	r3, r3, #2
10006824:	687a      	ldr	r2, [r7, #4]
10006826:	18d3      	adds	r3, r2, r3
10006828:	681b      	ldr	r3, [r3, #0]
1000682a:	68f8      	ldr	r0, [r7, #12]
1000682c:	1c19      	adds	r1, r3, #0
1000682e:	f003 f8cf 	bl	100099d0 <__aeabi_fadd>
10006832:	1c03      	adds	r3, r0, #0
10006834:	60fb      	str	r3, [r7, #12]
}

float average(float a[],int num_values) {
    float sum = 0;
    int i;
    for(i = 0; i < num_values; i++){
10006836:	68bb      	ldr	r3, [r7, #8]
10006838:	3301      	adds	r3, #1
1000683a:	60bb      	str	r3, [r7, #8]
1000683c:	68ba      	ldr	r2, [r7, #8]
1000683e:	683b      	ldr	r3, [r7, #0]
10006840:	429a      	cmp	r2, r3
10006842:	dbed      	blt.n	10006820 <average+0x14>
        sum += a[i];
    }
    return sum / num_values;
10006844:	6838      	ldr	r0, [r7, #0]
10006846:	f003 ff01 	bl	1000a64c <__aeabi_i2f>
1000684a:	1c03      	adds	r3, r0, #0
1000684c:	68f8      	ldr	r0, [r7, #12]
1000684e:	1c19      	adds	r1, r3, #0
10006850:	f003 fa3a 	bl	10009cc8 <__aeabi_fdiv>
10006854:	1c03      	adds	r3, r0, #0
}
10006856:	1c18      	adds	r0, r3, #0
10006858:	46bd      	mov	sp, r7
1000685a:	b004      	add	sp, #16
1000685c:	bd80      	pop	{r7, pc}
1000685e:	46c0      	nop			; (mov r8, r8)

10006860 <atan>:
10006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006862:	4656      	mov	r6, sl
10006864:	464d      	mov	r5, r9
10006866:	4644      	mov	r4, r8
10006868:	465f      	mov	r7, fp
1000686a:	4ba5      	ldr	r3, [pc, #660]	; (10006b00 <atan+0x2a0>)
1000686c:	b4f0      	push	{r4, r5, r6, r7}
1000686e:	004e      	lsls	r6, r1, #1
10006870:	4680      	mov	r8, r0
10006872:	4689      	mov	r9, r1
10006874:	468a      	mov	sl, r1
10006876:	0876      	lsrs	r6, r6, #1
10006878:	429e      	cmp	r6, r3
1000687a:	dd0c      	ble.n	10006896 <atan+0x36>
1000687c:	4ba1      	ldr	r3, [pc, #644]	; (10006b04 <atan+0x2a4>)
1000687e:	429e      	cmp	r6, r3
10006880:	dd00      	ble.n	10006884 <atan+0x24>
10006882:	e0a0      	b.n	100069c6 <atan+0x166>
10006884:	d100      	bne.n	10006888 <atan+0x28>
10006886:	e09b      	b.n	100069c0 <atan+0x160>
10006888:	4653      	mov	r3, sl
1000688a:	2b00      	cmp	r3, #0
1000688c:	dc00      	bgt.n	10006890 <atan+0x30>
1000688e:	e0de      	b.n	10006a4e <atan+0x1ee>
10006890:	4b9d      	ldr	r3, [pc, #628]	; (10006b08 <atan+0x2a8>)
10006892:	4a9e      	ldr	r2, [pc, #632]	; (10006b0c <atan+0x2ac>)
10006894:	e09f      	b.n	100069d6 <atan+0x176>
10006896:	4b9e      	ldr	r3, [pc, #632]	; (10006b10 <atan+0x2b0>)
10006898:	429e      	cmp	r6, r3
1000689a:	dd00      	ble.n	1000689e <atan+0x3e>
1000689c:	e0b1      	b.n	10006a02 <atan+0x1a2>
1000689e:	4b9d      	ldr	r3, [pc, #628]	; (10006b14 <atan+0x2b4>)
100068a0:	429e      	cmp	r6, r3
100068a2:	dc00      	bgt.n	100068a6 <atan+0x46>
100068a4:	e09f      	b.n	100069e6 <atan+0x186>
100068a6:	2301      	movs	r3, #1
100068a8:	425b      	negs	r3, r3
100068aa:	469b      	mov	fp, r3
100068ac:	4642      	mov	r2, r8
100068ae:	464b      	mov	r3, r9
100068b0:	4640      	mov	r0, r8
100068b2:	4649      	mov	r1, r9
100068b4:	f004 fe78 	bl	1000b5a8 <__aeabi_dmul>
100068b8:	1c06      	adds	r6, r0, #0
100068ba:	1c0f      	adds	r7, r1, #0
100068bc:	1c32      	adds	r2, r6, #0
100068be:	1c3b      	adds	r3, r7, #0
100068c0:	f004 fe72 	bl	1000b5a8 <__aeabi_dmul>
100068c4:	1c04      	adds	r4, r0, #0
100068c6:	1c0d      	adds	r5, r1, #0
100068c8:	4a93      	ldr	r2, [pc, #588]	; (10006b18 <atan+0x2b8>)
100068ca:	4b94      	ldr	r3, [pc, #592]	; (10006b1c <atan+0x2bc>)
100068cc:	f004 fe6c 	bl	1000b5a8 <__aeabi_dmul>
100068d0:	4a93      	ldr	r2, [pc, #588]	; (10006b20 <atan+0x2c0>)
100068d2:	4b94      	ldr	r3, [pc, #592]	; (10006b24 <atan+0x2c4>)
100068d4:	f003 ff02 	bl	1000a6dc <__aeabi_dadd>
100068d8:	1c22      	adds	r2, r4, #0
100068da:	1c2b      	adds	r3, r5, #0
100068dc:	f004 fe64 	bl	1000b5a8 <__aeabi_dmul>
100068e0:	4a91      	ldr	r2, [pc, #580]	; (10006b28 <atan+0x2c8>)
100068e2:	4b92      	ldr	r3, [pc, #584]	; (10006b2c <atan+0x2cc>)
100068e4:	f003 fefa 	bl	1000a6dc <__aeabi_dadd>
100068e8:	1c22      	adds	r2, r4, #0
100068ea:	1c2b      	adds	r3, r5, #0
100068ec:	f004 fe5c 	bl	1000b5a8 <__aeabi_dmul>
100068f0:	4a8f      	ldr	r2, [pc, #572]	; (10006b30 <atan+0x2d0>)
100068f2:	4b90      	ldr	r3, [pc, #576]	; (10006b34 <atan+0x2d4>)
100068f4:	f003 fef2 	bl	1000a6dc <__aeabi_dadd>
100068f8:	1c22      	adds	r2, r4, #0
100068fa:	1c2b      	adds	r3, r5, #0
100068fc:	f004 fe54 	bl	1000b5a8 <__aeabi_dmul>
10006900:	4a8d      	ldr	r2, [pc, #564]	; (10006b38 <atan+0x2d8>)
10006902:	4b8e      	ldr	r3, [pc, #568]	; (10006b3c <atan+0x2dc>)
10006904:	f003 feea 	bl	1000a6dc <__aeabi_dadd>
10006908:	1c22      	adds	r2, r4, #0
1000690a:	1c2b      	adds	r3, r5, #0
1000690c:	f004 fe4c 	bl	1000b5a8 <__aeabi_dmul>
10006910:	4a8b      	ldr	r2, [pc, #556]	; (10006b40 <atan+0x2e0>)
10006912:	4b8c      	ldr	r3, [pc, #560]	; (10006b44 <atan+0x2e4>)
10006914:	f003 fee2 	bl	1000a6dc <__aeabi_dadd>
10006918:	1c32      	adds	r2, r6, #0
1000691a:	1c3b      	adds	r3, r7, #0
1000691c:	f004 fe44 	bl	1000b5a8 <__aeabi_dmul>
10006920:	4a89      	ldr	r2, [pc, #548]	; (10006b48 <atan+0x2e8>)
10006922:	4b8a      	ldr	r3, [pc, #552]	; (10006b4c <atan+0x2ec>)
10006924:	1c06      	adds	r6, r0, #0
10006926:	1c0f      	adds	r7, r1, #0
10006928:	1c20      	adds	r0, r4, #0
1000692a:	1c29      	adds	r1, r5, #0
1000692c:	f004 fe3c 	bl	1000b5a8 <__aeabi_dmul>
10006930:	4a87      	ldr	r2, [pc, #540]	; (10006b50 <atan+0x2f0>)
10006932:	4b88      	ldr	r3, [pc, #544]	; (10006b54 <atan+0x2f4>)
10006934:	f005 f8d2 	bl	1000badc <__aeabi_dsub>
10006938:	1c22      	adds	r2, r4, #0
1000693a:	1c2b      	adds	r3, r5, #0
1000693c:	f004 fe34 	bl	1000b5a8 <__aeabi_dmul>
10006940:	4a85      	ldr	r2, [pc, #532]	; (10006b58 <atan+0x2f8>)
10006942:	4b86      	ldr	r3, [pc, #536]	; (10006b5c <atan+0x2fc>)
10006944:	f005 f8ca 	bl	1000badc <__aeabi_dsub>
10006948:	1c22      	adds	r2, r4, #0
1000694a:	1c2b      	adds	r3, r5, #0
1000694c:	f004 fe2c 	bl	1000b5a8 <__aeabi_dmul>
10006950:	4a83      	ldr	r2, [pc, #524]	; (10006b60 <atan+0x300>)
10006952:	4b84      	ldr	r3, [pc, #528]	; (10006b64 <atan+0x304>)
10006954:	f005 f8c2 	bl	1000badc <__aeabi_dsub>
10006958:	1c22      	adds	r2, r4, #0
1000695a:	1c2b      	adds	r3, r5, #0
1000695c:	f004 fe24 	bl	1000b5a8 <__aeabi_dmul>
10006960:	4a81      	ldr	r2, [pc, #516]	; (10006b68 <atan+0x308>)
10006962:	4b82      	ldr	r3, [pc, #520]	; (10006b6c <atan+0x30c>)
10006964:	f005 f8ba 	bl	1000badc <__aeabi_dsub>
10006968:	1c22      	adds	r2, r4, #0
1000696a:	1c2b      	adds	r3, r5, #0
1000696c:	f004 fe1c 	bl	1000b5a8 <__aeabi_dmul>
10006970:	1c0b      	adds	r3, r1, #0
10006972:	4659      	mov	r1, fp
10006974:	1c02      	adds	r2, r0, #0
10006976:	3101      	adds	r1, #1
10006978:	d100      	bne.n	1000697c <atan+0x11c>
1000697a:	e070      	b.n	10006a5e <atan+0x1fe>
1000697c:	4659      	mov	r1, fp
1000697e:	1c30      	adds	r0, r6, #0
10006980:	00cc      	lsls	r4, r1, #3
10006982:	1c39      	adds	r1, r7, #0
10006984:	f003 feaa 	bl	1000a6dc <__aeabi_dadd>
10006988:	4642      	mov	r2, r8
1000698a:	464b      	mov	r3, r9
1000698c:	f004 fe0c 	bl	1000b5a8 <__aeabi_dmul>
10006990:	4d77      	ldr	r5, [pc, #476]	; (10006b70 <atan+0x310>)
10006992:	4b78      	ldr	r3, [pc, #480]	; (10006b74 <atan+0x314>)
10006994:	192d      	adds	r5, r5, r4
10006996:	191c      	adds	r4, r3, r4
10006998:	6822      	ldr	r2, [r4, #0]
1000699a:	6863      	ldr	r3, [r4, #4]
1000699c:	f005 f89e 	bl	1000badc <__aeabi_dsub>
100069a0:	4642      	mov	r2, r8
100069a2:	464b      	mov	r3, r9
100069a4:	f005 f89a 	bl	1000badc <__aeabi_dsub>
100069a8:	1c02      	adds	r2, r0, #0
100069aa:	1c0b      	adds	r3, r1, #0
100069ac:	6828      	ldr	r0, [r5, #0]
100069ae:	6869      	ldr	r1, [r5, #4]
100069b0:	f005 f894 	bl	1000badc <__aeabi_dsub>
100069b4:	4653      	mov	r3, sl
100069b6:	1c0a      	adds	r2, r1, #0
100069b8:	2b00      	cmp	r3, #0
100069ba:	db4b      	blt.n	10006a54 <atan+0x1f4>
100069bc:	1c03      	adds	r3, r0, #0
100069be:	e00a      	b.n	100069d6 <atan+0x176>
100069c0:	2800      	cmp	r0, #0
100069c2:	d100      	bne.n	100069c6 <atan+0x166>
100069c4:	e760      	b.n	10006888 <atan+0x28>
100069c6:	4642      	mov	r2, r8
100069c8:	464b      	mov	r3, r9
100069ca:	4640      	mov	r0, r8
100069cc:	4649      	mov	r1, r9
100069ce:	f003 fe85 	bl	1000a6dc <__aeabi_dadd>
100069d2:	1c03      	adds	r3, r0, #0
100069d4:	1c0a      	adds	r2, r1, #0
100069d6:	1c18      	adds	r0, r3, #0
100069d8:	1c11      	adds	r1, r2, #0
100069da:	bc3c      	pop	{r2, r3, r4, r5}
100069dc:	4690      	mov	r8, r2
100069de:	4699      	mov	r9, r3
100069e0:	46a2      	mov	sl, r4
100069e2:	46ab      	mov	fp, r5
100069e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100069e6:	4a64      	ldr	r2, [pc, #400]	; (10006b78 <atan+0x318>)
100069e8:	4b64      	ldr	r3, [pc, #400]	; (10006b7c <atan+0x31c>)
100069ea:	f003 fe77 	bl	1000a6dc <__aeabi_dadd>
100069ee:	2200      	movs	r2, #0
100069f0:	4b63      	ldr	r3, [pc, #396]	; (10006b80 <atan+0x320>)
100069f2:	f002 fee9 	bl	100097c8 <__aeabi_dcmpgt>
100069f6:	2800      	cmp	r0, #0
100069f8:	d100      	bne.n	100069fc <atan+0x19c>
100069fa:	e754      	b.n	100068a6 <atan+0x46>
100069fc:	4643      	mov	r3, r8
100069fe:	464a      	mov	r2, r9
10006a00:	e7e9      	b.n	100069d6 <atan+0x176>
10006a02:	f000 f921 	bl	10006c48 <fabs>
10006a06:	4b5f      	ldr	r3, [pc, #380]	; (10006b84 <atan+0x324>)
10006a08:	1c04      	adds	r4, r0, #0
10006a0a:	1c0d      	adds	r5, r1, #0
10006a0c:	429e      	cmp	r6, r3
10006a0e:	dc37      	bgt.n	10006a80 <atan+0x220>
10006a10:	4b5d      	ldr	r3, [pc, #372]	; (10006b88 <atan+0x328>)
10006a12:	429e      	cmp	r6, r3
10006a14:	dc5d      	bgt.n	10006ad2 <atan+0x272>
10006a16:	1c22      	adds	r2, r4, #0
10006a18:	1c2b      	adds	r3, r5, #0
10006a1a:	f003 fe5f 	bl	1000a6dc <__aeabi_dadd>
10006a1e:	2200      	movs	r2, #0
10006a20:	4b57      	ldr	r3, [pc, #348]	; (10006b80 <atan+0x320>)
10006a22:	f005 f85b 	bl	1000badc <__aeabi_dsub>
10006a26:	2380      	movs	r3, #128	; 0x80
10006a28:	1c06      	adds	r6, r0, #0
10006a2a:	1c0f      	adds	r7, r1, #0
10006a2c:	2200      	movs	r2, #0
10006a2e:	05db      	lsls	r3, r3, #23
10006a30:	1c20      	adds	r0, r4, #0
10006a32:	1c29      	adds	r1, r5, #0
10006a34:	f003 fe52 	bl	1000a6dc <__aeabi_dadd>
10006a38:	1c0b      	adds	r3, r1, #0
10006a3a:	1c02      	adds	r2, r0, #0
10006a3c:	1c39      	adds	r1, r7, #0
10006a3e:	1c30      	adds	r0, r6, #0
10006a40:	f004 f974 	bl	1000ad2c <__aeabi_ddiv>
10006a44:	2300      	movs	r3, #0
10006a46:	4680      	mov	r8, r0
10006a48:	4689      	mov	r9, r1
10006a4a:	469b      	mov	fp, r3
10006a4c:	e72e      	b.n	100068ac <atan+0x4c>
10006a4e:	4b2e      	ldr	r3, [pc, #184]	; (10006b08 <atan+0x2a8>)
10006a50:	4a4e      	ldr	r2, [pc, #312]	; (10006b8c <atan+0x32c>)
10006a52:	e7c0      	b.n	100069d6 <atan+0x176>
10006a54:	2280      	movs	r2, #128	; 0x80
10006a56:	0612      	lsls	r2, r2, #24
10006a58:	1c03      	adds	r3, r0, #0
10006a5a:	188a      	adds	r2, r1, r2
10006a5c:	e7bb      	b.n	100069d6 <atan+0x176>
10006a5e:	1c30      	adds	r0, r6, #0
10006a60:	1c39      	adds	r1, r7, #0
10006a62:	f003 fe3b 	bl	1000a6dc <__aeabi_dadd>
10006a66:	4642      	mov	r2, r8
10006a68:	464b      	mov	r3, r9
10006a6a:	f004 fd9d 	bl	1000b5a8 <__aeabi_dmul>
10006a6e:	1c02      	adds	r2, r0, #0
10006a70:	1c0b      	adds	r3, r1, #0
10006a72:	4640      	mov	r0, r8
10006a74:	4649      	mov	r1, r9
10006a76:	f005 f831 	bl	1000badc <__aeabi_dsub>
10006a7a:	1c03      	adds	r3, r0, #0
10006a7c:	1c0a      	adds	r2, r1, #0
10006a7e:	e7aa      	b.n	100069d6 <atan+0x176>
10006a80:	4b43      	ldr	r3, [pc, #268]	; (10006b90 <atan+0x330>)
10006a82:	429e      	cmp	r6, r3
10006a84:	dc1a      	bgt.n	10006abc <atan+0x25c>
10006a86:	2200      	movs	r2, #0
10006a88:	4b42      	ldr	r3, [pc, #264]	; (10006b94 <atan+0x334>)
10006a8a:	f005 f827 	bl	1000badc <__aeabi_dsub>
10006a8e:	2200      	movs	r2, #0
10006a90:	1c06      	adds	r6, r0, #0
10006a92:	1c0f      	adds	r7, r1, #0
10006a94:	4b3f      	ldr	r3, [pc, #252]	; (10006b94 <atan+0x334>)
10006a96:	1c20      	adds	r0, r4, #0
10006a98:	1c29      	adds	r1, r5, #0
10006a9a:	f004 fd85 	bl	1000b5a8 <__aeabi_dmul>
10006a9e:	2200      	movs	r2, #0
10006aa0:	4b37      	ldr	r3, [pc, #220]	; (10006b80 <atan+0x320>)
10006aa2:	f003 fe1b 	bl	1000a6dc <__aeabi_dadd>
10006aa6:	1c0b      	adds	r3, r1, #0
10006aa8:	1c02      	adds	r2, r0, #0
10006aaa:	1c39      	adds	r1, r7, #0
10006aac:	1c30      	adds	r0, r6, #0
10006aae:	f004 f93d 	bl	1000ad2c <__aeabi_ddiv>
10006ab2:	2302      	movs	r3, #2
10006ab4:	4680      	mov	r8, r0
10006ab6:	4689      	mov	r9, r1
10006ab8:	469b      	mov	fp, r3
10006aba:	e6f7      	b.n	100068ac <atan+0x4c>
10006abc:	1c2b      	adds	r3, r5, #0
10006abe:	2000      	movs	r0, #0
10006ac0:	4935      	ldr	r1, [pc, #212]	; (10006b98 <atan+0x338>)
10006ac2:	1c22      	adds	r2, r4, #0
10006ac4:	f004 f932 	bl	1000ad2c <__aeabi_ddiv>
10006ac8:	2303      	movs	r3, #3
10006aca:	4680      	mov	r8, r0
10006acc:	4689      	mov	r9, r1
10006ace:	469b      	mov	fp, r3
10006ad0:	e6ec      	b.n	100068ac <atan+0x4c>
10006ad2:	2200      	movs	r2, #0
10006ad4:	4b2a      	ldr	r3, [pc, #168]	; (10006b80 <atan+0x320>)
10006ad6:	f005 f801 	bl	1000badc <__aeabi_dsub>
10006ada:	2200      	movs	r2, #0
10006adc:	1c06      	adds	r6, r0, #0
10006ade:	1c0f      	adds	r7, r1, #0
10006ae0:	4b27      	ldr	r3, [pc, #156]	; (10006b80 <atan+0x320>)
10006ae2:	1c20      	adds	r0, r4, #0
10006ae4:	1c29      	adds	r1, r5, #0
10006ae6:	f003 fdf9 	bl	1000a6dc <__aeabi_dadd>
10006aea:	1c0b      	adds	r3, r1, #0
10006aec:	1c02      	adds	r2, r0, #0
10006aee:	1c39      	adds	r1, r7, #0
10006af0:	1c30      	adds	r0, r6, #0
10006af2:	f004 f91b 	bl	1000ad2c <__aeabi_ddiv>
10006af6:	2301      	movs	r3, #1
10006af8:	4680      	mov	r8, r0
10006afa:	4689      	mov	r9, r1
10006afc:	469b      	mov	fp, r3
10006afe:	e6d5      	b.n	100068ac <atan+0x4c>
10006b00:	440fffff 	.word	0x440fffff
10006b04:	7ff00000 	.word	0x7ff00000
10006b08:	54442d18 	.word	0x54442d18
10006b0c:	3ff921fb 	.word	0x3ff921fb
10006b10:	3fdbffff 	.word	0x3fdbffff
10006b14:	3e1fffff 	.word	0x3e1fffff
10006b18:	e322da11 	.word	0xe322da11
10006b1c:	3f90ad3a 	.word	0x3f90ad3a
10006b20:	24760deb 	.word	0x24760deb
10006b24:	3fa97b4b 	.word	0x3fa97b4b
10006b28:	a0d03d51 	.word	0xa0d03d51
10006b2c:	3fb10d66 	.word	0x3fb10d66
10006b30:	c54c206e 	.word	0xc54c206e
10006b34:	3fb745cd 	.word	0x3fb745cd
10006b38:	920083ff 	.word	0x920083ff
10006b3c:	3fc24924 	.word	0x3fc24924
10006b40:	5555550d 	.word	0x5555550d
10006b44:	3fd55555 	.word	0x3fd55555
10006b48:	2c6a6c2f 	.word	0x2c6a6c2f
10006b4c:	bfa2b444 	.word	0xbfa2b444
10006b50:	52defd9a 	.word	0x52defd9a
10006b54:	3fadde2d 	.word	0x3fadde2d
10006b58:	af749a6d 	.word	0xaf749a6d
10006b5c:	3fb3b0f2 	.word	0x3fb3b0f2
10006b60:	fe231671 	.word	0xfe231671
10006b64:	3fbc71c6 	.word	0x3fbc71c6
10006b68:	9998ebc4 	.word	0x9998ebc4
10006b6c:	3fc99999 	.word	0x3fc99999
10006b70:	1000cbd8 	.word	0x1000cbd8
10006b74:	1000cbb8 	.word	0x1000cbb8
10006b78:	8800759c 	.word	0x8800759c
10006b7c:	7e37e43c 	.word	0x7e37e43c
10006b80:	3ff00000 	.word	0x3ff00000
10006b84:	3ff2ffff 	.word	0x3ff2ffff
10006b88:	3fe5ffff 	.word	0x3fe5ffff
10006b8c:	bff921fb 	.word	0xbff921fb
10006b90:	40037fff 	.word	0x40037fff
10006b94:	3ff80000 	.word	0x3ff80000
10006b98:	bff00000 	.word	0xbff00000

10006b9c <copysign>:
10006b9c:	b530      	push	{r4, r5, lr}
10006b9e:	004a      	lsls	r2, r1, #1
10006ba0:	0fdb      	lsrs	r3, r3, #31
10006ba2:	0852      	lsrs	r2, r2, #1
10006ba4:	07db      	lsls	r3, r3, #31
10006ba6:	4313      	orrs	r3, r2
10006ba8:	1c19      	adds	r1, r3, #0
10006baa:	bd30      	pop	{r4, r5, pc}

10006bac <cos>:
10006bac:	b530      	push	{r4, r5, lr}
10006bae:	4a24      	ldr	r2, [pc, #144]	; (10006c40 <cos+0x94>)
10006bb0:	004b      	lsls	r3, r1, #1
10006bb2:	b087      	sub	sp, #28
10006bb4:	1c05      	adds	r5, r0, #0
10006bb6:	1c0c      	adds	r4, r1, #0
10006bb8:	085b      	lsrs	r3, r3, #1
10006bba:	4293      	cmp	r3, r2
10006bbc:	dd1c      	ble.n	10006bf8 <cos+0x4c>
10006bbe:	4a21      	ldr	r2, [pc, #132]	; (10006c44 <cos+0x98>)
10006bc0:	4293      	cmp	r3, r2
10006bc2:	dd05      	ble.n	10006bd0 <cos+0x24>
10006bc4:	1c2a      	adds	r2, r5, #0
10006bc6:	1c23      	adds	r3, r4, #0
10006bc8:	f004 ff88 	bl	1000badc <__aeabi_dsub>
10006bcc:	b007      	add	sp, #28
10006bce:	bd30      	pop	{r4, r5, pc}
10006bd0:	aa02      	add	r2, sp, #8
10006bd2:	f001 f8e1 	bl	10007d98 <__ieee754_rem_pio2>
10006bd6:	2303      	movs	r3, #3
10006bd8:	4018      	ands	r0, r3
10006bda:	2801      	cmp	r0, #1
10006bdc:	d01c      	beq.n	10006c18 <cos+0x6c>
10006bde:	2802      	cmp	r0, #2
10006be0:	d00f      	beq.n	10006c02 <cos+0x56>
10006be2:	2800      	cmp	r0, #0
10006be4:	d024      	beq.n	10006c30 <cos+0x84>
10006be6:	9802      	ldr	r0, [sp, #8]
10006be8:	9903      	ldr	r1, [sp, #12]
10006bea:	9a04      	ldr	r2, [sp, #16]
10006bec:	9b05      	ldr	r3, [sp, #20]
10006bee:	2401      	movs	r4, #1
10006bf0:	9400      	str	r4, [sp, #0]
10006bf2:	f002 f941 	bl	10008e78 <__kernel_sin>
10006bf6:	e7e9      	b.n	10006bcc <cos+0x20>
10006bf8:	2200      	movs	r2, #0
10006bfa:	2300      	movs	r3, #0
10006bfc:	f001 fbda 	bl	100083b4 <__kernel_cos>
10006c00:	e7e4      	b.n	10006bcc <cos+0x20>
10006c02:	9a04      	ldr	r2, [sp, #16]
10006c04:	9b05      	ldr	r3, [sp, #20]
10006c06:	9802      	ldr	r0, [sp, #8]
10006c08:	9903      	ldr	r1, [sp, #12]
10006c0a:	f001 fbd3 	bl	100083b4 <__kernel_cos>
10006c0e:	2380      	movs	r3, #128	; 0x80
10006c10:	061b      	lsls	r3, r3, #24
10006c12:	469c      	mov	ip, r3
10006c14:	4461      	add	r1, ip
10006c16:	e7d9      	b.n	10006bcc <cos+0x20>
10006c18:	9a04      	ldr	r2, [sp, #16]
10006c1a:	9b05      	ldr	r3, [sp, #20]
10006c1c:	9000      	str	r0, [sp, #0]
10006c1e:	9802      	ldr	r0, [sp, #8]
10006c20:	9903      	ldr	r1, [sp, #12]
10006c22:	f002 f929 	bl	10008e78 <__kernel_sin>
10006c26:	2380      	movs	r3, #128	; 0x80
10006c28:	061b      	lsls	r3, r3, #24
10006c2a:	469c      	mov	ip, r3
10006c2c:	4461      	add	r1, ip
10006c2e:	e7cd      	b.n	10006bcc <cos+0x20>
10006c30:	9802      	ldr	r0, [sp, #8]
10006c32:	9903      	ldr	r1, [sp, #12]
10006c34:	9a04      	ldr	r2, [sp, #16]
10006c36:	9b05      	ldr	r3, [sp, #20]
10006c38:	f001 fbbc 	bl	100083b4 <__kernel_cos>
10006c3c:	e7c6      	b.n	10006bcc <cos+0x20>
10006c3e:	46c0      	nop			; (mov r8, r8)
10006c40:	3fe921fb 	.word	0x3fe921fb
10006c44:	7fefffff 	.word	0x7fefffff

10006c48 <fabs>:
10006c48:	0049      	lsls	r1, r1, #1
10006c4a:	084b      	lsrs	r3, r1, #1
10006c4c:	1c19      	adds	r1, r3, #0
10006c4e:	4770      	bx	lr

10006c50 <sin>:
10006c50:	b530      	push	{r4, r5, lr}
10006c52:	4a25      	ldr	r2, [pc, #148]	; (10006ce8 <sin+0x98>)
10006c54:	004b      	lsls	r3, r1, #1
10006c56:	b087      	sub	sp, #28
10006c58:	1c05      	adds	r5, r0, #0
10006c5a:	1c0c      	adds	r4, r1, #0
10006c5c:	085b      	lsrs	r3, r3, #1
10006c5e:	4293      	cmp	r3, r2
10006c60:	dd1e      	ble.n	10006ca0 <sin+0x50>
10006c62:	4a22      	ldr	r2, [pc, #136]	; (10006cec <sin+0x9c>)
10006c64:	4293      	cmp	r3, r2
10006c66:	dd05      	ble.n	10006c74 <sin+0x24>
10006c68:	1c2a      	adds	r2, r5, #0
10006c6a:	1c23      	adds	r3, r4, #0
10006c6c:	f004 ff36 	bl	1000badc <__aeabi_dsub>
10006c70:	b007      	add	sp, #28
10006c72:	bd30      	pop	{r4, r5, pc}
10006c74:	aa02      	add	r2, sp, #8
10006c76:	f001 f88f 	bl	10007d98 <__ieee754_rem_pio2>
10006c7a:	2303      	movs	r3, #3
10006c7c:	4018      	ands	r0, r3
10006c7e:	2801      	cmp	r0, #1
10006c80:	d022      	beq.n	10006cc8 <sin+0x78>
10006c82:	2802      	cmp	r0, #2
10006c84:	d013      	beq.n	10006cae <sin+0x5e>
10006c86:	2800      	cmp	r0, #0
10006c88:	d025      	beq.n	10006cd6 <sin+0x86>
10006c8a:	9a04      	ldr	r2, [sp, #16]
10006c8c:	9b05      	ldr	r3, [sp, #20]
10006c8e:	9802      	ldr	r0, [sp, #8]
10006c90:	9903      	ldr	r1, [sp, #12]
10006c92:	f001 fb8f 	bl	100083b4 <__kernel_cos>
10006c96:	2380      	movs	r3, #128	; 0x80
10006c98:	061b      	lsls	r3, r3, #24
10006c9a:	469c      	mov	ip, r3
10006c9c:	4461      	add	r1, ip
10006c9e:	e7e7      	b.n	10006c70 <sin+0x20>
10006ca0:	2300      	movs	r3, #0
10006ca2:	2200      	movs	r2, #0
10006ca4:	9300      	str	r3, [sp, #0]
10006ca6:	2300      	movs	r3, #0
10006ca8:	f002 f8e6 	bl	10008e78 <__kernel_sin>
10006cac:	e7e0      	b.n	10006c70 <sin+0x20>
10006cae:	2401      	movs	r4, #1
10006cb0:	9a04      	ldr	r2, [sp, #16]
10006cb2:	9b05      	ldr	r3, [sp, #20]
10006cb4:	9802      	ldr	r0, [sp, #8]
10006cb6:	9903      	ldr	r1, [sp, #12]
10006cb8:	9400      	str	r4, [sp, #0]
10006cba:	f002 f8dd 	bl	10008e78 <__kernel_sin>
10006cbe:	2380      	movs	r3, #128	; 0x80
10006cc0:	061b      	lsls	r3, r3, #24
10006cc2:	469c      	mov	ip, r3
10006cc4:	4461      	add	r1, ip
10006cc6:	e7d3      	b.n	10006c70 <sin+0x20>
10006cc8:	9a04      	ldr	r2, [sp, #16]
10006cca:	9b05      	ldr	r3, [sp, #20]
10006ccc:	9802      	ldr	r0, [sp, #8]
10006cce:	9903      	ldr	r1, [sp, #12]
10006cd0:	f001 fb70 	bl	100083b4 <__kernel_cos>
10006cd4:	e7cc      	b.n	10006c70 <sin+0x20>
10006cd6:	2401      	movs	r4, #1
10006cd8:	9802      	ldr	r0, [sp, #8]
10006cda:	9903      	ldr	r1, [sp, #12]
10006cdc:	9a04      	ldr	r2, [sp, #16]
10006cde:	9b05      	ldr	r3, [sp, #20]
10006ce0:	9400      	str	r4, [sp, #0]
10006ce2:	f002 f8c9 	bl	10008e78 <__kernel_sin>
10006ce6:	e7c3      	b.n	10006c70 <sin+0x20>
10006ce8:	3fe921fb 	.word	0x3fe921fb
10006cec:	7fefffff 	.word	0x7fefffff

10006cf0 <tan>:
10006cf0:	b530      	push	{r4, r5, lr}
10006cf2:	4a13      	ldr	r2, [pc, #76]	; (10006d40 <tan+0x50>)
10006cf4:	004b      	lsls	r3, r1, #1
10006cf6:	b087      	sub	sp, #28
10006cf8:	1c05      	adds	r5, r0, #0
10006cfa:	1c0c      	adds	r4, r1, #0
10006cfc:	085b      	lsrs	r3, r3, #1
10006cfe:	4293      	cmp	r3, r2
10006d00:	dd17      	ble.n	10006d32 <tan+0x42>
10006d02:	4a10      	ldr	r2, [pc, #64]	; (10006d44 <tan+0x54>)
10006d04:	4293      	cmp	r3, r2
10006d06:	dd05      	ble.n	10006d14 <tan+0x24>
10006d08:	1c2a      	adds	r2, r5, #0
10006d0a:	1c23      	adds	r3, r4, #0
10006d0c:	f004 fee6 	bl	1000badc <__aeabi_dsub>
10006d10:	b007      	add	sp, #28
10006d12:	bd30      	pop	{r4, r5, pc}
10006d14:	aa02      	add	r2, sp, #8
10006d16:	f001 f83f 	bl	10007d98 <__ieee754_rem_pio2>
10006d1a:	9a04      	ldr	r2, [sp, #16]
10006d1c:	9b05      	ldr	r3, [sp, #20]
10006d1e:	2101      	movs	r1, #1
10006d20:	4008      	ands	r0, r1
10006d22:	0040      	lsls	r0, r0, #1
10006d24:	1a08      	subs	r0, r1, r0
10006d26:	9000      	str	r0, [sp, #0]
10006d28:	9802      	ldr	r0, [sp, #8]
10006d2a:	9903      	ldr	r1, [sp, #12]
10006d2c:	f002 f954 	bl	10008fd8 <__kernel_tan>
10006d30:	e7ee      	b.n	10006d10 <tan+0x20>
10006d32:	2301      	movs	r3, #1
10006d34:	2200      	movs	r2, #0
10006d36:	9300      	str	r3, [sp, #0]
10006d38:	2300      	movs	r3, #0
10006d3a:	f002 f94d 	bl	10008fd8 <__kernel_tan>
10006d3e:	e7e7      	b.n	10006d10 <tan+0x20>
10006d40:	3fe921fb 	.word	0x3fe921fb
10006d44:	7fefffff 	.word	0x7fefffff

10006d48 <atan2>:
10006d48:	b508      	push	{r3, lr}
10006d4a:	f000 fa0b 	bl	10007164 <__ieee754_atan2>
10006d4e:	bd08      	pop	{r3, pc}

10006d50 <pow>:
10006d50:	b5f0      	push	{r4, r5, r6, r7, lr}
10006d52:	4646      	mov	r6, r8
10006d54:	4657      	mov	r7, sl
10006d56:	b4c0      	push	{r6, r7}
10006d58:	b08f      	sub	sp, #60	; 0x3c
10006d5a:	1c1f      	adds	r7, r3, #0
10006d5c:	9002      	str	r0, [sp, #8]
10006d5e:	9103      	str	r1, [sp, #12]
10006d60:	1c16      	adds	r6, r2, #0
10006d62:	f000 fad3 	bl	1000730c <__ieee754_pow>
10006d66:	1c04      	adds	r4, r0, #0
10006d68:	1c0d      	adds	r5, r1, #0
10006d6a:	4bc8      	ldr	r3, [pc, #800]	; (1000708c <pow+0x33c>)
10006d6c:	9400      	str	r4, [sp, #0]
10006d6e:	9501      	str	r5, [sp, #4]
10006d70:	4698      	mov	r8, r3
10006d72:	781b      	ldrb	r3, [r3, #0]
10006d74:	b25b      	sxtb	r3, r3
10006d76:	3301      	adds	r3, #1
10006d78:	d005      	beq.n	10006d86 <pow+0x36>
10006d7a:	1c30      	adds	r0, r6, #0
10006d7c:	1c39      	adds	r1, r7, #0
10006d7e:	f002 fba5 	bl	100094cc <__fpclassifyd>
10006d82:	2800      	cmp	r0, #0
10006d84:	d106      	bne.n	10006d94 <pow+0x44>
10006d86:	9800      	ldr	r0, [sp, #0]
10006d88:	9901      	ldr	r1, [sp, #4]
10006d8a:	b00f      	add	sp, #60	; 0x3c
10006d8c:	bc0c      	pop	{r2, r3}
10006d8e:	4690      	mov	r8, r2
10006d90:	469a      	mov	sl, r3
10006d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006d94:	9802      	ldr	r0, [sp, #8]
10006d96:	9903      	ldr	r1, [sp, #12]
10006d98:	f002 fb98 	bl	100094cc <__fpclassifyd>
10006d9c:	4682      	mov	sl, r0
10006d9e:	2800      	cmp	r0, #0
10006da0:	d131      	bne.n	10006e06 <pow+0xb6>
10006da2:	1c30      	adds	r0, r6, #0
10006da4:	1c39      	adds	r1, r7, #0
10006da6:	2200      	movs	r2, #0
10006da8:	2300      	movs	r3, #0
10006daa:	f002 fcf3 	bl	10009794 <__aeabi_dcmpeq>
10006dae:	2800      	cmp	r0, #0
10006db0:	d0e9      	beq.n	10006d86 <pow+0x36>
10006db2:	2301      	movs	r3, #1
10006db4:	9304      	str	r3, [sp, #16]
10006db6:	4bb6      	ldr	r3, [pc, #728]	; (10007090 <pow+0x340>)
10006db8:	ad04      	add	r5, sp, #16
10006dba:	606b      	str	r3, [r5, #4]
10006dbc:	4653      	mov	r3, sl
10006dbe:	2200      	movs	r2, #0
10006dc0:	622b      	str	r3, [r5, #32]
10006dc2:	9b02      	ldr	r3, [sp, #8]
10006dc4:	9c03      	ldr	r4, [sp, #12]
10006dc6:	60ab      	str	r3, [r5, #8]
10006dc8:	60ec      	str	r4, [r5, #12]
10006dca:	4bb2      	ldr	r3, [pc, #712]	; (10007094 <pow+0x344>)
10006dcc:	612e      	str	r6, [r5, #16]
10006dce:	616f      	str	r7, [r5, #20]
10006dd0:	61aa      	str	r2, [r5, #24]
10006dd2:	61eb      	str	r3, [r5, #28]
10006dd4:	4643      	mov	r3, r8
10006dd6:	781b      	ldrb	r3, [r3, #0]
10006dd8:	b25b      	sxtb	r3, r3
10006dda:	1c5a      	adds	r2, r3, #1
10006ddc:	d00e      	beq.n	10006dfc <pow+0xac>
10006dde:	2b02      	cmp	r3, #2
10006de0:	d00c      	beq.n	10006dfc <pow+0xac>
10006de2:	1c28      	adds	r0, r5, #0
10006de4:	f002 fba0 	bl	10009528 <matherr>
10006de8:	2800      	cmp	r0, #0
10006dea:	d100      	bne.n	10006dee <pow+0x9e>
10006dec:	e080      	b.n	10006ef0 <pow+0x1a0>
10006dee:	6a2b      	ldr	r3, [r5, #32]
10006df0:	2b00      	cmp	r3, #0
10006df2:	d003      	beq.n	10006dfc <pow+0xac>
10006df4:	f005 fd26 	bl	1000c844 <__errno>
10006df8:	6a2b      	ldr	r3, [r5, #32]
10006dfa:	6003      	str	r3, [r0, #0]
10006dfc:	69ab      	ldr	r3, [r5, #24]
10006dfe:	69ec      	ldr	r4, [r5, #28]
10006e00:	9300      	str	r3, [sp, #0]
10006e02:	9401      	str	r4, [sp, #4]
10006e04:	e7bf      	b.n	10006d86 <pow+0x36>
10006e06:	9802      	ldr	r0, [sp, #8]
10006e08:	9903      	ldr	r1, [sp, #12]
10006e0a:	2200      	movs	r2, #0
10006e0c:	2300      	movs	r3, #0
10006e0e:	f002 fcc1 	bl	10009794 <__aeabi_dcmpeq>
10006e12:	2800      	cmp	r0, #0
10006e14:	d022      	beq.n	10006e5c <pow+0x10c>
10006e16:	1c30      	adds	r0, r6, #0
10006e18:	1c39      	adds	r1, r7, #0
10006e1a:	2200      	movs	r2, #0
10006e1c:	2300      	movs	r3, #0
10006e1e:	f002 fcb9 	bl	10009794 <__aeabi_dcmpeq>
10006e22:	1e04      	subs	r4, r0, #0
10006e24:	d02c      	beq.n	10006e80 <pow+0x130>
10006e26:	2301      	movs	r3, #1
10006e28:	9304      	str	r3, [sp, #16]
10006e2a:	4b99      	ldr	r3, [pc, #612]	; (10007090 <pow+0x340>)
10006e2c:	ad04      	add	r5, sp, #16
10006e2e:	606b      	str	r3, [r5, #4]
10006e30:	2300      	movs	r3, #0
10006e32:	622b      	str	r3, [r5, #32]
10006e34:	9b02      	ldr	r3, [sp, #8]
10006e36:	9c03      	ldr	r4, [sp, #12]
10006e38:	60ab      	str	r3, [r5, #8]
10006e3a:	60ec      	str	r4, [r5, #12]
10006e3c:	2300      	movs	r3, #0
10006e3e:	2400      	movs	r4, #0
10006e40:	61ab      	str	r3, [r5, #24]
10006e42:	61ec      	str	r4, [r5, #28]
10006e44:	4643      	mov	r3, r8
10006e46:	781b      	ldrb	r3, [r3, #0]
10006e48:	612e      	str	r6, [r5, #16]
10006e4a:	616f      	str	r7, [r5, #20]
10006e4c:	b25b      	sxtb	r3, r3
10006e4e:	2b00      	cmp	r3, #0
10006e50:	d0c7      	beq.n	10006de2 <pow+0x92>
10006e52:	2200      	movs	r2, #0
10006e54:	4b8f      	ldr	r3, [pc, #572]	; (10007094 <pow+0x344>)
10006e56:	61aa      	str	r2, [r5, #24]
10006e58:	61eb      	str	r3, [r5, #28]
10006e5a:	e7cf      	b.n	10006dfc <pow+0xac>
10006e5c:	1c20      	adds	r0, r4, #0
10006e5e:	1c29      	adds	r1, r5, #0
10006e60:	f002 fa84 	bl	1000936c <finite>
10006e64:	4682      	mov	sl, r0
10006e66:	2800      	cmp	r0, #0
10006e68:	d047      	beq.n	10006efa <pow+0x1aa>
10006e6a:	1c20      	adds	r0, r4, #0
10006e6c:	1c29      	adds	r1, r5, #0
10006e6e:	2200      	movs	r2, #0
10006e70:	2300      	movs	r3, #0
10006e72:	f002 fc8f 	bl	10009794 <__aeabi_dcmpeq>
10006e76:	2800      	cmp	r0, #0
10006e78:	d166      	bne.n	10006f48 <pow+0x1f8>
10006e7a:	9400      	str	r4, [sp, #0]
10006e7c:	9501      	str	r5, [sp, #4]
10006e7e:	e782      	b.n	10006d86 <pow+0x36>
10006e80:	1c30      	adds	r0, r6, #0
10006e82:	1c39      	adds	r1, r7, #0
10006e84:	f002 fa72 	bl	1000936c <finite>
10006e88:	2800      	cmp	r0, #0
10006e8a:	d100      	bne.n	10006e8e <pow+0x13e>
10006e8c:	e77b      	b.n	10006d86 <pow+0x36>
10006e8e:	1c30      	adds	r0, r6, #0
10006e90:	1c39      	adds	r1, r7, #0
10006e92:	2200      	movs	r2, #0
10006e94:	2300      	movs	r3, #0
10006e96:	f002 fc83 	bl	100097a0 <__aeabi_dcmplt>
10006e9a:	2800      	cmp	r0, #0
10006e9c:	d100      	bne.n	10006ea0 <pow+0x150>
10006e9e:	e772      	b.n	10006d86 <pow+0x36>
10006ea0:	2301      	movs	r3, #1
10006ea2:	9304      	str	r3, [sp, #16]
10006ea4:	4b7a      	ldr	r3, [pc, #488]	; (10007090 <pow+0x340>)
10006ea6:	ad04      	add	r5, sp, #16
10006ea8:	606b      	str	r3, [r5, #4]
10006eaa:	622c      	str	r4, [r5, #32]
10006eac:	9b02      	ldr	r3, [sp, #8]
10006eae:	9c03      	ldr	r4, [sp, #12]
10006eb0:	60ab      	str	r3, [r5, #8]
10006eb2:	60ec      	str	r4, [r5, #12]
10006eb4:	4643      	mov	r3, r8
10006eb6:	781b      	ldrb	r3, [r3, #0]
10006eb8:	612e      	str	r6, [r5, #16]
10006eba:	616f      	str	r7, [r5, #20]
10006ebc:	2b00      	cmp	r3, #0
10006ebe:	d175      	bne.n	10006fac <pow+0x25c>
10006ec0:	2300      	movs	r3, #0
10006ec2:	2400      	movs	r4, #0
10006ec4:	61ab      	str	r3, [r5, #24]
10006ec6:	61ec      	str	r4, [r5, #28]
10006ec8:	1c28      	adds	r0, r5, #0
10006eca:	f002 fb2d 	bl	10009528 <matherr>
10006ece:	2800      	cmp	r0, #0
10006ed0:	d072      	beq.n	10006fb8 <pow+0x268>
10006ed2:	6a2b      	ldr	r3, [r5, #32]
10006ed4:	2b00      	cmp	r3, #0
10006ed6:	d091      	beq.n	10006dfc <pow+0xac>
10006ed8:	e78c      	b.n	10006df4 <pow+0xa4>
10006eda:	2000      	movs	r0, #0
10006edc:	2100      	movs	r1, #0
10006ede:	1c02      	adds	r2, r0, #0
10006ee0:	1c0b      	adds	r3, r1, #0
10006ee2:	f003 ff23 	bl	1000ad2c <__aeabi_ddiv>
10006ee6:	61a8      	str	r0, [r5, #24]
10006ee8:	61e9      	str	r1, [r5, #28]
10006eea:	2c02      	cmp	r4, #2
10006eec:	d000      	beq.n	10006ef0 <pow+0x1a0>
10006eee:	e778      	b.n	10006de2 <pow+0x92>
10006ef0:	f005 fca8 	bl	1000c844 <__errno>
10006ef4:	2321      	movs	r3, #33	; 0x21
10006ef6:	6003      	str	r3, [r0, #0]
10006ef8:	e779      	b.n	10006dee <pow+0x9e>
10006efa:	9802      	ldr	r0, [sp, #8]
10006efc:	9903      	ldr	r1, [sp, #12]
10006efe:	f002 fa35 	bl	1000936c <finite>
10006f02:	2800      	cmp	r0, #0
10006f04:	d0b1      	beq.n	10006e6a <pow+0x11a>
10006f06:	1c30      	adds	r0, r6, #0
10006f08:	1c39      	adds	r1, r7, #0
10006f0a:	f002 fa2f 	bl	1000936c <finite>
10006f0e:	2800      	cmp	r0, #0
10006f10:	d0ab      	beq.n	10006e6a <pow+0x11a>
10006f12:	1c29      	adds	r1, r5, #0
10006f14:	1c20      	adds	r0, r4, #0
10006f16:	f002 fad9 	bl	100094cc <__fpclassifyd>
10006f1a:	ad04      	add	r5, sp, #16
10006f1c:	2800      	cmp	r0, #0
10006f1e:	d150      	bne.n	10006fc2 <pow+0x272>
10006f20:	2301      	movs	r3, #1
10006f22:	9304      	str	r3, [sp, #16]
10006f24:	4b5a      	ldr	r3, [pc, #360]	; (10007090 <pow+0x340>)
10006f26:	6228      	str	r0, [r5, #32]
10006f28:	606b      	str	r3, [r5, #4]
10006f2a:	9b02      	ldr	r3, [sp, #8]
10006f2c:	9c03      	ldr	r4, [sp, #12]
10006f2e:	60ab      	str	r3, [r5, #8]
10006f30:	60ec      	str	r4, [r5, #12]
10006f32:	4643      	mov	r3, r8
10006f34:	781c      	ldrb	r4, [r3, #0]
10006f36:	612e      	str	r6, [r5, #16]
10006f38:	616f      	str	r7, [r5, #20]
10006f3a:	2c00      	cmp	r4, #0
10006f3c:	d1cd      	bne.n	10006eda <pow+0x18a>
10006f3e:	2300      	movs	r3, #0
10006f40:	2400      	movs	r4, #0
10006f42:	61ab      	str	r3, [r5, #24]
10006f44:	61ec      	str	r4, [r5, #28]
10006f46:	e74c      	b.n	10006de2 <pow+0x92>
10006f48:	9802      	ldr	r0, [sp, #8]
10006f4a:	9903      	ldr	r1, [sp, #12]
10006f4c:	f002 fa0e 	bl	1000936c <finite>
10006f50:	9400      	str	r4, [sp, #0]
10006f52:	9501      	str	r5, [sp, #4]
10006f54:	2800      	cmp	r0, #0
10006f56:	d100      	bne.n	10006f5a <pow+0x20a>
10006f58:	e715      	b.n	10006d86 <pow+0x36>
10006f5a:	1c30      	adds	r0, r6, #0
10006f5c:	1c39      	adds	r1, r7, #0
10006f5e:	f002 fa05 	bl	1000936c <finite>
10006f62:	9400      	str	r4, [sp, #0]
10006f64:	9501      	str	r5, [sp, #4]
10006f66:	2800      	cmp	r0, #0
10006f68:	d100      	bne.n	10006f6c <pow+0x21c>
10006f6a:	e70c      	b.n	10006d86 <pow+0x36>
10006f6c:	2304      	movs	r3, #4
10006f6e:	9304      	str	r3, [sp, #16]
10006f70:	4b47      	ldr	r3, [pc, #284]	; (10007090 <pow+0x340>)
10006f72:	ad04      	add	r5, sp, #16
10006f74:	606b      	str	r3, [r5, #4]
10006f76:	2300      	movs	r3, #0
10006f78:	622b      	str	r3, [r5, #32]
10006f7a:	9b02      	ldr	r3, [sp, #8]
10006f7c:	9c03      	ldr	r4, [sp, #12]
10006f7e:	60ab      	str	r3, [r5, #8]
10006f80:	60ec      	str	r4, [r5, #12]
10006f82:	2300      	movs	r3, #0
10006f84:	2400      	movs	r4, #0
10006f86:	61ab      	str	r3, [r5, #24]
10006f88:	61ec      	str	r4, [r5, #28]
10006f8a:	4643      	mov	r3, r8
10006f8c:	781b      	ldrb	r3, [r3, #0]
10006f8e:	612e      	str	r6, [r5, #16]
10006f90:	616f      	str	r7, [r5, #20]
10006f92:	b25b      	sxtb	r3, r3
10006f94:	2b02      	cmp	r3, #2
10006f96:	d004      	beq.n	10006fa2 <pow+0x252>
10006f98:	1c28      	adds	r0, r5, #0
10006f9a:	f002 fac5 	bl	10009528 <matherr>
10006f9e:	2800      	cmp	r0, #0
10006fa0:	d197      	bne.n	10006ed2 <pow+0x182>
10006fa2:	f005 fc4f 	bl	1000c844 <__errno>
10006fa6:	2322      	movs	r3, #34	; 0x22
10006fa8:	6003      	str	r3, [r0, #0]
10006faa:	e792      	b.n	10006ed2 <pow+0x182>
10006fac:	2000      	movs	r0, #0
10006fae:	493a      	ldr	r1, [pc, #232]	; (10007098 <pow+0x348>)
10006fb0:	61a8      	str	r0, [r5, #24]
10006fb2:	61e9      	str	r1, [r5, #28]
10006fb4:	2b02      	cmp	r3, #2
10006fb6:	d187      	bne.n	10006ec8 <pow+0x178>
10006fb8:	f005 fc44 	bl	1000c844 <__errno>
10006fbc:	2321      	movs	r3, #33	; 0x21
10006fbe:	6003      	str	r3, [r0, #0]
10006fc0:	e787      	b.n	10006ed2 <pow+0x182>
10006fc2:	2303      	movs	r3, #3
10006fc4:	9304      	str	r3, [sp, #16]
10006fc6:	4b32      	ldr	r3, [pc, #200]	; (10007090 <pow+0x340>)
10006fc8:	612e      	str	r6, [r5, #16]
10006fca:	616f      	str	r7, [r5, #20]
10006fcc:	606b      	str	r3, [r5, #4]
10006fce:	4653      	mov	r3, sl
10006fd0:	622b      	str	r3, [r5, #32]
10006fd2:	9b02      	ldr	r3, [sp, #8]
10006fd4:	9c03      	ldr	r4, [sp, #12]
10006fd6:	60ab      	str	r3, [r5, #8]
10006fd8:	60ec      	str	r4, [r5, #12]
10006fda:	4643      	mov	r3, r8
10006fdc:	781b      	ldrb	r3, [r3, #0]
10006fde:	b25b      	sxtb	r3, r3
10006fe0:	2b00      	cmp	r3, #0
10006fe2:	d11c      	bne.n	1000701e <pow+0x2ce>
10006fe4:	9802      	ldr	r0, [sp, #8]
10006fe6:	9903      	ldr	r1, [sp, #12]
10006fe8:	22e0      	movs	r2, #224	; 0xe0
10006fea:	4b2c      	ldr	r3, [pc, #176]	; (1000709c <pow+0x34c>)
10006fec:	0612      	lsls	r2, r2, #24
10006fee:	61aa      	str	r2, [r5, #24]
10006ff0:	61eb      	str	r3, [r5, #28]
10006ff2:	2200      	movs	r2, #0
10006ff4:	2300      	movs	r3, #0
10006ff6:	f002 fbd3 	bl	100097a0 <__aeabi_dcmplt>
10006ffa:	2800      	cmp	r0, #0
10006ffc:	d130      	bne.n	10007060 <pow+0x310>
10006ffe:	4643      	mov	r3, r8
10007000:	781b      	ldrb	r3, [r3, #0]
10007002:	b25b      	sxtb	r3, r3
10007004:	2b02      	cmp	r3, #2
10007006:	d005      	beq.n	10007014 <pow+0x2c4>
10007008:	1c28      	adds	r0, r5, #0
1000700a:	f002 fa8d 	bl	10009528 <matherr>
1000700e:	2800      	cmp	r0, #0
10007010:	d000      	beq.n	10007014 <pow+0x2c4>
10007012:	e6ec      	b.n	10006dee <pow+0x9e>
10007014:	f005 fc16 	bl	1000c844 <__errno>
10007018:	2322      	movs	r3, #34	; 0x22
1000701a:	6003      	str	r3, [r0, #0]
1000701c:	e6e7      	b.n	10006dee <pow+0x9e>
1000701e:	2200      	movs	r2, #0
10007020:	9802      	ldr	r0, [sp, #8]
10007022:	9903      	ldr	r1, [sp, #12]
10007024:	4b1e      	ldr	r3, [pc, #120]	; (100070a0 <pow+0x350>)
10007026:	61aa      	str	r2, [r5, #24]
10007028:	61eb      	str	r3, [r5, #28]
1000702a:	2200      	movs	r2, #0
1000702c:	2300      	movs	r3, #0
1000702e:	f002 fbb7 	bl	100097a0 <__aeabi_dcmplt>
10007032:	2800      	cmp	r0, #0
10007034:	d0e3      	beq.n	10006ffe <pow+0x2ae>
10007036:	2200      	movs	r2, #0
10007038:	4b1a      	ldr	r3, [pc, #104]	; (100070a4 <pow+0x354>)
1000703a:	1c30      	adds	r0, r6, #0
1000703c:	1c39      	adds	r1, r7, #0
1000703e:	f004 fab3 	bl	1000b5a8 <__aeabi_dmul>
10007042:	1c06      	adds	r6, r0, #0
10007044:	1c0f      	adds	r7, r1, #0
10007046:	f002 fa77 	bl	10009538 <rint>
1000704a:	1c32      	adds	r2, r6, #0
1000704c:	1c3b      	adds	r3, r7, #0
1000704e:	f002 fba1 	bl	10009794 <__aeabi_dcmpeq>
10007052:	2800      	cmp	r0, #0
10007054:	d1d3      	bne.n	10006ffe <pow+0x2ae>
10007056:	2200      	movs	r2, #0
10007058:	4b0f      	ldr	r3, [pc, #60]	; (10007098 <pow+0x348>)
1000705a:	61aa      	str	r2, [r5, #24]
1000705c:	61eb      	str	r3, [r5, #28]
1000705e:	e7ce      	b.n	10006ffe <pow+0x2ae>
10007060:	2200      	movs	r2, #0
10007062:	4b10      	ldr	r3, [pc, #64]	; (100070a4 <pow+0x354>)
10007064:	1c30      	adds	r0, r6, #0
10007066:	1c39      	adds	r1, r7, #0
10007068:	f004 fa9e 	bl	1000b5a8 <__aeabi_dmul>
1000706c:	1c06      	adds	r6, r0, #0
1000706e:	1c0f      	adds	r7, r1, #0
10007070:	f002 fa62 	bl	10009538 <rint>
10007074:	1c32      	adds	r2, r6, #0
10007076:	1c3b      	adds	r3, r7, #0
10007078:	f002 fb8c 	bl	10009794 <__aeabi_dcmpeq>
1000707c:	2800      	cmp	r0, #0
1000707e:	d1be      	bne.n	10006ffe <pow+0x2ae>
10007080:	22e0      	movs	r2, #224	; 0xe0
10007082:	4b09      	ldr	r3, [pc, #36]	; (100070a8 <pow+0x358>)
10007084:	0612      	lsls	r2, r2, #24
10007086:	61aa      	str	r2, [r5, #24]
10007088:	61eb      	str	r3, [r5, #28]
1000708a:	e7b8      	b.n	10006ffe <pow+0x2ae>
1000708c:	20000864 	.word	0x20000864
10007090:	1000cbf8 	.word	0x1000cbf8
10007094:	3ff00000 	.word	0x3ff00000
10007098:	fff00000 	.word	0xfff00000
1000709c:	47efffff 	.word	0x47efffff
100070a0:	7ff00000 	.word	0x7ff00000
100070a4:	3fe00000 	.word	0x3fe00000
100070a8:	c7efffff 	.word	0xc7efffff

100070ac <sqrt>:
100070ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100070ae:	4647      	mov	r7, r8
100070b0:	b480      	push	{r7}
100070b2:	b08c      	sub	sp, #48	; 0x30
100070b4:	1c04      	adds	r4, r0, #0
100070b6:	1c0d      	adds	r5, r1, #0
100070b8:	f001 f886 	bl	100081c8 <__ieee754_sqrt>
100070bc:	4b27      	ldr	r3, [pc, #156]	; (1000715c <sqrt+0xb0>)
100070be:	1c06      	adds	r6, r0, #0
100070c0:	4698      	mov	r8, r3
100070c2:	781b      	ldrb	r3, [r3, #0]
100070c4:	1c0f      	adds	r7, r1, #0
100070c6:	b25b      	sxtb	r3, r3
100070c8:	3301      	adds	r3, #1
100070ca:	d00d      	beq.n	100070e8 <sqrt+0x3c>
100070cc:	1c20      	adds	r0, r4, #0
100070ce:	1c29      	adds	r1, r5, #0
100070d0:	f002 f9fc 	bl	100094cc <__fpclassifyd>
100070d4:	2800      	cmp	r0, #0
100070d6:	d007      	beq.n	100070e8 <sqrt+0x3c>
100070d8:	1c20      	adds	r0, r4, #0
100070da:	1c29      	adds	r1, r5, #0
100070dc:	2200      	movs	r2, #0
100070de:	2300      	movs	r3, #0
100070e0:	f002 fb5e 	bl	100097a0 <__aeabi_dcmplt>
100070e4:	2800      	cmp	r0, #0
100070e6:	d105      	bne.n	100070f4 <sqrt+0x48>
100070e8:	1c30      	adds	r0, r6, #0
100070ea:	1c39      	adds	r1, r7, #0
100070ec:	b00c      	add	sp, #48	; 0x30
100070ee:	bc04      	pop	{r2}
100070f0:	4690      	mov	r8, r2
100070f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100070f4:	2301      	movs	r3, #1
100070f6:	9302      	str	r3, [sp, #8]
100070f8:	4b19      	ldr	r3, [pc, #100]	; (10007160 <sqrt+0xb4>)
100070fa:	9406      	str	r4, [sp, #24]
100070fc:	9507      	str	r5, [sp, #28]
100070fe:	9303      	str	r3, [sp, #12]
10007100:	2300      	movs	r3, #0
10007102:	930a      	str	r3, [sp, #40]	; 0x28
10007104:	4643      	mov	r3, r8
10007106:	9404      	str	r4, [sp, #16]
10007108:	9505      	str	r5, [sp, #20]
1000710a:	781c      	ldrb	r4, [r3, #0]
1000710c:	2c00      	cmp	r4, #0
1000710e:	d10f      	bne.n	10007130 <sqrt+0x84>
10007110:	2300      	movs	r3, #0
10007112:	2400      	movs	r4, #0
10007114:	9308      	str	r3, [sp, #32]
10007116:	9409      	str	r4, [sp, #36]	; 0x24
10007118:	a802      	add	r0, sp, #8
1000711a:	f002 fa05 	bl	10009528 <matherr>
1000711e:	2800      	cmp	r0, #0
10007120:	d010      	beq.n	10007144 <sqrt+0x98>
10007122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10007124:	9301      	str	r3, [sp, #4]
10007126:	2b00      	cmp	r3, #0
10007128:	d111      	bne.n	1000714e <sqrt+0xa2>
1000712a:	9e08      	ldr	r6, [sp, #32]
1000712c:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000712e:	e7db      	b.n	100070e8 <sqrt+0x3c>
10007130:	2000      	movs	r0, #0
10007132:	2100      	movs	r1, #0
10007134:	1c02      	adds	r2, r0, #0
10007136:	1c0b      	adds	r3, r1, #0
10007138:	f003 fdf8 	bl	1000ad2c <__aeabi_ddiv>
1000713c:	9008      	str	r0, [sp, #32]
1000713e:	9109      	str	r1, [sp, #36]	; 0x24
10007140:	2c02      	cmp	r4, #2
10007142:	d1e9      	bne.n	10007118 <sqrt+0x6c>
10007144:	f005 fb7e 	bl	1000c844 <__errno>
10007148:	2321      	movs	r3, #33	; 0x21
1000714a:	6003      	str	r3, [r0, #0]
1000714c:	e7e9      	b.n	10007122 <sqrt+0x76>
1000714e:	f005 fb79 	bl	1000c844 <__errno>
10007152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10007154:	9301      	str	r3, [sp, #4]
10007156:	6003      	str	r3, [r0, #0]
10007158:	e7e7      	b.n	1000712a <sqrt+0x7e>
1000715a:	46c0      	nop			; (mov r8, r8)
1000715c:	20000864 	.word	0x20000864
10007160:	1000cbfc 	.word	0x1000cbfc

10007164 <__ieee754_atan2>:
10007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10007166:	464f      	mov	r7, r9
10007168:	4646      	mov	r6, r8
1000716a:	1c0c      	adds	r4, r1, #0
1000716c:	4689      	mov	r9, r1
1000716e:	4251      	negs	r1, r2
10007170:	b4c0      	push	{r6, r7}
10007172:	1c05      	adds	r5, r0, #0
10007174:	4311      	orrs	r1, r2
10007176:	0058      	lsls	r0, r3, #1
10007178:	4e56      	ldr	r6, [pc, #344]	; (100072d4 <__ieee754_atan2+0x170>)
1000717a:	0840      	lsrs	r0, r0, #1
1000717c:	0fc9      	lsrs	r1, r1, #31
1000717e:	469c      	mov	ip, r3
10007180:	4301      	orrs	r1, r0
10007182:	42b1      	cmp	r1, r6
10007184:	d83d      	bhi.n	10007202 <__ieee754_atan2+0x9e>
10007186:	0061      	lsls	r1, r4, #1
10007188:	0849      	lsrs	r1, r1, #1
1000718a:	4688      	mov	r8, r1
1000718c:	4647      	mov	r7, r8
1000718e:	4269      	negs	r1, r5
10007190:	4329      	orrs	r1, r5
10007192:	0fc9      	lsrs	r1, r1, #31
10007194:	4339      	orrs	r1, r7
10007196:	42b1      	cmp	r1, r6
10007198:	d833      	bhi.n	10007202 <__ieee754_atan2+0x9e>
1000719a:	494f      	ldr	r1, [pc, #316]	; (100072d8 <__ieee754_atan2+0x174>)
1000719c:	1859      	adds	r1, r3, r1
1000719e:	4311      	orrs	r1, r2
100071a0:	d047      	beq.n	10007232 <__ieee754_atan2+0xce>
100071a2:	2602      	movs	r6, #2
100071a4:	1799      	asrs	r1, r3, #30
100071a6:	400e      	ands	r6, r1
100071a8:	0fe1      	lsrs	r1, r4, #31
100071aa:	430e      	orrs	r6, r1
100071ac:	4641      	mov	r1, r8
100071ae:	4329      	orrs	r1, r5
100071b0:	d031      	beq.n	10007216 <__ieee754_atan2+0xb2>
100071b2:	1c01      	adds	r1, r0, #0
100071b4:	4311      	orrs	r1, r2
100071b6:	d036      	beq.n	10007226 <__ieee754_atan2+0xc2>
100071b8:	4946      	ldr	r1, [pc, #280]	; (100072d4 <__ieee754_atan2+0x170>)
100071ba:	4288      	cmp	r0, r1
100071bc:	d049      	beq.n	10007252 <__ieee754_atan2+0xee>
100071be:	4945      	ldr	r1, [pc, #276]	; (100072d4 <__ieee754_atan2+0x170>)
100071c0:	4588      	cmp	r8, r1
100071c2:	d030      	beq.n	10007226 <__ieee754_atan2+0xc2>
100071c4:	4641      	mov	r1, r8
100071c6:	1a08      	subs	r0, r1, r0
100071c8:	1500      	asrs	r0, r0, #20
100071ca:	283c      	cmp	r0, #60	; 0x3c
100071cc:	dc3b      	bgt.n	10007246 <__ieee754_atan2+0xe2>
100071ce:	4661      	mov	r1, ip
100071d0:	2900      	cmp	r1, #0
100071d2:	db5a      	blt.n	1000728a <__ieee754_atan2+0x126>
100071d4:	1c28      	adds	r0, r5, #0
100071d6:	1c21      	adds	r1, r4, #0
100071d8:	f003 fda8 	bl	1000ad2c <__aeabi_ddiv>
100071dc:	f7ff fd34 	bl	10006c48 <fabs>
100071e0:	f7ff fb3e 	bl	10006860 <atan>
100071e4:	2e01      	cmp	r6, #1
100071e6:	d040      	beq.n	1000726a <__ieee754_atan2+0x106>
100071e8:	2e02      	cmp	r6, #2
100071ea:	d043      	beq.n	10007274 <__ieee754_atan2+0x110>
100071ec:	2e00      	cmp	r6, #0
100071ee:	d00e      	beq.n	1000720e <__ieee754_atan2+0xaa>
100071f0:	4a3a      	ldr	r2, [pc, #232]	; (100072dc <__ieee754_atan2+0x178>)
100071f2:	4b3b      	ldr	r3, [pc, #236]	; (100072e0 <__ieee754_atan2+0x17c>)
100071f4:	f004 fc72 	bl	1000badc <__aeabi_dsub>
100071f8:	4a3a      	ldr	r2, [pc, #232]	; (100072e4 <__ieee754_atan2+0x180>)
100071fa:	4b3b      	ldr	r3, [pc, #236]	; (100072e8 <__ieee754_atan2+0x184>)
100071fc:	f004 fc6e 	bl	1000badc <__aeabi_dsub>
10007200:	e005      	b.n	1000720e <__ieee754_atan2+0xaa>
10007202:	1c10      	adds	r0, r2, #0
10007204:	1c19      	adds	r1, r3, #0
10007206:	1c2a      	adds	r2, r5, #0
10007208:	1c23      	adds	r3, r4, #0
1000720a:	f003 fa67 	bl	1000a6dc <__aeabi_dadd>
1000720e:	bc0c      	pop	{r2, r3}
10007210:	4690      	mov	r8, r2
10007212:	4699      	mov	r9, r3
10007214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10007216:	2e02      	cmp	r6, #2
10007218:	d018      	beq.n	1000724c <__ieee754_atan2+0xe8>
1000721a:	dc0f      	bgt.n	1000723c <__ieee754_atan2+0xd8>
1000721c:	2e00      	cmp	r6, #0
1000721e:	dbc8      	blt.n	100071b2 <__ieee754_atan2+0x4e>
10007220:	1c28      	adds	r0, r5, #0
10007222:	1c21      	adds	r1, r4, #0
10007224:	e7f3      	b.n	1000720e <__ieee754_atan2+0xaa>
10007226:	464b      	mov	r3, r9
10007228:	482e      	ldr	r0, [pc, #184]	; (100072e4 <__ieee754_atan2+0x180>)
1000722a:	2b00      	cmp	r3, #0
1000722c:	db1b      	blt.n	10007266 <__ieee754_atan2+0x102>
1000722e:	492f      	ldr	r1, [pc, #188]	; (100072ec <__ieee754_atan2+0x188>)
10007230:	e7ed      	b.n	1000720e <__ieee754_atan2+0xaa>
10007232:	1c28      	adds	r0, r5, #0
10007234:	1c21      	adds	r1, r4, #0
10007236:	f7ff fb13 	bl	10006860 <atan>
1000723a:	e7e8      	b.n	1000720e <__ieee754_atan2+0xaa>
1000723c:	2e03      	cmp	r6, #3
1000723e:	d1b8      	bne.n	100071b2 <__ieee754_atan2+0x4e>
10007240:	4828      	ldr	r0, [pc, #160]	; (100072e4 <__ieee754_atan2+0x180>)
10007242:	492b      	ldr	r1, [pc, #172]	; (100072f0 <__ieee754_atan2+0x18c>)
10007244:	e7e3      	b.n	1000720e <__ieee754_atan2+0xaa>
10007246:	4827      	ldr	r0, [pc, #156]	; (100072e4 <__ieee754_atan2+0x180>)
10007248:	4928      	ldr	r1, [pc, #160]	; (100072ec <__ieee754_atan2+0x188>)
1000724a:	e7cb      	b.n	100071e4 <__ieee754_atan2+0x80>
1000724c:	4825      	ldr	r0, [pc, #148]	; (100072e4 <__ieee754_atan2+0x180>)
1000724e:	4926      	ldr	r1, [pc, #152]	; (100072e8 <__ieee754_atan2+0x184>)
10007250:	e7dd      	b.n	1000720e <__ieee754_atan2+0xaa>
10007252:	4580      	cmp	r8, r0
10007254:	d01e      	beq.n	10007294 <__ieee754_atan2+0x130>
10007256:	2e01      	cmp	r6, #1
10007258:	d02c      	beq.n	100072b4 <__ieee754_atan2+0x150>
1000725a:	dd25      	ble.n	100072a8 <__ieee754_atan2+0x144>
1000725c:	2e02      	cmp	r6, #2
1000725e:	d0f5      	beq.n	1000724c <__ieee754_atan2+0xe8>
10007260:	2e03      	cmp	r6, #3
10007262:	d0ed      	beq.n	10007240 <__ieee754_atan2+0xdc>
10007264:	e7ab      	b.n	100071be <__ieee754_atan2+0x5a>
10007266:	4923      	ldr	r1, [pc, #140]	; (100072f4 <__ieee754_atan2+0x190>)
10007268:	e7d1      	b.n	1000720e <__ieee754_atan2+0xaa>
1000726a:	2480      	movs	r4, #128	; 0x80
1000726c:	0624      	lsls	r4, r4, #24
1000726e:	190b      	adds	r3, r1, r4
10007270:	1c19      	adds	r1, r3, #0
10007272:	e7cc      	b.n	1000720e <__ieee754_atan2+0xaa>
10007274:	4a19      	ldr	r2, [pc, #100]	; (100072dc <__ieee754_atan2+0x178>)
10007276:	4b1a      	ldr	r3, [pc, #104]	; (100072e0 <__ieee754_atan2+0x17c>)
10007278:	f004 fc30 	bl	1000badc <__aeabi_dsub>
1000727c:	1c02      	adds	r2, r0, #0
1000727e:	1c0b      	adds	r3, r1, #0
10007280:	4818      	ldr	r0, [pc, #96]	; (100072e4 <__ieee754_atan2+0x180>)
10007282:	4919      	ldr	r1, [pc, #100]	; (100072e8 <__ieee754_atan2+0x184>)
10007284:	f004 fc2a 	bl	1000badc <__aeabi_dsub>
10007288:	e7c1      	b.n	1000720e <__ieee754_atan2+0xaa>
1000728a:	303c      	adds	r0, #60	; 0x3c
1000728c:	daa2      	bge.n	100071d4 <__ieee754_atan2+0x70>
1000728e:	2000      	movs	r0, #0
10007290:	2100      	movs	r1, #0
10007292:	e7a7      	b.n	100071e4 <__ieee754_atan2+0x80>
10007294:	2e01      	cmp	r6, #1
10007296:	d019      	beq.n	100072cc <__ieee754_atan2+0x168>
10007298:	dd10      	ble.n	100072bc <__ieee754_atan2+0x158>
1000729a:	2e02      	cmp	r6, #2
1000729c:	d013      	beq.n	100072c6 <__ieee754_atan2+0x162>
1000729e:	2e03      	cmp	r6, #3
100072a0:	d1c1      	bne.n	10007226 <__ieee754_atan2+0xc2>
100072a2:	4815      	ldr	r0, [pc, #84]	; (100072f8 <__ieee754_atan2+0x194>)
100072a4:	4915      	ldr	r1, [pc, #84]	; (100072fc <__ieee754_atan2+0x198>)
100072a6:	e7b2      	b.n	1000720e <__ieee754_atan2+0xaa>
100072a8:	2e00      	cmp	r6, #0
100072aa:	d000      	beq.n	100072ae <__ieee754_atan2+0x14a>
100072ac:	e787      	b.n	100071be <__ieee754_atan2+0x5a>
100072ae:	2000      	movs	r0, #0
100072b0:	2100      	movs	r1, #0
100072b2:	e7ac      	b.n	1000720e <__ieee754_atan2+0xaa>
100072b4:	2180      	movs	r1, #128	; 0x80
100072b6:	2000      	movs	r0, #0
100072b8:	0609      	lsls	r1, r1, #24
100072ba:	e7a8      	b.n	1000720e <__ieee754_atan2+0xaa>
100072bc:	2e00      	cmp	r6, #0
100072be:	d1b2      	bne.n	10007226 <__ieee754_atan2+0xc2>
100072c0:	4808      	ldr	r0, [pc, #32]	; (100072e4 <__ieee754_atan2+0x180>)
100072c2:	490f      	ldr	r1, [pc, #60]	; (10007300 <__ieee754_atan2+0x19c>)
100072c4:	e7a3      	b.n	1000720e <__ieee754_atan2+0xaa>
100072c6:	480c      	ldr	r0, [pc, #48]	; (100072f8 <__ieee754_atan2+0x194>)
100072c8:	490e      	ldr	r1, [pc, #56]	; (10007304 <__ieee754_atan2+0x1a0>)
100072ca:	e7a0      	b.n	1000720e <__ieee754_atan2+0xaa>
100072cc:	4805      	ldr	r0, [pc, #20]	; (100072e4 <__ieee754_atan2+0x180>)
100072ce:	490e      	ldr	r1, [pc, #56]	; (10007308 <__ieee754_atan2+0x1a4>)
100072d0:	e79d      	b.n	1000720e <__ieee754_atan2+0xaa>
100072d2:	46c0      	nop			; (mov r8, r8)
100072d4:	7ff00000 	.word	0x7ff00000
100072d8:	c0100000 	.word	0xc0100000
100072dc:	33145c07 	.word	0x33145c07
100072e0:	3ca1a626 	.word	0x3ca1a626
100072e4:	54442d18 	.word	0x54442d18
100072e8:	400921fb 	.word	0x400921fb
100072ec:	3ff921fb 	.word	0x3ff921fb
100072f0:	c00921fb 	.word	0xc00921fb
100072f4:	bff921fb 	.word	0xbff921fb
100072f8:	7f3321d2 	.word	0x7f3321d2
100072fc:	c002d97c 	.word	0xc002d97c
10007300:	3fe921fb 	.word	0x3fe921fb
10007304:	4002d97c 	.word	0x4002d97c
10007308:	bfe921fb 	.word	0xbfe921fb

1000730c <__ieee754_pow>:
1000730c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000730e:	4656      	mov	r6, sl
10007310:	464d      	mov	r5, r9
10007312:	4644      	mov	r4, r8
10007314:	465f      	mov	r7, fp
10007316:	b4f0      	push	{r4, r5, r6, r7}
10007318:	1c1c      	adds	r4, r3, #0
1000731a:	1c13      	adds	r3, r2, #0
1000731c:	0067      	lsls	r7, r4, #1
1000731e:	b08d      	sub	sp, #52	; 0x34
10007320:	087f      	lsrs	r7, r7, #1
10007322:	9300      	str	r3, [sp, #0]
10007324:	9401      	str	r4, [sp, #4]
10007326:	1c06      	adds	r6, r0, #0
10007328:	1c0d      	adds	r5, r1, #0
1000732a:	4680      	mov	r8, r0
1000732c:	4689      	mov	r9, r1
1000732e:	46a2      	mov	sl, r4
10007330:	433b      	orrs	r3, r7
10007332:	d031      	beq.n	10007398 <__ieee754_pow+0x8c>
10007334:	4b61      	ldr	r3, [pc, #388]	; (100074bc <__ieee754_pow+0x1b0>)
10007336:	006c      	lsls	r4, r5, #1
10007338:	0864      	lsrs	r4, r4, #1
1000733a:	429c      	cmp	r4, r3
1000733c:	dc28      	bgt.n	10007390 <__ieee754_pow+0x84>
1000733e:	d025      	beq.n	1000738c <__ieee754_pow+0x80>
10007340:	429f      	cmp	r7, r3
10007342:	dc25      	bgt.n	10007390 <__ieee754_pow+0x84>
10007344:	4b5d      	ldr	r3, [pc, #372]	; (100074bc <__ieee754_pow+0x1b0>)
10007346:	429f      	cmp	r7, r3
10007348:	d100      	bne.n	1000734c <__ieee754_pow+0x40>
1000734a:	e076      	b.n	1000743a <__ieee754_pow+0x12e>
1000734c:	2300      	movs	r3, #0
1000734e:	469b      	mov	fp, r3
10007350:	464b      	mov	r3, r9
10007352:	2b00      	cmp	r3, #0
10007354:	da00      	bge.n	10007358 <__ieee754_pow+0x4c>
10007356:	e074      	b.n	10007442 <__ieee754_pow+0x136>
10007358:	2a00      	cmp	r2, #0
1000735a:	d12c      	bne.n	100073b6 <__ieee754_pow+0xaa>
1000735c:	4b57      	ldr	r3, [pc, #348]	; (100074bc <__ieee754_pow+0x1b0>)
1000735e:	429f      	cmp	r7, r3
10007360:	d100      	bne.n	10007364 <__ieee754_pow+0x58>
10007362:	e08a      	b.n	1000747a <__ieee754_pow+0x16e>
10007364:	4b56      	ldr	r3, [pc, #344]	; (100074c0 <__ieee754_pow+0x1b4>)
10007366:	429f      	cmp	r7, r3
10007368:	d05f      	beq.n	1000742a <__ieee754_pow+0x11e>
1000736a:	2380      	movs	r3, #128	; 0x80
1000736c:	05db      	lsls	r3, r3, #23
1000736e:	459a      	cmp	sl, r3
10007370:	d101      	bne.n	10007376 <__ieee754_pow+0x6a>
10007372:	f000 fbd1 	bl	10007b18 <__ieee754_pow+0x80c>
10007376:	4b53      	ldr	r3, [pc, #332]	; (100074c4 <__ieee754_pow+0x1b8>)
10007378:	459a      	cmp	sl, r3
1000737a:	d11c      	bne.n	100073b6 <__ieee754_pow+0xaa>
1000737c:	464b      	mov	r3, r9
1000737e:	2b00      	cmp	r3, #0
10007380:	db19      	blt.n	100073b6 <__ieee754_pow+0xaa>
10007382:	1c30      	adds	r0, r6, #0
10007384:	1c29      	adds	r1, r5, #0
10007386:	f000 ff1f 	bl	100081c8 <__ieee754_sqrt>
1000738a:	e007      	b.n	1000739c <__ieee754_pow+0x90>
1000738c:	2800      	cmp	r0, #0
1000738e:	d00c      	beq.n	100073aa <__ieee754_pow+0x9e>
10007390:	4b4d      	ldr	r3, [pc, #308]	; (100074c8 <__ieee754_pow+0x1bc>)
10007392:	18e0      	adds	r0, r4, r3
10007394:	4330      	orrs	r0, r6
10007396:	d10a      	bne.n	100073ae <__ieee754_pow+0xa2>
10007398:	2000      	movs	r0, #0
1000739a:	4949      	ldr	r1, [pc, #292]	; (100074c0 <__ieee754_pow+0x1b4>)
1000739c:	b00d      	add	sp, #52	; 0x34
1000739e:	bc3c      	pop	{r2, r3, r4, r5}
100073a0:	4690      	mov	r8, r2
100073a2:	4699      	mov	r9, r3
100073a4:	46a2      	mov	sl, r4
100073a6:	46ab      	mov	fp, r5
100073a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100073aa:	42a7      	cmp	r7, r4
100073ac:	ddca      	ble.n	10007344 <__ieee754_pow+0x38>
100073ae:	4847      	ldr	r0, [pc, #284]	; (100074cc <__ieee754_pow+0x1c0>)
100073b0:	f002 f8bc 	bl	1000952c <nan>
100073b4:	e7f2      	b.n	1000739c <__ieee754_pow+0x90>
100073b6:	1c30      	adds	r0, r6, #0
100073b8:	1c29      	adds	r1, r5, #0
100073ba:	f7ff fc45 	bl	10006c48 <fabs>
100073be:	1c0b      	adds	r3, r1, #0
100073c0:	4641      	mov	r1, r8
100073c2:	1c02      	adds	r2, r0, #0
100073c4:	2900      	cmp	r1, #0
100073c6:	d01e      	beq.n	10007406 <__ieee754_pow+0xfa>
100073c8:	0fe9      	lsrs	r1, r5, #31
100073ca:	3901      	subs	r1, #1
100073cc:	4688      	mov	r8, r1
100073ce:	4659      	mov	r1, fp
100073d0:	4640      	mov	r0, r8
100073d2:	4301      	orrs	r1, r0
100073d4:	d066      	beq.n	100074a4 <__ieee754_pow+0x198>
100073d6:	493e      	ldr	r1, [pc, #248]	; (100074d0 <__ieee754_pow+0x1c4>)
100073d8:	428f      	cmp	r7, r1
100073da:	dc00      	bgt.n	100073de <__ieee754_pow+0xd2>
100073dc:	e088      	b.n	100074f0 <__ieee754_pow+0x1e4>
100073de:	493d      	ldr	r1, [pc, #244]	; (100074d4 <__ieee754_pow+0x1c8>)
100073e0:	428f      	cmp	r7, r1
100073e2:	dc01      	bgt.n	100073e8 <__ieee754_pow+0xdc>
100073e4:	f000 fbe0 	bl	10007ba8 <__ieee754_pow+0x89c>
100073e8:	4b3b      	ldr	r3, [pc, #236]	; (100074d8 <__ieee754_pow+0x1cc>)
100073ea:	429c      	cmp	r4, r3
100073ec:	dc00      	bgt.n	100073f0 <__ieee754_pow+0xe4>
100073ee:	e382      	b.n	10007af6 <__ieee754_pow+0x7ea>
100073f0:	4653      	mov	r3, sl
100073f2:	2b00      	cmp	r3, #0
100073f4:	dc00      	bgt.n	100073f8 <__ieee754_pow+0xec>
100073f6:	e382      	b.n	10007afe <__ieee754_pow+0x7f2>
100073f8:	4838      	ldr	r0, [pc, #224]	; (100074dc <__ieee754_pow+0x1d0>)
100073fa:	4939      	ldr	r1, [pc, #228]	; (100074e0 <__ieee754_pow+0x1d4>)
100073fc:	1c02      	adds	r2, r0, #0
100073fe:	1c0b      	adds	r3, r1, #0
10007400:	f004 f8d2 	bl	1000b5a8 <__aeabi_dmul>
10007404:	e7ca      	b.n	1000739c <__ieee754_pow+0x90>
10007406:	2c00      	cmp	r4, #0
10007408:	d004      	beq.n	10007414 <__ieee754_pow+0x108>
1000740a:	482d      	ldr	r0, [pc, #180]	; (100074c0 <__ieee754_pow+0x1b4>)
1000740c:	00a9      	lsls	r1, r5, #2
1000740e:	0889      	lsrs	r1, r1, #2
10007410:	4281      	cmp	r1, r0
10007412:	d1d9      	bne.n	100073c8 <__ieee754_pow+0xbc>
10007414:	4651      	mov	r1, sl
10007416:	2900      	cmp	r1, #0
10007418:	da00      	bge.n	1000741c <__ieee754_pow+0x110>
1000741a:	e3bb      	b.n	10007b94 <__ieee754_pow+0x888>
1000741c:	4649      	mov	r1, r9
1000741e:	2900      	cmp	r1, #0
10007420:	da00      	bge.n	10007424 <__ieee754_pow+0x118>
10007422:	e36f      	b.n	10007b04 <__ieee754_pow+0x7f8>
10007424:	1c10      	adds	r0, r2, #0
10007426:	1c19      	adds	r1, r3, #0
10007428:	e7b8      	b.n	1000739c <__ieee754_pow+0x90>
1000742a:	4653      	mov	r3, sl
1000742c:	2b00      	cmp	r3, #0
1000742e:	da01      	bge.n	10007434 <__ieee754_pow+0x128>
10007430:	f000 fc20 	bl	10007c74 <__ieee754_pow+0x968>
10007434:	1c30      	adds	r0, r6, #0
10007436:	1c29      	adds	r1, r5, #0
10007438:	e7b0      	b.n	1000739c <__ieee754_pow+0x90>
1000743a:	2a00      	cmp	r2, #0
1000743c:	d100      	bne.n	10007440 <__ieee754_pow+0x134>
1000743e:	e785      	b.n	1000734c <__ieee754_pow+0x40>
10007440:	e7a6      	b.n	10007390 <__ieee754_pow+0x84>
10007442:	4b28      	ldr	r3, [pc, #160]	; (100074e4 <__ieee754_pow+0x1d8>)
10007444:	429f      	cmp	r7, r3
10007446:	dc2a      	bgt.n	1000749e <__ieee754_pow+0x192>
10007448:	4b23      	ldr	r3, [pc, #140]	; (100074d8 <__ieee754_pow+0x1cc>)
1000744a:	429f      	cmp	r7, r3
1000744c:	dc00      	bgt.n	10007450 <__ieee754_pow+0x144>
1000744e:	e783      	b.n	10007358 <__ieee754_pow+0x4c>
10007450:	4925      	ldr	r1, [pc, #148]	; (100074e8 <__ieee754_pow+0x1dc>)
10007452:	1538      	asrs	r0, r7, #20
10007454:	4288      	cmp	r0, r1
10007456:	dc01      	bgt.n	1000745c <__ieee754_pow+0x150>
10007458:	f000 fc27 	bl	10007caa <__ieee754_pow+0x99e>
1000745c:	4b23      	ldr	r3, [pc, #140]	; (100074ec <__ieee754_pow+0x1e0>)
1000745e:	9900      	ldr	r1, [sp, #0]
10007460:	1a1b      	subs	r3, r3, r0
10007462:	40d9      	lsrs	r1, r3
10007464:	1c08      	adds	r0, r1, #0
10007466:	4098      	lsls	r0, r3
10007468:	4290      	cmp	r0, r2
1000746a:	d000      	beq.n	1000746e <__ieee754_pow+0x162>
1000746c:	e774      	b.n	10007358 <__ieee754_pow+0x4c>
1000746e:	2301      	movs	r3, #1
10007470:	4019      	ands	r1, r3
10007472:	3301      	adds	r3, #1
10007474:	1a5b      	subs	r3, r3, r1
10007476:	469b      	mov	fp, r3
10007478:	e76e      	b.n	10007358 <__ieee754_pow+0x4c>
1000747a:	4b13      	ldr	r3, [pc, #76]	; (100074c8 <__ieee754_pow+0x1bc>)
1000747c:	18e0      	adds	r0, r4, r3
1000747e:	4306      	orrs	r6, r0
10007480:	d100      	bne.n	10007484 <__ieee754_pow+0x178>
10007482:	e789      	b.n	10007398 <__ieee754_pow+0x8c>
10007484:	4b14      	ldr	r3, [pc, #80]	; (100074d8 <__ieee754_pow+0x1cc>)
10007486:	429c      	cmp	r4, r3
10007488:	dc00      	bgt.n	1000748c <__ieee754_pow+0x180>
1000748a:	e375      	b.n	10007b78 <__ieee754_pow+0x86c>
1000748c:	4653      	mov	r3, sl
1000748e:	2b00      	cmp	r3, #0
10007490:	da00      	bge.n	10007494 <__ieee754_pow+0x188>
10007492:	e334      	b.n	10007afe <__ieee754_pow+0x7f2>
10007494:	9b00      	ldr	r3, [sp, #0]
10007496:	9c01      	ldr	r4, [sp, #4]
10007498:	1c18      	adds	r0, r3, #0
1000749a:	1c21      	adds	r1, r4, #0
1000749c:	e77e      	b.n	1000739c <__ieee754_pow+0x90>
1000749e:	2302      	movs	r3, #2
100074a0:	469b      	mov	fp, r3
100074a2:	e759      	b.n	10007358 <__ieee754_pow+0x4c>
100074a4:	1c30      	adds	r0, r6, #0
100074a6:	1c29      	adds	r1, r5, #0
100074a8:	1c32      	adds	r2, r6, #0
100074aa:	1c2b      	adds	r3, r5, #0
100074ac:	f004 fb16 	bl	1000badc <__aeabi_dsub>
100074b0:	1c02      	adds	r2, r0, #0
100074b2:	1c0b      	adds	r3, r1, #0
100074b4:	f003 fc3a 	bl	1000ad2c <__aeabi_ddiv>
100074b8:	e770      	b.n	1000739c <__ieee754_pow+0x90>
100074ba:	46c0      	nop			; (mov r8, r8)
100074bc:	7ff00000 	.word	0x7ff00000
100074c0:	3ff00000 	.word	0x3ff00000
100074c4:	3fe00000 	.word	0x3fe00000
100074c8:	c0100000 	.word	0xc0100000
100074cc:	1000cc00 	.word	0x1000cc00
100074d0:	41e00000 	.word	0x41e00000
100074d4:	43f00000 	.word	0x43f00000
100074d8:	3fefffff 	.word	0x3fefffff
100074dc:	8800759c 	.word	0x8800759c
100074e0:	7e37e43c 	.word	0x7e37e43c
100074e4:	433fffff 	.word	0x433fffff
100074e8:	00000413 	.word	0x00000413
100074ec:	00000433 	.word	0x00000433
100074f0:	49e9      	ldr	r1, [pc, #932]	; (10007898 <__ieee754_pow+0x58c>)
100074f2:	2000      	movs	r0, #0
100074f4:	428c      	cmp	r4, r1
100074f6:	dc09      	bgt.n	1000750c <__ieee754_pow+0x200>
100074f8:	1c10      	adds	r0, r2, #0
100074fa:	1c19      	adds	r1, r3, #0
100074fc:	2200      	movs	r2, #0
100074fe:	4be7      	ldr	r3, [pc, #924]	; (1000789c <__ieee754_pow+0x590>)
10007500:	f004 f852 	bl	1000b5a8 <__aeabi_dmul>
10007504:	1c02      	adds	r2, r0, #0
10007506:	2035      	movs	r0, #53	; 0x35
10007508:	1c0c      	adds	r4, r1, #0
1000750a:	4240      	negs	r0, r0
1000750c:	4de4      	ldr	r5, [pc, #912]	; (100078a0 <__ieee754_pow+0x594>)
1000750e:	1521      	asrs	r1, r4, #20
10007510:	46ac      	mov	ip, r5
10007512:	4461      	add	r1, ip
10007514:	468a      	mov	sl, r1
10007516:	0324      	lsls	r4, r4, #12
10007518:	4de2      	ldr	r5, [pc, #904]	; (100078a4 <__ieee754_pow+0x598>)
1000751a:	49e3      	ldr	r1, [pc, #908]	; (100078a8 <__ieee754_pow+0x59c>)
1000751c:	0b24      	lsrs	r4, r4, #12
1000751e:	4482      	add	sl, r0
10007520:	4325      	orrs	r5, r4
10007522:	428c      	cmp	r4, r1
10007524:	dc00      	bgt.n	10007528 <__ieee754_pow+0x21c>
10007526:	e33c      	b.n	10007ba2 <__ieee754_pow+0x896>
10007528:	49e0      	ldr	r1, [pc, #896]	; (100078ac <__ieee754_pow+0x5a0>)
1000752a:	428c      	cmp	r4, r1
1000752c:	dc01      	bgt.n	10007532 <__ieee754_pow+0x226>
1000752e:	f000 fc21 	bl	10007d74 <__ieee754_pow+0xa68>
10007532:	2101      	movs	r1, #1
10007534:	468c      	mov	ip, r1
10007536:	49de      	ldr	r1, [pc, #888]	; (100078b0 <__ieee754_pow+0x5a4>)
10007538:	44e2      	add	sl, ip
1000753a:	468c      	mov	ip, r1
1000753c:	2400      	movs	r4, #0
1000753e:	2100      	movs	r1, #0
10007540:	4465      	add	r5, ip
10007542:	00cb      	lsls	r3, r1, #3
10007544:	4699      	mov	r9, r3
10007546:	1c16      	adds	r6, r2, #0
10007548:	1c2f      	adds	r7, r5, #0
1000754a:	4bda      	ldr	r3, [pc, #872]	; (100078b4 <__ieee754_pow+0x5a8>)
1000754c:	1c30      	adds	r0, r6, #0
1000754e:	444b      	add	r3, r9
10007550:	681a      	ldr	r2, [r3, #0]
10007552:	685b      	ldr	r3, [r3, #4]
10007554:	1c29      	adds	r1, r5, #0
10007556:	9606      	str	r6, [sp, #24]
10007558:	9707      	str	r7, [sp, #28]
1000755a:	9208      	str	r2, [sp, #32]
1000755c:	9309      	str	r3, [sp, #36]	; 0x24
1000755e:	f004 fabd 	bl	1000badc <__aeabi_dsub>
10007562:	9a08      	ldr	r2, [sp, #32]
10007564:	9b09      	ldr	r3, [sp, #36]	; 0x24
10007566:	1c06      	adds	r6, r0, #0
10007568:	1c0f      	adds	r7, r1, #0
1000756a:	9806      	ldr	r0, [sp, #24]
1000756c:	9907      	ldr	r1, [sp, #28]
1000756e:	f003 f8b5 	bl	1000a6dc <__aeabi_dadd>
10007572:	1c02      	adds	r2, r0, #0
10007574:	1c0b      	adds	r3, r1, #0
10007576:	2000      	movs	r0, #0
10007578:	49ca      	ldr	r1, [pc, #808]	; (100078a4 <__ieee754_pow+0x598>)
1000757a:	f003 fbd7 	bl	1000ad2c <__aeabi_ddiv>
1000757e:	1c02      	adds	r2, r0, #0
10007580:	1c0b      	adds	r3, r1, #0
10007582:	1c30      	adds	r0, r6, #0
10007584:	1c39      	adds	r1, r7, #0
10007586:	920a      	str	r2, [sp, #40]	; 0x28
10007588:	930b      	str	r3, [sp, #44]	; 0x2c
1000758a:	f004 f80d 	bl	1000b5a8 <__aeabi_dmul>
1000758e:	1c0a      	adds	r2, r1, #0
10007590:	1c01      	adds	r1, r0, #0
10007592:	1c13      	adds	r3, r2, #0
10007594:	9104      	str	r1, [sp, #16]
10007596:	9205      	str	r2, [sp, #20]
10007598:	2200      	movs	r2, #0
1000759a:	9202      	str	r2, [sp, #8]
1000759c:	9303      	str	r3, [sp, #12]
1000759e:	2380      	movs	r3, #128	; 0x80
100075a0:	106d      	asrs	r5, r5, #1
100075a2:	059b      	lsls	r3, r3, #22
100075a4:	431d      	orrs	r5, r3
100075a6:	2380      	movs	r3, #128	; 0x80
100075a8:	2000      	movs	r0, #0
100075aa:	031b      	lsls	r3, r3, #12
100075ac:	18eb      	adds	r3, r5, r3
100075ae:	1919      	adds	r1, r3, r4
100075b0:	1c0d      	adds	r5, r1, #0
100075b2:	1c04      	adds	r4, r0, #0
100075b4:	9802      	ldr	r0, [sp, #8]
100075b6:	9903      	ldr	r1, [sp, #12]
100075b8:	1c22      	adds	r2, r4, #0
100075ba:	1c2b      	adds	r3, r5, #0
100075bc:	f003 fff4 	bl	1000b5a8 <__aeabi_dmul>
100075c0:	1c02      	adds	r2, r0, #0
100075c2:	1c0b      	adds	r3, r1, #0
100075c4:	1c30      	adds	r0, r6, #0
100075c6:	1c39      	adds	r1, r7, #0
100075c8:	f004 fa88 	bl	1000badc <__aeabi_dsub>
100075cc:	9a08      	ldr	r2, [sp, #32]
100075ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
100075d0:	1c06      	adds	r6, r0, #0
100075d2:	1c0f      	adds	r7, r1, #0
100075d4:	1c20      	adds	r0, r4, #0
100075d6:	1c29      	adds	r1, r5, #0
100075d8:	f004 fa80 	bl	1000badc <__aeabi_dsub>
100075dc:	1c02      	adds	r2, r0, #0
100075de:	1c0b      	adds	r3, r1, #0
100075e0:	9806      	ldr	r0, [sp, #24]
100075e2:	9907      	ldr	r1, [sp, #28]
100075e4:	f004 fa7a 	bl	1000badc <__aeabi_dsub>
100075e8:	1c02      	adds	r2, r0, #0
100075ea:	1c0b      	adds	r3, r1, #0
100075ec:	9802      	ldr	r0, [sp, #8]
100075ee:	9903      	ldr	r1, [sp, #12]
100075f0:	f003 ffda 	bl	1000b5a8 <__aeabi_dmul>
100075f4:	1c02      	adds	r2, r0, #0
100075f6:	1c0b      	adds	r3, r1, #0
100075f8:	1c30      	adds	r0, r6, #0
100075fa:	1c39      	adds	r1, r7, #0
100075fc:	f004 fa6e 	bl	1000badc <__aeabi_dsub>
10007600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10007602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10007604:	f003 ffd0 	bl	1000b5a8 <__aeabi_dmul>
10007608:	9a04      	ldr	r2, [sp, #16]
1000760a:	9b05      	ldr	r3, [sp, #20]
1000760c:	9006      	str	r0, [sp, #24]
1000760e:	9107      	str	r1, [sp, #28]
10007610:	1c10      	adds	r0, r2, #0
10007612:	1c19      	adds	r1, r3, #0
10007614:	f003 ffc8 	bl	1000b5a8 <__aeabi_dmul>
10007618:	1c04      	adds	r4, r0, #0
1000761a:	1c0d      	adds	r5, r1, #0
1000761c:	1c22      	adds	r2, r4, #0
1000761e:	1c2b      	adds	r3, r5, #0
10007620:	f003 ffc2 	bl	1000b5a8 <__aeabi_dmul>
10007624:	4aa4      	ldr	r2, [pc, #656]	; (100078b8 <__ieee754_pow+0x5ac>)
10007626:	1c06      	adds	r6, r0, #0
10007628:	1c0f      	adds	r7, r1, #0
1000762a:	1c20      	adds	r0, r4, #0
1000762c:	1c29      	adds	r1, r5, #0
1000762e:	4ba3      	ldr	r3, [pc, #652]	; (100078bc <__ieee754_pow+0x5b0>)
10007630:	f003 ffba 	bl	1000b5a8 <__aeabi_dmul>
10007634:	4aa2      	ldr	r2, [pc, #648]	; (100078c0 <__ieee754_pow+0x5b4>)
10007636:	4ba3      	ldr	r3, [pc, #652]	; (100078c4 <__ieee754_pow+0x5b8>)
10007638:	f003 f850 	bl	1000a6dc <__aeabi_dadd>
1000763c:	1c22      	adds	r2, r4, #0
1000763e:	1c2b      	adds	r3, r5, #0
10007640:	f003 ffb2 	bl	1000b5a8 <__aeabi_dmul>
10007644:	4aa0      	ldr	r2, [pc, #640]	; (100078c8 <__ieee754_pow+0x5bc>)
10007646:	4ba1      	ldr	r3, [pc, #644]	; (100078cc <__ieee754_pow+0x5c0>)
10007648:	f003 f848 	bl	1000a6dc <__aeabi_dadd>
1000764c:	1c22      	adds	r2, r4, #0
1000764e:	1c2b      	adds	r3, r5, #0
10007650:	f003 ffaa 	bl	1000b5a8 <__aeabi_dmul>
10007654:	4a9e      	ldr	r2, [pc, #632]	; (100078d0 <__ieee754_pow+0x5c4>)
10007656:	4b9f      	ldr	r3, [pc, #636]	; (100078d4 <__ieee754_pow+0x5c8>)
10007658:	f003 f840 	bl	1000a6dc <__aeabi_dadd>
1000765c:	1c22      	adds	r2, r4, #0
1000765e:	1c2b      	adds	r3, r5, #0
10007660:	f003 ffa2 	bl	1000b5a8 <__aeabi_dmul>
10007664:	4a9c      	ldr	r2, [pc, #624]	; (100078d8 <__ieee754_pow+0x5cc>)
10007666:	4b9d      	ldr	r3, [pc, #628]	; (100078dc <__ieee754_pow+0x5d0>)
10007668:	f003 f838 	bl	1000a6dc <__aeabi_dadd>
1000766c:	1c22      	adds	r2, r4, #0
1000766e:	1c2b      	adds	r3, r5, #0
10007670:	f003 ff9a 	bl	1000b5a8 <__aeabi_dmul>
10007674:	4a9a      	ldr	r2, [pc, #616]	; (100078e0 <__ieee754_pow+0x5d4>)
10007676:	4b9b      	ldr	r3, [pc, #620]	; (100078e4 <__ieee754_pow+0x5d8>)
10007678:	f003 f830 	bl	1000a6dc <__aeabi_dadd>
1000767c:	1c02      	adds	r2, r0, #0
1000767e:	1c0b      	adds	r3, r1, #0
10007680:	1c30      	adds	r0, r6, #0
10007682:	1c39      	adds	r1, r7, #0
10007684:	f003 ff90 	bl	1000b5a8 <__aeabi_dmul>
10007688:	9a04      	ldr	r2, [sp, #16]
1000768a:	9b05      	ldr	r3, [sp, #20]
1000768c:	1c04      	adds	r4, r0, #0
1000768e:	1c0d      	adds	r5, r1, #0
10007690:	9802      	ldr	r0, [sp, #8]
10007692:	9903      	ldr	r1, [sp, #12]
10007694:	f003 f822 	bl	1000a6dc <__aeabi_dadd>
10007698:	9a06      	ldr	r2, [sp, #24]
1000769a:	9b07      	ldr	r3, [sp, #28]
1000769c:	f003 ff84 	bl	1000b5a8 <__aeabi_dmul>
100076a0:	1c22      	adds	r2, r4, #0
100076a2:	1c2b      	adds	r3, r5, #0
100076a4:	f003 f81a 	bl	1000a6dc <__aeabi_dadd>
100076a8:	9b02      	ldr	r3, [sp, #8]
100076aa:	9c03      	ldr	r4, [sp, #12]
100076ac:	1c06      	adds	r6, r0, #0
100076ae:	1c0f      	adds	r7, r1, #0
100076b0:	1c1a      	adds	r2, r3, #0
100076b2:	1c18      	adds	r0, r3, #0
100076b4:	1c21      	adds	r1, r4, #0
100076b6:	1c23      	adds	r3, r4, #0
100076b8:	f003 ff76 	bl	1000b5a8 <__aeabi_dmul>
100076bc:	1c0a      	adds	r2, r1, #0
100076be:	1c01      	adds	r1, r0, #0
100076c0:	4b89      	ldr	r3, [pc, #548]	; (100078e8 <__ieee754_pow+0x5dc>)
100076c2:	9108      	str	r1, [sp, #32]
100076c4:	9209      	str	r2, [sp, #36]	; 0x24
100076c6:	1c11      	adds	r1, r2, #0
100076c8:	2200      	movs	r2, #0
100076ca:	f003 f807 	bl	1000a6dc <__aeabi_dadd>
100076ce:	1c32      	adds	r2, r6, #0
100076d0:	1c3b      	adds	r3, r7, #0
100076d2:	f003 f803 	bl	1000a6dc <__aeabi_dadd>
100076d6:	2400      	movs	r4, #0
100076d8:	1c0d      	adds	r5, r1, #0
100076da:	9802      	ldr	r0, [sp, #8]
100076dc:	9903      	ldr	r1, [sp, #12]
100076de:	1c22      	adds	r2, r4, #0
100076e0:	1c2b      	adds	r3, r5, #0
100076e2:	f003 ff61 	bl	1000b5a8 <__aeabi_dmul>
100076e6:	1c22      	adds	r2, r4, #0
100076e8:	1c2b      	adds	r3, r5, #0
100076ea:	9002      	str	r0, [sp, #8]
100076ec:	9103      	str	r1, [sp, #12]
100076ee:	9806      	ldr	r0, [sp, #24]
100076f0:	9907      	ldr	r1, [sp, #28]
100076f2:	f003 ff59 	bl	1000b5a8 <__aeabi_dmul>
100076f6:	2200      	movs	r2, #0
100076f8:	9006      	str	r0, [sp, #24]
100076fa:	9107      	str	r1, [sp, #28]
100076fc:	4b7a      	ldr	r3, [pc, #488]	; (100078e8 <__ieee754_pow+0x5dc>)
100076fe:	1c20      	adds	r0, r4, #0
10007700:	1c29      	adds	r1, r5, #0
10007702:	f004 f9eb 	bl	1000badc <__aeabi_dsub>
10007706:	9a08      	ldr	r2, [sp, #32]
10007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000770a:	f004 f9e7 	bl	1000badc <__aeabi_dsub>
1000770e:	1c02      	adds	r2, r0, #0
10007710:	1c0b      	adds	r3, r1, #0
10007712:	1c30      	adds	r0, r6, #0
10007714:	1c39      	adds	r1, r7, #0
10007716:	f004 f9e1 	bl	1000badc <__aeabi_dsub>
1000771a:	9a04      	ldr	r2, [sp, #16]
1000771c:	9b05      	ldr	r3, [sp, #20]
1000771e:	f003 ff43 	bl	1000b5a8 <__aeabi_dmul>
10007722:	1c02      	adds	r2, r0, #0
10007724:	1c0b      	adds	r3, r1, #0
10007726:	9806      	ldr	r0, [sp, #24]
10007728:	9907      	ldr	r1, [sp, #28]
1000772a:	f002 ffd7 	bl	1000a6dc <__aeabi_dadd>
1000772e:	1c06      	adds	r6, r0, #0
10007730:	1c0f      	adds	r7, r1, #0
10007732:	9802      	ldr	r0, [sp, #8]
10007734:	9903      	ldr	r1, [sp, #12]
10007736:	1c32      	adds	r2, r6, #0
10007738:	1c3b      	adds	r3, r7, #0
1000773a:	f002 ffcf 	bl	1000a6dc <__aeabi_dadd>
1000773e:	2400      	movs	r4, #0
10007740:	22e0      	movs	r2, #224	; 0xe0
10007742:	1c20      	adds	r0, r4, #0
10007744:	0612      	lsls	r2, r2, #24
10007746:	4b69      	ldr	r3, [pc, #420]	; (100078ec <__ieee754_pow+0x5e0>)
10007748:	1c0d      	adds	r5, r1, #0
1000774a:	f003 ff2d 	bl	1000b5a8 <__aeabi_dmul>
1000774e:	4a68      	ldr	r2, [pc, #416]	; (100078f0 <__ieee754_pow+0x5e4>)
10007750:	9006      	str	r0, [sp, #24]
10007752:	9107      	str	r1, [sp, #28]
10007754:	4b67      	ldr	r3, [pc, #412]	; (100078f4 <__ieee754_pow+0x5e8>)
10007756:	1c20      	adds	r0, r4, #0
10007758:	1c29      	adds	r1, r5, #0
1000775a:	f003 ff25 	bl	1000b5a8 <__aeabi_dmul>
1000775e:	9a02      	ldr	r2, [sp, #8]
10007760:	9b03      	ldr	r3, [sp, #12]
10007762:	9004      	str	r0, [sp, #16]
10007764:	9105      	str	r1, [sp, #20]
10007766:	1c20      	adds	r0, r4, #0
10007768:	1c29      	adds	r1, r5, #0
1000776a:	f004 f9b7 	bl	1000badc <__aeabi_dsub>
1000776e:	1c02      	adds	r2, r0, #0
10007770:	1c0b      	adds	r3, r1, #0
10007772:	1c30      	adds	r0, r6, #0
10007774:	1c39      	adds	r1, r7, #0
10007776:	f004 f9b1 	bl	1000badc <__aeabi_dsub>
1000777a:	4a5f      	ldr	r2, [pc, #380]	; (100078f8 <__ieee754_pow+0x5ec>)
1000777c:	4b5b      	ldr	r3, [pc, #364]	; (100078ec <__ieee754_pow+0x5e0>)
1000777e:	f003 ff13 	bl	1000b5a8 <__aeabi_dmul>
10007782:	1c02      	adds	r2, r0, #0
10007784:	1c0b      	adds	r3, r1, #0
10007786:	9804      	ldr	r0, [sp, #16]
10007788:	9905      	ldr	r1, [sp, #20]
1000778a:	f002 ffa7 	bl	1000a6dc <__aeabi_dadd>
1000778e:	4b5b      	ldr	r3, [pc, #364]	; (100078fc <__ieee754_pow+0x5f0>)
10007790:	444b      	add	r3, r9
10007792:	681a      	ldr	r2, [r3, #0]
10007794:	685b      	ldr	r3, [r3, #4]
10007796:	f002 ffa1 	bl	1000a6dc <__aeabi_dadd>
1000779a:	1c06      	adds	r6, r0, #0
1000779c:	4650      	mov	r0, sl
1000779e:	1c0f      	adds	r7, r1, #0
100077a0:	f004 fd4c 	bl	1000c23c <__aeabi_i2d>
100077a4:	1c04      	adds	r4, r0, #0
100077a6:	1c0d      	adds	r5, r1, #0
100077a8:	9806      	ldr	r0, [sp, #24]
100077aa:	9907      	ldr	r1, [sp, #28]
100077ac:	4b54      	ldr	r3, [pc, #336]	; (10007900 <__ieee754_pow+0x5f4>)
100077ae:	444b      	add	r3, r9
100077b0:	681a      	ldr	r2, [r3, #0]
100077b2:	685b      	ldr	r3, [r3, #4]
100077b4:	9204      	str	r2, [sp, #16]
100077b6:	9305      	str	r3, [sp, #20]
100077b8:	1c32      	adds	r2, r6, #0
100077ba:	1c3b      	adds	r3, r7, #0
100077bc:	f002 ff8e 	bl	1000a6dc <__aeabi_dadd>
100077c0:	9a04      	ldr	r2, [sp, #16]
100077c2:	9b05      	ldr	r3, [sp, #20]
100077c4:	f002 ff8a 	bl	1000a6dc <__aeabi_dadd>
100077c8:	1c22      	adds	r2, r4, #0
100077ca:	1c2b      	adds	r3, r5, #0
100077cc:	f002 ff86 	bl	1000a6dc <__aeabi_dadd>
100077d0:	2000      	movs	r0, #0
100077d2:	1c22      	adds	r2, r4, #0
100077d4:	1c2b      	adds	r3, r5, #0
100077d6:	9002      	str	r0, [sp, #8]
100077d8:	9103      	str	r1, [sp, #12]
100077da:	f004 f97f 	bl	1000badc <__aeabi_dsub>
100077de:	9a04      	ldr	r2, [sp, #16]
100077e0:	9b05      	ldr	r3, [sp, #20]
100077e2:	f004 f97b 	bl	1000badc <__aeabi_dsub>
100077e6:	9a06      	ldr	r2, [sp, #24]
100077e8:	9b07      	ldr	r3, [sp, #28]
100077ea:	f004 f977 	bl	1000badc <__aeabi_dsub>
100077ee:	1c02      	adds	r2, r0, #0
100077f0:	1c0b      	adds	r3, r1, #0
100077f2:	1c30      	adds	r0, r6, #0
100077f4:	1c39      	adds	r1, r7, #0
100077f6:	f004 f971 	bl	1000badc <__aeabi_dsub>
100077fa:	9004      	str	r0, [sp, #16]
100077fc:	9105      	str	r1, [sp, #20]
100077fe:	465b      	mov	r3, fp
10007800:	4642      	mov	r2, r8
10007802:	3b01      	subs	r3, #1
10007804:	4313      	orrs	r3, r2
10007806:	d000      	beq.n	1000780a <__ieee754_pow+0x4fe>
10007808:	e1b1      	b.n	10007b6e <__ieee754_pow+0x862>
1000780a:	2300      	movs	r3, #0
1000780c:	4c3d      	ldr	r4, [pc, #244]	; (10007904 <__ieee754_pow+0x5f8>)
1000780e:	9306      	str	r3, [sp, #24]
10007810:	9407      	str	r4, [sp, #28]
10007812:	9b00      	ldr	r3, [sp, #0]
10007814:	9c01      	ldr	r4, [sp, #4]
10007816:	2600      	movs	r6, #0
10007818:	1c18      	adds	r0, r3, #0
1000781a:	1c21      	adds	r1, r4, #0
1000781c:	1c23      	adds	r3, r4, #0
1000781e:	1c32      	adds	r2, r6, #0
10007820:	f004 f95c 	bl	1000badc <__aeabi_dsub>
10007824:	9a02      	ldr	r2, [sp, #8]
10007826:	9b03      	ldr	r3, [sp, #12]
10007828:	f003 febe 	bl	1000b5a8 <__aeabi_dmul>
1000782c:	9a04      	ldr	r2, [sp, #16]
1000782e:	9b05      	ldr	r3, [sp, #20]
10007830:	1c0d      	adds	r5, r1, #0
10007832:	1c27      	adds	r7, r4, #0
10007834:	1c04      	adds	r4, r0, #0
10007836:	9800      	ldr	r0, [sp, #0]
10007838:	9901      	ldr	r1, [sp, #4]
1000783a:	f003 feb5 	bl	1000b5a8 <__aeabi_dmul>
1000783e:	1c02      	adds	r2, r0, #0
10007840:	1c0b      	adds	r3, r1, #0
10007842:	1c20      	adds	r0, r4, #0
10007844:	1c29      	adds	r1, r5, #0
10007846:	f002 ff49 	bl	1000a6dc <__aeabi_dadd>
1000784a:	9a02      	ldr	r2, [sp, #8]
1000784c:	9b03      	ldr	r3, [sp, #12]
1000784e:	9000      	str	r0, [sp, #0]
10007850:	9101      	str	r1, [sp, #4]
10007852:	1c30      	adds	r0, r6, #0
10007854:	1c39      	adds	r1, r7, #0
10007856:	f003 fea7 	bl	1000b5a8 <__aeabi_dmul>
1000785a:	1c04      	adds	r4, r0, #0
1000785c:	1c0d      	adds	r5, r1, #0
1000785e:	9800      	ldr	r0, [sp, #0]
10007860:	9901      	ldr	r1, [sp, #4]
10007862:	1c2b      	adds	r3, r5, #0
10007864:	1c22      	adds	r2, r4, #0
10007866:	f002 ff39 	bl	1000a6dc <__aeabi_dadd>
1000786a:	4b27      	ldr	r3, [pc, #156]	; (10007908 <__ieee754_pow+0x5fc>)
1000786c:	4682      	mov	sl, r0
1000786e:	4689      	mov	r9, r1
10007870:	4299      	cmp	r1, r3
10007872:	dc00      	bgt.n	10007876 <__ieee754_pow+0x56a>
10007874:	e158      	b.n	10007b28 <__ieee754_pow+0x81c>
10007876:	4b25      	ldr	r3, [pc, #148]	; (1000790c <__ieee754_pow+0x600>)
10007878:	444b      	add	r3, r9
1000787a:	4303      	orrs	r3, r0
1000787c:	d000      	beq.n	10007880 <__ieee754_pow+0x574>
1000787e:	e201      	b.n	10007c84 <__ieee754_pow+0x978>
10007880:	9800      	ldr	r0, [sp, #0]
10007882:	9901      	ldr	r1, [sp, #4]
10007884:	4a22      	ldr	r2, [pc, #136]	; (10007910 <__ieee754_pow+0x604>)
10007886:	4b23      	ldr	r3, [pc, #140]	; (10007914 <__ieee754_pow+0x608>)
10007888:	f002 ff28 	bl	1000a6dc <__aeabi_dadd>
1000788c:	1c22      	adds	r2, r4, #0
1000788e:	1c06      	adds	r6, r0, #0
10007890:	1c0f      	adds	r7, r1, #0
10007892:	1c2b      	adds	r3, r5, #0
10007894:	e040      	b.n	10007918 <__ieee754_pow+0x60c>
10007896:	46c0      	nop			; (mov r8, r8)
10007898:	000fffff 	.word	0x000fffff
1000789c:	43400000 	.word	0x43400000
100078a0:	fffffc01 	.word	0xfffffc01
100078a4:	3ff00000 	.word	0x3ff00000
100078a8:	0003988e 	.word	0x0003988e
100078ac:	000bb679 	.word	0x000bb679
100078b0:	fff00000 	.word	0xfff00000
100078b4:	1000cc28 	.word	0x1000cc28
100078b8:	4a454eef 	.word	0x4a454eef
100078bc:	3fca7e28 	.word	0x3fca7e28
100078c0:	93c9db65 	.word	0x93c9db65
100078c4:	3fcd864a 	.word	0x3fcd864a
100078c8:	a91d4101 	.word	0xa91d4101
100078cc:	3fd17460 	.word	0x3fd17460
100078d0:	518f264d 	.word	0x518f264d
100078d4:	3fd55555 	.word	0x3fd55555
100078d8:	db6fabff 	.word	0xdb6fabff
100078dc:	3fdb6db6 	.word	0x3fdb6db6
100078e0:	33333303 	.word	0x33333303
100078e4:	3fe33333 	.word	0x3fe33333
100078e8:	40080000 	.word	0x40080000
100078ec:	3feec709 	.word	0x3feec709
100078f0:	145b01f5 	.word	0x145b01f5
100078f4:	be3e2fe0 	.word	0xbe3e2fe0
100078f8:	dc3a03fd 	.word	0xdc3a03fd
100078fc:	1000cc18 	.word	0x1000cc18
10007900:	1000cc08 	.word	0x1000cc08
10007904:	bff00000 	.word	0xbff00000
10007908:	408fffff 	.word	0x408fffff
1000790c:	bf700000 	.word	0xbf700000
10007910:	652b82fe 	.word	0x652b82fe
10007914:	3c971547 	.word	0x3c971547
10007918:	4650      	mov	r0, sl
1000791a:	4649      	mov	r1, r9
1000791c:	f004 f8de 	bl	1000badc <__aeabi_dsub>
10007920:	1c02      	adds	r2, r0, #0
10007922:	1c0b      	adds	r3, r1, #0
10007924:	1c30      	adds	r0, r6, #0
10007926:	1c39      	adds	r1, r7, #0
10007928:	f001 ff4e 	bl	100097c8 <__aeabi_dcmpgt>
1000792c:	464e      	mov	r6, r9
1000792e:	2800      	cmp	r0, #0
10007930:	d000      	beq.n	10007934 <__ieee754_pow+0x628>
10007932:	e1a7      	b.n	10007c84 <__ieee754_pow+0x978>
10007934:	4be7      	ldr	r3, [pc, #924]	; (10007cd4 <__ieee754_pow+0x9c8>)
10007936:	1536      	asrs	r6, r6, #20
10007938:	18f1      	adds	r1, r6, r3
1000793a:	2380      	movs	r3, #128	; 0x80
1000793c:	035b      	lsls	r3, r3, #13
1000793e:	4698      	mov	r8, r3
10007940:	410b      	asrs	r3, r1
10007942:	1c19      	adds	r1, r3, #0
10007944:	48e4      	ldr	r0, [pc, #912]	; (10007cd8 <__ieee754_pow+0x9cc>)
10007946:	4449      	add	r1, r9
10007948:	4684      	mov	ip, r0
1000794a:	004f      	lsls	r7, r1, #1
1000794c:	0d7f      	lsrs	r7, r7, #21
1000794e:	44bc      	add	ip, r7
10007950:	4666      	mov	r6, ip
10007952:	48e2      	ldr	r0, [pc, #904]	; (10007cdc <__ieee754_pow+0x9d0>)
10007954:	2200      	movs	r2, #0
10007956:	4130      	asrs	r0, r6
10007958:	1c0e      	adds	r6, r1, #0
1000795a:	4386      	bics	r6, r0
1000795c:	4640      	mov	r0, r8
1000795e:	0309      	lsls	r1, r1, #12
10007960:	0b09      	lsrs	r1, r1, #12
10007962:	4308      	orrs	r0, r1
10007964:	4649      	mov	r1, r9
10007966:	1c33      	adds	r3, r6, #0
10007968:	0fce      	lsrs	r6, r1, #31
1000796a:	49dd      	ldr	r1, [pc, #884]	; (10007ce0 <__ieee754_pow+0x9d4>)
1000796c:	1bc9      	subs	r1, r1, r7
1000796e:	4108      	asrs	r0, r1
10007970:	1c01      	adds	r1, r0, #0
10007972:	4270      	negs	r0, r6
10007974:	4041      	eors	r1, r0
10007976:	4689      	mov	r9, r1
10007978:	1c20      	adds	r0, r4, #0
1000797a:	1c29      	adds	r1, r5, #0
1000797c:	f004 f8ae 	bl	1000badc <__aeabi_dsub>
10007980:	1c04      	adds	r4, r0, #0
10007982:	1c0d      	adds	r5, r1, #0
10007984:	9800      	ldr	r0, [sp, #0]
10007986:	9901      	ldr	r1, [sp, #4]
10007988:	1c2b      	adds	r3, r5, #0
1000798a:	44b1      	add	r9, r6
1000798c:	1c22      	adds	r2, r4, #0
1000798e:	f002 fea5 	bl	1000a6dc <__aeabi_dadd>
10007992:	464b      	mov	r3, r9
10007994:	051b      	lsls	r3, r3, #20
10007996:	4698      	mov	r8, r3
10007998:	2000      	movs	r0, #0
1000799a:	2200      	movs	r2, #0
1000799c:	4bd1      	ldr	r3, [pc, #836]	; (10007ce4 <__ieee754_pow+0x9d8>)
1000799e:	1c06      	adds	r6, r0, #0
100079a0:	1c0f      	adds	r7, r1, #0
100079a2:	f003 fe01 	bl	1000b5a8 <__aeabi_dmul>
100079a6:	1c22      	adds	r2, r4, #0
100079a8:	9002      	str	r0, [sp, #8]
100079aa:	9103      	str	r1, [sp, #12]
100079ac:	1c2b      	adds	r3, r5, #0
100079ae:	1c30      	adds	r0, r6, #0
100079b0:	1c39      	adds	r1, r7, #0
100079b2:	f004 f893 	bl	1000badc <__aeabi_dsub>
100079b6:	1c02      	adds	r2, r0, #0
100079b8:	1c0b      	adds	r3, r1, #0
100079ba:	9800      	ldr	r0, [sp, #0]
100079bc:	9901      	ldr	r1, [sp, #4]
100079be:	f004 f88d 	bl	1000badc <__aeabi_dsub>
100079c2:	4ac9      	ldr	r2, [pc, #804]	; (10007ce8 <__ieee754_pow+0x9dc>)
100079c4:	4bc9      	ldr	r3, [pc, #804]	; (10007cec <__ieee754_pow+0x9e0>)
100079c6:	f003 fdef 	bl	1000b5a8 <__aeabi_dmul>
100079ca:	4ac9      	ldr	r2, [pc, #804]	; (10007cf0 <__ieee754_pow+0x9e4>)
100079cc:	1c04      	adds	r4, r0, #0
100079ce:	1c0d      	adds	r5, r1, #0
100079d0:	1c30      	adds	r0, r6, #0
100079d2:	1c39      	adds	r1, r7, #0
100079d4:	4bc7      	ldr	r3, [pc, #796]	; (10007cf4 <__ieee754_pow+0x9e8>)
100079d6:	f003 fde7 	bl	1000b5a8 <__aeabi_dmul>
100079da:	1c02      	adds	r2, r0, #0
100079dc:	1c0b      	adds	r3, r1, #0
100079de:	1c20      	adds	r0, r4, #0
100079e0:	1c29      	adds	r1, r5, #0
100079e2:	f002 fe7b 	bl	1000a6dc <__aeabi_dadd>
100079e6:	1c04      	adds	r4, r0, #0
100079e8:	1c0d      	adds	r5, r1, #0
100079ea:	9802      	ldr	r0, [sp, #8]
100079ec:	9903      	ldr	r1, [sp, #12]
100079ee:	1c22      	adds	r2, r4, #0
100079f0:	1c2b      	adds	r3, r5, #0
100079f2:	f002 fe73 	bl	1000a6dc <__aeabi_dadd>
100079f6:	9a02      	ldr	r2, [sp, #8]
100079f8:	9b03      	ldr	r3, [sp, #12]
100079fa:	1c06      	adds	r6, r0, #0
100079fc:	1c0f      	adds	r7, r1, #0
100079fe:	f004 f86d 	bl	1000badc <__aeabi_dsub>
10007a02:	1c02      	adds	r2, r0, #0
10007a04:	1c0b      	adds	r3, r1, #0
10007a06:	1c20      	adds	r0, r4, #0
10007a08:	1c29      	adds	r1, r5, #0
10007a0a:	f004 f867 	bl	1000badc <__aeabi_dsub>
10007a0e:	1c32      	adds	r2, r6, #0
10007a10:	9000      	str	r0, [sp, #0]
10007a12:	9101      	str	r1, [sp, #4]
10007a14:	1c3b      	adds	r3, r7, #0
10007a16:	1c30      	adds	r0, r6, #0
10007a18:	1c39      	adds	r1, r7, #0
10007a1a:	f003 fdc5 	bl	1000b5a8 <__aeabi_dmul>
10007a1e:	1c04      	adds	r4, r0, #0
10007a20:	1c0d      	adds	r5, r1, #0
10007a22:	4ab5      	ldr	r2, [pc, #724]	; (10007cf8 <__ieee754_pow+0x9ec>)
10007a24:	4bb5      	ldr	r3, [pc, #724]	; (10007cfc <__ieee754_pow+0x9f0>)
10007a26:	f003 fdbf 	bl	1000b5a8 <__aeabi_dmul>
10007a2a:	4ab5      	ldr	r2, [pc, #724]	; (10007d00 <__ieee754_pow+0x9f4>)
10007a2c:	4bb5      	ldr	r3, [pc, #724]	; (10007d04 <__ieee754_pow+0x9f8>)
10007a2e:	f004 f855 	bl	1000badc <__aeabi_dsub>
10007a32:	1c22      	adds	r2, r4, #0
10007a34:	1c2b      	adds	r3, r5, #0
10007a36:	f003 fdb7 	bl	1000b5a8 <__aeabi_dmul>
10007a3a:	4ab3      	ldr	r2, [pc, #716]	; (10007d08 <__ieee754_pow+0x9fc>)
10007a3c:	4bb3      	ldr	r3, [pc, #716]	; (10007d0c <__ieee754_pow+0xa00>)
10007a3e:	f002 fe4d 	bl	1000a6dc <__aeabi_dadd>
10007a42:	1c22      	adds	r2, r4, #0
10007a44:	1c2b      	adds	r3, r5, #0
10007a46:	f003 fdaf 	bl	1000b5a8 <__aeabi_dmul>
10007a4a:	4ab1      	ldr	r2, [pc, #708]	; (10007d10 <__ieee754_pow+0xa04>)
10007a4c:	4bb1      	ldr	r3, [pc, #708]	; (10007d14 <__ieee754_pow+0xa08>)
10007a4e:	f004 f845 	bl	1000badc <__aeabi_dsub>
10007a52:	1c22      	adds	r2, r4, #0
10007a54:	1c2b      	adds	r3, r5, #0
10007a56:	f003 fda7 	bl	1000b5a8 <__aeabi_dmul>
10007a5a:	4aaf      	ldr	r2, [pc, #700]	; (10007d18 <__ieee754_pow+0xa0c>)
10007a5c:	4baf      	ldr	r3, [pc, #700]	; (10007d1c <__ieee754_pow+0xa10>)
10007a5e:	f002 fe3d 	bl	1000a6dc <__aeabi_dadd>
10007a62:	1c22      	adds	r2, r4, #0
10007a64:	1c2b      	adds	r3, r5, #0
10007a66:	f003 fd9f 	bl	1000b5a8 <__aeabi_dmul>
10007a6a:	1c02      	adds	r2, r0, #0
10007a6c:	1c0b      	adds	r3, r1, #0
10007a6e:	1c30      	adds	r0, r6, #0
10007a70:	1c39      	adds	r1, r7, #0
10007a72:	f004 f833 	bl	1000badc <__aeabi_dsub>
10007a76:	1c04      	adds	r4, r0, #0
10007a78:	1c0d      	adds	r5, r1, #0
10007a7a:	1c22      	adds	r2, r4, #0
10007a7c:	1c2b      	adds	r3, r5, #0
10007a7e:	1c30      	adds	r0, r6, #0
10007a80:	1c39      	adds	r1, r7, #0
10007a82:	f003 fd91 	bl	1000b5a8 <__aeabi_dmul>
10007a86:	2380      	movs	r3, #128	; 0x80
10007a88:	9002      	str	r0, [sp, #8]
10007a8a:	9103      	str	r1, [sp, #12]
10007a8c:	2200      	movs	r2, #0
10007a8e:	1c20      	adds	r0, r4, #0
10007a90:	1c29      	adds	r1, r5, #0
10007a92:	05db      	lsls	r3, r3, #23
10007a94:	f004 f822 	bl	1000badc <__aeabi_dsub>
10007a98:	1c02      	adds	r2, r0, #0
10007a9a:	1c0b      	adds	r3, r1, #0
10007a9c:	9802      	ldr	r0, [sp, #8]
10007a9e:	9903      	ldr	r1, [sp, #12]
10007aa0:	f003 f944 	bl	1000ad2c <__aeabi_ddiv>
10007aa4:	9a00      	ldr	r2, [sp, #0]
10007aa6:	9b01      	ldr	r3, [sp, #4]
10007aa8:	1c04      	adds	r4, r0, #0
10007aaa:	1c0d      	adds	r5, r1, #0
10007aac:	1c30      	adds	r0, r6, #0
10007aae:	1c39      	adds	r1, r7, #0
10007ab0:	f003 fd7a 	bl	1000b5a8 <__aeabi_dmul>
10007ab4:	9a00      	ldr	r2, [sp, #0]
10007ab6:	9b01      	ldr	r3, [sp, #4]
10007ab8:	f002 fe10 	bl	1000a6dc <__aeabi_dadd>
10007abc:	1c02      	adds	r2, r0, #0
10007abe:	1c0b      	adds	r3, r1, #0
10007ac0:	1c20      	adds	r0, r4, #0
10007ac2:	1c29      	adds	r1, r5, #0
10007ac4:	f004 f80a 	bl	1000badc <__aeabi_dsub>
10007ac8:	1c32      	adds	r2, r6, #0
10007aca:	1c3b      	adds	r3, r7, #0
10007acc:	f004 f806 	bl	1000badc <__aeabi_dsub>
10007ad0:	1c0b      	adds	r3, r1, #0
10007ad2:	1c02      	adds	r2, r0, #0
10007ad4:	4992      	ldr	r1, [pc, #584]	; (10007d20 <__ieee754_pow+0xa14>)
10007ad6:	2000      	movs	r0, #0
10007ad8:	f004 f800 	bl	1000badc <__aeabi_dsub>
10007adc:	4643      	mov	r3, r8
10007ade:	185c      	adds	r4, r3, r1
10007ae0:	1523      	asrs	r3, r4, #20
10007ae2:	2b00      	cmp	r3, #0
10007ae4:	dc00      	bgt.n	10007ae8 <__ieee754_pow+0x7dc>
10007ae6:	e14f      	b.n	10007d88 <__ieee754_pow+0xa7c>
10007ae8:	1c02      	adds	r2, r0, #0
10007aea:	1c23      	adds	r3, r4, #0
10007aec:	9806      	ldr	r0, [sp, #24]
10007aee:	9907      	ldr	r1, [sp, #28]
10007af0:	f003 fd5a 	bl	1000b5a8 <__aeabi_dmul>
10007af4:	e452      	b.n	1000739c <__ieee754_pow+0x90>
10007af6:	4653      	mov	r3, sl
10007af8:	2b00      	cmp	r3, #0
10007afa:	da00      	bge.n	10007afe <__ieee754_pow+0x7f2>
10007afc:	e47c      	b.n	100073f8 <__ieee754_pow+0xec>
10007afe:	2000      	movs	r0, #0
10007b00:	2100      	movs	r1, #0
10007b02:	e44b      	b.n	1000739c <__ieee754_pow+0x90>
10007b04:	4987      	ldr	r1, [pc, #540]	; (10007d24 <__ieee754_pow+0xa18>)
10007b06:	468c      	mov	ip, r1
10007b08:	4659      	mov	r1, fp
10007b0a:	4464      	add	r4, ip
10007b0c:	430c      	orrs	r4, r1
10007b0e:	d000      	beq.n	10007b12 <__ieee754_pow+0x806>
10007b10:	e0c4      	b.n	10007c9c <__ieee754_pow+0x990>
10007b12:	1c10      	adds	r0, r2, #0
10007b14:	1c19      	adds	r1, r3, #0
10007b16:	e4c9      	b.n	100074ac <__ieee754_pow+0x1a0>
10007b18:	1c30      	adds	r0, r6, #0
10007b1a:	1c29      	adds	r1, r5, #0
10007b1c:	1c32      	adds	r2, r6, #0
10007b1e:	1c2b      	adds	r3, r5, #0
10007b20:	f003 fd42 	bl	1000b5a8 <__aeabi_dmul>
10007b24:	f7ff fc3a 	bl	1000739c <__ieee754_pow+0x90>
10007b28:	4b7f      	ldr	r3, [pc, #508]	; (10007d28 <__ieee754_pow+0xa1c>)
10007b2a:	004e      	lsls	r6, r1, #1
10007b2c:	0876      	lsrs	r6, r6, #1
10007b2e:	429e      	cmp	r6, r3
10007b30:	dc00      	bgt.n	10007b34 <__ieee754_pow+0x828>
10007b32:	e117      	b.n	10007d64 <__ieee754_pow+0xa58>
10007b34:	4b7d      	ldr	r3, [pc, #500]	; (10007d2c <__ieee754_pow+0xa20>)
10007b36:	444b      	add	r3, r9
10007b38:	4303      	orrs	r3, r0
10007b3a:	d10c      	bne.n	10007b56 <__ieee754_pow+0x84a>
10007b3c:	1c22      	adds	r2, r4, #0
10007b3e:	1c2b      	adds	r3, r5, #0
10007b40:	f003 ffcc 	bl	1000badc <__aeabi_dsub>
10007b44:	1c02      	adds	r2, r0, #0
10007b46:	1c0b      	adds	r3, r1, #0
10007b48:	9800      	ldr	r0, [sp, #0]
10007b4a:	9901      	ldr	r1, [sp, #4]
10007b4c:	f001 fe32 	bl	100097b4 <__aeabi_dcmple>
10007b50:	2800      	cmp	r0, #0
10007b52:	d100      	bne.n	10007b56 <__ieee754_pow+0x84a>
10007b54:	e6ee      	b.n	10007934 <__ieee754_pow+0x628>
10007b56:	9806      	ldr	r0, [sp, #24]
10007b58:	9907      	ldr	r1, [sp, #28]
10007b5a:	4a75      	ldr	r2, [pc, #468]	; (10007d30 <__ieee754_pow+0xa24>)
10007b5c:	4b75      	ldr	r3, [pc, #468]	; (10007d34 <__ieee754_pow+0xa28>)
10007b5e:	f003 fd23 	bl	1000b5a8 <__aeabi_dmul>
10007b62:	4a73      	ldr	r2, [pc, #460]	; (10007d30 <__ieee754_pow+0xa24>)
10007b64:	4b73      	ldr	r3, [pc, #460]	; (10007d34 <__ieee754_pow+0xa28>)
10007b66:	f003 fd1f 	bl	1000b5a8 <__aeabi_dmul>
10007b6a:	f7ff fc17 	bl	1000739c <__ieee754_pow+0x90>
10007b6e:	2300      	movs	r3, #0
10007b70:	4c6b      	ldr	r4, [pc, #428]	; (10007d20 <__ieee754_pow+0xa14>)
10007b72:	9306      	str	r3, [sp, #24]
10007b74:	9407      	str	r4, [sp, #28]
10007b76:	e64c      	b.n	10007812 <__ieee754_pow+0x506>
10007b78:	4653      	mov	r3, sl
10007b7a:	2b00      	cmp	r3, #0
10007b7c:	dabf      	bge.n	10007afe <__ieee754_pow+0x7f2>
10007b7e:	9b00      	ldr	r3, [sp, #0]
10007b80:	9c01      	ldr	r4, [sp, #4]
10007b82:	2280      	movs	r2, #128	; 0x80
10007b84:	0612      	lsls	r2, r2, #24
10007b86:	1c18      	adds	r0, r3, #0
10007b88:	4694      	mov	ip, r2
10007b8a:	1c23      	adds	r3, r4, #0
10007b8c:	4463      	add	r3, ip
10007b8e:	1c19      	adds	r1, r3, #0
10007b90:	f7ff fc04 	bl	1000739c <__ieee754_pow+0x90>
10007b94:	2000      	movs	r0, #0
10007b96:	4962      	ldr	r1, [pc, #392]	; (10007d20 <__ieee754_pow+0xa14>)
10007b98:	f003 f8c8 	bl	1000ad2c <__aeabi_ddiv>
10007b9c:	1c02      	adds	r2, r0, #0
10007b9e:	1c0b      	adds	r3, r1, #0
10007ba0:	e43c      	b.n	1000741c <__ieee754_pow+0x110>
10007ba2:	2400      	movs	r4, #0
10007ba4:	2100      	movs	r1, #0
10007ba6:	e4cc      	b.n	10007542 <__ieee754_pow+0x236>
10007ba8:	4963      	ldr	r1, [pc, #396]	; (10007d38 <__ieee754_pow+0xa2c>)
10007baa:	428c      	cmp	r4, r1
10007bac:	dda3      	ble.n	10007af6 <__ieee754_pow+0x7ea>
10007bae:	495c      	ldr	r1, [pc, #368]	; (10007d20 <__ieee754_pow+0xa14>)
10007bb0:	428c      	cmp	r4, r1
10007bb2:	dd01      	ble.n	10007bb8 <__ieee754_pow+0x8ac>
10007bb4:	f7ff fc1c 	bl	100073f0 <__ieee754_pow+0xe4>
10007bb8:	1c10      	adds	r0, r2, #0
10007bba:	1c19      	adds	r1, r3, #0
10007bbc:	2200      	movs	r2, #0
10007bbe:	4b58      	ldr	r3, [pc, #352]	; (10007d20 <__ieee754_pow+0xa14>)
10007bc0:	f003 ff8c 	bl	1000badc <__aeabi_dsub>
10007bc4:	22c0      	movs	r2, #192	; 0xc0
10007bc6:	4b5d      	ldr	r3, [pc, #372]	; (10007d3c <__ieee754_pow+0xa30>)
10007bc8:	05d2      	lsls	r2, r2, #23
10007bca:	1c04      	adds	r4, r0, #0
10007bcc:	1c0d      	adds	r5, r1, #0
10007bce:	f003 fceb 	bl	1000b5a8 <__aeabi_dmul>
10007bd2:	4a5b      	ldr	r2, [pc, #364]	; (10007d40 <__ieee754_pow+0xa34>)
10007bd4:	1c06      	adds	r6, r0, #0
10007bd6:	1c0f      	adds	r7, r1, #0
10007bd8:	1c20      	adds	r0, r4, #0
10007bda:	1c29      	adds	r1, r5, #0
10007bdc:	4b59      	ldr	r3, [pc, #356]	; (10007d44 <__ieee754_pow+0xa38>)
10007bde:	f003 fce3 	bl	1000b5a8 <__aeabi_dmul>
10007be2:	1c22      	adds	r2, r4, #0
10007be4:	9002      	str	r0, [sp, #8]
10007be6:	9103      	str	r1, [sp, #12]
10007be8:	1c2b      	adds	r3, r5, #0
10007bea:	1c20      	adds	r0, r4, #0
10007bec:	1c29      	adds	r1, r5, #0
10007bee:	f003 fcdb 	bl	1000b5a8 <__aeabi_dmul>
10007bf2:	2200      	movs	r2, #0
10007bf4:	9004      	str	r0, [sp, #16]
10007bf6:	9105      	str	r1, [sp, #20]
10007bf8:	4b53      	ldr	r3, [pc, #332]	; (10007d48 <__ieee754_pow+0xa3c>)
10007bfa:	1c20      	adds	r0, r4, #0
10007bfc:	1c29      	adds	r1, r5, #0
10007bfe:	f003 fcd3 	bl	1000b5a8 <__aeabi_dmul>
10007c02:	1c02      	adds	r2, r0, #0
10007c04:	1c0b      	adds	r3, r1, #0
10007c06:	4851      	ldr	r0, [pc, #324]	; (10007d4c <__ieee754_pow+0xa40>)
10007c08:	4951      	ldr	r1, [pc, #324]	; (10007d50 <__ieee754_pow+0xa44>)
10007c0a:	f003 ff67 	bl	1000badc <__aeabi_dsub>
10007c0e:	1c22      	adds	r2, r4, #0
10007c10:	1c2b      	adds	r3, r5, #0
10007c12:	f003 fcc9 	bl	1000b5a8 <__aeabi_dmul>
10007c16:	1c02      	adds	r2, r0, #0
10007c18:	1c0b      	adds	r3, r1, #0
10007c1a:	2000      	movs	r0, #0
10007c1c:	494d      	ldr	r1, [pc, #308]	; (10007d54 <__ieee754_pow+0xa48>)
10007c1e:	f003 ff5d 	bl	1000badc <__aeabi_dsub>
10007c22:	1c02      	adds	r2, r0, #0
10007c24:	1c0b      	adds	r3, r1, #0
10007c26:	9804      	ldr	r0, [sp, #16]
10007c28:	9905      	ldr	r1, [sp, #20]
10007c2a:	f003 fcbd 	bl	1000b5a8 <__aeabi_dmul>
10007c2e:	4a4a      	ldr	r2, [pc, #296]	; (10007d58 <__ieee754_pow+0xa4c>)
10007c30:	4b42      	ldr	r3, [pc, #264]	; (10007d3c <__ieee754_pow+0xa30>)
10007c32:	f003 fcb9 	bl	1000b5a8 <__aeabi_dmul>
10007c36:	1c02      	adds	r2, r0, #0
10007c38:	1c0b      	adds	r3, r1, #0
10007c3a:	9802      	ldr	r0, [sp, #8]
10007c3c:	9903      	ldr	r1, [sp, #12]
10007c3e:	f003 ff4d 	bl	1000badc <__aeabi_dsub>
10007c42:	1c04      	adds	r4, r0, #0
10007c44:	1c0d      	adds	r5, r1, #0
10007c46:	1c22      	adds	r2, r4, #0
10007c48:	1c2b      	adds	r3, r5, #0
10007c4a:	1c30      	adds	r0, r6, #0
10007c4c:	1c39      	adds	r1, r7, #0
10007c4e:	f002 fd45 	bl	1000a6dc <__aeabi_dadd>
10007c52:	2200      	movs	r2, #0
10007c54:	1c10      	adds	r0, r2, #0
10007c56:	1c3b      	adds	r3, r7, #0
10007c58:	1c32      	adds	r2, r6, #0
10007c5a:	9002      	str	r0, [sp, #8]
10007c5c:	9103      	str	r1, [sp, #12]
10007c5e:	f003 ff3d 	bl	1000badc <__aeabi_dsub>
10007c62:	1c02      	adds	r2, r0, #0
10007c64:	1c0b      	adds	r3, r1, #0
10007c66:	1c20      	adds	r0, r4, #0
10007c68:	1c29      	adds	r1, r5, #0
10007c6a:	f003 ff37 	bl	1000badc <__aeabi_dsub>
10007c6e:	9004      	str	r0, [sp, #16]
10007c70:	9105      	str	r1, [sp, #20]
10007c72:	e5c4      	b.n	100077fe <__ieee754_pow+0x4f2>
10007c74:	1c32      	adds	r2, r6, #0
10007c76:	1c2b      	adds	r3, r5, #0
10007c78:	2000      	movs	r0, #0
10007c7a:	4929      	ldr	r1, [pc, #164]	; (10007d20 <__ieee754_pow+0xa14>)
10007c7c:	f003 f856 	bl	1000ad2c <__aeabi_ddiv>
10007c80:	f7ff fb8c 	bl	1000739c <__ieee754_pow+0x90>
10007c84:	9806      	ldr	r0, [sp, #24]
10007c86:	9907      	ldr	r1, [sp, #28]
10007c88:	4a34      	ldr	r2, [pc, #208]	; (10007d5c <__ieee754_pow+0xa50>)
10007c8a:	4b35      	ldr	r3, [pc, #212]	; (10007d60 <__ieee754_pow+0xa54>)
10007c8c:	f003 fc8c 	bl	1000b5a8 <__aeabi_dmul>
10007c90:	4a32      	ldr	r2, [pc, #200]	; (10007d5c <__ieee754_pow+0xa50>)
10007c92:	4b33      	ldr	r3, [pc, #204]	; (10007d60 <__ieee754_pow+0xa54>)
10007c94:	f003 fc88 	bl	1000b5a8 <__aeabi_dmul>
10007c98:	f7ff fb80 	bl	1000739c <__ieee754_pow+0x90>
10007c9c:	4659      	mov	r1, fp
10007c9e:	1c10      	adds	r0, r2, #0
10007ca0:	2901      	cmp	r1, #1
10007ca2:	d06c      	beq.n	10007d7e <__ieee754_pow+0xa72>
10007ca4:	1c19      	adds	r1, r3, #0
10007ca6:	f7ff fb79 	bl	1000739c <__ieee754_pow+0x90>
10007caa:	2a00      	cmp	r2, #0
10007cac:	d001      	beq.n	10007cb2 <__ieee754_pow+0x9a6>
10007cae:	f7ff fb82 	bl	100073b6 <__ieee754_pow+0xaa>
10007cb2:	1c3a      	adds	r2, r7, #0
10007cb4:	1a09      	subs	r1, r1, r0
10007cb6:	410a      	asrs	r2, r1
10007cb8:	1c13      	adds	r3, r2, #0
10007cba:	408b      	lsls	r3, r1
10007cbc:	42bb      	cmp	r3, r7
10007cbe:	d001      	beq.n	10007cc4 <__ieee754_pow+0x9b8>
10007cc0:	f7ff fb50 	bl	10007364 <__ieee754_pow+0x58>
10007cc4:	2301      	movs	r3, #1
10007cc6:	4013      	ands	r3, r2
10007cc8:	2202      	movs	r2, #2
10007cca:	1ad3      	subs	r3, r2, r3
10007ccc:	469b      	mov	fp, r3
10007cce:	f7ff fb49 	bl	10007364 <__ieee754_pow+0x58>
10007cd2:	46c0      	nop			; (mov r8, r8)
10007cd4:	fffffc02 	.word	0xfffffc02
10007cd8:	fffffc01 	.word	0xfffffc01
10007cdc:	000fffff 	.word	0x000fffff
10007ce0:	00000413 	.word	0x00000413
10007ce4:	3fe62e43 	.word	0x3fe62e43
10007ce8:	fefa39ef 	.word	0xfefa39ef
10007cec:	3fe62e42 	.word	0x3fe62e42
10007cf0:	0ca86c39 	.word	0x0ca86c39
10007cf4:	be205c61 	.word	0xbe205c61
10007cf8:	72bea4d0 	.word	0x72bea4d0
10007cfc:	3e663769 	.word	0x3e663769
10007d00:	c5d26bf1 	.word	0xc5d26bf1
10007d04:	3ebbbd41 	.word	0x3ebbbd41
10007d08:	af25de2c 	.word	0xaf25de2c
10007d0c:	3f11566a 	.word	0x3f11566a
10007d10:	16bebd93 	.word	0x16bebd93
10007d14:	3f66c16c 	.word	0x3f66c16c
10007d18:	5555553e 	.word	0x5555553e
10007d1c:	3fc55555 	.word	0x3fc55555
10007d20:	3ff00000 	.word	0x3ff00000
10007d24:	c0100000 	.word	0xc0100000
10007d28:	4090cbff 	.word	0x4090cbff
10007d2c:	3f6f3400 	.word	0x3f6f3400
10007d30:	c2f8f359 	.word	0xc2f8f359
10007d34:	01a56e1f 	.word	0x01a56e1f
10007d38:	3feffffe 	.word	0x3feffffe
10007d3c:	3ff71547 	.word	0x3ff71547
10007d40:	f85ddf44 	.word	0xf85ddf44
10007d44:	3e54ae0b 	.word	0x3e54ae0b
10007d48:	3fd00000 	.word	0x3fd00000
10007d4c:	55555555 	.word	0x55555555
10007d50:	3fd55555 	.word	0x3fd55555
10007d54:	3fe00000 	.word	0x3fe00000
10007d58:	652b82fe 	.word	0x652b82fe
10007d5c:	8800759c 	.word	0x8800759c
10007d60:	7e37e43c 	.word	0x7e37e43c
10007d64:	4b0b      	ldr	r3, [pc, #44]	; (10007d94 <__ieee754_pow+0xa88>)
10007d66:	429e      	cmp	r6, r3
10007d68:	dd00      	ble.n	10007d6c <__ieee754_pow+0xa60>
10007d6a:	e5e3      	b.n	10007934 <__ieee754_pow+0x628>
10007d6c:	2300      	movs	r3, #0
10007d6e:	4698      	mov	r8, r3
10007d70:	4699      	mov	r9, r3
10007d72:	e611      	b.n	10007998 <__ieee754_pow+0x68c>
10007d74:	2480      	movs	r4, #128	; 0x80
10007d76:	2101      	movs	r1, #1
10007d78:	02e4      	lsls	r4, r4, #11
10007d7a:	f7ff fbe2 	bl	10007542 <__ieee754_pow+0x236>
10007d7e:	2180      	movs	r1, #128	; 0x80
10007d80:	0609      	lsls	r1, r1, #24
10007d82:	1859      	adds	r1, r3, r1
10007d84:	f7ff fb0a 	bl	1000739c <__ieee754_pow+0x90>
10007d88:	464a      	mov	r2, r9
10007d8a:	f001 fc77 	bl	1000967c <scalbn>
10007d8e:	1c02      	adds	r2, r0, #0
10007d90:	1c0b      	adds	r3, r1, #0
10007d92:	e6ab      	b.n	10007aec <__ieee754_pow+0x7e0>
10007d94:	3fe00000 	.word	0x3fe00000

10007d98 <__ieee754_rem_pio2>:
10007d98:	b5f0      	push	{r4, r5, r6, r7, lr}
10007d9a:	4656      	mov	r6, sl
10007d9c:	465f      	mov	r7, fp
10007d9e:	464d      	mov	r5, r9
10007da0:	b4e0      	push	{r5, r6, r7}
10007da2:	004b      	lsls	r3, r1, #1
10007da4:	085e      	lsrs	r6, r3, #1
10007da6:	4bd4      	ldr	r3, [pc, #848]	; (100080f8 <__ieee754_rem_pio2+0x360>)
10007da8:	b090      	sub	sp, #64	; 0x40
10007daa:	468a      	mov	sl, r1
10007dac:	429e      	cmp	r6, r3
10007dae:	dc00      	bgt.n	10007db2 <__ieee754_rem_pio2+0x1a>
10007db0:	e089      	b.n	10007ec6 <__ieee754_rem_pio2+0x12e>
10007db2:	4bd2      	ldr	r3, [pc, #840]	; (100080fc <__ieee754_rem_pio2+0x364>)
10007db4:	4691      	mov	r9, r2
10007db6:	1c0c      	adds	r4, r1, #0
10007db8:	1c05      	adds	r5, r0, #0
10007dba:	429e      	cmp	r6, r3
10007dbc:	dc22      	bgt.n	10007e04 <__ieee754_rem_pio2+0x6c>
10007dbe:	4ad0      	ldr	r2, [pc, #832]	; (10008100 <__ieee754_rem_pio2+0x368>)
10007dc0:	2c00      	cmp	r4, #0
10007dc2:	dc00      	bgt.n	10007dc6 <__ieee754_rem_pio2+0x2e>
10007dc4:	e1be      	b.n	10008144 <__ieee754_rem_pio2+0x3ac>
10007dc6:	4bcf      	ldr	r3, [pc, #828]	; (10008104 <__ieee754_rem_pio2+0x36c>)
10007dc8:	f003 fe88 	bl	1000badc <__aeabi_dsub>
10007dcc:	4bcd      	ldr	r3, [pc, #820]	; (10008104 <__ieee754_rem_pio2+0x36c>)
10007dce:	1c04      	adds	r4, r0, #0
10007dd0:	1c0d      	adds	r5, r1, #0
10007dd2:	429e      	cmp	r6, r3
10007dd4:	d100      	bne.n	10007dd8 <__ieee754_rem_pio2+0x40>
10007dd6:	e090      	b.n	10007efa <__ieee754_rem_pio2+0x162>
10007dd8:	4acb      	ldr	r2, [pc, #812]	; (10008108 <__ieee754_rem_pio2+0x370>)
10007dda:	4bcc      	ldr	r3, [pc, #816]	; (1000810c <__ieee754_rem_pio2+0x374>)
10007ddc:	f003 fe7e 	bl	1000badc <__aeabi_dsub>
10007de0:	1c02      	adds	r2, r0, #0
10007de2:	1c0b      	adds	r3, r1, #0
10007de4:	4649      	mov	r1, r9
10007de6:	1c20      	adds	r0, r4, #0
10007de8:	600a      	str	r2, [r1, #0]
10007dea:	604b      	str	r3, [r1, #4]
10007dec:	1c29      	adds	r1, r5, #0
10007dee:	f003 fe75 	bl	1000badc <__aeabi_dsub>
10007df2:	4bc6      	ldr	r3, [pc, #792]	; (1000810c <__ieee754_rem_pio2+0x374>)
10007df4:	4ac4      	ldr	r2, [pc, #784]	; (10008108 <__ieee754_rem_pio2+0x370>)
10007df6:	f003 fe71 	bl	1000badc <__aeabi_dsub>
10007dfa:	464b      	mov	r3, r9
10007dfc:	6098      	str	r0, [r3, #8]
10007dfe:	60d9      	str	r1, [r3, #12]
10007e00:	2001      	movs	r0, #1
10007e02:	e069      	b.n	10007ed8 <__ieee754_rem_pio2+0x140>
10007e04:	4bc2      	ldr	r3, [pc, #776]	; (10008110 <__ieee754_rem_pio2+0x378>)
10007e06:	429e      	cmp	r6, r3
10007e08:	dc00      	bgt.n	10007e0c <__ieee754_rem_pio2+0x74>
10007e0a:	e093      	b.n	10007f34 <__ieee754_rem_pio2+0x19c>
10007e0c:	4bc1      	ldr	r3, [pc, #772]	; (10008114 <__ieee754_rem_pio2+0x37c>)
10007e0e:	429e      	cmp	r6, r3
10007e10:	dc68      	bgt.n	10007ee4 <__ieee754_rem_pio2+0x14c>
10007e12:	49c1      	ldr	r1, [pc, #772]	; (10008118 <__ieee754_rem_pio2+0x380>)
10007e14:	1532      	asrs	r2, r6, #20
10007e16:	468b      	mov	fp, r1
10007e18:	4493      	add	fp, r2
10007e1a:	465b      	mov	r3, fp
10007e1c:	051b      	lsls	r3, r3, #20
10007e1e:	1af5      	subs	r5, r6, r3
10007e20:	1c29      	adds	r1, r5, #0
10007e22:	1c04      	adds	r4, r0, #0
10007e24:	f004 f9d4 	bl	1000c1d0 <__aeabi_d2iz>
10007e28:	f004 fa08 	bl	1000c23c <__aeabi_i2d>
10007e2c:	1c02      	adds	r2, r0, #0
10007e2e:	1c0b      	adds	r3, r1, #0
10007e30:	1c20      	adds	r0, r4, #0
10007e32:	1c29      	adds	r1, r5, #0
10007e34:	920a      	str	r2, [sp, #40]	; 0x28
10007e36:	930b      	str	r3, [sp, #44]	; 0x2c
10007e38:	f003 fe50 	bl	1000badc <__aeabi_dsub>
10007e3c:	2200      	movs	r2, #0
10007e3e:	4bb7      	ldr	r3, [pc, #732]	; (1000811c <__ieee754_rem_pio2+0x384>)
10007e40:	f003 fbb2 	bl	1000b5a8 <__aeabi_dmul>
10007e44:	1c0f      	adds	r7, r1, #0
10007e46:	1c06      	adds	r6, r0, #0
10007e48:	f004 f9c2 	bl	1000c1d0 <__aeabi_d2iz>
10007e4c:	f004 f9f6 	bl	1000c23c <__aeabi_i2d>
10007e50:	1c04      	adds	r4, r0, #0
10007e52:	1c0d      	adds	r5, r1, #0
10007e54:	1c22      	adds	r2, r4, #0
10007e56:	1c2b      	adds	r3, r5, #0
10007e58:	1c30      	adds	r0, r6, #0
10007e5a:	1c39      	adds	r1, r7, #0
10007e5c:	940c      	str	r4, [sp, #48]	; 0x30
10007e5e:	950d      	str	r5, [sp, #52]	; 0x34
10007e60:	f003 fe3c 	bl	1000badc <__aeabi_dsub>
10007e64:	2200      	movs	r2, #0
10007e66:	4bad      	ldr	r3, [pc, #692]	; (1000811c <__ieee754_rem_pio2+0x384>)
10007e68:	f003 fb9e 	bl	1000b5a8 <__aeabi_dmul>
10007e6c:	2200      	movs	r2, #0
10007e6e:	2300      	movs	r3, #0
10007e70:	900e      	str	r0, [sp, #56]	; 0x38
10007e72:	910f      	str	r1, [sp, #60]	; 0x3c
10007e74:	f001 fc8e 	bl	10009794 <__aeabi_dcmpeq>
10007e78:	2800      	cmp	r0, #0
10007e7a:	d100      	bne.n	10007e7e <__ieee754_rem_pio2+0xe6>
10007e7c:	e181      	b.n	10008182 <__ieee754_rem_pio2+0x3ea>
10007e7e:	2300      	movs	r3, #0
10007e80:	2200      	movs	r2, #0
10007e82:	1c20      	adds	r0, r4, #0
10007e84:	1c29      	adds	r1, r5, #0
10007e86:	f001 fc85 	bl	10009794 <__aeabi_dcmpeq>
10007e8a:	2202      	movs	r2, #2
10007e8c:	1e43      	subs	r3, r0, #1
10007e8e:	4198      	sbcs	r0, r3
10007e90:	1a13      	subs	r3, r2, r0
10007e92:	2202      	movs	r2, #2
10007e94:	9200      	str	r2, [sp, #0]
10007e96:	4aa2      	ldr	r2, [pc, #648]	; (10008120 <__ieee754_rem_pio2+0x388>)
10007e98:	a80a      	add	r0, sp, #40	; 0x28
10007e9a:	9201      	str	r2, [sp, #4]
10007e9c:	4649      	mov	r1, r9
10007e9e:	465a      	mov	r2, fp
10007ea0:	f000 fba2 	bl	100085e8 <__kernel_rem_pio2>
10007ea4:	4653      	mov	r3, sl
10007ea6:	2b00      	cmp	r3, #0
10007ea8:	da16      	bge.n	10007ed8 <__ieee754_rem_pio2+0x140>
10007eaa:	2280      	movs	r2, #128	; 0x80
10007eac:	464b      	mov	r3, r9
10007eae:	0612      	lsls	r2, r2, #24
10007eb0:	4694      	mov	ip, r2
10007eb2:	464a      	mov	r2, r9
10007eb4:	685b      	ldr	r3, [r3, #4]
10007eb6:	4240      	negs	r0, r0
10007eb8:	4463      	add	r3, ip
10007eba:	6053      	str	r3, [r2, #4]
10007ebc:	68d3      	ldr	r3, [r2, #12]
10007ebe:	464a      	mov	r2, r9
10007ec0:	4463      	add	r3, ip
10007ec2:	60d3      	str	r3, [r2, #12]
10007ec4:	e008      	b.n	10007ed8 <__ieee754_rem_pio2+0x140>
10007ec6:	1c04      	adds	r4, r0, #0
10007ec8:	1c0d      	adds	r5, r1, #0
10007eca:	2000      	movs	r0, #0
10007ecc:	2100      	movs	r1, #0
10007ece:	6090      	str	r0, [r2, #8]
10007ed0:	60d1      	str	r1, [r2, #12]
10007ed2:	2000      	movs	r0, #0
10007ed4:	6014      	str	r4, [r2, #0]
10007ed6:	6055      	str	r5, [r2, #4]
10007ed8:	b010      	add	sp, #64	; 0x40
10007eda:	bc1c      	pop	{r2, r3, r4}
10007edc:	4691      	mov	r9, r2
10007ede:	469a      	mov	sl, r3
10007ee0:	46a3      	mov	fp, r4
10007ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007ee4:	4653      	mov	r3, sl
10007ee6:	1c2a      	adds	r2, r5, #0
10007ee8:	f003 fdf8 	bl	1000badc <__aeabi_dsub>
10007eec:	464b      	mov	r3, r9
10007eee:	6098      	str	r0, [r3, #8]
10007ef0:	60d9      	str	r1, [r3, #12]
10007ef2:	6018      	str	r0, [r3, #0]
10007ef4:	6059      	str	r1, [r3, #4]
10007ef6:	2000      	movs	r0, #0
10007ef8:	e7ee      	b.n	10007ed8 <__ieee754_rem_pio2+0x140>
10007efa:	22d3      	movs	r2, #211	; 0xd3
10007efc:	4b83      	ldr	r3, [pc, #524]	; (1000810c <__ieee754_rem_pio2+0x374>)
10007efe:	0552      	lsls	r2, r2, #21
10007f00:	f003 fdec 	bl	1000badc <__aeabi_dsub>
10007f04:	4a87      	ldr	r2, [pc, #540]	; (10008124 <__ieee754_rem_pio2+0x38c>)
10007f06:	4b88      	ldr	r3, [pc, #544]	; (10008128 <__ieee754_rem_pio2+0x390>)
10007f08:	1c04      	adds	r4, r0, #0
10007f0a:	1c0d      	adds	r5, r1, #0
10007f0c:	f003 fde6 	bl	1000badc <__aeabi_dsub>
10007f10:	1c02      	adds	r2, r0, #0
10007f12:	1c0b      	adds	r3, r1, #0
10007f14:	4649      	mov	r1, r9
10007f16:	1c20      	adds	r0, r4, #0
10007f18:	600a      	str	r2, [r1, #0]
10007f1a:	604b      	str	r3, [r1, #4]
10007f1c:	1c29      	adds	r1, r5, #0
10007f1e:	f003 fddd 	bl	1000badc <__aeabi_dsub>
10007f22:	4b81      	ldr	r3, [pc, #516]	; (10008128 <__ieee754_rem_pio2+0x390>)
10007f24:	4a7f      	ldr	r2, [pc, #508]	; (10008124 <__ieee754_rem_pio2+0x38c>)
10007f26:	f003 fdd9 	bl	1000badc <__aeabi_dsub>
10007f2a:	464b      	mov	r3, r9
10007f2c:	6098      	str	r0, [r3, #8]
10007f2e:	60d9      	str	r1, [r3, #12]
10007f30:	2001      	movs	r0, #1
10007f32:	e7d1      	b.n	10007ed8 <__ieee754_rem_pio2+0x140>
10007f34:	f7fe fe88 	bl	10006c48 <fabs>
10007f38:	4a7c      	ldr	r2, [pc, #496]	; (1000812c <__ieee754_rem_pio2+0x394>)
10007f3a:	4b7d      	ldr	r3, [pc, #500]	; (10008130 <__ieee754_rem_pio2+0x398>)
10007f3c:	1c04      	adds	r4, r0, #0
10007f3e:	1c0d      	adds	r5, r1, #0
10007f40:	f003 fb32 	bl	1000b5a8 <__aeabi_dmul>
10007f44:	2200      	movs	r2, #0
10007f46:	4b7b      	ldr	r3, [pc, #492]	; (10008134 <__ieee754_rem_pio2+0x39c>)
10007f48:	f002 fbc8 	bl	1000a6dc <__aeabi_dadd>
10007f4c:	f004 f940 	bl	1000c1d0 <__aeabi_d2iz>
10007f50:	1c07      	adds	r7, r0, #0
10007f52:	f004 f973 	bl	1000c23c <__aeabi_i2d>
10007f56:	4a6a      	ldr	r2, [pc, #424]	; (10008100 <__ieee754_rem_pio2+0x368>)
10007f58:	4b6a      	ldr	r3, [pc, #424]	; (10008104 <__ieee754_rem_pio2+0x36c>)
10007f5a:	9004      	str	r0, [sp, #16]
10007f5c:	9105      	str	r1, [sp, #20]
10007f5e:	f003 fb23 	bl	1000b5a8 <__aeabi_dmul>
10007f62:	1c02      	adds	r2, r0, #0
10007f64:	1c0b      	adds	r3, r1, #0
10007f66:	1c20      	adds	r0, r4, #0
10007f68:	1c29      	adds	r1, r5, #0
10007f6a:	f003 fdb7 	bl	1000badc <__aeabi_dsub>
10007f6e:	4a66      	ldr	r2, [pc, #408]	; (10008108 <__ieee754_rem_pio2+0x370>)
10007f70:	9002      	str	r0, [sp, #8]
10007f72:	9103      	str	r1, [sp, #12]
10007f74:	9804      	ldr	r0, [sp, #16]
10007f76:	9905      	ldr	r1, [sp, #20]
10007f78:	4b64      	ldr	r3, [pc, #400]	; (1000810c <__ieee754_rem_pio2+0x374>)
10007f7a:	f003 fb15 	bl	1000b5a8 <__aeabi_dmul>
10007f7e:	9006      	str	r0, [sp, #24]
10007f80:	9107      	str	r1, [sp, #28]
10007f82:	9802      	ldr	r0, [sp, #8]
10007f84:	9903      	ldr	r1, [sp, #12]
10007f86:	2f1f      	cmp	r7, #31
10007f88:	dc33      	bgt.n	10007ff2 <__ieee754_rem_pio2+0x25a>
10007f8a:	1e7b      	subs	r3, r7, #1
10007f8c:	4a6a      	ldr	r2, [pc, #424]	; (10008138 <__ieee754_rem_pio2+0x3a0>)
10007f8e:	009b      	lsls	r3, r3, #2
10007f90:	589b      	ldr	r3, [r3, r2]
10007f92:	42b3      	cmp	r3, r6
10007f94:	d02d      	beq.n	10007ff2 <__ieee754_rem_pio2+0x25a>
10007f96:	9a06      	ldr	r2, [sp, #24]
10007f98:	9b07      	ldr	r3, [sp, #28]
10007f9a:	f003 fd9f 	bl	1000badc <__aeabi_dsub>
10007f9e:	1c0b      	adds	r3, r1, #0
10007fa0:	1c0c      	adds	r4, r1, #0
10007fa2:	1c02      	adds	r2, r0, #0
10007fa4:	4649      	mov	r1, r9
10007fa6:	1c05      	adds	r5, r0, #0
10007fa8:	600a      	str	r2, [r1, #0]
10007faa:	604b      	str	r3, [r1, #4]
10007fac:	9802      	ldr	r0, [sp, #8]
10007fae:	9903      	ldr	r1, [sp, #12]
10007fb0:	1c2a      	adds	r2, r5, #0
10007fb2:	1c23      	adds	r3, r4, #0
10007fb4:	f003 fd92 	bl	1000badc <__aeabi_dsub>
10007fb8:	9a06      	ldr	r2, [sp, #24]
10007fba:	9b07      	ldr	r3, [sp, #28]
10007fbc:	f003 fd8e 	bl	1000badc <__aeabi_dsub>
10007fc0:	1c06      	adds	r6, r0, #0
10007fc2:	1c0b      	adds	r3, r1, #0
10007fc4:	4648      	mov	r0, r9
10007fc6:	1c32      	adds	r2, r6, #0
10007fc8:	6082      	str	r2, [r0, #8]
10007fca:	60c3      	str	r3, [r0, #12]
10007fcc:	4653      	mov	r3, sl
10007fce:	1c38      	adds	r0, r7, #0
10007fd0:	2b00      	cmp	r3, #0
10007fd2:	db00      	blt.n	10007fd6 <__ieee754_rem_pio2+0x23e>
10007fd4:	e780      	b.n	10007ed8 <__ieee754_rem_pio2+0x140>
10007fd6:	464b      	mov	r3, r9
10007fd8:	601d      	str	r5, [r3, #0]
10007fda:	2380      	movs	r3, #128	; 0x80
10007fdc:	061b      	lsls	r3, r3, #24
10007fde:	469c      	mov	ip, r3
10007fe0:	464b      	mov	r3, r9
10007fe2:	4464      	add	r4, ip
10007fe4:	605c      	str	r4, [r3, #4]
10007fe6:	609e      	str	r6, [r3, #8]
10007fe8:	464b      	mov	r3, r9
10007fea:	4461      	add	r1, ip
10007fec:	60d9      	str	r1, [r3, #12]
10007fee:	4278      	negs	r0, r7
10007ff0:	e772      	b.n	10007ed8 <__ieee754_rem_pio2+0x140>
10007ff2:	9a06      	ldr	r2, [sp, #24]
10007ff4:	9b07      	ldr	r3, [sp, #28]
10007ff6:	f003 fd71 	bl	1000badc <__aeabi_dsub>
10007ffa:	1c0b      	adds	r3, r1, #0
10007ffc:	1c0c      	adds	r4, r1, #0
10007ffe:	1c02      	adds	r2, r0, #0
10008000:	4649      	mov	r1, r9
10008002:	600a      	str	r2, [r1, #0]
10008004:	604b      	str	r3, [r1, #4]
10008006:	0063      	lsls	r3, r4, #1
10008008:	1536      	asrs	r6, r6, #20
1000800a:	0d5b      	lsrs	r3, r3, #21
1000800c:	1c05      	adds	r5, r0, #0
1000800e:	1af3      	subs	r3, r6, r3
10008010:	2b10      	cmp	r3, #16
10008012:	ddcb      	ble.n	10007fac <__ieee754_rem_pio2+0x214>
10008014:	9804      	ldr	r0, [sp, #16]
10008016:	9905      	ldr	r1, [sp, #20]
10008018:	22d3      	movs	r2, #211	; 0xd3
1000801a:	4b3c      	ldr	r3, [pc, #240]	; (1000810c <__ieee754_rem_pio2+0x374>)
1000801c:	0552      	lsls	r2, r2, #21
1000801e:	f003 fac3 	bl	1000b5a8 <__aeabi_dmul>
10008022:	1c04      	adds	r4, r0, #0
10008024:	1c0d      	adds	r5, r1, #0
10008026:	9802      	ldr	r0, [sp, #8]
10008028:	9903      	ldr	r1, [sp, #12]
1000802a:	1c22      	adds	r2, r4, #0
1000802c:	1c2b      	adds	r3, r5, #0
1000802e:	f003 fd55 	bl	1000badc <__aeabi_dsub>
10008032:	1c02      	adds	r2, r0, #0
10008034:	1c0b      	adds	r3, r1, #0
10008036:	9802      	ldr	r0, [sp, #8]
10008038:	9903      	ldr	r1, [sp, #12]
1000803a:	9208      	str	r2, [sp, #32]
1000803c:	9309      	str	r3, [sp, #36]	; 0x24
1000803e:	f003 fd4d 	bl	1000badc <__aeabi_dsub>
10008042:	1c22      	adds	r2, r4, #0
10008044:	1c2b      	adds	r3, r5, #0
10008046:	f003 fd49 	bl	1000badc <__aeabi_dsub>
1000804a:	1c04      	adds	r4, r0, #0
1000804c:	1c0d      	adds	r5, r1, #0
1000804e:	9804      	ldr	r0, [sp, #16]
10008050:	9905      	ldr	r1, [sp, #20]
10008052:	4a34      	ldr	r2, [pc, #208]	; (10008124 <__ieee754_rem_pio2+0x38c>)
10008054:	4b34      	ldr	r3, [pc, #208]	; (10008128 <__ieee754_rem_pio2+0x390>)
10008056:	f003 faa7 	bl	1000b5a8 <__aeabi_dmul>
1000805a:	1c22      	adds	r2, r4, #0
1000805c:	1c2b      	adds	r3, r5, #0
1000805e:	f003 fd3d 	bl	1000badc <__aeabi_dsub>
10008062:	1c03      	adds	r3, r0, #0
10008064:	1c0c      	adds	r4, r1, #0
10008066:	9808      	ldr	r0, [sp, #32]
10008068:	9909      	ldr	r1, [sp, #36]	; 0x24
1000806a:	9306      	str	r3, [sp, #24]
1000806c:	9407      	str	r4, [sp, #28]
1000806e:	1c1a      	adds	r2, r3, #0
10008070:	1c23      	adds	r3, r4, #0
10008072:	f003 fd33 	bl	1000badc <__aeabi_dsub>
10008076:	1c02      	adds	r2, r0, #0
10008078:	1c0b      	adds	r3, r1, #0
1000807a:	1c05      	adds	r5, r0, #0
1000807c:	4648      	mov	r0, r9
1000807e:	6002      	str	r2, [r0, #0]
10008080:	6043      	str	r3, [r0, #4]
10008082:	004b      	lsls	r3, r1, #1
10008084:	0d5b      	lsrs	r3, r3, #21
10008086:	1c0c      	adds	r4, r1, #0
10008088:	9908      	ldr	r1, [sp, #32]
1000808a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000808c:	1af3      	subs	r3, r6, r3
1000808e:	9102      	str	r1, [sp, #8]
10008090:	9203      	str	r2, [sp, #12]
10008092:	2b31      	cmp	r3, #49	; 0x31
10008094:	dd8a      	ble.n	10007fac <__ieee754_rem_pio2+0x214>
10008096:	9804      	ldr	r0, [sp, #16]
10008098:	9905      	ldr	r1, [sp, #20]
1000809a:	22b8      	movs	r2, #184	; 0xb8
1000809c:	4b22      	ldr	r3, [pc, #136]	; (10008128 <__ieee754_rem_pio2+0x390>)
1000809e:	0592      	lsls	r2, r2, #22
100080a0:	f003 fa82 	bl	1000b5a8 <__aeabi_dmul>
100080a4:	1c04      	adds	r4, r0, #0
100080a6:	1c0d      	adds	r5, r1, #0
100080a8:	9802      	ldr	r0, [sp, #8]
100080aa:	9903      	ldr	r1, [sp, #12]
100080ac:	1c22      	adds	r2, r4, #0
100080ae:	1c2b      	adds	r3, r5, #0
100080b0:	f003 fd14 	bl	1000badc <__aeabi_dsub>
100080b4:	1c02      	adds	r2, r0, #0
100080b6:	1c0b      	adds	r3, r1, #0
100080b8:	9808      	ldr	r0, [sp, #32]
100080ba:	9909      	ldr	r1, [sp, #36]	; 0x24
100080bc:	9202      	str	r2, [sp, #8]
100080be:	9303      	str	r3, [sp, #12]
100080c0:	f003 fd0c 	bl	1000badc <__aeabi_dsub>
100080c4:	1c22      	adds	r2, r4, #0
100080c6:	1c2b      	adds	r3, r5, #0
100080c8:	f003 fd08 	bl	1000badc <__aeabi_dsub>
100080cc:	1c04      	adds	r4, r0, #0
100080ce:	1c0d      	adds	r5, r1, #0
100080d0:	9804      	ldr	r0, [sp, #16]
100080d2:	9905      	ldr	r1, [sp, #20]
100080d4:	4a19      	ldr	r2, [pc, #100]	; (1000813c <__ieee754_rem_pio2+0x3a4>)
100080d6:	4b1a      	ldr	r3, [pc, #104]	; (10008140 <__ieee754_rem_pio2+0x3a8>)
100080d8:	f003 fa66 	bl	1000b5a8 <__aeabi_dmul>
100080dc:	1c22      	adds	r2, r4, #0
100080de:	1c2b      	adds	r3, r5, #0
100080e0:	f003 fcfc 	bl	1000badc <__aeabi_dsub>
100080e4:	1c03      	adds	r3, r0, #0
100080e6:	1c0c      	adds	r4, r1, #0
100080e8:	9802      	ldr	r0, [sp, #8]
100080ea:	9903      	ldr	r1, [sp, #12]
100080ec:	9306      	str	r3, [sp, #24]
100080ee:	9407      	str	r4, [sp, #28]
100080f0:	1c1a      	adds	r2, r3, #0
100080f2:	1c23      	adds	r3, r4, #0
100080f4:	e751      	b.n	10007f9a <__ieee754_rem_pio2+0x202>
100080f6:	46c0      	nop			; (mov r8, r8)
100080f8:	3fe921fb 	.word	0x3fe921fb
100080fc:	4002d97b 	.word	0x4002d97b
10008100:	54400000 	.word	0x54400000
10008104:	3ff921fb 	.word	0x3ff921fb
10008108:	1a626331 	.word	0x1a626331
1000810c:	3dd0b461 	.word	0x3dd0b461
10008110:	413921fb 	.word	0x413921fb
10008114:	7fefffff 	.word	0x7fefffff
10008118:	fffffbea 	.word	0xfffffbea
1000811c:	41700000 	.word	0x41700000
10008120:	1000ccb8 	.word	0x1000ccb8
10008124:	2e037073 	.word	0x2e037073
10008128:	3ba3198a 	.word	0x3ba3198a
1000812c:	6dc9c883 	.word	0x6dc9c883
10008130:	3fe45f30 	.word	0x3fe45f30
10008134:	3fe00000 	.word	0x3fe00000
10008138:	1000cc38 	.word	0x1000cc38
1000813c:	252049c1 	.word	0x252049c1
10008140:	397b839a 	.word	0x397b839a
10008144:	4b1b      	ldr	r3, [pc, #108]	; (100081b4 <__ieee754_rem_pio2+0x41c>)
10008146:	f002 fac9 	bl	1000a6dc <__aeabi_dadd>
1000814a:	4b1a      	ldr	r3, [pc, #104]	; (100081b4 <__ieee754_rem_pio2+0x41c>)
1000814c:	1c04      	adds	r4, r0, #0
1000814e:	1c0d      	adds	r5, r1, #0
10008150:	429e      	cmp	r6, r3
10008152:	d018      	beq.n	10008186 <__ieee754_rem_pio2+0x3ee>
10008154:	4a18      	ldr	r2, [pc, #96]	; (100081b8 <__ieee754_rem_pio2+0x420>)
10008156:	4b19      	ldr	r3, [pc, #100]	; (100081bc <__ieee754_rem_pio2+0x424>)
10008158:	f002 fac0 	bl	1000a6dc <__aeabi_dadd>
1000815c:	1c02      	adds	r2, r0, #0
1000815e:	1c0b      	adds	r3, r1, #0
10008160:	4649      	mov	r1, r9
10008162:	1c20      	adds	r0, r4, #0
10008164:	600a      	str	r2, [r1, #0]
10008166:	604b      	str	r3, [r1, #4]
10008168:	1c29      	adds	r1, r5, #0
1000816a:	f003 fcb7 	bl	1000badc <__aeabi_dsub>
1000816e:	4a12      	ldr	r2, [pc, #72]	; (100081b8 <__ieee754_rem_pio2+0x420>)
10008170:	4b12      	ldr	r3, [pc, #72]	; (100081bc <__ieee754_rem_pio2+0x424>)
10008172:	f002 fab3 	bl	1000a6dc <__aeabi_dadd>
10008176:	464b      	mov	r3, r9
10008178:	6098      	str	r0, [r3, #8]
1000817a:	60d9      	str	r1, [r3, #12]
1000817c:	2001      	movs	r0, #1
1000817e:	4240      	negs	r0, r0
10008180:	e6aa      	b.n	10007ed8 <__ieee754_rem_pio2+0x140>
10008182:	2303      	movs	r3, #3
10008184:	e685      	b.n	10007e92 <__ieee754_rem_pio2+0xfa>
10008186:	22d3      	movs	r2, #211	; 0xd3
10008188:	4b0c      	ldr	r3, [pc, #48]	; (100081bc <__ieee754_rem_pio2+0x424>)
1000818a:	0552      	lsls	r2, r2, #21
1000818c:	f002 faa6 	bl	1000a6dc <__aeabi_dadd>
10008190:	4a0b      	ldr	r2, [pc, #44]	; (100081c0 <__ieee754_rem_pio2+0x428>)
10008192:	4b0c      	ldr	r3, [pc, #48]	; (100081c4 <__ieee754_rem_pio2+0x42c>)
10008194:	1c04      	adds	r4, r0, #0
10008196:	1c0d      	adds	r5, r1, #0
10008198:	f002 faa0 	bl	1000a6dc <__aeabi_dadd>
1000819c:	1c02      	adds	r2, r0, #0
1000819e:	1c0b      	adds	r3, r1, #0
100081a0:	4649      	mov	r1, r9
100081a2:	1c20      	adds	r0, r4, #0
100081a4:	600a      	str	r2, [r1, #0]
100081a6:	604b      	str	r3, [r1, #4]
100081a8:	1c29      	adds	r1, r5, #0
100081aa:	f003 fc97 	bl	1000badc <__aeabi_dsub>
100081ae:	4a04      	ldr	r2, [pc, #16]	; (100081c0 <__ieee754_rem_pio2+0x428>)
100081b0:	4b04      	ldr	r3, [pc, #16]	; (100081c4 <__ieee754_rem_pio2+0x42c>)
100081b2:	e7de      	b.n	10008172 <__ieee754_rem_pio2+0x3da>
100081b4:	3ff921fb 	.word	0x3ff921fb
100081b8:	1a626331 	.word	0x1a626331
100081bc:	3dd0b461 	.word	0x3dd0b461
100081c0:	2e037073 	.word	0x2e037073
100081c4:	3ba3198a 	.word	0x3ba3198a

100081c8 <__ieee754_sqrt>:
100081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100081ca:	4656      	mov	r6, sl
100081cc:	464d      	mov	r5, r9
100081ce:	4644      	mov	r4, r8
100081d0:	465f      	mov	r7, fp
100081d2:	4b75      	ldr	r3, [pc, #468]	; (100083a8 <__ieee754_sqrt+0x1e0>)
100081d4:	b4f0      	push	{r4, r5, r6, r7}
100081d6:	1c0a      	adds	r2, r1, #0
100081d8:	1c0e      	adds	r6, r1, #0
100081da:	1c19      	adds	r1, r3, #0
100081dc:	b083      	sub	sp, #12
100081de:	1c05      	adds	r5, r0, #0
100081e0:	1c04      	adds	r4, r0, #0
100081e2:	4031      	ands	r1, r6
100081e4:	4299      	cmp	r1, r3
100081e6:	d100      	bne.n	100081ea <__ieee754_sqrt+0x22>
100081e8:	e0b7      	b.n	1000835a <__ieee754_sqrt+0x192>
100081ea:	2e00      	cmp	r6, #0
100081ec:	dc00      	bgt.n	100081f0 <__ieee754_sqrt+0x28>
100081ee:	e093      	b.n	10008318 <__ieee754_sqrt+0x150>
100081f0:	1531      	asrs	r1, r6, #20
100081f2:	d100      	bne.n	100081f6 <__ieee754_sqrt+0x2e>
100081f4:	e0a0      	b.n	10008338 <__ieee754_sqrt+0x170>
100081f6:	4b6d      	ldr	r3, [pc, #436]	; (100083ac <__ieee754_sqrt+0x1e4>)
100081f8:	0312      	lsls	r2, r2, #12
100081fa:	18ce      	adds	r6, r1, r3
100081fc:	2380      	movs	r3, #128	; 0x80
100081fe:	0b12      	lsrs	r2, r2, #12
10008200:	035b      	lsls	r3, r3, #13
10008202:	431a      	orrs	r2, r3
10008204:	07f3      	lsls	r3, r6, #31
10008206:	d500      	bpl.n	1000820a <__ieee754_sqrt+0x42>
10008208:	e077      	b.n	100082fa <__ieee754_sqrt+0x132>
1000820a:	1073      	asrs	r3, r6, #1
1000820c:	0052      	lsls	r2, r2, #1
1000820e:	4698      	mov	r8, r3
10008210:	0fe3      	lsrs	r3, r4, #31
10008212:	18d3      	adds	r3, r2, r3
10008214:	2280      	movs	r2, #128	; 0x80
10008216:	2116      	movs	r1, #22
10008218:	2700      	movs	r7, #0
1000821a:	2500      	movs	r5, #0
1000821c:	0064      	lsls	r4, r4, #1
1000821e:	0392      	lsls	r2, r2, #14
10008220:	18a8      	adds	r0, r5, r2
10008222:	4298      	cmp	r0, r3
10008224:	dc02      	bgt.n	1000822c <__ieee754_sqrt+0x64>
10008226:	1885      	adds	r5, r0, r2
10008228:	1a1b      	subs	r3, r3, r0
1000822a:	18bf      	adds	r7, r7, r2
1000822c:	0fe0      	lsrs	r0, r4, #31
1000822e:	005b      	lsls	r3, r3, #1
10008230:	3901      	subs	r1, #1
10008232:	181b      	adds	r3, r3, r0
10008234:	0064      	lsls	r4, r4, #1
10008236:	0852      	lsrs	r2, r2, #1
10008238:	2900      	cmp	r1, #0
1000823a:	d1f1      	bne.n	10008220 <__ieee754_sqrt+0x58>
1000823c:	2200      	movs	r2, #0
1000823e:	9201      	str	r2, [sp, #4]
10008240:	4694      	mov	ip, r2
10008242:	2280      	movs	r2, #128	; 0x80
10008244:	0612      	lsls	r2, r2, #24
10008246:	2020      	movs	r0, #32
10008248:	4692      	mov	sl, r2
1000824a:	e009      	b.n	10008260 <__ieee754_sqrt+0x98>
1000824c:	42ab      	cmp	r3, r5
1000824e:	d047      	beq.n	100082e0 <__ieee754_sqrt+0x118>
10008250:	0fe1      	lsrs	r1, r4, #31
10008252:	005b      	lsls	r3, r3, #1
10008254:	3801      	subs	r0, #1
10008256:	185b      	adds	r3, r3, r1
10008258:	0064      	lsls	r4, r4, #1
1000825a:	0852      	lsrs	r2, r2, #1
1000825c:	2800      	cmp	r0, #0
1000825e:	d01e      	beq.n	1000829e <__ieee754_sqrt+0xd6>
10008260:	4661      	mov	r1, ip
10008262:	1889      	adds	r1, r1, r2
10008264:	429d      	cmp	r5, r3
10008266:	daf1      	bge.n	1000824c <__ieee754_sqrt+0x84>
10008268:	188e      	adds	r6, r1, r2
1000826a:	46b4      	mov	ip, r6
1000826c:	0fce      	lsrs	r6, r1, #31
1000826e:	07f6      	lsls	r6, r6, #31
10008270:	46a9      	mov	r9, r5
10008272:	4556      	cmp	r6, sl
10008274:	d02e      	beq.n	100082d4 <__ieee754_sqrt+0x10c>
10008276:	1b5b      	subs	r3, r3, r5
10008278:	428c      	cmp	r4, r1
1000827a:	41ad      	sbcs	r5, r5
1000827c:	426d      	negs	r5, r5
1000827e:	1b5b      	subs	r3, r3, r5
10008280:	1a64      	subs	r4, r4, r1
10008282:	9901      	ldr	r1, [sp, #4]
10008284:	005b      	lsls	r3, r3, #1
10008286:	468b      	mov	fp, r1
10008288:	4493      	add	fp, r2
1000828a:	4659      	mov	r1, fp
1000828c:	3801      	subs	r0, #1
1000828e:	9101      	str	r1, [sp, #4]
10008290:	0fe1      	lsrs	r1, r4, #31
10008292:	464d      	mov	r5, r9
10008294:	185b      	adds	r3, r3, r1
10008296:	0064      	lsls	r4, r4, #1
10008298:	0852      	lsrs	r2, r2, #1
1000829a:	2800      	cmp	r0, #0
1000829c:	d1e0      	bne.n	10008260 <__ieee754_sqrt+0x98>
1000829e:	4323      	orrs	r3, r4
100082a0:	d130      	bne.n	10008304 <__ieee754_sqrt+0x13c>
100082a2:	9b01      	ldr	r3, [sp, #4]
100082a4:	085b      	lsrs	r3, r3, #1
100082a6:	4942      	ldr	r1, [pc, #264]	; (100083b0 <__ieee754_sqrt+0x1e8>)
100082a8:	107a      	asrs	r2, r7, #1
100082aa:	468c      	mov	ip, r1
100082ac:	4462      	add	r2, ip
100082ae:	07f9      	lsls	r1, r7, #31
100082b0:	d502      	bpl.n	100082b8 <__ieee754_sqrt+0xf0>
100082b2:	2180      	movs	r1, #128	; 0x80
100082b4:	0609      	lsls	r1, r1, #24
100082b6:	430b      	orrs	r3, r1
100082b8:	4641      	mov	r1, r8
100082ba:	050e      	lsls	r6, r1, #20
100082bc:	18b1      	adds	r1, r6, r2
100082be:	1c1d      	adds	r5, r3, #0
100082c0:	1c0e      	adds	r6, r1, #0
100082c2:	1c28      	adds	r0, r5, #0
100082c4:	1c31      	adds	r1, r6, #0
100082c6:	b003      	add	sp, #12
100082c8:	bc3c      	pop	{r2, r3, r4, r5}
100082ca:	4690      	mov	r8, r2
100082cc:	4699      	mov	r9, r3
100082ce:	46a2      	mov	sl, r4
100082d0:	46ab      	mov	fp, r5
100082d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082d4:	4666      	mov	r6, ip
100082d6:	2e00      	cmp	r6, #0
100082d8:	dbcd      	blt.n	10008276 <__ieee754_sqrt+0xae>
100082da:	1c6e      	adds	r6, r5, #1
100082dc:	46b1      	mov	r9, r6
100082de:	e7ca      	b.n	10008276 <__ieee754_sqrt+0xae>
100082e0:	42a1      	cmp	r1, r4
100082e2:	d808      	bhi.n	100082f6 <__ieee754_sqrt+0x12e>
100082e4:	188e      	adds	r6, r1, r2
100082e6:	46b4      	mov	ip, r6
100082e8:	0fce      	lsrs	r6, r1, #31
100082ea:	07f6      	lsls	r6, r6, #31
100082ec:	4556      	cmp	r6, sl
100082ee:	d041      	beq.n	10008374 <__ieee754_sqrt+0x1ac>
100082f0:	4699      	mov	r9, r3
100082f2:	2300      	movs	r3, #0
100082f4:	e7c4      	b.n	10008280 <__ieee754_sqrt+0xb8>
100082f6:	1c1d      	adds	r5, r3, #0
100082f8:	e7aa      	b.n	10008250 <__ieee754_sqrt+0x88>
100082fa:	0fe3      	lsrs	r3, r4, #31
100082fc:	0052      	lsls	r2, r2, #1
100082fe:	18d2      	adds	r2, r2, r3
10008300:	0064      	lsls	r4, r4, #1
10008302:	e782      	b.n	1000820a <__ieee754_sqrt+0x42>
10008304:	9b01      	ldr	r3, [sp, #4]
10008306:	3301      	adds	r3, #1
10008308:	d03a      	beq.n	10008380 <__ieee754_sqrt+0x1b8>
1000830a:	9a01      	ldr	r2, [sp, #4]
1000830c:	2301      	movs	r3, #1
1000830e:	4694      	mov	ip, r2
10008310:	4013      	ands	r3, r2
10008312:	4463      	add	r3, ip
10008314:	085b      	lsrs	r3, r3, #1
10008316:	e7c6      	b.n	100082a6 <__ieee754_sqrt+0xde>
10008318:	0073      	lsls	r3, r6, #1
1000831a:	085b      	lsrs	r3, r3, #1
1000831c:	4303      	orrs	r3, r0
1000831e:	d0d0      	beq.n	100082c2 <__ieee754_sqrt+0xfa>
10008320:	2100      	movs	r1, #0
10008322:	2e00      	cmp	r6, #0
10008324:	d133      	bne.n	1000838e <__ieee754_sqrt+0x1c6>
10008326:	0ae2      	lsrs	r2, r4, #11
10008328:	3915      	subs	r1, #21
1000832a:	0564      	lsls	r4, r4, #21
1000832c:	2a00      	cmp	r2, #0
1000832e:	d0fa      	beq.n	10008326 <__ieee754_sqrt+0x15e>
10008330:	2380      	movs	r3, #128	; 0x80
10008332:	035b      	lsls	r3, r3, #13
10008334:	421a      	tst	r2, r3
10008336:	d126      	bne.n	10008386 <__ieee754_sqrt+0x1be>
10008338:	2080      	movs	r0, #128	; 0x80
1000833a:	2300      	movs	r3, #0
1000833c:	0340      	lsls	r0, r0, #13
1000833e:	0052      	lsls	r2, r2, #1
10008340:	3301      	adds	r3, #1
10008342:	4202      	tst	r2, r0
10008344:	d0fb      	beq.n	1000833e <__ieee754_sqrt+0x176>
10008346:	2501      	movs	r5, #1
10008348:	2020      	movs	r0, #32
1000834a:	1aed      	subs	r5, r5, r3
1000834c:	1ac0      	subs	r0, r0, r3
1000834e:	1949      	adds	r1, r1, r5
10008350:	1c25      	adds	r5, r4, #0
10008352:	40c5      	lsrs	r5, r0
10008354:	409c      	lsls	r4, r3
10008356:	432a      	orrs	r2, r5
10008358:	e74d      	b.n	100081f6 <__ieee754_sqrt+0x2e>
1000835a:	1c2a      	adds	r2, r5, #0
1000835c:	1c33      	adds	r3, r6, #0
1000835e:	1c28      	adds	r0, r5, #0
10008360:	1c31      	adds	r1, r6, #0
10008362:	f003 f921 	bl	1000b5a8 <__aeabi_dmul>
10008366:	1c2a      	adds	r2, r5, #0
10008368:	1c33      	adds	r3, r6, #0
1000836a:	f002 f9b7 	bl	1000a6dc <__aeabi_dadd>
1000836e:	1c05      	adds	r5, r0, #0
10008370:	1c0e      	adds	r6, r1, #0
10008372:	e7a6      	b.n	100082c2 <__ieee754_sqrt+0xfa>
10008374:	4666      	mov	r6, ip
10008376:	2e00      	cmp	r6, #0
10008378:	daaf      	bge.n	100082da <__ieee754_sqrt+0x112>
1000837a:	2300      	movs	r3, #0
1000837c:	46a9      	mov	r9, r5
1000837e:	e77f      	b.n	10008280 <__ieee754_sqrt+0xb8>
10008380:	3701      	adds	r7, #1
10008382:	2300      	movs	r3, #0
10008384:	e78f      	b.n	100082a6 <__ieee754_sqrt+0xde>
10008386:	2020      	movs	r0, #32
10008388:	2501      	movs	r5, #1
1000838a:	2300      	movs	r3, #0
1000838c:	e7df      	b.n	1000834e <__ieee754_sqrt+0x186>
1000838e:	1c2a      	adds	r2, r5, #0
10008390:	1c33      	adds	r3, r6, #0
10008392:	1c28      	adds	r0, r5, #0
10008394:	1c31      	adds	r1, r6, #0
10008396:	f003 fba1 	bl	1000badc <__aeabi_dsub>
1000839a:	1c02      	adds	r2, r0, #0
1000839c:	1c0b      	adds	r3, r1, #0
1000839e:	f002 fcc5 	bl	1000ad2c <__aeabi_ddiv>
100083a2:	1c05      	adds	r5, r0, #0
100083a4:	1c0e      	adds	r6, r1, #0
100083a6:	e78c      	b.n	100082c2 <__ieee754_sqrt+0xfa>
100083a8:	7ff00000 	.word	0x7ff00000
100083ac:	fffffc01 	.word	0xfffffc01
100083b0:	3fe00000 	.word	0x3fe00000

100083b4 <__kernel_cos>:
100083b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100083b6:	464f      	mov	r7, r9
100083b8:	4646      	mov	r6, r8
100083ba:	b4c0      	push	{r6, r7}
100083bc:	b087      	sub	sp, #28
100083be:	9200      	str	r2, [sp, #0]
100083c0:	9301      	str	r3, [sp, #4]
100083c2:	4b75      	ldr	r3, [pc, #468]	; (10008598 <__kernel_cos+0x1e4>)
100083c4:	004f      	lsls	r7, r1, #1
100083c6:	4681      	mov	r9, r0
100083c8:	4688      	mov	r8, r1
100083ca:	087f      	lsrs	r7, r7, #1
100083cc:	429f      	cmp	r7, r3
100083ce:	dc63      	bgt.n	10008498 <__kernel_cos+0xe4>
100083d0:	f003 fefe 	bl	1000c1d0 <__aeabi_d2iz>
100083d4:	2800      	cmp	r0, #0
100083d6:	d100      	bne.n	100083da <__kernel_cos+0x26>
100083d8:	e0da      	b.n	10008590 <__kernel_cos+0x1dc>
100083da:	464a      	mov	r2, r9
100083dc:	4643      	mov	r3, r8
100083de:	4648      	mov	r0, r9
100083e0:	4641      	mov	r1, r8
100083e2:	f003 f8e1 	bl	1000b5a8 <__aeabi_dmul>
100083e6:	1c04      	adds	r4, r0, #0
100083e8:	1c0d      	adds	r5, r1, #0
100083ea:	4a6c      	ldr	r2, [pc, #432]	; (1000859c <__kernel_cos+0x1e8>)
100083ec:	4b6c      	ldr	r3, [pc, #432]	; (100085a0 <__kernel_cos+0x1ec>)
100083ee:	f003 f8db 	bl	1000b5a8 <__aeabi_dmul>
100083f2:	4a6c      	ldr	r2, [pc, #432]	; (100085a4 <__kernel_cos+0x1f0>)
100083f4:	4b6c      	ldr	r3, [pc, #432]	; (100085a8 <__kernel_cos+0x1f4>)
100083f6:	f002 f971 	bl	1000a6dc <__aeabi_dadd>
100083fa:	1c22      	adds	r2, r4, #0
100083fc:	1c2b      	adds	r3, r5, #0
100083fe:	f003 f8d3 	bl	1000b5a8 <__aeabi_dmul>
10008402:	4a6a      	ldr	r2, [pc, #424]	; (100085ac <__kernel_cos+0x1f8>)
10008404:	4b6a      	ldr	r3, [pc, #424]	; (100085b0 <__kernel_cos+0x1fc>)
10008406:	f003 fb69 	bl	1000badc <__aeabi_dsub>
1000840a:	1c22      	adds	r2, r4, #0
1000840c:	1c2b      	adds	r3, r5, #0
1000840e:	f003 f8cb 	bl	1000b5a8 <__aeabi_dmul>
10008412:	4a68      	ldr	r2, [pc, #416]	; (100085b4 <__kernel_cos+0x200>)
10008414:	4b68      	ldr	r3, [pc, #416]	; (100085b8 <__kernel_cos+0x204>)
10008416:	f002 f961 	bl	1000a6dc <__aeabi_dadd>
1000841a:	1c22      	adds	r2, r4, #0
1000841c:	1c2b      	adds	r3, r5, #0
1000841e:	f003 f8c3 	bl	1000b5a8 <__aeabi_dmul>
10008422:	4a66      	ldr	r2, [pc, #408]	; (100085bc <__kernel_cos+0x208>)
10008424:	4b66      	ldr	r3, [pc, #408]	; (100085c0 <__kernel_cos+0x20c>)
10008426:	f003 fb59 	bl	1000badc <__aeabi_dsub>
1000842a:	1c22      	adds	r2, r4, #0
1000842c:	1c2b      	adds	r3, r5, #0
1000842e:	f003 f8bb 	bl	1000b5a8 <__aeabi_dmul>
10008432:	4a64      	ldr	r2, [pc, #400]	; (100085c4 <__kernel_cos+0x210>)
10008434:	4b64      	ldr	r3, [pc, #400]	; (100085c8 <__kernel_cos+0x214>)
10008436:	f002 f951 	bl	1000a6dc <__aeabi_dadd>
1000843a:	1c22      	adds	r2, r4, #0
1000843c:	1c2b      	adds	r3, r5, #0
1000843e:	f003 f8b3 	bl	1000b5a8 <__aeabi_dmul>
10008442:	9002      	str	r0, [sp, #8]
10008444:	9103      	str	r1, [sp, #12]
10008446:	1c20      	adds	r0, r4, #0
10008448:	1c29      	adds	r1, r5, #0
1000844a:	2200      	movs	r2, #0
1000844c:	4b5f      	ldr	r3, [pc, #380]	; (100085cc <__kernel_cos+0x218>)
1000844e:	f003 f8ab 	bl	1000b5a8 <__aeabi_dmul>
10008452:	9a02      	ldr	r2, [sp, #8]
10008454:	9b03      	ldr	r3, [sp, #12]
10008456:	1c06      	adds	r6, r0, #0
10008458:	1c0f      	adds	r7, r1, #0
1000845a:	1c20      	adds	r0, r4, #0
1000845c:	1c29      	adds	r1, r5, #0
1000845e:	f003 f8a3 	bl	1000b5a8 <__aeabi_dmul>
10008462:	9a00      	ldr	r2, [sp, #0]
10008464:	9b01      	ldr	r3, [sp, #4]
10008466:	1c04      	adds	r4, r0, #0
10008468:	1c0d      	adds	r5, r1, #0
1000846a:	4648      	mov	r0, r9
1000846c:	4641      	mov	r1, r8
1000846e:	f003 f89b 	bl	1000b5a8 <__aeabi_dmul>
10008472:	1c02      	adds	r2, r0, #0
10008474:	1c0b      	adds	r3, r1, #0
10008476:	1c20      	adds	r0, r4, #0
10008478:	1c29      	adds	r1, r5, #0
1000847a:	f003 fb2f 	bl	1000badc <__aeabi_dsub>
1000847e:	1c02      	adds	r2, r0, #0
10008480:	1c0b      	adds	r3, r1, #0
10008482:	1c30      	adds	r0, r6, #0
10008484:	1c39      	adds	r1, r7, #0
10008486:	f003 fb29 	bl	1000badc <__aeabi_dsub>
1000848a:	1c02      	adds	r2, r0, #0
1000848c:	1c0b      	adds	r3, r1, #0
1000848e:	2000      	movs	r0, #0
10008490:	494f      	ldr	r1, [pc, #316]	; (100085d0 <__kernel_cos+0x21c>)
10008492:	f003 fb23 	bl	1000badc <__aeabi_dsub>
10008496:	e070      	b.n	1000857a <__kernel_cos+0x1c6>
10008498:	464a      	mov	r2, r9
1000849a:	4643      	mov	r3, r8
1000849c:	f003 f884 	bl	1000b5a8 <__aeabi_dmul>
100084a0:	1c04      	adds	r4, r0, #0
100084a2:	1c0d      	adds	r5, r1, #0
100084a4:	4a3d      	ldr	r2, [pc, #244]	; (1000859c <__kernel_cos+0x1e8>)
100084a6:	4b3e      	ldr	r3, [pc, #248]	; (100085a0 <__kernel_cos+0x1ec>)
100084a8:	f003 f87e 	bl	1000b5a8 <__aeabi_dmul>
100084ac:	4a3d      	ldr	r2, [pc, #244]	; (100085a4 <__kernel_cos+0x1f0>)
100084ae:	4b3e      	ldr	r3, [pc, #248]	; (100085a8 <__kernel_cos+0x1f4>)
100084b0:	f002 f914 	bl	1000a6dc <__aeabi_dadd>
100084b4:	1c22      	adds	r2, r4, #0
100084b6:	1c2b      	adds	r3, r5, #0
100084b8:	f003 f876 	bl	1000b5a8 <__aeabi_dmul>
100084bc:	4a3b      	ldr	r2, [pc, #236]	; (100085ac <__kernel_cos+0x1f8>)
100084be:	4b3c      	ldr	r3, [pc, #240]	; (100085b0 <__kernel_cos+0x1fc>)
100084c0:	f003 fb0c 	bl	1000badc <__aeabi_dsub>
100084c4:	1c22      	adds	r2, r4, #0
100084c6:	1c2b      	adds	r3, r5, #0
100084c8:	f003 f86e 	bl	1000b5a8 <__aeabi_dmul>
100084cc:	4a39      	ldr	r2, [pc, #228]	; (100085b4 <__kernel_cos+0x200>)
100084ce:	4b3a      	ldr	r3, [pc, #232]	; (100085b8 <__kernel_cos+0x204>)
100084d0:	f002 f904 	bl	1000a6dc <__aeabi_dadd>
100084d4:	1c22      	adds	r2, r4, #0
100084d6:	1c2b      	adds	r3, r5, #0
100084d8:	f003 f866 	bl	1000b5a8 <__aeabi_dmul>
100084dc:	4a37      	ldr	r2, [pc, #220]	; (100085bc <__kernel_cos+0x208>)
100084de:	4b38      	ldr	r3, [pc, #224]	; (100085c0 <__kernel_cos+0x20c>)
100084e0:	f003 fafc 	bl	1000badc <__aeabi_dsub>
100084e4:	1c22      	adds	r2, r4, #0
100084e6:	1c2b      	adds	r3, r5, #0
100084e8:	f003 f85e 	bl	1000b5a8 <__aeabi_dmul>
100084ec:	4a35      	ldr	r2, [pc, #212]	; (100085c4 <__kernel_cos+0x210>)
100084ee:	4b36      	ldr	r3, [pc, #216]	; (100085c8 <__kernel_cos+0x214>)
100084f0:	f002 f8f4 	bl	1000a6dc <__aeabi_dadd>
100084f4:	1c2b      	adds	r3, r5, #0
100084f6:	1c22      	adds	r2, r4, #0
100084f8:	f003 f856 	bl	1000b5a8 <__aeabi_dmul>
100084fc:	4b35      	ldr	r3, [pc, #212]	; (100085d4 <__kernel_cos+0x220>)
100084fe:	9002      	str	r0, [sp, #8]
10008500:	9103      	str	r1, [sp, #12]
10008502:	429f      	cmp	r7, r3
10008504:	dd9f      	ble.n	10008446 <__kernel_cos+0x92>
10008506:	4b34      	ldr	r3, [pc, #208]	; (100085d8 <__kernel_cos+0x224>)
10008508:	2200      	movs	r2, #0
1000850a:	429f      	cmp	r7, r3
1000850c:	dc3a      	bgt.n	10008584 <__kernel_cos+0x1d0>
1000850e:	4933      	ldr	r1, [pc, #204]	; (100085dc <__kernel_cos+0x228>)
10008510:	2000      	movs	r0, #0
10008512:	187b      	adds	r3, r7, r1
10008514:	492e      	ldr	r1, [pc, #184]	; (100085d0 <__kernel_cos+0x21c>)
10008516:	1c16      	adds	r6, r2, #0
10008518:	1c1f      	adds	r7, r3, #0
1000851a:	f003 fadf 	bl	1000badc <__aeabi_dsub>
1000851e:	9004      	str	r0, [sp, #16]
10008520:	9105      	str	r1, [sp, #20]
10008522:	1c20      	adds	r0, r4, #0
10008524:	1c29      	adds	r1, r5, #0
10008526:	2200      	movs	r2, #0
10008528:	4b28      	ldr	r3, [pc, #160]	; (100085cc <__kernel_cos+0x218>)
1000852a:	f003 f83d 	bl	1000b5a8 <__aeabi_dmul>
1000852e:	1c32      	adds	r2, r6, #0
10008530:	1c3b      	adds	r3, r7, #0
10008532:	f003 fad3 	bl	1000badc <__aeabi_dsub>
10008536:	9a02      	ldr	r2, [sp, #8]
10008538:	9b03      	ldr	r3, [sp, #12]
1000853a:	1c06      	adds	r6, r0, #0
1000853c:	1c0f      	adds	r7, r1, #0
1000853e:	1c20      	adds	r0, r4, #0
10008540:	1c29      	adds	r1, r5, #0
10008542:	f003 f831 	bl	1000b5a8 <__aeabi_dmul>
10008546:	9a00      	ldr	r2, [sp, #0]
10008548:	9b01      	ldr	r3, [sp, #4]
1000854a:	1c04      	adds	r4, r0, #0
1000854c:	1c0d      	adds	r5, r1, #0
1000854e:	4648      	mov	r0, r9
10008550:	4641      	mov	r1, r8
10008552:	f003 f829 	bl	1000b5a8 <__aeabi_dmul>
10008556:	1c02      	adds	r2, r0, #0
10008558:	1c0b      	adds	r3, r1, #0
1000855a:	1c20      	adds	r0, r4, #0
1000855c:	1c29      	adds	r1, r5, #0
1000855e:	f003 fabd 	bl	1000badc <__aeabi_dsub>
10008562:	1c02      	adds	r2, r0, #0
10008564:	1c0b      	adds	r3, r1, #0
10008566:	1c30      	adds	r0, r6, #0
10008568:	1c39      	adds	r1, r7, #0
1000856a:	f003 fab7 	bl	1000badc <__aeabi_dsub>
1000856e:	1c02      	adds	r2, r0, #0
10008570:	1c0b      	adds	r3, r1, #0
10008572:	9804      	ldr	r0, [sp, #16]
10008574:	9905      	ldr	r1, [sp, #20]
10008576:	f003 fab1 	bl	1000badc <__aeabi_dsub>
1000857a:	b007      	add	sp, #28
1000857c:	bc0c      	pop	{r2, r3}
1000857e:	4690      	mov	r8, r2
10008580:	4699      	mov	r9, r3
10008582:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008584:	4b16      	ldr	r3, [pc, #88]	; (100085e0 <__kernel_cos+0x22c>)
10008586:	2600      	movs	r6, #0
10008588:	9204      	str	r2, [sp, #16]
1000858a:	9305      	str	r3, [sp, #20]
1000858c:	4f15      	ldr	r7, [pc, #84]	; (100085e4 <__kernel_cos+0x230>)
1000858e:	e7c8      	b.n	10008522 <__kernel_cos+0x16e>
10008590:	2000      	movs	r0, #0
10008592:	490f      	ldr	r1, [pc, #60]	; (100085d0 <__kernel_cos+0x21c>)
10008594:	e7f1      	b.n	1000857a <__kernel_cos+0x1c6>
10008596:	46c0      	nop			; (mov r8, r8)
10008598:	3e3fffff 	.word	0x3e3fffff
1000859c:	be8838d4 	.word	0xbe8838d4
100085a0:	bda8fae9 	.word	0xbda8fae9
100085a4:	bdb4b1c4 	.word	0xbdb4b1c4
100085a8:	3e21ee9e 	.word	0x3e21ee9e
100085ac:	809c52ad 	.word	0x809c52ad
100085b0:	3e927e4f 	.word	0x3e927e4f
100085b4:	19cb1590 	.word	0x19cb1590
100085b8:	3efa01a0 	.word	0x3efa01a0
100085bc:	16c15177 	.word	0x16c15177
100085c0:	3f56c16c 	.word	0x3f56c16c
100085c4:	5555554c 	.word	0x5555554c
100085c8:	3fa55555 	.word	0x3fa55555
100085cc:	3fe00000 	.word	0x3fe00000
100085d0:	3ff00000 	.word	0x3ff00000
100085d4:	3fd33332 	.word	0x3fd33332
100085d8:	3fe90000 	.word	0x3fe90000
100085dc:	ffe00000 	.word	0xffe00000
100085e0:	3fe70000 	.word	0x3fe70000
100085e4:	3fd20000 	.word	0x3fd20000

100085e8 <__kernel_rem_pio2>:
100085e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100085ea:	4656      	mov	r6, sl
100085ec:	464d      	mov	r5, r9
100085ee:	4644      	mov	r4, r8
100085f0:	465f      	mov	r7, fp
100085f2:	b4f0      	push	{r4, r5, r6, r7}
100085f4:	4c8e      	ldr	r4, [pc, #568]	; (10008830 <__kernel_rem_pio2+0x248>)
100085f6:	44a5      	add	sp, r4
100085f8:	9108      	str	r1, [sp, #32]
100085fa:	1c19      	adds	r1, r3, #0
100085fc:	1c14      	adds	r4, r2, #0
100085fe:	9aa6      	ldr	r2, [sp, #664]	; 0x298
10008600:	9309      	str	r3, [sp, #36]	; 0x24
10008602:	4b8c      	ldr	r3, [pc, #560]	; (10008834 <__kernel_rem_pio2+0x24c>)
10008604:	0092      	lsls	r2, r2, #2
10008606:	58d2      	ldr	r2, [r2, r3]
10008608:	1c0b      	adds	r3, r1, #0
1000860a:	9002      	str	r0, [sp, #8]
1000860c:	3b01      	subs	r3, #1
1000860e:	1ee0      	subs	r0, r4, #3
10008610:	2118      	movs	r1, #24
10008612:	1c1d      	adds	r5, r3, #0
10008614:	1c16      	adds	r6, r2, #0
10008616:	9207      	str	r2, [sp, #28]
10008618:	9300      	str	r3, [sp, #0]
1000861a:	f7fa f825 	bl	10002668 <__aeabi_idiv>
1000861e:	43c3      	mvns	r3, r0
10008620:	1c02      	adds	r2, r0, #0
10008622:	17db      	asrs	r3, r3, #31
10008624:	401a      	ands	r2, r3
10008626:	43d3      	mvns	r3, r2
10008628:	1c11      	adds	r1, r2, #0
1000862a:	920c      	str	r2, [sp, #48]	; 0x30
1000862c:	005a      	lsls	r2, r3, #1
1000862e:	18d3      	adds	r3, r2, r3
10008630:	00db      	lsls	r3, r3, #3
10008632:	191b      	adds	r3, r3, r4
10008634:	9304      	str	r3, [sp, #16]
10008636:	1b4c      	subs	r4, r1, r5
10008638:	19ae      	adds	r6, r5, r6
1000863a:	d418      	bmi.n	1000866e <__kernel_rem_pio2+0x86>
1000863c:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
1000863e:	00a5      	lsls	r5, r4, #2
10008640:	469c      	mov	ip, r3
10008642:	19a6      	adds	r6, r4, r6
10008644:	af24      	add	r7, sp, #144	; 0x90
10008646:	4465      	add	r5, ip
10008648:	3601      	adds	r6, #1
1000864a:	e007      	b.n	1000865c <__kernel_rem_pio2+0x74>
1000864c:	6828      	ldr	r0, [r5, #0]
1000864e:	f003 fdf5 	bl	1000c23c <__aeabi_i2d>
10008652:	3401      	adds	r4, #1
10008654:	c703      	stmia	r7!, {r0, r1}
10008656:	3504      	adds	r5, #4
10008658:	42b4      	cmp	r4, r6
1000865a:	d008      	beq.n	1000866e <__kernel_rem_pio2+0x86>
1000865c:	2c00      	cmp	r4, #0
1000865e:	daf5      	bge.n	1000864c <__kernel_rem_pio2+0x64>
10008660:	2000      	movs	r0, #0
10008662:	2100      	movs	r1, #0
10008664:	3401      	adds	r4, #1
10008666:	c703      	stmia	r7!, {r0, r1}
10008668:	3504      	adds	r5, #4
1000866a:	42b4      	cmp	r4, r6
1000866c:	d1f6      	bne.n	1000865c <__kernel_rem_pio2+0x74>
1000866e:	9b07      	ldr	r3, [sp, #28]
10008670:	2b00      	cmp	r3, #0
10008672:	da01      	bge.n	10008678 <__kernel_rem_pio2+0x90>
10008674:	f000 fbec 	bl	10008e50 <__kernel_rem_pio2+0x868>
10008678:	2200      	movs	r2, #0
1000867a:	9b07      	ldr	r3, [sp, #28]
1000867c:	4691      	mov	r9, r2
1000867e:	3301      	adds	r3, #1
10008680:	00db      	lsls	r3, r3, #3
10008682:	469a      	mov	sl, r3
10008684:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008686:	aa74      	add	r2, sp, #464	; 0x1d0
10008688:	00db      	lsls	r3, r3, #3
1000868a:	9206      	str	r2, [sp, #24]
1000868c:	2208      	movs	r2, #8
1000868e:	469c      	mov	ip, r3
10008690:	4252      	negs	r2, r2
10008692:	4462      	add	r2, ip
10008694:	4693      	mov	fp, r2
10008696:	9303      	str	r3, [sp, #12]
10008698:	9b00      	ldr	r3, [sp, #0]
1000869a:	2b00      	cmp	r3, #0
1000869c:	da00      	bge.n	100086a0 <__kernel_rem_pio2+0xb8>
1000869e:	e290      	b.n	10008bc2 <__kernel_rem_pio2+0x5da>
100086a0:	ab24      	add	r3, sp, #144	; 0x90
100086a2:	469c      	mov	ip, r3
100086a4:	465c      	mov	r4, fp
100086a6:	464b      	mov	r3, r9
100086a8:	46e0      	mov	r8, ip
100086aa:	2600      	movs	r6, #0
100086ac:	2700      	movs	r7, #0
100086ae:	444c      	add	r4, r9
100086b0:	3b08      	subs	r3, #8
100086b2:	9d02      	ldr	r5, [sp, #8]
100086b4:	4464      	add	r4, ip
100086b6:	4498      	add	r8, r3
100086b8:	6822      	ldr	r2, [r4, #0]
100086ba:	6863      	ldr	r3, [r4, #4]
100086bc:	cd03      	ldmia	r5!, {r0, r1}
100086be:	f002 ff73 	bl	1000b5a8 <__aeabi_dmul>
100086c2:	1c02      	adds	r2, r0, #0
100086c4:	1c0b      	adds	r3, r1, #0
100086c6:	1c30      	adds	r0, r6, #0
100086c8:	1c39      	adds	r1, r7, #0
100086ca:	f002 f807 	bl	1000a6dc <__aeabi_dadd>
100086ce:	3c08      	subs	r4, #8
100086d0:	1c06      	adds	r6, r0, #0
100086d2:	1c0f      	adds	r7, r1, #0
100086d4:	4544      	cmp	r4, r8
100086d6:	d1ef      	bne.n	100086b8 <__kernel_rem_pio2+0xd0>
100086d8:	9b06      	ldr	r3, [sp, #24]
100086da:	444b      	add	r3, r9
100086dc:	601e      	str	r6, [r3, #0]
100086de:	605f      	str	r7, [r3, #4]
100086e0:	2308      	movs	r3, #8
100086e2:	469c      	mov	ip, r3
100086e4:	44e1      	add	r9, ip
100086e6:	45d1      	cmp	r9, sl
100086e8:	d1d6      	bne.n	10008698 <__kernel_rem_pio2+0xb0>
100086ea:	9a07      	ldr	r2, [sp, #28]
100086ec:	4952      	ldr	r1, [pc, #328]	; (10008838 <__kernel_rem_pio2+0x250>)
100086ee:	1c13      	adds	r3, r2, #0
100086f0:	468c      	mov	ip, r1
100086f2:	4463      	add	r3, ip
100086f4:	009b      	lsls	r3, r3, #2
100086f6:	a810      	add	r0, sp, #64	; 0x40
100086f8:	1c19      	adds	r1, r3, #0
100086fa:	4684      	mov	ip, r0
100086fc:	4691      	mov	r9, r2
100086fe:	3304      	adds	r3, #4
10008700:	4461      	add	r1, ip
10008702:	4463      	add	r3, ip
10008704:	910b      	str	r1, [sp, #44]	; 0x2c
10008706:	930d      	str	r3, [sp, #52]	; 0x34
10008708:	464b      	mov	r3, r9
1000870a:	00db      	lsls	r3, r3, #3
1000870c:	1c1a      	adds	r2, r3, #0
1000870e:	9906      	ldr	r1, [sp, #24]
10008710:	930a      	str	r3, [sp, #40]	; 0x28
10008712:	4694      	mov	ip, r2
10008714:	1c0b      	adds	r3, r1, #0
10008716:	4463      	add	r3, ip
10008718:	681e      	ldr	r6, [r3, #0]
1000871a:	685f      	ldr	r7, [r3, #4]
1000871c:	464b      	mov	r3, r9
1000871e:	2b00      	cmp	r3, #0
10008720:	dd32      	ble.n	10008788 <__kernel_rem_pio2+0x1a0>
10008722:	4688      	mov	r8, r1
10008724:	ab10      	add	r3, sp, #64	; 0x40
10008726:	469a      	mov	sl, r3
10008728:	4b44      	ldr	r3, [pc, #272]	; (1000883c <__kernel_rem_pio2+0x254>)
1000872a:	444b      	add	r3, r9
1000872c:	00db      	lsls	r3, r3, #3
1000872e:	4498      	add	r8, r3
10008730:	ab72      	add	r3, sp, #456	; 0x1c8
10008732:	469b      	mov	fp, r3
10008734:	2200      	movs	r2, #0
10008736:	4b42      	ldr	r3, [pc, #264]	; (10008840 <__kernel_rem_pio2+0x258>)
10008738:	1c30      	adds	r0, r6, #0
1000873a:	1c39      	adds	r1, r7, #0
1000873c:	f002 ff34 	bl	1000b5a8 <__aeabi_dmul>
10008740:	f003 fd46 	bl	1000c1d0 <__aeabi_d2iz>
10008744:	f003 fd7a 	bl	1000c23c <__aeabi_i2d>
10008748:	2200      	movs	r2, #0
1000874a:	4b3e      	ldr	r3, [pc, #248]	; (10008844 <__kernel_rem_pio2+0x25c>)
1000874c:	1c04      	adds	r4, r0, #0
1000874e:	1c0d      	adds	r5, r1, #0
10008750:	f002 ff2a 	bl	1000b5a8 <__aeabi_dmul>
10008754:	1c02      	adds	r2, r0, #0
10008756:	1c0b      	adds	r3, r1, #0
10008758:	1c30      	adds	r0, r6, #0
1000875a:	1c39      	adds	r1, r7, #0
1000875c:	f003 f9be 	bl	1000badc <__aeabi_dsub>
10008760:	f003 fd36 	bl	1000c1d0 <__aeabi_d2iz>
10008764:	4653      	mov	r3, sl
10008766:	c301      	stmia	r3!, {r0}
10008768:	469a      	mov	sl, r3
1000876a:	4643      	mov	r3, r8
1000876c:	1c20      	adds	r0, r4, #0
1000876e:	681a      	ldr	r2, [r3, #0]
10008770:	685b      	ldr	r3, [r3, #4]
10008772:	1c29      	adds	r1, r5, #0
10008774:	f001 ffb2 	bl	1000a6dc <__aeabi_dadd>
10008778:	2308      	movs	r3, #8
1000877a:	425b      	negs	r3, r3
1000877c:	469c      	mov	ip, r3
1000877e:	44e0      	add	r8, ip
10008780:	1c06      	adds	r6, r0, #0
10008782:	1c0f      	adds	r7, r1, #0
10008784:	45d8      	cmp	r8, fp
10008786:	d1d5      	bne.n	10008734 <__kernel_rem_pio2+0x14c>
10008788:	9b04      	ldr	r3, [sp, #16]
1000878a:	1c30      	adds	r0, r6, #0
1000878c:	1c1a      	adds	r2, r3, #0
1000878e:	1c39      	adds	r1, r7, #0
10008790:	4698      	mov	r8, r3
10008792:	f000 ff73 	bl	1000967c <scalbn>
10008796:	23ff      	movs	r3, #255	; 0xff
10008798:	2200      	movs	r2, #0
1000879a:	059b      	lsls	r3, r3, #22
1000879c:	1c04      	adds	r4, r0, #0
1000879e:	1c0d      	adds	r5, r1, #0
100087a0:	f002 ff02 	bl	1000b5a8 <__aeabi_dmul>
100087a4:	f000 fdec 	bl	10009380 <floor>
100087a8:	2200      	movs	r2, #0
100087aa:	4b27      	ldr	r3, [pc, #156]	; (10008848 <__kernel_rem_pio2+0x260>)
100087ac:	f002 fefc 	bl	1000b5a8 <__aeabi_dmul>
100087b0:	1c02      	adds	r2, r0, #0
100087b2:	1c0b      	adds	r3, r1, #0
100087b4:	1c20      	adds	r0, r4, #0
100087b6:	1c29      	adds	r1, r5, #0
100087b8:	f003 f990 	bl	1000badc <__aeabi_dsub>
100087bc:	1c0d      	adds	r5, r1, #0
100087be:	1c04      	adds	r4, r0, #0
100087c0:	f003 fd06 	bl	1000c1d0 <__aeabi_d2iz>
100087c4:	4682      	mov	sl, r0
100087c6:	f003 fd39 	bl	1000c23c <__aeabi_i2d>
100087ca:	1c02      	adds	r2, r0, #0
100087cc:	1c0b      	adds	r3, r1, #0
100087ce:	1c20      	adds	r0, r4, #0
100087d0:	1c29      	adds	r1, r5, #0
100087d2:	f003 f983 	bl	1000badc <__aeabi_dsub>
100087d6:	1c06      	adds	r6, r0, #0
100087d8:	4640      	mov	r0, r8
100087da:	1c0f      	adds	r7, r1, #0
100087dc:	2800      	cmp	r0, #0
100087de:	dc00      	bgt.n	100087e2 <__kernel_rem_pio2+0x1fa>
100087e0:	e1cf      	b.n	10008b82 <__kernel_rem_pio2+0x59a>
100087e2:	464b      	mov	r3, r9
100087e4:	1e5a      	subs	r2, r3, #1
100087e6:	0092      	lsls	r2, r2, #2
100087e8:	ab10      	add	r3, sp, #64	; 0x40
100087ea:	589b      	ldr	r3, [r3, r2]
100087ec:	2518      	movs	r5, #24
100087ee:	1c19      	adds	r1, r3, #0
100087f0:	1a2d      	subs	r5, r5, r0
100087f2:	4129      	asrs	r1, r5
100087f4:	448a      	add	sl, r1
100087f6:	40a9      	lsls	r1, r5
100087f8:	2517      	movs	r5, #23
100087fa:	1a5b      	subs	r3, r3, r1
100087fc:	1a2d      	subs	r5, r5, r0
100087fe:	a910      	add	r1, sp, #64	; 0x40
10008800:	508b      	str	r3, [r1, r2]
10008802:	412b      	asrs	r3, r5
10008804:	9305      	str	r3, [sp, #20]
10008806:	9b05      	ldr	r3, [sp, #20]
10008808:	2b00      	cmp	r3, #0
1000880a:	dd4c      	ble.n	100088a6 <__kernel_rem_pio2+0x2be>
1000880c:	2301      	movs	r3, #1
1000880e:	469c      	mov	ip, r3
10008810:	464b      	mov	r3, r9
10008812:	44e2      	add	sl, ip
10008814:	2b00      	cmp	r3, #0
10008816:	dc00      	bgt.n	1000881a <__kernel_rem_pio2+0x232>
10008818:	e318      	b.n	10008e4c <__kernel_rem_pio2+0x864>
1000881a:	2580      	movs	r5, #128	; 0x80
1000881c:	960e      	str	r6, [sp, #56]	; 0x38
1000881e:	970f      	str	r7, [sp, #60]	; 0x3c
10008820:	ab10      	add	r3, sp, #64	; 0x40
10008822:	2100      	movs	r1, #0
10008824:	2400      	movs	r4, #0
10008826:	4809      	ldr	r0, [pc, #36]	; (1000884c <__kernel_rem_pio2+0x264>)
10008828:	046d      	lsls	r5, r5, #17
1000882a:	464e      	mov	r6, r9
1000882c:	e019      	b.n	10008862 <__kernel_rem_pio2+0x27a>
1000882e:	46c0      	nop			; (mov r8, r8)
10008830:	fffffd8c 	.word	0xfffffd8c
10008834:	1000cdc0 	.word	0x1000cdc0
10008838:	3ffffffe 	.word	0x3ffffffe
1000883c:	1fffffff 	.word	0x1fffffff
10008840:	3e700000 	.word	0x3e700000
10008844:	41700000 	.word	0x41700000
10008848:	40200000 	.word	0x40200000
1000884c:	00ffffff 	.word	0x00ffffff
10008850:	2a00      	cmp	r2, #0
10008852:	d002      	beq.n	1000885a <__kernel_rem_pio2+0x272>
10008854:	1aaa      	subs	r2, r5, r2
10008856:	601a      	str	r2, [r3, #0]
10008858:	3401      	adds	r4, #1
1000885a:	3101      	adds	r1, #1
1000885c:	3304      	adds	r3, #4
1000885e:	428e      	cmp	r6, r1
10008860:	dd09      	ble.n	10008876 <__kernel_rem_pio2+0x28e>
10008862:	681a      	ldr	r2, [r3, #0]
10008864:	2c00      	cmp	r4, #0
10008866:	d0f3      	beq.n	10008850 <__kernel_rem_pio2+0x268>
10008868:	1a82      	subs	r2, r0, r2
1000886a:	3101      	adds	r1, #1
1000886c:	601a      	str	r2, [r3, #0]
1000886e:	2401      	movs	r4, #1
10008870:	3304      	adds	r3, #4
10008872:	428e      	cmp	r6, r1
10008874:	dcf5      	bgt.n	10008862 <__kernel_rem_pio2+0x27a>
10008876:	46b1      	mov	r9, r6
10008878:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1000887a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1000887c:	9b04      	ldr	r3, [sp, #16]
1000887e:	2b00      	cmp	r3, #0
10008880:	dd0e      	ble.n	100088a0 <__kernel_rem_pio2+0x2b8>
10008882:	2b01      	cmp	r3, #1
10008884:	d100      	bne.n	10008888 <__kernel_rem_pio2+0x2a0>
10008886:	e187      	b.n	10008b98 <__kernel_rem_pio2+0x5b0>
10008888:	2b02      	cmp	r3, #2
1000888a:	d109      	bne.n	100088a0 <__kernel_rem_pio2+0x2b8>
1000888c:	464b      	mov	r3, r9
1000888e:	1e5a      	subs	r2, r3, #1
10008890:	0092      	lsls	r2, r2, #2
10008892:	ab10      	add	r3, sp, #64	; 0x40
10008894:	589b      	ldr	r3, [r3, r2]
10008896:	a910      	add	r1, sp, #64	; 0x40
10008898:	930e      	str	r3, [sp, #56]	; 0x38
1000889a:	029b      	lsls	r3, r3, #10
1000889c:	0a9b      	lsrs	r3, r3, #10
1000889e:	508b      	str	r3, [r1, r2]
100088a0:	9b05      	ldr	r3, [sp, #20]
100088a2:	2b02      	cmp	r3, #2
100088a4:	d07a      	beq.n	1000899c <__kernel_rem_pio2+0x3b4>
100088a6:	1c30      	adds	r0, r6, #0
100088a8:	1c39      	adds	r1, r7, #0
100088aa:	2200      	movs	r2, #0
100088ac:	2300      	movs	r3, #0
100088ae:	f000 ff71 	bl	10009794 <__aeabi_dcmpeq>
100088b2:	2800      	cmp	r0, #0
100088b4:	d100      	bne.n	100088b8 <__kernel_rem_pio2+0x2d0>
100088b6:	e092      	b.n	100089de <__kernel_rem_pio2+0x3f6>
100088b8:	464b      	mov	r3, r9
100088ba:	1e59      	subs	r1, r3, #1
100088bc:	9b07      	ldr	r3, [sp, #28]
100088be:	428b      	cmp	r3, r1
100088c0:	dc0f      	bgt.n	100088e2 <__kernel_rem_pio2+0x2fa>
100088c2:	aa10      	add	r2, sp, #64	; 0x40
100088c4:	4694      	mov	ip, r2
100088c6:	2200      	movs	r2, #0
100088c8:	4bce      	ldr	r3, [pc, #824]	; (10008c04 <__kernel_rem_pio2+0x61c>)
100088ca:	980d      	ldr	r0, [sp, #52]	; 0x34
100088cc:	444b      	add	r3, r9
100088ce:	009b      	lsls	r3, r3, #2
100088d0:	4463      	add	r3, ip
100088d2:	681c      	ldr	r4, [r3, #0]
100088d4:	3b04      	subs	r3, #4
100088d6:	4322      	orrs	r2, r4
100088d8:	4283      	cmp	r3, r0
100088da:	d1fa      	bne.n	100088d2 <__kernel_rem_pio2+0x2ea>
100088dc:	2a00      	cmp	r2, #0
100088de:	d000      	beq.n	100088e2 <__kernel_rem_pio2+0x2fa>
100088e0:	e1e5      	b.n	10008cae <__kernel_rem_pio2+0x6c6>
100088e2:	9b07      	ldr	r3, [sp, #28]
100088e4:	aa10      	add	r2, sp, #64	; 0x40
100088e6:	3b01      	subs	r3, #1
100088e8:	009b      	lsls	r3, r3, #2
100088ea:	58d3      	ldr	r3, [r2, r3]
100088ec:	2b00      	cmp	r3, #0
100088ee:	d000      	beq.n	100088f2 <__kernel_rem_pio2+0x30a>
100088f0:	e2aa      	b.n	10008e48 <__kernel_rem_pio2+0x860>
100088f2:	2201      	movs	r2, #1
100088f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100088f6:	3b04      	subs	r3, #4
100088f8:	6859      	ldr	r1, [r3, #4]
100088fa:	3201      	adds	r2, #1
100088fc:	2900      	cmp	r1, #0
100088fe:	d0fa      	beq.n	100088f6 <__kernel_rem_pio2+0x30e>
10008900:	464b      	mov	r3, r9
10008902:	444a      	add	r2, r9
10008904:	3301      	adds	r3, #1
10008906:	9205      	str	r2, [sp, #20]
10008908:	4293      	cmp	r3, r2
1000890a:	dc41      	bgt.n	10008990 <__kernel_rem_pio2+0x3a8>
1000890c:	99a7      	ldr	r1, [sp, #668]	; 0x29c
1000890e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10008910:	468a      	mov	sl, r1
10008912:	189a      	adds	r2, r3, r2
10008914:	0092      	lsls	r2, r2, #2
10008916:	4492      	add	sl, r2
10008918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000891a:	9906      	ldr	r1, [sp, #24]
1000891c:	4691      	mov	r9, r2
1000891e:	9a00      	ldr	r2, [sp, #0]
10008920:	468b      	mov	fp, r1
10008922:	4694      	mov	ip, r2
10008924:	9a09      	ldr	r2, [sp, #36]	; 0x24
10008926:	4463      	add	r3, ip
10008928:	1a9b      	subs	r3, r3, r2
1000892a:	aa24      	add	r2, sp, #144	; 0x90
1000892c:	4690      	mov	r8, r2
1000892e:	00db      	lsls	r3, r3, #3
10008930:	4498      	add	r8, r3
10008932:	9b05      	ldr	r3, [sp, #20]
10008934:	44d9      	add	r9, fp
10008936:	00db      	lsls	r3, r3, #3
10008938:	449b      	add	fp, r3
1000893a:	9b03      	ldr	r3, [sp, #12]
1000893c:	4443      	add	r3, r8
1000893e:	1c1c      	adds	r4, r3, #0
10008940:	4653      	mov	r3, sl
10008942:	6818      	ldr	r0, [r3, #0]
10008944:	f003 fc7a 	bl	1000c23c <__aeabi_i2d>
10008948:	9b00      	ldr	r3, [sp, #0]
1000894a:	6020      	str	r0, [r4, #0]
1000894c:	6061      	str	r1, [r4, #4]
1000894e:	2b00      	cmp	r3, #0
10008950:	db21      	blt.n	10008996 <__kernel_rem_pio2+0x3ae>
10008952:	2600      	movs	r6, #0
10008954:	2700      	movs	r7, #0
10008956:	9d02      	ldr	r5, [sp, #8]
10008958:	6822      	ldr	r2, [r4, #0]
1000895a:	6863      	ldr	r3, [r4, #4]
1000895c:	cd03      	ldmia	r5!, {r0, r1}
1000895e:	f002 fe23 	bl	1000b5a8 <__aeabi_dmul>
10008962:	1c02      	adds	r2, r0, #0
10008964:	1c0b      	adds	r3, r1, #0
10008966:	1c30      	adds	r0, r6, #0
10008968:	1c39      	adds	r1, r7, #0
1000896a:	f001 feb7 	bl	1000a6dc <__aeabi_dadd>
1000896e:	3c08      	subs	r4, #8
10008970:	1c06      	adds	r6, r0, #0
10008972:	1c0f      	adds	r7, r1, #0
10008974:	4544      	cmp	r4, r8
10008976:	d1ef      	bne.n	10008958 <__kernel_rem_pio2+0x370>
10008978:	464b      	mov	r3, r9
1000897a:	609e      	str	r6, [r3, #8]
1000897c:	60df      	str	r7, [r3, #12]
1000897e:	2304      	movs	r3, #4
10008980:	469c      	mov	ip, r3
10008982:	3304      	adds	r3, #4
10008984:	44e2      	add	sl, ip
10008986:	469c      	mov	ip, r3
10008988:	44e1      	add	r9, ip
1000898a:	44e0      	add	r8, ip
1000898c:	45d9      	cmp	r9, fp
1000898e:	d1d4      	bne.n	1000893a <__kernel_rem_pio2+0x352>
10008990:	9b05      	ldr	r3, [sp, #20]
10008992:	4699      	mov	r9, r3
10008994:	e6b8      	b.n	10008708 <__kernel_rem_pio2+0x120>
10008996:	2600      	movs	r6, #0
10008998:	2700      	movs	r7, #0
1000899a:	e7ed      	b.n	10008978 <__kernel_rem_pio2+0x390>
1000899c:	1c32      	adds	r2, r6, #0
1000899e:	1c3b      	adds	r3, r7, #0
100089a0:	2000      	movs	r0, #0
100089a2:	4999      	ldr	r1, [pc, #612]	; (10008c08 <__kernel_rem_pio2+0x620>)
100089a4:	f003 f89a 	bl	1000badc <__aeabi_dsub>
100089a8:	1c06      	adds	r6, r0, #0
100089aa:	1c0f      	adds	r7, r1, #0
100089ac:	2c00      	cmp	r4, #0
100089ae:	d100      	bne.n	100089b2 <__kernel_rem_pio2+0x3ca>
100089b0:	e779      	b.n	100088a6 <__kernel_rem_pio2+0x2be>
100089b2:	9a04      	ldr	r2, [sp, #16]
100089b4:	2000      	movs	r0, #0
100089b6:	4994      	ldr	r1, [pc, #592]	; (10008c08 <__kernel_rem_pio2+0x620>)
100089b8:	f000 fe60 	bl	1000967c <scalbn>
100089bc:	1c02      	adds	r2, r0, #0
100089be:	1c0b      	adds	r3, r1, #0
100089c0:	1c30      	adds	r0, r6, #0
100089c2:	1c39      	adds	r1, r7, #0
100089c4:	f003 f88a 	bl	1000badc <__aeabi_dsub>
100089c8:	1c06      	adds	r6, r0, #0
100089ca:	1c0f      	adds	r7, r1, #0
100089cc:	1c30      	adds	r0, r6, #0
100089ce:	1c39      	adds	r1, r7, #0
100089d0:	2200      	movs	r2, #0
100089d2:	2300      	movs	r3, #0
100089d4:	f000 fede 	bl	10009794 <__aeabi_dcmpeq>
100089d8:	2800      	cmp	r0, #0
100089da:	d000      	beq.n	100089de <__kernel_rem_pio2+0x3f6>
100089dc:	e76c      	b.n	100088b8 <__kernel_rem_pio2+0x2d0>
100089de:	4653      	mov	r3, sl
100089e0:	9309      	str	r3, [sp, #36]	; 0x24
100089e2:	9b04      	ldr	r3, [sp, #16]
100089e4:	1c30      	adds	r0, r6, #0
100089e6:	425a      	negs	r2, r3
100089e8:	1c39      	adds	r1, r7, #0
100089ea:	f000 fe47 	bl	1000967c <scalbn>
100089ee:	2200      	movs	r2, #0
100089f0:	4b86      	ldr	r3, [pc, #536]	; (10008c0c <__kernel_rem_pio2+0x624>)
100089f2:	1c04      	adds	r4, r0, #0
100089f4:	1c0d      	adds	r5, r1, #0
100089f6:	f000 fef1 	bl	100097dc <__aeabi_dcmpge>
100089fa:	2800      	cmp	r0, #0
100089fc:	d100      	bne.n	10008a00 <__kernel_rem_pio2+0x418>
100089fe:	e22d      	b.n	10008e5c <__kernel_rem_pio2+0x874>
10008a00:	2200      	movs	r2, #0
10008a02:	4b83      	ldr	r3, [pc, #524]	; (10008c10 <__kernel_rem_pio2+0x628>)
10008a04:	1c20      	adds	r0, r4, #0
10008a06:	1c29      	adds	r1, r5, #0
10008a08:	f002 fdce 	bl	1000b5a8 <__aeabi_dmul>
10008a0c:	f003 fbe0 	bl	1000c1d0 <__aeabi_d2iz>
10008a10:	464b      	mov	r3, r9
10008a12:	1c06      	adds	r6, r0, #0
10008a14:	009f      	lsls	r7, r3, #2
10008a16:	f003 fc11 	bl	1000c23c <__aeabi_i2d>
10008a1a:	2200      	movs	r2, #0
10008a1c:	4b7b      	ldr	r3, [pc, #492]	; (10008c0c <__kernel_rem_pio2+0x624>)
10008a1e:	f002 fdc3 	bl	1000b5a8 <__aeabi_dmul>
10008a22:	1c02      	adds	r2, r0, #0
10008a24:	1c0b      	adds	r3, r1, #0
10008a26:	1c20      	adds	r0, r4, #0
10008a28:	1c29      	adds	r1, r5, #0
10008a2a:	f003 f857 	bl	1000badc <__aeabi_dsub>
10008a2e:	f003 fbcf 	bl	1000c1d0 <__aeabi_d2iz>
10008a32:	ab10      	add	r3, sp, #64	; 0x40
10008a34:	51d8      	str	r0, [r3, r7]
10008a36:	2301      	movs	r3, #1
10008a38:	444b      	add	r3, r9
10008a3a:	4698      	mov	r8, r3
10008a3c:	9b04      	ldr	r3, [sp, #16]
10008a3e:	aa10      	add	r2, sp, #64	; 0x40
10008a40:	3318      	adds	r3, #24
10008a42:	9304      	str	r3, [sp, #16]
10008a44:	4643      	mov	r3, r8
10008a46:	009b      	lsls	r3, r3, #2
10008a48:	50d6      	str	r6, [r2, r3]
10008a4a:	2000      	movs	r0, #0
10008a4c:	496e      	ldr	r1, [pc, #440]	; (10008c08 <__kernel_rem_pio2+0x620>)
10008a4e:	9a04      	ldr	r2, [sp, #16]
10008a50:	f000 fe14 	bl	1000967c <scalbn>
10008a54:	4643      	mov	r3, r8
10008a56:	1c04      	adds	r4, r0, #0
10008a58:	1c0d      	adds	r5, r1, #0
10008a5a:	2b00      	cmp	r3, #0
10008a5c:	da00      	bge.n	10008a60 <__kernel_rem_pio2+0x478>
10008a5e:	e0c8      	b.n	10008bf2 <__kernel_rem_pio2+0x60a>
10008a60:	009f      	lsls	r7, r3, #2
10008a62:	ab10      	add	r3, sp, #64	; 0x40
10008a64:	469c      	mov	ip, r3
10008a66:	4643      	mov	r3, r8
10008a68:	00db      	lsls	r3, r3, #3
10008a6a:	4467      	add	r7, ip
10008a6c:	469c      	mov	ip, r3
10008a6e:	9303      	str	r3, [sp, #12]
10008a70:	ab72      	add	r3, sp, #456	; 0x1c8
10008a72:	4699      	mov	r9, r3
10008a74:	9e06      	ldr	r6, [sp, #24]
10008a76:	4466      	add	r6, ip
10008a78:	9600      	str	r6, [sp, #0]
10008a7a:	6838      	ldr	r0, [r7, #0]
10008a7c:	f003 fbde 	bl	1000c23c <__aeabi_i2d>
10008a80:	1c22      	adds	r2, r4, #0
10008a82:	1c2b      	adds	r3, r5, #0
10008a84:	f002 fd90 	bl	1000b5a8 <__aeabi_dmul>
10008a88:	2200      	movs	r2, #0
10008a8a:	6030      	str	r0, [r6, #0]
10008a8c:	6071      	str	r1, [r6, #4]
10008a8e:	4b60      	ldr	r3, [pc, #384]	; (10008c10 <__kernel_rem_pio2+0x628>)
10008a90:	1c20      	adds	r0, r4, #0
10008a92:	1c29      	adds	r1, r5, #0
10008a94:	f002 fd88 	bl	1000b5a8 <__aeabi_dmul>
10008a98:	3e08      	subs	r6, #8
10008a9a:	1c04      	adds	r4, r0, #0
10008a9c:	1c0d      	adds	r5, r1, #0
10008a9e:	3f04      	subs	r7, #4
10008aa0:	454e      	cmp	r6, r9
10008aa2:	d1ea      	bne.n	10008a7a <__kernel_rem_pio2+0x492>
10008aa4:	4643      	mov	r3, r8
10008aa6:	3301      	adds	r3, #1
10008aa8:	9302      	str	r3, [sp, #8]
10008aaa:	2300      	movs	r3, #0
10008aac:	469b      	mov	fp, r3
10008aae:	ab4c      	add	r3, sp, #304	; 0x130
10008ab0:	4699      	mov	r9, r3
10008ab2:	9b07      	ldr	r3, [sp, #28]
10008ab4:	469a      	mov	sl, r3
10008ab6:	4643      	mov	r3, r8
10008ab8:	9304      	str	r3, [sp, #16]
10008aba:	4653      	mov	r3, sl
10008abc:	2b00      	cmp	r3, #0
10008abe:	da00      	bge.n	10008ac2 <__kernel_rem_pio2+0x4da>
10008ac0:	e094      	b.n	10008bec <__kernel_rem_pio2+0x604>
10008ac2:	465b      	mov	r3, fp
10008ac4:	2b00      	cmp	r3, #0
10008ac6:	da00      	bge.n	10008aca <__kernel_rem_pio2+0x4e2>
10008ac8:	e090      	b.n	10008bec <__kernel_rem_pio2+0x604>
10008aca:	4b52      	ldr	r3, [pc, #328]	; (10008c14 <__kernel_rem_pio2+0x62c>)
10008acc:	9d00      	ldr	r5, [sp, #0]
10008ace:	4698      	mov	r8, r3
10008ad0:	2600      	movs	r6, #0
10008ad2:	2700      	movs	r7, #0
10008ad4:	2400      	movs	r4, #0
10008ad6:	e005      	b.n	10008ae4 <__kernel_rem_pio2+0x4fc>
10008ad8:	2308      	movs	r3, #8
10008ada:	469c      	mov	ip, r3
10008adc:	3508      	adds	r5, #8
10008ade:	44e0      	add	r8, ip
10008ae0:	455c      	cmp	r4, fp
10008ae2:	dc11      	bgt.n	10008b08 <__kernel_rem_pio2+0x520>
10008ae4:	4643      	mov	r3, r8
10008ae6:	6818      	ldr	r0, [r3, #0]
10008ae8:	6859      	ldr	r1, [r3, #4]
10008aea:	682a      	ldr	r2, [r5, #0]
10008aec:	686b      	ldr	r3, [r5, #4]
10008aee:	f002 fd5b 	bl	1000b5a8 <__aeabi_dmul>
10008af2:	1c02      	adds	r2, r0, #0
10008af4:	1c0b      	adds	r3, r1, #0
10008af6:	1c30      	adds	r0, r6, #0
10008af8:	1c39      	adds	r1, r7, #0
10008afa:	f001 fdef 	bl	1000a6dc <__aeabi_dadd>
10008afe:	3401      	adds	r4, #1
10008b00:	1c06      	adds	r6, r0, #0
10008b02:	1c0f      	adds	r7, r1, #0
10008b04:	45a2      	cmp	sl, r4
10008b06:	dae7      	bge.n	10008ad8 <__kernel_rem_pio2+0x4f0>
10008b08:	465b      	mov	r3, fp
10008b0a:	00db      	lsls	r3, r3, #3
10008b0c:	444b      	add	r3, r9
10008b0e:	601e      	str	r6, [r3, #0]
10008b10:	605f      	str	r7, [r3, #4]
10008b12:	2301      	movs	r3, #1
10008b14:	469c      	mov	ip, r3
10008b16:	9b00      	ldr	r3, [sp, #0]
10008b18:	44e3      	add	fp, ip
10008b1a:	3b08      	subs	r3, #8
10008b1c:	9300      	str	r3, [sp, #0]
10008b1e:	9b02      	ldr	r3, [sp, #8]
10008b20:	459b      	cmp	fp, r3
10008b22:	d1ca      	bne.n	10008aba <__kernel_rem_pio2+0x4d2>
10008b24:	9b04      	ldr	r3, [sp, #16]
10008b26:	4698      	mov	r8, r3
10008b28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
10008b2a:	2b02      	cmp	r3, #2
10008b2c:	dd00      	ble.n	10008b30 <__kernel_rem_pio2+0x548>
10008b2e:	e100      	b.n	10008d32 <__kernel_rem_pio2+0x74a>
10008b30:	2b00      	cmp	r3, #0
10008b32:	dd00      	ble.n	10008b36 <__kernel_rem_pio2+0x54e>
10008b34:	e0d7      	b.n	10008ce6 <__kernel_rem_pio2+0x6fe>
10008b36:	d118      	bne.n	10008b6a <__kernel_rem_pio2+0x582>
10008b38:	9b03      	ldr	r3, [sp, #12]
10008b3a:	2000      	movs	r0, #0
10008b3c:	444b      	add	r3, r9
10008b3e:	1c1c      	adds	r4, r3, #0
10008b40:	2100      	movs	r1, #0
10008b42:	4645      	mov	r5, r8
10008b44:	6822      	ldr	r2, [r4, #0]
10008b46:	6863      	ldr	r3, [r4, #4]
10008b48:	f001 fdc8 	bl	1000a6dc <__aeabi_dadd>
10008b4c:	3c08      	subs	r4, #8
10008b4e:	3d01      	subs	r5, #1
10008b50:	d2f8      	bcs.n	10008b44 <__kernel_rem_pio2+0x55c>
10008b52:	9b05      	ldr	r3, [sp, #20]
10008b54:	2b00      	cmp	r3, #0
10008b56:	d003      	beq.n	10008b60 <__kernel_rem_pio2+0x578>
10008b58:	2380      	movs	r3, #128	; 0x80
10008b5a:	061b      	lsls	r3, r3, #24
10008b5c:	469c      	mov	ip, r3
10008b5e:	4461      	add	r1, ip
10008b60:	1c0b      	adds	r3, r1, #0
10008b62:	1c02      	adds	r2, r0, #0
10008b64:	9908      	ldr	r1, [sp, #32]
10008b66:	600a      	str	r2, [r1, #0]
10008b68:	604b      	str	r3, [r1, #4]
10008b6a:	2007      	movs	r0, #7
10008b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008b6e:	4018      	ands	r0, r3
10008b70:	239d      	movs	r3, #157	; 0x9d
10008b72:	009b      	lsls	r3, r3, #2
10008b74:	449d      	add	sp, r3
10008b76:	bc3c      	pop	{r2, r3, r4, r5}
10008b78:	4690      	mov	r8, r2
10008b7a:	4699      	mov	r9, r3
10008b7c:	46a2      	mov	sl, r4
10008b7e:	46ab      	mov	fp, r5
10008b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008b82:	9b04      	ldr	r3, [sp, #16]
10008b84:	2b00      	cmp	r3, #0
10008b86:	d112      	bne.n	10008bae <__kernel_rem_pio2+0x5c6>
10008b88:	464b      	mov	r3, r9
10008b8a:	3b01      	subs	r3, #1
10008b8c:	009b      	lsls	r3, r3, #2
10008b8e:	aa10      	add	r2, sp, #64	; 0x40
10008b90:	58d5      	ldr	r5, [r2, r3]
10008b92:	15eb      	asrs	r3, r5, #23
10008b94:	9305      	str	r3, [sp, #20]
10008b96:	e636      	b.n	10008806 <__kernel_rem_pio2+0x21e>
10008b98:	464b      	mov	r3, r9
10008b9a:	1e5a      	subs	r2, r3, #1
10008b9c:	0092      	lsls	r2, r2, #2
10008b9e:	ab10      	add	r3, sp, #64	; 0x40
10008ba0:	589b      	ldr	r3, [r3, r2]
10008ba2:	a910      	add	r1, sp, #64	; 0x40
10008ba4:	930e      	str	r3, [sp, #56]	; 0x38
10008ba6:	025b      	lsls	r3, r3, #9
10008ba8:	0a5b      	lsrs	r3, r3, #9
10008baa:	508b      	str	r3, [r1, r2]
10008bac:	e678      	b.n	100088a0 <__kernel_rem_pio2+0x2b8>
10008bae:	1c30      	adds	r0, r6, #0
10008bb0:	2200      	movs	r2, #0
10008bb2:	4b19      	ldr	r3, [pc, #100]	; (10008c18 <__kernel_rem_pio2+0x630>)
10008bb4:	f000 fe12 	bl	100097dc <__aeabi_dcmpge>
10008bb8:	2800      	cmp	r0, #0
10008bba:	d105      	bne.n	10008bc8 <__kernel_rem_pio2+0x5e0>
10008bbc:	2300      	movs	r3, #0
10008bbe:	9305      	str	r3, [sp, #20]
10008bc0:	e671      	b.n	100088a6 <__kernel_rem_pio2+0x2be>
10008bc2:	2600      	movs	r6, #0
10008bc4:	2700      	movs	r7, #0
10008bc6:	e587      	b.n	100086d8 <__kernel_rem_pio2+0xf0>
10008bc8:	2301      	movs	r3, #1
10008bca:	469c      	mov	ip, r3
10008bcc:	3301      	adds	r3, #1
10008bce:	9305      	str	r3, [sp, #20]
10008bd0:	464b      	mov	r3, r9
10008bd2:	44e2      	add	sl, ip
10008bd4:	2b00      	cmp	r3, #0
10008bd6:	dd00      	ble.n	10008bda <__kernel_rem_pio2+0x5f2>
10008bd8:	e61f      	b.n	1000881a <__kernel_rem_pio2+0x232>
10008bda:	1c32      	adds	r2, r6, #0
10008bdc:	1c3b      	adds	r3, r7, #0
10008bde:	2000      	movs	r0, #0
10008be0:	4909      	ldr	r1, [pc, #36]	; (10008c08 <__kernel_rem_pio2+0x620>)
10008be2:	f002 ff7b 	bl	1000badc <__aeabi_dsub>
10008be6:	1c06      	adds	r6, r0, #0
10008be8:	1c0f      	adds	r7, r1, #0
10008bea:	e65c      	b.n	100088a6 <__kernel_rem_pio2+0x2be>
10008bec:	2600      	movs	r6, #0
10008bee:	2700      	movs	r7, #0
10008bf0:	e78a      	b.n	10008b08 <__kernel_rem_pio2+0x520>
10008bf2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
10008bf4:	2b02      	cmp	r3, #2
10008bf6:	dc39      	bgt.n	10008c6c <__kernel_rem_pio2+0x684>
10008bf8:	2b00      	cmp	r3, #0
10008bfa:	dc0f      	bgt.n	10008c1c <__kernel_rem_pio2+0x634>
10008bfc:	d1b5      	bne.n	10008b6a <__kernel_rem_pio2+0x582>
10008bfe:	2000      	movs	r0, #0
10008c00:	2100      	movs	r1, #0
10008c02:	e7a6      	b.n	10008b52 <__kernel_rem_pio2+0x56a>
10008c04:	3fffffff 	.word	0x3fffffff
10008c08:	3ff00000 	.word	0x3ff00000
10008c0c:	41700000 	.word	0x41700000
10008c10:	3e700000 	.word	0x3e700000
10008c14:	1000cdd0 	.word	0x1000cdd0
10008c18:	3fe00000 	.word	0x3fe00000
10008c1c:	9905      	ldr	r1, [sp, #20]
10008c1e:	2200      	movs	r2, #0
10008c20:	2300      	movs	r3, #0
10008c22:	2900      	cmp	r1, #0
10008c24:	d073      	beq.n	10008d0e <__kernel_rem_pio2+0x726>
10008c26:	2180      	movs	r1, #128	; 0x80
10008c28:	9808      	ldr	r0, [sp, #32]
10008c2a:	0609      	lsls	r1, r1, #24
10008c2c:	1859      	adds	r1, r3, r1
10008c2e:	6002      	str	r2, [r0, #0]
10008c30:	6041      	str	r1, [r0, #4]
10008c32:	984c      	ldr	r0, [sp, #304]	; 0x130
10008c34:	994d      	ldr	r1, [sp, #308]	; 0x134
10008c36:	f002 ff51 	bl	1000badc <__aeabi_dsub>
10008c3a:	4643      	mov	r3, r8
10008c3c:	2b00      	cmp	r3, #0
10008c3e:	dd0b      	ble.n	10008c58 <__kernel_rem_pio2+0x670>
10008c40:	2401      	movs	r4, #1
10008c42:	4646      	mov	r6, r8
10008c44:	ad4e      	add	r5, sp, #312	; 0x138
10008c46:	cd0c      	ldmia	r5!, {r2, r3}
10008c48:	3401      	adds	r4, #1
10008c4a:	f001 fd47 	bl	1000a6dc <__aeabi_dadd>
10008c4e:	42a6      	cmp	r6, r4
10008c50:	daf9      	bge.n	10008c46 <__kernel_rem_pio2+0x65e>
10008c52:	9b05      	ldr	r3, [sp, #20]
10008c54:	2b00      	cmp	r3, #0
10008c56:	d003      	beq.n	10008c60 <__kernel_rem_pio2+0x678>
10008c58:	2380      	movs	r3, #128	; 0x80
10008c5a:	061b      	lsls	r3, r3, #24
10008c5c:	469c      	mov	ip, r3
10008c5e:	4461      	add	r1, ip
10008c60:	1c0b      	adds	r3, r1, #0
10008c62:	1c02      	adds	r2, r0, #0
10008c64:	9908      	ldr	r1, [sp, #32]
10008c66:	608a      	str	r2, [r1, #8]
10008c68:	60cb      	str	r3, [r1, #12]
10008c6a:	e77e      	b.n	10008b6a <__kernel_rem_pio2+0x582>
10008c6c:	ab4c      	add	r3, sp, #304	; 0x130
10008c6e:	4699      	mov	r9, r3
10008c70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
10008c72:	2b03      	cmp	r3, #3
10008c74:	d000      	beq.n	10008c78 <__kernel_rem_pio2+0x690>
10008c76:	e778      	b.n	10008b6a <__kernel_rem_pio2+0x582>
10008c78:	9b05      	ldr	r3, [sp, #20]
10008c7a:	2000      	movs	r0, #0
10008c7c:	2100      	movs	r1, #0
10008c7e:	2b00      	cmp	r3, #0
10008c80:	d100      	bne.n	10008c84 <__kernel_rem_pio2+0x69c>
10008c82:	e0d0      	b.n	10008e26 <__kernel_rem_pio2+0x83e>
10008c84:	2480      	movs	r4, #128	; 0x80
10008c86:	9a08      	ldr	r2, [sp, #32]
10008c88:	9b4c      	ldr	r3, [sp, #304]	; 0x130
10008c8a:	0624      	lsls	r4, r4, #24
10008c8c:	6013      	str	r3, [r2, #0]
10008c8e:	464b      	mov	r3, r9
10008c90:	46a4      	mov	ip, r4
10008c92:	685b      	ldr	r3, [r3, #4]
10008c94:	4461      	add	r1, ip
10008c96:	4463      	add	r3, ip
10008c98:	6053      	str	r3, [r2, #4]
10008c9a:	464b      	mov	r3, r9
10008c9c:	689b      	ldr	r3, [r3, #8]
10008c9e:	6110      	str	r0, [r2, #16]
10008ca0:	6093      	str	r3, [r2, #8]
10008ca2:	464b      	mov	r3, r9
10008ca4:	68db      	ldr	r3, [r3, #12]
10008ca6:	6151      	str	r1, [r2, #20]
10008ca8:	4463      	add	r3, ip
10008caa:	60d3      	str	r3, [r2, #12]
10008cac:	e75d      	b.n	10008b6a <__kernel_rem_pio2+0x582>
10008cae:	4653      	mov	r3, sl
10008cb0:	4688      	mov	r8, r1
10008cb2:	9309      	str	r3, [sp, #36]	; 0x24
10008cb4:	4643      	mov	r3, r8
10008cb6:	9904      	ldr	r1, [sp, #16]
10008cb8:	009b      	lsls	r3, r3, #2
10008cba:	aa10      	add	r2, sp, #64	; 0x40
10008cbc:	58d3      	ldr	r3, [r2, r3]
10008cbe:	3918      	subs	r1, #24
10008cc0:	9104      	str	r1, [sp, #16]
10008cc2:	2b00      	cmp	r3, #0
10008cc4:	d000      	beq.n	10008cc8 <__kernel_rem_pio2+0x6e0>
10008cc6:	e6c0      	b.n	10008a4a <__kernel_rem_pio2+0x462>
10008cc8:	4694      	mov	ip, r2
10008cca:	4642      	mov	r2, r8
10008ccc:	4b68      	ldr	r3, [pc, #416]	; (10008e70 <__kernel_rem_pio2+0x888>)
10008cce:	4443      	add	r3, r8
10008cd0:	009b      	lsls	r3, r3, #2
10008cd2:	4463      	add	r3, ip
10008cd4:	3b04      	subs	r3, #4
10008cd6:	6858      	ldr	r0, [r3, #4]
10008cd8:	3a01      	subs	r2, #1
10008cda:	3918      	subs	r1, #24
10008cdc:	2800      	cmp	r0, #0
10008cde:	d0f9      	beq.n	10008cd4 <__kernel_rem_pio2+0x6ec>
10008ce0:	4690      	mov	r8, r2
10008ce2:	9104      	str	r1, [sp, #16]
10008ce4:	e6b1      	b.n	10008a4a <__kernel_rem_pio2+0x462>
10008ce6:	9b03      	ldr	r3, [sp, #12]
10008ce8:	2200      	movs	r2, #0
10008cea:	444b      	add	r3, r9
10008cec:	1c1c      	adds	r4, r3, #0
10008cee:	2300      	movs	r3, #0
10008cf0:	ad4a      	add	r5, sp, #296	; 0x128
10008cf2:	1c10      	adds	r0, r2, #0
10008cf4:	1c19      	adds	r1, r3, #0
10008cf6:	6822      	ldr	r2, [r4, #0]
10008cf8:	6863      	ldr	r3, [r4, #4]
10008cfa:	f001 fcef 	bl	1000a6dc <__aeabi_dadd>
10008cfe:	3c08      	subs	r4, #8
10008d00:	1c02      	adds	r2, r0, #0
10008d02:	1c0b      	adds	r3, r1, #0
10008d04:	42ac      	cmp	r4, r5
10008d06:	d1f4      	bne.n	10008cf2 <__kernel_rem_pio2+0x70a>
10008d08:	9905      	ldr	r1, [sp, #20]
10008d0a:	2900      	cmp	r1, #0
10008d0c:	d18b      	bne.n	10008c26 <__kernel_rem_pio2+0x63e>
10008d0e:	1c19      	adds	r1, r3, #0
10008d10:	1c10      	adds	r0, r2, #0
10008d12:	9c08      	ldr	r4, [sp, #32]
10008d14:	6020      	str	r0, [r4, #0]
10008d16:	6061      	str	r1, [r4, #4]
10008d18:	984c      	ldr	r0, [sp, #304]	; 0x130
10008d1a:	994d      	ldr	r1, [sp, #308]	; 0x134
10008d1c:	f002 fede 	bl	1000badc <__aeabi_dsub>
10008d20:	4643      	mov	r3, r8
10008d22:	2b00      	cmp	r3, #0
10008d24:	dc8c      	bgt.n	10008c40 <__kernel_rem_pio2+0x658>
10008d26:	1c0b      	adds	r3, r1, #0
10008d28:	1c02      	adds	r2, r0, #0
10008d2a:	9908      	ldr	r1, [sp, #32]
10008d2c:	608a      	str	r2, [r1, #8]
10008d2e:	60cb      	str	r3, [r1, #12]
10008d30:	e71b      	b.n	10008b6a <__kernel_rem_pio2+0x582>
10008d32:	9ba6      	ldr	r3, [sp, #664]	; 0x298
10008d34:	2b03      	cmp	r3, #3
10008d36:	d000      	beq.n	10008d3a <__kernel_rem_pio2+0x752>
10008d38:	e717      	b.n	10008b6a <__kernel_rem_pio2+0x582>
10008d3a:	4643      	mov	r3, r8
10008d3c:	2b00      	cmp	r3, #0
10008d3e:	dd9b      	ble.n	10008c78 <__kernel_rem_pio2+0x690>
10008d40:	9b03      	ldr	r3, [sp, #12]
10008d42:	444b      	add	r3, r9
10008d44:	681e      	ldr	r6, [r3, #0]
10008d46:	685f      	ldr	r7, [r3, #4]
10008d48:	4b4a      	ldr	r3, [pc, #296]	; (10008e74 <__kernel_rem_pio2+0x88c>)
10008d4a:	4443      	add	r3, r8
10008d4c:	469b      	mov	fp, r3
10008d4e:	00db      	lsls	r3, r3, #3
10008d50:	444b      	add	r3, r9
10008d52:	469a      	mov	sl, r3
10008d54:	4653      	mov	r3, sl
10008d56:	1c30      	adds	r0, r6, #0
10008d58:	685c      	ldr	r4, [r3, #4]
10008d5a:	681b      	ldr	r3, [r3, #0]
10008d5c:	1c39      	adds	r1, r7, #0
10008d5e:	9300      	str	r3, [sp, #0]
10008d60:	9401      	str	r4, [sp, #4]
10008d62:	1c1a      	adds	r2, r3, #0
10008d64:	1c23      	adds	r3, r4, #0
10008d66:	f001 fcb9 	bl	1000a6dc <__aeabi_dadd>
10008d6a:	1c04      	adds	r4, r0, #0
10008d6c:	1c0d      	adds	r5, r1, #0
10008d6e:	9800      	ldr	r0, [sp, #0]
10008d70:	9901      	ldr	r1, [sp, #4]
10008d72:	1c22      	adds	r2, r4, #0
10008d74:	1c2b      	adds	r3, r5, #0
10008d76:	f002 feb1 	bl	1000badc <__aeabi_dsub>
10008d7a:	1c0b      	adds	r3, r1, #0
10008d7c:	1c02      	adds	r2, r0, #0
10008d7e:	1c39      	adds	r1, r7, #0
10008d80:	1c30      	adds	r0, r6, #0
10008d82:	f001 fcab 	bl	1000a6dc <__aeabi_dadd>
10008d86:	4653      	mov	r3, sl
10008d88:	6098      	str	r0, [r3, #8]
10008d8a:	60d9      	str	r1, [r3, #12]
10008d8c:	601c      	str	r4, [r3, #0]
10008d8e:	605d      	str	r5, [r3, #4]
10008d90:	2308      	movs	r3, #8
10008d92:	425b      	negs	r3, r3
10008d94:	469c      	mov	ip, r3
10008d96:	ab4a      	add	r3, sp, #296	; 0x128
10008d98:	44e2      	add	sl, ip
10008d9a:	1c26      	adds	r6, r4, #0
10008d9c:	1c2f      	adds	r7, r5, #0
10008d9e:	459a      	cmp	sl, r3
10008da0:	d1d8      	bne.n	10008d54 <__kernel_rem_pio2+0x76c>
10008da2:	4643      	mov	r3, r8
10008da4:	2b01      	cmp	r3, #1
10008da6:	dc00      	bgt.n	10008daa <__kernel_rem_pio2+0x7c2>
10008da8:	e766      	b.n	10008c78 <__kernel_rem_pio2+0x690>
10008daa:	9b03      	ldr	r3, [sp, #12]
10008dac:	46ca      	mov	sl, r9
10008dae:	444b      	add	r3, r9
10008db0:	681e      	ldr	r6, [r3, #0]
10008db2:	685f      	ldr	r7, [r3, #4]
10008db4:	465b      	mov	r3, fp
10008db6:	00db      	lsls	r3, r3, #3
10008db8:	4698      	mov	r8, r3
10008dba:	44c2      	add	sl, r8
10008dbc:	4653      	mov	r3, sl
10008dbe:	1c32      	adds	r2, r6, #0
10008dc0:	685c      	ldr	r4, [r3, #4]
10008dc2:	681b      	ldr	r3, [r3, #0]
10008dc4:	9300      	str	r3, [sp, #0]
10008dc6:	9401      	str	r4, [sp, #4]
10008dc8:	1c18      	adds	r0, r3, #0
10008dca:	1c21      	adds	r1, r4, #0
10008dcc:	1c3b      	adds	r3, r7, #0
10008dce:	f001 fc85 	bl	1000a6dc <__aeabi_dadd>
10008dd2:	1c04      	adds	r4, r0, #0
10008dd4:	1c0d      	adds	r5, r1, #0
10008dd6:	9800      	ldr	r0, [sp, #0]
10008dd8:	9901      	ldr	r1, [sp, #4]
10008dda:	1c22      	adds	r2, r4, #0
10008ddc:	1c2b      	adds	r3, r5, #0
10008dde:	f002 fe7d 	bl	1000badc <__aeabi_dsub>
10008de2:	1c3b      	adds	r3, r7, #0
10008de4:	1c32      	adds	r2, r6, #0
10008de6:	f001 fc79 	bl	1000a6dc <__aeabi_dadd>
10008dea:	4653      	mov	r3, sl
10008dec:	6098      	str	r0, [r3, #8]
10008dee:	60d9      	str	r1, [r3, #12]
10008df0:	601c      	str	r4, [r3, #0]
10008df2:	605d      	str	r5, [r3, #4]
10008df4:	2308      	movs	r3, #8
10008df6:	425b      	negs	r3, r3
10008df8:	469c      	mov	ip, r3
10008dfa:	44e2      	add	sl, ip
10008dfc:	1c26      	adds	r6, r4, #0
10008dfe:	1c2f      	adds	r7, r5, #0
10008e00:	45d1      	cmp	r9, sl
10008e02:	d1db      	bne.n	10008dbc <__kernel_rem_pio2+0x7d4>
10008e04:	4644      	mov	r4, r8
10008e06:	2000      	movs	r0, #0
10008e08:	2100      	movs	r1, #0
10008e0a:	3408      	adds	r4, #8
10008e0c:	444c      	add	r4, r9
10008e0e:	ad4e      	add	r5, sp, #312	; 0x138
10008e10:	6822      	ldr	r2, [r4, #0]
10008e12:	6863      	ldr	r3, [r4, #4]
10008e14:	3c08      	subs	r4, #8
10008e16:	f001 fc61 	bl	1000a6dc <__aeabi_dadd>
10008e1a:	42ac      	cmp	r4, r5
10008e1c:	d1f8      	bne.n	10008e10 <__kernel_rem_pio2+0x828>
10008e1e:	9b05      	ldr	r3, [sp, #20]
10008e20:	2b00      	cmp	r3, #0
10008e22:	d000      	beq.n	10008e26 <__kernel_rem_pio2+0x83e>
10008e24:	e72e      	b.n	10008c84 <__kernel_rem_pio2+0x69c>
10008e26:	9a4c      	ldr	r2, [sp, #304]	; 0x130
10008e28:	9b4d      	ldr	r3, [sp, #308]	; 0x134
10008e2a:	9c08      	ldr	r4, [sp, #32]
10008e2c:	6022      	str	r2, [r4, #0]
10008e2e:	6063      	str	r3, [r4, #4]
10008e30:	464b      	mov	r3, r9
10008e32:	689a      	ldr	r2, [r3, #8]
10008e34:	68db      	ldr	r3, [r3, #12]
10008e36:	9200      	str	r2, [sp, #0]
10008e38:	9301      	str	r3, [sp, #4]
10008e3a:	60a2      	str	r2, [r4, #8]
10008e3c:	60e3      	str	r3, [r4, #12]
10008e3e:	1c02      	adds	r2, r0, #0
10008e40:	1c0b      	adds	r3, r1, #0
10008e42:	6122      	str	r2, [r4, #16]
10008e44:	6163      	str	r3, [r4, #20]
10008e46:	e690      	b.n	10008b6a <__kernel_rem_pio2+0x582>
10008e48:	2201      	movs	r2, #1
10008e4a:	e559      	b.n	10008900 <__kernel_rem_pio2+0x318>
10008e4c:	2400      	movs	r4, #0
10008e4e:	e515      	b.n	1000887c <__kernel_rem_pio2+0x294>
10008e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008e52:	00db      	lsls	r3, r3, #3
10008e54:	9303      	str	r3, [sp, #12]
10008e56:	ab74      	add	r3, sp, #464	; 0x1d0
10008e58:	9306      	str	r3, [sp, #24]
10008e5a:	e446      	b.n	100086ea <__kernel_rem_pio2+0x102>
10008e5c:	464b      	mov	r3, r9
10008e5e:	1c20      	adds	r0, r4, #0
10008e60:	1c29      	adds	r1, r5, #0
10008e62:	009e      	lsls	r6, r3, #2
10008e64:	f003 f9b4 	bl	1000c1d0 <__aeabi_d2iz>
10008e68:	ab10      	add	r3, sp, #64	; 0x40
10008e6a:	5198      	str	r0, [r3, r6]
10008e6c:	46c8      	mov	r8, r9
10008e6e:	e5ec      	b.n	10008a4a <__kernel_rem_pio2+0x462>
10008e70:	3fffffff 	.word	0x3fffffff
10008e74:	1fffffff 	.word	0x1fffffff

10008e78 <__kernel_sin>:
10008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
10008e7a:	464f      	mov	r7, r9
10008e7c:	4646      	mov	r6, r8
10008e7e:	b4c0      	push	{r6, r7}
10008e80:	b087      	sub	sp, #28
10008e82:	9200      	str	r2, [sp, #0]
10008e84:	9301      	str	r3, [sp, #4]
10008e86:	4a46      	ldr	r2, [pc, #280]	; (10008fa0 <__kernel_sin+0x128>)
10008e88:	004b      	lsls	r3, r1, #1
10008e8a:	4681      	mov	r9, r0
10008e8c:	4688      	mov	r8, r1
10008e8e:	085b      	lsrs	r3, r3, #1
10008e90:	4293      	cmp	r3, r2
10008e92:	dc07      	bgt.n	10008ea4 <__kernel_sin+0x2c>
10008e94:	4641      	mov	r1, r8
10008e96:	4648      	mov	r0, r9
10008e98:	f003 f99a 	bl	1000c1d0 <__aeabi_d2iz>
10008e9c:	4641      	mov	r1, r8
10008e9e:	1e03      	subs	r3, r0, #0
10008ea0:	4648      	mov	r0, r9
10008ea2:	d064      	beq.n	10008f6e <__kernel_sin+0xf6>
10008ea4:	464a      	mov	r2, r9
10008ea6:	4643      	mov	r3, r8
10008ea8:	4648      	mov	r0, r9
10008eaa:	4641      	mov	r1, r8
10008eac:	f002 fb7c 	bl	1000b5a8 <__aeabi_dmul>
10008eb0:	464a      	mov	r2, r9
10008eb2:	4643      	mov	r3, r8
10008eb4:	1c04      	adds	r4, r0, #0
10008eb6:	1c0d      	adds	r5, r1, #0
10008eb8:	f002 fb76 	bl	1000b5a8 <__aeabi_dmul>
10008ebc:	4a39      	ldr	r2, [pc, #228]	; (10008fa4 <__kernel_sin+0x12c>)
10008ebe:	4b3a      	ldr	r3, [pc, #232]	; (10008fa8 <__kernel_sin+0x130>)
10008ec0:	1c06      	adds	r6, r0, #0
10008ec2:	1c0f      	adds	r7, r1, #0
10008ec4:	1c20      	adds	r0, r4, #0
10008ec6:	1c29      	adds	r1, r5, #0
10008ec8:	f002 fb6e 	bl	1000b5a8 <__aeabi_dmul>
10008ecc:	4a37      	ldr	r2, [pc, #220]	; (10008fac <__kernel_sin+0x134>)
10008ece:	4b38      	ldr	r3, [pc, #224]	; (10008fb0 <__kernel_sin+0x138>)
10008ed0:	f002 fe04 	bl	1000badc <__aeabi_dsub>
10008ed4:	1c22      	adds	r2, r4, #0
10008ed6:	1c2b      	adds	r3, r5, #0
10008ed8:	f002 fb66 	bl	1000b5a8 <__aeabi_dmul>
10008edc:	4a35      	ldr	r2, [pc, #212]	; (10008fb4 <__kernel_sin+0x13c>)
10008ede:	4b36      	ldr	r3, [pc, #216]	; (10008fb8 <__kernel_sin+0x140>)
10008ee0:	f001 fbfc 	bl	1000a6dc <__aeabi_dadd>
10008ee4:	1c22      	adds	r2, r4, #0
10008ee6:	1c2b      	adds	r3, r5, #0
10008ee8:	f002 fb5e 	bl	1000b5a8 <__aeabi_dmul>
10008eec:	4a33      	ldr	r2, [pc, #204]	; (10008fbc <__kernel_sin+0x144>)
10008eee:	4b34      	ldr	r3, [pc, #208]	; (10008fc0 <__kernel_sin+0x148>)
10008ef0:	f002 fdf4 	bl	1000badc <__aeabi_dsub>
10008ef4:	1c22      	adds	r2, r4, #0
10008ef6:	1c2b      	adds	r3, r5, #0
10008ef8:	f002 fb56 	bl	1000b5a8 <__aeabi_dmul>
10008efc:	4b31      	ldr	r3, [pc, #196]	; (10008fc4 <__kernel_sin+0x14c>)
10008efe:	4a32      	ldr	r2, [pc, #200]	; (10008fc8 <__kernel_sin+0x150>)
10008f00:	f001 fbec 	bl	1000a6dc <__aeabi_dadd>
10008f04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008f06:	9002      	str	r0, [sp, #8]
10008f08:	9103      	str	r1, [sp, #12]
10008f0a:	2b00      	cmp	r3, #0
10008f0c:	d034      	beq.n	10008f78 <__kernel_sin+0x100>
10008f0e:	9800      	ldr	r0, [sp, #0]
10008f10:	9901      	ldr	r1, [sp, #4]
10008f12:	2200      	movs	r2, #0
10008f14:	4b2d      	ldr	r3, [pc, #180]	; (10008fcc <__kernel_sin+0x154>)
10008f16:	f002 fb47 	bl	1000b5a8 <__aeabi_dmul>
10008f1a:	9a02      	ldr	r2, [sp, #8]
10008f1c:	9b03      	ldr	r3, [sp, #12]
10008f1e:	9004      	str	r0, [sp, #16]
10008f20:	9105      	str	r1, [sp, #20]
10008f22:	1c30      	adds	r0, r6, #0
10008f24:	1c39      	adds	r1, r7, #0
10008f26:	f002 fb3f 	bl	1000b5a8 <__aeabi_dmul>
10008f2a:	1c02      	adds	r2, r0, #0
10008f2c:	1c0b      	adds	r3, r1, #0
10008f2e:	9804      	ldr	r0, [sp, #16]
10008f30:	9905      	ldr	r1, [sp, #20]
10008f32:	f002 fdd3 	bl	1000badc <__aeabi_dsub>
10008f36:	1c22      	adds	r2, r4, #0
10008f38:	1c2b      	adds	r3, r5, #0
10008f3a:	f002 fb35 	bl	1000b5a8 <__aeabi_dmul>
10008f3e:	9a00      	ldr	r2, [sp, #0]
10008f40:	9b01      	ldr	r3, [sp, #4]
10008f42:	f002 fdcb 	bl	1000badc <__aeabi_dsub>
10008f46:	4a22      	ldr	r2, [pc, #136]	; (10008fd0 <__kernel_sin+0x158>)
10008f48:	1c04      	adds	r4, r0, #0
10008f4a:	1c0d      	adds	r5, r1, #0
10008f4c:	4b21      	ldr	r3, [pc, #132]	; (10008fd4 <__kernel_sin+0x15c>)
10008f4e:	1c30      	adds	r0, r6, #0
10008f50:	1c39      	adds	r1, r7, #0
10008f52:	f002 fb29 	bl	1000b5a8 <__aeabi_dmul>
10008f56:	1c02      	adds	r2, r0, #0
10008f58:	1c0b      	adds	r3, r1, #0
10008f5a:	1c20      	adds	r0, r4, #0
10008f5c:	1c29      	adds	r1, r5, #0
10008f5e:	f001 fbbd 	bl	1000a6dc <__aeabi_dadd>
10008f62:	1c02      	adds	r2, r0, #0
10008f64:	1c0b      	adds	r3, r1, #0
10008f66:	4648      	mov	r0, r9
10008f68:	4641      	mov	r1, r8
10008f6a:	f002 fdb7 	bl	1000badc <__aeabi_dsub>
10008f6e:	b007      	add	sp, #28
10008f70:	bc0c      	pop	{r2, r3}
10008f72:	4690      	mov	r8, r2
10008f74:	4699      	mov	r9, r3
10008f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008f78:	9a02      	ldr	r2, [sp, #8]
10008f7a:	9b03      	ldr	r3, [sp, #12]
10008f7c:	1c20      	adds	r0, r4, #0
10008f7e:	1c29      	adds	r1, r5, #0
10008f80:	f002 fb12 	bl	1000b5a8 <__aeabi_dmul>
10008f84:	4a12      	ldr	r2, [pc, #72]	; (10008fd0 <__kernel_sin+0x158>)
10008f86:	4b13      	ldr	r3, [pc, #76]	; (10008fd4 <__kernel_sin+0x15c>)
10008f88:	f002 fda8 	bl	1000badc <__aeabi_dsub>
10008f8c:	1c32      	adds	r2, r6, #0
10008f8e:	1c3b      	adds	r3, r7, #0
10008f90:	f002 fb0a 	bl	1000b5a8 <__aeabi_dmul>
10008f94:	464a      	mov	r2, r9
10008f96:	4643      	mov	r3, r8
10008f98:	f001 fba0 	bl	1000a6dc <__aeabi_dadd>
10008f9c:	e7e7      	b.n	10008f6e <__kernel_sin+0xf6>
10008f9e:	46c0      	nop			; (mov r8, r8)
10008fa0:	3e3fffff 	.word	0x3e3fffff
10008fa4:	5acfd57c 	.word	0x5acfd57c
10008fa8:	3de5d93a 	.word	0x3de5d93a
10008fac:	8a2b9ceb 	.word	0x8a2b9ceb
10008fb0:	3e5ae5e6 	.word	0x3e5ae5e6
10008fb4:	57b1fe7d 	.word	0x57b1fe7d
10008fb8:	3ec71de3 	.word	0x3ec71de3
10008fbc:	19c161d5 	.word	0x19c161d5
10008fc0:	3f2a01a0 	.word	0x3f2a01a0
10008fc4:	3f811111 	.word	0x3f811111
10008fc8:	1110f8a6 	.word	0x1110f8a6
10008fcc:	3fe00000 	.word	0x3fe00000
10008fd0:	55555549 	.word	0x55555549
10008fd4:	3fc55555 	.word	0x3fc55555

10008fd8 <__kernel_tan>:
10008fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
10008fda:	465f      	mov	r7, fp
10008fdc:	4656      	mov	r6, sl
10008fde:	464d      	mov	r5, r9
10008fe0:	4644      	mov	r4, r8
10008fe2:	b4f0      	push	{r4, r5, r6, r7}
10008fe4:	b089      	sub	sp, #36	; 0x24
10008fe6:	9300      	str	r3, [sp, #0]
10008fe8:	004b      	lsls	r3, r1, #1
10008fea:	085b      	lsrs	r3, r3, #1
10008fec:	469a      	mov	sl, r3
10008fee:	4bbd      	ldr	r3, [pc, #756]	; (100092e4 <__kernel_tan+0x30c>)
10008ff0:	4681      	mov	r9, r0
10008ff2:	4688      	mov	r8, r1
10008ff4:	9202      	str	r2, [sp, #8]
10008ff6:	468b      	mov	fp, r1
10008ff8:	459a      	cmp	sl, r3
10008ffa:	dc18      	bgt.n	1000902e <__kernel_tan+0x56>
10008ffc:	4648      	mov	r0, r9
10008ffe:	4641      	mov	r1, r8
10009000:	f003 f8e6 	bl	1000c1d0 <__aeabi_d2iz>
10009004:	2800      	cmp	r0, #0
10009006:	d131      	bne.n	1000906c <__kernel_tan+0x94>
10009008:	464b      	mov	r3, r9
1000900a:	4652      	mov	r2, sl
1000900c:	431a      	orrs	r2, r3
1000900e:	9b12      	ldr	r3, [sp, #72]	; 0x48
10009010:	3301      	adds	r3, #1
10009012:	4313      	orrs	r3, r2
10009014:	d100      	bne.n	10009018 <__kernel_tan+0x40>
10009016:	e14b      	b.n	100092b0 <__kernel_tan+0x2d8>
10009018:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000901a:	2b01      	cmp	r3, #1
1000901c:	d100      	bne.n	10009020 <__kernel_tan+0x48>
1000901e:	e15e      	b.n	100092de <__kernel_tan+0x306>
10009020:	464a      	mov	r2, r9
10009022:	4643      	mov	r3, r8
10009024:	2000      	movs	r0, #0
10009026:	49b0      	ldr	r1, [pc, #704]	; (100092e8 <__kernel_tan+0x310>)
10009028:	f001 fe80 	bl	1000ad2c <__aeabi_ddiv>
1000902c:	e0fb      	b.n	10009226 <__kernel_tan+0x24e>
1000902e:	4baf      	ldr	r3, [pc, #700]	; (100092ec <__kernel_tan+0x314>)
10009030:	459a      	cmp	sl, r3
10009032:	dd1b      	ble.n	1000906c <__kernel_tan+0x94>
10009034:	2900      	cmp	r1, #0
10009036:	da00      	bge.n	1000903a <__kernel_tan+0x62>
10009038:	e145      	b.n	100092c6 <__kernel_tan+0x2ee>
1000903a:	464a      	mov	r2, r9
1000903c:	4643      	mov	r3, r8
1000903e:	48ac      	ldr	r0, [pc, #688]	; (100092f0 <__kernel_tan+0x318>)
10009040:	49ac      	ldr	r1, [pc, #688]	; (100092f4 <__kernel_tan+0x31c>)
10009042:	f002 fd4b 	bl	1000badc <__aeabi_dsub>
10009046:	9a02      	ldr	r2, [sp, #8]
10009048:	9b00      	ldr	r3, [sp, #0]
1000904a:	1c04      	adds	r4, r0, #0
1000904c:	1c0d      	adds	r5, r1, #0
1000904e:	48aa      	ldr	r0, [pc, #680]	; (100092f8 <__kernel_tan+0x320>)
10009050:	49aa      	ldr	r1, [pc, #680]	; (100092fc <__kernel_tan+0x324>)
10009052:	f002 fd43 	bl	1000badc <__aeabi_dsub>
10009056:	1c0b      	adds	r3, r1, #0
10009058:	1c02      	adds	r2, r0, #0
1000905a:	1c29      	adds	r1, r5, #0
1000905c:	1c20      	adds	r0, r4, #0
1000905e:	f001 fb3d 	bl	1000a6dc <__aeabi_dadd>
10009062:	2300      	movs	r3, #0
10009064:	4681      	mov	r9, r0
10009066:	4688      	mov	r8, r1
10009068:	9302      	str	r3, [sp, #8]
1000906a:	9300      	str	r3, [sp, #0]
1000906c:	464a      	mov	r2, r9
1000906e:	4643      	mov	r3, r8
10009070:	4648      	mov	r0, r9
10009072:	4641      	mov	r1, r8
10009074:	f002 fa98 	bl	1000b5a8 <__aeabi_dmul>
10009078:	1c06      	adds	r6, r0, #0
1000907a:	1c0f      	adds	r7, r1, #0
1000907c:	1c32      	adds	r2, r6, #0
1000907e:	1c3b      	adds	r3, r7, #0
10009080:	f002 fa92 	bl	1000b5a8 <__aeabi_dmul>
10009084:	464a      	mov	r2, r9
10009086:	1c04      	adds	r4, r0, #0
10009088:	1c0d      	adds	r5, r1, #0
1000908a:	4643      	mov	r3, r8
1000908c:	1c30      	adds	r0, r6, #0
1000908e:	1c39      	adds	r1, r7, #0
10009090:	f002 fa8a 	bl	1000b5a8 <__aeabi_dmul>
10009094:	4a9a      	ldr	r2, [pc, #616]	; (10009300 <__kernel_tan+0x328>)
10009096:	9004      	str	r0, [sp, #16]
10009098:	9105      	str	r1, [sp, #20]
1000909a:	4b9a      	ldr	r3, [pc, #616]	; (10009304 <__kernel_tan+0x32c>)
1000909c:	1c20      	adds	r0, r4, #0
1000909e:	1c29      	adds	r1, r5, #0
100090a0:	f002 fa82 	bl	1000b5a8 <__aeabi_dmul>
100090a4:	4a98      	ldr	r2, [pc, #608]	; (10009308 <__kernel_tan+0x330>)
100090a6:	4b99      	ldr	r3, [pc, #612]	; (1000930c <__kernel_tan+0x334>)
100090a8:	f001 fb18 	bl	1000a6dc <__aeabi_dadd>
100090ac:	1c22      	adds	r2, r4, #0
100090ae:	1c2b      	adds	r3, r5, #0
100090b0:	f002 fa7a 	bl	1000b5a8 <__aeabi_dmul>
100090b4:	4a96      	ldr	r2, [pc, #600]	; (10009310 <__kernel_tan+0x338>)
100090b6:	4b97      	ldr	r3, [pc, #604]	; (10009314 <__kernel_tan+0x33c>)
100090b8:	f001 fb10 	bl	1000a6dc <__aeabi_dadd>
100090bc:	1c22      	adds	r2, r4, #0
100090be:	1c2b      	adds	r3, r5, #0
100090c0:	f002 fa72 	bl	1000b5a8 <__aeabi_dmul>
100090c4:	4a94      	ldr	r2, [pc, #592]	; (10009318 <__kernel_tan+0x340>)
100090c6:	4b95      	ldr	r3, [pc, #596]	; (1000931c <__kernel_tan+0x344>)
100090c8:	f001 fb08 	bl	1000a6dc <__aeabi_dadd>
100090cc:	1c22      	adds	r2, r4, #0
100090ce:	1c2b      	adds	r3, r5, #0
100090d0:	f002 fa6a 	bl	1000b5a8 <__aeabi_dmul>
100090d4:	4a92      	ldr	r2, [pc, #584]	; (10009320 <__kernel_tan+0x348>)
100090d6:	4b93      	ldr	r3, [pc, #588]	; (10009324 <__kernel_tan+0x34c>)
100090d8:	f001 fb00 	bl	1000a6dc <__aeabi_dadd>
100090dc:	1c22      	adds	r2, r4, #0
100090de:	1c2b      	adds	r3, r5, #0
100090e0:	f002 fa62 	bl	1000b5a8 <__aeabi_dmul>
100090e4:	4a90      	ldr	r2, [pc, #576]	; (10009328 <__kernel_tan+0x350>)
100090e6:	4b91      	ldr	r3, [pc, #580]	; (1000932c <__kernel_tan+0x354>)
100090e8:	f001 faf8 	bl	1000a6dc <__aeabi_dadd>
100090ec:	4a90      	ldr	r2, [pc, #576]	; (10009330 <__kernel_tan+0x358>)
100090ee:	9006      	str	r0, [sp, #24]
100090f0:	9107      	str	r1, [sp, #28]
100090f2:	4b90      	ldr	r3, [pc, #576]	; (10009334 <__kernel_tan+0x35c>)
100090f4:	1c20      	adds	r0, r4, #0
100090f6:	1c29      	adds	r1, r5, #0
100090f8:	f002 fa56 	bl	1000b5a8 <__aeabi_dmul>
100090fc:	4a8e      	ldr	r2, [pc, #568]	; (10009338 <__kernel_tan+0x360>)
100090fe:	4b8f      	ldr	r3, [pc, #572]	; (1000933c <__kernel_tan+0x364>)
10009100:	f001 faec 	bl	1000a6dc <__aeabi_dadd>
10009104:	1c22      	adds	r2, r4, #0
10009106:	1c2b      	adds	r3, r5, #0
10009108:	f002 fa4e 	bl	1000b5a8 <__aeabi_dmul>
1000910c:	4a8c      	ldr	r2, [pc, #560]	; (10009340 <__kernel_tan+0x368>)
1000910e:	4b8d      	ldr	r3, [pc, #564]	; (10009344 <__kernel_tan+0x36c>)
10009110:	f001 fae4 	bl	1000a6dc <__aeabi_dadd>
10009114:	1c22      	adds	r2, r4, #0
10009116:	1c2b      	adds	r3, r5, #0
10009118:	f002 fa46 	bl	1000b5a8 <__aeabi_dmul>
1000911c:	4a8a      	ldr	r2, [pc, #552]	; (10009348 <__kernel_tan+0x370>)
1000911e:	4b8b      	ldr	r3, [pc, #556]	; (1000934c <__kernel_tan+0x374>)
10009120:	f001 fadc 	bl	1000a6dc <__aeabi_dadd>
10009124:	1c22      	adds	r2, r4, #0
10009126:	1c2b      	adds	r3, r5, #0
10009128:	f002 fa3e 	bl	1000b5a8 <__aeabi_dmul>
1000912c:	4a88      	ldr	r2, [pc, #544]	; (10009350 <__kernel_tan+0x378>)
1000912e:	4b89      	ldr	r3, [pc, #548]	; (10009354 <__kernel_tan+0x37c>)
10009130:	f001 fad4 	bl	1000a6dc <__aeabi_dadd>
10009134:	1c22      	adds	r2, r4, #0
10009136:	1c2b      	adds	r3, r5, #0
10009138:	f002 fa36 	bl	1000b5a8 <__aeabi_dmul>
1000913c:	4a86      	ldr	r2, [pc, #536]	; (10009358 <__kernel_tan+0x380>)
1000913e:	4b87      	ldr	r3, [pc, #540]	; (1000935c <__kernel_tan+0x384>)
10009140:	f001 facc 	bl	1000a6dc <__aeabi_dadd>
10009144:	1c32      	adds	r2, r6, #0
10009146:	1c3b      	adds	r3, r7, #0
10009148:	f002 fa2e 	bl	1000b5a8 <__aeabi_dmul>
1000914c:	1c02      	adds	r2, r0, #0
1000914e:	1c0b      	adds	r3, r1, #0
10009150:	9806      	ldr	r0, [sp, #24]
10009152:	9907      	ldr	r1, [sp, #28]
10009154:	f001 fac2 	bl	1000a6dc <__aeabi_dadd>
10009158:	9a04      	ldr	r2, [sp, #16]
1000915a:	9b05      	ldr	r3, [sp, #20]
1000915c:	f002 fa24 	bl	1000b5a8 <__aeabi_dmul>
10009160:	9d02      	ldr	r5, [sp, #8]
10009162:	9c00      	ldr	r4, [sp, #0]
10009164:	1c2a      	adds	r2, r5, #0
10009166:	1c23      	adds	r3, r4, #0
10009168:	f001 fab8 	bl	1000a6dc <__aeabi_dadd>
1000916c:	1c32      	adds	r2, r6, #0
1000916e:	1c3b      	adds	r3, r7, #0
10009170:	f002 fa1a 	bl	1000b5a8 <__aeabi_dmul>
10009174:	1c2a      	adds	r2, r5, #0
10009176:	1c23      	adds	r3, r4, #0
10009178:	f001 fab0 	bl	1000a6dc <__aeabi_dadd>
1000917c:	1c04      	adds	r4, r0, #0
1000917e:	1c0d      	adds	r5, r1, #0
10009180:	9804      	ldr	r0, [sp, #16]
10009182:	9905      	ldr	r1, [sp, #20]
10009184:	4a76      	ldr	r2, [pc, #472]	; (10009360 <__kernel_tan+0x388>)
10009186:	4b77      	ldr	r3, [pc, #476]	; (10009364 <__kernel_tan+0x38c>)
10009188:	f002 fa0e 	bl	1000b5a8 <__aeabi_dmul>
1000918c:	1c22      	adds	r2, r4, #0
1000918e:	1c2b      	adds	r3, r5, #0
10009190:	f001 faa4 	bl	1000a6dc <__aeabi_dadd>
10009194:	1c0b      	adds	r3, r1, #0
10009196:	1c02      	adds	r2, r0, #0
10009198:	4641      	mov	r1, r8
1000919a:	4648      	mov	r0, r9
1000919c:	9200      	str	r2, [sp, #0]
1000919e:	9301      	str	r3, [sp, #4]
100091a0:	f001 fa9c 	bl	1000a6dc <__aeabi_dadd>
100091a4:	4b51      	ldr	r3, [pc, #324]	; (100092ec <__kernel_tan+0x314>)
100091a6:	1c04      	adds	r4, r0, #0
100091a8:	1c0d      	adds	r5, r1, #0
100091aa:	459a      	cmp	sl, r3
100091ac:	dc42      	bgt.n	10009234 <__kernel_tan+0x25c>
100091ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
100091b0:	2b01      	cmp	r3, #1
100091b2:	d038      	beq.n	10009226 <__kernel_tan+0x24e>
100091b4:	1c0b      	adds	r3, r1, #0
100091b6:	2200      	movs	r2, #0
100091b8:	2000      	movs	r0, #0
100091ba:	9202      	str	r2, [sp, #8]
100091bc:	9303      	str	r3, [sp, #12]
100091be:	494a      	ldr	r1, [pc, #296]	; (100092e8 <__kernel_tan+0x310>)
100091c0:	1c22      	adds	r2, r4, #0
100091c2:	1c2b      	adds	r3, r5, #0
100091c4:	f001 fdb2 	bl	1000ad2c <__aeabi_ddiv>
100091c8:	464a      	mov	r2, r9
100091ca:	1c0d      	adds	r5, r1, #0
100091cc:	1c04      	adds	r4, r0, #0
100091ce:	9802      	ldr	r0, [sp, #8]
100091d0:	9903      	ldr	r1, [sp, #12]
100091d2:	4643      	mov	r3, r8
100091d4:	f002 fc82 	bl	1000badc <__aeabi_dsub>
100091d8:	1c02      	adds	r2, r0, #0
100091da:	1c0b      	adds	r3, r1, #0
100091dc:	9800      	ldr	r0, [sp, #0]
100091de:	9901      	ldr	r1, [sp, #4]
100091e0:	f002 fc7c 	bl	1000badc <__aeabi_dsub>
100091e4:	2600      	movs	r6, #0
100091e6:	1c02      	adds	r2, r0, #0
100091e8:	1c0b      	adds	r3, r1, #0
100091ea:	1c30      	adds	r0, r6, #0
100091ec:	1c29      	adds	r1, r5, #0
100091ee:	f002 f9db 	bl	1000b5a8 <__aeabi_dmul>
100091f2:	9a02      	ldr	r2, [sp, #8]
100091f4:	9b03      	ldr	r3, [sp, #12]
100091f6:	9000      	str	r0, [sp, #0]
100091f8:	9101      	str	r1, [sp, #4]
100091fa:	1c30      	adds	r0, r6, #0
100091fc:	1c29      	adds	r1, r5, #0
100091fe:	f002 f9d3 	bl	1000b5a8 <__aeabi_dmul>
10009202:	2200      	movs	r2, #0
10009204:	4b58      	ldr	r3, [pc, #352]	; (10009368 <__kernel_tan+0x390>)
10009206:	f001 fa69 	bl	1000a6dc <__aeabi_dadd>
1000920a:	1c02      	adds	r2, r0, #0
1000920c:	1c0b      	adds	r3, r1, #0
1000920e:	9800      	ldr	r0, [sp, #0]
10009210:	9901      	ldr	r1, [sp, #4]
10009212:	f001 fa63 	bl	1000a6dc <__aeabi_dadd>
10009216:	1c22      	adds	r2, r4, #0
10009218:	1c2b      	adds	r3, r5, #0
1000921a:	f002 f9c5 	bl	1000b5a8 <__aeabi_dmul>
1000921e:	1c32      	adds	r2, r6, #0
10009220:	1c2b      	adds	r3, r5, #0
10009222:	f001 fa5b 	bl	1000a6dc <__aeabi_dadd>
10009226:	b009      	add	sp, #36	; 0x24
10009228:	bc3c      	pop	{r2, r3, r4, r5}
1000922a:	4690      	mov	r8, r2
1000922c:	4699      	mov	r9, r3
1000922e:	46a2      	mov	sl, r4
10009230:	46ab      	mov	fp, r5
10009232:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009234:	9812      	ldr	r0, [sp, #72]	; 0x48
10009236:	f003 f801 	bl	1000c23c <__aeabi_i2d>
1000923a:	465b      	mov	r3, fp
1000923c:	1c06      	adds	r6, r0, #0
1000923e:	1798      	asrs	r0, r3, #30
10009240:	2302      	movs	r3, #2
10009242:	4018      	ands	r0, r3
10009244:	3b01      	subs	r3, #1
10009246:	1a18      	subs	r0, r3, r0
10009248:	1c0f      	adds	r7, r1, #0
1000924a:	f002 fff7 	bl	1000c23c <__aeabi_i2d>
1000924e:	1c22      	adds	r2, r4, #0
10009250:	9002      	str	r0, [sp, #8]
10009252:	9103      	str	r1, [sp, #12]
10009254:	1c2b      	adds	r3, r5, #0
10009256:	1c20      	adds	r0, r4, #0
10009258:	1c29      	adds	r1, r5, #0
1000925a:	f002 f9a5 	bl	1000b5a8 <__aeabi_dmul>
1000925e:	1c32      	adds	r2, r6, #0
10009260:	9004      	str	r0, [sp, #16]
10009262:	9105      	str	r1, [sp, #20]
10009264:	1c3b      	adds	r3, r7, #0
10009266:	1c20      	adds	r0, r4, #0
10009268:	1c29      	adds	r1, r5, #0
1000926a:	f001 fa37 	bl	1000a6dc <__aeabi_dadd>
1000926e:	1c02      	adds	r2, r0, #0
10009270:	1c0b      	adds	r3, r1, #0
10009272:	9804      	ldr	r0, [sp, #16]
10009274:	9905      	ldr	r1, [sp, #20]
10009276:	f001 fd59 	bl	1000ad2c <__aeabi_ddiv>
1000927a:	9a00      	ldr	r2, [sp, #0]
1000927c:	9b01      	ldr	r3, [sp, #4]
1000927e:	f002 fc2d 	bl	1000badc <__aeabi_dsub>
10009282:	1c02      	adds	r2, r0, #0
10009284:	1c0b      	adds	r3, r1, #0
10009286:	4648      	mov	r0, r9
10009288:	4641      	mov	r1, r8
1000928a:	f002 fc27 	bl	1000badc <__aeabi_dsub>
1000928e:	1c02      	adds	r2, r0, #0
10009290:	1c0b      	adds	r3, r1, #0
10009292:	f001 fa23 	bl	1000a6dc <__aeabi_dadd>
10009296:	1c02      	adds	r2, r0, #0
10009298:	1c0b      	adds	r3, r1, #0
1000929a:	1c30      	adds	r0, r6, #0
1000929c:	1c39      	adds	r1, r7, #0
1000929e:	f002 fc1d 	bl	1000badc <__aeabi_dsub>
100092a2:	1c02      	adds	r2, r0, #0
100092a4:	1c0b      	adds	r3, r1, #0
100092a6:	9802      	ldr	r0, [sp, #8]
100092a8:	9903      	ldr	r1, [sp, #12]
100092aa:	f002 f97d 	bl	1000b5a8 <__aeabi_dmul>
100092ae:	e7ba      	b.n	10009226 <__kernel_tan+0x24e>
100092b0:	4648      	mov	r0, r9
100092b2:	4641      	mov	r1, r8
100092b4:	f7fd fcc8 	bl	10006c48 <fabs>
100092b8:	1c02      	adds	r2, r0, #0
100092ba:	1c0b      	adds	r3, r1, #0
100092bc:	2000      	movs	r0, #0
100092be:	492a      	ldr	r1, [pc, #168]	; (10009368 <__kernel_tan+0x390>)
100092c0:	f001 fd34 	bl	1000ad2c <__aeabi_ddiv>
100092c4:	e7af      	b.n	10009226 <__kernel_tan+0x24e>
100092c6:	2280      	movs	r2, #128	; 0x80
100092c8:	2180      	movs	r1, #128	; 0x80
100092ca:	0612      	lsls	r2, r2, #24
100092cc:	4694      	mov	ip, r2
100092ce:	9b00      	ldr	r3, [sp, #0]
100092d0:	0609      	lsls	r1, r1, #24
100092d2:	4441      	add	r1, r8
100092d4:	4463      	add	r3, ip
100092d6:	4681      	mov	r9, r0
100092d8:	4688      	mov	r8, r1
100092da:	9300      	str	r3, [sp, #0]
100092dc:	e6ad      	b.n	1000903a <__kernel_tan+0x62>
100092de:	4648      	mov	r0, r9
100092e0:	4641      	mov	r1, r8
100092e2:	e7a0      	b.n	10009226 <__kernel_tan+0x24e>
100092e4:	3e2fffff 	.word	0x3e2fffff
100092e8:	bff00000 	.word	0xbff00000
100092ec:	3fe59427 	.word	0x3fe59427
100092f0:	54442d18 	.word	0x54442d18
100092f4:	3fe921fb 	.word	0x3fe921fb
100092f8:	33145c07 	.word	0x33145c07
100092fc:	3c81a626 	.word	0x3c81a626
10009300:	db605373 	.word	0xdb605373
10009304:	bef375cb 	.word	0xbef375cb
10009308:	a03792a6 	.word	0xa03792a6
1000930c:	3f147e88 	.word	0x3f147e88
10009310:	f2f26501 	.word	0xf2f26501
10009314:	3f4344d8 	.word	0x3f4344d8
10009318:	c9560328 	.word	0xc9560328
1000931c:	3f6d6d22 	.word	0x3f6d6d22
10009320:	8406d637 	.word	0x8406d637
10009324:	3f9664f4 	.word	0x3f9664f4
10009328:	1110fe7a 	.word	0x1110fe7a
1000932c:	3fc11111 	.word	0x3fc11111
10009330:	74bf7ad4 	.word	0x74bf7ad4
10009334:	3efb2a70 	.word	0x3efb2a70
10009338:	32f0a7e9 	.word	0x32f0a7e9
1000933c:	3f12b80f 	.word	0x3f12b80f
10009340:	1a8d1068 	.word	0x1a8d1068
10009344:	3f3026f7 	.word	0x3f3026f7
10009348:	fee08315 	.word	0xfee08315
1000934c:	3f57dbc8 	.word	0x3f57dbc8
10009350:	e96e8493 	.word	0xe96e8493
10009354:	3f8226e3 	.word	0x3f8226e3
10009358:	1bb341fe 	.word	0x1bb341fe
1000935c:	3faba1ba 	.word	0x3faba1ba
10009360:	55555563 	.word	0x55555563
10009364:	3fd55555 	.word	0x3fd55555
10009368:	3ff00000 	.word	0x3ff00000

1000936c <finite>:
1000936c:	4b03      	ldr	r3, [pc, #12]	; (1000937c <finite+0x10>)
1000936e:	0048      	lsls	r0, r1, #1
10009370:	469c      	mov	ip, r3
10009372:	0840      	lsrs	r0, r0, #1
10009374:	4460      	add	r0, ip
10009376:	0fc0      	lsrs	r0, r0, #31
10009378:	4770      	bx	lr
1000937a:	46c0      	nop			; (mov r8, r8)
1000937c:	80100000 	.word	0x80100000

10009380 <floor>:
10009380:	b5f0      	push	{r4, r5, r6, r7, lr}
10009382:	465f      	mov	r7, fp
10009384:	464d      	mov	r5, r9
10009386:	4644      	mov	r4, r8
10009388:	4656      	mov	r6, sl
1000938a:	b4f0      	push	{r4, r5, r6, r7}
1000938c:	4b48      	ldr	r3, [pc, #288]	; (100094b0 <floor+0x130>)
1000938e:	004d      	lsls	r5, r1, #1
10009390:	0d6d      	lsrs	r5, r5, #21
10009392:	18ef      	adds	r7, r5, r3
10009394:	b083      	sub	sp, #12
10009396:	1c06      	adds	r6, r0, #0
10009398:	1c0c      	adds	r4, r1, #0
1000939a:	4688      	mov	r8, r1
1000939c:	468b      	mov	fp, r1
1000939e:	4681      	mov	r9, r0
100093a0:	2f13      	cmp	r7, #19
100093a2:	dc27      	bgt.n	100093f4 <floor+0x74>
100093a4:	2f00      	cmp	r7, #0
100093a6:	db54      	blt.n	10009452 <floor+0xd2>
100093a8:	4d42      	ldr	r5, [pc, #264]	; (100094b4 <floor+0x134>)
100093aa:	4641      	mov	r1, r8
100093ac:	413d      	asrs	r5, r7
100093ae:	4029      	ands	r1, r5
100093b0:	4301      	orrs	r1, r0
100093b2:	1c02      	adds	r2, r0, #0
100093b4:	1c23      	adds	r3, r4, #0
100093b6:	2900      	cmp	r1, #0
100093b8:	d013      	beq.n	100093e2 <floor+0x62>
100093ba:	4a3f      	ldr	r2, [pc, #252]	; (100094b8 <floor+0x138>)
100093bc:	4b3f      	ldr	r3, [pc, #252]	; (100094bc <floor+0x13c>)
100093be:	1c21      	adds	r1, r4, #0
100093c0:	f001 f98c 	bl	1000a6dc <__aeabi_dadd>
100093c4:	2200      	movs	r2, #0
100093c6:	2300      	movs	r3, #0
100093c8:	f000 f9fe 	bl	100097c8 <__aeabi_dcmpgt>
100093cc:	2800      	cmp	r0, #0
100093ce:	d006      	beq.n	100093de <floor+0x5e>
100093d0:	2c00      	cmp	r4, #0
100093d2:	db4e      	blt.n	10009472 <floor+0xf2>
100093d4:	465b      	mov	r3, fp
100093d6:	43ab      	bics	r3, r5
100093d8:	4698      	mov	r8, r3
100093da:	2300      	movs	r3, #0
100093dc:	4699      	mov	r9, r3
100093de:	4643      	mov	r3, r8
100093e0:	464a      	mov	r2, r9
100093e2:	1c10      	adds	r0, r2, #0
100093e4:	1c19      	adds	r1, r3, #0
100093e6:	b003      	add	sp, #12
100093e8:	bc3c      	pop	{r2, r3, r4, r5}
100093ea:	4690      	mov	r8, r2
100093ec:	4699      	mov	r9, r3
100093ee:	46a2      	mov	sl, r4
100093f0:	46ab      	mov	fp, r5
100093f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100093f4:	2f33      	cmp	r7, #51	; 0x33
100093f6:	dd0c      	ble.n	10009412 <floor+0x92>
100093f8:	1c0b      	adds	r3, r1, #0
100093fa:	2180      	movs	r1, #128	; 0x80
100093fc:	1c02      	adds	r2, r0, #0
100093fe:	00c9      	lsls	r1, r1, #3
10009400:	428f      	cmp	r7, r1
10009402:	d1ee      	bne.n	100093e2 <floor+0x62>
10009404:	1c32      	adds	r2, r6, #0
10009406:	1c21      	adds	r1, r4, #0
10009408:	f001 f968 	bl	1000a6dc <__aeabi_dadd>
1000940c:	1c02      	adds	r2, r0, #0
1000940e:	1c0b      	adds	r3, r1, #0
10009410:	e7e7      	b.n	100093e2 <floor+0x62>
10009412:	2201      	movs	r2, #1
10009414:	4b2a      	ldr	r3, [pc, #168]	; (100094c0 <floor+0x140>)
10009416:	4252      	negs	r2, r2
10009418:	18eb      	adds	r3, r5, r3
1000941a:	40da      	lsrs	r2, r3
1000941c:	1c11      	adds	r1, r2, #0
1000941e:	9201      	str	r2, [sp, #4]
10009420:	1c23      	adds	r3, r4, #0
10009422:	1c02      	adds	r2, r0, #0
10009424:	4201      	tst	r1, r0
10009426:	d0dc      	beq.n	100093e2 <floor+0x62>
10009428:	4a23      	ldr	r2, [pc, #140]	; (100094b8 <floor+0x138>)
1000942a:	4b24      	ldr	r3, [pc, #144]	; (100094bc <floor+0x13c>)
1000942c:	1c21      	adds	r1, r4, #0
1000942e:	f001 f955 	bl	1000a6dc <__aeabi_dadd>
10009432:	2200      	movs	r2, #0
10009434:	2300      	movs	r3, #0
10009436:	f000 f9c7 	bl	100097c8 <__aeabi_dcmpgt>
1000943a:	2800      	cmp	r0, #0
1000943c:	d0cf      	beq.n	100093de <floor+0x5e>
1000943e:	2c00      	cmp	r4, #0
10009440:	db1c      	blt.n	1000947c <floor+0xfc>
10009442:	464b      	mov	r3, r9
10009444:	9a01      	ldr	r2, [sp, #4]
10009446:	46d8      	mov	r8, fp
10009448:	4393      	bics	r3, r2
1000944a:	4699      	mov	r9, r3
1000944c:	4643      	mov	r3, r8
1000944e:	464a      	mov	r2, r9
10009450:	e7c7      	b.n	100093e2 <floor+0x62>
10009452:	4a19      	ldr	r2, [pc, #100]	; (100094b8 <floor+0x138>)
10009454:	4b19      	ldr	r3, [pc, #100]	; (100094bc <floor+0x13c>)
10009456:	f001 f941 	bl	1000a6dc <__aeabi_dadd>
1000945a:	2200      	movs	r2, #0
1000945c:	2300      	movs	r3, #0
1000945e:	f000 f9b3 	bl	100097c8 <__aeabi_dcmpgt>
10009462:	2800      	cmp	r0, #0
10009464:	d0bb      	beq.n	100093de <floor+0x5e>
10009466:	2c00      	cmp	r4, #0
10009468:	db15      	blt.n	10009496 <floor+0x116>
1000946a:	2300      	movs	r3, #0
1000946c:	4699      	mov	r9, r3
1000946e:	4698      	mov	r8, r3
10009470:	e7b5      	b.n	100093de <floor+0x5e>
10009472:	2380      	movs	r3, #128	; 0x80
10009474:	035b      	lsls	r3, r3, #13
10009476:	413b      	asrs	r3, r7
10009478:	449b      	add	fp, r3
1000947a:	e7ab      	b.n	100093d4 <floor+0x54>
1000947c:	2f14      	cmp	r7, #20
1000947e:	d013      	beq.n	100094a8 <floor+0x128>
10009480:	4b10      	ldr	r3, [pc, #64]	; (100094c4 <floor+0x144>)
10009482:	1b5d      	subs	r5, r3, r5
10009484:	2301      	movs	r3, #1
10009486:	40ab      	lsls	r3, r5
10009488:	4699      	mov	r9, r3
1000948a:	44b1      	add	r9, r6
1000948c:	45b1      	cmp	r9, r6
1000948e:	419b      	sbcs	r3, r3
10009490:	425b      	negs	r3, r3
10009492:	449b      	add	fp, r3
10009494:	e7d5      	b.n	10009442 <floor+0xc2>
10009496:	2300      	movs	r3, #0
10009498:	0064      	lsls	r4, r4, #1
1000949a:	0864      	lsrs	r4, r4, #1
1000949c:	4326      	orrs	r6, r4
1000949e:	4699      	mov	r9, r3
100094a0:	d09d      	beq.n	100093de <floor+0x5e>
100094a2:	4b09      	ldr	r3, [pc, #36]	; (100094c8 <floor+0x148>)
100094a4:	4698      	mov	r8, r3
100094a6:	e79a      	b.n	100093de <floor+0x5e>
100094a8:	2301      	movs	r3, #1
100094aa:	469c      	mov	ip, r3
100094ac:	44e3      	add	fp, ip
100094ae:	e7c8      	b.n	10009442 <floor+0xc2>
100094b0:	fffffc01 	.word	0xfffffc01
100094b4:	000fffff 	.word	0x000fffff
100094b8:	8800759c 	.word	0x8800759c
100094bc:	7e37e43c 	.word	0x7e37e43c
100094c0:	fffffbed 	.word	0xfffffbed
100094c4:	00000433 	.word	0x00000433
100094c8:	bff00000 	.word	0xbff00000

100094cc <__fpclassifyd>:
100094cc:	1c0a      	adds	r2, r1, #0
100094ce:	1c03      	adds	r3, r0, #0
100094d0:	4302      	orrs	r2, r0
100094d2:	b530      	push	{r4, r5, lr}
100094d4:	2002      	movs	r0, #2
100094d6:	2a00      	cmp	r2, #0
100094d8:	d100      	bne.n	100094dc <__fpclassifyd+0x10>
100094da:	bd30      	pop	{r4, r5, pc}
100094dc:	2280      	movs	r2, #128	; 0x80
100094de:	0612      	lsls	r2, r2, #24
100094e0:	4291      	cmp	r1, r2
100094e2:	d016      	beq.n	10009512 <__fpclassifyd+0x46>
100094e4:	4a0c      	ldr	r2, [pc, #48]	; (10009518 <__fpclassifyd+0x4c>)
100094e6:	2004      	movs	r0, #4
100094e8:	188c      	adds	r4, r1, r2
100094ea:	4a0c      	ldr	r2, [pc, #48]	; (1000951c <__fpclassifyd+0x50>)
100094ec:	4294      	cmp	r4, r2
100094ee:	d9f4      	bls.n	100094da <__fpclassifyd+0xe>
100094f0:	4c0b      	ldr	r4, [pc, #44]	; (10009520 <__fpclassifyd+0x54>)
100094f2:	190c      	adds	r4, r1, r4
100094f4:	4294      	cmp	r4, r2
100094f6:	d9f0      	bls.n	100094da <__fpclassifyd+0xe>
100094f8:	4a0a      	ldr	r2, [pc, #40]	; (10009524 <__fpclassifyd+0x58>)
100094fa:	0049      	lsls	r1, r1, #1
100094fc:	0849      	lsrs	r1, r1, #1
100094fe:	2003      	movs	r0, #3
10009500:	4291      	cmp	r1, r2
10009502:	d9ea      	bls.n	100094da <__fpclassifyd+0xe>
10009504:	4a06      	ldr	r2, [pc, #24]	; (10009520 <__fpclassifyd+0x54>)
10009506:	2000      	movs	r0, #0
10009508:	4291      	cmp	r1, r2
1000950a:	d1e6      	bne.n	100094da <__fpclassifyd+0xe>
1000950c:	4258      	negs	r0, r3
1000950e:	4158      	adcs	r0, r3
10009510:	e7e3      	b.n	100094da <__fpclassifyd+0xe>
10009512:	2b00      	cmp	r3, #0
10009514:	d0e1      	beq.n	100094da <__fpclassifyd+0xe>
10009516:	e7ef      	b.n	100094f8 <__fpclassifyd+0x2c>
10009518:	fff00000 	.word	0xfff00000
1000951c:	7fdfffff 	.word	0x7fdfffff
10009520:	7ff00000 	.word	0x7ff00000
10009524:	000fffff 	.word	0x000fffff

10009528 <matherr>:
10009528:	2000      	movs	r0, #0
1000952a:	4770      	bx	lr

1000952c <nan>:
1000952c:	2000      	movs	r0, #0
1000952e:	4901      	ldr	r1, [pc, #4]	; (10009534 <nan+0x8>)
10009530:	4770      	bx	lr
10009532:	46c0      	nop			; (mov r8, r8)
10009534:	7ff80000 	.word	0x7ff80000

10009538 <rint>:
10009538:	b5f0      	push	{r4, r5, r6, r7, lr}
1000953a:	4647      	mov	r7, r8
1000953c:	b480      	push	{r7}
1000953e:	004b      	lsls	r3, r1, #1
10009540:	4a4a      	ldr	r2, [pc, #296]	; (1000966c <rint+0x134>)
10009542:	0d5b      	lsrs	r3, r3, #21
10009544:	189d      	adds	r5, r3, r2
10009546:	b082      	sub	sp, #8
10009548:	1c07      	adds	r7, r0, #0
1000954a:	1c0c      	adds	r4, r1, #0
1000954c:	0fce      	lsrs	r6, r1, #31
1000954e:	2d13      	cmp	r5, #19
10009550:	dc39      	bgt.n	100095c6 <rint+0x8e>
10009552:	2d00      	cmp	r5, #0
10009554:	db59      	blt.n	1000960a <rint+0xd2>
10009556:	4f46      	ldr	r7, [pc, #280]	; (10009670 <rint+0x138>)
10009558:	1c02      	adds	r2, r0, #0
1000955a:	412f      	asrs	r7, r5
1000955c:	1c3b      	adds	r3, r7, #0
1000955e:	400b      	ands	r3, r1
10009560:	4303      	orrs	r3, r0
10009562:	469c      	mov	ip, r3
10009564:	46b8      	mov	r8, r7
10009566:	4667      	mov	r7, ip
10009568:	1c0b      	adds	r3, r1, #0
1000956a:	2f00      	cmp	r7, #0
1000956c:	d025      	beq.n	100095ba <rint+0x82>
1000956e:	4643      	mov	r3, r8
10009570:	085b      	lsrs	r3, r3, #1
10009572:	1c1a      	adds	r2, r3, #0
10009574:	400a      	ands	r2, r1
10009576:	4310      	orrs	r0, r2
10009578:	2700      	movs	r7, #0
1000957a:	2800      	cmp	r0, #0
1000957c:	d008      	beq.n	10009590 <rint+0x58>
1000957e:	2d13      	cmp	r5, #19
10009580:	d100      	bne.n	10009584 <rint+0x4c>
10009582:	e06f      	b.n	10009664 <rint+0x12c>
10009584:	4399      	bics	r1, r3
10009586:	2380      	movs	r3, #128	; 0x80
10009588:	02db      	lsls	r3, r3, #11
1000958a:	412b      	asrs	r3, r5
1000958c:	4319      	orrs	r1, r3
1000958e:	1c0c      	adds	r4, r1, #0
10009590:	4938      	ldr	r1, [pc, #224]	; (10009674 <rint+0x13c>)
10009592:	00f6      	lsls	r6, r6, #3
10009594:	198e      	adds	r6, r1, r6
10009596:	1c23      	adds	r3, r4, #0
10009598:	6834      	ldr	r4, [r6, #0]
1000959a:	6875      	ldr	r5, [r6, #4]
1000959c:	1c3a      	adds	r2, r7, #0
1000959e:	1c20      	adds	r0, r4, #0
100095a0:	1c29      	adds	r1, r5, #0
100095a2:	f001 f89b 	bl	1000a6dc <__aeabi_dadd>
100095a6:	9000      	str	r0, [sp, #0]
100095a8:	9101      	str	r1, [sp, #4]
100095aa:	9800      	ldr	r0, [sp, #0]
100095ac:	9901      	ldr	r1, [sp, #4]
100095ae:	1c22      	adds	r2, r4, #0
100095b0:	1c2b      	adds	r3, r5, #0
100095b2:	f002 fa93 	bl	1000badc <__aeabi_dsub>
100095b6:	1c02      	adds	r2, r0, #0
100095b8:	1c0b      	adds	r3, r1, #0
100095ba:	1c10      	adds	r0, r2, #0
100095bc:	1c19      	adds	r1, r3, #0
100095be:	b002      	add	sp, #8
100095c0:	bc04      	pop	{r2}
100095c2:	4690      	mov	r8, r2
100095c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100095c6:	2d33      	cmp	r5, #51	; 0x33
100095c8:	dd0b      	ble.n	100095e2 <rint+0xaa>
100095ca:	1c0b      	adds	r3, r1, #0
100095cc:	2180      	movs	r1, #128	; 0x80
100095ce:	1c02      	adds	r2, r0, #0
100095d0:	00c9      	lsls	r1, r1, #3
100095d2:	428d      	cmp	r5, r1
100095d4:	d1f1      	bne.n	100095ba <rint+0x82>
100095d6:	1c21      	adds	r1, r4, #0
100095d8:	f001 f880 	bl	1000a6dc <__aeabi_dadd>
100095dc:	1c02      	adds	r2, r0, #0
100095de:	1c0b      	adds	r3, r1, #0
100095e0:	e7eb      	b.n	100095ba <rint+0x82>
100095e2:	4a25      	ldr	r2, [pc, #148]	; (10009678 <rint+0x140>)
100095e4:	189d      	adds	r5, r3, r2
100095e6:	2301      	movs	r3, #1
100095e8:	425b      	negs	r3, r3
100095ea:	40eb      	lsrs	r3, r5
100095ec:	469c      	mov	ip, r3
100095ee:	1c0b      	adds	r3, r1, #0
100095f0:	4661      	mov	r1, ip
100095f2:	1c02      	adds	r2, r0, #0
100095f4:	4201      	tst	r1, r0
100095f6:	d0e0      	beq.n	100095ba <rint+0x82>
100095f8:	084b      	lsrs	r3, r1, #1
100095fa:	4203      	tst	r3, r0
100095fc:	d0c8      	beq.n	10009590 <rint+0x58>
100095fe:	2780      	movs	r7, #128	; 0x80
10009600:	05ff      	lsls	r7, r7, #23
10009602:	412f      	asrs	r7, r5
10009604:	4398      	bics	r0, r3
10009606:	4307      	orrs	r7, r0
10009608:	e7c2      	b.n	10009590 <rint+0x58>
1000960a:	004c      	lsls	r4, r1, #1
1000960c:	0864      	lsrs	r4, r4, #1
1000960e:	4304      	orrs	r4, r0
10009610:	1c02      	adds	r2, r0, #0
10009612:	1c0b      	adds	r3, r1, #0
10009614:	2c00      	cmp	r4, #0
10009616:	d0d0      	beq.n	100095ba <rint+0x82>
10009618:	0309      	lsls	r1, r1, #12
1000961a:	0b09      	lsrs	r1, r1, #12
1000961c:	4301      	orrs	r1, r0
1000961e:	424a      	negs	r2, r1
10009620:	4311      	orrs	r1, r2
10009622:	2280      	movs	r2, #128	; 0x80
10009624:	0b09      	lsrs	r1, r1, #12
10009626:	0312      	lsls	r2, r2, #12
10009628:	0c5b      	lsrs	r3, r3, #17
1000962a:	4011      	ands	r1, r2
1000962c:	045b      	lsls	r3, r3, #17
1000962e:	1c02      	adds	r2, r0, #0
10009630:	4319      	orrs	r1, r3
10009632:	4810      	ldr	r0, [pc, #64]	; (10009674 <rint+0x13c>)
10009634:	1c0b      	adds	r3, r1, #0
10009636:	00f1      	lsls	r1, r6, #3
10009638:	1841      	adds	r1, r0, r1
1000963a:	680c      	ldr	r4, [r1, #0]
1000963c:	684d      	ldr	r5, [r1, #4]
1000963e:	1c20      	adds	r0, r4, #0
10009640:	1c29      	adds	r1, r5, #0
10009642:	f001 f84b 	bl	1000a6dc <__aeabi_dadd>
10009646:	9000      	str	r0, [sp, #0]
10009648:	9101      	str	r1, [sp, #4]
1000964a:	9800      	ldr	r0, [sp, #0]
1000964c:	9901      	ldr	r1, [sp, #4]
1000964e:	1c22      	adds	r2, r4, #0
10009650:	1c2b      	adds	r3, r5, #0
10009652:	f002 fa43 	bl	1000badc <__aeabi_dsub>
10009656:	004b      	lsls	r3, r1, #1
10009658:	085b      	lsrs	r3, r3, #1
1000965a:	07f6      	lsls	r6, r6, #31
1000965c:	431e      	orrs	r6, r3
1000965e:	1c02      	adds	r2, r0, #0
10009660:	1c33      	adds	r3, r6, #0
10009662:	e7aa      	b.n	100095ba <rint+0x82>
10009664:	2780      	movs	r7, #128	; 0x80
10009666:	063f      	lsls	r7, r7, #24
10009668:	e78c      	b.n	10009584 <rint+0x4c>
1000966a:	46c0      	nop			; (mov r8, r8)
1000966c:	fffffc01 	.word	0xfffffc01
10009670:	000fffff 	.word	0x000fffff
10009674:	1000ce10 	.word	0x1000ce10
10009678:	fffffbed 	.word	0xfffffbed

1000967c <scalbn>:
1000967c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000967e:	4f31      	ldr	r7, [pc, #196]	; (10009744 <scalbn+0xc8>)
10009680:	1c16      	adds	r6, r2, #0
10009682:	1c3b      	adds	r3, r7, #0
10009684:	400b      	ands	r3, r1
10009686:	1c04      	adds	r4, r0, #0
10009688:	1c0d      	adds	r5, r1, #0
1000968a:	1c0a      	adds	r2, r1, #0
1000968c:	151b      	asrs	r3, r3, #20
1000968e:	d120      	bne.n	100096d2 <scalbn+0x56>
10009690:	004b      	lsls	r3, r1, #1
10009692:	085b      	lsrs	r3, r3, #1
10009694:	4303      	orrs	r3, r0
10009696:	d01b      	beq.n	100096d0 <scalbn+0x54>
10009698:	2200      	movs	r2, #0
1000969a:	4b2b      	ldr	r3, [pc, #172]	; (10009748 <scalbn+0xcc>)
1000969c:	f001 ff84 	bl	1000b5a8 <__aeabi_dmul>
100096a0:	4b2a      	ldr	r3, [pc, #168]	; (1000974c <scalbn+0xd0>)
100096a2:	1c04      	adds	r4, r0, #0
100096a4:	1c0d      	adds	r5, r1, #0
100096a6:	1c0a      	adds	r2, r1, #0
100096a8:	429e      	cmp	r6, r3
100096aa:	db22      	blt.n	100096f2 <scalbn+0x76>
100096ac:	400f      	ands	r7, r1
100096ae:	153f      	asrs	r7, r7, #20
100096b0:	1c3b      	adds	r3, r7, #0
100096b2:	4927      	ldr	r1, [pc, #156]	; (10009750 <scalbn+0xd4>)
100096b4:	3b36      	subs	r3, #54	; 0x36
100096b6:	199b      	adds	r3, r3, r6
100096b8:	428b      	cmp	r3, r1
100096ba:	dd11      	ble.n	100096e0 <scalbn+0x64>
100096bc:	1c22      	adds	r2, r4, #0
100096be:	1c2b      	adds	r3, r5, #0
100096c0:	4824      	ldr	r0, [pc, #144]	; (10009754 <scalbn+0xd8>)
100096c2:	4925      	ldr	r1, [pc, #148]	; (10009758 <scalbn+0xdc>)
100096c4:	f7fd fa6a 	bl	10006b9c <copysign>
100096c8:	4a22      	ldr	r2, [pc, #136]	; (10009754 <scalbn+0xd8>)
100096ca:	4b23      	ldr	r3, [pc, #140]	; (10009758 <scalbn+0xdc>)
100096cc:	f001 ff6c 	bl	1000b5a8 <__aeabi_dmul>
100096d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100096d2:	4922      	ldr	r1, [pc, #136]	; (1000975c <scalbn+0xe0>)
100096d4:	428b      	cmp	r3, r1
100096d6:	d022      	beq.n	1000971e <scalbn+0xa2>
100096d8:	491d      	ldr	r1, [pc, #116]	; (10009750 <scalbn+0xd4>)
100096da:	199b      	adds	r3, r3, r6
100096dc:	428b      	cmp	r3, r1
100096de:	dced      	bgt.n	100096bc <scalbn+0x40>
100096e0:	2b00      	cmp	r3, #0
100096e2:	dd0b      	ble.n	100096fc <scalbn+0x80>
100096e4:	491e      	ldr	r1, [pc, #120]	; (10009760 <scalbn+0xe4>)
100096e6:	051b      	lsls	r3, r3, #20
100096e8:	400a      	ands	r2, r1
100096ea:	4313      	orrs	r3, r2
100096ec:	1c20      	adds	r0, r4, #0
100096ee:	1c19      	adds	r1, r3, #0
100096f0:	e7ee      	b.n	100096d0 <scalbn+0x54>
100096f2:	4a1c      	ldr	r2, [pc, #112]	; (10009764 <scalbn+0xe8>)
100096f4:	4b1c      	ldr	r3, [pc, #112]	; (10009768 <scalbn+0xec>)
100096f6:	f001 ff57 	bl	1000b5a8 <__aeabi_dmul>
100096fa:	e7e9      	b.n	100096d0 <scalbn+0x54>
100096fc:	1c19      	adds	r1, r3, #0
100096fe:	3135      	adds	r1, #53	; 0x35
10009700:	da13      	bge.n	1000972a <scalbn+0xae>
10009702:	4b1a      	ldr	r3, [pc, #104]	; (1000976c <scalbn+0xf0>)
10009704:	429e      	cmp	r6, r3
10009706:	dcd9      	bgt.n	100096bc <scalbn+0x40>
10009708:	1c22      	adds	r2, r4, #0
1000970a:	1c2b      	adds	r3, r5, #0
1000970c:	4815      	ldr	r0, [pc, #84]	; (10009764 <scalbn+0xe8>)
1000970e:	4916      	ldr	r1, [pc, #88]	; (10009768 <scalbn+0xec>)
10009710:	f7fd fa44 	bl	10006b9c <copysign>
10009714:	4a13      	ldr	r2, [pc, #76]	; (10009764 <scalbn+0xe8>)
10009716:	4b14      	ldr	r3, [pc, #80]	; (10009768 <scalbn+0xec>)
10009718:	f001 ff46 	bl	1000b5a8 <__aeabi_dmul>
1000971c:	e7d8      	b.n	100096d0 <scalbn+0x54>
1000971e:	1c29      	adds	r1, r5, #0
10009720:	1c22      	adds	r2, r4, #0
10009722:	1c2b      	adds	r3, r5, #0
10009724:	f000 ffda 	bl	1000a6dc <__aeabi_dadd>
10009728:	e7d2      	b.n	100096d0 <scalbn+0x54>
1000972a:	490d      	ldr	r1, [pc, #52]	; (10009760 <scalbn+0xe4>)
1000972c:	3336      	adds	r3, #54	; 0x36
1000972e:	400a      	ands	r2, r1
10009730:	051b      	lsls	r3, r3, #20
10009732:	4313      	orrs	r3, r2
10009734:	1c20      	adds	r0, r4, #0
10009736:	1c19      	adds	r1, r3, #0
10009738:	2200      	movs	r2, #0
1000973a:	4b0d      	ldr	r3, [pc, #52]	; (10009770 <scalbn+0xf4>)
1000973c:	f001 ff34 	bl	1000b5a8 <__aeabi_dmul>
10009740:	e7c6      	b.n	100096d0 <scalbn+0x54>
10009742:	46c0      	nop			; (mov r8, r8)
10009744:	7ff00000 	.word	0x7ff00000
10009748:	43500000 	.word	0x43500000
1000974c:	ffff3cb0 	.word	0xffff3cb0
10009750:	000007fe 	.word	0x000007fe
10009754:	8800759c 	.word	0x8800759c
10009758:	7e37e43c 	.word	0x7e37e43c
1000975c:	000007ff 	.word	0x000007ff
10009760:	800fffff 	.word	0x800fffff
10009764:	c2f8f359 	.word	0xc2f8f359
10009768:	01a56e1f 	.word	0x01a56e1f
1000976c:	0000c350 	.word	0x0000c350
10009770:	3c900000 	.word	0x3c900000

10009774 <__aeabi_cdrcmple>:
10009774:	4684      	mov	ip, r0
10009776:	1c10      	adds	r0, r2, #0
10009778:	4662      	mov	r2, ip
1000977a:	468c      	mov	ip, r1
1000977c:	1c19      	adds	r1, r3, #0
1000977e:	4663      	mov	r3, ip
10009780:	e000      	b.n	10009784 <__aeabi_cdcmpeq>
10009782:	46c0      	nop			; (mov r8, r8)

10009784 <__aeabi_cdcmpeq>:
10009784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10009786:	f001 fea9 	bl	1000b4dc <__ledf2>
1000978a:	2800      	cmp	r0, #0
1000978c:	d401      	bmi.n	10009792 <__aeabi_cdcmpeq+0xe>
1000978e:	2100      	movs	r1, #0
10009790:	42c8      	cmn	r0, r1
10009792:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10009794 <__aeabi_dcmpeq>:
10009794:	b510      	push	{r4, lr}
10009796:	f001 fded 	bl	1000b374 <__eqdf2>
1000979a:	4240      	negs	r0, r0
1000979c:	3001      	adds	r0, #1
1000979e:	bd10      	pop	{r4, pc}

100097a0 <__aeabi_dcmplt>:
100097a0:	b510      	push	{r4, lr}
100097a2:	f001 fe9b 	bl	1000b4dc <__ledf2>
100097a6:	2800      	cmp	r0, #0
100097a8:	db01      	blt.n	100097ae <__aeabi_dcmplt+0xe>
100097aa:	2000      	movs	r0, #0
100097ac:	bd10      	pop	{r4, pc}
100097ae:	2001      	movs	r0, #1
100097b0:	bd10      	pop	{r4, pc}
100097b2:	46c0      	nop			; (mov r8, r8)

100097b4 <__aeabi_dcmple>:
100097b4:	b510      	push	{r4, lr}
100097b6:	f001 fe91 	bl	1000b4dc <__ledf2>
100097ba:	2800      	cmp	r0, #0
100097bc:	dd01      	ble.n	100097c2 <__aeabi_dcmple+0xe>
100097be:	2000      	movs	r0, #0
100097c0:	bd10      	pop	{r4, pc}
100097c2:	2001      	movs	r0, #1
100097c4:	bd10      	pop	{r4, pc}
100097c6:	46c0      	nop			; (mov r8, r8)

100097c8 <__aeabi_dcmpgt>:
100097c8:	b510      	push	{r4, lr}
100097ca:	f001 fe17 	bl	1000b3fc <__gedf2>
100097ce:	2800      	cmp	r0, #0
100097d0:	dc01      	bgt.n	100097d6 <__aeabi_dcmpgt+0xe>
100097d2:	2000      	movs	r0, #0
100097d4:	bd10      	pop	{r4, pc}
100097d6:	2001      	movs	r0, #1
100097d8:	bd10      	pop	{r4, pc}
100097da:	46c0      	nop			; (mov r8, r8)

100097dc <__aeabi_dcmpge>:
100097dc:	b510      	push	{r4, lr}
100097de:	f001 fe0d 	bl	1000b3fc <__gedf2>
100097e2:	2800      	cmp	r0, #0
100097e4:	da01      	bge.n	100097ea <__aeabi_dcmpge+0xe>
100097e6:	2000      	movs	r0, #0
100097e8:	bd10      	pop	{r4, pc}
100097ea:	2001      	movs	r0, #1
100097ec:	bd10      	pop	{r4, pc}
100097ee:	46c0      	nop			; (mov r8, r8)

100097f0 <__aeabi_cfrcmple>:
100097f0:	4684      	mov	ip, r0
100097f2:	1c08      	adds	r0, r1, #0
100097f4:	4661      	mov	r1, ip
100097f6:	e7ff      	b.n	100097f8 <__aeabi_cfcmpeq>

100097f8 <__aeabi_cfcmpeq>:
100097f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100097fa:	f000 fc11 	bl	1000a020 <__lesf2>
100097fe:	2800      	cmp	r0, #0
10009800:	d401      	bmi.n	10009806 <__aeabi_cfcmpeq+0xe>
10009802:	2100      	movs	r1, #0
10009804:	42c8      	cmn	r0, r1
10009806:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10009808 <__aeabi_fcmpeq>:
10009808:	b510      	push	{r4, lr}
1000980a:	f000 fb95 	bl	10009f38 <__eqsf2>
1000980e:	4240      	negs	r0, r0
10009810:	3001      	adds	r0, #1
10009812:	bd10      	pop	{r4, pc}

10009814 <__aeabi_fcmplt>:
10009814:	b510      	push	{r4, lr}
10009816:	f000 fc03 	bl	1000a020 <__lesf2>
1000981a:	2800      	cmp	r0, #0
1000981c:	db01      	blt.n	10009822 <__aeabi_fcmplt+0xe>
1000981e:	2000      	movs	r0, #0
10009820:	bd10      	pop	{r4, pc}
10009822:	2001      	movs	r0, #1
10009824:	bd10      	pop	{r4, pc}
10009826:	46c0      	nop			; (mov r8, r8)

10009828 <__aeabi_fcmple>:
10009828:	b510      	push	{r4, lr}
1000982a:	f000 fbf9 	bl	1000a020 <__lesf2>
1000982e:	2800      	cmp	r0, #0
10009830:	dd01      	ble.n	10009836 <__aeabi_fcmple+0xe>
10009832:	2000      	movs	r0, #0
10009834:	bd10      	pop	{r4, pc}
10009836:	2001      	movs	r0, #1
10009838:	bd10      	pop	{r4, pc}
1000983a:	46c0      	nop			; (mov r8, r8)

1000983c <__aeabi_fcmpgt>:
1000983c:	b510      	push	{r4, lr}
1000983e:	f000 fba5 	bl	10009f8c <__gesf2>
10009842:	2800      	cmp	r0, #0
10009844:	dc01      	bgt.n	1000984a <__aeabi_fcmpgt+0xe>
10009846:	2000      	movs	r0, #0
10009848:	bd10      	pop	{r4, pc}
1000984a:	2001      	movs	r0, #1
1000984c:	bd10      	pop	{r4, pc}
1000984e:	46c0      	nop			; (mov r8, r8)

10009850 <__aeabi_fcmpge>:
10009850:	b510      	push	{r4, lr}
10009852:	f000 fb9b 	bl	10009f8c <__gesf2>
10009856:	2800      	cmp	r0, #0
10009858:	da01      	bge.n	1000985e <__aeabi_fcmpge+0xe>
1000985a:	2000      	movs	r0, #0
1000985c:	bd10      	pop	{r4, pc}
1000985e:	2001      	movs	r0, #1
10009860:	bd10      	pop	{r4, pc}
10009862:	46c0      	nop			; (mov r8, r8)

10009864 <__clzsi2>:
10009864:	211c      	movs	r1, #28
10009866:	2301      	movs	r3, #1
10009868:	041b      	lsls	r3, r3, #16
1000986a:	4298      	cmp	r0, r3
1000986c:	d301      	bcc.n	10009872 <__clzsi2+0xe>
1000986e:	0c00      	lsrs	r0, r0, #16
10009870:	3910      	subs	r1, #16
10009872:	0a1b      	lsrs	r3, r3, #8
10009874:	4298      	cmp	r0, r3
10009876:	d301      	bcc.n	1000987c <__clzsi2+0x18>
10009878:	0a00      	lsrs	r0, r0, #8
1000987a:	3908      	subs	r1, #8
1000987c:	091b      	lsrs	r3, r3, #4
1000987e:	4298      	cmp	r0, r3
10009880:	d301      	bcc.n	10009886 <__clzsi2+0x22>
10009882:	0900      	lsrs	r0, r0, #4
10009884:	3904      	subs	r1, #4
10009886:	a202      	add	r2, pc, #8	; (adr r2, 10009890 <__clzsi2+0x2c>)
10009888:	5c10      	ldrb	r0, [r2, r0]
1000988a:	1840      	adds	r0, r0, r1
1000988c:	4770      	bx	lr
1000988e:	46c0      	nop			; (mov r8, r8)
10009890:	02020304 	.word	0x02020304
10009894:	01010101 	.word	0x01010101
	...

100098a0 <__aeabi_uldivmod>:
100098a0:	2b00      	cmp	r3, #0
100098a2:	d111      	bne.n	100098c8 <__aeabi_uldivmod+0x28>
100098a4:	2a00      	cmp	r2, #0
100098a6:	d10f      	bne.n	100098c8 <__aeabi_uldivmod+0x28>
100098a8:	2900      	cmp	r1, #0
100098aa:	d100      	bne.n	100098ae <__aeabi_uldivmod+0xe>
100098ac:	2800      	cmp	r0, #0
100098ae:	d002      	beq.n	100098b6 <__aeabi_uldivmod+0x16>
100098b0:	2100      	movs	r1, #0
100098b2:	43c9      	mvns	r1, r1
100098b4:	1c08      	adds	r0, r1, #0
100098b6:	b407      	push	{r0, r1, r2}
100098b8:	4802      	ldr	r0, [pc, #8]	; (100098c4 <__aeabi_uldivmod+0x24>)
100098ba:	a102      	add	r1, pc, #8	; (adr r1, 100098c4 <__aeabi_uldivmod+0x24>)
100098bc:	1840      	adds	r0, r0, r1
100098be:	9002      	str	r0, [sp, #8]
100098c0:	bd03      	pop	{r0, r1, pc}
100098c2:	46c0      	nop			; (mov r8, r8)
100098c4:	00002c1d 	.word	0x00002c1d
100098c8:	b403      	push	{r0, r1}
100098ca:	4668      	mov	r0, sp
100098cc:	b501      	push	{r0, lr}
100098ce:	9802      	ldr	r0, [sp, #8]
100098d0:	f000 f864 	bl	1000999c <__gnu_uldivmod_helper>
100098d4:	9b01      	ldr	r3, [sp, #4]
100098d6:	469e      	mov	lr, r3
100098d8:	b002      	add	sp, #8
100098da:	bc0c      	pop	{r2, r3}
100098dc:	4770      	bx	lr
100098de:	46c0      	nop			; (mov r8, r8)

100098e0 <__aeabi_lmul>:
100098e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100098e2:	464f      	mov	r7, r9
100098e4:	4646      	mov	r6, r8
100098e6:	0405      	lsls	r5, r0, #16
100098e8:	0c2d      	lsrs	r5, r5, #16
100098ea:	1c2c      	adds	r4, r5, #0
100098ec:	b4c0      	push	{r6, r7}
100098ee:	0417      	lsls	r7, r2, #16
100098f0:	0c16      	lsrs	r6, r2, #16
100098f2:	0c3f      	lsrs	r7, r7, #16
100098f4:	4699      	mov	r9, r3
100098f6:	0c03      	lsrs	r3, r0, #16
100098f8:	437c      	muls	r4, r7
100098fa:	4375      	muls	r5, r6
100098fc:	435f      	muls	r7, r3
100098fe:	4373      	muls	r3, r6
10009900:	197d      	adds	r5, r7, r5
10009902:	0c26      	lsrs	r6, r4, #16
10009904:	19ad      	adds	r5, r5, r6
10009906:	469c      	mov	ip, r3
10009908:	42af      	cmp	r7, r5
1000990a:	d903      	bls.n	10009914 <__aeabi_lmul+0x34>
1000990c:	2380      	movs	r3, #128	; 0x80
1000990e:	025b      	lsls	r3, r3, #9
10009910:	4698      	mov	r8, r3
10009912:	44c4      	add	ip, r8
10009914:	464b      	mov	r3, r9
10009916:	4351      	muls	r1, r2
10009918:	4343      	muls	r3, r0
1000991a:	0424      	lsls	r4, r4, #16
1000991c:	0c2e      	lsrs	r6, r5, #16
1000991e:	0c24      	lsrs	r4, r4, #16
10009920:	042d      	lsls	r5, r5, #16
10009922:	4466      	add	r6, ip
10009924:	192c      	adds	r4, r5, r4
10009926:	1859      	adds	r1, r3, r1
10009928:	1989      	adds	r1, r1, r6
1000992a:	1c20      	adds	r0, r4, #0
1000992c:	bc0c      	pop	{r2, r3}
1000992e:	4690      	mov	r8, r2
10009930:	4699      	mov	r9, r3
10009932:	bdf0      	pop	{r4, r5, r6, r7, pc}

10009934 <__aeabi_f2uiz>:
10009934:	219e      	movs	r1, #158	; 0x9e
10009936:	b510      	push	{r4, lr}
10009938:	05c9      	lsls	r1, r1, #23
1000993a:	1c04      	adds	r4, r0, #0
1000993c:	f7ff ff88 	bl	10009850 <__aeabi_fcmpge>
10009940:	2800      	cmp	r0, #0
10009942:	d103      	bne.n	1000994c <__aeabi_f2uiz+0x18>
10009944:	1c20      	adds	r0, r4, #0
10009946:	f000 fe61 	bl	1000a60c <__aeabi_f2iz>
1000994a:	bd10      	pop	{r4, pc}
1000994c:	219e      	movs	r1, #158	; 0x9e
1000994e:	1c20      	adds	r0, r4, #0
10009950:	05c9      	lsls	r1, r1, #23
10009952:	f000 fcdd 	bl	1000a310 <__aeabi_fsub>
10009956:	f000 fe59 	bl	1000a60c <__aeabi_f2iz>
1000995a:	2380      	movs	r3, #128	; 0x80
1000995c:	061b      	lsls	r3, r3, #24
1000995e:	469c      	mov	ip, r3
10009960:	4460      	add	r0, ip
10009962:	e7f2      	b.n	1000994a <__aeabi_f2uiz+0x16>

10009964 <__gnu_ldivmod_helper>:
10009964:	b5f0      	push	{r4, r5, r6, r7, lr}
10009966:	b083      	sub	sp, #12
10009968:	1c16      	adds	r6, r2, #0
1000996a:	1c1f      	adds	r7, r3, #0
1000996c:	9000      	str	r0, [sp, #0]
1000996e:	9101      	str	r1, [sp, #4]
10009970:	f002 fdb8 	bl	1000c4e4 <__divdi3>
10009974:	1c04      	adds	r4, r0, #0
10009976:	1c0d      	adds	r5, r1, #0
10009978:	1c22      	adds	r2, r4, #0
1000997a:	1c2b      	adds	r3, r5, #0
1000997c:	1c30      	adds	r0, r6, #0
1000997e:	1c39      	adds	r1, r7, #0
10009980:	f7ff ffae 	bl	100098e0 <__aeabi_lmul>
10009984:	9a00      	ldr	r2, [sp, #0]
10009986:	9b01      	ldr	r3, [sp, #4]
10009988:	1a12      	subs	r2, r2, r0
1000998a:	418b      	sbcs	r3, r1
1000998c:	9908      	ldr	r1, [sp, #32]
1000998e:	1c20      	adds	r0, r4, #0
10009990:	600a      	str	r2, [r1, #0]
10009992:	604b      	str	r3, [r1, #4]
10009994:	1c29      	adds	r1, r5, #0
10009996:	b003      	add	sp, #12
10009998:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000999a:	46c0      	nop			; (mov r8, r8)

1000999c <__gnu_uldivmod_helper>:
1000999c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000999e:	1c14      	adds	r4, r2, #0
100099a0:	b083      	sub	sp, #12
100099a2:	1c1d      	adds	r5, r3, #0
100099a4:	9000      	str	r0, [sp, #0]
100099a6:	9101      	str	r1, [sp, #4]
100099a8:	f002 fe94 	bl	1000c6d4 <__udivdi3>
100099ac:	1c22      	adds	r2, r4, #0
100099ae:	1c2b      	adds	r3, r5, #0
100099b0:	1c06      	adds	r6, r0, #0
100099b2:	1c0f      	adds	r7, r1, #0
100099b4:	f7ff ff94 	bl	100098e0 <__aeabi_lmul>
100099b8:	9a00      	ldr	r2, [sp, #0]
100099ba:	9b01      	ldr	r3, [sp, #4]
100099bc:	1a12      	subs	r2, r2, r0
100099be:	418b      	sbcs	r3, r1
100099c0:	9908      	ldr	r1, [sp, #32]
100099c2:	1c30      	adds	r0, r6, #0
100099c4:	600a      	str	r2, [r1, #0]
100099c6:	604b      	str	r3, [r1, #4]
100099c8:	1c39      	adds	r1, r7, #0
100099ca:	b003      	add	sp, #12
100099cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099ce:	46c0      	nop			; (mov r8, r8)

100099d0 <__aeabi_fadd>:
100099d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100099d2:	004a      	lsls	r2, r1, #1
100099d4:	0243      	lsls	r3, r0, #9
100099d6:	0044      	lsls	r4, r0, #1
100099d8:	024e      	lsls	r6, r1, #9
100099da:	0fc5      	lsrs	r5, r0, #31
100099dc:	0e24      	lsrs	r4, r4, #24
100099de:	1c28      	adds	r0, r5, #0
100099e0:	099b      	lsrs	r3, r3, #6
100099e2:	0e12      	lsrs	r2, r2, #24
100099e4:	0fc9      	lsrs	r1, r1, #31
100099e6:	09b7      	lsrs	r7, r6, #6
100099e8:	428d      	cmp	r5, r1
100099ea:	d040      	beq.n	10009a6e <__aeabi_fadd+0x9e>
100099ec:	1aa0      	subs	r0, r4, r2
100099ee:	2800      	cmp	r0, #0
100099f0:	dc00      	bgt.n	100099f4 <__aeabi_fadd+0x24>
100099f2:	e084      	b.n	10009afe <__aeabi_fadd+0x12e>
100099f4:	2a00      	cmp	r2, #0
100099f6:	d11c      	bne.n	10009a32 <__aeabi_fadd+0x62>
100099f8:	2f00      	cmp	r7, #0
100099fa:	d15c      	bne.n	10009ab6 <__aeabi_fadd+0xe6>
100099fc:	075a      	lsls	r2, r3, #29
100099fe:	d004      	beq.n	10009a0a <__aeabi_fadd+0x3a>
10009a00:	220f      	movs	r2, #15
10009a02:	401a      	ands	r2, r3
10009a04:	2a04      	cmp	r2, #4
10009a06:	d000      	beq.n	10009a0a <__aeabi_fadd+0x3a>
10009a08:	3304      	adds	r3, #4
10009a0a:	2280      	movs	r2, #128	; 0x80
10009a0c:	04d2      	lsls	r2, r2, #19
10009a0e:	401a      	ands	r2, r3
10009a10:	1c28      	adds	r0, r5, #0
10009a12:	2a00      	cmp	r2, #0
10009a14:	d024      	beq.n	10009a60 <__aeabi_fadd+0x90>
10009a16:	3401      	adds	r4, #1
10009a18:	2cff      	cmp	r4, #255	; 0xff
10009a1a:	d100      	bne.n	10009a1e <__aeabi_fadd+0x4e>
10009a1c:	e07b      	b.n	10009b16 <__aeabi_fadd+0x146>
10009a1e:	019b      	lsls	r3, r3, #6
10009a20:	0a5b      	lsrs	r3, r3, #9
10009a22:	b2e4      	uxtb	r4, r4
10009a24:	025b      	lsls	r3, r3, #9
10009a26:	05e4      	lsls	r4, r4, #23
10009a28:	0a5b      	lsrs	r3, r3, #9
10009a2a:	4323      	orrs	r3, r4
10009a2c:	07c0      	lsls	r0, r0, #31
10009a2e:	4318      	orrs	r0, r3
10009a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009a32:	2cff      	cmp	r4, #255	; 0xff
10009a34:	d0e2      	beq.n	100099fc <__aeabi_fadd+0x2c>
10009a36:	2280      	movs	r2, #128	; 0x80
10009a38:	04d2      	lsls	r2, r2, #19
10009a3a:	4317      	orrs	r7, r2
10009a3c:	2601      	movs	r6, #1
10009a3e:	281b      	cmp	r0, #27
10009a40:	dc08      	bgt.n	10009a54 <__aeabi_fadd+0x84>
10009a42:	1c39      	adds	r1, r7, #0
10009a44:	2220      	movs	r2, #32
10009a46:	1c3e      	adds	r6, r7, #0
10009a48:	40c1      	lsrs	r1, r0
10009a4a:	1a10      	subs	r0, r2, r0
10009a4c:	4086      	lsls	r6, r0
10009a4e:	1e77      	subs	r7, r6, #1
10009a50:	41be      	sbcs	r6, r7
10009a52:	430e      	orrs	r6, r1
10009a54:	1b9b      	subs	r3, r3, r6
10009a56:	015a      	lsls	r2, r3, #5
10009a58:	d433      	bmi.n	10009ac2 <__aeabi_fadd+0xf2>
10009a5a:	1c28      	adds	r0, r5, #0
10009a5c:	075a      	lsls	r2, r3, #29
10009a5e:	d1cf      	bne.n	10009a00 <__aeabi_fadd+0x30>
10009a60:	08db      	lsrs	r3, r3, #3
10009a62:	2cff      	cmp	r4, #255	; 0xff
10009a64:	d01e      	beq.n	10009aa4 <__aeabi_fadd+0xd4>
10009a66:	025b      	lsls	r3, r3, #9
10009a68:	0a5b      	lsrs	r3, r3, #9
10009a6a:	b2e4      	uxtb	r4, r4
10009a6c:	e7da      	b.n	10009a24 <__aeabi_fadd+0x54>
10009a6e:	1aa1      	subs	r1, r4, r2
10009a70:	2900      	cmp	r1, #0
10009a72:	dd57      	ble.n	10009b24 <__aeabi_fadd+0x154>
10009a74:	2a00      	cmp	r2, #0
10009a76:	d03a      	beq.n	10009aee <__aeabi_fadd+0x11e>
10009a78:	2cff      	cmp	r4, #255	; 0xff
10009a7a:	d0bf      	beq.n	100099fc <__aeabi_fadd+0x2c>
10009a7c:	2280      	movs	r2, #128	; 0x80
10009a7e:	04d2      	lsls	r2, r2, #19
10009a80:	4317      	orrs	r7, r2
10009a82:	2601      	movs	r6, #1
10009a84:	291b      	cmp	r1, #27
10009a86:	dd72      	ble.n	10009b6e <__aeabi_fadd+0x19e>
10009a88:	199b      	adds	r3, r3, r6
10009a8a:	015a      	lsls	r2, r3, #5
10009a8c:	d5e5      	bpl.n	10009a5a <__aeabi_fadd+0x8a>
10009a8e:	3401      	adds	r4, #1
10009a90:	2cff      	cmp	r4, #255	; 0xff
10009a92:	d100      	bne.n	10009a96 <__aeabi_fadd+0xc6>
10009a94:	e087      	b.n	10009ba6 <__aeabi_fadd+0x1d6>
10009a96:	2101      	movs	r1, #1
10009a98:	4a8a      	ldr	r2, [pc, #552]	; (10009cc4 <__aeabi_fadd+0x2f4>)
10009a9a:	4019      	ands	r1, r3
10009a9c:	4013      	ands	r3, r2
10009a9e:	085b      	lsrs	r3, r3, #1
10009aa0:	430b      	orrs	r3, r1
10009aa2:	e7ab      	b.n	100099fc <__aeabi_fadd+0x2c>
10009aa4:	2b00      	cmp	r3, #0
10009aa6:	d036      	beq.n	10009b16 <__aeabi_fadd+0x146>
10009aa8:	2280      	movs	r2, #128	; 0x80
10009aaa:	03d2      	lsls	r2, r2, #15
10009aac:	4313      	orrs	r3, r2
10009aae:	025b      	lsls	r3, r3, #9
10009ab0:	0a5b      	lsrs	r3, r3, #9
10009ab2:	24ff      	movs	r4, #255	; 0xff
10009ab4:	e7b6      	b.n	10009a24 <__aeabi_fadd+0x54>
10009ab6:	3801      	subs	r0, #1
10009ab8:	2800      	cmp	r0, #0
10009aba:	d13f      	bne.n	10009b3c <__aeabi_fadd+0x16c>
10009abc:	1bdb      	subs	r3, r3, r7
10009abe:	015a      	lsls	r2, r3, #5
10009ac0:	d5cb      	bpl.n	10009a5a <__aeabi_fadd+0x8a>
10009ac2:	019b      	lsls	r3, r3, #6
10009ac4:	099e      	lsrs	r6, r3, #6
10009ac6:	1c30      	adds	r0, r6, #0
10009ac8:	f7ff fecc 	bl	10009864 <__clzsi2>
10009acc:	3805      	subs	r0, #5
10009ace:	4086      	lsls	r6, r0
10009ad0:	4284      	cmp	r4, r0
10009ad2:	dc23      	bgt.n	10009b1c <__aeabi_fadd+0x14c>
10009ad4:	1b00      	subs	r0, r0, r4
10009ad6:	241f      	movs	r4, #31
10009ad8:	1c32      	adds	r2, r6, #0
10009ada:	1c43      	adds	r3, r0, #1
10009adc:	1a20      	subs	r0, r4, r0
10009ade:	40da      	lsrs	r2, r3
10009ae0:	4086      	lsls	r6, r0
10009ae2:	1c13      	adds	r3, r2, #0
10009ae4:	1e74      	subs	r4, r6, #1
10009ae6:	41a6      	sbcs	r6, r4
10009ae8:	2400      	movs	r4, #0
10009aea:	4333      	orrs	r3, r6
10009aec:	e786      	b.n	100099fc <__aeabi_fadd+0x2c>
10009aee:	2f00      	cmp	r7, #0
10009af0:	d100      	bne.n	10009af4 <__aeabi_fadd+0x124>
10009af2:	e783      	b.n	100099fc <__aeabi_fadd+0x2c>
10009af4:	3901      	subs	r1, #1
10009af6:	2900      	cmp	r1, #0
10009af8:	d150      	bne.n	10009b9c <__aeabi_fadd+0x1cc>
10009afa:	19db      	adds	r3, r3, r7
10009afc:	e7c5      	b.n	10009a8a <__aeabi_fadd+0xba>
10009afe:	2800      	cmp	r0, #0
10009b00:	d120      	bne.n	10009b44 <__aeabi_fadd+0x174>
10009b02:	1c62      	adds	r2, r4, #1
10009b04:	b2d2      	uxtb	r2, r2
10009b06:	2a01      	cmp	r2, #1
10009b08:	dd5e      	ble.n	10009bc8 <__aeabi_fadd+0x1f8>
10009b0a:	1bde      	subs	r6, r3, r7
10009b0c:	0172      	lsls	r2, r6, #5
10009b0e:	d528      	bpl.n	10009b62 <__aeabi_fadd+0x192>
10009b10:	1afe      	subs	r6, r7, r3
10009b12:	1c0d      	adds	r5, r1, #0
10009b14:	e7d7      	b.n	10009ac6 <__aeabi_fadd+0xf6>
10009b16:	24ff      	movs	r4, #255	; 0xff
10009b18:	2300      	movs	r3, #0
10009b1a:	e783      	b.n	10009a24 <__aeabi_fadd+0x54>
10009b1c:	4b69      	ldr	r3, [pc, #420]	; (10009cc4 <__aeabi_fadd+0x2f4>)
10009b1e:	1a24      	subs	r4, r4, r0
10009b20:	4033      	ands	r3, r6
10009b22:	e76b      	b.n	100099fc <__aeabi_fadd+0x2c>
10009b24:	2900      	cmp	r1, #0
10009b26:	d158      	bne.n	10009bda <__aeabi_fadd+0x20a>
10009b28:	1c62      	adds	r2, r4, #1
10009b2a:	b2d1      	uxtb	r1, r2
10009b2c:	2901      	cmp	r1, #1
10009b2e:	dd3c      	ble.n	10009baa <__aeabi_fadd+0x1da>
10009b30:	2aff      	cmp	r2, #255	; 0xff
10009b32:	d037      	beq.n	10009ba4 <__aeabi_fadd+0x1d4>
10009b34:	18fb      	adds	r3, r7, r3
10009b36:	085b      	lsrs	r3, r3, #1
10009b38:	1c14      	adds	r4, r2, #0
10009b3a:	e75f      	b.n	100099fc <__aeabi_fadd+0x2c>
10009b3c:	2cff      	cmp	r4, #255	; 0xff
10009b3e:	d000      	beq.n	10009b42 <__aeabi_fadd+0x172>
10009b40:	e77c      	b.n	10009a3c <__aeabi_fadd+0x6c>
10009b42:	e75b      	b.n	100099fc <__aeabi_fadd+0x2c>
10009b44:	2c00      	cmp	r4, #0
10009b46:	d01e      	beq.n	10009b86 <__aeabi_fadd+0x1b6>
10009b48:	2aff      	cmp	r2, #255	; 0xff
10009b4a:	d023      	beq.n	10009b94 <__aeabi_fadd+0x1c4>
10009b4c:	2480      	movs	r4, #128	; 0x80
10009b4e:	04e4      	lsls	r4, r4, #19
10009b50:	4240      	negs	r0, r0
10009b52:	4323      	orrs	r3, r4
10009b54:	281b      	cmp	r0, #27
10009b56:	dd5b      	ble.n	10009c10 <__aeabi_fadd+0x240>
10009b58:	2301      	movs	r3, #1
10009b5a:	1afb      	subs	r3, r7, r3
10009b5c:	1c14      	adds	r4, r2, #0
10009b5e:	1c0d      	adds	r5, r1, #0
10009b60:	e7ad      	b.n	10009abe <__aeabi_fadd+0xee>
10009b62:	2e00      	cmp	r6, #0
10009b64:	d1af      	bne.n	10009ac6 <__aeabi_fadd+0xf6>
10009b66:	2300      	movs	r3, #0
10009b68:	2000      	movs	r0, #0
10009b6a:	2400      	movs	r4, #0
10009b6c:	e778      	b.n	10009a60 <__aeabi_fadd+0x90>
10009b6e:	1c3a      	adds	r2, r7, #0
10009b70:	40ca      	lsrs	r2, r1
10009b72:	4694      	mov	ip, r2
10009b74:	2220      	movs	r2, #32
10009b76:	1c3e      	adds	r6, r7, #0
10009b78:	1a51      	subs	r1, r2, r1
10009b7a:	408e      	lsls	r6, r1
10009b7c:	4662      	mov	r2, ip
10009b7e:	1e77      	subs	r7, r6, #1
10009b80:	41be      	sbcs	r6, r7
10009b82:	4316      	orrs	r6, r2
10009b84:	e780      	b.n	10009a88 <__aeabi_fadd+0xb8>
10009b86:	2b00      	cmp	r3, #0
10009b88:	d03e      	beq.n	10009c08 <__aeabi_fadd+0x238>
10009b8a:	43c0      	mvns	r0, r0
10009b8c:	2800      	cmp	r0, #0
10009b8e:	d0e4      	beq.n	10009b5a <__aeabi_fadd+0x18a>
10009b90:	2aff      	cmp	r2, #255	; 0xff
10009b92:	d1df      	bne.n	10009b54 <__aeabi_fadd+0x184>
10009b94:	1c3b      	adds	r3, r7, #0
10009b96:	24ff      	movs	r4, #255	; 0xff
10009b98:	1c0d      	adds	r5, r1, #0
10009b9a:	e72f      	b.n	100099fc <__aeabi_fadd+0x2c>
10009b9c:	2cff      	cmp	r4, #255	; 0xff
10009b9e:	d000      	beq.n	10009ba2 <__aeabi_fadd+0x1d2>
10009ba0:	e76f      	b.n	10009a82 <__aeabi_fadd+0xb2>
10009ba2:	e72b      	b.n	100099fc <__aeabi_fadd+0x2c>
10009ba4:	24ff      	movs	r4, #255	; 0xff
10009ba6:	2300      	movs	r3, #0
10009ba8:	e75a      	b.n	10009a60 <__aeabi_fadd+0x90>
10009baa:	2c00      	cmp	r4, #0
10009bac:	d15a      	bne.n	10009c64 <__aeabi_fadd+0x294>
10009bae:	2b00      	cmp	r3, #0
10009bb0:	d07f      	beq.n	10009cb2 <__aeabi_fadd+0x2e2>
10009bb2:	2f00      	cmp	r7, #0
10009bb4:	d100      	bne.n	10009bb8 <__aeabi_fadd+0x1e8>
10009bb6:	e721      	b.n	100099fc <__aeabi_fadd+0x2c>
10009bb8:	19db      	adds	r3, r3, r7
10009bba:	015a      	lsls	r2, r3, #5
10009bbc:	d400      	bmi.n	10009bc0 <__aeabi_fadd+0x1f0>
10009bbe:	e74c      	b.n	10009a5a <__aeabi_fadd+0x8a>
10009bc0:	4a40      	ldr	r2, [pc, #256]	; (10009cc4 <__aeabi_fadd+0x2f4>)
10009bc2:	3401      	adds	r4, #1
10009bc4:	4013      	ands	r3, r2
10009bc6:	e719      	b.n	100099fc <__aeabi_fadd+0x2c>
10009bc8:	2c00      	cmp	r4, #0
10009bca:	d115      	bne.n	10009bf8 <__aeabi_fadd+0x228>
10009bcc:	2b00      	cmp	r3, #0
10009bce:	d12f      	bne.n	10009c30 <__aeabi_fadd+0x260>
10009bd0:	2f00      	cmp	r7, #0
10009bd2:	d05d      	beq.n	10009c90 <__aeabi_fadd+0x2c0>
10009bd4:	1c3b      	adds	r3, r7, #0
10009bd6:	1c0d      	adds	r5, r1, #0
10009bd8:	e710      	b.n	100099fc <__aeabi_fadd+0x2c>
10009bda:	2c00      	cmp	r4, #0
10009bdc:	d121      	bne.n	10009c22 <__aeabi_fadd+0x252>
10009bde:	2b00      	cmp	r3, #0
10009be0:	d053      	beq.n	10009c8a <__aeabi_fadd+0x2ba>
10009be2:	43c9      	mvns	r1, r1
10009be4:	2900      	cmp	r1, #0
10009be6:	d004      	beq.n	10009bf2 <__aeabi_fadd+0x222>
10009be8:	2aff      	cmp	r2, #255	; 0xff
10009bea:	d04b      	beq.n	10009c84 <__aeabi_fadd+0x2b4>
10009bec:	291b      	cmp	r1, #27
10009bee:	dd57      	ble.n	10009ca0 <__aeabi_fadd+0x2d0>
10009bf0:	2301      	movs	r3, #1
10009bf2:	19db      	adds	r3, r3, r7
10009bf4:	1c14      	adds	r4, r2, #0
10009bf6:	e748      	b.n	10009a8a <__aeabi_fadd+0xba>
10009bf8:	2b00      	cmp	r3, #0
10009bfa:	d122      	bne.n	10009c42 <__aeabi_fadd+0x272>
10009bfc:	2f00      	cmp	r7, #0
10009bfe:	d04a      	beq.n	10009c96 <__aeabi_fadd+0x2c6>
10009c00:	1c3b      	adds	r3, r7, #0
10009c02:	1c0d      	adds	r5, r1, #0
10009c04:	24ff      	movs	r4, #255	; 0xff
10009c06:	e6f9      	b.n	100099fc <__aeabi_fadd+0x2c>
10009c08:	1c3b      	adds	r3, r7, #0
10009c0a:	1c14      	adds	r4, r2, #0
10009c0c:	1c0d      	adds	r5, r1, #0
10009c0e:	e6f5      	b.n	100099fc <__aeabi_fadd+0x2c>
10009c10:	1c1d      	adds	r5, r3, #0
10009c12:	2420      	movs	r4, #32
10009c14:	40c5      	lsrs	r5, r0
10009c16:	1a20      	subs	r0, r4, r0
10009c18:	4083      	lsls	r3, r0
10009c1a:	1e58      	subs	r0, r3, #1
10009c1c:	4183      	sbcs	r3, r0
10009c1e:	432b      	orrs	r3, r5
10009c20:	e79b      	b.n	10009b5a <__aeabi_fadd+0x18a>
10009c22:	2aff      	cmp	r2, #255	; 0xff
10009c24:	d02e      	beq.n	10009c84 <__aeabi_fadd+0x2b4>
10009c26:	2480      	movs	r4, #128	; 0x80
10009c28:	04e4      	lsls	r4, r4, #19
10009c2a:	4249      	negs	r1, r1
10009c2c:	4323      	orrs	r3, r4
10009c2e:	e7dd      	b.n	10009bec <__aeabi_fadd+0x21c>
10009c30:	2f00      	cmp	r7, #0
10009c32:	d100      	bne.n	10009c36 <__aeabi_fadd+0x266>
10009c34:	e6e2      	b.n	100099fc <__aeabi_fadd+0x2c>
10009c36:	1bda      	subs	r2, r3, r7
10009c38:	0150      	lsls	r0, r2, #5
10009c3a:	d53c      	bpl.n	10009cb6 <__aeabi_fadd+0x2e6>
10009c3c:	1afb      	subs	r3, r7, r3
10009c3e:	1c0d      	adds	r5, r1, #0
10009c40:	e6dc      	b.n	100099fc <__aeabi_fadd+0x2c>
10009c42:	24ff      	movs	r4, #255	; 0xff
10009c44:	2f00      	cmp	r7, #0
10009c46:	d100      	bne.n	10009c4a <__aeabi_fadd+0x27a>
10009c48:	e6d8      	b.n	100099fc <__aeabi_fadd+0x2c>
10009c4a:	2280      	movs	r2, #128	; 0x80
10009c4c:	08db      	lsrs	r3, r3, #3
10009c4e:	03d2      	lsls	r2, r2, #15
10009c50:	4213      	tst	r3, r2
10009c52:	d004      	beq.n	10009c5e <__aeabi_fadd+0x28e>
10009c54:	08fe      	lsrs	r6, r7, #3
10009c56:	4216      	tst	r6, r2
10009c58:	d101      	bne.n	10009c5e <__aeabi_fadd+0x28e>
10009c5a:	1c33      	adds	r3, r6, #0
10009c5c:	1c0d      	adds	r5, r1, #0
10009c5e:	00db      	lsls	r3, r3, #3
10009c60:	24ff      	movs	r4, #255	; 0xff
10009c62:	e6cb      	b.n	100099fc <__aeabi_fadd+0x2c>
10009c64:	2b00      	cmp	r3, #0
10009c66:	d00d      	beq.n	10009c84 <__aeabi_fadd+0x2b4>
10009c68:	24ff      	movs	r4, #255	; 0xff
10009c6a:	2f00      	cmp	r7, #0
10009c6c:	d100      	bne.n	10009c70 <__aeabi_fadd+0x2a0>
10009c6e:	e6c5      	b.n	100099fc <__aeabi_fadd+0x2c>
10009c70:	2280      	movs	r2, #128	; 0x80
10009c72:	08db      	lsrs	r3, r3, #3
10009c74:	03d2      	lsls	r2, r2, #15
10009c76:	4213      	tst	r3, r2
10009c78:	d0f1      	beq.n	10009c5e <__aeabi_fadd+0x28e>
10009c7a:	08fe      	lsrs	r6, r7, #3
10009c7c:	4216      	tst	r6, r2
10009c7e:	d1ee      	bne.n	10009c5e <__aeabi_fadd+0x28e>
10009c80:	1c33      	adds	r3, r6, #0
10009c82:	e7ec      	b.n	10009c5e <__aeabi_fadd+0x28e>
10009c84:	1c3b      	adds	r3, r7, #0
10009c86:	24ff      	movs	r4, #255	; 0xff
10009c88:	e6b8      	b.n	100099fc <__aeabi_fadd+0x2c>
10009c8a:	1c3b      	adds	r3, r7, #0
10009c8c:	1c14      	adds	r4, r2, #0
10009c8e:	e6b5      	b.n	100099fc <__aeabi_fadd+0x2c>
10009c90:	1c23      	adds	r3, r4, #0
10009c92:	2000      	movs	r0, #0
10009c94:	e6e4      	b.n	10009a60 <__aeabi_fadd+0x90>
10009c96:	2380      	movs	r3, #128	; 0x80
10009c98:	2000      	movs	r0, #0
10009c9a:	049b      	lsls	r3, r3, #18
10009c9c:	24ff      	movs	r4, #255	; 0xff
10009c9e:	e6df      	b.n	10009a60 <__aeabi_fadd+0x90>
10009ca0:	1c1e      	adds	r6, r3, #0
10009ca2:	2420      	movs	r4, #32
10009ca4:	40ce      	lsrs	r6, r1
10009ca6:	1a61      	subs	r1, r4, r1
10009ca8:	408b      	lsls	r3, r1
10009caa:	1e59      	subs	r1, r3, #1
10009cac:	418b      	sbcs	r3, r1
10009cae:	4333      	orrs	r3, r6
10009cb0:	e79f      	b.n	10009bf2 <__aeabi_fadd+0x222>
10009cb2:	1c3b      	adds	r3, r7, #0
10009cb4:	e6a2      	b.n	100099fc <__aeabi_fadd+0x2c>
10009cb6:	1e13      	subs	r3, r2, #0
10009cb8:	d000      	beq.n	10009cbc <__aeabi_fadd+0x2ec>
10009cba:	e6ce      	b.n	10009a5a <__aeabi_fadd+0x8a>
10009cbc:	2300      	movs	r3, #0
10009cbe:	2000      	movs	r0, #0
10009cc0:	e6ce      	b.n	10009a60 <__aeabi_fadd+0x90>
10009cc2:	46c0      	nop			; (mov r8, r8)
10009cc4:	fbffffff 	.word	0xfbffffff

10009cc8 <__aeabi_fdiv>:
10009cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009cca:	4656      	mov	r6, sl
10009ccc:	464d      	mov	r5, r9
10009cce:	465f      	mov	r7, fp
10009cd0:	4644      	mov	r4, r8
10009cd2:	b4f0      	push	{r4, r5, r6, r7}
10009cd4:	0243      	lsls	r3, r0, #9
10009cd6:	0045      	lsls	r5, r0, #1
10009cd8:	0fc7      	lsrs	r7, r0, #31
10009cda:	b083      	sub	sp, #12
10009cdc:	468a      	mov	sl, r1
10009cde:	0a5c      	lsrs	r4, r3, #9
10009ce0:	0e2e      	lsrs	r6, r5, #24
10009ce2:	46b9      	mov	r9, r7
10009ce4:	d041      	beq.n	10009d6a <__aeabi_fdiv+0xa2>
10009ce6:	2eff      	cmp	r6, #255	; 0xff
10009ce8:	d026      	beq.n	10009d38 <__aeabi_fdiv+0x70>
10009cea:	2380      	movs	r3, #128	; 0x80
10009cec:	041b      	lsls	r3, r3, #16
10009cee:	4323      	orrs	r3, r4
10009cf0:	00dc      	lsls	r4, r3, #3
10009cf2:	2300      	movs	r3, #0
10009cf4:	4698      	mov	r8, r3
10009cf6:	469b      	mov	fp, r3
10009cf8:	3e7f      	subs	r6, #127	; 0x7f
10009cfa:	4653      	mov	r3, sl
10009cfc:	025b      	lsls	r3, r3, #9
10009cfe:	0a5d      	lsrs	r5, r3, #9
10009d00:	4653      	mov	r3, sl
10009d02:	005a      	lsls	r2, r3, #1
10009d04:	0fdb      	lsrs	r3, r3, #31
10009d06:	0e12      	lsrs	r2, r2, #24
10009d08:	469a      	mov	sl, r3
10009d0a:	d039      	beq.n	10009d80 <__aeabi_fdiv+0xb8>
10009d0c:	2aff      	cmp	r2, #255	; 0xff
10009d0e:	d033      	beq.n	10009d78 <__aeabi_fdiv+0xb0>
10009d10:	2380      	movs	r3, #128	; 0x80
10009d12:	041b      	lsls	r3, r3, #16
10009d14:	432b      	orrs	r3, r5
10009d16:	00dd      	lsls	r5, r3, #3
10009d18:	2300      	movs	r3, #0
10009d1a:	3a7f      	subs	r2, #127	; 0x7f
10009d1c:	4651      	mov	r1, sl
10009d1e:	1ab2      	subs	r2, r6, r2
10009d20:	4646      	mov	r6, r8
10009d22:	4079      	eors	r1, r7
10009d24:	1c08      	adds	r0, r1, #0
10009d26:	9201      	str	r2, [sp, #4]
10009d28:	431e      	orrs	r6, r3
10009d2a:	2e0f      	cmp	r6, #15
10009d2c:	d900      	bls.n	10009d30 <__aeabi_fdiv+0x68>
10009d2e:	e076      	b.n	10009e1e <__aeabi_fdiv+0x156>
10009d30:	4a7e      	ldr	r2, [pc, #504]	; (10009f2c <__aeabi_fdiv+0x264>)
10009d32:	00b6      	lsls	r6, r6, #2
10009d34:	5996      	ldr	r6, [r2, r6]
10009d36:	46b7      	mov	pc, r6
10009d38:	2c00      	cmp	r4, #0
10009d3a:	d130      	bne.n	10009d9e <__aeabi_fdiv+0xd6>
10009d3c:	2308      	movs	r3, #8
10009d3e:	4698      	mov	r8, r3
10009d40:	3b06      	subs	r3, #6
10009d42:	469b      	mov	fp, r3
10009d44:	e7d9      	b.n	10009cfa <__aeabi_fdiv+0x32>
10009d46:	2380      	movs	r3, #128	; 0x80
10009d48:	2100      	movs	r1, #0
10009d4a:	03db      	lsls	r3, r3, #15
10009d4c:	24ff      	movs	r4, #255	; 0xff
10009d4e:	025b      	lsls	r3, r3, #9
10009d50:	05e4      	lsls	r4, r4, #23
10009d52:	0a5b      	lsrs	r3, r3, #9
10009d54:	07c9      	lsls	r1, r1, #31
10009d56:	4323      	orrs	r3, r4
10009d58:	430b      	orrs	r3, r1
10009d5a:	1c18      	adds	r0, r3, #0
10009d5c:	b003      	add	sp, #12
10009d5e:	bc3c      	pop	{r2, r3, r4, r5}
10009d60:	4690      	mov	r8, r2
10009d62:	4699      	mov	r9, r3
10009d64:	46a2      	mov	sl, r4
10009d66:	46ab      	mov	fp, r5
10009d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009d6a:	2c00      	cmp	r4, #0
10009d6c:	d128      	bne.n	10009dc0 <__aeabi_fdiv+0xf8>
10009d6e:	2304      	movs	r3, #4
10009d70:	4698      	mov	r8, r3
10009d72:	3b03      	subs	r3, #3
10009d74:	469b      	mov	fp, r3
10009d76:	e7c0      	b.n	10009cfa <__aeabi_fdiv+0x32>
10009d78:	2d00      	cmp	r5, #0
10009d7a:	d11f      	bne.n	10009dbc <__aeabi_fdiv+0xf4>
10009d7c:	2302      	movs	r3, #2
10009d7e:	e002      	b.n	10009d86 <__aeabi_fdiv+0xbe>
10009d80:	2d00      	cmp	r5, #0
10009d82:	d111      	bne.n	10009da8 <__aeabi_fdiv+0xe0>
10009d84:	2301      	movs	r3, #1
10009d86:	1ab2      	subs	r2, r6, r2
10009d88:	4650      	mov	r0, sl
10009d8a:	4646      	mov	r6, r8
10009d8c:	4078      	eors	r0, r7
10009d8e:	9201      	str	r2, [sp, #4]
10009d90:	431e      	orrs	r6, r3
10009d92:	2e0f      	cmp	r6, #15
10009d94:	d827      	bhi.n	10009de6 <__aeabi_fdiv+0x11e>
10009d96:	4966      	ldr	r1, [pc, #408]	; (10009f30 <__aeabi_fdiv+0x268>)
10009d98:	00b6      	lsls	r6, r6, #2
10009d9a:	5989      	ldr	r1, [r1, r6]
10009d9c:	468f      	mov	pc, r1
10009d9e:	230c      	movs	r3, #12
10009da0:	4698      	mov	r8, r3
10009da2:	3b09      	subs	r3, #9
10009da4:	469b      	mov	fp, r3
10009da6:	e7a8      	b.n	10009cfa <__aeabi_fdiv+0x32>
10009da8:	1c28      	adds	r0, r5, #0
10009daa:	f7ff fd5b 	bl	10009864 <__clzsi2>
10009dae:	2276      	movs	r2, #118	; 0x76
10009db0:	1f43      	subs	r3, r0, #5
10009db2:	4252      	negs	r2, r2
10009db4:	409d      	lsls	r5, r3
10009db6:	1a12      	subs	r2, r2, r0
10009db8:	2300      	movs	r3, #0
10009dba:	e7af      	b.n	10009d1c <__aeabi_fdiv+0x54>
10009dbc:	2303      	movs	r3, #3
10009dbe:	e7ad      	b.n	10009d1c <__aeabi_fdiv+0x54>
10009dc0:	1c20      	adds	r0, r4, #0
10009dc2:	f7ff fd4f 	bl	10009864 <__clzsi2>
10009dc6:	1f43      	subs	r3, r0, #5
10009dc8:	409c      	lsls	r4, r3
10009dca:	2376      	movs	r3, #118	; 0x76
10009dcc:	425b      	negs	r3, r3
10009dce:	1a1e      	subs	r6, r3, r0
10009dd0:	2300      	movs	r3, #0
10009dd2:	4698      	mov	r8, r3
10009dd4:	469b      	mov	fp, r3
10009dd6:	e790      	b.n	10009cfa <__aeabi_fdiv+0x32>
10009dd8:	2500      	movs	r5, #0
10009dda:	46d1      	mov	r9, sl
10009ddc:	469b      	mov	fp, r3
10009dde:	465b      	mov	r3, fp
10009de0:	4648      	mov	r0, r9
10009de2:	2b02      	cmp	r3, #2
10009de4:	d16f      	bne.n	10009ec6 <__aeabi_fdiv+0x1fe>
10009de6:	2101      	movs	r1, #1
10009de8:	24ff      	movs	r4, #255	; 0xff
10009dea:	4001      	ands	r1, r0
10009dec:	2300      	movs	r3, #0
10009dee:	e7ae      	b.n	10009d4e <__aeabi_fdiv+0x86>
10009df0:	237e      	movs	r3, #126	; 0x7e
10009df2:	9a01      	ldr	r2, [sp, #4]
10009df4:	425b      	negs	r3, r3
10009df6:	1a9b      	subs	r3, r3, r2
10009df8:	2b1b      	cmp	r3, #27
10009dfa:	dd6d      	ble.n	10009ed8 <__aeabi_fdiv+0x210>
10009dfc:	2101      	movs	r1, #1
10009dfe:	464b      	mov	r3, r9
10009e00:	4019      	ands	r1, r3
10009e02:	2400      	movs	r4, #0
10009e04:	2300      	movs	r3, #0
10009e06:	e7a2      	b.n	10009d4e <__aeabi_fdiv+0x86>
10009e08:	2380      	movs	r3, #128	; 0x80
10009e0a:	03db      	lsls	r3, r3, #15
10009e0c:	421c      	tst	r4, r3
10009e0e:	d149      	bne.n	10009ea4 <__aeabi_fdiv+0x1dc>
10009e10:	2380      	movs	r3, #128	; 0x80
10009e12:	03db      	lsls	r3, r3, #15
10009e14:	4323      	orrs	r3, r4
10009e16:	025b      	lsls	r3, r3, #9
10009e18:	0a5b      	lsrs	r3, r3, #9
10009e1a:	1c39      	adds	r1, r7, #0
10009e1c:	e796      	b.n	10009d4c <__aeabi_fdiv+0x84>
10009e1e:	0163      	lsls	r3, r4, #5
10009e20:	016d      	lsls	r5, r5, #5
10009e22:	42ab      	cmp	r3, r5
10009e24:	d337      	bcc.n	10009e96 <__aeabi_fdiv+0x1ce>
10009e26:	4689      	mov	r9, r1
10009e28:	201a      	movs	r0, #26
10009e2a:	2101      	movs	r1, #1
10009e2c:	1b5b      	subs	r3, r3, r5
10009e2e:	2401      	movs	r4, #1
10009e30:	1c1e      	adds	r6, r3, #0
10009e32:	0049      	lsls	r1, r1, #1
10009e34:	005b      	lsls	r3, r3, #1
10009e36:	2e00      	cmp	r6, #0
10009e38:	db01      	blt.n	10009e3e <__aeabi_fdiv+0x176>
10009e3a:	42ab      	cmp	r3, r5
10009e3c:	d301      	bcc.n	10009e42 <__aeabi_fdiv+0x17a>
10009e3e:	1b5b      	subs	r3, r3, r5
10009e40:	4321      	orrs	r1, r4
10009e42:	3801      	subs	r0, #1
10009e44:	2800      	cmp	r0, #0
10009e46:	d1f3      	bne.n	10009e30 <__aeabi_fdiv+0x168>
10009e48:	1e58      	subs	r0, r3, #1
10009e4a:	4183      	sbcs	r3, r0
10009e4c:	430b      	orrs	r3, r1
10009e4e:	1c1d      	adds	r5, r3, #0
10009e50:	9c01      	ldr	r4, [sp, #4]
10009e52:	347f      	adds	r4, #127	; 0x7f
10009e54:	2c00      	cmp	r4, #0
10009e56:	ddcb      	ble.n	10009df0 <__aeabi_fdiv+0x128>
10009e58:	076b      	lsls	r3, r5, #29
10009e5a:	d004      	beq.n	10009e66 <__aeabi_fdiv+0x19e>
10009e5c:	230f      	movs	r3, #15
10009e5e:	402b      	ands	r3, r5
10009e60:	2b04      	cmp	r3, #4
10009e62:	d000      	beq.n	10009e66 <__aeabi_fdiv+0x19e>
10009e64:	3504      	adds	r5, #4
10009e66:	012b      	lsls	r3, r5, #4
10009e68:	d504      	bpl.n	10009e74 <__aeabi_fdiv+0x1ac>
10009e6a:	9a01      	ldr	r2, [sp, #4]
10009e6c:	4b31      	ldr	r3, [pc, #196]	; (10009f34 <__aeabi_fdiv+0x26c>)
10009e6e:	3280      	adds	r2, #128	; 0x80
10009e70:	1c14      	adds	r4, r2, #0
10009e72:	401d      	ands	r5, r3
10009e74:	2cfe      	cmp	r4, #254	; 0xfe
10009e76:	dd07      	ble.n	10009e88 <__aeabi_fdiv+0x1c0>
10009e78:	464b      	mov	r3, r9
10009e7a:	2101      	movs	r1, #1
10009e7c:	24ff      	movs	r4, #255	; 0xff
10009e7e:	4019      	ands	r1, r3
10009e80:	2300      	movs	r3, #0
10009e82:	e764      	b.n	10009d4e <__aeabi_fdiv+0x86>
10009e84:	1c25      	adds	r5, r4, #0
10009e86:	e7aa      	b.n	10009dde <__aeabi_fdiv+0x116>
10009e88:	2101      	movs	r1, #1
10009e8a:	464a      	mov	r2, r9
10009e8c:	01ab      	lsls	r3, r5, #6
10009e8e:	0a5b      	lsrs	r3, r3, #9
10009e90:	b2e4      	uxtb	r4, r4
10009e92:	4011      	ands	r1, r2
10009e94:	e75b      	b.n	10009d4e <__aeabi_fdiv+0x86>
10009e96:	9a01      	ldr	r2, [sp, #4]
10009e98:	4689      	mov	r9, r1
10009e9a:	3a01      	subs	r2, #1
10009e9c:	9201      	str	r2, [sp, #4]
10009e9e:	201b      	movs	r0, #27
10009ea0:	2100      	movs	r1, #0
10009ea2:	e7c4      	b.n	10009e2e <__aeabi_fdiv+0x166>
10009ea4:	421d      	tst	r5, r3
10009ea6:	d007      	beq.n	10009eb8 <__aeabi_fdiv+0x1f0>
10009ea8:	4323      	orrs	r3, r4
10009eaa:	025b      	lsls	r3, r3, #9
10009eac:	0a5b      	lsrs	r3, r3, #9
10009eae:	1c39      	adds	r1, r7, #0
10009eb0:	e74c      	b.n	10009d4c <__aeabi_fdiv+0x84>
10009eb2:	2500      	movs	r5, #0
10009eb4:	0263      	lsls	r3, r4, #9
10009eb6:	d5ab      	bpl.n	10009e10 <__aeabi_fdiv+0x148>
10009eb8:	2380      	movs	r3, #128	; 0x80
10009eba:	03db      	lsls	r3, r3, #15
10009ebc:	432b      	orrs	r3, r5
10009ebe:	025b      	lsls	r3, r3, #9
10009ec0:	0a5b      	lsrs	r3, r3, #9
10009ec2:	4651      	mov	r1, sl
10009ec4:	e742      	b.n	10009d4c <__aeabi_fdiv+0x84>
10009ec6:	2b03      	cmp	r3, #3
10009ec8:	d025      	beq.n	10009f16 <__aeabi_fdiv+0x24e>
10009eca:	2b01      	cmp	r3, #1
10009ecc:	d1c0      	bne.n	10009e50 <__aeabi_fdiv+0x188>
10009ece:	2101      	movs	r1, #1
10009ed0:	2400      	movs	r4, #0
10009ed2:	4001      	ands	r1, r0
10009ed4:	2300      	movs	r3, #0
10009ed6:	e73a      	b.n	10009d4e <__aeabi_fdiv+0x86>
10009ed8:	1c29      	adds	r1, r5, #0
10009eda:	40d9      	lsrs	r1, r3
10009edc:	1c2b      	adds	r3, r5, #0
10009ede:	9a01      	ldr	r2, [sp, #4]
10009ee0:	329e      	adds	r2, #158	; 0x9e
10009ee2:	4093      	lsls	r3, r2
10009ee4:	1e5d      	subs	r5, r3, #1
10009ee6:	41ab      	sbcs	r3, r5
10009ee8:	430b      	orrs	r3, r1
10009eea:	075a      	lsls	r2, r3, #29
10009eec:	d004      	beq.n	10009ef8 <__aeabi_fdiv+0x230>
10009eee:	220f      	movs	r2, #15
10009ef0:	401a      	ands	r2, r3
10009ef2:	2a04      	cmp	r2, #4
10009ef4:	d000      	beq.n	10009ef8 <__aeabi_fdiv+0x230>
10009ef6:	3304      	adds	r3, #4
10009ef8:	015a      	lsls	r2, r3, #5
10009efa:	d505      	bpl.n	10009f08 <__aeabi_fdiv+0x240>
10009efc:	464b      	mov	r3, r9
10009efe:	2101      	movs	r1, #1
10009f00:	2401      	movs	r4, #1
10009f02:	4019      	ands	r1, r3
10009f04:	2300      	movs	r3, #0
10009f06:	e722      	b.n	10009d4e <__aeabi_fdiv+0x86>
10009f08:	2101      	movs	r1, #1
10009f0a:	464a      	mov	r2, r9
10009f0c:	019b      	lsls	r3, r3, #6
10009f0e:	0a5b      	lsrs	r3, r3, #9
10009f10:	4011      	ands	r1, r2
10009f12:	2400      	movs	r4, #0
10009f14:	e71b      	b.n	10009d4e <__aeabi_fdiv+0x86>
10009f16:	2380      	movs	r3, #128	; 0x80
10009f18:	2101      	movs	r1, #1
10009f1a:	464a      	mov	r2, r9
10009f1c:	03db      	lsls	r3, r3, #15
10009f1e:	432b      	orrs	r3, r5
10009f20:	025b      	lsls	r3, r3, #9
10009f22:	400a      	ands	r2, r1
10009f24:	0a5b      	lsrs	r3, r3, #9
10009f26:	1c11      	adds	r1, r2, #0
10009f28:	e710      	b.n	10009d4c <__aeabi_fdiv+0x84>
10009f2a:	46c0      	nop			; (mov r8, r8)
10009f2c:	1000ce20 	.word	0x1000ce20
10009f30:	1000ce60 	.word	0x1000ce60
10009f34:	f7ffffff 	.word	0xf7ffffff

10009f38 <__eqsf2>:
10009f38:	0243      	lsls	r3, r0, #9
10009f3a:	b570      	push	{r4, r5, r6, lr}
10009f3c:	0042      	lsls	r2, r0, #1
10009f3e:	004c      	lsls	r4, r1, #1
10009f40:	0a5d      	lsrs	r5, r3, #9
10009f42:	0fc3      	lsrs	r3, r0, #31
10009f44:	0248      	lsls	r0, r1, #9
10009f46:	0e12      	lsrs	r2, r2, #24
10009f48:	0a46      	lsrs	r6, r0, #9
10009f4a:	0e24      	lsrs	r4, r4, #24
10009f4c:	0fc9      	lsrs	r1, r1, #31
10009f4e:	2aff      	cmp	r2, #255	; 0xff
10009f50:	d005      	beq.n	10009f5e <__eqsf2+0x26>
10009f52:	2cff      	cmp	r4, #255	; 0xff
10009f54:	d008      	beq.n	10009f68 <__eqsf2+0x30>
10009f56:	2001      	movs	r0, #1
10009f58:	42a2      	cmp	r2, r4
10009f5a:	d00b      	beq.n	10009f74 <__eqsf2+0x3c>
10009f5c:	bd70      	pop	{r4, r5, r6, pc}
10009f5e:	2001      	movs	r0, #1
10009f60:	2d00      	cmp	r5, #0
10009f62:	d1fb      	bne.n	10009f5c <__eqsf2+0x24>
10009f64:	2cff      	cmp	r4, #255	; 0xff
10009f66:	d1f6      	bne.n	10009f56 <__eqsf2+0x1e>
10009f68:	2001      	movs	r0, #1
10009f6a:	2e00      	cmp	r6, #0
10009f6c:	d1f6      	bne.n	10009f5c <__eqsf2+0x24>
10009f6e:	2001      	movs	r0, #1
10009f70:	42a2      	cmp	r2, r4
10009f72:	d1f3      	bne.n	10009f5c <__eqsf2+0x24>
10009f74:	42b5      	cmp	r5, r6
10009f76:	d1f1      	bne.n	10009f5c <__eqsf2+0x24>
10009f78:	428b      	cmp	r3, r1
10009f7a:	d005      	beq.n	10009f88 <__eqsf2+0x50>
10009f7c:	2a00      	cmp	r2, #0
10009f7e:	d1ed      	bne.n	10009f5c <__eqsf2+0x24>
10009f80:	1c28      	adds	r0, r5, #0
10009f82:	1e43      	subs	r3, r0, #1
10009f84:	4198      	sbcs	r0, r3
10009f86:	e7e9      	b.n	10009f5c <__eqsf2+0x24>
10009f88:	2000      	movs	r0, #0
10009f8a:	e7e7      	b.n	10009f5c <__eqsf2+0x24>

10009f8c <__gesf2>:
10009f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f8e:	0243      	lsls	r3, r0, #9
10009f90:	024d      	lsls	r5, r1, #9
10009f92:	004a      	lsls	r2, r1, #1
10009f94:	0044      	lsls	r4, r0, #1
10009f96:	0a5e      	lsrs	r6, r3, #9
10009f98:	0e24      	lsrs	r4, r4, #24
10009f9a:	0fc3      	lsrs	r3, r0, #31
10009f9c:	0a6d      	lsrs	r5, r5, #9
10009f9e:	0e12      	lsrs	r2, r2, #24
10009fa0:	0fc9      	lsrs	r1, r1, #31
10009fa2:	2cff      	cmp	r4, #255	; 0xff
10009fa4:	d00d      	beq.n	10009fc2 <__gesf2+0x36>
10009fa6:	2aff      	cmp	r2, #255	; 0xff
10009fa8:	d031      	beq.n	1000a00e <__gesf2+0x82>
10009faa:	2c00      	cmp	r4, #0
10009fac:	d10d      	bne.n	10009fca <__gesf2+0x3e>
10009fae:	4277      	negs	r7, r6
10009fb0:	4177      	adcs	r7, r6
10009fb2:	2a00      	cmp	r2, #0
10009fb4:	d123      	bne.n	10009ffe <__gesf2+0x72>
10009fb6:	2d00      	cmp	r5, #0
10009fb8:	d121      	bne.n	10009ffe <__gesf2+0x72>
10009fba:	2000      	movs	r0, #0
10009fbc:	2f00      	cmp	r7, #0
10009fbe:	d10b      	bne.n	10009fd8 <__gesf2+0x4c>
10009fc0:	e007      	b.n	10009fd2 <__gesf2+0x46>
10009fc2:	2e00      	cmp	r6, #0
10009fc4:	d128      	bne.n	1000a018 <__gesf2+0x8c>
10009fc6:	2aff      	cmp	r2, #255	; 0xff
10009fc8:	d021      	beq.n	1000a00e <__gesf2+0x82>
10009fca:	2a00      	cmp	r2, #0
10009fcc:	d005      	beq.n	10009fda <__gesf2+0x4e>
10009fce:	428b      	cmp	r3, r1
10009fd0:	d007      	beq.n	10009fe2 <__gesf2+0x56>
10009fd2:	4258      	negs	r0, r3
10009fd4:	2301      	movs	r3, #1
10009fd6:	4318      	orrs	r0, r3
10009fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009fda:	2d00      	cmp	r5, #0
10009fdc:	d0f9      	beq.n	10009fd2 <__gesf2+0x46>
10009fde:	428b      	cmp	r3, r1
10009fe0:	d1f7      	bne.n	10009fd2 <__gesf2+0x46>
10009fe2:	4294      	cmp	r4, r2
10009fe4:	dcf5      	bgt.n	10009fd2 <__gesf2+0x46>
10009fe6:	db04      	blt.n	10009ff2 <__gesf2+0x66>
10009fe8:	42ae      	cmp	r6, r5
10009fea:	d8f2      	bhi.n	10009fd2 <__gesf2+0x46>
10009fec:	2000      	movs	r0, #0
10009fee:	42ae      	cmp	r6, r5
10009ff0:	d2f2      	bcs.n	10009fd8 <__gesf2+0x4c>
10009ff2:	4258      	negs	r0, r3
10009ff4:	4143      	adcs	r3, r0
10009ff6:	2001      	movs	r0, #1
10009ff8:	425b      	negs	r3, r3
10009ffa:	4318      	orrs	r0, r3
10009ffc:	e7ec      	b.n	10009fd8 <__gesf2+0x4c>
10009ffe:	2f00      	cmp	r7, #0
1000a000:	d0e5      	beq.n	10009fce <__gesf2+0x42>
1000a002:	4248      	negs	r0, r1
1000a004:	4141      	adcs	r1, r0
1000a006:	2001      	movs	r0, #1
1000a008:	4249      	negs	r1, r1
1000a00a:	4308      	orrs	r0, r1
1000a00c:	e7e4      	b.n	10009fd8 <__gesf2+0x4c>
1000a00e:	2d00      	cmp	r5, #0
1000a010:	d102      	bne.n	1000a018 <__gesf2+0x8c>
1000a012:	2c00      	cmp	r4, #0
1000a014:	d0cb      	beq.n	10009fae <__gesf2+0x22>
1000a016:	e7da      	b.n	10009fce <__gesf2+0x42>
1000a018:	2002      	movs	r0, #2
1000a01a:	4240      	negs	r0, r0
1000a01c:	e7dc      	b.n	10009fd8 <__gesf2+0x4c>
1000a01e:	46c0      	nop			; (mov r8, r8)

1000a020 <__lesf2>:
1000a020:	0243      	lsls	r3, r0, #9
1000a022:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a024:	0042      	lsls	r2, r0, #1
1000a026:	004c      	lsls	r4, r1, #1
1000a028:	0a5e      	lsrs	r6, r3, #9
1000a02a:	0fc3      	lsrs	r3, r0, #31
1000a02c:	0248      	lsls	r0, r1, #9
1000a02e:	0e12      	lsrs	r2, r2, #24
1000a030:	0a45      	lsrs	r5, r0, #9
1000a032:	0e24      	lsrs	r4, r4, #24
1000a034:	0fc9      	lsrs	r1, r1, #31
1000a036:	2aff      	cmp	r2, #255	; 0xff
1000a038:	d00f      	beq.n	1000a05a <__lesf2+0x3a>
1000a03a:	2cff      	cmp	r4, #255	; 0xff
1000a03c:	d01a      	beq.n	1000a074 <__lesf2+0x54>
1000a03e:	2a00      	cmp	r2, #0
1000a040:	d110      	bne.n	1000a064 <__lesf2+0x44>
1000a042:	4277      	negs	r7, r6
1000a044:	4177      	adcs	r7, r6
1000a046:	2c00      	cmp	r4, #0
1000a048:	d029      	beq.n	1000a09e <__lesf2+0x7e>
1000a04a:	2f00      	cmp	r7, #0
1000a04c:	d017      	beq.n	1000a07e <__lesf2+0x5e>
1000a04e:	4248      	negs	r0, r1
1000a050:	4141      	adcs	r1, r0
1000a052:	2001      	movs	r0, #1
1000a054:	4249      	negs	r1, r1
1000a056:	4308      	orrs	r0, r1
1000a058:	e00b      	b.n	1000a072 <__lesf2+0x52>
1000a05a:	2002      	movs	r0, #2
1000a05c:	2e00      	cmp	r6, #0
1000a05e:	d108      	bne.n	1000a072 <__lesf2+0x52>
1000a060:	2cff      	cmp	r4, #255	; 0xff
1000a062:	d007      	beq.n	1000a074 <__lesf2+0x54>
1000a064:	2c00      	cmp	r4, #0
1000a066:	d10a      	bne.n	1000a07e <__lesf2+0x5e>
1000a068:	2d00      	cmp	r5, #0
1000a06a:	d108      	bne.n	1000a07e <__lesf2+0x5e>
1000a06c:	4258      	negs	r0, r3
1000a06e:	2301      	movs	r3, #1
1000a070:	4318      	orrs	r0, r3
1000a072:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a074:	2002      	movs	r0, #2
1000a076:	2d00      	cmp	r5, #0
1000a078:	d1fb      	bne.n	1000a072 <__lesf2+0x52>
1000a07a:	2a00      	cmp	r2, #0
1000a07c:	d0e1      	beq.n	1000a042 <__lesf2+0x22>
1000a07e:	428b      	cmp	r3, r1
1000a080:	d1f4      	bne.n	1000a06c <__lesf2+0x4c>
1000a082:	42a2      	cmp	r2, r4
1000a084:	dcf2      	bgt.n	1000a06c <__lesf2+0x4c>
1000a086:	db04      	blt.n	1000a092 <__lesf2+0x72>
1000a088:	42ae      	cmp	r6, r5
1000a08a:	d8ef      	bhi.n	1000a06c <__lesf2+0x4c>
1000a08c:	2000      	movs	r0, #0
1000a08e:	42ae      	cmp	r6, r5
1000a090:	d2ef      	bcs.n	1000a072 <__lesf2+0x52>
1000a092:	4258      	negs	r0, r3
1000a094:	4143      	adcs	r3, r0
1000a096:	2001      	movs	r0, #1
1000a098:	425b      	negs	r3, r3
1000a09a:	4318      	orrs	r0, r3
1000a09c:	e7e9      	b.n	1000a072 <__lesf2+0x52>
1000a09e:	2d00      	cmp	r5, #0
1000a0a0:	d1d3      	bne.n	1000a04a <__lesf2+0x2a>
1000a0a2:	2000      	movs	r0, #0
1000a0a4:	2f00      	cmp	r7, #0
1000a0a6:	d1e4      	bne.n	1000a072 <__lesf2+0x52>
1000a0a8:	e7e0      	b.n	1000a06c <__lesf2+0x4c>
1000a0aa:	46c0      	nop			; (mov r8, r8)

1000a0ac <__aeabi_fmul>:
1000a0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a0ae:	465f      	mov	r7, fp
1000a0b0:	4656      	mov	r6, sl
1000a0b2:	464d      	mov	r5, r9
1000a0b4:	4644      	mov	r4, r8
1000a0b6:	b4f0      	push	{r4, r5, r6, r7}
1000a0b8:	0245      	lsls	r5, r0, #9
1000a0ba:	0046      	lsls	r6, r0, #1
1000a0bc:	0fc4      	lsrs	r4, r0, #31
1000a0be:	b083      	sub	sp, #12
1000a0c0:	1c0f      	adds	r7, r1, #0
1000a0c2:	0a6d      	lsrs	r5, r5, #9
1000a0c4:	0e36      	lsrs	r6, r6, #24
1000a0c6:	46a3      	mov	fp, r4
1000a0c8:	d045      	beq.n	1000a156 <__aeabi_fmul+0xaa>
1000a0ca:	2eff      	cmp	r6, #255	; 0xff
1000a0cc:	d025      	beq.n	1000a11a <__aeabi_fmul+0x6e>
1000a0ce:	2380      	movs	r3, #128	; 0x80
1000a0d0:	041b      	lsls	r3, r3, #16
1000a0d2:	431d      	orrs	r5, r3
1000a0d4:	2300      	movs	r3, #0
1000a0d6:	469a      	mov	sl, r3
1000a0d8:	00ed      	lsls	r5, r5, #3
1000a0da:	3e7f      	subs	r6, #127	; 0x7f
1000a0dc:	9301      	str	r3, [sp, #4]
1000a0de:	027b      	lsls	r3, r7, #9
1000a0e0:	0a5b      	lsrs	r3, r3, #9
1000a0e2:	4698      	mov	r8, r3
1000a0e4:	0078      	lsls	r0, r7, #1
1000a0e6:	0ffb      	lsrs	r3, r7, #31
1000a0e8:	0e00      	lsrs	r0, r0, #24
1000a0ea:	4699      	mov	r9, r3
1000a0ec:	d040      	beq.n	1000a170 <__aeabi_fmul+0xc4>
1000a0ee:	28ff      	cmp	r0, #255	; 0xff
1000a0f0:	d038      	beq.n	1000a164 <__aeabi_fmul+0xb8>
1000a0f2:	2380      	movs	r3, #128	; 0x80
1000a0f4:	4642      	mov	r2, r8
1000a0f6:	041b      	lsls	r3, r3, #16
1000a0f8:	4313      	orrs	r3, r2
1000a0fa:	00db      	lsls	r3, r3, #3
1000a0fc:	4698      	mov	r8, r3
1000a0fe:	2300      	movs	r3, #0
1000a100:	387f      	subs	r0, #127	; 0x7f
1000a102:	464a      	mov	r2, r9
1000a104:	9f01      	ldr	r7, [sp, #4]
1000a106:	1830      	adds	r0, r6, r0
1000a108:	4062      	eors	r2, r4
1000a10a:	1c41      	adds	r1, r0, #1
1000a10c:	431f      	orrs	r7, r3
1000a10e:	2f0f      	cmp	r7, #15
1000a110:	d869      	bhi.n	1000a1e6 <__aeabi_fmul+0x13a>
1000a112:	4e7d      	ldr	r6, [pc, #500]	; (1000a308 <__aeabi_fmul+0x25c>)
1000a114:	00bf      	lsls	r7, r7, #2
1000a116:	59f6      	ldr	r6, [r6, r7]
1000a118:	46b7      	mov	pc, r6
1000a11a:	2d00      	cmp	r5, #0
1000a11c:	d145      	bne.n	1000a1aa <__aeabi_fmul+0xfe>
1000a11e:	2308      	movs	r3, #8
1000a120:	9301      	str	r3, [sp, #4]
1000a122:	3b06      	subs	r3, #6
1000a124:	469a      	mov	sl, r3
1000a126:	e7da      	b.n	1000a0de <__aeabi_fmul+0x32>
1000a128:	4693      	mov	fp, r2
1000a12a:	4653      	mov	r3, sl
1000a12c:	2b02      	cmp	r3, #2
1000a12e:	d12f      	bne.n	1000a190 <__aeabi_fmul+0xe4>
1000a130:	465b      	mov	r3, fp
1000a132:	2401      	movs	r4, #1
1000a134:	2500      	movs	r5, #0
1000a136:	401c      	ands	r4, r3
1000a138:	23ff      	movs	r3, #255	; 0xff
1000a13a:	026d      	lsls	r5, r5, #9
1000a13c:	05db      	lsls	r3, r3, #23
1000a13e:	0a6d      	lsrs	r5, r5, #9
1000a140:	07e4      	lsls	r4, r4, #31
1000a142:	431d      	orrs	r5, r3
1000a144:	4325      	orrs	r5, r4
1000a146:	1c28      	adds	r0, r5, #0
1000a148:	b003      	add	sp, #12
1000a14a:	bc3c      	pop	{r2, r3, r4, r5}
1000a14c:	4690      	mov	r8, r2
1000a14e:	4699      	mov	r9, r3
1000a150:	46a2      	mov	sl, r4
1000a152:	46ab      	mov	fp, r5
1000a154:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a156:	2d00      	cmp	r5, #0
1000a158:	d12c      	bne.n	1000a1b4 <__aeabi_fmul+0x108>
1000a15a:	2304      	movs	r3, #4
1000a15c:	9301      	str	r3, [sp, #4]
1000a15e:	3b03      	subs	r3, #3
1000a160:	469a      	mov	sl, r3
1000a162:	e7bc      	b.n	1000a0de <__aeabi_fmul+0x32>
1000a164:	4643      	mov	r3, r8
1000a166:	425a      	negs	r2, r3
1000a168:	4153      	adcs	r3, r2
1000a16a:	2203      	movs	r2, #3
1000a16c:	1ad3      	subs	r3, r2, r3
1000a16e:	e7c8      	b.n	1000a102 <__aeabi_fmul+0x56>
1000a170:	4642      	mov	r2, r8
1000a172:	2301      	movs	r3, #1
1000a174:	2a00      	cmp	r2, #0
1000a176:	d0c4      	beq.n	1000a102 <__aeabi_fmul+0x56>
1000a178:	4640      	mov	r0, r8
1000a17a:	f7ff fb73 	bl	10009864 <__clzsi2>
1000a17e:	4642      	mov	r2, r8
1000a180:	1f43      	subs	r3, r0, #5
1000a182:	409a      	lsls	r2, r3
1000a184:	2376      	movs	r3, #118	; 0x76
1000a186:	425b      	negs	r3, r3
1000a188:	1a18      	subs	r0, r3, r0
1000a18a:	4690      	mov	r8, r2
1000a18c:	2300      	movs	r3, #0
1000a18e:	e7b8      	b.n	1000a102 <__aeabi_fmul+0x56>
1000a190:	2b03      	cmp	r3, #3
1000a192:	d100      	bne.n	1000a196 <__aeabi_fmul+0xea>
1000a194:	e0ad      	b.n	1000a2f2 <__aeabi_fmul+0x246>
1000a196:	2b01      	cmp	r3, #1
1000a198:	d000      	beq.n	1000a19c <__aeabi_fmul+0xf0>
1000a19a:	e08c      	b.n	1000a2b6 <__aeabi_fmul+0x20a>
1000a19c:	465b      	mov	r3, fp
1000a19e:	4654      	mov	r4, sl
1000a1a0:	401c      	ands	r4, r3
1000a1a2:	b2e4      	uxtb	r4, r4
1000a1a4:	2300      	movs	r3, #0
1000a1a6:	2500      	movs	r5, #0
1000a1a8:	e7c7      	b.n	1000a13a <__aeabi_fmul+0x8e>
1000a1aa:	230c      	movs	r3, #12
1000a1ac:	9301      	str	r3, [sp, #4]
1000a1ae:	3b09      	subs	r3, #9
1000a1b0:	469a      	mov	sl, r3
1000a1b2:	e794      	b.n	1000a0de <__aeabi_fmul+0x32>
1000a1b4:	1c28      	adds	r0, r5, #0
1000a1b6:	f7ff fb55 	bl	10009864 <__clzsi2>
1000a1ba:	2676      	movs	r6, #118	; 0x76
1000a1bc:	1f43      	subs	r3, r0, #5
1000a1be:	409d      	lsls	r5, r3
1000a1c0:	2300      	movs	r3, #0
1000a1c2:	4276      	negs	r6, r6
1000a1c4:	1a36      	subs	r6, r6, r0
1000a1c6:	9301      	str	r3, [sp, #4]
1000a1c8:	469a      	mov	sl, r3
1000a1ca:	e788      	b.n	1000a0de <__aeabi_fmul+0x32>
1000a1cc:	2580      	movs	r5, #128	; 0x80
1000a1ce:	2400      	movs	r4, #0
1000a1d0:	03ed      	lsls	r5, r5, #15
1000a1d2:	23ff      	movs	r3, #255	; 0xff
1000a1d4:	e7b1      	b.n	1000a13a <__aeabi_fmul+0x8e>
1000a1d6:	4645      	mov	r5, r8
1000a1d8:	46cb      	mov	fp, r9
1000a1da:	469a      	mov	sl, r3
1000a1dc:	e7a5      	b.n	1000a12a <__aeabi_fmul+0x7e>
1000a1de:	4645      	mov	r5, r8
1000a1e0:	4693      	mov	fp, r2
1000a1e2:	469a      	mov	sl, r3
1000a1e4:	e7a1      	b.n	1000a12a <__aeabi_fmul+0x7e>
1000a1e6:	4643      	mov	r3, r8
1000a1e8:	042c      	lsls	r4, r5, #16
1000a1ea:	0c1b      	lsrs	r3, r3, #16
1000a1ec:	469c      	mov	ip, r3
1000a1ee:	0c23      	lsrs	r3, r4, #16
1000a1f0:	4644      	mov	r4, r8
1000a1f2:	0426      	lsls	r6, r4, #16
1000a1f4:	1c1c      	adds	r4, r3, #0
1000a1f6:	0c36      	lsrs	r6, r6, #16
1000a1f8:	0c2f      	lsrs	r7, r5, #16
1000a1fa:	4374      	muls	r4, r6
1000a1fc:	1c35      	adds	r5, r6, #0
1000a1fe:	4666      	mov	r6, ip
1000a200:	437d      	muls	r5, r7
1000a202:	4373      	muls	r3, r6
1000a204:	4377      	muls	r7, r6
1000a206:	18eb      	adds	r3, r5, r3
1000a208:	0c26      	lsrs	r6, r4, #16
1000a20a:	199e      	adds	r6, r3, r6
1000a20c:	42b5      	cmp	r5, r6
1000a20e:	d903      	bls.n	1000a218 <__aeabi_fmul+0x16c>
1000a210:	2380      	movs	r3, #128	; 0x80
1000a212:	025b      	lsls	r3, r3, #9
1000a214:	469c      	mov	ip, r3
1000a216:	4467      	add	r7, ip
1000a218:	0424      	lsls	r4, r4, #16
1000a21a:	0433      	lsls	r3, r6, #16
1000a21c:	0c24      	lsrs	r4, r4, #16
1000a21e:	191b      	adds	r3, r3, r4
1000a220:	019d      	lsls	r5, r3, #6
1000a222:	1e6c      	subs	r4, r5, #1
1000a224:	41a5      	sbcs	r5, r4
1000a226:	0e9b      	lsrs	r3, r3, #26
1000a228:	0c36      	lsrs	r6, r6, #16
1000a22a:	432b      	orrs	r3, r5
1000a22c:	19bd      	adds	r5, r7, r6
1000a22e:	01ad      	lsls	r5, r5, #6
1000a230:	431d      	orrs	r5, r3
1000a232:	012b      	lsls	r3, r5, #4
1000a234:	d504      	bpl.n	1000a240 <__aeabi_fmul+0x194>
1000a236:	2301      	movs	r3, #1
1000a238:	0868      	lsrs	r0, r5, #1
1000a23a:	401d      	ands	r5, r3
1000a23c:	4305      	orrs	r5, r0
1000a23e:	1c08      	adds	r0, r1, #0
1000a240:	1c03      	adds	r3, r0, #0
1000a242:	337f      	adds	r3, #127	; 0x7f
1000a244:	2b00      	cmp	r3, #0
1000a246:	dd2c      	ble.n	1000a2a2 <__aeabi_fmul+0x1f6>
1000a248:	0769      	lsls	r1, r5, #29
1000a24a:	d004      	beq.n	1000a256 <__aeabi_fmul+0x1aa>
1000a24c:	210f      	movs	r1, #15
1000a24e:	4029      	ands	r1, r5
1000a250:	2904      	cmp	r1, #4
1000a252:	d000      	beq.n	1000a256 <__aeabi_fmul+0x1aa>
1000a254:	3504      	adds	r5, #4
1000a256:	0129      	lsls	r1, r5, #4
1000a258:	d503      	bpl.n	1000a262 <__aeabi_fmul+0x1b6>
1000a25a:	4b2c      	ldr	r3, [pc, #176]	; (1000a30c <__aeabi_fmul+0x260>)
1000a25c:	401d      	ands	r5, r3
1000a25e:	1c03      	adds	r3, r0, #0
1000a260:	3380      	adds	r3, #128	; 0x80
1000a262:	2bfe      	cmp	r3, #254	; 0xfe
1000a264:	dd17      	ble.n	1000a296 <__aeabi_fmul+0x1ea>
1000a266:	2401      	movs	r4, #1
1000a268:	23ff      	movs	r3, #255	; 0xff
1000a26a:	4014      	ands	r4, r2
1000a26c:	2500      	movs	r5, #0
1000a26e:	e764      	b.n	1000a13a <__aeabi_fmul+0x8e>
1000a270:	2080      	movs	r0, #128	; 0x80
1000a272:	03c0      	lsls	r0, r0, #15
1000a274:	4205      	tst	r5, r0
1000a276:	d009      	beq.n	1000a28c <__aeabi_fmul+0x1e0>
1000a278:	4643      	mov	r3, r8
1000a27a:	4203      	tst	r3, r0
1000a27c:	d106      	bne.n	1000a28c <__aeabi_fmul+0x1e0>
1000a27e:	4645      	mov	r5, r8
1000a280:	4305      	orrs	r5, r0
1000a282:	026d      	lsls	r5, r5, #9
1000a284:	0a6d      	lsrs	r5, r5, #9
1000a286:	464c      	mov	r4, r9
1000a288:	23ff      	movs	r3, #255	; 0xff
1000a28a:	e756      	b.n	1000a13a <__aeabi_fmul+0x8e>
1000a28c:	4305      	orrs	r5, r0
1000a28e:	026d      	lsls	r5, r5, #9
1000a290:	0a6d      	lsrs	r5, r5, #9
1000a292:	23ff      	movs	r3, #255	; 0xff
1000a294:	e751      	b.n	1000a13a <__aeabi_fmul+0x8e>
1000a296:	2401      	movs	r4, #1
1000a298:	01ad      	lsls	r5, r5, #6
1000a29a:	0a6d      	lsrs	r5, r5, #9
1000a29c:	b2db      	uxtb	r3, r3
1000a29e:	4014      	ands	r4, r2
1000a2a0:	e74b      	b.n	1000a13a <__aeabi_fmul+0x8e>
1000a2a2:	237e      	movs	r3, #126	; 0x7e
1000a2a4:	425b      	negs	r3, r3
1000a2a6:	1a1b      	subs	r3, r3, r0
1000a2a8:	2b1b      	cmp	r3, #27
1000a2aa:	dd07      	ble.n	1000a2bc <__aeabi_fmul+0x210>
1000a2ac:	2401      	movs	r4, #1
1000a2ae:	2300      	movs	r3, #0
1000a2b0:	4014      	ands	r4, r2
1000a2b2:	2500      	movs	r5, #0
1000a2b4:	e741      	b.n	1000a13a <__aeabi_fmul+0x8e>
1000a2b6:	1c08      	adds	r0, r1, #0
1000a2b8:	465a      	mov	r2, fp
1000a2ba:	e7c1      	b.n	1000a240 <__aeabi_fmul+0x194>
1000a2bc:	309e      	adds	r0, #158	; 0x9e
1000a2be:	1c29      	adds	r1, r5, #0
1000a2c0:	4085      	lsls	r5, r0
1000a2c2:	40d9      	lsrs	r1, r3
1000a2c4:	1e68      	subs	r0, r5, #1
1000a2c6:	4185      	sbcs	r5, r0
1000a2c8:	430d      	orrs	r5, r1
1000a2ca:	076b      	lsls	r3, r5, #29
1000a2cc:	d004      	beq.n	1000a2d8 <__aeabi_fmul+0x22c>
1000a2ce:	230f      	movs	r3, #15
1000a2d0:	402b      	ands	r3, r5
1000a2d2:	2b04      	cmp	r3, #4
1000a2d4:	d000      	beq.n	1000a2d8 <__aeabi_fmul+0x22c>
1000a2d6:	3504      	adds	r5, #4
1000a2d8:	016b      	lsls	r3, r5, #5
1000a2da:	d504      	bpl.n	1000a2e6 <__aeabi_fmul+0x23a>
1000a2dc:	2401      	movs	r4, #1
1000a2de:	2301      	movs	r3, #1
1000a2e0:	4014      	ands	r4, r2
1000a2e2:	2500      	movs	r5, #0
1000a2e4:	e729      	b.n	1000a13a <__aeabi_fmul+0x8e>
1000a2e6:	2401      	movs	r4, #1
1000a2e8:	01ad      	lsls	r5, r5, #6
1000a2ea:	0a6d      	lsrs	r5, r5, #9
1000a2ec:	4014      	ands	r4, r2
1000a2ee:	2300      	movs	r3, #0
1000a2f0:	e723      	b.n	1000a13a <__aeabi_fmul+0x8e>
1000a2f2:	2380      	movs	r3, #128	; 0x80
1000a2f4:	03db      	lsls	r3, r3, #15
1000a2f6:	431d      	orrs	r5, r3
1000a2f8:	2401      	movs	r4, #1
1000a2fa:	465b      	mov	r3, fp
1000a2fc:	026d      	lsls	r5, r5, #9
1000a2fe:	4023      	ands	r3, r4
1000a300:	1c1c      	adds	r4, r3, #0
1000a302:	0a6d      	lsrs	r5, r5, #9
1000a304:	23ff      	movs	r3, #255	; 0xff
1000a306:	e718      	b.n	1000a13a <__aeabi_fmul+0x8e>
1000a308:	1000cea0 	.word	0x1000cea0
1000a30c:	f7ffffff 	.word	0xf7ffffff

1000a310 <__aeabi_fsub>:
1000a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a312:	004a      	lsls	r2, r1, #1
1000a314:	0243      	lsls	r3, r0, #9
1000a316:	0044      	lsls	r4, r0, #1
1000a318:	024d      	lsls	r5, r1, #9
1000a31a:	0fc0      	lsrs	r0, r0, #31
1000a31c:	0e24      	lsrs	r4, r4, #24
1000a31e:	1c06      	adds	r6, r0, #0
1000a320:	099b      	lsrs	r3, r3, #6
1000a322:	0e12      	lsrs	r2, r2, #24
1000a324:	0fc9      	lsrs	r1, r1, #31
1000a326:	09ad      	lsrs	r5, r5, #6
1000a328:	2aff      	cmp	r2, #255	; 0xff
1000a32a:	d100      	bne.n	1000a32e <__aeabi_fsub+0x1e>
1000a32c:	e075      	b.n	1000a41a <__aeabi_fsub+0x10a>
1000a32e:	2701      	movs	r7, #1
1000a330:	4079      	eors	r1, r7
1000a332:	4288      	cmp	r0, r1
1000a334:	d050      	beq.n	1000a3d8 <__aeabi_fsub+0xc8>
1000a336:	1aa0      	subs	r0, r4, r2
1000a338:	2800      	cmp	r0, #0
1000a33a:	dc00      	bgt.n	1000a33e <__aeabi_fsub+0x2e>
1000a33c:	e08f      	b.n	1000a45e <__aeabi_fsub+0x14e>
1000a33e:	2a00      	cmp	r2, #0
1000a340:	d11e      	bne.n	1000a380 <__aeabi_fsub+0x70>
1000a342:	2d00      	cmp	r5, #0
1000a344:	d000      	beq.n	1000a348 <__aeabi_fsub+0x38>
1000a346:	e075      	b.n	1000a434 <__aeabi_fsub+0x124>
1000a348:	075a      	lsls	r2, r3, #29
1000a34a:	d004      	beq.n	1000a356 <__aeabi_fsub+0x46>
1000a34c:	220f      	movs	r2, #15
1000a34e:	401a      	ands	r2, r3
1000a350:	2a04      	cmp	r2, #4
1000a352:	d000      	beq.n	1000a356 <__aeabi_fsub+0x46>
1000a354:	3304      	adds	r3, #4
1000a356:	2280      	movs	r2, #128	; 0x80
1000a358:	2001      	movs	r0, #1
1000a35a:	04d2      	lsls	r2, r2, #19
1000a35c:	401a      	ands	r2, r3
1000a35e:	4030      	ands	r0, r6
1000a360:	2a00      	cmp	r2, #0
1000a362:	d032      	beq.n	1000a3ca <__aeabi_fsub+0xba>
1000a364:	3401      	adds	r4, #1
1000a366:	2cff      	cmp	r4, #255	; 0xff
1000a368:	d100      	bne.n	1000a36c <__aeabi_fsub+0x5c>
1000a36a:	e084      	b.n	1000a476 <__aeabi_fsub+0x166>
1000a36c:	019b      	lsls	r3, r3, #6
1000a36e:	0a5b      	lsrs	r3, r3, #9
1000a370:	b2e4      	uxtb	r4, r4
1000a372:	025b      	lsls	r3, r3, #9
1000a374:	05e4      	lsls	r4, r4, #23
1000a376:	0a5b      	lsrs	r3, r3, #9
1000a378:	4323      	orrs	r3, r4
1000a37a:	07c0      	lsls	r0, r0, #31
1000a37c:	4318      	orrs	r0, r3
1000a37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a380:	2cff      	cmp	r4, #255	; 0xff
1000a382:	d0e1      	beq.n	1000a348 <__aeabi_fsub+0x38>
1000a384:	2280      	movs	r2, #128	; 0x80
1000a386:	04d2      	lsls	r2, r2, #19
1000a388:	4315      	orrs	r5, r2
1000a38a:	281b      	cmp	r0, #27
1000a38c:	dd7a      	ble.n	1000a484 <__aeabi_fsub+0x174>
1000a38e:	2501      	movs	r5, #1
1000a390:	1b5b      	subs	r3, r3, r5
1000a392:	015a      	lsls	r2, r3, #5
1000a394:	d55d      	bpl.n	1000a452 <__aeabi_fsub+0x142>
1000a396:	019b      	lsls	r3, r3, #6
1000a398:	099f      	lsrs	r7, r3, #6
1000a39a:	1c38      	adds	r0, r7, #0
1000a39c:	f7ff fa62 	bl	10009864 <__clzsi2>
1000a3a0:	3805      	subs	r0, #5
1000a3a2:	4087      	lsls	r7, r0
1000a3a4:	4284      	cmp	r4, r0
1000a3a6:	dc69      	bgt.n	1000a47c <__aeabi_fsub+0x16c>
1000a3a8:	1b00      	subs	r0, r0, r4
1000a3aa:	241f      	movs	r4, #31
1000a3ac:	1c3a      	adds	r2, r7, #0
1000a3ae:	1c43      	adds	r3, r0, #1
1000a3b0:	1a20      	subs	r0, r4, r0
1000a3b2:	40da      	lsrs	r2, r3
1000a3b4:	4087      	lsls	r7, r0
1000a3b6:	1c13      	adds	r3, r2, #0
1000a3b8:	1e7c      	subs	r4, r7, #1
1000a3ba:	41a7      	sbcs	r7, r4
1000a3bc:	2400      	movs	r4, #0
1000a3be:	433b      	orrs	r3, r7
1000a3c0:	e7c2      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a3c2:	1e13      	subs	r3, r2, #0
1000a3c4:	d145      	bne.n	1000a452 <__aeabi_fsub+0x142>
1000a3c6:	2300      	movs	r3, #0
1000a3c8:	2000      	movs	r0, #0
1000a3ca:	08db      	lsrs	r3, r3, #3
1000a3cc:	2cff      	cmp	r4, #255	; 0xff
1000a3ce:	d028      	beq.n	1000a422 <__aeabi_fsub+0x112>
1000a3d0:	025b      	lsls	r3, r3, #9
1000a3d2:	0a5b      	lsrs	r3, r3, #9
1000a3d4:	b2e4      	uxtb	r4, r4
1000a3d6:	e7cc      	b.n	1000a372 <__aeabi_fsub+0x62>
1000a3d8:	1aa1      	subs	r1, r4, r2
1000a3da:	2900      	cmp	r1, #0
1000a3dc:	dd5b      	ble.n	1000a496 <__aeabi_fsub+0x186>
1000a3de:	2a00      	cmp	r2, #0
1000a3e0:	d02e      	beq.n	1000a440 <__aeabi_fsub+0x130>
1000a3e2:	2cff      	cmp	r4, #255	; 0xff
1000a3e4:	d0b0      	beq.n	1000a348 <__aeabi_fsub+0x38>
1000a3e6:	2280      	movs	r2, #128	; 0x80
1000a3e8:	04d2      	lsls	r2, r2, #19
1000a3ea:	4315      	orrs	r5, r2
1000a3ec:	291b      	cmp	r1, #27
1000a3ee:	dc74      	bgt.n	1000a4da <__aeabi_fsub+0x1ca>
1000a3f0:	1c2f      	adds	r7, r5, #0
1000a3f2:	2220      	movs	r2, #32
1000a3f4:	40cf      	lsrs	r7, r1
1000a3f6:	1a51      	subs	r1, r2, r1
1000a3f8:	408d      	lsls	r5, r1
1000a3fa:	1e69      	subs	r1, r5, #1
1000a3fc:	418d      	sbcs	r5, r1
1000a3fe:	433d      	orrs	r5, r7
1000a400:	195b      	adds	r3, r3, r5
1000a402:	015a      	lsls	r2, r3, #5
1000a404:	d525      	bpl.n	1000a452 <__aeabi_fsub+0x142>
1000a406:	3401      	adds	r4, #1
1000a408:	2cff      	cmp	r4, #255	; 0xff
1000a40a:	d074      	beq.n	1000a4f6 <__aeabi_fsub+0x1e6>
1000a40c:	2101      	movs	r1, #1
1000a40e:	4a7e      	ldr	r2, [pc, #504]	; (1000a608 <__aeabi_fsub+0x2f8>)
1000a410:	4019      	ands	r1, r3
1000a412:	4013      	ands	r3, r2
1000a414:	085b      	lsrs	r3, r3, #1
1000a416:	430b      	orrs	r3, r1
1000a418:	e796      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a41a:	2d00      	cmp	r5, #0
1000a41c:	d000      	beq.n	1000a420 <__aeabi_fsub+0x110>
1000a41e:	e788      	b.n	1000a332 <__aeabi_fsub+0x22>
1000a420:	e785      	b.n	1000a32e <__aeabi_fsub+0x1e>
1000a422:	2b00      	cmp	r3, #0
1000a424:	d027      	beq.n	1000a476 <__aeabi_fsub+0x166>
1000a426:	2280      	movs	r2, #128	; 0x80
1000a428:	03d2      	lsls	r2, r2, #15
1000a42a:	4313      	orrs	r3, r2
1000a42c:	025b      	lsls	r3, r3, #9
1000a42e:	0a5b      	lsrs	r3, r3, #9
1000a430:	24ff      	movs	r4, #255	; 0xff
1000a432:	e79e      	b.n	1000a372 <__aeabi_fsub+0x62>
1000a434:	3801      	subs	r0, #1
1000a436:	2800      	cmp	r0, #0
1000a438:	d0aa      	beq.n	1000a390 <__aeabi_fsub+0x80>
1000a43a:	2cff      	cmp	r4, #255	; 0xff
1000a43c:	d1a5      	bne.n	1000a38a <__aeabi_fsub+0x7a>
1000a43e:	e783      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a440:	2d00      	cmp	r5, #0
1000a442:	d100      	bne.n	1000a446 <__aeabi_fsub+0x136>
1000a444:	e780      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a446:	3901      	subs	r1, #1
1000a448:	2900      	cmp	r1, #0
1000a44a:	d0d9      	beq.n	1000a400 <__aeabi_fsub+0xf0>
1000a44c:	2cff      	cmp	r4, #255	; 0xff
1000a44e:	d1cd      	bne.n	1000a3ec <__aeabi_fsub+0xdc>
1000a450:	e77a      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a452:	075a      	lsls	r2, r3, #29
1000a454:	d000      	beq.n	1000a458 <__aeabi_fsub+0x148>
1000a456:	e779      	b.n	1000a34c <__aeabi_fsub+0x3c>
1000a458:	2001      	movs	r0, #1
1000a45a:	4030      	ands	r0, r6
1000a45c:	e7b5      	b.n	1000a3ca <__aeabi_fsub+0xba>
1000a45e:	2800      	cmp	r0, #0
1000a460:	d125      	bne.n	1000a4ae <__aeabi_fsub+0x19e>
1000a462:	1c62      	adds	r2, r4, #1
1000a464:	b2d2      	uxtb	r2, r2
1000a466:	2a01      	cmp	r2, #1
1000a468:	dd55      	ble.n	1000a516 <__aeabi_fsub+0x206>
1000a46a:	1b5f      	subs	r7, r3, r5
1000a46c:	017a      	lsls	r2, r7, #5
1000a46e:	d52d      	bpl.n	1000a4cc <__aeabi_fsub+0x1bc>
1000a470:	1aef      	subs	r7, r5, r3
1000a472:	1c0e      	adds	r6, r1, #0
1000a474:	e791      	b.n	1000a39a <__aeabi_fsub+0x8a>
1000a476:	24ff      	movs	r4, #255	; 0xff
1000a478:	2300      	movs	r3, #0
1000a47a:	e77a      	b.n	1000a372 <__aeabi_fsub+0x62>
1000a47c:	4b62      	ldr	r3, [pc, #392]	; (1000a608 <__aeabi_fsub+0x2f8>)
1000a47e:	1a24      	subs	r4, r4, r0
1000a480:	403b      	ands	r3, r7
1000a482:	e761      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a484:	1c29      	adds	r1, r5, #0
1000a486:	2220      	movs	r2, #32
1000a488:	40c1      	lsrs	r1, r0
1000a48a:	1a10      	subs	r0, r2, r0
1000a48c:	4085      	lsls	r5, r0
1000a48e:	1e68      	subs	r0, r5, #1
1000a490:	4185      	sbcs	r5, r0
1000a492:	430d      	orrs	r5, r1
1000a494:	e77c      	b.n	1000a390 <__aeabi_fsub+0x80>
1000a496:	2900      	cmp	r1, #0
1000a498:	d146      	bne.n	1000a528 <__aeabi_fsub+0x218>
1000a49a:	1c62      	adds	r2, r4, #1
1000a49c:	b2d1      	uxtb	r1, r2
1000a49e:	2901      	cmp	r1, #1
1000a4a0:	dd2b      	ble.n	1000a4fa <__aeabi_fsub+0x1ea>
1000a4a2:	2aff      	cmp	r2, #255	; 0xff
1000a4a4:	d026      	beq.n	1000a4f4 <__aeabi_fsub+0x1e4>
1000a4a6:	18eb      	adds	r3, r5, r3
1000a4a8:	085b      	lsrs	r3, r3, #1
1000a4aa:	1c14      	adds	r4, r2, #0
1000a4ac:	e74c      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a4ae:	2c00      	cmp	r4, #0
1000a4b0:	d015      	beq.n	1000a4de <__aeabi_fsub+0x1ce>
1000a4b2:	2aff      	cmp	r2, #255	; 0xff
1000a4b4:	d01a      	beq.n	1000a4ec <__aeabi_fsub+0x1dc>
1000a4b6:	2480      	movs	r4, #128	; 0x80
1000a4b8:	04e4      	lsls	r4, r4, #19
1000a4ba:	4240      	negs	r0, r0
1000a4bc:	4323      	orrs	r3, r4
1000a4be:	281b      	cmp	r0, #27
1000a4c0:	dd4d      	ble.n	1000a55e <__aeabi_fsub+0x24e>
1000a4c2:	2301      	movs	r3, #1
1000a4c4:	1aeb      	subs	r3, r5, r3
1000a4c6:	1c14      	adds	r4, r2, #0
1000a4c8:	1c0e      	adds	r6, r1, #0
1000a4ca:	e762      	b.n	1000a392 <__aeabi_fsub+0x82>
1000a4cc:	2f00      	cmp	r7, #0
1000a4ce:	d000      	beq.n	1000a4d2 <__aeabi_fsub+0x1c2>
1000a4d0:	e763      	b.n	1000a39a <__aeabi_fsub+0x8a>
1000a4d2:	2300      	movs	r3, #0
1000a4d4:	2000      	movs	r0, #0
1000a4d6:	2400      	movs	r4, #0
1000a4d8:	e777      	b.n	1000a3ca <__aeabi_fsub+0xba>
1000a4da:	2501      	movs	r5, #1
1000a4dc:	e790      	b.n	1000a400 <__aeabi_fsub+0xf0>
1000a4de:	2b00      	cmp	r3, #0
1000a4e0:	d039      	beq.n	1000a556 <__aeabi_fsub+0x246>
1000a4e2:	43c0      	mvns	r0, r0
1000a4e4:	2800      	cmp	r0, #0
1000a4e6:	d0ed      	beq.n	1000a4c4 <__aeabi_fsub+0x1b4>
1000a4e8:	2aff      	cmp	r2, #255	; 0xff
1000a4ea:	d1e8      	bne.n	1000a4be <__aeabi_fsub+0x1ae>
1000a4ec:	1c2b      	adds	r3, r5, #0
1000a4ee:	24ff      	movs	r4, #255	; 0xff
1000a4f0:	1c0e      	adds	r6, r1, #0
1000a4f2:	e729      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a4f4:	24ff      	movs	r4, #255	; 0xff
1000a4f6:	2300      	movs	r3, #0
1000a4f8:	e767      	b.n	1000a3ca <__aeabi_fsub+0xba>
1000a4fa:	2c00      	cmp	r4, #0
1000a4fc:	d15a      	bne.n	1000a5b4 <__aeabi_fsub+0x2a4>
1000a4fe:	2b00      	cmp	r3, #0
1000a500:	d07f      	beq.n	1000a602 <__aeabi_fsub+0x2f2>
1000a502:	2d00      	cmp	r5, #0
1000a504:	d100      	bne.n	1000a508 <__aeabi_fsub+0x1f8>
1000a506:	e71f      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a508:	195b      	adds	r3, r3, r5
1000a50a:	015a      	lsls	r2, r3, #5
1000a50c:	d5a1      	bpl.n	1000a452 <__aeabi_fsub+0x142>
1000a50e:	4a3e      	ldr	r2, [pc, #248]	; (1000a608 <__aeabi_fsub+0x2f8>)
1000a510:	3401      	adds	r4, #1
1000a512:	4013      	ands	r3, r2
1000a514:	e718      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a516:	2c00      	cmp	r4, #0
1000a518:	d115      	bne.n	1000a546 <__aeabi_fsub+0x236>
1000a51a:	2b00      	cmp	r3, #0
1000a51c:	d12f      	bne.n	1000a57e <__aeabi_fsub+0x26e>
1000a51e:	2d00      	cmp	r5, #0
1000a520:	d05e      	beq.n	1000a5e0 <__aeabi_fsub+0x2d0>
1000a522:	1c2b      	adds	r3, r5, #0
1000a524:	1c0e      	adds	r6, r1, #0
1000a526:	e70f      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a528:	2c00      	cmp	r4, #0
1000a52a:	d121      	bne.n	1000a570 <__aeabi_fsub+0x260>
1000a52c:	2b00      	cmp	r3, #0
1000a52e:	d054      	beq.n	1000a5da <__aeabi_fsub+0x2ca>
1000a530:	43c9      	mvns	r1, r1
1000a532:	2900      	cmp	r1, #0
1000a534:	d004      	beq.n	1000a540 <__aeabi_fsub+0x230>
1000a536:	2aff      	cmp	r2, #255	; 0xff
1000a538:	d04c      	beq.n	1000a5d4 <__aeabi_fsub+0x2c4>
1000a53a:	291b      	cmp	r1, #27
1000a53c:	dd58      	ble.n	1000a5f0 <__aeabi_fsub+0x2e0>
1000a53e:	2301      	movs	r3, #1
1000a540:	195b      	adds	r3, r3, r5
1000a542:	1c14      	adds	r4, r2, #0
1000a544:	e75d      	b.n	1000a402 <__aeabi_fsub+0xf2>
1000a546:	2b00      	cmp	r3, #0
1000a548:	d123      	bne.n	1000a592 <__aeabi_fsub+0x282>
1000a54a:	2d00      	cmp	r5, #0
1000a54c:	d04b      	beq.n	1000a5e6 <__aeabi_fsub+0x2d6>
1000a54e:	1c2b      	adds	r3, r5, #0
1000a550:	1c0e      	adds	r6, r1, #0
1000a552:	24ff      	movs	r4, #255	; 0xff
1000a554:	e6f8      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a556:	1c2b      	adds	r3, r5, #0
1000a558:	1c14      	adds	r4, r2, #0
1000a55a:	1c0e      	adds	r6, r1, #0
1000a55c:	e6f4      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a55e:	1c1e      	adds	r6, r3, #0
1000a560:	2420      	movs	r4, #32
1000a562:	40c6      	lsrs	r6, r0
1000a564:	1a20      	subs	r0, r4, r0
1000a566:	4083      	lsls	r3, r0
1000a568:	1e58      	subs	r0, r3, #1
1000a56a:	4183      	sbcs	r3, r0
1000a56c:	4333      	orrs	r3, r6
1000a56e:	e7a9      	b.n	1000a4c4 <__aeabi_fsub+0x1b4>
1000a570:	2aff      	cmp	r2, #255	; 0xff
1000a572:	d02f      	beq.n	1000a5d4 <__aeabi_fsub+0x2c4>
1000a574:	2480      	movs	r4, #128	; 0x80
1000a576:	04e4      	lsls	r4, r4, #19
1000a578:	4249      	negs	r1, r1
1000a57a:	4323      	orrs	r3, r4
1000a57c:	e7dd      	b.n	1000a53a <__aeabi_fsub+0x22a>
1000a57e:	2d00      	cmp	r5, #0
1000a580:	d100      	bne.n	1000a584 <__aeabi_fsub+0x274>
1000a582:	e6e1      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a584:	1b5a      	subs	r2, r3, r5
1000a586:	0150      	lsls	r0, r2, #5
1000a588:	d400      	bmi.n	1000a58c <__aeabi_fsub+0x27c>
1000a58a:	e71a      	b.n	1000a3c2 <__aeabi_fsub+0xb2>
1000a58c:	1aeb      	subs	r3, r5, r3
1000a58e:	1c0e      	adds	r6, r1, #0
1000a590:	e6da      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a592:	24ff      	movs	r4, #255	; 0xff
1000a594:	2d00      	cmp	r5, #0
1000a596:	d100      	bne.n	1000a59a <__aeabi_fsub+0x28a>
1000a598:	e6d6      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a59a:	2280      	movs	r2, #128	; 0x80
1000a59c:	08db      	lsrs	r3, r3, #3
1000a59e:	03d2      	lsls	r2, r2, #15
1000a5a0:	4213      	tst	r3, r2
1000a5a2:	d004      	beq.n	1000a5ae <__aeabi_fsub+0x29e>
1000a5a4:	08ed      	lsrs	r5, r5, #3
1000a5a6:	4215      	tst	r5, r2
1000a5a8:	d101      	bne.n	1000a5ae <__aeabi_fsub+0x29e>
1000a5aa:	1c2b      	adds	r3, r5, #0
1000a5ac:	1c0e      	adds	r6, r1, #0
1000a5ae:	00db      	lsls	r3, r3, #3
1000a5b0:	24ff      	movs	r4, #255	; 0xff
1000a5b2:	e6c9      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a5b4:	2b00      	cmp	r3, #0
1000a5b6:	d00d      	beq.n	1000a5d4 <__aeabi_fsub+0x2c4>
1000a5b8:	24ff      	movs	r4, #255	; 0xff
1000a5ba:	2d00      	cmp	r5, #0
1000a5bc:	d100      	bne.n	1000a5c0 <__aeabi_fsub+0x2b0>
1000a5be:	e6c3      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a5c0:	2280      	movs	r2, #128	; 0x80
1000a5c2:	08db      	lsrs	r3, r3, #3
1000a5c4:	03d2      	lsls	r2, r2, #15
1000a5c6:	4213      	tst	r3, r2
1000a5c8:	d0f1      	beq.n	1000a5ae <__aeabi_fsub+0x29e>
1000a5ca:	08ed      	lsrs	r5, r5, #3
1000a5cc:	4215      	tst	r5, r2
1000a5ce:	d1ee      	bne.n	1000a5ae <__aeabi_fsub+0x29e>
1000a5d0:	1c2b      	adds	r3, r5, #0
1000a5d2:	e7ec      	b.n	1000a5ae <__aeabi_fsub+0x29e>
1000a5d4:	1c2b      	adds	r3, r5, #0
1000a5d6:	24ff      	movs	r4, #255	; 0xff
1000a5d8:	e6b6      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a5da:	1c2b      	adds	r3, r5, #0
1000a5dc:	1c14      	adds	r4, r2, #0
1000a5de:	e6b3      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a5e0:	1c23      	adds	r3, r4, #0
1000a5e2:	2000      	movs	r0, #0
1000a5e4:	e6f1      	b.n	1000a3ca <__aeabi_fsub+0xba>
1000a5e6:	2380      	movs	r3, #128	; 0x80
1000a5e8:	2000      	movs	r0, #0
1000a5ea:	049b      	lsls	r3, r3, #18
1000a5ec:	24ff      	movs	r4, #255	; 0xff
1000a5ee:	e6ec      	b.n	1000a3ca <__aeabi_fsub+0xba>
1000a5f0:	1c1f      	adds	r7, r3, #0
1000a5f2:	2420      	movs	r4, #32
1000a5f4:	40cf      	lsrs	r7, r1
1000a5f6:	1a61      	subs	r1, r4, r1
1000a5f8:	408b      	lsls	r3, r1
1000a5fa:	1e59      	subs	r1, r3, #1
1000a5fc:	418b      	sbcs	r3, r1
1000a5fe:	433b      	orrs	r3, r7
1000a600:	e79e      	b.n	1000a540 <__aeabi_fsub+0x230>
1000a602:	1c2b      	adds	r3, r5, #0
1000a604:	e6a0      	b.n	1000a348 <__aeabi_fsub+0x38>
1000a606:	46c0      	nop			; (mov r8, r8)
1000a608:	fbffffff 	.word	0xfbffffff

1000a60c <__aeabi_f2iz>:
1000a60c:	0242      	lsls	r2, r0, #9
1000a60e:	0a51      	lsrs	r1, r2, #9
1000a610:	0042      	lsls	r2, r0, #1
1000a612:	0fc3      	lsrs	r3, r0, #31
1000a614:	0e12      	lsrs	r2, r2, #24
1000a616:	2000      	movs	r0, #0
1000a618:	2a7e      	cmp	r2, #126	; 0x7e
1000a61a:	dd0d      	ble.n	1000a638 <__aeabi_f2iz+0x2c>
1000a61c:	2a9d      	cmp	r2, #157	; 0x9d
1000a61e:	dc0c      	bgt.n	1000a63a <__aeabi_f2iz+0x2e>
1000a620:	2080      	movs	r0, #128	; 0x80
1000a622:	0400      	lsls	r0, r0, #16
1000a624:	4301      	orrs	r1, r0
1000a626:	2a95      	cmp	r2, #149	; 0x95
1000a628:	dc0a      	bgt.n	1000a640 <__aeabi_f2iz+0x34>
1000a62a:	2096      	movs	r0, #150	; 0x96
1000a62c:	1a82      	subs	r2, r0, r2
1000a62e:	40d1      	lsrs	r1, r2
1000a630:	1c0a      	adds	r2, r1, #0
1000a632:	4258      	negs	r0, r3
1000a634:	4042      	eors	r2, r0
1000a636:	18d0      	adds	r0, r2, r3
1000a638:	4770      	bx	lr
1000a63a:	4a03      	ldr	r2, [pc, #12]	; (1000a648 <__aeabi_f2iz+0x3c>)
1000a63c:	1898      	adds	r0, r3, r2
1000a63e:	e7fb      	b.n	1000a638 <__aeabi_f2iz+0x2c>
1000a640:	3a96      	subs	r2, #150	; 0x96
1000a642:	4091      	lsls	r1, r2
1000a644:	1c0a      	adds	r2, r1, #0
1000a646:	e7f4      	b.n	1000a632 <__aeabi_f2iz+0x26>
1000a648:	7fffffff 	.word	0x7fffffff

1000a64c <__aeabi_i2f>:
1000a64c:	b570      	push	{r4, r5, r6, lr}
1000a64e:	1e04      	subs	r4, r0, #0
1000a650:	d039      	beq.n	1000a6c6 <__aeabi_i2f+0x7a>
1000a652:	0fc5      	lsrs	r5, r0, #31
1000a654:	d000      	beq.n	1000a658 <__aeabi_i2f+0xc>
1000a656:	4244      	negs	r4, r0
1000a658:	1c20      	adds	r0, r4, #0
1000a65a:	f7ff f903 	bl	10009864 <__clzsi2>
1000a65e:	239e      	movs	r3, #158	; 0x9e
1000a660:	1c26      	adds	r6, r4, #0
1000a662:	1a1b      	subs	r3, r3, r0
1000a664:	2b96      	cmp	r3, #150	; 0x96
1000a666:	dc07      	bgt.n	1000a678 <__aeabi_i2f+0x2c>
1000a668:	2808      	cmp	r0, #8
1000a66a:	dd01      	ble.n	1000a670 <__aeabi_i2f+0x24>
1000a66c:	3808      	subs	r0, #8
1000a66e:	4084      	lsls	r4, r0
1000a670:	0264      	lsls	r4, r4, #9
1000a672:	0a64      	lsrs	r4, r4, #9
1000a674:	b2d8      	uxtb	r0, r3
1000a676:	e01e      	b.n	1000a6b6 <__aeabi_i2f+0x6a>
1000a678:	2b99      	cmp	r3, #153	; 0x99
1000a67a:	dd0a      	ble.n	1000a692 <__aeabi_i2f+0x46>
1000a67c:	2205      	movs	r2, #5
1000a67e:	1c21      	adds	r1, r4, #0
1000a680:	1a12      	subs	r2, r2, r0
1000a682:	40d1      	lsrs	r1, r2
1000a684:	1c0a      	adds	r2, r1, #0
1000a686:	1c01      	adds	r1, r0, #0
1000a688:	311b      	adds	r1, #27
1000a68a:	408e      	lsls	r6, r1
1000a68c:	1e71      	subs	r1, r6, #1
1000a68e:	418e      	sbcs	r6, r1
1000a690:	4316      	orrs	r6, r2
1000a692:	2805      	cmp	r0, #5
1000a694:	dd01      	ble.n	1000a69a <__aeabi_i2f+0x4e>
1000a696:	1f42      	subs	r2, r0, #5
1000a698:	4096      	lsls	r6, r2
1000a69a:	4c0f      	ldr	r4, [pc, #60]	; (1000a6d8 <__aeabi_i2f+0x8c>)
1000a69c:	4034      	ands	r4, r6
1000a69e:	0772      	lsls	r2, r6, #29
1000a6a0:	d004      	beq.n	1000a6ac <__aeabi_i2f+0x60>
1000a6a2:	220f      	movs	r2, #15
1000a6a4:	4016      	ands	r6, r2
1000a6a6:	2e04      	cmp	r6, #4
1000a6a8:	d000      	beq.n	1000a6ac <__aeabi_i2f+0x60>
1000a6aa:	3404      	adds	r4, #4
1000a6ac:	0162      	lsls	r2, r4, #5
1000a6ae:	d40e      	bmi.n	1000a6ce <__aeabi_i2f+0x82>
1000a6b0:	01a4      	lsls	r4, r4, #6
1000a6b2:	0a64      	lsrs	r4, r4, #9
1000a6b4:	b2d8      	uxtb	r0, r3
1000a6b6:	0264      	lsls	r4, r4, #9
1000a6b8:	05c0      	lsls	r0, r0, #23
1000a6ba:	0a64      	lsrs	r4, r4, #9
1000a6bc:	07ed      	lsls	r5, r5, #31
1000a6be:	4304      	orrs	r4, r0
1000a6c0:	432c      	orrs	r4, r5
1000a6c2:	1c20      	adds	r0, r4, #0
1000a6c4:	bd70      	pop	{r4, r5, r6, pc}
1000a6c6:	2500      	movs	r5, #0
1000a6c8:	2000      	movs	r0, #0
1000a6ca:	2400      	movs	r4, #0
1000a6cc:	e7f3      	b.n	1000a6b6 <__aeabi_i2f+0x6a>
1000a6ce:	4b02      	ldr	r3, [pc, #8]	; (1000a6d8 <__aeabi_i2f+0x8c>)
1000a6d0:	401c      	ands	r4, r3
1000a6d2:	239f      	movs	r3, #159	; 0x9f
1000a6d4:	1a1b      	subs	r3, r3, r0
1000a6d6:	e7eb      	b.n	1000a6b0 <__aeabi_i2f+0x64>
1000a6d8:	fbffffff 	.word	0xfbffffff

1000a6dc <__aeabi_dadd>:
1000a6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6de:	4645      	mov	r5, r8
1000a6e0:	4657      	mov	r7, sl
1000a6e2:	464e      	mov	r6, r9
1000a6e4:	4694      	mov	ip, r2
1000a6e6:	004c      	lsls	r4, r1, #1
1000a6e8:	030a      	lsls	r2, r1, #12
1000a6ea:	0fc9      	lsrs	r1, r1, #31
1000a6ec:	b4e0      	push	{r5, r6, r7}
1000a6ee:	4688      	mov	r8, r1
1000a6f0:	1c0e      	adds	r6, r1, #0
1000a6f2:	0319      	lsls	r1, r3, #12
1000a6f4:	0f47      	lsrs	r7, r0, #29
1000a6f6:	00c5      	lsls	r5, r0, #3
1000a6f8:	0a48      	lsrs	r0, r1, #9
1000a6fa:	4661      	mov	r1, ip
1000a6fc:	0f49      	lsrs	r1, r1, #29
1000a6fe:	4301      	orrs	r1, r0
1000a700:	4660      	mov	r0, ip
1000a702:	0a52      	lsrs	r2, r2, #9
1000a704:	4317      	orrs	r7, r2
1000a706:	00c0      	lsls	r0, r0, #3
1000a708:	005a      	lsls	r2, r3, #1
1000a70a:	0d64      	lsrs	r4, r4, #21
1000a70c:	0d52      	lsrs	r2, r2, #21
1000a70e:	0fdb      	lsrs	r3, r3, #31
1000a710:	4684      	mov	ip, r0
1000a712:	4598      	cmp	r8, r3
1000a714:	d100      	bne.n	1000a718 <__aeabi_dadd+0x3c>
1000a716:	e0a7      	b.n	1000a868 <__aeabi_dadd+0x18c>
1000a718:	1aa0      	subs	r0, r4, r2
1000a71a:	2800      	cmp	r0, #0
1000a71c:	dc00      	bgt.n	1000a720 <__aeabi_dadd+0x44>
1000a71e:	e101      	b.n	1000a924 <__aeabi_dadd+0x248>
1000a720:	2a00      	cmp	r2, #0
1000a722:	d13d      	bne.n	1000a7a0 <__aeabi_dadd+0xc4>
1000a724:	4663      	mov	r3, ip
1000a726:	430b      	orrs	r3, r1
1000a728:	d000      	beq.n	1000a72c <__aeabi_dadd+0x50>
1000a72a:	e0d4      	b.n	1000a8d6 <__aeabi_dadd+0x1fa>
1000a72c:	076b      	lsls	r3, r5, #29
1000a72e:	d100      	bne.n	1000a732 <__aeabi_dadd+0x56>
1000a730:	e088      	b.n	1000a844 <__aeabi_dadd+0x168>
1000a732:	230f      	movs	r3, #15
1000a734:	402b      	ands	r3, r5
1000a736:	2b04      	cmp	r3, #4
1000a738:	d100      	bne.n	1000a73c <__aeabi_dadd+0x60>
1000a73a:	e083      	b.n	1000a844 <__aeabi_dadd+0x168>
1000a73c:	1d2a      	adds	r2, r5, #4
1000a73e:	42aa      	cmp	r2, r5
1000a740:	41ad      	sbcs	r5, r5
1000a742:	2380      	movs	r3, #128	; 0x80
1000a744:	426d      	negs	r5, r5
1000a746:	197f      	adds	r7, r7, r5
1000a748:	041b      	lsls	r3, r3, #16
1000a74a:	403b      	ands	r3, r7
1000a74c:	4646      	mov	r6, r8
1000a74e:	1c15      	adds	r5, r2, #0
1000a750:	2b00      	cmp	r3, #0
1000a752:	d100      	bne.n	1000a756 <__aeabi_dadd+0x7a>
1000a754:	e07c      	b.n	1000a850 <__aeabi_dadd+0x174>
1000a756:	4bcc      	ldr	r3, [pc, #816]	; (1000aa88 <__aeabi_dadd+0x3ac>)
1000a758:	3401      	adds	r4, #1
1000a75a:	429c      	cmp	r4, r3
1000a75c:	d100      	bne.n	1000a760 <__aeabi_dadd+0x84>
1000a75e:	e0fd      	b.n	1000a95c <__aeabi_dadd+0x280>
1000a760:	1c3a      	adds	r2, r7, #0
1000a762:	4bca      	ldr	r3, [pc, #808]	; (1000aa8c <__aeabi_dadd+0x3b0>)
1000a764:	08ed      	lsrs	r5, r5, #3
1000a766:	401a      	ands	r2, r3
1000a768:	0750      	lsls	r0, r2, #29
1000a76a:	0564      	lsls	r4, r4, #21
1000a76c:	0252      	lsls	r2, r2, #9
1000a76e:	4305      	orrs	r5, r0
1000a770:	0b12      	lsrs	r2, r2, #12
1000a772:	0d64      	lsrs	r4, r4, #21
1000a774:	2100      	movs	r1, #0
1000a776:	0312      	lsls	r2, r2, #12
1000a778:	0d0b      	lsrs	r3, r1, #20
1000a77a:	051b      	lsls	r3, r3, #20
1000a77c:	0564      	lsls	r4, r4, #21
1000a77e:	0b12      	lsrs	r2, r2, #12
1000a780:	431a      	orrs	r2, r3
1000a782:	0863      	lsrs	r3, r4, #1
1000a784:	4cc2      	ldr	r4, [pc, #776]	; (1000aa90 <__aeabi_dadd+0x3b4>)
1000a786:	07f6      	lsls	r6, r6, #31
1000a788:	4014      	ands	r4, r2
1000a78a:	431c      	orrs	r4, r3
1000a78c:	0064      	lsls	r4, r4, #1
1000a78e:	0864      	lsrs	r4, r4, #1
1000a790:	4334      	orrs	r4, r6
1000a792:	1c28      	adds	r0, r5, #0
1000a794:	1c21      	adds	r1, r4, #0
1000a796:	bc1c      	pop	{r2, r3, r4}
1000a798:	4690      	mov	r8, r2
1000a79a:	4699      	mov	r9, r3
1000a79c:	46a2      	mov	sl, r4
1000a79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a7a0:	4bb9      	ldr	r3, [pc, #740]	; (1000aa88 <__aeabi_dadd+0x3ac>)
1000a7a2:	429c      	cmp	r4, r3
1000a7a4:	d0c2      	beq.n	1000a72c <__aeabi_dadd+0x50>
1000a7a6:	2380      	movs	r3, #128	; 0x80
1000a7a8:	041b      	lsls	r3, r3, #16
1000a7aa:	4319      	orrs	r1, r3
1000a7ac:	2838      	cmp	r0, #56	; 0x38
1000a7ae:	dd00      	ble.n	1000a7b2 <__aeabi_dadd+0xd6>
1000a7b0:	e0ec      	b.n	1000a98c <__aeabi_dadd+0x2b0>
1000a7b2:	281f      	cmp	r0, #31
1000a7b4:	dd00      	ble.n	1000a7b8 <__aeabi_dadd+0xdc>
1000a7b6:	e121      	b.n	1000a9fc <__aeabi_dadd+0x320>
1000a7b8:	2220      	movs	r2, #32
1000a7ba:	1c0e      	adds	r6, r1, #0
1000a7bc:	4663      	mov	r3, ip
1000a7be:	1a12      	subs	r2, r2, r0
1000a7c0:	4096      	lsls	r6, r2
1000a7c2:	40c3      	lsrs	r3, r0
1000a7c4:	4333      	orrs	r3, r6
1000a7c6:	4666      	mov	r6, ip
1000a7c8:	4096      	lsls	r6, r2
1000a7ca:	1c32      	adds	r2, r6, #0
1000a7cc:	1e56      	subs	r6, r2, #1
1000a7ce:	41b2      	sbcs	r2, r6
1000a7d0:	4313      	orrs	r3, r2
1000a7d2:	1c0a      	adds	r2, r1, #0
1000a7d4:	40c2      	lsrs	r2, r0
1000a7d6:	1aeb      	subs	r3, r5, r3
1000a7d8:	429d      	cmp	r5, r3
1000a7da:	41b6      	sbcs	r6, r6
1000a7dc:	1c1d      	adds	r5, r3, #0
1000a7de:	1aba      	subs	r2, r7, r2
1000a7e0:	4276      	negs	r6, r6
1000a7e2:	1b97      	subs	r7, r2, r6
1000a7e4:	023b      	lsls	r3, r7, #8
1000a7e6:	d400      	bmi.n	1000a7ea <__aeabi_dadd+0x10e>
1000a7e8:	e097      	b.n	1000a91a <__aeabi_dadd+0x23e>
1000a7ea:	027a      	lsls	r2, r7, #9
1000a7ec:	0a56      	lsrs	r6, r2, #9
1000a7ee:	2e00      	cmp	r6, #0
1000a7f0:	d100      	bne.n	1000a7f4 <__aeabi_dadd+0x118>
1000a7f2:	e0b6      	b.n	1000a962 <__aeabi_dadd+0x286>
1000a7f4:	1c30      	adds	r0, r6, #0
1000a7f6:	f7ff f835 	bl	10009864 <__clzsi2>
1000a7fa:	1c03      	adds	r3, r0, #0
1000a7fc:	3b08      	subs	r3, #8
1000a7fe:	2b1f      	cmp	r3, #31
1000a800:	dd00      	ble.n	1000a804 <__aeabi_dadd+0x128>
1000a802:	e0b7      	b.n	1000a974 <__aeabi_dadd+0x298>
1000a804:	409e      	lsls	r6, r3
1000a806:	1c37      	adds	r7, r6, #0
1000a808:	2628      	movs	r6, #40	; 0x28
1000a80a:	1c2a      	adds	r2, r5, #0
1000a80c:	1a36      	subs	r6, r6, r0
1000a80e:	40f2      	lsrs	r2, r6
1000a810:	1c16      	adds	r6, r2, #0
1000a812:	409d      	lsls	r5, r3
1000a814:	433e      	orrs	r6, r7
1000a816:	429c      	cmp	r4, r3
1000a818:	dd00      	ble.n	1000a81c <__aeabi_dadd+0x140>
1000a81a:	e0b2      	b.n	1000a982 <__aeabi_dadd+0x2a6>
1000a81c:	1b1c      	subs	r4, r3, r4
1000a81e:	1c62      	adds	r2, r4, #1
1000a820:	2a1f      	cmp	r2, #31
1000a822:	dd00      	ble.n	1000a826 <__aeabi_dadd+0x14a>
1000a824:	e0d8      	b.n	1000a9d8 <__aeabi_dadd+0x2fc>
1000a826:	231f      	movs	r3, #31
1000a828:	1c29      	adds	r1, r5, #0
1000a82a:	1b1c      	subs	r4, r3, r4
1000a82c:	1c33      	adds	r3, r6, #0
1000a82e:	40a5      	lsls	r5, r4
1000a830:	40a3      	lsls	r3, r4
1000a832:	40d1      	lsrs	r1, r2
1000a834:	1e6c      	subs	r4, r5, #1
1000a836:	41a5      	sbcs	r5, r4
1000a838:	40d6      	lsrs	r6, r2
1000a83a:	4319      	orrs	r1, r3
1000a83c:	430d      	orrs	r5, r1
1000a83e:	1c37      	adds	r7, r6, #0
1000a840:	2400      	movs	r4, #0
1000a842:	e773      	b.n	1000a72c <__aeabi_dadd+0x50>
1000a844:	2380      	movs	r3, #128	; 0x80
1000a846:	041b      	lsls	r3, r3, #16
1000a848:	403b      	ands	r3, r7
1000a84a:	4646      	mov	r6, r8
1000a84c:	d000      	beq.n	1000a850 <__aeabi_dadd+0x174>
1000a84e:	e782      	b.n	1000a756 <__aeabi_dadd+0x7a>
1000a850:	4b8d      	ldr	r3, [pc, #564]	; (1000aa88 <__aeabi_dadd+0x3ac>)
1000a852:	08ed      	lsrs	r5, r5, #3
1000a854:	0778      	lsls	r0, r7, #29
1000a856:	4305      	orrs	r5, r0
1000a858:	08fa      	lsrs	r2, r7, #3
1000a85a:	429c      	cmp	r4, r3
1000a85c:	d032      	beq.n	1000a8c4 <__aeabi_dadd+0x1e8>
1000a85e:	0312      	lsls	r2, r2, #12
1000a860:	0564      	lsls	r4, r4, #21
1000a862:	0b12      	lsrs	r2, r2, #12
1000a864:	0d64      	lsrs	r4, r4, #21
1000a866:	e785      	b.n	1000a774 <__aeabi_dadd+0x98>
1000a868:	1aa3      	subs	r3, r4, r2
1000a86a:	2b00      	cmp	r3, #0
1000a86c:	dc00      	bgt.n	1000a870 <__aeabi_dadd+0x194>
1000a86e:	e094      	b.n	1000a99a <__aeabi_dadd+0x2be>
1000a870:	2a00      	cmp	r2, #0
1000a872:	d03c      	beq.n	1000a8ee <__aeabi_dadd+0x212>
1000a874:	4a84      	ldr	r2, [pc, #528]	; (1000aa88 <__aeabi_dadd+0x3ac>)
1000a876:	4294      	cmp	r4, r2
1000a878:	d100      	bne.n	1000a87c <__aeabi_dadd+0x1a0>
1000a87a:	e757      	b.n	1000a72c <__aeabi_dadd+0x50>
1000a87c:	2280      	movs	r2, #128	; 0x80
1000a87e:	0412      	lsls	r2, r2, #16
1000a880:	4311      	orrs	r1, r2
1000a882:	2b38      	cmp	r3, #56	; 0x38
1000a884:	dc00      	bgt.n	1000a888 <__aeabi_dadd+0x1ac>
1000a886:	e105      	b.n	1000aa94 <__aeabi_dadd+0x3b8>
1000a888:	4663      	mov	r3, ip
1000a88a:	4319      	orrs	r1, r3
1000a88c:	1e48      	subs	r0, r1, #1
1000a88e:	4181      	sbcs	r1, r0
1000a890:	2200      	movs	r2, #0
1000a892:	b2c8      	uxtb	r0, r1
1000a894:	1940      	adds	r0, r0, r5
1000a896:	42a8      	cmp	r0, r5
1000a898:	419b      	sbcs	r3, r3
1000a89a:	1c05      	adds	r5, r0, #0
1000a89c:	19d2      	adds	r2, r2, r7
1000a89e:	425b      	negs	r3, r3
1000a8a0:	18d7      	adds	r7, r2, r3
1000a8a2:	023b      	lsls	r3, r7, #8
1000a8a4:	d539      	bpl.n	1000a91a <__aeabi_dadd+0x23e>
1000a8a6:	4b78      	ldr	r3, [pc, #480]	; (1000aa88 <__aeabi_dadd+0x3ac>)
1000a8a8:	3401      	adds	r4, #1
1000a8aa:	429c      	cmp	r4, r3
1000a8ac:	d100      	bne.n	1000a8b0 <__aeabi_dadd+0x1d4>
1000a8ae:	e14c      	b.n	1000ab4a <__aeabi_dadd+0x46e>
1000a8b0:	2001      	movs	r0, #1
1000a8b2:	4a76      	ldr	r2, [pc, #472]	; (1000aa8c <__aeabi_dadd+0x3b0>)
1000a8b4:	086b      	lsrs	r3, r5, #1
1000a8b6:	403a      	ands	r2, r7
1000a8b8:	4028      	ands	r0, r5
1000a8ba:	4318      	orrs	r0, r3
1000a8bc:	07d5      	lsls	r5, r2, #31
1000a8be:	4305      	orrs	r5, r0
1000a8c0:	0857      	lsrs	r7, r2, #1
1000a8c2:	e733      	b.n	1000a72c <__aeabi_dadd+0x50>
1000a8c4:	1c2b      	adds	r3, r5, #0
1000a8c6:	4313      	orrs	r3, r2
1000a8c8:	d048      	beq.n	1000a95c <__aeabi_dadd+0x280>
1000a8ca:	2380      	movs	r3, #128	; 0x80
1000a8cc:	031b      	lsls	r3, r3, #12
1000a8ce:	431a      	orrs	r2, r3
1000a8d0:	0312      	lsls	r2, r2, #12
1000a8d2:	0b12      	lsrs	r2, r2, #12
1000a8d4:	e74e      	b.n	1000a774 <__aeabi_dadd+0x98>
1000a8d6:	3801      	subs	r0, #1
1000a8d8:	2800      	cmp	r0, #0
1000a8da:	d178      	bne.n	1000a9ce <__aeabi_dadd+0x2f2>
1000a8dc:	4663      	mov	r3, ip
1000a8de:	1aee      	subs	r6, r5, r3
1000a8e0:	42b5      	cmp	r5, r6
1000a8e2:	419b      	sbcs	r3, r3
1000a8e4:	1a7a      	subs	r2, r7, r1
1000a8e6:	425b      	negs	r3, r3
1000a8e8:	1ad7      	subs	r7, r2, r3
1000a8ea:	1c35      	adds	r5, r6, #0
1000a8ec:	e77a      	b.n	1000a7e4 <__aeabi_dadd+0x108>
1000a8ee:	1c02      	adds	r2, r0, #0
1000a8f0:	430a      	orrs	r2, r1
1000a8f2:	d100      	bne.n	1000a8f6 <__aeabi_dadd+0x21a>
1000a8f4:	e71a      	b.n	1000a72c <__aeabi_dadd+0x50>
1000a8f6:	3b01      	subs	r3, #1
1000a8f8:	2b00      	cmp	r3, #0
1000a8fa:	d000      	beq.n	1000a8fe <__aeabi_dadd+0x222>
1000a8fc:	e0f2      	b.n	1000aae4 <__aeabi_dadd+0x408>
1000a8fe:	1940      	adds	r0, r0, r5
1000a900:	42a8      	cmp	r0, r5
1000a902:	419b      	sbcs	r3, r3
1000a904:	19ca      	adds	r2, r1, r7
1000a906:	425b      	negs	r3, r3
1000a908:	18d7      	adds	r7, r2, r3
1000a90a:	1c05      	adds	r5, r0, #0
1000a90c:	e7c9      	b.n	1000a8a2 <__aeabi_dadd+0x1c6>
1000a90e:	1c13      	adds	r3, r2, #0
1000a910:	4333      	orrs	r3, r6
1000a912:	d100      	bne.n	1000a916 <__aeabi_dadd+0x23a>
1000a914:	e118      	b.n	1000ab48 <__aeabi_dadd+0x46c>
1000a916:	1c17      	adds	r7, r2, #0
1000a918:	1c35      	adds	r5, r6, #0
1000a91a:	4646      	mov	r6, r8
1000a91c:	076b      	lsls	r3, r5, #29
1000a91e:	d000      	beq.n	1000a922 <__aeabi_dadd+0x246>
1000a920:	e707      	b.n	1000a732 <__aeabi_dadd+0x56>
1000a922:	e795      	b.n	1000a850 <__aeabi_dadd+0x174>
1000a924:	2800      	cmp	r0, #0
1000a926:	d17a      	bne.n	1000aa1e <__aeabi_dadd+0x342>
1000a928:	1c62      	adds	r2, r4, #1
1000a92a:	0552      	lsls	r2, r2, #21
1000a92c:	0d52      	lsrs	r2, r2, #21
1000a92e:	2a01      	cmp	r2, #1
1000a930:	dc00      	bgt.n	1000a934 <__aeabi_dadd+0x258>
1000a932:	e0fb      	b.n	1000ab2c <__aeabi_dadd+0x450>
1000a934:	4662      	mov	r2, ip
1000a936:	1aaa      	subs	r2, r5, r2
1000a938:	4295      	cmp	r5, r2
1000a93a:	41b6      	sbcs	r6, r6
1000a93c:	4691      	mov	r9, r2
1000a93e:	1a78      	subs	r0, r7, r1
1000a940:	4272      	negs	r2, r6
1000a942:	1a86      	subs	r6, r0, r2
1000a944:	0232      	lsls	r2, r6, #8
1000a946:	d400      	bmi.n	1000a94a <__aeabi_dadd+0x26e>
1000a948:	e093      	b.n	1000aa72 <__aeabi_dadd+0x396>
1000a94a:	4662      	mov	r2, ip
1000a94c:	1b55      	subs	r5, r2, r5
1000a94e:	45ac      	cmp	ip, r5
1000a950:	4180      	sbcs	r0, r0
1000a952:	1bcf      	subs	r7, r1, r7
1000a954:	4240      	negs	r0, r0
1000a956:	1a3e      	subs	r6, r7, r0
1000a958:	4698      	mov	r8, r3
1000a95a:	e748      	b.n	1000a7ee <__aeabi_dadd+0x112>
1000a95c:	2200      	movs	r2, #0
1000a95e:	2500      	movs	r5, #0
1000a960:	e708      	b.n	1000a774 <__aeabi_dadd+0x98>
1000a962:	1c28      	adds	r0, r5, #0
1000a964:	f7fe ff7e 	bl	10009864 <__clzsi2>
1000a968:	3020      	adds	r0, #32
1000a96a:	1c03      	adds	r3, r0, #0
1000a96c:	3b08      	subs	r3, #8
1000a96e:	2b1f      	cmp	r3, #31
1000a970:	dc00      	bgt.n	1000a974 <__aeabi_dadd+0x298>
1000a972:	e747      	b.n	1000a804 <__aeabi_dadd+0x128>
1000a974:	3828      	subs	r0, #40	; 0x28
1000a976:	4085      	lsls	r5, r0
1000a978:	1c2e      	adds	r6, r5, #0
1000a97a:	2500      	movs	r5, #0
1000a97c:	429c      	cmp	r4, r3
1000a97e:	dc00      	bgt.n	1000a982 <__aeabi_dadd+0x2a6>
1000a980:	e74c      	b.n	1000a81c <__aeabi_dadd+0x140>
1000a982:	4a42      	ldr	r2, [pc, #264]	; (1000aa8c <__aeabi_dadd+0x3b0>)
1000a984:	1ae4      	subs	r4, r4, r3
1000a986:	4016      	ands	r6, r2
1000a988:	1c37      	adds	r7, r6, #0
1000a98a:	e6cf      	b.n	1000a72c <__aeabi_dadd+0x50>
1000a98c:	4663      	mov	r3, ip
1000a98e:	4319      	orrs	r1, r3
1000a990:	1e4b      	subs	r3, r1, #1
1000a992:	4199      	sbcs	r1, r3
1000a994:	2200      	movs	r2, #0
1000a996:	b2cb      	uxtb	r3, r1
1000a998:	e71d      	b.n	1000a7d6 <__aeabi_dadd+0xfa>
1000a99a:	2b00      	cmp	r3, #0
1000a99c:	d000      	beq.n	1000a9a0 <__aeabi_dadd+0x2c4>
1000a99e:	e0f2      	b.n	1000ab86 <__aeabi_dadd+0x4aa>
1000a9a0:	1c60      	adds	r0, r4, #1
1000a9a2:	0543      	lsls	r3, r0, #21
1000a9a4:	0d5b      	lsrs	r3, r3, #21
1000a9a6:	2b01      	cmp	r3, #1
1000a9a8:	dc00      	bgt.n	1000a9ac <__aeabi_dadd+0x2d0>
1000a9aa:	e0a4      	b.n	1000aaf6 <__aeabi_dadd+0x41a>
1000a9ac:	4b36      	ldr	r3, [pc, #216]	; (1000aa88 <__aeabi_dadd+0x3ac>)
1000a9ae:	4298      	cmp	r0, r3
1000a9b0:	d100      	bne.n	1000a9b4 <__aeabi_dadd+0x2d8>
1000a9b2:	e121      	b.n	1000abf8 <__aeabi_dadd+0x51c>
1000a9b4:	4663      	mov	r3, ip
1000a9b6:	195c      	adds	r4, r3, r5
1000a9b8:	42ac      	cmp	r4, r5
1000a9ba:	419b      	sbcs	r3, r3
1000a9bc:	19cf      	adds	r7, r1, r7
1000a9be:	425b      	negs	r3, r3
1000a9c0:	18fa      	adds	r2, r7, r3
1000a9c2:	0864      	lsrs	r4, r4, #1
1000a9c4:	07d5      	lsls	r5, r2, #31
1000a9c6:	4325      	orrs	r5, r4
1000a9c8:	0857      	lsrs	r7, r2, #1
1000a9ca:	1c04      	adds	r4, r0, #0
1000a9cc:	e6ae      	b.n	1000a72c <__aeabi_dadd+0x50>
1000a9ce:	4b2e      	ldr	r3, [pc, #184]	; (1000aa88 <__aeabi_dadd+0x3ac>)
1000a9d0:	429c      	cmp	r4, r3
1000a9d2:	d000      	beq.n	1000a9d6 <__aeabi_dadd+0x2fa>
1000a9d4:	e6ea      	b.n	1000a7ac <__aeabi_dadd+0xd0>
1000a9d6:	e6a9      	b.n	1000a72c <__aeabi_dadd+0x50>
1000a9d8:	1c21      	adds	r1, r4, #0
1000a9da:	1c33      	adds	r3, r6, #0
1000a9dc:	391f      	subs	r1, #31
1000a9de:	40cb      	lsrs	r3, r1
1000a9e0:	1c19      	adds	r1, r3, #0
1000a9e2:	2a20      	cmp	r2, #32
1000a9e4:	d100      	bne.n	1000a9e8 <__aeabi_dadd+0x30c>
1000a9e6:	e082      	b.n	1000aaee <__aeabi_dadd+0x412>
1000a9e8:	233f      	movs	r3, #63	; 0x3f
1000a9ea:	1b1c      	subs	r4, r3, r4
1000a9ec:	40a6      	lsls	r6, r4
1000a9ee:	4335      	orrs	r5, r6
1000a9f0:	1e6e      	subs	r6, r5, #1
1000a9f2:	41b5      	sbcs	r5, r6
1000a9f4:	2700      	movs	r7, #0
1000a9f6:	430d      	orrs	r5, r1
1000a9f8:	2400      	movs	r4, #0
1000a9fa:	e78e      	b.n	1000a91a <__aeabi_dadd+0x23e>
1000a9fc:	1c03      	adds	r3, r0, #0
1000a9fe:	1c0e      	adds	r6, r1, #0
1000aa00:	3b20      	subs	r3, #32
1000aa02:	40de      	lsrs	r6, r3
1000aa04:	2820      	cmp	r0, #32
1000aa06:	d074      	beq.n	1000aaf2 <__aeabi_dadd+0x416>
1000aa08:	2340      	movs	r3, #64	; 0x40
1000aa0a:	1a1b      	subs	r3, r3, r0
1000aa0c:	4099      	lsls	r1, r3
1000aa0e:	1c0b      	adds	r3, r1, #0
1000aa10:	4662      	mov	r2, ip
1000aa12:	4313      	orrs	r3, r2
1000aa14:	1e59      	subs	r1, r3, #1
1000aa16:	418b      	sbcs	r3, r1
1000aa18:	2200      	movs	r2, #0
1000aa1a:	4333      	orrs	r3, r6
1000aa1c:	e6db      	b.n	1000a7d6 <__aeabi_dadd+0xfa>
1000aa1e:	2c00      	cmp	r4, #0
1000aa20:	d050      	beq.n	1000aac4 <__aeabi_dadd+0x3e8>
1000aa22:	4c19      	ldr	r4, [pc, #100]	; (1000aa88 <__aeabi_dadd+0x3ac>)
1000aa24:	42a2      	cmp	r2, r4
1000aa26:	d100      	bne.n	1000aa2a <__aeabi_dadd+0x34e>
1000aa28:	e0a8      	b.n	1000ab7c <__aeabi_dadd+0x4a0>
1000aa2a:	2480      	movs	r4, #128	; 0x80
1000aa2c:	0424      	lsls	r4, r4, #16
1000aa2e:	4240      	negs	r0, r0
1000aa30:	4327      	orrs	r7, r4
1000aa32:	2838      	cmp	r0, #56	; 0x38
1000aa34:	dd00      	ble.n	1000aa38 <__aeabi_dadd+0x35c>
1000aa36:	e0d9      	b.n	1000abec <__aeabi_dadd+0x510>
1000aa38:	281f      	cmp	r0, #31
1000aa3a:	dd00      	ble.n	1000aa3e <__aeabi_dadd+0x362>
1000aa3c:	e139      	b.n	1000acb2 <__aeabi_dadd+0x5d6>
1000aa3e:	2420      	movs	r4, #32
1000aa40:	1c3e      	adds	r6, r7, #0
1000aa42:	1a24      	subs	r4, r4, r0
1000aa44:	40a6      	lsls	r6, r4
1000aa46:	46b0      	mov	r8, r6
1000aa48:	1c2e      	adds	r6, r5, #0
1000aa4a:	46a1      	mov	r9, r4
1000aa4c:	40c6      	lsrs	r6, r0
1000aa4e:	4644      	mov	r4, r8
1000aa50:	4326      	orrs	r6, r4
1000aa52:	464c      	mov	r4, r9
1000aa54:	40a5      	lsls	r5, r4
1000aa56:	1e6c      	subs	r4, r5, #1
1000aa58:	41a5      	sbcs	r5, r4
1000aa5a:	40c7      	lsrs	r7, r0
1000aa5c:	4335      	orrs	r5, r6
1000aa5e:	4660      	mov	r0, ip
1000aa60:	1b45      	subs	r5, r0, r5
1000aa62:	1bcf      	subs	r7, r1, r7
1000aa64:	45ac      	cmp	ip, r5
1000aa66:	4189      	sbcs	r1, r1
1000aa68:	4249      	negs	r1, r1
1000aa6a:	1a7f      	subs	r7, r7, r1
1000aa6c:	1c14      	adds	r4, r2, #0
1000aa6e:	4698      	mov	r8, r3
1000aa70:	e6b8      	b.n	1000a7e4 <__aeabi_dadd+0x108>
1000aa72:	464b      	mov	r3, r9
1000aa74:	464d      	mov	r5, r9
1000aa76:	4333      	orrs	r3, r6
1000aa78:	d000      	beq.n	1000aa7c <__aeabi_dadd+0x3a0>
1000aa7a:	e6b8      	b.n	1000a7ee <__aeabi_dadd+0x112>
1000aa7c:	2600      	movs	r6, #0
1000aa7e:	2700      	movs	r7, #0
1000aa80:	2400      	movs	r4, #0
1000aa82:	2500      	movs	r5, #0
1000aa84:	e6e4      	b.n	1000a850 <__aeabi_dadd+0x174>
1000aa86:	46c0      	nop			; (mov r8, r8)
1000aa88:	000007ff 	.word	0x000007ff
1000aa8c:	ff7fffff 	.word	0xff7fffff
1000aa90:	800fffff 	.word	0x800fffff
1000aa94:	2b1f      	cmp	r3, #31
1000aa96:	dc5b      	bgt.n	1000ab50 <__aeabi_dadd+0x474>
1000aa98:	2220      	movs	r2, #32
1000aa9a:	1c08      	adds	r0, r1, #0
1000aa9c:	1ad2      	subs	r2, r2, r3
1000aa9e:	4090      	lsls	r0, r2
1000aaa0:	4681      	mov	r9, r0
1000aaa2:	4660      	mov	r0, ip
1000aaa4:	4692      	mov	sl, r2
1000aaa6:	40d8      	lsrs	r0, r3
1000aaa8:	464a      	mov	r2, r9
1000aaaa:	4310      	orrs	r0, r2
1000aaac:	4681      	mov	r9, r0
1000aaae:	4652      	mov	r2, sl
1000aab0:	4660      	mov	r0, ip
1000aab2:	4090      	lsls	r0, r2
1000aab4:	1c02      	adds	r2, r0, #0
1000aab6:	1e50      	subs	r0, r2, #1
1000aab8:	4182      	sbcs	r2, r0
1000aaba:	4648      	mov	r0, r9
1000aabc:	4310      	orrs	r0, r2
1000aabe:	1c0a      	adds	r2, r1, #0
1000aac0:	40da      	lsrs	r2, r3
1000aac2:	e6e7      	b.n	1000a894 <__aeabi_dadd+0x1b8>
1000aac4:	1c3c      	adds	r4, r7, #0
1000aac6:	432c      	orrs	r4, r5
1000aac8:	d058      	beq.n	1000ab7c <__aeabi_dadd+0x4a0>
1000aaca:	43c0      	mvns	r0, r0
1000aacc:	2800      	cmp	r0, #0
1000aace:	d151      	bne.n	1000ab74 <__aeabi_dadd+0x498>
1000aad0:	4660      	mov	r0, ip
1000aad2:	1b45      	subs	r5, r0, r5
1000aad4:	45ac      	cmp	ip, r5
1000aad6:	4180      	sbcs	r0, r0
1000aad8:	1bcf      	subs	r7, r1, r7
1000aada:	4240      	negs	r0, r0
1000aadc:	1a3f      	subs	r7, r7, r0
1000aade:	1c14      	adds	r4, r2, #0
1000aae0:	4698      	mov	r8, r3
1000aae2:	e67f      	b.n	1000a7e4 <__aeabi_dadd+0x108>
1000aae4:	4a8f      	ldr	r2, [pc, #572]	; (1000ad24 <__aeabi_dadd+0x648>)
1000aae6:	4294      	cmp	r4, r2
1000aae8:	d000      	beq.n	1000aaec <__aeabi_dadd+0x410>
1000aaea:	e6ca      	b.n	1000a882 <__aeabi_dadd+0x1a6>
1000aaec:	e61e      	b.n	1000a72c <__aeabi_dadd+0x50>
1000aaee:	2600      	movs	r6, #0
1000aaf0:	e77d      	b.n	1000a9ee <__aeabi_dadd+0x312>
1000aaf2:	2300      	movs	r3, #0
1000aaf4:	e78c      	b.n	1000aa10 <__aeabi_dadd+0x334>
1000aaf6:	1c3b      	adds	r3, r7, #0
1000aaf8:	432b      	orrs	r3, r5
1000aafa:	2c00      	cmp	r4, #0
1000aafc:	d000      	beq.n	1000ab00 <__aeabi_dadd+0x424>
1000aafe:	e0bd      	b.n	1000ac7c <__aeabi_dadd+0x5a0>
1000ab00:	2b00      	cmp	r3, #0
1000ab02:	d100      	bne.n	1000ab06 <__aeabi_dadd+0x42a>
1000ab04:	e0f5      	b.n	1000acf2 <__aeabi_dadd+0x616>
1000ab06:	4663      	mov	r3, ip
1000ab08:	430b      	orrs	r3, r1
1000ab0a:	d100      	bne.n	1000ab0e <__aeabi_dadd+0x432>
1000ab0c:	e60e      	b.n	1000a72c <__aeabi_dadd+0x50>
1000ab0e:	4663      	mov	r3, ip
1000ab10:	195b      	adds	r3, r3, r5
1000ab12:	42ab      	cmp	r3, r5
1000ab14:	4180      	sbcs	r0, r0
1000ab16:	19ca      	adds	r2, r1, r7
1000ab18:	4240      	negs	r0, r0
1000ab1a:	1817      	adds	r7, r2, r0
1000ab1c:	023a      	lsls	r2, r7, #8
1000ab1e:	d400      	bmi.n	1000ab22 <__aeabi_dadd+0x446>
1000ab20:	e0fc      	b.n	1000ad1c <__aeabi_dadd+0x640>
1000ab22:	4a81      	ldr	r2, [pc, #516]	; (1000ad28 <__aeabi_dadd+0x64c>)
1000ab24:	1c1d      	adds	r5, r3, #0
1000ab26:	4017      	ands	r7, r2
1000ab28:	3401      	adds	r4, #1
1000ab2a:	e5ff      	b.n	1000a72c <__aeabi_dadd+0x50>
1000ab2c:	1c3a      	adds	r2, r7, #0
1000ab2e:	432a      	orrs	r2, r5
1000ab30:	2c00      	cmp	r4, #0
1000ab32:	d151      	bne.n	1000abd8 <__aeabi_dadd+0x4fc>
1000ab34:	2a00      	cmp	r2, #0
1000ab36:	d000      	beq.n	1000ab3a <__aeabi_dadd+0x45e>
1000ab38:	e085      	b.n	1000ac46 <__aeabi_dadd+0x56a>
1000ab3a:	4662      	mov	r2, ip
1000ab3c:	430a      	orrs	r2, r1
1000ab3e:	d003      	beq.n	1000ab48 <__aeabi_dadd+0x46c>
1000ab40:	1c0f      	adds	r7, r1, #0
1000ab42:	4665      	mov	r5, ip
1000ab44:	4698      	mov	r8, r3
1000ab46:	e5f1      	b.n	1000a72c <__aeabi_dadd+0x50>
1000ab48:	2600      	movs	r6, #0
1000ab4a:	2700      	movs	r7, #0
1000ab4c:	2500      	movs	r5, #0
1000ab4e:	e67f      	b.n	1000a850 <__aeabi_dadd+0x174>
1000ab50:	1c18      	adds	r0, r3, #0
1000ab52:	1c0a      	adds	r2, r1, #0
1000ab54:	3820      	subs	r0, #32
1000ab56:	40c2      	lsrs	r2, r0
1000ab58:	2b20      	cmp	r3, #32
1000ab5a:	d100      	bne.n	1000ab5e <__aeabi_dadd+0x482>
1000ab5c:	e0a7      	b.n	1000acae <__aeabi_dadd+0x5d2>
1000ab5e:	2040      	movs	r0, #64	; 0x40
1000ab60:	1ac0      	subs	r0, r0, r3
1000ab62:	4081      	lsls	r1, r0
1000ab64:	1c08      	adds	r0, r1, #0
1000ab66:	4663      	mov	r3, ip
1000ab68:	4318      	orrs	r0, r3
1000ab6a:	1e41      	subs	r1, r0, #1
1000ab6c:	4188      	sbcs	r0, r1
1000ab6e:	4310      	orrs	r0, r2
1000ab70:	2200      	movs	r2, #0
1000ab72:	e68f      	b.n	1000a894 <__aeabi_dadd+0x1b8>
1000ab74:	4c6b      	ldr	r4, [pc, #428]	; (1000ad24 <__aeabi_dadd+0x648>)
1000ab76:	42a2      	cmp	r2, r4
1000ab78:	d000      	beq.n	1000ab7c <__aeabi_dadd+0x4a0>
1000ab7a:	e75a      	b.n	1000aa32 <__aeabi_dadd+0x356>
1000ab7c:	1c0f      	adds	r7, r1, #0
1000ab7e:	4665      	mov	r5, ip
1000ab80:	1c14      	adds	r4, r2, #0
1000ab82:	4698      	mov	r8, r3
1000ab84:	e5d2      	b.n	1000a72c <__aeabi_dadd+0x50>
1000ab86:	2c00      	cmp	r4, #0
1000ab88:	d13a      	bne.n	1000ac00 <__aeabi_dadd+0x524>
1000ab8a:	1c38      	adds	r0, r7, #0
1000ab8c:	4328      	orrs	r0, r5
1000ab8e:	d071      	beq.n	1000ac74 <__aeabi_dadd+0x598>
1000ab90:	43db      	mvns	r3, r3
1000ab92:	2b00      	cmp	r3, #0
1000ab94:	d018      	beq.n	1000abc8 <__aeabi_dadd+0x4ec>
1000ab96:	4863      	ldr	r0, [pc, #396]	; (1000ad24 <__aeabi_dadd+0x648>)
1000ab98:	4282      	cmp	r2, r0
1000ab9a:	d06b      	beq.n	1000ac74 <__aeabi_dadd+0x598>
1000ab9c:	2b38      	cmp	r3, #56	; 0x38
1000ab9e:	dd00      	ble.n	1000aba2 <__aeabi_dadd+0x4c6>
1000aba0:	e09d      	b.n	1000acde <__aeabi_dadd+0x602>
1000aba2:	2b1f      	cmp	r3, #31
1000aba4:	dd00      	ble.n	1000aba8 <__aeabi_dadd+0x4cc>
1000aba6:	e0a7      	b.n	1000acf8 <__aeabi_dadd+0x61c>
1000aba8:	2020      	movs	r0, #32
1000abaa:	1c3c      	adds	r4, r7, #0
1000abac:	1ac0      	subs	r0, r0, r3
1000abae:	4084      	lsls	r4, r0
1000abb0:	46a1      	mov	r9, r4
1000abb2:	1c2c      	adds	r4, r5, #0
1000abb4:	4682      	mov	sl, r0
1000abb6:	40dc      	lsrs	r4, r3
1000abb8:	4648      	mov	r0, r9
1000abba:	4304      	orrs	r4, r0
1000abbc:	4650      	mov	r0, sl
1000abbe:	4085      	lsls	r5, r0
1000abc0:	1e68      	subs	r0, r5, #1
1000abc2:	4185      	sbcs	r5, r0
1000abc4:	40df      	lsrs	r7, r3
1000abc6:	4325      	orrs	r5, r4
1000abc8:	4465      	add	r5, ip
1000abca:	4565      	cmp	r5, ip
1000abcc:	419b      	sbcs	r3, r3
1000abce:	187f      	adds	r7, r7, r1
1000abd0:	425b      	negs	r3, r3
1000abd2:	18ff      	adds	r7, r7, r3
1000abd4:	1c14      	adds	r4, r2, #0
1000abd6:	e664      	b.n	1000a8a2 <__aeabi_dadd+0x1c6>
1000abd8:	2a00      	cmp	r2, #0
1000abda:	d119      	bne.n	1000ac10 <__aeabi_dadd+0x534>
1000abdc:	4662      	mov	r2, ip
1000abde:	430a      	orrs	r2, r1
1000abe0:	d077      	beq.n	1000acd2 <__aeabi_dadd+0x5f6>
1000abe2:	1c0f      	adds	r7, r1, #0
1000abe4:	4665      	mov	r5, ip
1000abe6:	4698      	mov	r8, r3
1000abe8:	4c4e      	ldr	r4, [pc, #312]	; (1000ad24 <__aeabi_dadd+0x648>)
1000abea:	e59f      	b.n	1000a72c <__aeabi_dadd+0x50>
1000abec:	433d      	orrs	r5, r7
1000abee:	1e6f      	subs	r7, r5, #1
1000abf0:	41bd      	sbcs	r5, r7
1000abf2:	2700      	movs	r7, #0
1000abf4:	b2ed      	uxtb	r5, r5
1000abf6:	e732      	b.n	1000aa5e <__aeabi_dadd+0x382>
1000abf8:	1c04      	adds	r4, r0, #0
1000abfa:	2700      	movs	r7, #0
1000abfc:	2500      	movs	r5, #0
1000abfe:	e627      	b.n	1000a850 <__aeabi_dadd+0x174>
1000ac00:	4848      	ldr	r0, [pc, #288]	; (1000ad24 <__aeabi_dadd+0x648>)
1000ac02:	4282      	cmp	r2, r0
1000ac04:	d036      	beq.n	1000ac74 <__aeabi_dadd+0x598>
1000ac06:	2080      	movs	r0, #128	; 0x80
1000ac08:	0400      	lsls	r0, r0, #16
1000ac0a:	425b      	negs	r3, r3
1000ac0c:	4307      	orrs	r7, r0
1000ac0e:	e7c5      	b.n	1000ab9c <__aeabi_dadd+0x4c0>
1000ac10:	4662      	mov	r2, ip
1000ac12:	430a      	orrs	r2, r1
1000ac14:	d049      	beq.n	1000acaa <__aeabi_dadd+0x5ce>
1000ac16:	2480      	movs	r4, #128	; 0x80
1000ac18:	08ed      	lsrs	r5, r5, #3
1000ac1a:	0778      	lsls	r0, r7, #29
1000ac1c:	08fa      	lsrs	r2, r7, #3
1000ac1e:	0324      	lsls	r4, r4, #12
1000ac20:	4328      	orrs	r0, r5
1000ac22:	4222      	tst	r2, r4
1000ac24:	d009      	beq.n	1000ac3a <__aeabi_dadd+0x55e>
1000ac26:	08ce      	lsrs	r6, r1, #3
1000ac28:	4226      	tst	r6, r4
1000ac2a:	d106      	bne.n	1000ac3a <__aeabi_dadd+0x55e>
1000ac2c:	4662      	mov	r2, ip
1000ac2e:	074f      	lsls	r7, r1, #29
1000ac30:	1c38      	adds	r0, r7, #0
1000ac32:	08d2      	lsrs	r2, r2, #3
1000ac34:	4310      	orrs	r0, r2
1000ac36:	4698      	mov	r8, r3
1000ac38:	1c32      	adds	r2, r6, #0
1000ac3a:	00d2      	lsls	r2, r2, #3
1000ac3c:	0f47      	lsrs	r7, r0, #29
1000ac3e:	4317      	orrs	r7, r2
1000ac40:	00c5      	lsls	r5, r0, #3
1000ac42:	4c38      	ldr	r4, [pc, #224]	; (1000ad24 <__aeabi_dadd+0x648>)
1000ac44:	e572      	b.n	1000a72c <__aeabi_dadd+0x50>
1000ac46:	4662      	mov	r2, ip
1000ac48:	430a      	orrs	r2, r1
1000ac4a:	d100      	bne.n	1000ac4e <__aeabi_dadd+0x572>
1000ac4c:	e56e      	b.n	1000a72c <__aeabi_dadd+0x50>
1000ac4e:	4662      	mov	r2, ip
1000ac50:	1aae      	subs	r6, r5, r2
1000ac52:	42b5      	cmp	r5, r6
1000ac54:	4192      	sbcs	r2, r2
1000ac56:	1a78      	subs	r0, r7, r1
1000ac58:	4252      	negs	r2, r2
1000ac5a:	1a82      	subs	r2, r0, r2
1000ac5c:	0210      	lsls	r0, r2, #8
1000ac5e:	d400      	bmi.n	1000ac62 <__aeabi_dadd+0x586>
1000ac60:	e655      	b.n	1000a90e <__aeabi_dadd+0x232>
1000ac62:	4662      	mov	r2, ip
1000ac64:	1b55      	subs	r5, r2, r5
1000ac66:	45ac      	cmp	ip, r5
1000ac68:	4180      	sbcs	r0, r0
1000ac6a:	1bca      	subs	r2, r1, r7
1000ac6c:	4240      	negs	r0, r0
1000ac6e:	1a17      	subs	r7, r2, r0
1000ac70:	4698      	mov	r8, r3
1000ac72:	e55b      	b.n	1000a72c <__aeabi_dadd+0x50>
1000ac74:	1c0f      	adds	r7, r1, #0
1000ac76:	4665      	mov	r5, ip
1000ac78:	1c14      	adds	r4, r2, #0
1000ac7a:	e557      	b.n	1000a72c <__aeabi_dadd+0x50>
1000ac7c:	2b00      	cmp	r3, #0
1000ac7e:	d034      	beq.n	1000acea <__aeabi_dadd+0x60e>
1000ac80:	4663      	mov	r3, ip
1000ac82:	430b      	orrs	r3, r1
1000ac84:	d011      	beq.n	1000acaa <__aeabi_dadd+0x5ce>
1000ac86:	2480      	movs	r4, #128	; 0x80
1000ac88:	08ed      	lsrs	r5, r5, #3
1000ac8a:	0778      	lsls	r0, r7, #29
1000ac8c:	08fa      	lsrs	r2, r7, #3
1000ac8e:	0324      	lsls	r4, r4, #12
1000ac90:	4328      	orrs	r0, r5
1000ac92:	4222      	tst	r2, r4
1000ac94:	d0d1      	beq.n	1000ac3a <__aeabi_dadd+0x55e>
1000ac96:	08cb      	lsrs	r3, r1, #3
1000ac98:	4223      	tst	r3, r4
1000ac9a:	d1ce      	bne.n	1000ac3a <__aeabi_dadd+0x55e>
1000ac9c:	4662      	mov	r2, ip
1000ac9e:	074f      	lsls	r7, r1, #29
1000aca0:	1c38      	adds	r0, r7, #0
1000aca2:	08d2      	lsrs	r2, r2, #3
1000aca4:	4310      	orrs	r0, r2
1000aca6:	1c1a      	adds	r2, r3, #0
1000aca8:	e7c7      	b.n	1000ac3a <__aeabi_dadd+0x55e>
1000acaa:	4c1e      	ldr	r4, [pc, #120]	; (1000ad24 <__aeabi_dadd+0x648>)
1000acac:	e53e      	b.n	1000a72c <__aeabi_dadd+0x50>
1000acae:	2000      	movs	r0, #0
1000acb0:	e759      	b.n	1000ab66 <__aeabi_dadd+0x48a>
1000acb2:	1c04      	adds	r4, r0, #0
1000acb4:	1c3e      	adds	r6, r7, #0
1000acb6:	3c20      	subs	r4, #32
1000acb8:	40e6      	lsrs	r6, r4
1000acba:	1c34      	adds	r4, r6, #0
1000acbc:	2820      	cmp	r0, #32
1000acbe:	d02b      	beq.n	1000ad18 <__aeabi_dadd+0x63c>
1000acc0:	2640      	movs	r6, #64	; 0x40
1000acc2:	1a30      	subs	r0, r6, r0
1000acc4:	4087      	lsls	r7, r0
1000acc6:	433d      	orrs	r5, r7
1000acc8:	1e6f      	subs	r7, r5, #1
1000acca:	41bd      	sbcs	r5, r7
1000accc:	2700      	movs	r7, #0
1000acce:	4325      	orrs	r5, r4
1000acd0:	e6c5      	b.n	1000aa5e <__aeabi_dadd+0x382>
1000acd2:	2780      	movs	r7, #128	; 0x80
1000acd4:	2600      	movs	r6, #0
1000acd6:	03ff      	lsls	r7, r7, #15
1000acd8:	4c12      	ldr	r4, [pc, #72]	; (1000ad24 <__aeabi_dadd+0x648>)
1000acda:	2500      	movs	r5, #0
1000acdc:	e5b8      	b.n	1000a850 <__aeabi_dadd+0x174>
1000acde:	433d      	orrs	r5, r7
1000ace0:	1e6f      	subs	r7, r5, #1
1000ace2:	41bd      	sbcs	r5, r7
1000ace4:	2700      	movs	r7, #0
1000ace6:	b2ed      	uxtb	r5, r5
1000ace8:	e76e      	b.n	1000abc8 <__aeabi_dadd+0x4ec>
1000acea:	1c0f      	adds	r7, r1, #0
1000acec:	4665      	mov	r5, ip
1000acee:	4c0d      	ldr	r4, [pc, #52]	; (1000ad24 <__aeabi_dadd+0x648>)
1000acf0:	e51c      	b.n	1000a72c <__aeabi_dadd+0x50>
1000acf2:	1c0f      	adds	r7, r1, #0
1000acf4:	4665      	mov	r5, ip
1000acf6:	e519      	b.n	1000a72c <__aeabi_dadd+0x50>
1000acf8:	1c1c      	adds	r4, r3, #0
1000acfa:	1c38      	adds	r0, r7, #0
1000acfc:	3c20      	subs	r4, #32
1000acfe:	40e0      	lsrs	r0, r4
1000ad00:	1c04      	adds	r4, r0, #0
1000ad02:	2b20      	cmp	r3, #32
1000ad04:	d00c      	beq.n	1000ad20 <__aeabi_dadd+0x644>
1000ad06:	2040      	movs	r0, #64	; 0x40
1000ad08:	1ac3      	subs	r3, r0, r3
1000ad0a:	409f      	lsls	r7, r3
1000ad0c:	433d      	orrs	r5, r7
1000ad0e:	1e6f      	subs	r7, r5, #1
1000ad10:	41bd      	sbcs	r5, r7
1000ad12:	2700      	movs	r7, #0
1000ad14:	4325      	orrs	r5, r4
1000ad16:	e757      	b.n	1000abc8 <__aeabi_dadd+0x4ec>
1000ad18:	2700      	movs	r7, #0
1000ad1a:	e7d4      	b.n	1000acc6 <__aeabi_dadd+0x5ea>
1000ad1c:	1c1d      	adds	r5, r3, #0
1000ad1e:	e5fc      	b.n	1000a91a <__aeabi_dadd+0x23e>
1000ad20:	2700      	movs	r7, #0
1000ad22:	e7f3      	b.n	1000ad0c <__aeabi_dadd+0x630>
1000ad24:	000007ff 	.word	0x000007ff
1000ad28:	ff7fffff 	.word	0xff7fffff

1000ad2c <__aeabi_ddiv>:
1000ad2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ad2e:	465f      	mov	r7, fp
1000ad30:	4656      	mov	r6, sl
1000ad32:	464d      	mov	r5, r9
1000ad34:	4644      	mov	r4, r8
1000ad36:	b4f0      	push	{r4, r5, r6, r7}
1000ad38:	030f      	lsls	r7, r1, #12
1000ad3a:	b087      	sub	sp, #28
1000ad3c:	4698      	mov	r8, r3
1000ad3e:	004d      	lsls	r5, r1, #1
1000ad40:	0b3b      	lsrs	r3, r7, #12
1000ad42:	0fcc      	lsrs	r4, r1, #31
1000ad44:	1c06      	adds	r6, r0, #0
1000ad46:	4692      	mov	sl, r2
1000ad48:	4681      	mov	r9, r0
1000ad4a:	469b      	mov	fp, r3
1000ad4c:	0d6d      	lsrs	r5, r5, #21
1000ad4e:	9401      	str	r4, [sp, #4]
1000ad50:	d06b      	beq.n	1000ae2a <__aeabi_ddiv+0xfe>
1000ad52:	4b66      	ldr	r3, [pc, #408]	; (1000aeec <__aeabi_ddiv+0x1c0>)
1000ad54:	429d      	cmp	r5, r3
1000ad56:	d035      	beq.n	1000adc4 <__aeabi_ddiv+0x98>
1000ad58:	2780      	movs	r7, #128	; 0x80
1000ad5a:	465b      	mov	r3, fp
1000ad5c:	037f      	lsls	r7, r7, #13
1000ad5e:	431f      	orrs	r7, r3
1000ad60:	00f3      	lsls	r3, r6, #3
1000ad62:	4699      	mov	r9, r3
1000ad64:	4b62      	ldr	r3, [pc, #392]	; (1000aef0 <__aeabi_ddiv+0x1c4>)
1000ad66:	00ff      	lsls	r7, r7, #3
1000ad68:	0f40      	lsrs	r0, r0, #29
1000ad6a:	469c      	mov	ip, r3
1000ad6c:	4307      	orrs	r7, r0
1000ad6e:	2300      	movs	r3, #0
1000ad70:	46bb      	mov	fp, r7
1000ad72:	2600      	movs	r6, #0
1000ad74:	4465      	add	r5, ip
1000ad76:	9300      	str	r3, [sp, #0]
1000ad78:	4642      	mov	r2, r8
1000ad7a:	0317      	lsls	r7, r2, #12
1000ad7c:	0050      	lsls	r0, r2, #1
1000ad7e:	0fd2      	lsrs	r2, r2, #31
1000ad80:	4653      	mov	r3, sl
1000ad82:	0b3f      	lsrs	r7, r7, #12
1000ad84:	0d40      	lsrs	r0, r0, #21
1000ad86:	4690      	mov	r8, r2
1000ad88:	d100      	bne.n	1000ad8c <__aeabi_ddiv+0x60>
1000ad8a:	e072      	b.n	1000ae72 <__aeabi_ddiv+0x146>
1000ad8c:	4a57      	ldr	r2, [pc, #348]	; (1000aeec <__aeabi_ddiv+0x1c0>)
1000ad8e:	4290      	cmp	r0, r2
1000ad90:	d067      	beq.n	1000ae62 <__aeabi_ddiv+0x136>
1000ad92:	2380      	movs	r3, #128	; 0x80
1000ad94:	035b      	lsls	r3, r3, #13
1000ad96:	431f      	orrs	r7, r3
1000ad98:	4653      	mov	r3, sl
1000ad9a:	4a55      	ldr	r2, [pc, #340]	; (1000aef0 <__aeabi_ddiv+0x1c4>)
1000ad9c:	0f5b      	lsrs	r3, r3, #29
1000ad9e:	00ff      	lsls	r7, r7, #3
1000ada0:	431f      	orrs	r7, r3
1000ada2:	4694      	mov	ip, r2
1000ada4:	4653      	mov	r3, sl
1000ada6:	2100      	movs	r1, #0
1000ada8:	00db      	lsls	r3, r3, #3
1000adaa:	4460      	add	r0, ip
1000adac:	4642      	mov	r2, r8
1000adae:	4062      	eors	r2, r4
1000adb0:	4692      	mov	sl, r2
1000adb2:	1a2d      	subs	r5, r5, r0
1000adb4:	430e      	orrs	r6, r1
1000adb6:	2e0f      	cmp	r6, #15
1000adb8:	d900      	bls.n	1000adbc <__aeabi_ddiv+0x90>
1000adba:	e0a1      	b.n	1000af00 <__aeabi_ddiv+0x1d4>
1000adbc:	484d      	ldr	r0, [pc, #308]	; (1000aef4 <__aeabi_ddiv+0x1c8>)
1000adbe:	00b6      	lsls	r6, r6, #2
1000adc0:	5980      	ldr	r0, [r0, r6]
1000adc2:	4687      	mov	pc, r0
1000adc4:	465b      	mov	r3, fp
1000adc6:	431e      	orrs	r6, r3
1000adc8:	d000      	beq.n	1000adcc <__aeabi_ddiv+0xa0>
1000adca:	e076      	b.n	1000aeba <__aeabi_ddiv+0x18e>
1000adcc:	2300      	movs	r3, #0
1000adce:	469b      	mov	fp, r3
1000add0:	4699      	mov	r9, r3
1000add2:	3302      	adds	r3, #2
1000add4:	2608      	movs	r6, #8
1000add6:	9300      	str	r3, [sp, #0]
1000add8:	e7ce      	b.n	1000ad78 <__aeabi_ddiv+0x4c>
1000adda:	4699      	mov	r9, r3
1000addc:	4643      	mov	r3, r8
1000adde:	46bb      	mov	fp, r7
1000ade0:	9301      	str	r3, [sp, #4]
1000ade2:	9100      	str	r1, [sp, #0]
1000ade4:	9b00      	ldr	r3, [sp, #0]
1000ade6:	2b02      	cmp	r3, #2
1000ade8:	d16b      	bne.n	1000aec2 <__aeabi_ddiv+0x196>
1000adea:	9b01      	ldr	r3, [sp, #4]
1000adec:	469a      	mov	sl, r3
1000adee:	2100      	movs	r1, #0
1000adf0:	4653      	mov	r3, sl
1000adf2:	2201      	movs	r2, #1
1000adf4:	2700      	movs	r7, #0
1000adf6:	4689      	mov	r9, r1
1000adf8:	401a      	ands	r2, r3
1000adfa:	4b3c      	ldr	r3, [pc, #240]	; (1000aeec <__aeabi_ddiv+0x1c0>)
1000adfc:	2100      	movs	r1, #0
1000adfe:	033f      	lsls	r7, r7, #12
1000ae00:	0d0c      	lsrs	r4, r1, #20
1000ae02:	0524      	lsls	r4, r4, #20
1000ae04:	0b3f      	lsrs	r7, r7, #12
1000ae06:	4327      	orrs	r7, r4
1000ae08:	4c3b      	ldr	r4, [pc, #236]	; (1000aef8 <__aeabi_ddiv+0x1cc>)
1000ae0a:	051b      	lsls	r3, r3, #20
1000ae0c:	4027      	ands	r7, r4
1000ae0e:	431f      	orrs	r7, r3
1000ae10:	007f      	lsls	r7, r7, #1
1000ae12:	07d2      	lsls	r2, r2, #31
1000ae14:	087f      	lsrs	r7, r7, #1
1000ae16:	4317      	orrs	r7, r2
1000ae18:	4648      	mov	r0, r9
1000ae1a:	1c39      	adds	r1, r7, #0
1000ae1c:	b007      	add	sp, #28
1000ae1e:	bc3c      	pop	{r2, r3, r4, r5}
1000ae20:	4690      	mov	r8, r2
1000ae22:	4699      	mov	r9, r3
1000ae24:	46a2      	mov	sl, r4
1000ae26:	46ab      	mov	fp, r5
1000ae28:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae2a:	4303      	orrs	r3, r0
1000ae2c:	d03e      	beq.n	1000aeac <__aeabi_ddiv+0x180>
1000ae2e:	465b      	mov	r3, fp
1000ae30:	2b00      	cmp	r3, #0
1000ae32:	d100      	bne.n	1000ae36 <__aeabi_ddiv+0x10a>
1000ae34:	e19c      	b.n	1000b170 <__aeabi_ddiv+0x444>
1000ae36:	4658      	mov	r0, fp
1000ae38:	f7fe fd14 	bl	10009864 <__clzsi2>
1000ae3c:	2328      	movs	r3, #40	; 0x28
1000ae3e:	1c31      	adds	r1, r6, #0
1000ae40:	1a1b      	subs	r3, r3, r0
1000ae42:	1c02      	adds	r2, r0, #0
1000ae44:	465f      	mov	r7, fp
1000ae46:	40d9      	lsrs	r1, r3
1000ae48:	3a08      	subs	r2, #8
1000ae4a:	4097      	lsls	r7, r2
1000ae4c:	1c0b      	adds	r3, r1, #0
1000ae4e:	4096      	lsls	r6, r2
1000ae50:	433b      	orrs	r3, r7
1000ae52:	469b      	mov	fp, r3
1000ae54:	46b1      	mov	r9, r6
1000ae56:	2300      	movs	r3, #0
1000ae58:	4d28      	ldr	r5, [pc, #160]	; (1000aefc <__aeabi_ddiv+0x1d0>)
1000ae5a:	2600      	movs	r6, #0
1000ae5c:	1a2d      	subs	r5, r5, r0
1000ae5e:	9300      	str	r3, [sp, #0]
1000ae60:	e78a      	b.n	1000ad78 <__aeabi_ddiv+0x4c>
1000ae62:	4652      	mov	r2, sl
1000ae64:	2103      	movs	r1, #3
1000ae66:	433a      	orrs	r2, r7
1000ae68:	d1a0      	bne.n	1000adac <__aeabi_ddiv+0x80>
1000ae6a:	2700      	movs	r7, #0
1000ae6c:	2300      	movs	r3, #0
1000ae6e:	2102      	movs	r1, #2
1000ae70:	e79c      	b.n	1000adac <__aeabi_ddiv+0x80>
1000ae72:	4652      	mov	r2, sl
1000ae74:	433a      	orrs	r2, r7
1000ae76:	d015      	beq.n	1000aea4 <__aeabi_ddiv+0x178>
1000ae78:	2f00      	cmp	r7, #0
1000ae7a:	d100      	bne.n	1000ae7e <__aeabi_ddiv+0x152>
1000ae7c:	e185      	b.n	1000b18a <__aeabi_ddiv+0x45e>
1000ae7e:	1c38      	adds	r0, r7, #0
1000ae80:	f7fe fcf0 	bl	10009864 <__clzsi2>
1000ae84:	1c02      	adds	r2, r0, #0
1000ae86:	2128      	movs	r1, #40	; 0x28
1000ae88:	4650      	mov	r0, sl
1000ae8a:	1a89      	subs	r1, r1, r2
1000ae8c:	1c13      	adds	r3, r2, #0
1000ae8e:	40c8      	lsrs	r0, r1
1000ae90:	4651      	mov	r1, sl
1000ae92:	3b08      	subs	r3, #8
1000ae94:	4099      	lsls	r1, r3
1000ae96:	409f      	lsls	r7, r3
1000ae98:	1c0b      	adds	r3, r1, #0
1000ae9a:	4307      	orrs	r7, r0
1000ae9c:	4817      	ldr	r0, [pc, #92]	; (1000aefc <__aeabi_ddiv+0x1d0>)
1000ae9e:	2100      	movs	r1, #0
1000aea0:	1a80      	subs	r0, r0, r2
1000aea2:	e783      	b.n	1000adac <__aeabi_ddiv+0x80>
1000aea4:	2700      	movs	r7, #0
1000aea6:	2300      	movs	r3, #0
1000aea8:	2101      	movs	r1, #1
1000aeaa:	e77f      	b.n	1000adac <__aeabi_ddiv+0x80>
1000aeac:	2300      	movs	r3, #0
1000aeae:	469b      	mov	fp, r3
1000aeb0:	4699      	mov	r9, r3
1000aeb2:	3301      	adds	r3, #1
1000aeb4:	2604      	movs	r6, #4
1000aeb6:	9300      	str	r3, [sp, #0]
1000aeb8:	e75e      	b.n	1000ad78 <__aeabi_ddiv+0x4c>
1000aeba:	2303      	movs	r3, #3
1000aebc:	260c      	movs	r6, #12
1000aebe:	9300      	str	r3, [sp, #0]
1000aec0:	e75a      	b.n	1000ad78 <__aeabi_ddiv+0x4c>
1000aec2:	2b03      	cmp	r3, #3
1000aec4:	d100      	bne.n	1000aec8 <__aeabi_ddiv+0x19c>
1000aec6:	e23c      	b.n	1000b342 <__aeabi_ddiv+0x616>
1000aec8:	2b01      	cmp	r3, #1
1000aeca:	d000      	beq.n	1000aece <__aeabi_ddiv+0x1a2>
1000aecc:	e1bf      	b.n	1000b24e <__aeabi_ddiv+0x522>
1000aece:	1c1a      	adds	r2, r3, #0
1000aed0:	9b01      	ldr	r3, [sp, #4]
1000aed2:	401a      	ands	r2, r3
1000aed4:	2100      	movs	r1, #0
1000aed6:	2300      	movs	r3, #0
1000aed8:	2700      	movs	r7, #0
1000aeda:	4689      	mov	r9, r1
1000aedc:	e78e      	b.n	1000adfc <__aeabi_ddiv+0xd0>
1000aede:	2300      	movs	r3, #0
1000aee0:	2780      	movs	r7, #128	; 0x80
1000aee2:	4699      	mov	r9, r3
1000aee4:	2200      	movs	r2, #0
1000aee6:	033f      	lsls	r7, r7, #12
1000aee8:	4b00      	ldr	r3, [pc, #0]	; (1000aeec <__aeabi_ddiv+0x1c0>)
1000aeea:	e787      	b.n	1000adfc <__aeabi_ddiv+0xd0>
1000aeec:	000007ff 	.word	0x000007ff
1000aef0:	fffffc01 	.word	0xfffffc01
1000aef4:	1000cee0 	.word	0x1000cee0
1000aef8:	800fffff 	.word	0x800fffff
1000aefc:	fffffc0d 	.word	0xfffffc0d
1000af00:	45bb      	cmp	fp, r7
1000af02:	d900      	bls.n	1000af06 <__aeabi_ddiv+0x1da>
1000af04:	e151      	b.n	1000b1aa <__aeabi_ddiv+0x47e>
1000af06:	d100      	bne.n	1000af0a <__aeabi_ddiv+0x1de>
1000af08:	e14c      	b.n	1000b1a4 <__aeabi_ddiv+0x478>
1000af0a:	464a      	mov	r2, r9
1000af0c:	9203      	str	r2, [sp, #12]
1000af0e:	2200      	movs	r2, #0
1000af10:	465c      	mov	r4, fp
1000af12:	4690      	mov	r8, r2
1000af14:	3d01      	subs	r5, #1
1000af16:	0e18      	lsrs	r0, r3, #24
1000af18:	023f      	lsls	r7, r7, #8
1000af1a:	4338      	orrs	r0, r7
1000af1c:	021b      	lsls	r3, r3, #8
1000af1e:	9301      	str	r3, [sp, #4]
1000af20:	0c03      	lsrs	r3, r0, #16
1000af22:	4699      	mov	r9, r3
1000af24:	0403      	lsls	r3, r0, #16
1000af26:	0c1b      	lsrs	r3, r3, #16
1000af28:	4649      	mov	r1, r9
1000af2a:	1c06      	adds	r6, r0, #0
1000af2c:	1c20      	adds	r0, r4, #0
1000af2e:	1c1f      	adds	r7, r3, #0
1000af30:	9300      	str	r3, [sp, #0]
1000af32:	f7f7 fb71 	bl	10002618 <__aeabi_uidiv>
1000af36:	1c02      	adds	r2, r0, #0
1000af38:	437a      	muls	r2, r7
1000af3a:	9002      	str	r0, [sp, #8]
1000af3c:	4649      	mov	r1, r9
1000af3e:	1c20      	adds	r0, r4, #0
1000af40:	1c17      	adds	r7, r2, #0
1000af42:	f7f7 fbb9 	bl	100026b8 <__aeabi_uidivmod>
1000af46:	9b03      	ldr	r3, [sp, #12]
1000af48:	0409      	lsls	r1, r1, #16
1000af4a:	0c1b      	lsrs	r3, r3, #16
1000af4c:	4319      	orrs	r1, r3
1000af4e:	428f      	cmp	r7, r1
1000af50:	d90c      	bls.n	1000af6c <__aeabi_ddiv+0x240>
1000af52:	9b02      	ldr	r3, [sp, #8]
1000af54:	1989      	adds	r1, r1, r6
1000af56:	3b01      	subs	r3, #1
1000af58:	428e      	cmp	r6, r1
1000af5a:	d900      	bls.n	1000af5e <__aeabi_ddiv+0x232>
1000af5c:	e152      	b.n	1000b204 <__aeabi_ddiv+0x4d8>
1000af5e:	428f      	cmp	r7, r1
1000af60:	d800      	bhi.n	1000af64 <__aeabi_ddiv+0x238>
1000af62:	e14f      	b.n	1000b204 <__aeabi_ddiv+0x4d8>
1000af64:	9b02      	ldr	r3, [sp, #8]
1000af66:	1989      	adds	r1, r1, r6
1000af68:	3b02      	subs	r3, #2
1000af6a:	9302      	str	r3, [sp, #8]
1000af6c:	1bcc      	subs	r4, r1, r7
1000af6e:	1c20      	adds	r0, r4, #0
1000af70:	4649      	mov	r1, r9
1000af72:	f7f7 fb51 	bl	10002618 <__aeabi_uidiv>
1000af76:	9f00      	ldr	r7, [sp, #0]
1000af78:	4683      	mov	fp, r0
1000af7a:	4347      	muls	r7, r0
1000af7c:	4649      	mov	r1, r9
1000af7e:	1c20      	adds	r0, r4, #0
1000af80:	f7f7 fb9a 	bl	100026b8 <__aeabi_uidivmod>
1000af84:	9a03      	ldr	r2, [sp, #12]
1000af86:	040b      	lsls	r3, r1, #16
1000af88:	0414      	lsls	r4, r2, #16
1000af8a:	0c24      	lsrs	r4, r4, #16
1000af8c:	4323      	orrs	r3, r4
1000af8e:	429f      	cmp	r7, r3
1000af90:	d90d      	bls.n	1000afae <__aeabi_ddiv+0x282>
1000af92:	465a      	mov	r2, fp
1000af94:	199b      	adds	r3, r3, r6
1000af96:	3a01      	subs	r2, #1
1000af98:	429e      	cmp	r6, r3
1000af9a:	d900      	bls.n	1000af9e <__aeabi_ddiv+0x272>
1000af9c:	e130      	b.n	1000b200 <__aeabi_ddiv+0x4d4>
1000af9e:	429f      	cmp	r7, r3
1000afa0:	d800      	bhi.n	1000afa4 <__aeabi_ddiv+0x278>
1000afa2:	e12d      	b.n	1000b200 <__aeabi_ddiv+0x4d4>
1000afa4:	2202      	movs	r2, #2
1000afa6:	4252      	negs	r2, r2
1000afa8:	4694      	mov	ip, r2
1000afaa:	199b      	adds	r3, r3, r6
1000afac:	44e3      	add	fp, ip
1000afae:	9a02      	ldr	r2, [sp, #8]
1000afb0:	1bdb      	subs	r3, r3, r7
1000afb2:	0417      	lsls	r7, r2, #16
1000afb4:	465a      	mov	r2, fp
1000afb6:	433a      	orrs	r2, r7
1000afb8:	4693      	mov	fp, r2
1000afba:	9c01      	ldr	r4, [sp, #4]
1000afbc:	0c17      	lsrs	r7, r2, #16
1000afbe:	0c22      	lsrs	r2, r4, #16
1000afc0:	1c10      	adds	r0, r2, #0
1000afc2:	9204      	str	r2, [sp, #16]
1000afc4:	465a      	mov	r2, fp
1000afc6:	0411      	lsls	r1, r2, #16
1000afc8:	0422      	lsls	r2, r4, #16
1000afca:	0c12      	lsrs	r2, r2, #16
1000afcc:	1c14      	adds	r4, r2, #0
1000afce:	0c09      	lsrs	r1, r1, #16
1000afd0:	437c      	muls	r4, r7
1000afd2:	9205      	str	r2, [sp, #20]
1000afd4:	434a      	muls	r2, r1
1000afd6:	4341      	muls	r1, r0
1000afd8:	4347      	muls	r7, r0
1000afda:	1861      	adds	r1, r4, r1
1000afdc:	0c10      	lsrs	r0, r2, #16
1000afde:	1809      	adds	r1, r1, r0
1000afe0:	428c      	cmp	r4, r1
1000afe2:	d903      	bls.n	1000afec <__aeabi_ddiv+0x2c0>
1000afe4:	2080      	movs	r0, #128	; 0x80
1000afe6:	0240      	lsls	r0, r0, #9
1000afe8:	4684      	mov	ip, r0
1000afea:	4467      	add	r7, ip
1000afec:	0c0c      	lsrs	r4, r1, #16
1000afee:	0412      	lsls	r2, r2, #16
1000aff0:	0408      	lsls	r0, r1, #16
1000aff2:	0c12      	lsrs	r2, r2, #16
1000aff4:	193c      	adds	r4, r7, r4
1000aff6:	1881      	adds	r1, r0, r2
1000aff8:	42a3      	cmp	r3, r4
1000affa:	d200      	bcs.n	1000affe <__aeabi_ddiv+0x2d2>
1000affc:	e0e5      	b.n	1000b1ca <__aeabi_ddiv+0x49e>
1000affe:	d100      	bne.n	1000b002 <__aeabi_ddiv+0x2d6>
1000b000:	e0df      	b.n	1000b1c2 <__aeabi_ddiv+0x496>
1000b002:	1b1f      	subs	r7, r3, r4
1000b004:	4643      	mov	r3, r8
1000b006:	1a5c      	subs	r4, r3, r1
1000b008:	45a0      	cmp	r8, r4
1000b00a:	4192      	sbcs	r2, r2
1000b00c:	4252      	negs	r2, r2
1000b00e:	1abf      	subs	r7, r7, r2
1000b010:	42b7      	cmp	r7, r6
1000b012:	d100      	bne.n	1000b016 <__aeabi_ddiv+0x2ea>
1000b014:	e10e      	b.n	1000b234 <__aeabi_ddiv+0x508>
1000b016:	1c38      	adds	r0, r7, #0
1000b018:	4649      	mov	r1, r9
1000b01a:	f7f7 fafd 	bl	10002618 <__aeabi_uidiv>
1000b01e:	9b00      	ldr	r3, [sp, #0]
1000b020:	9002      	str	r0, [sp, #8]
1000b022:	4343      	muls	r3, r0
1000b024:	4649      	mov	r1, r9
1000b026:	1c38      	adds	r0, r7, #0
1000b028:	4698      	mov	r8, r3
1000b02a:	f7f7 fb45 	bl	100026b8 <__aeabi_uidivmod>
1000b02e:	0c23      	lsrs	r3, r4, #16
1000b030:	040f      	lsls	r7, r1, #16
1000b032:	431f      	orrs	r7, r3
1000b034:	45b8      	cmp	r8, r7
1000b036:	d90c      	bls.n	1000b052 <__aeabi_ddiv+0x326>
1000b038:	9b02      	ldr	r3, [sp, #8]
1000b03a:	19bf      	adds	r7, r7, r6
1000b03c:	3b01      	subs	r3, #1
1000b03e:	42be      	cmp	r6, r7
1000b040:	d900      	bls.n	1000b044 <__aeabi_ddiv+0x318>
1000b042:	e0fb      	b.n	1000b23c <__aeabi_ddiv+0x510>
1000b044:	45b8      	cmp	r8, r7
1000b046:	d800      	bhi.n	1000b04a <__aeabi_ddiv+0x31e>
1000b048:	e0f8      	b.n	1000b23c <__aeabi_ddiv+0x510>
1000b04a:	9b02      	ldr	r3, [sp, #8]
1000b04c:	19bf      	adds	r7, r7, r6
1000b04e:	3b02      	subs	r3, #2
1000b050:	9302      	str	r3, [sp, #8]
1000b052:	4643      	mov	r3, r8
1000b054:	1aff      	subs	r7, r7, r3
1000b056:	4649      	mov	r1, r9
1000b058:	1c38      	adds	r0, r7, #0
1000b05a:	f7f7 fadd 	bl	10002618 <__aeabi_uidiv>
1000b05e:	9b00      	ldr	r3, [sp, #0]
1000b060:	9003      	str	r0, [sp, #12]
1000b062:	4343      	muls	r3, r0
1000b064:	4649      	mov	r1, r9
1000b066:	1c38      	adds	r0, r7, #0
1000b068:	4698      	mov	r8, r3
1000b06a:	f7f7 fb25 	bl	100026b8 <__aeabi_uidivmod>
1000b06e:	0424      	lsls	r4, r4, #16
1000b070:	0409      	lsls	r1, r1, #16
1000b072:	0c24      	lsrs	r4, r4, #16
1000b074:	4321      	orrs	r1, r4
1000b076:	4588      	cmp	r8, r1
1000b078:	d90c      	bls.n	1000b094 <__aeabi_ddiv+0x368>
1000b07a:	9b03      	ldr	r3, [sp, #12]
1000b07c:	1989      	adds	r1, r1, r6
1000b07e:	3b01      	subs	r3, #1
1000b080:	428e      	cmp	r6, r1
1000b082:	d900      	bls.n	1000b086 <__aeabi_ddiv+0x35a>
1000b084:	e0dc      	b.n	1000b240 <__aeabi_ddiv+0x514>
1000b086:	4588      	cmp	r8, r1
1000b088:	d800      	bhi.n	1000b08c <__aeabi_ddiv+0x360>
1000b08a:	e0d9      	b.n	1000b240 <__aeabi_ddiv+0x514>
1000b08c:	9b03      	ldr	r3, [sp, #12]
1000b08e:	1989      	adds	r1, r1, r6
1000b090:	3b02      	subs	r3, #2
1000b092:	9303      	str	r3, [sp, #12]
1000b094:	4643      	mov	r3, r8
1000b096:	1ac9      	subs	r1, r1, r3
1000b098:	9b02      	ldr	r3, [sp, #8]
1000b09a:	9a03      	ldr	r2, [sp, #12]
1000b09c:	041b      	lsls	r3, r3, #16
1000b09e:	9c05      	ldr	r4, [sp, #20]
1000b0a0:	431a      	orrs	r2, r3
1000b0a2:	0c10      	lsrs	r0, r2, #16
1000b0a4:	0413      	lsls	r3, r2, #16
1000b0a6:	4691      	mov	r9, r2
1000b0a8:	1c22      	adds	r2, r4, #0
1000b0aa:	9f04      	ldr	r7, [sp, #16]
1000b0ac:	0c1b      	lsrs	r3, r3, #16
1000b0ae:	435a      	muls	r2, r3
1000b0b0:	4344      	muls	r4, r0
1000b0b2:	437b      	muls	r3, r7
1000b0b4:	4378      	muls	r0, r7
1000b0b6:	18e3      	adds	r3, r4, r3
1000b0b8:	0c17      	lsrs	r7, r2, #16
1000b0ba:	19db      	adds	r3, r3, r7
1000b0bc:	429c      	cmp	r4, r3
1000b0be:	d903      	bls.n	1000b0c8 <__aeabi_ddiv+0x39c>
1000b0c0:	2480      	movs	r4, #128	; 0x80
1000b0c2:	0264      	lsls	r4, r4, #9
1000b0c4:	46a4      	mov	ip, r4
1000b0c6:	4460      	add	r0, ip
1000b0c8:	0c1c      	lsrs	r4, r3, #16
1000b0ca:	0412      	lsls	r2, r2, #16
1000b0cc:	041b      	lsls	r3, r3, #16
1000b0ce:	0c12      	lsrs	r2, r2, #16
1000b0d0:	1900      	adds	r0, r0, r4
1000b0d2:	189b      	adds	r3, r3, r2
1000b0d4:	4281      	cmp	r1, r0
1000b0d6:	d200      	bcs.n	1000b0da <__aeabi_ddiv+0x3ae>
1000b0d8:	e096      	b.n	1000b208 <__aeabi_ddiv+0x4dc>
1000b0da:	d100      	bne.n	1000b0de <__aeabi_ddiv+0x3b2>
1000b0dc:	e0fc      	b.n	1000b2d8 <__aeabi_ddiv+0x5ac>
1000b0de:	464a      	mov	r2, r9
1000b0e0:	2301      	movs	r3, #1
1000b0e2:	431a      	orrs	r2, r3
1000b0e4:	4691      	mov	r9, r2
1000b0e6:	4b9b      	ldr	r3, [pc, #620]	; (1000b354 <__aeabi_ddiv+0x628>)
1000b0e8:	18eb      	adds	r3, r5, r3
1000b0ea:	2b00      	cmp	r3, #0
1000b0ec:	dc00      	bgt.n	1000b0f0 <__aeabi_ddiv+0x3c4>
1000b0ee:	e099      	b.n	1000b224 <__aeabi_ddiv+0x4f8>
1000b0f0:	464a      	mov	r2, r9
1000b0f2:	0752      	lsls	r2, r2, #29
1000b0f4:	d00a      	beq.n	1000b10c <__aeabi_ddiv+0x3e0>
1000b0f6:	220f      	movs	r2, #15
1000b0f8:	4649      	mov	r1, r9
1000b0fa:	400a      	ands	r2, r1
1000b0fc:	2a04      	cmp	r2, #4
1000b0fe:	d005      	beq.n	1000b10c <__aeabi_ddiv+0x3e0>
1000b100:	3104      	adds	r1, #4
1000b102:	4549      	cmp	r1, r9
1000b104:	4192      	sbcs	r2, r2
1000b106:	4689      	mov	r9, r1
1000b108:	4252      	negs	r2, r2
1000b10a:	4493      	add	fp, r2
1000b10c:	465a      	mov	r2, fp
1000b10e:	01d2      	lsls	r2, r2, #7
1000b110:	d506      	bpl.n	1000b120 <__aeabi_ddiv+0x3f4>
1000b112:	465a      	mov	r2, fp
1000b114:	4b90      	ldr	r3, [pc, #576]	; (1000b358 <__aeabi_ddiv+0x62c>)
1000b116:	401a      	ands	r2, r3
1000b118:	2380      	movs	r3, #128	; 0x80
1000b11a:	4693      	mov	fp, r2
1000b11c:	00db      	lsls	r3, r3, #3
1000b11e:	18eb      	adds	r3, r5, r3
1000b120:	4a8e      	ldr	r2, [pc, #568]	; (1000b35c <__aeabi_ddiv+0x630>)
1000b122:	4293      	cmp	r3, r2
1000b124:	dd00      	ble.n	1000b128 <__aeabi_ddiv+0x3fc>
1000b126:	e662      	b.n	1000adee <__aeabi_ddiv+0xc2>
1000b128:	464a      	mov	r2, r9
1000b12a:	4659      	mov	r1, fp
1000b12c:	08d2      	lsrs	r2, r2, #3
1000b12e:	0749      	lsls	r1, r1, #29
1000b130:	4311      	orrs	r1, r2
1000b132:	465a      	mov	r2, fp
1000b134:	4689      	mov	r9, r1
1000b136:	0257      	lsls	r7, r2, #9
1000b138:	4651      	mov	r1, sl
1000b13a:	2201      	movs	r2, #1
1000b13c:	055b      	lsls	r3, r3, #21
1000b13e:	0b3f      	lsrs	r7, r7, #12
1000b140:	0d5b      	lsrs	r3, r3, #21
1000b142:	400a      	ands	r2, r1
1000b144:	e65a      	b.n	1000adfc <__aeabi_ddiv+0xd0>
1000b146:	2080      	movs	r0, #128	; 0x80
1000b148:	465a      	mov	r2, fp
1000b14a:	0300      	lsls	r0, r0, #12
1000b14c:	4202      	tst	r2, r0
1000b14e:	d008      	beq.n	1000b162 <__aeabi_ddiv+0x436>
1000b150:	4207      	tst	r7, r0
1000b152:	d106      	bne.n	1000b162 <__aeabi_ddiv+0x436>
1000b154:	4307      	orrs	r7, r0
1000b156:	033f      	lsls	r7, r7, #12
1000b158:	4699      	mov	r9, r3
1000b15a:	0b3f      	lsrs	r7, r7, #12
1000b15c:	4642      	mov	r2, r8
1000b15e:	4b80      	ldr	r3, [pc, #512]	; (1000b360 <__aeabi_ddiv+0x634>)
1000b160:	e64c      	b.n	1000adfc <__aeabi_ddiv+0xd0>
1000b162:	465f      	mov	r7, fp
1000b164:	4307      	orrs	r7, r0
1000b166:	033f      	lsls	r7, r7, #12
1000b168:	0b3f      	lsrs	r7, r7, #12
1000b16a:	1c22      	adds	r2, r4, #0
1000b16c:	4b7c      	ldr	r3, [pc, #496]	; (1000b360 <__aeabi_ddiv+0x634>)
1000b16e:	e645      	b.n	1000adfc <__aeabi_ddiv+0xd0>
1000b170:	f7fe fb78 	bl	10009864 <__clzsi2>
1000b174:	1c03      	adds	r3, r0, #0
1000b176:	3020      	adds	r0, #32
1000b178:	2827      	cmp	r0, #39	; 0x27
1000b17a:	dc00      	bgt.n	1000b17e <__aeabi_ddiv+0x452>
1000b17c:	e65e      	b.n	1000ae3c <__aeabi_ddiv+0x110>
1000b17e:	3b08      	subs	r3, #8
1000b180:	409e      	lsls	r6, r3
1000b182:	2300      	movs	r3, #0
1000b184:	46b3      	mov	fp, r6
1000b186:	4699      	mov	r9, r3
1000b188:	e665      	b.n	1000ae56 <__aeabi_ddiv+0x12a>
1000b18a:	4650      	mov	r0, sl
1000b18c:	f7fe fb6a 	bl	10009864 <__clzsi2>
1000b190:	1c02      	adds	r2, r0, #0
1000b192:	3220      	adds	r2, #32
1000b194:	2a27      	cmp	r2, #39	; 0x27
1000b196:	dc00      	bgt.n	1000b19a <__aeabi_ddiv+0x46e>
1000b198:	e675      	b.n	1000ae86 <__aeabi_ddiv+0x15a>
1000b19a:	4657      	mov	r7, sl
1000b19c:	3808      	subs	r0, #8
1000b19e:	4087      	lsls	r7, r0
1000b1a0:	2300      	movs	r3, #0
1000b1a2:	e67b      	b.n	1000ae9c <__aeabi_ddiv+0x170>
1000b1a4:	4599      	cmp	r9, r3
1000b1a6:	d200      	bcs.n	1000b1aa <__aeabi_ddiv+0x47e>
1000b1a8:	e6af      	b.n	1000af0a <__aeabi_ddiv+0x1de>
1000b1aa:	465a      	mov	r2, fp
1000b1ac:	4659      	mov	r1, fp
1000b1ae:	0854      	lsrs	r4, r2, #1
1000b1b0:	464a      	mov	r2, r9
1000b1b2:	07c8      	lsls	r0, r1, #31
1000b1b4:	0852      	lsrs	r2, r2, #1
1000b1b6:	4302      	orrs	r2, r0
1000b1b8:	9203      	str	r2, [sp, #12]
1000b1ba:	464a      	mov	r2, r9
1000b1bc:	07d2      	lsls	r2, r2, #31
1000b1be:	4690      	mov	r8, r2
1000b1c0:	e6a9      	b.n	1000af16 <__aeabi_ddiv+0x1ea>
1000b1c2:	2700      	movs	r7, #0
1000b1c4:	4588      	cmp	r8, r1
1000b1c6:	d300      	bcc.n	1000b1ca <__aeabi_ddiv+0x49e>
1000b1c8:	e71c      	b.n	1000b004 <__aeabi_ddiv+0x2d8>
1000b1ca:	9f01      	ldr	r7, [sp, #4]
1000b1cc:	465a      	mov	r2, fp
1000b1ce:	46bc      	mov	ip, r7
1000b1d0:	44e0      	add	r8, ip
1000b1d2:	45b8      	cmp	r8, r7
1000b1d4:	41bf      	sbcs	r7, r7
1000b1d6:	427f      	negs	r7, r7
1000b1d8:	19bf      	adds	r7, r7, r6
1000b1da:	18ff      	adds	r7, r7, r3
1000b1dc:	3a01      	subs	r2, #1
1000b1de:	42be      	cmp	r6, r7
1000b1e0:	d206      	bcs.n	1000b1f0 <__aeabi_ddiv+0x4c4>
1000b1e2:	42bc      	cmp	r4, r7
1000b1e4:	d85f      	bhi.n	1000b2a6 <__aeabi_ddiv+0x57a>
1000b1e6:	d100      	bne.n	1000b1ea <__aeabi_ddiv+0x4be>
1000b1e8:	e09f      	b.n	1000b32a <__aeabi_ddiv+0x5fe>
1000b1ea:	1b3f      	subs	r7, r7, r4
1000b1ec:	4693      	mov	fp, r2
1000b1ee:	e709      	b.n	1000b004 <__aeabi_ddiv+0x2d8>
1000b1f0:	42b7      	cmp	r7, r6
1000b1f2:	d1fa      	bne.n	1000b1ea <__aeabi_ddiv+0x4be>
1000b1f4:	9b01      	ldr	r3, [sp, #4]
1000b1f6:	4543      	cmp	r3, r8
1000b1f8:	d9f3      	bls.n	1000b1e2 <__aeabi_ddiv+0x4b6>
1000b1fa:	1b37      	subs	r7, r6, r4
1000b1fc:	4693      	mov	fp, r2
1000b1fe:	e701      	b.n	1000b004 <__aeabi_ddiv+0x2d8>
1000b200:	4693      	mov	fp, r2
1000b202:	e6d4      	b.n	1000afae <__aeabi_ddiv+0x282>
1000b204:	9302      	str	r3, [sp, #8]
1000b206:	e6b1      	b.n	1000af6c <__aeabi_ddiv+0x240>
1000b208:	464a      	mov	r2, r9
1000b20a:	1989      	adds	r1, r1, r6
1000b20c:	3a01      	subs	r2, #1
1000b20e:	428e      	cmp	r6, r1
1000b210:	d918      	bls.n	1000b244 <__aeabi_ddiv+0x518>
1000b212:	4691      	mov	r9, r2
1000b214:	4281      	cmp	r1, r0
1000b216:	d000      	beq.n	1000b21a <__aeabi_ddiv+0x4ee>
1000b218:	e761      	b.n	1000b0de <__aeabi_ddiv+0x3b2>
1000b21a:	9a01      	ldr	r2, [sp, #4]
1000b21c:	429a      	cmp	r2, r3
1000b21e:	d000      	beq.n	1000b222 <__aeabi_ddiv+0x4f6>
1000b220:	e75d      	b.n	1000b0de <__aeabi_ddiv+0x3b2>
1000b222:	e760      	b.n	1000b0e6 <__aeabi_ddiv+0x3ba>
1000b224:	4f4f      	ldr	r7, [pc, #316]	; (1000b364 <__aeabi_ddiv+0x638>)
1000b226:	1b7f      	subs	r7, r7, r5
1000b228:	2f38      	cmp	r7, #56	; 0x38
1000b22a:	dd13      	ble.n	1000b254 <__aeabi_ddiv+0x528>
1000b22c:	2201      	movs	r2, #1
1000b22e:	4653      	mov	r3, sl
1000b230:	401a      	ands	r2, r3
1000b232:	e64f      	b.n	1000aed4 <__aeabi_ddiv+0x1a8>
1000b234:	2301      	movs	r3, #1
1000b236:	425b      	negs	r3, r3
1000b238:	4699      	mov	r9, r3
1000b23a:	e754      	b.n	1000b0e6 <__aeabi_ddiv+0x3ba>
1000b23c:	9302      	str	r3, [sp, #8]
1000b23e:	e708      	b.n	1000b052 <__aeabi_ddiv+0x326>
1000b240:	9303      	str	r3, [sp, #12]
1000b242:	e727      	b.n	1000b094 <__aeabi_ddiv+0x368>
1000b244:	4288      	cmp	r0, r1
1000b246:	d83c      	bhi.n	1000b2c2 <__aeabi_ddiv+0x596>
1000b248:	d074      	beq.n	1000b334 <__aeabi_ddiv+0x608>
1000b24a:	4691      	mov	r9, r2
1000b24c:	e747      	b.n	1000b0de <__aeabi_ddiv+0x3b2>
1000b24e:	9b01      	ldr	r3, [sp, #4]
1000b250:	469a      	mov	sl, r3
1000b252:	e748      	b.n	1000b0e6 <__aeabi_ddiv+0x3ba>
1000b254:	2f1f      	cmp	r7, #31
1000b256:	dc44      	bgt.n	1000b2e2 <__aeabi_ddiv+0x5b6>
1000b258:	4b43      	ldr	r3, [pc, #268]	; (1000b368 <__aeabi_ddiv+0x63c>)
1000b25a:	464a      	mov	r2, r9
1000b25c:	469c      	mov	ip, r3
1000b25e:	465b      	mov	r3, fp
1000b260:	4465      	add	r5, ip
1000b262:	40fa      	lsrs	r2, r7
1000b264:	40ab      	lsls	r3, r5
1000b266:	4313      	orrs	r3, r2
1000b268:	464a      	mov	r2, r9
1000b26a:	40aa      	lsls	r2, r5
1000b26c:	1c15      	adds	r5, r2, #0
1000b26e:	1e6a      	subs	r2, r5, #1
1000b270:	4195      	sbcs	r5, r2
1000b272:	465a      	mov	r2, fp
1000b274:	40fa      	lsrs	r2, r7
1000b276:	432b      	orrs	r3, r5
1000b278:	1c17      	adds	r7, r2, #0
1000b27a:	075a      	lsls	r2, r3, #29
1000b27c:	d009      	beq.n	1000b292 <__aeabi_ddiv+0x566>
1000b27e:	220f      	movs	r2, #15
1000b280:	401a      	ands	r2, r3
1000b282:	2a04      	cmp	r2, #4
1000b284:	d005      	beq.n	1000b292 <__aeabi_ddiv+0x566>
1000b286:	1d1a      	adds	r2, r3, #4
1000b288:	429a      	cmp	r2, r3
1000b28a:	419b      	sbcs	r3, r3
1000b28c:	425b      	negs	r3, r3
1000b28e:	18ff      	adds	r7, r7, r3
1000b290:	1c13      	adds	r3, r2, #0
1000b292:	023a      	lsls	r2, r7, #8
1000b294:	d53e      	bpl.n	1000b314 <__aeabi_ddiv+0x5e8>
1000b296:	4653      	mov	r3, sl
1000b298:	2201      	movs	r2, #1
1000b29a:	2100      	movs	r1, #0
1000b29c:	401a      	ands	r2, r3
1000b29e:	2700      	movs	r7, #0
1000b2a0:	2301      	movs	r3, #1
1000b2a2:	4689      	mov	r9, r1
1000b2a4:	e5aa      	b.n	1000adfc <__aeabi_ddiv+0xd0>
1000b2a6:	2302      	movs	r3, #2
1000b2a8:	425b      	negs	r3, r3
1000b2aa:	469c      	mov	ip, r3
1000b2ac:	9a01      	ldr	r2, [sp, #4]
1000b2ae:	44e3      	add	fp, ip
1000b2b0:	4694      	mov	ip, r2
1000b2b2:	44e0      	add	r8, ip
1000b2b4:	4590      	cmp	r8, r2
1000b2b6:	419b      	sbcs	r3, r3
1000b2b8:	425b      	negs	r3, r3
1000b2ba:	199b      	adds	r3, r3, r6
1000b2bc:	19df      	adds	r7, r3, r7
1000b2be:	1b3f      	subs	r7, r7, r4
1000b2c0:	e6a0      	b.n	1000b004 <__aeabi_ddiv+0x2d8>
1000b2c2:	9f01      	ldr	r7, [sp, #4]
1000b2c4:	464a      	mov	r2, r9
1000b2c6:	007c      	lsls	r4, r7, #1
1000b2c8:	42bc      	cmp	r4, r7
1000b2ca:	41bf      	sbcs	r7, r7
1000b2cc:	427f      	negs	r7, r7
1000b2ce:	19bf      	adds	r7, r7, r6
1000b2d0:	3a02      	subs	r2, #2
1000b2d2:	19c9      	adds	r1, r1, r7
1000b2d4:	9401      	str	r4, [sp, #4]
1000b2d6:	e79c      	b.n	1000b212 <__aeabi_ddiv+0x4e6>
1000b2d8:	2b00      	cmp	r3, #0
1000b2da:	d195      	bne.n	1000b208 <__aeabi_ddiv+0x4dc>
1000b2dc:	2200      	movs	r2, #0
1000b2de:	9201      	str	r2, [sp, #4]
1000b2e0:	e79b      	b.n	1000b21a <__aeabi_ddiv+0x4ee>
1000b2e2:	465a      	mov	r2, fp
1000b2e4:	4b21      	ldr	r3, [pc, #132]	; (1000b36c <__aeabi_ddiv+0x640>)
1000b2e6:	1b5b      	subs	r3, r3, r5
1000b2e8:	40da      	lsrs	r2, r3
1000b2ea:	2f20      	cmp	r7, #32
1000b2ec:	d027      	beq.n	1000b33e <__aeabi_ddiv+0x612>
1000b2ee:	4b20      	ldr	r3, [pc, #128]	; (1000b370 <__aeabi_ddiv+0x644>)
1000b2f0:	469c      	mov	ip, r3
1000b2f2:	465b      	mov	r3, fp
1000b2f4:	4465      	add	r5, ip
1000b2f6:	40ab      	lsls	r3, r5
1000b2f8:	4649      	mov	r1, r9
1000b2fa:	430b      	orrs	r3, r1
1000b2fc:	1e59      	subs	r1, r3, #1
1000b2fe:	418b      	sbcs	r3, r1
1000b300:	4313      	orrs	r3, r2
1000b302:	2207      	movs	r2, #7
1000b304:	2700      	movs	r7, #0
1000b306:	401a      	ands	r2, r3
1000b308:	d007      	beq.n	1000b31a <__aeabi_ddiv+0x5ee>
1000b30a:	220f      	movs	r2, #15
1000b30c:	2700      	movs	r7, #0
1000b30e:	401a      	ands	r2, r3
1000b310:	2a04      	cmp	r2, #4
1000b312:	d1b8      	bne.n	1000b286 <__aeabi_ddiv+0x55a>
1000b314:	077a      	lsls	r2, r7, #29
1000b316:	027f      	lsls	r7, r7, #9
1000b318:	0b3f      	lsrs	r7, r7, #12
1000b31a:	08db      	lsrs	r3, r3, #3
1000b31c:	4313      	orrs	r3, r2
1000b31e:	4699      	mov	r9, r3
1000b320:	2201      	movs	r2, #1
1000b322:	4653      	mov	r3, sl
1000b324:	401a      	ands	r2, r3
1000b326:	2300      	movs	r3, #0
1000b328:	e568      	b.n	1000adfc <__aeabi_ddiv+0xd0>
1000b32a:	4541      	cmp	r1, r8
1000b32c:	d8bb      	bhi.n	1000b2a6 <__aeabi_ddiv+0x57a>
1000b32e:	4693      	mov	fp, r2
1000b330:	2700      	movs	r7, #0
1000b332:	e667      	b.n	1000b004 <__aeabi_ddiv+0x2d8>
1000b334:	9c01      	ldr	r4, [sp, #4]
1000b336:	429c      	cmp	r4, r3
1000b338:	d3c3      	bcc.n	1000b2c2 <__aeabi_ddiv+0x596>
1000b33a:	4691      	mov	r9, r2
1000b33c:	e76d      	b.n	1000b21a <__aeabi_ddiv+0x4ee>
1000b33e:	2300      	movs	r3, #0
1000b340:	e7da      	b.n	1000b2f8 <__aeabi_ddiv+0x5cc>
1000b342:	2780      	movs	r7, #128	; 0x80
1000b344:	465b      	mov	r3, fp
1000b346:	033f      	lsls	r7, r7, #12
1000b348:	431f      	orrs	r7, r3
1000b34a:	033f      	lsls	r7, r7, #12
1000b34c:	0b3f      	lsrs	r7, r7, #12
1000b34e:	9a01      	ldr	r2, [sp, #4]
1000b350:	4b03      	ldr	r3, [pc, #12]	; (1000b360 <__aeabi_ddiv+0x634>)
1000b352:	e553      	b.n	1000adfc <__aeabi_ddiv+0xd0>
1000b354:	000003ff 	.word	0x000003ff
1000b358:	feffffff 	.word	0xfeffffff
1000b35c:	000007fe 	.word	0x000007fe
1000b360:	000007ff 	.word	0x000007ff
1000b364:	fffffc02 	.word	0xfffffc02
1000b368:	0000041e 	.word	0x0000041e
1000b36c:	fffffbe2 	.word	0xfffffbe2
1000b370:	0000043e 	.word	0x0000043e

1000b374 <__eqdf2>:
1000b374:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b376:	465f      	mov	r7, fp
1000b378:	464d      	mov	r5, r9
1000b37a:	4644      	mov	r4, r8
1000b37c:	4656      	mov	r6, sl
1000b37e:	b4f0      	push	{r4, r5, r6, r7}
1000b380:	031f      	lsls	r7, r3, #12
1000b382:	005c      	lsls	r4, r3, #1
1000b384:	0fdb      	lsrs	r3, r3, #31
1000b386:	4699      	mov	r9, r3
1000b388:	4b1b      	ldr	r3, [pc, #108]	; (1000b3f8 <__eqdf2+0x84>)
1000b38a:	030e      	lsls	r6, r1, #12
1000b38c:	004d      	lsls	r5, r1, #1
1000b38e:	0fc9      	lsrs	r1, r1, #31
1000b390:	4684      	mov	ip, r0
1000b392:	0b36      	lsrs	r6, r6, #12
1000b394:	0d6d      	lsrs	r5, r5, #21
1000b396:	468b      	mov	fp, r1
1000b398:	4690      	mov	r8, r2
1000b39a:	0b3f      	lsrs	r7, r7, #12
1000b39c:	0d64      	lsrs	r4, r4, #21
1000b39e:	429d      	cmp	r5, r3
1000b3a0:	d00c      	beq.n	1000b3bc <__eqdf2+0x48>
1000b3a2:	4b15      	ldr	r3, [pc, #84]	; (1000b3f8 <__eqdf2+0x84>)
1000b3a4:	429c      	cmp	r4, r3
1000b3a6:	d010      	beq.n	1000b3ca <__eqdf2+0x56>
1000b3a8:	2301      	movs	r3, #1
1000b3aa:	42a5      	cmp	r5, r4
1000b3ac:	d014      	beq.n	1000b3d8 <__eqdf2+0x64>
1000b3ae:	1c18      	adds	r0, r3, #0
1000b3b0:	bc3c      	pop	{r2, r3, r4, r5}
1000b3b2:	4690      	mov	r8, r2
1000b3b4:	4699      	mov	r9, r3
1000b3b6:	46a2      	mov	sl, r4
1000b3b8:	46ab      	mov	fp, r5
1000b3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b3bc:	1c31      	adds	r1, r6, #0
1000b3be:	2301      	movs	r3, #1
1000b3c0:	4301      	orrs	r1, r0
1000b3c2:	d1f4      	bne.n	1000b3ae <__eqdf2+0x3a>
1000b3c4:	4b0c      	ldr	r3, [pc, #48]	; (1000b3f8 <__eqdf2+0x84>)
1000b3c6:	429c      	cmp	r4, r3
1000b3c8:	d1ee      	bne.n	1000b3a8 <__eqdf2+0x34>
1000b3ca:	433a      	orrs	r2, r7
1000b3cc:	2301      	movs	r3, #1
1000b3ce:	2a00      	cmp	r2, #0
1000b3d0:	d1ed      	bne.n	1000b3ae <__eqdf2+0x3a>
1000b3d2:	2301      	movs	r3, #1
1000b3d4:	42a5      	cmp	r5, r4
1000b3d6:	d1ea      	bne.n	1000b3ae <__eqdf2+0x3a>
1000b3d8:	42be      	cmp	r6, r7
1000b3da:	d1e8      	bne.n	1000b3ae <__eqdf2+0x3a>
1000b3dc:	45c4      	cmp	ip, r8
1000b3de:	d1e6      	bne.n	1000b3ae <__eqdf2+0x3a>
1000b3e0:	45cb      	cmp	fp, r9
1000b3e2:	d006      	beq.n	1000b3f2 <__eqdf2+0x7e>
1000b3e4:	2d00      	cmp	r5, #0
1000b3e6:	d1e2      	bne.n	1000b3ae <__eqdf2+0x3a>
1000b3e8:	4330      	orrs	r0, r6
1000b3ea:	1c03      	adds	r3, r0, #0
1000b3ec:	1e58      	subs	r0, r3, #1
1000b3ee:	4183      	sbcs	r3, r0
1000b3f0:	e7dd      	b.n	1000b3ae <__eqdf2+0x3a>
1000b3f2:	2300      	movs	r3, #0
1000b3f4:	e7db      	b.n	1000b3ae <__eqdf2+0x3a>
1000b3f6:	46c0      	nop			; (mov r8, r8)
1000b3f8:	000007ff 	.word	0x000007ff

1000b3fc <__gedf2>:
1000b3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3fe:	4657      	mov	r7, sl
1000b400:	4645      	mov	r5, r8
1000b402:	464e      	mov	r6, r9
1000b404:	b4e0      	push	{r5, r6, r7}
1000b406:	030f      	lsls	r7, r1, #12
1000b408:	004e      	lsls	r6, r1, #1
1000b40a:	0fc9      	lsrs	r1, r1, #31
1000b40c:	468a      	mov	sl, r1
1000b40e:	4932      	ldr	r1, [pc, #200]	; (1000b4d8 <__gedf2+0xdc>)
1000b410:	031d      	lsls	r5, r3, #12
1000b412:	005c      	lsls	r4, r3, #1
1000b414:	4684      	mov	ip, r0
1000b416:	0b3f      	lsrs	r7, r7, #12
1000b418:	0d76      	lsrs	r6, r6, #21
1000b41a:	4690      	mov	r8, r2
1000b41c:	0b2d      	lsrs	r5, r5, #12
1000b41e:	0d64      	lsrs	r4, r4, #21
1000b420:	0fdb      	lsrs	r3, r3, #31
1000b422:	428e      	cmp	r6, r1
1000b424:	d00f      	beq.n	1000b446 <__gedf2+0x4a>
1000b426:	428c      	cmp	r4, r1
1000b428:	d039      	beq.n	1000b49e <__gedf2+0xa2>
1000b42a:	2e00      	cmp	r6, #0
1000b42c:	d110      	bne.n	1000b450 <__gedf2+0x54>
1000b42e:	4338      	orrs	r0, r7
1000b430:	4241      	negs	r1, r0
1000b432:	4141      	adcs	r1, r0
1000b434:	4689      	mov	r9, r1
1000b436:	2c00      	cmp	r4, #0
1000b438:	d127      	bne.n	1000b48a <__gedf2+0x8e>
1000b43a:	432a      	orrs	r2, r5
1000b43c:	d125      	bne.n	1000b48a <__gedf2+0x8e>
1000b43e:	2000      	movs	r0, #0
1000b440:	2900      	cmp	r1, #0
1000b442:	d10e      	bne.n	1000b462 <__gedf2+0x66>
1000b444:	e008      	b.n	1000b458 <__gedf2+0x5c>
1000b446:	1c39      	adds	r1, r7, #0
1000b448:	4301      	orrs	r1, r0
1000b44a:	d12e      	bne.n	1000b4aa <__gedf2+0xae>
1000b44c:	42b4      	cmp	r4, r6
1000b44e:	d026      	beq.n	1000b49e <__gedf2+0xa2>
1000b450:	2c00      	cmp	r4, #0
1000b452:	d00b      	beq.n	1000b46c <__gedf2+0x70>
1000b454:	459a      	cmp	sl, r3
1000b456:	d00d      	beq.n	1000b474 <__gedf2+0x78>
1000b458:	4653      	mov	r3, sl
1000b45a:	4259      	negs	r1, r3
1000b45c:	2301      	movs	r3, #1
1000b45e:	4319      	orrs	r1, r3
1000b460:	1c08      	adds	r0, r1, #0
1000b462:	bc1c      	pop	{r2, r3, r4}
1000b464:	4690      	mov	r8, r2
1000b466:	4699      	mov	r9, r3
1000b468:	46a2      	mov	sl, r4
1000b46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b46c:	432a      	orrs	r2, r5
1000b46e:	d0f3      	beq.n	1000b458 <__gedf2+0x5c>
1000b470:	459a      	cmp	sl, r3
1000b472:	d1f1      	bne.n	1000b458 <__gedf2+0x5c>
1000b474:	42a6      	cmp	r6, r4
1000b476:	dcef      	bgt.n	1000b458 <__gedf2+0x5c>
1000b478:	da1a      	bge.n	1000b4b0 <__gedf2+0xb4>
1000b47a:	4650      	mov	r0, sl
1000b47c:	4241      	negs	r1, r0
1000b47e:	4148      	adcs	r0, r1
1000b480:	2301      	movs	r3, #1
1000b482:	4241      	negs	r1, r0
1000b484:	4319      	orrs	r1, r3
1000b486:	1c08      	adds	r0, r1, #0
1000b488:	e7eb      	b.n	1000b462 <__gedf2+0x66>
1000b48a:	464a      	mov	r2, r9
1000b48c:	2a00      	cmp	r2, #0
1000b48e:	d0e1      	beq.n	1000b454 <__gedf2+0x58>
1000b490:	4258      	negs	r0, r3
1000b492:	4158      	adcs	r0, r3
1000b494:	2201      	movs	r2, #1
1000b496:	4241      	negs	r1, r0
1000b498:	4311      	orrs	r1, r2
1000b49a:	1c08      	adds	r0, r1, #0
1000b49c:	e7e1      	b.n	1000b462 <__gedf2+0x66>
1000b49e:	1c29      	adds	r1, r5, #0
1000b4a0:	4311      	orrs	r1, r2
1000b4a2:	d102      	bne.n	1000b4aa <__gedf2+0xae>
1000b4a4:	2e00      	cmp	r6, #0
1000b4a6:	d0c2      	beq.n	1000b42e <__gedf2+0x32>
1000b4a8:	e7d4      	b.n	1000b454 <__gedf2+0x58>
1000b4aa:	2002      	movs	r0, #2
1000b4ac:	4240      	negs	r0, r0
1000b4ae:	e7d8      	b.n	1000b462 <__gedf2+0x66>
1000b4b0:	42af      	cmp	r7, r5
1000b4b2:	d8d1      	bhi.n	1000b458 <__gedf2+0x5c>
1000b4b4:	d009      	beq.n	1000b4ca <__gedf2+0xce>
1000b4b6:	2000      	movs	r0, #0
1000b4b8:	42af      	cmp	r7, r5
1000b4ba:	d2d2      	bcs.n	1000b462 <__gedf2+0x66>
1000b4bc:	4650      	mov	r0, sl
1000b4be:	4241      	negs	r1, r0
1000b4c0:	4148      	adcs	r0, r1
1000b4c2:	2301      	movs	r3, #1
1000b4c4:	4240      	negs	r0, r0
1000b4c6:	4318      	orrs	r0, r3
1000b4c8:	e7cb      	b.n	1000b462 <__gedf2+0x66>
1000b4ca:	45c4      	cmp	ip, r8
1000b4cc:	d8c4      	bhi.n	1000b458 <__gedf2+0x5c>
1000b4ce:	2000      	movs	r0, #0
1000b4d0:	45c4      	cmp	ip, r8
1000b4d2:	d3f3      	bcc.n	1000b4bc <__gedf2+0xc0>
1000b4d4:	e7c5      	b.n	1000b462 <__gedf2+0x66>
1000b4d6:	46c0      	nop			; (mov r8, r8)
1000b4d8:	000007ff 	.word	0x000007ff

1000b4dc <__ledf2>:
1000b4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b4de:	465f      	mov	r7, fp
1000b4e0:	464d      	mov	r5, r9
1000b4e2:	4644      	mov	r4, r8
1000b4e4:	4656      	mov	r6, sl
1000b4e6:	4680      	mov	r8, r0
1000b4e8:	b4f0      	push	{r4, r5, r6, r7}
1000b4ea:	1c06      	adds	r6, r0, #0
1000b4ec:	0308      	lsls	r0, r1, #12
1000b4ee:	0b00      	lsrs	r0, r0, #12
1000b4f0:	4684      	mov	ip, r0
1000b4f2:	482c      	ldr	r0, [pc, #176]	; (1000b5a4 <__ledf2+0xc8>)
1000b4f4:	004c      	lsls	r4, r1, #1
1000b4f6:	031f      	lsls	r7, r3, #12
1000b4f8:	005d      	lsls	r5, r3, #1
1000b4fa:	0fc9      	lsrs	r1, r1, #31
1000b4fc:	0d64      	lsrs	r4, r4, #21
1000b4fe:	468b      	mov	fp, r1
1000b500:	4691      	mov	r9, r2
1000b502:	0b3f      	lsrs	r7, r7, #12
1000b504:	0d6d      	lsrs	r5, r5, #21
1000b506:	0fdb      	lsrs	r3, r3, #31
1000b508:	4284      	cmp	r4, r0
1000b50a:	d012      	beq.n	1000b532 <__ledf2+0x56>
1000b50c:	4285      	cmp	r5, r0
1000b50e:	d025      	beq.n	1000b55c <__ledf2+0x80>
1000b510:	2c00      	cmp	r4, #0
1000b512:	d114      	bne.n	1000b53e <__ledf2+0x62>
1000b514:	4661      	mov	r1, ip
1000b516:	430e      	orrs	r6, r1
1000b518:	4270      	negs	r0, r6
1000b51a:	4146      	adcs	r6, r0
1000b51c:	2d00      	cmp	r5, #0
1000b51e:	d035      	beq.n	1000b58c <__ledf2+0xb0>
1000b520:	2e00      	cmp	r6, #0
1000b522:	d021      	beq.n	1000b568 <__ledf2+0x8c>
1000b524:	4258      	negs	r0, r3
1000b526:	4158      	adcs	r0, r3
1000b528:	2101      	movs	r1, #1
1000b52a:	4243      	negs	r3, r0
1000b52c:	430b      	orrs	r3, r1
1000b52e:	1c18      	adds	r0, r3, #0
1000b530:	e00e      	b.n	1000b550 <__ledf2+0x74>
1000b532:	4661      	mov	r1, ip
1000b534:	2002      	movs	r0, #2
1000b536:	4331      	orrs	r1, r6
1000b538:	d10a      	bne.n	1000b550 <__ledf2+0x74>
1000b53a:	42a5      	cmp	r5, r4
1000b53c:	d00e      	beq.n	1000b55c <__ledf2+0x80>
1000b53e:	2d00      	cmp	r5, #0
1000b540:	d112      	bne.n	1000b568 <__ledf2+0x8c>
1000b542:	433a      	orrs	r2, r7
1000b544:	d110      	bne.n	1000b568 <__ledf2+0x8c>
1000b546:	465b      	mov	r3, fp
1000b548:	4259      	negs	r1, r3
1000b54a:	2301      	movs	r3, #1
1000b54c:	4319      	orrs	r1, r3
1000b54e:	1c08      	adds	r0, r1, #0
1000b550:	bc3c      	pop	{r2, r3, r4, r5}
1000b552:	4690      	mov	r8, r2
1000b554:	4699      	mov	r9, r3
1000b556:	46a2      	mov	sl, r4
1000b558:	46ab      	mov	fp, r5
1000b55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b55c:	1c39      	adds	r1, r7, #0
1000b55e:	2002      	movs	r0, #2
1000b560:	4311      	orrs	r1, r2
1000b562:	d1f5      	bne.n	1000b550 <__ledf2+0x74>
1000b564:	2c00      	cmp	r4, #0
1000b566:	d0d5      	beq.n	1000b514 <__ledf2+0x38>
1000b568:	459b      	cmp	fp, r3
1000b56a:	d1ec      	bne.n	1000b546 <__ledf2+0x6a>
1000b56c:	42ac      	cmp	r4, r5
1000b56e:	dcea      	bgt.n	1000b546 <__ledf2+0x6a>
1000b570:	db05      	blt.n	1000b57e <__ledf2+0xa2>
1000b572:	45bc      	cmp	ip, r7
1000b574:	d8e7      	bhi.n	1000b546 <__ledf2+0x6a>
1000b576:	d00f      	beq.n	1000b598 <__ledf2+0xbc>
1000b578:	2000      	movs	r0, #0
1000b57a:	45bc      	cmp	ip, r7
1000b57c:	d2e8      	bcs.n	1000b550 <__ledf2+0x74>
1000b57e:	4658      	mov	r0, fp
1000b580:	4241      	negs	r1, r0
1000b582:	4148      	adcs	r0, r1
1000b584:	4241      	negs	r1, r0
1000b586:	2001      	movs	r0, #1
1000b588:	4308      	orrs	r0, r1
1000b58a:	e7e1      	b.n	1000b550 <__ledf2+0x74>
1000b58c:	433a      	orrs	r2, r7
1000b58e:	d1c7      	bne.n	1000b520 <__ledf2+0x44>
1000b590:	2000      	movs	r0, #0
1000b592:	2e00      	cmp	r6, #0
1000b594:	d1dc      	bne.n	1000b550 <__ledf2+0x74>
1000b596:	e7d6      	b.n	1000b546 <__ledf2+0x6a>
1000b598:	45c8      	cmp	r8, r9
1000b59a:	d8d4      	bhi.n	1000b546 <__ledf2+0x6a>
1000b59c:	2000      	movs	r0, #0
1000b59e:	45c8      	cmp	r8, r9
1000b5a0:	d3ed      	bcc.n	1000b57e <__ledf2+0xa2>
1000b5a2:	e7d5      	b.n	1000b550 <__ledf2+0x74>
1000b5a4:	000007ff 	.word	0x000007ff

1000b5a8 <__aeabi_dmul>:
1000b5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b5aa:	465f      	mov	r7, fp
1000b5ac:	4656      	mov	r6, sl
1000b5ae:	464d      	mov	r5, r9
1000b5b0:	4644      	mov	r4, r8
1000b5b2:	b4f0      	push	{r4, r5, r6, r7}
1000b5b4:	1c05      	adds	r5, r0, #0
1000b5b6:	1c06      	adds	r6, r0, #0
1000b5b8:	0308      	lsls	r0, r1, #12
1000b5ba:	b087      	sub	sp, #28
1000b5bc:	4699      	mov	r9, r3
1000b5be:	004f      	lsls	r7, r1, #1
1000b5c0:	0b03      	lsrs	r3, r0, #12
1000b5c2:	0fcc      	lsrs	r4, r1, #31
1000b5c4:	4692      	mov	sl, r2
1000b5c6:	469b      	mov	fp, r3
1000b5c8:	0d7f      	lsrs	r7, r7, #21
1000b5ca:	9401      	str	r4, [sp, #4]
1000b5cc:	d067      	beq.n	1000b69e <__aeabi_dmul+0xf6>
1000b5ce:	4b6c      	ldr	r3, [pc, #432]	; (1000b780 <__aeabi_dmul+0x1d8>)
1000b5d0:	429f      	cmp	r7, r3
1000b5d2:	d036      	beq.n	1000b642 <__aeabi_dmul+0x9a>
1000b5d4:	2080      	movs	r0, #128	; 0x80
1000b5d6:	465b      	mov	r3, fp
1000b5d8:	0340      	lsls	r0, r0, #13
1000b5da:	4318      	orrs	r0, r3
1000b5dc:	00c0      	lsls	r0, r0, #3
1000b5de:	0f6b      	lsrs	r3, r5, #29
1000b5e0:	4318      	orrs	r0, r3
1000b5e2:	4b68      	ldr	r3, [pc, #416]	; (1000b784 <__aeabi_dmul+0x1dc>)
1000b5e4:	4683      	mov	fp, r0
1000b5e6:	469c      	mov	ip, r3
1000b5e8:	2300      	movs	r3, #0
1000b5ea:	4698      	mov	r8, r3
1000b5ec:	00ee      	lsls	r6, r5, #3
1000b5ee:	4467      	add	r7, ip
1000b5f0:	9300      	str	r3, [sp, #0]
1000b5f2:	464b      	mov	r3, r9
1000b5f4:	4649      	mov	r1, r9
1000b5f6:	031d      	lsls	r5, r3, #12
1000b5f8:	0fc9      	lsrs	r1, r1, #31
1000b5fa:	005b      	lsls	r3, r3, #1
1000b5fc:	4652      	mov	r2, sl
1000b5fe:	0b2d      	lsrs	r5, r5, #12
1000b600:	0d5b      	lsrs	r3, r3, #21
1000b602:	4689      	mov	r9, r1
1000b604:	d100      	bne.n	1000b608 <__aeabi_dmul+0x60>
1000b606:	e06e      	b.n	1000b6e6 <__aeabi_dmul+0x13e>
1000b608:	495d      	ldr	r1, [pc, #372]	; (1000b780 <__aeabi_dmul+0x1d8>)
1000b60a:	428b      	cmp	r3, r1
1000b60c:	d064      	beq.n	1000b6d8 <__aeabi_dmul+0x130>
1000b60e:	2080      	movs	r0, #128	; 0x80
1000b610:	495c      	ldr	r1, [pc, #368]	; (1000b784 <__aeabi_dmul+0x1dc>)
1000b612:	0340      	lsls	r0, r0, #13
1000b614:	468c      	mov	ip, r1
1000b616:	2100      	movs	r1, #0
1000b618:	4305      	orrs	r5, r0
1000b61a:	00ed      	lsls	r5, r5, #3
1000b61c:	0f50      	lsrs	r0, r2, #29
1000b61e:	4305      	orrs	r5, r0
1000b620:	00d2      	lsls	r2, r2, #3
1000b622:	4463      	add	r3, ip
1000b624:	4648      	mov	r0, r9
1000b626:	18ff      	adds	r7, r7, r3
1000b628:	1c7b      	adds	r3, r7, #1
1000b62a:	469a      	mov	sl, r3
1000b62c:	9b00      	ldr	r3, [sp, #0]
1000b62e:	4060      	eors	r0, r4
1000b630:	9002      	str	r0, [sp, #8]
1000b632:	430b      	orrs	r3, r1
1000b634:	2b0f      	cmp	r3, #15
1000b636:	d900      	bls.n	1000b63a <__aeabi_dmul+0x92>
1000b638:	e0ac      	b.n	1000b794 <__aeabi_dmul+0x1ec>
1000b63a:	4853      	ldr	r0, [pc, #332]	; (1000b788 <__aeabi_dmul+0x1e0>)
1000b63c:	009b      	lsls	r3, r3, #2
1000b63e:	58c3      	ldr	r3, [r0, r3]
1000b640:	469f      	mov	pc, r3
1000b642:	465b      	mov	r3, fp
1000b644:	431d      	orrs	r5, r3
1000b646:	d000      	beq.n	1000b64a <__aeabi_dmul+0xa2>
1000b648:	e082      	b.n	1000b750 <__aeabi_dmul+0x1a8>
1000b64a:	2308      	movs	r3, #8
1000b64c:	9300      	str	r3, [sp, #0]
1000b64e:	2300      	movs	r3, #0
1000b650:	469b      	mov	fp, r3
1000b652:	3302      	adds	r3, #2
1000b654:	2600      	movs	r6, #0
1000b656:	4698      	mov	r8, r3
1000b658:	e7cb      	b.n	1000b5f2 <__aeabi_dmul+0x4a>
1000b65a:	9b02      	ldr	r3, [sp, #8]
1000b65c:	9301      	str	r3, [sp, #4]
1000b65e:	4643      	mov	r3, r8
1000b660:	2b02      	cmp	r3, #2
1000b662:	d159      	bne.n	1000b718 <__aeabi_dmul+0x170>
1000b664:	2401      	movs	r4, #1
1000b666:	2500      	movs	r5, #0
1000b668:	2600      	movs	r6, #0
1000b66a:	9b01      	ldr	r3, [sp, #4]
1000b66c:	401c      	ands	r4, r3
1000b66e:	4b44      	ldr	r3, [pc, #272]	; (1000b780 <__aeabi_dmul+0x1d8>)
1000b670:	2100      	movs	r1, #0
1000b672:	032d      	lsls	r5, r5, #12
1000b674:	0d0a      	lsrs	r2, r1, #20
1000b676:	0512      	lsls	r2, r2, #20
1000b678:	0b2d      	lsrs	r5, r5, #12
1000b67a:	4315      	orrs	r5, r2
1000b67c:	4a43      	ldr	r2, [pc, #268]	; (1000b78c <__aeabi_dmul+0x1e4>)
1000b67e:	051b      	lsls	r3, r3, #20
1000b680:	4015      	ands	r5, r2
1000b682:	431d      	orrs	r5, r3
1000b684:	006d      	lsls	r5, r5, #1
1000b686:	07e4      	lsls	r4, r4, #31
1000b688:	086d      	lsrs	r5, r5, #1
1000b68a:	4325      	orrs	r5, r4
1000b68c:	1c30      	adds	r0, r6, #0
1000b68e:	1c29      	adds	r1, r5, #0
1000b690:	b007      	add	sp, #28
1000b692:	bc3c      	pop	{r2, r3, r4, r5}
1000b694:	4690      	mov	r8, r2
1000b696:	4699      	mov	r9, r3
1000b698:	46a2      	mov	sl, r4
1000b69a:	46ab      	mov	fp, r5
1000b69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b69e:	432b      	orrs	r3, r5
1000b6a0:	d04e      	beq.n	1000b740 <__aeabi_dmul+0x198>
1000b6a2:	465b      	mov	r3, fp
1000b6a4:	2b00      	cmp	r3, #0
1000b6a6:	d100      	bne.n	1000b6aa <__aeabi_dmul+0x102>
1000b6a8:	e185      	b.n	1000b9b6 <__aeabi_dmul+0x40e>
1000b6aa:	4658      	mov	r0, fp
1000b6ac:	f7fe f8da 	bl	10009864 <__clzsi2>
1000b6b0:	1c02      	adds	r2, r0, #0
1000b6b2:	2328      	movs	r3, #40	; 0x28
1000b6b4:	1c29      	adds	r1, r5, #0
1000b6b6:	1a9b      	subs	r3, r3, r2
1000b6b8:	1c16      	adds	r6, r2, #0
1000b6ba:	4658      	mov	r0, fp
1000b6bc:	40d9      	lsrs	r1, r3
1000b6be:	3e08      	subs	r6, #8
1000b6c0:	40b0      	lsls	r0, r6
1000b6c2:	1c0b      	adds	r3, r1, #0
1000b6c4:	40b5      	lsls	r5, r6
1000b6c6:	4303      	orrs	r3, r0
1000b6c8:	469b      	mov	fp, r3
1000b6ca:	1c2e      	adds	r6, r5, #0
1000b6cc:	2300      	movs	r3, #0
1000b6ce:	4f30      	ldr	r7, [pc, #192]	; (1000b790 <__aeabi_dmul+0x1e8>)
1000b6d0:	9300      	str	r3, [sp, #0]
1000b6d2:	1abf      	subs	r7, r7, r2
1000b6d4:	4698      	mov	r8, r3
1000b6d6:	e78c      	b.n	1000b5f2 <__aeabi_dmul+0x4a>
1000b6d8:	4651      	mov	r1, sl
1000b6da:	4329      	orrs	r1, r5
1000b6dc:	d12e      	bne.n	1000b73c <__aeabi_dmul+0x194>
1000b6de:	2500      	movs	r5, #0
1000b6e0:	2200      	movs	r2, #0
1000b6e2:	2102      	movs	r1, #2
1000b6e4:	e79e      	b.n	1000b624 <__aeabi_dmul+0x7c>
1000b6e6:	4651      	mov	r1, sl
1000b6e8:	4329      	orrs	r1, r5
1000b6ea:	d023      	beq.n	1000b734 <__aeabi_dmul+0x18c>
1000b6ec:	2d00      	cmp	r5, #0
1000b6ee:	d100      	bne.n	1000b6f2 <__aeabi_dmul+0x14a>
1000b6f0:	e154      	b.n	1000b99c <__aeabi_dmul+0x3f4>
1000b6f2:	1c28      	adds	r0, r5, #0
1000b6f4:	f7fe f8b6 	bl	10009864 <__clzsi2>
1000b6f8:	1c03      	adds	r3, r0, #0
1000b6fa:	2128      	movs	r1, #40	; 0x28
1000b6fc:	4650      	mov	r0, sl
1000b6fe:	1ac9      	subs	r1, r1, r3
1000b700:	1c1a      	adds	r2, r3, #0
1000b702:	40c8      	lsrs	r0, r1
1000b704:	4651      	mov	r1, sl
1000b706:	3a08      	subs	r2, #8
1000b708:	4091      	lsls	r1, r2
1000b70a:	4095      	lsls	r5, r2
1000b70c:	1c0a      	adds	r2, r1, #0
1000b70e:	4305      	orrs	r5, r0
1000b710:	481f      	ldr	r0, [pc, #124]	; (1000b790 <__aeabi_dmul+0x1e8>)
1000b712:	2100      	movs	r1, #0
1000b714:	1ac3      	subs	r3, r0, r3
1000b716:	e785      	b.n	1000b624 <__aeabi_dmul+0x7c>
1000b718:	2b03      	cmp	r3, #3
1000b71a:	d100      	bne.n	1000b71e <__aeabi_dmul+0x176>
1000b71c:	e1c2      	b.n	1000baa4 <__aeabi_dmul+0x4fc>
1000b71e:	2b01      	cmp	r3, #1
1000b720:	d000      	beq.n	1000b724 <__aeabi_dmul+0x17c>
1000b722:	e16d      	b.n	1000ba00 <__aeabi_dmul+0x458>
1000b724:	4644      	mov	r4, r8
1000b726:	9b01      	ldr	r3, [sp, #4]
1000b728:	2500      	movs	r5, #0
1000b72a:	401c      	ands	r4, r3
1000b72c:	b2e4      	uxtb	r4, r4
1000b72e:	2300      	movs	r3, #0
1000b730:	2600      	movs	r6, #0
1000b732:	e79d      	b.n	1000b670 <__aeabi_dmul+0xc8>
1000b734:	2500      	movs	r5, #0
1000b736:	2200      	movs	r2, #0
1000b738:	2101      	movs	r1, #1
1000b73a:	e773      	b.n	1000b624 <__aeabi_dmul+0x7c>
1000b73c:	2103      	movs	r1, #3
1000b73e:	e771      	b.n	1000b624 <__aeabi_dmul+0x7c>
1000b740:	2304      	movs	r3, #4
1000b742:	9300      	str	r3, [sp, #0]
1000b744:	2300      	movs	r3, #0
1000b746:	469b      	mov	fp, r3
1000b748:	3301      	adds	r3, #1
1000b74a:	2600      	movs	r6, #0
1000b74c:	4698      	mov	r8, r3
1000b74e:	e750      	b.n	1000b5f2 <__aeabi_dmul+0x4a>
1000b750:	230c      	movs	r3, #12
1000b752:	9300      	str	r3, [sp, #0]
1000b754:	3b09      	subs	r3, #9
1000b756:	4698      	mov	r8, r3
1000b758:	e74b      	b.n	1000b5f2 <__aeabi_dmul+0x4a>
1000b75a:	2580      	movs	r5, #128	; 0x80
1000b75c:	2400      	movs	r4, #0
1000b75e:	032d      	lsls	r5, r5, #12
1000b760:	2600      	movs	r6, #0
1000b762:	4b07      	ldr	r3, [pc, #28]	; (1000b780 <__aeabi_dmul+0x1d8>)
1000b764:	e784      	b.n	1000b670 <__aeabi_dmul+0xc8>
1000b766:	464b      	mov	r3, r9
1000b768:	46ab      	mov	fp, r5
1000b76a:	1c16      	adds	r6, r2, #0
1000b76c:	9301      	str	r3, [sp, #4]
1000b76e:	4688      	mov	r8, r1
1000b770:	e775      	b.n	1000b65e <__aeabi_dmul+0xb6>
1000b772:	9b02      	ldr	r3, [sp, #8]
1000b774:	46ab      	mov	fp, r5
1000b776:	1c16      	adds	r6, r2, #0
1000b778:	9301      	str	r3, [sp, #4]
1000b77a:	4688      	mov	r8, r1
1000b77c:	e76f      	b.n	1000b65e <__aeabi_dmul+0xb6>
1000b77e:	46c0      	nop			; (mov r8, r8)
1000b780:	000007ff 	.word	0x000007ff
1000b784:	fffffc01 	.word	0xfffffc01
1000b788:	1000cf20 	.word	0x1000cf20
1000b78c:	800fffff 	.word	0x800fffff
1000b790:	fffffc0d 	.word	0xfffffc0d
1000b794:	0c33      	lsrs	r3, r6, #16
1000b796:	0436      	lsls	r6, r6, #16
1000b798:	0c36      	lsrs	r6, r6, #16
1000b79a:	469c      	mov	ip, r3
1000b79c:	1c33      	adds	r3, r6, #0
1000b79e:	0c14      	lsrs	r4, r2, #16
1000b7a0:	0412      	lsls	r2, r2, #16
1000b7a2:	0c12      	lsrs	r2, r2, #16
1000b7a4:	4353      	muls	r3, r2
1000b7a6:	4698      	mov	r8, r3
1000b7a8:	4663      	mov	r3, ip
1000b7aa:	4353      	muls	r3, r2
1000b7ac:	4699      	mov	r9, r3
1000b7ae:	4663      	mov	r3, ip
1000b7b0:	4363      	muls	r3, r4
1000b7b2:	9301      	str	r3, [sp, #4]
1000b7b4:	1c33      	adds	r3, r6, #0
1000b7b6:	4641      	mov	r1, r8
1000b7b8:	4363      	muls	r3, r4
1000b7ba:	0c09      	lsrs	r1, r1, #16
1000b7bc:	444b      	add	r3, r9
1000b7be:	185b      	adds	r3, r3, r1
1000b7c0:	4599      	cmp	r9, r3
1000b7c2:	d905      	bls.n	1000b7d0 <__aeabi_dmul+0x228>
1000b7c4:	2080      	movs	r0, #128	; 0x80
1000b7c6:	0240      	lsls	r0, r0, #9
1000b7c8:	4681      	mov	r9, r0
1000b7ca:	9901      	ldr	r1, [sp, #4]
1000b7cc:	4449      	add	r1, r9
1000b7ce:	9101      	str	r1, [sp, #4]
1000b7d0:	0c19      	lsrs	r1, r3, #16
1000b7d2:	9103      	str	r1, [sp, #12]
1000b7d4:	4641      	mov	r1, r8
1000b7d6:	0409      	lsls	r1, r1, #16
1000b7d8:	0c09      	lsrs	r1, r1, #16
1000b7da:	041b      	lsls	r3, r3, #16
1000b7dc:	185b      	adds	r3, r3, r1
1000b7de:	9304      	str	r3, [sp, #16]
1000b7e0:	0c2b      	lsrs	r3, r5, #16
1000b7e2:	4698      	mov	r8, r3
1000b7e4:	1c33      	adds	r3, r6, #0
1000b7e6:	042d      	lsls	r5, r5, #16
1000b7e8:	0c29      	lsrs	r1, r5, #16
1000b7ea:	434b      	muls	r3, r1
1000b7ec:	4660      	mov	r0, ip
1000b7ee:	9300      	str	r3, [sp, #0]
1000b7f0:	4643      	mov	r3, r8
1000b7f2:	4665      	mov	r5, ip
1000b7f4:	4358      	muls	r0, r3
1000b7f6:	435e      	muls	r6, r3
1000b7f8:	9b00      	ldr	r3, [sp, #0]
1000b7fa:	434d      	muls	r5, r1
1000b7fc:	0c1b      	lsrs	r3, r3, #16
1000b7fe:	4699      	mov	r9, r3
1000b800:	19ae      	adds	r6, r5, r6
1000b802:	444e      	add	r6, r9
1000b804:	4684      	mov	ip, r0
1000b806:	42b5      	cmp	r5, r6
1000b808:	d903      	bls.n	1000b812 <__aeabi_dmul+0x26a>
1000b80a:	2380      	movs	r3, #128	; 0x80
1000b80c:	025b      	lsls	r3, r3, #9
1000b80e:	4699      	mov	r9, r3
1000b810:	44cc      	add	ip, r9
1000b812:	0c35      	lsrs	r5, r6, #16
1000b814:	1c2b      	adds	r3, r5, #0
1000b816:	9803      	ldr	r0, [sp, #12]
1000b818:	4463      	add	r3, ip
1000b81a:	4684      	mov	ip, r0
1000b81c:	9305      	str	r3, [sp, #20]
1000b81e:	9b00      	ldr	r3, [sp, #0]
1000b820:	0436      	lsls	r6, r6, #16
1000b822:	041b      	lsls	r3, r3, #16
1000b824:	0c1b      	lsrs	r3, r3, #16
1000b826:	18f3      	adds	r3, r6, r3
1000b828:	449c      	add	ip, r3
1000b82a:	4660      	mov	r0, ip
1000b82c:	9003      	str	r0, [sp, #12]
1000b82e:	4658      	mov	r0, fp
1000b830:	0405      	lsls	r5, r0, #16
1000b832:	0c06      	lsrs	r6, r0, #16
1000b834:	0c28      	lsrs	r0, r5, #16
1000b836:	4684      	mov	ip, r0
1000b838:	4350      	muls	r0, r2
1000b83a:	1c35      	adds	r5, r6, #0
1000b83c:	4681      	mov	r9, r0
1000b83e:	4660      	mov	r0, ip
1000b840:	4365      	muls	r5, r4
1000b842:	4344      	muls	r4, r0
1000b844:	4648      	mov	r0, r9
1000b846:	0c00      	lsrs	r0, r0, #16
1000b848:	4683      	mov	fp, r0
1000b84a:	4372      	muls	r2, r6
1000b84c:	1914      	adds	r4, r2, r4
1000b84e:	445c      	add	r4, fp
1000b850:	42a2      	cmp	r2, r4
1000b852:	d903      	bls.n	1000b85c <__aeabi_dmul+0x2b4>
1000b854:	2280      	movs	r2, #128	; 0x80
1000b856:	0252      	lsls	r2, r2, #9
1000b858:	4693      	mov	fp, r2
1000b85a:	445d      	add	r5, fp
1000b85c:	0c22      	lsrs	r2, r4, #16
1000b85e:	18ad      	adds	r5, r5, r2
1000b860:	464a      	mov	r2, r9
1000b862:	0412      	lsls	r2, r2, #16
1000b864:	0c12      	lsrs	r2, r2, #16
1000b866:	0424      	lsls	r4, r4, #16
1000b868:	4640      	mov	r0, r8
1000b86a:	18a4      	adds	r4, r4, r2
1000b86c:	4662      	mov	r2, ip
1000b86e:	434a      	muls	r2, r1
1000b870:	4371      	muls	r1, r6
1000b872:	4346      	muls	r6, r0
1000b874:	4660      	mov	r0, ip
1000b876:	9600      	str	r6, [sp, #0]
1000b878:	4646      	mov	r6, r8
1000b87a:	4370      	muls	r0, r6
1000b87c:	4680      	mov	r8, r0
1000b87e:	0c10      	lsrs	r0, r2, #16
1000b880:	4684      	mov	ip, r0
1000b882:	4488      	add	r8, r1
1000b884:	44e0      	add	r8, ip
1000b886:	4541      	cmp	r1, r8
1000b888:	d905      	bls.n	1000b896 <__aeabi_dmul+0x2ee>
1000b88a:	2180      	movs	r1, #128	; 0x80
1000b88c:	0249      	lsls	r1, r1, #9
1000b88e:	468c      	mov	ip, r1
1000b890:	9900      	ldr	r1, [sp, #0]
1000b892:	4461      	add	r1, ip
1000b894:	9100      	str	r1, [sp, #0]
1000b896:	9801      	ldr	r0, [sp, #4]
1000b898:	9903      	ldr	r1, [sp, #12]
1000b89a:	4684      	mov	ip, r0
1000b89c:	4461      	add	r1, ip
1000b89e:	4299      	cmp	r1, r3
1000b8a0:	419b      	sbcs	r3, r3
1000b8a2:	425b      	negs	r3, r3
1000b8a4:	4699      	mov	r9, r3
1000b8a6:	9805      	ldr	r0, [sp, #20]
1000b8a8:	4643      	mov	r3, r8
1000b8aa:	4684      	mov	ip, r0
1000b8ac:	0412      	lsls	r2, r2, #16
1000b8ae:	0c12      	lsrs	r2, r2, #16
1000b8b0:	041b      	lsls	r3, r3, #16
1000b8b2:	189b      	adds	r3, r3, r2
1000b8b4:	4463      	add	r3, ip
1000b8b6:	469c      	mov	ip, r3
1000b8b8:	46ab      	mov	fp, r5
1000b8ba:	4283      	cmp	r3, r0
1000b8bc:	419b      	sbcs	r3, r3
1000b8be:	4640      	mov	r0, r8
1000b8c0:	190a      	adds	r2, r1, r4
1000b8c2:	44cc      	add	ip, r9
1000b8c4:	42a2      	cmp	r2, r4
1000b8c6:	4189      	sbcs	r1, r1
1000b8c8:	44e3      	add	fp, ip
1000b8ca:	45cc      	cmp	ip, r9
1000b8cc:	41b6      	sbcs	r6, r6
1000b8ce:	465c      	mov	r4, fp
1000b8d0:	0c00      	lsrs	r0, r0, #16
1000b8d2:	4680      	mov	r8, r0
1000b8d4:	4249      	negs	r1, r1
1000b8d6:	4276      	negs	r6, r6
1000b8d8:	425b      	negs	r3, r3
1000b8da:	1864      	adds	r4, r4, r1
1000b8dc:	4333      	orrs	r3, r6
1000b8de:	4498      	add	r8, r3
1000b8e0:	428c      	cmp	r4, r1
1000b8e2:	4189      	sbcs	r1, r1
1000b8e4:	45ab      	cmp	fp, r5
1000b8e6:	419b      	sbcs	r3, r3
1000b8e8:	4249      	negs	r1, r1
1000b8ea:	425b      	negs	r3, r3
1000b8ec:	4319      	orrs	r1, r3
1000b8ee:	1c0d      	adds	r5, r1, #0
1000b8f0:	9b00      	ldr	r3, [sp, #0]
1000b8f2:	4445      	add	r5, r8
1000b8f4:	18ee      	adds	r6, r5, r3
1000b8f6:	0276      	lsls	r6, r6, #9
1000b8f8:	0de5      	lsrs	r5, r4, #23
1000b8fa:	432e      	orrs	r6, r5
1000b8fc:	46b3      	mov	fp, r6
1000b8fe:	9b04      	ldr	r3, [sp, #16]
1000b900:	0256      	lsls	r6, r2, #9
1000b902:	431e      	orrs	r6, r3
1000b904:	1e73      	subs	r3, r6, #1
1000b906:	419e      	sbcs	r6, r3
1000b908:	465b      	mov	r3, fp
1000b90a:	0dd2      	lsrs	r2, r2, #23
1000b90c:	4332      	orrs	r2, r6
1000b90e:	0266      	lsls	r6, r4, #9
1000b910:	4316      	orrs	r6, r2
1000b912:	01db      	lsls	r3, r3, #7
1000b914:	d50a      	bpl.n	1000b92c <__aeabi_dmul+0x384>
1000b916:	2301      	movs	r3, #1
1000b918:	4033      	ands	r3, r6
1000b91a:	0876      	lsrs	r6, r6, #1
1000b91c:	431e      	orrs	r6, r3
1000b91e:	465b      	mov	r3, fp
1000b920:	07db      	lsls	r3, r3, #31
1000b922:	431e      	orrs	r6, r3
1000b924:	465b      	mov	r3, fp
1000b926:	085b      	lsrs	r3, r3, #1
1000b928:	469b      	mov	fp, r3
1000b92a:	4657      	mov	r7, sl
1000b92c:	4b63      	ldr	r3, [pc, #396]	; (1000babc <__aeabi_dmul+0x514>)
1000b92e:	18fb      	adds	r3, r7, r3
1000b930:	2b00      	cmp	r3, #0
1000b932:	dd5a      	ble.n	1000b9ea <__aeabi_dmul+0x442>
1000b934:	0772      	lsls	r2, r6, #29
1000b936:	d009      	beq.n	1000b94c <__aeabi_dmul+0x3a4>
1000b938:	220f      	movs	r2, #15
1000b93a:	4032      	ands	r2, r6
1000b93c:	2a04      	cmp	r2, #4
1000b93e:	d005      	beq.n	1000b94c <__aeabi_dmul+0x3a4>
1000b940:	1d32      	adds	r2, r6, #4
1000b942:	42b2      	cmp	r2, r6
1000b944:	41b6      	sbcs	r6, r6
1000b946:	4276      	negs	r6, r6
1000b948:	44b3      	add	fp, r6
1000b94a:	1c16      	adds	r6, r2, #0
1000b94c:	465a      	mov	r2, fp
1000b94e:	01d2      	lsls	r2, r2, #7
1000b950:	d506      	bpl.n	1000b960 <__aeabi_dmul+0x3b8>
1000b952:	465a      	mov	r2, fp
1000b954:	4b5a      	ldr	r3, [pc, #360]	; (1000bac0 <__aeabi_dmul+0x518>)
1000b956:	401a      	ands	r2, r3
1000b958:	2380      	movs	r3, #128	; 0x80
1000b95a:	4693      	mov	fp, r2
1000b95c:	00db      	lsls	r3, r3, #3
1000b95e:	18fb      	adds	r3, r7, r3
1000b960:	4a58      	ldr	r2, [pc, #352]	; (1000bac4 <__aeabi_dmul+0x51c>)
1000b962:	4293      	cmp	r3, r2
1000b964:	dd34      	ble.n	1000b9d0 <__aeabi_dmul+0x428>
1000b966:	2401      	movs	r4, #1
1000b968:	9b02      	ldr	r3, [sp, #8]
1000b96a:	2500      	movs	r5, #0
1000b96c:	401c      	ands	r4, r3
1000b96e:	2600      	movs	r6, #0
1000b970:	4b55      	ldr	r3, [pc, #340]	; (1000bac8 <__aeabi_dmul+0x520>)
1000b972:	e67d      	b.n	1000b670 <__aeabi_dmul+0xc8>
1000b974:	2080      	movs	r0, #128	; 0x80
1000b976:	465b      	mov	r3, fp
1000b978:	0300      	lsls	r0, r0, #12
1000b97a:	4203      	tst	r3, r0
1000b97c:	d008      	beq.n	1000b990 <__aeabi_dmul+0x3e8>
1000b97e:	4205      	tst	r5, r0
1000b980:	d106      	bne.n	1000b990 <__aeabi_dmul+0x3e8>
1000b982:	4305      	orrs	r5, r0
1000b984:	032d      	lsls	r5, r5, #12
1000b986:	0b2d      	lsrs	r5, r5, #12
1000b988:	464c      	mov	r4, r9
1000b98a:	1c16      	adds	r6, r2, #0
1000b98c:	4b4e      	ldr	r3, [pc, #312]	; (1000bac8 <__aeabi_dmul+0x520>)
1000b98e:	e66f      	b.n	1000b670 <__aeabi_dmul+0xc8>
1000b990:	465d      	mov	r5, fp
1000b992:	4305      	orrs	r5, r0
1000b994:	032d      	lsls	r5, r5, #12
1000b996:	0b2d      	lsrs	r5, r5, #12
1000b998:	4b4b      	ldr	r3, [pc, #300]	; (1000bac8 <__aeabi_dmul+0x520>)
1000b99a:	e669      	b.n	1000b670 <__aeabi_dmul+0xc8>
1000b99c:	4650      	mov	r0, sl
1000b99e:	f7fd ff61 	bl	10009864 <__clzsi2>
1000b9a2:	1c03      	adds	r3, r0, #0
1000b9a4:	3320      	adds	r3, #32
1000b9a6:	2b27      	cmp	r3, #39	; 0x27
1000b9a8:	dc00      	bgt.n	1000b9ac <__aeabi_dmul+0x404>
1000b9aa:	e6a6      	b.n	1000b6fa <__aeabi_dmul+0x152>
1000b9ac:	4655      	mov	r5, sl
1000b9ae:	3808      	subs	r0, #8
1000b9b0:	4085      	lsls	r5, r0
1000b9b2:	2200      	movs	r2, #0
1000b9b4:	e6ac      	b.n	1000b710 <__aeabi_dmul+0x168>
1000b9b6:	1c28      	adds	r0, r5, #0
1000b9b8:	f7fd ff54 	bl	10009864 <__clzsi2>
1000b9bc:	1c02      	adds	r2, r0, #0
1000b9be:	3220      	adds	r2, #32
1000b9c0:	2a27      	cmp	r2, #39	; 0x27
1000b9c2:	dc00      	bgt.n	1000b9c6 <__aeabi_dmul+0x41e>
1000b9c4:	e675      	b.n	1000b6b2 <__aeabi_dmul+0x10a>
1000b9c6:	3808      	subs	r0, #8
1000b9c8:	4085      	lsls	r5, r0
1000b9ca:	2600      	movs	r6, #0
1000b9cc:	46ab      	mov	fp, r5
1000b9ce:	e67d      	b.n	1000b6cc <__aeabi_dmul+0x124>
1000b9d0:	465a      	mov	r2, fp
1000b9d2:	08f6      	lsrs	r6, r6, #3
1000b9d4:	0752      	lsls	r2, r2, #29
1000b9d6:	4316      	orrs	r6, r2
1000b9d8:	465a      	mov	r2, fp
1000b9da:	2401      	movs	r4, #1
1000b9dc:	0255      	lsls	r5, r2, #9
1000b9de:	9a02      	ldr	r2, [sp, #8]
1000b9e0:	055b      	lsls	r3, r3, #21
1000b9e2:	0b2d      	lsrs	r5, r5, #12
1000b9e4:	0d5b      	lsrs	r3, r3, #21
1000b9e6:	4014      	ands	r4, r2
1000b9e8:	e642      	b.n	1000b670 <__aeabi_dmul+0xc8>
1000b9ea:	4d38      	ldr	r5, [pc, #224]	; (1000bacc <__aeabi_dmul+0x524>)
1000b9ec:	1bed      	subs	r5, r5, r7
1000b9ee:	2d38      	cmp	r5, #56	; 0x38
1000b9f0:	dd0a      	ble.n	1000ba08 <__aeabi_dmul+0x460>
1000b9f2:	2401      	movs	r4, #1
1000b9f4:	9b02      	ldr	r3, [sp, #8]
1000b9f6:	2500      	movs	r5, #0
1000b9f8:	401c      	ands	r4, r3
1000b9fa:	2600      	movs	r6, #0
1000b9fc:	2300      	movs	r3, #0
1000b9fe:	e637      	b.n	1000b670 <__aeabi_dmul+0xc8>
1000ba00:	9b01      	ldr	r3, [sp, #4]
1000ba02:	4657      	mov	r7, sl
1000ba04:	9302      	str	r3, [sp, #8]
1000ba06:	e791      	b.n	1000b92c <__aeabi_dmul+0x384>
1000ba08:	2d1f      	cmp	r5, #31
1000ba0a:	dc25      	bgt.n	1000ba58 <__aeabi_dmul+0x4b0>
1000ba0c:	4b30      	ldr	r3, [pc, #192]	; (1000bad0 <__aeabi_dmul+0x528>)
1000ba0e:	1c32      	adds	r2, r6, #0
1000ba10:	469c      	mov	ip, r3
1000ba12:	4467      	add	r7, ip
1000ba14:	40be      	lsls	r6, r7
1000ba16:	465b      	mov	r3, fp
1000ba18:	40bb      	lsls	r3, r7
1000ba1a:	1c37      	adds	r7, r6, #0
1000ba1c:	40ea      	lsrs	r2, r5
1000ba1e:	1e7e      	subs	r6, r7, #1
1000ba20:	41b7      	sbcs	r7, r6
1000ba22:	4313      	orrs	r3, r2
1000ba24:	433b      	orrs	r3, r7
1000ba26:	1c1e      	adds	r6, r3, #0
1000ba28:	465b      	mov	r3, fp
1000ba2a:	40eb      	lsrs	r3, r5
1000ba2c:	1c1d      	adds	r5, r3, #0
1000ba2e:	0773      	lsls	r3, r6, #29
1000ba30:	d009      	beq.n	1000ba46 <__aeabi_dmul+0x49e>
1000ba32:	230f      	movs	r3, #15
1000ba34:	4033      	ands	r3, r6
1000ba36:	2b04      	cmp	r3, #4
1000ba38:	d005      	beq.n	1000ba46 <__aeabi_dmul+0x49e>
1000ba3a:	1d33      	adds	r3, r6, #4
1000ba3c:	42b3      	cmp	r3, r6
1000ba3e:	41b6      	sbcs	r6, r6
1000ba40:	4276      	negs	r6, r6
1000ba42:	19ad      	adds	r5, r5, r6
1000ba44:	1c1e      	adds	r6, r3, #0
1000ba46:	022b      	lsls	r3, r5, #8
1000ba48:	d520      	bpl.n	1000ba8c <__aeabi_dmul+0x4e4>
1000ba4a:	2401      	movs	r4, #1
1000ba4c:	9b02      	ldr	r3, [sp, #8]
1000ba4e:	2500      	movs	r5, #0
1000ba50:	401c      	ands	r4, r3
1000ba52:	2600      	movs	r6, #0
1000ba54:	2301      	movs	r3, #1
1000ba56:	e60b      	b.n	1000b670 <__aeabi_dmul+0xc8>
1000ba58:	465a      	mov	r2, fp
1000ba5a:	4b1e      	ldr	r3, [pc, #120]	; (1000bad4 <__aeabi_dmul+0x52c>)
1000ba5c:	1bdb      	subs	r3, r3, r7
1000ba5e:	40da      	lsrs	r2, r3
1000ba60:	1c13      	adds	r3, r2, #0
1000ba62:	2d20      	cmp	r5, #32
1000ba64:	d01c      	beq.n	1000baa0 <__aeabi_dmul+0x4f8>
1000ba66:	4a1c      	ldr	r2, [pc, #112]	; (1000bad8 <__aeabi_dmul+0x530>)
1000ba68:	4694      	mov	ip, r2
1000ba6a:	465a      	mov	r2, fp
1000ba6c:	4467      	add	r7, ip
1000ba6e:	40ba      	lsls	r2, r7
1000ba70:	1c17      	adds	r7, r2, #0
1000ba72:	433e      	orrs	r6, r7
1000ba74:	1e72      	subs	r2, r6, #1
1000ba76:	4196      	sbcs	r6, r2
1000ba78:	431e      	orrs	r6, r3
1000ba7a:	2307      	movs	r3, #7
1000ba7c:	2500      	movs	r5, #0
1000ba7e:	4033      	ands	r3, r6
1000ba80:	d007      	beq.n	1000ba92 <__aeabi_dmul+0x4ea>
1000ba82:	230f      	movs	r3, #15
1000ba84:	2500      	movs	r5, #0
1000ba86:	4033      	ands	r3, r6
1000ba88:	2b04      	cmp	r3, #4
1000ba8a:	d1d6      	bne.n	1000ba3a <__aeabi_dmul+0x492>
1000ba8c:	076b      	lsls	r3, r5, #29
1000ba8e:	026d      	lsls	r5, r5, #9
1000ba90:	0b2d      	lsrs	r5, r5, #12
1000ba92:	2401      	movs	r4, #1
1000ba94:	08f6      	lsrs	r6, r6, #3
1000ba96:	431e      	orrs	r6, r3
1000ba98:	9b02      	ldr	r3, [sp, #8]
1000ba9a:	401c      	ands	r4, r3
1000ba9c:	2300      	movs	r3, #0
1000ba9e:	e5e7      	b.n	1000b670 <__aeabi_dmul+0xc8>
1000baa0:	2700      	movs	r7, #0
1000baa2:	e7e6      	b.n	1000ba72 <__aeabi_dmul+0x4ca>
1000baa4:	2580      	movs	r5, #128	; 0x80
1000baa6:	465b      	mov	r3, fp
1000baa8:	2401      	movs	r4, #1
1000baaa:	032d      	lsls	r5, r5, #12
1000baac:	431d      	orrs	r5, r3
1000baae:	9b01      	ldr	r3, [sp, #4]
1000bab0:	032d      	lsls	r5, r5, #12
1000bab2:	4023      	ands	r3, r4
1000bab4:	1c1c      	adds	r4, r3, #0
1000bab6:	0b2d      	lsrs	r5, r5, #12
1000bab8:	4b03      	ldr	r3, [pc, #12]	; (1000bac8 <__aeabi_dmul+0x520>)
1000baba:	e5d9      	b.n	1000b670 <__aeabi_dmul+0xc8>
1000babc:	000003ff 	.word	0x000003ff
1000bac0:	feffffff 	.word	0xfeffffff
1000bac4:	000007fe 	.word	0x000007fe
1000bac8:	000007ff 	.word	0x000007ff
1000bacc:	fffffc02 	.word	0xfffffc02
1000bad0:	0000041e 	.word	0x0000041e
1000bad4:	fffffbe2 	.word	0xfffffbe2
1000bad8:	0000043e 	.word	0x0000043e

1000badc <__aeabi_dsub>:
1000badc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bade:	464d      	mov	r5, r9
1000bae0:	4644      	mov	r4, r8
1000bae2:	465f      	mov	r7, fp
1000bae4:	4656      	mov	r6, sl
1000bae6:	b4f0      	push	{r4, r5, r6, r7}
1000bae8:	1c0e      	adds	r6, r1, #0
1000baea:	1c11      	adds	r1, r2, #0
1000baec:	0332      	lsls	r2, r6, #12
1000baee:	0a52      	lsrs	r2, r2, #9
1000baf0:	0f47      	lsrs	r7, r0, #29
1000baf2:	4317      	orrs	r7, r2
1000baf4:	00c5      	lsls	r5, r0, #3
1000baf6:	031a      	lsls	r2, r3, #12
1000baf8:	0058      	lsls	r0, r3, #1
1000bafa:	0fdb      	lsrs	r3, r3, #31
1000bafc:	4699      	mov	r9, r3
1000bafe:	0a52      	lsrs	r2, r2, #9
1000bb00:	0f4b      	lsrs	r3, r1, #29
1000bb02:	b083      	sub	sp, #12
1000bb04:	431a      	orrs	r2, r3
1000bb06:	00cb      	lsls	r3, r1, #3
1000bb08:	9301      	str	r3, [sp, #4]
1000bb0a:	4bcf      	ldr	r3, [pc, #828]	; (1000be48 <__aeabi_dsub+0x36c>)
1000bb0c:	0074      	lsls	r4, r6, #1
1000bb0e:	0ff6      	lsrs	r6, r6, #31
1000bb10:	0d64      	lsrs	r4, r4, #21
1000bb12:	46b0      	mov	r8, r6
1000bb14:	0d40      	lsrs	r0, r0, #21
1000bb16:	4298      	cmp	r0, r3
1000bb18:	d100      	bne.n	1000bb1c <__aeabi_dsub+0x40>
1000bb1a:	e0e8      	b.n	1000bcee <__aeabi_dsub+0x212>
1000bb1c:	2301      	movs	r3, #1
1000bb1e:	4649      	mov	r1, r9
1000bb20:	4059      	eors	r1, r3
1000bb22:	1c0b      	adds	r3, r1, #0
1000bb24:	429e      	cmp	r6, r3
1000bb26:	d100      	bne.n	1000bb2a <__aeabi_dsub+0x4e>
1000bb28:	e0b1      	b.n	1000bc8e <__aeabi_dsub+0x1b2>
1000bb2a:	1a26      	subs	r6, r4, r0
1000bb2c:	2e00      	cmp	r6, #0
1000bb2e:	dc00      	bgt.n	1000bb32 <__aeabi_dsub+0x56>
1000bb30:	e11c      	b.n	1000bd6c <__aeabi_dsub+0x290>
1000bb32:	2800      	cmp	r0, #0
1000bb34:	d142      	bne.n	1000bbbc <__aeabi_dsub+0xe0>
1000bb36:	1c13      	adds	r3, r2, #0
1000bb38:	9901      	ldr	r1, [sp, #4]
1000bb3a:	430b      	orrs	r3, r1
1000bb3c:	d000      	beq.n	1000bb40 <__aeabi_dsub+0x64>
1000bb3e:	e0e6      	b.n	1000bd0e <__aeabi_dsub+0x232>
1000bb40:	076b      	lsls	r3, r5, #29
1000bb42:	d100      	bne.n	1000bb46 <__aeabi_dsub+0x6a>
1000bb44:	e08e      	b.n	1000bc64 <__aeabi_dsub+0x188>
1000bb46:	230f      	movs	r3, #15
1000bb48:	402b      	ands	r3, r5
1000bb4a:	2b04      	cmp	r3, #4
1000bb4c:	d100      	bne.n	1000bb50 <__aeabi_dsub+0x74>
1000bb4e:	e089      	b.n	1000bc64 <__aeabi_dsub+0x188>
1000bb50:	1d2a      	adds	r2, r5, #4
1000bb52:	42aa      	cmp	r2, r5
1000bb54:	41ad      	sbcs	r5, r5
1000bb56:	2380      	movs	r3, #128	; 0x80
1000bb58:	2601      	movs	r6, #1
1000bb5a:	4641      	mov	r1, r8
1000bb5c:	426d      	negs	r5, r5
1000bb5e:	197f      	adds	r7, r7, r5
1000bb60:	041b      	lsls	r3, r3, #16
1000bb62:	403b      	ands	r3, r7
1000bb64:	400e      	ands	r6, r1
1000bb66:	1c15      	adds	r5, r2, #0
1000bb68:	2b00      	cmp	r3, #0
1000bb6a:	d100      	bne.n	1000bb6e <__aeabi_dsub+0x92>
1000bb6c:	e083      	b.n	1000bc76 <__aeabi_dsub+0x19a>
1000bb6e:	4bb6      	ldr	r3, [pc, #728]	; (1000be48 <__aeabi_dsub+0x36c>)
1000bb70:	3401      	adds	r4, #1
1000bb72:	429c      	cmp	r4, r3
1000bb74:	d100      	bne.n	1000bb78 <__aeabi_dsub+0x9c>
1000bb76:	e116      	b.n	1000bda6 <__aeabi_dsub+0x2ca>
1000bb78:	1c3a      	adds	r2, r7, #0
1000bb7a:	4bb4      	ldr	r3, [pc, #720]	; (1000be4c <__aeabi_dsub+0x370>)
1000bb7c:	08ed      	lsrs	r5, r5, #3
1000bb7e:	401a      	ands	r2, r3
1000bb80:	0750      	lsls	r0, r2, #29
1000bb82:	0564      	lsls	r4, r4, #21
1000bb84:	0252      	lsls	r2, r2, #9
1000bb86:	4305      	orrs	r5, r0
1000bb88:	0b12      	lsrs	r2, r2, #12
1000bb8a:	0d64      	lsrs	r4, r4, #21
1000bb8c:	2100      	movs	r1, #0
1000bb8e:	0312      	lsls	r2, r2, #12
1000bb90:	0d0b      	lsrs	r3, r1, #20
1000bb92:	051b      	lsls	r3, r3, #20
1000bb94:	0564      	lsls	r4, r4, #21
1000bb96:	0b12      	lsrs	r2, r2, #12
1000bb98:	431a      	orrs	r2, r3
1000bb9a:	0863      	lsrs	r3, r4, #1
1000bb9c:	4cac      	ldr	r4, [pc, #688]	; (1000be50 <__aeabi_dsub+0x374>)
1000bb9e:	07f6      	lsls	r6, r6, #31
1000bba0:	4014      	ands	r4, r2
1000bba2:	431c      	orrs	r4, r3
1000bba4:	0064      	lsls	r4, r4, #1
1000bba6:	0864      	lsrs	r4, r4, #1
1000bba8:	4334      	orrs	r4, r6
1000bbaa:	1c28      	adds	r0, r5, #0
1000bbac:	1c21      	adds	r1, r4, #0
1000bbae:	b003      	add	sp, #12
1000bbb0:	bc3c      	pop	{r2, r3, r4, r5}
1000bbb2:	4690      	mov	r8, r2
1000bbb4:	4699      	mov	r9, r3
1000bbb6:	46a2      	mov	sl, r4
1000bbb8:	46ab      	mov	fp, r5
1000bbba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bbbc:	4ba2      	ldr	r3, [pc, #648]	; (1000be48 <__aeabi_dsub+0x36c>)
1000bbbe:	429c      	cmp	r4, r3
1000bbc0:	d0be      	beq.n	1000bb40 <__aeabi_dsub+0x64>
1000bbc2:	2380      	movs	r3, #128	; 0x80
1000bbc4:	041b      	lsls	r3, r3, #16
1000bbc6:	431a      	orrs	r2, r3
1000bbc8:	2e38      	cmp	r6, #56	; 0x38
1000bbca:	dd00      	ble.n	1000bbce <__aeabi_dsub+0xf2>
1000bbcc:	e103      	b.n	1000bdd6 <__aeabi_dsub+0x2fa>
1000bbce:	2e1f      	cmp	r6, #31
1000bbd0:	dd00      	ble.n	1000bbd4 <__aeabi_dsub+0xf8>
1000bbd2:	e13f      	b.n	1000be54 <__aeabi_dsub+0x378>
1000bbd4:	2020      	movs	r0, #32
1000bbd6:	1b83      	subs	r3, r0, r6
1000bbd8:	4699      	mov	r9, r3
1000bbda:	1c13      	adds	r3, r2, #0
1000bbdc:	4649      	mov	r1, r9
1000bbde:	408b      	lsls	r3, r1
1000bbe0:	469c      	mov	ip, r3
1000bbe2:	9b01      	ldr	r3, [sp, #4]
1000bbe4:	4660      	mov	r0, ip
1000bbe6:	40f3      	lsrs	r3, r6
1000bbe8:	4303      	orrs	r3, r0
1000bbea:	9801      	ldr	r0, [sp, #4]
1000bbec:	40f2      	lsrs	r2, r6
1000bbee:	4088      	lsls	r0, r1
1000bbf0:	1c01      	adds	r1, r0, #0
1000bbf2:	1e48      	subs	r0, r1, #1
1000bbf4:	4181      	sbcs	r1, r0
1000bbf6:	430b      	orrs	r3, r1
1000bbf8:	1aeb      	subs	r3, r5, r3
1000bbfa:	429d      	cmp	r5, r3
1000bbfc:	4180      	sbcs	r0, r0
1000bbfe:	1c1d      	adds	r5, r3, #0
1000bc00:	1aba      	subs	r2, r7, r2
1000bc02:	4240      	negs	r0, r0
1000bc04:	1a17      	subs	r7, r2, r0
1000bc06:	023b      	lsls	r3, r7, #8
1000bc08:	d400      	bmi.n	1000bc0c <__aeabi_dsub+0x130>
1000bc0a:	e0a8      	b.n	1000bd5e <__aeabi_dsub+0x282>
1000bc0c:	027a      	lsls	r2, r7, #9
1000bc0e:	0a56      	lsrs	r6, r2, #9
1000bc10:	2e00      	cmp	r6, #0
1000bc12:	d100      	bne.n	1000bc16 <__aeabi_dsub+0x13a>
1000bc14:	e0ca      	b.n	1000bdac <__aeabi_dsub+0x2d0>
1000bc16:	1c30      	adds	r0, r6, #0
1000bc18:	f7fd fe24 	bl	10009864 <__clzsi2>
1000bc1c:	1c03      	adds	r3, r0, #0
1000bc1e:	3b08      	subs	r3, #8
1000bc20:	2b1f      	cmp	r3, #31
1000bc22:	dd00      	ble.n	1000bc26 <__aeabi_dsub+0x14a>
1000bc24:	e0cb      	b.n	1000bdbe <__aeabi_dsub+0x2e2>
1000bc26:	2228      	movs	r2, #40	; 0x28
1000bc28:	1c29      	adds	r1, r5, #0
1000bc2a:	1a12      	subs	r2, r2, r0
1000bc2c:	40d1      	lsrs	r1, r2
1000bc2e:	409e      	lsls	r6, r3
1000bc30:	1c0a      	adds	r2, r1, #0
1000bc32:	409d      	lsls	r5, r3
1000bc34:	4332      	orrs	r2, r6
1000bc36:	429c      	cmp	r4, r3
1000bc38:	dd00      	ble.n	1000bc3c <__aeabi_dsub+0x160>
1000bc3a:	e0c8      	b.n	1000bdce <__aeabi_dsub+0x2f2>
1000bc3c:	1b1c      	subs	r4, r3, r4
1000bc3e:	1c67      	adds	r7, r4, #1
1000bc40:	2f1f      	cmp	r7, #31
1000bc42:	dd00      	ble.n	1000bc46 <__aeabi_dsub+0x16a>
1000bc44:	e0ed      	b.n	1000be22 <__aeabi_dsub+0x346>
1000bc46:	231f      	movs	r3, #31
1000bc48:	1c29      	adds	r1, r5, #0
1000bc4a:	1b1c      	subs	r4, r3, r4
1000bc4c:	1c13      	adds	r3, r2, #0
1000bc4e:	40a5      	lsls	r5, r4
1000bc50:	40a3      	lsls	r3, r4
1000bc52:	40f9      	lsrs	r1, r7
1000bc54:	1e6c      	subs	r4, r5, #1
1000bc56:	41a5      	sbcs	r5, r4
1000bc58:	40fa      	lsrs	r2, r7
1000bc5a:	4319      	orrs	r1, r3
1000bc5c:	430d      	orrs	r5, r1
1000bc5e:	1c17      	adds	r7, r2, #0
1000bc60:	2400      	movs	r4, #0
1000bc62:	e76d      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000bc64:	2380      	movs	r3, #128	; 0x80
1000bc66:	2601      	movs	r6, #1
1000bc68:	4642      	mov	r2, r8
1000bc6a:	041b      	lsls	r3, r3, #16
1000bc6c:	403b      	ands	r3, r7
1000bc6e:	4016      	ands	r6, r2
1000bc70:	2b00      	cmp	r3, #0
1000bc72:	d000      	beq.n	1000bc76 <__aeabi_dsub+0x19a>
1000bc74:	e77b      	b.n	1000bb6e <__aeabi_dsub+0x92>
1000bc76:	4b74      	ldr	r3, [pc, #464]	; (1000be48 <__aeabi_dsub+0x36c>)
1000bc78:	08ed      	lsrs	r5, r5, #3
1000bc7a:	0778      	lsls	r0, r7, #29
1000bc7c:	4305      	orrs	r5, r0
1000bc7e:	08fa      	lsrs	r2, r7, #3
1000bc80:	429c      	cmp	r4, r3
1000bc82:	d03b      	beq.n	1000bcfc <__aeabi_dsub+0x220>
1000bc84:	0312      	lsls	r2, r2, #12
1000bc86:	0564      	lsls	r4, r4, #21
1000bc88:	0b12      	lsrs	r2, r2, #12
1000bc8a:	0d64      	lsrs	r4, r4, #21
1000bc8c:	e77e      	b.n	1000bb8c <__aeabi_dsub+0xb0>
1000bc8e:	1a23      	subs	r3, r4, r0
1000bc90:	469a      	mov	sl, r3
1000bc92:	2b00      	cmp	r3, #0
1000bc94:	dc00      	bgt.n	1000bc98 <__aeabi_dsub+0x1bc>
1000bc96:	e0a5      	b.n	1000bde4 <__aeabi_dsub+0x308>
1000bc98:	2800      	cmp	r0, #0
1000bc9a:	d044      	beq.n	1000bd26 <__aeabi_dsub+0x24a>
1000bc9c:	486a      	ldr	r0, [pc, #424]	; (1000be48 <__aeabi_dsub+0x36c>)
1000bc9e:	4284      	cmp	r4, r0
1000bca0:	d100      	bne.n	1000bca4 <__aeabi_dsub+0x1c8>
1000bca2:	e74d      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000bca4:	2080      	movs	r0, #128	; 0x80
1000bca6:	0400      	lsls	r0, r0, #16
1000bca8:	4302      	orrs	r2, r0
1000bcaa:	4653      	mov	r3, sl
1000bcac:	2b38      	cmp	r3, #56	; 0x38
1000bcae:	dc00      	bgt.n	1000bcb2 <__aeabi_dsub+0x1d6>
1000bcb0:	e11c      	b.n	1000beec <__aeabi_dsub+0x410>
1000bcb2:	9b01      	ldr	r3, [sp, #4]
1000bcb4:	431a      	orrs	r2, r3
1000bcb6:	1e51      	subs	r1, r2, #1
1000bcb8:	418a      	sbcs	r2, r1
1000bcba:	b2d1      	uxtb	r1, r2
1000bcbc:	2200      	movs	r2, #0
1000bcbe:	1949      	adds	r1, r1, r5
1000bcc0:	42a9      	cmp	r1, r5
1000bcc2:	4180      	sbcs	r0, r0
1000bcc4:	1c0d      	adds	r5, r1, #0
1000bcc6:	19d2      	adds	r2, r2, r7
1000bcc8:	4240      	negs	r0, r0
1000bcca:	1817      	adds	r7, r2, r0
1000bccc:	023b      	lsls	r3, r7, #8
1000bcce:	d546      	bpl.n	1000bd5e <__aeabi_dsub+0x282>
1000bcd0:	4b5d      	ldr	r3, [pc, #372]	; (1000be48 <__aeabi_dsub+0x36c>)
1000bcd2:	3401      	adds	r4, #1
1000bcd4:	429c      	cmp	r4, r3
1000bcd6:	d100      	bne.n	1000bcda <__aeabi_dsub+0x1fe>
1000bcd8:	e169      	b.n	1000bfae <__aeabi_dsub+0x4d2>
1000bcda:	2001      	movs	r0, #1
1000bcdc:	4a5b      	ldr	r2, [pc, #364]	; (1000be4c <__aeabi_dsub+0x370>)
1000bcde:	086b      	lsrs	r3, r5, #1
1000bce0:	403a      	ands	r2, r7
1000bce2:	4028      	ands	r0, r5
1000bce4:	4318      	orrs	r0, r3
1000bce6:	07d5      	lsls	r5, r2, #31
1000bce8:	4305      	orrs	r5, r0
1000bcea:	0857      	lsrs	r7, r2, #1
1000bcec:	e728      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000bcee:	1c13      	adds	r3, r2, #0
1000bcf0:	9901      	ldr	r1, [sp, #4]
1000bcf2:	430b      	orrs	r3, r1
1000bcf4:	d100      	bne.n	1000bcf8 <__aeabi_dsub+0x21c>
1000bcf6:	e711      	b.n	1000bb1c <__aeabi_dsub+0x40>
1000bcf8:	464b      	mov	r3, r9
1000bcfa:	e713      	b.n	1000bb24 <__aeabi_dsub+0x48>
1000bcfc:	1c2b      	adds	r3, r5, #0
1000bcfe:	4313      	orrs	r3, r2
1000bd00:	d051      	beq.n	1000bda6 <__aeabi_dsub+0x2ca>
1000bd02:	2380      	movs	r3, #128	; 0x80
1000bd04:	031b      	lsls	r3, r3, #12
1000bd06:	431a      	orrs	r2, r3
1000bd08:	0312      	lsls	r2, r2, #12
1000bd0a:	0b12      	lsrs	r2, r2, #12
1000bd0c:	e73e      	b.n	1000bb8c <__aeabi_dsub+0xb0>
1000bd0e:	3e01      	subs	r6, #1
1000bd10:	2e00      	cmp	r6, #0
1000bd12:	d000      	beq.n	1000bd16 <__aeabi_dsub+0x23a>
1000bd14:	e080      	b.n	1000be18 <__aeabi_dsub+0x33c>
1000bd16:	1a69      	subs	r1, r5, r1
1000bd18:	428d      	cmp	r5, r1
1000bd1a:	419b      	sbcs	r3, r3
1000bd1c:	1aba      	subs	r2, r7, r2
1000bd1e:	425b      	negs	r3, r3
1000bd20:	1ad7      	subs	r7, r2, r3
1000bd22:	1c0d      	adds	r5, r1, #0
1000bd24:	e76f      	b.n	1000bc06 <__aeabi_dsub+0x12a>
1000bd26:	1c10      	adds	r0, r2, #0
1000bd28:	9b01      	ldr	r3, [sp, #4]
1000bd2a:	4318      	orrs	r0, r3
1000bd2c:	d100      	bne.n	1000bd30 <__aeabi_dsub+0x254>
1000bd2e:	e707      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000bd30:	2301      	movs	r3, #1
1000bd32:	425b      	negs	r3, r3
1000bd34:	469c      	mov	ip, r3
1000bd36:	44e2      	add	sl, ip
1000bd38:	4653      	mov	r3, sl
1000bd3a:	2b00      	cmp	r3, #0
1000bd3c:	d000      	beq.n	1000bd40 <__aeabi_dsub+0x264>
1000bd3e:	e102      	b.n	1000bf46 <__aeabi_dsub+0x46a>
1000bd40:	9b01      	ldr	r3, [sp, #4]
1000bd42:	19d2      	adds	r2, r2, r7
1000bd44:	1959      	adds	r1, r3, r5
1000bd46:	42a9      	cmp	r1, r5
1000bd48:	419b      	sbcs	r3, r3
1000bd4a:	425b      	negs	r3, r3
1000bd4c:	18d7      	adds	r7, r2, r3
1000bd4e:	1c0d      	adds	r5, r1, #0
1000bd50:	e7bc      	b.n	1000bccc <__aeabi_dsub+0x1f0>
1000bd52:	4663      	mov	r3, ip
1000bd54:	4303      	orrs	r3, r0
1000bd56:	d100      	bne.n	1000bd5a <__aeabi_dsub+0x27e>
1000bd58:	e128      	b.n	1000bfac <__aeabi_dsub+0x4d0>
1000bd5a:	1c07      	adds	r7, r0, #0
1000bd5c:	4665      	mov	r5, ip
1000bd5e:	076b      	lsls	r3, r5, #29
1000bd60:	d000      	beq.n	1000bd64 <__aeabi_dsub+0x288>
1000bd62:	e6f0      	b.n	1000bb46 <__aeabi_dsub+0x6a>
1000bd64:	2601      	movs	r6, #1
1000bd66:	4643      	mov	r3, r8
1000bd68:	401e      	ands	r6, r3
1000bd6a:	e784      	b.n	1000bc76 <__aeabi_dsub+0x19a>
1000bd6c:	2e00      	cmp	r6, #0
1000bd6e:	d000      	beq.n	1000bd72 <__aeabi_dsub+0x296>
1000bd70:	e081      	b.n	1000be76 <__aeabi_dsub+0x39a>
1000bd72:	1c60      	adds	r0, r4, #1
1000bd74:	0540      	lsls	r0, r0, #21
1000bd76:	0d40      	lsrs	r0, r0, #21
1000bd78:	2801      	cmp	r0, #1
1000bd7a:	dc00      	bgt.n	1000bd7e <__aeabi_dsub+0x2a2>
1000bd7c:	e107      	b.n	1000bf8e <__aeabi_dsub+0x4b2>
1000bd7e:	9901      	ldr	r1, [sp, #4]
1000bd80:	1a68      	subs	r0, r5, r1
1000bd82:	4684      	mov	ip, r0
1000bd84:	4565      	cmp	r5, ip
1000bd86:	41b6      	sbcs	r6, r6
1000bd88:	1ab8      	subs	r0, r7, r2
1000bd8a:	4276      	negs	r6, r6
1000bd8c:	1b86      	subs	r6, r0, r6
1000bd8e:	0230      	lsls	r0, r6, #8
1000bd90:	d400      	bmi.n	1000bd94 <__aeabi_dsub+0x2b8>
1000bd92:	e0a1      	b.n	1000bed8 <__aeabi_dsub+0x3fc>
1000bd94:	468c      	mov	ip, r1
1000bd96:	1b4d      	subs	r5, r1, r5
1000bd98:	45ac      	cmp	ip, r5
1000bd9a:	4189      	sbcs	r1, r1
1000bd9c:	1bd2      	subs	r2, r2, r7
1000bd9e:	4249      	negs	r1, r1
1000bda0:	1a56      	subs	r6, r2, r1
1000bda2:	4698      	mov	r8, r3
1000bda4:	e734      	b.n	1000bc10 <__aeabi_dsub+0x134>
1000bda6:	2200      	movs	r2, #0
1000bda8:	2500      	movs	r5, #0
1000bdaa:	e6ef      	b.n	1000bb8c <__aeabi_dsub+0xb0>
1000bdac:	1c28      	adds	r0, r5, #0
1000bdae:	f7fd fd59 	bl	10009864 <__clzsi2>
1000bdb2:	3020      	adds	r0, #32
1000bdb4:	1c03      	adds	r3, r0, #0
1000bdb6:	3b08      	subs	r3, #8
1000bdb8:	2b1f      	cmp	r3, #31
1000bdba:	dc00      	bgt.n	1000bdbe <__aeabi_dsub+0x2e2>
1000bdbc:	e733      	b.n	1000bc26 <__aeabi_dsub+0x14a>
1000bdbe:	1c02      	adds	r2, r0, #0
1000bdc0:	3a28      	subs	r2, #40	; 0x28
1000bdc2:	4095      	lsls	r5, r2
1000bdc4:	1c2a      	adds	r2, r5, #0
1000bdc6:	2500      	movs	r5, #0
1000bdc8:	429c      	cmp	r4, r3
1000bdca:	dc00      	bgt.n	1000bdce <__aeabi_dsub+0x2f2>
1000bdcc:	e736      	b.n	1000bc3c <__aeabi_dsub+0x160>
1000bdce:	4f1f      	ldr	r7, [pc, #124]	; (1000be4c <__aeabi_dsub+0x370>)
1000bdd0:	1ae4      	subs	r4, r4, r3
1000bdd2:	4017      	ands	r7, r2
1000bdd4:	e6b4      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000bdd6:	9b01      	ldr	r3, [sp, #4]
1000bdd8:	431a      	orrs	r2, r3
1000bdda:	1e51      	subs	r1, r2, #1
1000bddc:	418a      	sbcs	r2, r1
1000bdde:	b2d3      	uxtb	r3, r2
1000bde0:	2200      	movs	r2, #0
1000bde2:	e709      	b.n	1000bbf8 <__aeabi_dsub+0x11c>
1000bde4:	2b00      	cmp	r3, #0
1000bde6:	d000      	beq.n	1000bdea <__aeabi_dsub+0x30e>
1000bde8:	e101      	b.n	1000bfee <__aeabi_dsub+0x512>
1000bdea:	1c60      	adds	r0, r4, #1
1000bdec:	0543      	lsls	r3, r0, #21
1000bdee:	0d5b      	lsrs	r3, r3, #21
1000bdf0:	2b01      	cmp	r3, #1
1000bdf2:	dc00      	bgt.n	1000bdf6 <__aeabi_dsub+0x31a>
1000bdf4:	e0b0      	b.n	1000bf58 <__aeabi_dsub+0x47c>
1000bdf6:	4b14      	ldr	r3, [pc, #80]	; (1000be48 <__aeabi_dsub+0x36c>)
1000bdf8:	4298      	cmp	r0, r3
1000bdfa:	d100      	bne.n	1000bdfe <__aeabi_dsub+0x322>
1000bdfc:	e11e      	b.n	1000c03c <__aeabi_dsub+0x560>
1000bdfe:	9b01      	ldr	r3, [sp, #4]
1000be00:	19d2      	adds	r2, r2, r7
1000be02:	1959      	adds	r1, r3, r5
1000be04:	42a9      	cmp	r1, r5
1000be06:	419b      	sbcs	r3, r3
1000be08:	425b      	negs	r3, r3
1000be0a:	18d2      	adds	r2, r2, r3
1000be0c:	0849      	lsrs	r1, r1, #1
1000be0e:	07d5      	lsls	r5, r2, #31
1000be10:	430d      	orrs	r5, r1
1000be12:	0857      	lsrs	r7, r2, #1
1000be14:	1c04      	adds	r4, r0, #0
1000be16:	e693      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000be18:	4b0b      	ldr	r3, [pc, #44]	; (1000be48 <__aeabi_dsub+0x36c>)
1000be1a:	429c      	cmp	r4, r3
1000be1c:	d000      	beq.n	1000be20 <__aeabi_dsub+0x344>
1000be1e:	e6d3      	b.n	1000bbc8 <__aeabi_dsub+0xec>
1000be20:	e68e      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000be22:	1c21      	adds	r1, r4, #0
1000be24:	1c13      	adds	r3, r2, #0
1000be26:	391f      	subs	r1, #31
1000be28:	40cb      	lsrs	r3, r1
1000be2a:	1c19      	adds	r1, r3, #0
1000be2c:	2f20      	cmp	r7, #32
1000be2e:	d100      	bne.n	1000be32 <__aeabi_dsub+0x356>
1000be30:	e08e      	b.n	1000bf50 <__aeabi_dsub+0x474>
1000be32:	233f      	movs	r3, #63	; 0x3f
1000be34:	1b1c      	subs	r4, r3, r4
1000be36:	40a2      	lsls	r2, r4
1000be38:	4315      	orrs	r5, r2
1000be3a:	1e6a      	subs	r2, r5, #1
1000be3c:	4195      	sbcs	r5, r2
1000be3e:	2700      	movs	r7, #0
1000be40:	430d      	orrs	r5, r1
1000be42:	2400      	movs	r4, #0
1000be44:	e78b      	b.n	1000bd5e <__aeabi_dsub+0x282>
1000be46:	46c0      	nop			; (mov r8, r8)
1000be48:	000007ff 	.word	0x000007ff
1000be4c:	ff7fffff 	.word	0xff7fffff
1000be50:	800fffff 	.word	0x800fffff
1000be54:	1c33      	adds	r3, r6, #0
1000be56:	1c10      	adds	r0, r2, #0
1000be58:	3b20      	subs	r3, #32
1000be5a:	40d8      	lsrs	r0, r3
1000be5c:	2e20      	cmp	r6, #32
1000be5e:	d079      	beq.n	1000bf54 <__aeabi_dsub+0x478>
1000be60:	2340      	movs	r3, #64	; 0x40
1000be62:	1b9b      	subs	r3, r3, r6
1000be64:	409a      	lsls	r2, r3
1000be66:	1c13      	adds	r3, r2, #0
1000be68:	9a01      	ldr	r2, [sp, #4]
1000be6a:	4313      	orrs	r3, r2
1000be6c:	1e59      	subs	r1, r3, #1
1000be6e:	418b      	sbcs	r3, r1
1000be70:	2200      	movs	r2, #0
1000be72:	4303      	orrs	r3, r0
1000be74:	e6c0      	b.n	1000bbf8 <__aeabi_dsub+0x11c>
1000be76:	2c00      	cmp	r4, #0
1000be78:	d053      	beq.n	1000bf22 <__aeabi_dsub+0x446>
1000be7a:	4cc7      	ldr	r4, [pc, #796]	; (1000c198 <__aeabi_dsub+0x6bc>)
1000be7c:	42a0      	cmp	r0, r4
1000be7e:	d100      	bne.n	1000be82 <__aeabi_dsub+0x3a6>
1000be80:	e0b0      	b.n	1000bfe4 <__aeabi_dsub+0x508>
1000be82:	2480      	movs	r4, #128	; 0x80
1000be84:	4271      	negs	r1, r6
1000be86:	4689      	mov	r9, r1
1000be88:	0424      	lsls	r4, r4, #16
1000be8a:	4327      	orrs	r7, r4
1000be8c:	4649      	mov	r1, r9
1000be8e:	2938      	cmp	r1, #56	; 0x38
1000be90:	dd00      	ble.n	1000be94 <__aeabi_dsub+0x3b8>
1000be92:	e0cd      	b.n	1000c030 <__aeabi_dsub+0x554>
1000be94:	291f      	cmp	r1, #31
1000be96:	dd00      	ble.n	1000be9a <__aeabi_dsub+0x3be>
1000be98:	e159      	b.n	1000c14e <__aeabi_dsub+0x672>
1000be9a:	2420      	movs	r4, #32
1000be9c:	1c3e      	adds	r6, r7, #0
1000be9e:	1a61      	subs	r1, r4, r1
1000bea0:	408e      	lsls	r6, r1
1000bea2:	468a      	mov	sl, r1
1000bea4:	46b0      	mov	r8, r6
1000bea6:	4649      	mov	r1, r9
1000bea8:	1c2e      	adds	r6, r5, #0
1000beaa:	40ce      	lsrs	r6, r1
1000beac:	4651      	mov	r1, sl
1000beae:	46b4      	mov	ip, r6
1000beb0:	408d      	lsls	r5, r1
1000beb2:	4664      	mov	r4, ip
1000beb4:	4646      	mov	r6, r8
1000beb6:	4649      	mov	r1, r9
1000beb8:	4326      	orrs	r6, r4
1000beba:	1e6c      	subs	r4, r5, #1
1000bebc:	41a5      	sbcs	r5, r4
1000bebe:	40cf      	lsrs	r7, r1
1000bec0:	4335      	orrs	r5, r6
1000bec2:	9901      	ldr	r1, [sp, #4]
1000bec4:	1bd7      	subs	r7, r2, r7
1000bec6:	468c      	mov	ip, r1
1000bec8:	1b4d      	subs	r5, r1, r5
1000beca:	45ac      	cmp	ip, r5
1000becc:	4192      	sbcs	r2, r2
1000bece:	4252      	negs	r2, r2
1000bed0:	1abf      	subs	r7, r7, r2
1000bed2:	1c04      	adds	r4, r0, #0
1000bed4:	4698      	mov	r8, r3
1000bed6:	e696      	b.n	1000bc06 <__aeabi_dsub+0x12a>
1000bed8:	4663      	mov	r3, ip
1000beda:	4665      	mov	r5, ip
1000bedc:	4333      	orrs	r3, r6
1000bede:	d000      	beq.n	1000bee2 <__aeabi_dsub+0x406>
1000bee0:	e696      	b.n	1000bc10 <__aeabi_dsub+0x134>
1000bee2:	2600      	movs	r6, #0
1000bee4:	2700      	movs	r7, #0
1000bee6:	2400      	movs	r4, #0
1000bee8:	2500      	movs	r5, #0
1000beea:	e6c4      	b.n	1000bc76 <__aeabi_dsub+0x19a>
1000beec:	2b1f      	cmp	r3, #31
1000beee:	dc61      	bgt.n	1000bfb4 <__aeabi_dsub+0x4d8>
1000bef0:	2020      	movs	r0, #32
1000bef2:	1ac3      	subs	r3, r0, r3
1000bef4:	469b      	mov	fp, r3
1000bef6:	1c13      	adds	r3, r2, #0
1000bef8:	4659      	mov	r1, fp
1000befa:	408b      	lsls	r3, r1
1000befc:	4651      	mov	r1, sl
1000befe:	4699      	mov	r9, r3
1000bf00:	9b01      	ldr	r3, [sp, #4]
1000bf02:	40cb      	lsrs	r3, r1
1000bf04:	469c      	mov	ip, r3
1000bf06:	464b      	mov	r3, r9
1000bf08:	4660      	mov	r0, ip
1000bf0a:	4303      	orrs	r3, r0
1000bf0c:	469c      	mov	ip, r3
1000bf0e:	465b      	mov	r3, fp
1000bf10:	9901      	ldr	r1, [sp, #4]
1000bf12:	4099      	lsls	r1, r3
1000bf14:	4663      	mov	r3, ip
1000bf16:	1e48      	subs	r0, r1, #1
1000bf18:	4181      	sbcs	r1, r0
1000bf1a:	4319      	orrs	r1, r3
1000bf1c:	4653      	mov	r3, sl
1000bf1e:	40da      	lsrs	r2, r3
1000bf20:	e6cd      	b.n	1000bcbe <__aeabi_dsub+0x1e2>
1000bf22:	1c3c      	adds	r4, r7, #0
1000bf24:	432c      	orrs	r4, r5
1000bf26:	d05d      	beq.n	1000bfe4 <__aeabi_dsub+0x508>
1000bf28:	43f1      	mvns	r1, r6
1000bf2a:	4689      	mov	r9, r1
1000bf2c:	2900      	cmp	r1, #0
1000bf2e:	d155      	bne.n	1000bfdc <__aeabi_dsub+0x500>
1000bf30:	9901      	ldr	r1, [sp, #4]
1000bf32:	1bd2      	subs	r2, r2, r7
1000bf34:	468c      	mov	ip, r1
1000bf36:	1b4d      	subs	r5, r1, r5
1000bf38:	45ac      	cmp	ip, r5
1000bf3a:	4189      	sbcs	r1, r1
1000bf3c:	4249      	negs	r1, r1
1000bf3e:	1a57      	subs	r7, r2, r1
1000bf40:	1c04      	adds	r4, r0, #0
1000bf42:	4698      	mov	r8, r3
1000bf44:	e65f      	b.n	1000bc06 <__aeabi_dsub+0x12a>
1000bf46:	4894      	ldr	r0, [pc, #592]	; (1000c198 <__aeabi_dsub+0x6bc>)
1000bf48:	4284      	cmp	r4, r0
1000bf4a:	d000      	beq.n	1000bf4e <__aeabi_dsub+0x472>
1000bf4c:	e6ad      	b.n	1000bcaa <__aeabi_dsub+0x1ce>
1000bf4e:	e5f7      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000bf50:	2200      	movs	r2, #0
1000bf52:	e771      	b.n	1000be38 <__aeabi_dsub+0x35c>
1000bf54:	2300      	movs	r3, #0
1000bf56:	e787      	b.n	1000be68 <__aeabi_dsub+0x38c>
1000bf58:	1c3b      	adds	r3, r7, #0
1000bf5a:	432b      	orrs	r3, r5
1000bf5c:	2c00      	cmp	r4, #0
1000bf5e:	d000      	beq.n	1000bf62 <__aeabi_dsub+0x486>
1000bf60:	e0da      	b.n	1000c118 <__aeabi_dsub+0x63c>
1000bf62:	2b00      	cmp	r3, #0
1000bf64:	d100      	bne.n	1000bf68 <__aeabi_dsub+0x48c>
1000bf66:	e113      	b.n	1000c190 <__aeabi_dsub+0x6b4>
1000bf68:	1c13      	adds	r3, r2, #0
1000bf6a:	9901      	ldr	r1, [sp, #4]
1000bf6c:	430b      	orrs	r3, r1
1000bf6e:	d100      	bne.n	1000bf72 <__aeabi_dsub+0x496>
1000bf70:	e5e6      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000bf72:	1949      	adds	r1, r1, r5
1000bf74:	42a9      	cmp	r1, r5
1000bf76:	419b      	sbcs	r3, r3
1000bf78:	19d2      	adds	r2, r2, r7
1000bf7a:	425b      	negs	r3, r3
1000bf7c:	18d7      	adds	r7, r2, r3
1000bf7e:	023b      	lsls	r3, r7, #8
1000bf80:	d400      	bmi.n	1000bf84 <__aeabi_dsub+0x4a8>
1000bf82:	e121      	b.n	1000c1c8 <__aeabi_dsub+0x6ec>
1000bf84:	4b85      	ldr	r3, [pc, #532]	; (1000c19c <__aeabi_dsub+0x6c0>)
1000bf86:	1c0d      	adds	r5, r1, #0
1000bf88:	401f      	ands	r7, r3
1000bf8a:	1c04      	adds	r4, r0, #0
1000bf8c:	e5d8      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000bf8e:	1c38      	adds	r0, r7, #0
1000bf90:	4328      	orrs	r0, r5
1000bf92:	2c00      	cmp	r4, #0
1000bf94:	d140      	bne.n	1000c018 <__aeabi_dsub+0x53c>
1000bf96:	2800      	cmp	r0, #0
1000bf98:	d000      	beq.n	1000bf9c <__aeabi_dsub+0x4c0>
1000bf9a:	e083      	b.n	1000c0a4 <__aeabi_dsub+0x5c8>
1000bf9c:	1c10      	adds	r0, r2, #0
1000bf9e:	9901      	ldr	r1, [sp, #4]
1000bfa0:	4308      	orrs	r0, r1
1000bfa2:	d003      	beq.n	1000bfac <__aeabi_dsub+0x4d0>
1000bfa4:	1c17      	adds	r7, r2, #0
1000bfa6:	1c0d      	adds	r5, r1, #0
1000bfa8:	4698      	mov	r8, r3
1000bfaa:	e5c9      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000bfac:	2600      	movs	r6, #0
1000bfae:	2700      	movs	r7, #0
1000bfb0:	2500      	movs	r5, #0
1000bfb2:	e660      	b.n	1000bc76 <__aeabi_dsub+0x19a>
1000bfb4:	4650      	mov	r0, sl
1000bfb6:	1c13      	adds	r3, r2, #0
1000bfb8:	3820      	subs	r0, #32
1000bfba:	40c3      	lsrs	r3, r0
1000bfbc:	1c18      	adds	r0, r3, #0
1000bfbe:	4653      	mov	r3, sl
1000bfc0:	2b20      	cmp	r3, #32
1000bfc2:	d100      	bne.n	1000bfc6 <__aeabi_dsub+0x4ea>
1000bfc4:	e0c1      	b.n	1000c14a <__aeabi_dsub+0x66e>
1000bfc6:	2340      	movs	r3, #64	; 0x40
1000bfc8:	4651      	mov	r1, sl
1000bfca:	1a5b      	subs	r3, r3, r1
1000bfcc:	409a      	lsls	r2, r3
1000bfce:	9901      	ldr	r1, [sp, #4]
1000bfd0:	4311      	orrs	r1, r2
1000bfd2:	1e4a      	subs	r2, r1, #1
1000bfd4:	4191      	sbcs	r1, r2
1000bfd6:	2200      	movs	r2, #0
1000bfd8:	4301      	orrs	r1, r0
1000bfda:	e670      	b.n	1000bcbe <__aeabi_dsub+0x1e2>
1000bfdc:	4c6e      	ldr	r4, [pc, #440]	; (1000c198 <__aeabi_dsub+0x6bc>)
1000bfde:	42a0      	cmp	r0, r4
1000bfe0:	d000      	beq.n	1000bfe4 <__aeabi_dsub+0x508>
1000bfe2:	e753      	b.n	1000be8c <__aeabi_dsub+0x3b0>
1000bfe4:	1c17      	adds	r7, r2, #0
1000bfe6:	9d01      	ldr	r5, [sp, #4]
1000bfe8:	1c04      	adds	r4, r0, #0
1000bfea:	4698      	mov	r8, r3
1000bfec:	e5a8      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000bfee:	2c00      	cmp	r4, #0
1000bff0:	d128      	bne.n	1000c044 <__aeabi_dsub+0x568>
1000bff2:	1c3c      	adds	r4, r7, #0
1000bff4:	432c      	orrs	r4, r5
1000bff6:	d100      	bne.n	1000bffa <__aeabi_dsub+0x51e>
1000bff8:	e08a      	b.n	1000c110 <__aeabi_dsub+0x634>
1000bffa:	43db      	mvns	r3, r3
1000bffc:	469a      	mov	sl, r3
1000bffe:	2b00      	cmp	r3, #0
1000c000:	d000      	beq.n	1000c004 <__aeabi_dsub+0x528>
1000c002:	e082      	b.n	1000c10a <__aeabi_dsub+0x62e>
1000c004:	9b01      	ldr	r3, [sp, #4]
1000c006:	19d2      	adds	r2, r2, r7
1000c008:	469c      	mov	ip, r3
1000c00a:	4465      	add	r5, ip
1000c00c:	429d      	cmp	r5, r3
1000c00e:	4189      	sbcs	r1, r1
1000c010:	4249      	negs	r1, r1
1000c012:	1857      	adds	r7, r2, r1
1000c014:	1c04      	adds	r4, r0, #0
1000c016:	e659      	b.n	1000bccc <__aeabi_dsub+0x1f0>
1000c018:	2800      	cmp	r0, #0
1000c01a:	d15b      	bne.n	1000c0d4 <__aeabi_dsub+0x5f8>
1000c01c:	1c10      	adds	r0, r2, #0
1000c01e:	9901      	ldr	r1, [sp, #4]
1000c020:	4308      	orrs	r0, r1
1000c022:	d100      	bne.n	1000c026 <__aeabi_dsub+0x54a>
1000c024:	e0a4      	b.n	1000c170 <__aeabi_dsub+0x694>
1000c026:	1c17      	adds	r7, r2, #0
1000c028:	1c0d      	adds	r5, r1, #0
1000c02a:	4698      	mov	r8, r3
1000c02c:	4c5a      	ldr	r4, [pc, #360]	; (1000c198 <__aeabi_dsub+0x6bc>)
1000c02e:	e587      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000c030:	433d      	orrs	r5, r7
1000c032:	1e6f      	subs	r7, r5, #1
1000c034:	41bd      	sbcs	r5, r7
1000c036:	2700      	movs	r7, #0
1000c038:	b2ed      	uxtb	r5, r5
1000c03a:	e742      	b.n	1000bec2 <__aeabi_dsub+0x3e6>
1000c03c:	1c04      	adds	r4, r0, #0
1000c03e:	2700      	movs	r7, #0
1000c040:	2500      	movs	r5, #0
1000c042:	e618      	b.n	1000bc76 <__aeabi_dsub+0x19a>
1000c044:	4c54      	ldr	r4, [pc, #336]	; (1000c198 <__aeabi_dsub+0x6bc>)
1000c046:	42a0      	cmp	r0, r4
1000c048:	d062      	beq.n	1000c110 <__aeabi_dsub+0x634>
1000c04a:	4653      	mov	r3, sl
1000c04c:	2480      	movs	r4, #128	; 0x80
1000c04e:	425b      	negs	r3, r3
1000c050:	469a      	mov	sl, r3
1000c052:	0424      	lsls	r4, r4, #16
1000c054:	4327      	orrs	r7, r4
1000c056:	4653      	mov	r3, sl
1000c058:	2b38      	cmp	r3, #56	; 0x38
1000c05a:	dd00      	ble.n	1000c05e <__aeabi_dsub+0x582>
1000c05c:	e08e      	b.n	1000c17c <__aeabi_dsub+0x6a0>
1000c05e:	2b1f      	cmp	r3, #31
1000c060:	dd00      	ble.n	1000c064 <__aeabi_dsub+0x588>
1000c062:	e09d      	b.n	1000c1a0 <__aeabi_dsub+0x6c4>
1000c064:	2420      	movs	r4, #32
1000c066:	1ae3      	subs	r3, r4, r3
1000c068:	469b      	mov	fp, r3
1000c06a:	1c3b      	adds	r3, r7, #0
1000c06c:	4659      	mov	r1, fp
1000c06e:	408b      	lsls	r3, r1
1000c070:	4651      	mov	r1, sl
1000c072:	4699      	mov	r9, r3
1000c074:	1c2b      	adds	r3, r5, #0
1000c076:	40cb      	lsrs	r3, r1
1000c078:	469c      	mov	ip, r3
1000c07a:	464b      	mov	r3, r9
1000c07c:	4664      	mov	r4, ip
1000c07e:	4323      	orrs	r3, r4
1000c080:	469c      	mov	ip, r3
1000c082:	465b      	mov	r3, fp
1000c084:	409d      	lsls	r5, r3
1000c086:	4663      	mov	r3, ip
1000c088:	1e6c      	subs	r4, r5, #1
1000c08a:	41a5      	sbcs	r5, r4
1000c08c:	40cf      	lsrs	r7, r1
1000c08e:	431d      	orrs	r5, r3
1000c090:	9b01      	ldr	r3, [sp, #4]
1000c092:	18bf      	adds	r7, r7, r2
1000c094:	469c      	mov	ip, r3
1000c096:	4465      	add	r5, ip
1000c098:	429d      	cmp	r5, r3
1000c09a:	4192      	sbcs	r2, r2
1000c09c:	4252      	negs	r2, r2
1000c09e:	18bf      	adds	r7, r7, r2
1000c0a0:	1c04      	adds	r4, r0, #0
1000c0a2:	e613      	b.n	1000bccc <__aeabi_dsub+0x1f0>
1000c0a4:	1c10      	adds	r0, r2, #0
1000c0a6:	9901      	ldr	r1, [sp, #4]
1000c0a8:	4308      	orrs	r0, r1
1000c0aa:	d100      	bne.n	1000c0ae <__aeabi_dsub+0x5d2>
1000c0ac:	e548      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000c0ae:	1a68      	subs	r0, r5, r1
1000c0b0:	4684      	mov	ip, r0
1000c0b2:	4285      	cmp	r5, r0
1000c0b4:	4180      	sbcs	r0, r0
1000c0b6:	1abe      	subs	r6, r7, r2
1000c0b8:	4240      	negs	r0, r0
1000c0ba:	1a30      	subs	r0, r6, r0
1000c0bc:	0206      	lsls	r6, r0, #8
1000c0be:	d400      	bmi.n	1000c0c2 <__aeabi_dsub+0x5e6>
1000c0c0:	e647      	b.n	1000bd52 <__aeabi_dsub+0x276>
1000c0c2:	468c      	mov	ip, r1
1000c0c4:	1b4d      	subs	r5, r1, r5
1000c0c6:	45ac      	cmp	ip, r5
1000c0c8:	4189      	sbcs	r1, r1
1000c0ca:	1bd2      	subs	r2, r2, r7
1000c0cc:	4249      	negs	r1, r1
1000c0ce:	1a57      	subs	r7, r2, r1
1000c0d0:	4698      	mov	r8, r3
1000c0d2:	e535      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000c0d4:	1c10      	adds	r0, r2, #0
1000c0d6:	9901      	ldr	r1, [sp, #4]
1000c0d8:	4308      	orrs	r0, r1
1000c0da:	d034      	beq.n	1000c146 <__aeabi_dsub+0x66a>
1000c0dc:	2480      	movs	r4, #128	; 0x80
1000c0de:	0778      	lsls	r0, r7, #29
1000c0e0:	08ed      	lsrs	r5, r5, #3
1000c0e2:	08ff      	lsrs	r7, r7, #3
1000c0e4:	0324      	lsls	r4, r4, #12
1000c0e6:	4328      	orrs	r0, r5
1000c0e8:	4227      	tst	r7, r4
1000c0ea:	d008      	beq.n	1000c0fe <__aeabi_dsub+0x622>
1000c0ec:	08d6      	lsrs	r6, r2, #3
1000c0ee:	4226      	tst	r6, r4
1000c0f0:	d105      	bne.n	1000c0fe <__aeabi_dsub+0x622>
1000c0f2:	08c9      	lsrs	r1, r1, #3
1000c0f4:	0752      	lsls	r2, r2, #29
1000c0f6:	430a      	orrs	r2, r1
1000c0f8:	1c10      	adds	r0, r2, #0
1000c0fa:	1c37      	adds	r7, r6, #0
1000c0fc:	4698      	mov	r8, r3
1000c0fe:	00ff      	lsls	r7, r7, #3
1000c100:	0f42      	lsrs	r2, r0, #29
1000c102:	4317      	orrs	r7, r2
1000c104:	00c5      	lsls	r5, r0, #3
1000c106:	4c24      	ldr	r4, [pc, #144]	; (1000c198 <__aeabi_dsub+0x6bc>)
1000c108:	e51a      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000c10a:	4c23      	ldr	r4, [pc, #140]	; (1000c198 <__aeabi_dsub+0x6bc>)
1000c10c:	42a0      	cmp	r0, r4
1000c10e:	d1a2      	bne.n	1000c056 <__aeabi_dsub+0x57a>
1000c110:	1c17      	adds	r7, r2, #0
1000c112:	9d01      	ldr	r5, [sp, #4]
1000c114:	1c04      	adds	r4, r0, #0
1000c116:	e513      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000c118:	2b00      	cmp	r3, #0
1000c11a:	d035      	beq.n	1000c188 <__aeabi_dsub+0x6ac>
1000c11c:	1c13      	adds	r3, r2, #0
1000c11e:	9901      	ldr	r1, [sp, #4]
1000c120:	430b      	orrs	r3, r1
1000c122:	d010      	beq.n	1000c146 <__aeabi_dsub+0x66a>
1000c124:	2480      	movs	r4, #128	; 0x80
1000c126:	0778      	lsls	r0, r7, #29
1000c128:	08ed      	lsrs	r5, r5, #3
1000c12a:	08ff      	lsrs	r7, r7, #3
1000c12c:	0324      	lsls	r4, r4, #12
1000c12e:	4328      	orrs	r0, r5
1000c130:	4227      	tst	r7, r4
1000c132:	d0e4      	beq.n	1000c0fe <__aeabi_dsub+0x622>
1000c134:	08d3      	lsrs	r3, r2, #3
1000c136:	4223      	tst	r3, r4
1000c138:	d1e1      	bne.n	1000c0fe <__aeabi_dsub+0x622>
1000c13a:	08c9      	lsrs	r1, r1, #3
1000c13c:	0752      	lsls	r2, r2, #29
1000c13e:	430a      	orrs	r2, r1
1000c140:	1c10      	adds	r0, r2, #0
1000c142:	1c1f      	adds	r7, r3, #0
1000c144:	e7db      	b.n	1000c0fe <__aeabi_dsub+0x622>
1000c146:	4c14      	ldr	r4, [pc, #80]	; (1000c198 <__aeabi_dsub+0x6bc>)
1000c148:	e4fa      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000c14a:	2200      	movs	r2, #0
1000c14c:	e73f      	b.n	1000bfce <__aeabi_dsub+0x4f2>
1000c14e:	464c      	mov	r4, r9
1000c150:	1c3e      	adds	r6, r7, #0
1000c152:	3c20      	subs	r4, #32
1000c154:	40e6      	lsrs	r6, r4
1000c156:	4649      	mov	r1, r9
1000c158:	1c34      	adds	r4, r6, #0
1000c15a:	2920      	cmp	r1, #32
1000c15c:	d032      	beq.n	1000c1c4 <__aeabi_dsub+0x6e8>
1000c15e:	2640      	movs	r6, #64	; 0x40
1000c160:	1a76      	subs	r6, r6, r1
1000c162:	40b7      	lsls	r7, r6
1000c164:	433d      	orrs	r5, r7
1000c166:	1e6f      	subs	r7, r5, #1
1000c168:	41bd      	sbcs	r5, r7
1000c16a:	2700      	movs	r7, #0
1000c16c:	4325      	orrs	r5, r4
1000c16e:	e6a8      	b.n	1000bec2 <__aeabi_dsub+0x3e6>
1000c170:	2780      	movs	r7, #128	; 0x80
1000c172:	2600      	movs	r6, #0
1000c174:	03ff      	lsls	r7, r7, #15
1000c176:	4c08      	ldr	r4, [pc, #32]	; (1000c198 <__aeabi_dsub+0x6bc>)
1000c178:	2500      	movs	r5, #0
1000c17a:	e57c      	b.n	1000bc76 <__aeabi_dsub+0x19a>
1000c17c:	433d      	orrs	r5, r7
1000c17e:	1e6f      	subs	r7, r5, #1
1000c180:	41bd      	sbcs	r5, r7
1000c182:	2700      	movs	r7, #0
1000c184:	b2ed      	uxtb	r5, r5
1000c186:	e783      	b.n	1000c090 <__aeabi_dsub+0x5b4>
1000c188:	1c17      	adds	r7, r2, #0
1000c18a:	9d01      	ldr	r5, [sp, #4]
1000c18c:	4c02      	ldr	r4, [pc, #8]	; (1000c198 <__aeabi_dsub+0x6bc>)
1000c18e:	e4d7      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000c190:	1c17      	adds	r7, r2, #0
1000c192:	9d01      	ldr	r5, [sp, #4]
1000c194:	e4d4      	b.n	1000bb40 <__aeabi_dsub+0x64>
1000c196:	46c0      	nop			; (mov r8, r8)
1000c198:	000007ff 	.word	0x000007ff
1000c19c:	ff7fffff 	.word	0xff7fffff
1000c1a0:	4654      	mov	r4, sl
1000c1a2:	1c3b      	adds	r3, r7, #0
1000c1a4:	3c20      	subs	r4, #32
1000c1a6:	40e3      	lsrs	r3, r4
1000c1a8:	1c1c      	adds	r4, r3, #0
1000c1aa:	4653      	mov	r3, sl
1000c1ac:	2b20      	cmp	r3, #32
1000c1ae:	d00d      	beq.n	1000c1cc <__aeabi_dsub+0x6f0>
1000c1b0:	2340      	movs	r3, #64	; 0x40
1000c1b2:	4651      	mov	r1, sl
1000c1b4:	1a5b      	subs	r3, r3, r1
1000c1b6:	409f      	lsls	r7, r3
1000c1b8:	433d      	orrs	r5, r7
1000c1ba:	1e6f      	subs	r7, r5, #1
1000c1bc:	41bd      	sbcs	r5, r7
1000c1be:	2700      	movs	r7, #0
1000c1c0:	4325      	orrs	r5, r4
1000c1c2:	e765      	b.n	1000c090 <__aeabi_dsub+0x5b4>
1000c1c4:	2700      	movs	r7, #0
1000c1c6:	e7cd      	b.n	1000c164 <__aeabi_dsub+0x688>
1000c1c8:	1c0d      	adds	r5, r1, #0
1000c1ca:	e5c8      	b.n	1000bd5e <__aeabi_dsub+0x282>
1000c1cc:	2700      	movs	r7, #0
1000c1ce:	e7f3      	b.n	1000c1b8 <__aeabi_dsub+0x6dc>

1000c1d0 <__aeabi_d2iz>:
1000c1d0:	030b      	lsls	r3, r1, #12
1000c1d2:	b530      	push	{r4, r5, lr}
1000c1d4:	4c13      	ldr	r4, [pc, #76]	; (1000c224 <__aeabi_d2iz+0x54>)
1000c1d6:	0b1a      	lsrs	r2, r3, #12
1000c1d8:	004b      	lsls	r3, r1, #1
1000c1da:	1c05      	adds	r5, r0, #0
1000c1dc:	0d5b      	lsrs	r3, r3, #21
1000c1de:	0fc9      	lsrs	r1, r1, #31
1000c1e0:	2000      	movs	r0, #0
1000c1e2:	42a3      	cmp	r3, r4
1000c1e4:	dd10      	ble.n	1000c208 <__aeabi_d2iz+0x38>
1000c1e6:	4810      	ldr	r0, [pc, #64]	; (1000c228 <__aeabi_d2iz+0x58>)
1000c1e8:	4283      	cmp	r3, r0
1000c1ea:	dc0e      	bgt.n	1000c20a <__aeabi_d2iz+0x3a>
1000c1ec:	2080      	movs	r0, #128	; 0x80
1000c1ee:	4c0f      	ldr	r4, [pc, #60]	; (1000c22c <__aeabi_d2iz+0x5c>)
1000c1f0:	0340      	lsls	r0, r0, #13
1000c1f2:	4302      	orrs	r2, r0
1000c1f4:	1ae4      	subs	r4, r4, r3
1000c1f6:	2c1f      	cmp	r4, #31
1000c1f8:	dd0a      	ble.n	1000c210 <__aeabi_d2iz+0x40>
1000c1fa:	480d      	ldr	r0, [pc, #52]	; (1000c230 <__aeabi_d2iz+0x60>)
1000c1fc:	1ac3      	subs	r3, r0, r3
1000c1fe:	40da      	lsrs	r2, r3
1000c200:	1c13      	adds	r3, r2, #0
1000c202:	4248      	negs	r0, r1
1000c204:	4043      	eors	r3, r0
1000c206:	1858      	adds	r0, r3, r1
1000c208:	bd30      	pop	{r4, r5, pc}
1000c20a:	4b0a      	ldr	r3, [pc, #40]	; (1000c234 <__aeabi_d2iz+0x64>)
1000c20c:	18c8      	adds	r0, r1, r3
1000c20e:	e7fb      	b.n	1000c208 <__aeabi_d2iz+0x38>
1000c210:	1c28      	adds	r0, r5, #0
1000c212:	40e0      	lsrs	r0, r4
1000c214:	4c08      	ldr	r4, [pc, #32]	; (1000c238 <__aeabi_d2iz+0x68>)
1000c216:	46a4      	mov	ip, r4
1000c218:	4463      	add	r3, ip
1000c21a:	409a      	lsls	r2, r3
1000c21c:	1c13      	adds	r3, r2, #0
1000c21e:	4303      	orrs	r3, r0
1000c220:	e7ef      	b.n	1000c202 <__aeabi_d2iz+0x32>
1000c222:	46c0      	nop			; (mov r8, r8)
1000c224:	000003fe 	.word	0x000003fe
1000c228:	0000041d 	.word	0x0000041d
1000c22c:	00000433 	.word	0x00000433
1000c230:	00000413 	.word	0x00000413
1000c234:	7fffffff 	.word	0x7fffffff
1000c238:	fffffbed 	.word	0xfffffbed

1000c23c <__aeabi_i2d>:
1000c23c:	b538      	push	{r3, r4, r5, lr}
1000c23e:	1e04      	subs	r4, r0, #0
1000c240:	d016      	beq.n	1000c270 <__aeabi_i2d+0x34>
1000c242:	0fc5      	lsrs	r5, r0, #31
1000c244:	d000      	beq.n	1000c248 <__aeabi_i2d+0xc>
1000c246:	4244      	negs	r4, r0
1000c248:	1c20      	adds	r0, r4, #0
1000c24a:	f7fd fb0b 	bl	10009864 <__clzsi2>
1000c24e:	4b17      	ldr	r3, [pc, #92]	; (1000c2ac <__aeabi_i2d+0x70>)
1000c250:	1a1b      	subs	r3, r3, r0
1000c252:	280a      	cmp	r0, #10
1000c254:	dc21      	bgt.n	1000c29a <__aeabi_i2d+0x5e>
1000c256:	1c02      	adds	r2, r0, #0
1000c258:	1c21      	adds	r1, r4, #0
1000c25a:	3215      	adds	r2, #21
1000c25c:	4091      	lsls	r1, r2
1000c25e:	1c0a      	adds	r2, r1, #0
1000c260:	210b      	movs	r1, #11
1000c262:	1a08      	subs	r0, r1, r0
1000c264:	40c4      	lsrs	r4, r0
1000c266:	055b      	lsls	r3, r3, #21
1000c268:	0324      	lsls	r4, r4, #12
1000c26a:	0b24      	lsrs	r4, r4, #12
1000c26c:	0d5b      	lsrs	r3, r3, #21
1000c26e:	e003      	b.n	1000c278 <__aeabi_i2d+0x3c>
1000c270:	2500      	movs	r5, #0
1000c272:	2300      	movs	r3, #0
1000c274:	2400      	movs	r4, #0
1000c276:	2200      	movs	r2, #0
1000c278:	2100      	movs	r1, #0
1000c27a:	1c10      	adds	r0, r2, #0
1000c27c:	0324      	lsls	r4, r4, #12
1000c27e:	0d0a      	lsrs	r2, r1, #20
1000c280:	0512      	lsls	r2, r2, #20
1000c282:	0b24      	lsrs	r4, r4, #12
1000c284:	4314      	orrs	r4, r2
1000c286:	4a0a      	ldr	r2, [pc, #40]	; (1000c2b0 <__aeabi_i2d+0x74>)
1000c288:	051b      	lsls	r3, r3, #20
1000c28a:	4014      	ands	r4, r2
1000c28c:	431c      	orrs	r4, r3
1000c28e:	0064      	lsls	r4, r4, #1
1000c290:	07ed      	lsls	r5, r5, #31
1000c292:	0864      	lsrs	r4, r4, #1
1000c294:	432c      	orrs	r4, r5
1000c296:	1c21      	adds	r1, r4, #0
1000c298:	bd38      	pop	{r3, r4, r5, pc}
1000c29a:	380b      	subs	r0, #11
1000c29c:	4084      	lsls	r4, r0
1000c29e:	055b      	lsls	r3, r3, #21
1000c2a0:	0324      	lsls	r4, r4, #12
1000c2a2:	0b24      	lsrs	r4, r4, #12
1000c2a4:	0d5b      	lsrs	r3, r3, #21
1000c2a6:	2200      	movs	r2, #0
1000c2a8:	e7e6      	b.n	1000c278 <__aeabi_i2d+0x3c>
1000c2aa:	46c0      	nop			; (mov r8, r8)
1000c2ac:	0000041e 	.word	0x0000041e
1000c2b0:	800fffff 	.word	0x800fffff

1000c2b4 <__aeabi_ui2d>:
1000c2b4:	b510      	push	{r4, lr}
1000c2b6:	1e04      	subs	r4, r0, #0
1000c2b8:	d010      	beq.n	1000c2dc <__aeabi_ui2d+0x28>
1000c2ba:	f7fd fad3 	bl	10009864 <__clzsi2>
1000c2be:	4a14      	ldr	r2, [pc, #80]	; (1000c310 <__aeabi_ui2d+0x5c>)
1000c2c0:	1a12      	subs	r2, r2, r0
1000c2c2:	280a      	cmp	r0, #10
1000c2c4:	dc1a      	bgt.n	1000c2fc <__aeabi_ui2d+0x48>
1000c2c6:	230b      	movs	r3, #11
1000c2c8:	1c21      	adds	r1, r4, #0
1000c2ca:	1a1b      	subs	r3, r3, r0
1000c2cc:	40d9      	lsrs	r1, r3
1000c2ce:	3015      	adds	r0, #21
1000c2d0:	030b      	lsls	r3, r1, #12
1000c2d2:	0552      	lsls	r2, r2, #21
1000c2d4:	4084      	lsls	r4, r0
1000c2d6:	0b1b      	lsrs	r3, r3, #12
1000c2d8:	0d52      	lsrs	r2, r2, #21
1000c2da:	e001      	b.n	1000c2e0 <__aeabi_ui2d+0x2c>
1000c2dc:	2200      	movs	r2, #0
1000c2de:	2300      	movs	r3, #0
1000c2e0:	2100      	movs	r1, #0
1000c2e2:	031b      	lsls	r3, r3, #12
1000c2e4:	1c20      	adds	r0, r4, #0
1000c2e6:	0b1c      	lsrs	r4, r3, #12
1000c2e8:	0d0b      	lsrs	r3, r1, #20
1000c2ea:	051b      	lsls	r3, r3, #20
1000c2ec:	4323      	orrs	r3, r4
1000c2ee:	4c09      	ldr	r4, [pc, #36]	; (1000c314 <__aeabi_ui2d+0x60>)
1000c2f0:	0512      	lsls	r2, r2, #20
1000c2f2:	4023      	ands	r3, r4
1000c2f4:	4313      	orrs	r3, r2
1000c2f6:	005b      	lsls	r3, r3, #1
1000c2f8:	0859      	lsrs	r1, r3, #1
1000c2fa:	bd10      	pop	{r4, pc}
1000c2fc:	1c03      	adds	r3, r0, #0
1000c2fe:	3b0b      	subs	r3, #11
1000c300:	409c      	lsls	r4, r3
1000c302:	0552      	lsls	r2, r2, #21
1000c304:	0323      	lsls	r3, r4, #12
1000c306:	0b1b      	lsrs	r3, r3, #12
1000c308:	0d52      	lsrs	r2, r2, #21
1000c30a:	2400      	movs	r4, #0
1000c30c:	e7e8      	b.n	1000c2e0 <__aeabi_ui2d+0x2c>
1000c30e:	46c0      	nop			; (mov r8, r8)
1000c310:	0000041e 	.word	0x0000041e
1000c314:	800fffff 	.word	0x800fffff

1000c318 <__aeabi_f2d>:
1000c318:	0042      	lsls	r2, r0, #1
1000c31a:	0e12      	lsrs	r2, r2, #24
1000c31c:	1c51      	adds	r1, r2, #1
1000c31e:	b538      	push	{r3, r4, r5, lr}
1000c320:	b2c9      	uxtb	r1, r1
1000c322:	0243      	lsls	r3, r0, #9
1000c324:	0a5d      	lsrs	r5, r3, #9
1000c326:	0fc4      	lsrs	r4, r0, #31
1000c328:	2901      	cmp	r1, #1
1000c32a:	dd15      	ble.n	1000c358 <__aeabi_f2d+0x40>
1000c32c:	21e0      	movs	r1, #224	; 0xe0
1000c32e:	0089      	lsls	r1, r1, #2
1000c330:	468c      	mov	ip, r1
1000c332:	076d      	lsls	r5, r5, #29
1000c334:	0b1b      	lsrs	r3, r3, #12
1000c336:	4462      	add	r2, ip
1000c338:	2100      	movs	r1, #0
1000c33a:	1c28      	adds	r0, r5, #0
1000c33c:	0d0d      	lsrs	r5, r1, #20
1000c33e:	052d      	lsls	r5, r5, #20
1000c340:	432b      	orrs	r3, r5
1000c342:	4d1c      	ldr	r5, [pc, #112]	; (1000c3b4 <__aeabi_f2d+0x9c>)
1000c344:	0552      	lsls	r2, r2, #21
1000c346:	402b      	ands	r3, r5
1000c348:	0852      	lsrs	r2, r2, #1
1000c34a:	4313      	orrs	r3, r2
1000c34c:	005b      	lsls	r3, r3, #1
1000c34e:	07e4      	lsls	r4, r4, #31
1000c350:	085b      	lsrs	r3, r3, #1
1000c352:	4323      	orrs	r3, r4
1000c354:	1c19      	adds	r1, r3, #0
1000c356:	bd38      	pop	{r3, r4, r5, pc}
1000c358:	2a00      	cmp	r2, #0
1000c35a:	d115      	bne.n	1000c388 <__aeabi_f2d+0x70>
1000c35c:	2d00      	cmp	r5, #0
1000c35e:	d01f      	beq.n	1000c3a0 <__aeabi_f2d+0x88>
1000c360:	1c28      	adds	r0, r5, #0
1000c362:	f7fd fa7f 	bl	10009864 <__clzsi2>
1000c366:	280a      	cmp	r0, #10
1000c368:	dc1d      	bgt.n	1000c3a6 <__aeabi_f2d+0x8e>
1000c36a:	230b      	movs	r3, #11
1000c36c:	1c2a      	adds	r2, r5, #0
1000c36e:	1a1b      	subs	r3, r3, r0
1000c370:	40da      	lsrs	r2, r3
1000c372:	1c13      	adds	r3, r2, #0
1000c374:	1c02      	adds	r2, r0, #0
1000c376:	3215      	adds	r2, #21
1000c378:	4095      	lsls	r5, r2
1000c37a:	4a0f      	ldr	r2, [pc, #60]	; (1000c3b8 <__aeabi_f2d+0xa0>)
1000c37c:	031b      	lsls	r3, r3, #12
1000c37e:	1a12      	subs	r2, r2, r0
1000c380:	0552      	lsls	r2, r2, #21
1000c382:	0b1b      	lsrs	r3, r3, #12
1000c384:	0d52      	lsrs	r2, r2, #21
1000c386:	e7d7      	b.n	1000c338 <__aeabi_f2d+0x20>
1000c388:	2d00      	cmp	r5, #0
1000c38a:	d006      	beq.n	1000c39a <__aeabi_f2d+0x82>
1000c38c:	2280      	movs	r2, #128	; 0x80
1000c38e:	0b1b      	lsrs	r3, r3, #12
1000c390:	0312      	lsls	r2, r2, #12
1000c392:	4313      	orrs	r3, r2
1000c394:	076d      	lsls	r5, r5, #29
1000c396:	4a09      	ldr	r2, [pc, #36]	; (1000c3bc <__aeabi_f2d+0xa4>)
1000c398:	e7ce      	b.n	1000c338 <__aeabi_f2d+0x20>
1000c39a:	4a08      	ldr	r2, [pc, #32]	; (1000c3bc <__aeabi_f2d+0xa4>)
1000c39c:	2300      	movs	r3, #0
1000c39e:	e7cb      	b.n	1000c338 <__aeabi_f2d+0x20>
1000c3a0:	2200      	movs	r2, #0
1000c3a2:	2300      	movs	r3, #0
1000c3a4:	e7c8      	b.n	1000c338 <__aeabi_f2d+0x20>
1000c3a6:	1c03      	adds	r3, r0, #0
1000c3a8:	3b0b      	subs	r3, #11
1000c3aa:	409d      	lsls	r5, r3
1000c3ac:	1c2b      	adds	r3, r5, #0
1000c3ae:	2500      	movs	r5, #0
1000c3b0:	e7e3      	b.n	1000c37a <__aeabi_f2d+0x62>
1000c3b2:	46c0      	nop			; (mov r8, r8)
1000c3b4:	800fffff 	.word	0x800fffff
1000c3b8:	00000389 	.word	0x00000389
1000c3bc:	000007ff 	.word	0x000007ff

1000c3c0 <__aeabi_d2f>:
1000c3c0:	b570      	push	{r4, r5, r6, lr}
1000c3c2:	030b      	lsls	r3, r1, #12
1000c3c4:	004d      	lsls	r5, r1, #1
1000c3c6:	0f44      	lsrs	r4, r0, #29
1000c3c8:	0d6d      	lsrs	r5, r5, #21
1000c3ca:	0a5b      	lsrs	r3, r3, #9
1000c3cc:	4323      	orrs	r3, r4
1000c3ce:	1c6c      	adds	r4, r5, #1
1000c3d0:	0564      	lsls	r4, r4, #21
1000c3d2:	0fc9      	lsrs	r1, r1, #31
1000c3d4:	00c2      	lsls	r2, r0, #3
1000c3d6:	0d64      	lsrs	r4, r4, #21
1000c3d8:	2c01      	cmp	r4, #1
1000c3da:	dd2a      	ble.n	1000c432 <__aeabi_d2f+0x72>
1000c3dc:	4c3b      	ldr	r4, [pc, #236]	; (1000c4cc <__aeabi_d2f+0x10c>)
1000c3de:	192c      	adds	r4, r5, r4
1000c3e0:	2cfe      	cmp	r4, #254	; 0xfe
1000c3e2:	dc1a      	bgt.n	1000c41a <__aeabi_d2f+0x5a>
1000c3e4:	2c00      	cmp	r4, #0
1000c3e6:	dd35      	ble.n	1000c454 <__aeabi_d2f+0x94>
1000c3e8:	0180      	lsls	r0, r0, #6
1000c3ea:	1e45      	subs	r5, r0, #1
1000c3ec:	41a8      	sbcs	r0, r5
1000c3ee:	00db      	lsls	r3, r3, #3
1000c3f0:	4303      	orrs	r3, r0
1000c3f2:	0f52      	lsrs	r2, r2, #29
1000c3f4:	4313      	orrs	r3, r2
1000c3f6:	075a      	lsls	r2, r3, #29
1000c3f8:	d004      	beq.n	1000c404 <__aeabi_d2f+0x44>
1000c3fa:	220f      	movs	r2, #15
1000c3fc:	401a      	ands	r2, r3
1000c3fe:	2a04      	cmp	r2, #4
1000c400:	d000      	beq.n	1000c404 <__aeabi_d2f+0x44>
1000c402:	3304      	adds	r3, #4
1000c404:	2280      	movs	r2, #128	; 0x80
1000c406:	04d2      	lsls	r2, r2, #19
1000c408:	401a      	ands	r2, r3
1000c40a:	d027      	beq.n	1000c45c <__aeabi_d2f+0x9c>
1000c40c:	3401      	adds	r4, #1
1000c40e:	2cff      	cmp	r4, #255	; 0xff
1000c410:	d003      	beq.n	1000c41a <__aeabi_d2f+0x5a>
1000c412:	019b      	lsls	r3, r3, #6
1000c414:	0a5b      	lsrs	r3, r3, #9
1000c416:	b2e4      	uxtb	r4, r4
1000c418:	e001      	b.n	1000c41e <__aeabi_d2f+0x5e>
1000c41a:	24ff      	movs	r4, #255	; 0xff
1000c41c:	2300      	movs	r3, #0
1000c41e:	025b      	lsls	r3, r3, #9
1000c420:	05e4      	lsls	r4, r4, #23
1000c422:	0a5b      	lsrs	r3, r3, #9
1000c424:	4323      	orrs	r3, r4
1000c426:	005b      	lsls	r3, r3, #1
1000c428:	07c9      	lsls	r1, r1, #31
1000c42a:	085b      	lsrs	r3, r3, #1
1000c42c:	430b      	orrs	r3, r1
1000c42e:	1c18      	adds	r0, r3, #0
1000c430:	bd70      	pop	{r4, r5, r6, pc}
1000c432:	2d00      	cmp	r5, #0
1000c434:	d106      	bne.n	1000c444 <__aeabi_d2f+0x84>
1000c436:	4313      	orrs	r3, r2
1000c438:	d10e      	bne.n	1000c458 <__aeabi_d2f+0x98>
1000c43a:	2400      	movs	r4, #0
1000c43c:	025b      	lsls	r3, r3, #9
1000c43e:	0a5b      	lsrs	r3, r3, #9
1000c440:	b2e4      	uxtb	r4, r4
1000c442:	e7ec      	b.n	1000c41e <__aeabi_d2f+0x5e>
1000c444:	431a      	orrs	r2, r3
1000c446:	d0e8      	beq.n	1000c41a <__aeabi_d2f+0x5a>
1000c448:	2080      	movs	r0, #128	; 0x80
1000c44a:	00db      	lsls	r3, r3, #3
1000c44c:	0480      	lsls	r0, r0, #18
1000c44e:	4303      	orrs	r3, r0
1000c450:	24ff      	movs	r4, #255	; 0xff
1000c452:	e7d0      	b.n	1000c3f6 <__aeabi_d2f+0x36>
1000c454:	3417      	adds	r4, #23
1000c456:	da0c      	bge.n	1000c472 <__aeabi_d2f+0xb2>
1000c458:	2305      	movs	r3, #5
1000c45a:	2400      	movs	r4, #0
1000c45c:	08db      	lsrs	r3, r3, #3
1000c45e:	2cff      	cmp	r4, #255	; 0xff
1000c460:	d1ec      	bne.n	1000c43c <__aeabi_d2f+0x7c>
1000c462:	2b00      	cmp	r3, #0
1000c464:	d02d      	beq.n	1000c4c2 <__aeabi_d2f+0x102>
1000c466:	2280      	movs	r2, #128	; 0x80
1000c468:	03d2      	lsls	r2, r2, #15
1000c46a:	4313      	orrs	r3, r2
1000c46c:	025b      	lsls	r3, r3, #9
1000c46e:	0a5b      	lsrs	r3, r3, #9
1000c470:	e7d5      	b.n	1000c41e <__aeabi_d2f+0x5e>
1000c472:	2480      	movs	r4, #128	; 0x80
1000c474:	4816      	ldr	r0, [pc, #88]	; (1000c4d0 <__aeabi_d2f+0x110>)
1000c476:	0424      	lsls	r4, r4, #16
1000c478:	4323      	orrs	r3, r4
1000c47a:	1b40      	subs	r0, r0, r5
1000c47c:	281f      	cmp	r0, #31
1000c47e:	dc0d      	bgt.n	1000c49c <__aeabi_d2f+0xdc>
1000c480:	4c14      	ldr	r4, [pc, #80]	; (1000c4d4 <__aeabi_d2f+0x114>)
1000c482:	46a4      	mov	ip, r4
1000c484:	4465      	add	r5, ip
1000c486:	40ab      	lsls	r3, r5
1000c488:	1c1c      	adds	r4, r3, #0
1000c48a:	1c13      	adds	r3, r2, #0
1000c48c:	40ab      	lsls	r3, r5
1000c48e:	1e5d      	subs	r5, r3, #1
1000c490:	41ab      	sbcs	r3, r5
1000c492:	40c2      	lsrs	r2, r0
1000c494:	4323      	orrs	r3, r4
1000c496:	4313      	orrs	r3, r2
1000c498:	2400      	movs	r4, #0
1000c49a:	e7ac      	b.n	1000c3f6 <__aeabi_d2f+0x36>
1000c49c:	1c1e      	adds	r6, r3, #0
1000c49e:	4c0e      	ldr	r4, [pc, #56]	; (1000c4d8 <__aeabi_d2f+0x118>)
1000c4a0:	1b64      	subs	r4, r4, r5
1000c4a2:	40e6      	lsrs	r6, r4
1000c4a4:	1c34      	adds	r4, r6, #0
1000c4a6:	2820      	cmp	r0, #32
1000c4a8:	d00d      	beq.n	1000c4c6 <__aeabi_d2f+0x106>
1000c4aa:	480c      	ldr	r0, [pc, #48]	; (1000c4dc <__aeabi_d2f+0x11c>)
1000c4ac:	4684      	mov	ip, r0
1000c4ae:	4465      	add	r5, ip
1000c4b0:	40ab      	lsls	r3, r5
1000c4b2:	1c1d      	adds	r5, r3, #0
1000c4b4:	432a      	orrs	r2, r5
1000c4b6:	1e53      	subs	r3, r2, #1
1000c4b8:	419a      	sbcs	r2, r3
1000c4ba:	1c13      	adds	r3, r2, #0
1000c4bc:	4323      	orrs	r3, r4
1000c4be:	2400      	movs	r4, #0
1000c4c0:	e799      	b.n	1000c3f6 <__aeabi_d2f+0x36>
1000c4c2:	2300      	movs	r3, #0
1000c4c4:	e7ab      	b.n	1000c41e <__aeabi_d2f+0x5e>
1000c4c6:	2500      	movs	r5, #0
1000c4c8:	e7f4      	b.n	1000c4b4 <__aeabi_d2f+0xf4>
1000c4ca:	46c0      	nop			; (mov r8, r8)
1000c4cc:	fffffc80 	.word	0xfffffc80
1000c4d0:	0000039e 	.word	0x0000039e
1000c4d4:	fffffc82 	.word	0xfffffc82
1000c4d8:	0000037e 	.word	0x0000037e
1000c4dc:	fffffca2 	.word	0xfffffca2

1000c4e0 <__aeabi_idiv0>:
1000c4e0:	4770      	bx	lr
1000c4e2:	46c0      	nop			; (mov r8, r8)

1000c4e4 <__divdi3>:
1000c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4e6:	4644      	mov	r4, r8
1000c4e8:	465f      	mov	r7, fp
1000c4ea:	4656      	mov	r6, sl
1000c4ec:	464d      	mov	r5, r9
1000c4ee:	b4f0      	push	{r4, r5, r6, r7}
1000c4f0:	1c1c      	adds	r4, r3, #0
1000c4f2:	b085      	sub	sp, #20
1000c4f4:	2900      	cmp	r1, #0
1000c4f6:	da00      	bge.n	1000c4fa <__divdi3+0x16>
1000c4f8:	e0a9      	b.n	1000c64e <__divdi3+0x16a>
1000c4fa:	1c0f      	adds	r7, r1, #0
1000c4fc:	2100      	movs	r1, #0
1000c4fe:	1c06      	adds	r6, r0, #0
1000c500:	4688      	mov	r8, r1
1000c502:	1c10      	adds	r0, r2, #0
1000c504:	1c19      	adds	r1, r3, #0
1000c506:	2c00      	cmp	r4, #0
1000c508:	da00      	bge.n	1000c50c <__divdi3+0x28>
1000c50a:	e097      	b.n	1000c63c <__divdi3+0x158>
1000c50c:	1c34      	adds	r4, r6, #0
1000c50e:	1c3d      	adds	r5, r7, #0
1000c510:	4682      	mov	sl, r0
1000c512:	4689      	mov	r9, r1
1000c514:	42b9      	cmp	r1, r7
1000c516:	d873      	bhi.n	1000c600 <__divdi3+0x11c>
1000c518:	d070      	beq.n	1000c5fc <__divdi3+0x118>
1000c51a:	4649      	mov	r1, r9
1000c51c:	4650      	mov	r0, sl
1000c51e:	f000 f985 	bl	1000c82c <__clzdi2>
1000c522:	4683      	mov	fp, r0
1000c524:	1c39      	adds	r1, r7, #0
1000c526:	1c30      	adds	r0, r6, #0
1000c528:	f000 f980 	bl	1000c82c <__clzdi2>
1000c52c:	465b      	mov	r3, fp
1000c52e:	1a18      	subs	r0, r3, r0
1000c530:	1c03      	adds	r3, r0, #0
1000c532:	4683      	mov	fp, r0
1000c534:	3b20      	subs	r3, #32
1000c536:	469c      	mov	ip, r3
1000c538:	d500      	bpl.n	1000c53c <__divdi3+0x58>
1000c53a:	e09c      	b.n	1000c676 <__divdi3+0x192>
1000c53c:	2300      	movs	r3, #0
1000c53e:	2200      	movs	r2, #0
1000c540:	4651      	mov	r1, sl
1000c542:	9200      	str	r2, [sp, #0]
1000c544:	9301      	str	r3, [sp, #4]
1000c546:	4663      	mov	r3, ip
1000c548:	4099      	lsls	r1, r3
1000c54a:	9101      	str	r1, [sp, #4]
1000c54c:	4651      	mov	r1, sl
1000c54e:	4081      	lsls	r1, r0
1000c550:	9b01      	ldr	r3, [sp, #4]
1000c552:	9100      	str	r1, [sp, #0]
1000c554:	42bb      	cmp	r3, r7
1000c556:	d900      	bls.n	1000c55a <__divdi3+0x76>
1000c558:	e083      	b.n	1000c662 <__divdi3+0x17e>
1000c55a:	d100      	bne.n	1000c55e <__divdi3+0x7a>
1000c55c:	e07e      	b.n	1000c65c <__divdi3+0x178>
1000c55e:	9a00      	ldr	r2, [sp, #0]
1000c560:	9b01      	ldr	r3, [sp, #4]
1000c562:	1c34      	adds	r4, r6, #0
1000c564:	1c3d      	adds	r5, r7, #0
1000c566:	1aa4      	subs	r4, r4, r2
1000c568:	419d      	sbcs	r5, r3
1000c56a:	4663      	mov	r3, ip
1000c56c:	2b00      	cmp	r3, #0
1000c56e:	da00      	bge.n	1000c572 <__divdi3+0x8e>
1000c570:	e09a      	b.n	1000c6a8 <__divdi3+0x1c4>
1000c572:	2600      	movs	r6, #0
1000c574:	2700      	movs	r7, #0
1000c576:	9602      	str	r6, [sp, #8]
1000c578:	9703      	str	r7, [sp, #12]
1000c57a:	3601      	adds	r6, #1
1000c57c:	409e      	lsls	r6, r3
1000c57e:	9603      	str	r6, [sp, #12]
1000c580:	2601      	movs	r6, #1
1000c582:	4086      	lsls	r6, r0
1000c584:	9602      	str	r6, [sp, #8]
1000c586:	2800      	cmp	r0, #0
1000c588:	d100      	bne.n	1000c58c <__divdi3+0xa8>
1000c58a:	e071      	b.n	1000c670 <__divdi3+0x18c>
1000c58c:	9900      	ldr	r1, [sp, #0]
1000c58e:	9a01      	ldr	r2, [sp, #4]
1000c590:	07d3      	lsls	r3, r2, #31
1000c592:	4699      	mov	r9, r3
1000c594:	464b      	mov	r3, r9
1000c596:	084e      	lsrs	r6, r1, #1
1000c598:	431e      	orrs	r6, r3
1000c59a:	0857      	lsrs	r7, r2, #1
1000c59c:	2300      	movs	r3, #0
1000c59e:	2201      	movs	r2, #1
1000c5a0:	e00c      	b.n	1000c5bc <__divdi3+0xd8>
1000c5a2:	42af      	cmp	r7, r5
1000c5a4:	d101      	bne.n	1000c5aa <__divdi3+0xc6>
1000c5a6:	42a6      	cmp	r6, r4
1000c5a8:	d80a      	bhi.n	1000c5c0 <__divdi3+0xdc>
1000c5aa:	1ba4      	subs	r4, r4, r6
1000c5ac:	41bd      	sbcs	r5, r7
1000c5ae:	1924      	adds	r4, r4, r4
1000c5b0:	416d      	adcs	r5, r5
1000c5b2:	3801      	subs	r0, #1
1000c5b4:	18a4      	adds	r4, r4, r2
1000c5b6:	415d      	adcs	r5, r3
1000c5b8:	2800      	cmp	r0, #0
1000c5ba:	d006      	beq.n	1000c5ca <__divdi3+0xe6>
1000c5bc:	42af      	cmp	r7, r5
1000c5be:	d9f0      	bls.n	1000c5a2 <__divdi3+0xbe>
1000c5c0:	3801      	subs	r0, #1
1000c5c2:	1924      	adds	r4, r4, r4
1000c5c4:	416d      	adcs	r5, r5
1000c5c6:	2800      	cmp	r0, #0
1000c5c8:	d1f8      	bne.n	1000c5bc <__divdi3+0xd8>
1000c5ca:	2220      	movs	r2, #32
1000c5cc:	9e02      	ldr	r6, [sp, #8]
1000c5ce:	9f03      	ldr	r7, [sp, #12]
1000c5d0:	465b      	mov	r3, fp
1000c5d2:	4252      	negs	r2, r2
1000c5d4:	1936      	adds	r6, r6, r4
1000c5d6:	416f      	adcs	r7, r5
1000c5d8:	1899      	adds	r1, r3, r2
1000c5da:	d45a      	bmi.n	1000c692 <__divdi3+0x1ae>
1000c5dc:	1c28      	adds	r0, r5, #0
1000c5de:	40c8      	lsrs	r0, r1
1000c5e0:	1c2c      	adds	r4, r5, #0
1000c5e2:	465b      	mov	r3, fp
1000c5e4:	40dc      	lsrs	r4, r3
1000c5e6:	2900      	cmp	r1, #0
1000c5e8:	db68      	blt.n	1000c6bc <__divdi3+0x1d8>
1000c5ea:	1c04      	adds	r4, r0, #0
1000c5ec:	408c      	lsls	r4, r1
1000c5ee:	1c23      	adds	r3, r4, #0
1000c5f0:	4659      	mov	r1, fp
1000c5f2:	4088      	lsls	r0, r1
1000c5f4:	1c02      	adds	r2, r0, #0
1000c5f6:	1ab6      	subs	r6, r6, r2
1000c5f8:	419f      	sbcs	r7, r3
1000c5fa:	e003      	b.n	1000c604 <__divdi3+0x120>
1000c5fc:	42b0      	cmp	r0, r6
1000c5fe:	d98c      	bls.n	1000c51a <__divdi3+0x36>
1000c600:	2600      	movs	r6, #0
1000c602:	2700      	movs	r7, #0
1000c604:	4641      	mov	r1, r8
1000c606:	1e4b      	subs	r3, r1, #1
1000c608:	4199      	sbcs	r1, r3
1000c60a:	2300      	movs	r3, #0
1000c60c:	9100      	str	r1, [sp, #0]
1000c60e:	9301      	str	r3, [sp, #4]
1000c610:	9a00      	ldr	r2, [sp, #0]
1000c612:	9b01      	ldr	r3, [sp, #4]
1000c614:	2500      	movs	r5, #0
1000c616:	4254      	negs	r4, r2
1000c618:	419d      	sbcs	r5, r3
1000c61a:	1c33      	adds	r3, r6, #0
1000c61c:	4063      	eors	r3, r4
1000c61e:	1c18      	adds	r0, r3, #0
1000c620:	1c3b      	adds	r3, r7, #0
1000c622:	406b      	eors	r3, r5
1000c624:	1c19      	adds	r1, r3, #0
1000c626:	9b00      	ldr	r3, [sp, #0]
1000c628:	9c01      	ldr	r4, [sp, #4]
1000c62a:	18c0      	adds	r0, r0, r3
1000c62c:	4161      	adcs	r1, r4
1000c62e:	b005      	add	sp, #20
1000c630:	bc3c      	pop	{r2, r3, r4, r5}
1000c632:	4690      	mov	r8, r2
1000c634:	4699      	mov	r9, r3
1000c636:	46a2      	mov	sl, r4
1000c638:	46ab      	mov	fp, r5
1000c63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c63c:	4643      	mov	r3, r8
1000c63e:	43db      	mvns	r3, r3
1000c640:	1c0c      	adds	r4, r1, #0
1000c642:	4698      	mov	r8, r3
1000c644:	1c13      	adds	r3, r2, #0
1000c646:	2100      	movs	r1, #0
1000c648:	4258      	negs	r0, r3
1000c64a:	41a1      	sbcs	r1, r4
1000c64c:	e75e      	b.n	1000c50c <__divdi3+0x28>
1000c64e:	2700      	movs	r7, #0
1000c650:	4246      	negs	r6, r0
1000c652:	418f      	sbcs	r7, r1
1000c654:	2101      	movs	r1, #1
1000c656:	4249      	negs	r1, r1
1000c658:	4688      	mov	r8, r1
1000c65a:	e752      	b.n	1000c502 <__divdi3+0x1e>
1000c65c:	42b1      	cmp	r1, r6
1000c65e:	d800      	bhi.n	1000c662 <__divdi3+0x17e>
1000c660:	e77d      	b.n	1000c55e <__divdi3+0x7a>
1000c662:	2600      	movs	r6, #0
1000c664:	2700      	movs	r7, #0
1000c666:	9602      	str	r6, [sp, #8]
1000c668:	9703      	str	r7, [sp, #12]
1000c66a:	2800      	cmp	r0, #0
1000c66c:	d000      	beq.n	1000c670 <__divdi3+0x18c>
1000c66e:	e78d      	b.n	1000c58c <__divdi3+0xa8>
1000c670:	9e02      	ldr	r6, [sp, #8]
1000c672:	9f03      	ldr	r7, [sp, #12]
1000c674:	e7c6      	b.n	1000c604 <__divdi3+0x120>
1000c676:	2120      	movs	r1, #32
1000c678:	4653      	mov	r3, sl
1000c67a:	1a09      	subs	r1, r1, r0
1000c67c:	40cb      	lsrs	r3, r1
1000c67e:	2200      	movs	r2, #0
1000c680:	1c19      	adds	r1, r3, #0
1000c682:	2300      	movs	r3, #0
1000c684:	9200      	str	r2, [sp, #0]
1000c686:	9301      	str	r3, [sp, #4]
1000c688:	464b      	mov	r3, r9
1000c68a:	4083      	lsls	r3, r0
1000c68c:	430b      	orrs	r3, r1
1000c68e:	9301      	str	r3, [sp, #4]
1000c690:	e75c      	b.n	1000c54c <__divdi3+0x68>
1000c692:	465a      	mov	r2, fp
1000c694:	2320      	movs	r3, #32
1000c696:	1a9b      	subs	r3, r3, r2
1000c698:	1c2a      	adds	r2, r5, #0
1000c69a:	409a      	lsls	r2, r3
1000c69c:	1c20      	adds	r0, r4, #0
1000c69e:	1c13      	adds	r3, r2, #0
1000c6a0:	465a      	mov	r2, fp
1000c6a2:	40d0      	lsrs	r0, r2
1000c6a4:	4318      	orrs	r0, r3
1000c6a6:	e79b      	b.n	1000c5e0 <__divdi3+0xfc>
1000c6a8:	2620      	movs	r6, #32
1000c6aa:	2700      	movs	r7, #0
1000c6ac:	1a33      	subs	r3, r6, r0
1000c6ae:	2600      	movs	r6, #0
1000c6b0:	9602      	str	r6, [sp, #8]
1000c6b2:	9703      	str	r7, [sp, #12]
1000c6b4:	2701      	movs	r7, #1
1000c6b6:	40df      	lsrs	r7, r3
1000c6b8:	9703      	str	r7, [sp, #12]
1000c6ba:	e761      	b.n	1000c580 <__divdi3+0x9c>
1000c6bc:	465b      	mov	r3, fp
1000c6be:	2120      	movs	r1, #32
1000c6c0:	465d      	mov	r5, fp
1000c6c2:	1ac9      	subs	r1, r1, r3
1000c6c4:	1c03      	adds	r3, r0, #0
1000c6c6:	40ac      	lsls	r4, r5
1000c6c8:	40cb      	lsrs	r3, r1
1000c6ca:	1c19      	adds	r1, r3, #0
1000c6cc:	1c23      	adds	r3, r4, #0
1000c6ce:	430b      	orrs	r3, r1
1000c6d0:	e78e      	b.n	1000c5f0 <__divdi3+0x10c>
1000c6d2:	46c0      	nop			; (mov r8, r8)

1000c6d4 <__udivdi3>:
1000c6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c6d6:	4645      	mov	r5, r8
1000c6d8:	464e      	mov	r6, r9
1000c6da:	4657      	mov	r7, sl
1000c6dc:	b4e0      	push	{r5, r6, r7}
1000c6de:	1c04      	adds	r4, r0, #0
1000c6e0:	b082      	sub	sp, #8
1000c6e2:	1c0d      	adds	r5, r1, #0
1000c6e4:	4691      	mov	r9, r2
1000c6e6:	4698      	mov	r8, r3
1000c6e8:	428b      	cmp	r3, r1
1000c6ea:	d862      	bhi.n	1000c7b2 <__udivdi3+0xde>
1000c6ec:	d05f      	beq.n	1000c7ae <__udivdi3+0xda>
1000c6ee:	4641      	mov	r1, r8
1000c6f0:	4648      	mov	r0, r9
1000c6f2:	f000 f89b 	bl	1000c82c <__clzdi2>
1000c6f6:	1c29      	adds	r1, r5, #0
1000c6f8:	1c06      	adds	r6, r0, #0
1000c6fa:	1c20      	adds	r0, r4, #0
1000c6fc:	f000 f896 	bl	1000c82c <__clzdi2>
1000c700:	2320      	movs	r3, #32
1000c702:	1a31      	subs	r1, r6, r0
1000c704:	425b      	negs	r3, r3
1000c706:	468a      	mov	sl, r1
1000c708:	18c8      	adds	r0, r1, r3
1000c70a:	d465      	bmi.n	1000c7d8 <__udivdi3+0x104>
1000c70c:	464b      	mov	r3, r9
1000c70e:	4083      	lsls	r3, r0
1000c710:	1c1f      	adds	r7, r3, #0
1000c712:	464b      	mov	r3, r9
1000c714:	408b      	lsls	r3, r1
1000c716:	1c1e      	adds	r6, r3, #0
1000c718:	42af      	cmp	r7, r5
1000c71a:	d858      	bhi.n	1000c7ce <__udivdi3+0xfa>
1000c71c:	d055      	beq.n	1000c7ca <__udivdi3+0xf6>
1000c71e:	1ba4      	subs	r4, r4, r6
1000c720:	41bd      	sbcs	r5, r7
1000c722:	2800      	cmp	r0, #0
1000c724:	da00      	bge.n	1000c728 <__udivdi3+0x54>
1000c726:	e077      	b.n	1000c818 <__udivdi3+0x144>
1000c728:	2200      	movs	r2, #0
1000c72a:	2300      	movs	r3, #0
1000c72c:	9200      	str	r2, [sp, #0]
1000c72e:	9301      	str	r3, [sp, #4]
1000c730:	3201      	adds	r2, #1
1000c732:	4082      	lsls	r2, r0
1000c734:	9201      	str	r2, [sp, #4]
1000c736:	2301      	movs	r3, #1
1000c738:	408b      	lsls	r3, r1
1000c73a:	9300      	str	r3, [sp, #0]
1000c73c:	2900      	cmp	r1, #0
1000c73e:	d03c      	beq.n	1000c7ba <__udivdi3+0xe6>
1000c740:	07fb      	lsls	r3, r7, #31
1000c742:	4698      	mov	r8, r3
1000c744:	4640      	mov	r0, r8
1000c746:	0872      	lsrs	r2, r6, #1
1000c748:	087b      	lsrs	r3, r7, #1
1000c74a:	4302      	orrs	r2, r0
1000c74c:	2601      	movs	r6, #1
1000c74e:	2700      	movs	r7, #0
1000c750:	e00c      	b.n	1000c76c <__udivdi3+0x98>
1000c752:	42ab      	cmp	r3, r5
1000c754:	d101      	bne.n	1000c75a <__udivdi3+0x86>
1000c756:	42a2      	cmp	r2, r4
1000c758:	d80a      	bhi.n	1000c770 <__udivdi3+0x9c>
1000c75a:	1aa4      	subs	r4, r4, r2
1000c75c:	419d      	sbcs	r5, r3
1000c75e:	1924      	adds	r4, r4, r4
1000c760:	416d      	adcs	r5, r5
1000c762:	3901      	subs	r1, #1
1000c764:	19a4      	adds	r4, r4, r6
1000c766:	417d      	adcs	r5, r7
1000c768:	2900      	cmp	r1, #0
1000c76a:	d006      	beq.n	1000c77a <__udivdi3+0xa6>
1000c76c:	42ab      	cmp	r3, r5
1000c76e:	d9f0      	bls.n	1000c752 <__udivdi3+0x7e>
1000c770:	3901      	subs	r1, #1
1000c772:	1924      	adds	r4, r4, r4
1000c774:	416d      	adcs	r5, r5
1000c776:	2900      	cmp	r1, #0
1000c778:	d1f8      	bne.n	1000c76c <__udivdi3+0x98>
1000c77a:	2220      	movs	r2, #32
1000c77c:	9800      	ldr	r0, [sp, #0]
1000c77e:	9901      	ldr	r1, [sp, #4]
1000c780:	4653      	mov	r3, sl
1000c782:	4252      	negs	r2, r2
1000c784:	1900      	adds	r0, r0, r4
1000c786:	4169      	adcs	r1, r5
1000c788:	189e      	adds	r6, r3, r2
1000c78a:	d43a      	bmi.n	1000c802 <__udivdi3+0x12e>
1000c78c:	1c2f      	adds	r7, r5, #0
1000c78e:	40f7      	lsrs	r7, r6
1000c790:	4653      	mov	r3, sl
1000c792:	40dd      	lsrs	r5, r3
1000c794:	2e00      	cmp	r6, #0
1000c796:	db29      	blt.n	1000c7ec <__udivdi3+0x118>
1000c798:	1c3c      	adds	r4, r7, #0
1000c79a:	40b4      	lsls	r4, r6
1000c79c:	1c23      	adds	r3, r4, #0
1000c79e:	4654      	mov	r4, sl
1000c7a0:	40a7      	lsls	r7, r4
1000c7a2:	1c3a      	adds	r2, r7, #0
1000c7a4:	1a80      	subs	r0, r0, r2
1000c7a6:	4199      	sbcs	r1, r3
1000c7a8:	9000      	str	r0, [sp, #0]
1000c7aa:	9101      	str	r1, [sp, #4]
1000c7ac:	e005      	b.n	1000c7ba <__udivdi3+0xe6>
1000c7ae:	4282      	cmp	r2, r0
1000c7b0:	d99d      	bls.n	1000c6ee <__udivdi3+0x1a>
1000c7b2:	2300      	movs	r3, #0
1000c7b4:	2400      	movs	r4, #0
1000c7b6:	9300      	str	r3, [sp, #0]
1000c7b8:	9401      	str	r4, [sp, #4]
1000c7ba:	9800      	ldr	r0, [sp, #0]
1000c7bc:	9901      	ldr	r1, [sp, #4]
1000c7be:	b002      	add	sp, #8
1000c7c0:	bc1c      	pop	{r2, r3, r4}
1000c7c2:	4690      	mov	r8, r2
1000c7c4:	4699      	mov	r9, r3
1000c7c6:	46a2      	mov	sl, r4
1000c7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c7ca:	42a3      	cmp	r3, r4
1000c7cc:	d9a7      	bls.n	1000c71e <__udivdi3+0x4a>
1000c7ce:	2200      	movs	r2, #0
1000c7d0:	2300      	movs	r3, #0
1000c7d2:	9200      	str	r2, [sp, #0]
1000c7d4:	9301      	str	r3, [sp, #4]
1000c7d6:	e7b1      	b.n	1000c73c <__udivdi3+0x68>
1000c7d8:	2220      	movs	r2, #32
1000c7da:	464b      	mov	r3, r9
1000c7dc:	1a52      	subs	r2, r2, r1
1000c7de:	40d3      	lsrs	r3, r2
1000c7e0:	1c1a      	adds	r2, r3, #0
1000c7e2:	4643      	mov	r3, r8
1000c7e4:	408b      	lsls	r3, r1
1000c7e6:	1c1f      	adds	r7, r3, #0
1000c7e8:	4317      	orrs	r7, r2
1000c7ea:	e792      	b.n	1000c712 <__udivdi3+0x3e>
1000c7ec:	4653      	mov	r3, sl
1000c7ee:	2420      	movs	r4, #32
1000c7f0:	4656      	mov	r6, sl
1000c7f2:	1ae4      	subs	r4, r4, r3
1000c7f4:	1c3b      	adds	r3, r7, #0
1000c7f6:	40b5      	lsls	r5, r6
1000c7f8:	40e3      	lsrs	r3, r4
1000c7fa:	1c1c      	adds	r4, r3, #0
1000c7fc:	1c2b      	adds	r3, r5, #0
1000c7fe:	4323      	orrs	r3, r4
1000c800:	e7cd      	b.n	1000c79e <__udivdi3+0xca>
1000c802:	4652      	mov	r2, sl
1000c804:	2320      	movs	r3, #32
1000c806:	1a9b      	subs	r3, r3, r2
1000c808:	1c2a      	adds	r2, r5, #0
1000c80a:	409a      	lsls	r2, r3
1000c80c:	1c27      	adds	r7, r4, #0
1000c80e:	1c13      	adds	r3, r2, #0
1000c810:	4652      	mov	r2, sl
1000c812:	40d7      	lsrs	r7, r2
1000c814:	431f      	orrs	r7, r3
1000c816:	e7bb      	b.n	1000c790 <__udivdi3+0xbc>
1000c818:	2320      	movs	r3, #32
1000c81a:	2200      	movs	r2, #0
1000c81c:	1a58      	subs	r0, r3, r1
1000c81e:	2300      	movs	r3, #0
1000c820:	9200      	str	r2, [sp, #0]
1000c822:	9301      	str	r3, [sp, #4]
1000c824:	3201      	adds	r2, #1
1000c826:	40c2      	lsrs	r2, r0
1000c828:	9201      	str	r2, [sp, #4]
1000c82a:	e784      	b.n	1000c736 <__udivdi3+0x62>

1000c82c <__clzdi2>:
1000c82c:	b510      	push	{r4, lr}
1000c82e:	2900      	cmp	r1, #0
1000c830:	d103      	bne.n	1000c83a <__clzdi2+0xe>
1000c832:	f7fd f817 	bl	10009864 <__clzsi2>
1000c836:	3020      	adds	r0, #32
1000c838:	e002      	b.n	1000c840 <__clzdi2+0x14>
1000c83a:	1c08      	adds	r0, r1, #0
1000c83c:	f7fd f812 	bl	10009864 <__clzsi2>
1000c840:	bd10      	pop	{r4, pc}
1000c842:	46c0      	nop			; (mov r8, r8)

1000c844 <__errno>:
1000c844:	4b01      	ldr	r3, [pc, #4]	; (1000c84c <__errno+0x8>)
1000c846:	6818      	ldr	r0, [r3, #0]
1000c848:	4770      	bx	lr
1000c84a:	46c0      	nop			; (mov r8, r8)
1000c84c:	200008c8 	.word	0x200008c8

1000c850 <__libc_init_array>:
1000c850:	4b0e      	ldr	r3, [pc, #56]	; (1000c88c <__libc_init_array+0x3c>)
1000c852:	b570      	push	{r4, r5, r6, lr}
1000c854:	2500      	movs	r5, #0
1000c856:	1c1e      	adds	r6, r3, #0
1000c858:	4c0d      	ldr	r4, [pc, #52]	; (1000c890 <__libc_init_array+0x40>)
1000c85a:	1ae4      	subs	r4, r4, r3
1000c85c:	10a4      	asrs	r4, r4, #2
1000c85e:	42a5      	cmp	r5, r4
1000c860:	d004      	beq.n	1000c86c <__libc_init_array+0x1c>
1000c862:	00ab      	lsls	r3, r5, #2
1000c864:	58f3      	ldr	r3, [r6, r3]
1000c866:	4798      	blx	r3
1000c868:	3501      	adds	r5, #1
1000c86a:	e7f8      	b.n	1000c85e <__libc_init_array+0xe>
1000c86c:	f7f5 ff80 	bl	10002770 <_init>
1000c870:	4b08      	ldr	r3, [pc, #32]	; (1000c894 <__libc_init_array+0x44>)
1000c872:	2500      	movs	r5, #0
1000c874:	1c1e      	adds	r6, r3, #0
1000c876:	4c08      	ldr	r4, [pc, #32]	; (1000c898 <__libc_init_array+0x48>)
1000c878:	1ae4      	subs	r4, r4, r3
1000c87a:	10a4      	asrs	r4, r4, #2
1000c87c:	42a5      	cmp	r5, r4
1000c87e:	d004      	beq.n	1000c88a <__libc_init_array+0x3a>
1000c880:	00ab      	lsls	r3, r5, #2
1000c882:	58f3      	ldr	r3, [r6, r3]
1000c884:	4798      	blx	r3
1000c886:	3501      	adds	r5, #1
1000c888:	e7f8      	b.n	1000c87c <__libc_init_array+0x2c>
1000c88a:	bd70      	pop	{r4, r5, r6, pc}
1000c88c:	200008cc 	.word	0x200008cc
1000c890:	200008cc 	.word	0x200008cc
1000c894:	200008cc 	.word	0x200008cc
1000c898:	200008cc 	.word	0x200008cc

1000c89c <memcpy>:
1000c89c:	2300      	movs	r3, #0
1000c89e:	b510      	push	{r4, lr}
1000c8a0:	4293      	cmp	r3, r2
1000c8a2:	d003      	beq.n	1000c8ac <memcpy+0x10>
1000c8a4:	5ccc      	ldrb	r4, [r1, r3]
1000c8a6:	54c4      	strb	r4, [r0, r3]
1000c8a8:	3301      	adds	r3, #1
1000c8aa:	e7f9      	b.n	1000c8a0 <memcpy+0x4>
1000c8ac:	bd10      	pop	{r4, pc}
1000c8ae:	0000      	movs	r0, r0
1000c8b0:	100024ae 	.word	0x100024ae
1000c8b4:	100024ae 	.word	0x100024ae
1000c8b8:	100024b8 	.word	0x100024b8
1000c8bc:	100024b8 	.word	0x100024b8
1000c8c0:	100024e6 	.word	0x100024e6
1000c8c4:	100024e6 	.word	0x100024e6
1000c8c8:	100024e6 	.word	0x100024e6
1000c8cc:	100024e6 	.word	0x100024e6
1000c8d0:	100024c2 	.word	0x100024c2
1000c8d4:	100024ce 	.word	0x100024ce
1000c8d8:	100024da 	.word	0x100024da
1000c8dc:	100024da 	.word	0x100024da

1000c8e0 <PWM_servo_fl_compare_config>:
1000c8e0:	00000000 00000005                       ........

1000c8e8 <PWM_servo_fl_gpio_out_config>:
1000c8e8:	000000a4 00010000                       ........

1000c8f0 <PWM_servo_fr_compare_config>:
1000c8f0:	00000000 00000005                       ........

1000c8f8 <PWM_servo_fr_gpio_out_config>:
1000c8f8:	000000a4 00010000                       ........

1000c900 <PWM_servo_rl_compare_config>:
1000c900:	00000000 00000005                       ........

1000c908 <PWM_servo_rl_gpio_out_config>:
1000c908:	000000a4 00010000                       ........

1000c910 <PWM_servo_rr_compare_config>:
1000c910:	00000000 00000005                       ........

1000c918 <PWM_servo_rr_gpio_out_config>:
1000c918:	000000a4 00010000                       ........

1000c920 <RC_Connected>:
1000c920:	40010600 40040200 00000000 00000000     ...@...@........
1000c930:	00000004 0000013d 030c0002 01030301     ....=...........

1000c940 <RC_AUX1>:
1000c940:	40010630 40040400 00000000 00000000     0..@...@........
1000c950:	00000002 0000003d 03060001 01060302     ....=...........

1000c960 <CAN_RX_ULTRASONIC>:
1000c960:	03040002 00000001                       ........

1000c968 <INTERRUPT_TIMER_10us>:
1000c968:	03080001 00000001                       ........

1000c970 <INTERRUPT_TIMER_CONTROL>:
1000c970:	03070002 00000001                       ........

1000c978 <CAN_RX_INVERTER>:
1000c978:	03030002 00000001                       ........

1000c980 <GLOBAL_SCU_XMC1_0_config>:
1000c980:	01030303 00000101                       ........

1000c988 <RC_no_data_LED>:
1000c988:	40040400 00000080 00010000 00000000     ...@............

1000c998 <CALC_TIME_INDICATOR>:
1000c998:	40040300 00000080 00010000 00000001     ...@............

1000c9a8 <MODE_001>:
1000c9a8:	40040400 00000080 00010000 00000001     ...@............

1000c9b8 <MODE_010>:
1000c9b8:	40040400 00000080 00010000 00000002     ...@............

1000c9c8 <MODE_100>:
1000c9c8:	40040400 00000080 00010000 00000003     ...@............

1000c9d8 <WATCHDOG_LED_BLUE>:
1000c9d8:	40040400 00000080 00010000 00000004     ...@............

1000c9e8 <LED_CAN_ERROR>:
1000c9e8:	40040000 00000000 00000000 00000006     ...@............

1000c9f8 <LED_COLLISION_AVOID>:
1000c9f8:	40040000 00000080 00010000 00000008     ...@............
1000ca08:	00010000 03300000 00010000 00000000     ......0.........

1000ca18 <CAPTURE_RC_Steering_input>:
1000ca18:	40040400 0000000a                       ...@....

1000ca20 <CAPTURE_RC_Steering_input_pin_config>:
	...

1000ca28 <CAPTURE_RC_Steering_event0_config>:
1000ca28:	00000115                                ....

1000ca2c <CAPTURE_RC_Steering_event1_config>:
1000ca2c:	00000215                                ....

1000ca30 <CAPTURE_RC_Steering_config>:
1000ca30:	00011060 000000f0                       `.......

1000ca38 <CAPTURE_RC_Speed_input>:
1000ca38:	40040400 0000000b                       ...@....

1000ca40 <CAPTURE_RC_Speed_input_pin_config>:
	...

1000ca48 <CAPTURE_RC_Speed_event0_config>:
1000ca48:	00000115                                ....

1000ca4c <CAPTURE_RC_Speed_event1_config>:
1000ca4c:	00000215                                ....

1000ca50 <CAPTURE_RC_Speed_config>:
1000ca50:	00011060 000000f0                       `.......

1000ca58 <CAN_NODE_0_gpio_out>:
1000ca58:	40040400 00000009                       ...@....

1000ca60 <CAN_NODE_0_gpio_out_config>:
1000ca60:	000000a4 00000001                       ........

1000ca68 <CAN_NODE_0_gpio_in>:
1000ca68:	40040400 00000008                       ...@....

1000ca70 <CAN_NODE_0_gpio_in_config>:
	...

1000ca78 <CAN_NODE_0_BitTimeConfig>:
1000ca78:	02dc6c00 0007a120 00011f40              .l.. ...@...

1000ca84 <CAN_NODE_0_sr>:
1000ca84:	00000000                                ....

1000ca88 <CAN_NODE_0_LMO_01_Config>:
1000ca88:	20000748 00000009 00000000              H.. ........

1000ca94 <CAN_NODE_0_LMO_02_Config>:
1000ca94:	20000768 0000000c 00000000              h.. ........

1000caa0 <CAN_NODE_0_LMO_03_Config>:
1000caa0:	20000788 00000013 00000001              ... ........

1000caac <CAN_NODE_0_LMO_04_Config>:
1000caac:	200007a8 00000011 00000001              ... ........

1000cab8 <CAN_NODE_0_LMO_05_Config>:
1000cab8:	200007c8 00000012 00000001              ... ........

1000cac4 <CAN_NODE_0_LMO_06_Config>:
1000cac4:	200007e8 00000008 00000001              ... ........

1000cad0 <CAN_NODE_0_LMO_07_Config>:
1000cad0:	20000808 0001000b 00000001              ... ........

1000cadc <CAN_NODE_0>:
1000cadc:	200006d4 50040300 1000ca78 1000ca88     ... ...Px.......
1000caec:	1000ca94 1000caa0 1000caac 1000cab8     ................
1000cafc:	1000cac4 1000cad0 00000000 00000000     ................
	...
1000cb68:	1000ca84 1000ca58 1000ca60 1000ca68     ....X...`...h...
1000cb78:	1000ca70 00070102 00000000 1000554a     p...........JU..
1000cb88:	100048c2 10004c8a 10005054 10005464     .H...L..TP..dT..
1000cb98:	100054c2 1000570a 10005718 10005718     .T...W...W...W..
1000cba8:	10005718 1000565c 10005718 01010101     .W..\V...W......

1000cbb8 <atanlo>:
1000cbb8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
1000cbc8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

1000cbd8 <atanhi>:
1000cbd8:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
1000cbe8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
1000cbf8:	00776f70 74727173 00000000 00000000     pow.sqrt........

1000cc08 <dp_h>:
	...
1000cc10:	40000000 3fe2b803                       ...@...?

1000cc18 <dp_l>:
	...
1000cc20:	43cfd006 3e4cfdeb                       ...C..L>

1000cc28 <bp>:
1000cc28:	00000000 3ff00000 00000000 3ff80000     .......?.......?

1000cc38 <npio2_hw>:
1000cc38:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
1000cc48:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
1000cc58:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
1000cc68:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
1000cc78:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
1000cc88:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
1000cc98:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
1000cca8:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

1000ccb8 <two_over_pi>:
1000ccb8:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
1000ccc8:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
1000ccd8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
1000cce8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
1000ccf8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
1000cd08:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
1000cd18:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
1000cd28:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
1000cd38:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
1000cd48:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
1000cd58:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
1000cd68:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
1000cd78:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
1000cd88:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
1000cd98:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
1000cda8:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
1000cdb8:	0060e27b 00c08c6b                       {.`.k...

1000cdc0 <init_jk>:
1000cdc0:	00000002 00000003 00000004 00000006     ................

1000cdd0 <PIo2>:
1000cdd0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
1000cde0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
1000cdf0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
1000ce00:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

1000ce10 <TWO52>:
1000ce10:	00000000 43300000 00000000 c3300000     ......0C......0.
1000ce20:	10009e1e 10009de6 10009e02 10009dda     ................
1000ce30:	10009e02 10009d46 10009e02 10009dda     ....F...........
1000ce40:	10009de6 10009de6 10009d46 10009dda     ........F.......
1000ce50:	10009e84 10009e84 10009e84 10009e08     ................
1000ce60:	10009de6 10009de6 10009ece 10009dd8     ................
1000ce70:	10009ece 10009d46 10009ece 10009dd8     ....F...........
1000ce80:	10009de6 10009de6 10009d46 10009dd8     ........F.......
1000ce90:	10009e84 10009e84 10009e84 10009eb2     ................
1000cea0:	1000a1e6 1000a1de 1000a1de 1000a1d6     ................
1000ceb0:	1000a128 1000a128 1000a1cc 1000a1d6     (...(...........
1000cec0:	1000a128 1000a1cc 1000a128 1000a1d6     (.......(.......
1000ced0:	1000a12a 1000a12a 1000a12a 1000a270     *...*...*...p...
1000cee0:	1000af00 1000adee 1000aed4 1000adda     ................
1000cef0:	1000aed4 1000aede 1000aed4 1000adda     ................
1000cf00:	1000adee 1000adee 1000aede 1000adda     ................
1000cf10:	1000ade4 1000ade4 1000ade4 1000b146     ............F...
1000cf20:	1000b794 1000b772 1000b772 1000b766     ....r...r...f...
1000cf30:	1000b65a 1000b65a 1000b75a 1000b766     Z...Z...Z...f...
1000cf40:	1000b65a 1000b75a 1000b65a 1000b766     Z...Z...Z...f...
1000cf50:	1000b65e 1000b65e 1000b65e 1000b974     ^...^...^...t...
1000cf60:	00000043                                C...

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	10003285 	.word	0x10003285
	Insert_InterruptVeener IRQ1	
200000d4:	10003295 	.word	0x10003295
	Insert_InterruptVeener IRQ2	
200000d8:	100032a5 	.word	0x100032a5
	Insert_InterruptVeener IRQ3	
200000dc:	100043d9 	.word	0x100043d9
	Insert_InterruptVeener IRQ4	
200000e0:	10004655 	.word	0x10004655
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	10005c69 	.word	0x10005c69
	Insert_InterruptVeener IRQ7	
200000ec:	100065d9 	.word	0x100065d9
	Insert_InterruptVeener IRQ8	
200000f0:	100058f5 	.word	0x100058f5
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ12	
20000100:	10005b7d 	.word	0x10005b7d
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
