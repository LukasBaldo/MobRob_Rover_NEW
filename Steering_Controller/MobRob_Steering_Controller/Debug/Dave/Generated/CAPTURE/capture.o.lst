   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "capture.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_CCU4_EnableClock,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_CCU4_EnableClock:
  23              	.LFB48:
  24              	 .file 1 "C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc/xmc_ccu4.h"
   1:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
   2:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @file xmc_ccu4.h
   3:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @date 2019-03-30
   4:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   5:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @cond
   6:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *****************************************************************************
   7:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   9:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * All rights reserved.
  11:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  12:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  14:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * do so, all subject to the following:
  20:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  21:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The copyright notices in the Software and this entire statement, including
  22:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the above license grant, this restriction and the following disclaimer,
  23:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * all derivative works of the Software, unless such copies or derivative
  25:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * works are solely in the form of machine-executable object code generated by
  26:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a source language processor.
  27:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  28:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DEALINGS IN THE SOFTWARE.
  35:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  36:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * To improve the quality of the software, users are encouraged to share
  37:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * at XMCSupport@infineon.com.
  39:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *****************************************************************************
  40:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  41:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Change History
  42:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * --------------
  43:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  44:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-02-20:
  45:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Initial <br>
  46:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Documentation updates <br>
  47:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  48:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-06-20:
  49:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  50:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  51:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-07-22:
  52:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  53:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  54:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-08-17:
  55:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  56:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t enum item names are updated according to the guideli
  57:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  58:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  59:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-09-29:
  60:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - In XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  61:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       settings.
  62:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  63:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-10-07:
  64:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  65:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU4_SLICE_EnableMultipleEvents(
  66:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       XMC_CCU4_SLICE_DisableMultipleEvents() APIs.
  67:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - DOC updates for the newly added APIs.
  68:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  69:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-03-09:
  70:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Optimization of write only registers
  71:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  72:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-05-20:
  73:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SLICE_StopClearTimer()
  74:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed implementation of XMC_CCU4_SLICE_StopTimer() and XMC_CCU4_SLICE_ClearTimer() to av
  75:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  76:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2017-04-27:
  77:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU4_SLICE_PRESCALER_t
  78:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  79:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2017-09-15:
  80:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Fix XMC_CCU4_SLICE_SetShadowTransferMode()
  81:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  82:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2019-03-30:
  83:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed XMC_CCU4_StartPrescaler(), XMC_CCU4_StopPrescaler(), XMC_CCU4_EnableMultipleClocks
  84:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed XMC_CCU4_SLICE_SetEvent(), XMC_CCU4_SLICE_ClearEvent() to avoid RMW access
  85:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SetSuspendMode(), XMC_CCU4_SLICE_GetPrescaler()
  86:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  87:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2019-07-29:
  88:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_GetSliceStatusBit()
  89:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  90:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @endcond
  91:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  92:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  93:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifndef XMC_CCU4_H
  94:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_H
  95:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  96:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
  97:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * HEADER FILES
  98:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  99:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #include "xmc_common.h"
 100:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40)
 101:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 102:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC1
 103:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #include "xmc1_ccu4_map.h"
 104:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 105:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 106:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC4
 107:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #include "xmc4_ccu4_map.h"
 108:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 109:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 110:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 111:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup XMClib XMC Peripheral Library
 112:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 113:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 114:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 115:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 116:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup CCU4
 117:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @brief Capture Compare Unit 4 (CCU4) low level driver for XMC family of microcontrollers<br>
 118:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 119:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The CCU4 peripheral is a major component for systems that need general purpose timers for signal
 120:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * monitoring/conditioning and Pulse Width Modulation (PWM) signal generation. Power electronic con
 121:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * switched mode power supplies or interruptible power supplies, can easily be implemented with the
 122:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 peripheral.\n
 123:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Each CCU4 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC4y (where
 124:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * timer slice can work in compare mode or in capture mode.
 125:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 126:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * APIs provided in this file cover the following functional blocks of CCU4:\n
 127:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 128:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Note:
 129:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU4_SLICE_)
 130:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU4_)
 131:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 132:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Timer(Compare mode) configuration:
 133:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_COMPARE_CONFIG_t and
 134:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CompareInit().
 135:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 136:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 137:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Start and Stop the timer. (XMC_CCU4_SLICE_StartTimer(), XMC_CCU4_SLICE_StopTimer())
 138:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU4_SLICE_SetTimerPe
 139:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetTimerCompareMatch(), XMC_CCU4_SLICE_SetPrescaler(), XMC_CCU4_SLICE_SetDithe
 140:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetPassiveLevel())
 141:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU4_SLICE_EnableMultiChannelMode())
 142:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 143:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Capture configuration:
 144:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_CAPTURE_CONFIG_t and
 145:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CaptureInit().
 146:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 147:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 148:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure the capture functionality. (XMC_CCU4_SLICE_Capture0Config(), XMC_CCU4_SLICE_Capture
 149:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 150:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    (XMC_CCU4_SLICE_GetCaptureRegisterValue())
 151:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 152:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Function/Event configuration:
 153:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_EVENT_CONFIG_t.\n
 154:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 155:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 156:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable and Disable the events. (XMC_CCU4_SLICE_EnableEvent(), XMC_CCU4_SLICE_DisableEvent())
 157:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU4_SLICE_StartConfig(), XMC_C
 158:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU4_SLICE_ModulationConfig(),
 159:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_LoadConfig(), XMC_CCU4_SLICE_GateConfig())
 160:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU4_SLICE_Directi
 161:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Count the external events.(XMC_CCU4_SLICE_CountConfig())
 162:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU4_SLICE_EnableTrap(), XMC_CCU4
 163:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_TrapConfig())
 164:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 165:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Interrupt configuration:
 166:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 167:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 168:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 169:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 170:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 171:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * MACROS
 172:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 173:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /* Macro to check if the interrupt enum passed is valid */
 174:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_SLICE_CHECK_INTERRUPT(interrupt) \
 175:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     ((interrupt == XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 176:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH)              || \
 177:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP)  || \
 178:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN)|| \
 179:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT0)                 || \
 180:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT1)                 || \
 181:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT2)                 || \
 182:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_TRAP))
 183:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 184:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 185:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * ENUMS
 186:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 187:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 188:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 189:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Global data structure
 190:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 191:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_GLOBAL_TypeDef XMC_CCU4_MODULE_t;
 192:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 193:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 194:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Slice data structure
 195:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_CC4_TypeDef XMC_CCU4_SLICE_t;
 197:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 198:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 199:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Return Value of an API
 200:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 201:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_STATUS
 202:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 203:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_OK      = 0U, /**< API fulfils request */
 204:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_ERROR,        /**< API cannot fulfil the request */
 205:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_RUNNING,      /**< The timer slice is currently running */
 206:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_IDLE          /**< The timer slice is currently idle */
 207:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_STATUS_t;
 208:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 209:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 210:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 module clock
 211:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 212:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_CLOCK
 213:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 214:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 215:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_A,      /**< External clock-A */
 216:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_B,      /**< External clock-B */
 217:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_C       /**< External clock-C */
 218:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_CLOCK_t;
 219:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 220:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 221:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 set the shadow transfer type for multichannel mode
 222:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 223:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER
 224:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 225:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 226:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 227:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 228:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 229:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 230:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 231:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 232:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 233:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 234:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 235:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 236:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 237:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 238:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 239:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 240:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 241:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 242:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 243:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 244:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Operational modes of CCU4 slice
 245:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 246:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODE
 247:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 248:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_COMPARE  = 0U, /**< slice(CC4y) operates in Compare Mode */
 249:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_CAPTURE        /**< slice(CC4y) operates in Capture Mode */
 250:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODE_t;
 251:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 252:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 253:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer counting modes for the slice
 254:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 255:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_MODE
 256:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 257:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 258:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA        /**< Center Aligned Mode */
 259:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_MODE_t;
 260:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 261:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 262:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer repetition mode for the slice
 263:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 264:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_REPEAT_MODE
 265:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 266:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U,  /**< Repetitive mode: continuous mode of operation
 267:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE        /**< Single shot mode: Once a Period match/One mat
 268:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                       occurs timer goes to idle state */
 269:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t;
 270:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 271:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 272:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting direction for the CCU4 slice
 273:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 274:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_DIR
 275:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 276:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 277:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 278:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_DIR_t;
 279:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 280:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 281:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Capture mode register sets
 282:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 283:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_CAP_REG_SET
 284:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 285:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 286:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_HIGH       /**< Capture register-2, Capture register-3 used */
 287:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAP_REG_SET_t;
 288:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 289:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 290:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prescaler mode
 291:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 292:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER_MODE
 293:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 294:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 295:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider. */
 296:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_MODE_t;
 297:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 298:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 299:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer output passive level
 300:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 301:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL
 302:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 303:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 304:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 305:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 306:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 307:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 308:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer clock Divider
 309:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 310:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER
 311:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 312:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu4 */
 313:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2,       /**< Slice Clock = fccu4/2 */
 314:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4,       /**< Slice Clock = fccu4/4 */
 315:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8,       /**< Slice Clock = fccu4/8 */
 316:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16,      /**< Slice Clock = fccu4/16 */
 317:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32,      /**< Slice Clock = fccu4/32 */
 318:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_64,      /**< Slice Clock = fccu4/64 */
 319:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_128,     /**< Slice Clock = fccu4/128 */
 320:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_256,     /**< Slice Clock = fccu4/256 */
 321:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_512,     /**< Slice Clock = fccu4/512 */
 322:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1024,    /**< Slice Clock = fccu4/1024 */
 323:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2048,    /**< Slice Clock = fccu4/2048 */
 324:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4096,    /**< Slice Clock = fccu4/4096 */
 325:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8192,    /**< Slice Clock = fccu4/8192 */
 326:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16384,   /**< Slice Clock = fccu4/16384 */
 327:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32768    /**< Slice Clock = fccu4/32768 */
 328:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_t;
 329:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 330:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 331:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Function list
 332:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 333:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_FUNCTION
 334:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 335:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_START           = 0U, /**< Start function */
 336:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_STOP,                 /**< Stop function */
 337:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT0, /**< Capture Event-0 function, CCycapt0 signal is used fo
 338:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 339:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT1, /**< Capture Event-1 function, CCycapt1 signal is used fo
 340:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 341:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_GATING,               /**< Gating function */
 342:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_DIRECTION,            /**< Direction function */
 343:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_LOAD,                 /**< Load function */
 344:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_COUNT,                /**< Counting function */
 345:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_OVERRIDE,             /**< Override function */
 346:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_MODULATION,           /**< Modulation function */
 347:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_TRAP                  /**< Trap function */
 348:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_FUNCTION_t;
 349:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 350:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 351:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event list
 352:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 353:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT
 354:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 355:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_NONE  = 0U, /**< None */
 356:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_0,          /**< Event-0 */
 357:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_1,          /**< Event-1 */
 358:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_2           /**< Event-2 */
 359:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_t;
 360:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 361:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 362:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Edge sensitivity
 363:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 364:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY
 365:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 366:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE         = 0U, /**< None */
 367:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,       /**< Rising Edge of the input signal gen
 368:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE, /**< Falling Edge of the input signal generat
 369:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 trigger */
 370:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE          /**< Both Rising and Falling edges cause
 371:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t;
 372:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 373:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 374:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Level sensitivity
 375:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 376:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY
 377:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 378:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 379:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 380:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   /* Below enum items can be utilised specific to the functionality */
 381:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 382:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 383:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 384:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 385:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 386:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 387:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 388:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_FILTER
 389:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 390:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filter */
 391:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES,       /**< 3 clock cycles */
 392:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES,       /**< 5 clock cycles */
 393:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES        /**< 7 clock cycles */
 394:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_FILTER_t;
 395:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 396:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 397:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU4 slice.
 398:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Interconnects are specific to each device.
 399:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 400:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef uint8_t XMC_CCU4_SLICE_INPUT_t;
 401:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 402:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 403:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 404:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 405:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_END_MODE
 406:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 407:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 408:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR,           /**< Without stopping timer, clears the TIMER regi
 409:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 410:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_END_MODE_t;
 411:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 412:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 413:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Actions that can be performed upon detection of an external Timer START event
 414:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 415:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_START_MODE
 416:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 417:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 418:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 419:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_START_MODE_t;
 420:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 421:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 422:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Modulation of timer output signals
 423:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 424:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODULATION_MODE
 425:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 426:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 427:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 428:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODULATION_MODE_t;
 429:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 430:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 431:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Trap exit mode
 432:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 433:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TRAP_EXIT_MODE
 434:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 435:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 436:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 437:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TRAP_EXIT_MODE_t;
 438:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 439:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 440:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer clear on capture
 441:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 442:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_CLEAR_MODE
 443:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 444:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 445:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_HIGH,      /**< Clear only when timer value has been captured
 446:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_LOW,       /**< Clear only when timer value has been captured
 447:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 448:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t;
 449:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 450:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 451:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi Channel Shadow transfer request configuration options
 452:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 453:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MCMS_ACTION
 454:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 455:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 456:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 the actual registers upon MCS xfer 
 457:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 458:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 register values to the actual regis
 459:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 request */
 460:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 461:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 Compare register values to the actu
 462:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 MCS xfer request */
 463:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MCMS_ACTION_t;
 464:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 465:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 466:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids
 467:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 468:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_IRQ_ID
 469:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 470:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH       = 0U,  /**< Period match counting up */
 471:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH          = 1U,  /**< Period match -> One match counting down */
 472:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP   = 2U,  /**< Compare match counting up */
 473:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN = 3U,  /**< Compare match counting down */
 474:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT0             = 8U,  /**< Event-0 occurrence */
 475:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT1             = 9U,  /**< Event-1 occurrence */
 476:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT2             = 10U, /**< Event-2 occurrence */
 477:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_TRAP               = 11U  /**< Trap occurrence */
 478:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_IRQ_ID_t;
 479:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 480:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 481:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 482:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 483:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MULTI_IRQ_ID
 484:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 485:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_PERIOD_MATCH       = 0x1U,   /**< Period match counting up */
 486:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_ONE_MATCH          = 0x2U,   /**< Period match -> One match counting 
 487:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP   = 0x4U,   /**< Compare match counting up */
 488:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN = 0x8U,   /**< Compare match counting down */
 489:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT0             = 0x100U, /**< Event-0 occurrence */
 490:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT1             = 0x200U, /**< Event-1 occurrence */
 491:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT2             = 0x400U, /**< Event-2 occurrence */
 492:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MULTI_IRQ_ID_t;
 493:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 494:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 495:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Service Request Lines for CCU4. Event are mapped to these SR lines and these are used to generat
 496:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 497:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SR_ID
 498:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 499:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 500:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_1,         /**< Service Request Line-1 selected  */
 501:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_2,         /**< Service Request Line-2 selected  */
 502:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 503:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SR_ID_t;
 504:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 505:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 506:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer options.
 507:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 508:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SHADOW_TRANSFER
 509:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 510:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_0            = CCU4_GCSS_S0SE_Msk, /**< Transfer Period, Compare a
 511:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 512:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-0 */
 513:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU4_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 514:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 515:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU4_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 516:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 517:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_1            = CCU4_GCSS_S1SE_Msk, /**< Transfer Period, Compare a
 518:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 519:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-1 */
 520:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU4_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 521:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual registers for S
 522:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU4_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 523:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 524:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_2            = CCU4_GCSS_S2SE_Msk, /**< Transfer Period, Compare a
 525:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 526:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-2 */
 527:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU4_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 528:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 529:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU4_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 530:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 531:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_3            = CCU4_GCSS_S3SE_Msk, /**< Transfer Period, Compare a
 532:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 533:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-3 */
 534:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU4_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 535:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 536:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU4_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 537:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 538:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SHADOW_TRANSFER_t;
 539:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 540:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V3) || defined(DOXYGEN)/* Defined for XMC1400 devices only */
 541:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 542:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer mode options.
 543:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Only available for XMC1400 series
 544:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 545:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE
 546:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 547:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U,  /**< Shadow transfer is 
 548:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                 One match. */
 549:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 550:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 551:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t;
 552:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 553:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 554:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 555:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Immediate write into configuration register
 556:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 557:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 558:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_WRITE_INTO
 559:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 560:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU4_CC4_STC_IRPC_Msk,                  /**< Imm
 561:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 562:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 563:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_COMPARE_CONFIGURATION = CCU4_CC4_STC_IRCC_Msk,                 /**< Imm
 564:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 565:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 566:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU4_CC4_STC_IRLC_Msk,           /**< Imm
 567:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 568:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 569:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRDC_Msk,            /**< Imm
 570:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 571:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 572:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRFC_Msk /**< Imm
 573:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 574:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Val
 575:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_WRITE_INTO_t;
 576:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 577:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 578:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 579:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 580:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 581:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 582:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 583:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 584:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU4_CC4_STC_ASPC_Msk,        
 585:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 586:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 587:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 588:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE_SHADOW = CCU4_CC4_STC_ASCC_Msk,       
 589:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 590:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 591:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 592:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU4_CC4_STC_ASLC_Msk,        
 593:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 594:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 595:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU4_CC4_STC_ASDC_Msk,        
 596:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 597:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 598:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU4_CC4_STC_ASFC_
 599:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 600:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 601:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 602:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 603:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 604:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 605:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 606:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Used to create Mask needed for Multi-channel Shadow transfer enable/disable
 607:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 608:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MASK
 609:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 610:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_0  = 1U,  /**< SLICE-0 */
 611:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_1  = 2U,  /**< SLICE-1 */
 612:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_2  = 4U,  /**< SLICE-2 */
 613:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 614:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MASK_t;
 615:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 616:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 617:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects suspend mode
 618:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 619:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SUSPEND_MODE
 620:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 621:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_IGNORE = 0 << CCU4_GCTRL_SUSCFG_Pos, /**< Suspend request ignored. The modu
 622:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_STOPS_INMEDIATELLY = 1 << CCU4_GCTRL_SUSCFG_Pos, /**< Stops all the running
 623:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_SAFE_STOP = 2 << CCU4_GCTRL_SUSCFG_Pos, /**< Stops the block immediately an
 624:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_WAIT_ROLL_OVER = 3 << CCU4_GCTRL_SUSCFG_Pos /**< Waits for the roll over of
 625:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SUSPEND_MODE_t;
 626:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 627:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 628:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 629:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 slice status bit
 630:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 631:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_STATUS_BIT
 632:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 633:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_STATUS_BIT_PASSIVE = false, /**< Passive */
 634:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_STATUS_BIT_ACTIVE  = true   /**< Active  */
 635:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_STATUS_BIT_t;
 636:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 637:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 638:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 639:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DATA STRUCTURES
 640:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 641:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 642:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 643:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 644:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Needed to configure the various aspects of an External Event.
 645:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This structure will not connect the external event with an external function.
 646:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 647:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_EVENT_CONFIG
 648:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 649:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event *
 650:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 651:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an edge sensitive 
 652:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 653:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an level sensitive
 654:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 655:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_CONFIG_t;
 656:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 657:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard start*/
 658:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 659:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #pragma push
 660:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #pragma anon_unions
 661:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 662:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #pragma warning 586
 663:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 664:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 665:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 666:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to compare 
 667:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 668:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 669:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_COMPARE_CONFIG
 670:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 671:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 672:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 673:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 674:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 675:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 676:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t */
 677:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 678:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t*/
 679:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t shadow_xfer_clear : 1;  /**< Should PR and CR shadow xfer happen when timer is clear
 680:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 10;
 681:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 682:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 683:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 1;
 684:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 685:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_PRESCALER_MODE_t*/
 686:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 8;
 687:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t mcm_enable : 1;         /**< Multi-Channel mode enable? */
 688:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 6;
 689:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 690:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 691:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 692:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value
 693:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                             Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t */
 694:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 695:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering */
 696:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t passive_level : 1;          /**< Configuration of ST and OUT passive levels.
 697:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t*
 698:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true.*/
 699:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_COMPARE_CONFIG_t;
 700:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 701:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 702:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to capture 
 703:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 704:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 705:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_CAPTURE_CONFIG
 706:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 707:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 708:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 709:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 710:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 711:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 712:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 713:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 714:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                           Accepts enum ::XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t*/
 715:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 716:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 717:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 718:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 3;
 719:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU4_SLI
 720:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 15;
 721:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 722:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 723:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 724:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 725:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 726:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;  /**< Enables the concatenation of the timer */
 727:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAPTURE_CONFIG_t;
 728:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard end*/
 729:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 730:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #pragma pop
 731:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 732:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #pragma warning restore
 733:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 734:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 735:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * API Prototypes
 736:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 737:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 738:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifdef __cplusplus
 739:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** extern "C" {
 740:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 741:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 742:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidModule(const XMC_CCU4_MODULE_t *const module)
 743:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 744:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 745:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 746:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (module == CCU40);
 747:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 748:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41)
 749:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU41);
 750:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 751:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 752:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)
 753:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU42);
 754:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 755:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 756:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)
 757:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU43);
 758:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 759:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 760:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;
 761:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 762:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 763:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidSlice(const XMC_CCU4_SLICE_t *const slice)
 764:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 765:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 766:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 767:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (slice == CCU40_CC40);
 768:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC41)
 769:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC41);
 770:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 771:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC42)
 772:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC42);
 773:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 774:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC43)
 775:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC43);
 776:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 777:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41)
 778:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC40);
 779:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC41)
 780:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC41);
 781:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 782:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC42)
 783:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC42);
 784:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 785:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC43)
 786:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC43);
 787:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 788:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 789:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)
 790:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC40);
 791:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC41)
 792:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC41);
 793:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 794:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC42)
 795:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC42);
 796:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 797:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC43)
 798:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC43);
 799:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 800:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 801:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)
 802:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC40);
 803:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC41)
 804:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC41);
 805:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 806:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC42)
 807:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC42);
 808:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 809:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC43)
 810:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC43);
 811:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 812:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 813:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 814:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;
 815:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 816:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 817:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 818:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 819:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mcs_action multi-channel shadow transfer request configuration
 820:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 821:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 822:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 823:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 824:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Initialization of global register GCTRL.<br>\n
 825:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  As part of module initialization, behaviour of the module upon detection
 826:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU4_EnableModule().
 827:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The API call would bring up the required CCU4 module and also initialize the module for
 828:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the required multi-channel shadow transfer.
 829:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 830:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 831:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
 832:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 833:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action);
 834:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 835:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 836:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 837:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock Choice of input clock to the module
 838:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 839:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 840:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 841:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 842:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.<BR>\n
 843:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
 844:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Call to this API is valid after the XMC_CCU4_Init().
 845:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 846:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 847:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.<BR>
 848:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 849:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock);
 850:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 851:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 852:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 853:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 854:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 855:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 856:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 857:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the CCU4 module and brings it to active state.<BR>\n
 858:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
 859:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API before any operations are done on the CCU4 module. Invoked from  XMC_CCU4_Init()
 860:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 861:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 862:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SetModuleClock()<BR> XMC_CCU4_DisableModule()<BR> XMC_CCU4_StartPrescaler().
 863:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 864:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module);
 865:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 866:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 867:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 868:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 869:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 870:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 871:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 872:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Brings the CCU4 module to reset state and enables gating of the clock signal(if applicable depen
 873:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * on the device being selected).<BR>\n
 874:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API when a CCU4 module needs to be disabled completely.
 875:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any operation on the CCU4 module will have no effect after this API is called.
 876:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 877:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 878:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableModule()<BR> XMC_CCU4_DisableModule().
 879:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 880:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module);
 881:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 882:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 883:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 884:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 885:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 886:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 887:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 888:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<BR>\n
 889:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
 890:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU4_Init()
 891:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  (Mandatory to fully initialize the module).Directly accessed register is GIDLC.
 892:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 893:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 894:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescal
 895:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StopPrescaler().
 896:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 897:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
 898:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 899:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 900:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 901:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 902:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 903:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 904:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 905:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 906:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 907:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 908:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 909:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.<BR>\n
 910:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Opposite of the StartPrescaler routine.
 911:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
 912:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the slices of the module.Registers directly accessed is GIDLS.
 913:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 914:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 915:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_St
 916:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 917:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StopPrescaler(XMC_CCU4_MODULE_t *const module)
 918:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 919:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StopPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 920:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS = (uint32_t) CCU4_GIDLS_CPRB_Msk;
 921:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 922:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 923:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 924:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 925:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 926:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 927:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 928:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 929:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.<BR>\n
 930:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This will return true if the prescaler is running. If clock is being supplied to the slices of t
 931:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * module then returns as true.
 932:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 933:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 934:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_D
 935:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 936:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsPrescalerRunning(XMC_CCU4_MODULE_t *const module)
 937:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 938:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 939:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return ((bool)((module->GSTAT & (uint32_t) CCU4_GSTAT_PRB_Msk) == (uint32_t)CCU4_GSTAT_PRB_Msk));
 940:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 941:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 942:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 943:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 944:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
 945:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
 946:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x1 to 0xF]
 947:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 948:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 949:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 950:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 951:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I,
 952:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLC.CS3I bits.\n\n
 953:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
 954:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the idle state simultaneously.
 955:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 956:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 957:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock().
 958:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 959:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableMultipleClocks(XMC_CCU4_MODULE_t *const module, const uint8_t c
 960:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 961:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
 962:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Wrong clock mask", (clock_mask < 16U));
 963:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 964:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC = (uint32_t) clock_mask;
 965:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 966:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 967:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 968:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 969:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be Enabled.
 970:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 971:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 972:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 973:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 974:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 975:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I,
 976:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
 977:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
 978:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  slice whose clock needs to be enabled.
 979:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 980:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 981:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XM
 982:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 983:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_numb
 984:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
  25              	 .loc 1 984 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
  39 0008 0A1C     	 mov r2,r1
  40 000a FB1C     	 add r3,r7,#3
  41 000c 1A70     	 strb r2,[r3]
 985:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 986:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));
 987:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 988:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC = ((uint32_t) 1) << slice_number;
  42              	 .loc 1 988 0
  43 000e FB1C     	 add r3,r7,#3
  44 0010 1B78     	 ldrb r3,[r3]
  45 0012 0122     	 mov r2,#1
  46 0014 9A40     	 lsl r2,r2,r3
  47 0016 7B68     	 ldr r3,[r7,#4]
  48 0018 DA60     	 str r2,[r3,#12]
 989:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
  49              	 .loc 1 989 0
  50 001a BD46     	 mov sp,r7
  51 001c 02B0     	 add sp,sp,#8
  52              	 
  53 001e 80BD     	 pop {r7,pc}
  54              	 .cfi_endproc
  55              	.LFE48:
  57              	 .section .text.XMC_CCU4_SLICE_IsTimerRunning,"ax",%progbits
  58              	 .align 2
  59              	 .code 16
  60              	 .thumb_func
  62              	XMC_CCU4_SLICE_IsTimerRunning:
  63              	.LFB54:
 990:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 991:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 992:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 993:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be disabled.
 994:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 995:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 996:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 997:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 998:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 999:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I,
1000:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
1001:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to disable clock at slice level using the module pointer.
1002:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
1003:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GIDLS.
1004:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1005:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1006:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC
1007:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1008:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_num
1009:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1010:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
1011:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));
1012:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1013:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS = ((uint32_t) 1) << slice_number;
1014:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1015:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1016:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1017:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU8 module
1018:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode   Selects suspend mode
1019:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1020:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1021:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1022:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1023:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the entering in suspend mode for all the CCU8 slices.
1024:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1025:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1026:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
1027:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1028:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SetSuspendMode(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SUSPEN
1029:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1030:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
1031:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCTRL = (module->GCTRL & (uint32_t)~CCU4_GCTRL_SUSCFG_Msk) | mode;
1032:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1033:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1034:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1035:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1036:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_init Pointer to slice configuration structure
1037:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1038:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1039:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1040:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1041:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to compare mode, by configuring CC4yTC, CC4yCMC, CC4yPSC, CC4yDITH
1042:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yFPCS, CC4yCHC registers.\n\n
1043:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Timer configurations in this routine.
1044:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After initialization user has to explicitly enable the shadow transfer for the required values b
1045:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask.
1046:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1047:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1048:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
1049:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1050:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
1051:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init);
1052:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1053:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1054:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1055:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param capture_init Pointer to slice configuration structure
1056:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1057:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1058:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1059:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1060:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to capture mode, by configuring CC4yTC, CC4yCMC, CC4yPSC,CC4yFPCS 
1061:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Capture configurations in  this routine.After initialization user h
1062:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * enable the shadow transfer for the required  values by calling XMC_CCU4_EnableShadowTransfer()
1063:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with appropriate mask.
1064:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1065:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1066:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config().
1067:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1068:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
1069:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init);
1070:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1071:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1072:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1073:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1074:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Start Function
1075:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param start_mode Behavior of slice when the start function is activated
1076:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1077:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1078:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1079:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1080:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Start Function of the slice, by configuring CC4yCMC.ENDS and CC4yTC.ENDM bits.\n
1081:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC4 ti
1082:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1083:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1084:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1085:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1086:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1087:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
1088:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_EVENT_t event,
1089:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode);
1090:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1091:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1092:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1093:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Stop Function
1094:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param end_mode Behavior of slice when the stop function is activated
1095:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1096:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1097:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1098:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1099:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Stop function for the slice, by configuring CC4yCMC.STRTS and CC4yTC.STRM bits.\n
1100:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU4 tim
1101:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1102:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1103:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1104:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1105:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1106:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
1107:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_EVENT_t event,
1108:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode);
1109:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1110:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1111:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1112:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External load Function
1113:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1114:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1115:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1116:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1117:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Load Function for the slice, by configuring CC4yCMC.LDS bit.\n\n
1118:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1119:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 0,CC4yTIMER register is reloaded with the value from compare register\n
1120:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 1,CC4yTIMER register is reloaded with the value from period register\n
1121:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1122:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1123:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1124:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1125:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1126:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1127:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1128:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1129:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1130:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Modulation Function
1131:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mod_mode Desired Modulation mode
1132:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1133:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1134:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1135:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1136:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1137:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1138:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Output Modulation Function of the slice, by configuring CCeyCMC.MOS, CC4yTC.EMT a
1139:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.EMS bits.\n\n
1140:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1141:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1142:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the modulation function is configured as well.
1143:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1144:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1145:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1146:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1147:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
1148:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_EVENT_t event,
1149:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
1150:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const bool synch_with_pwm);
1151:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1152:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1153:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1154:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Function
1155:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1156:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1157:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1158:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1159:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Function of the slice, by configuring CC4yCMC.CNTS bit.\n\n
1160:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count function is mapped with one of the 3 events. CCU4 slice can take an external
1161:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * signal to act as the counting event. The CCU4 slice would count the
1162:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * edges present on the \b event selected.
1163:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1164:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1165:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1166:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1167:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1168:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1169:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1170:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1171:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event  Map an External event to the External Gating Function
1172:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1173:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1174:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1175:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1176:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Gating Function of the slice, by configuring CC4yCMC.GATES bit.\n\n
1177:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Gating function is mapped with one of the 3 events.  A CCU4 slice can use an input signal that w
1178:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1179:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1180:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1181:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1182:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1183:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1184:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1185:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1186:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1187:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-0 Function
1188:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1189:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1190:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1191:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1192:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-0 Function of the slice, by configuring CC4yCMC.CAP0S bit.\n\n
1193:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events.  A CCU4 slice can be configured into captur
1194:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC0V and 
1195:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1196:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1197:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1198:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1199:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1200:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1201:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1202:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1203:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-1 Function
1204:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1205:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1206:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1207:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1208:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-1 Function of the slice, by configuring CC4yCMC.CAP1S bit.\n\n
1209:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events. A CCU4 slice can be configured into capture
1210:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC2V
1211:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1212:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1213:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1214:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1215:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1216:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1217:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1218:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1219:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1220:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1221:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1222:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1223:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC4yTC.E
1224:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In this mode the there is only one associated read address for all the capture registers.
1225:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Individual capture registers can still be accessed in this mode.
1226:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1227:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1228:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_GetCapturedValueFromFifo().
1229:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1230:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsExtendedCapReadEnabled(const XMC_CCU4_SLICE_t *const slice)
1231:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1232:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_IsExtendedCapReadEnabled:Invalid Module Pointer", XMC_CCU4_IsValidSlic
1233:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return ((bool)((slice->TC & (uint32_t) CCU4_CC4_TC_ECM_Msk) == (uint32_t)CCU4_CC4_TC_ECM_Msk));
1234:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1235:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1236:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V1) /* Defined for XMC4500, XMC4400, XMC4200, XMC4100 devices only */
1237:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1238:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1239:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number to check whether read value belongs to required slice or not
1240:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1241:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1242:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1243:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                     Range: [0x0 to 0xFFFF]
1244:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1245:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1246:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(ECRD register).\n\n
1247:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1248:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1249:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1250:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1251:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1252:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1253:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1254:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC4500, XMC4400, XMC4200 and XMC4100 series
1255:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1256:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
1257:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #else
1258:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1259:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1260:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set The capture register set from which the captured value is to be retrieved
1261:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1262:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t Returns the value captured in the \b slice_number
1263:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Range: [0x0 to 0xFFFF]
1264:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1265:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1266:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(CC4yECRD0 and CC4yECRD1).\n\n
1267:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1268:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1269:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1270:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1271:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1272:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1273:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1274:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1275:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1276:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1277:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     const XMC_CCU4_SLICE_CAP_REG_SET_t set);
1278:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
1279:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1280:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1281:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1282:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Direction Function
1283:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1284:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1285:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1286:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1287:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Direction of the slice, by configuring CC4yCMC.UDS bit.\n\n
1288:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1289:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTIMER count direction depending on an external signal.
1290:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1291:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1292:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1293:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1294:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
1295:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1296:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1297:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1298:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1299:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1300:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1301:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1302:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the status bit override Function of the slice, by configuring CC4yCMC.OFS bit.\n\n
1303:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1304:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * output of the timer's CC4yST signal depending on an external signal.
1305:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1306:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1307:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent().
1308:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1309:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice);
1310:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1311:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1312:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1313:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param exit_mode How should a previously logged trap state be exited?
1314:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1315:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1316:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1317:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1318:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1319:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Trap Function of the slice, by configuring CC4yCMC.TS, CC4yTC.TRPSE, and CC4yTC.T
1320:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1321:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1322:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1323:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1324:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1325:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1326:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1327:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1328:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
1329:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
1330:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                bool synch_with_pwm);
1331:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1332:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1333:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1334:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1335:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev1_config Pointer to event 1 configuration data
1336:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev2_config Pointer to event 2 configuration data
1337:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1338:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1339:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1340:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1341:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1342:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC4yINS reg
1343:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1344:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1345:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Event-2 input would be the override value.
1346:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1347:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1348:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig().
1349:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1350:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
1351:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
1352:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config);
1353:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1354:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1355:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1356:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1357:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param config Pointer to event configuration data.
1358:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1359:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1360:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1361:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1362:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures an External Event of the slice, by updating CC4yINS register .\n\n
1363:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1364:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1365:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1366:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1367:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1368:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1369:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1370:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1371:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1372:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1373:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
1374:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_t event,
1375:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config);
1376:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1377:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1378:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1379:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1380:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1381:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1382:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1383:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1384:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1385:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1386:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Selects an input for an external event, by configuring CC4yINS register.\n\n
1387:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1388:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This configures the CC4yINS.EVxIS for the selected event.
1389:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1390:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1391:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1392:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1393:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1394:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1395:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1396:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
1397:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_EVENT_t event,
1398:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_INPUT_t input);
1399:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1400:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1401:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1402:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1403:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1404:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1405:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1406:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the trap feature, by setting CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TRAP
1407:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n
1408:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1409:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1410:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1411:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1412:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent(
1413:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInput().
1414:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1415:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
1416:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1417:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1418:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
1419:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1420:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1421:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1422:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1423:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1424:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1425:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1426:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1427:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the trap feature, by clearing CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TR
1428:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n.\n\n
1429:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will revert the changes done by XMC_CCU4_SLICE_EnableTrap().
1430:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU4 slice.
1431:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1432:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1433:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableTrap().
1434:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1435:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableTrap(XMC_CCU4_SLICE_t *const slice)
1436:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1437:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1438:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_TRAPE_Msk);
1439:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1440:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1441:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1442:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1443:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1444:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1445:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1446:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1447:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC4yTCST.TRB bit.
1448:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1449:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1450:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
1451:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1452:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
1453:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
  64              	 .loc 1 1453 0
  65              	 .cfi_startproc
  66 0000 80B5     	 push {r7,lr}
  67              	.LCFI3:
  68              	 .cfi_def_cfa_offset 8
  69              	 .cfi_offset 7,-8
  70              	 .cfi_offset 14,-4
  71 0002 82B0     	 sub sp,sp,#8
  72              	.LCFI4:
  73              	 .cfi_def_cfa_offset 16
  74 0004 00AF     	 add r7,sp,#0
  75              	.LCFI5:
  76              	 .cfi_def_cfa_register 7
  77 0006 7860     	 str r0,[r7,#4]
1454:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1455:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
  78              	 .loc 1 1455 0
  79 0008 7B68     	 ldr r3,[r7,#4]
  80 000a 9B68     	 ldr r3,[r3,#8]
  81 000c 0122     	 mov r2,#1
  82 000e 1340     	 and r3,r2
  83 0010 5A1E     	 sub r2,r3,#1
  84 0012 9341     	 sbc r3,r3,r2
  85 0014 DBB2     	 uxtb r3,r3
1456:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
  86              	 .loc 1 1456 0
  87 0016 181C     	 mov r0,r3
  88 0018 BD46     	 mov sp,r7
  89 001a 02B0     	 add sp,sp,#8
  90              	 
  91 001c 80BD     	 pop {r7,pc}
  92              	 .cfi_endproc
  93              	.LFE54:
  95 001e C046     	 .section .text.XMC_CCU4_SLICE_StartTimer,"ax",%progbits
  96              	 .align 2
  97              	 .code 16
  98              	 .thumb_func
 100              	XMC_CCU4_SLICE_StartTimer:
 101              	.LFB56:
1457:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1458:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1459:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1460:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1461:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   ::XMC_CCU4_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1462:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1463:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1464:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the timer counting direction, by reading CC4yTCST.CDIR bit.\n\n
1465:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will return the direction in which the timer is currently
1466:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * incrementing(XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU4_SLICE_TIMER_COUNT_DIR_
1467:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1468:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1469:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1470:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1471:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_DIR_t XMC_CCU4_SLICE_GetCountingDir(const XMC_CCU4_SLICE
1472:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1473:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1474:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return ((XMC_CCU4_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU4_CC4_TCST_CDIR_Msk) >> CCU4_CC4_T
1475:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1476:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1477:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1478:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1479:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1480:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1481:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1482:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1483:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Starts the timer counting operation, by setting CC4yTCSET.TRBS bit.\n\n
1484:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have configured the CC4 slice before starting its timer.
1485:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1486:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1487:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1488:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StopTimer().
1489:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1490:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
1491:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 102              	 .loc 1 1491 0
 103              	 .cfi_startproc
 104 0000 80B5     	 push {r7,lr}
 105              	.LCFI6:
 106              	 .cfi_def_cfa_offset 8
 107              	 .cfi_offset 7,-8
 108              	 .cfi_offset 14,-4
 109 0002 82B0     	 sub sp,sp,#8
 110              	.LCFI7:
 111              	 .cfi_def_cfa_offset 16
 112 0004 00AF     	 add r7,sp,#0
 113              	.LCFI8:
 114              	 .cfi_def_cfa_register 7
 115 0006 7860     	 str r0,[r7,#4]
1492:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1493:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 116              	 .loc 1 1493 0
 117 0008 7B68     	 ldr r3,[r7,#4]
 118 000a 0122     	 mov r2,#1
 119 000c DA60     	 str r2,[r3,#12]
1494:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 120              	 .loc 1 1494 0
 121 000e BD46     	 mov sp,r7
 122 0010 02B0     	 add sp,sp,#8
 123              	 
 124 0012 80BD     	 pop {r7,pc}
 125              	 .cfi_endproc
 126              	.LFE56:
 128              	 .section .text.XMC_CCU4_SLICE_StopTimer,"ax",%progbits
 129              	 .align 2
 130              	 .code 16
 131              	 .thumb_func
 133              	XMC_CCU4_SLICE_StopTimer:
 134              	.LFB57:
1495:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1496:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1497:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1498:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1499:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1500:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1501:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1502:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the Timer.<BR>\n
1503:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC4yTCCLR.TRBC bit.
1504:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1505:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1506:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1507:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1508:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
1509:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 135              	 .loc 1 1509 0
 136              	 .cfi_startproc
 137 0000 80B5     	 push {r7,lr}
 138              	.LCFI9:
 139              	 .cfi_def_cfa_offset 8
 140              	 .cfi_offset 7,-8
 141              	 .cfi_offset 14,-4
 142 0002 82B0     	 sub sp,sp,#8
 143              	.LCFI10:
 144              	 .cfi_def_cfa_offset 16
 145 0004 00AF     	 add r7,sp,#0
 146              	.LCFI11:
 147              	 .cfi_def_cfa_register 7
 148 0006 7860     	 str r0,[r7,#4]
1510:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1511:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 149              	 .loc 1 1511 0
 150 0008 7B68     	 ldr r3,[r7,#4]
 151 000a 0122     	 mov r2,#1
 152 000c 1A61     	 str r2,[r3,#16]
1512:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 153              	 .loc 1 1512 0
 154 000e BD46     	 mov sp,r7
 155 0010 02B0     	 add sp,sp,#8
 156              	 
 157 0012 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE57:
 161              	 .section .text.XMC_CCU4_SLICE_ClearTimer,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_CCU4_SLICE_ClearTimer:
 167              	.LFB58:
1513:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1514:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1515:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1516:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1517:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1518:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1519:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1520:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Resets the timer count to zero, by setting CC4yTCCLR.TCC bit.\n\n
1521:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A timer which has been stopped can still retain the last counted value.
1522:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After invoking this API the timer value will be cleared.
1523:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1524:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1525:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1526:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1527:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
1528:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 168              	 .loc 1 1528 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI12:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI13:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI14:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
1529:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1530:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 182              	 .loc 1 1530 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 0222     	 mov r2,#2
 185 000c 1A61     	 str r2,[r3,#16]
1531:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 186              	 .loc 1 1531 0
 187 000e BD46     	 mov sp,r7
 188 0010 02B0     	 add sp,sp,#8
 189              	 
 190 0012 80BD     	 pop {r7,pc}
 191              	 .cfi_endproc
 192              	.LFE58:
 194              	 .section .text.XMC_CCU4_SLICE_SetTimerPeriodMatch,"ax",%progbits
 195              	 .align 2
 196              	 .code 16
 197              	 .thumb_func
 199              	XMC_CCU4_SLICE_SetTimerPeriodMatch:
 200              	.LFB63:
1532:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1533:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1534:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1535:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1536:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1537:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1538:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1539:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops and resets the timer count to zero, by setting CC4yTCCLR.TCC and CC4yTCCLR.TRBC bit.\n\n
1540:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1541:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1542:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1543:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1544:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopClearTimer(XMC_CCU4_SLICE_t *const slice)
1545:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1546:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1547:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = CCU4_CC4_TCCLR_TRBC_Msk | CCU4_CC4_TCCLR_TCC_Msk;
1548:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1549:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1550:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1551:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1552:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1553:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    ::XMC_CCU4_SLICE_MODE_t returns XMC_CCU4_SLICE_MODE_COMPARE if the slice is operating in comp
1554:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                          returns XMC_CCU4_SLICE_MODE_CAPTURE if the slice is operating in captur
1555:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1556:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1557:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1558:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.CMOD bit.\n\n
1559:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Ensure that before invoking this API the CCU4 slice should be configured otherwise the output of
1560:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * invalid.
1561:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1562:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1563:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1564:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1565:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_MODE_t XMC_CCU4_SLICE_GetSliceMode(const XMC_CCU4_SLICE_t *const sli
1566:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1567:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1568:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return ((XMC_CCU4_SLICE_MODE_t)(((slice->TC) & CCU4_CC4_TC_CMOD_Msk) >> CCU4_CC4_TC_CMOD_Pos));
1569:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1570:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1571:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1572:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1573:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1574:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1575:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1576:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1577:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC4yTC.TSSM b
1578:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1579:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1580:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * reaching the terminal count.
1581:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1582:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1583:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerRepeatMode().
1584:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1585:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
1586:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1587:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1588:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1589:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1590:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1591:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1592:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1593:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1594:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC4yTC.T
1595:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1596:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1597:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * all over again after reaching the terminal count.
1598:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1599:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1600:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerRepeatMode().
1601:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1602:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t XMC_CCU4_SLICE_GetTimerRepeatMode(
1603:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   const XMC_CCU4_SLICE_t *const slice)
1604:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1605:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
1606:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return ((XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TSSM_Msk) >> CCU4_CC4_TC_
1607:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1608:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1609:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1610:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1611:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1612:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1613:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1614:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1615:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC4yTC.
1616:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1617:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1618:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1619:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1620:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * greater than the compare value.
1621:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1622:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1623:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerCountingMode().
1624:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1625:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
1626:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1627:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1628:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1629:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1630:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1631:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA if center aligned
1632:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1633:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1634:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC4yTC.TCM bit.\
1635:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1636:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1637:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCountingMode().
1638:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1639:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_MODE_t XMC_CCU4_SLICE_GetTimerCountingMode(
1640:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   const XMC_CCU4_SLICE_t *const slice)
1641:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1642:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1643:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return ((XMC_CCU4_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TCM_Msk) >> CCU4_CC4_TC_TC
1644:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1645:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1646:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1647:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_val Timer period value
1648:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *        Range: [0x0 to 0xFFFF]
1649:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1650:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1651:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1652:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1653:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer period, by writing CC4yPRS register.\n\n
1654:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1655:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1656:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1657:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual period register.
1658:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1659:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1660:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1661:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1662:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16
1663:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 201              	 .loc 1 1663 0
 202              	 .cfi_startproc
 203 0000 80B5     	 push {r7,lr}
 204              	.LCFI15:
 205              	 .cfi_def_cfa_offset 8
 206              	 .cfi_offset 7,-8
 207              	 .cfi_offset 14,-4
 208 0002 82B0     	 sub sp,sp,#8
 209              	.LCFI16:
 210              	 .cfi_def_cfa_offset 16
 211 0004 00AF     	 add r7,sp,#0
 212              	.LCFI17:
 213              	 .cfi_def_cfa_register 7
 214 0006 7860     	 str r0,[r7,#4]
 215 0008 0A1C     	 mov r2,r1
 216 000a BB1C     	 add r3,r7,#2
 217 000c 1A80     	 strh r2,[r3]
1664:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1665:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->PRS = (uint32_t) period_val;
 218              	 .loc 1 1665 0
 219 000e BB1C     	 add r3,r7,#2
 220 0010 1A88     	 ldrh r2,[r3]
 221 0012 7B68     	 ldr r3,[r7,#4]
 222 0014 5A63     	 str r2,[r3,#52]
1666:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 223              	 .loc 1 1666 0
 224 0016 BD46     	 mov sp,r7
 225 0018 02B0     	 add sp,sp,#8
 226              	 
 227 001a 80BD     	 pop {r7,pc}
 228              	 .cfi_endproc
 229              	.LFE63:
 231              	 .section .text.XMC_CCU4_SLICE_SetTimerCompareMatch,"ax",%progbits
 232              	 .align 2
 233              	 .code 16
 234              	 .thumb_func
 236              	XMC_CCU4_SLICE_SetTimerCompareMatch:
 237              	.LFB65:
1667:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1668:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1669:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1670:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1671:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer period value
1672:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1673:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1674:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1675:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer period value currently effective, by reading CC4yPR register.\n\n
1676:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1677:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1678:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1679:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1680:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1681:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerPeri
1682:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1683:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1684:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1685:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
1686:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1687:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
1688:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1689:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1690:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return ((uint16_t)slice->PR);
1691:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1692:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1693:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1694:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1695:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_val Timer compare value
1696:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1697:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1698:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1699:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1700:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer compare value, by writing CC4yCRS register.<BR>\n
1701:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The PWM duty cycle is determined by this value.
1702:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1703:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the the period/compare value by calling XMC_CCU4_EnableShadowTransfer() with
1704:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1705:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1706:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1707:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1708:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1709:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1710:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint1
1711:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 238              	 .loc 1 1711 0
 239              	 .cfi_startproc
 240 0000 80B5     	 push {r7,lr}
 241              	.LCFI18:
 242              	 .cfi_def_cfa_offset 8
 243              	 .cfi_offset 7,-8
 244              	 .cfi_offset 14,-4
 245 0002 82B0     	 sub sp,sp,#8
 246              	.LCFI19:
 247              	 .cfi_def_cfa_offset 16
 248 0004 00AF     	 add r7,sp,#0
 249              	.LCFI20:
 250              	 .cfi_def_cfa_register 7
 251 0006 7860     	 str r0,[r7,#4]
 252 0008 0A1C     	 mov r2,r1
 253 000a BB1C     	 add r3,r7,#2
 254 000c 1A80     	 strh r2,[r3]
1712:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1713:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->CRS = (uint32_t) compare_val;
 255              	 .loc 1 1713 0
 256 000e BB1C     	 add r3,r7,#2
 257 0010 1A88     	 ldrh r2,[r3]
 258 0012 7B68     	 ldr r3,[r7,#4]
 259 0014 DA63     	 str r2,[r3,#60]
1714:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 260              	 .loc 1 1714 0
 261 0016 BD46     	 mov sp,r7
 262 0018 02B0     	 add sp,sp,#8
 263              	 
 264 001a 80BD     	 pop {r7,pc}
 265              	 .cfi_endproc
 266              	.LFE65:
 268              	 .section .text.XMC_CCU4_EnableShadowTransfer,"ax",%progbits
 269              	 .align 2
 270              	 .code 16
 271              	 .thumb_func
 273              	XMC_CCU4_EnableShadowTransfer:
 274              	.LFB67:
1715:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1716:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1717:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1718:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1719:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer compare value
1720:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1721:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1722:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1723:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer compare value currently effective, by reading CC4yCRS register.\n\n
1724:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
1725:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1726:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1727:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
1728:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
1729:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerComp
1730:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1731:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is CC4yCR.
1732:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1733:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1734:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCompareMatch().
1735:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1736:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerCompareMatch(const XMC_CCU4_SLICE_t *const slice)
1737:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1738:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1739:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return ((uint16_t)slice->CR);
1740:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1741:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1742:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1743:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1744:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
1745:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             Use ::XMC_CCU4_SHADOW_TRANSFER_t enum items to create a mask of choi
1746:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                              using a bit wise OR operation.
1747:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1748:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1749:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1750:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1751:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
1752:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the GCSS register.\n\n
1753:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
1754:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * shadow transfer trigger after the API is called.
1755:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1756:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any call to XMC_CCU4_SLICE_SetTimerPeriodMatch()<BR> XMC_CCU4_SLICE_SetTimerCompareMatch()<BR>
1757:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetPrescaler()<BR> XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
1758:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be succeeded by this API.
1759:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GCSS.
1760:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1761:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1762:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1763:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1764:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t 
1765:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 275              	 .loc 1 1765 0
 276              	 .cfi_startproc
 277 0000 80B5     	 push {r7,lr}
 278              	.LCFI21:
 279              	 .cfi_def_cfa_offset 8
 280              	 .cfi_offset 7,-8
 281              	 .cfi_offset 14,-4
 282 0002 82B0     	 sub sp,sp,#8
 283              	.LCFI22:
 284              	 .cfi_def_cfa_offset 16
 285 0004 00AF     	 add r7,sp,#0
 286              	.LCFI23:
 287              	 .cfi_def_cfa_register 7
 288 0006 7860     	 str r0,[r7,#4]
 289 0008 3960     	 str r1,[r7]
1766:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module))
1767:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;
 290              	 .loc 1 1767 0
 291 000a 7B68     	 ldr r3,[r7,#4]
 292 000c 3A68     	 ldr r2,[r7]
 293 000e 1A61     	 str r2,[r3,#16]
1768:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 294              	 .loc 1 1768 0
 295 0010 BD46     	 mov sp,r7
 296 0012 02B0     	 add sp,sp,#8
 297              	 
 298 0014 80BD     	 pop {r7,pc}
 299              	 .cfi_endproc
 300              	.LFE67:
 302 0016 C046     	 .section .text.CAPTURE_GetAppVersion,"ax",%progbits
 303              	 .align 2
 304              	 .global CAPTURE_GetAppVersion
 305              	 .code 16
 306              	 .thumb_func
 308              	CAPTURE_GetAppVersion:
 309              	.LFB125:
 310              	 .file 2 "../Dave/Generated/CAPTURE/capture.c"
   1:../Dave/Generated/CAPTURE/capture.c **** /**
   2:../Dave/Generated/CAPTURE/capture.c ****  * @file capture.h
   3:../Dave/Generated/CAPTURE/capture.c ****  * @date 2016-07-01
   4:../Dave/Generated/CAPTURE/capture.c ****  *
   5:../Dave/Generated/CAPTURE/capture.c ****  *
   6:../Dave/Generated/CAPTURE/capture.c ****  * @cond
   7:../Dave/Generated/CAPTURE/capture.c ****  **************************************************************************************************
   8:../Dave/Generated/CAPTURE/capture.c ****  * CAPTURE v4.0.4 - Configures the properties of CCU4 or CCU8 peripheral as a capture.
   9:../Dave/Generated/CAPTURE/capture.c ****  *
  10:../Dave/Generated/CAPTURE/capture.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  11:../Dave/Generated/CAPTURE/capture.c ****  * All rights reserved.
  12:../Dave/Generated/CAPTURE/capture.c ****  *
  13:../Dave/Generated/CAPTURE/capture.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Dave/Generated/CAPTURE/capture.c ****  * following conditions are met:
  15:../Dave/Generated/CAPTURE/capture.c ****  *
  16:../Dave/Generated/CAPTURE/capture.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  17:../Dave/Generated/CAPTURE/capture.c ****  *   disclaimer.
  18:../Dave/Generated/CAPTURE/capture.c ****  *
  19:../Dave/Generated/CAPTURE/capture.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  20:../Dave/Generated/CAPTURE/capture.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  21:../Dave/Generated/CAPTURE/capture.c ****  *
  22:../Dave/Generated/CAPTURE/capture.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  23:../Dave/Generated/CAPTURE/capture.c ****  *   products derived from this software without specific prior written permission.
  24:../Dave/Generated/CAPTURE/capture.c ****  *
  25:../Dave/Generated/CAPTURE/capture.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Dave/Generated/CAPTURE/capture.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Dave/Generated/CAPTURE/capture.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Dave/Generated/CAPTURE/capture.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Dave/Generated/CAPTURE/capture.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Dave/Generated/CAPTURE/capture.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Dave/Generated/CAPTURE/capture.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  32:../Dave/Generated/CAPTURE/capture.c ****  *
  33:../Dave/Generated/CAPTURE/capture.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Dave/Generated/CAPTURE/capture.c ****  * with Infineon Technologies AG (dave@infineon.com).
  35:../Dave/Generated/CAPTURE/capture.c ****  **************************************************************************************************
  36:../Dave/Generated/CAPTURE/capture.c ****  *
  37:../Dave/Generated/CAPTURE/capture.c ****  * Change History
  38:../Dave/Generated/CAPTURE/capture.c ****  * --------------
  39:../Dave/Generated/CAPTURE/capture.c ****  *
  40:../Dave/Generated/CAPTURE/capture.c ****  * 2016-07-01:
  41:../Dave/Generated/CAPTURE/capture.c ****  *     - Initial version<br>
  42:../Dave/Generated/CAPTURE/capture.c ****  *
  43:../Dave/Generated/CAPTURE/capture.c ****  * @endcond
  44:../Dave/Generated/CAPTURE/capture.c ****  *
  45:../Dave/Generated/CAPTURE/capture.c ****  */
  46:../Dave/Generated/CAPTURE/capture.c **** 
  47:../Dave/Generated/CAPTURE/capture.c **** /**************************************************************************************************
  48:../Dave/Generated/CAPTURE/capture.c ****  * HEADER FILES
  49:../Dave/Generated/CAPTURE/capture.c ****  **************************************************************************************************
  50:../Dave/Generated/CAPTURE/capture.c **** #include "capture.h"
  51:../Dave/Generated/CAPTURE/capture.c **** 
  52:../Dave/Generated/CAPTURE/capture.c **** /**************************************************************************************************
  53:../Dave/Generated/CAPTURE/capture.c ****  * MACROS
  54:../Dave/Generated/CAPTURE/capture.c ****  **************************************************************************************************
  55:../Dave/Generated/CAPTURE/capture.c **** #define CAPTURE_PERIOD_16BIT_MAX         (0xFFFFU)  /* Maximum period value */
  56:../Dave/Generated/CAPTURE/capture.c **** 
  57:../Dave/Generated/CAPTURE/capture.c **** /**************************************************************************************************
  58:../Dave/Generated/CAPTURE/capture.c ****  * LOCAL DATA
  59:../Dave/Generated/CAPTURE/capture.c ****  **************************************************************************************************
  60:../Dave/Generated/CAPTURE/capture.c **** 
  61:../Dave/Generated/CAPTURE/capture.c **** /**************************************************************************************************
  62:../Dave/Generated/CAPTURE/capture.c ****  * LOCAL ROUTINES
  63:../Dave/Generated/CAPTURE/capture.c ****  **************************************************************************************************
  64:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
  65:../Dave/Generated/CAPTURE/capture.c **** static void CAPTURE_CCU4_lInit(const CAPTURE_t *const handler);
  66:../Dave/Generated/CAPTURE/capture.c **** static void CAPTURE_CCU4_lShadowTransfer(const CAPTURE_t *const handler);
  67:../Dave/Generated/CAPTURE/capture.c **** /* @brief Retrieves the latest captured timer value */
  68:../Dave/Generated/CAPTURE/capture.c **** static CAPTURE_STATUS_t CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(const XMC_CCU4_SLICE_t *co
  69:../Dave/Generated/CAPTURE/capture.c ****                                                                          const XMC_CCU4_SLICE_CAP_R
  70:../Dave/Generated/CAPTURE/capture.c ****                                                                          uint32_t *const val_ptr);
  71:../Dave/Generated/CAPTURE/capture.c **** #endif
  72:../Dave/Generated/CAPTURE/capture.c **** 
  73:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
  74:../Dave/Generated/CAPTURE/capture.c **** static void CAPTURE_CCU8_lInit(const CAPTURE_t *const handler);
  75:../Dave/Generated/CAPTURE/capture.c **** static void CAPTURE_CCU8_lShadowTransfer(const CAPTURE_t *const handler);
  76:../Dave/Generated/CAPTURE/capture.c **** /* @brief Retrieves the latest captured timer value */
  77:../Dave/Generated/CAPTURE/capture.c **** static CAPTURE_STATUS_t CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(const XMC_CCU8_SLICE_t *co
  78:../Dave/Generated/CAPTURE/capture.c ****                                                                          const XMC_CCU8_SLICE_CAP_R
  79:../Dave/Generated/CAPTURE/capture.c ****                                                                          uint32_t *const val_ptr);
  80:../Dave/Generated/CAPTURE/capture.c **** #endif
  81:../Dave/Generated/CAPTURE/capture.c **** 
  82:../Dave/Generated/CAPTURE/capture.c **** static void CAPTURE_lCalculateTimeTickFromTimerValue(const CAPTURE_t * const handler,
  83:../Dave/Generated/CAPTURE/capture.c ****                                                      uint32_t * const timer_val_ptr,
  84:../Dave/Generated/CAPTURE/capture.c ****                                                      bool is_increment);
  85:../Dave/Generated/CAPTURE/capture.c **** 
  86:../Dave/Generated/CAPTURE/capture.c **** static uint32_t CAPTURE_lCalculateTimeInNanoSecFromTimerTick(const CAPTURE_t * const handler,
  87:../Dave/Generated/CAPTURE/capture.c ****                                                              uint32_t timer_val);
  88:../Dave/Generated/CAPTURE/capture.c **** 
  89:../Dave/Generated/CAPTURE/capture.c ****  /*************************************************************************************************
  90:../Dave/Generated/CAPTURE/capture.c ****  * API IMPLEMENTATION
  91:../Dave/Generated/CAPTURE/capture.c ****  **************************************************************************************************
  92:../Dave/Generated/CAPTURE/capture.c ****  /* Returns the version of the capture APP. */
  93:../Dave/Generated/CAPTURE/capture.c **** DAVE_APP_VERSION_t CAPTURE_GetAppVersion(void)
  94:../Dave/Generated/CAPTURE/capture.c **** {
 311              	 .loc 2 94 0
 312              	 .cfi_startproc
 313 0000 80B5     	 push {r7,lr}
 314              	.LCFI24:
 315              	 .cfi_def_cfa_offset 8
 316              	 .cfi_offset 7,-8
 317              	 .cfi_offset 14,-4
 318 0002 82B0     	 sub sp,sp,#8
 319              	.LCFI25:
 320              	 .cfi_def_cfa_offset 16
 321 0004 00AF     	 add r7,sp,#0
 322              	.LCFI26:
 323              	 .cfi_def_cfa_register 7
  95:../Dave/Generated/CAPTURE/capture.c ****   DAVE_APP_VERSION_t version;
  96:../Dave/Generated/CAPTURE/capture.c **** 
  97:../Dave/Generated/CAPTURE/capture.c ****   version.major = CAPTURE_MAJOR_VERSION;
 324              	 .loc 2 97 0
 325 0006 3B1C     	 mov r3,r7
 326 0008 0422     	 mov r2,#4
 327 000a 1A70     	 strb r2,[r3]
  98:../Dave/Generated/CAPTURE/capture.c ****   version.minor = CAPTURE_MINOR_VERSION;
 328              	 .loc 2 98 0
 329 000c 3B1C     	 mov r3,r7
 330 000e 0022     	 mov r2,#0
 331 0010 5A70     	 strb r2,[r3,#1]
  99:../Dave/Generated/CAPTURE/capture.c ****   version.patch = CAPTURE_PATCH_VERSION;
 332              	 .loc 2 99 0
 333 0012 3B1C     	 mov r3,r7
 334 0014 0422     	 mov r2,#4
 335 0016 9A70     	 strb r2,[r3,#2]
 100:../Dave/Generated/CAPTURE/capture.c **** 
 101:../Dave/Generated/CAPTURE/capture.c ****   return version;
 336              	 .loc 2 101 0
 337 0018 3B1D     	 add r3,r7,#4
 338 001a 3A1C     	 mov r2,r7
 339 001c 1188     	 ldrh r1,[r2]
 340 001e 1980     	 strh r1,[r3]
 341 0020 9278     	 ldrb r2,[r2,#2]
 342 0022 9A70     	 strb r2,[r3,#2]
 343 0024 3A1D     	 add r2,r7,#4
 344 0026 0023     	 mov r3,#0
 345 0028 1178     	 ldrb r1,[r2]
 346 002a FF20     	 mov r0,#255
 347 002c 0140     	 and r1,r0
 348 002e FF20     	 mov r0,#255
 349 0030 8343     	 bic r3,r0
 350 0032 0B43     	 orr r3,r1
 351 0034 5178     	 ldrb r1,[r2,#1]
 352 0036 FF20     	 mov r0,#255
 353 0038 0140     	 and r1,r0
 354 003a 0902     	 lsl r1,r1,#8
 355 003c 0648     	 ldr r0,.L12
 356 003e 0340     	 and r3,r0
 357 0040 0B43     	 orr r3,r1
 358 0042 9278     	 ldrb r2,[r2,#2]
 359 0044 FF21     	 mov r1,#255
 360 0046 0A40     	 and r2,r1
 361 0048 1204     	 lsl r2,r2,#16
 362 004a 0449     	 ldr r1,.L12+4
 363 004c 0B40     	 and r3,r1
 364 004e 1343     	 orr r3,r2
 102:../Dave/Generated/CAPTURE/capture.c **** }
 365              	 .loc 2 102 0
 366 0050 181C     	 mov r0,r3
 367 0052 BD46     	 mov sp,r7
 368 0054 02B0     	 add sp,sp,#8
 369              	 
 370 0056 80BD     	 pop {r7,pc}
 371              	.L13:
 372              	 .align 2
 373              	.L12:
 374 0058 FF00FFFF 	 .word -65281
 375 005c FFFF00FF 	 .word -16711681
 376              	 .cfi_endproc
 377              	.LFE125:
 379              	 .section .text.CAPTURE_Init,"ax",%progbits
 380              	 .align 2
 381              	 .global CAPTURE_Init
 382              	 .code 16
 383              	 .thumb_func
 385              	CAPTURE_Init:
 386              	.LFB126:
 103:../Dave/Generated/CAPTURE/capture.c **** 
 104:../Dave/Generated/CAPTURE/capture.c **** /* This function initializes a capture APP based on user configuration. */
 105:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_Init(CAPTURE_t *const handler)
 106:../Dave/Generated/CAPTURE/capture.c **** {
 387              	 .loc 2 106 0
 388              	 .cfi_startproc
 389 0000 90B5     	 push {r4,r7,lr}
 390              	.LCFI27:
 391              	 .cfi_def_cfa_offset 12
 392              	 .cfi_offset 4,-12
 393              	 .cfi_offset 7,-8
 394              	 .cfi_offset 14,-4
 395 0002 85B0     	 sub sp,sp,#20
 396              	.LCFI28:
 397              	 .cfi_def_cfa_offset 32
 398 0004 00AF     	 add r7,sp,#0
 399              	.LCFI29:
 400              	 .cfi_def_cfa_register 7
 401 0006 7860     	 str r0,[r7,#4]
 107:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status;
 108:../Dave/Generated/CAPTURE/capture.c **** 
 109:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_Init:handler NULL", (handler != NULL));
 110:../Dave/Generated/CAPTURE/capture.c **** 
 111:../Dave/Generated/CAPTURE/capture.c ****   status = CAPTURE_STATUS_SUCCESS;
 402              	 .loc 2 111 0
 403 0008 0F23     	 mov r3,#15
 404 000a FB18     	 add r3,r7,r3
 405 000c 0022     	 mov r2,#0
 406 000e 1A70     	 strb r2,[r3]
 112:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 113:../Dave/Generated/CAPTURE/capture.c ****   if (false == handler->initialized)
 407              	 .loc 2 113 0
 408 0010 7B68     	 ldr r3,[r7,#4]
 409 0012 3122     	 mov r2,#49
 410 0014 9B5C     	 ldrb r3,[r3,r2]
 411 0016 0122     	 mov r2,#1
 412 0018 5340     	 eor r3,r2
 413 001a DBB2     	 uxtb r3,r3
 414 001c 002B     	 cmp r3,#0
 415 001e 38D0     	 beq .L15
 114:../Dave/Generated/CAPTURE/capture.c ****   {
 115:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 116:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 416              	 .loc 2 116 0
 417 0020 7B68     	 ldr r3,[r7,#4]
 418 0022 2D22     	 mov r2,#45
 419 0024 9B5C     	 ldrb r3,[r3,r2]
 420 0026 002B     	 cmp r3,#0
 421 0028 11D1     	 bne .L16
 117:../Dave/Generated/CAPTURE/capture.c ****     {
 118:../Dave/Generated/CAPTURE/capture.c ****       status = (CAPTURE_STATUS_t) GLOBAL_CCU4_Init (handler->global_ccu4_handler);
 422              	 .loc 2 118 0
 423 002a 7B68     	 ldr r3,[r7,#4]
 424 002c 5B69     	 ldr r3,[r3,#20]
 425 002e 0F22     	 mov r2,#15
 426 0030 BC18     	 add r4,r7,r2
 427 0032 181C     	 mov r0,r3
 428 0034 FFF7FEFF 	 bl GLOBAL_CCU4_Init
 429 0038 031C     	 mov r3,r0
 430 003a 2370     	 strb r3,[r4]
 119:../Dave/Generated/CAPTURE/capture.c ****       if (status == CAPTURE_STATUS_SUCCESS)
 431              	 .loc 2 119 0
 432 003c 0F23     	 mov r3,#15
 433 003e FB18     	 add r3,r7,r3
 434 0040 1B78     	 ldrb r3,[r3]
 435 0042 002B     	 cmp r3,#0
 436 0044 03D1     	 bne .L16
 120:../Dave/Generated/CAPTURE/capture.c ****       {
 121:../Dave/Generated/CAPTURE/capture.c ****         /* Configure CCU4 capture for the required time tick settings */
 122:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_CCU4_lInit (handler);
 437              	 .loc 2 122 0
 438 0046 7B68     	 ldr r3,[r7,#4]
 439 0048 181C     	 mov r0,r3
 440 004a FFF7FEFF 	 bl CAPTURE_CCU4_lInit
 441              	.L16:
 123:../Dave/Generated/CAPTURE/capture.c ****       }
 124:../Dave/Generated/CAPTURE/capture.c ****     }
 125:../Dave/Generated/CAPTURE/capture.c **** #endif
 126:../Dave/Generated/CAPTURE/capture.c **** 
 127:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 128:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 129:../Dave/Generated/CAPTURE/capture.c ****     {
 130:../Dave/Generated/CAPTURE/capture.c ****       status = (CAPTURE_STATUS_t) GLOBAL_CCU8_Init (handler->global_ccu8_handler);
 131:../Dave/Generated/CAPTURE/capture.c ****       if (status == CAPTURE_STATUS_SUCCESS)
 132:../Dave/Generated/CAPTURE/capture.c ****       {
 133:../Dave/Generated/CAPTURE/capture.c ****         /* Configure CCU8 capture for the required time tick settings */
 134:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_CCU8_lInit (handler);
 135:../Dave/Generated/CAPTURE/capture.c ****       }
 136:../Dave/Generated/CAPTURE/capture.c ****     }
 137:../Dave/Generated/CAPTURE/capture.c **** #endif
 138:../Dave/Generated/CAPTURE/capture.c **** 
 139:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_GPIO_USED
 140:../Dave/Generated/CAPTURE/capture.c ****     if (handler->input != NULL)
 442              	 .loc 2 140 0
 443 004e 7B68     	 ldr r3,[r7,#4]
 444 0050 5B6A     	 ldr r3,[r3,#36]
 445 0052 002B     	 cmp r3,#0
 446 0054 0CD0     	 beq .L17
 141:../Dave/Generated/CAPTURE/capture.c ****     {
 142:../Dave/Generated/CAPTURE/capture.c ****       XMC_GPIO_Init (handler->input->port, handler->input->pin, handler->input_pin_config);
 447              	 .loc 2 142 0
 448 0056 7B68     	 ldr r3,[r7,#4]
 449 0058 5B6A     	 ldr r3,[r3,#36]
 450 005a 1968     	 ldr r1,[r3]
 451 005c 7B68     	 ldr r3,[r7,#4]
 452 005e 5B6A     	 ldr r3,[r3,#36]
 453 0060 1A79     	 ldrb r2,[r3,#4]
 454 0062 7B68     	 ldr r3,[r7,#4]
 455 0064 9B6A     	 ldr r3,[r3,#40]
 456 0066 081C     	 mov r0,r1
 457 0068 111C     	 mov r1,r2
 458 006a 1A1C     	 mov r2,r3
 459 006c FFF7FEFF 	 bl XMC_GPIO_Init
 460              	.L17:
 143:../Dave/Generated/CAPTURE/capture.c ****     }
 144:../Dave/Generated/CAPTURE/capture.c **** #endif
 145:../Dave/Generated/CAPTURE/capture.c **** 
 146:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_INTERRUPT_ENABLED
 147:../Dave/Generated/CAPTURE/capture.c ****     if (handler->capture_event_enable == true)
 148:../Dave/Generated/CAPTURE/capture.c ****     {
 149:../Dave/Generated/CAPTURE/capture.c ****       /* Set priority of the Transmit interrupt */
 150:../Dave/Generated/CAPTURE/capture.c **** #if UC_FAMILY == XMC4
 151:../Dave/Generated/CAPTURE/capture.c ****       NVIC_SetPriority (handler->interrupt_node, NVIC_EncodePriority (NVIC_GetPriorityGrouping (),
 152:../Dave/Generated/CAPTURE/capture.c ****                                                                       handler->interrupt_priority,
 153:../Dave/Generated/CAPTURE/capture.c ****                                                                       handler->interrupt_sub_priori
 154:../Dave/Generated/CAPTURE/capture.c **** #else
 155:../Dave/Generated/CAPTURE/capture.c ****       NVIC_SetPriority(handler->interrupt_node, handler->interrupt_priority);
 156:../Dave/Generated/CAPTURE/capture.c **** #endif
 157:../Dave/Generated/CAPTURE/capture.c **** 
 158:../Dave/Generated/CAPTURE/capture.c **** #if UC_SERIES == XMC14
 159:../Dave/Generated/CAPTURE/capture.c ****       XMC_SCU_SetInterruptControl(handler->interrupt_node, handler->interrupt_request_source);
 160:../Dave/Generated/CAPTURE/capture.c **** #endif
 161:../Dave/Generated/CAPTURE/capture.c **** 
 162:../Dave/Generated/CAPTURE/capture.c ****     }
 163:../Dave/Generated/CAPTURE/capture.c **** #endif
 164:../Dave/Generated/CAPTURE/capture.c **** 
 165:../Dave/Generated/CAPTURE/capture.c ****     /* update the initialization flag as true for particular instance. */
 166:../Dave/Generated/CAPTURE/capture.c ****     handler->initialized = true;
 461              	 .loc 2 166 0
 462 0070 7B68     	 ldr r3,[r7,#4]
 463 0072 3122     	 mov r2,#49
 464 0074 0121     	 mov r1,#1
 465 0076 9954     	 strb r1,[r3,r2]
 167:../Dave/Generated/CAPTURE/capture.c **** 
 168:../Dave/Generated/CAPTURE/capture.c ****     /* Check whether the start of the timer is enabled during initialization or not */
 169:../Dave/Generated/CAPTURE/capture.c ****     if (handler->start_control == true)
 466              	 .loc 2 169 0
 467 0078 7B68     	 ldr r3,[r7,#4]
 468 007a 2F22     	 mov r2,#47
 469 007c 9B5C     	 ldrb r3,[r3,r2]
 470 007e 002B     	 cmp r3,#0
 471 0080 07D0     	 beq .L15
 170:../Dave/Generated/CAPTURE/capture.c ****     {
 171:../Dave/Generated/CAPTURE/capture.c ****       status = CAPTURE_Start(handler);
 472              	 .loc 2 171 0
 473 0082 0F23     	 mov r3,#15
 474 0084 FC18     	 add r4,r7,r3
 475 0086 7B68     	 ldr r3,[r7,#4]
 476 0088 181C     	 mov r0,r3
 477 008a FFF7FEFF 	 bl CAPTURE_Start
 478 008e 031C     	 mov r3,r0
 479 0090 2370     	 strb r3,[r4]
 480              	.L15:
 172:../Dave/Generated/CAPTURE/capture.c ****     }
 173:../Dave/Generated/CAPTURE/capture.c ****   }
 174:../Dave/Generated/CAPTURE/capture.c **** 
 175:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 481              	 .loc 2 175 0
 482 0092 0F23     	 mov r3,#15
 483 0094 FB18     	 add r3,r7,r3
 484 0096 1B78     	 ldrb r3,[r3]
 176:../Dave/Generated/CAPTURE/capture.c **** }
 485              	 .loc 2 176 0
 486 0098 181C     	 mov r0,r3
 487 009a BD46     	 mov sp,r7
 488 009c 05B0     	 add sp,sp,#20
 489              	 
 490 009e 90BD     	 pop {r4,r7,pc}
 491              	 .cfi_endproc
 492              	.LFE126:
 494              	 .section .text.CAPTURE_Start,"ax",%progbits
 495              	 .align 2
 496              	 .global CAPTURE_Start
 497              	 .code 16
 498              	 .thumb_func
 500              	CAPTURE_Start:
 501              	.LFB127:
 177:../Dave/Generated/CAPTURE/capture.c **** 
 178:../Dave/Generated/CAPTURE/capture.c **** /* This function starts the capture timer. */
 179:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_Start(const CAPTURE_t *const handler)
 180:../Dave/Generated/CAPTURE/capture.c **** {
 502              	 .loc 2 180 0
 503              	 .cfi_startproc
 504 0000 80B5     	 push {r7,lr}
 505              	.LCFI30:
 506              	 .cfi_def_cfa_offset 8
 507              	 .cfi_offset 7,-8
 508              	 .cfi_offset 14,-4
 509 0002 84B0     	 sub sp,sp,#16
 510              	.LCFI31:
 511              	 .cfi_def_cfa_offset 24
 512 0004 00AF     	 add r7,sp,#0
 513              	.LCFI32:
 514              	 .cfi_def_cfa_register 7
 515 0006 7860     	 str r0,[r7,#4]
 181:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status;
 182:../Dave/Generated/CAPTURE/capture.c **** 
 183:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_Start:handler NULL", (handler != NULL));
 184:../Dave/Generated/CAPTURE/capture.c **** 
 185:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 186:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 516              	 .loc 2 186 0
 517 0008 7B68     	 ldr r3,[r7,#4]
 518 000a 3122     	 mov r2,#49
 519 000c 9B5C     	 ldrb r3,[r3,r2]
 520 000e 002B     	 cmp r3,#0
 521 0010 20D0     	 beq .L20
 187:../Dave/Generated/CAPTURE/capture.c ****   {
 188:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 189:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 522              	 .loc 2 189 0
 523 0012 7B68     	 ldr r3,[r7,#4]
 524 0014 2D22     	 mov r2,#45
 525 0016 9B5C     	 ldrb r3,[r3,r2]
 526 0018 002B     	 cmp r3,#0
 527 001a 16D1     	 bne .L21
 190:../Dave/Generated/CAPTURE/capture.c ****     {
 191:../Dave/Generated/CAPTURE/capture.c ****       (void)handler->ccu4_slice_ptr->CV[0];
 528              	 .loc 2 191 0
 529 001c 7B68     	 ldr r3,[r7,#4]
 530 001e 9B69     	 ldr r3,[r3,#24]
 531 0020 5B6F     	 ldr r3,[r3,#116]
 192:../Dave/Generated/CAPTURE/capture.c ****       (void)handler->ccu4_slice_ptr->CV[1];
 532              	 .loc 2 192 0
 533 0022 7B68     	 ldr r3,[r7,#4]
 534 0024 9B69     	 ldr r3,[r3,#24]
 535 0026 9B6F     	 ldr r3,[r3,#120]
 193:../Dave/Generated/CAPTURE/capture.c ****       (void)handler->ccu4_slice_ptr->CV[2];
 536              	 .loc 2 193 0
 537 0028 7B68     	 ldr r3,[r7,#4]
 538 002a 9B69     	 ldr r3,[r3,#24]
 539 002c DB6F     	 ldr r3,[r3,#124]
 194:../Dave/Generated/CAPTURE/capture.c ****       (void)handler->ccu4_slice_ptr->CV[3];
 540              	 .loc 2 194 0
 541 002e 7B68     	 ldr r3,[r7,#4]
 542 0030 9B69     	 ldr r3,[r3,#24]
 543 0032 8022     	 mov r2,#128
 544 0034 9B58     	 ldr r3,[r3,r2]
 195:../Dave/Generated/CAPTURE/capture.c **** 
 196:../Dave/Generated/CAPTURE/capture.c ****       /* Start the capture manually */
 197:../Dave/Generated/CAPTURE/capture.c ****       XMC_CCU4_SLICE_ClearTimer (handler->ccu4_slice_ptr);
 545              	 .loc 2 197 0
 546 0036 7B68     	 ldr r3,[r7,#4]
 547 0038 9B69     	 ldr r3,[r3,#24]
 548 003a 181C     	 mov r0,r3
 549 003c FFF7FEFF 	 bl XMC_CCU4_SLICE_ClearTimer
 198:../Dave/Generated/CAPTURE/capture.c ****       /* Start the capture manually */
 199:../Dave/Generated/CAPTURE/capture.c ****       XMC_CCU4_SLICE_StartTimer (handler->ccu4_slice_ptr);
 550              	 .loc 2 199 0
 551 0040 7B68     	 ldr r3,[r7,#4]
 552 0042 9B69     	 ldr r3,[r3,#24]
 553 0044 181C     	 mov r0,r3
 554 0046 FFF7FEFF 	 bl XMC_CCU4_SLICE_StartTimer
 555              	.L21:
 200:../Dave/Generated/CAPTURE/capture.c ****     }
 201:../Dave/Generated/CAPTURE/capture.c **** #endif
 202:../Dave/Generated/CAPTURE/capture.c **** 
 203:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 204:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 205:../Dave/Generated/CAPTURE/capture.c ****     {
 206:../Dave/Generated/CAPTURE/capture.c ****       (void)handler->ccu8_slice_ptr->CV[0];
 207:../Dave/Generated/CAPTURE/capture.c ****       (void)handler->ccu8_slice_ptr->CV[1];
 208:../Dave/Generated/CAPTURE/capture.c ****       (void)handler->ccu8_slice_ptr->CV[2];
 209:../Dave/Generated/CAPTURE/capture.c ****       (void)handler->ccu8_slice_ptr->CV[3];
 210:../Dave/Generated/CAPTURE/capture.c ****       /* Start the capture manually */
 211:../Dave/Generated/CAPTURE/capture.c ****       XMC_CCU8_SLICE_ClearTimer (handler->ccu8_slice_ptr);
 212:../Dave/Generated/CAPTURE/capture.c ****       /* Start the capture manually */
 213:../Dave/Generated/CAPTURE/capture.c ****       XMC_CCU8_SLICE_StartTimer (handler->ccu8_slice_ptr);
 214:../Dave/Generated/CAPTURE/capture.c ****     }
 215:../Dave/Generated/CAPTURE/capture.c **** #endif
 216:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_SUCCESS;
 556              	 .loc 2 216 0
 557 004a 0F23     	 mov r3,#15
 558 004c FB18     	 add r3,r7,r3
 559 004e 0022     	 mov r2,#0
 560 0050 1A70     	 strb r2,[r3]
 561 0052 03E0     	 b .L22
 562              	.L20:
 217:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_INTERRUPT_ENABLED
 218:../Dave/Generated/CAPTURE/capture.c ****     if (handler->capture_event_enable == true)
 219:../Dave/Generated/CAPTURE/capture.c ****     {
 220:../Dave/Generated/CAPTURE/capture.c ****       NVIC_EnableIRQ (handler->interrupt_node);
 221:../Dave/Generated/CAPTURE/capture.c ****     }
 222:../Dave/Generated/CAPTURE/capture.c **** #endif
 223:../Dave/Generated/CAPTURE/capture.c ****   }
 224:../Dave/Generated/CAPTURE/capture.c ****   else
 225:../Dave/Generated/CAPTURE/capture.c ****   {
 226:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_FAILURE;
 563              	 .loc 2 226 0
 564 0054 0F23     	 mov r3,#15
 565 0056 FB18     	 add r3,r7,r3
 566 0058 0122     	 mov r2,#1
 567 005a 1A70     	 strb r2,[r3]
 568              	.L22:
 227:../Dave/Generated/CAPTURE/capture.c ****   }
 228:../Dave/Generated/CAPTURE/capture.c **** 
 229:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 569              	 .loc 2 229 0
 570 005c 0F23     	 mov r3,#15
 571 005e FB18     	 add r3,r7,r3
 572 0060 1B78     	 ldrb r3,[r3]
 230:../Dave/Generated/CAPTURE/capture.c **** }
 573              	 .loc 2 230 0
 574 0062 181C     	 mov r0,r3
 575 0064 BD46     	 mov sp,r7
 576 0066 04B0     	 add sp,sp,#16
 577              	 
 578 0068 80BD     	 pop {r7,pc}
 579              	 .cfi_endproc
 580              	.LFE127:
 582 006a C046     	 .section .text.CAPTURE_Stop,"ax",%progbits
 583              	 .align 2
 584              	 .global CAPTURE_Stop
 585              	 .code 16
 586              	 .thumb_func
 588              	CAPTURE_Stop:
 589              	.LFB128:
 231:../Dave/Generated/CAPTURE/capture.c **** 
 232:../Dave/Generated/CAPTURE/capture.c **** /* This function stops the capture timer. */
 233:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_Stop(const CAPTURE_t *const handler)
 234:../Dave/Generated/CAPTURE/capture.c **** {
 590              	 .loc 2 234 0
 591              	 .cfi_startproc
 592 0000 80B5     	 push {r7,lr}
 593              	.LCFI33:
 594              	 .cfi_def_cfa_offset 8
 595              	 .cfi_offset 7,-8
 596              	 .cfi_offset 14,-4
 597 0002 84B0     	 sub sp,sp,#16
 598              	.LCFI34:
 599              	 .cfi_def_cfa_offset 24
 600 0004 00AF     	 add r7,sp,#0
 601              	.LCFI35:
 602              	 .cfi_def_cfa_register 7
 603 0006 7860     	 str r0,[r7,#4]
 235:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status;
 236:../Dave/Generated/CAPTURE/capture.c **** 
 237:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_Stop:handler NULL", (handler != NULL));
 238:../Dave/Generated/CAPTURE/capture.c **** 
 239:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 240:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 604              	 .loc 2 240 0
 605 0008 7B68     	 ldr r3,[r7,#4]
 606 000a 3122     	 mov r2,#49
 607 000c 9B5C     	 ldrb r3,[r3,r2]
 608 000e 002B     	 cmp r3,#0
 609 0010 0ED0     	 beq .L25
 241:../Dave/Generated/CAPTURE/capture.c ****   {
 242:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 243:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 610              	 .loc 2 243 0
 611 0012 7B68     	 ldr r3,[r7,#4]
 612 0014 2D22     	 mov r2,#45
 613 0016 9B5C     	 ldrb r3,[r3,r2]
 614 0018 002B     	 cmp r3,#0
 615 001a 04D1     	 bne .L26
 244:../Dave/Generated/CAPTURE/capture.c ****     {
 245:../Dave/Generated/CAPTURE/capture.c ****       XMC_CCU4_SLICE_StopTimer (handler->ccu4_slice_ptr);
 616              	 .loc 2 245 0
 617 001c 7B68     	 ldr r3,[r7,#4]
 618 001e 9B69     	 ldr r3,[r3,#24]
 619 0020 181C     	 mov r0,r3
 620 0022 FFF7FEFF 	 bl XMC_CCU4_SLICE_StopTimer
 621              	.L26:
 246:../Dave/Generated/CAPTURE/capture.c ****     }
 247:../Dave/Generated/CAPTURE/capture.c **** #endif
 248:../Dave/Generated/CAPTURE/capture.c **** 
 249:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 250:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 251:../Dave/Generated/CAPTURE/capture.c ****     {
 252:../Dave/Generated/CAPTURE/capture.c ****       XMC_CCU8_SLICE_StopTimer (handler->ccu8_slice_ptr);
 253:../Dave/Generated/CAPTURE/capture.c ****     }
 254:../Dave/Generated/CAPTURE/capture.c **** #endif
 255:../Dave/Generated/CAPTURE/capture.c **** 
 256:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_INTERRUPT_ENABLED
 257:../Dave/Generated/CAPTURE/capture.c ****     if (handler->capture_event_enable == true)
 258:../Dave/Generated/CAPTURE/capture.c ****     {
 259:../Dave/Generated/CAPTURE/capture.c ****       NVIC_DisableIRQ (handler->interrupt_node);
 260:../Dave/Generated/CAPTURE/capture.c ****     }
 261:../Dave/Generated/CAPTURE/capture.c **** #endif
 262:../Dave/Generated/CAPTURE/capture.c **** 
 263:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_SUCCESS;
 622              	 .loc 2 263 0
 623 0026 0F23     	 mov r3,#15
 624 0028 FB18     	 add r3,r7,r3
 625 002a 0022     	 mov r2,#0
 626 002c 1A70     	 strb r2,[r3]
 627 002e 03E0     	 b .L27
 628              	.L25:
 264:../Dave/Generated/CAPTURE/capture.c ****   }
 265:../Dave/Generated/CAPTURE/capture.c ****   else
 266:../Dave/Generated/CAPTURE/capture.c ****   {
 267:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_FAILURE;
 629              	 .loc 2 267 0
 630 0030 0F23     	 mov r3,#15
 631 0032 FB18     	 add r3,r7,r3
 632 0034 0122     	 mov r2,#1
 633 0036 1A70     	 strb r2,[r3]
 634              	.L27:
 268:../Dave/Generated/CAPTURE/capture.c ****   }
 269:../Dave/Generated/CAPTURE/capture.c **** 
 270:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 635              	 .loc 2 270 0
 636 0038 0F23     	 mov r3,#15
 637 003a FB18     	 add r3,r7,r3
 638 003c 1B78     	 ldrb r3,[r3]
 271:../Dave/Generated/CAPTURE/capture.c **** }
 639              	 .loc 2 271 0
 640 003e 181C     	 mov r0,r3
 641 0040 BD46     	 mov sp,r7
 642 0042 04B0     	 add sp,sp,#16
 643              	 
 644 0044 80BD     	 pop {r7,pc}
 645              	 .cfi_endproc
 646              	.LFE128:
 648 0046 C046     	 .section .text.CAPTURE_GetTimerStatus,"ax",%progbits
 649              	 .align 2
 650              	 .global CAPTURE_GetTimerStatus
 651              	 .code 16
 652              	 .thumb_func
 654              	CAPTURE_GetTimerStatus:
 655              	.LFB129:
 272:../Dave/Generated/CAPTURE/capture.c **** 
 273:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_TIMER_STATUS_t CAPTURE_GetTimerStatus(const CAPTURE_t *const handler)
 274:../Dave/Generated/CAPTURE/capture.c **** {
 656              	 .loc 2 274 0
 657              	 .cfi_startproc
 658 0000 80B5     	 push {r7,lr}
 659              	.LCFI36:
 660              	 .cfi_def_cfa_offset 8
 661              	 .cfi_offset 7,-8
 662              	 .cfi_offset 14,-4
 663 0002 84B0     	 sub sp,sp,#16
 664              	.LCFI37:
 665              	 .cfi_def_cfa_offset 24
 666 0004 00AF     	 add r7,sp,#0
 667              	.LCFI38:
 668              	 .cfi_def_cfa_register 7
 669 0006 7860     	 str r0,[r7,#4]
 275:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_TIMER_STATUS_t status = CAPTURE_TIMER_STATUS_IDLE;
 670              	 .loc 2 275 0
 671 0008 0F23     	 mov r3,#15
 672 000a FB18     	 add r3,r7,r3
 673 000c 0122     	 mov r2,#1
 674 000e 1A70     	 strb r2,[r3]
 276:../Dave/Generated/CAPTURE/capture.c **** 
 277:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetTimerStatus:handler NULL", (handler != NULL));
 278:../Dave/Generated/CAPTURE/capture.c **** 
 279:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 675              	 .loc 2 279 0
 676 0010 7B68     	 ldr r3,[r7,#4]
 677 0012 3122     	 mov r2,#49
 678 0014 9B5C     	 ldrb r3,[r3,r2]
 679 0016 002B     	 cmp r3,#0
 680 0018 10D0     	 beq .L30
 280:../Dave/Generated/CAPTURE/capture.c ****   {
 281:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 282:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 681              	 .loc 2 282 0
 682 001a 7B68     	 ldr r3,[r7,#4]
 683 001c 2D22     	 mov r2,#45
 684 001e 9B5C     	 ldrb r3,[r3,r2]
 685 0020 002B     	 cmp r3,#0
 686 0022 0FD1     	 bne .L32
 283:../Dave/Generated/CAPTURE/capture.c ****     {
 284:../Dave/Generated/CAPTURE/capture.c ****       if (XMC_CCU4_SLICE_IsTimerRunning (handler->ccu4_slice_ptr))
 687              	 .loc 2 284 0
 688 0024 7B68     	 ldr r3,[r7,#4]
 689 0026 9B69     	 ldr r3,[r3,#24]
 690 0028 181C     	 mov r0,r3
 691 002a FFF7FEFF 	 bl XMC_CCU4_SLICE_IsTimerRunning
 692 002e 031E     	 sub r3,r0,#0
 693 0030 08D0     	 beq .L32
 285:../Dave/Generated/CAPTURE/capture.c ****       {
 286:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_TIMER_STATUS_RUNNING;
 694              	 .loc 2 286 0
 695 0032 0F23     	 mov r3,#15
 696 0034 FB18     	 add r3,r7,r3
 697 0036 0222     	 mov r2,#2
 698 0038 1A70     	 strb r2,[r3]
 699 003a 03E0     	 b .L32
 700              	.L30:
 287:../Dave/Generated/CAPTURE/capture.c ****       }
 288:../Dave/Generated/CAPTURE/capture.c ****     }
 289:../Dave/Generated/CAPTURE/capture.c **** #endif
 290:../Dave/Generated/CAPTURE/capture.c **** 
 291:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 292:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 293:../Dave/Generated/CAPTURE/capture.c ****     {
 294:../Dave/Generated/CAPTURE/capture.c ****       if (XMC_CCU8_SLICE_IsTimerRunning (handler->ccu8_slice_ptr))
 295:../Dave/Generated/CAPTURE/capture.c ****       {
 296:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_TIMER_STATUS_RUNNING;
 297:../Dave/Generated/CAPTURE/capture.c ****       }
 298:../Dave/Generated/CAPTURE/capture.c ****     }
 299:../Dave/Generated/CAPTURE/capture.c **** #endif
 300:../Dave/Generated/CAPTURE/capture.c ****   }
 301:../Dave/Generated/CAPTURE/capture.c ****   else
 302:../Dave/Generated/CAPTURE/capture.c ****   {
 303:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_TIMER_STATUS_NOT_INITIALISED;
 701              	 .loc 2 303 0
 702 003c 0F23     	 mov r3,#15
 703 003e FB18     	 add r3,r7,r3
 704 0040 0022     	 mov r2,#0
 705 0042 1A70     	 strb r2,[r3]
 706              	.L32:
 304:../Dave/Generated/CAPTURE/capture.c ****   }
 305:../Dave/Generated/CAPTURE/capture.c **** 
 306:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 707              	 .loc 2 306 0
 708 0044 0F23     	 mov r3,#15
 709 0046 FB18     	 add r3,r7,r3
 710 0048 1B78     	 ldrb r3,[r3]
 307:../Dave/Generated/CAPTURE/capture.c **** }
 711              	 .loc 2 307 0
 712 004a 181C     	 mov r0,r3
 713 004c BD46     	 mov sp,r7
 714 004e 04B0     	 add sp,sp,#16
 715              	 
 716 0050 80BD     	 pop {r7,pc}
 717              	 .cfi_endproc
 718              	.LFE129:
 720 0052 C046     	 .section .text.CAPTURE_GetCapturedTime,"ax",%progbits
 721              	 .align 2
 722              	 .global CAPTURE_GetCapturedTime
 723              	 .code 16
 724              	 .thumb_func
 726              	CAPTURE_GetCapturedTime:
 727              	.LFB130:
 308:../Dave/Generated/CAPTURE/capture.c **** 
 309:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_GetCapturedTime(const CAPTURE_t *const handler, uint32_t *const captured_t
 310:../Dave/Generated/CAPTURE/capture.c **** {
 728              	 .loc 2 310 0
 729              	 .cfi_startproc
 730 0000 90B5     	 push {r4,r7,lr}
 731              	.LCFI39:
 732              	 .cfi_def_cfa_offset 12
 733              	 .cfi_offset 4,-12
 734              	 .cfi_offset 7,-8
 735              	 .cfi_offset 14,-4
 736 0002 87B0     	 sub sp,sp,#28
 737              	.LCFI40:
 738              	 .cfi_def_cfa_offset 40
 739 0004 00AF     	 add r7,sp,#0
 740              	.LCFI41:
 741              	 .cfi_def_cfa_register 7
 742 0006 7860     	 str r0,[r7,#4]
 743 0008 3960     	 str r1,[r7]
 311:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
 744              	 .loc 2 311 0
 745 000a 1723     	 mov r3,#23
 746 000c FB18     	 add r3,r7,r3
 747 000e 0022     	 mov r2,#0
 748 0010 1A70     	 strb r2,[r3]
 312:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
 749              	 .loc 2 312 0
 750 0012 1623     	 mov r3,#22
 751 0014 FB18     	 add r3,r7,r3
 752 0016 0022     	 mov r2,#0
 753 0018 1A70     	 strb r2,[r3]
 313:../Dave/Generated/CAPTURE/capture.c **** 
 314:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetCapturedTime:handler NULL", (handler != NULL));
 315:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetCapturedTime:NULL data pointer", (captured_time != NULL));
 316:../Dave/Generated/CAPTURE/capture.c **** 
 317:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 318:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 754              	 .loc 2 318 0
 755 001a 7B68     	 ldr r3,[r7,#4]
 756 001c 3122     	 mov r2,#49
 757 001e 9B5C     	 ldrb r3,[r3,r2]
 758 0020 002B     	 cmp r3,#0
 759 0022 61D0     	 beq .L35
 319:../Dave/Generated/CAPTURE/capture.c ****   {
 320:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 321:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 760              	 .loc 2 321 0
 761 0024 7B68     	 ldr r3,[r7,#4]
 762 0026 2D22     	 mov r2,#45
 763 0028 9B5C     	 ldrb r3,[r3,r2]
 764 002a 002B     	 cmp r3,#0
 765 002c 60D1     	 bne .L40
 322:../Dave/Generated/CAPTURE/capture.c ****     {
 323:../Dave/Generated/CAPTURE/capture.c ****       if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 766              	 .loc 2 323 0
 767 002e 7B68     	 ldr r3,[r7,#4]
 768 0030 2E22     	 mov r2,#46
 769 0032 9B5C     	 ldrb r3,[r3,r2]
 770 0034 002B     	 cmp r3,#0
 771 0036 04D0     	 beq .L37
 324:../Dave/Generated/CAPTURE/capture.c ****           (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 772              	 .loc 2 324 0 discriminator 1
 773 0038 7B68     	 ldr r3,[r7,#4]
 774 003a 2E22     	 mov r2,#46
 775 003c 9B5C     	 ldrb r3,[r3,r2]
 323:../Dave/Generated/CAPTURE/capture.c ****           (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 776              	 .loc 2 323 0 discriminator 1
 777 003e 032B     	 cmp r3,#3
 778 0040 3DD1     	 bne .L38
 779              	.L37:
 780              	.LBB10:
 325:../Dave/Generated/CAPTURE/capture.c ****       {
 326:../Dave/Generated/CAPTURE/capture.c ****         uint32_t captured_time_low_reg = 0U;
 781              	 .loc 2 326 0
 782 0042 0023     	 mov r3,#0
 783 0044 3B61     	 str r3,[r7,#16]
 327:../Dave/Generated/CAPTURE/capture.c ****         uint32_t captured_time_high_reg = 0U;
 784              	 .loc 2 327 0
 785 0046 0023     	 mov r3,#0
 786 0048 FB60     	 str r3,[r7,#12]
 328:../Dave/Generated/CAPTURE/capture.c **** 
 329:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 787              	 .loc 2 329 0
 788 004a 7B68     	 ldr r3,[r7,#4]
 789 004c 9A69     	 ldr r2,[r3,#24]
 790 004e 1723     	 mov r3,#23
 791 0050 FC18     	 add r4,r7,r3
 792 0052 1023     	 mov r3,#16
 793 0054 FB18     	 add r3,r7,r3
 794 0056 101C     	 mov r0,r2
 795 0058 0021     	 mov r1,#0
 796 005a 1A1C     	 mov r2,r3
 797 005c FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 798 0060 031C     	 mov r3,r0
 799 0062 2370     	 strb r3,[r4]
 330:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU4_SLICE_CAP_REG_SET_LOW,
 331:../Dave/Generated/CAPTURE/capture.c ****                                                                   &captured_time_low_reg);
 332:../Dave/Generated/CAPTURE/capture.c **** 
 333:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 800              	 .loc 2 333 0
 801 0064 7B68     	 ldr r3,[r7,#4]
 802 0066 9A69     	 ldr r2,[r3,#24]
 803 0068 1623     	 mov r3,#22
 804 006a FC18     	 add r4,r7,r3
 805 006c 0C23     	 mov r3,#12
 806 006e FB18     	 add r3,r7,r3
 807 0070 101C     	 mov r0,r2
 808 0072 0121     	 mov r1,#1
 809 0074 1A1C     	 mov r2,r3
 810 0076 FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 811 007a 031C     	 mov r3,r0
 812 007c 2370     	 strb r3,[r4]
 334:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
 335:../Dave/Generated/CAPTURE/capture.c ****                                                                    &captured_time_high_reg);
 336:../Dave/Generated/CAPTURE/capture.c **** 
 337:../Dave/Generated/CAPTURE/capture.c ****         /*calculate time tick from capture value and pre-scale value of captured register**/
 338:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_low_reg, true);
 813              	 .loc 2 338 0
 814 007e 7A68     	 ldr r2,[r7,#4]
 815 0080 1023     	 mov r3,#16
 816 0082 FB18     	 add r3,r7,r3
 817 0084 101C     	 mov r0,r2
 818 0086 191C     	 mov r1,r3
 819 0088 0122     	 mov r2,#1
 820 008a FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 339:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time tick from capture value and pre-scale value of captured register**/
 340:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_high_reg, false);
 821              	 .loc 2 340 0
 822 008e 7A68     	 ldr r2,[r7,#4]
 823 0090 0C23     	 mov r3,#12
 824 0092 FB18     	 add r3,r7,r3
 825 0094 101C     	 mov r0,r2
 826 0096 191C     	 mov r1,r3
 827 0098 0022     	 mov r2,#0
 828 009a FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 341:../Dave/Generated/CAPTURE/capture.c ****         /* add both high and lower register value*/
 342:../Dave/Generated/CAPTURE/capture.c ****         *captured_time = captured_time_low_reg + captured_time_high_reg;
 829              	 .loc 2 342 0
 830 009e 3A69     	 ldr r2,[r7,#16]
 831 00a0 FB68     	 ldr r3,[r7,#12]
 832 00a2 D218     	 add r2,r2,r3
 833 00a4 3B68     	 ldr r3,[r7]
 834 00a6 1A60     	 str r2,[r3]
 343:../Dave/Generated/CAPTURE/capture.c **** 
 344:../Dave/Generated/CAPTURE/capture.c ****         if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
 835              	 .loc 2 344 0
 836 00a8 1623     	 mov r3,#22
 837 00aa FB18     	 add r3,r7,r3
 838 00ac 1B78     	 ldrb r3,[r3]
 839 00ae 022B     	 cmp r3,#2
 840 00b0 04D1     	 bne .L39
 345:../Dave/Generated/CAPTURE/capture.c ****         {
 346:../Dave/Generated/CAPTURE/capture.c ****           status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 841              	 .loc 2 346 0
 842 00b2 1723     	 mov r3,#23
 843 00b4 FB18     	 add r3,r7,r3
 844 00b6 0222     	 mov r2,#2
 845 00b8 1A70     	 strb r2,[r3]
 846              	.LBE10:
 325:../Dave/Generated/CAPTURE/capture.c ****         uint32_t captured_time_low_reg = 0U;
 847              	 .loc 2 325 0
 848 00ba 14E0     	 b .L36
 849              	.L39:
 850 00bc 13E0     	 b .L36
 851              	.L38:
 347:../Dave/Generated/CAPTURE/capture.c ****         }
 348:../Dave/Generated/CAPTURE/capture.c ****       }
 349:../Dave/Generated/CAPTURE/capture.c ****       else
 350:../Dave/Generated/CAPTURE/capture.c ****       {
 351:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 852              	 .loc 2 351 0
 853 00be 7B68     	 ldr r3,[r7,#4]
 854 00c0 9A69     	 ldr r2,[r3,#24]
 855 00c2 1723     	 mov r3,#23
 856 00c4 FC18     	 add r4,r7,r3
 857 00c6 3B68     	 ldr r3,[r7]
 858 00c8 101C     	 mov r0,r2
 859 00ca 0121     	 mov r1,#1
 860 00cc 1A1C     	 mov r2,r3
 861 00ce FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 862 00d2 031C     	 mov r3,r0
 863 00d4 2370     	 strb r3,[r4]
 352:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
 353:../Dave/Generated/CAPTURE/capture.c ****                                                                   captured_time);
 354:../Dave/Generated/CAPTURE/capture.c **** 
 355:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time tick from capture value and pre-scale value of captured register**/
 356:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, captured_time, false);
 864              	 .loc 2 356 0
 865 00d6 7A68     	 ldr r2,[r7,#4]
 866 00d8 3B68     	 ldr r3,[r7]
 867 00da 101C     	 mov r0,r2
 868 00dc 191C     	 mov r1,r3
 869 00de 0022     	 mov r2,#0
 870 00e0 FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 871 00e4 04E0     	 b .L40
 872              	.L36:
 873 00e6 03E0     	 b .L40
 874              	.L35:
 357:../Dave/Generated/CAPTURE/capture.c ****       }
 358:../Dave/Generated/CAPTURE/capture.c ****     }
 359:../Dave/Generated/CAPTURE/capture.c **** #endif
 360:../Dave/Generated/CAPTURE/capture.c **** 
 361:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 362:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 363:../Dave/Generated/CAPTURE/capture.c ****     {
 364:../Dave/Generated/CAPTURE/capture.c ****       if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 365:../Dave/Generated/CAPTURE/capture.c ****           (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 366:../Dave/Generated/CAPTURE/capture.c ****       {
 367:../Dave/Generated/CAPTURE/capture.c ****         uint32_t captured_time_low_reg = 0U;
 368:../Dave/Generated/CAPTURE/capture.c ****         uint32_t captured_time_high_reg = 0U;
 369:../Dave/Generated/CAPTURE/capture.c **** 
 370:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 371:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU8_SLICE_CAP_REG_SET_LOW,
 372:../Dave/Generated/CAPTURE/capture.c ****                                                                   &captured_time_low_reg);
 373:../Dave/Generated/CAPTURE/capture.c **** 
 374:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 375:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU8_SLICE_CAP_REG_SET_HIGH,
 376:../Dave/Generated/CAPTURE/capture.c ****                                                                    &captured_time_high_reg);
 377:../Dave/Generated/CAPTURE/capture.c **** 
 378:../Dave/Generated/CAPTURE/capture.c ****         /*calculate time tick from capture value and pre-scale value of captured register**/
 379:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_low_reg, true);
 380:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time tick from capture value and pre-scale value of captured register**/
 381:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_high_reg, false);
 382:../Dave/Generated/CAPTURE/capture.c ****         /* add both high and lower register value*/
 383:../Dave/Generated/CAPTURE/capture.c ****         *captured_time = captured_time_low_reg + captured_time_high_reg;
 384:../Dave/Generated/CAPTURE/capture.c **** 
 385:../Dave/Generated/CAPTURE/capture.c ****         if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
 386:../Dave/Generated/CAPTURE/capture.c ****         {
 387:../Dave/Generated/CAPTURE/capture.c ****           status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 388:../Dave/Generated/CAPTURE/capture.c ****         }
 389:../Dave/Generated/CAPTURE/capture.c ****       }
 390:../Dave/Generated/CAPTURE/capture.c ****       else
 391:../Dave/Generated/CAPTURE/capture.c ****       {
 392:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 393:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU8_SLICE_CAP_REG_SET_HIGH,
 394:../Dave/Generated/CAPTURE/capture.c ****                                                                   captured_time);
 395:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time tick from capture value and pre-scale value of captured register**/
 396:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, captured_time, false);
 397:../Dave/Generated/CAPTURE/capture.c ****       }
 398:../Dave/Generated/CAPTURE/capture.c ****     }
 399:../Dave/Generated/CAPTURE/capture.c **** #endif
 400:../Dave/Generated/CAPTURE/capture.c ****   }
 401:../Dave/Generated/CAPTURE/capture.c ****   else
 402:../Dave/Generated/CAPTURE/capture.c ****   {
 403:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_FAILURE;
 875              	 .loc 2 403 0
 876 00e8 1723     	 mov r3,#23
 877 00ea FB18     	 add r3,r7,r3
 878 00ec 0122     	 mov r2,#1
 879 00ee 1A70     	 strb r2,[r3]
 880              	.L40:
 404:../Dave/Generated/CAPTURE/capture.c ****   }
 405:../Dave/Generated/CAPTURE/capture.c **** 
 406:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 881              	 .loc 2 406 0
 882 00f0 1723     	 mov r3,#23
 883 00f2 FB18     	 add r3,r7,r3
 884 00f4 1B78     	 ldrb r3,[r3]
 407:../Dave/Generated/CAPTURE/capture.c **** }
 885              	 .loc 2 407 0
 886 00f6 181C     	 mov r0,r3
 887 00f8 BD46     	 mov sp,r7
 888 00fa 07B0     	 add sp,sp,#28
 889              	 
 890 00fc 90BD     	 pop {r4,r7,pc}
 891              	 .cfi_endproc
 892              	.LFE130:
 894 00fe C046     	 .section .text.CAPTURE_GetCapturedTimeInNanoSec,"ax",%progbits
 895              	 .align 2
 896              	 .global CAPTURE_GetCapturedTimeInNanoSec
 897              	 .code 16
 898              	 .thumb_func
 900              	CAPTURE_GetCapturedTimeInNanoSec:
 901              	.LFB131:
 408:../Dave/Generated/CAPTURE/capture.c **** 
 409:../Dave/Generated/CAPTURE/capture.c **** 
 410:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_GetCapturedTimeInNanoSec(const CAPTURE_t *const handler, uint32_t *const c
 411:../Dave/Generated/CAPTURE/capture.c **** {
 902              	 .loc 2 411 0
 903              	 .cfi_startproc
 904 0000 90B5     	 push {r4,r7,lr}
 905              	.LCFI42:
 906              	 .cfi_def_cfa_offset 12
 907              	 .cfi_offset 4,-12
 908              	 .cfi_offset 7,-8
 909              	 .cfi_offset 14,-4
 910 0002 87B0     	 sub sp,sp,#28
 911              	.LCFI43:
 912              	 .cfi_def_cfa_offset 40
 913 0004 00AF     	 add r7,sp,#0
 914              	.LCFI44:
 915              	 .cfi_def_cfa_register 7
 916 0006 7860     	 str r0,[r7,#4]
 917 0008 3960     	 str r1,[r7]
 412:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
 918              	 .loc 2 412 0
 919 000a 1723     	 mov r3,#23
 920 000c FB18     	 add r3,r7,r3
 921 000e 0022     	 mov r2,#0
 922 0010 1A70     	 strb r2,[r3]
 413:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
 923              	 .loc 2 413 0
 924 0012 1623     	 mov r3,#22
 925 0014 FB18     	 add r3,r7,r3
 926 0016 0022     	 mov r2,#0
 927 0018 1A70     	 strb r2,[r3]
 414:../Dave/Generated/CAPTURE/capture.c **** 
 415:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetCapturedTimeInNanoSec:handler NULL", (handler != NULL));
 416:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetCapturedTimeInNanoSec:NULL data pointer", (captured_time != NULL));
 417:../Dave/Generated/CAPTURE/capture.c **** 
 418:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 419:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 928              	 .loc 2 419 0
 929 001a 7B68     	 ldr r3,[r7,#4]
 930 001c 3122     	 mov r2,#49
 931 001e 9B5C     	 ldrb r3,[r3,r2]
 932 0020 002B     	 cmp r3,#0
 933 0022 00D1     	 bne .LCB817
 934 0024 7CE0     	 b .L43
 935              	.LCB817:
 420:../Dave/Generated/CAPTURE/capture.c ****   {
 421:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 422:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 936              	 .loc 2 422 0
 937 0026 7B68     	 ldr r3,[r7,#4]
 938 0028 2D22     	 mov r2,#45
 939 002a 9B5C     	 ldrb r3,[r3,r2]
 940 002c 002B     	 cmp r3,#0
 941 002e 00D0     	 beq .LCB822
 942 0030 7AE0     	 b .L48
 943              	.LCB822:
 423:../Dave/Generated/CAPTURE/capture.c ****     {
 424:../Dave/Generated/CAPTURE/capture.c ****       if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 944              	 .loc 2 424 0
 945 0032 7B68     	 ldr r3,[r7,#4]
 946 0034 2E22     	 mov r2,#46
 947 0036 9B5C     	 ldrb r3,[r3,r2]
 948 0038 002B     	 cmp r3,#0
 949 003a 04D0     	 beq .L45
 425:../Dave/Generated/CAPTURE/capture.c ****           (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 950              	 .loc 2 425 0 discriminator 1
 951 003c 7B68     	 ldr r3,[r7,#4]
 952 003e 2E22     	 mov r2,#46
 953 0040 9B5C     	 ldrb r3,[r3,r2]
 424:../Dave/Generated/CAPTURE/capture.c ****           (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 954              	 .loc 2 424 0 discriminator 1
 955 0042 032B     	 cmp r3,#3
 956 0044 4DD1     	 bne .L46
 957              	.L45:
 958              	.LBB11:
 426:../Dave/Generated/CAPTURE/capture.c ****       {
 427:../Dave/Generated/CAPTURE/capture.c ****         uint32_t captured_time_low_reg = 0U;
 959              	 .loc 2 427 0
 960 0046 0023     	 mov r3,#0
 961 0048 3B61     	 str r3,[r7,#16]
 428:../Dave/Generated/CAPTURE/capture.c ****         uint32_t captured_time_high_reg = 0U;
 962              	 .loc 2 428 0
 963 004a 0023     	 mov r3,#0
 964 004c FB60     	 str r3,[r7,#12]
 429:../Dave/Generated/CAPTURE/capture.c **** 
 430:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 965              	 .loc 2 430 0
 966 004e 7B68     	 ldr r3,[r7,#4]
 967 0050 9A69     	 ldr r2,[r3,#24]
 968 0052 1723     	 mov r3,#23
 969 0054 FC18     	 add r4,r7,r3
 970 0056 1023     	 mov r3,#16
 971 0058 FB18     	 add r3,r7,r3
 972 005a 101C     	 mov r0,r2
 973 005c 0021     	 mov r1,#0
 974 005e 1A1C     	 mov r2,r3
 975 0060 FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 976 0064 031C     	 mov r3,r0
 977 0066 2370     	 strb r3,[r4]
 431:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU4_SLICE_CAP_REG_SET_LOW,
 432:../Dave/Generated/CAPTURE/capture.c ****                                                                   &captured_time_low_reg);
 433:../Dave/Generated/CAPTURE/capture.c **** 
 434:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 978              	 .loc 2 434 0
 979 0068 7B68     	 ldr r3,[r7,#4]
 980 006a 9A69     	 ldr r2,[r3,#24]
 981 006c 1623     	 mov r3,#22
 982 006e FC18     	 add r4,r7,r3
 983 0070 0C23     	 mov r3,#12
 984 0072 FB18     	 add r3,r7,r3
 985 0074 101C     	 mov r0,r2
 986 0076 0121     	 mov r1,#1
 987 0078 1A1C     	 mov r2,r3
 988 007a FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 989 007e 031C     	 mov r3,r0
 990 0080 2370     	 strb r3,[r4]
 435:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
 436:../Dave/Generated/CAPTURE/capture.c ****                                                                    &captured_time_high_reg);
 437:../Dave/Generated/CAPTURE/capture.c **** 
 438:../Dave/Generated/CAPTURE/capture.c ****         /*calculate time tick from capture value and pre-scale value of captured register**/
 439:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_low_reg, true);
 991              	 .loc 2 439 0
 992 0082 7A68     	 ldr r2,[r7,#4]
 993 0084 1023     	 mov r3,#16
 994 0086 FB18     	 add r3,r7,r3
 995 0088 101C     	 mov r0,r2
 996 008a 191C     	 mov r1,r3
 997 008c 0122     	 mov r2,#1
 998 008e FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 440:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
 441:../Dave/Generated/CAPTURE/capture.c ****         captured_time_low_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_time
 999              	 .loc 2 441 0
 1000 0092 3B69     	 ldr r3,[r7,#16]
 1001 0094 7A68     	 ldr r2,[r7,#4]
 1002 0096 101C     	 mov r0,r2
 1003 0098 191C     	 mov r1,r3
 1004 009a FFF7FEFF 	 bl CAPTURE_lCalculateTimeInNanoSecFromTimerTick
 1005 009e 031C     	 mov r3,r0
 1006 00a0 3B61     	 str r3,[r7,#16]
 442:../Dave/Generated/CAPTURE/capture.c **** 
 443:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time tick from capture value and pre-scale value of captured register**/
 444:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_high_reg, false);
 1007              	 .loc 2 444 0
 1008 00a2 7A68     	 ldr r2,[r7,#4]
 1009 00a4 0C23     	 mov r3,#12
 1010 00a6 FB18     	 add r3,r7,r3
 1011 00a8 101C     	 mov r0,r2
 1012 00aa 191C     	 mov r1,r3
 1013 00ac 0022     	 mov r2,#0
 1014 00ae FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 445:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time in Nanosecond from timer tick and pre-scale value of captured_time_high_r
 446:../Dave/Generated/CAPTURE/capture.c ****         captured_time_high_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_tim
 1015              	 .loc 2 446 0
 1016 00b2 FB68     	 ldr r3,[r7,#12]
 1017 00b4 7A68     	 ldr r2,[r7,#4]
 1018 00b6 101C     	 mov r0,r2
 1019 00b8 191C     	 mov r1,r3
 1020 00ba FFF7FEFF 	 bl CAPTURE_lCalculateTimeInNanoSecFromTimerTick
 1021 00be 031C     	 mov r3,r0
 1022 00c0 FB60     	 str r3,[r7,#12]
 447:../Dave/Generated/CAPTURE/capture.c **** 
 448:../Dave/Generated/CAPTURE/capture.c ****         /* add both high and lower register value*/
 449:../Dave/Generated/CAPTURE/capture.c ****         *captured_time = captured_time_low_reg + captured_time_high_reg;
 1023              	 .loc 2 449 0
 1024 00c2 3A69     	 ldr r2,[r7,#16]
 1025 00c4 FB68     	 ldr r3,[r7,#12]
 1026 00c6 D218     	 add r2,r2,r3
 1027 00c8 3B68     	 ldr r3,[r7]
 1028 00ca 1A60     	 str r2,[r3]
 450:../Dave/Generated/CAPTURE/capture.c **** 
 451:../Dave/Generated/CAPTURE/capture.c ****         if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
 1029              	 .loc 2 451 0
 1030 00cc 1623     	 mov r3,#22
 1031 00ce FB18     	 add r3,r7,r3
 1032 00d0 1B78     	 ldrb r3,[r3]
 1033 00d2 022B     	 cmp r3,#2
 1034 00d4 04D1     	 bne .L47
 452:../Dave/Generated/CAPTURE/capture.c ****         {
 453:../Dave/Generated/CAPTURE/capture.c ****           status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 1035              	 .loc 2 453 0
 1036 00d6 1723     	 mov r3,#23
 1037 00d8 FB18     	 add r3,r7,r3
 1038 00da 0222     	 mov r2,#2
 1039 00dc 1A70     	 strb r2,[r3]
 1040              	.LBE11:
 426:../Dave/Generated/CAPTURE/capture.c ****         uint32_t captured_time_low_reg = 0U;
 1041              	 .loc 2 426 0
 1042 00de 1EE0     	 b .L44
 1043              	.L47:
 1044 00e0 1DE0     	 b .L44
 1045              	.L46:
 454:../Dave/Generated/CAPTURE/capture.c ****         }
 455:../Dave/Generated/CAPTURE/capture.c ****       }
 456:../Dave/Generated/CAPTURE/capture.c ****       else
 457:../Dave/Generated/CAPTURE/capture.c ****       {
 458:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 1046              	 .loc 2 458 0
 1047 00e2 7B68     	 ldr r3,[r7,#4]
 1048 00e4 9A69     	 ldr r2,[r3,#24]
 1049 00e6 1723     	 mov r3,#23
 1050 00e8 FC18     	 add r4,r7,r3
 1051 00ea 3B68     	 ldr r3,[r7]
 1052 00ec 101C     	 mov r0,r2
 1053 00ee 0121     	 mov r1,#1
 1054 00f0 1A1C     	 mov r2,r3
 1055 00f2 FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 1056 00f6 031C     	 mov r3,r0
 1057 00f8 2370     	 strb r3,[r4]
 459:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
 460:../Dave/Generated/CAPTURE/capture.c ****                                                                   captured_time);
 461:../Dave/Generated/CAPTURE/capture.c **** 
 462:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time tick from capture value and pre-scale value of captured register**/
 463:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, captured_time, true);
 1058              	 .loc 2 463 0
 1059 00fa 7A68     	 ldr r2,[r7,#4]
 1060 00fc 3B68     	 ldr r3,[r7]
 1061 00fe 101C     	 mov r0,r2
 1062 0100 191C     	 mov r1,r3
 1063 0102 0122     	 mov r2,#1
 1064 0104 FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 464:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
 465:../Dave/Generated/CAPTURE/capture.c ****         *captured_time = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, *captured_time);
 1065              	 .loc 2 465 0
 1066 0108 3B68     	 ldr r3,[r7]
 1067 010a 1B68     	 ldr r3,[r3]
 1068 010c 7A68     	 ldr r2,[r7,#4]
 1069 010e 101C     	 mov r0,r2
 1070 0110 191C     	 mov r1,r3
 1071 0112 FFF7FEFF 	 bl CAPTURE_lCalculateTimeInNanoSecFromTimerTick
 1072 0116 021C     	 mov r2,r0
 1073 0118 3B68     	 ldr r3,[r7]
 1074 011a 1A60     	 str r2,[r3]
 1075 011c 04E0     	 b .L48
 1076              	.L44:
 1077 011e 03E0     	 b .L48
 1078              	.L43:
 466:../Dave/Generated/CAPTURE/capture.c ****       }
 467:../Dave/Generated/CAPTURE/capture.c ****     }
 468:../Dave/Generated/CAPTURE/capture.c **** #endif
 469:../Dave/Generated/CAPTURE/capture.c **** 
 470:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 471:../Dave/Generated/CAPTURE/capture.c ****     if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 472:../Dave/Generated/CAPTURE/capture.c ****     {
 473:../Dave/Generated/CAPTURE/capture.c ****       if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 474:../Dave/Generated/CAPTURE/capture.c ****           (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 475:../Dave/Generated/CAPTURE/capture.c ****       {
 476:../Dave/Generated/CAPTURE/capture.c ****         uint32_t captured_time_low_reg = 0U;
 477:../Dave/Generated/CAPTURE/capture.c ****         uint32_t captured_time_high_reg = 0U;
 478:../Dave/Generated/CAPTURE/capture.c **** 
 479:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 480:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU8_SLICE_CAP_REG_SET_LOW,
 481:../Dave/Generated/CAPTURE/capture.c ****                                                                   &captured_time_low_reg);
 482:../Dave/Generated/CAPTURE/capture.c **** 
 483:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 484:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU8_SLICE_CAP_REG_SET_HIGH,
 485:../Dave/Generated/CAPTURE/capture.c ****                                                                    &captured_time_high_reg);
 486:../Dave/Generated/CAPTURE/capture.c **** 
 487:../Dave/Generated/CAPTURE/capture.c ****         /*calculate time tick from capture value and pre-scale value of captured register**/
 488:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_low_reg, true);
 489:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
 490:../Dave/Generated/CAPTURE/capture.c ****         captured_time_low_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_time
 491:../Dave/Generated/CAPTURE/capture.c **** 
 492:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time tick from capture value and pre-scale value of captured register**/
 493:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &captured_time_high_reg, false);
 494:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time in Nanosecond from timer tick and pre-scale value of captured_time_high_r
 495:../Dave/Generated/CAPTURE/capture.c ****         captured_time_high_reg = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, captured_tim
 496:../Dave/Generated/CAPTURE/capture.c **** 
 497:../Dave/Generated/CAPTURE/capture.c ****         /* add both high and lower register value*/
 498:../Dave/Generated/CAPTURE/capture.c ****         *captured_time = captured_time_low_reg + captured_time_high_reg;
 499:../Dave/Generated/CAPTURE/capture.c **** 
 500:../Dave/Generated/CAPTURE/capture.c ****         if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
 501:../Dave/Generated/CAPTURE/capture.c ****         {
 502:../Dave/Generated/CAPTURE/capture.c ****           status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 503:../Dave/Generated/CAPTURE/capture.c ****         }
 504:../Dave/Generated/CAPTURE/capture.c ****       }
 505:../Dave/Generated/CAPTURE/capture.c ****       else
 506:../Dave/Generated/CAPTURE/capture.c ****       {
 507:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 508:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU8_SLICE_CAP_REG_SET_HIGH,
 509:../Dave/Generated/CAPTURE/capture.c ****                                                                   captured_time);
 510:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time tick from capture value and pre-scale value of captured register**/
 511:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, captured_time, true);
 512:../Dave/Generated/CAPTURE/capture.c ****         /* calculate time in Nanosecond from timer tick and pre-scale value of captured register**/
 513:../Dave/Generated/CAPTURE/capture.c ****         *captured_time = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, *captured_time);
 514:../Dave/Generated/CAPTURE/capture.c ****       }
 515:../Dave/Generated/CAPTURE/capture.c ****     }
 516:../Dave/Generated/CAPTURE/capture.c **** #endif
 517:../Dave/Generated/CAPTURE/capture.c ****   }
 518:../Dave/Generated/CAPTURE/capture.c ****   else
 519:../Dave/Generated/CAPTURE/capture.c ****   {
 520:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_FAILURE;
 1079              	 .loc 2 520 0
 1080 0120 1723     	 mov r3,#23
 1081 0122 FB18     	 add r3,r7,r3
 1082 0124 0122     	 mov r2,#1
 1083 0126 1A70     	 strb r2,[r3]
 1084              	.L48:
 521:../Dave/Generated/CAPTURE/capture.c ****   }
 522:../Dave/Generated/CAPTURE/capture.c **** 
 523:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 1085              	 .loc 2 523 0
 1086 0128 1723     	 mov r3,#23
 1087 012a FB18     	 add r3,r7,r3
 1088 012c 1B78     	 ldrb r3,[r3]
 524:../Dave/Generated/CAPTURE/capture.c **** }
 1089              	 .loc 2 524 0
 1090 012e 181C     	 mov r0,r3
 1091 0130 BD46     	 mov sp,r7
 1092 0132 07B0     	 add sp,sp,#28
 1093              	 
 1094 0134 90BD     	 pop {r4,r7,pc}
 1095              	 .cfi_endproc
 1096              	.LFE131:
 1098 0136 C046     	 .section .text.CAPTURE_GetDutyCycle,"ax",%progbits
 1099              	 .align 2
 1100              	 .global CAPTURE_GetDutyCycle
 1101              	 .code 16
 1102              	 .thumb_func
 1104              	CAPTURE_GetDutyCycle:
 1105              	.LFB132:
 525:../Dave/Generated/CAPTURE/capture.c **** 
 526:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_GetDutyCycle(const CAPTURE_t *const handler, uint32_t *const signal_duty)
 527:../Dave/Generated/CAPTURE/capture.c **** {
 1106              	 .loc 2 527 0
 1107              	 .cfi_startproc
 1108 0000 90B5     	 push {r4,r7,lr}
 1109              	.LCFI45:
 1110              	 .cfi_def_cfa_offset 12
 1111              	 .cfi_offset 4,-12
 1112              	 .cfi_offset 7,-8
 1113              	 .cfi_offset 14,-4
 1114 0002 85B0     	 sub sp,sp,#20
 1115              	.LCFI46:
 1116              	 .cfi_def_cfa_offset 32
 1117 0004 00AF     	 add r7,sp,#0
 1118              	.LCFI47:
 1119              	 .cfi_def_cfa_register 7
 1120 0006 7860     	 str r0,[r7,#4]
 1121 0008 3960     	 str r1,[r7]
 528:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
 1122              	 .loc 2 528 0
 1123 000a 0F23     	 mov r3,#15
 1124 000c FB18     	 add r3,r7,r3
 1125 000e 0022     	 mov r2,#0
 1126 0010 1A70     	 strb r2,[r3]
 529:../Dave/Generated/CAPTURE/capture.c ****   uint32_t duty_val = 0U;
 1127              	 .loc 2 529 0
 1128 0012 0023     	 mov r3,#0
 1129 0014 BB60     	 str r3,[r7,#8]
 530:../Dave/Generated/CAPTURE/capture.c **** 
 531:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetDutyCycle:handler NULL", (handler != NULL));
 532:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetDutyCycle:NULL data pointer", (signal_duty != NULL));
 533:../Dave/Generated/CAPTURE/capture.c **** 
 534:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 535:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 1130              	 .loc 2 535 0
 1131 0016 7B68     	 ldr r3,[r7,#4]
 1132 0018 3122     	 mov r2,#49
 1133 001a 9B5C     	 ldrb r3,[r3,r2]
 1134 001c 002B     	 cmp r3,#0
 1135 001e 36D0     	 beq .L51
 536:../Dave/Generated/CAPTURE/capture.c ****   {
 537:../Dave/Generated/CAPTURE/capture.c ****     if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 1136              	 .loc 2 537 0
 1137 0020 7B68     	 ldr r3,[r7,#4]
 1138 0022 2E22     	 mov r2,#46
 1139 0024 9B5C     	 ldrb r3,[r3,r2]
 1140 0026 002B     	 cmp r3,#0
 1141 0028 04D0     	 beq .L52
 538:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 1142              	 .loc 2 538 0 discriminator 1
 1143 002a 7B68     	 ldr r3,[r7,#4]
 1144 002c 2E22     	 mov r2,#46
 1145 002e 9B5C     	 ldrb r3,[r3,r2]
 537:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 1146              	 .loc 2 537 0 discriminator 1
 1147 0030 032B     	 cmp r3,#3
 1148 0032 26D1     	 bne .L53
 1149              	.L52:
 539:../Dave/Generated/CAPTURE/capture.c ****     {
 540:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 541:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 1150              	 .loc 2 541 0
 1151 0034 7B68     	 ldr r3,[r7,#4]
 1152 0036 2D22     	 mov r2,#45
 1153 0038 9B5C     	 ldrb r3,[r3,r2]
 1154 003a 002B     	 cmp r3,#0
 1155 003c 0CD1     	 bne .L54
 542:../Dave/Generated/CAPTURE/capture.c ****       {
 543:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 1156              	 .loc 2 543 0
 1157 003e 7B68     	 ldr r3,[r7,#4]
 1158 0040 9A69     	 ldr r2,[r3,#24]
 1159 0042 0F23     	 mov r3,#15
 1160 0044 FC18     	 add r4,r7,r3
 1161 0046 0823     	 mov r3,#8
 1162 0048 FB18     	 add r3,r7,r3
 1163 004a 101C     	 mov r0,r2
 1164 004c 0121     	 mov r1,#1
 1165 004e 1A1C     	 mov r2,r3
 1166 0050 FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 1167 0054 031C     	 mov r3,r0
 1168 0056 2370     	 strb r3,[r4]
 1169              	.L54:
 544:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
 545:../Dave/Generated/CAPTURE/capture.c ****                                                                   &duty_val);
 546:../Dave/Generated/CAPTURE/capture.c ****       }
 547:../Dave/Generated/CAPTURE/capture.c **** #endif
 548:../Dave/Generated/CAPTURE/capture.c **** 
 549:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 550:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 551:../Dave/Generated/CAPTURE/capture.c ****       {
 552:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 553:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU8_SLICE_CAP_REG_SET_HIGH,
 554:../Dave/Generated/CAPTURE/capture.c ****                                                                   &duty_val);
 555:../Dave/Generated/CAPTURE/capture.c ****       }
 556:../Dave/Generated/CAPTURE/capture.c **** #endif
 557:../Dave/Generated/CAPTURE/capture.c ****       if (status == CAPTURE_STATUS_SUCCESS)
 1170              	 .loc 2 557 0
 1171 0058 0F23     	 mov r3,#15
 1172 005a FB18     	 add r3,r7,r3
 1173 005c 1B78     	 ldrb r3,[r3]
 1174 005e 002B     	 cmp r3,#0
 1175 0060 0BD1     	 bne .L55
 558:../Dave/Generated/CAPTURE/capture.c ****       {
 559:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &duty_val, false);
 1176              	 .loc 2 559 0
 1177 0062 7A68     	 ldr r2,[r7,#4]
 1178 0064 0823     	 mov r3,#8
 1179 0066 FB18     	 add r3,r7,r3
 1180 0068 101C     	 mov r0,r2
 1181 006a 191C     	 mov r1,r3
 1182 006c 0022     	 mov r2,#0
 1183 006e FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 560:../Dave/Generated/CAPTURE/capture.c ****         *signal_duty = duty_val;
 1184              	 .loc 2 560 0
 1185 0072 BA68     	 ldr r2,[r7,#8]
 1186 0074 3B68     	 ldr r3,[r7]
 1187 0076 1A60     	 str r2,[r3]
 557:../Dave/Generated/CAPTURE/capture.c ****       {
 1188              	 .loc 2 557 0
 1189 0078 08E0     	 b .L57
 1190              	.L55:
 561:../Dave/Generated/CAPTURE/capture.c ****       }
 562:../Dave/Generated/CAPTURE/capture.c ****       else
 563:../Dave/Generated/CAPTURE/capture.c ****       {
 564:../Dave/Generated/CAPTURE/capture.c ****         *signal_duty = 0U;
 1191              	 .loc 2 564 0
 1192 007a 3B68     	 ldr r3,[r7]
 1193 007c 0022     	 mov r2,#0
 1194 007e 1A60     	 str r2,[r3]
 557:../Dave/Generated/CAPTURE/capture.c ****       {
 1195              	 .loc 2 557 0
 1196 0080 04E0     	 b .L57
 1197              	.L53:
 565:../Dave/Generated/CAPTURE/capture.c ****       }
 566:../Dave/Generated/CAPTURE/capture.c ****     }
 567:../Dave/Generated/CAPTURE/capture.c ****     else
 568:../Dave/Generated/CAPTURE/capture.c ****     {
 569:../Dave/Generated/CAPTURE/capture.c ****       status = CAPTURE_STATUS_INVALID_CONFIG;
 1198              	 .loc 2 569 0
 1199 0082 0F23     	 mov r3,#15
 1200 0084 FB18     	 add r3,r7,r3
 1201 0086 0322     	 mov r2,#3
 1202 0088 1A70     	 strb r2,[r3]
 1203 008a 04E0     	 b .L58
 1204              	.L57:
 1205 008c 03E0     	 b .L58
 1206              	.L51:
 570:../Dave/Generated/CAPTURE/capture.c ****     }
 571:../Dave/Generated/CAPTURE/capture.c ****   }
 572:../Dave/Generated/CAPTURE/capture.c ****   else
 573:../Dave/Generated/CAPTURE/capture.c ****   {
 574:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_FAILURE;
 1207              	 .loc 2 574 0
 1208 008e 0F23     	 mov r3,#15
 1209 0090 FB18     	 add r3,r7,r3
 1210 0092 0122     	 mov r2,#1
 1211 0094 1A70     	 strb r2,[r3]
 1212              	.L58:
 575:../Dave/Generated/CAPTURE/capture.c ****   }
 576:../Dave/Generated/CAPTURE/capture.c **** 
 577:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 1213              	 .loc 2 577 0
 1214 0096 0F23     	 mov r3,#15
 1215 0098 FB18     	 add r3,r7,r3
 1216 009a 1B78     	 ldrb r3,[r3]
 578:../Dave/Generated/CAPTURE/capture.c **** }
 1217              	 .loc 2 578 0
 1218 009c 181C     	 mov r0,r3
 1219 009e BD46     	 mov sp,r7
 1220 00a0 05B0     	 add sp,sp,#20
 1221              	 
 1222 00a2 90BD     	 pop {r4,r7,pc}
 1223              	 .cfi_endproc
 1224              	.LFE132:
 1226              	 .global __clzsi2
 1227              	 .global __aeabi_uidiv
 1228              	 .section .text.CAPTURE_GetDutyCycleInPercentage,"ax",%progbits
 1229              	 .align 2
 1230              	 .global CAPTURE_GetDutyCycleInPercentage
 1231              	 .code 16
 1232              	 .thumb_func
 1234              	CAPTURE_GetDutyCycleInPercentage:
 1235              	.LFB133:
 579:../Dave/Generated/CAPTURE/capture.c **** 
 580:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_GetDutyCycleInPercentage(const CAPTURE_t *const handler, uint32_t *const s
 581:../Dave/Generated/CAPTURE/capture.c **** {
 1236              	 .loc 2 581 0
 1237              	 .cfi_startproc
 1238 0000 90B5     	 push {r4,r7,lr}
 1239              	.LCFI48:
 1240              	 .cfi_def_cfa_offset 12
 1241              	 .cfi_offset 4,-12
 1242              	 .cfi_offset 7,-8
 1243              	 .cfi_offset 14,-4
 1244 0002 89B0     	 sub sp,sp,#36
 1245              	.LCFI49:
 1246              	 .cfi_def_cfa_offset 48
 1247 0004 00AF     	 add r7,sp,#0
 1248              	.LCFI50:
 1249              	 .cfi_def_cfa_register 7
 1250 0006 7860     	 str r0,[r7,#4]
 1251 0008 3960     	 str r1,[r7]
 582:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
 1252              	 .loc 2 582 0
 1253 000a 1F23     	 mov r3,#31
 1254 000c FB18     	 add r3,r7,r3
 1255 000e 0022     	 mov r2,#0
 1256 0010 1A70     	 strb r2,[r3]
 583:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
 1257              	 .loc 2 583 0
 1258 0012 1E23     	 mov r3,#30
 1259 0014 FB18     	 add r3,r7,r3
 1260 0016 0022     	 mov r2,#0
 1261 0018 1A70     	 strb r2,[r3]
 584:../Dave/Generated/CAPTURE/capture.c **** 
 585:../Dave/Generated/CAPTURE/capture.c ****   uint32_t period_val = 0U;
 1262              	 .loc 2 585 0
 1263 001a 0023     	 mov r3,#0
 1264 001c 3B61     	 str r3,[r7,#16]
 586:../Dave/Generated/CAPTURE/capture.c ****   uint32_t duty_val = 0U;
 1265              	 .loc 2 586 0
 1266 001e 0023     	 mov r3,#0
 1267 0020 FB60     	 str r3,[r7,#12]
 587:../Dave/Generated/CAPTURE/capture.c ****   uint32_t norm_period_val = 0U;
 1268              	 .loc 2 587 0
 1269 0022 0023     	 mov r3,#0
 1270 0024 BB61     	 str r3,[r7,#24]
 588:../Dave/Generated/CAPTURE/capture.c **** 
 589:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetDutyCycleInPercentage:handler NULL", (handler != NULL));
 590:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetDutyCycleInPercentage:NULL data pointer", (signal_duty != NULL));
 591:../Dave/Generated/CAPTURE/capture.c **** 
 592:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 593:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 1271              	 .loc 2 593 0
 1272 0026 7B68     	 ldr r3,[r7,#4]
 1273 0028 3122     	 mov r2,#49
 1274 002a 9B5C     	 ldrb r3,[r3,r2]
 1275 002c 002B     	 cmp r3,#0
 1276 002e 00D1     	 bne .LCB1123
 1277 0030 85E0     	 b .L61
 1278              	.LCB1123:
 594:../Dave/Generated/CAPTURE/capture.c ****   {
 595:../Dave/Generated/CAPTURE/capture.c ****     if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 1279              	 .loc 2 595 0
 1280 0032 7B68     	 ldr r3,[r7,#4]
 1281 0034 2E22     	 mov r2,#46
 1282 0036 9B5C     	 ldrb r3,[r3,r2]
 1283 0038 002B     	 cmp r3,#0
 1284 003a 05D0     	 beq .L62
 596:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 1285              	 .loc 2 596 0 discriminator 1
 1286 003c 7B68     	 ldr r3,[r7,#4]
 1287 003e 2E22     	 mov r2,#46
 1288 0040 9B5C     	 ldrb r3,[r3,r2]
 595:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 1289              	 .loc 2 595 0 discriminator 1
 1290 0042 032B     	 cmp r3,#3
 1291 0044 00D0     	 beq .LCB1133
 1292 0046 74E0     	 b .L63
 1293              	.LCB1133:
 1294              	.L62:
 597:../Dave/Generated/CAPTURE/capture.c ****     {
 598:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 599:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 1295              	 .loc 2 599 0
 1296 0048 7B68     	 ldr r3,[r7,#4]
 1297 004a 2D22     	 mov r2,#45
 1298 004c 9B5C     	 ldrb r3,[r3,r2]
 1299 004e 002B     	 cmp r3,#0
 1300 0050 29D1     	 bne .L64
 600:../Dave/Generated/CAPTURE/capture.c ****       {
 601:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 1301              	 .loc 2 601 0
 1302 0052 7B68     	 ldr r3,[r7,#4]
 1303 0054 9A69     	 ldr r2,[r3,#24]
 1304 0056 1F23     	 mov r3,#31
 1305 0058 FC18     	 add r4,r7,r3
 1306 005a 1023     	 mov r3,#16
 1307 005c FB18     	 add r3,r7,r3
 1308 005e 101C     	 mov r0,r2
 1309 0060 0021     	 mov r1,#0
 1310 0062 1A1C     	 mov r2,r3
 1311 0064 FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 1312 0068 031C     	 mov r3,r0
 1313 006a 2370     	 strb r3,[r4]
 602:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU4_SLICE_CAP_REG_SET_LOW,
 603:../Dave/Generated/CAPTURE/capture.c ****                                                                   &period_val);
 604:../Dave/Generated/CAPTURE/capture.c **** 
 605:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 1314              	 .loc 2 605 0
 1315 006c 7B68     	 ldr r3,[r7,#4]
 1316 006e 9A69     	 ldr r2,[r3,#24]
 1317 0070 1E23     	 mov r3,#30
 1318 0072 FC18     	 add r4,r7,r3
 1319 0074 0C23     	 mov r3,#12
 1320 0076 FB18     	 add r3,r7,r3
 1321 0078 101C     	 mov r0,r2
 1322 007a 0121     	 mov r1,#1
 1323 007c 1A1C     	 mov r2,r3
 1324 007e FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 1325 0082 031C     	 mov r3,r0
 1326 0084 2370     	 strb r3,[r4]
 606:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
 607:../Dave/Generated/CAPTURE/capture.c ****                                                                    &duty_val);
 608:../Dave/Generated/CAPTURE/capture.c **** 
 609:../Dave/Generated/CAPTURE/capture.c **** 
 610:../Dave/Generated/CAPTURE/capture.c ****           CAPTURE_lCalculateTimeTickFromTimerValue (handler, &period_val, true);
 1327              	 .loc 2 610 0
 1328 0086 7A68     	 ldr r2,[r7,#4]
 1329 0088 1023     	 mov r3,#16
 1330 008a FB18     	 add r3,r7,r3
 1331 008c 101C     	 mov r0,r2
 1332 008e 191C     	 mov r1,r3
 1333 0090 0122     	 mov r2,#1
 1334 0092 FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 611:../Dave/Generated/CAPTURE/capture.c **** 
 612:../Dave/Generated/CAPTURE/capture.c ****           CAPTURE_lCalculateTimeTickFromTimerValue (handler, &duty_val, false);
 1335              	 .loc 2 612 0
 1336 0096 7A68     	 ldr r2,[r7,#4]
 1337 0098 0C23     	 mov r3,#12
 1338 009a FB18     	 add r3,r7,r3
 1339 009c 101C     	 mov r0,r2
 1340 009e 191C     	 mov r1,r3
 1341 00a0 0022     	 mov r2,#0
 1342 00a2 FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 1343              	.L64:
 613:../Dave/Generated/CAPTURE/capture.c **** 
 614:../Dave/Generated/CAPTURE/capture.c ****       }
 615:../Dave/Generated/CAPTURE/capture.c **** #endif
 616:../Dave/Generated/CAPTURE/capture.c **** 
 617:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 618:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 619:../Dave/Generated/CAPTURE/capture.c ****       {
 620:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 621:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU8_SLICE_CAP_REG_SET_LOW,
 622:../Dave/Generated/CAPTURE/capture.c ****                                                                   &period_val);
 623:../Dave/Generated/CAPTURE/capture.c **** 
 624:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 625:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU8_SLICE_CAP_REG_SET_HIGH,
 626:../Dave/Generated/CAPTURE/capture.c ****                                                                    &duty_val);
 627:../Dave/Generated/CAPTURE/capture.c **** 
 628:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &period_val, true);
 629:../Dave/Generated/CAPTURE/capture.c **** 
 630:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &duty_val, false);
 631:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &period_val, true);
 632:../Dave/Generated/CAPTURE/capture.c ****       }
 633:../Dave/Generated/CAPTURE/capture.c **** #endif
 634:../Dave/Generated/CAPTURE/capture.c ****       period_val += duty_val;
 1344              	 .loc 2 634 0
 1345 00a6 3A69     	 ldr r2,[r7,#16]
 1346 00a8 FB68     	 ldr r3,[r7,#12]
 1347 00aa D318     	 add r3,r2,r3
 1348 00ac 3B61     	 str r3,[r7,#16]
 635:../Dave/Generated/CAPTURE/capture.c ****       norm_period_val = (uint32_t)__CLZ (period_val);
 1349              	 .loc 2 635 0
 1350 00ae 3B69     	 ldr r3,[r7,#16]
 1351 00b0 7B61     	 str r3,[r7,#20]
 1352              	.LBB12:
 1353              	.LBB13:
 1354              	 .file 3 "C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V5.3.0
   5:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     26. March 2020
   6:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /*
   8:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Copyright (c) 2009-2020 Arm Limited. All rights reserved.
   9:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  10:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  12:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  16:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  *
  18:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * limitations under the License.
  23:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  24:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  25:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  28:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  29:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  30:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __has_builtin
  36:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  38:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  39:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ASM
  41:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ASM                                  __asm
  42:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  43:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __INLINE
  44:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __INLINE                               inline
  45:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  46:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  49:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif                                           
  52:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  55:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __USED
  56:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  58:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __WEAK
  59:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  61:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED
  62:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  64:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  67:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  70:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  78:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  86:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  94:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 102:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 110:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __ALIGNED
 111:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 113:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __RESTRICT
 114:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 116:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 119:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 120:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 122:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 124:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 125:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            in the used linker script.
 129:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 130:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 131:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 133:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 135:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   typedef struct {
 136:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t const* src;
 137:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t* dest;
 138:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t  wlen;
 139:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   } __copy_table_t;
 140:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 141:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   typedef struct {
 142:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t* dest;
 143:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     uint32_t  wlen;
 144:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   } __zero_table_t;
 145:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 146:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 151:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     }
 155:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
 156:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  
 157:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     }
 161:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
 162:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  
 163:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   _start();
 164:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 165:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 166:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 168:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 169:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 172:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 173:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 176:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 177:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 180:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 181:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 184:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 185:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 189:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 190:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 191:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 192:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 196:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 198:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 200:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 201:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 202:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 203:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 207:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 209:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 211:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 212:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 213:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 214:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
 215:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
 217:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 218:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 220:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 221:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 222:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 224:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 225:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 226:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 227:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 229:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               non-secure Control Register value
 232:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 233:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 235:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 236:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 237:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 239:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 240:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 241:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 242:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 243:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 244:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
 245:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 248:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 250:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 252:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 253:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 254:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 256:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 260:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 262:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 264:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 265:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 266:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 267:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 268:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 269:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 271:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 272:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 274:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 275:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 276:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 278:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 279:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 280:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 281:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 282:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 283:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 285:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 286:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 288:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 289:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 290:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 292:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 293:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 294:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 295:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 296:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 297:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               xPSR Register value
 299:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 300:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 302:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 303:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 304:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 306:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 307:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 308:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 309:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 310:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 313:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 314:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 316:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 317:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 318:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 320:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 321:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 322:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 323:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 325:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 328:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 329:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 331:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 332:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 333:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 335:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 336:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 337:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 338:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 339:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 340:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 344:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 346:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 348:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 349:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 350:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 352:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 356:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 358:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 360:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 361:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 362:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 363:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 364:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 367:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 368:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 370:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 371:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 372:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 374:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 375:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 376:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 377:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 379:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 382:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 383:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 385:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 386:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 387:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 389:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 390:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 391:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 392:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 393:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 394:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 398:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 400:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 402:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 403:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 404:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 406:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 410:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 412:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 414:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 415:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 416:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 417:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 419:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               SP Register value
 422:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 423:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 425:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 426:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 427:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 429:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 430:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 431:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 432:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 433:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 437:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 439:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 441:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 442:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 443:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 444:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 445:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 446:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 448:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 449:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 451:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 452:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 453:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 454:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 455:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 456:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 457:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 458:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 460:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 463:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 464:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 466:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 467:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 468:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 469:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 470:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 471:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 472:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 473:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 474:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 475:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 476:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 479:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 481:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 483:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 484:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 485:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 487:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 491:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 493:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 495:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 496:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 497:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 498:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 502:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable FIQ
 503:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 506:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 508:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 510:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 511:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 512:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 513:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable FIQ
 514:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 517:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 519:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 521:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 522:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 523:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 524:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority
 525:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 527:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 528:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 530:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 531:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 532:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 534:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 535:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 536:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 537:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 539:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 542:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 543:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 545:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 546:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 547:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 549:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 550:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 551:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 552:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 553:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 554:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority
 555:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 558:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 560:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 562:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 563:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 564:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 566:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 570:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 572:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 574:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 575:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 576:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 577:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 578:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 583:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 585:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 587:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 588:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 589:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 590:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask
 591:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 593:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 594:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 596:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 597:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 598:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 600:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 601:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 602:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 603:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 605:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 608:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 609:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 611:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 612:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 613:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 615:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 616:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 617:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 618:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 619:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 620:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask
 621:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 624:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 626:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 628:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 629:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 630:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 632:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 636:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 638:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 640:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 641:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 642:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 646:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 647:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 650:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 651:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 655:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 656:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 658:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 659:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 661:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 665:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 666:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 667:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 669:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 670:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 671:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 672:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 674:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 678:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSPLIM Register value
 680:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 681:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 683:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 686:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 687:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 688:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 690:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 691:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 692:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 693:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 694:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 695:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 696:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 700:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   
 701:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 704:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 706:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 711:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 713:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 714:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 715:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 716:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 718:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 722:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 725:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 727:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 731:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 733:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 734:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 735:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 736:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 737:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 738:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 742:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 743:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 745:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 746:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 748:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 752:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 753:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 754:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 756:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 757:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 758:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 759:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 760:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 762:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 766:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSPLIM Register value
 768:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 769:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 771:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return 0U;
 774:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 775:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 776:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 778:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 779:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 780:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 781:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 782:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 783:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 784:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   mode.
 788:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 789:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 792:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 794:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 799:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 801:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 802:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 803:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 804:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 806:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 810:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 813:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 815:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 819:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 821:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 822:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 823:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 824:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 827:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 828:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 829:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get FPSCR
 830:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 833:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 835:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 843:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 844:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 845:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 847:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 848:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 849:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(0U);
 850:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 851:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 852:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 853:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 854:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 855:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set FPSCR
 856:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 859:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 861:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 869:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 871:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 872:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   (void)fpscr;
 873:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 874:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 875:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 876:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 877:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 879:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 880:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   Access to dedicated instructions
 883:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 884:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** */
 885:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 886:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 894:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 898:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 899:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 900:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   No Operation
 901:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 903:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 905:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 906:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 909:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 910:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 911:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 912:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 913:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Event
 914:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 917:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 918:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 919:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 920:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 921:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Send Event
 922:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 924:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 926:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 927:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 928:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            after the instruction has been completed.
 932:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 933:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 935:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 937:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 938:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 939:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 940:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 944:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 946:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 948:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 949:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 950:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 951:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 955:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 957:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 959:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 960:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 961:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 962:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Reversed value
 966:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 967:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 969:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 972:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 973:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 974:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 976:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 977:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 978:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 979:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 980:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 981:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Reversed value
 985:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 986:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 988:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 989:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 990:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
 992:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 993:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 994:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 995:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 996:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Reversed value
1000:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
1001:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
1003:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
1006:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   int16_t result;
1007:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1008:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
1010:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
1011:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
1012:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1013:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1014:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
1015:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Rotated value
1020:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
1021:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
1023:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   op2 %= 32U;
1024:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   if (op2 == 0U)
1025:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   {
1026:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     return op1;
1027:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
1028:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
1030:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1031:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1032:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
1033:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Breakpoint
1034:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
1039:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1041:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1042:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
1043:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Reversed value
1047:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
1048:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
1050:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
1051:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1052:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
1056:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
1057:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1059:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   {
1062:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     result <<= 1U;
1063:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     result |= value & 1U;
1064:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     s--;
1065:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
1066:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
1068:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return result;
1069:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** }
1070:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1071:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** 
1072:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
1073:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Count leading zeros
1074:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return             number of leading zeros in value
1077:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
1078:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h **** {
1080:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      is non-zero".
1086:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****      single CLZ instruction.
1088:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****    */
1089:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   if (value == 0U)
 1355              	 .loc 3 1089 0
 1356 00b2 7B69     	 ldr r3,[r7,#20]
 1357 00b4 002B     	 cmp r3,#0
 1358 00b6 01D1     	 bne .L65
1090:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   {
1091:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****     return 32U;
 1359              	 .loc 3 1091 0
 1360 00b8 2023     	 mov r3,#32
 1361 00ba 04E0     	 b .L66
 1362              	.L65:
1092:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
1093:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   return __builtin_clz(value);
 1363              	 .loc 3 1093 0
 1364 00bc 7869     	 ldr r0,[r7,#20]
 1365 00be FFF7FEFF 	 bl __clzsi2
 1366 00c2 031C     	 mov r3,r0
 1367 00c4 DBB2     	 uxtb r3,r3
 1368              	.L66:
 1369              	.LBE13:
 1370              	.LBE12:
 1371              	 .loc 2 635 0
 1372 00c6 BB61     	 str r3,[r7,#24]
 636:../Dave/Generated/CAPTURE/capture.c ****       period_val = period_val << norm_period_val;
 1373              	 .loc 2 636 0
 1374 00c8 3A69     	 ldr r2,[r7,#16]
 1375 00ca BB69     	 ldr r3,[r7,#24]
 1376 00cc 9A40     	 lsl r2,r2,r3
 1377 00ce 131C     	 mov r3,r2
 1378 00d0 3B61     	 str r3,[r7,#16]
 637:../Dave/Generated/CAPTURE/capture.c ****       duty_val = duty_val << norm_period_val;
 1379              	 .loc 2 637 0
 1380 00d2 FA68     	 ldr r2,[r7,#12]
 1381 00d4 BB69     	 ldr r3,[r7,#24]
 1382 00d6 9A40     	 lsl r2,r2,r3
 1383 00d8 131C     	 mov r3,r2
 1384 00da FB60     	 str r3,[r7,#12]
 638:../Dave/Generated/CAPTURE/capture.c **** 
 639:../Dave/Generated/CAPTURE/capture.c ****       period_val = period_val >> 7U;
 1385              	 .loc 2 639 0
 1386 00dc 3B69     	 ldr r3,[r7,#16]
 1387 00de DB09     	 lsr r3,r3,#7
 1388 00e0 3B61     	 str r3,[r7,#16]
 640:../Dave/Generated/CAPTURE/capture.c ****       duty_val = duty_val >> 7U;
 1389              	 .loc 2 640 0
 1390 00e2 FB68     	 ldr r3,[r7,#12]
 1391 00e4 DB09     	 lsr r3,r3,#7
 1392 00e6 FB60     	 str r3,[r7,#12]
 641:../Dave/Generated/CAPTURE/capture.c ****       if (period_val > 0U)
 1393              	 .loc 2 641 0
 1394 00e8 3B69     	 ldr r3,[r7,#16]
 1395 00ea 002B     	 cmp r3,#0
 1396 00ec 0FD0     	 beq .L67
 642:../Dave/Generated/CAPTURE/capture.c ****       {
 643:../Dave/Generated/CAPTURE/capture.c ****         /* Rounding Positive for Duty*/
 644:../Dave/Generated/CAPTURE/capture.c ****         *signal_duty = ((duty_val * 100U) + (period_val >> 1)) / period_val;
 1397              	 .loc 2 644 0
 1398 00ee FB68     	 ldr r3,[r7,#12]
 1399 00f0 6422     	 mov r2,#100
 1400 00f2 5A43     	 mul r2,r3
 1401 00f4 3B69     	 ldr r3,[r7,#16]
 1402 00f6 5B08     	 lsr r3,r3,#1
 1403 00f8 D218     	 add r2,r2,r3
 1404 00fa 3B69     	 ldr r3,[r7,#16]
 1405 00fc 101C     	 mov r0,r2
 1406 00fe 191C     	 mov r1,r3
 1407 0100 FFF7FEFF 	 bl __aeabi_uidiv
 1408 0104 031C     	 mov r3,r0
 1409 0106 1A1C     	 mov r2,r3
 1410 0108 3B68     	 ldr r3,[r7]
 1411 010a 1A60     	 str r2,[r3]
 1412 010c 06E0     	 b .L68
 1413              	.L67:
 645:../Dave/Generated/CAPTURE/capture.c ****       }
 646:../Dave/Generated/CAPTURE/capture.c ****       else
 647:../Dave/Generated/CAPTURE/capture.c ****       {
 648:../Dave/Generated/CAPTURE/capture.c ****         *signal_duty = 0U;
 1414              	 .loc 2 648 0
 1415 010e 3B68     	 ldr r3,[r7]
 1416 0110 0022     	 mov r2,#0
 1417 0112 1A60     	 str r2,[r3]
 649:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_STATUS_FAILURE;
 1418              	 .loc 2 649 0
 1419 0114 1F23     	 mov r3,#31
 1420 0116 FB18     	 add r3,r7,r3
 1421 0118 0122     	 mov r2,#1
 1422 011a 1A70     	 strb r2,[r3]
 1423              	.L68:
 650:../Dave/Generated/CAPTURE/capture.c ****       }
 651:../Dave/Generated/CAPTURE/capture.c **** 
 652:../Dave/Generated/CAPTURE/capture.c ****       if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
 1424              	 .loc 2 652 0
 1425 011c 1E23     	 mov r3,#30
 1426 011e FB18     	 add r3,r7,r3
 1427 0120 1B78     	 ldrb r3,[r3]
 1428 0122 022B     	 cmp r3,#2
 1429 0124 04D1     	 bne .L69
 653:../Dave/Generated/CAPTURE/capture.c ****       {
 654:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 1430              	 .loc 2 654 0
 1431 0126 1F23     	 mov r3,#31
 1432 0128 FB18     	 add r3,r7,r3
 1433 012a 0222     	 mov r2,#2
 1434 012c 1A70     	 strb r2,[r3]
 652:../Dave/Generated/CAPTURE/capture.c ****       {
 1435              	 .loc 2 652 0
 1436 012e 05E0     	 b .L70
 1437              	.L69:
 1438 0130 04E0     	 b .L70
 1439              	.L63:
 655:../Dave/Generated/CAPTURE/capture.c ****       }
 656:../Dave/Generated/CAPTURE/capture.c **** 
 657:../Dave/Generated/CAPTURE/capture.c ****     }
 658:../Dave/Generated/CAPTURE/capture.c ****     else
 659:../Dave/Generated/CAPTURE/capture.c ****     {
 660:../Dave/Generated/CAPTURE/capture.c ****       status = CAPTURE_STATUS_INVALID_CONFIG;
 1440              	 .loc 2 660 0
 1441 0132 1F23     	 mov r3,#31
 1442 0134 FB18     	 add r3,r7,r3
 1443 0136 0322     	 mov r2,#3
 1444 0138 1A70     	 strb r2,[r3]
 1445 013a 04E0     	 b .L71
 1446              	.L70:
 1447 013c 03E0     	 b .L71
 1448              	.L61:
 661:../Dave/Generated/CAPTURE/capture.c ****     }
 662:../Dave/Generated/CAPTURE/capture.c ****   }
 663:../Dave/Generated/CAPTURE/capture.c ****   else
 664:../Dave/Generated/CAPTURE/capture.c ****   {
 665:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_FAILURE;
 1449              	 .loc 2 665 0
 1450 013e 1F23     	 mov r3,#31
 1451 0140 FB18     	 add r3,r7,r3
 1452 0142 0122     	 mov r2,#1
 1453 0144 1A70     	 strb r2,[r3]
 1454              	.L71:
 666:../Dave/Generated/CAPTURE/capture.c ****   }
 667:../Dave/Generated/CAPTURE/capture.c **** 
 668:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 1455              	 .loc 2 668 0
 1456 0146 1F23     	 mov r3,#31
 1457 0148 FB18     	 add r3,r7,r3
 1458 014a 1B78     	 ldrb r3,[r3]
 669:../Dave/Generated/CAPTURE/capture.c **** }
 1459              	 .loc 2 669 0
 1460 014c 181C     	 mov r0,r3
 1461 014e BD46     	 mov sp,r7
 1462 0150 09B0     	 add sp,sp,#36
 1463              	 
 1464 0152 90BD     	 pop {r4,r7,pc}
 1465              	 .cfi_endproc
 1466              	.LFE133:
 1468              	 .section .text.CAPTURE_GetPeriod,"ax",%progbits
 1469              	 .align 2
 1470              	 .global CAPTURE_GetPeriod
 1471              	 .code 16
 1472              	 .thumb_func
 1474              	CAPTURE_GetPeriod:
 1475              	.LFB134:
 670:../Dave/Generated/CAPTURE/capture.c **** 
 671:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_GetPeriod(const CAPTURE_t *const handler, uint32_t *const signal_period)
 672:../Dave/Generated/CAPTURE/capture.c **** {
 1476              	 .loc 2 672 0
 1477              	 .cfi_startproc
 1478 0000 90B5     	 push {r4,r7,lr}
 1479              	.LCFI51:
 1480              	 .cfi_def_cfa_offset 12
 1481              	 .cfi_offset 4,-12
 1482              	 .cfi_offset 7,-8
 1483              	 .cfi_offset 14,-4
 1484 0002 87B0     	 sub sp,sp,#28
 1485              	.LCFI52:
 1486              	 .cfi_def_cfa_offset 40
 1487 0004 00AF     	 add r7,sp,#0
 1488              	.LCFI53:
 1489              	 .cfi_def_cfa_register 7
 1490 0006 7860     	 str r0,[r7,#4]
 1491 0008 3960     	 str r1,[r7]
 673:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
 1492              	 .loc 2 673 0
 1493 000a 1723     	 mov r3,#23
 1494 000c FB18     	 add r3,r7,r3
 1495 000e 0022     	 mov r2,#0
 1496 0010 1A70     	 strb r2,[r3]
 674:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
 1497              	 .loc 2 674 0
 1498 0012 1623     	 mov r3,#22
 1499 0014 FB18     	 add r3,r7,r3
 1500 0016 0022     	 mov r2,#0
 1501 0018 1A70     	 strb r2,[r3]
 675:../Dave/Generated/CAPTURE/capture.c ****   uint32_t period_val = 0U;
 1502              	 .loc 2 675 0
 1503 001a 0023     	 mov r3,#0
 1504 001c 3B61     	 str r3,[r7,#16]
 676:../Dave/Generated/CAPTURE/capture.c ****   uint32_t duty_val = 0U;
 1505              	 .loc 2 676 0
 1506 001e 0023     	 mov r3,#0
 1507 0020 FB60     	 str r3,[r7,#12]
 677:../Dave/Generated/CAPTURE/capture.c **** 
 678:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetPeriod:handler NULL", (handler != NULL));
 679:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetPeriod:NULL data pointer", (signal_period != NULL));
 680:../Dave/Generated/CAPTURE/capture.c **** 
 681:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 682:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 1508              	 .loc 2 682 0
 1509 0022 7B68     	 ldr r3,[r7,#4]
 1510 0024 3122     	 mov r2,#49
 1511 0026 9B5C     	 ldrb r3,[r3,r2]
 1512 0028 002B     	 cmp r3,#0
 1513 002a 4ED0     	 beq .L74
 683:../Dave/Generated/CAPTURE/capture.c ****   {
 684:../Dave/Generated/CAPTURE/capture.c ****     if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 1514              	 .loc 2 684 0
 1515 002c 7B68     	 ldr r3,[r7,#4]
 1516 002e 2E22     	 mov r2,#46
 1517 0030 9B5C     	 ldrb r3,[r3,r2]
 1518 0032 002B     	 cmp r3,#0
 1519 0034 04D0     	 beq .L75
 685:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 1520              	 .loc 2 685 0 discriminator 1
 1521 0036 7B68     	 ldr r3,[r7,#4]
 1522 0038 2E22     	 mov r2,#46
 1523 003a 9B5C     	 ldrb r3,[r3,r2]
 684:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 1524              	 .loc 2 684 0 discriminator 1
 1525 003c 032B     	 cmp r3,#3
 1526 003e 3ED1     	 bne .L76
 1527              	.L75:
 686:../Dave/Generated/CAPTURE/capture.c ****     {
 687:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 688:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 1528              	 .loc 2 688 0
 1529 0040 7B68     	 ldr r3,[r7,#4]
 1530 0042 2D22     	 mov r2,#45
 1531 0044 9B5C     	 ldrb r3,[r3,r2]
 1532 0046 002B     	 cmp r3,#0
 1533 0048 29D1     	 bne .L77
 689:../Dave/Generated/CAPTURE/capture.c ****       {
 690:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 1534              	 .loc 2 690 0
 1535 004a 7B68     	 ldr r3,[r7,#4]
 1536 004c 9A69     	 ldr r2,[r3,#24]
 1537 004e 1723     	 mov r3,#23
 1538 0050 FC18     	 add r4,r7,r3
 1539 0052 1023     	 mov r3,#16
 1540 0054 FB18     	 add r3,r7,r3
 1541 0056 101C     	 mov r0,r2
 1542 0058 0021     	 mov r1,#0
 1543 005a 1A1C     	 mov r2,r3
 1544 005c FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 1545 0060 031C     	 mov r3,r0
 1546 0062 2370     	 strb r3,[r4]
 691:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU4_SLICE_CAP_REG_SET_LOW,
 692:../Dave/Generated/CAPTURE/capture.c ****                                                                   &period_val);
 693:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 1547              	 .loc 2 693 0
 1548 0064 7B68     	 ldr r3,[r7,#4]
 1549 0066 9A69     	 ldr r2,[r3,#24]
 1550 0068 1623     	 mov r3,#22
 1551 006a FC18     	 add r4,r7,r3
 1552 006c 0C23     	 mov r3,#12
 1553 006e FB18     	 add r3,r7,r3
 1554 0070 101C     	 mov r0,r2
 1555 0072 0121     	 mov r1,#1
 1556 0074 1A1C     	 mov r2,r3
 1557 0076 FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 1558 007a 031C     	 mov r3,r0
 1559 007c 2370     	 strb r3,[r4]
 694:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
 695:../Dave/Generated/CAPTURE/capture.c ****                                                                    &duty_val);
 696:../Dave/Generated/CAPTURE/capture.c **** 
 697:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &period_val, true);
 1560              	 .loc 2 697 0
 1561 007e 7A68     	 ldr r2,[r7,#4]
 1562 0080 1023     	 mov r3,#16
 1563 0082 FB18     	 add r3,r7,r3
 1564 0084 101C     	 mov r0,r2
 1565 0086 191C     	 mov r1,r3
 1566 0088 0122     	 mov r2,#1
 1567 008a FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 698:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &duty_val, false);
 1568              	 .loc 2 698 0
 1569 008e 7A68     	 ldr r2,[r7,#4]
 1570 0090 0C23     	 mov r3,#12
 1571 0092 FB18     	 add r3,r7,r3
 1572 0094 101C     	 mov r0,r2
 1573 0096 191C     	 mov r1,r3
 1574 0098 0022     	 mov r2,#0
 1575 009a FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 1576              	.L77:
 699:../Dave/Generated/CAPTURE/capture.c ****       }
 700:../Dave/Generated/CAPTURE/capture.c **** #endif
 701:../Dave/Generated/CAPTURE/capture.c **** 
 702:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 703:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 704:../Dave/Generated/CAPTURE/capture.c ****       {
 705:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 706:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU8_SLICE_CAP_REG_SET_LOW,
 707:../Dave/Generated/CAPTURE/capture.c ****                                                                   &period_val);
 708:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 709:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU8_SLICE_CAP_REG_SET_HIGH,
 710:../Dave/Generated/CAPTURE/capture.c ****                                                                    &duty_val);
 711:../Dave/Generated/CAPTURE/capture.c **** 
 712:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &period_val, true);
 713:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &duty_val, false);
 714:../Dave/Generated/CAPTURE/capture.c ****       }
 715:../Dave/Generated/CAPTURE/capture.c **** #endif
 716:../Dave/Generated/CAPTURE/capture.c ****       *signal_period = period_val + duty_val;
 1577              	 .loc 2 716 0
 1578 009e 3A69     	 ldr r2,[r7,#16]
 1579 00a0 FB68     	 ldr r3,[r7,#12]
 1580 00a2 D218     	 add r2,r2,r3
 1581 00a4 3B68     	 ldr r3,[r7]
 1582 00a6 1A60     	 str r2,[r3]
 717:../Dave/Generated/CAPTURE/capture.c **** 
 718:../Dave/Generated/CAPTURE/capture.c ****       if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
 1583              	 .loc 2 718 0
 1584 00a8 1623     	 mov r3,#22
 1585 00aa FB18     	 add r3,r7,r3
 1586 00ac 1B78     	 ldrb r3,[r3]
 1587 00ae 022B     	 cmp r3,#2
 1588 00b0 04D1     	 bne .L78
 719:../Dave/Generated/CAPTURE/capture.c ****       {
 720:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 1589              	 .loc 2 720 0
 1590 00b2 1723     	 mov r3,#23
 1591 00b4 FB18     	 add r3,r7,r3
 1592 00b6 0222     	 mov r2,#2
 1593 00b8 1A70     	 strb r2,[r3]
 718:../Dave/Generated/CAPTURE/capture.c ****       {
 1594              	 .loc 2 718 0
 1595 00ba 05E0     	 b .L79
 1596              	.L78:
 1597 00bc 04E0     	 b .L79
 1598              	.L76:
 721:../Dave/Generated/CAPTURE/capture.c ****       }
 722:../Dave/Generated/CAPTURE/capture.c ****     }
 723:../Dave/Generated/CAPTURE/capture.c ****     else
 724:../Dave/Generated/CAPTURE/capture.c ****     {
 725:../Dave/Generated/CAPTURE/capture.c ****       status = CAPTURE_STATUS_INVALID_CONFIG;
 1599              	 .loc 2 725 0
 1600 00be 1723     	 mov r3,#23
 1601 00c0 FB18     	 add r3,r7,r3
 1602 00c2 0322     	 mov r2,#3
 1603 00c4 1A70     	 strb r2,[r3]
 1604 00c6 04E0     	 b .L80
 1605              	.L79:
 1606 00c8 03E0     	 b .L80
 1607              	.L74:
 726:../Dave/Generated/CAPTURE/capture.c ****     }
 727:../Dave/Generated/CAPTURE/capture.c ****   }
 728:../Dave/Generated/CAPTURE/capture.c ****   else
 729:../Dave/Generated/CAPTURE/capture.c ****   {
 730:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_FAILURE;
 1608              	 .loc 2 730 0
 1609 00ca 1723     	 mov r3,#23
 1610 00cc FB18     	 add r3,r7,r3
 1611 00ce 0122     	 mov r2,#1
 1612 00d0 1A70     	 strb r2,[r3]
 1613              	.L80:
 731:../Dave/Generated/CAPTURE/capture.c ****   }
 732:../Dave/Generated/CAPTURE/capture.c **** 
 733:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 1614              	 .loc 2 733 0
 1615 00d2 1723     	 mov r3,#23
 1616 00d4 FB18     	 add r3,r7,r3
 1617 00d6 1B78     	 ldrb r3,[r3]
 734:../Dave/Generated/CAPTURE/capture.c **** }
 1618              	 .loc 2 734 0
 1619 00d8 181C     	 mov r0,r3
 1620 00da BD46     	 mov sp,r7
 1621 00dc 07B0     	 add sp,sp,#28
 1622              	 
 1623 00de 90BD     	 pop {r4,r7,pc}
 1624              	 .cfi_endproc
 1625              	.LFE134:
 1627              	 .section .text.CAPTURE_GetPeriodInNanoSec,"ax",%progbits
 1628              	 .align 2
 1629              	 .global CAPTURE_GetPeriodInNanoSec
 1630              	 .code 16
 1631              	 .thumb_func
 1633              	CAPTURE_GetPeriodInNanoSec:
 1634              	.LFB135:
 735:../Dave/Generated/CAPTURE/capture.c **** 
 736:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_GetPeriodInNanoSec(const CAPTURE_t *const handler,
 737:../Dave/Generated/CAPTURE/capture.c ****                                             uint32_t *const signal_period)
 738:../Dave/Generated/CAPTURE/capture.c **** {
 1635              	 .loc 2 738 0
 1636              	 .cfi_startproc
 1637 0000 90B5     	 push {r4,r7,lr}
 1638              	.LCFI54:
 1639              	 .cfi_def_cfa_offset 12
 1640              	 .cfi_offset 4,-12
 1641              	 .cfi_offset 7,-8
 1642              	 .cfi_offset 14,-4
 1643 0002 87B0     	 sub sp,sp,#28
 1644              	.LCFI55:
 1645              	 .cfi_def_cfa_offset 40
 1646 0004 00AF     	 add r7,sp,#0
 1647              	.LCFI56:
 1648              	 .cfi_def_cfa_register 7
 1649 0006 7860     	 str r0,[r7,#4]
 1650 0008 3960     	 str r1,[r7]
 739:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
 1651              	 .loc 2 739 0
 1652 000a 1723     	 mov r3,#23
 1653 000c FB18     	 add r3,r7,r3
 1654 000e 0022     	 mov r2,#0
 1655 0010 1A70     	 strb r2,[r3]
 740:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
 1656              	 .loc 2 740 0
 1657 0012 1623     	 mov r3,#22
 1658 0014 FB18     	 add r3,r7,r3
 1659 0016 0022     	 mov r2,#0
 1660 0018 1A70     	 strb r2,[r3]
 741:../Dave/Generated/CAPTURE/capture.c ****   uint32_t period_val = 0U;
 1661              	 .loc 2 741 0
 1662 001a 0023     	 mov r3,#0
 1663 001c 3B61     	 str r3,[r7,#16]
 742:../Dave/Generated/CAPTURE/capture.c ****   uint32_t duty_val = 0U;
 1664              	 .loc 2 742 0
 1665 001e 0023     	 mov r3,#0
 1666 0020 FB60     	 str r3,[r7,#12]
 743:../Dave/Generated/CAPTURE/capture.c **** 
 744:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetPeriodInNanoSec:handler NULL", (handler != NULL));
 745:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetPeriodInNanoSec:NULL data pointer", (signal_period != NULL));
 746:../Dave/Generated/CAPTURE/capture.c **** 
 747:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 748:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 1667              	 .loc 2 748 0
 1668 0022 7B68     	 ldr r3,[r7,#4]
 1669 0024 3122     	 mov r2,#49
 1670 0026 9B5C     	 ldrb r3,[r3,r2]
 1671 0028 002B     	 cmp r3,#0
 1672 002a 5ED0     	 beq .L83
 749:../Dave/Generated/CAPTURE/capture.c ****   {
 750:../Dave/Generated/CAPTURE/capture.c ****     if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 1673              	 .loc 2 750 0
 1674 002c 7B68     	 ldr r3,[r7,#4]
 1675 002e 2E22     	 mov r2,#46
 1676 0030 9B5C     	 ldrb r3,[r3,r2]
 1677 0032 002B     	 cmp r3,#0
 1678 0034 04D0     	 beq .L84
 751:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 1679              	 .loc 2 751 0 discriminator 1
 1680 0036 7B68     	 ldr r3,[r7,#4]
 1681 0038 2E22     	 mov r2,#46
 1682 003a 9B5C     	 ldrb r3,[r3,r2]
 750:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 1683              	 .loc 2 750 0 discriminator 1
 1684 003c 032B     	 cmp r3,#3
 1685 003e 4ED1     	 bne .L85
 1686              	.L84:
 752:../Dave/Generated/CAPTURE/capture.c ****     {
 753:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 754:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 1687              	 .loc 2 754 0
 1688 0040 7B68     	 ldr r3,[r7,#4]
 1689 0042 2D22     	 mov r2,#45
 1690 0044 9B5C     	 ldrb r3,[r3,r2]
 1691 0046 002B     	 cmp r3,#0
 1692 0048 39D1     	 bne .L86
 755:../Dave/Generated/CAPTURE/capture.c ****       {
 756:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 1693              	 .loc 2 756 0
 1694 004a 7B68     	 ldr r3,[r7,#4]
 1695 004c 9A69     	 ldr r2,[r3,#24]
 1696 004e 1723     	 mov r3,#23
 1697 0050 FC18     	 add r4,r7,r3
 1698 0052 1023     	 mov r3,#16
 1699 0054 FB18     	 add r3,r7,r3
 1700 0056 101C     	 mov r0,r2
 1701 0058 0021     	 mov r1,#0
 1702 005a 1A1C     	 mov r2,r3
 1703 005c FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 1704 0060 031C     	 mov r3,r0
 1705 0062 2370     	 strb r3,[r4]
 757:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU4_SLICE_CAP_REG_SET_LOW,
 758:../Dave/Generated/CAPTURE/capture.c ****                                                                   &period_val);
 759:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue(handler, &period_val, true);
 1706              	 .loc 2 759 0
 1707 0064 7A68     	 ldr r2,[r7,#4]
 1708 0066 1023     	 mov r3,#16
 1709 0068 FB18     	 add r3,r7,r3
 1710 006a 101C     	 mov r0,r2
 1711 006c 191C     	 mov r1,r3
 1712 006e 0122     	 mov r2,#1
 1713 0070 FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 760:../Dave/Generated/CAPTURE/capture.c ****         period_val = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, period_val);
 1714              	 .loc 2 760 0
 1715 0074 3B69     	 ldr r3,[r7,#16]
 1716 0076 7A68     	 ldr r2,[r7,#4]
 1717 0078 101C     	 mov r0,r2
 1718 007a 191C     	 mov r1,r3
 1719 007c FFF7FEFF 	 bl CAPTURE_lCalculateTimeInNanoSecFromTimerTick
 1720 0080 031C     	 mov r3,r0
 1721 0082 3B61     	 str r3,[r7,#16]
 761:../Dave/Generated/CAPTURE/capture.c **** 
 762:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 1722              	 .loc 2 762 0
 1723 0084 7B68     	 ldr r3,[r7,#4]
 1724 0086 9A69     	 ldr r2,[r3,#24]
 1725 0088 1623     	 mov r3,#22
 1726 008a FC18     	 add r4,r7,r3
 1727 008c 0C23     	 mov r3,#12
 1728 008e FB18     	 add r3,r7,r3
 1729 0090 101C     	 mov r0,r2
 1730 0092 0121     	 mov r1,#1
 1731 0094 1A1C     	 mov r2,r3
 1732 0096 FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 1733 009a 031C     	 mov r3,r0
 1734 009c 2370     	 strb r3,[r4]
 763:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
 764:../Dave/Generated/CAPTURE/capture.c ****                                                                    &duty_val);
 765:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue(handler, &duty_val, false);
 1735              	 .loc 2 765 0
 1736 009e 7A68     	 ldr r2,[r7,#4]
 1737 00a0 0C23     	 mov r3,#12
 1738 00a2 FB18     	 add r3,r7,r3
 1739 00a4 101C     	 mov r0,r2
 1740 00a6 191C     	 mov r1,r3
 1741 00a8 0022     	 mov r2,#0
 1742 00aa FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 766:../Dave/Generated/CAPTURE/capture.c ****         duty_val = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, duty_val);
 1743              	 .loc 2 766 0
 1744 00ae FB68     	 ldr r3,[r7,#12]
 1745 00b0 7A68     	 ldr r2,[r7,#4]
 1746 00b2 101C     	 mov r0,r2
 1747 00b4 191C     	 mov r1,r3
 1748 00b6 FFF7FEFF 	 bl CAPTURE_lCalculateTimeInNanoSecFromTimerTick
 1749 00ba 031C     	 mov r3,r0
 1750 00bc FB60     	 str r3,[r7,#12]
 1751              	.L86:
 767:../Dave/Generated/CAPTURE/capture.c ****       }
 768:../Dave/Generated/CAPTURE/capture.c **** #endif
 769:../Dave/Generated/CAPTURE/capture.c **** 
 770:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 771:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 772:../Dave/Generated/CAPTURE/capture.c ****       {
 773:../Dave/Generated/CAPTURE/capture.c ****         status =  CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 774:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU8_SLICE_CAP_REG_SET_LOW,
 775:../Dave/Generated/CAPTURE/capture.c ****                                                                    &period_val);
 776:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue(handler, &period_val, true);
 777:../Dave/Generated/CAPTURE/capture.c ****         period_val = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, period_val);
 778:../Dave/Generated/CAPTURE/capture.c **** 
 779:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 780:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU8_SLICE_CAP_REG_SET_HIGH,
 781:../Dave/Generated/CAPTURE/capture.c ****                                                                    &duty_val);
 782:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue(handler, &duty_val, false);
 783:../Dave/Generated/CAPTURE/capture.c ****         duty_val = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, duty_val);
 784:../Dave/Generated/CAPTURE/capture.c ****       }
 785:../Dave/Generated/CAPTURE/capture.c **** #endif
 786:../Dave/Generated/CAPTURE/capture.c ****       *signal_period = period_val + duty_val;
 1752              	 .loc 2 786 0
 1753 00be 3A69     	 ldr r2,[r7,#16]
 1754 00c0 FB68     	 ldr r3,[r7,#12]
 1755 00c2 D218     	 add r2,r2,r3
 1756 00c4 3B68     	 ldr r3,[r7]
 1757 00c6 1A60     	 str r2,[r3]
 787:../Dave/Generated/CAPTURE/capture.c **** 
 788:../Dave/Generated/CAPTURE/capture.c ****       if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
 1758              	 .loc 2 788 0
 1759 00c8 1623     	 mov r3,#22
 1760 00ca FB18     	 add r3,r7,r3
 1761 00cc 1B78     	 ldrb r3,[r3]
 1762 00ce 022B     	 cmp r3,#2
 1763 00d0 04D1     	 bne .L87
 789:../Dave/Generated/CAPTURE/capture.c ****       {
 790:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 1764              	 .loc 2 790 0
 1765 00d2 1723     	 mov r3,#23
 1766 00d4 FB18     	 add r3,r7,r3
 1767 00d6 0222     	 mov r2,#2
 1768 00d8 1A70     	 strb r2,[r3]
 788:../Dave/Generated/CAPTURE/capture.c ****       {
 1769              	 .loc 2 788 0
 1770 00da 05E0     	 b .L88
 1771              	.L87:
 1772 00dc 04E0     	 b .L88
 1773              	.L85:
 791:../Dave/Generated/CAPTURE/capture.c ****       }
 792:../Dave/Generated/CAPTURE/capture.c ****     }
 793:../Dave/Generated/CAPTURE/capture.c ****     else
 794:../Dave/Generated/CAPTURE/capture.c ****     {
 795:../Dave/Generated/CAPTURE/capture.c ****       status = CAPTURE_STATUS_INVALID_CONFIG;
 1774              	 .loc 2 795 0
 1775 00de 1723     	 mov r3,#23
 1776 00e0 FB18     	 add r3,r7,r3
 1777 00e2 0322     	 mov r2,#3
 1778 00e4 1A70     	 strb r2,[r3]
 1779 00e6 04E0     	 b .L89
 1780              	.L88:
 1781 00e8 03E0     	 b .L89
 1782              	.L83:
 796:../Dave/Generated/CAPTURE/capture.c ****     }
 797:../Dave/Generated/CAPTURE/capture.c ****   }
 798:../Dave/Generated/CAPTURE/capture.c ****   else
 799:../Dave/Generated/CAPTURE/capture.c ****   {
 800:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_FAILURE;
 1783              	 .loc 2 800 0
 1784 00ea 1723     	 mov r3,#23
 1785 00ec FB18     	 add r3,r7,r3
 1786 00ee 0122     	 mov r2,#1
 1787 00f0 1A70     	 strb r2,[r3]
 1788              	.L89:
 801:../Dave/Generated/CAPTURE/capture.c ****   }
 802:../Dave/Generated/CAPTURE/capture.c **** 
 803:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 1789              	 .loc 2 803 0
 1790 00f2 1723     	 mov r3,#23
 1791 00f4 FB18     	 add r3,r7,r3
 1792 00f6 1B78     	 ldrb r3,[r3]
 804:../Dave/Generated/CAPTURE/capture.c **** }
 1793              	 .loc 2 804 0
 1794 00f8 181C     	 mov r0,r3
 1795 00fa BD46     	 mov sp,r7
 1796 00fc 07B0     	 add sp,sp,#28
 1797              	 
 1798 00fe 90BD     	 pop {r4,r7,pc}
 1799              	 .cfi_endproc
 1800              	.LFE135:
 1802              	 .section .text.CAPTURE_GetPeriodDutyCycle,"ax",%progbits
 1803              	 .align 2
 1804              	 .global CAPTURE_GetPeriodDutyCycle
 1805              	 .code 16
 1806              	 .thumb_func
 1808              	CAPTURE_GetPeriodDutyCycle:
 1809              	.LFB136:
 805:../Dave/Generated/CAPTURE/capture.c **** 
 806:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_GetPeriodDutyCycle(const CAPTURE_t *const handler,
 807:../Dave/Generated/CAPTURE/capture.c ****                                             uint32_t *const signal_period,
 808:../Dave/Generated/CAPTURE/capture.c ****                                             uint32_t *const signal_duty)
 809:../Dave/Generated/CAPTURE/capture.c **** {
 1810              	 .loc 2 809 0
 1811              	 .cfi_startproc
 1812 0000 90B5     	 push {r4,r7,lr}
 1813              	.LCFI57:
 1814              	 .cfi_def_cfa_offset 12
 1815              	 .cfi_offset 4,-12
 1816              	 .cfi_offset 7,-8
 1817              	 .cfi_offset 14,-4
 1818 0002 89B0     	 sub sp,sp,#36
 1819              	.LCFI58:
 1820              	 .cfi_def_cfa_offset 48
 1821 0004 00AF     	 add r7,sp,#0
 1822              	.LCFI59:
 1823              	 .cfi_def_cfa_register 7
 1824 0006 F860     	 str r0,[r7,#12]
 1825 0008 B960     	 str r1,[r7,#8]
 1826 000a 7A60     	 str r2,[r7,#4]
 810:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
 1827              	 .loc 2 810 0
 1828 000c 1F23     	 mov r3,#31
 1829 000e FB18     	 add r3,r7,r3
 1830 0010 0022     	 mov r2,#0
 1831 0012 1A70     	 strb r2,[r3]
 811:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
 1832              	 .loc 2 811 0
 1833 0014 1E23     	 mov r3,#30
 1834 0016 FB18     	 add r3,r7,r3
 1835 0018 0022     	 mov r2,#0
 1836 001a 1A70     	 strb r2,[r3]
 812:../Dave/Generated/CAPTURE/capture.c ****   uint32_t period_val = 0U;
 1837              	 .loc 2 812 0
 1838 001c 0023     	 mov r3,#0
 1839 001e BB61     	 str r3,[r7,#24]
 813:../Dave/Generated/CAPTURE/capture.c ****   uint32_t duty_val = 0U;
 1840              	 .loc 2 813 0
 1841 0020 0023     	 mov r3,#0
 1842 0022 7B61     	 str r3,[r7,#20]
 814:../Dave/Generated/CAPTURE/capture.c **** 
 815:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetPeriodDutyCycle:handler NULL", (handler != NULL));
 816:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetPeriodDutyCycle:NULL data pointer", (signal_period != NULL));
 817:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetPeriodDutyCycle:NULL data pointer", (signal_duty != NULL));
 818:../Dave/Generated/CAPTURE/capture.c **** 
 819:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 820:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 1843              	 .loc 2 820 0
 1844 0024 FB68     	 ldr r3,[r7,#12]
 1845 0026 3122     	 mov r2,#49
 1846 0028 9B5C     	 ldrb r3,[r3,r2]
 1847 002a 002B     	 cmp r3,#0
 1848 002c 53D0     	 beq .L92
 821:../Dave/Generated/CAPTURE/capture.c ****   {
 822:../Dave/Generated/CAPTURE/capture.c ****     if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 1849              	 .loc 2 822 0
 1850 002e FB68     	 ldr r3,[r7,#12]
 1851 0030 2E22     	 mov r2,#46
 1852 0032 9B5C     	 ldrb r3,[r3,r2]
 1853 0034 002B     	 cmp r3,#0
 1854 0036 04D0     	 beq .L93
 823:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 1855              	 .loc 2 823 0 discriminator 1
 1856 0038 FB68     	 ldr r3,[r7,#12]
 1857 003a 2E22     	 mov r2,#46
 1858 003c 9B5C     	 ldrb r3,[r3,r2]
 822:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 1859              	 .loc 2 822 0 discriminator 1
 1860 003e 032B     	 cmp r3,#3
 1861 0040 43D1     	 bne .L94
 1862              	.L93:
 824:../Dave/Generated/CAPTURE/capture.c ****     {
 825:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 826:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 1863              	 .loc 2 826 0
 1864 0042 FB68     	 ldr r3,[r7,#12]
 1865 0044 2D22     	 mov r2,#45
 1866 0046 9B5C     	 ldrb r3,[r3,r2]
 1867 0048 002B     	 cmp r3,#0
 1868 004a 29D1     	 bne .L95
 827:../Dave/Generated/CAPTURE/capture.c ****       {
 828:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 1869              	 .loc 2 828 0
 1870 004c FB68     	 ldr r3,[r7,#12]
 1871 004e 9A69     	 ldr r2,[r3,#24]
 1872 0050 1F23     	 mov r3,#31
 1873 0052 FC18     	 add r4,r7,r3
 1874 0054 1823     	 mov r3,#24
 1875 0056 FB18     	 add r3,r7,r3
 1876 0058 101C     	 mov r0,r2
 1877 005a 0021     	 mov r1,#0
 1878 005c 1A1C     	 mov r2,r3
 1879 005e FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 1880 0062 031C     	 mov r3,r0
 1881 0064 2370     	 strb r3,[r4]
 829:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU4_SLICE_CAP_REG_SET_LOW,
 830:../Dave/Generated/CAPTURE/capture.c ****                                                                   &period_val);
 831:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &period_val, true);
 1882              	 .loc 2 831 0
 1883 0066 FA68     	 ldr r2,[r7,#12]
 1884 0068 1823     	 mov r3,#24
 1885 006a FB18     	 add r3,r7,r3
 1886 006c 101C     	 mov r0,r2
 1887 006e 191C     	 mov r1,r3
 1888 0070 0122     	 mov r2,#1
 1889 0072 FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 832:../Dave/Generated/CAPTURE/capture.c **** 
 833:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 1890              	 .loc 2 833 0
 1891 0076 FB68     	 ldr r3,[r7,#12]
 1892 0078 9A69     	 ldr r2,[r3,#24]
 1893 007a 1E23     	 mov r3,#30
 1894 007c FC18     	 add r4,r7,r3
 1895 007e 1423     	 mov r3,#20
 1896 0080 FB18     	 add r3,r7,r3
 1897 0082 101C     	 mov r0,r2
 1898 0084 0121     	 mov r1,#1
 1899 0086 1A1C     	 mov r2,r3
 1900 0088 FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 1901 008c 031C     	 mov r3,r0
 1902 008e 2370     	 strb r3,[r4]
 834:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
 835:../Dave/Generated/CAPTURE/capture.c ****                                                                    &duty_val);
 836:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &duty_val, false);
 1903              	 .loc 2 836 0
 1904 0090 FA68     	 ldr r2,[r7,#12]
 1905 0092 1423     	 mov r3,#20
 1906 0094 FB18     	 add r3,r7,r3
 1907 0096 101C     	 mov r0,r2
 1908 0098 191C     	 mov r1,r3
 1909 009a 0022     	 mov r2,#0
 1910 009c FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 1911              	.L95:
 837:../Dave/Generated/CAPTURE/capture.c ****       }
 838:../Dave/Generated/CAPTURE/capture.c **** #endif
 839:../Dave/Generated/CAPTURE/capture.c **** 
 840:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 841:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 842:../Dave/Generated/CAPTURE/capture.c ****       {
 843:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 844:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU8_SLICE_CAP_REG_SET_LOW,
 845:../Dave/Generated/CAPTURE/capture.c ****                                                                   &period_val);
 846:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &period_val, true);
 847:../Dave/Generated/CAPTURE/capture.c **** 
 848:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 849:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU8_SLICE_CAP_REG_SET_HIGH,
 850:../Dave/Generated/CAPTURE/capture.c ****                                                                    &duty_val);
 851:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &duty_val, false);
 852:../Dave/Generated/CAPTURE/capture.c ****       }
 853:../Dave/Generated/CAPTURE/capture.c **** #endif
 854:../Dave/Generated/CAPTURE/capture.c **** 
 855:../Dave/Generated/CAPTURE/capture.c ****       period_val = period_val + duty_val;
 1912              	 .loc 2 855 0
 1913 00a0 BA69     	 ldr r2,[r7,#24]
 1914 00a2 7B69     	 ldr r3,[r7,#20]
 1915 00a4 D318     	 add r3,r2,r3
 1916 00a6 BB61     	 str r3,[r7,#24]
 856:../Dave/Generated/CAPTURE/capture.c ****       *signal_duty = duty_val;
 1917              	 .loc 2 856 0
 1918 00a8 7A69     	 ldr r2,[r7,#20]
 1919 00aa 7B68     	 ldr r3,[r7,#4]
 1920 00ac 1A60     	 str r2,[r3]
 857:../Dave/Generated/CAPTURE/capture.c ****       *signal_period = period_val;
 1921              	 .loc 2 857 0
 1922 00ae BA69     	 ldr r2,[r7,#24]
 1923 00b0 BB68     	 ldr r3,[r7,#8]
 1924 00b2 1A60     	 str r2,[r3]
 858:../Dave/Generated/CAPTURE/capture.c **** 
 859:../Dave/Generated/CAPTURE/capture.c ****       if (status1 == CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED)
 1925              	 .loc 2 859 0
 1926 00b4 1E23     	 mov r3,#30
 1927 00b6 FB18     	 add r3,r7,r3
 1928 00b8 1B78     	 ldrb r3,[r3]
 1929 00ba 022B     	 cmp r3,#2
 1930 00bc 04D1     	 bne .L96
 860:../Dave/Generated/CAPTURE/capture.c ****       {
 861:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 1931              	 .loc 2 861 0
 1932 00be 1F23     	 mov r3,#31
 1933 00c0 FB18     	 add r3,r7,r3
 1934 00c2 0222     	 mov r2,#2
 1935 00c4 1A70     	 strb r2,[r3]
 859:../Dave/Generated/CAPTURE/capture.c ****       {
 1936              	 .loc 2 859 0
 1937 00c6 05E0     	 b .L97
 1938              	.L96:
 1939 00c8 04E0     	 b .L97
 1940              	.L94:
 862:../Dave/Generated/CAPTURE/capture.c ****       }
 863:../Dave/Generated/CAPTURE/capture.c ****     }
 864:../Dave/Generated/CAPTURE/capture.c ****     else
 865:../Dave/Generated/CAPTURE/capture.c ****     {
 866:../Dave/Generated/CAPTURE/capture.c ****       status = CAPTURE_STATUS_INVALID_CONFIG;
 1941              	 .loc 2 866 0
 1942 00ca 1F23     	 mov r3,#31
 1943 00cc FB18     	 add r3,r7,r3
 1944 00ce 0322     	 mov r2,#3
 1945 00d0 1A70     	 strb r2,[r3]
 1946 00d2 04E0     	 b .L98
 1947              	.L97:
 1948 00d4 03E0     	 b .L98
 1949              	.L92:
 867:../Dave/Generated/CAPTURE/capture.c ****     }
 868:../Dave/Generated/CAPTURE/capture.c ****   }
 869:../Dave/Generated/CAPTURE/capture.c ****   else
 870:../Dave/Generated/CAPTURE/capture.c ****   {
 871:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_FAILURE;
 1950              	 .loc 2 871 0
 1951 00d6 1F23     	 mov r3,#31
 1952 00d8 FB18     	 add r3,r7,r3
 1953 00da 0122     	 mov r2,#1
 1954 00dc 1A70     	 strb r2,[r3]
 1955              	.L98:
 872:../Dave/Generated/CAPTURE/capture.c ****   }
 873:../Dave/Generated/CAPTURE/capture.c **** 
 874:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 1956              	 .loc 2 874 0
 1957 00de 1F23     	 mov r3,#31
 1958 00e0 FB18     	 add r3,r7,r3
 1959 00e2 1B78     	 ldrb r3,[r3]
 875:../Dave/Generated/CAPTURE/capture.c **** }
 1960              	 .loc 2 875 0
 1961 00e4 181C     	 mov r0,r3
 1962 00e6 BD46     	 mov sp,r7
 1963 00e8 09B0     	 add sp,sp,#36
 1964              	 
 1965 00ea 90BD     	 pop {r4,r7,pc}
 1966              	 .cfi_endproc
 1967              	.LFE136:
 1969              	 .section .text.CAPTURE_GetPeriodInNanoSecDutyCycleInPercentage,"ax",%progbits
 1970              	 .align 2
 1971              	 .global CAPTURE_GetPeriodInNanoSecDutyCycleInPercentage
 1972              	 .code 16
 1973              	 .thumb_func
 1975              	CAPTURE_GetPeriodInNanoSecDutyCycleInPercentage:
 1976              	.LFB137:
 876:../Dave/Generated/CAPTURE/capture.c **** 
 877:../Dave/Generated/CAPTURE/capture.c **** CAPTURE_STATUS_t CAPTURE_GetPeriodInNanoSecDutyCycleInPercentage(const CAPTURE_t *const handler,
 878:../Dave/Generated/CAPTURE/capture.c ****                                                                  uint32_t *const signal_period,
 879:../Dave/Generated/CAPTURE/capture.c ****                                                                  uint32_t *const signal_duty)
 880:../Dave/Generated/CAPTURE/capture.c **** {
 1977              	 .loc 2 880 0
 1978              	 .cfi_startproc
 1979 0000 90B5     	 push {r4,r7,lr}
 1980              	.LCFI60:
 1981              	 .cfi_def_cfa_offset 12
 1982              	 .cfi_offset 4,-12
 1983              	 .cfi_offset 7,-8
 1984              	 .cfi_offset 14,-4
 1985 0002 8DB0     	 sub sp,sp,#52
 1986              	.LCFI61:
 1987              	 .cfi_def_cfa_offset 64
 1988 0004 00AF     	 add r7,sp,#0
 1989              	.LCFI62:
 1990              	 .cfi_def_cfa_register 7
 1991 0006 F860     	 str r0,[r7,#12]
 1992 0008 B960     	 str r1,[r7,#8]
 1993 000a 7A60     	 str r2,[r7,#4]
 881:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status = CAPTURE_STATUS_SUCCESS;
 1994              	 .loc 2 881 0
 1995 000c 2F23     	 mov r3,#47
 1996 000e FB18     	 add r3,r7,r3
 1997 0010 0022     	 mov r2,#0
 1998 0012 1A70     	 strb r2,[r3]
 882:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t status1 = CAPTURE_STATUS_SUCCESS;
 1999              	 .loc 2 882 0
 2000 0014 2E23     	 mov r3,#46
 2001 0016 FB18     	 add r3,r7,r3
 2002 0018 0022     	 mov r2,#0
 2003 001a 1A70     	 strb r2,[r3]
 883:../Dave/Generated/CAPTURE/capture.c ****   uint32_t period_val = 0U;
 2004              	 .loc 2 883 0
 2005 001c 0023     	 mov r3,#0
 2006 001e BB61     	 str r3,[r7,#24]
 884:../Dave/Generated/CAPTURE/capture.c ****   uint32_t duty_val = 0U;
 2007              	 .loc 2 884 0
 2008 0020 0023     	 mov r3,#0
 2009 0022 7B61     	 str r3,[r7,#20]
 885:../Dave/Generated/CAPTURE/capture.c ****   uint32_t period_val_nanosec = 0U;
 2010              	 .loc 2 885 0
 2011 0024 0023     	 mov r3,#0
 2012 0026 BB62     	 str r3,[r7,#40]
 886:../Dave/Generated/CAPTURE/capture.c ****   uint32_t duty_val_nanosec = 0U;
 2013              	 .loc 2 886 0
 2014 0028 0023     	 mov r3,#0
 2015 002a 7B62     	 str r3,[r7,#36]
 887:../Dave/Generated/CAPTURE/capture.c ****   uint32_t norm_period_val = 0U;
 2016              	 .loc 2 887 0
 2017 002c 0023     	 mov r3,#0
 2018 002e 3B62     	 str r3,[r7,#32]
 888:../Dave/Generated/CAPTURE/capture.c **** 
 889:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetPeriodInNanoSecDutyCycleInPercentage:handler NULL", (handler != NULL));
 890:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetPeriodInNanoSecDutyCycleInPercentage:NULL data pointer", (signal_period !
 891:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_GetPeriodInNanoSecDutyCycleInPercentage:NULL data pointer", (signal_duty != 
 892:../Dave/Generated/CAPTURE/capture.c **** 
 893:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
 894:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->initialized)
 2019              	 .loc 2 894 0
 2020 0030 FB68     	 ldr r3,[r7,#12]
 2021 0032 3122     	 mov r2,#49
 2022 0034 9B5C     	 ldrb r3,[r3,r2]
 2023 0036 002B     	 cmp r3,#0
 2024 0038 00D1     	 bne .LCB1800
 2025 003a 9CE0     	 b .L101
 2026              	.LCB1800:
 895:../Dave/Generated/CAPTURE/capture.c ****   {
 896:../Dave/Generated/CAPTURE/capture.c ****     if ((handler->capture_edge_config == CAPTURE_EDGE_RISE_TO_RISE) ||
 2027              	 .loc 2 896 0
 2028 003c FB68     	 ldr r3,[r7,#12]
 2029 003e 2E22     	 mov r2,#46
 2030 0040 9B5C     	 ldrb r3,[r3,r2]
 2031 0042 002B     	 cmp r3,#0
 2032 0044 05D0     	 beq .L102
 897:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 2033              	 .loc 2 897 0 discriminator 1
 2034 0046 FB68     	 ldr r3,[r7,#12]
 2035 0048 2E22     	 mov r2,#46
 2036 004a 9B5C     	 ldrb r3,[r3,r2]
 896:../Dave/Generated/CAPTURE/capture.c ****         (handler->capture_edge_config == CAPTURE_EDGE_FALL_TO_FALL))
 2037              	 .loc 2 896 0 discriminator 1
 2038 004c 032B     	 cmp r3,#3
 2039 004e 00D0     	 beq .LCB1810
 2040 0050 8BE0     	 b .L103
 2041              	.LCB1810:
 2042              	.L102:
 898:../Dave/Generated/CAPTURE/capture.c ****     {
 899:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 900:../Dave/Generated/CAPTURE/capture.c ****       if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 2043              	 .loc 2 900 0
 2044 0052 FB68     	 ldr r3,[r7,#12]
 2045 0054 2D22     	 mov r2,#45
 2046 0056 9B5C     	 ldrb r3,[r3,r2]
 2047 0058 002B     	 cmp r3,#0
 2048 005a 39D1     	 bne .L104
 901:../Dave/Generated/CAPTURE/capture.c ****       {
 902:../Dave/Generated/CAPTURE/capture.c ****         status = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 2049              	 .loc 2 902 0
 2050 005c FB68     	 ldr r3,[r7,#12]
 2051 005e 9A69     	 ldr r2,[r3,#24]
 2052 0060 2F23     	 mov r3,#47
 2053 0062 FC18     	 add r4,r7,r3
 2054 0064 1823     	 mov r3,#24
 2055 0066 FB18     	 add r3,r7,r3
 2056 0068 101C     	 mov r0,r2
 2057 006a 0021     	 mov r1,#0
 2058 006c 1A1C     	 mov r2,r3
 2059 006e FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 2060 0072 031C     	 mov r3,r0
 2061 0074 2370     	 strb r3,[r4]
 903:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU4_SLICE_CAP_REG_SET_LOW,
 904:../Dave/Generated/CAPTURE/capture.c ****                                                                   &period_val);
 905:../Dave/Generated/CAPTURE/capture.c **** 
 906:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &period_val, true);
 2062              	 .loc 2 906 0
 2063 0076 FA68     	 ldr r2,[r7,#12]
 2064 0078 1823     	 mov r3,#24
 2065 007a FB18     	 add r3,r7,r3
 2066 007c 101C     	 mov r0,r2
 2067 007e 191C     	 mov r1,r3
 2068 0080 0122     	 mov r2,#1
 2069 0082 FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 907:../Dave/Generated/CAPTURE/capture.c ****         period_val_nanosec = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, period_val);
 2070              	 .loc 2 907 0
 2071 0086 BB69     	 ldr r3,[r7,#24]
 2072 0088 FA68     	 ldr r2,[r7,#12]
 2073 008a 101C     	 mov r0,r2
 2074 008c 191C     	 mov r1,r3
 2075 008e FFF7FEFF 	 bl CAPTURE_lCalculateTimeInNanoSecFromTimerTick
 2076 0092 031C     	 mov r3,r0
 2077 0094 BB62     	 str r3,[r7,#40]
 908:../Dave/Generated/CAPTURE/capture.c **** 
 909:../Dave/Generated/CAPTURE/capture.c **** 
 910:../Dave/Generated/CAPTURE/capture.c ****         status1 = CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(handler->ccu4_slice_ptr,
 2078              	 .loc 2 910 0
 2079 0096 FB68     	 ldr r3,[r7,#12]
 2080 0098 9A69     	 ldr r2,[r3,#24]
 2081 009a 2E23     	 mov r3,#46
 2082 009c FC18     	 add r4,r7,r3
 2083 009e 1423     	 mov r3,#20
 2084 00a0 FB18     	 add r3,r7,r3
 2085 00a2 101C     	 mov r0,r2
 2086 00a4 0121     	 mov r1,#1
 2087 00a6 1A1C     	 mov r2,r3
 2088 00a8 FFF7FEFF 	 bl CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
 2089 00ac 031C     	 mov r3,r0
 2090 00ae 2370     	 strb r3,[r4]
 911:../Dave/Generated/CAPTURE/capture.c ****                                                                    XMC_CCU4_SLICE_CAP_REG_SET_HIGH,
 912:../Dave/Generated/CAPTURE/capture.c ****                                                                    &duty_val);
 913:../Dave/Generated/CAPTURE/capture.c **** 
 914:../Dave/Generated/CAPTURE/capture.c ****         CAPTURE_lCalculateTimeTickFromTimerValue (handler, &duty_val, false);
 2091              	 .loc 2 914 0
 2092 00b0 FA68     	 ldr r2,[r7,#12]
 2093 00b2 1423     	 mov r3,#20
 2094 00b4 FB18     	 add r3,r7,r3
 2095 00b6 101C     	 mov r0,r2
 2096 00b8 191C     	 mov r1,r3
 2097 00ba 0022     	 mov r2,#0
 2098 00bc FFF7FEFF 	 bl CAPTURE_lCalculateTimeTickFromTimerValue
 915:../Dave/Generated/CAPTURE/capture.c ****         duty_val_nanosec = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, duty_val);
 2099              	 .loc 2 915 0
 2100 00c0 7B69     	 ldr r3,[r7,#20]
 2101 00c2 FA68     	 ldr r2,[r7,#12]
 2102 00c4 101C     	 mov r0,r2
 2103 00c6 191C     	 mov r1,r3
 2104 00c8 FFF7FEFF 	 bl CAPTURE_lCalculateTimeInNanoSecFromTimerTick
 2105 00cc 031C     	 mov r3,r0
 2106 00ce 7B62     	 str r3,[r7,#36]
 2107              	.L104:
 916:../Dave/Generated/CAPTURE/capture.c **** 
 917:../Dave/Generated/CAPTURE/capture.c ****       }
 918:../Dave/Generated/CAPTURE/capture.c **** #endif
 919:../Dave/Generated/CAPTURE/capture.c **** 
 920:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
 921:../Dave/Generated/CAPTURE/capture.c ****      if (CAPTURE_MODULE_CCU8 == handler->capture_module)
 922:../Dave/Generated/CAPTURE/capture.c ****      {
 923:../Dave/Generated/CAPTURE/capture.c ****        status = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 924:../Dave/Generated/CAPTURE/capture.c ****                                                                  XMC_CCU8_SLICE_CAP_REG_SET_LOW,
 925:../Dave/Generated/CAPTURE/capture.c ****                                                                  &period_val);
 926:../Dave/Generated/CAPTURE/capture.c **** 
 927:../Dave/Generated/CAPTURE/capture.c ****        CAPTURE_lCalculateTimeTickFromTimerValue (handler, &period_val, true);
 928:../Dave/Generated/CAPTURE/capture.c ****        period_val_nanosec = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, period_val);
 929:../Dave/Generated/CAPTURE/capture.c **** 
 930:../Dave/Generated/CAPTURE/capture.c **** 
 931:../Dave/Generated/CAPTURE/capture.c ****        status1 = CAPTURE_CCU8_lSLICE_GetLastestCapturedTimerValue(handler->ccu8_slice_ptr,
 932:../Dave/Generated/CAPTURE/capture.c ****                                                                   XMC_CCU8_SLICE_CAP_REG_SET_HIGH,
 933:../Dave/Generated/CAPTURE/capture.c ****                                                                   &duty_val);
 934:../Dave/Generated/CAPTURE/capture.c ****        CAPTURE_lCalculateTimeTickFromTimerValue (handler, &duty_val, false);
 935:../Dave/Generated/CAPTURE/capture.c ****        duty_val_nanosec = CAPTURE_lCalculateTimeInNanoSecFromTimerTick(handler, duty_val);
 936:../Dave/Generated/CAPTURE/capture.c ****      }
 937:../Dave/Generated/CAPTURE/capture.c **** #endif
 938:../Dave/Generated/CAPTURE/capture.c ****      period_val_nanosec = period_val_nanosec + duty_val_nanosec;
 2108              	 .loc 2 938 0
 2109 00d0 BA6A     	 ldr r2,[r7,#40]
 2110 00d2 7B6A     	 ldr r3,[r7,#36]
 2111 00d4 D318     	 add r3,r2,r3
 2112 00d6 BB62     	 str r3,[r7,#40]
 939:../Dave/Generated/CAPTURE/capture.c ****      *signal_period = period_val_nanosec;
 2113              	 .loc 2 939 0
 2114 00d8 BB68     	 ldr r3,[r7,#8]
 2115 00da BA6A     	 ldr r2,[r7,#40]
 2116 00dc 1A60     	 str r2,[r3]
 940:../Dave/Generated/CAPTURE/capture.c **** 
 941:../Dave/Generated/CAPTURE/capture.c ****      period_val += duty_val;
 2117              	 .loc 2 941 0
 2118 00de BA69     	 ldr r2,[r7,#24]
 2119 00e0 7B69     	 ldr r3,[r7,#20]
 2120 00e2 D318     	 add r3,r2,r3
 2121 00e4 BB61     	 str r3,[r7,#24]
 942:../Dave/Generated/CAPTURE/capture.c **** 
 943:../Dave/Generated/CAPTURE/capture.c ****      norm_period_val = (uint32_t)__CLZ (period_val);
 2122              	 .loc 2 943 0
 2123 00e6 BB69     	 ldr r3,[r7,#24]
 2124 00e8 FB61     	 str r3,[r7,#28]
 2125              	.LBB14:
 2126              	.LBB15:
1089:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   {
 2127              	 .loc 3 1089 0
 2128 00ea FB69     	 ldr r3,[r7,#28]
 2129 00ec 002B     	 cmp r3,#0
 2130 00ee 01D1     	 bne .L105
1091:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
 2131              	 .loc 3 1091 0
 2132 00f0 2023     	 mov r3,#32
 2133 00f2 04E0     	 b .L106
 2134              	.L105:
 2135              	 .loc 3 1093 0
 2136 00f4 F869     	 ldr r0,[r7,#28]
 2137 00f6 FFF7FEFF 	 bl __clzsi2
 2138 00fa 031C     	 mov r3,r0
 2139 00fc DBB2     	 uxtb r3,r3
 2140              	.L106:
 2141              	.LBE15:
 2142              	.LBE14:
 2143              	 .loc 2 943 0
 2144 00fe 3B62     	 str r3,[r7,#32]
 944:../Dave/Generated/CAPTURE/capture.c **** 
 945:../Dave/Generated/CAPTURE/capture.c ****      period_val = period_val << norm_period_val;
 2145              	 .loc 2 945 0
 2146 0100 BA69     	 ldr r2,[r7,#24]
 2147 0102 3B6A     	 ldr r3,[r7,#32]
 2148 0104 9A40     	 lsl r2,r2,r3
 2149 0106 131C     	 mov r3,r2
 2150 0108 BB61     	 str r3,[r7,#24]
 946:../Dave/Generated/CAPTURE/capture.c ****      duty_val = duty_val << norm_period_val;
 2151              	 .loc 2 946 0
 2152 010a 7A69     	 ldr r2,[r7,#20]
 2153 010c 3B6A     	 ldr r3,[r7,#32]
 2154 010e 9A40     	 lsl r2,r2,r3
 2155 0110 131C     	 mov r3,r2
 2156 0112 7B61     	 str r3,[r7,#20]
 947:../Dave/Generated/CAPTURE/capture.c **** 
 948:../Dave/Generated/CAPTURE/capture.c ****      period_val = period_val >> 7U;
 2157              	 .loc 2 948 0
 2158 0114 BB69     	 ldr r3,[r7,#24]
 2159 0116 DB09     	 lsr r3,r3,#7
 2160 0118 BB61     	 str r3,[r7,#24]
 949:../Dave/Generated/CAPTURE/capture.c ****      duty_val = duty_val >> 7U;
 2161              	 .loc 2 949 0
 2162 011a 7B69     	 ldr r3,[r7,#20]
 2163 011c DB09     	 lsr r3,r3,#7
 2164 011e 7B61     	 str r3,[r7,#20]
 950:../Dave/Generated/CAPTURE/capture.c **** 
 951:../Dave/Generated/CAPTURE/capture.c ****      if (period_val > 0U)
 2165              	 .loc 2 951 0
 2166 0120 BB69     	 ldr r3,[r7,#24]
 2167 0122 002B     	 cmp r3,#0
 2168 0124 18D0     	 beq .L107
 952:../Dave/Generated/CAPTURE/capture.c ****      {
 953:../Dave/Generated/CAPTURE/capture.c ****        /* Rounding Positive*/
 954:../Dave/Generated/CAPTURE/capture.c ****        *signal_duty = ((duty_val * 100U) + (period_val >> 1)) / period_val;
 2169              	 .loc 2 954 0
 2170 0126 7B69     	 ldr r3,[r7,#20]
 2171 0128 6422     	 mov r2,#100
 2172 012a 5A43     	 mul r2,r3
 2173 012c BB69     	 ldr r3,[r7,#24]
 2174 012e 5B08     	 lsr r3,r3,#1
 2175 0130 D218     	 add r2,r2,r3
 2176 0132 BB69     	 ldr r3,[r7,#24]
 2177 0134 101C     	 mov r0,r2
 2178 0136 191C     	 mov r1,r3
 2179 0138 FFF7FEFF 	 bl __aeabi_uidiv
 2180 013c 031C     	 mov r3,r0
 2181 013e 1A1C     	 mov r2,r3
 2182 0140 7B68     	 ldr r3,[r7,#4]
 2183 0142 1A60     	 str r2,[r3]
 955:../Dave/Generated/CAPTURE/capture.c ****        if (status1 != CAPTURE_STATUS_SUCCESS)
 2184              	 .loc 2 955 0
 2185 0144 2E23     	 mov r3,#46
 2186 0146 FB18     	 add r3,r7,r3
 2187 0148 1B78     	 ldrb r3,[r3]
 2188 014a 002B     	 cmp r3,#0
 2189 014c 0CD0     	 beq .L109
 956:../Dave/Generated/CAPTURE/capture.c ****        {
 957:../Dave/Generated/CAPTURE/capture.c ****          status = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 2190              	 .loc 2 957 0
 2191 014e 2F23     	 mov r3,#47
 2192 0150 FB18     	 add r3,r7,r3
 2193 0152 0222     	 mov r2,#2
 2194 0154 1A70     	 strb r2,[r3]
 951:../Dave/Generated/CAPTURE/capture.c ****      {
 2195              	 .loc 2 951 0
 2196 0156 0DE0     	 b .L110
 2197              	.L107:
 958:../Dave/Generated/CAPTURE/capture.c ****        }
 959:../Dave/Generated/CAPTURE/capture.c ****      }
 960:../Dave/Generated/CAPTURE/capture.c ****      else
 961:../Dave/Generated/CAPTURE/capture.c ****      {
 962:../Dave/Generated/CAPTURE/capture.c ****        *signal_duty = 0U;
 2198              	 .loc 2 962 0
 2199 0158 7B68     	 ldr r3,[r7,#4]
 2200 015a 0022     	 mov r2,#0
 2201 015c 1A60     	 str r2,[r3]
 963:../Dave/Generated/CAPTURE/capture.c ****        status = CAPTURE_STATUS_FAILURE;
 2202              	 .loc 2 963 0
 2203 015e 2F23     	 mov r3,#47
 2204 0160 FB18     	 add r3,r7,r3
 2205 0162 0122     	 mov r2,#1
 2206 0164 1A70     	 strb r2,[r3]
 951:../Dave/Generated/CAPTURE/capture.c ****      {
 2207              	 .loc 2 951 0
 2208 0166 05E0     	 b .L110
 2209              	.L109:
 951:../Dave/Generated/CAPTURE/capture.c ****      {
 2210              	 .loc 2 951 0 is_stmt 0 discriminator 1
 2211 0168 04E0     	 b .L110
 2212              	.L103:
 964:../Dave/Generated/CAPTURE/capture.c ****      }
 965:../Dave/Generated/CAPTURE/capture.c ****     }
 966:../Dave/Generated/CAPTURE/capture.c ****     else
 967:../Dave/Generated/CAPTURE/capture.c ****     {
 968:../Dave/Generated/CAPTURE/capture.c ****       status = CAPTURE_STATUS_INVALID_CONFIG;
 2213              	 .loc 2 968 0 is_stmt 1
 2214 016a 2F23     	 mov r3,#47
 2215 016c FB18     	 add r3,r7,r3
 2216 016e 0322     	 mov r2,#3
 2217 0170 1A70     	 strb r2,[r3]
 2218 0172 04E0     	 b .L111
 2219              	.L110:
 2220 0174 03E0     	 b .L111
 2221              	.L101:
 969:../Dave/Generated/CAPTURE/capture.c ****     }
 970:../Dave/Generated/CAPTURE/capture.c ****   }
 971:../Dave/Generated/CAPTURE/capture.c ****   else
 972:../Dave/Generated/CAPTURE/capture.c ****   {
 973:../Dave/Generated/CAPTURE/capture.c ****     status = CAPTURE_STATUS_FAILURE;
 2222              	 .loc 2 973 0
 2223 0176 2F23     	 mov r3,#47
 2224 0178 FB18     	 add r3,r7,r3
 2225 017a 0122     	 mov r2,#1
 2226 017c 1A70     	 strb r2,[r3]
 2227              	.L111:
 974:../Dave/Generated/CAPTURE/capture.c ****   }
 975:../Dave/Generated/CAPTURE/capture.c **** 
 976:../Dave/Generated/CAPTURE/capture.c ****   return (status);
 2228              	 .loc 2 976 0
 2229 017e 2F23     	 mov r3,#47
 2230 0180 FB18     	 add r3,r7,r3
 2231 0182 1B78     	 ldrb r3,[r3]
 977:../Dave/Generated/CAPTURE/capture.c **** }
 2232              	 .loc 2 977 0
 2233 0184 181C     	 mov r0,r3
 2234 0186 BD46     	 mov sp,r7
 2235 0188 0DB0     	 add sp,sp,#52
 2236              	 
 2237 018a 90BD     	 pop {r4,r7,pc}
 2238              	 .cfi_endproc
 2239              	.LFE137:
 2241              	 .section .text.CAPTURE_CCU4_lInit,"ax",%progbits
 2242              	 .align 2
 2243              	 .code 16
 2244              	 .thumb_func
 2246              	CAPTURE_CCU4_lInit:
 2247              	.LFB138:
 978:../Dave/Generated/CAPTURE/capture.c **** /**************************************************************************************************
 979:../Dave/Generated/CAPTURE/capture.c **** * PRIVATE API IMPLEMENTATION
 980:../Dave/Generated/CAPTURE/capture.c **** ***************************************************************************************************
 981:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
 982:../Dave/Generated/CAPTURE/capture.c **** static void CAPTURE_CCU4_lInit(const CAPTURE_t *const handler)
 983:../Dave/Generated/CAPTURE/capture.c **** {
 2248              	 .loc 2 983 0
 2249              	 .cfi_startproc
 2250 0000 80B5     	 push {r7,lr}
 2251              	.LCFI63:
 2252              	 .cfi_def_cfa_offset 8
 2253              	 .cfi_offset 7,-8
 2254              	 .cfi_offset 14,-4
 2255 0002 82B0     	 sub sp,sp,#8
 2256              	.LCFI64:
 2257              	 .cfi_def_cfa_offset 16
 2258 0004 00AF     	 add r7,sp,#0
 2259              	.LCFI65:
 2260              	 .cfi_def_cfa_register 7
 2261 0006 7860     	 str r0,[r7,#4]
 984:../Dave/Generated/CAPTURE/capture.c ****   /* Configure the timer with required settings */
 985:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU4_SLICE_CaptureInit(handler->ccu4_slice_ptr, handler->ccu4_slice_config_ptr);
 2262              	 .loc 2 985 0
 2263 0008 7B68     	 ldr r3,[r7,#4]
 2264 000a 9A69     	 ldr r2,[r3,#24]
 2265 000c 7B68     	 ldr r3,[r7,#4]
 2266 000e DB69     	 ldr r3,[r3,#28]
 2267 0010 101C     	 mov r0,r2
 2268 0012 191C     	 mov r1,r3
 2269 0014 FFF7FEFF 	 bl XMC_CCU4_SLICE_CaptureInit
 986:../Dave/Generated/CAPTURE/capture.c ****   /* programs the timer period and compare register according to time interval value and do the sha
 987:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_CCU4_lShadowTransfer(handler);
 2270              	 .loc 2 987 0
 2271 0018 7B68     	 ldr r3,[r7,#4]
 2272 001a 181C     	 mov r0,r3
 2273 001c FFF7FEFF 	 bl CAPTURE_CCU4_lShadowTransfer
 988:../Dave/Generated/CAPTURE/capture.c **** 
 989:../Dave/Generated/CAPTURE/capture.c ****   /************Configure External Events***************/
 990:../Dave/Generated/CAPTURE/capture.c ****   /* Configure slice to a external event 0 */
 991:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU4_SLICE_ConfigureEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0, handler->ccu4_even
 2274              	 .loc 2 991 0
 2275 0020 7B68     	 ldr r3,[r7,#4]
 2276 0022 9A69     	 ldr r2,[r3,#24]
 2277 0024 7B68     	 ldr r3,[r7,#4]
 2278 0026 DB68     	 ldr r3,[r3,#12]
 2279 0028 101C     	 mov r0,r2
 2280 002a 0121     	 mov r1,#1
 2281 002c 1A1C     	 mov r2,r3
 2282 002e FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 992:../Dave/Generated/CAPTURE/capture.c ****   /* Configure slice to a external event 1 */
 993:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU4_SLICE_ConfigureEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1, handler->ccu4_even
 2283              	 .loc 2 993 0
 2284 0032 7B68     	 ldr r3,[r7,#4]
 2285 0034 9A69     	 ldr r2,[r3,#24]
 2286 0036 7B68     	 ldr r3,[r7,#4]
 2287 0038 1B69     	 ldr r3,[r3,#16]
 2288 003a 101C     	 mov r0,r2
 2289 003c 0221     	 mov r1,#2
 2290 003e 1A1C     	 mov r2,r3
 2291 0040 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 994:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU4_SLICE_Capture0Config(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0);
 2292              	 .loc 2 994 0
 2293 0044 7B68     	 ldr r3,[r7,#4]
 2294 0046 9B69     	 ldr r3,[r3,#24]
 2295 0048 181C     	 mov r0,r3
 2296 004a 0121     	 mov r1,#1
 2297 004c FFF7FEFF 	 bl XMC_CCU4_SLICE_Capture0Config
 995:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU4_SLICE_Capture1Config(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1);
 2298              	 .loc 2 995 0
 2299 0050 7B68     	 ldr r3,[r7,#4]
 2300 0052 9B69     	 ldr r3,[r3,#24]
 2301 0054 181C     	 mov r0,r3
 2302 0056 0221     	 mov r1,#2
 2303 0058 FFF7FEFF 	 bl XMC_CCU4_SLICE_Capture1Config
 996:../Dave/Generated/CAPTURE/capture.c **** 
 997:../Dave/Generated/CAPTURE/capture.c ****   #ifdef  CAPTURE_INTERRUPT_ENABLED
 998:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->capture_event_enable)
 999:../Dave/Generated/CAPTURE/capture.c ****   {
1000:../Dave/Generated/CAPTURE/capture.c ****     /* Binds a period match event to an NVIC node  */
1001:../Dave/Generated/CAPTURE/capture.c ****     XMC_CCU4_SLICE_SetInterruptNode(handler->ccu4_slice_ptr,
1002:../Dave/Generated/CAPTURE/capture.c ****                                    XMC_CCU4_SLICE_IRQ_ID_EVENT0,
1003:../Dave/Generated/CAPTURE/capture.c ****                                    handler->ccu4_capture_event_node);
1004:../Dave/Generated/CAPTURE/capture.c ****     /* Enables a timer(period match) event  */
1005:../Dave/Generated/CAPTURE/capture.c ****     XMC_CCU4_SLICE_EnableEvent(handler->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
1006:../Dave/Generated/CAPTURE/capture.c ****   }
1007:../Dave/Generated/CAPTURE/capture.c ****   #endif
1008:../Dave/Generated/CAPTURE/capture.c **** 
1009:../Dave/Generated/CAPTURE/capture.c ****   /* Enable the clock for selected timer */
1010:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU4_EnableClock(handler->global_ccu4_handler->module_ptr, handler->ccu_slice_number);
 2304              	 .loc 2 1010 0
 2305 005c 7B68     	 ldr r3,[r7,#4]
 2306 005e 5B69     	 ldr r3,[r3,#20]
 2307 0060 9968     	 ldr r1,[r3,#8]
 2308 0062 7B68     	 ldr r3,[r7,#4]
 2309 0064 2C22     	 mov r2,#44
 2310 0066 9B5C     	 ldrb r3,[r3,r2]
 2311 0068 081C     	 mov r0,r1
 2312 006a 191C     	 mov r1,r3
 2313 006c FFF7FEFF 	 bl XMC_CCU4_EnableClock
1011:../Dave/Generated/CAPTURE/capture.c **** }
 2314              	 .loc 2 1011 0
 2315 0070 BD46     	 mov sp,r7
 2316 0072 02B0     	 add sp,sp,#8
 2317              	 
 2318 0074 80BD     	 pop {r7,pc}
 2319              	 .cfi_endproc
 2320              	.LFE138:
 2322 0076 C046     	 .section .text.CAPTURE_CCU4_lShadowTransfer,"ax",%progbits
 2323              	 .align 2
 2324              	 .code 16
 2325              	 .thumb_func
 2327              	CAPTURE_CCU4_lShadowTransfer:
 2328              	.LFB139:
1012:../Dave/Generated/CAPTURE/capture.c **** 
1013:../Dave/Generated/CAPTURE/capture.c **** static void CAPTURE_CCU4_lShadowTransfer(const CAPTURE_t *const handler)
1014:../Dave/Generated/CAPTURE/capture.c **** {
 2329              	 .loc 2 1014 0
 2330              	 .cfi_startproc
 2331 0000 80B5     	 push {r7,lr}
 2332              	.LCFI66:
 2333              	 .cfi_def_cfa_offset 8
 2334              	 .cfi_offset 7,-8
 2335              	 .cfi_offset 14,-4
 2336 0002 82B0     	 sub sp,sp,#8
 2337              	.LCFI67:
 2338              	 .cfi_def_cfa_offset 16
 2339 0004 00AF     	 add r7,sp,#0
 2340              	.LCFI68:
 2341              	 .cfi_def_cfa_register 7
 2342 0006 7860     	 str r0,[r7,#4]
1015:../Dave/Generated/CAPTURE/capture.c ****   /* programs the timer period register according to time interval value */
1016:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU4_SLICE_SetTimerPeriodMatch(handler->ccu4_slice_ptr, CAPTURE_PERIOD_16BIT_MAX);
 2343              	 .loc 2 1016 0
 2344 0008 7B68     	 ldr r3,[r7,#4]
 2345 000a 9B69     	 ldr r3,[r3,#24]
 2346 000c 0B4A     	 ldr r2,.L115
 2347 000e 181C     	 mov r0,r3
 2348 0010 111C     	 mov r1,r2
 2349 0012 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerPeriodMatch
1017:../Dave/Generated/CAPTURE/capture.c ****   /* programs the timer compare register for 50% duty cycle */
1018:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU4_SLICE_SetTimerCompareMatch(handler->ccu4_slice_ptr, 0x0U);
 2350              	 .loc 2 1018 0
 2351 0016 7B68     	 ldr r3,[r7,#4]
 2352 0018 9B69     	 ldr r3,[r3,#24]
 2353 001a 181C     	 mov r0,r3
 2354 001c 0021     	 mov r1,#0
 2355 001e FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
1019:../Dave/Generated/CAPTURE/capture.c ****   /* Transfers value from shadow timer registers to actual timer registers */
1020:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU4_EnableShadowTransfer(handler->global_ccu4_handler->module_ptr, handler->shadow_mask);
 2356              	 .loc 2 1020 0
 2357 0022 7B68     	 ldr r3,[r7,#4]
 2358 0024 5B69     	 ldr r3,[r3,#20]
 2359 0026 9A68     	 ldr r2,[r3,#8]
 2360 0028 7B68     	 ldr r3,[r7,#4]
 2361 002a 9B68     	 ldr r3,[r3,#8]
 2362 002c 101C     	 mov r0,r2
 2363 002e 191C     	 mov r1,r3
 2364 0030 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
1021:../Dave/Generated/CAPTURE/capture.c **** }
 2365              	 .loc 2 1021 0
 2366 0034 BD46     	 mov sp,r7
 2367 0036 02B0     	 add sp,sp,#8
 2368              	 
 2369 0038 80BD     	 pop {r7,pc}
 2370              	.L116:
 2371 003a C046     	 .align 2
 2372              	.L115:
 2373 003c FFFF0000 	 .word 65535
 2374              	 .cfi_endproc
 2375              	.LFE139:
 2377              	 .section .text.CAPTURE_lCalculateTimeTickFromTimerValue,"ax",%progbits
 2378              	 .align 2
 2379              	 .code 16
 2380              	 .thumb_func
 2382              	CAPTURE_lCalculateTimeTickFromTimerValue:
 2383              	.LFB140:
1022:../Dave/Generated/CAPTURE/capture.c **** #endif
1023:../Dave/Generated/CAPTURE/capture.c **** 
1024:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
1025:../Dave/Generated/CAPTURE/capture.c **** static void CAPTURE_CCU8_lInit(const CAPTURE_t *const handler)
1026:../Dave/Generated/CAPTURE/capture.c **** {
1027:../Dave/Generated/CAPTURE/capture.c ****   /* Configure the timer with required settings */
1028:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU8_SLICE_CaptureInit(handler->ccu8_slice_ptr, handler->ccu8_slice_config_ptr);
1029:../Dave/Generated/CAPTURE/capture.c ****   /* programs the timer period and compare register according to time interval value and do the sha
1030:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_CCU8_lShadowTransfer(handler);
1031:../Dave/Generated/CAPTURE/capture.c **** 
1032:../Dave/Generated/CAPTURE/capture.c ****   /************Configure External Events***************/
1033:../Dave/Generated/CAPTURE/capture.c ****   /* Configure slice to a external event 0 */
1034:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU8_SLICE_ConfigureEvent(handler->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0, handler->ccu8_even
1035:../Dave/Generated/CAPTURE/capture.c ****   /* Configure slice to a external event 1 */
1036:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU8_SLICE_ConfigureEvent(handler->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1, handler->ccu8_even
1037:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU8_SLICE_Capture0Config(handler->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0);
1038:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU8_SLICE_Capture1Config(handler->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1);
1039:../Dave/Generated/CAPTURE/capture.c **** 
1040:../Dave/Generated/CAPTURE/capture.c ****   #ifdef  CAPTURE_INTERRUPT_ENABLED
1041:../Dave/Generated/CAPTURE/capture.c ****   if (true == handler->capture_event_enable)
1042:../Dave/Generated/CAPTURE/capture.c ****   {
1043:../Dave/Generated/CAPTURE/capture.c ****     /* Binds a period match event to an NVIC node  */
1044:../Dave/Generated/CAPTURE/capture.c ****     XMC_CCU8_SLICE_SetInterruptNode(handler->ccu8_slice_ptr,
1045:../Dave/Generated/CAPTURE/capture.c ****                                     XMC_CCU8_SLICE_IRQ_ID_EVENT0,
1046:../Dave/Generated/CAPTURE/capture.c ****                                     handler->ccu8_capture_event_node);
1047:../Dave/Generated/CAPTURE/capture.c ****     /* Enables a timer(period match) event  */
1048:../Dave/Generated/CAPTURE/capture.c ****     XMC_CCU8_SLICE_EnableEvent(handler->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
1049:../Dave/Generated/CAPTURE/capture.c ****   }
1050:../Dave/Generated/CAPTURE/capture.c ****   #endif
1051:../Dave/Generated/CAPTURE/capture.c **** 
1052:../Dave/Generated/CAPTURE/capture.c **** 
1053:../Dave/Generated/CAPTURE/capture.c ****   /* Enable the clock for selected timer */
1054:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU8_EnableClock(handler->global_ccu8_handler->module_ptr, handler->ccu_slice_number);
1055:../Dave/Generated/CAPTURE/capture.c **** }
1056:../Dave/Generated/CAPTURE/capture.c **** 
1057:../Dave/Generated/CAPTURE/capture.c **** static void CAPTURE_CCU8_lShadowTransfer(const CAPTURE_t *const handler)
1058:../Dave/Generated/CAPTURE/capture.c **** {
1059:../Dave/Generated/CAPTURE/capture.c ****   /* programs the timer period register according to time interval value */
1060:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU8_SLICE_SetTimerPeriodMatch(handler->ccu8_slice_ptr, CAPTURE_PERIOD_16BIT_MAX);
1061:../Dave/Generated/CAPTURE/capture.c ****   /* programs the timer compare register for 50% duty cycle */
1062:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU8_SLICE_SetTimerCompareMatch(handler->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 0x
1063:../Dave/Generated/CAPTURE/capture.c ****   /* Transfers value from shadow timer registers to actual timer registers */
1064:../Dave/Generated/CAPTURE/capture.c ****   XMC_CCU8_EnableShadowTransfer(handler->global_ccu8_handler->module_ptr, handler->shadow_mask);
1065:../Dave/Generated/CAPTURE/capture.c **** }
1066:../Dave/Generated/CAPTURE/capture.c **** #endif
1067:../Dave/Generated/CAPTURE/capture.c **** 
1068:../Dave/Generated/CAPTURE/capture.c **** static void CAPTURE_lCalculateTimeTickFromTimerValue(const CAPTURE_t *const handler,
1069:../Dave/Generated/CAPTURE/capture.c ****                                                      uint32_t *const timer_val_ptr,
1070:../Dave/Generated/CAPTURE/capture.c ****                                                      bool is_increment)
1071:../Dave/Generated/CAPTURE/capture.c **** {
 2384              	 .loc 2 1071 0
 2385              	 .cfi_startproc
 2386 0000 80B5     	 push {r7,lr}
 2387              	.LCFI69:
 2388              	 .cfi_def_cfa_offset 8
 2389              	 .cfi_offset 7,-8
 2390              	 .cfi_offset 14,-4
 2391 0002 8CB0     	 sub sp,sp,#48
 2392              	.LCFI70:
 2393              	 .cfi_def_cfa_offset 56
 2394 0004 00AF     	 add r7,sp,#0
 2395              	.LCFI71:
 2396              	 .cfi_def_cfa_register 7
 2397 0006 F860     	 str r0,[r7,#12]
 2398 0008 B960     	 str r1,[r7,#8]
 2399 000a FB1D     	 add r3,r7,#7
 2400 000c 1A70     	 strb r2,[r3]
1072:../Dave/Generated/CAPTURE/capture.c ****   /* Check for APP instance is initialized or not */
1073:../Dave/Generated/CAPTURE/capture.c ****   uint32_t psc_psiv_val = 0U;
 2401              	 .loc 2 1073 0
 2402 000e 0023     	 mov r3,#0
 2403 0010 FB62     	 str r3,[r7,#44]
1074:../Dave/Generated/CAPTURE/capture.c ****   bool is_float_prescaler = false;
 2404              	 .loc 2 1074 0
 2405 0012 2B23     	 mov r3,#43
 2406 0014 FB18     	 add r3,r7,r3
 2407 0016 0022     	 mov r2,#0
 2408 0018 1A70     	 strb r2,[r3]
1075:../Dave/Generated/CAPTURE/capture.c ****   uint32_t cxv_captv_val = (uint32_t)((uint32_t)*timer_val_ptr & 0xFFFFU);
 2409              	 .loc 2 1075 0
 2410 001a BB68     	 ldr r3,[r7,#8]
 2411 001c 1B68     	 ldr r3,[r3]
 2412 001e 1B04     	 lsl r3,r3,#16
 2413 0020 1B0C     	 lsr r3,r3,#16
 2414 0022 7B62     	 str r3,[r7,#36]
1076:../Dave/Generated/CAPTURE/capture.c ****   uint32_t cxv_fpcv_val = (uint32_t)((uint32_t)*timer_val_ptr >> 16U) & 0xFU;
 2415              	 .loc 2 1076 0
 2416 0024 BB68     	 ldr r3,[r7,#8]
 2417 0026 1B68     	 ldr r3,[r3]
 2418 0028 1B0C     	 lsr r3,r3,#16
 2419 002a 0F22     	 mov r2,#15
 2420 002c 1340     	 and r3,r2
 2421 002e BB61     	 str r3,[r7,#24]
1077:../Dave/Generated/CAPTURE/capture.c **** 
1078:../Dave/Generated/CAPTURE/capture.c ****   /* Period measured should be added 1 to get actual value*/
1079:../Dave/Generated/CAPTURE/capture.c ****   if (is_increment == true)
 2422              	 .loc 2 1079 0
 2423 0030 FB1D     	 add r3,r7,#7
 2424 0032 1B78     	 ldrb r3,[r3]
 2425 0034 002B     	 cmp r3,#0
 2426 0036 02D0     	 beq .L118
1080:../Dave/Generated/CAPTURE/capture.c ****   {
1081:../Dave/Generated/CAPTURE/capture.c ****     cxv_captv_val = cxv_captv_val + 1U;
 2427              	 .loc 2 1081 0
 2428 0038 7B6A     	 ldr r3,[r7,#36]
 2429 003a 0133     	 add r3,r3,#1
 2430 003c 7B62     	 str r3,[r7,#36]
 2431              	.L118:
1082:../Dave/Generated/CAPTURE/capture.c ****   }
1083:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
1084:../Dave/Generated/CAPTURE/capture.c ****   if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 2432              	 .loc 2 1084 0
 2433 003e FB68     	 ldr r3,[r7,#12]
 2434 0040 2D22     	 mov r2,#45
 2435 0042 9B5C     	 ldrb r3,[r3,r2]
 2436 0044 002B     	 cmp r3,#0
 2437 0046 12D1     	 bne .L119
1085:../Dave/Generated/CAPTURE/capture.c ****   {
1086:../Dave/Generated/CAPTURE/capture.c ****     psc_psiv_val = handler->ccu4_slice_config_ptr->prescaler_initval;
 2438              	 .loc 2 1086 0
 2439 0048 FB68     	 ldr r3,[r7,#12]
 2440 004a DB69     	 ldr r3,[r3,#28]
 2441 004c 1B79     	 ldrb r3,[r3,#4]
 2442 004e 1B07     	 lsl r3,r3,#28
 2443 0050 1B0F     	 lsr r3,r3,#28
 2444 0052 DBB2     	 uxtb r3,r3
 2445 0054 FB62     	 str r3,[r7,#44]
1087:../Dave/Generated/CAPTURE/capture.c ****     if (handler->ccu4_slice_config_ptr->prescaler_mode == (uint32_t)XMC_CCU4_SLICE_PRESCALER_MODE_F
 2446              	 .loc 2 1087 0
 2447 0056 FB68     	 ldr r3,[r7,#12]
 2448 0058 DB69     	 ldr r3,[r3,#28]
 2449 005a 9B78     	 ldrb r3,[r3,#2]
 2450 005c 0122     	 mov r2,#1
 2451 005e 1340     	 and r3,r2
 2452 0060 DBB2     	 uxtb r3,r3
 2453 0062 002B     	 cmp r3,#0
 2454 0064 03D0     	 beq .L119
1088:../Dave/Generated/CAPTURE/capture.c ****     {
1089:../Dave/Generated/CAPTURE/capture.c ****       is_float_prescaler =  true;
 2455              	 .loc 2 1089 0
 2456 0066 2B23     	 mov r3,#43
 2457 0068 FB18     	 add r3,r7,r3
 2458 006a 0122     	 mov r2,#1
 2459 006c 1A70     	 strb r2,[r3]
 2460              	.L119:
1090:../Dave/Generated/CAPTURE/capture.c ****     }
1091:../Dave/Generated/CAPTURE/capture.c ****   }
1092:../Dave/Generated/CAPTURE/capture.c **** #endif
1093:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
1094:../Dave/Generated/CAPTURE/capture.c ****   if (CAPTURE_MODULE_CCU8 == handler->capture_module)
1095:../Dave/Generated/CAPTURE/capture.c ****   {
1096:../Dave/Generated/CAPTURE/capture.c ****     psc_psiv_val = handler->ccu8_slice_config_ptr->prescaler_initval;
1097:../Dave/Generated/CAPTURE/capture.c ****     if (handler->ccu8_slice_config_ptr->prescaler_mode == (uint32_t)XMC_CCU8_SLICE_PRESCALER_MODE_F
1098:../Dave/Generated/CAPTURE/capture.c ****     {
1099:../Dave/Generated/CAPTURE/capture.c ****       is_float_prescaler =  true;
1100:../Dave/Generated/CAPTURE/capture.c ****     }
1101:../Dave/Generated/CAPTURE/capture.c ****   }
1102:../Dave/Generated/CAPTURE/capture.c **** #endif
1103:../Dave/Generated/CAPTURE/capture.c **** 
1104:../Dave/Generated/CAPTURE/capture.c ****   if (is_float_prescaler == true)
 2461              	 .loc 2 1104 0
 2462 006e 2B23     	 mov r3,#43
 2463 0070 FB18     	 add r3,r7,r3
 2464 0072 1B78     	 ldrb r3,[r3]
 2465 0074 002B     	 cmp r3,#0
 2466 0076 23D0     	 beq .L120
 2467              	.LBB16:
1105:../Dave/Generated/CAPTURE/capture.c ****   {
1106:../Dave/Generated/CAPTURE/capture.c ****     int32_t loop = 0;
 2468              	 .loc 2 1106 0
 2469 0078 0023     	 mov r3,#0
 2470 007a 3B62     	 str r3,[r7,#32]
1107:../Dave/Generated/CAPTURE/capture.c ****     uint32_t prescaler_value;
1108:../Dave/Generated/CAPTURE/capture.c ****     uint32_t timer_val = 0U;
 2471              	 .loc 2 1108 0
 2472 007c 0023     	 mov r3,#0
 2473 007e FB61     	 str r3,[r7,#28]
1109:../Dave/Generated/CAPTURE/capture.c **** 
1110:../Dave/Generated/CAPTURE/capture.c ****     prescaler_value = cxv_fpcv_val - psc_psiv_val;
 2474              	 .loc 2 1110 0
 2475 0080 BA69     	 ldr r2,[r7,#24]
 2476 0082 FB6A     	 ldr r3,[r7,#44]
 2477 0084 D31A     	 sub r3,r2,r3
 2478 0086 7B61     	 str r3,[r7,#20]
1111:../Dave/Generated/CAPTURE/capture.c **** 
1112:../Dave/Generated/CAPTURE/capture.c ****     for (loop = (int32_t)prescaler_value; loop > 0; loop--)
 2479              	 .loc 2 1112 0
 2480 0088 7B69     	 ldr r3,[r7,#20]
 2481 008a 3B62     	 str r3,[r7,#32]
 2482 008c 0AE0     	 b .L121
 2483              	.L122:
1113:../Dave/Generated/CAPTURE/capture.c ****     {
1114:../Dave/Generated/CAPTURE/capture.c ****       timer_val = (uint32_t)timer_val << 1U;
 2484              	 .loc 2 1114 0 discriminator 3
 2485 008e FB69     	 ldr r3,[r7,#28]
 2486 0090 5B00     	 lsl r3,r3,#1
 2487 0092 FB61     	 str r3,[r7,#28]
1115:../Dave/Generated/CAPTURE/capture.c ****       timer_val += 65535U;
 2488              	 .loc 2 1115 0 discriminator 3
 2489 0094 FB69     	 ldr r3,[r7,#28]
 2490 0096 0D4A     	 ldr r2,.L124
 2491 0098 9446     	 mov ip,r2
 2492 009a 6344     	 add r3,r3,ip
 2493 009c FB61     	 str r3,[r7,#28]
1112:../Dave/Generated/CAPTURE/capture.c ****     {
 2494              	 .loc 2 1112 0 discriminator 3
 2495 009e 3B6A     	 ldr r3,[r7,#32]
 2496 00a0 013B     	 sub r3,r3,#1
 2497 00a2 3B62     	 str r3,[r7,#32]
 2498              	.L121:
1112:../Dave/Generated/CAPTURE/capture.c ****     {
 2499              	 .loc 2 1112 0 is_stmt 0 discriminator 1
 2500 00a4 3B6A     	 ldr r3,[r7,#32]
 2501 00a6 002B     	 cmp r3,#0
 2502 00a8 F1DC     	 bgt .L122
1116:../Dave/Generated/CAPTURE/capture.c ****     }
1117:../Dave/Generated/CAPTURE/capture.c **** 
1118:../Dave/Generated/CAPTURE/capture.c ****     timer_val += (uint32_t)(cxv_captv_val * (1UL << prescaler_value));
 2503              	 .loc 2 1118 0 is_stmt 1
 2504 00aa 7B69     	 ldr r3,[r7,#20]
 2505 00ac 7A6A     	 ldr r2,[r7,#36]
 2506 00ae 9A40     	 lsl r2,r2,r3
 2507 00b0 131C     	 mov r3,r2
 2508 00b2 FA69     	 ldr r2,[r7,#28]
 2509 00b4 D318     	 add r3,r2,r3
 2510 00b6 FB61     	 str r3,[r7,#28]
1119:../Dave/Generated/CAPTURE/capture.c ****     *timer_val_ptr = timer_val;
 2511              	 .loc 2 1119 0
 2512 00b8 BB68     	 ldr r3,[r7,#8]
 2513 00ba FA69     	 ldr r2,[r7,#28]
 2514 00bc 1A60     	 str r2,[r3]
 2515              	.LBE16:
 2516 00be 02E0     	 b .L117
 2517              	.L120:
1120:../Dave/Generated/CAPTURE/capture.c ****   }
1121:../Dave/Generated/CAPTURE/capture.c ****   else
1122:../Dave/Generated/CAPTURE/capture.c ****   {
1123:../Dave/Generated/CAPTURE/capture.c ****     *timer_val_ptr = cxv_captv_val;
 2518              	 .loc 2 1123 0
 2519 00c0 BB68     	 ldr r3,[r7,#8]
 2520 00c2 7A6A     	 ldr r2,[r7,#36]
 2521 00c4 1A60     	 str r2,[r3]
 2522              	.L117:
1124:../Dave/Generated/CAPTURE/capture.c ****   }
1125:../Dave/Generated/CAPTURE/capture.c **** }
 2523              	 .loc 2 1125 0
 2524 00c6 BD46     	 mov sp,r7
 2525 00c8 0CB0     	 add sp,sp,#48
 2526              	 
 2527 00ca 80BD     	 pop {r7,pc}
 2528              	.L125:
 2529              	 .align 2
 2530              	.L124:
 2531 00cc FFFF0000 	 .word 65535
 2532              	 .cfi_endproc
 2533              	.LFE140:
 2535              	 .global __aeabi_lmul
 2536              	 .global __aeabi_uldivmod
 2537              	 .section .text.CAPTURE_lCalculateTimeInNanoSecFromTimerTick,"ax",%progbits
 2538              	 .align 2
 2539              	 .code 16
 2540              	 .thumb_func
 2542              	CAPTURE_lCalculateTimeInNanoSecFromTimerTick:
 2543              	.LFB141:
1126:../Dave/Generated/CAPTURE/capture.c **** 
1127:../Dave/Generated/CAPTURE/capture.c **** static uint32_t CAPTURE_lCalculateTimeInNanoSecFromTimerTick(const CAPTURE_t *const handler, uint32
1128:../Dave/Generated/CAPTURE/capture.c **** {
 2544              	 .loc 2 1128 0
 2545              	 .cfi_startproc
 2546 0000 B0B5     	 push {r4,r5,r7,lr}
 2547              	.LCFI72:
 2548              	 .cfi_def_cfa_offset 16
 2549              	 .cfi_offset 4,-16
 2550              	 .cfi_offset 5,-12
 2551              	 .cfi_offset 7,-8
 2552              	 .cfi_offset 14,-4
 2553 0002 8EB0     	 sub sp,sp,#56
 2554              	.LCFI73:
 2555              	 .cfi_def_cfa_offset 72
 2556 0004 00AF     	 add r7,sp,#0
 2557              	.LCFI74:
 2558              	 .cfi_def_cfa_register 7
 2559 0006 F860     	 str r0,[r7,#12]
 2560 0008 B960     	 str r1,[r7,#8]
1129:../Dave/Generated/CAPTURE/capture.c ****   uint64_t singal_period_long_long;
1130:../Dave/Generated/CAPTURE/capture.c ****   uint32_t inv_sig_resolution_in_sec = 1U;
 2561              	 .loc 2 1130 0
 2562 000a 0123     	 mov r3,#1
 2563 000c 7B63     	 str r3,[r7,#52]
1131:../Dave/Generated/CAPTURE/capture.c ****   uint32_t norm_timer_val;
1132:../Dave/Generated/CAPTURE/capture.c ****   uint32_t norm_inv_sig_resolution_in_sec;
1133:../Dave/Generated/CAPTURE/capture.c ****   uint32_t min_norm;
1134:../Dave/Generated/CAPTURE/capture.c ****   uint32_t psc_psiv_val = 0U;
 2564              	 .loc 2 1134 0
 2565 000e 0023     	 mov r3,#0
 2566 0010 FB62     	 str r3,[r7,#44]
1135:../Dave/Generated/CAPTURE/capture.c **** 
1136:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU4_USED
1137:../Dave/Generated/CAPTURE/capture.c ****   if (CAPTURE_MODULE_CCU4 == handler->capture_module)
 2567              	 .loc 2 1137 0
 2568 0012 FB68     	 ldr r3,[r7,#12]
 2569 0014 2D22     	 mov r2,#45
 2570 0016 9B5C     	 ldrb r3,[r3,r2]
 2571 0018 002B     	 cmp r3,#0
 2572 001a 0DD1     	 bne .L127
1138:../Dave/Generated/CAPTURE/capture.c ****   {
1139:../Dave/Generated/CAPTURE/capture.c ****     psc_psiv_val = handler->ccu4_slice_config_ptr->prescaler_initval;
 2573              	 .loc 2 1139 0
 2574 001c FB68     	 ldr r3,[r7,#12]
 2575 001e DB69     	 ldr r3,[r3,#28]
 2576 0020 1B79     	 ldrb r3,[r3,#4]
 2577 0022 1B07     	 lsl r3,r3,#28
 2578 0024 1B0F     	 lsr r3,r3,#28
 2579 0026 DBB2     	 uxtb r3,r3
 2580 0028 FB62     	 str r3,[r7,#44]
1140:../Dave/Generated/CAPTURE/capture.c ****     inv_sig_resolution_in_sec = handler->global_ccu4_handler->module_frequency >> psc_psiv_val;
 2581              	 .loc 2 1140 0
 2582 002a FB68     	 ldr r3,[r7,#12]
 2583 002c 5B69     	 ldr r3,[r3,#20]
 2584 002e 1A68     	 ldr r2,[r3]
 2585 0030 FB6A     	 ldr r3,[r7,#44]
 2586 0032 DA40     	 lsr r2,r2,r3
 2587 0034 131C     	 mov r3,r2
 2588 0036 7B63     	 str r3,[r7,#52]
 2589              	.L127:
 2590 0038 BB68     	 ldr r3,[r7,#8]
 2591 003a 7B61     	 str r3,[r7,#20]
 2592              	.LBB17:
 2593              	.LBB18:
1089:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   {
 2594              	 .loc 3 1089 0
 2595 003c 7B69     	 ldr r3,[r7,#20]
 2596 003e 002B     	 cmp r3,#0
 2597 0040 01D1     	 bne .L128
1091:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
 2598              	 .loc 3 1091 0
 2599 0042 2023     	 mov r3,#32
 2600 0044 04E0     	 b .L129
 2601              	.L128:
 2602              	 .loc 3 1093 0
 2603 0046 7869     	 ldr r0,[r7,#20]
 2604 0048 FFF7FEFF 	 bl __clzsi2
 2605 004c 031C     	 mov r3,r0
 2606 004e DBB2     	 uxtb r3,r3
 2607              	.L129:
 2608              	.LBE18:
 2609              	.LBE17:
1141:../Dave/Generated/CAPTURE/capture.c ****   }
1142:../Dave/Generated/CAPTURE/capture.c **** #endif
1143:../Dave/Generated/CAPTURE/capture.c **** #ifdef CAPTURE_CCU8_USED
1144:../Dave/Generated/CAPTURE/capture.c ****   if (CAPTURE_MODULE_CCU8 == handler->capture_module)
1145:../Dave/Generated/CAPTURE/capture.c ****   {
1146:../Dave/Generated/CAPTURE/capture.c ****     psc_psiv_val = handler->ccu8_slice_config_ptr->prescaler_initval;
1147:../Dave/Generated/CAPTURE/capture.c ****     inv_sig_resolution_in_sec = handler->global_ccu8_handler->module_frequency >> psc_psiv_val;
1148:../Dave/Generated/CAPTURE/capture.c ****   }
1149:../Dave/Generated/CAPTURE/capture.c **** #endif
1150:../Dave/Generated/CAPTURE/capture.c **** 
1151:../Dave/Generated/CAPTURE/capture.c ****   norm_timer_val = (uint32_t)__CLZ(timer_val);
 2610              	 .loc 2 1151 0
 2611 0050 BB62     	 str r3,[r7,#40]
 2612 0052 7B6B     	 ldr r3,[r7,#52]
 2613 0054 3B61     	 str r3,[r7,#16]
 2614              	.LBB19:
 2615              	.LBB20:
1089:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   {
 2616              	 .loc 3 1089 0
 2617 0056 3B69     	 ldr r3,[r7,#16]
 2618 0058 002B     	 cmp r3,#0
 2619 005a 01D1     	 bne .L130
1091:C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Include\cmsis_gcc.h ****   }
 2620              	 .loc 3 1091 0
 2621 005c 2023     	 mov r3,#32
 2622 005e 04E0     	 b .L131
 2623              	.L130:
 2624              	 .loc 3 1093 0
 2625 0060 3869     	 ldr r0,[r7,#16]
 2626 0062 FFF7FEFF 	 bl __clzsi2
 2627 0066 031C     	 mov r3,r0
 2628 0068 DBB2     	 uxtb r3,r3
 2629              	.L131:
 2630              	.LBE20:
 2631              	.LBE19:
1152:../Dave/Generated/CAPTURE/capture.c ****   norm_inv_sig_resolution_in_sec = (uint32_t)__CLZ(inv_sig_resolution_in_sec);
 2632              	 .loc 2 1152 0
 2633 006a 7B62     	 str r3,[r7,#36]
1153:../Dave/Generated/CAPTURE/capture.c **** 
1154:../Dave/Generated/CAPTURE/capture.c ****   if (norm_timer_val > norm_inv_sig_resolution_in_sec)
 2634              	 .loc 2 1154 0
 2635 006c BA6A     	 ldr r2,[r7,#40]
 2636 006e 7B6A     	 ldr r3,[r7,#36]
 2637 0070 9A42     	 cmp r2,r3
 2638 0072 02D9     	 bls .L132
1155:../Dave/Generated/CAPTURE/capture.c ****   {
1156:../Dave/Generated/CAPTURE/capture.c ****     min_norm = norm_inv_sig_resolution_in_sec;
 2639              	 .loc 2 1156 0
 2640 0074 7B6A     	 ldr r3,[r7,#36]
 2641 0076 3B63     	 str r3,[r7,#48]
 2642 0078 01E0     	 b .L133
 2643              	.L132:
1157:../Dave/Generated/CAPTURE/capture.c ****   }
1158:../Dave/Generated/CAPTURE/capture.c ****   else
1159:../Dave/Generated/CAPTURE/capture.c ****   {
1160:../Dave/Generated/CAPTURE/capture.c ****     min_norm = norm_timer_val;
 2644              	 .loc 2 1160 0
 2645 007a BB6A     	 ldr r3,[r7,#40]
 2646 007c 3B63     	 str r3,[r7,#48]
 2647              	.L133:
1161:../Dave/Generated/CAPTURE/capture.c ****   }
1162:../Dave/Generated/CAPTURE/capture.c **** 
1163:../Dave/Generated/CAPTURE/capture.c ****   /* Normalized the value to get better precision*/
1164:../Dave/Generated/CAPTURE/capture.c ****   timer_val = timer_val << min_norm;
 2648              	 .loc 2 1164 0
 2649 007e 3B6B     	 ldr r3,[r7,#48]
 2650 0080 BA68     	 ldr r2,[r7,#8]
 2651 0082 9A40     	 lsl r2,r2,r3
 2652 0084 131C     	 mov r3,r2
 2653 0086 BB60     	 str r3,[r7,#8]
1165:../Dave/Generated/CAPTURE/capture.c ****   inv_sig_resolution_in_sec = inv_sig_resolution_in_sec << min_norm;
 2654              	 .loc 2 1165 0
 2655 0088 3B6B     	 ldr r3,[r7,#48]
 2656 008a 7A6B     	 ldr r2,[r7,#52]
 2657 008c 9A40     	 lsl r2,r2,r3
 2658 008e 131C     	 mov r3,r2
 2659 0090 7B63     	 str r3,[r7,#52]
1166:../Dave/Generated/CAPTURE/capture.c **** 
1167:../Dave/Generated/CAPTURE/capture.c ****   singal_period_long_long = (((uint64_t) timer_val) * 1000000000U) / inv_sig_resolution_in_sec;
 2660              	 .loc 2 1167 0
 2661 0092 BB68     	 ldr r3,[r7,#8]
 2662 0094 3B60     	 str r3,[r7]
 2663 0096 0023     	 mov r3,#0
 2664 0098 7B60     	 str r3,[r7,#4]
 2665 009a 3868     	 ldr r0,[r7]
 2666 009c 7968     	 ldr r1,[r7,#4]
 2667 009e 0D4A     	 ldr r2,.L135
 2668 00a0 0023     	 mov r3,#0
 2669 00a2 FFF7FEFF 	 bl __aeabi_lmul
 2670 00a6 021C     	 mov r2,r0
 2671 00a8 0B1C     	 mov r3,r1
 2672 00aa 111C     	 mov r1,r2
 2673 00ac 1A1C     	 mov r2,r3
 2674 00ae 7B6B     	 ldr r3,[r7,#52]
 2675 00b0 1C1C     	 mov r4,r3
 2676 00b2 0023     	 mov r3,#0
 2677 00b4 1D1C     	 mov r5,r3
 2678 00b6 081C     	 mov r0,r1
 2679 00b8 111C     	 mov r1,r2
 2680 00ba 221C     	 mov r2,r4
 2681 00bc 2B1C     	 mov r3,r5
 2682 00be FFF7FEFF 	 bl __aeabi_uldivmod
 2683 00c2 031C     	 mov r3,r0
 2684 00c4 0C1C     	 mov r4,r1
 2685 00c6 BB61     	 str r3,[r7,#24]
 2686 00c8 FC61     	 str r4,[r7,#28]
1168:../Dave/Generated/CAPTURE/capture.c **** 
1169:../Dave/Generated/CAPTURE/capture.c ****   return ((uint32_t)singal_period_long_long);
 2687              	 .loc 2 1169 0
 2688 00ca BB69     	 ldr r3,[r7,#24]
1170:../Dave/Generated/CAPTURE/capture.c **** }
 2689              	 .loc 2 1170 0
 2690 00cc 181C     	 mov r0,r3
 2691 00ce BD46     	 mov sp,r7
 2692 00d0 0EB0     	 add sp,sp,#56
 2693              	 
 2694 00d2 B0BD     	 pop {r4,r5,r7,pc}
 2695              	.L136:
 2696              	 .align 2
 2697              	.L135:
 2698 00d4 00CA9A3B 	 .word 1000000000
 2699              	 .cfi_endproc
 2700              	.LFE141:
 2702              	 .section .text.CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue,"ax",%progbits
 2703              	 .align 2
 2704              	 .code 16
 2705              	 .thumb_func
 2707              	CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue:
 2708              	.LFB142:
1171:../Dave/Generated/CAPTURE/capture.c **** 
1172:../Dave/Generated/CAPTURE/capture.c **** #ifdef  CAPTURE_CCU4_USED
1173:../Dave/Generated/CAPTURE/capture.c **** /* @brief Retrieves the latest captured timer value from CCU4*/
1174:../Dave/Generated/CAPTURE/capture.c **** static CAPTURE_STATUS_t CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue(const XMC_CCU4_SLICE_t * c
1175:../Dave/Generated/CAPTURE/capture.c ****                                                                          const XMC_CCU4_SLICE_CAP_R
1176:../Dave/Generated/CAPTURE/capture.c ****                                                                          uint32_t * const val_ptr)
1177:../Dave/Generated/CAPTURE/capture.c **** {
 2709              	 .loc 2 1177 0
 2710              	 .cfi_startproc
 2711 0000 80B5     	 push {r7,lr}
 2712              	.LCFI75:
 2713              	 .cfi_def_cfa_offset 8
 2714              	 .cfi_offset 7,-8
 2715              	 .cfi_offset 14,-4
 2716 0002 88B0     	 sub sp,sp,#32
 2717              	.LCFI76:
 2718              	 .cfi_def_cfa_offset 40
 2719 0004 00AF     	 add r7,sp,#0
 2720              	.LCFI77:
 2721              	 .cfi_def_cfa_register 7
 2722 0006 F860     	 str r0,[r7,#12]
 2723 0008 7A60     	 str r2,[r7,#4]
 2724 000a 0B23     	 mov r3,#11
 2725 000c FB18     	 add r3,r7,r3
 2726 000e 0A1C     	 add r2,r1,#0
 2727 0010 1A70     	 strb r2,[r3]
1178:../Dave/Generated/CAPTURE/capture.c ****   CAPTURE_STATUS_t retval;
1179:../Dave/Generated/CAPTURE/capture.c **** 
1180:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue:Invalid Register Set",
1181:../Dave/Generated/CAPTURE/capture.c ****               ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) || (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH))
1182:../Dave/Generated/CAPTURE/capture.c **** 
1183:../Dave/Generated/CAPTURE/capture.c ****   XMC_ASSERT ("CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue:Invalid Extended Capture Mode ",
1184:../Dave/Generated/CAPTURE/capture.c ****               ((slice->TC) & CCU4_CC4_TC_ECM_Msk) == 0);
1185:../Dave/Generated/CAPTURE/capture.c **** 
1186:../Dave/Generated/CAPTURE/capture.c ****   retval = CAPTURE_STATUS_NEW_VAL_NOT_CAPTURED;
 2728              	 .loc 2 1186 0
 2729 0012 1F23     	 mov r3,#31
 2730 0014 FB18     	 add r3,r7,r3
 2731 0016 0222     	 mov r2,#2
 2732 0018 1A70     	 strb r2,[r3]
1187:../Dave/Generated/CAPTURE/capture.c **** 
1188:../Dave/Generated/CAPTURE/capture.c ****   if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 2733              	 .loc 2 1188 0
 2734 001a 0B23     	 mov r3,#11
 2735 001c FB18     	 add r3,r7,r3
 2736 001e 1B78     	 ldrb r3,[r3]
 2737 0020 012B     	 cmp r3,#1
 2738 0022 20D1     	 bne .L138
1189:../Dave/Generated/CAPTURE/capture.c ****   {
1190:../Dave/Generated/CAPTURE/capture.c ****     /* read capture values*/
1191:../Dave/Generated/CAPTURE/capture.c ****     *val_ptr = slice->CV[CAPTURE_SLICE_CAP_REGISTER_3];
 2739              	 .loc 2 1191 0
 2740 0024 FB68     	 ldr r3,[r7,#12]
 2741 0026 8022     	 mov r2,#128
 2742 0028 9A58     	 ldr r2,[r3,r2]
 2743 002a 7B68     	 ldr r3,[r7,#4]
 2744 002c 1A60     	 str r2,[r3]
1192:../Dave/Generated/CAPTURE/capture.c ****     /* check for new data or full Flag*/
1193:../Dave/Generated/CAPTURE/capture.c ****     if ((*val_ptr) & CCU4_CC4_CV_FFL_Msk)
 2745              	 .loc 2 1193 0
 2746 002e 7B68     	 ldr r3,[r7,#4]
 2747 0030 1A68     	 ldr r2,[r3]
 2748 0032 8023     	 mov r3,#128
 2749 0034 5B03     	 lsl r3,r3,#13
 2750 0036 1340     	 and r3,r2
 2751 0038 04D0     	 beq .L139
1194:../Dave/Generated/CAPTURE/capture.c ****     {
1195:../Dave/Generated/CAPTURE/capture.c ****       retval = CAPTURE_STATUS_SUCCESS;
 2752              	 .loc 2 1195 0
 2753 003a 1F23     	 mov r3,#31
 2754 003c FB18     	 add r3,r7,r3
 2755 003e 0022     	 mov r2,#0
 2756 0040 1A70     	 strb r2,[r3]
 2757 0042 2EE0     	 b .L141
 2758              	.L139:
 2759              	.LBB21:
1196:../Dave/Generated/CAPTURE/capture.c ****     }
1197:../Dave/Generated/CAPTURE/capture.c ****     else
1198:../Dave/Generated/CAPTURE/capture.c ****     {
1199:../Dave/Generated/CAPTURE/capture.c ****       volatile uint32_t capture_reg_value_low;
1200:../Dave/Generated/CAPTURE/capture.c ****       capture_reg_value_low = slice->CV[CAPTURE_SLICE_CAP_REGISTER_2];
 2760              	 .loc 2 1200 0
 2761 0044 FB68     	 ldr r3,[r7,#12]
 2762 0046 DB6F     	 ldr r3,[r3,#124]
 2763 0048 BB61     	 str r3,[r7,#24]
1201:../Dave/Generated/CAPTURE/capture.c ****       /* check for new data or full Flag*/
1202:../Dave/Generated/CAPTURE/capture.c ****       if (capture_reg_value_low & CCU4_CC4_CV_FFL_Msk)
 2764              	 .loc 2 1202 0
 2765 004a BA69     	 ldr r2,[r7,#24]
 2766 004c 8023     	 mov r3,#128
 2767 004e 5B03     	 lsl r3,r3,#13
 2768 0050 1340     	 and r3,r2
 2769 0052 07D0     	 beq .L140
1203:../Dave/Generated/CAPTURE/capture.c ****       {
1204:../Dave/Generated/CAPTURE/capture.c ****         retval = CAPTURE_STATUS_SUCCESS;
 2770              	 .loc 2 1204 0
 2771 0054 1F23     	 mov r3,#31
 2772 0056 FB18     	 add r3,r7,r3
 2773 0058 0022     	 mov r2,#0
 2774 005a 1A70     	 strb r2,[r3]
1205:../Dave/Generated/CAPTURE/capture.c ****         *val_ptr = capture_reg_value_low;
 2775              	 .loc 2 1205 0
 2776 005c BA69     	 ldr r2,[r7,#24]
 2777 005e 7B68     	 ldr r3,[r7,#4]
 2778 0060 1A60     	 str r2,[r3]
 2779              	.LBE21:
 2780 0062 1EE0     	 b .L141
 2781              	.L140:
 2782 0064 1DE0     	 b .L141
 2783              	.L138:
1206:../Dave/Generated/CAPTURE/capture.c ****       }
1207:../Dave/Generated/CAPTURE/capture.c ****     }
1208:../Dave/Generated/CAPTURE/capture.c ****   }
1209:../Dave/Generated/CAPTURE/capture.c ****   else
1210:../Dave/Generated/CAPTURE/capture.c ****   {
1211:../Dave/Generated/CAPTURE/capture.c ****     /* read capture values*/
1212:../Dave/Generated/CAPTURE/capture.c ****     *val_ptr = slice->CV[CAPTURE_SLICE_CAP_REGISTER_1];
 2784              	 .loc 2 1212 0
 2785 0066 FB68     	 ldr r3,[r7,#12]
 2786 0068 9A6F     	 ldr r2,[r3,#120]
 2787 006a 7B68     	 ldr r3,[r7,#4]
 2788 006c 1A60     	 str r2,[r3]
1213:../Dave/Generated/CAPTURE/capture.c ****     /* check for new data or full Flag*/
1214:../Dave/Generated/CAPTURE/capture.c ****     if ((*val_ptr) & CCU4_CC4_CV_FFL_Msk)
 2789              	 .loc 2 1214 0
 2790 006e 7B68     	 ldr r3,[r7,#4]
 2791 0070 1A68     	 ldr r2,[r3]
 2792 0072 8023     	 mov r3,#128
 2793 0074 5B03     	 lsl r3,r3,#13
 2794 0076 1340     	 and r3,r2
 2795 0078 04D0     	 beq .L142
1215:../Dave/Generated/CAPTURE/capture.c ****     {
1216:../Dave/Generated/CAPTURE/capture.c ****       retval = CAPTURE_STATUS_SUCCESS;
 2796              	 .loc 2 1216 0
 2797 007a 1F23     	 mov r3,#31
 2798 007c FB18     	 add r3,r7,r3
 2799 007e 0022     	 mov r2,#0
 2800 0080 1A70     	 strb r2,[r3]
 2801 0082 0EE0     	 b .L141
 2802              	.L142:
 2803              	.LBB22:
1217:../Dave/Generated/CAPTURE/capture.c ****     }
1218:../Dave/Generated/CAPTURE/capture.c ****     else
1219:../Dave/Generated/CAPTURE/capture.c ****     {
1220:../Dave/Generated/CAPTURE/capture.c ****       volatile uint32_t capture_reg_value_low;
1221:../Dave/Generated/CAPTURE/capture.c ****       capture_reg_value_low = slice->CV[CAPTURE_SLICE_CAP_REGISTER_0];
 2804              	 .loc 2 1221 0
 2805 0084 FB68     	 ldr r3,[r7,#12]
 2806 0086 5B6F     	 ldr r3,[r3,#116]
 2807 0088 7B61     	 str r3,[r7,#20]
1222:../Dave/Generated/CAPTURE/capture.c ****       /* check for new data or full Flag*/
1223:../Dave/Generated/CAPTURE/capture.c ****       if (capture_reg_value_low & CCU4_CC4_CV_FFL_Msk)
 2808              	 .loc 2 1223 0
 2809 008a 7A69     	 ldr r2,[r7,#20]
 2810 008c 8023     	 mov r3,#128
 2811 008e 5B03     	 lsl r3,r3,#13
 2812 0090 1340     	 and r3,r2
 2813 0092 06D0     	 beq .L141
1224:../Dave/Generated/CAPTURE/capture.c ****       {
1225:../Dave/Generated/CAPTURE/capture.c ****         retval = CAPTURE_STATUS_SUCCESS;
 2814              	 .loc 2 1225 0
 2815 0094 1F23     	 mov r3,#31
 2816 0096 FB18     	 add r3,r7,r3
 2817 0098 0022     	 mov r2,#0
 2818 009a 1A70     	 strb r2,[r3]
1226:../Dave/Generated/CAPTURE/capture.c ****         *val_ptr = capture_reg_value_low;
 2819              	 .loc 2 1226 0
 2820 009c 7A69     	 ldr r2,[r7,#20]
 2821 009e 7B68     	 ldr r3,[r7,#4]
 2822 00a0 1A60     	 str r2,[r3]
 2823              	.L141:
 2824              	.LBE22:
1227:../Dave/Generated/CAPTURE/capture.c ****       }
1228:../Dave/Generated/CAPTURE/capture.c ****     }
1229:../Dave/Generated/CAPTURE/capture.c ****   }
1230:../Dave/Generated/CAPTURE/capture.c **** 
1231:../Dave/Generated/CAPTURE/capture.c ****   return retval;
 2825              	 .loc 2 1231 0
 2826 00a2 1F23     	 mov r3,#31
 2827 00a4 FB18     	 add r3,r7,r3
 2828 00a6 1B78     	 ldrb r3,[r3]
1232:../Dave/Generated/CAPTURE/capture.c **** }
 2829              	 .loc 2 1232 0
 2830 00a8 181C     	 mov r0,r3
 2831 00aa BD46     	 mov sp,r7
 2832 00ac 08B0     	 add sp,sp,#32
 2833              	 
 2834 00ae 80BD     	 pop {r7,pc}
 2835              	 .cfi_endproc
 2836              	.LFE142:
 2838              	 .text
 2839              	.Letext0:
 2840              	 .file 4 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2841              	 .file 5 "c:\\dave\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2842              	 .file 6 "C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 2843              	 .file 7 "C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc/xmc1_scu.h"
 2844              	 .file 8 "C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Dave/Generated/DAVE_Common.h"
 2845              	 .file 9 "C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Dave/Generated/GLOBAL_CCU4/global_ccu4.h"
 2846              	 .file 10 "C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc/xmc_gpio.h"
 2847              	 .file 11 "C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/XMCLib/inc/xmc1_gpio.h"
 2848              	 .file 12 "../Dave/Generated/CAPTURE/capture.h"
 2849              	 .file 13 "C:/GitHub/MobRob_Rover_NEW/Steering_Controller/MobRob_Steering_Controller/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 capture.c
    {standard input}:18     .text.XMC_CCU4_EnableClock:00000000 $t
    {standard input}:22     .text.XMC_CCU4_EnableClock:00000000 XMC_CCU4_EnableClock
    {standard input}:58     .text.XMC_CCU4_SLICE_IsTimerRunning:00000000 $t
    {standard input}:62     .text.XMC_CCU4_SLICE_IsTimerRunning:00000000 XMC_CCU4_SLICE_IsTimerRunning
    {standard input}:96     .text.XMC_CCU4_SLICE_StartTimer:00000000 $t
    {standard input}:100    .text.XMC_CCU4_SLICE_StartTimer:00000000 XMC_CCU4_SLICE_StartTimer
    {standard input}:129    .text.XMC_CCU4_SLICE_StopTimer:00000000 $t
    {standard input}:133    .text.XMC_CCU4_SLICE_StopTimer:00000000 XMC_CCU4_SLICE_StopTimer
    {standard input}:162    .text.XMC_CCU4_SLICE_ClearTimer:00000000 $t
    {standard input}:166    .text.XMC_CCU4_SLICE_ClearTimer:00000000 XMC_CCU4_SLICE_ClearTimer
    {standard input}:195    .text.XMC_CCU4_SLICE_SetTimerPeriodMatch:00000000 $t
    {standard input}:199    .text.XMC_CCU4_SLICE_SetTimerPeriodMatch:00000000 XMC_CCU4_SLICE_SetTimerPeriodMatch
    {standard input}:232    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 $t
    {standard input}:236    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 XMC_CCU4_SLICE_SetTimerCompareMatch
    {standard input}:269    .text.XMC_CCU4_EnableShadowTransfer:00000000 $t
    {standard input}:273    .text.XMC_CCU4_EnableShadowTransfer:00000000 XMC_CCU4_EnableShadowTransfer
    {standard input}:303    .text.CAPTURE_GetAppVersion:00000000 $t
    {standard input}:308    .text.CAPTURE_GetAppVersion:00000000 CAPTURE_GetAppVersion
    {standard input}:374    .text.CAPTURE_GetAppVersion:00000058 $d
    {standard input}:380    .text.CAPTURE_Init:00000000 $t
    {standard input}:385    .text.CAPTURE_Init:00000000 CAPTURE_Init
    {standard input}:2246   .text.CAPTURE_CCU4_lInit:00000000 CAPTURE_CCU4_lInit
    {standard input}:500    .text.CAPTURE_Start:00000000 CAPTURE_Start
    {standard input}:495    .text.CAPTURE_Start:00000000 $t
    {standard input}:583    .text.CAPTURE_Stop:00000000 $t
    {standard input}:588    .text.CAPTURE_Stop:00000000 CAPTURE_Stop
    {standard input}:649    .text.CAPTURE_GetTimerStatus:00000000 $t
    {standard input}:654    .text.CAPTURE_GetTimerStatus:00000000 CAPTURE_GetTimerStatus
    {standard input}:721    .text.CAPTURE_GetCapturedTime:00000000 $t
    {standard input}:726    .text.CAPTURE_GetCapturedTime:00000000 CAPTURE_GetCapturedTime
    {standard input}:2707   .text.CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue:00000000 CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue
    {standard input}:2382   .text.CAPTURE_lCalculateTimeTickFromTimerValue:00000000 CAPTURE_lCalculateTimeTickFromTimerValue
    {standard input}:895    .text.CAPTURE_GetCapturedTimeInNanoSec:00000000 $t
    {standard input}:900    .text.CAPTURE_GetCapturedTimeInNanoSec:00000000 CAPTURE_GetCapturedTimeInNanoSec
    {standard input}:2542   .text.CAPTURE_lCalculateTimeInNanoSecFromTimerTick:00000000 CAPTURE_lCalculateTimeInNanoSecFromTimerTick
    {standard input}:1099   .text.CAPTURE_GetDutyCycle:00000000 $t
    {standard input}:1104   .text.CAPTURE_GetDutyCycle:00000000 CAPTURE_GetDutyCycle
    {standard input}:1229   .text.CAPTURE_GetDutyCycleInPercentage:00000000 $t
    {standard input}:1234   .text.CAPTURE_GetDutyCycleInPercentage:00000000 CAPTURE_GetDutyCycleInPercentage
    {standard input}:1469   .text.CAPTURE_GetPeriod:00000000 $t
    {standard input}:1474   .text.CAPTURE_GetPeriod:00000000 CAPTURE_GetPeriod
    {standard input}:1628   .text.CAPTURE_GetPeriodInNanoSec:00000000 $t
    {standard input}:1633   .text.CAPTURE_GetPeriodInNanoSec:00000000 CAPTURE_GetPeriodInNanoSec
    {standard input}:1803   .text.CAPTURE_GetPeriodDutyCycle:00000000 $t
    {standard input}:1808   .text.CAPTURE_GetPeriodDutyCycle:00000000 CAPTURE_GetPeriodDutyCycle
    {standard input}:1970   .text.CAPTURE_GetPeriodInNanoSecDutyCycleInPercentage:00000000 $t
    {standard input}:1975   .text.CAPTURE_GetPeriodInNanoSecDutyCycleInPercentage:00000000 CAPTURE_GetPeriodInNanoSecDutyCycleInPercentage
    {standard input}:2242   .text.CAPTURE_CCU4_lInit:00000000 $t
    {standard input}:2327   .text.CAPTURE_CCU4_lShadowTransfer:00000000 CAPTURE_CCU4_lShadowTransfer
    {standard input}:2323   .text.CAPTURE_CCU4_lShadowTransfer:00000000 $t
    {standard input}:2373   .text.CAPTURE_CCU4_lShadowTransfer:0000003c $d
    {standard input}:2378   .text.CAPTURE_lCalculateTimeTickFromTimerValue:00000000 $t
    {standard input}:2531   .text.CAPTURE_lCalculateTimeTickFromTimerValue:000000cc $d
    {standard input}:2538   .text.CAPTURE_lCalculateTimeInNanoSecFromTimerTick:00000000 $t
    {standard input}:2698   .text.CAPTURE_lCalculateTimeInNanoSecFromTimerTick:000000d4 $d
    {standard input}:2703   .text.CAPTURE_CCU4_lSLICE_GetLastestCapturedTimerValue:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GLOBAL_CCU4_Init
XMC_GPIO_Init
__clzsi2
__aeabi_uidiv
XMC_CCU4_SLICE_CaptureInit
XMC_CCU4_SLICE_ConfigureEvent
XMC_CCU4_SLICE_Capture0Config
XMC_CCU4_SLICE_Capture1Config
__aeabi_lmul
__aeabi_uldivmod
